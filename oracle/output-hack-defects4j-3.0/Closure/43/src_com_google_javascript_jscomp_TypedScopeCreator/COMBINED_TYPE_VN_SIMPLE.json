{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[4535-72413]:TypeDeclaration[4535-73014]"
    }, {
      "left" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "right" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "info" : "FieldDeclaration[5090-5264]:FieldDeclaration[5090-5264]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[5268-5445]:FieldDeclaration[5268-5445]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5449-5636]:FieldDeclaration[5449-5636]"
    }, {
      "left" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5640-5824]:FieldDeclaration[5640-5824]"
    }, {
      "left" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5828-6013]:FieldDeclaration[5828-6013]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[6017-6196]:FieldDeclaration[6017-6196]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "right" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "info" : "FieldDeclaration[6200-6370]:FieldDeclaration[6200-6370]"
    }, {
      "left" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "right" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "info" : "FieldDeclaration[6374-6564]:FieldDeclaration[6374-6564]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6568-6608]:FieldDeclaration[6568-6608]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[6611-6664]:FieldDeclaration[6611-6664]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[6667-6705]:FieldDeclaration[6667-6705]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[6708-6756]:FieldDeclaration[6708-6756]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[6759-6801]:FieldDeclaration[6759-6801]"
    }, {
      "left" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[6804-6882]:FieldDeclaration[6804-6882]"
    }, {
      "left" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "right" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[6885-6972]:FieldDeclaration[6885-6972]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "right" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[7025-7120]:FieldDeclaration[7025-7120]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[7124-7797]:TypeDeclaration[7124-7797]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[7303-7319]:FieldDeclaration[7303-7319]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[7324-7342]:FieldDeclaration[7324-7342]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[7348-7685]:MethodDeclaration[7348-7685]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[7691-7793]:MethodDeclaration[7691-7793]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[7801-7903]:MethodDeclaration[7801-7903]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[7907-8245]:MethodDeclaration[7907-8245]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[8249-10357]:MethodDeclaration[8249-10357]"
    }, {
      "left" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "right" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "info" : "MethodDeclaration[10361-12314]:MethodDeclaration[10361-12314]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[12318-13846]:MethodDeclaration[12318-13846]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[13850-14154]:MethodDeclaration[13850-14154]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[14158-14318]:MethodDeclaration[14158-14318]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[14322-14441]:MethodDeclaration[14322-14441]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "TypeDeclaration[14445-15966]:TypeDeclaration[14445-15966]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[14544-14582]:FieldDeclaration[14544-14582]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "right" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[14588-14677]:MethodDeclaration[14588-14677]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[14683-15524]:MethodDeclaration[14683-15524]"
    }, {
      "left" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "right" : "private void identifyNameNode(\n        Node nameNode, Node valueNode, JSDocInfo info)",
      "info" : "MethodDeclaration[15530-15962]:MethodDeclaration[15530-15962]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[15970-16080]:MethodDeclaration[15970-16080]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[16084-64624]:TypeDeclaration[16084-65225]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[16175-16247]:FieldDeclaration[16175-16247]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16253-16337]:FieldDeclaration[16253-16337]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[16343-16497]:FieldDeclaration[16343-16497]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16915-17169]:FieldDeclaration[16965-17219]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[17175-17270]:FieldDeclaration[17225-17320]"
    }, {
      "left" : "private InputId inputId;",
      "right" : "private InputId inputId;",
      "info" : "FieldDeclaration[17276-17356]:FieldDeclaration[17326-17406]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[17362-17437]:MethodDeclaration[17412-17487]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[17443-17556]:MethodDeclaration[17493-17606]"
    }, {
      "left" : "void resolveTypes()",
      "right" : "void resolveTypes()",
      "info" : "MethodDeclaration[17562-18062]:MethodDeclaration[17612-18112]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[18068-19111]:MethodDeclaration[18118-19161]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19117-20638]:MethodDeclaration[19167-20932]"
    }, {
      "left" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "right" : "private void attachLiteralTypes(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[20644-21668]:MethodDeclaration[20938-22269]"
    }, {
      "left" : "private void defineObjectLiteral(Node objectLit)",
      "right" : "private void defineObjectLiteral(Node objectLit)",
      "info" : "MethodDeclaration[21674-23348]:MethodDeclaration[22275-23949]"
    }, {
      "left" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "right" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "info" : "MethodDeclaration[23354-25122]:MethodDeclaration[23955-25723]"
    }, {
      "left" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "private JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[25128-26032]:MethodDeclaration[25729-26633]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[26038-26338]:MethodDeclaration[26639-26939]"
    }, {
      "left" : "void defineCatch(Node n, Node parent)",
      "right" : "void defineCatch(Node n, Node parent)",
      "info" : "MethodDeclaration[26344-26563]:MethodDeclaration[26945-27164]"
    }, {
      "left" : "void defineVar(Node n, Node parent)",
      "right" : "void defineVar(Node n, Node parent)",
      "info" : "MethodDeclaration[26569-27195]:MethodDeclaration[27170-27796]"
    }, {
      "left" : "void defineFunctionLiteral(Node n, Node parent)",
      "right" : "void defineFunctionLiteral(Node n, Node parent)",
      "info" : "MethodDeclaration[27201-28101]:MethodDeclaration[27802-28702]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[28107-28911]:MethodDeclaration[28708-29512]"
    }, {
      "left" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "right" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "info" : "MethodDeclaration[28917-29591]:MethodDeclaration[29518-30192]"
    }, {
      "left" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "right" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[29597-34411]:MethodDeclaration[30198-35012]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[34417-35284]:MethodDeclaration[35018-35885]"
    }, {
      "left" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "right" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "info" : "MethodDeclaration[35290-37610]:MethodDeclaration[35891-38211]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[37616-38140]:MethodDeclaration[38217-38741]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[38146-39323]:MethodDeclaration[38747-39924]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "info" : "MethodDeclaration[39330-45560]:MethodDeclaration[39931-46161]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[45566-45806]:MethodDeclaration[46167-46407]"
    }, {
      "left" : "private Scope getQnameRootScope(Node n)",
      "right" : "private Scope getQnameRootScope(Node n)",
      "info" : "MethodDeclaration[45812-46159]:MethodDeclaration[46413-46760]"
    }, {
      "left" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "right" : "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue)",
      "info" : "MethodDeclaration[46165-48642]:MethodDeclaration[46766-49243]"
    }, {
      "left" : "private FunctionType getFunctionType(@Nullable Var v)",
      "right" : "private FunctionType getFunctionType(@Nullable Var v)",
      "info" : "MethodDeclaration[48648-48859]:MethodDeclaration[49249-49460]"
    }, {
      "left" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "right" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "info" : "MethodDeclaration[48865-49180]:MethodDeclaration[49466-49781]"
    }, {
      "left" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "right" : "private void checkForClassDefiningCalls(\n        NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[49186-52100]:MethodDeclaration[49787-52701]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[52106-54017]:MethodDeclaration[52707-54618]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[54023-59126]:MethodDeclaration[54624-59727]"
    }, {
      "left" : "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType)",
      "right" : "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType)",
      "info" : "MethodDeclaration[59132-60967]:MethodDeclaration[59733-61568]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[60973-61521]:MethodDeclaration[61574-62122]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[61527-62840]:MethodDeclaration[62128-63441]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[62846-64595]:TypeDeclaration[63447-65196]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[63067-63101]:FieldDeclaration[63668-63702]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[63109-63191]:MethodDeclaration[63710-63792]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[63199-63682]:MethodDeclaration[63800-64283]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo, @Nullable Node value)",
      "info" : "MethodDeclaration[63690-64589]:MethodDeclaration[64291-65190]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[64628-65017]:TypeDeclaration[65229-65618]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[64743-64767]:FieldDeclaration[65344-65368]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[64772-64803]:FieldDeclaration[65373-65404]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[64808-64839]:FieldDeclaration[65409-65440]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[64845-65013]:MethodDeclaration[65446-65614]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[65021-67232]:TypeDeclaration[65622-67833]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[65207-65274]:MethodDeclaration[65808-65875]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[65280-65854]:MethodDeclaration[65881-66455]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[65860-66102]:MethodDeclaration[66461-66703]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[66108-67228]:MethodDeclaration[66709-67829]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[67262-70434]:TypeDeclaration[67863-71035]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[67437-67570]:MethodDeclaration[68038-68171]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[67576-68059]:MethodDeclaration[68177-68660]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[68065-68599]:MethodDeclaration[68666-69200]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[68605-69470]:MethodDeclaration[69206-70071]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[69476-70406]:MethodDeclaration[70077-71007]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "TypeDeclaration[70463-72120]:TypeDeclaration[71064-72721]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[70731-70771]:FieldDeclaration[71332-71372]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> data;",
      "right" : "private final Map<Node, AstFunctionContents> data;",
      "info" : "FieldDeclaration[70776-70826]:FieldDeclaration[71377-71427]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "right" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "info" : "MethodDeclaration[70832-71003]:MethodDeclaration[71433-71604]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[71009-71276]:MethodDeclaration[71610-71877]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[71282-71463]:MethodDeclaration[71883-72064]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[71469-72116]:MethodDeclaration[72070-72717]"
    }, {
      "left" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "right" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "info" : "MethodDeclaration[72124-72411]:MethodDeclaration[72725-73012]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5032-5037]:Modifier[5032-5037]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5038-5043]:TYPE_DECLARATION_KIND[5038-5043]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[5044-5061]:SimpleName[5044-5061]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[5073-5085]:SimpleType[5073-5085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7267-7274]:Modifier[7267-7274]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7275-7280]:TYPE_DECLARATION_KIND[7275-7280]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7281-7296]:SimpleName[7281-7296]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7348-7363]:SimpleName[7348-7363]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[7364-7373]:SingleVariableDeclaration[7364-7373]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7375-7386]:SingleVariableDeclaration[7375-7386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7388-7685]:Block[7388-7685]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[7396-7429]:ExpressionStatement[7396-7429]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[7436-7469]:ExpressionStatement[7436-7469]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[7476-7493]:ExpressionStatement[7476-7493]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[7500-7517]:ExpressionStatement[7500-7517]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[7658-7679]:ExpressionStatement[7658-7679]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7691-7695]:PrimitiveType[7691-7695]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[7696-7703]:SimpleName[7696-7703]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[7704-7715]:SingleVariableDeclaration[7704-7715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-7793]:Block[7717-7793]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[7725-7787]:ExpressionStatement[7725-7787]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7801-7818]:SimpleName[7801-7818]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7819-7844]:SingleVariableDeclaration[7819-7844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7846-7903]:Block[7846-7903]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[7852-7899]:ConstructorInvocation[7852-7899]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[7907-7924]:SimpleName[7907-7924]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[7925-7950]:SingleVariableDeclaration[7925-7950]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[7958-7991]:SingleVariableDeclaration[7958-7991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7993-8245]:Block[7993-8245]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[7999-8024]:ExpressionStatement[7999-8024]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[8029-8074]:ExpressionStatement[8029-8074]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[8079-8120]:ExpressionStatement[8079-8120]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[8125-8172]:ExpressionStatement[8125-8172]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[8177-8241]:ExpressionStatement[8177-8241]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8386-8395]:MarkerAnnotation[8386-8395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8398-8404]:Modifier[8398-8404]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8405-8410]:SimpleType[8405-8410]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[8411-8422]:SimpleName[8411-8422]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8423-8432]:SingleVariableDeclaration[8423-8432]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[8434-8446]:SingleVariableDeclaration[8434-8446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8448-10357]:Block[8448-10357]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[8643-8665]:VariableDeclarationStatement[8643-8665]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[8670-8711]:VariableDeclarationStatement[8670-8711]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[8716-9420]:IfStatement[8716-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8736-9215]:Block[8736-9215]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "right" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "info" : "ExpressionStatement[8802-8932]:ExpressionStatement[8802-8932]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[8991-9027]:ExpressionStatement[8991-9027]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9035-9108]:VariableDeclarationStatement[9035-9108]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[9115-9149]:ExpressionStatement[9115-9149]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[9156-9209]:ExpressionStatement[9156-9209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9221-9420]:Block[9221-9420]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[9229-9264]:ExpressionStatement[9229-9264]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9271-9341]:VariableDeclarationStatement[9271-9341]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[9348-9381]:ExpressionStatement[9348-9381]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[9388-9414]:ExpressionStatement[9388-9414]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[9426-9465]:ExpressionStatement[9426-9465]"
    }, {
      "left" : "scopeBuilder.resolveTypes();",
      "right" : "scopeBuilder.resolveTypes();",
      "info" : "ExpressionStatement[9470-9498]:ExpressionStatement[9470-9498]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[9666-10138]:EnhancedForStatement[9666-10138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9724-10138]:Block[9724-10138]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[9732-9771]:VariableDeclarationStatement[9732-9771]"
    }, {
      "left" : "if (type != null && type.isFunctionType())",
      "right" : "if (type != null && type.isFunctionType())",
      "info" : "IfStatement[9778-10132]:IfStatement[9778-10132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9821-10132]:Block[9821-10132]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[9831-9880]:VariableDeclarationStatement[9831-9880]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[9889-9936]:VariableDeclarationStatement[9889-9936]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[9945-10124]:IfStatement[9945-10124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9978-10124]:Block[9978-10124]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[9990-10114]:ExpressionStatement[9990-10114]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[10144-10332]:IfStatement[10144-10332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10164-10332]:Block[10164-10332]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[10172-10326]:ExpressionStatement[10172-10326]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[10337-10353]:ReturnStatement[10337-10353]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10646-10650]:PrimitiveType[10646-10650]"
    }, {
      "left" : "patchGlobalScope",
      "right" : "patchGlobalScope",
      "info" : "SimpleName[10651-10667]:SimpleName[10651-10667]"
    }, {
      "left" : "Scope globalScope",
      "right" : "Scope globalScope",
      "info" : "SingleVariableDeclaration[10668-10685]:SingleVariableDeclaration[10668-10685]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[10687-10702]:SingleVariableDeclaration[10687-10702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10704-12314]:Block[10704-12314]"
    }, {
      "left" : "Preconditions.checkState(scriptRoot.isScript());",
      "right" : "Preconditions.checkState(scriptRoot.isScript());",
      "info" : "ExpressionStatement[10859-10907]:ExpressionStatement[10859-10907]"
    }, {
      "left" : "Preconditions.checkNotNull(globalScope);",
      "right" : "Preconditions.checkNotNull(globalScope);",
      "info" : "ExpressionStatement[10912-10952]:ExpressionStatement[10912-10952]"
    }, {
      "left" : "Preconditions.checkState(globalScope.isGlobal());",
      "right" : "Preconditions.checkState(globalScope.isGlobal());",
      "info" : "ExpressionStatement[10957-11006]:ExpressionStatement[10957-11006]"
    }, {
      "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "info" : "VariableDeclarationStatement[11012-11067]:VariableDeclarationStatement[11012-11067]"
    }, {
      "left" : "Preconditions.checkNotNull(scriptName);",
      "right" : "Preconditions.checkNotNull(scriptName);",
      "info" : "ExpressionStatement[11072-11111]:ExpressionStatement[11072-11111]"
    }, {
      "left" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "right" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "info" : "EnhancedForStatement[11116-11311]:EnhancedForStatement[11116-11311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11189-11311]:Block[11189-11311]"
    }, {
      "left" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "right" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "info" : "IfStatement[11197-11305]:IfStatement[11197-11305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11250-11305]:Block[11250-11305]"
    }, {
      "left" : "functionAnalysisResults.remove(node);",
      "right" : "functionAnalysisResults.remove(node);",
      "info" : "ExpressionStatement[11260-11297]:ExpressionStatement[11260-11297]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "right" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "info" : "ExpressionStatement[11317-11420]:ExpressionStatement[11317-11420]"
    }, {
      "left" : "Iterator<Var> varIter = globalScope.getVars();",
      "right" : "Iterator<Var> varIter = globalScope.getVars();",
      "info" : "VariableDeclarationStatement[11723-11769]:VariableDeclarationStatement[11723-11769]"
    }, {
      "left" : "List<Var> varsToRemove = Lists.newArrayList();",
      "right" : "List<Var> varsToRemove = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11774-11820]:VariableDeclarationStatement[11774-11820]"
    }, {
      "left" : "while (varIter.hasNext())",
      "right" : "while (varIter.hasNext())",
      "info" : "WhileStatement[11825-11989]:WhileStatement[11825-11989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11851-11989]:Block[11851-11989]"
    }, {
      "left" : "Var oldVar = varIter.next();",
      "right" : "Var oldVar = varIter.next();",
      "info" : "VariableDeclarationStatement[11859-11887]:VariableDeclarationStatement[11859-11887]"
    }, {
      "left" : "if (scriptName.equals(oldVar.getInputName()))",
      "right" : "if (scriptName.equals(oldVar.getInputName()))",
      "info" : "IfStatement[11894-11983]:IfStatement[11894-11983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11940-11983]:Block[11940-11983]"
    }, {
      "left" : "varsToRemove.add(oldVar);",
      "right" : "varsToRemove.add(oldVar);",
      "info" : "ExpressionStatement[11950-11975]:ExpressionStatement[11950-11975]"
    }, {
      "left" : "for (Var var : varsToRemove)",
      "right" : "for (Var var : varsToRemove)",
      "info" : "EnhancedForStatement[11994-12129]:EnhancedForStatement[11994-12129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12023-12129]:Block[12023-12129]"
    }, {
      "left" : "globalScope.undeclare(var);",
      "right" : "globalScope.undeclare(var);",
      "info" : "ExpressionStatement[12031-12058]:ExpressionStatement[12031-12058]"
    }, {
      "left" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "right" : "globalScope.getTypeOfThis().removeProperty(var.getName());",
      "info" : "ExpressionStatement[12065-12123]:ExpressionStatement[12065-12123]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "info" : "VariableDeclarationStatement[12176-12246]:VariableDeclarationStatement[12176-12246]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "info" : "ExpressionStatement[12251-12310]:ExpressionStatement[12251-12310]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[12446-12464]:MarkerAnnotation[12446-12464]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[12467-12472]:SimpleType[12467-12472]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[12473-12491]:SimpleName[12473-12491]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[12492-12501]:SingleVariableDeclaration[12492-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12503-13846]:Block[12503-13846]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "info" : "ExpressionStatement[12510-12602]:ExpressionStatement[12510-12602]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[12608-12644]:VariableDeclarationStatement[12608-12644]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12649-12699]:ExpressionStatement[12649-12699]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12704-12763]:ExpressionStatement[12704-12763]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12768-12817]:ExpressionStatement[12768-12817]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12822-12872]:ExpressionStatement[12822-12872]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12877-12932]:ExpressionStatement[12877-12932]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12937-12990]:ExpressionStatement[12937-12990]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[12995-13053]:ExpressionStatement[12995-13053]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13058-13109]:ExpressionStatement[13058-13109]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13114-13170]:ExpressionStatement[13114-13170]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13175-13235]:ExpressionStatement[13175-13235]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13240-13291]:ExpressionStatement[13240-13291]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13296-13354]:ExpressionStatement[13296-13354]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13359-13416]:ExpressionStatement[13359-13416]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13421-13476]:ExpressionStatement[13421-13476]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13481-13535]:ExpressionStatement[13481-13535]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[13540-13590]:ExpressionStatement[13540-13590]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[13768-13827]:ExpressionStatement[13768-13827]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[13833-13842]:ReturnStatement[13833-13842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13850-13857]:Modifier[13850-13857]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13858-13862]:PrimitiveType[13858-13862]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[13863-13888]:SimpleName[13863-13888]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[13889-13900]:SingleVariableDeclaration[13889-13900]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[13902-13918]:SingleVariableDeclaration[13902-13918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13920-14154]:Block[13920-14154]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[13926-13983]:VariableDeclarationStatement[13926-13983]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[13988-14056]:ExpressionStatement[13988-14056]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[14061-14150]:ExpressionStatement[14061-14150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14158-14165]:Modifier[14158-14165]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14166-14170]:PrimitiveType[14166-14170]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[14171-14193]:SimpleName[14171-14193]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14194-14205]:SingleVariableDeclaration[14194-14205]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14207-14218]:SingleVariableDeclaration[14207-14218]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[14226-14242]:SingleVariableDeclaration[14226-14242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14244-14318]:Block[14244-14318]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[14250-14314]:ExpressionStatement[14250-14314]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14322-14329]:Modifier[14322-14329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14330-14334]:PrimitiveType[14330-14334]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[14335-14352]:SimpleName[14335-14352]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14353-14364]:SingleVariableDeclaration[14353-14364]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14366-14377]:SingleVariableDeclaration[14366-14377]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[14379-14387]:SingleVariableDeclaration[14379-14387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14389-14441]:Block[14389-14441]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[14395-14437]:ExpressionStatement[14395-14437]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14445-14452]:Modifier[14445-14452]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14453-14459]:Modifier[14453-14459]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14460-14465]:TYPE_DECLARATION_KIND[14460-14465]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14466-14490]:SimpleName[14466-14490]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[14505-14537]:SimpleType[14505-14537]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[14588-14612]:SimpleName[14588-14612]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[14613-14636]:SingleVariableDeclaration[14613-14636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14638-14677]:Block[14638-14677]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[14646-14671]:ExpressionStatement[14646-14671]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14683-14692]:MarkerAnnotation[14683-14692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14697-14703]:Modifier[14697-14703]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14704-14708]:PrimitiveType[14704-14708]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[14709-14714]:SimpleName[14709-14714]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[14715-14730]:SingleVariableDeclaration[14715-14730]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14732-14741]:SingleVariableDeclaration[14732-14741]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[14743-14754]:SingleVariableDeclaration[14743-14754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14756-15524]:Block[14756-15524]"
    }, {
      "left" : "Node nameNode = null;",
      "right" : "Node nameNode = null;",
      "info" : "VariableDeclarationStatement[14764-14785]:VariableDeclarationStatement[14764-14785]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[14792-15518]:SwitchStatement[14792-15518]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14826-14841]:SwitchCase[14826-14841]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[14852-15087]:ForStatement[14852-15087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14947-15087]:Block[14947-15087]"
    }, {
      "left" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "right" : "identifyNameNode(\n                child, child.getFirstChild(),\n                NodeUtil.getBestJSDocInfo(child));",
      "info" : "ExpressionStatement[14961-15075]:ExpressionStatement[14961-15075]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15098-15104]:BreakStatement[15098-15104]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[15113-15136]:SwitchCase[15113-15136]"
    }, {
      "left" : "Node firstChild = node.getFirstChild();",
      "right" : "Node firstChild = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[15147-15186]:VariableDeclarationStatement[15147-15186]"
    }, {
      "left" : "if (firstChild.isAssign())",
      "right" : "if (firstChild.isAssign())",
      "info" : "IfStatement[15197-15493]:IfStatement[15197-15493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15224-15382]:Block[15224-15382]"
    }, {
      "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getLastChild(),\n                firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15238-15370]:ExpressionStatement[15238-15370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15388-15493]:Block[15388-15493]"
    }, {
      "left" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild, null, firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15402-15481]:ExpressionStatement[15402-15481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15504-15510]:BreakStatement[15504-15510]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15530-15537]:Modifier[15530-15537]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15538-15542]:PrimitiveType[15538-15542]"
    }, {
      "left" : "identifyNameNode",
      "right" : "identifyNameNode",
      "info" : "SimpleName[15543-15559]:SimpleName[15543-15559]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[15569-15582]:SingleVariableDeclaration[15569-15582]"
    }, {
      "left" : "Node valueNode",
      "right" : "Node valueNode",
      "info" : "SingleVariableDeclaration[15584-15598]:SingleVariableDeclaration[15584-15598]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[15600-15614]:SingleVariableDeclaration[15600-15614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15616-15962]:Block[15616-15962]"
    }, {
      "left" : "if (nameNode.isQualifiedName())",
      "right" : "if (nameNode.isQualifiedName())",
      "info" : "IfStatement[15624-15956]:IfStatement[15624-15956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15656-15956]:Block[15656-15956]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[15666-15948]:IfStatement[15666-15948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15684-15948]:Block[15684-15948]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[15696-15938]:IfStatement[15696-15938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15729-15817]:Block[15729-15817]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15743-15805]:ExpressionStatement[15743-15805]"
    }, {
      "left" : "if (info.hasTypedefType())",
      "right" : "if (info.hasTypedefType())",
      "info" : "IfStatement[15823-15938]:IfStatement[15823-15938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15850-15938]:Block[15850-15938]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[15864-15926]:ExpressionStatement[15864-15926]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15970-15977]:Modifier[15970-15977]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[15978-15984]:SimpleType[15978-15984]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[15985-15998]:SimpleName[15985-15998]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[15999-16022]:SingleVariableDeclaration[15999-16022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16024-16080]:Block[16024-16080]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[16030-16076]:ReturnStatement[16030-16076]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16084-16091]:Modifier[16084-16091]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[16092-16100]:Modifier[16092-16100]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[16101-16106]:TYPE_DECLARATION_KIND[16101-16106]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[16107-16127]:SimpleName[16107-16127]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[16145-16167]:SimpleType[16145-16167]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17362-17369]:Modifier[17412-17419]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[17370-17390]:SimpleName[17420-17440]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[17391-17402]:SingleVariableDeclaration[17441-17452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17404-17437]:Block[17454-17487]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[17412-17431]:ExpressionStatement[17462-17481]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17443-17447]:PrimitiveType[17493-17497]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[17448-17463]:SimpleName[17498-17513]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17464-17473]:SingleVariableDeclaration[17514-17523]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[17475-17486]:SingleVariableDeclaration[17525-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17488-17556]:Block[17538-17606]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[17496-17550]:ExpressionStatement[17546-17600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17562-17566]:PrimitiveType[17612-17616]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[17567-17579]:SimpleName[17617-17629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17582-18062]:Block[17632-18112]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[17639-17731]:EnhancedForStatement[17689-17781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17689-17731]:Block[17739-17781]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[17699-17723]:ExpressionStatement[17749-17773]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[17794-17831]:VariableDeclarationStatement[17844-17881]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[17838-17929]:WhileStatement[17888-17979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17861-17929]:Block[17911-17979]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[17871-17921]:ExpressionStatement[17921-17971]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[18016-18056]:ExpressionStatement[18066-18106]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18068-18077]:MarkerAnnotation[18118-18127]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18082-18088]:Modifier[18132-18138]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18089-18094]:Modifier[18139-18144]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18095-18102]:PrimitiveType[18145-18152]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[18103-18117]:SimpleName[18153-18167]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18118-18133]:SingleVariableDeclaration[18168-18183]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18135-18141]:SingleVariableDeclaration[18185-18191]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18151-18162]:SingleVariableDeclaration[18201-18212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18164-19111]:Block[18214-19161]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[18172-18197]:ExpressionStatement[18222-18247]"
    }, {
      "left" : "if (n.isFunction() ||\n          n.isScript())",
      "right" : "if (n.isFunction() ||\n          n.isScript())",
      "info" : "IfStatement[18204-18352]:IfStatement[18254-18402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18250-18352]:Block[18300-18402]"
    }, {
      "left" : "Preconditions.checkNotNull(inputId);",
      "right" : "Preconditions.checkNotNull(inputId);",
      "info" : "ExpressionStatement[18260-18296]:ExpressionStatement[18310-18346]"
    }, {
      "left" : "sourceName = NodeUtil.getSourceName(n);",
      "right" : "sourceName = NodeUtil.getSourceName(n);",
      "info" : "ExpressionStatement[18305-18344]:ExpressionStatement[18355-18394]"
    }, {
      "left" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "VariableDeclarationStatement[18484-18615]:VariableDeclarationStatement[18534-18665]"
    }, {
      "left" : "if (descend)",
      "right" : "if (descend)",
      "info" : "IfStatement[18623-19082]:IfStatement[18673-19132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18636-19082]:Block[18686-19132]"
    }, {
      "left" : "if (NodeUtil.isStatementParent(n))",
      "right" : "if (NodeUtil.isStatementParent(n))",
      "info" : "IfStatement[18772-19074]:IfStatement[18822-19124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18807-19074]:Block[18857-19124]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "info" : "ForStatement[18819-19064]:ForStatement[18869-19114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18926-19064]:Block[18976-19114]"
    }, {
      "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "info" : "IfStatement[18940-19052]:IfStatement[18990-19102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18990-19052]:Block[19040-19102]"
    }, {
      "left" : "defineFunctionLiteral(child, n);",
      "right" : "defineFunctionLiteral(child, n);",
      "info" : "ExpressionStatement[19006-19038]:ExpressionStatement[19056-19088]"
    }, {
      "left" : "return descend;",
      "right" : "return descend;",
      "info" : "ReturnStatement[19090-19105]:ReturnStatement[19140-19155]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19117-19126]:MarkerAnnotation[19167-19176]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19131-19137]:Modifier[19181-19187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19138-19142]:PrimitiveType[19188-19192]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[19143-19148]:SimpleName[19193-19198]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19149-19164]:SingleVariableDeclaration[19199-19214]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19166-19172]:SingleVariableDeclaration[19216-19222]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19174-19185]:SingleVariableDeclaration[19224-19235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19187-20638]:Block[19237-20932]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[19195-19220]:ExpressionStatement[19245-19270]"
    }, {
      "left" : "attachLiteralTypes(t, n);",
      "right" : "attachLiteralTypes(t, n);",
      "info" : "ExpressionStatement[19227-19252]:ExpressionStatement[19277-19302]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n, parent);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n, parent);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[19260-20568]:SwitchStatement[19310-20618]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[19291-19307]:SwitchCase[19341-19357]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n, parent);",
      "right" : "checkForClassDefiningCalls(t, n, parent);",
      "info" : "ExpressionStatement[19318-19359]:ExpressionStatement[19368-19409]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "info" : "ExpressionStatement[19370-19440]:ExpressionStatement[19420-19490]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19451-19457]:BreakStatement[19501-19507]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[19467-19487]:SwitchCase[19517-19537]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[19498-19604]:IfStatement[19548-19654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19552-19604]:Block[19602-19654]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[19566-19592]:ExpressionStatement[19616-19642]"
    }, {
      "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[19681-19787]:IfStatement[19731-19837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19728-19787]:Block[19778-19837]"
    }, {
      "left" : "defineFunctionLiteral(n, parent);",
      "right" : "defineFunctionLiteral(n, parent);",
      "info" : "ExpressionStatement[19742-19775]:ExpressionStatement[19792-19825]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19798-19804]:BreakStatement[19848-19854]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[19814-19832]:SwitchCase[19864-19882]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19893-19929]:VariableDeclarationStatement[19943-19979]"
    }, {
      "left" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[19940-20140]:IfStatement[19990-20190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20014-20140]:Block[20064-20190]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[20028-20128]:ExpressionStatement[20078-20178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20151-20157]:BreakStatement[20201-20207]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[20167-20184]:SwitchCase[20217-20234]"
    }, {
      "left" : "defineCatch(n, parent);",
      "right" : "defineCatch(n, parent);",
      "info" : "ExpressionStatement[20195-20218]:ExpressionStatement[20245-20268]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20229-20235]:BreakStatement[20279-20285]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[20245-20260]:SwitchCase[20295-20310]"
    }, {
      "left" : "defineVar(n, parent);",
      "right" : "defineVar(n, parent);",
      "info" : "ExpressionStatement[20271-20292]:ExpressionStatement[20321-20342]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20303-20309]:BreakStatement[20353-20359]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[20319-20338]:SwitchCase[20369-20388]"
    }, {
      "left" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "right" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "info" : "IfStatement[20389-20543]:IfStatement[20439-20593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20453-20543]:Block[20503-20593]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[20467-20531]:ExpressionStatement[20517-20581]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20554-20560]:BreakStatement[20604-20610]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20644-20651]:Modifier[20938-20945]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20652-20656]:PrimitiveType[20946-20950]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[20657-20675]:SimpleName[20951-20969]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20676-20691]:SingleVariableDeclaration[20970-20985]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20693-20699]:SingleVariableDeclaration[20987-20993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20701-21668]:Block[20995-22269]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n            defineObjectLiteral(n);\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          // Defer keys to the Token.OBJECTLIT case\n          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n            n.setJSType(getNativeType(STRING_TYPE));\n          }\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "info" : "SwitchStatement[20709-21662]:SwitchStatement[21003-22263]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[20740-20756]:SwitchCase[21034-21050]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[20767-20805]:ExpressionStatement[21061-21099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20816-20822]:BreakStatement[21110-21116]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[20832-20848]:SwitchCase[21126-21142]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[20859-20897]:ExpressionStatement[21153-21191]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20908-20914]:BreakStatement[21202-21208]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[20924-20942]:SwitchCase[21218-21236]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
      "info" : "IfStatement[21005-21119]:IfStatement[21299-21413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21053-21119]:Block[21347-21413]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[21067-21107]:ExpressionStatement[21361-21401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21130-21136]:BreakStatement[21424-21430]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[21146-21164]:SwitchCase[21440-21458]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[21175-21215]:ExpressionStatement[21469-21509]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21226-21232]:BreakStatement[21520-21526]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[21242-21258]:SwitchCase[21536-21552]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[21267-21284]:SwitchCase[21561-21578]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[21295-21336]:ExpressionStatement[21589-21630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21347-21353]:BreakStatement[21641-21647]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[21363-21381]:SwitchCase[21657-21675]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[21392-21432]:ExpressionStatement[21686-21726]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21443-21449]:BreakStatement[21737-21743]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[21459-21480]:SwitchCase[21753-21774]"
    }, {
      "left" : "defineObjectLiteral(n);",
      "right" : "defineObjectLiteral(n);",
      "info" : "ExpressionStatement[21493-21516]:ExpressionStatement[22082-22105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21527-21533]:BreakStatement[22128-22134]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21674-21681]:Modifier[22275-22282]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21682-21686]:PrimitiveType[22283-22287]"
    }, {
      "left" : "defineObjectLiteral",
      "right" : "defineObjectLiteral",
      "info" : "SimpleName[21687-21706]:SimpleName[22288-22307]"
    }, {
      "left" : "Node objectLit",
      "right" : "Node objectLit",
      "info" : "SingleVariableDeclaration[21707-21721]:SingleVariableDeclaration[22308-22322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21723-23348]:Block[22324-23949]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[21770-21789]:VariableDeclarationStatement[22371-22390]"
    }, {
      "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[21796-21838]:VariableDeclarationStatement[22397-22439]"
    }, {
      "left" : "if (info != null &&\n          info.getLendsName() != null)",
      "right" : "if (info != null &&\n          info.getLendsName() != null)",
      "info" : "IfStatement[21845-22634]:IfStatement[22446-23235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21904-22634]:Block[22505-23235]"
    }, {
      "left" : "String lendsName = info.getLendsName();",
      "right" : "String lendsName = info.getLendsName();",
      "info" : "VariableDeclarationStatement[21914-21953]:VariableDeclarationStatement[22515-22554]"
    }, {
      "left" : "Var lendsVar = scope.getVar(lendsName);",
      "right" : "Var lendsVar = scope.getVar(lendsName);",
      "info" : "VariableDeclarationStatement[21962-22001]:VariableDeclarationStatement[22563-22602]"
    }, {
      "left" : "if (lendsVar == null)",
      "right" : "if (lendsVar == null)",
      "info" : "IfStatement[22010-22626]:IfStatement[22611-23227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22032-22148]:Block[22633-22749]"
    }, {
      "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "info" : "ExpressionStatement[22044-22138]:ExpressionStatement[22645-22739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22154-22626]:Block[22755-23227]"
    }, {
      "left" : "type = lendsVar.getType();",
      "right" : "type = lendsVar.getType();",
      "info" : "ExpressionStatement[22166-22192]:ExpressionStatement[22767-22793]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[22203-22295]:IfStatement[22804-22896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22221-22295]:Block[22822-22896]"
    }, {
      "left" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "type = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[22235-22283]:ExpressionStatement[22836-22884]"
    }, {
      "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[22306-22616]:IfStatement[22907-23217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22368-22558]:Block[22969-23159]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "info" : "ExpressionStatement[22382-22521]:ExpressionStatement[22983-23122]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[22534-22546]:ExpressionStatement[23135-23147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22564-22616]:Block[23165-23217]"
    }, {
      "left" : "objectLit.setJSType(type);",
      "right" : "objectLit.setJSType(type);",
      "info" : "ExpressionStatement[22578-22604]:ExpressionStatement[23179-23205]"
    }, {
      "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "info" : "ExpressionStatement[22642-22686]:ExpressionStatement[23243-23287]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "info" : "VariableDeclarationStatement[22693-22741]:VariableDeclarationStatement[23294-23342]"
    }, {
      "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[22748-22803]:VariableDeclarationStatement[23349-23404]"
    }, {
      "left" : "boolean createdEnumType = false;",
      "right" : "boolean createdEnumType = false;",
      "info" : "VariableDeclarationStatement[22810-22842]:VariableDeclarationStatement[23411-23443]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[22849-23016]:IfStatement[23450-23617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22898-23016]:Block[23499-23617]"
    }, {
      "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "info" : "ExpressionStatement[22908-22976]:ExpressionStatement[23509-23577]"
    }, {
      "left" : "createdEnumType = true;",
      "right" : "createdEnumType = true;",
      "info" : "ExpressionStatement[22985-23008]:ExpressionStatement[23586-23609]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[23024-23108]:IfStatement[23625-23709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23042-23108]:Block[23643-23709]"
    }, {
      "left" : "type = typeRegistry.createAnonymousObjectType();",
      "right" : "type = typeRegistry.createAnonymousObjectType();",
      "info" : "ExpressionStatement[23052-23100]:ExpressionStatement[23653-23701]"
    }, {
      "left" : "setDeferredType(objectLit, type);",
      "right" : "setDeferredType(objectLit, type);",
      "info" : "ExpressionStatement[23116-23149]:ExpressionStatement[23717-23750]"
    }, {
      "left" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "right" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "info" : "ExpressionStatement[23235-23342]:ExpressionStatement[23836-23943]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23740-23744]:PrimitiveType[24341-24345]"
    }, {
      "left" : "processObjectLitProperties",
      "right" : "processObjectLitProperties",
      "info" : "SimpleName[23745-23771]:SimpleName[24346-24372]"
    }, {
      "left" : "Node objLit",
      "right" : "Node objLit",
      "info" : "SingleVariableDeclaration[23781-23792]:SingleVariableDeclaration[24382-24393]"
    }, {
      "left" : "ObjectType objLitType",
      "right" : "ObjectType objLitType",
      "info" : "SingleVariableDeclaration[23794-23815]:SingleVariableDeclaration[24395-24416]"
    }, {
      "left" : "boolean declareOnOwner",
      "right" : "boolean declareOnOwner",
      "info" : "SingleVariableDeclaration[23825-23847]:SingleVariableDeclaration[24426-24448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23849-25122]:Block[24450-25723]"
    }, {
      "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "info" : "ForStatement[23857-25116]:ForStatement[24458-25717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23958-25116]:Block[24559-25717]"
    }, {
      "left" : "Node value = keyNode.getFirstChild();",
      "right" : "Node value = keyNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[23968-24005]:VariableDeclarationStatement[24569-24606]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "info" : "VariableDeclarationStatement[24014-24072]:VariableDeclarationStatement[24615-24673]"
    }, {
      "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[24081-24121]:VariableDeclarationStatement[24682-24722]"
    }, {
      "left" : "JSType valueType =\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);",
      "right" : "JSType valueType =\n            getDeclaredType(keyNode.getSourceFileName(), info, keyNode, value);",
      "info" : "VariableDeclarationStatement[24130-24228]:VariableDeclarationStatement[24731-24829]"
    }, {
      "left" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "right" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "info" : "VariableDeclarationStatement[24237-24416]:VariableDeclarationStatement[24838-25017]"
    }, {
      "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "info" : "VariableDeclarationStatement[24531-24590]:VariableDeclarationStatement[25132-25191]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[24599-24839]:IfStatement[25200-25440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24626-24756]:Block[25227-25357]"
    }, {
      "left" : "boolean inferred = keyType == null;",
      "right" : "boolean inferred = keyType == null;",
      "info" : "VariableDeclarationStatement[24638-24673]:VariableDeclarationStatement[25239-25274]"
    }, {
      "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "info" : "ExpressionStatement[24684-24746]:ExpressionStatement[25285-25347]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[24762-24839]:IfStatement[25363-25440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24783-24839]:Block[25384-25440]"
    }, {
      "left" : "setDeferredType(keyNode, keyType);",
      "right" : "setDeferredType(keyNode, keyType);",
      "info" : "ExpressionStatement[24795-24829]:ExpressionStatement[25396-25430]"
    }, {
      "left" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "right" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "info" : "IfStatement[24849-25108]:IfStatement[25450-25709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24910-25108]:Block[25511-25709]"
    }, {
      "left" : "boolean isExtern = keyNode.isFromExterns();",
      "right" : "boolean isExtern = keyNode.isFromExterns();",
      "info" : "VariableDeclarationStatement[24980-25023]:VariableDeclarationStatement[25581-25624]"
    }, {
      "left" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "right" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "info" : "ExpressionStatement[25034-25098]:ExpressionStatement[25635-25699]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25358-25365]:Modifier[25959-25966]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[25366-25372]:SimpleType[25967-25973]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[25373-25400]:SimpleName[25974-26001]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[25401-25418]:SingleVariableDeclaration[26002-26019]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[25428-25437]:SingleVariableDeclaration[26029-26038]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[25439-25453]:SingleVariableDeclaration[26040-26054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25455-26032]:Block[26056-26633]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[25463-25484]:VariableDeclarationStatement[26064-26085]"
    }, {
      "left" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "right" : "Node objNode =\n          node.isGetProp() ? node.getFirstChild() :\n          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n          null;",
      "info" : "VariableDeclarationStatement[25491-25652]:VariableDeclarationStatement[26092-26253]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[25659-26005]:IfStatement[26260-26606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25677-26005]:Block[26278-26606]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[25687-25997]:IfStatement[26288-26598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25707-25783]:Block[26308-26384]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[25719-25773]:ExpressionStatement[26320-26374]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[25789-25997]:IfStatement[26390-26598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25846-25997]:Block[26447-26598]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[25858-25898]:VariableDeclarationStatement[26459-26499]"
    }, {
      "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "info" : "ExpressionStatement[25909-25987]:ExpressionStatement[26510-26588]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[26012-26026]:ReturnStatement[26613-26627]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26182-26186]:PrimitiveType[26783-26787]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[26187-26207]:SimpleName[26788-26808]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26208-26214]:SingleVariableDeclaration[26809-26815]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[26216-26224]:SingleVariableDeclaration[26817-26825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26226-26338]:Block[26827-26939]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[26234-26279]:ExpressionStatement[26835-26880]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[26286-26332]:ExpressionStatement[26887-26933]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26394-26398]:PrimitiveType[26995-26999]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[26399-26410]:SimpleName[27000-27011]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26411-26417]:SingleVariableDeclaration[27012-27018]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26419-26430]:SingleVariableDeclaration[27020-27031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26432-26563]:Block[27033-27164]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[26440-26477]:ExpressionStatement[27041-27078]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[26484-26519]:VariableDeclarationStatement[27085-27120]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[26526-26557]:ExpressionStatement[27127-27158]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26622-26626]:PrimitiveType[27223-27227]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[26627-26636]:SimpleName[27228-27237]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26637-26643]:SingleVariableDeclaration[27238-27244]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26645-26656]:SingleVariableDeclaration[27246-27257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26658-27195]:Block[27259-27796]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[26666-26701]:ExpressionStatement[27267-27302]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[26708-26742]:VariableDeclarationStatement[27309-27343]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[26749-27189]:IfStatement[27350-27790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26778-27041]:Block[27379-27642]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[26788-26922]:IfStatement[27389-27523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26806-26922]:Block[27407-27523]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[26849-26912]:ExpressionStatement[27450-27513]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[26931-27033]:EnhancedForStatement[27532-27634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26962-27033]:Block[27563-27634]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[26974-27023]:ExpressionStatement[27575-27624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27047-27189]:Block[27648-27790]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[27057-27087]:VariableDeclarationStatement[27658-27688]"
    }, {
      "left" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n            (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[27096-27181]:ExpressionStatement[27697-27782]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27252-27256]:PrimitiveType[27853-27857]"
    }, {
      "left" : "defineFunctionLiteral",
      "right" : "defineFunctionLiteral",
      "info" : "SimpleName[27257-27278]:SimpleName[27858-27879]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27279-27285]:SingleVariableDeclaration[27880-27886]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[27287-27298]:SingleVariableDeclaration[27888-27899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27300-28101]:Block[27901-28702]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[27308-27348]:ExpressionStatement[27909-27949]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(n);",
      "right" : "Node lValue = NodeUtil.getBestLValue(n);",
      "info" : "VariableDeclarationStatement[27462-27502]:VariableDeclarationStatement[28063-28103]"
    }, {
      "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[27509-27555]:VariableDeclarationStatement[28110-28156]"
    }, {
      "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[27562-27619]:VariableDeclarationStatement[28163-28220]"
    }, {
      "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "info" : "VariableDeclarationStatement[27626-27723]:VariableDeclarationStatement[28227-28324]"
    }, {
      "left" : "setDeferredType(n, functionType);",
      "right" : "setDeferredType(n, functionType);",
      "info" : "ExpressionStatement[27789-27822]:ExpressionStatement[28390-28423]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[27991-28095]:IfStatement[28592-28696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28030-28095]:Block[28631-28696]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[28040-28087]:ExpressionStatement[28641-28688]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28491-28498]:Modifier[29092-29099]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28499-28503]:PrimitiveType[29100-29104]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[28504-28514]:SimpleName[29105-29115]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[28515-28524]:SingleVariableDeclaration[29116-29125]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[28526-28534]:SingleVariableDeclaration[29127-29135]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[28536-28547]:SingleVariableDeclaration[29137-29148]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[28549-28563]:SingleVariableDeclaration[29150-29164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28565-28911]:Block[29166-29512]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[28573-28607]:VariableDeclarationStatement[29174-29208]"
    }, {
      "left" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "right" : "JSType type = getDeclaredType(sourceName, info, name, value);",
      "info" : "VariableDeclarationStatement[28640-28701]:VariableDeclarationStatement[29241-29302]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[28708-28870]:IfStatement[29309-29471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28726-28870]:Block[29327-29471]"
    }, {
      "left" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = name.isFromExterns() ?\n            getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[28785-28862]:ExpressionStatement[29386-29463]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[28877-28905]:ExpressionStatement[29478-29506]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29241-29248]:Modifier[29842-29849]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29249-29256]:PrimitiveType[29850-29857]"
    }, {
      "left" : "shouldUseFunctionLiteralType",
      "right" : "shouldUseFunctionLiteralType",
      "info" : "SimpleName[29257-29285]:SimpleName[29858-29886]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[29295-29312]:SingleVariableDeclaration[29896-29913]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[29314-29328]:SingleVariableDeclaration[29915-29929]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[29330-29341]:SingleVariableDeclaration[29931-29942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29343-29591]:Block[29944-30192]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[29351-29399]:IfStatement[29952-30000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29369-29399]:Block[29970-30000]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29379-29391]:ReturnStatement[29980-29992]"
    }, {
      "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[29406-29522]:IfStatement[30007-30123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29491-29522]:Block[30092-30123]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29501-29514]:ReturnStatement[30102-30115]"
    }, {
      "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "info" : "ReturnStatement[29529-29585]:ReturnStatement[30130-30186]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30618-30625]:Modifier[31219-31226]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[30626-30638]:SimpleType[31227-31239]"
    }, {
      "left" : "createFunctionTypeFromNodes",
      "right" : "createFunctionTypeFromNodes",
      "info" : "SimpleName[30639-30666]:SimpleName[31240-31267]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[30676-30697]:SingleVariableDeclaration[31277-31298]"
    }, {
      "left" : "@Nullable String name",
      "right" : "@Nullable String name",
      "info" : "SingleVariableDeclaration[30707-30728]:SingleVariableDeclaration[31308-31329]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[30738-30762]:SingleVariableDeclaration[31339-31363]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[30772-30797]:SingleVariableDeclaration[31373-31398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30799-34411]:Block[31400-35012]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[30808-30841]:VariableDeclarationStatement[31409-31442]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[30923-31566]:IfStatement[31524-32167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30991-31566]:Block[31592-32167]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[31001-31051]:VariableDeclarationStatement[31602-31652]"
    }, {
      "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "info" : "IfStatement[31060-31558]:IfStatement[31661-32159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31148-31558]:Block[31749-32159]"
    }, {
      "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[31160-31224]:VariableDeclarationStatement[31761-31825]"
    }, {
      "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "info" : "IfStatement[31235-31548]:IfStatement[31836-32149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31350-31548]:Block[31951-32149]"
    }, {
      "left" : "functionType = aliasedType;",
      "right" : "functionType = aliasedType;",
      "info" : "ExpressionStatement[31364-31391]:ExpressionStatement[31965-31992]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[31405-31536]:IfStatement[32006-32137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31443-31536]:Block[32044-32137]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[31459-31522]:ExpressionStatement[32060-32123]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[31574-34359]:IfStatement[32175-34960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31600-34359]:Block[32201-34960]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[31610-31664]:VariableDeclarationStatement[32211-32265]"
    }, {
      "left" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "right" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "info" : "VariableDeclarationStatement[31673-31745]:VariableDeclarationStatement[32274-32346]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[31754-31796]:VariableDeclarationStatement[32355-32397]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[31805-31893]:VariableDeclarationStatement[32406-32494]"
    }, {
      "left" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "right" : "Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;",
      "info" : "VariableDeclarationStatement[31902-31963]:VariableDeclarationStatement[32503-32564]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[31973-32370]:IfStatement[32574-32971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32009-32370]:Block[32610-32971]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[32021-32080]:VariableDeclarationStatement[32622-32681]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[32166-32209]:ExpressionStatement[32767-32810]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[32220-32360]:IfStatement[32821-32961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32247-32360]:Block[32848-32961]"
    }, {
      "left" : "functionType = type.toMaybeFunctionType();",
      "right" : "functionType = type.toMaybeFunctionType();",
      "info" : "ExpressionStatement[32261-32303]:ExpressionStatement[32862-32904]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[32316-32348]:ExpressionStatement[32917-32949]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[32380-34351]:IfStatement[32981-34952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32406-34351]:Block[33007-34952]"
    }, {
      "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "info" : "VariableDeclarationStatement[32473-32530]:VariableDeclarationStatement[33074-33131]"
    }, {
      "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "info" : "VariableDeclarationStatement[32541-32598]:VariableDeclarationStatement[33142-33199]"
    }, {
      "left" : "Var ownerVar = null;",
      "right" : "Var ownerVar = null;",
      "info" : "VariableDeclarationStatement[32609-32629]:VariableDeclarationStatement[33210-33230]"
    }, {
      "left" : "String propName = null;",
      "right" : "String propName = null;",
      "info" : "VariableDeclarationStatement[32640-32663]:VariableDeclarationStatement[33241-33264]"
    }, {
      "left" : "ObjectType ownerType = null;",
      "right" : "ObjectType ownerType = null;",
      "info" : "VariableDeclarationStatement[32674-32702]:VariableDeclarationStatement[33275-33303]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[32713-33021]:IfStatement[33314-33622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32736-33021]:Block[33337-33622]"
    }, {
      "left" : "ownerVar = scope.getVar(ownerName);",
      "right" : "ownerVar = scope.getVar(ownerName);",
      "info" : "ExpressionStatement[32750-32785]:ExpressionStatement[33351-33386]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[32798-32898]:IfStatement[33399-33499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32820-32898]:Block[33421-33499]"
    }, {
      "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "info" : "ExpressionStatement[32836-32884]:ExpressionStatement[33437-33485]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[32911-33009]:IfStatement[33512-33610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32929-33009]:Block[33530-33610]"
    }, {
      "left" : "propName = name.substring(ownerName.length() + 1);",
      "right" : "propName = name.substring(ownerName.length() + 1);",
      "info" : "ExpressionStatement[32945-32995]:ExpressionStatement[33546-33596]"
    }, {
      "left" : "FunctionType overriddenPropType = null;",
      "right" : "FunctionType overriddenPropType = null;",
      "info" : "VariableDeclarationStatement[33033-33072]:VariableDeclarationStatement[33634-33673]"
    }, {
      "left" : "if (ownerType != null && propName != null)",
      "right" : "if (ownerType != null && propName != null)",
      "info" : "IfStatement[33083-33233]:IfStatement[33684-33834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33126-33233]:Block[33727-33834]"
    }, {
      "left" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "right" : "overriddenPropType =\n                findOverriddenFunction(ownerType, propName);",
      "info" : "ExpressionStatement[33140-33221]:ExpressionStatement[33741-33822]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenPropType, parametersNode)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[33245-33637]:VariableDeclarationStatement[33846-34238]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[33687-33723]:VariableDeclarationStatement[34288-34324]"
    }, {
      "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "info" : "IfStatement[33734-34123]:IfStatement[34335-34724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33796-33955]:Block[34397-34556]"
    }, {
      "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "info" : "ExpressionStatement[33810-33903]:ExpressionStatement[34411-34504]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[33916-33943]:ExpressionStatement[34517-34544]"
    }, {
      "left" : "if (ownerNode != null && ownerNode.isThis())",
      "right" : "if (ownerNode != null && ownerNode.isThis())",
      "info" : "IfStatement[33961-34123]:IfStatement[34562-34724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34006-34123]:Block[34607-34724]"
    }, {
      "left" : "builder.inferThisType(info, ownerNode.getJSType());",
      "right" : "builder.inferThisType(info, ownerNode.getJSType());",
      "info" : "ExpressionStatement[34020-34071]:ExpressionStatement[34621-34672]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[34084-34111]:ExpressionStatement[34685-34712]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[34135-34215]:IfStatement[34736-34816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34161-34215]:Block[34762-34816]"
    }, {
      "left" : "builder.inferThisType(info);",
      "right" : "builder.inferThisType(info);",
      "info" : "ExpressionStatement[34175-34203]:ExpressionStatement[34776-34804]"
    }, {
      "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "info" : "ExpressionStatement[34227-34341]:ExpressionStatement[34828-34942]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[34385-34405]:ReturnStatement[34986-35006]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34504-34511]:Modifier[35105-35112]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[34512-34524]:SimpleType[35113-35125]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[34525-34547]:SimpleName[35126-35148]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[34557-34577]:SingleVariableDeclaration[35158-35178]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[34579-34594]:SingleVariableDeclaration[35180-35195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34596-35284]:Block[35197-35885]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[34690-34744]:VariableDeclarationStatement[35291-35345]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[34751-35258]:IfStatement[35352-35859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34802-34858]:Block[35403-35459]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[34812-34850]:ReturnStatement[35413-35451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34864-35258]:Block[35465-35859]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[34976-35250]:EnhancedForStatement[35577-35851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35059-35250]:Block[35660-35851]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[35071-35114]:ExpressionStatement[35672-35715]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[35125-35240]:IfStatement[35726-35841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35176-35240]:Block[35777-35841]"
    }, {
      "left" : "return propType.toMaybeFunctionType();",
      "right" : "return propType.toMaybeFunctionType();",
      "info" : "ReturnStatement[35190-35228]:ReturnStatement[35791-35829]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35266-35278]:ReturnStatement[35867-35879]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35974-35981]:Modifier[36575-36582]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[35982-35990]:SimpleType[36583-36591]"
    }, {
      "left" : "createEnumTypeFromNodes",
      "right" : "createEnumTypeFromNodes",
      "info" : "SimpleName[35991-36014]:SimpleName[36592-36615]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[36015-36026]:SingleVariableDeclaration[36616-36627]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[36028-36039]:SingleVariableDeclaration[36629-36640]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[36049-36063]:SingleVariableDeclaration[36650-36664]"
    }, {
      "left" : "Node lValueNode",
      "right" : "Node lValueNode",
      "info" : "SingleVariableDeclaration[36065-36080]:SingleVariableDeclaration[36666-36681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36082-37610]:Block[36683-38211]"
    }, {
      "left" : "Preconditions.checkNotNull(info);",
      "right" : "Preconditions.checkNotNull(info);",
      "info" : "ExpressionStatement[36090-36123]:ExpressionStatement[36691-36724]"
    }, {
      "left" : "Preconditions.checkState(info.hasEnumParameterType());",
      "right" : "Preconditions.checkState(info.hasEnumParameterType());",
      "info" : "ExpressionStatement[36130-36184]:ExpressionStatement[36731-36785]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[36192-36217]:VariableDeclarationStatement[36793-36818]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[36224-36496]:IfStatement[36825-37097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36272-36496]:Block[36873-37097]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[36317-36367]:VariableDeclarationStatement[36918-36968]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[36376-36488]:IfStatement[36977-37089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36430-36488]:Block[37031-37089]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[36442-36478]:ExpressionStatement[37043-37079]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[36504-37457]:IfStatement[37105-38058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36526-37457]:Block[37127-38058]"
    }, {
      "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[36536-36628]:VariableDeclarationStatement[37137-37229]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "info" : "ExpressionStatement[36637-36704]:ExpressionStatement[37238-37305]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[36714-37449]:IfStatement[37315-38050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36758-37449]:Block[37359-38050]"
    }, {
      "left" : "Node key = rValue.getFirstChild();",
      "right" : "Node key = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[36805-36839]:VariableDeclarationStatement[37406-37440]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[36850-37439]:WhileStatement[37451-38040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36870-37439]:Block[37471-38040]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[36884-36930]:VariableDeclarationStatement[37485-37531]"
    }, {
      "left" : "if (keyName == null)",
      "right" : "if (keyName == null)",
      "info" : "IfStatement[36943-37394]:IfStatement[37544-37995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36964-37144]:Block[37565-37745]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[37036-37130]:ExpressionStatement[37637-37731]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[37150-37394]:IfStatement[37751-37995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37197-37321]:Block[37798-37922]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[37213-37307]:ExpressionStatement[37814-37908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37327-37394]:Block[37928-37995]"
    }, {
      "left" : "enumType.defineElement(keyName, key);",
      "right" : "enumType.defineElement(keyName, key);",
      "info" : "ExpressionStatement[37343-37380]:ExpressionStatement[37944-37981]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[37407-37427]:ExpressionStatement[38008-38028]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[37465-37580]:IfStatement[38066-38181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37503-37580]:Block[38104-38181]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[37513-37572]:ExpressionStatement[38114-38173]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[37588-37604]:ReturnStatement[38189-38205]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38020-38027]:Modifier[38621-38628]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38028-38032]:PrimitiveType[38629-38633]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[38033-38043]:SimpleName[38634-38644]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[38044-38053]:SingleVariableDeclaration[38645-38654]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[38055-38066]:SingleVariableDeclaration[38656-38667]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[38068-38079]:SingleVariableDeclaration[38669-38680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38081-38140]:Block[38682-38741]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[38089-38134]:ExpressionStatement[38690-38735]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38629-38633]:PrimitiveType[39230-39234]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[38634-38644]:SimpleName[39235-39245]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38645-38651]:SingleVariableDeclaration[39246-39252]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[38653-38664]:SingleVariableDeclaration[39254-39265]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[38666-38677]:SingleVariableDeclaration[39267-39278]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[38679-38695]:SingleVariableDeclaration[39280-39296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38697-39323]:Block[39298-39924]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[38705-38759]:ExpressionStatement[39306-39360]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[38903-39250]:IfStatement[39504-39851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38919-39097]:Block[39520-39698]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "right" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "info" : "ExpressionStatement[38929-39089]:ExpressionStatement[39530-39690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39103-39250]:Block[39704-39851]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "right" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "info" : "ExpressionStatement[39113-39242]:ExpressionStatement[39714-39843]"
    }, {
      "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "info" : "ExpressionStatement[39257-39317]:ExpressionStatement[39858-39918]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39759-39763]:PrimitiveType[40360-40364]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[39764-39774]:SimpleName[40365-40375]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39775-39781]:SingleVariableDeclaration[40376-40382]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[39783-39794]:SingleVariableDeclaration[40384-40395]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[39796-39815]:SingleVariableDeclaration[40397-40416]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[39825-39836]:SingleVariableDeclaration[40426-40437]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[39838-39854]:SingleVariableDeclaration[40439-40455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39856-45560]:Block[40457-46161]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[39864-39917]:ExpressionStatement[40465-40518]"
    }, {
      "left" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "right" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "info" : "VariableDeclarationStatement[39925-39978]:VariableDeclarationStatement[40526-40579]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "info" : "VariableDeclarationStatement[39985-40107]:VariableDeclarationStatement[40586-40708]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[40315-40346]:VariableDeclarationStatement[40916-40947]"
    }, {
      "left" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "right" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "info" : "IfStatement[40353-40734]:IfStatement[40954-41335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40436-40734]:Block[41037-41335]"
    }, {
      "left" : "Scope globalScope = scope.getGlobalScope();",
      "right" : "Scope globalScope = scope.getGlobalScope();",
      "info" : "VariableDeclarationStatement[40446-40489]:VariableDeclarationStatement[41047-41090]"
    }, {
      "left" : "if (!globalScope.isDeclared(variableName, false))",
      "right" : "if (!globalScope.isDeclared(variableName, false))",
      "info" : "IfStatement[40612-40726]:IfStatement[41213-41327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40662-40726]:Block[41263-41327]"
    }, {
      "left" : "scopeToDeclareIn = scope.getGlobalScope();",
      "right" : "scopeToDeclareIn = scope.getGlobalScope();",
      "info" : "ExpressionStatement[40674-40716]:ExpressionStatement[41275-41317]"
    }, {
      "left" : "boolean isExtern = n.isFromExterns();",
      "right" : "boolean isExtern = n.isFromExterns();",
      "info" : "VariableDeclarationStatement[40859-40896]:VariableDeclarationStatement[41460-41497]"
    }, {
      "left" : "Var newVar = null;",
      "right" : "Var newVar = null;",
      "info" : "VariableDeclarationStatement[40903-40921]:VariableDeclarationStatement[41504-41522]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(inputId);",
      "right" : "CompilerInput input = compiler.getInput(inputId);",
      "info" : "VariableDeclarationStatement[40965-41014]:VariableDeclarationStatement[41566-41615]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[41021-41824]:IfStatement[41622-42425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41075-41268]:Block[41676-41869]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[41085-41136]:VariableDeclarationStatement[41686-41737]"
    }, {
      "left" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "right" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[41145-41260]:ExpressionStatement[41746-41861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41274-41824]:Block[41875-42425]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[41284-41346]:IfStatement[41885-41947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41299-41346]:Block[41900-41947]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[41311-41336]:ExpressionStatement[41912-41937]"
    }, {
      "left" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[41356-41440]:ExpressionStatement[41957-42041]"
    }, {
      "left" : "if (type instanceof EnumType)",
      "right" : "if (type instanceof EnumType)",
      "info" : "IfStatement[41450-41816]:IfStatement[42051-42417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41480-41816]:Block[42081-42417]"
    }, {
      "left" : "Node initialValue = newVar.getInitialValue();",
      "right" : "Node initialValue = newVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[41492-41537]:VariableDeclarationStatement[42093-42138]"
    }, {
      "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "info" : "VariableDeclarationStatement[41548-41687]:VariableDeclarationStatement[42149-42288]"
    }, {
      "left" : "if (!isValidValue)",
      "right" : "if (!isValidValue)",
      "info" : "IfStatement[41698-41806]:IfStatement[42299-42407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41717-41806]:Block[42318-42407]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[41731-41794]:ExpressionStatement[42332-42395]"
    }, {
      "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "info" : "VariableDeclarationStatement[41909-41964]:VariableDeclarationStatement[42510-42565]"
    }, {
      "left" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "right" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "info" : "IfStatement[41971-44617]:IfStatement[42572-45218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42084-44617]:Block[42685-45218]"
    }, {
      "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE)))",
      "info" : "IfStatement[42094-44609]:IfStatement[42695-45210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42215-44609]:Block[42816-45210]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[42282-42346]:VariableDeclarationStatement[42883-42947]"
    }, {
      "left" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "right" : "ObjectType.Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "info" : "VariableDeclarationStatement[42357-42421]:VariableDeclarationStatement[42958-43022]"
    }, {
      "left" : "prototypeSlot.setNode(n);",
      "right" : "prototypeSlot.setNode(n);",
      "info" : "ExpressionStatement[42882-42907]:ExpressionStatement[43483-43508]"
    }, {
      "left" : "String prototypeName = variableName + \".prototype\";",
      "right" : "String prototypeName = variableName + \".prototype\";",
      "info" : "VariableDeclarationStatement[42919-42970]:VariableDeclarationStatement[43520-43571]"
    }, {
      "left" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "right" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "info" : "VariableDeclarationStatement[43202-43260]:VariableDeclarationStatement[43803-43861]"
    }, {
      "left" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "right" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "info" : "IfStatement[43271-43406]:IfStatement[43872-44007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43339-43406]:Block[43940-44007]"
    }, {
      "left" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "right" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "info" : "ExpressionStatement[43353-43394]:ExpressionStatement[43954-43995]"
    }, {
      "left" : "scopeToDeclareIn.declare(prototypeName,\n              n, prototypeSlot.getType(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(prototypeName,\n              n, prototypeSlot.getType(), input,\n              /* declared iff there's an explicit supertype */\n              superClassCtor == null ||\n              superClassCtor.getInstanceType().equals(\n                  getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[43418-43712]:ExpressionStatement[44019-44313]"
    }, {
      "left" : "if (newVar.getInitialValue() == null &&\n              !isExtern &&\n              // We want to make sure that when we declare a new instance\n              // type (with @constructor) that there's actually a ctor for it.\n              // This doesn't apply to structural constructors\n              // (like function(new:Array). Checking the constructed\n              // type against the variable name is a sufficient check for\n              // this.\n              variableName.equals(\n                  fnType.getInstanceType().getReferenceName()))",
      "right" : "if (newVar.getInitialValue() == null &&\n              !isExtern &&\n              // We want to make sure that when we declare a new instance\n              // type (with @constructor) that there's actually a ctor for it.\n              // This doesn't apply to structural constructors\n              // (like function(new:Array). Checking the constructed\n              // type against the variable name is a sufficient check for\n              // this.\n              variableName.equals(\n                  fnType.getInstanceType().getReferenceName()))",
      "info" : "IfStatement[43826-44599]:IfStatement[44427-45200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44374-44599]:Block[44975-45200]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, n,\n                    fnType.isConstructor() ?\n                    CTOR_INITIALIZER : IFACE_INITIALIZER,\n                    variableName));",
      "right" : "compiler.report(\n                JSError.make(sourceName, n,\n                    fnType.isConstructor() ?\n                    CTOR_INITIALIZER : IFACE_INITIALIZER,\n                    variableName));",
      "info" : "ExpressionStatement[44388-44587]:ExpressionStatement[44989-45188]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[44625-45052]:IfStatement[45226-45653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44656-45052]:Block[45257-45653]"
    }, {
      "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[44666-44748]:VariableDeclarationStatement[45267-45349]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[44757-45044]:IfStatement[45358-45645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44771-44959]:Block[45372-45560]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "info" : "ExpressionStatement[44783-44949]:ExpressionStatement[45384-45550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44965-45044]:Block[45566-45645]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "info" : "ExpressionStatement[44977-45034]:ExpressionStatement[45578-45635]"
    }, {
      "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "info" : "IfStatement[45060-45554]:IfStatement[45661-46155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45205-45554]:Block[45806-46155]"
    }, {
      "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "info" : "VariableDeclarationStatement[45215-45320]:VariableDeclarationStatement[45816-45921]"
    }, {
      "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "info" : "ExpressionStatement[45329-45382]:ExpressionStatement[45930-45983]"
    }, {
      "left" : "globalThisCtor.getPrototype().clearCachedValues();",
      "right" : "globalThisCtor.getPrototype().clearCachedValues();",
      "info" : "ExpressionStatement[45391-45441]:ExpressionStatement[45992-46042]"
    }, {
      "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "info" : "ExpressionStatement[45450-45546]:ExpressionStatement[46051-46147]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45658-45665]:Modifier[46259-46266]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45666-45673]:PrimitiveType[46267-46274]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[45674-45700]:SimpleName[46275-46301]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45701-45707]:SingleVariableDeclaration[46302-46308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45709-45806]:Block[46310-46407]"
    }, {
      "left" : "Scope scope = getQnameRootScope(n);",
      "right" : "Scope scope = getQnameRootScope(n);",
      "info" : "VariableDeclarationStatement[45717-45752]:VariableDeclarationStatement[46318-46353]"
    }, {
      "left" : "return scope != null && scope.isGlobal();",
      "right" : "return scope != null && scope.isGlobal();",
      "info" : "ReturnStatement[45759-45800]:ReturnStatement[46360-46401]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45884-45891]:Modifier[46485-46492]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[45892-45897]:SimpleType[46493-46498]"
    }, {
      "left" : "getQnameRootScope",
      "right" : "getQnameRootScope",
      "info" : "SimpleName[45898-45915]:SimpleName[46499-46516]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45916-45922]:SingleVariableDeclaration[46517-46523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45924-46159]:Block[46525-46760]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[45932-45979]:VariableDeclarationStatement[46533-46580]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[45986-46134]:IfStatement[46587-46735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46005-46134]:Block[46606-46735]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[46015-46056]:VariableDeclarationStatement[46616-46657]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[46065-46126]:IfStatement[46666-46727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46082-46126]:Block[46683-46727]"
    }, {
      "left" : "return var.getScope();",
      "right" : "return var.getScope();",
      "info" : "ReturnStatement[46094-46116]:ReturnStatement[46695-46717]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46141-46153]:ReturnStatement[46742-46754]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46514-46521]:Modifier[47115-47122]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[46522-46528]:SimpleType[47123-47129]"
    }, {
      "left" : "getDeclaredType",
      "right" : "getDeclaredType",
      "info" : "SimpleName[46529-46544]:SimpleName[47130-47145]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[46545-46562]:SingleVariableDeclaration[47146-47163]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[46564-46578]:SingleVariableDeclaration[47165-47179]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[46588-46599]:SingleVariableDeclaration[47189-47200]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[46601-46622]:SingleVariableDeclaration[47202-47223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46624-48642]:Block[47225-49243]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[46632-48567]:IfStatement[47233-49168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46668-46747]:Block[47269-47348]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[46678-46739]:ReturnStatement[47279-47340]"
    }, {
      "left" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "right" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "info" : "IfStatement[46753-48567]:IfStatement[47354-49168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46915-46959]:Block[47516-47560]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[46925-46951]:ReturnStatement[47526-47552]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[46965-48567]:IfStatement[47566-49168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46983-48567]:Block[47584-49168]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[46993-48559]:IfStatement[47594-49160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47026-47273]:Block[47627-47874]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[47038-47263]:IfStatement[47639-47864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47082-47134]:Block[47683-47735]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[47096-47122]:ReturnStatement[47697-47723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47140-47263]:Block[47741-47864]"
    }, {
      "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[47154-47251]:ReturnStatement[47755-47852]"
    }, {
      "left" : "if (info.isConstructor() || info.isInterface())",
      "right" : "if (info.isConstructor() || info.isInterface())",
      "info" : "IfStatement[47279-48559]:IfStatement[47880-49160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47327-47448]:Block[47928-48049]"
    }, {
      "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[47339-47438]:ReturnStatement[47940-48039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47454-48559]:Block[48055-49160]"
    }, {
      "left" : "if (info.isConstant())",
      "right" : "if (info.isConstant())",
      "info" : "IfStatement[47534-48549]:IfStatement[48135-49150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47557-48549]:Block[48158-49150]"
    }, {
      "left" : "JSType knownType = null;",
      "right" : "JSType knownType = null;",
      "info" : "VariableDeclarationStatement[47571-47595]:VariableDeclarationStatement[48172-48196]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[47608-48537]:IfStatement[48209-49138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47628-48537]:Block[48229-49138]"
    }, {
      "left" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "right" : "if (rValue.getJSType() != null\n                  && !rValue.getJSType().isUnknownType())",
      "info" : "IfStatement[47644-48523]:IfStatement[48245-49124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47733-47793]:Block[48334-48394]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[47751-47777]:ReturnStatement[48352-48378]"
    }, {
      "left" : "if (rValue.isOr())",
      "right" : "if (rValue.isOr())",
      "info" : "IfStatement[47799-48523]:IfStatement[48400-49124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47818-48523]:Block[48419-49124]"
    }, {
      "left" : "Node firstClause = rValue.getFirstChild();",
      "right" : "Node firstClause = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[48030-48072]:VariableDeclarationStatement[48631-48673]"
    }, {
      "left" : "Node secondClause = firstClause.getNext();",
      "right" : "Node secondClause = firstClause.getNext();",
      "info" : "VariableDeclarationStatement[48089-48131]:VariableDeclarationStatement[48690-48732]"
    }, {
      "left" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "right" : "boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());",
      "info" : "VariableDeclarationStatement[48148-48303]:VariableDeclarationStatement[48749-48904]"
    }, {
      "left" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "right" : "if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType())",
      "info" : "IfStatement[48320-48507]:IfStatement[48921-49108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48437-48507]:Block[49038-49108]"
    }, {
      "left" : "return secondClause.getJSType();",
      "right" : "return secondClause.getJSType();",
      "info" : "ReturnStatement[48457-48489]:ReturnStatement[49058-49090]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(sourceName, lValue, info);",
      "info" : "ReturnStatement[48575-48636]:ReturnStatement[49176-49237]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48648-48655]:Modifier[49249-49256]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[48656-48668]:SimpleType[49257-49269]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[48669-48684]:SimpleName[49270-49285]"
    }, {
      "left" : "@Nullable Var v",
      "right" : "@Nullable Var v",
      "info" : "SingleVariableDeclaration[48685-48700]:SingleVariableDeclaration[49286-49301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48702-48859]:Block[49303-49460]"
    }, {
      "left" : "JSType t = v == null ? null : v.getType();",
      "right" : "JSType t = v == null ? null : v.getType();",
      "info" : "VariableDeclarationStatement[48710-48752]:VariableDeclarationStatement[49311-49353]"
    }, {
      "left" : "ObjectType o = t == null ? null : t.dereference();",
      "right" : "ObjectType o = t == null ? null : t.dereference();",
      "info" : "VariableDeclarationStatement[48759-48809]:VariableDeclarationStatement[49360-49410]"
    }, {
      "left" : "return JSType.toMaybeFunctionType(o);",
      "right" : "return JSType.toMaybeFunctionType(o);",
      "info" : "ReturnStatement[48816-48853]:ReturnStatement[49417-49454]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48952-48959]:Modifier[49553-49560]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48960-48964]:PrimitiveType[49561-49565]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls",
      "right" : "checkForCallingConventionDefiningCalls",
      "info" : "SimpleName[48965-49003]:SimpleName[49566-49604]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49013-49019]:SingleVariableDeclaration[49614-49620]"
    }, {
      "left" : "Map<String, String> delegateCallingConventions",
      "right" : "Map<String, String> delegateCallingConventions",
      "info" : "SingleVariableDeclaration[49021-49067]:SingleVariableDeclaration[49622-49668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49069-49180]:Block[49670-49781]"
    }, {
      "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[49077-49174]:ExpressionStatement[49678-49775]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49383-49390]:Modifier[49984-49991]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49391-49395]:PrimitiveType[49992-49996]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[49396-49422]:SimpleName[49997-50023]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[49432-49447]:SingleVariableDeclaration[50033-50048]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49449-49455]:SingleVariableDeclaration[50050-50056]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[49457-49468]:SingleVariableDeclaration[50058-50069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49470-52100]:Block[50071-52701]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[49478-49568]:VariableDeclarationStatement[50079-50169]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[49575-50744]:IfStatement[50176-51345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49601-50744]:Block[50202-51345]"
    }, {
      "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[49611-49708]:VariableDeclarationStatement[50212-50309]"
    }, {
      "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[49717-49810]:VariableDeclarationStatement[50318-50411]"
    }, {
      "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "info" : "IfStatement[49819-50736]:IfStatement[50420-51337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49929-50736]:Block[50530-51337]"
    }, {
      "left" : "ObjectType superClass = superCtor.getInstanceType();",
      "right" : "ObjectType superClass = superCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[49941-49993]:VariableDeclarationStatement[50542-50594]"
    }, {
      "left" : "ObjectType subClass = subCtor.getInstanceType();",
      "right" : "ObjectType subClass = subCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[50004-50052]:VariableDeclarationStatement[50605-50653]"
    }, {
      "left" : "superCtor = superClass.getConstructor();",
      "right" : "superCtor = superClass.getConstructor();",
      "info" : "ExpressionStatement[50250-50290]:ExpressionStatement[50851-50891]"
    }, {
      "left" : "subCtor = subClass.getConstructor();",
      "right" : "subCtor = subClass.getConstructor();",
      "info" : "ExpressionStatement[50301-50337]:ExpressionStatement[50902-50938]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "info" : "IfStatement[50349-50547]:IfStatement[50950-51148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50467-50547]:Block[51068-51148]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[50481-50535]:ExpressionStatement[51082-51136]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[50559-50726]:IfStatement[51160-51327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50601-50726]:Block[51202-51327]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[50615-50714]:ExpressionStatement[51216-51315]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[50752-50844]:VariableDeclarationStatement[51353-51445]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[50851-51374]:IfStatement[51452-51975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50889-51374]:Block[51490-51975]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[50899-51000]:VariableDeclarationStatement[51500-51601]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[51009-51366]:IfStatement[51610-51967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51033-51366]:Block[51634-51967]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[51045-51101]:VariableDeclarationStatement[51646-51702]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[51113-51356]:IfStatement[51714-51957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51139-51356]:Block[51740-51957]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[51153-51239]:VariableDeclarationStatement[51754-51840]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[51252-51344]:ExpressionStatement[51853-51945]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[51382-51480]:VariableDeclarationStatement[51983-52081]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[51487-51587]:IfStatement[52088-52188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51521-51587]:Block[52122-52188]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[51531-51579]:ExpressionStatement[52132-52180]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[51595-51687]:VariableDeclarationStatement[52196-52288]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[51694-52094]:IfStatement[52295-52695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51725-52094]:Block[52326-52695]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n            typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[51735-51832]:VariableDeclarationStatement[52336-52433]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[51841-52086]:IfStatement[52442-52687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51892-51966]:Block[52493-52567]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[51904-51956]:ExpressionStatement[52505-52557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51972-52086]:Block[52573-52687]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[51984-52076]:ExpressionStatement[52585-52677]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52184-52191]:Modifier[52785-52792]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52192-52196]:PrimitiveType[52793-52797]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[52197-52222]:SimpleName[52798-52823]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[52232-52273]:SingleVariableDeclaration[52833-52874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52275-54017]:Block[52876-54618]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[52283-52393]:VariableDeclarationStatement[52884-52994]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[52400-52516]:VariableDeclarationStatement[53001-53117]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[52523-52651]:VariableDeclarationStatement[53124-53252]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[52658-54011]:IfStatement[53259-54612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52768-54011]:Block[53369-54612]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[52778-52840]:VariableDeclarationStatement[53379-53441]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[52849-52917]:VariableDeclarationStatement[53450-53518]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[52926-52996]:VariableDeclarationStatement[53527-53597]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[53006-54003]:IfStatement[53607-54604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53102-54003]:Block[53703-54604]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[53114-53211]:VariableDeclarationStatement[53715-53812]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[53222-53313]:ExpressionStatement[53823-53914]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[53324-53502]:VariableDeclarationStatement[53925-54103]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null);",
      "info" : "VariableDeclarationStatement[53514-53688]:VariableDeclarationStatement[54115-54289]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[53699-53753]:ExpressionStatement[54300-54354]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[53765-53924]:ExpressionStatement[54366-54525]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[53935-53993]:ExpressionStatement[54536-54594]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54446-54450]:PrimitiveType[55047-55051]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[54451-54476]:SimpleName[55052-55077]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[54477-54492]:SingleVariableDeclaration[55078-55093]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[54494-54508]:SingleVariableDeclaration[55095-55109]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54518-54524]:SingleVariableDeclaration[55119-55125]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[54526-54537]:SingleVariableDeclaration[55127-55138]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[54539-54552]:SingleVariableDeclaration[55140-55153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54554-59126]:Block[55155-59727]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[54562-54597]:VariableDeclarationStatement[55163-55198]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[54604-54652]:VariableDeclarationStatement[55205-55253]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[54659-54695]:VariableDeclarationStatement[55260-55296]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[54702-54749]:VariableDeclarationStatement[55303-55350]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[54756-54820]:ExpressionStatement[55357-55421]"
    }, {
      "left" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[55478-55551]:VariableDeclarationStatement[56079-56152]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[55558-55687]:IfStatement[56159-56288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55601-55687]:Block[56202-56288]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[55646-55679]:ExpressionStatement[56247-56280]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[55930-57185]:IfStatement[56531-57786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55964-57185]:Block[56565-57786]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[55974-56005]:VariableDeclarationStatement[56575-56606]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[56014-57177]:IfStatement[56615-57778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56032-57177]:Block[56633-57778]"
    }, {
      "left" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "right" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "info" : "VariableDeclarationStatement[56361-56415]:VariableDeclarationStatement[56962-57016]"
    }, {
      "left" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "right" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "info" : "IfStatement[56426-57078]:IfStatement[57027-57679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56522-56656]:Block[57123-57257]"
    }, {
      "left" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "right" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "info" : "ExpressionStatement[56536-56644]:ExpressionStatement[57137-57245]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[56662-57078]:IfStatement[57263-57679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56690-57078]:Block[57291-57679]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57059-57066]:ReturnStatement[57660-57667]"
    }, {
      "left" : "if (qVar.getScope() == scope)",
      "right" : "if (qVar.getScope() == scope)",
      "info" : "IfStatement[57089-57167]:IfStatement[57690-57768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57119-57167]:Block[57720-57768]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[57133-57155]:ExpressionStatement[57734-57756]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[57193-57448]:IfStatement[57794-58049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57216-57448]:Block[57817-58049]"
    }, {
      "left" : "if (parent.isExprResult())",
      "right" : "if (parent.isExprResult())",
      "info" : "IfStatement[57226-57423]:IfStatement[57827-58024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57253-57423]:Block[57854-58024]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[57265-57413]:ExpressionStatement[57866-58014]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[57433-57440]:ReturnStatement[58034-58041]"
    }, {
      "left" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "right" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "info" : "VariableDeclarationStatement[57456-57547]:VariableDeclarationStatement[58057-58148]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[57554-59120]:IfStatement[58155-59721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57569-58425]:Block[58170-59026]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[57579-57627]:VariableDeclarationStatement[58180-58228]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[57636-58232]:IfStatement[58237-58833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57659-58232]:Block[58260-58833]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[57772-57839]:VariableDeclarationStatement[58373-58440]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[57850-58222]:IfStatement[58451-58823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58065-58222]:Block[58666-58823]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "info" : "ExpressionStatement[58153-58210]:ExpressionStatement[58754-58811]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[58374-58417]:ExpressionStatement[58975-59018]"
    }, {
      "left" : "if (rhsValue != null && rhsValue.isTrue())",
      "right" : "if (rhsValue != null && rhsValue.isTrue())",
      "info" : "IfStatement[58431-59120]:IfStatement[59032-59721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58474-59120]:Block[59075-59721]"
    }, {
      "left" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "right" : "FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));",
      "info" : "VariableDeclarationStatement[58550-58640]:VariableDeclarationStatement[59151-59241]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[58649-59112]:IfStatement[59250-59713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58672-59112]:Block[59273-59713]"
    }, {
      "left" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ownerType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[58684-58735]:VariableDeclarationStatement[59285-59336]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[58746-58813]:VariableDeclarationStatement[59347-59414]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[58824-58925]:VariableDeclarationStatement[59425-59526]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[58936-59102]:IfStatement[59537-59703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59019-59102]:Block[59620-59703]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "info" : "ExpressionStatement[59033-59090]:ExpressionStatement[59634-59691]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60159-60166]:Modifier[60760-60767]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60167-60174]:PrimitiveType[60768-60775]"
    }, {
      "left" : "isQualifiedNameInferred",
      "right" : "isQualifiedNameInferred",
      "info" : "SimpleName[60175-60198]:SimpleName[60776-60799]"
    }, {
      "left" : "String qName",
      "right" : "String qName",
      "info" : "SingleVariableDeclaration[60208-60220]:SingleVariableDeclaration[60809-60821]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[60222-60228]:SingleVariableDeclaration[60823-60829]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[60230-60244]:SingleVariableDeclaration[60831-60845]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[60254-60267]:SingleVariableDeclaration[60855-60868]"
    }, {
      "left" : "JSType valueType",
      "right" : "JSType valueType",
      "info" : "SingleVariableDeclaration[60269-60285]:SingleVariableDeclaration[60870-60886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60287-60967]:Block[60888-61568]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[60295-60348]:IfStatement[60896-60949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60318-60348]:Block[60919-60949]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60328-60340]:ReturnStatement[60929-60941]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[60356-60380]:VariableDeclarationStatement[60957-60981]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[60387-60664]:IfStatement[60988-61265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60405-60664]:Block[61006-61265]"
    }, {
      "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[60415-60656]:ExpressionStatement[61016-61257]"
    }, {
      "left" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "right" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
      "info" : "IfStatement[60672-60938]:IfStatement[61273-61539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60731-60938]:Block[61332-61539]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[60741-60930]:IfStatement[61342-61531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60759-60798]:Block[61360-61399]"
    }, {
      "left" : "inferred = false;",
      "right" : "inferred = false;",
      "info" : "ExpressionStatement[60771-60788]:ExpressionStatement[61372-61389]"
    }, {
      "left" : "if (!scope.isDeclared(qName, false) &&\n                   n.isUnscopedQualifiedName())",
      "right" : "if (!scope.isDeclared(qName, false) &&\n                   n.isUnscopedQualifiedName())",
      "info" : "IfStatement[60804-60930]:IfStatement[61405-61531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60891-60930]:Block[61492-61531]"
    }, {
      "left" : "inferred = false;",
      "right" : "inferred = false;",
      "info" : "ExpressionStatement[60903-60920]:ExpressionStatement[61504-61521]"
    }, {
      "left" : "return inferred;",
      "right" : "return inferred;",
      "info" : "ReturnStatement[60945-60961]:ReturnStatement[61546-61562]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61193-61200]:Modifier[61794-61801]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[61201-61211]:SimpleType[61802-61812]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[61212-61225]:SimpleName[61813-61826]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[61226-61241]:SingleVariableDeclaration[61827-61842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61243-61521]:Block[61844-62122]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[61251-61289]:VariableDeclarationStatement[61852-61890]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[61296-61496]:IfStatement[61897-62097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61318-61496]:Block[61919-62097]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[61328-61369]:VariableDeclarationStatement[61929-61970]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[61378-61488]:ReturnStatement[61979-62089]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61503-61515]:ReturnStatement[62104-62116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61658-61662]:PrimitiveType[62259-62263]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[61663-61686]:SimpleName[62264-62287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61689-62840]:Block[62290-63441]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[61697-62834]:EnhancedForStatement[62298-63435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61743-62834]:Block[62344-63435]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[61753-61772]:VariableDeclarationStatement[62354-62373]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[61781-61809]:VariableDeclarationStatement[62382-62410]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[61818-61854]:VariableDeclarationStatement[62419-62455]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[61863-61910]:VariableDeclarationStatement[62464-62511]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[61919-61953]:VariableDeclarationStatement[62520-62554]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[61962-61995]:VariableDeclarationStatement[62563-62596]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[62005-62072]:IfStatement[62606-62673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62041-62072]:Block[62642-62673]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[62053-62062]:ContinueStatement[62654-62663]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[62189-62237]:VariableDeclarationStatement[62790-62838]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[62246-62318]:VariableDeclarationStatement[62847-62919]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[62327-62368]:ExpressionStatement[62928-62969]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[62378-62826]:IfStatement[62979-63427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62466-62692]:Block[63067-63293]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "info" : "ExpressionStatement[62608-62682]:ExpressionStatement[63209-63283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62698-62826]:Block[63299-63427]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[62710-62816]:ExpressionStatement[63311-63417]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62972-62979]:Modifier[63573-63580]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[62980-62985]:Modifier[63581-63586]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[62986-62991]:TYPE_DECLARATION_KIND[63587-63592]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[62992-63009]:SimpleName[63593-63610]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[63026-63058]:SimpleType[63627-63659]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[63109-63126]:SimpleName[63710-63727]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[63127-63146]:SingleVariableDeclaration[63728-63747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63148-63191]:Block[63749-63792]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[63158-63183]:ExpressionStatement[63759-63784]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63199-63208]:MarkerAnnotation[63800-63809]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63215-63221]:Modifier[63816-63822]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63222-63226]:PrimitiveType[63823-63827]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[63227-63232]:SimpleName[63828-63833]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[63233-63248]:SingleVariableDeclaration[63834-63849]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[63250-63256]:SingleVariableDeclaration[63851-63857]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[63258-63269]:SingleVariableDeclaration[63859-63870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63271-63682]:Block[63872-64283]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult())",
      "info" : "IfStatement[63281-63674]:IfStatement[63882-64275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63303-63674]:Block[63904-64275]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[63315-63346]:VariableDeclarationStatement[63916-63947]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, child, child, null);\n              break;\n          }",
      "info" : "SwitchStatement[63357-63664]:SwitchStatement[63958-64265]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[63396-63414]:SwitchCase[63997-64015]"
    }, {
      "left" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "right" : "maybeCollectMember(t, child.getFirstChild(), child,\n                  child.getLastChild());",
      "info" : "ExpressionStatement[63429-63521]:ExpressionStatement[64030-64122]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63536-63542]:BreakStatement[64137-64143]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[63555-63574]:SwitchCase[64156-64175]"
    }, {
      "left" : "maybeCollectMember(t, child, child, null);",
      "right" : "maybeCollectMember(t, child, child, null);",
      "info" : "ExpressionStatement[63589-63631]:ExpressionStatement[64190-64232]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63646-63652]:BreakStatement[64247-64253]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63690-63697]:Modifier[64291-64298]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63698-63702]:PrimitiveType[64299-64303]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[63703-63721]:SimpleName[64304-64322]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[63722-63737]:SingleVariableDeclaration[64323-64338]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[63749-63760]:SingleVariableDeclaration[64350-64361]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[63762-63784]:SingleVariableDeclaration[64363-64385]"
    }, {
      "left" : "@Nullable Node value",
      "right" : "@Nullable Node value",
      "info" : "SingleVariableDeclaration[63786-63806]:SingleVariableDeclaration[64387-64407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63808-64589]:Block[64409-65190]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[63818-63868]:VariableDeclarationStatement[64419-64469]"
    }, {
      "left" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "right" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "info" : "IfStatement[64064-64194]:IfStatement[64665-64795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64165-64194]:Block[64766-64795]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[64177-64184]:ReturnStatement[64778-64785]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[64204-64247]:ExpressionStatement[64805-64848]"
    }, {
      "left" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "right" : "JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);",
      "info" : "VariableDeclarationStatement[64256-64328]:VariableDeclarationStatement[64857-64929]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[64337-64371]:VariableDeclarationStatement[64938-64972]"
    }, {
      "left" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "right" : "if (jsType != null &&\n            (name.isName() || name.isString()))",
      "info" : "IfStatement[64380-64581]:IfStatement[64981-65182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64450-64581]:Block[65051-65182]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "info" : "ExpressionStatement[64462-64571]:ExpressionStatement[65063-65172]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64694-64701]:Modifier[65295-65302]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64702-64708]:Modifier[65303-65309]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[64709-64714]:Modifier[65310-65315]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[64715-64720]:TYPE_DECLARATION_KIND[65316-65321]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[64721-64736]:SimpleName[65322-65337]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[64845-64852]:Modifier[65446-65453]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[64853-64868]:SimpleName[65454-65469]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[64869-64878]:SingleVariableDeclaration[65470-65479]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[64880-64896]:SingleVariableDeclaration[65481-65497]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[64898-64914]:SingleVariableDeclaration[65499-65515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64916-65013]:Block[65517-65614]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[64924-64941]:ExpressionStatement[65525-65542]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[64948-64973]:ExpressionStatement[65549-65574]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[64980-65007]:ExpressionStatement[65581-65608]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65132-65139]:Modifier[65733-65740]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[65140-65145]:Modifier[65741-65746]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[65146-65151]:TYPE_DECLARATION_KIND[65747-65752]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[65152-65170]:SimpleName[65753-65771]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[65179-65199]:SimpleType[65780-65800]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65207-65214]:Modifier[65808-65815]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[65215-65233]:SimpleName[65816-65834]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[65234-65245]:SingleVariableDeclaration[65835-65846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65247-65274]:Block[65848-65875]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[65255-65268]:SuperConstructorInvocation[65856-65869]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65524-65533]:MarkerAnnotation[66125-66134]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65534-65540]:Modifier[66135-66141]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65541-65545]:PrimitiveType[66142-66146]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[65546-65551]:SimpleName[66147-66152]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65552-65567]:SingleVariableDeclaration[66153-66168]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65569-65575]:SingleVariableDeclaration[66170-66176]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[65577-65588]:SingleVariableDeclaration[66178-66189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65590-65854]:Block[66191-66455]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[65598-65624]:ExpressionStatement[66199-66225]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[65632-65848]:SwitchStatement[66233-66449]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[65664-65679]:SwitchCase[66265-66280]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[65720-65823]:IfStatement[66321-66424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65741-65823]:Block[66342-66424]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[65755-65811]:ExpressionStatement[66356-66412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65834-65840]:BreakStatement[66435-66441]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[65860-65869]:MarkerAnnotation[66461-66470]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65874-65878]:PrimitiveType[66475-66479]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[65879-65904]:SimpleName[66480-66505]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[65914-65929]:SingleVariableDeclaration[66515-66530]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[65931-65945]:SingleVariableDeclaration[66532-66546]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65955-65961]:SingleVariableDeclaration[66556-66562]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[65963-65974]:SingleVariableDeclaration[66564-66575]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[65976-65989]:SingleVariableDeclaration[66577-66590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65991-66102]:Block[66592-66703]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[65999-66027]:ExpressionStatement[66600-66628]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[66034-66096]:ExpressionStatement[66635-66697]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66269-66276]:Modifier[66870-66877]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66277-66281]:PrimitiveType[66878-66882]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[66282-66297]:SimpleName[66883-66898]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[66307-66322]:SingleVariableDeclaration[66908-66923]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[66324-66338]:SingleVariableDeclaration[66925-66939]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[66340-66354]:SingleVariableDeclaration[66941-66955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66356-67228]:Block[66957-67829]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[66364-66433]:IfStatement[66965-67034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66408-66433]:Block[67009-67034]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[66418-66425]:ReturnStatement[67019-67026]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[66441-66487]:VariableDeclarationStatement[67042-67088]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[66494-66540]:IfStatement[67095-67141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66515-66540]:Block[67116-67141]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[66525-66532]:ReturnStatement[67126-67133]"
    }, {
      "left" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "right" : "typeRegistry.declareType(typedef, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[66714-66777]:ExpressionStatement[67315-67378]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[66785-66855]:VariableDeclarationStatement[67386-67456]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[66862-67020]:IfStatement[67463-67621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66884-67020]:Block[67485-67621]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[66894-67012]:ExpressionStatement[67495-67613]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[67028-67082]:ExpressionStatement[67629-67683]"
    }, {
      "left" : "if (candidate.isGetProp())",
      "right" : "if (candidate.isGetProp())",
      "info" : "IfStatement[67089-67222]:IfStatement[67690-67823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67116-67222]:Block[67717-67823]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[67126-67214]:ExpressionStatement[67727-67815]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67364-67371]:Modifier[67965-67972]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[67372-67377]:Modifier[67973-67978]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[67378-67383]:TYPE_DECLARATION_KIND[67979-67984]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[67384-67401]:SimpleName[67985-68002]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[67410-67430]:SimpleType[68011-68031]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67504-67511]:Modifier[68105-68112]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[67512-67529]:SimpleName[68113-68130]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[67530-67541]:SingleVariableDeclaration[68131-68142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67543-67570]:Block[68144-68171]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[67551-67564]:SuperConstructorInvocation[68152-68165]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67637-67641]:PrimitiveType[68238-68242]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[67642-67647]:SimpleName[68243-68248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67650-68059]:Block[68251-68660]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[67658-67718]:ExpressionStatement[68259-68319]"
    }, {
      "left" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[67726-67815]:VariableDeclarationStatement[68327-68416]"
    }, {
      "left" : "if (contents != null)",
      "right" : "if (contents != null)",
      "info" : "IfStatement[67822-68053]:IfStatement[68423-68654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67844-68053]:Block[68445-68654]"
    }, {
      "left" : "for (String varName : contents.getEscapedVarNames())",
      "right" : "for (String varName : contents.getEscapedVarNames())",
      "info" : "EnhancedForStatement[67854-68045]:EnhancedForStatement[68455-68646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67907-68045]:Block[68508-68646]"
    }, {
      "left" : "Var v = scope.getVar(varName);",
      "right" : "Var v = scope.getVar(varName);",
      "info" : "VariableDeclarationStatement[67919-67949]:VariableDeclarationStatement[68520-68550]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[67960-68008]:ExpressionStatement[68561-68609]"
    }, {
      "left" : "v.markEscaped();",
      "right" : "v.markEscaped();",
      "info" : "ExpressionStatement[68019-68035]:ExpressionStatement[68620-68636]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[68323-68332]:MarkerAnnotation[68924-68933]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68333-68339]:Modifier[68934-68940]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68340-68344]:PrimitiveType[68941-68945]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[68345-68350]:SimpleName[68946-68951]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[68351-68366]:SingleVariableDeclaration[68952-68967]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[68368-68374]:SingleVariableDeclaration[68969-68975]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[68376-68387]:SingleVariableDeclaration[68977-68988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68389-68599]:Block[68990-69200]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[68397-68434]:IfStatement[68998-69035]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68427-68434]:ReturnStatement[69028-69035]"
    }, {
      "left" : "if (n.isParamList() && parent == scope.getRootNode())",
      "right" : "if (n.isParamList() && parent == scope.getRootNode())",
      "info" : "IfStatement[68442-68559]:IfStatement[69043-69160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68496-68559]:Block[69097-69160]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[68506-68535]:ExpressionStatement[69107-69136]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68544-68551]:ReturnStatement[69145-69152]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[68567-68593]:ExpressionStatement[69168-69194]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68667-68674]:Modifier[69268-69275]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68675-68679]:PrimitiveType[69276-69280]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[68680-68700]:SimpleName[69281-69301]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[68701-68712]:SingleVariableDeclaration[69302-69313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68714-69470]:Block[69315-70071]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[68758-68799]:VariableDeclarationStatement[69359-69400]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[68806-68845]:VariableDeclarationStatement[69407-69446]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[68852-69431]:IfStatement[69453-70032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68875-69431]:Block[69476-70032]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[68885-68924]:VariableDeclarationStatement[69486-69525]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[68933-69423]:IfStatement[69534-70024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69343-69423]:Block[69944-70024]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[69355-69413]:ExpressionStatement[69956-70014]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[69439-69464]:ExpressionStatement[70040-70065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69539-69546]:Modifier[70140-70147]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[69547-69551]:PrimitiveType[70148-70152]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[69552-69568]:SimpleName[70153-70169]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[69569-69586]:SingleVariableDeclaration[70170-70187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69588-70406]:Block[70189-71007]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[69596-69656]:VariableDeclarationStatement[70197-70257]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[69663-69699]:VariableDeclarationStatement[70264-70300]"
    }, {
      "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "info" : "VariableDeclarationStatement[69706-69797]:VariableDeclarationStatement[70307-70398]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[69804-70400]:IfStatement[70405-71001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69830-70400]:Block[70431-71001]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[69840-69896]:VariableDeclarationStatement[70441-70497]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[69905-70392]:IfStatement[70506-70993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69934-70392]:Block[70535-70993]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[69946-70000]:VariableDeclarationStatement[70547-70601]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[70011-70382]:EnhancedForStatement[70612-70983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70062-70382]:Block[70663-70983]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[70076-70370]:IfStatement[70677-70971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70104-70283]:Block[70705-70884]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), false);",
      "info" : "ExpressionStatement[70120-70212]:ExpressionStatement[70721-70813]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[70227-70269]:ExpressionStatement[70828-70870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70289-70370]:Block[70890-70971]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[70305-70356]:ExpressionStatement[70906-70957]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70616-70623]:Modifier[71217-71224]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70624-70630]:Modifier[71225-71231]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[70631-70636]:TYPE_DECLARATION_KIND[71232-71237]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[70637-70663]:SimpleName[71238-71264]"
    }, {
      "left" : "AbstractScopedCallback",
      "right" : "AbstractScopedCallback",
      "info" : "SimpleType[70678-70700]:SimpleType[71279-71301]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[70712-70724]:SimpleType[71313-71325]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[70832-70858]:SimpleName[71433-71459]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[70868-70893]:SingleVariableDeclaration[71469-71494]"
    }, {
      "left" : "Map<Node, AstFunctionContents> outParam",
      "right" : "Map<Node, AstFunctionContents> outParam",
      "info" : "SingleVariableDeclaration[70895-70934]:SingleVariableDeclaration[71496-71535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70936-71003]:Block[71537-71604]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[70944-70969]:ExpressionStatement[71545-71570]"
    }, {
      "left" : "this.data = outParam;",
      "right" : "this.data = outParam;",
      "info" : "ExpressionStatement[70976-70997]:ExpressionStatement[71577-71598]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71009-71018]:MarkerAnnotation[71610-71619]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71019-71025]:Modifier[71620-71626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71026-71030]:PrimitiveType[71627-71631]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[71031-71038]:SimpleName[71632-71639]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[71039-71051]:SingleVariableDeclaration[71640-71652]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[71053-71062]:SingleVariableDeclaration[71654-71663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71064-71276]:Block[71665-71877]"
    }, {
      "left" : "if (externs == null)",
      "right" : "if (externs == null)",
      "info" : "IfStatement[71072-71270]:IfStatement[71673-71871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71093-71156]:Block[71694-71757]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[71103-71148]:ExpressionStatement[71704-71749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71162-71270]:Block[71763-71871]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "info" : "ExpressionStatement[71172-71262]:ExpressionStatement[71773-71863]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71282-71291]:MarkerAnnotation[71883-71892]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71292-71298]:Modifier[71893-71899]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71299-71303]:PrimitiveType[71900-71904]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[71304-71314]:SimpleName[71905-71915]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[71315-71330]:SingleVariableDeclaration[71916-71931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71332-71463]:Block[71933-72064]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[71340-71457]:IfStatement[71941-72058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71364-71457]:Block[71965-72058]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[71374-71400]:VariableDeclarationStatement[71975-72001]"
    }, {
      "left" : "data.put(n, new AstFunctionContents(n));",
      "right" : "data.put(n, new AstFunctionContents(n));",
      "info" : "ExpressionStatement[71409-71449]:ExpressionStatement[72010-72050]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71469-71478]:MarkerAnnotation[72070-72079]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71479-71485]:Modifier[72080-72086]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71486-71490]:PrimitiveType[72087-72091]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[71491-71496]:SimpleName[72092-72097]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[71497-71512]:SingleVariableDeclaration[72098-72113]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[71514-71520]:SingleVariableDeclaration[72115-72121]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[71522-71533]:SingleVariableDeclaration[72123-72134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71535-72116]:Block[72136-72717]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[71543-71591]:IfStatement[72144-72192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71566-71591]:Block[72167-72192]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71576-71583]:ReturnStatement[72177-72184]"
    }, {
      "left" : "if (n.isReturn() && n.getFirstChild() != null)",
      "right" : "if (n.isReturn() && n.getFirstChild() != null)",
      "info" : "IfStatement[71599-72110]:IfStatement[72200-72711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71646-71714]:Block[72247-72315]"
    }, {
      "left" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "right" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "info" : "ExpressionStatement[71656-71706]:ExpressionStatement[72257-72307]"
    }, {
      "left" : "if (n.isName() && NodeUtil.isLValue(n))",
      "right" : "if (n.isName() && NodeUtil.isLValue(n))",
      "info" : "IfStatement[71720-72110]:IfStatement[72321-72711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71760-72110]:Block[72361-72711]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[71770-71798]:VariableDeclarationStatement[72371-72399]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[71807-71834]:VariableDeclarationStatement[72408-72435]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[71843-71872]:VariableDeclarationStatement[72444-72473]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[71881-72102]:IfStatement[72482-72703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71898-72102]:Block[72499-72703]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[71910-71944]:VariableDeclarationStatement[72511-72545]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[71955-72092]:IfStatement[72556-72693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72004-72092]:Block[72605-72693]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "info" : "ExpressionStatement[72018-72080]:ExpressionStatement[72619-72681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72124-72131]:Modifier[72725-72732]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleType[72132-72151]:SimpleType[72733-72752]"
    }, {
      "left" : "getFunctionAnalysisResults",
      "right" : "getFunctionAnalysisResults",
      "info" : "SimpleName[72152-72178]:SimpleName[72753-72779]"
    }, {
      "left" : "@Nullable Node n",
      "right" : "@Nullable Node n",
      "info" : "SingleVariableDeclaration[72179-72195]:SingleVariableDeclaration[72780-72796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72197-72411]:Block[72798-73012]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[72203-72244]:IfStatement[72804-72845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72218-72244]:Block[72819-72845]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[72226-72238]:ReturnStatement[72827-72839]"
    }, {
      "left" : "return functionAnalysisResults.get(n);",
      "right" : "return functionAnalysisResults.get(n);",
      "info" : "ReturnStatement[72369-72407]:ReturnStatement[72970-73008]"
    } ]
  },
  "interFileMappings" : { }
}