{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "EditorGutterComponentImpl",
      "right" : "EditorGutterComponentImpl",
      "info" : "TypeDeclaration[3050-62236]:TypeDeclaration[3050-62473]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.openapi.editor.impl.EditorGutterComponentImpl\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.intellij.openapi.editor.impl.EditorGutterComponentImpl\");",
      "info" : "FieldDeclaration[3178-3294]:FieldDeclaration[3178-3294]"
    }, {
      "left" : "private static final int START_ICON_AREA_WIDTH = 15;",
      "right" : "private static final int START_ICON_AREA_WIDTH = 15;",
      "info" : "FieldDeclaration[3297-3349]:FieldDeclaration[3297-3349]"
    }, {
      "left" : "private static final int FREE_PAINTERS_AREA_WIDTH = 5;",
      "right" : "private static final int FREE_PAINTERS_AREA_WIDTH = 5;",
      "info" : "FieldDeclaration[3352-3406]:FieldDeclaration[3352-3406]"
    }, {
      "left" : "private static final int GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA = 5;",
      "right" : "private static final int GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA = 5;",
      "info" : "FieldDeclaration[3409-3479]:FieldDeclaration[3409-3479]"
    }, {
      "left" : "private static final int GAP_BETWEEN_ICONS = 3;",
      "right" : "private static final int GAP_BETWEEN_ICONS = 3;",
      "info" : "FieldDeclaration[3482-3529]:FieldDeclaration[3482-3529]"
    }, {
      "left" : "private static final int GAP_BEFORE_LINE_NUMBERS = 5;",
      "right" : "private static final int GAP_BEFORE_LINE_NUMBERS = 5;",
      "info" : "FieldDeclaration[3532-3585]:FieldDeclaration[3532-3585]"
    }, {
      "left" : "private static final int GAP_AFTER_LINE_NUMBERS = 4;",
      "right" : "private static final int GAP_AFTER_LINE_NUMBERS = 4;",
      "info" : "FieldDeclaration[3588-3640]:FieldDeclaration[3588-3640]"
    }, {
      "left" : "private static final TooltipGroup GUTTER_TOOLTIP_GROUP = new TooltipGroup(\"GUTTER_TOOLTIP_GROUP\", 0);",
      "right" : "private static final TooltipGroup GUTTER_TOOLTIP_GROUP = new TooltipGroup(\"GUTTER_TOOLTIP_GROUP\", 0);",
      "info" : "FieldDeclaration[3643-3744]:FieldDeclaration[3643-3744]"
    }, {
      "left" : "public static final TIntFunction ID = new TIntFunction() {\n    @Override\n    public int execute(int value) {\n      return value;\n    }\n  };",
      "right" : "public static final TIntFunction ID = new TIntFunction() {\n    @Override\n    public int execute(int value) {\n      return value;\n    }\n  };",
      "info" : "FieldDeclaration[3747-3886]:FieldDeclaration[3747-3886]"
    }, {
      "left" : "public int execute(int value)",
      "right" : "public int execute(int value)",
      "info" : "MethodDeclaration[3810-3881]:MethodDeclaration[3810-3881]"
    }, {
      "left" : "private final EditorImpl myEditor;",
      "right" : "private final EditorImpl myEditor;",
      "info" : "FieldDeclaration[3890-3924]:FieldDeclaration[3890-3924]"
    }, {
      "left" : "private final FoldingAnchorsOverlayStrategy myAnchorsDisplayStrategy;",
      "right" : "private final FoldingAnchorsOverlayStrategy myAnchorsDisplayStrategy;",
      "info" : "FieldDeclaration[3927-3996]:FieldDeclaration[3927-3996]"
    }, {
      "left" : "private int myLineMarkerAreaWidth = START_ICON_AREA_WIDTH + GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA + FREE_PAINTERS_AREA_WIDTH;",
      "right" : "private int myLineMarkerAreaWidth = START_ICON_AREA_WIDTH + GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA + FREE_PAINTERS_AREA_WIDTH;",
      "info" : "FieldDeclaration[3999-4127]:FieldDeclaration[3999-4127]"
    }, {
      "left" : "private int myIconsAreaWidth = START_ICON_AREA_WIDTH;",
      "right" : "private int myIconsAreaWidth = START_ICON_AREA_WIDTH;",
      "info" : "FieldDeclaration[4130-4183]:FieldDeclaration[4130-4183]"
    }, {
      "left" : "private int myLineNumberAreaWidth = 0;",
      "right" : "private int myLineNumberAreaWidth = 0;",
      "info" : "FieldDeclaration[4186-4224]:FieldDeclaration[4186-4224]"
    }, {
      "left" : "private int myAdditionalLineNumberAreaWidth = 0;",
      "right" : "private int myAdditionalLineNumberAreaWidth = 0;",
      "info" : "FieldDeclaration[4227-4275]:FieldDeclaration[4227-4275]"
    }, {
      "left" : "private FoldRegion myActiveFoldRegion;",
      "right" : "private FoldRegion myActiveFoldRegion;",
      "info" : "FieldDeclaration[4278-4316]:FieldDeclaration[4278-4316]"
    }, {
      "left" : "private int myTextAnnotationGuttersSize = 0;",
      "right" : "private int myTextAnnotationGuttersSize = 0;",
      "info" : "FieldDeclaration[4319-4363]:FieldDeclaration[4319-4363]"
    }, {
      "left" : "private int myTextAnnotationExtraSize = 0;",
      "right" : "private int myTextAnnotationExtraSize = 0;",
      "info" : "FieldDeclaration[4366-4408]:FieldDeclaration[4366-4408]"
    }, {
      "left" : "private TIntArrayList myTextAnnotationGutterSizes = new TIntArrayList();",
      "right" : "private TIntArrayList myTextAnnotationGutterSizes = new TIntArrayList();",
      "info" : "FieldDeclaration[4411-4483]:FieldDeclaration[4411-4483]"
    }, {
      "left" : "private ArrayList<TextAnnotationGutterProvider> myTextAnnotationGutters = new ArrayList<TextAnnotationGutterProvider>();",
      "right" : "private ArrayList<TextAnnotationGutterProvider> myTextAnnotationGutters = new ArrayList<TextAnnotationGutterProvider>();",
      "info" : "FieldDeclaration[4486-4606]:FieldDeclaration[4486-4606]"
    }, {
      "left" : "private final Map<TextAnnotationGutterProvider, EditorGutterAction> myProviderToListener = new HashMap<TextAnnotationGutterProvider, EditorGutterAction>();",
      "right" : "private final Map<TextAnnotationGutterProvider, EditorGutterAction> myProviderToListener = new HashMap<TextAnnotationGutterProvider, EditorGutterAction>();",
      "info" : "FieldDeclaration[4609-4764]:FieldDeclaration[4609-4764]"
    }, {
      "left" : "private static final int GAP_BETWEEN_ANNOTATIONS = 5;",
      "right" : "private static final int GAP_BETWEEN_ANNOTATIONS = 5;",
      "info" : "FieldDeclaration[4767-4820]:FieldDeclaration[4767-4820]"
    }, {
      "left" : "private String myLastGutterToolTip = null;",
      "right" : "private String myLastGutterToolTip = null;",
      "info" : "FieldDeclaration[4823-4865]:FieldDeclaration[4823-4865]"
    }, {
      "left" : "@NotNull private TIntFunction myLineNumberConvertor;",
      "right" : "@NotNull private TIntFunction myLineNumberConvertor;",
      "info" : "FieldDeclaration[4868-4920]:FieldDeclaration[4868-4920]"
    }, {
      "left" : "@Nullable private TIntFunction myAdditionalLineNumberConvertor;",
      "right" : "@Nullable private TIntFunction myAdditionalLineNumberConvertor;",
      "info" : "FieldDeclaration[4923-4986]:FieldDeclaration[4923-4986]"
    }, {
      "left" : "private TIntFunction myLineNumberAreaWidthFunction;",
      "right" : "private TIntFunction myLineNumberAreaWidthFunction;",
      "info" : "FieldDeclaration[4989-5040]:FieldDeclaration[4989-5040]"
    }, {
      "left" : "private boolean myShowDefaultGutterPopup = true;",
      "right" : "private boolean myShowDefaultGutterPopup = true;",
      "info" : "FieldDeclaration[5043-5091]:FieldDeclaration[5043-5091]"
    }, {
      "left" : "private TIntObjectHashMap<Color> myTextFgColors = new TIntObjectHashMap<Color>();",
      "right" : "private TIntObjectHashMap<Color> myTextFgColors = new TIntObjectHashMap<Color>();",
      "info" : "FieldDeclaration[5094-5175]:FieldDeclaration[5094-5175]"
    }, {
      "left" : "private boolean myPaintBackground = true;",
      "right" : "private boolean myPaintBackground = true;",
      "info" : "FieldDeclaration[5178-5219]:FieldDeclaration[5178-5219]"
    }, {
      "left" : "public EditorGutterComponentImpl(EditorImpl editor)",
      "right" : "public EditorGutterComponentImpl(EditorImpl editor)",
      "info" : "MethodDeclaration[5223-5561]:MethodDeclaration[5223-5561]"
    }, {
      "left" : "private void installDnD()",
      "right" : "private void installDnD()",
      "info" : "MethodDeclaration[5565-6935]:MethodDeclaration[5565-6935]"
    }, {
      "left" : "public DnDDragStartBean fun(DnDActionInfo info)",
      "right" : "public DnDDragStartBean fun(DnDActionInfo info)",
      "info" : "MethodDeclaration[5753-6015]:MethodDeclaration[5753-6015]"
    }, {
      "left" : "public void drop(DnDEvent e)",
      "right" : "public void drop(DnDEvent e)",
      "info" : "MethodDeclaration[6078-6637]:MethodDeclaration[6078-6637]"
    }, {
      "left" : "public DnDImage fun(DnDActionInfo info)",
      "right" : "public DnDImage fun(DnDActionInfo info)",
      "info" : "MethodDeclaration[6729-6904]:MethodDeclaration[6729-6904]"
    }, {
      "left" : "private void fireResized()",
      "right" : "private void fireResized()",
      "info" : "MethodDeclaration[6939-7058]:MethodDeclaration[6939-7058]"
    }, {
      "left" : "public Dimension getPreferredSize()",
      "right" : "public Dimension getPreferredSize()",
      "info" : "MethodDeclaration[7062-7331]:MethodDeclaration[7062-7331]"
    }, {
      "left" : "protected void setUI(ComponentUI newUI)",
      "right" : "protected void setUI(ComponentUI newUI)",
      "info" : "MethodDeclaration[7335-7438]:MethodDeclaration[7335-7438]"
    }, {
      "left" : "public void updateUI()",
      "right" : "public void updateUI()",
      "info" : "MethodDeclaration[7442-7526]:MethodDeclaration[7442-7526]"
    }, {
      "left" : "public void reinitSettings()",
      "right" : "public void reinitSettings()",
      "info" : "MethodDeclaration[7530-7603]:MethodDeclaration[7530-7603]"
    }, {
      "left" : "public void paint(Graphics g_)",
      "right" : "public void paint(Graphics g_)",
      "info" : "MethodDeclaration[7607-9553]:MethodDeclaration[7607-9553]"
    }, {
      "left" : "private void paintEditorBackgrounds(Graphics g, int firstVisibleOffset, int lastVisibleOffset)",
      "right" : "private void paintEditorBackgrounds(Graphics g, int firstVisibleOffset, int lastVisibleOffset)",
      "info" : "MethodDeclaration[9557-10890]:MethodDeclaration[9557-10890]"
    }, {
      "left" : "private void drawEditorBackgroundForRange(Graphics g, int startOffset, int endOffset, TextAttributes attributes,\n                                            Color defaultBackgroundColor, Color defaultForegroundColor, int startX)",
      "right" : "private void drawEditorBackgroundForRange(Graphics g, int startOffset, int endOffset, TextAttributes attributes,\n                                            Color defaultBackgroundColor, Color defaultForegroundColor, int startX)",
      "info" : "MethodDeclaration[10896-11933]:MethodDeclaration[10896-11933]"
    }, {
      "left" : "private void drawEditorLineBackgroundRect(Graphics g,\n                                            TextAttributes attributes,\n                                            int visualLine,\n                                            Color defaultBackgroundColor,\n                                            Color defaultForegroundColor,\n                                            int startX,\n                                            int startY)",
      "right" : "private void drawEditorLineBackgroundRect(Graphics g,\n                                            TextAttributes attributes,\n                                            int visualLine,\n                                            Color defaultBackgroundColor,\n                                            Color defaultForegroundColor,\n                                            int startX,\n                                            int startY)",
      "info" : "MethodDeclaration[11937-12792]:MethodDeclaration[11937-12792]"
    }, {
      "left" : "private void processClose(final MouseEvent e)",
      "right" : "private void processClose(final MouseEvent e)",
      "info" : "MethodDeclaration[12796-13734]:MethodDeclaration[12796-13734]"
    }, {
      "left" : "private void paintAnnotationsBackground(Graphics g, Rectangle clip, Color backgroundColor)",
      "right" : "private void paintAnnotationsBackground(Graphics g, Rectangle clip, Color backgroundColor)",
      "info" : "MethodDeclaration[13738-13977]:MethodDeclaration[13738-13977]"
    }, {
      "left" : "private void paintAnnotations(Graphics g, Rectangle clip)",
      "right" : "private void paintAnnotations(Graphics g, Rectangle clip)",
      "info" : "MethodDeclaration[13981-15804]:MethodDeclaration[13981-15804]"
    }, {
      "left" : "private void paintFoldingTree(Graphics g, Rectangle clip, int firstVisibleOffset, int lastVisibleOffset)",
      "right" : "private void paintFoldingTree(Graphics g, Rectangle clip, int firstVisibleOffset, int lastVisibleOffset)",
      "info" : "MethodDeclaration[15808-16045]:MethodDeclaration[15808-16045]"
    }, {
      "left" : "private void paintLineMarkersBackground(Graphics g, Rectangle clip, Color bgColor)",
      "right" : "private void paintLineMarkersBackground(Graphics g, Rectangle clip, Color bgColor)",
      "info" : "MethodDeclaration[16049-16269]:MethodDeclaration[16049-16269]"
    }, {
      "left" : "private void paintLineMarkers(Graphics g, int firstVisibleOffset, int lastVisibleOffset)",
      "right" : "private void paintLineMarkers(Graphics g, int firstVisibleOffset, int lastVisibleOffset)",
      "info" : "MethodDeclaration[16273-16475]:MethodDeclaration[16273-16475]"
    }, {
      "left" : "private void paintBackground(final Graphics g,\n                               final Rectangle clip,\n                               final int x,\n                               final int width,\n                               Color background)",
      "right" : "private void paintBackground(final Graphics g,\n                               final Rectangle clip,\n                               final int x,\n                               final int width,\n                               Color background)",
      "info" : "MethodDeclaration[16479-16843]:MethodDeclaration[16479-16843]"
    }, {
      "left" : "private void paintCaretRowBackground(final Graphics g, final int x, final int width)",
      "right" : "private void paintCaretRowBackground(final Graphics g, final int x, final int width)",
      "info" : "MethodDeclaration[16847-17381]:MethodDeclaration[16847-17381]"
    }, {
      "left" : "private void paintLineNumbers(Graphics g, Rectangle clip)",
      "right" : "private void paintLineNumbers(Graphics g, Rectangle clip)",
      "info" : "MethodDeclaration[17385-17795]:MethodDeclaration[17385-17795]"
    }, {
      "left" : "private void paintLineNumbersBackground(Graphics g, Rectangle clip, Color bgColor)",
      "right" : "private void paintLineNumbersBackground(Graphics g, Rectangle clip, Color bgColor)",
      "info" : "MethodDeclaration[17799-18019]:MethodDeclaration[17799-18019]"
    }, {
      "left" : "public Color getBackground()",
      "right" : "public Color getBackground()",
      "info" : "MethodDeclaration[18023-18359]:MethodDeclaration[18023-18359]"
    }, {
      "left" : "private void doPaintLineNumbers(Graphics g, Rectangle clip, int offset, @NotNull TIntFunction convertor)",
      "right" : "private void doPaintLineNumbers(Graphics g, Rectangle clip, int offset, @NotNull TIntFunction convertor)",
      "info" : "MethodDeclaration[18363-20486]:MethodDeclaration[18363-20486]"
    }, {
      "left" : "private int endLineNumber()",
      "right" : "private int endLineNumber()",
      "info" : "MethodDeclaration[20490-20590]:MethodDeclaration[20490-20590]"
    }, {
      "left" : "public Object getData(@NonNls String dataId)",
      "right" : "public Object getData(@NonNls String dataId)",
      "info" : "MethodDeclaration[20594-20722]:MethodDeclaration[20594-20722]"
    }, {
      "left" : "RangeHighlighterProcessor",
      "right" : "RangeHighlighterProcessor",
      "info" : "TypeDeclaration[20726-20832]:TypeDeclaration[20726-20832]"
    }, {
      "left" : "void process(@NotNull RangeHighlighter highlighter);",
      "right" : "void process(@NotNull RangeHighlighter highlighter);",
      "info" : "MethodDeclaration[20776-20828]:MethodDeclaration[20776-20828]"
    }, {
      "left" : "private void processRangeHighlighters(int startOffset, int endOffset, @NotNull RangeHighlighterProcessor processor)",
      "right" : "private void processRangeHighlighters(int startOffset, int endOffset, @NotNull RangeHighlighterProcessor processor)",
      "info" : "MethodDeclaration[20836-23632]:MethodDeclaration[20836-23632]"
    }, {
      "left" : "private static boolean less(RangeHighlighter h1, RangeHighlighter h2)",
      "right" : "private static boolean less(RangeHighlighter h1, RangeHighlighter h2)",
      "info" : "MethodDeclaration[23636-23795]:MethodDeclaration[23636-23795]"
    }, {
      "left" : "public void revalidateMarkup()",
      "right" : "public void revalidateMarkup()",
      "info" : "MethodDeclaration[23799-23865]:MethodDeclaration[23799-23865]"
    }, {
      "left" : "public void updateSize()",
      "right" : "public void updateSize()",
      "info" : "MethodDeclaration[23869-23922]:MethodDeclaration[23869-23922]"
    }, {
      "left" : "void updateSize(boolean onLayout)",
      "right" : "void updateSize(boolean onLayout)",
      "info" : "MethodDeclaration[23926-24104]:MethodDeclaration[23926-24104]"
    }, {
      "left" : "private void updateSizeInner(boolean onLayout)",
      "right" : "private void updateSizeInner(boolean onLayout)",
      "info" : "MethodDeclaration[24108-24307]:MethodDeclaration[24108-24307]"
    }, {
      "left" : "private int sizeHash()",
      "right" : "private int sizeHash()",
      "info" : "MethodDeclaration[24311-24561]:MethodDeclaration[24311-24561]"
    }, {
      "left" : "private void calcAnnotationsSize()",
      "right" : "private void calcAnnotationsSize()",
      "info" : "MethodDeclaration[24565-25374]:MethodDeclaration[24565-25374]"
    }, {
      "left" : "private void calcAnnotationExtraSize()",
      "right" : "private void calcAnnotationExtraSize()",
      "info" : "MethodDeclaration[25378-26515]:MethodDeclaration[25378-26515]"
    }, {
      "left" : "private TIntObjectHashMap<List<GutterMark>> myLineToGutterRenderers;",
      "right" : "private TIntObjectHashMap<List<GutterMark>> myLineToGutterRenderers;",
      "info" : "FieldDeclaration[26519-26587]:FieldDeclaration[26519-26587]"
    }, {
      "left" : "private void calcIconAreaWidth()",
      "right" : "private void calcIconAreaWidth()",
      "info" : "MethodDeclaration[26591-28344]:MethodDeclaration[26591-28344]"
    }, {
      "left" : "public void process(@NotNull RangeHighlighter highlighter)",
      "right" : "public void process(@NotNull RangeHighlighter highlighter)",
      "info" : "MethodDeclaration[26812-27631]:MethodDeclaration[26812-27631]"
    }, {
      "left" : "public boolean execute(List<GutterMark> renderers)",
      "right" : "public boolean execute(List<GutterMark> renderers)",
      "info" : "MethodDeclaration[27778-28215]:MethodDeclaration[27778-28215]"
    }, {
      "left" : "private boolean isHighlighterVisible(RangeHighlighter highlighter)",
      "right" : "private boolean isHighlighterVisible(RangeHighlighter highlighter)",
      "info" : "MethodDeclaration[28348-28988]:MethodDeclaration[28348-28988]"
    }, {
      "left" : "private void paintGutterRenderers(final Graphics g, int firstVisibleOffset, int lastVisibleOffset)",
      "right" : "private void paintGutterRenderers(final Graphics g, int firstVisibleOffset, int lastVisibleOffset)",
      "info" : "MethodDeclaration[28992-29884]:MethodDeclaration[28992-29884]"
    }, {
      "left" : "public void process(@NotNull RangeHighlighter highlighter)",
      "right" : "public void process(@NotNull RangeHighlighter highlighter)",
      "info" : "MethodDeclaration[29416-29555]:MethodDeclaration[29416-29555]"
    }, {
      "left" : "private void paintIcons(final int firstVisibleLine, final int lastVisibleLine, final Graphics g)",
      "right" : "private void paintIcons(final int firstVisibleLine, final int lastVisibleLine, final Graphics g)",
      "info" : "MethodDeclaration[29888-30220]:MethodDeclaration[29888-30220]"
    }, {
      "left" : "private void paintIconRow(int line, List<GutterMark> row, final Graphics g)",
      "right" : "private void paintIconRow(int line, List<GutterMark> row, final Graphics g)",
      "info" : "MethodDeclaration[30224-30587]:MethodDeclaration[30224-30587]"
    }, {
      "left" : "public void process(int x, int y, GutterMark renderer)",
      "right" : "public void process(int x, int y, GutterMark renderer)",
      "info" : "MethodDeclaration[30379-30575]:MethodDeclaration[30379-30575]"
    }, {
      "left" : "private void paintLineMarkerRenderer(RangeHighlighter highlighter, Graphics g)",
      "right" : "private void paintLineMarkerRenderer(RangeHighlighter highlighter, Graphics g)",
      "info" : "MethodDeclaration[30591-30962]:MethodDeclaration[30591-30962]"
    }, {
      "left" : "private Rectangle getLineRendererRectangle(RangeHighlighter highlighter)",
      "right" : "private Rectangle getLineRendererRectangle(RangeHighlighter highlighter)",
      "info" : "MethodDeclaration[30966-32416]:MethodDeclaration[30966-32416]"
    }, {
      "left" : "LineGutterIconRendererProcessor",
      "right" : "LineGutterIconRendererProcessor",
      "info" : "TypeDeclaration[32420-32528]:TypeDeclaration[32420-32528]"
    }, {
      "left" : "void process(int x, int y, GutterMark renderer);",
      "right" : "void process(int x, int y, GutterMark renderer);",
      "info" : "MethodDeclaration[32476-32524]:MethodDeclaration[32476-32524]"
    }, {
      "left" : "private Icon scaleIcon(Icon icon)",
      "right" : "private Icon scaleIcon(Icon icon)",
      "info" : "MethodDeclaration[32532-32732]:MethodDeclaration[32532-32732]"
    }, {
      "left" : "private void processIconsRow(int line, List<GutterMark> row, LineGutterIconRendererProcessor processor)",
      "right" : "private void processIconsRow(int line, List<GutterMark> row, LineGutterIconRendererProcessor processor)",
      "info" : "MethodDeclaration[32736-34581]:MethodDeclaration[32736-34581]"
    }, {
      "left" : "private int getTextAlignmentShift(Icon icon)",
      "right" : "private int getTextAlignmentShift(Icon icon)",
      "info" : "MethodDeclaration[34585-34700]:MethodDeclaration[34585-34700]"
    }, {
      "left" : "public Color getOutlineColor(boolean isActive)",
      "right" : "public Color getOutlineColor(boolean isActive)",
      "info" : "MethodDeclaration[34704-34976]:MethodDeclaration[34704-34976]"
    }, {
      "left" : "public void registerTextAnnotation(@NotNull TextAnnotationGutterProvider provider)",
      "right" : "public void registerTextAnnotation(@NotNull TextAnnotationGutterProvider provider)",
      "info" : "MethodDeclaration[34980-35181]:MethodDeclaration[34980-35181]"
    }, {
      "left" : "public void registerTextAnnotation(@NotNull TextAnnotationGutterProvider provider, @NotNull EditorGutterAction action)",
      "right" : "public void registerTextAnnotation(@NotNull TextAnnotationGutterProvider provider, @NotNull EditorGutterAction action)",
      "info" : "MethodDeclaration[35185-35470]:MethodDeclaration[35185-35470]"
    }, {
      "left" : "private void doPaintFoldingTree(final Graphics2D g, final Rectangle clip, int firstVisibleOffset, int lastVisibleOffset)",
      "right" : "private void doPaintFoldingTree(final Graphics2D g, final Rectangle clip, int firstVisibleOffset, int lastVisibleOffset)",
      "info" : "MethodDeclaration[35474-36048]:MethodDeclaration[35474-36048]"
    }, {
      "left" : "private void paintFoldingBackground(Graphics g, Rectangle clip, Color bgColor)",
      "right" : "private void paintFoldingBackground(Graphics g, Rectangle clip, Color bgColor)",
      "info" : "MethodDeclaration[36052-36450]:MethodDeclaration[36052-36450]"
    }, {
      "left" : "private void paintFoldingLines(final Graphics2D g, final Rectangle clip)",
      "right" : "private void paintFoldingLines(final Graphics2D g, final Rectangle clip)",
      "info" : "MethodDeclaration[36454-37581]:MethodDeclaration[36454-37581]"
    }, {
      "left" : "public int getWhitespaceSeparatorOffset()",
      "right" : "public int getWhitespaceSeparatorOffset()",
      "info" : "MethodDeclaration[37585-37709]:MethodDeclaration[37585-37709]"
    }, {
      "left" : "public void setActiveFoldRegion(FoldRegion activeFoldRegion)",
      "right" : "public void setActiveFoldRegion(FoldRegion activeFoldRegion)",
      "info" : "MethodDeclaration[37713-37897]:MethodDeclaration[37713-37897]"
    }, {
      "left" : "public int getHeadCenterY(FoldRegion foldRange)",
      "right" : "public int getHeadCenterY(FoldRegion foldRange)",
      "info" : "MethodDeclaration[37901-38183]:MethodDeclaration[37901-38183]"
    }, {
      "left" : "private void drawAnchor(int width, Rectangle clip, Graphics2D g, int anchorX, int visualLine,\n                          DisplayedFoldingAnchor.Type type, boolean active)",
      "right" : "private void drawAnchor(int width, Rectangle clip, Graphics2D g, int anchorX, int visualLine,\n                          DisplayedFoldingAnchor.Type type, boolean active)",
      "info" : "MethodDeclaration[38187-39344]:MethodDeclaration[38187-39344]"
    }, {
      "left" : "private int getEndOffset(FoldRegion foldRange)",
      "right" : "private int getEndOffset(FoldRegion foldRange)",
      "info" : "MethodDeclaration[39348-39601]:MethodDeclaration[39348-39601]"
    }, {
      "left" : "private void drawDirectedBox(Graphics2D g,\n                               int anchorX,\n                               int y,\n                               int width,\n                               int height,\n                               int baseHeight,\n                               boolean active)",
      "right" : "private void drawDirectedBox(Graphics2D g,\n                               int anchorX,\n                               int y,\n                               int width,\n                               int height,\n                               int baseHeight,\n                               boolean active)",
      "info" : "MethodDeclaration[39605-40862]:MethodDeclaration[39605-40862]"
    }, {
      "left" : "private void drawSquareWithPlus(Graphics2D g,\n                                  int anchorX,\n                                  int y,\n                                  int width,\n                                  boolean active)",
      "right" : "private void drawSquareWithPlus(Graphics2D g,\n                                  int anchorX,\n                                  int y,\n                                  int width,\n                                  boolean active)",
      "info" : "MethodDeclaration[40866-41282]:MethodDeclaration[40866-41282]"
    }, {
      "left" : "private void drawSquareWithMinus(Graphics2D g,\n                                   int anchorX,\n                                   int y,\n                                   int width,\n                                   boolean active)",
      "right" : "private void drawSquareWithMinus(Graphics2D g,\n                                   int anchorX,\n                                   int y,\n                                   int width,\n                                   boolean active)",
      "info" : "MethodDeclaration[41286-41943]:MethodDeclaration[41286-41943]"
    }, {
      "left" : "private int getFoldingAnchorWidth()",
      "right" : "private int getFoldingAnchorWidth()",
      "info" : "MethodDeclaration[41947-42074]:MethodDeclaration[41947-42074]"
    }, {
      "left" : "public int getFoldingAreaOffset()",
      "right" : "public int getFoldingAreaOffset()",
      "info" : "MethodDeclaration[42078-42182]:MethodDeclaration[42078-42182]"
    }, {
      "left" : "public int getFoldingAreaWidth()",
      "right" : "public int getFoldingAreaWidth()",
      "info" : "MethodDeclaration[42186-42374]:MethodDeclaration[42186-42374]"
    }, {
      "left" : "public boolean isRealEditor()",
      "right" : "public boolean isRealEditor()",
      "info" : "MethodDeclaration[42378-42463]:MethodDeclaration[42378-42463]"
    }, {
      "left" : "public boolean isLineMarkersShown()",
      "right" : "public boolean isLineMarkersShown()",
      "info" : "MethodDeclaration[42467-42579]:MethodDeclaration[42467-42579]"
    }, {
      "left" : "public boolean isLineNumbersShown()",
      "right" : "public boolean isLineNumbersShown()",
      "info" : "MethodDeclaration[42583-42680]:MethodDeclaration[42583-42680]"
    }, {
      "left" : "public boolean isAnnotationsShown()",
      "right" : "public boolean isAnnotationsShown()",
      "info" : "MethodDeclaration[42684-42784]:MethodDeclaration[42684-42784]"
    }, {
      "left" : "public boolean isFoldingOutlineShown()",
      "right" : "public boolean isFoldingOutlineShown()",
      "info" : "MethodDeclaration[42788-43010]:MethodDeclaration[42788-43010]"
    }, {
      "left" : "public int getLineNumberAreaWidth()",
      "right" : "public int getLineNumberAreaWidth()",
      "info" : "MethodDeclaration[43014-43150]:MethodDeclaration[43014-43150]"
    }, {
      "left" : "public int getLineMarkerAreaWidth()",
      "right" : "public int getLineMarkerAreaWidth()",
      "info" : "MethodDeclaration[43154-43256]:MethodDeclaration[43154-43256]"
    }, {
      "left" : "public void setLineNumberAreaWidthFunction(@NotNull TIntFunction calculator)",
      "right" : "public void setLineNumberAreaWidthFunction(@NotNull TIntFunction calculator)",
      "info" : "MethodDeclaration[43260-43390]:MethodDeclaration[43260-43390]"
    }, {
      "left" : "private void calcLineNumberAreaWidth()",
      "right" : "private void calcLineNumberAreaWidth()",
      "info" : "MethodDeclaration[43394-44098]:MethodDeclaration[43394-44098]"
    }, {
      "left" : "private int getMaxLineNumber(@NotNull TIntFunction convertor)",
      "right" : "private int getMaxLineNumber(@NotNull TIntFunction convertor)",
      "info" : "MethodDeclaration[44102-44335]:MethodDeclaration[44102-44335]"
    }, {
      "left" : "public EditorMouseEventArea getEditorMouseAreaByOffset(int offset)",
      "right" : "public EditorMouseEventArea getEditorMouseAreaByOffset(int offset)",
      "info" : "MethodDeclaration[44339-45074]:MethodDeclaration[44339-45074]"
    }, {
      "left" : "public static int getLineNumberAreaOffset()",
      "right" : "public static int getLineNumberAreaOffset()",
      "info" : "MethodDeclaration[45078-45141]:MethodDeclaration[45078-45141]"
    }, {
      "left" : "public int getAnnotationsAreaOffset()",
      "right" : "public int getAnnotationsAreaOffset()",
      "info" : "MethodDeclaration[45145-45253]:MethodDeclaration[45145-45253]"
    }, {
      "left" : "public int getAnnotationsAreaWidth()",
      "right" : "public int getAnnotationsAreaWidth()",
      "info" : "MethodDeclaration[45257-45339]:MethodDeclaration[45257-45339]"
    }, {
      "left" : "public int getAnnotationsAreaWidthEx()",
      "right" : "public int getAnnotationsAreaWidthEx()",
      "info" : "MethodDeclaration[45343-45455]:MethodDeclaration[45343-45455]"
    }, {
      "left" : "public int getLineMarkerAreaOffset()",
      "right" : "public int getLineMarkerAreaOffset()",
      "info" : "MethodDeclaration[45459-45582]:MethodDeclaration[45459-45582]"
    }, {
      "left" : "public int getLineMarkerFreePaintersAreaOffset()",
      "right" : "public int getLineMarkerFreePaintersAreaOffset()",
      "info" : "MethodDeclaration[45586-45752]:MethodDeclaration[45586-45752]"
    }, {
      "left" : "public int getIconsAreaWidth()",
      "right" : "public int getIconsAreaWidth()",
      "info" : "MethodDeclaration[45758-45835]:MethodDeclaration[45758-45835]"
    }, {
      "left" : "private boolean isMirrored()",
      "right" : "private boolean isMirrored()",
      "info" : "MethodDeclaration[45839-45965]:MethodDeclaration[45839-45965]"
    }, {
      "left" : "public FoldRegion findFoldingAnchorAt(int x, int y)",
      "right" : "public FoldRegion findFoldingAnchorAt(int x, int y)",
      "info" : "MethodDeclaration[45969-46866]:MethodDeclaration[45969-46866]"
    }, {
      "left" : "private Rectangle rectangleByFoldOffset(int foldStart, int anchorWidth, int anchorX)",
      "right" : "private Rectangle rectangleByFoldOffset(int foldStart, int anchorWidth, int anchorX)",
      "info" : "MethodDeclaration[46870-47216]:MethodDeclaration[46870-47216]"
    }, {
      "left" : "public void mouseDragged(MouseEvent e)",
      "right" : "public void mouseDragged(MouseEvent e)",
      "info" : "MethodDeclaration[47220-47330]:MethodDeclaration[47220-47330]"
    }, {
      "left" : "public void mouseMoved(final MouseEvent e)",
      "right" : "public void mouseMoved(final MouseEvent e)",
      "info" : "MethodDeclaration[47334-49800]:MethodDeclaration[47334-49800]"
    }, {
      "left" : "public void process(int x, int y, GutterMark r)",
      "right" : "public void process(int x, int y, GutterMark r)",
      "info" : "MethodDeclaration[48723-49066]:MethodDeclaration[48723-49066]"
    }, {
      "left" : "void validateMousePointer(@NotNull MouseEvent e)",
      "right" : "void validateMousePointer(@NotNull MouseEvent e)",
      "info" : "MethodDeclaration[49804-51022]:MethodDeclaration[49804-51022]"
    }, {
      "left" : "public void mouseClicked(MouseEvent e)",
      "right" : "public void mouseClicked(MouseEvent e)",
      "info" : "MethodDeclaration[51026-51140]:MethodDeclaration[51026-51140]"
    }, {
      "left" : "private void fireEventToTextAnnotationListeners(final MouseEvent e)",
      "right" : "private void fireEventToTextAnnotationListeners(final MouseEvent e)",
      "info" : "MethodDeclaration[51144-51805]:MethodDeclaration[51144-51805]"
    }, {
      "left" : "private int getLineNumAtPoint(final Point clickPoint)",
      "right" : "private int getLineNumAtPoint(final Point clickPoint)",
      "info" : "MethodDeclaration[51809-51936]:MethodDeclaration[51809-51936]"
    }, {
      "left" : "private TextAnnotationGutterProvider getProviderAtPoint(final Point clickPoint)",
      "right" : "private TextAnnotationGutterProvider getProviderAtPoint(final Point clickPoint)",
      "info" : "MethodDeclaration[51940-52346]:MethodDeclaration[51940-52346]"
    }, {
      "left" : "public void mousePressed(MouseEvent e)",
      "right" : "public void mousePressed(MouseEvent e)",
      "info" : "MethodDeclaration[52350-52548]:MethodDeclaration[52350-52548]"
    }, {
      "left" : "private boolean isPopupAction(MouseEvent e)",
      "right" : "private boolean isPopupAction(MouseEvent e)",
      "info" : "MethodDeclaration[52552-52765]:MethodDeclaration[52552-52833]"
    }, {
      "left" : "public void mouseReleased(final MouseEvent e)",
      "right" : "private static boolean isNavigationBlocked(@Nullable GutterIconRenderer renderer, @Nullable Project project)",
      "info" : "MethodDeclaration[52769-54118]:MethodDeclaration[54144-54355]"
    }, {
      "left" : "private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e)",
      "right" : "private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e)",
      "info" : "MethodDeclaration[54122-55719]:MethodDeclaration[54359-55956]"
    }, {
      "left" : "public void process(@NotNull RangeHighlighter highlighter)",
      "right" : "public void process(@NotNull RangeHighlighter highlighter)",
      "info" : "MethodDeclaration[54941-55677]:MethodDeclaration[55178-55914]"
    }, {
      "left" : "public void closeAllAnnotations()",
      "right" : "public void closeAllAnnotations()",
      "info" : "MethodDeclaration[55723-55911]:MethodDeclaration[55960-56148]"
    }, {
      "left" : "private void revalidateSizes()",
      "right" : "private void revalidateSizes()",
      "info" : "MethodDeclaration[55915-56101]:MethodDeclaration[56152-56338]"
    }, {
      "left" : "CloseAnnotationsAction",
      "right" : "CloseAnnotationsAction",
      "info" : "TypeDeclaration[56105-56400]:TypeDeclaration[56342-56637]"
    }, {
      "left" : "public CloseAnnotationsAction()",
      "right" : "public CloseAnnotationsAction()",
      "info" : "MethodDeclaration[56172-56286]:MethodDeclaration[56409-56523]"
    }, {
      "left" : "public void actionPerformed(@NotNull AnActionEvent e)",
      "right" : "public void actionPerformed(@NotNull AnActionEvent e)",
      "info" : "MethodDeclaration[56292-56396]:MethodDeclaration[56529-56633]"
    }, {
      "left" : "public Point getPoint(final GutterIconRenderer renderer)",
      "right" : "public Point getPoint(final GutterIconRenderer renderer)",
      "info" : "MethodDeclaration[56404-56986]:MethodDeclaration[56641-57223]"
    }, {
      "left" : "public void process(int x, int y, GutterMark r)",
      "right" : "public void process(int x, int y, GutterMark r)",
      "info" : "MethodDeclaration[56696-56881]:MethodDeclaration[56933-57118]"
    }, {
      "left" : "public void setLineNumberConvertor(@NotNull TIntFunction lineNumberConvertor)",
      "right" : "public void setLineNumberConvertor(@NotNull TIntFunction lineNumberConvertor)",
      "info" : "MethodDeclaration[56990-57140]:MethodDeclaration[57227-57377]"
    }, {
      "left" : "public void setLineNumberConvertor(@NotNull TIntFunction lineNumberConvertor1, @Nullable TIntFunction lineNumberConvertor2)",
      "right" : "public void setLineNumberConvertor(@NotNull TIntFunction lineNumberConvertor1, @Nullable TIntFunction lineNumberConvertor2)",
      "info" : "MethodDeclaration[57144-57395]:MethodDeclaration[57381-57632]"
    }, {
      "left" : "public void setShowDefaultGutterPopup(boolean show)",
      "right" : "public void setShowDefaultGutterPopup(boolean show)",
      "info" : "MethodDeclaration[57399-57505]:MethodDeclaration[57636-57742]"
    }, {
      "left" : "public void setPaintBackground(boolean value)",
      "right" : "public void setPaintBackground(boolean value)",
      "info" : "MethodDeclaration[57509-57603]:MethodDeclaration[57746-57840]"
    }, {
      "left" : "private void invokePopup(MouseEvent e)",
      "right" : "private void invokePopup(MouseEvent e)",
      "info" : "MethodDeclaration[57607-60271]:MethodDeclaration[57844-60508]"
    }, {
      "left" : "public void mouseEntered(MouseEvent e)",
      "right" : "public void mouseEntered(MouseEvent e)",
      "info" : "MethodDeclaration[60275-60331]:MethodDeclaration[60512-60568]"
    }, {
      "left" : "public void mouseExited(MouseEvent e)",
      "right" : "public void mouseExited(MouseEvent e)",
      "info" : "MethodDeclaration[60335-60473]:MethodDeclaration[60572-60710]"
    }, {
      "left" : "private int convertPointToLineNumber(final Point p)",
      "right" : "private int convertPointToLineNumber(final Point p)",
      "info" : "MethodDeclaration[60477-61024]:MethodDeclaration[60714-61261]"
    }, {
      "left" : "private GutterMark getGutterRenderer(final Point p)",
      "right" : "private GutterMark getGutterRenderer(final Point p)",
      "info" : "MethodDeclaration[61028-61798]:MethodDeclaration[61265-62035]"
    }, {
      "left" : "public void process(int x, int y, GutterMark renderer)",
      "right" : "public void process(int x, int y, GutterMark renderer)",
      "info" : "MethodDeclaration[61417-61763]:MethodDeclaration[61654-62000]"
    }, {
      "left" : "private GutterIconRenderer getGutterRenderer(final MouseEvent e)",
      "right" : "private GutterIconRenderer getGutterRenderer(final MouseEvent e)",
      "info" : "MethodDeclaration[61802-61948]:MethodDeclaration[62039-62185]"
    }, {
      "left" : "public int convertX(int x)",
      "right" : "public int convertX(int x)",
      "info" : "MethodDeclaration[61952-62044]:MethodDeclaration[62189-62281]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[62048-62234]:MethodDeclaration[62285-62471]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3050-3055]:TYPE_DECLARATION_KIND[3050-3055]"
    }, {
      "left" : "EditorGutterComponentImpl",
      "right" : "EditorGutterComponentImpl",
      "info" : "SimpleName[3056-3081]:SimpleName[3056-3081]"
    }, {
      "left" : "EditorGutterComponentEx",
      "right" : "EditorGutterComponentEx",
      "info" : "SimpleType[3090-3113]:SimpleType[3090-3113]"
    }, {
      "left" : "MouseListener",
      "right" : "MouseListener",
      "info" : "SimpleType[3125-3138]:SimpleType[3125-3138]"
    }, {
      "left" : "MouseMotionListener",
      "right" : "MouseMotionListener",
      "info" : "SimpleType[3140-3159]:SimpleType[3140-3159]"
    }, {
      "left" : "DataProvider",
      "right" : "DataProvider",
      "info" : "SimpleType[3161-3173]:SimpleType[3161-3173]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3810-3819]:MarkerAnnotation[3810-3819]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3824-3830]:Modifier[3824-3830]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3831-3834]:PrimitiveType[3831-3834]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[3835-3842]:SimpleName[3835-3842]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[3843-3852]:SingleVariableDeclaration[3843-3852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3854-3881]:Block[3854-3881]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[3862-3875]:ReturnStatement[3862-3875]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[5223-5253]:SingleMemberAnnotation[5223-5253]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5256-5262]:Modifier[5256-5262]"
    }, {
      "left" : "EditorGutterComponentImpl",
      "right" : "EditorGutterComponentImpl",
      "info" : "SimpleName[5263-5288]:SimpleName[5263-5288]"
    }, {
      "left" : "EditorImpl editor",
      "right" : "EditorImpl editor",
      "info" : "SingleVariableDeclaration[5289-5306]:SingleVariableDeclaration[5289-5306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5308-5561]:Block[5308-5561]"
    }, {
      "left" : "myEditor = editor;",
      "right" : "myEditor = editor;",
      "info" : "ExpressionStatement[5314-5332]:ExpressionStatement[5314-5332]"
    }, {
      "left" : "myLineNumberConvertor = ID;",
      "right" : "myLineNumberConvertor = ID;",
      "info" : "ExpressionStatement[5337-5364]:ExpressionStatement[5337-5364]"
    }, {
      "left" : "if (!ApplicationManager.getApplication().isHeadlessEnvironment())",
      "right" : "if (!ApplicationManager.getApplication().isHeadlessEnvironment())",
      "info" : "IfStatement[5369-5462]:IfStatement[5369-5462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5435-5462]:Block[5435-5462]"
    }, {
      "left" : "installDnD();",
      "right" : "installDnD();",
      "info" : "ExpressionStatement[5443-5456]:ExpressionStatement[5443-5456]"
    }, {
      "left" : "setOpaque(true);",
      "right" : "setOpaque(true);",
      "info" : "ExpressionStatement[5467-5483]:ExpressionStatement[5467-5483]"
    }, {
      "left" : "myAnchorsDisplayStrategy = new FoldingAnchorsOverlayStrategy(editor);",
      "right" : "myAnchorsDisplayStrategy = new FoldingAnchorsOverlayStrategy(editor);",
      "info" : "ExpressionStatement[5488-5557]:ExpressionStatement[5488-5557]"
    }, {
      "left" : "@SuppressWarnings({\"ConstantConditions\"})",
      "right" : "@SuppressWarnings({\"ConstantConditions\"})",
      "info" : "SingleMemberAnnotation[5565-5606]:SingleMemberAnnotation[5565-5606]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5609-5616]:Modifier[5609-5616]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5617-5621]:PrimitiveType[5617-5621]"
    }, {
      "left" : "installDnD",
      "right" : "installDnD",
      "info" : "SimpleName[5622-5632]:SimpleName[5622-5632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5635-6935]:Block[5635-6935]"
    }, {
      "left" : "DnDSupport.createBuilder(this)\n      .setBeanProvider(new Function<DnDActionInfo, DnDDragStartBean>() {\n        @Override\n        public DnDDragStartBean fun(DnDActionInfo info) {\n          final GutterMark renderer = getGutterRenderer(info.getPoint());\n          return renderer != null && (info.isCopy() || info.isMove()) ? new DnDDragStartBean(renderer) : null;\n        }\n      })\n      .setDropHandler(new DnDDropHandler() {\n        @Override\n        public void drop(DnDEvent e) {\n          final Object attachedObject = e.getAttachedObject();\n          if (attachedObject instanceof GutterIconRenderer) {\n            final GutterDraggableObject draggableObject = ((GutterIconRenderer)attachedObject).getDraggableObject();\n            if (draggableObject != null) {\n              final int line = convertPointToLineNumber(e.getPoint());\n              if (line != -1) {\n                draggableObject.copy(line, myEditor.getVirtualFile());\n              }\n            }\n          }\n        }\n      })\n      .setImageProvider(new NullableFunction<DnDActionInfo, DnDImage>() {\n        @Override\n        public DnDImage fun(DnDActionInfo info) {\n          return new DnDImage(IconUtil.toImage(scaleIcon(getGutterRenderer(info.getPoint()).getIcon())));\n        }\n      })\n      .install();",
      "right" : "DnDSupport.createBuilder(this)\n      .setBeanProvider(new Function<DnDActionInfo, DnDDragStartBean>() {\n        @Override\n        public DnDDragStartBean fun(DnDActionInfo info) {\n          final GutterMark renderer = getGutterRenderer(info.getPoint());\n          return renderer != null && (info.isCopy() || info.isMove()) ? new DnDDragStartBean(renderer) : null;\n        }\n      })\n      .setDropHandler(new DnDDropHandler() {\n        @Override\n        public void drop(DnDEvent e) {\n          final Object attachedObject = e.getAttachedObject();\n          if (attachedObject instanceof GutterIconRenderer) {\n            final GutterDraggableObject draggableObject = ((GutterIconRenderer)attachedObject).getDraggableObject();\n            if (draggableObject != null) {\n              final int line = convertPointToLineNumber(e.getPoint());\n              if (line != -1) {\n                draggableObject.copy(line, myEditor.getVirtualFile());\n              }\n            }\n          }\n        }\n      })\n      .setImageProvider(new NullableFunction<DnDActionInfo, DnDImage>() {\n        @Override\n        public DnDImage fun(DnDActionInfo info) {\n          return new DnDImage(IconUtil.toImage(scaleIcon(getGutterRenderer(info.getPoint()).getIcon())));\n        }\n      })\n      .install();",
      "info" : "ExpressionStatement[5641-6931]:ExpressionStatement[5641-6931]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5753-5762]:MarkerAnnotation[5753-5762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5771-5777]:Modifier[5771-5777]"
    }, {
      "left" : "DnDDragStartBean",
      "right" : "DnDDragStartBean",
      "info" : "SimpleType[5778-5794]:SimpleType[5778-5794]"
    }, {
      "left" : "fun",
      "right" : "fun",
      "info" : "SimpleName[5795-5798]:SimpleName[5795-5798]"
    }, {
      "left" : "DnDActionInfo info",
      "right" : "DnDActionInfo info",
      "info" : "SingleVariableDeclaration[5799-5817]:SingleVariableDeclaration[5799-5817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5819-6015]:Block[5819-6015]"
    }, {
      "left" : "final GutterMark renderer = getGutterRenderer(info.getPoint());",
      "right" : "final GutterMark renderer = getGutterRenderer(info.getPoint());",
      "info" : "VariableDeclarationStatement[5831-5894]:VariableDeclarationStatement[5831-5894]"
    }, {
      "left" : "return renderer != null && (info.isCopy() || info.isMove()) ? new DnDDragStartBean(renderer) : null;",
      "right" : "return renderer != null && (info.isCopy() || info.isMove()) ? new DnDDragStartBean(renderer) : null;",
      "info" : "ReturnStatement[5905-6005]:ReturnStatement[5905-6005]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6078-6087]:MarkerAnnotation[6078-6087]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6096-6102]:Modifier[6096-6102]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6103-6107]:PrimitiveType[6103-6107]"
    }, {
      "left" : "drop",
      "right" : "drop",
      "info" : "SimpleName[6108-6112]:SimpleName[6108-6112]"
    }, {
      "left" : "DnDEvent e",
      "right" : "DnDEvent e",
      "info" : "SingleVariableDeclaration[6113-6123]:SingleVariableDeclaration[6113-6123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6125-6637]:Block[6125-6637]"
    }, {
      "left" : "final Object attachedObject = e.getAttachedObject();",
      "right" : "final Object attachedObject = e.getAttachedObject();",
      "info" : "VariableDeclarationStatement[6137-6189]:VariableDeclarationStatement[6137-6189]"
    }, {
      "left" : "if (attachedObject instanceof GutterIconRenderer)",
      "right" : "if (attachedObject instanceof GutterIconRenderer)",
      "info" : "IfStatement[6200-6627]:IfStatement[6200-6627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6250-6627]:Block[6250-6627]"
    }, {
      "left" : "final GutterDraggableObject draggableObject = ((GutterIconRenderer)attachedObject).getDraggableObject();",
      "right" : "final GutterDraggableObject draggableObject = ((GutterIconRenderer)attachedObject).getDraggableObject();",
      "info" : "VariableDeclarationStatement[6264-6368]:VariableDeclarationStatement[6264-6368]"
    }, {
      "left" : "if (draggableObject != null)",
      "right" : "if (draggableObject != null)",
      "info" : "IfStatement[6381-6615]:IfStatement[6381-6615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6410-6615]:Block[6410-6615]"
    }, {
      "left" : "final int line = convertPointToLineNumber(e.getPoint());",
      "right" : "final int line = convertPointToLineNumber(e.getPoint());",
      "info" : "VariableDeclarationStatement[6426-6482]:VariableDeclarationStatement[6426-6482]"
    }, {
      "left" : "if (line != -1)",
      "right" : "if (line != -1)",
      "info" : "IfStatement[6497-6601]:IfStatement[6497-6601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6513-6601]:Block[6513-6601]"
    }, {
      "left" : "draggableObject.copy(line, myEditor.getVirtualFile());",
      "right" : "draggableObject.copy(line, myEditor.getVirtualFile());",
      "info" : "ExpressionStatement[6531-6585]:ExpressionStatement[6531-6585]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6729-6738]:MarkerAnnotation[6729-6738]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6747-6753]:Modifier[6747-6753]"
    }, {
      "left" : "DnDImage",
      "right" : "DnDImage",
      "info" : "SimpleType[6754-6762]:SimpleType[6754-6762]"
    }, {
      "left" : "fun",
      "right" : "fun",
      "info" : "SimpleName[6763-6766]:SimpleName[6763-6766]"
    }, {
      "left" : "DnDActionInfo info",
      "right" : "DnDActionInfo info",
      "info" : "SingleVariableDeclaration[6767-6785]:SingleVariableDeclaration[6767-6785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6787-6904]:Block[6787-6904]"
    }, {
      "left" : "return new DnDImage(IconUtil.toImage(scaleIcon(getGutterRenderer(info.getPoint()).getIcon())));",
      "right" : "return new DnDImage(IconUtil.toImage(scaleIcon(getGutterRenderer(info.getPoint()).getIcon())));",
      "info" : "ReturnStatement[6799-6894]:ReturnStatement[6799-6894]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6939-6946]:Modifier[6939-6946]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6947-6951]:PrimitiveType[6947-6951]"
    }, {
      "left" : "fireResized",
      "right" : "fireResized",
      "info" : "SimpleName[6952-6963]:SimpleName[6952-6963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6966-7058]:Block[6966-7058]"
    }, {
      "left" : "processComponentEvent(new ComponentEvent(this, ComponentEvent.COMPONENT_RESIZED));",
      "right" : "processComponentEvent(new ComponentEvent(this, ComponentEvent.COMPONENT_RESIZED));",
      "info" : "ExpressionStatement[6972-7054]:ExpressionStatement[6972-7054]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7062-7071]:MarkerAnnotation[7062-7071]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7074-7080]:Modifier[7074-7080]"
    }, {
      "left" : "Dimension",
      "right" : "Dimension",
      "info" : "SimpleType[7081-7090]:SimpleType[7081-7090]"
    }, {
      "left" : "getPreferredSize",
      "right" : "getPreferredSize",
      "info" : "SimpleName[7091-7107]:SimpleName[7091-7107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7110-7331]:Block[7110-7331]"
    }, {
      "left" : "int w = getLineNumberAreaWidth() +\n            getAnnotationsAreaWidthEx() +\n            getLineMarkerAreaWidth() +\n            getFoldingAreaWidth();",
      "right" : "int w = getLineNumberAreaWidth() +\n            getAnnotationsAreaWidthEx() +\n            getLineMarkerAreaWidth() +\n            getFoldingAreaWidth();",
      "info" : "VariableDeclarationStatement[7116-7266]:VariableDeclarationStatement[7116-7266]"
    }, {
      "left" : "return new Dimension(w, myEditor.getPreferredHeight());",
      "right" : "return new Dimension(w, myEditor.getPreferredHeight());",
      "info" : "ReturnStatement[7272-7327]:ReturnStatement[7272-7327]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7335-7344]:MarkerAnnotation[7335-7344]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7347-7356]:Modifier[7347-7356]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7357-7361]:PrimitiveType[7357-7361]"
    }, {
      "left" : "setUI",
      "right" : "setUI",
      "info" : "SimpleName[7362-7367]:SimpleName[7362-7367]"
    }, {
      "left" : "ComponentUI newUI",
      "right" : "ComponentUI newUI",
      "info" : "SingleVariableDeclaration[7368-7385]:SingleVariableDeclaration[7368-7385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7387-7438]:Block[7387-7438]"
    }, {
      "left" : "super.setUI(newUI);",
      "right" : "super.setUI(newUI);",
      "info" : "ExpressionStatement[7393-7412]:ExpressionStatement[7393-7412]"
    }, {
      "left" : "reinitSettings();",
      "right" : "reinitSettings();",
      "info" : "ExpressionStatement[7417-7434]:ExpressionStatement[7417-7434]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7442-7451]:MarkerAnnotation[7442-7451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7454-7460]:Modifier[7454-7460]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7461-7465]:PrimitiveType[7461-7465]"
    }, {
      "left" : "updateUI",
      "right" : "updateUI",
      "info" : "SimpleName[7466-7474]:SimpleName[7466-7474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7477-7526]:Block[7477-7526]"
    }, {
      "left" : "super.updateUI();",
      "right" : "super.updateUI();",
      "info" : "ExpressionStatement[7483-7500]:ExpressionStatement[7483-7500]"
    }, {
      "left" : "reinitSettings();",
      "right" : "reinitSettings();",
      "info" : "ExpressionStatement[7505-7522]:ExpressionStatement[7505-7522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7530-7536]:Modifier[7530-7536]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7537-7541]:PrimitiveType[7537-7541]"
    }, {
      "left" : "reinitSettings",
      "right" : "reinitSettings",
      "info" : "SimpleName[7542-7556]:SimpleName[7542-7556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7559-7603]:Block[7559-7603]"
    }, {
      "left" : "revalidateMarkup();",
      "right" : "revalidateMarkup();",
      "info" : "ExpressionStatement[7565-7584]:ExpressionStatement[7565-7584]"
    }, {
      "left" : "repaint();",
      "right" : "repaint();",
      "info" : "ExpressionStatement[7589-7599]:ExpressionStatement[7589-7599]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7607-7616]:MarkerAnnotation[7607-7616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7619-7625]:Modifier[7619-7625]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7626-7630]:PrimitiveType[7626-7630]"
    }, {
      "left" : "paint",
      "right" : "paint",
      "info" : "SimpleName[7631-7636]:SimpleName[7631-7636]"
    }, {
      "left" : "Graphics g_",
      "right" : "Graphics g_",
      "info" : "SingleVariableDeclaration[7637-7648]:SingleVariableDeclaration[7637-7648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7650-9553]:Block[7650-9553]"
    }, {
      "left" : "((ApplicationImpl)ApplicationManager.getApplication()).editorPaintStart();",
      "right" : "((ApplicationImpl)ApplicationManager.getApplication()).editorPaintStart();",
      "info" : "ExpressionStatement[7656-7730]:ExpressionStatement[7656-7730]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7735-9549]:TryStatement[7735-9549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7739-9447]:Block[7739-9447]"
    }, {
      "left" : "Rectangle clip = g_.getClipBounds();",
      "right" : "Rectangle clip = g_.getClipBounds();",
      "info" : "VariableDeclarationStatement[7747-7783]:VariableDeclarationStatement[7747-7783]"
    }, {
      "left" : "if (clip.height < 0)",
      "right" : "if (clip.height < 0)",
      "info" : "IfStatement[7790-7818]:IfStatement[7790-7818]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7811-7818]:ReturnStatement[7811-7818]"
    }, {
      "left" : "Graphics2D g = IdeBackgroundUtil.withEditorBackground(g_, this);",
      "right" : "Graphics2D g = IdeBackgroundUtil.withEditorBackground(g_, this);",
      "info" : "VariableDeclarationStatement[7826-7890]:VariableDeclarationStatement[7826-7890]"
    }, {
      "left" : "AffineTransform old = g.getTransform();",
      "right" : "AffineTransform old = g.getTransform();",
      "info" : "VariableDeclarationStatement[7897-7936]:VariableDeclarationStatement[7897-7936]"
    }, {
      "left" : "if (isMirrored())",
      "right" : "if (isMirrored())",
      "info" : "IfStatement[7944-8151]:IfStatement[7944-8151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7962-8151]:Block[7962-8151]"
    }, {
      "left" : "final AffineTransform transform = new AffineTransform(old);",
      "right" : "final AffineTransform transform = new AffineTransform(old);",
      "info" : "VariableDeclarationStatement[7972-8031]:VariableDeclarationStatement[7972-8031]"
    }, {
      "left" : "transform.scale(-1, 1);",
      "right" : "transform.scale(-1, 1);",
      "info" : "ExpressionStatement[8040-8063]:ExpressionStatement[8040-8063]"
    }, {
      "left" : "transform.translate(-getWidth(), 0);",
      "right" : "transform.translate(-getWidth(), 0);",
      "info" : "ExpressionStatement[8072-8108]:ExpressionStatement[8072-8108]"
    }, {
      "left" : "g.setTransform(transform);",
      "right" : "g.setTransform(transform);",
      "info" : "ExpressionStatement[8117-8143]:ExpressionStatement[8117-8143]"
    }, {
      "left" : "EditorUIUtil.setupAntialiasing(g);",
      "right" : "EditorUIUtil.setupAntialiasing(g);",
      "info" : "ExpressionStatement[8159-8193]:ExpressionStatement[8159-8193]"
    }, {
      "left" : "Color backgroundColor = getBackground();",
      "right" : "Color backgroundColor = getBackground();",
      "info" : "VariableDeclarationStatement[8200-8240]:VariableDeclarationStatement[8200-8240]"
    }, {
      "left" : "paintLineNumbersBackground(g, clip, backgroundColor);",
      "right" : "paintLineNumbersBackground(g, clip, backgroundColor);",
      "info" : "ExpressionStatement[8247-8300]:ExpressionStatement[8247-8300]"
    }, {
      "left" : "paintAnnotationsBackground(g, clip, backgroundColor);",
      "right" : "paintAnnotationsBackground(g, clip, backgroundColor);",
      "info" : "ExpressionStatement[8307-8360]:ExpressionStatement[8307-8360]"
    }, {
      "left" : "Object hint = g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);",
      "right" : "Object hint = g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);",
      "info" : "VariableDeclarationStatement[8368-8434]:VariableDeclarationStatement[8368-8434]"
    }, {
      "left" : "if (!UIUtil.isRetina())",
      "right" : "if (!UIUtil.isRetina())",
      "info" : "IfStatement[8441-8553]:IfStatement[8441-8553]"
    }, {
      "left" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);",
      "right" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);",
      "info" : "ExpressionStatement[8465-8553]:ExpressionStatement[8465-8553]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8561-9413]:TryStatement[8561-9413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8565-9322]:Block[8565-9322]"
    }, {
      "left" : "int firstVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y - myEditor.getLineHeight())));",
      "right" : "int firstVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y - myEditor.getLineHeight())));",
      "info" : "VariableDeclarationStatement[8575-8712]:VariableDeclarationStatement[8575-8712]"
    }, {
      "left" : "int lastVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y + clip.height + myEditor.getLineHeight())));",
      "right" : "int lastVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y + clip.height + myEditor.getLineHeight())));",
      "info" : "VariableDeclarationStatement[8721-8871]:VariableDeclarationStatement[8721-8871]"
    }, {
      "left" : "paintFoldingBackground(g, clip, backgroundColor);",
      "right" : "paintFoldingBackground(g, clip, backgroundColor);",
      "info" : "ExpressionStatement[8880-8929]:ExpressionStatement[8880-8929]"
    }, {
      "left" : "paintLineMarkersBackground(g, clip, backgroundColor);",
      "right" : "paintLineMarkersBackground(g, clip, backgroundColor);",
      "info" : "ExpressionStatement[8938-8991]:ExpressionStatement[8938-8991]"
    }, {
      "left" : "paintEditorBackgrounds(g, firstVisibleOffset, lastVisibleOffset);",
      "right" : "paintEditorBackgrounds(g, firstVisibleOffset, lastVisibleOffset);",
      "info" : "ExpressionStatement[9000-9065]:ExpressionStatement[9000-9065]"
    }, {
      "left" : "paintAnnotations(g, clip);",
      "right" : "paintAnnotations(g, clip);",
      "info" : "ExpressionStatement[9075-9101]:ExpressionStatement[9075-9101]"
    }, {
      "left" : "paintLineMarkers(g, firstVisibleOffset, lastVisibleOffset);",
      "right" : "paintLineMarkers(g, firstVisibleOffset, lastVisibleOffset);",
      "info" : "ExpressionStatement[9110-9169]:ExpressionStatement[9110-9169]"
    }, {
      "left" : "paintFoldingLines(g, clip);",
      "right" : "paintFoldingLines(g, clip);",
      "info" : "ExpressionStatement[9178-9205]:ExpressionStatement[9178-9205]"
    }, {
      "left" : "paintFoldingTree(g, clip, firstVisibleOffset, lastVisibleOffset);",
      "right" : "paintFoldingTree(g, clip, firstVisibleOffset, lastVisibleOffset);",
      "info" : "ExpressionStatement[9214-9279]:ExpressionStatement[9214-9279]"
    }, {
      "left" : "paintLineNumbers(g, clip);",
      "right" : "paintLineNumbers(g, clip);",
      "info" : "ExpressionStatement[9288-9314]:ExpressionStatement[9288-9314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9337-9413]:Block[9337-9413]"
    }, {
      "left" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, hint);",
      "right" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, hint);",
      "info" : "ExpressionStatement[9347-9405]:ExpressionStatement[9347-9405]"
    }, {
      "left" : "g.setTransform(old);",
      "right" : "g.setTransform(old);",
      "info" : "ExpressionStatement[9421-9441]:ExpressionStatement[9421-9441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9460-9549]:Block[9460-9549]"
    }, {
      "left" : "((ApplicationImpl)ApplicationManager.getApplication()).editorPaintFinish();",
      "right" : "((ApplicationImpl)ApplicationManager.getApplication()).editorPaintFinish();",
      "info" : "ExpressionStatement[9468-9543]:ExpressionStatement[9468-9543]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9557-9564]:Modifier[9557-9564]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9565-9569]:PrimitiveType[9565-9569]"
    }, {
      "left" : "paintEditorBackgrounds",
      "right" : "paintEditorBackgrounds",
      "info" : "SimpleName[9570-9592]:SimpleName[9570-9592]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[9593-9603]:SingleVariableDeclaration[9593-9603]"
    }, {
      "left" : "int firstVisibleOffset",
      "right" : "int firstVisibleOffset",
      "info" : "SingleVariableDeclaration[9605-9627]:SingleVariableDeclaration[9605-9627]"
    }, {
      "left" : "int lastVisibleOffset",
      "right" : "int lastVisibleOffset",
      "info" : "SingleVariableDeclaration[9629-9650]:SingleVariableDeclaration[9629-9650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9652-10890]:Block[9652-10890]"
    }, {
      "left" : "myTextFgColors.clear();",
      "right" : "myTextFgColors.clear();",
      "info" : "ExpressionStatement[9658-9681]:ExpressionStatement[9658-9681]"
    }, {
      "left" : "Color defaultBackgroundColor = myEditor.getBackgroundColor();",
      "right" : "Color defaultBackgroundColor = myEditor.getBackgroundColor();",
      "info" : "VariableDeclarationStatement[9686-9747]:VariableDeclarationStatement[9686-9747]"
    }, {
      "left" : "Color defaultForegroundColor = myEditor.getColorsScheme().getDefaultForeground();",
      "right" : "Color defaultForegroundColor = myEditor.getColorsScheme().getDefaultForeground();",
      "info" : "VariableDeclarationStatement[9752-9833]:VariableDeclarationStatement[9752-9833]"
    }, {
      "left" : "int startX = myEditor.isInDistractionFreeMode() ? 0 : getWhitespaceSeparatorOffset() + (isFoldingOutlineShown() ? 1 : 0);",
      "right" : "int startX = myEditor.isInDistractionFreeMode() ? 0 : getWhitespaceSeparatorOffset() + (isFoldingOutlineShown() ? 1 : 0);",
      "info" : "VariableDeclarationStatement[9838-9959]:VariableDeclarationStatement[9838-9959]"
    }, {
      "left" : "if (myEditor.myUseNewRendering)",
      "right" : "if (myEditor.myUseNewRendering)",
      "info" : "IfStatement[9964-10886]:IfStatement[9964-10886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9996-10485]:Block[9996-10485]"
    }, {
      "left" : "com.intellij.openapi.editor.impl.view.IterationState state = \n        new com.intellij.openapi.editor.impl.view.IterationState(myEditor, firstVisibleOffset, lastVisibleOffset, false, true, true, false);",
      "right" : "com.intellij.openapi.editor.impl.view.IterationState state = \n        new com.intellij.openapi.editor.impl.view.IterationState(myEditor, firstVisibleOffset, lastVisibleOffset, false, true, true, false);",
      "info" : "VariableDeclarationStatement[10004-10206]:VariableDeclarationStatement[10004-10206]"
    }, {
      "left" : "while (!state.atEnd())",
      "right" : "while (!state.atEnd())",
      "info" : "WhileStatement[10213-10479]:WhileStatement[10213-10479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10236-10479]:Block[10236-10479]"
    }, {
      "left" : "drawEditorBackgroundForRange(g, state.getStartOffset(), state.getEndOffset(), state.getMergedAttributes(),\n                                     defaultBackgroundColor, defaultForegroundColor, startX);",
      "right" : "drawEditorBackgroundForRange(g, state.getStartOffset(), state.getEndOffset(), state.getMergedAttributes(),\n                                     defaultBackgroundColor, defaultForegroundColor, startX);",
      "info" : "ExpressionStatement[10246-10446]:ExpressionStatement[10246-10446]"
    }, {
      "left" : "state.advance();",
      "right" : "state.advance();",
      "info" : "ExpressionStatement[10455-10471]:ExpressionStatement[10455-10471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10495-10886]:Block[10495-10886]"
    }, {
      "left" : "IterationState state = new IterationState(myEditor, firstVisibleOffset, lastVisibleOffset, false, true);",
      "right" : "IterationState state = new IterationState(myEditor, firstVisibleOffset, lastVisibleOffset, false, true);",
      "info" : "VariableDeclarationStatement[10503-10607]:VariableDeclarationStatement[10503-10607]"
    }, {
      "left" : "while (!state.atEnd())",
      "right" : "while (!state.atEnd())",
      "info" : "WhileStatement[10614-10880]:WhileStatement[10614-10880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10637-10880]:Block[10637-10880]"
    }, {
      "left" : "drawEditorBackgroundForRange(g, state.getStartOffset(), state.getEndOffset(), state.getMergedAttributes(),\n                                     defaultBackgroundColor, defaultForegroundColor, startX);",
      "right" : "drawEditorBackgroundForRange(g, state.getStartOffset(), state.getEndOffset(), state.getMergedAttributes(),\n                                     defaultBackgroundColor, defaultForegroundColor, startX);",
      "info" : "ExpressionStatement[10647-10847]:ExpressionStatement[10647-10847]"
    }, {
      "left" : "state.advance();",
      "right" : "state.advance();",
      "info" : "ExpressionStatement[10856-10872]:ExpressionStatement[10856-10872]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10896-10903]:Modifier[10896-10903]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10904-10908]:PrimitiveType[10904-10908]"
    }, {
      "left" : "drawEditorBackgroundForRange",
      "right" : "drawEditorBackgroundForRange",
      "info" : "SimpleName[10909-10937]:SimpleName[10909-10937]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[10938-10948]:SingleVariableDeclaration[10938-10948]"
    }, {
      "left" : "int startOffset",
      "right" : "int startOffset",
      "info" : "SingleVariableDeclaration[10950-10965]:SingleVariableDeclaration[10950-10965]"
    }, {
      "left" : "int endOffset",
      "right" : "int endOffset",
      "info" : "SingleVariableDeclaration[10967-10980]:SingleVariableDeclaration[10967-10980]"
    }, {
      "left" : "TextAttributes attributes",
      "right" : "TextAttributes attributes",
      "info" : "SingleVariableDeclaration[10982-11007]:SingleVariableDeclaration[10982-11007]"
    }, {
      "left" : "Color defaultBackgroundColor",
      "right" : "Color defaultBackgroundColor",
      "info" : "SingleVariableDeclaration[11053-11081]:SingleVariableDeclaration[11053-11081]"
    }, {
      "left" : "Color defaultForegroundColor",
      "right" : "Color defaultForegroundColor",
      "info" : "SingleVariableDeclaration[11083-11111]:SingleVariableDeclaration[11083-11111]"
    }, {
      "left" : "int startX",
      "right" : "int startX",
      "info" : "SingleVariableDeclaration[11113-11123]:SingleVariableDeclaration[11113-11123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11125-11933]:Block[11125-11933]"
    }, {
      "left" : "VisualPosition visualStart = myEditor.offsetToVisualPosition(startOffset);",
      "right" : "VisualPosition visualStart = myEditor.offsetToVisualPosition(startOffset);",
      "info" : "VariableDeclarationStatement[11131-11205]:VariableDeclarationStatement[11131-11205]"
    }, {
      "left" : "VisualPosition visualEnd   = myEditor.offsetToVisualPosition(endOffset);",
      "right" : "VisualPosition visualEnd   = myEditor.offsetToVisualPosition(endOffset);",
      "info" : "VariableDeclarationStatement[11210-11282]:VariableDeclarationStatement[11210-11282]"
    }, {
      "left" : "for (int line = visualStart.getLine(); line <= visualEnd.getLine(); line++)",
      "right" : "for (int line = visualStart.getLine(); line <= visualEnd.getLine(); line++)",
      "info" : "ForStatement[11287-11929]:ForStatement[11287-11929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11363-11929]:Block[11363-11929]"
    }, {
      "left" : "if (line == visualStart.getLine())",
      "right" : "if (line == visualStart.getLine())",
      "info" : "IfStatement[11371-11923]:IfStatement[11371-11923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11406-11656]:Block[11406-11656]"
    }, {
      "left" : "if (visualStart.getColumn() == 0)",
      "right" : "if (visualStart.getColumn() == 0)",
      "info" : "IfStatement[11416-11648]:IfStatement[11416-11648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11450-11648]:Block[11450-11648]"
    }, {
      "left" : "drawEditorLineBackgroundRect(g, attributes, line, defaultBackgroundColor, defaultForegroundColor, startX,\n                                       myEditor.visibleLineToY(line));",
      "right" : "drawEditorLineBackgroundRect(g, attributes, line, defaultBackgroundColor, defaultForegroundColor, startX,\n                                       myEditor.visibleLineToY(line));",
      "info" : "ExpressionStatement[11462-11638]:ExpressionStatement[11462-11638]"
    }, {
      "left" : "if (line != visualEnd.getLine() || visualEnd.getColumn() != 0)",
      "right" : "if (line != visualEnd.getLine() || visualEnd.getColumn() != 0)",
      "info" : "IfStatement[11668-11923]:IfStatement[11668-11923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11731-11923]:Block[11731-11923]"
    }, {
      "left" : "drawEditorLineBackgroundRect(g, attributes, line, defaultBackgroundColor, defaultForegroundColor, startX,\n                                     myEditor.visibleLineToY(line));",
      "right" : "drawEditorLineBackgroundRect(g, attributes, line, defaultBackgroundColor, defaultForegroundColor, startX,\n                                     myEditor.visibleLineToY(line));",
      "info" : "ExpressionStatement[11741-11915]:ExpressionStatement[11741-11915]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11937-11944]:Modifier[11937-11944]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11945-11949]:PrimitiveType[11945-11949]"
    }, {
      "left" : "drawEditorLineBackgroundRect",
      "right" : "drawEditorLineBackgroundRect",
      "info" : "SimpleName[11950-11978]:SimpleName[11950-11978]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[11979-11989]:SingleVariableDeclaration[11979-11989]"
    }, {
      "left" : "TextAttributes attributes",
      "right" : "TextAttributes attributes",
      "info" : "SingleVariableDeclaration[12035-12060]:SingleVariableDeclaration[12035-12060]"
    }, {
      "left" : "int visualLine",
      "right" : "int visualLine",
      "info" : "SingleVariableDeclaration[12106-12120]:SingleVariableDeclaration[12106-12120]"
    }, {
      "left" : "Color defaultBackgroundColor",
      "right" : "Color defaultBackgroundColor",
      "info" : "SingleVariableDeclaration[12166-12194]:SingleVariableDeclaration[12166-12194]"
    }, {
      "left" : "Color defaultForegroundColor",
      "right" : "Color defaultForegroundColor",
      "info" : "SingleVariableDeclaration[12240-12268]:SingleVariableDeclaration[12240-12268]"
    }, {
      "left" : "int startX",
      "right" : "int startX",
      "info" : "SingleVariableDeclaration[12314-12324]:SingleVariableDeclaration[12314-12324]"
    }, {
      "left" : "int startY",
      "right" : "int startY",
      "info" : "SingleVariableDeclaration[12370-12380]:SingleVariableDeclaration[12370-12380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12382-12792]:Block[12382-12792]"
    }, {
      "left" : "Color color = myEditor.getBackgroundColor(attributes);",
      "right" : "Color color = myEditor.getBackgroundColor(attributes);",
      "info" : "VariableDeclarationStatement[12388-12442]:VariableDeclarationStatement[12388-12442]"
    }, {
      "left" : "if (!Comparing.equal(color, defaultBackgroundColor))",
      "right" : "if (!Comparing.equal(color, defaultBackgroundColor))",
      "info" : "IfStatement[12447-12788]:IfStatement[12447-12788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12500-12788]:Block[12500-12788]"
    }, {
      "left" : "Color fgColor = attributes.getForegroundColor();",
      "right" : "Color fgColor = attributes.getForegroundColor();",
      "info" : "VariableDeclarationStatement[12508-12556]:VariableDeclarationStatement[12508-12556]"
    }, {
      "left" : "if (!Comparing.equal(fgColor, defaultForegroundColor))",
      "right" : "if (!Comparing.equal(fgColor, defaultForegroundColor))",
      "info" : "IfStatement[12563-12676]:IfStatement[12563-12676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12618-12676]:Block[12618-12676]"
    }, {
      "left" : "myTextFgColors.put(visualLine, fgColor);",
      "right" : "myTextFgColors.put(visualLine, fgColor);",
      "info" : "ExpressionStatement[12628-12668]:ExpressionStatement[12628-12668]"
    }, {
      "left" : "g.setColor(color);",
      "right" : "g.setColor(color);",
      "info" : "ExpressionStatement[12683-12701]:ExpressionStatement[12683-12701]"
    }, {
      "left" : "g.fillRect(startX, startY, getWidth() - startX, myEditor.getLineHeight());",
      "right" : "g.fillRect(startX, startY, getWidth() - startX, myEditor.getLineHeight());",
      "info" : "ExpressionStatement[12708-12782]:ExpressionStatement[12708-12782]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12796-12803]:Modifier[12796-12803]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12804-12808]:PrimitiveType[12804-12808]"
    }, {
      "left" : "processClose",
      "right" : "processClose",
      "info" : "SimpleName[12809-12821]:SimpleName[12809-12821]"
    }, {
      "left" : "final MouseEvent e",
      "right" : "final MouseEvent e",
      "info" : "SingleVariableDeclaration[12822-12840]:SingleVariableDeclaration[12822-12840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12842-13734]:Block[12842-13734]"
    }, {
      "left" : "final IdeEventQueue queue = IdeEventQueue.getInstance();",
      "right" : "final IdeEventQueue queue = IdeEventQueue.getInstance();",
      "info" : "VariableDeclarationStatement[12848-12904]:VariableDeclarationStatement[12848-12904]"
    }, {
      "left" : "if (getGutterRenderer(e) != null)",
      "right" : "if (getGutterRenderer(e) != null)",
      "info" : "IfStatement[13290-13331]:IfStatement[13290-13331]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13324-13331]:ReturnStatement[13324-13331]"
    }, {
      "left" : "int x = getAnnotationsAreaOffset();",
      "right" : "int x = getAnnotationsAreaOffset();",
      "info" : "VariableDeclarationStatement[13337-13372]:VariableDeclarationStatement[13337-13372]"
    }, {
      "left" : "for (int i = 0; i < myTextAnnotationGutters.size(); i++)",
      "right" : "for (int i = 0; i < myTextAnnotationGutters.size(); i++)",
      "info" : "ForStatement[13377-13730]:ForStatement[13377-13730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13434-13730]:Block[13434-13730]"
    }, {
      "left" : "final int size = myTextAnnotationGutterSizes.get(i);",
      "right" : "final int size = myTextAnnotationGutterSizes.get(i);",
      "info" : "VariableDeclarationStatement[13442-13494]:VariableDeclarationStatement[13442-13494]"
    }, {
      "left" : "if (x <= e.getX() && e.getX() <= x + size + GAP_BETWEEN_ANNOTATIONS)",
      "right" : "if (x <= e.getX() && e.getX() <= x + size + GAP_BETWEEN_ANNOTATIONS)",
      "info" : "IfStatement[13501-13680]:IfStatement[13501-13680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13570-13680]:Block[13570-13680]"
    }, {
      "left" : "queue.blockNextEvents(e);",
      "right" : "queue.blockNextEvents(e);",
      "info" : "ExpressionStatement[13580-13605]:ExpressionStatement[13580-13605]"
    }, {
      "left" : "closeAllAnnotations();",
      "right" : "closeAllAnnotations();",
      "info" : "ExpressionStatement[13614-13636]:ExpressionStatement[13614-13636]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[13645-13657]:ExpressionStatement[13645-13657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13666-13672]:BreakStatement[13666-13672]"
    }, {
      "left" : "x += size + GAP_BETWEEN_ANNOTATIONS;",
      "right" : "x += size + GAP_BETWEEN_ANNOTATIONS;",
      "info" : "ExpressionStatement[13688-13724]:ExpressionStatement[13688-13724]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13738-13745]:Modifier[13738-13745]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13746-13750]:PrimitiveType[13746-13750]"
    }, {
      "left" : "paintAnnotationsBackground",
      "right" : "paintAnnotationsBackground",
      "info" : "SimpleName[13751-13777]:SimpleName[13751-13777]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[13778-13788]:SingleVariableDeclaration[13778-13788]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[13790-13804]:SingleVariableDeclaration[13790-13804]"
    }, {
      "left" : "Color backgroundColor",
      "right" : "Color backgroundColor",
      "info" : "SingleVariableDeclaration[13806-13827]:SingleVariableDeclaration[13806-13827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13829-13977]:Block[13829-13977]"
    }, {
      "left" : "int w = getAnnotationsAreaWidthEx();",
      "right" : "int w = getAnnotationsAreaWidthEx();",
      "info" : "VariableDeclarationStatement[13835-13871]:VariableDeclarationStatement[13835-13871]"
    }, {
      "left" : "if (w == 0)",
      "right" : "if (w == 0)",
      "info" : "IfStatement[13876-13895]:IfStatement[13876-13895]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13888-13895]:ReturnStatement[13888-13895]"
    }, {
      "left" : "paintBackground(g, clip, getAnnotationsAreaOffset(), w, backgroundColor);",
      "right" : "paintBackground(g, clip, getAnnotationsAreaOffset(), w, backgroundColor);",
      "info" : "ExpressionStatement[13900-13973]:ExpressionStatement[13900-13973]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13981-13988]:Modifier[13981-13988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13989-13993]:PrimitiveType[13989-13993]"
    }, {
      "left" : "paintAnnotations",
      "right" : "paintAnnotations",
      "info" : "SimpleName[13994-14010]:SimpleName[13994-14010]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[14011-14021]:SingleVariableDeclaration[14011-14021]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[14023-14037]:SingleVariableDeclaration[14023-14037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14039-15804]:Block[14039-15804]"
    }, {
      "left" : "int x = getAnnotationsAreaOffset();",
      "right" : "int x = getAnnotationsAreaOffset();",
      "info" : "VariableDeclarationStatement[14045-14080]:VariableDeclarationStatement[14045-14080]"
    }, {
      "left" : "int w = getAnnotationsAreaWidthEx();",
      "right" : "int w = getAnnotationsAreaWidthEx();",
      "info" : "VariableDeclarationStatement[14085-14121]:VariableDeclarationStatement[14085-14121]"
    }, {
      "left" : "if (w == 0)",
      "right" : "if (w == 0)",
      "info" : "IfStatement[14127-14146]:IfStatement[14127-14146]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14139-14146]:ReturnStatement[14139-14146]"
    }, {
      "left" : "Color color = myEditor.getColorsScheme().getColor(EditorColors.ANNOTATIONS_COLOR);",
      "right" : "Color color = myEditor.getColorsScheme().getColor(EditorColors.ANNOTATIONS_COLOR);",
      "info" : "VariableDeclarationStatement[14152-14234]:VariableDeclarationStatement[14152-14234]"
    }, {
      "left" : "g.setColor(color != null ? color : JBColor.blue);",
      "right" : "g.setColor(color != null ? color : JBColor.blue);",
      "info" : "ExpressionStatement[14239-14288]:ExpressionStatement[14239-14288]"
    }, {
      "left" : "g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));",
      "right" : "g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));",
      "info" : "ExpressionStatement[14293-14361]:ExpressionStatement[14293-14361]"
    }, {
      "left" : "for (int i = 0; i < myTextAnnotationGutters.size(); i++)",
      "right" : "for (int i = 0; i < myTextAnnotationGutters.size(); i++)",
      "info" : "ForStatement[14367-15800]:ForStatement[14367-15800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14424-15800]:Block[14424-15800]"
    }, {
      "left" : "TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i);",
      "right" : "TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i);",
      "info" : "VariableDeclarationStatement[14432-14509]:VariableDeclarationStatement[14432-14509]"
    }, {
      "left" : "int lineHeight = myEditor.getLineHeight();",
      "right" : "int lineHeight = myEditor.getLineHeight();",
      "info" : "VariableDeclarationStatement[14517-14559]:VariableDeclarationStatement[14517-14559]"
    }, {
      "left" : "int startLineNumber = clip.y / lineHeight;",
      "right" : "int startLineNumber = clip.y / lineHeight;",
      "info" : "VariableDeclarationStatement[14566-14608]:VariableDeclarationStatement[14566-14608]"
    }, {
      "left" : "int endLineNumber = (clip.y + clip.height) / lineHeight + 1;",
      "right" : "int endLineNumber = (clip.y + clip.height) / lineHeight + 1;",
      "info" : "VariableDeclarationStatement[14615-14675]:VariableDeclarationStatement[14615-14675]"
    }, {
      "left" : "int lastLine = myEditor.logicalToVisualPosition(\n        new LogicalPosition(endLineNumber(), 0))\n        .line;",
      "right" : "int lastLine = myEditor.logicalToVisualPosition(\n        new LogicalPosition(endLineNumber(), 0))\n        .line;",
      "info" : "VariableDeclarationStatement[14682-14794]:VariableDeclarationStatement[14682-14794]"
    }, {
      "left" : "endLineNumber = Math.min(endLineNumber, lastLine + 1);",
      "right" : "endLineNumber = Math.min(endLineNumber, lastLine + 1);",
      "info" : "ExpressionStatement[14801-14855]:ExpressionStatement[14801-14855]"
    }, {
      "left" : "if (startLineNumber >= endLineNumber)",
      "right" : "if (startLineNumber >= endLineNumber)",
      "info" : "IfStatement[14862-14924]:IfStatement[14862-14924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14900-14924]:Block[14900-14924]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14910-14916]:BreakStatement[14910-14916]"
    }, {
      "left" : "int annotationSize = myTextAnnotationGutterSizes.get(i);",
      "right" : "int annotationSize = myTextAnnotationGutterSizes.get(i);",
      "info" : "VariableDeclarationStatement[14932-14988]:VariableDeclarationStatement[14932-14988]"
    }, {
      "left" : "for (int j = startLineNumber; j < endLineNumber; j++)",
      "right" : "for (int j = startLineNumber; j < endLineNumber; j++)",
      "info" : "ForStatement[14995-15766]:ForStatement[14995-15766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15049-15766]:Block[15049-15766]"
    }, {
      "left" : "int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line;",
      "right" : "int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line;",
      "info" : "VariableDeclarationStatement[15059-15137]:VariableDeclarationStatement[15059-15137]"
    }, {
      "left" : "String s = gutterProvider.getLineText(logLine, myEditor);",
      "right" : "String s = gutterProvider.getLineText(logLine, myEditor);",
      "info" : "VariableDeclarationStatement[15146-15203]:VariableDeclarationStatement[15146-15203]"
    }, {
      "left" : "final EditorFontType style = gutterProvider.getStyle(logLine, myEditor);",
      "right" : "final EditorFontType style = gutterProvider.getStyle(logLine, myEditor);",
      "info" : "VariableDeclarationStatement[15212-15284]:VariableDeclarationStatement[15212-15284]"
    }, {
      "left" : "final Color bg = gutterProvider.getBgColor(logLine, myEditor);",
      "right" : "final Color bg = gutterProvider.getBgColor(logLine, myEditor);",
      "info" : "VariableDeclarationStatement[15293-15355]:VariableDeclarationStatement[15293-15355]"
    }, {
      "left" : "if (bg != null)",
      "right" : "if (bg != null)",
      "info" : "IfStatement[15364-15486]:IfStatement[15364-15486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15380-15486]:Block[15380-15486]"
    }, {
      "left" : "g.setColor(bg);",
      "right" : "g.setColor(bg);",
      "info" : "ExpressionStatement[15392-15407]:ExpressionStatement[15392-15407]"
    }, {
      "left" : "g.fillRect(x, j * lineHeight, annotationSize, lineHeight);",
      "right" : "g.fillRect(x, j * lineHeight, annotationSize, lineHeight);",
      "info" : "ExpressionStatement[15418-15476]:ExpressionStatement[15418-15476]"
    }, {
      "left" : "g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine, myEditor)));",
      "right" : "g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine, myEditor)));",
      "info" : "ExpressionStatement[15495-15587]:ExpressionStatement[15495-15587]"
    }, {
      "left" : "g.setFont(myEditor.getColorsScheme().getFont(style));",
      "right" : "g.setFont(myEditor.getColorsScheme().getFont(style));",
      "info" : "ExpressionStatement[15596-15649]:ExpressionStatement[15596-15649]"
    }, {
      "left" : "if (s != null)",
      "right" : "if (s != null)",
      "info" : "IfStatement[15658-15758]:IfStatement[15658-15758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15673-15758]:Block[15673-15758]"
    }, {
      "left" : "g.drawString(s, x, (j+1) * lineHeight - myEditor.getDescent());",
      "right" : "g.drawString(s, x, (j+1) * lineHeight - myEditor.getDescent());",
      "info" : "ExpressionStatement[15685-15748]:ExpressionStatement[15685-15748]"
    }, {
      "left" : "x += annotationSize;",
      "right" : "x += annotationSize;",
      "info" : "ExpressionStatement[15774-15794]:ExpressionStatement[15774-15794]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15808-15815]:Modifier[15808-15815]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15816-15820]:PrimitiveType[15816-15820]"
    }, {
      "left" : "paintFoldingTree",
      "right" : "paintFoldingTree",
      "info" : "SimpleName[15821-15837]:SimpleName[15821-15837]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[15838-15848]:SingleVariableDeclaration[15838-15848]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[15850-15864]:SingleVariableDeclaration[15850-15864]"
    }, {
      "left" : "int firstVisibleOffset",
      "right" : "int firstVisibleOffset",
      "info" : "SingleVariableDeclaration[15866-15888]:SingleVariableDeclaration[15866-15888]"
    }, {
      "left" : "int lastVisibleOffset",
      "right" : "int lastVisibleOffset",
      "info" : "SingleVariableDeclaration[15890-15911]:SingleVariableDeclaration[15890-15911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15913-16045]:Block[15913-16045]"
    }, {
      "left" : "if (isFoldingOutlineShown())",
      "right" : "if (isFoldingOutlineShown())",
      "info" : "IfStatement[15919-16041]:IfStatement[15919-16041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15948-16041]:Block[15948-16041]"
    }, {
      "left" : "doPaintFoldingTree((Graphics2D)g, clip, firstVisibleOffset, lastVisibleOffset);",
      "right" : "doPaintFoldingTree((Graphics2D)g, clip, firstVisibleOffset, lastVisibleOffset);",
      "info" : "ExpressionStatement[15956-16035]:ExpressionStatement[15956-16035]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16049-16056]:Modifier[16049-16056]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16057-16061]:PrimitiveType[16057-16061]"
    }, {
      "left" : "paintLineMarkersBackground",
      "right" : "paintLineMarkersBackground",
      "info" : "SimpleName[16062-16088]:SimpleName[16062-16088]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[16089-16099]:SingleVariableDeclaration[16089-16099]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[16101-16115]:SingleVariableDeclaration[16101-16115]"
    }, {
      "left" : "Color bgColor",
      "right" : "Color bgColor",
      "info" : "SingleVariableDeclaration[16117-16130]:SingleVariableDeclaration[16117-16130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16132-16269]:Block[16132-16269]"
    }, {
      "left" : "if (isLineMarkersShown())",
      "right" : "if (isLineMarkersShown())",
      "info" : "IfStatement[16138-16265]:IfStatement[16138-16265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16164-16265]:Block[16164-16265]"
    }, {
      "left" : "paintBackground(g, clip, getLineMarkerAreaOffset(), getLineMarkerAreaWidth(), bgColor);",
      "right" : "paintBackground(g, clip, getLineMarkerAreaOffset(), getLineMarkerAreaWidth(), bgColor);",
      "info" : "ExpressionStatement[16172-16259]:ExpressionStatement[16172-16259]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16273-16280]:Modifier[16273-16280]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16281-16285]:PrimitiveType[16281-16285]"
    }, {
      "left" : "paintLineMarkers",
      "right" : "paintLineMarkers",
      "info" : "SimpleName[16286-16302]:SimpleName[16286-16302]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[16303-16313]:SingleVariableDeclaration[16303-16313]"
    }, {
      "left" : "int firstVisibleOffset",
      "right" : "int firstVisibleOffset",
      "info" : "SingleVariableDeclaration[16315-16337]:SingleVariableDeclaration[16315-16337]"
    }, {
      "left" : "int lastVisibleOffset",
      "right" : "int lastVisibleOffset",
      "info" : "SingleVariableDeclaration[16339-16360]:SingleVariableDeclaration[16339-16360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16362-16475]:Block[16362-16475]"
    }, {
      "left" : "if (isLineMarkersShown())",
      "right" : "if (isLineMarkersShown())",
      "info" : "IfStatement[16368-16471]:IfStatement[16368-16471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16394-16471]:Block[16394-16471]"
    }, {
      "left" : "paintGutterRenderers(g, firstVisibleOffset, lastVisibleOffset);",
      "right" : "paintGutterRenderers(g, firstVisibleOffset, lastVisibleOffset);",
      "info" : "ExpressionStatement[16402-16465]:ExpressionStatement[16402-16465]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16479-16486]:Modifier[16479-16486]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16487-16491]:PrimitiveType[16487-16491]"
    }, {
      "left" : "paintBackground",
      "right" : "paintBackground",
      "info" : "SimpleName[16492-16507]:SimpleName[16492-16507]"
    }, {
      "left" : "final Graphics g",
      "right" : "final Graphics g",
      "info" : "SingleVariableDeclaration[16508-16524]:SingleVariableDeclaration[16508-16524]"
    }, {
      "left" : "final Rectangle clip",
      "right" : "final Rectangle clip",
      "info" : "SingleVariableDeclaration[16557-16577]:SingleVariableDeclaration[16557-16577]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[16610-16621]:SingleVariableDeclaration[16610-16621]"
    }, {
      "left" : "final int width",
      "right" : "final int width",
      "info" : "SingleVariableDeclaration[16654-16669]:SingleVariableDeclaration[16654-16669]"
    }, {
      "left" : "Color background",
      "right" : "Color background",
      "info" : "SingleVariableDeclaration[16702-16718]:SingleVariableDeclaration[16702-16718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16720-16843]:Block[16720-16843]"
    }, {
      "left" : "g.setColor(background);",
      "right" : "g.setColor(background);",
      "info" : "ExpressionStatement[16726-16749]:ExpressionStatement[16726-16749]"
    }, {
      "left" : "g.fillRect(x, clip.y, width, clip.height);",
      "right" : "g.fillRect(x, clip.y, width, clip.height);",
      "info" : "ExpressionStatement[16754-16796]:ExpressionStatement[16754-16796]"
    }, {
      "left" : "paintCaretRowBackground(g, x, width);",
      "right" : "paintCaretRowBackground(g, x, width);",
      "info" : "ExpressionStatement[16802-16839]:ExpressionStatement[16802-16839]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16847-16854]:Modifier[16847-16854]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16855-16859]:PrimitiveType[16855-16859]"
    }, {
      "left" : "paintCaretRowBackground",
      "right" : "paintCaretRowBackground",
      "info" : "SimpleName[16860-16883]:SimpleName[16860-16883]"
    }, {
      "left" : "final Graphics g",
      "right" : "final Graphics g",
      "info" : "SingleVariableDeclaration[16884-16900]:SingleVariableDeclaration[16884-16900]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[16902-16913]:SingleVariableDeclaration[16902-16913]"
    }, {
      "left" : "final int width",
      "right" : "final int width",
      "info" : "SingleVariableDeclaration[16915-16930]:SingleVariableDeclaration[16915-16930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16932-17381]:Block[16932-17381]"
    }, {
      "left" : "if (!myEditor.getSettings().isCaretRowShown())",
      "right" : "if (!myEditor.getSettings().isCaretRowShown())",
      "info" : "IfStatement[16938-16992]:IfStatement[16938-16992]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16985-16992]:ReturnStatement[16985-16992]"
    }, {
      "left" : "final VisualPosition visCaret = myEditor.getCaretModel().getVisualPosition();",
      "right" : "final VisualPosition visCaret = myEditor.getCaretModel().getVisualPosition();",
      "info" : "VariableDeclarationStatement[16997-17074]:VariableDeclarationStatement[16997-17074]"
    }, {
      "left" : "Color caretRowColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_ROW_COLOR);",
      "right" : "Color caretRowColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_ROW_COLOR);",
      "info" : "VariableDeclarationStatement[17079-17167]:VariableDeclarationStatement[17079-17167]"
    }, {
      "left" : "if (caretRowColor != null)",
      "right" : "if (caretRowColor != null)",
      "info" : "IfStatement[17172-17377]:IfStatement[17172-17377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17199-17377]:Block[17199-17377]"
    }, {
      "left" : "g.setColor(caretRowColor);",
      "right" : "g.setColor(caretRowColor);",
      "info" : "ExpressionStatement[17207-17233]:ExpressionStatement[17207-17233]"
    }, {
      "left" : "final Point caretPoint = myEditor.visualPositionToXY(visCaret);",
      "right" : "final Point caretPoint = myEditor.visualPositionToXY(visCaret);",
      "info" : "VariableDeclarationStatement[17240-17303]:VariableDeclarationStatement[17240-17303]"
    }, {
      "left" : "g.fillRect(x, caretPoint.y, width, myEditor.getLineHeight());",
      "right" : "g.fillRect(x, caretPoint.y, width, myEditor.getLineHeight());",
      "info" : "ExpressionStatement[17310-17371]:ExpressionStatement[17310-17371]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17385-17392]:Modifier[17385-17392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17393-17397]:PrimitiveType[17393-17397]"
    }, {
      "left" : "paintLineNumbers",
      "right" : "paintLineNumbers",
      "info" : "SimpleName[17398-17414]:SimpleName[17398-17414]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[17415-17425]:SingleVariableDeclaration[17415-17425]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[17427-17441]:SingleVariableDeclaration[17427-17441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17443-17795]:Block[17443-17795]"
    }, {
      "left" : "if (isLineNumbersShown())",
      "right" : "if (isLineNumbersShown())",
      "info" : "IfStatement[17449-17791]:IfStatement[17449-17791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17475-17791]:Block[17475-17791]"
    }, {
      "left" : "int offset = getLineNumberAreaOffset() + myLineNumberAreaWidth;",
      "right" : "int offset = getLineNumberAreaOffset() + myLineNumberAreaWidth;",
      "info" : "VariableDeclarationStatement[17483-17546]:VariableDeclarationStatement[17483-17546]"
    }, {
      "left" : "doPaintLineNumbers(g, clip, offset, myLineNumberConvertor);",
      "right" : "doPaintLineNumbers(g, clip, offset, myLineNumberConvertor);",
      "info" : "ExpressionStatement[17553-17612]:ExpressionStatement[17553-17612]"
    }, {
      "left" : "if (myAdditionalLineNumberConvertor != null)",
      "right" : "if (myAdditionalLineNumberConvertor != null)",
      "info" : "IfStatement[17619-17785]:IfStatement[17619-17785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17664-17785]:Block[17664-17785]"
    }, {
      "left" : "doPaintLineNumbers(g, clip, offset + myAdditionalLineNumberAreaWidth, myAdditionalLineNumberConvertor);",
      "right" : "doPaintLineNumbers(g, clip, offset + myAdditionalLineNumberAreaWidth, myAdditionalLineNumberConvertor);",
      "info" : "ExpressionStatement[17674-17777]:ExpressionStatement[17674-17777]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17799-17806]:Modifier[17799-17806]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17807-17811]:PrimitiveType[17807-17811]"
    }, {
      "left" : "paintLineNumbersBackground",
      "right" : "paintLineNumbersBackground",
      "info" : "SimpleName[17812-17838]:SimpleName[17812-17838]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[17839-17849]:SingleVariableDeclaration[17839-17849]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[17851-17865]:SingleVariableDeclaration[17851-17865]"
    }, {
      "left" : "Color bgColor",
      "right" : "Color bgColor",
      "info" : "SingleVariableDeclaration[17867-17880]:SingleVariableDeclaration[17867-17880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17882-18019]:Block[17882-18019]"
    }, {
      "left" : "if (isLineNumbersShown())",
      "right" : "if (isLineNumbersShown())",
      "info" : "IfStatement[17888-18015]:IfStatement[17888-18015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17914-18015]:Block[17914-18015]"
    }, {
      "left" : "paintBackground(g, clip, getLineNumberAreaOffset(), getLineNumberAreaWidth(), bgColor);",
      "right" : "paintBackground(g, clip, getLineNumberAreaOffset(), getLineNumberAreaWidth(), bgColor);",
      "info" : "ExpressionStatement[17922-18009]:ExpressionStatement[17922-18009]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18023-18032]:MarkerAnnotation[18023-18032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18035-18041]:Modifier[18035-18041]"
    }, {
      "left" : "Color",
      "right" : "Color",
      "info" : "SimpleType[18042-18047]:SimpleType[18042-18047]"
    }, {
      "left" : "getBackground",
      "right" : "getBackground",
      "info" : "SimpleName[18048-18061]:SimpleName[18048-18061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18064-18359]:Block[18064-18359]"
    }, {
      "left" : "if (myEditor.isInDistractionFreeMode() || !myPaintBackground)",
      "right" : "if (myEditor.isInDistractionFreeMode() || !myPaintBackground)",
      "info" : "IfStatement[18070-18183]:IfStatement[18070-18183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18132-18183]:Block[18132-18183]"
    }, {
      "left" : "return myEditor.getBackgroundColor();",
      "right" : "return myEditor.getBackgroundColor();",
      "info" : "ReturnStatement[18140-18177]:ReturnStatement[18140-18177]"
    }, {
      "left" : "Color color = myEditor.getColorsScheme().getColor(EditorColors.GUTTER_BACKGROUND);",
      "right" : "Color color = myEditor.getColorsScheme().getColor(EditorColors.GUTTER_BACKGROUND);",
      "info" : "VariableDeclarationStatement[18188-18270]:VariableDeclarationStatement[18188-18270]"
    }, {
      "left" : "return color != null ? color : EditorColors.GUTTER_BACKGROUND.getDefaultColor();",
      "right" : "return color != null ? color : EditorColors.GUTTER_BACKGROUND.getDefaultColor();",
      "info" : "ReturnStatement[18275-18355]:ReturnStatement[18275-18355]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18363-18370]:Modifier[18363-18370]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18371-18375]:PrimitiveType[18371-18375]"
    }, {
      "left" : "doPaintLineNumbers",
      "right" : "doPaintLineNumbers",
      "info" : "SimpleName[18376-18394]:SimpleName[18376-18394]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[18395-18405]:SingleVariableDeclaration[18395-18405]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[18407-18421]:SingleVariableDeclaration[18407-18421]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[18423-18433]:SingleVariableDeclaration[18423-18433]"
    }, {
      "left" : "@NotNull TIntFunction convertor",
      "right" : "@NotNull TIntFunction convertor",
      "info" : "SingleVariableDeclaration[18435-18466]:SingleVariableDeclaration[18435-18466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18468-20486]:Block[18468-20486]"
    }, {
      "left" : "if (!isLineNumbersShown())",
      "right" : "if (!isLineNumbersShown())",
      "info" : "IfStatement[18474-18522]:IfStatement[18474-18522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18501-18522]:Block[18501-18522]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18509-18516]:ReturnStatement[18509-18516]"
    }, {
      "left" : "int lineHeight = myEditor.getLineHeight();",
      "right" : "int lineHeight = myEditor.getLineHeight();",
      "info" : "VariableDeclarationStatement[18527-18569]:VariableDeclarationStatement[18527-18569]"
    }, {
      "left" : "int startLineNumber = clip.y / lineHeight;",
      "right" : "int startLineNumber = clip.y / lineHeight;",
      "info" : "VariableDeclarationStatement[18574-18616]:VariableDeclarationStatement[18574-18616]"
    }, {
      "left" : "int endLineNumber = (clip.y + clip.height) / lineHeight + 1;",
      "right" : "int endLineNumber = (clip.y + clip.height) / lineHeight + 1;",
      "info" : "VariableDeclarationStatement[18621-18681]:VariableDeclarationStatement[18621-18681]"
    }, {
      "left" : "int lastLine = myEditor.logicalToVisualPosition(\n      new LogicalPosition(endLineNumber(), 0))\n      .line;",
      "right" : "int lastLine = myEditor.logicalToVisualPosition(\n      new LogicalPosition(endLineNumber(), 0))\n      .line;",
      "info" : "VariableDeclarationStatement[18686-18794]:VariableDeclarationStatement[18686-18794]"
    }, {
      "left" : "endLineNumber = Math.min(endLineNumber, lastLine + 1);",
      "right" : "endLineNumber = Math.min(endLineNumber, lastLine + 1);",
      "info" : "ExpressionStatement[18799-18853]:ExpressionStatement[18799-18853]"
    }, {
      "left" : "if (startLineNumber >= endLineNumber)",
      "right" : "if (startLineNumber >= endLineNumber)",
      "info" : "IfStatement[18858-18917]:IfStatement[18858-18917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18896-18917]:Block[18896-18917]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18904-18911]:ReturnStatement[18904-18911]"
    }, {
      "left" : "Color color = myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR);",
      "right" : "Color color = myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR);",
      "info" : "VariableDeclarationStatement[18923-19006]:VariableDeclarationStatement[18923-19006]"
    }, {
      "left" : "g.setColor(color != null ? color : JBColor.blue);",
      "right" : "g.setColor(color != null ? color : JBColor.blue);",
      "info" : "ExpressionStatement[19011-19060]:ExpressionStatement[19011-19060]"
    }, {
      "left" : "g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));",
      "right" : "g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN));",
      "info" : "ExpressionStatement[19065-19133]:ExpressionStatement[19065-19133]"
    }, {
      "left" : "Graphics2D g2 = (Graphics2D)g;",
      "right" : "Graphics2D g2 = (Graphics2D)g;",
      "info" : "VariableDeclarationStatement[19139-19169]:VariableDeclarationStatement[19139-19169]"
    }, {
      "left" : "AffineTransform old = g2.getTransform();",
      "right" : "AffineTransform old = g2.getTransform();",
      "info" : "VariableDeclarationStatement[19174-19214]:VariableDeclarationStatement[19174-19214]"
    }, {
      "left" : "if (isMirrored())",
      "right" : "if (isMirrored())",
      "info" : "IfStatement[19220-19462]:IfStatement[19220-19462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19238-19462]:Block[19238-19462]"
    }, {
      "left" : "AffineTransform originalTransform = new AffineTransform(old);",
      "right" : "AffineTransform originalTransform = new AffineTransform(old);",
      "info" : "VariableDeclarationStatement[19246-19307]:VariableDeclarationStatement[19246-19307]"
    }, {
      "left" : "originalTransform.scale(-1, 1);",
      "right" : "originalTransform.scale(-1, 1);",
      "info" : "ExpressionStatement[19314-19345]:ExpressionStatement[19314-19345]"
    }, {
      "left" : "originalTransform.translate(-getLineNumberAreaWidth() - 1, 0);",
      "right" : "originalTransform.translate(-getLineNumberAreaWidth() - 1, 0);",
      "info" : "ExpressionStatement[19352-19414]:ExpressionStatement[19352-19414]"
    }, {
      "left" : "g2.setTransform(originalTransform);",
      "right" : "g2.setTransform(originalTransform);",
      "info" : "ExpressionStatement[19421-19456]:ExpressionStatement[19421-19456]"
    }, {
      "left" : "for (int i = startLineNumber; i < endLineNumber; i++)",
      "right" : "for (int i = startLineNumber; i < endLineNumber; i++)",
      "info" : "ForStatement[19468-20455]:ForStatement[19468-20455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19522-20455]:Block[19522-20455]"
    }, {
      "left" : "LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(new VisualPosition(i, 0));",
      "right" : "LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(new VisualPosition(i, 0));",
      "info" : "VariableDeclarationStatement[19530-19623]:VariableDeclarationStatement[19530-19623]"
    }, {
      "left" : "if (logicalPosition.softWrapLinesOnCurrentLogicalLine > 0)",
      "right" : "if (logicalPosition.softWrapLinesOnCurrentLogicalLine > 0)",
      "info" : "IfStatement[19630-19716]:IfStatement[19630-19716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19689-19716]:Block[19689-19716]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19699-19708]:ContinueStatement[19699-19708]"
    }, {
      "left" : "int logLine = convertor.execute(logicalPosition.line);",
      "right" : "int logLine = convertor.execute(logicalPosition.line);",
      "info" : "VariableDeclarationStatement[19723-19777]:VariableDeclarationStatement[19723-19777]"
    }, {
      "left" : "if (logLine >= 0)",
      "right" : "if (logLine >= 0)",
      "info" : "IfStatement[19784-20449]:IfStatement[19784-20449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19802-20449]:Block[19802-20449]"
    }, {
      "left" : "String s = String.valueOf(logLine + 1);",
      "right" : "String s = String.valueOf(logLine + 1);",
      "info" : "VariableDeclarationStatement[19812-19851]:VariableDeclarationStatement[19812-19851]"
    }, {
      "left" : "int startY = (i + 1) * lineHeight;",
      "right" : "int startY = (i + 1) * lineHeight;",
      "info" : "VariableDeclarationStatement[19860-19894]:VariableDeclarationStatement[19860-19894]"
    }, {
      "left" : "if (myEditor.isInDistractionFreeMode())",
      "right" : "if (myEditor.isInDistractionFreeMode())",
      "info" : "IfStatement[19903-20091]:IfStatement[19903-20091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19943-20091]:Block[19943-20091]"
    }, {
      "left" : "Color fgColor = myTextFgColors.get(i);",
      "right" : "Color fgColor = myTextFgColors.get(i);",
      "info" : "VariableDeclarationStatement[19955-19993]:VariableDeclarationStatement[19955-19993]"
    }, {
      "left" : "g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue);",
      "right" : "g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue);",
      "info" : "ExpressionStatement[20004-20081]:ExpressionStatement[20004-20081]"
    }, {
      "left" : "int textOffset = isMirrored() ?\n                         offset - getLineNumberAreaWidth() + GAP_AFTER_LINE_NUMBERS :\n                         offset - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s) - GAP_AFTER_LINE_NUMBERS;",
      "right" : "int textOffset = isMirrored() ?\n                         offset - getLineNumberAreaWidth() + GAP_AFTER_LINE_NUMBERS :\n                         offset - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s) - GAP_AFTER_LINE_NUMBERS;",
      "info" : "VariableDeclarationStatement[20101-20329]:VariableDeclarationStatement[20101-20329]"
    }, {
      "left" : "g.drawString(s,\n                     textOffset,\n                     startY - myEditor.getDescent());",
      "right" : "g.drawString(s,\n                     textOffset,\n                     startY - myEditor.getDescent());",
      "info" : "ExpressionStatement[20339-20441]:ExpressionStatement[20339-20441]"
    }, {
      "left" : "g2.setTransform(old);",
      "right" : "g2.setTransform(old);",
      "info" : "ExpressionStatement[20461-20482]:ExpressionStatement[20461-20482]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20490-20497]:Modifier[20490-20497]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20498-20501]:PrimitiveType[20498-20501]"
    }, {
      "left" : "endLineNumber",
      "right" : "endLineNumber",
      "info" : "SimpleName[20502-20515]:SimpleName[20502-20515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20518-20590]:Block[20518-20590]"
    }, {
      "left" : "return Math.max(0, myEditor.getDocument().getLineCount() - 1);",
      "right" : "return Math.max(0, myEditor.getDocument().getLineCount() - 1);",
      "info" : "ReturnStatement[20524-20586]:ReturnStatement[20524-20586]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[20594-20603]:MarkerAnnotation[20594-20603]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20606-20615]:MarkerAnnotation[20606-20615]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20618-20624]:Modifier[20618-20624]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[20625-20631]:SimpleType[20625-20631]"
    }, {
      "left" : "getData",
      "right" : "getData",
      "info" : "SimpleName[20632-20639]:SimpleName[20632-20639]"
    }, {
      "left" : "@NonNls String dataId",
      "right" : "@NonNls String dataId",
      "info" : "SingleVariableDeclaration[20640-20661]:SingleVariableDeclaration[20640-20661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20663-20722]:Block[20663-20722]"
    }, {
      "left" : "return EditorGutter.KEY.is(dataId) ? this : null;",
      "right" : "return EditorGutter.KEY.is(dataId) ? this : null;",
      "info" : "ReturnStatement[20669-20718]:ReturnStatement[20669-20718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20726-20733]:Modifier[20726-20733]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[20734-20743]:TYPE_DECLARATION_KIND[20734-20743]"
    }, {
      "left" : "RangeHighlighterProcessor",
      "right" : "RangeHighlighterProcessor",
      "info" : "SimpleName[20744-20769]:SimpleName[20744-20769]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20776-20780]:PrimitiveType[20776-20780]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[20781-20788]:SimpleName[20781-20788]"
    }, {
      "left" : "@NotNull RangeHighlighter highlighter",
      "right" : "@NotNull RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[20789-20826]:SingleVariableDeclaration[20789-20826]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20836-20843]:Modifier[20836-20843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20844-20848]:PrimitiveType[20844-20848]"
    }, {
      "left" : "processRangeHighlighters",
      "right" : "processRangeHighlighters",
      "info" : "SimpleName[20849-20873]:SimpleName[20849-20873]"
    }, {
      "left" : "int startOffset",
      "right" : "int startOffset",
      "info" : "SingleVariableDeclaration[20874-20889]:SingleVariableDeclaration[20874-20889]"
    }, {
      "left" : "int endOffset",
      "right" : "int endOffset",
      "info" : "SingleVariableDeclaration[20891-20904]:SingleVariableDeclaration[20891-20904]"
    }, {
      "left" : "@NotNull RangeHighlighterProcessor processor",
      "right" : "@NotNull RangeHighlighterProcessor processor",
      "info" : "SingleVariableDeclaration[20906-20950]:SingleVariableDeclaration[20906-20950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20952-23632]:Block[20952-23632]"
    }, {
      "left" : "Document document = myEditor.getDocument();",
      "right" : "Document document = myEditor.getDocument();",
      "info" : "VariableDeclarationStatement[20958-21001]:VariableDeclarationStatement[20958-21001]"
    }, {
      "left" : "final MarkupModelEx docMarkup = (MarkupModelEx)DocumentMarkupModel.forDocument(document, myEditor.getProject(), true);",
      "right" : "final MarkupModelEx docMarkup = (MarkupModelEx)DocumentMarkupModel.forDocument(document, myEditor.getProject(), true);",
      "info" : "VariableDeclarationStatement[21006-21124]:VariableDeclarationStatement[21006-21124]"
    }, {
      "left" : "DisposableIterator<RangeHighlighterEx> docHighlighters = docMarkup.overlappingIterator(startOffset, endOffset);",
      "right" : "DisposableIterator<RangeHighlighterEx> docHighlighters = docMarkup.overlappingIterator(startOffset, endOffset);",
      "info" : "VariableDeclarationStatement[21238-21349]:VariableDeclarationStatement[21238-21349]"
    }, {
      "left" : "DisposableIterator<RangeHighlighterEx> editorHighlighters = myEditor.getMarkupModel().overlappingIterator(startOffset, endOffset);",
      "right" : "DisposableIterator<RangeHighlighterEx> editorHighlighters = myEditor.getMarkupModel().overlappingIterator(startOffset, endOffset);",
      "info" : "VariableDeclarationStatement[21354-21484]:VariableDeclarationStatement[21354-21484]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21490-23628]:TryStatement[21490-23628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21494-23539]:Block[21494-23539]"
    }, {
      "left" : "RangeHighlighterEx lastDocHighlighter = null;",
      "right" : "RangeHighlighterEx lastDocHighlighter = null;",
      "info" : "VariableDeclarationStatement[21502-21547]:VariableDeclarationStatement[21502-21547]"
    }, {
      "left" : "RangeHighlighterEx lastEditorHighlighter = null;",
      "right" : "RangeHighlighterEx lastEditorHighlighter = null;",
      "info" : "VariableDeclarationStatement[21554-21602]:VariableDeclarationStatement[21554-21602]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[21609-23533]:WhileStatement[21609-23533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21622-23533]:Block[21622-23533]"
    }, {
      "left" : "if (lastDocHighlighter == null && docHighlighters.hasNext())",
      "right" : "if (lastDocHighlighter == null && docHighlighters.hasNext())",
      "info" : "IfStatement[21632-22092]:IfStatement[21632-22092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21693-22092]:Block[21693-22092]"
    }, {
      "left" : "lastDocHighlighter = docHighlighters.next();",
      "right" : "lastDocHighlighter = docHighlighters.next();",
      "info" : "ExpressionStatement[21705-21749]:ExpressionStatement[21705-21749]"
    }, {
      "left" : "if (!lastDocHighlighter.isValid() || lastDocHighlighter.getAffectedAreaStartOffset() > endOffset)",
      "right" : "if (!lastDocHighlighter.isValid() || lastDocHighlighter.getAffectedAreaStartOffset() > endOffset)",
      "info" : "IfStatement[21760-21932]:IfStatement[21760-21932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21858-21932]:Block[21858-21932]"
    }, {
      "left" : "lastDocHighlighter = null;",
      "right" : "lastDocHighlighter = null;",
      "info" : "ExpressionStatement[21872-21898]:ExpressionStatement[21872-21898]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21911-21920]:ContinueStatement[21911-21920]"
    }, {
      "left" : "if (lastDocHighlighter.getAffectedAreaEndOffset() < startOffset)",
      "right" : "if (lastDocHighlighter.getAffectedAreaEndOffset() < startOffset)",
      "info" : "IfStatement[21943-22082]:IfStatement[21943-22082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22008-22082]:Block[22008-22082]"
    }, {
      "left" : "lastDocHighlighter = null;",
      "right" : "lastDocHighlighter = null;",
      "info" : "ExpressionStatement[22022-22048]:ExpressionStatement[22022-22048]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22061-22070]:ContinueStatement[22061-22070]"
    }, {
      "left" : "if (lastEditorHighlighter == null && editorHighlighters.hasNext())",
      "right" : "if (lastEditorHighlighter == null && editorHighlighters.hasNext())",
      "info" : "IfStatement[22102-22589]:IfStatement[22102-22589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22169-22589]:Block[22169-22589]"
    }, {
      "left" : "lastEditorHighlighter = editorHighlighters.next();",
      "right" : "lastEditorHighlighter = editorHighlighters.next();",
      "info" : "ExpressionStatement[22181-22231]:ExpressionStatement[22181-22231]"
    }, {
      "left" : "if (!lastEditorHighlighter.isValid() || lastEditorHighlighter.getAffectedAreaStartOffset() > endOffset)",
      "right" : "if (!lastEditorHighlighter.isValid() || lastEditorHighlighter.getAffectedAreaStartOffset() > endOffset)",
      "info" : "IfStatement[22242-22423]:IfStatement[22242-22423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22346-22423]:Block[22346-22423]"
    }, {
      "left" : "lastEditorHighlighter = null;",
      "right" : "lastEditorHighlighter = null;",
      "info" : "ExpressionStatement[22360-22389]:ExpressionStatement[22360-22389]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22402-22411]:ContinueStatement[22402-22411]"
    }, {
      "left" : "if (lastEditorHighlighter.getAffectedAreaEndOffset() < startOffset)",
      "right" : "if (lastEditorHighlighter.getAffectedAreaEndOffset() < startOffset)",
      "info" : "IfStatement[22434-22579]:IfStatement[22434-22579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22502-22579]:Block[22502-22579]"
    }, {
      "left" : "lastEditorHighlighter = null;",
      "right" : "lastEditorHighlighter = null;",
      "info" : "ExpressionStatement[22516-22545]:ExpressionStatement[22516-22545]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22558-22567]:ContinueStatement[22558-22567]"
    }, {
      "left" : "if (lastDocHighlighter == null && lastEditorHighlighter == null)",
      "right" : "if (lastDocHighlighter == null && lastEditorHighlighter == null)",
      "info" : "IfStatement[22599-22671]:IfStatement[22599-22671]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22664-22671]:ReturnStatement[22664-22671]"
    }, {
      "left" : "final RangeHighlighterEx lowerHighlighter;",
      "right" : "final RangeHighlighterEx lowerHighlighter;",
      "info" : "VariableDeclarationStatement[22681-22723]:VariableDeclarationStatement[22681-22723]"
    }, {
      "left" : "if (less(lastDocHighlighter, lastEditorHighlighter))",
      "right" : "if (less(lastDocHighlighter, lastEditorHighlighter))",
      "info" : "IfStatement[22732-22999]:IfStatement[22732-22999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22785-22882]:Block[22785-22882]"
    }, {
      "left" : "lowerHighlighter = lastDocHighlighter;",
      "right" : "lowerHighlighter = lastDocHighlighter;",
      "info" : "ExpressionStatement[22797-22835]:ExpressionStatement[22797-22835]"
    }, {
      "left" : "lastDocHighlighter = null;",
      "right" : "lastDocHighlighter = null;",
      "info" : "ExpressionStatement[22846-22872]:ExpressionStatement[22846-22872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22896-22999]:Block[22896-22999]"
    }, {
      "left" : "lowerHighlighter = lastEditorHighlighter;",
      "right" : "lowerHighlighter = lastEditorHighlighter;",
      "info" : "ExpressionStatement[22908-22949]:ExpressionStatement[22908-22949]"
    }, {
      "left" : "lastEditorHighlighter = null;",
      "right" : "lastEditorHighlighter = null;",
      "info" : "ExpressionStatement[22960-22989]:ExpressionStatement[22960-22989]"
    }, {
      "left" : "if (!lowerHighlighter.isValid())",
      "right" : "if (!lowerHighlighter.isValid())",
      "info" : "IfStatement[23009-23051]:IfStatement[23009-23051]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23042-23051]:ContinueStatement[23042-23051]"
    }, {
      "left" : "int startLineIndex = lowerHighlighter.getDocument().getLineNumber(startOffset);",
      "right" : "int startLineIndex = lowerHighlighter.getDocument().getLineNumber(startOffset);",
      "info" : "VariableDeclarationStatement[23061-23140]:VariableDeclarationStatement[23061-23140]"
    }, {
      "left" : "if (startLineIndex < 0 || startLineIndex >= document.getLineCount())",
      "right" : "if (startLineIndex < 0 || startLineIndex >= document.getLineCount())",
      "info" : "IfStatement[23149-23227]:IfStatement[23149-23227]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23218-23227]:ContinueStatement[23218-23227]"
    }, {
      "left" : "int endLineIndex = lowerHighlighter.getDocument().getLineNumber(endOffset);",
      "right" : "int endLineIndex = lowerHighlighter.getDocument().getLineNumber(endOffset);",
      "info" : "VariableDeclarationStatement[23237-23312]:VariableDeclarationStatement[23237-23312]"
    }, {
      "left" : "if (endLineIndex < 0 || endLineIndex >= document.getLineCount())",
      "right" : "if (endLineIndex < 0 || endLineIndex >= document.getLineCount())",
      "info" : "IfStatement[23321-23395]:IfStatement[23321-23395]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23386-23395]:ContinueStatement[23386-23395]"
    }, {
      "left" : "if (lowerHighlighter.getEditorFilter().avaliableIn(myEditor))",
      "right" : "if (lowerHighlighter.getEditorFilter().avaliableIn(myEditor))",
      "info" : "IfStatement[23405-23525]:IfStatement[23405-23525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23467-23525]:Block[23467-23525]"
    }, {
      "left" : "processor.process(lowerHighlighter);",
      "right" : "processor.process(lowerHighlighter);",
      "info" : "ExpressionStatement[23479-23515]:ExpressionStatement[23479-23515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23552-23628]:Block[23552-23628]"
    }, {
      "left" : "docHighlighters.dispose();",
      "right" : "docHighlighters.dispose();",
      "info" : "ExpressionStatement[23560-23586]:ExpressionStatement[23560-23586]"
    }, {
      "left" : "editorHighlighters.dispose();",
      "right" : "editorHighlighters.dispose();",
      "info" : "ExpressionStatement[23593-23622]:ExpressionStatement[23593-23622]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23636-23643]:Modifier[23636-23643]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23644-23650]:Modifier[23644-23650]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23651-23658]:PrimitiveType[23651-23658]"
    }, {
      "left" : "less",
      "right" : "less",
      "info" : "SimpleName[23659-23663]:SimpleName[23659-23663]"
    }, {
      "left" : "RangeHighlighter h1",
      "right" : "RangeHighlighter h1",
      "info" : "SingleVariableDeclaration[23664-23683]:SingleVariableDeclaration[23664-23683]"
    }, {
      "left" : "RangeHighlighter h2",
      "right" : "RangeHighlighter h2",
      "info" : "SingleVariableDeclaration[23685-23704]:SingleVariableDeclaration[23685-23704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23706-23795]:Block[23706-23795]"
    }, {
      "left" : "return h1 != null && (h2 == null || h1.getStartOffset() < h2.getStartOffset());",
      "right" : "return h1 != null && (h2 == null || h1.getStartOffset() < h2.getStartOffset());",
      "info" : "ReturnStatement[23712-23791]:ReturnStatement[23712-23791]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23799-23808]:MarkerAnnotation[23799-23808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23811-23817]:Modifier[23811-23817]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23818-23822]:PrimitiveType[23818-23822]"
    }, {
      "left" : "revalidateMarkup",
      "right" : "revalidateMarkup",
      "info" : "SimpleName[23823-23839]:SimpleName[23823-23839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23842-23865]:Block[23842-23865]"
    }, {
      "left" : "updateSize();",
      "right" : "updateSize();",
      "info" : "ExpressionStatement[23848-23861]:ExpressionStatement[23848-23861]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23869-23875]:Modifier[23869-23875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23876-23880]:PrimitiveType[23876-23880]"
    }, {
      "left" : "updateSize",
      "right" : "updateSize",
      "info" : "SimpleName[23881-23891]:SimpleName[23881-23891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23894-23922]:Block[23894-23922]"
    }, {
      "left" : "updateSize(false);",
      "right" : "updateSize(false);",
      "info" : "ExpressionStatement[23900-23918]:ExpressionStatement[23900-23918]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23926-23930]:PrimitiveType[23926-23930]"
    }, {
      "left" : "updateSize",
      "right" : "updateSize",
      "info" : "SimpleName[23931-23941]:SimpleName[23931-23941]"
    }, {
      "left" : "boolean onLayout",
      "right" : "boolean onLayout",
      "info" : "SingleVariableDeclaration[23942-23958]:SingleVariableDeclaration[23942-23958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23960-24104]:Block[23960-24104]"
    }, {
      "left" : "int prevHash = sizeHash();",
      "right" : "int prevHash = sizeHash();",
      "info" : "VariableDeclarationStatement[23966-23992]:VariableDeclarationStatement[23966-23992]"
    }, {
      "left" : "updateSizeInner(onLayout);",
      "right" : "updateSizeInner(onLayout);",
      "info" : "ExpressionStatement[23997-24023]:ExpressionStatement[23997-24023]"
    }, {
      "left" : "if (prevHash != sizeHash())",
      "right" : "if (prevHash != sizeHash())",
      "info" : "IfStatement[24029-24085]:IfStatement[24029-24085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24057-24085]:Block[24057-24085]"
    }, {
      "left" : "fireResized();",
      "right" : "fireResized();",
      "info" : "ExpressionStatement[24065-24079]:ExpressionStatement[24065-24079]"
    }, {
      "left" : "repaint();",
      "right" : "repaint();",
      "info" : "ExpressionStatement[24090-24100]:ExpressionStatement[24090-24100]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24108-24115]:Modifier[24108-24115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24116-24120]:PrimitiveType[24116-24120]"
    }, {
      "left" : "updateSizeInner",
      "right" : "updateSizeInner",
      "info" : "SimpleName[24121-24136]:SimpleName[24121-24136]"
    }, {
      "left" : "boolean onLayout",
      "right" : "boolean onLayout",
      "info" : "SingleVariableDeclaration[24137-24153]:SingleVariableDeclaration[24137-24153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24155-24307]:Block[24155-24307]"
    }, {
      "left" : "if (!onLayout)",
      "right" : "if (!onLayout)",
      "info" : "IfStatement[24161-24272]:IfStatement[24161-24272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24176-24272]:Block[24176-24272]"
    }, {
      "left" : "calcLineNumberAreaWidth();",
      "right" : "calcLineNumberAreaWidth();",
      "info" : "ExpressionStatement[24184-24210]:ExpressionStatement[24184-24210]"
    }, {
      "left" : "calcIconAreaWidth();",
      "right" : "calcIconAreaWidth();",
      "info" : "ExpressionStatement[24217-24237]:ExpressionStatement[24217-24237]"
    }, {
      "left" : "calcAnnotationsSize();",
      "right" : "calcAnnotationsSize();",
      "info" : "ExpressionStatement[24244-24266]:ExpressionStatement[24244-24266]"
    }, {
      "left" : "calcAnnotationExtraSize();",
      "right" : "calcAnnotationExtraSize();",
      "info" : "ExpressionStatement[24277-24303]:ExpressionStatement[24277-24303]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24311-24318]:Modifier[24311-24318]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24319-24322]:PrimitiveType[24319-24322]"
    }, {
      "left" : "sizeHash",
      "right" : "sizeHash",
      "info" : "SimpleName[24323-24331]:SimpleName[24323-24331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24334-24561]:Block[24334-24561]"
    }, {
      "left" : "int result = myLineMarkerAreaWidth;",
      "right" : "int result = myLineMarkerAreaWidth;",
      "info" : "VariableDeclarationStatement[24340-24375]:VariableDeclarationStatement[24340-24375]"
    }, {
      "left" : "result = 31 * result + myTextAnnotationGuttersSize;",
      "right" : "result = 31 * result + myTextAnnotationGuttersSize;",
      "info" : "ExpressionStatement[24380-24431]:ExpressionStatement[24380-24431]"
    }, {
      "left" : "result = 31 * result + myTextAnnotationExtraSize;",
      "right" : "result = 31 * result + myTextAnnotationExtraSize;",
      "info" : "ExpressionStatement[24436-24485]:ExpressionStatement[24436-24485]"
    }, {
      "left" : "result = 31 * result + getLineNumberAreaWidth();",
      "right" : "result = 31 * result + getLineNumberAreaWidth();",
      "info" : "ExpressionStatement[24490-24538]:ExpressionStatement[24490-24538]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24543-24557]:ReturnStatement[24543-24557]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24565-24572]:Modifier[24565-24572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24573-24577]:PrimitiveType[24573-24577]"
    }, {
      "left" : "calcAnnotationsSize",
      "right" : "calcAnnotationsSize",
      "info" : "SimpleName[24578-24597]:SimpleName[24578-24597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24600-25374]:Block[24600-25374]"
    }, {
      "left" : "myTextAnnotationGuttersSize = 0;",
      "right" : "myTextAnnotationGuttersSize = 0;",
      "info" : "ExpressionStatement[24606-24638]:ExpressionStatement[24606-24638]"
    }, {
      "left" : "final FontMetrics fontMetrics = myEditor.getFontMetrics(Font.PLAIN);",
      "right" : "final FontMetrics fontMetrics = myEditor.getFontMetrics(Font.PLAIN);",
      "info" : "VariableDeclarationStatement[24643-24711]:VariableDeclarationStatement[24643-24711]"
    }, {
      "left" : "final int lineCount = myEditor.getDocument().getLineCount();",
      "right" : "final int lineCount = myEditor.getDocument().getLineCount();",
      "info" : "VariableDeclarationStatement[24716-24776]:VariableDeclarationStatement[24716-24776]"
    }, {
      "left" : "for (int j = 0; j < myTextAnnotationGutters.size(); j++)",
      "right" : "for (int j = 0; j < myTextAnnotationGutters.size(); j++)",
      "info" : "ForStatement[24781-25370]:ForStatement[24781-25370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24838-25370]:Block[24838-25370]"
    }, {
      "left" : "TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(j);",
      "right" : "TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(j);",
      "info" : "VariableDeclarationStatement[24846-24923]:VariableDeclarationStatement[24846-24923]"
    }, {
      "left" : "int gutterSize = 0;",
      "right" : "int gutterSize = 0;",
      "info" : "VariableDeclarationStatement[24930-24949]:VariableDeclarationStatement[24930-24949]"
    }, {
      "left" : "for (int i = 0; i < lineCount; i++)",
      "right" : "for (int i = 0; i < lineCount; i++)",
      "info" : "ForStatement[24956-25196]:ForStatement[24956-25196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24992-25196]:Block[24992-25196]"
    }, {
      "left" : "final String lineText = gutterProvider.getLineText(i, myEditor);",
      "right" : "final String lineText = gutterProvider.getLineText(i, myEditor);",
      "info" : "VariableDeclarationStatement[25002-25066]:VariableDeclarationStatement[25002-25066]"
    }, {
      "left" : "if (lineText != null)",
      "right" : "if (lineText != null)",
      "info" : "IfStatement[25075-25188]:IfStatement[25075-25188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25097-25188]:Block[25097-25188]"
    }, {
      "left" : "gutterSize = Math.max(gutterSize, fontMetrics.stringWidth(lineText));",
      "right" : "gutterSize = Math.max(gutterSize, fontMetrics.stringWidth(lineText));",
      "info" : "ExpressionStatement[25109-25178]:ExpressionStatement[25109-25178]"
    }, {
      "left" : "if (gutterSize > 0)",
      "right" : "if (gutterSize > 0)",
      "info" : "IfStatement[25203-25261]:IfStatement[25203-25261]"
    }, {
      "left" : "gutterSize += GAP_BETWEEN_ANNOTATIONS;",
      "right" : "gutterSize += GAP_BETWEEN_ANNOTATIONS;",
      "info" : "ExpressionStatement[25223-25261]:ExpressionStatement[25223-25261]"
    }, {
      "left" : "myTextAnnotationGutterSizes.set(j, gutterSize);",
      "right" : "myTextAnnotationGutterSizes.set(j, gutterSize);",
      "info" : "ExpressionStatement[25268-25315]:ExpressionStatement[25268-25315]"
    }, {
      "left" : "myTextAnnotationGuttersSize += gutterSize;",
      "right" : "myTextAnnotationGuttersSize += gutterSize;",
      "info" : "ExpressionStatement[25322-25364]:ExpressionStatement[25322-25364]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25378-25385]:Modifier[25378-25385]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25386-25390]:PrimitiveType[25386-25390]"
    }, {
      "left" : "calcAnnotationExtraSize",
      "right" : "calcAnnotationExtraSize",
      "info" : "SimpleName[25391-25414]:SimpleName[25391-25414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25417-26515]:Block[25417-26515]"
    }, {
      "left" : "myTextAnnotationExtraSize = 0;",
      "right" : "myTextAnnotationExtraSize = 0;",
      "info" : "ExpressionStatement[25423-25453]:ExpressionStatement[25423-25453]"
    }, {
      "left" : "if (!myEditor.isInDistractionFreeMode() || isMirrored())",
      "right" : "if (!myEditor.isInDistractionFreeMode() || isMirrored())",
      "info" : "IfStatement[25458-25522]:IfStatement[25458-25522]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25515-25522]:ReturnStatement[25515-25522]"
    }, {
      "left" : "Window frame = SwingUtilities.getWindowAncestor(myEditor.getComponent());",
      "right" : "Window frame = SwingUtilities.getWindowAncestor(myEditor.getComponent());",
      "info" : "VariableDeclarationStatement[25528-25601]:VariableDeclarationStatement[25528-25601]"
    }, {
      "left" : "if (frame == null)",
      "right" : "if (frame == null)",
      "info" : "IfStatement[25606-25632]:IfStatement[25606-25632]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25625-25632]:ReturnStatement[25625-25632]"
    }, {
      "left" : "EditorSettings settings = myEditor.getSettings();",
      "right" : "EditorSettings settings = myEditor.getSettings();",
      "info" : "VariableDeclarationStatement[25638-25687]:VariableDeclarationStatement[25638-25687]"
    }, {
      "left" : "int rightMargin = settings.getRightMargin(myEditor.getProject());",
      "right" : "int rightMargin = settings.getRightMargin(myEditor.getProject());",
      "info" : "VariableDeclarationStatement[25692-25757]:VariableDeclarationStatement[25692-25757]"
    }, {
      "left" : "if (rightMargin <= 0)",
      "right" : "if (rightMargin <= 0)",
      "info" : "IfStatement[25762-25791]:IfStatement[25762-25791]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25784-25791]:ReturnStatement[25784-25791]"
    }, {
      "left" : "JComponent editorComponent = myEditor.getComponent();",
      "right" : "JComponent editorComponent = myEditor.getComponent();",
      "info" : "VariableDeclarationStatement[25797-25850]:VariableDeclarationStatement[25797-25850]"
    }, {
      "left" : "RelativePoint point = new RelativePoint(editorComponent, new Point(0, 0));",
      "right" : "RelativePoint point = new RelativePoint(editorComponent, new Point(0, 0));",
      "info" : "VariableDeclarationStatement[25855-25929]:VariableDeclarationStatement[25855-25929]"
    }, {
      "left" : "Point editorLocationInWindow = point.getPoint(frame);",
      "right" : "Point editorLocationInWindow = point.getPoint(frame);",
      "info" : "VariableDeclarationStatement[25934-25987]:VariableDeclarationStatement[25934-25987]"
    }, {
      "left" : "int editorLocationX = (int)editorLocationInWindow.getX();",
      "right" : "int editorLocationX = (int)editorLocationInWindow.getX();",
      "info" : "VariableDeclarationStatement[25993-26050]:VariableDeclarationStatement[25993-26050]"
    }, {
      "left" : "int rightMarginX = rightMargin * EditorUtil.getSpaceWidth(Font.PLAIN, myEditor) + editorLocationX;",
      "right" : "int rightMarginX = rightMargin * EditorUtil.getSpaceWidth(Font.PLAIN, myEditor) + editorLocationX;",
      "info" : "VariableDeclarationStatement[26055-26153]:VariableDeclarationStatement[26055-26153]"
    }, {
      "left" : "int width = editorLocationX + editorComponent.getWidth();",
      "right" : "int width = editorLocationX + editorComponent.getWidth();",
      "info" : "VariableDeclarationStatement[26159-26216]:VariableDeclarationStatement[26159-26216]"
    }, {
      "left" : "if (rightMarginX < width && editorLocationX < width - rightMarginX)",
      "right" : "if (rightMarginX < width && editorLocationX < width - rightMarginX)",
      "info" : "IfStatement[26221-26511]:IfStatement[26221-26511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26289-26511]:Block[26289-26511]"
    }, {
      "left" : "int centeredSize = (width - rightMarginX - editorLocationX) / 2 - (myLineMarkerAreaWidth + getLineNumberAreaWidth());",
      "right" : "int centeredSize = (width - rightMarginX - editorLocationX) / 2 - (myLineMarkerAreaWidth + getLineNumberAreaWidth());",
      "info" : "VariableDeclarationStatement[26297-26414]:VariableDeclarationStatement[26297-26414]"
    }, {
      "left" : "myTextAnnotationExtraSize = Math.max(0, centeredSize - myTextAnnotationGuttersSize);",
      "right" : "myTextAnnotationExtraSize = Math.max(0, centeredSize - myTextAnnotationGuttersSize);",
      "info" : "ExpressionStatement[26421-26505]:ExpressionStatement[26421-26505]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26591-26598]:Modifier[26591-26598]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26599-26603]:PrimitiveType[26599-26603]"
    }, {
      "left" : "calcIconAreaWidth",
      "right" : "calcIconAreaWidth",
      "info" : "SimpleName[26604-26621]:SimpleName[26604-26621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26624-28344]:Block[26624-28344]"
    }, {
      "left" : "myLineToGutterRenderers = new TIntObjectHashMap<List<GutterMark>>();",
      "right" : "myLineToGutterRenderers = new TIntObjectHashMap<List<GutterMark>>();",
      "info" : "ExpressionStatement[26630-26698]:ExpressionStatement[26630-26698]"
    }, {
      "left" : "processRangeHighlighters(0, myEditor.getDocument().getTextLength(), new RangeHighlighterProcessor() {\n      @Override\n      public void process(@NotNull RangeHighlighter highlighter) {\n        GutterMark renderer = highlighter.getGutterIconRenderer();\n        if (renderer == null) {\n          return;\n        }\n        if (!isHighlighterVisible(highlighter)) {\n          return;\n        }\n        int lineStartOffset = EditorUtil.getNotFoldedLineStartOffset(myEditor, highlighter.getStartOffset());\n        int line = myEditor.getDocument().getLineNumber(lineStartOffset);\n        List<GutterMark> renderers = myLineToGutterRenderers.get(line);\n        if (renderers == null) {\n          renderers = new SmartList<GutterMark>();\n          myLineToGutterRenderers.put(line, renderers);\n        }\n\n        if (renderers.size() < 5) { // Don't allow more than 5 icons per line\n          renderers.add(renderer);\n        }\n      }\n    });",
      "right" : "processRangeHighlighters(0, myEditor.getDocument().getTextLength(), new RangeHighlighterProcessor() {\n      @Override\n      public void process(@NotNull RangeHighlighter highlighter) {\n        GutterMark renderer = highlighter.getGutterIconRenderer();\n        if (renderer == null) {\n          return;\n        }\n        if (!isHighlighterVisible(highlighter)) {\n          return;\n        }\n        int lineStartOffset = EditorUtil.getNotFoldedLineStartOffset(myEditor, highlighter.getStartOffset());\n        int line = myEditor.getDocument().getLineNumber(lineStartOffset);\n        List<GutterMark> renderers = myLineToGutterRenderers.get(line);\n        if (renderers == null) {\n          renderers = new SmartList<GutterMark>();\n          myLineToGutterRenderers.put(line, renderers);\n        }\n\n        if (renderers.size() < 5) { // Don't allow more than 5 icons per line\n          renderers.add(renderer);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[26704-27639]:ExpressionStatement[26704-27639]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26812-26821]:MarkerAnnotation[26812-26821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26828-26834]:Modifier[26828-26834]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26835-26839]:PrimitiveType[26835-26839]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[26840-26847]:SimpleName[26840-26847]"
    }, {
      "left" : "@NotNull RangeHighlighter highlighter",
      "right" : "@NotNull RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[26848-26885]:SingleVariableDeclaration[26848-26885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26887-27631]:Block[26887-27631]"
    }, {
      "left" : "GutterMark renderer = highlighter.getGutterIconRenderer();",
      "right" : "GutterMark renderer = highlighter.getGutterIconRenderer();",
      "info" : "VariableDeclarationStatement[26897-26955]:VariableDeclarationStatement[26897-26955]"
    }, {
      "left" : "if (renderer == null)",
      "right" : "if (renderer == null)",
      "info" : "IfStatement[26964-27015]:IfStatement[26964-27015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26986-27015]:Block[26986-27015]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[26998-27005]:ReturnStatement[26998-27005]"
    }, {
      "left" : "if (!isHighlighterVisible(highlighter))",
      "right" : "if (!isHighlighterVisible(highlighter))",
      "info" : "IfStatement[27024-27093]:IfStatement[27024-27093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27064-27093]:Block[27064-27093]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27076-27083]:ReturnStatement[27076-27083]"
    }, {
      "left" : "int lineStartOffset = EditorUtil.getNotFoldedLineStartOffset(myEditor, highlighter.getStartOffset());",
      "right" : "int lineStartOffset = EditorUtil.getNotFoldedLineStartOffset(myEditor, highlighter.getStartOffset());",
      "info" : "VariableDeclarationStatement[27102-27203]:VariableDeclarationStatement[27102-27203]"
    }, {
      "left" : "int line = myEditor.getDocument().getLineNumber(lineStartOffset);",
      "right" : "int line = myEditor.getDocument().getLineNumber(lineStartOffset);",
      "info" : "VariableDeclarationStatement[27212-27277]:VariableDeclarationStatement[27212-27277]"
    }, {
      "left" : "List<GutterMark> renderers = myLineToGutterRenderers.get(line);",
      "right" : "List<GutterMark> renderers = myLineToGutterRenderers.get(line);",
      "info" : "VariableDeclarationStatement[27286-27349]:VariableDeclarationStatement[27286-27349]"
    }, {
      "left" : "if (renderers == null)",
      "right" : "if (renderers == null)",
      "info" : "IfStatement[27358-27499]:IfStatement[27358-27499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27381-27499]:Block[27381-27499]"
    }, {
      "left" : "renderers = new SmartList<GutterMark>();",
      "right" : "renderers = new SmartList<GutterMark>();",
      "info" : "ExpressionStatement[27393-27433]:ExpressionStatement[27393-27433]"
    }, {
      "left" : "myLineToGutterRenderers.put(line, renderers);",
      "right" : "myLineToGutterRenderers.put(line, renderers);",
      "info" : "ExpressionStatement[27444-27489]:ExpressionStatement[27444-27489]"
    }, {
      "left" : "if (renderers.size() < 5)",
      "right" : "if (renderers.size() < 5)",
      "info" : "IfStatement[27509-27623]:IfStatement[27509-27623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27535-27623]:Block[27535-27623]"
    }, {
      "left" : "renderers.add(renderer);",
      "right" : "renderers.add(renderer);",
      "info" : "ExpressionStatement[27589-27613]:ExpressionStatement[27589-27613]"
    }, {
      "left" : "myIconsAreaWidth = START_ICON_AREA_WIDTH;",
      "right" : "myIconsAreaWidth = START_ICON_AREA_WIDTH;",
      "info" : "ExpressionStatement[27645-27686]:ExpressionStatement[27645-27686]"
    }, {
      "left" : "myLineToGutterRenderers.forEachValue(new TObjectProcedure<List<GutterMark>>() {\n      @Override\n      public boolean execute(List<GutterMark> renderers) {\n        int width = 1;\n        for (int i = 0; i < renderers.size(); i++) {\n          GutterMark renderer = renderers.get(i);\n          width += scaleIcon(renderer.getIcon()).getIconWidth();\n          if (i > 0) width += GAP_BETWEEN_ICONS;\n        }\n        if (myIconsAreaWidth < width) {\n          myIconsAreaWidth = width + 1;\n        }\n        return true;\n      }\n    });",
      "right" : "myLineToGutterRenderers.forEachValue(new TObjectProcedure<List<GutterMark>>() {\n      @Override\n      public boolean execute(List<GutterMark> renderers) {\n        int width = 1;\n        for (int i = 0; i < renderers.size(); i++) {\n          GutterMark renderer = renderers.get(i);\n          width += scaleIcon(renderer.getIcon()).getIconWidth();\n          if (i > 0) width += GAP_BETWEEN_ICONS;\n        }\n        if (myIconsAreaWidth < width) {\n          myIconsAreaWidth = width + 1;\n        }\n        return true;\n      }\n    });",
      "info" : "ExpressionStatement[27692-28223]:ExpressionStatement[27692-28223]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27778-27787]:MarkerAnnotation[27778-27787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27794-27800]:Modifier[27794-27800]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27801-27808]:PrimitiveType[27801-27808]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[27809-27816]:SimpleName[27809-27816]"
    }, {
      "left" : "List<GutterMark> renderers",
      "right" : "List<GutterMark> renderers",
      "info" : "SingleVariableDeclaration[27817-27843]:SingleVariableDeclaration[27817-27843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27845-28215]:Block[27845-28215]"
    }, {
      "left" : "int width = 1;",
      "right" : "int width = 1;",
      "info" : "VariableDeclarationStatement[27855-27869]:VariableDeclarationStatement[27855-27869]"
    }, {
      "left" : "for (int i = 0; i < renderers.size(); i++)",
      "right" : "for (int i = 0; i < renderers.size(); i++)",
      "info" : "ForStatement[27878-28096]:ForStatement[27878-28096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27921-28096]:Block[27921-28096]"
    }, {
      "left" : "GutterMark renderer = renderers.get(i);",
      "right" : "GutterMark renderer = renderers.get(i);",
      "info" : "VariableDeclarationStatement[27933-27972]:VariableDeclarationStatement[27933-27972]"
    }, {
      "left" : "width += scaleIcon(renderer.getIcon()).getIconWidth();",
      "right" : "width += scaleIcon(renderer.getIcon()).getIconWidth();",
      "info" : "ExpressionStatement[27983-28037]:ExpressionStatement[27983-28037]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[28048-28086]:IfStatement[28048-28086]"
    }, {
      "left" : "width += GAP_BETWEEN_ICONS;",
      "right" : "width += GAP_BETWEEN_ICONS;",
      "info" : "ExpressionStatement[28059-28086]:ExpressionStatement[28059-28086]"
    }, {
      "left" : "if (myIconsAreaWidth < width)",
      "right" : "if (myIconsAreaWidth < width)",
      "info" : "IfStatement[28105-28186]:IfStatement[28105-28186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28135-28186]:Block[28135-28186]"
    }, {
      "left" : "myIconsAreaWidth = width + 1;",
      "right" : "myIconsAreaWidth = width + 1;",
      "info" : "ExpressionStatement[28147-28176]:ExpressionStatement[28147-28176]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28195-28207]:ReturnStatement[28195-28207]"
    }, {
      "left" : "myLineMarkerAreaWidth = myIconsAreaWidth + GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA + FREE_PAINTERS_AREA_WIDTH;",
      "right" : "myLineMarkerAreaWidth = myIconsAreaWidth + GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA + FREE_PAINTERS_AREA_WIDTH;",
      "info" : "ExpressionStatement[28229-28340]:ExpressionStatement[28229-28340]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28348-28355]:Modifier[28348-28355]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28356-28363]:PrimitiveType[28356-28363]"
    }, {
      "left" : "isHighlighterVisible",
      "right" : "isHighlighterVisible",
      "info" : "SimpleName[28364-28384]:SimpleName[28364-28384]"
    }, {
      "left" : "RangeHighlighter highlighter",
      "right" : "RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[28385-28413]:SingleVariableDeclaration[28385-28413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28415-28988]:Block[28415-28988]"
    }, {
      "left" : "int startOffset = highlighter instanceof RangeHighlighterEx ?\n                      ((RangeHighlighterEx)highlighter).getAffectedAreaStartOffset() :\n                      highlighter.getStartOffset();",
      "right" : "int startOffset = highlighter instanceof RangeHighlighterEx ?\n                      ((RangeHighlighterEx)highlighter).getAffectedAreaStartOffset() :\n                      highlighter.getStartOffset();",
      "info" : "VariableDeclarationStatement[28421-28621]:VariableDeclarationStatement[28421-28621]"
    }, {
      "left" : "int endOffset = highlighter instanceof RangeHighlighterEx ?\n                    ((RangeHighlighterEx)highlighter).getAffectedAreaEndOffset() :\n                    highlighter.getEndOffset();",
      "right" : "int endOffset = highlighter instanceof RangeHighlighterEx ?\n                    ((RangeHighlighterEx)highlighter).getAffectedAreaEndOffset() :\n                    highlighter.getEndOffset();",
      "info" : "VariableDeclarationStatement[28626-28816]:VariableDeclarationStatement[28626-28816]"
    }, {
      "left" : "FoldRegion foldRegion = myEditor.getFoldingModel().getCollapsedRegionAtOffset(startOffset);",
      "right" : "FoldRegion foldRegion = myEditor.getFoldingModel().getCollapsedRegionAtOffset(startOffset);",
      "info" : "VariableDeclarationStatement[28821-28912]:VariableDeclarationStatement[28821-28912]"
    }, {
      "left" : "return foldRegion == null || foldRegion.getEndOffset() < endOffset;",
      "right" : "return foldRegion == null || foldRegion.getEndOffset() < endOffset;",
      "info" : "ReturnStatement[28917-28984]:ReturnStatement[28917-28984]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28992-28999]:Modifier[28992-28999]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29000-29004]:PrimitiveType[29000-29004]"
    }, {
      "left" : "paintGutterRenderers",
      "right" : "paintGutterRenderers",
      "info" : "SimpleName[29005-29025]:SimpleName[29005-29025]"
    }, {
      "left" : "final Graphics g",
      "right" : "final Graphics g",
      "info" : "SingleVariableDeclaration[29026-29042]:SingleVariableDeclaration[29026-29042]"
    }, {
      "left" : "int firstVisibleOffset",
      "right" : "int firstVisibleOffset",
      "info" : "SingleVariableDeclaration[29044-29066]:SingleVariableDeclaration[29044-29066]"
    }, {
      "left" : "int lastVisibleOffset",
      "right" : "int lastVisibleOffset",
      "info" : "SingleVariableDeclaration[29068-29089]:SingleVariableDeclaration[29068-29089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29091-29884]:Block[29091-29884]"
    }, {
      "left" : "Graphics2D g2 = (Graphics2D)g;",
      "right" : "Graphics2D g2 = (Graphics2D)g;",
      "info" : "VariableDeclarationStatement[29097-29127]:VariableDeclarationStatement[29097-29127]"
    }, {
      "left" : "Object hint = g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);",
      "right" : "Object hint = g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);",
      "info" : "VariableDeclarationStatement[29133-29200]:VariableDeclarationStatement[29133-29200]"
    }, {
      "left" : "g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);",
      "right" : "g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);",
      "info" : "ExpressionStatement[29205-29293]:ExpressionStatement[29205-29293]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29298-29657]:TryStatement[29298-29657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29302-29571]:Block[29302-29571]"
    }, {
      "left" : "processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() {\n        @Override\n        public void process(@NotNull RangeHighlighter highlighter) {\n          paintLineMarkerRenderer(highlighter, g);\n        }\n      });",
      "right" : "processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() {\n        @Override\n        public void process(@NotNull RangeHighlighter highlighter) {\n          paintLineMarkerRenderer(highlighter, g);\n        }\n      });",
      "info" : "ExpressionStatement[29310-29565]:ExpressionStatement[29310-29565]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29416-29425]:MarkerAnnotation[29416-29425]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29434-29440]:Modifier[29434-29440]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29441-29445]:PrimitiveType[29441-29445]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[29446-29453]:SimpleName[29446-29453]"
    }, {
      "left" : "@NotNull RangeHighlighter highlighter",
      "right" : "@NotNull RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[29454-29491]:SingleVariableDeclaration[29454-29491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29493-29555]:Block[29493-29555]"
    }, {
      "left" : "paintLineMarkerRenderer(highlighter, g);",
      "right" : "paintLineMarkerRenderer(highlighter, g);",
      "info" : "ExpressionStatement[29505-29545]:ExpressionStatement[29505-29545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29584-29657]:Block[29584-29657]"
    }, {
      "left" : "g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, hint);",
      "right" : "g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, hint);",
      "info" : "ExpressionStatement[29592-29651]:ExpressionStatement[29592-29651]"
    }, {
      "left" : "int firstVisibleLine = myEditor.getDocument().getLineNumber(firstVisibleOffset);",
      "right" : "int firstVisibleLine = myEditor.getDocument().getLineNumber(firstVisibleOffset);",
      "info" : "VariableDeclarationStatement[29663-29743]:VariableDeclarationStatement[29663-29743]"
    }, {
      "left" : "int lastVisibleLine = myEditor.getDocument().getLineNumber(lastVisibleOffset);",
      "right" : "int lastVisibleLine = myEditor.getDocument().getLineNumber(lastVisibleOffset);",
      "info" : "VariableDeclarationStatement[29748-29826]:VariableDeclarationStatement[29748-29826]"
    }, {
      "left" : "paintIcons(firstVisibleLine, lastVisibleLine, g);",
      "right" : "paintIcons(firstVisibleLine, lastVisibleLine, g);",
      "info" : "ExpressionStatement[29831-29880]:ExpressionStatement[29831-29880]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29888-29895]:Modifier[29888-29895]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29896-29900]:PrimitiveType[29896-29900]"
    }, {
      "left" : "paintIcons",
      "right" : "paintIcons",
      "info" : "SimpleName[29901-29911]:SimpleName[29901-29911]"
    }, {
      "left" : "final int firstVisibleLine",
      "right" : "final int firstVisibleLine",
      "info" : "SingleVariableDeclaration[29912-29938]:SingleVariableDeclaration[29912-29938]"
    }, {
      "left" : "final int lastVisibleLine",
      "right" : "final int lastVisibleLine",
      "info" : "SingleVariableDeclaration[29940-29965]:SingleVariableDeclaration[29940-29965]"
    }, {
      "left" : "final Graphics g",
      "right" : "final Graphics g",
      "info" : "SingleVariableDeclaration[29967-29983]:SingleVariableDeclaration[29967-29983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29985-30220]:Block[29985-30220]"
    }, {
      "left" : "for (int line = firstVisibleLine; line <= lastVisibleLine; line++)",
      "right" : "for (int line = firstVisibleLine; line <= lastVisibleLine; line++)",
      "info" : "ForStatement[29991-30216]:ForStatement[29991-30216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30058-30216]:Block[30058-30216]"
    }, {
      "left" : "List<GutterMark> renderers = myLineToGutterRenderers.get(line);",
      "right" : "List<GutterMark> renderers = myLineToGutterRenderers.get(line);",
      "info" : "VariableDeclarationStatement[30066-30129]:VariableDeclarationStatement[30066-30129]"
    }, {
      "left" : "if (renderers != null)",
      "right" : "if (renderers != null)",
      "info" : "IfStatement[30136-30210]:IfStatement[30136-30210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30159-30210]:Block[30159-30210]"
    }, {
      "left" : "paintIconRow(line, renderers, g);",
      "right" : "paintIconRow(line, renderers, g);",
      "info" : "ExpressionStatement[30169-30202]:ExpressionStatement[30169-30202]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30224-30231]:Modifier[30224-30231]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30232-30236]:PrimitiveType[30232-30236]"
    }, {
      "left" : "paintIconRow",
      "right" : "paintIconRow",
      "info" : "SimpleName[30237-30249]:SimpleName[30237-30249]"
    }, {
      "left" : "int line",
      "right" : "int line",
      "info" : "SingleVariableDeclaration[30250-30258]:SingleVariableDeclaration[30250-30258]"
    }, {
      "left" : "List<GutterMark> row",
      "right" : "List<GutterMark> row",
      "info" : "SingleVariableDeclaration[30260-30280]:SingleVariableDeclaration[30260-30280]"
    }, {
      "left" : "final Graphics g",
      "right" : "final Graphics g",
      "info" : "SingleVariableDeclaration[30282-30298]:SingleVariableDeclaration[30282-30298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30300-30587]:Block[30300-30587]"
    }, {
      "left" : "processIconsRow(line, row, new LineGutterIconRendererProcessor() {\n      @Override\n      public void process(int x, int y, GutterMark renderer) {\n        Icon icon = scaleIcon(renderer.getIcon());\n        icon.paintIcon(EditorGutterComponentImpl.this, g, x, y);\n      }\n    });",
      "right" : "processIconsRow(line, row, new LineGutterIconRendererProcessor() {\n      @Override\n      public void process(int x, int y, GutterMark renderer) {\n        Icon icon = scaleIcon(renderer.getIcon());\n        icon.paintIcon(EditorGutterComponentImpl.this, g, x, y);\n      }\n    });",
      "info" : "ExpressionStatement[30306-30583]:ExpressionStatement[30306-30583]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30379-30388]:MarkerAnnotation[30379-30388]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30395-30401]:Modifier[30395-30401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30402-30406]:PrimitiveType[30402-30406]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[30407-30414]:SimpleName[30407-30414]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[30415-30420]:SingleVariableDeclaration[30415-30420]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[30422-30427]:SingleVariableDeclaration[30422-30427]"
    }, {
      "left" : "GutterMark renderer",
      "right" : "GutterMark renderer",
      "info" : "SingleVariableDeclaration[30429-30448]:SingleVariableDeclaration[30429-30448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30450-30575]:Block[30450-30575]"
    }, {
      "left" : "Icon icon = scaleIcon(renderer.getIcon());",
      "right" : "Icon icon = scaleIcon(renderer.getIcon());",
      "info" : "VariableDeclarationStatement[30460-30502]:VariableDeclarationStatement[30460-30502]"
    }, {
      "left" : "icon.paintIcon(EditorGutterComponentImpl.this, g, x, y);",
      "right" : "icon.paintIcon(EditorGutterComponentImpl.this, g, x, y);",
      "info" : "ExpressionStatement[30511-30567]:ExpressionStatement[30511-30567]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30591-30598]:Modifier[30591-30598]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30599-30603]:PrimitiveType[30599-30603]"
    }, {
      "left" : "paintLineMarkerRenderer",
      "right" : "paintLineMarkerRenderer",
      "info" : "SimpleName[30604-30627]:SimpleName[30604-30627]"
    }, {
      "left" : "RangeHighlighter highlighter",
      "right" : "RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[30628-30656]:SingleVariableDeclaration[30628-30656]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[30658-30668]:SingleVariableDeclaration[30658-30668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30670-30962]:Block[30670-30962]"
    }, {
      "left" : "Rectangle rectangle = getLineRendererRectangle(highlighter);",
      "right" : "Rectangle rectangle = getLineRendererRectangle(highlighter);",
      "info" : "VariableDeclarationStatement[30676-30736]:VariableDeclarationStatement[30676-30736]"
    }, {
      "left" : "if (rectangle != null)",
      "right" : "if (rectangle != null)",
      "info" : "IfStatement[30742-30958]:IfStatement[30742-30958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30765-30958]:Block[30765-30958]"
    }, {
      "left" : "final LineMarkerRenderer lineMarkerRenderer = highlighter.getLineMarkerRenderer();",
      "right" : "final LineMarkerRenderer lineMarkerRenderer = highlighter.getLineMarkerRenderer();",
      "info" : "VariableDeclarationStatement[30773-30855]:VariableDeclarationStatement[30773-30855]"
    }, {
      "left" : "assert lineMarkerRenderer != null;",
      "right" : "assert lineMarkerRenderer != null;",
      "info" : "AssertStatement[30862-30896]:AssertStatement[30862-30896]"
    }, {
      "left" : "lineMarkerRenderer.paint(myEditor, g, rectangle);",
      "right" : "lineMarkerRenderer.paint(myEditor, g, rectangle);",
      "info" : "ExpressionStatement[30903-30952]:ExpressionStatement[30903-30952]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[30966-30975]:MarkerAnnotation[30966-30975]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30978-30985]:Modifier[30978-30985]"
    }, {
      "left" : "Rectangle",
      "right" : "Rectangle",
      "info" : "SimpleType[30986-30995]:SimpleType[30986-30995]"
    }, {
      "left" : "getLineRendererRectangle",
      "right" : "getLineRendererRectangle",
      "info" : "SimpleName[30996-31020]:SimpleName[30996-31020]"
    }, {
      "left" : "RangeHighlighter highlighter",
      "right" : "RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[31021-31049]:SingleVariableDeclaration[31021-31049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31051-32416]:Block[31051-32416]"
    }, {
      "left" : "LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer();",
      "right" : "LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer();",
      "info" : "VariableDeclarationStatement[31057-31123]:VariableDeclarationStatement[31057-31123]"
    }, {
      "left" : "if (renderer == null)",
      "right" : "if (renderer == null)",
      "info" : "IfStatement[31128-31162]:IfStatement[31128-31162]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31150-31162]:ReturnStatement[31150-31162]"
    }, {
      "left" : "int startOffset = highlighter.getStartOffset();",
      "right" : "int startOffset = highlighter.getStartOffset();",
      "info" : "VariableDeclarationStatement[31168-31215]:VariableDeclarationStatement[31168-31215]"
    }, {
      "left" : "int endOffset = highlighter.getEndOffset();",
      "right" : "int endOffset = highlighter.getEndOffset();",
      "info" : "VariableDeclarationStatement[31220-31263]:VariableDeclarationStatement[31220-31263]"
    }, {
      "left" : "FoldRegion startFoldRegion = myEditor.getFoldingModel().getCollapsedRegionAtOffset(startOffset);",
      "right" : "FoldRegion startFoldRegion = myEditor.getFoldingModel().getCollapsedRegionAtOffset(startOffset);",
      "info" : "VariableDeclarationStatement[31269-31365]:VariableDeclarationStatement[31269-31365]"
    }, {
      "left" : "FoldRegion endFoldRegion = myEditor.getFoldingModel().getCollapsedRegionAtOffset(endOffset);",
      "right" : "FoldRegion endFoldRegion = myEditor.getFoldingModel().getCollapsedRegionAtOffset(endOffset);",
      "info" : "VariableDeclarationStatement[31370-31462]:VariableDeclarationStatement[31370-31462]"
    }, {
      "left" : "if (startFoldRegion != null && endFoldRegion != null && startFoldRegion.equals(endFoldRegion))",
      "right" : "if (startFoldRegion != null && endFoldRegion != null && startFoldRegion.equals(endFoldRegion))",
      "info" : "IfStatement[31467-31588]:IfStatement[31467-31588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31562-31588]:Block[31562-31588]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31570-31582]:ReturnStatement[31570-31582]"
    }, {
      "left" : "int startY = myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(startOffset)).y;",
      "right" : "int startY = myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(startOffset)).y;",
      "info" : "VariableDeclarationStatement[31594-31683]:VariableDeclarationStatement[31594-31683]"
    }, {
      "left" : "int endY = myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(endOffset)).y;",
      "right" : "int endY = myEditor.visualPositionToXY(myEditor.offsetToVisualPosition(endOffset)).y;",
      "info" : "VariableDeclarationStatement[31746-31831]:VariableDeclarationStatement[31746-31831]"
    }, {
      "left" : "DocumentEx document = myEditor.getDocument();",
      "right" : "DocumentEx document = myEditor.getDocument();",
      "info" : "VariableDeclarationStatement[31927-31972]:VariableDeclarationStatement[31927-31972]"
    }, {
      "left" : "if (document.getLineStartOffset(document.getLineNumber(endOffset)) != endOffset)",
      "right" : "if (document.getLineStartOffset(document.getLineNumber(endOffset)) != endOffset)",
      "info" : "IfStatement[31977-32238]:IfStatement[31977-32238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32058-32238]:Block[32058-32238]"
    }, {
      "left" : "endY += myEditor.getLineHeight();",
      "right" : "endY += myEditor.getLineHeight();",
      "info" : "ExpressionStatement[32199-32232]:ExpressionStatement[32199-32232]"
    }, {
      "left" : "int height = endY - startY;",
      "right" : "int height = endY - startY;",
      "info" : "VariableDeclarationStatement[32244-32271]:VariableDeclarationStatement[32244-32271]"
    }, {
      "left" : "int w = FREE_PAINTERS_AREA_WIDTH;",
      "right" : "int w = FREE_PAINTERS_AREA_WIDTH;",
      "info" : "VariableDeclarationStatement[32276-32309]:VariableDeclarationStatement[32276-32309]"
    }, {
      "left" : "int x = getLineMarkerFreePaintersAreaOffset() - 1;",
      "right" : "int x = getLineMarkerFreePaintersAreaOffset() - 1;",
      "info" : "VariableDeclarationStatement[32314-32364]:VariableDeclarationStatement[32314-32364]"
    }, {
      "left" : "return new Rectangle(x, startY, w, height);",
      "right" : "return new Rectangle(x, startY, w, height);",
      "info" : "ReturnStatement[32369-32412]:ReturnStatement[32369-32412]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32420-32427]:Modifier[32420-32427]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[32428-32437]:TYPE_DECLARATION_KIND[32428-32437]"
    }, {
      "left" : "LineGutterIconRendererProcessor",
      "right" : "LineGutterIconRendererProcessor",
      "info" : "SimpleName[32438-32469]:SimpleName[32438-32469]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32476-32480]:PrimitiveType[32476-32480]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[32481-32488]:SimpleName[32481-32488]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[32489-32494]:SingleVariableDeclaration[32489-32494]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[32496-32501]:SingleVariableDeclaration[32496-32501]"
    }, {
      "left" : "GutterMark renderer",
      "right" : "GutterMark renderer",
      "info" : "SingleVariableDeclaration[32503-32522]:SingleVariableDeclaration[32503-32522]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32532-32539]:Modifier[32532-32539]"
    }, {
      "left" : "Icon",
      "right" : "Icon",
      "info" : "SimpleType[32540-32544]:SimpleType[32540-32544]"
    }, {
      "left" : "scaleIcon",
      "right" : "scaleIcon",
      "info" : "SimpleName[32545-32554]:SimpleName[32545-32554]"
    }, {
      "left" : "Icon icon",
      "right" : "Icon icon",
      "info" : "SingleVariableDeclaration[32555-32564]:SingleVariableDeclaration[32555-32564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32566-32732]:Block[32566-32732]"
    }, {
      "left" : "if (Registry.is(\"editor.scale.gutter.icons\"))",
      "right" : "if (Registry.is(\"editor.scale.gutter.icons\"))",
      "info" : "IfStatement[32572-32711]:IfStatement[32572-32711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32618-32711]:Block[32618-32711]"
    }, {
      "left" : "return IconUtil.scale(icon, (double)myEditor.getLineHeight() / JBUI.scale(17));",
      "right" : "return IconUtil.scale(icon, (double)myEditor.getLineHeight() / JBUI.scale(17));",
      "info" : "ReturnStatement[32626-32705]:ReturnStatement[32626-32705]"
    }, {
      "left" : "return icon;",
      "right" : "return icon;",
      "info" : "ReturnStatement[32716-32728]:ReturnStatement[32716-32728]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32736-32743]:Modifier[32736-32743]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32744-32748]:PrimitiveType[32744-32748]"
    }, {
      "left" : "processIconsRow",
      "right" : "processIconsRow",
      "info" : "SimpleName[32749-32764]:SimpleName[32749-32764]"
    }, {
      "left" : "int line",
      "right" : "int line",
      "info" : "SingleVariableDeclaration[32765-32773]:SingleVariableDeclaration[32765-32773]"
    }, {
      "left" : "List<GutterMark> row",
      "right" : "List<GutterMark> row",
      "info" : "SingleVariableDeclaration[32775-32795]:SingleVariableDeclaration[32775-32795]"
    }, {
      "left" : "LineGutterIconRendererProcessor processor",
      "right" : "LineGutterIconRendererProcessor processor",
      "info" : "SingleVariableDeclaration[32797-32838]:SingleVariableDeclaration[32797-32838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32840-34581]:Block[32840-34581]"
    }, {
      "left" : "int middleCount = 0;",
      "right" : "int middleCount = 0;",
      "info" : "VariableDeclarationStatement[32846-32866]:VariableDeclarationStatement[32846-32866]"
    }, {
      "left" : "int middleSize = 0;",
      "right" : "int middleSize = 0;",
      "info" : "VariableDeclarationStatement[32871-32890]:VariableDeclarationStatement[32871-32890]"
    }, {
      "left" : "int x = getLineMarkerAreaOffset() + 2;",
      "right" : "int x = getLineMarkerAreaOffset() + 2;",
      "info" : "VariableDeclarationStatement[32895-32933]:VariableDeclarationStatement[32895-32933]"
    }, {
      "left" : "final int y = myEditor.logicalPositionToXY(new LogicalPosition(line, 0)).y;",
      "right" : "final int y = myEditor.logicalPositionToXY(new LogicalPosition(line, 0)).y;",
      "info" : "VariableDeclarationStatement[32938-33013]:VariableDeclarationStatement[32938-33013]"
    }, {
      "left" : "for (GutterMark r : row)",
      "right" : "for (GutterMark r : row)",
      "info" : "EnhancedForStatement[33019-33541]:EnhancedForStatement[33019-33541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33044-33541]:Block[33044-33541]"
    }, {
      "left" : "final GutterIconRenderer.Alignment alignment = ((GutterIconRenderer)r).getAlignment();",
      "right" : "final GutterIconRenderer.Alignment alignment = ((GutterIconRenderer)r).getAlignment();",
      "info" : "VariableDeclarationStatement[33052-33138]:VariableDeclarationStatement[33052-33138]"
    }, {
      "left" : "final Icon icon = scaleIcon(r.getIcon());",
      "right" : "final Icon icon = scaleIcon(r.getIcon());",
      "info" : "VariableDeclarationStatement[33145-33186]:VariableDeclarationStatement[33145-33186]"
    }, {
      "left" : "if (alignment == GutterIconRenderer.Alignment.LEFT)",
      "right" : "if (alignment == GutterIconRenderer.Alignment.LEFT)",
      "info" : "IfStatement[33193-33535]:IfStatement[33193-33535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33245-33374]:Block[33245-33374]"
    }, {
      "left" : "processor.process(x, y + getTextAlignmentShift(icon), r);",
      "right" : "processor.process(x, y + getTextAlignmentShift(icon), r);",
      "info" : "ExpressionStatement[33255-33312]:ExpressionStatement[33255-33312]"
    }, {
      "left" : "x += icon.getIconWidth() + GAP_BETWEEN_ICONS;",
      "right" : "x += icon.getIconWidth() + GAP_BETWEEN_ICONS;",
      "info" : "ExpressionStatement[33321-33366]:ExpressionStatement[33321-33366]"
    }, {
      "left" : "if (alignment == GutterIconRenderer.Alignment.CENTER)",
      "right" : "if (alignment == GutterIconRenderer.Alignment.CENTER)",
      "info" : "IfStatement[33386-33535]:IfStatement[33386-33535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33440-33535]:Block[33440-33535]"
    }, {
      "left" : "middleCount++;",
      "right" : "middleCount++;",
      "info" : "ExpressionStatement[33450-33464]:ExpressionStatement[33450-33464]"
    }, {
      "left" : "middleSize += icon.getIconWidth() + GAP_BETWEEN_ICONS;",
      "right" : "middleSize += icon.getIconWidth() + GAP_BETWEEN_ICONS;",
      "info" : "ExpressionStatement[33473-33527]:ExpressionStatement[33473-33527]"
    }, {
      "left" : "final int leftSize = x - getLineMarkerAreaOffset();",
      "right" : "final int leftSize = x - getLineMarkerAreaOffset();",
      "info" : "VariableDeclarationStatement[33547-33598]:VariableDeclarationStatement[33547-33598]"
    }, {
      "left" : "x = getLineMarkerAreaOffset() + myIconsAreaWidth - 2;",
      "right" : "x = getLineMarkerAreaOffset() + myIconsAreaWidth - 2;",
      "info" : "ExpressionStatement[33604-33657]:ExpressionStatement[33604-33657]"
    }, {
      "left" : "for (GutterMark r : row)",
      "right" : "for (GutterMark r : row)",
      "info" : "EnhancedForStatement[33700-34006]:EnhancedForStatement[33700-34006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33725-34006]:Block[33725-34006]"
    }, {
      "left" : "if (((GutterIconRenderer)r).getAlignment() == GutterIconRenderer.Alignment.RIGHT)",
      "right" : "if (((GutterIconRenderer)r).getAlignment() == GutterIconRenderer.Alignment.RIGHT)",
      "info" : "IfStatement[33733-34000]:IfStatement[33733-34000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33815-34000]:Block[33815-34000]"
    }, {
      "left" : "Icon icon = scaleIcon(r.getIcon());",
      "right" : "Icon icon = scaleIcon(r.getIcon());",
      "info" : "VariableDeclarationStatement[33825-33860]:VariableDeclarationStatement[33825-33860]"
    }, {
      "left" : "x -= icon.getIconWidth();",
      "right" : "x -= icon.getIconWidth();",
      "info" : "ExpressionStatement[33869-33894]:ExpressionStatement[33869-33894]"
    }, {
      "left" : "processor.process(x, y + getTextAlignmentShift(icon), r);",
      "right" : "processor.process(x, y + getTextAlignmentShift(icon), r);",
      "info" : "ExpressionStatement[33903-33960]:ExpressionStatement[33903-33960]"
    }, {
      "left" : "x -= GAP_BETWEEN_ICONS;",
      "right" : "x -= GAP_BETWEEN_ICONS;",
      "info" : "ExpressionStatement[33969-33992]:ExpressionStatement[33969-33992]"
    }, {
      "left" : "int rightSize = myIconsAreaWidth + getLineMarkerAreaOffset() - x + 1;",
      "right" : "int rightSize = myIconsAreaWidth + getLineMarkerAreaOffset() - x + 1;",
      "info" : "VariableDeclarationStatement[34012-34081]:VariableDeclarationStatement[34012-34081]"
    }, {
      "left" : "if (middleCount > 0)",
      "right" : "if (middleCount > 0)",
      "info" : "IfStatement[34087-34577]:IfStatement[34087-34577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34108-34577]:Block[34108-34577]"
    }, {
      "left" : "middleSize -= GAP_BETWEEN_ICONS;",
      "right" : "middleSize -= GAP_BETWEEN_ICONS;",
      "info" : "ExpressionStatement[34116-34148]:ExpressionStatement[34116-34148]"
    }, {
      "left" : "x = getLineMarkerAreaOffset() + leftSize + (myIconsAreaWidth - leftSize - rightSize - middleSize) / 2;",
      "right" : "x = getLineMarkerAreaOffset() + leftSize + (myIconsAreaWidth - leftSize - rightSize - middleSize) / 2;",
      "info" : "ExpressionStatement[34155-34257]:ExpressionStatement[34155-34257]"
    }, {
      "left" : "for (GutterMark r : row)",
      "right" : "for (GutterMark r : row)",
      "info" : "EnhancedForStatement[34264-34571]:EnhancedForStatement[34264-34571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34289-34571]:Block[34289-34571]"
    }, {
      "left" : "if (((GutterIconRenderer)r).getAlignment() == GutterIconRenderer.Alignment.CENTER)",
      "right" : "if (((GutterIconRenderer)r).getAlignment() == GutterIconRenderer.Alignment.CENTER)",
      "info" : "IfStatement[34299-34563]:IfStatement[34299-34563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34382-34563]:Block[34382-34563]"
    }, {
      "left" : "Icon icon = scaleIcon(r.getIcon());",
      "right" : "Icon icon = scaleIcon(r.getIcon());",
      "info" : "VariableDeclarationStatement[34394-34429]:VariableDeclarationStatement[34394-34429]"
    }, {
      "left" : "processor.process(x, y + getTextAlignmentShift(icon), r);",
      "right" : "processor.process(x, y + getTextAlignmentShift(icon), r);",
      "info" : "ExpressionStatement[34440-34497]:ExpressionStatement[34440-34497]"
    }, {
      "left" : "x += icon.getIconWidth() + GAP_BETWEEN_ICONS;",
      "right" : "x += icon.getIconWidth() + GAP_BETWEEN_ICONS;",
      "info" : "ExpressionStatement[34508-34553]:ExpressionStatement[34508-34553]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34585-34592]:Modifier[34585-34592]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[34593-34596]:PrimitiveType[34593-34596]"
    }, {
      "left" : "getTextAlignmentShift",
      "right" : "getTextAlignmentShift",
      "info" : "SimpleName[34597-34618]:SimpleName[34597-34618]"
    }, {
      "left" : "Icon icon",
      "right" : "Icon icon",
      "info" : "SingleVariableDeclaration[34619-34628]:SingleVariableDeclaration[34619-34628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34630-34700]:Block[34630-34700]"
    }, {
      "left" : "return (myEditor.getLineHeight() - icon.getIconHeight()) /2;",
      "right" : "return (myEditor.getLineHeight() - icon.getIconHeight()) /2;",
      "info" : "ReturnStatement[34636-34696]:ReturnStatement[34636-34696]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34704-34713]:MarkerAnnotation[34704-34713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34716-34722]:Modifier[34716-34722]"
    }, {
      "left" : "Color",
      "right" : "Color",
      "info" : "SimpleType[34723-34728]:SimpleType[34723-34728]"
    }, {
      "left" : "getOutlineColor",
      "right" : "getOutlineColor",
      "info" : "SimpleName[34729-34744]:SimpleName[34729-34744]"
    }, {
      "left" : "boolean isActive",
      "right" : "boolean isActive",
      "info" : "SingleVariableDeclaration[34745-34761]:SingleVariableDeclaration[34745-34761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34763-34976]:Block[34763-34976]"
    }, {
      "left" : "ColorKey key = isActive ? EditorColors.SELECTED_TEARLINE_COLOR : EditorColors.TEARLINE_COLOR;",
      "right" : "ColorKey key = isActive ? EditorColors.SELECTED_TEARLINE_COLOR : EditorColors.TEARLINE_COLOR;",
      "info" : "VariableDeclarationStatement[34769-34862]:VariableDeclarationStatement[34769-34862]"
    }, {
      "left" : "Color color = myEditor.getColorsScheme().getColor(key);",
      "right" : "Color color = myEditor.getColorsScheme().getColor(key);",
      "info" : "VariableDeclarationStatement[34867-34922]:VariableDeclarationStatement[34867-34922]"
    }, {
      "left" : "return color != null ? color : JBColor.black;",
      "right" : "return color != null ? color : JBColor.black;",
      "info" : "ReturnStatement[34927-34972]:ReturnStatement[34927-34972]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34980-34989]:MarkerAnnotation[34980-34989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34992-34998]:Modifier[34992-34998]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34999-35003]:PrimitiveType[34999-35003]"
    }, {
      "left" : "registerTextAnnotation",
      "right" : "registerTextAnnotation",
      "info" : "SimpleName[35004-35026]:SimpleName[35004-35026]"
    }, {
      "left" : "@NotNull TextAnnotationGutterProvider provider",
      "right" : "@NotNull TextAnnotationGutterProvider provider",
      "info" : "SingleVariableDeclaration[35027-35073]:SingleVariableDeclaration[35027-35073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35075-35181]:Block[35075-35181]"
    }, {
      "left" : "myTextAnnotationGutters.add(provider);",
      "right" : "myTextAnnotationGutters.add(provider);",
      "info" : "ExpressionStatement[35081-35119]:ExpressionStatement[35081-35119]"
    }, {
      "left" : "myTextAnnotationGutterSizes.add(0);",
      "right" : "myTextAnnotationGutterSizes.add(0);",
      "info" : "ExpressionStatement[35124-35159]:ExpressionStatement[35124-35159]"
    }, {
      "left" : "updateSize();",
      "right" : "updateSize();",
      "info" : "ExpressionStatement[35164-35177]:ExpressionStatement[35164-35177]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35185-35194]:MarkerAnnotation[35185-35194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35197-35203]:Modifier[35197-35203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35204-35208]:PrimitiveType[35204-35208]"
    }, {
      "left" : "registerTextAnnotation",
      "right" : "registerTextAnnotation",
      "info" : "SimpleName[35209-35231]:SimpleName[35209-35231]"
    }, {
      "left" : "@NotNull TextAnnotationGutterProvider provider",
      "right" : "@NotNull TextAnnotationGutterProvider provider",
      "info" : "SingleVariableDeclaration[35232-35278]:SingleVariableDeclaration[35232-35278]"
    }, {
      "left" : "@NotNull EditorGutterAction action",
      "right" : "@NotNull EditorGutterAction action",
      "info" : "SingleVariableDeclaration[35280-35314]:SingleVariableDeclaration[35280-35314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35316-35470]:Block[35316-35470]"
    }, {
      "left" : "myTextAnnotationGutters.add(provider);",
      "right" : "myTextAnnotationGutters.add(provider);",
      "info" : "ExpressionStatement[35322-35360]:ExpressionStatement[35322-35360]"
    }, {
      "left" : "myProviderToListener.put(provider, action);",
      "right" : "myProviderToListener.put(provider, action);",
      "info" : "ExpressionStatement[35365-35408]:ExpressionStatement[35365-35408]"
    }, {
      "left" : "myTextAnnotationGutterSizes.add(0);",
      "right" : "myTextAnnotationGutterSizes.add(0);",
      "info" : "ExpressionStatement[35413-35448]:ExpressionStatement[35413-35448]"
    }, {
      "left" : "updateSize();",
      "right" : "updateSize();",
      "info" : "ExpressionStatement[35453-35466]:ExpressionStatement[35453-35466]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35474-35481]:Modifier[35474-35481]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35482-35486]:PrimitiveType[35482-35486]"
    }, {
      "left" : "doPaintFoldingTree",
      "right" : "doPaintFoldingTree",
      "info" : "SimpleName[35487-35505]:SimpleName[35487-35505]"
    }, {
      "left" : "final Graphics2D g",
      "right" : "final Graphics2D g",
      "info" : "SingleVariableDeclaration[35506-35524]:SingleVariableDeclaration[35506-35524]"
    }, {
      "left" : "final Rectangle clip",
      "right" : "final Rectangle clip",
      "info" : "SingleVariableDeclaration[35526-35546]:SingleVariableDeclaration[35526-35546]"
    }, {
      "left" : "int firstVisibleOffset",
      "right" : "int firstVisibleOffset",
      "info" : "SingleVariableDeclaration[35548-35570]:SingleVariableDeclaration[35548-35570]"
    }, {
      "left" : "int lastVisibleOffset",
      "right" : "int lastVisibleOffset",
      "info" : "SingleVariableDeclaration[35572-35593]:SingleVariableDeclaration[35572-35593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35595-36048]:Block[35595-36048]"
    }, {
      "left" : "final int anchorX = getFoldingAreaOffset();",
      "right" : "final int anchorX = getFoldingAreaOffset();",
      "info" : "VariableDeclarationStatement[35601-35644]:VariableDeclarationStatement[35601-35644]"
    }, {
      "left" : "final int width = getFoldingAnchorWidth();",
      "right" : "final int width = getFoldingAnchorWidth();",
      "info" : "VariableDeclarationStatement[35649-35691]:VariableDeclarationStatement[35649-35691]"
    }, {
      "left" : "Collection<DisplayedFoldingAnchor> anchorsToDisplay =\n      myAnchorsDisplayStrategy.getAnchorsToDisplay(firstVisibleOffset, lastVisibleOffset, myActiveFoldRegion);",
      "right" : "Collection<DisplayedFoldingAnchor> anchorsToDisplay =\n      myAnchorsDisplayStrategy.getAnchorsToDisplay(firstVisibleOffset, lastVisibleOffset, myActiveFoldRegion);",
      "info" : "VariableDeclarationStatement[35697-35861]:VariableDeclarationStatement[35697-35861]"
    }, {
      "left" : "for (DisplayedFoldingAnchor anchor : anchorsToDisplay)",
      "right" : "for (DisplayedFoldingAnchor anchor : anchorsToDisplay)",
      "info" : "EnhancedForStatement[35866-36044]:EnhancedForStatement[35866-36044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35921-36044]:Block[35921-36044]"
    }, {
      "left" : "drawAnchor(width, clip, g, anchorX, anchor.visualLine, anchor.type, anchor.foldRegion == myActiveFoldRegion);",
      "right" : "drawAnchor(width, clip, g, anchorX, anchor.visualLine, anchor.type, anchor.foldRegion == myActiveFoldRegion);",
      "info" : "ExpressionStatement[35929-36038]:ExpressionStatement[35929-36038]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36052-36059]:Modifier[36052-36059]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36060-36064]:PrimitiveType[36060-36064]"
    }, {
      "left" : "paintFoldingBackground",
      "right" : "paintFoldingBackground",
      "info" : "SimpleName[36065-36087]:SimpleName[36065-36087]"
    }, {
      "left" : "Graphics g",
      "right" : "Graphics g",
      "info" : "SingleVariableDeclaration[36088-36098]:SingleVariableDeclaration[36088-36098]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[36100-36114]:SingleVariableDeclaration[36100-36114]"
    }, {
      "left" : "Color bgColor",
      "right" : "Color bgColor",
      "info" : "SingleVariableDeclaration[36116-36129]:SingleVariableDeclaration[36116-36129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36131-36450]:Block[36131-36450]"
    }, {
      "left" : "int lineX = getWhitespaceSeparatorOffset();",
      "right" : "int lineX = getWhitespaceSeparatorOffset();",
      "info" : "VariableDeclarationStatement[36137-36180]:VariableDeclarationStatement[36137-36180]"
    }, {
      "left" : "paintBackground(g, clip, getFoldingAreaOffset(), getFoldingAreaWidth(), bgColor);",
      "right" : "paintBackground(g, clip, getFoldingAreaOffset(), getFoldingAreaWidth(), bgColor);",
      "info" : "ExpressionStatement[36185-36266]:ExpressionStatement[36185-36266]"
    }, {
      "left" : "g.setColor(myEditor.getBackgroundColor());",
      "right" : "g.setColor(myEditor.getBackgroundColor());",
      "info" : "ExpressionStatement[36272-36314]:ExpressionStatement[36272-36314]"
    }, {
      "left" : "g.fillRect(lineX, clip.y, getFoldingAreaWidth(), clip.height);",
      "right" : "g.fillRect(lineX, clip.y, getFoldingAreaWidth(), clip.height);",
      "info" : "ExpressionStatement[36319-36381]:ExpressionStatement[36319-36381]"
    }, {
      "left" : "paintCaretRowBackground(g, lineX, getFoldingAnchorWidth());",
      "right" : "paintCaretRowBackground(g, lineX, getFoldingAnchorWidth());",
      "info" : "ExpressionStatement[36387-36446]:ExpressionStatement[36387-36446]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36454-36461]:Modifier[36454-36461]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36462-36466]:PrimitiveType[36462-36466]"
    }, {
      "left" : "paintFoldingLines",
      "right" : "paintFoldingLines",
      "info" : "SimpleName[36467-36484]:SimpleName[36467-36484]"
    }, {
      "left" : "final Graphics2D g",
      "right" : "final Graphics2D g",
      "info" : "SingleVariableDeclaration[36485-36503]:SingleVariableDeclaration[36485-36503]"
    }, {
      "left" : "final Rectangle clip",
      "right" : "final Rectangle clip",
      "info" : "SingleVariableDeclaration[36505-36525]:SingleVariableDeclaration[36505-36525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36527-37581]:Block[36527-37581]"
    }, {
      "left" : "if (!isFoldingOutlineShown())",
      "right" : "if (!isFoldingOutlineShown())",
      "info" : "IfStatement[36533-36570]:IfStatement[36533-36570]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36563-36570]:ReturnStatement[36563-36570]"
    }, {
      "left" : "if (myPaintBackground)",
      "right" : "if (myPaintBackground)",
      "info" : "IfStatement[36576-36756]:IfStatement[36576-36756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36599-36756]:Block[36599-36756]"
    }, {
      "left" : "g.setColor(getOutlineColor(false));",
      "right" : "g.setColor(getOutlineColor(false));",
      "info" : "ExpressionStatement[36607-36642]:ExpressionStatement[36607-36642]"
    }, {
      "left" : "int x = getWhitespaceSeparatorOffset();",
      "right" : "int x = getWhitespaceSeparatorOffset();",
      "info" : "VariableDeclarationStatement[36649-36688]:VariableDeclarationStatement[36649-36688]"
    }, {
      "left" : "UIUtil.drawLine(g, x, clip.y, x, clip.y + clip.height);",
      "right" : "UIUtil.drawLine(g, x, clip.y, x, clip.y + clip.height);",
      "info" : "ExpressionStatement[36695-36750]:ExpressionStatement[36695-36750]"
    }, {
      "left" : "final int anchorX = getFoldingAreaOffset();",
      "right" : "final int anchorX = getFoldingAreaOffset();",
      "info" : "VariableDeclarationStatement[36762-36805]:VariableDeclarationStatement[36762-36805]"
    }, {
      "left" : "final int width = getFoldingAnchorWidth();",
      "right" : "final int width = getFoldingAnchorWidth();",
      "info" : "VariableDeclarationStatement[36810-36852]:VariableDeclarationStatement[36810-36852]"
    }, {
      "left" : "if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid())",
      "right" : "if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid())",
      "info" : "IfStatement[36858-37577]:IfStatement[36858-37577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36957-37577]:Block[36957-37577]"
    }, {
      "left" : "int foldStart = myEditor.offsetToVisualLine(myActiveFoldRegion.getStartOffset());",
      "right" : "int foldStart = myEditor.offsetToVisualLine(myActiveFoldRegion.getStartOffset());",
      "info" : "VariableDeclarationStatement[36965-37046]:VariableDeclarationStatement[36965-37046]"
    }, {
      "left" : "int foldEnd = myEditor.offsetToVisualLine(getEndOffset(myActiveFoldRegion));",
      "right" : "int foldEnd = myEditor.offsetToVisualLine(getEndOffset(myActiveFoldRegion));",
      "info" : "VariableDeclarationStatement[37053-37129]:VariableDeclarationStatement[37053-37129]"
    }, {
      "left" : "int startY = myEditor.visibleLineToY(foldStart + 1) - myEditor.getDescent();",
      "right" : "int startY = myEditor.visibleLineToY(foldStart + 1) - myEditor.getDescent();",
      "info" : "VariableDeclarationStatement[37136-37212]:VariableDeclarationStatement[37136-37212]"
    }, {
      "left" : "int endY = myEditor.visibleLineToY(foldEnd) + myEditor.getLineHeight() -\n                 myEditor.getDescent();",
      "right" : "int endY = myEditor.visibleLineToY(foldEnd) + myEditor.getLineHeight() -\n                 myEditor.getDescent();",
      "info" : "VariableDeclarationStatement[37219-37331]:VariableDeclarationStatement[37219-37331]"
    }, {
      "left" : "if (startY <= clip.y + clip.height && endY + 1 + myEditor.getDescent() >= clip.y)",
      "right" : "if (startY <= clip.y + clip.height && endY + 1 + myEditor.getDescent() >= clip.y)",
      "info" : "IfStatement[37339-37571]:IfStatement[37339-37571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37421-37571]:Block[37421-37571]"
    }, {
      "left" : "int lineX = anchorX + width / 2;",
      "right" : "int lineX = anchorX + width / 2;",
      "info" : "VariableDeclarationStatement[37431-37463]:VariableDeclarationStatement[37431-37463]"
    }, {
      "left" : "g.setColor(getOutlineColor(true));",
      "right" : "g.setColor(getOutlineColor(true));",
      "info" : "ExpressionStatement[37473-37507]:ExpressionStatement[37473-37507]"
    }, {
      "left" : "UIUtil.drawLine(g, lineX, startY, lineX, endY);",
      "right" : "UIUtil.drawLine(g, lineX, startY, lineX, endY);",
      "info" : "ExpressionStatement[37516-37563]:ExpressionStatement[37516-37563]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37585-37594]:MarkerAnnotation[37585-37594]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37597-37603]:Modifier[37597-37603]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37604-37607]:PrimitiveType[37604-37607]"
    }, {
      "left" : "getWhitespaceSeparatorOffset",
      "right" : "getWhitespaceSeparatorOffset",
      "info" : "SimpleName[37608-37636]:SimpleName[37608-37636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37639-37709]:Block[37639-37709]"
    }, {
      "left" : "return getFoldingAreaOffset() + getFoldingAnchorWidth() / 2;",
      "right" : "return getFoldingAreaOffset() + getFoldingAnchorWidth() / 2;",
      "info" : "ReturnStatement[37645-37705]:ReturnStatement[37645-37705]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37713-37719]:Modifier[37713-37719]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37720-37724]:PrimitiveType[37720-37724]"
    }, {
      "left" : "setActiveFoldRegion",
      "right" : "setActiveFoldRegion",
      "info" : "SimpleName[37725-37744]:SimpleName[37725-37744]"
    }, {
      "left" : "FoldRegion activeFoldRegion",
      "right" : "FoldRegion activeFoldRegion",
      "info" : "SingleVariableDeclaration[37745-37772]:SingleVariableDeclaration[37745-37772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37774-37897]:Block[37774-37897]"
    }, {
      "left" : "if (myActiveFoldRegion != activeFoldRegion)",
      "right" : "if (myActiveFoldRegion != activeFoldRegion)",
      "info" : "IfStatement[37780-37893]:IfStatement[37780-37893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37824-37893]:Block[37824-37893]"
    }, {
      "left" : "myActiveFoldRegion = activeFoldRegion;",
      "right" : "myActiveFoldRegion = activeFoldRegion;",
      "info" : "ExpressionStatement[37832-37870]:ExpressionStatement[37832-37870]"
    }, {
      "left" : "repaint();",
      "right" : "repaint();",
      "info" : "ExpressionStatement[37877-37887]:ExpressionStatement[37877-37887]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37901-37907]:Modifier[37901-37907]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37908-37911]:PrimitiveType[37908-37911]"
    }, {
      "left" : "getHeadCenterY",
      "right" : "getHeadCenterY",
      "info" : "SimpleName[37912-37926]:SimpleName[37912-37926]"
    }, {
      "left" : "FoldRegion foldRange",
      "right" : "FoldRegion foldRange",
      "info" : "SingleVariableDeclaration[37927-37947]:SingleVariableDeclaration[37927-37947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37949-38183]:Block[37949-38183]"
    }, {
      "left" : "int width = getFoldingAnchorWidth();",
      "right" : "int width = getFoldingAnchorWidth();",
      "info" : "VariableDeclarationStatement[37955-37991]:VariableDeclarationStatement[37955-37991]"
    }, {
      "left" : "int foldStart = myEditor.offsetToVisualLine(foldRange.getStartOffset());",
      "right" : "int foldStart = myEditor.offsetToVisualLine(foldRange.getStartOffset());",
      "info" : "VariableDeclarationStatement[37996-38068]:VariableDeclarationStatement[37996-38068]"
    }, {
      "left" : "return myEditor.visibleLineToY(foldStart) + myEditor.getLineHeight() - myEditor.getDescent() - width / 2;",
      "right" : "return myEditor.visibleLineToY(foldStart) + myEditor.getLineHeight() - myEditor.getDescent() - width / 2;",
      "info" : "ReturnStatement[38074-38179]:ReturnStatement[38074-38179]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38187-38194]:Modifier[38187-38194]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38195-38199]:PrimitiveType[38195-38199]"
    }, {
      "left" : "drawAnchor",
      "right" : "drawAnchor",
      "info" : "SimpleName[38200-38210]:SimpleName[38200-38210]"
    }, {
      "left" : "int width",
      "right" : "int width",
      "info" : "SingleVariableDeclaration[38211-38220]:SingleVariableDeclaration[38211-38220]"
    }, {
      "left" : "Rectangle clip",
      "right" : "Rectangle clip",
      "info" : "SingleVariableDeclaration[38222-38236]:SingleVariableDeclaration[38222-38236]"
    }, {
      "left" : "Graphics2D g",
      "right" : "Graphics2D g",
      "info" : "SingleVariableDeclaration[38238-38250]:SingleVariableDeclaration[38238-38250]"
    }, {
      "left" : "int anchorX",
      "right" : "int anchorX",
      "info" : "SingleVariableDeclaration[38252-38263]:SingleVariableDeclaration[38252-38263]"
    }, {
      "left" : "int visualLine",
      "right" : "int visualLine",
      "info" : "SingleVariableDeclaration[38265-38279]:SingleVariableDeclaration[38265-38279]"
    }, {
      "left" : "DisplayedFoldingAnchor.Type type",
      "right" : "DisplayedFoldingAnchor.Type type",
      "info" : "SingleVariableDeclaration[38307-38339]:SingleVariableDeclaration[38307-38339]"
    }, {
      "left" : "boolean active",
      "right" : "boolean active",
      "info" : "SingleVariableDeclaration[38341-38355]:SingleVariableDeclaration[38341-38355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38357-39344]:Block[38357-39344]"
    }, {
      "left" : "final int off = JBUI.scale(2);",
      "right" : "final int off = JBUI.scale(2);",
      "info" : "VariableDeclarationStatement[38364-38394]:VariableDeclarationStatement[38364-38394]"
    }, {
      "left" : "int height = width + off;",
      "right" : "int height = width + off;",
      "info" : "VariableDeclarationStatement[38399-38424]:VariableDeclarationStatement[38399-38424]"
    }, {
      "left" : "int y;",
      "right" : "int y;",
      "info" : "VariableDeclarationStatement[38429-38435]:VariableDeclarationStatement[38429-38435]"
    }, {
      "left" : "switch (type) {\n      case COLLAPSED:\n        y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;\n        if (y <= clip.y + clip.height && y + height >= clip.y) {\n          drawSquareWithPlus(g, anchorX, y, width, active);\n        }\n        break;\n      case EXPANDED_TOP:\n        y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;\n        if (y <= clip.y + clip.height && y + height >= clip.y) {\n          drawDirectedBox(g, anchorX, y, width, height, width - off, active);\n        }\n        break;\n      case EXPANDED_BOTTOM:\n        y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent();\n        if (y - height <= clip.y + clip.height && y >= clip.y) {\n          drawDirectedBox(g, anchorX, y, width, -height, -width + off, active);\n        }\n        break;\n    }",
      "right" : "switch (type) {\n      case COLLAPSED:\n        y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;\n        if (y <= clip.y + clip.height && y + height >= clip.y) {\n          drawSquareWithPlus(g, anchorX, y, width, active);\n        }\n        break;\n      case EXPANDED_TOP:\n        y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;\n        if (y <= clip.y + clip.height && y + height >= clip.y) {\n          drawDirectedBox(g, anchorX, y, width, height, width - off, active);\n        }\n        break;\n      case EXPANDED_BOTTOM:\n        y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent();\n        if (y - height <= clip.y + clip.height && y >= clip.y) {\n          drawDirectedBox(g, anchorX, y, width, -height, -width + off, active);\n        }\n        break;\n    }",
      "info" : "SwitchStatement[38440-39340]:SwitchStatement[38440-39340]"
    }, {
      "left" : "case COLLAPSED:",
      "right" : "case COLLAPSED:",
      "info" : "SwitchCase[38462-38477]:SwitchCase[38462-38477]"
    }, {
      "left" : "y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;",
      "right" : "y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;",
      "info" : "ExpressionStatement[38486-38585]:ExpressionStatement[38486-38585]"
    }, {
      "left" : "if (y <= clip.y + clip.height && y + height >= clip.y)",
      "right" : "if (y <= clip.y + clip.height && y + height >= clip.y)",
      "info" : "IfStatement[38594-38720]:IfStatement[38594-38720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38649-38720]:Block[38649-38720]"
    }, {
      "left" : "drawSquareWithPlus(g, anchorX, y, width, active);",
      "right" : "drawSquareWithPlus(g, anchorX, y, width, active);",
      "info" : "ExpressionStatement[38661-38710]:ExpressionStatement[38661-38710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38729-38735]:BreakStatement[38729-38735]"
    }, {
      "left" : "case EXPANDED_TOP:",
      "right" : "case EXPANDED_TOP:",
      "info" : "SwitchCase[38742-38760]:SwitchCase[38742-38760]"
    }, {
      "left" : "y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;",
      "right" : "y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent() - width;",
      "info" : "ExpressionStatement[38769-38868]:ExpressionStatement[38769-38868]"
    }, {
      "left" : "if (y <= clip.y + clip.height && y + height >= clip.y)",
      "right" : "if (y <= clip.y + clip.height && y + height >= clip.y)",
      "info" : "IfStatement[38877-39021]:IfStatement[38877-39021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38932-39021]:Block[38932-39021]"
    }, {
      "left" : "drawDirectedBox(g, anchorX, y, width, height, width - off, active);",
      "right" : "drawDirectedBox(g, anchorX, y, width, height, width - off, active);",
      "info" : "ExpressionStatement[38944-39011]:ExpressionStatement[38944-39011]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39030-39036]:BreakStatement[39030-39036]"
    }, {
      "left" : "case EXPANDED_BOTTOM:",
      "right" : "case EXPANDED_BOTTOM:",
      "info" : "SwitchCase[39043-39064]:SwitchCase[39043-39064]"
    }, {
      "left" : "y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent();",
      "right" : "y = myEditor.visibleLineToY(visualLine) + myEditor.getLineHeight() - myEditor.getDescent();",
      "info" : "ExpressionStatement[39073-39164]:ExpressionStatement[39073-39164]"
    }, {
      "left" : "if (y - height <= clip.y + clip.height && y >= clip.y)",
      "right" : "if (y - height <= clip.y + clip.height && y >= clip.y)",
      "info" : "IfStatement[39173-39319]:IfStatement[39173-39319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39228-39319]:Block[39228-39319]"
    }, {
      "left" : "drawDirectedBox(g, anchorX, y, width, -height, -width + off, active);",
      "right" : "drawDirectedBox(g, anchorX, y, width, -height, -width + off, active);",
      "info" : "ExpressionStatement[39240-39309]:ExpressionStatement[39240-39309]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39328-39334]:BreakStatement[39328-39334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39348-39355]:Modifier[39348-39355]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[39356-39359]:PrimitiveType[39356-39359]"
    }, {
      "left" : "getEndOffset",
      "right" : "getEndOffset",
      "info" : "SimpleName[39360-39372]:SimpleName[39360-39372]"
    }, {
      "left" : "FoldRegion foldRange",
      "right" : "FoldRegion foldRange",
      "info" : "SingleVariableDeclaration[39373-39393]:SingleVariableDeclaration[39373-39393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39395-39601]:Block[39395-39601]"
    }, {
      "left" : "LOG.assertTrue(foldRange.isValid(), foldRange);",
      "right" : "LOG.assertTrue(foldRange.isValid(), foldRange);",
      "info" : "ExpressionStatement[39401-39448]:ExpressionStatement[39401-39448]"
    }, {
      "left" : "FoldingGroup group = foldRange.getGroup();",
      "right" : "FoldingGroup group = foldRange.getGroup();",
      "info" : "VariableDeclarationStatement[39453-39495]:VariableDeclarationStatement[39453-39495]"
    }, {
      "left" : "return group == null ? foldRange.getEndOffset() : myEditor.getFoldingModel().getEndOffset(group);",
      "right" : "return group == null ? foldRange.getEndOffset() : myEditor.getFoldingModel().getEndOffset(group);",
      "info" : "ReturnStatement[39500-39597]:ReturnStatement[39500-39597]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39605-39612]:Modifier[39605-39612]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39613-39617]:PrimitiveType[39613-39617]"
    }, {
      "left" : "drawDirectedBox",
      "right" : "drawDirectedBox",
      "info" : "SimpleName[39618-39633]:SimpleName[39618-39633]"
    }, {
      "left" : "Graphics2D g",
      "right" : "Graphics2D g",
      "info" : "SingleVariableDeclaration[39634-39646]:SingleVariableDeclaration[39634-39646]"
    }, {
      "left" : "int anchorX",
      "right" : "int anchorX",
      "info" : "SingleVariableDeclaration[39679-39690]:SingleVariableDeclaration[39679-39690]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[39723-39728]:SingleVariableDeclaration[39723-39728]"
    }, {
      "left" : "int width",
      "right" : "int width",
      "info" : "SingleVariableDeclaration[39761-39770]:SingleVariableDeclaration[39761-39770]"
    }, {
      "left" : "int height",
      "right" : "int height",
      "info" : "SingleVariableDeclaration[39803-39813]:SingleVariableDeclaration[39803-39813]"
    }, {
      "left" : "int baseHeight",
      "right" : "int baseHeight",
      "info" : "SingleVariableDeclaration[39846-39860]:SingleVariableDeclaration[39846-39860]"
    }, {
      "left" : "boolean active",
      "right" : "boolean active",
      "info" : "SingleVariableDeclaration[39893-39907]:SingleVariableDeclaration[39893-39907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39909-40862]:Block[39909-40862]"
    }, {
      "left" : "Object antialiasing = g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);",
      "right" : "Object antialiasing = g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);",
      "info" : "VariableDeclarationStatement[39915-39989]:VariableDeclarationStatement[39915-39989]"
    }, {
      "left" : "if (SystemInfo.isMac && SystemInfo.JAVA_VERSION.startsWith(\"1.4.1\") || UIUtil.isRetina())",
      "right" : "if (SystemInfo.isMac && SystemInfo.JAVA_VERSION.startsWith(\"1.4.1\") || UIUtil.isRetina())",
      "info" : "IfStatement[39994-40185]:IfStatement[39994-40185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40084-40185]:Block[40084-40185]"
    }, {
      "left" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);",
      "right" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);",
      "info" : "ExpressionStatement[40092-40179]:ExpressionStatement[40092-40179]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[40191-40858]:TryStatement[40191-40858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40195-40765]:Block[40195-40765]"
    }, {
      "left" : "final int off = JBUI.scale(2);",
      "right" : "final int off = JBUI.scale(2);",
      "info" : "VariableDeclarationStatement[40203-40233]:VariableDeclarationStatement[40203-40233]"
    }, {
      "left" : "int[] xPoints = {anchorX, anchorX + width, anchorX + width, anchorX + width / 2, anchorX};",
      "right" : "int[] xPoints = {anchorX, anchorX + width, anchorX + width, anchorX + width / 2, anchorX};",
      "info" : "VariableDeclarationStatement[40240-40330]:VariableDeclarationStatement[40240-40330]"
    }, {
      "left" : "int[] yPoints = {y, y, y + baseHeight, y + height, y + baseHeight};",
      "right" : "int[] yPoints = {y, y, y + baseHeight, y + height, y + baseHeight};",
      "info" : "VariableDeclarationStatement[40337-40404]:VariableDeclarationStatement[40337-40404]"
    }, {
      "left" : "g.setColor(myEditor.getBackgroundColor());",
      "right" : "g.setColor(myEditor.getBackgroundColor());",
      "info" : "ExpressionStatement[40412-40454]:ExpressionStatement[40412-40454]"
    }, {
      "left" : "g.fillPolygon(xPoints, yPoints, 5);",
      "right" : "g.fillPolygon(xPoints, yPoints, 5);",
      "info" : "ExpressionStatement[40461-40496]:ExpressionStatement[40461-40496]"
    }, {
      "left" : "g.setColor(getOutlineColor(active));",
      "right" : "g.setColor(getOutlineColor(active));",
      "info" : "ExpressionStatement[40504-40540]:ExpressionStatement[40504-40540]"
    }, {
      "left" : "g.drawPolygon(xPoints, yPoints, 5);",
      "right" : "g.drawPolygon(xPoints, yPoints, 5);",
      "info" : "ExpressionStatement[40547-40582]:ExpressionStatement[40547-40582]"
    }, {
      "left" : "int minusHeight = y + baseHeight / 2 + (height - baseHeight) / 4;",
      "right" : "int minusHeight = y + baseHeight / 2 + (height - baseHeight) / 4;",
      "info" : "VariableDeclarationStatement[40604-40669]:VariableDeclarationStatement[40604-40669]"
    }, {
      "left" : "UIUtil.drawLine(g, anchorX + off, minusHeight, anchorX + width - off, minusHeight);",
      "right" : "UIUtil.drawLine(g, anchorX + off, minusHeight, anchorX + width - off, minusHeight);",
      "info" : "ExpressionStatement[40676-40759]:ExpressionStatement[40676-40759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40778-40858]:Block[40778-40858]"
    }, {
      "left" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antialiasing);",
      "right" : "g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antialiasing);",
      "info" : "ExpressionStatement[40786-40852]:ExpressionStatement[40786-40852]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40866-40873]:Modifier[40866-40873]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40874-40878]:PrimitiveType[40874-40878]"
    }, {
      "left" : "drawSquareWithPlus",
      "right" : "drawSquareWithPlus",
      "info" : "SimpleName[40879-40897]:SimpleName[40879-40897]"
    }, {
      "left" : "Graphics2D g",
      "right" : "Graphics2D g",
      "info" : "SingleVariableDeclaration[40898-40910]:SingleVariableDeclaration[40898-40910]"
    }, {
      "left" : "int anchorX",
      "right" : "int anchorX",
      "info" : "SingleVariableDeclaration[40946-40957]:SingleVariableDeclaration[40946-40957]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[40993-40998]:SingleVariableDeclaration[40993-40998]"
    }, {
      "left" : "int width",
      "right" : "int width",
      "info" : "SingleVariableDeclaration[41034-41043]:SingleVariableDeclaration[41034-41043]"
    }, {
      "left" : "boolean active",
      "right" : "boolean active",
      "info" : "SingleVariableDeclaration[41079-41093]:SingleVariableDeclaration[41079-41093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41095-41282]:Block[41095-41282]"
    }, {
      "left" : "drawSquareWithMinus(g, anchorX, y, width, active);",
      "right" : "drawSquareWithMinus(g, anchorX, y, width, active);",
      "info" : "ExpressionStatement[41101-41151]:ExpressionStatement[41101-41151]"
    }, {
      "left" : "final int off = JBUI.scale(2);",
      "right" : "final int off = JBUI.scale(2);",
      "info" : "VariableDeclarationStatement[41156-41186]:VariableDeclarationStatement[41156-41186]"
    }, {
      "left" : "UIUtil.drawLine(g, anchorX + width / 2, y + off, anchorX + width / 2, y + width - off);",
      "right" : "UIUtil.drawLine(g, anchorX + width / 2, y + off, anchorX + width / 2, y + width - off);",
      "info" : "ExpressionStatement[41191-41278]:ExpressionStatement[41191-41278]"
    }, {
      "left" : "@SuppressWarnings(\"SuspiciousNameCombination\")",
      "right" : "@SuppressWarnings(\"SuspiciousNameCombination\")",
      "info" : "SingleMemberAnnotation[41286-41332]:SingleMemberAnnotation[41286-41332]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41335-41342]:Modifier[41335-41342]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41343-41347]:PrimitiveType[41343-41347]"
    }, {
      "left" : "drawSquareWithMinus",
      "right" : "drawSquareWithMinus",
      "info" : "SimpleName[41348-41367]:SimpleName[41348-41367]"
    }, {
      "left" : "Graphics2D g",
      "right" : "Graphics2D g",
      "info" : "SingleVariableDeclaration[41368-41380]:SingleVariableDeclaration[41368-41380]"
    }, {
      "left" : "int anchorX",
      "right" : "int anchorX",
      "info" : "SingleVariableDeclaration[41417-41428]:SingleVariableDeclaration[41417-41428]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[41465-41470]:SingleVariableDeclaration[41465-41470]"
    }, {
      "left" : "int width",
      "right" : "int width",
      "info" : "SingleVariableDeclaration[41507-41516]:SingleVariableDeclaration[41507-41516]"
    }, {
      "left" : "boolean active",
      "right" : "boolean active",
      "info" : "SingleVariableDeclaration[41553-41567]:SingleVariableDeclaration[41553-41567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41569-41943]:Block[41569-41943]"
    }, {
      "left" : "g.setColor(myEditor.getBackgroundColor());",
      "right" : "g.setColor(myEditor.getBackgroundColor());",
      "info" : "ExpressionStatement[41575-41617]:ExpressionStatement[41575-41617]"
    }, {
      "left" : "g.fillRect(anchorX, y, width, width);",
      "right" : "g.fillRect(anchorX, y, width, width);",
      "info" : "ExpressionStatement[41622-41659]:ExpressionStatement[41622-41659]"
    }, {
      "left" : "g.setColor(getOutlineColor(active));",
      "right" : "g.setColor(getOutlineColor(active));",
      "info" : "ExpressionStatement[41665-41701]:ExpressionStatement[41665-41701]"
    }, {
      "left" : "g.drawRect(anchorX, y, width, width);",
      "right" : "g.drawRect(anchorX, y, width, width);",
      "info" : "ExpressionStatement[41706-41743]:ExpressionStatement[41706-41743]"
    }, {
      "left" : "final int off = JBUI.scale(2);",
      "right" : "final int off = JBUI.scale(2);",
      "info" : "VariableDeclarationStatement[41748-41778]:VariableDeclarationStatement[41748-41778]"
    }, {
      "left" : "if (!active)",
      "right" : "if (!active)",
      "info" : "IfStatement[41800-41847]:IfStatement[41800-41847]"
    }, {
      "left" : "g.setColor(getOutlineColor(true));",
      "right" : "g.setColor(getOutlineColor(true));",
      "info" : "ExpressionStatement[41813-41847]:ExpressionStatement[41813-41847]"
    }, {
      "left" : "UIUtil.drawLine(g, anchorX + off, y + width / 2, anchorX + width - off, y + width / 2);",
      "right" : "UIUtil.drawLine(g, anchorX + off, y + width / 2, anchorX + width - off, y + width / 2);",
      "info" : "ExpressionStatement[41852-41939]:ExpressionStatement[41852-41939]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41947-41954]:Modifier[41947-41954]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[41955-41958]:PrimitiveType[41955-41958]"
    }, {
      "left" : "getFoldingAnchorWidth",
      "right" : "getFoldingAnchorWidth",
      "info" : "SimpleName[41959-41980]:SimpleName[41959-41980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41983-42074]:Block[41983-42074]"
    }, {
      "left" : "return Math.min(JBUI.scale(4), myEditor.getLineHeight() / 2 - JBUI.scale(2)) * 2;",
      "right" : "return Math.min(JBUI.scale(4), myEditor.getLineHeight() / 2 - JBUI.scale(2)) * 2;",
      "info" : "ReturnStatement[41989-42070]:ReturnStatement[41989-42070]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42078-42084]:Modifier[42078-42084]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[42085-42088]:PrimitiveType[42085-42088]"
    }, {
      "left" : "getFoldingAreaOffset",
      "right" : "getFoldingAreaOffset",
      "info" : "SimpleName[42089-42109]:SimpleName[42089-42109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42112-42182]:Block[42112-42182]"
    }, {
      "left" : "return getLineMarkerAreaOffset() + getLineMarkerAreaWidth();",
      "right" : "return getLineMarkerAreaOffset() + getLineMarkerAreaWidth();",
      "info" : "ReturnStatement[42118-42178]:ReturnStatement[42118-42178]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42186-42192]:Modifier[42186-42192]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[42193-42196]:PrimitiveType[42193-42196]"
    }, {
      "left" : "getFoldingAreaWidth",
      "right" : "getFoldingAreaWidth",
      "info" : "SimpleName[42197-42216]:SimpleName[42197-42216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42219-42374]:Block[42219-42374]"
    }, {
      "left" : "int width = isFoldingOutlineShown() ? getFoldingAnchorWidth() + 2 : (isRealEditor() ? getFoldingAnchorWidth() : 0);",
      "right" : "int width = isFoldingOutlineShown() ? getFoldingAnchorWidth() + 2 : (isRealEditor() ? getFoldingAnchorWidth() : 0);",
      "info" : "VariableDeclarationStatement[42225-42340]:VariableDeclarationStatement[42225-42340]"
    }, {
      "left" : "return JBUI.scale(width);",
      "right" : "return JBUI.scale(width);",
      "info" : "ReturnStatement[42345-42370]:ReturnStatement[42345-42370]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42378-42384]:Modifier[42378-42384]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42385-42392]:PrimitiveType[42385-42392]"
    }, {
      "left" : "isRealEditor",
      "right" : "isRealEditor",
      "info" : "SimpleName[42393-42405]:SimpleName[42393-42405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42408-42463]:Block[42408-42463]"
    }, {
      "left" : "return EditorUtil.isRealFileEditor(myEditor);",
      "right" : "return EditorUtil.isRealFileEditor(myEditor);",
      "info" : "ReturnStatement[42414-42459]:ReturnStatement[42414-42459]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42467-42476]:MarkerAnnotation[42467-42476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42479-42485]:Modifier[42479-42485]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42486-42493]:PrimitiveType[42486-42493]"
    }, {
      "left" : "isLineMarkersShown",
      "right" : "isLineMarkersShown",
      "info" : "SimpleName[42494-42512]:SimpleName[42494-42512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42515-42579]:Block[42515-42579]"
    }, {
      "left" : "return myEditor.getSettings().isLineMarkerAreaShown();",
      "right" : "return myEditor.getSettings().isLineMarkerAreaShown();",
      "info" : "ReturnStatement[42521-42575]:ReturnStatement[42521-42575]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42583-42589]:Modifier[42583-42589]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42590-42597]:PrimitiveType[42590-42597]"
    }, {
      "left" : "isLineNumbersShown",
      "right" : "isLineNumbersShown",
      "info" : "SimpleName[42598-42616]:SimpleName[42598-42616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42619-42680]:Block[42619-42680]"
    }, {
      "left" : "return myEditor.getSettings().isLineNumbersShown();",
      "right" : "return myEditor.getSettings().isLineNumbersShown();",
      "info" : "ReturnStatement[42625-42676]:ReturnStatement[42625-42676]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42684-42693]:MarkerAnnotation[42684-42693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42696-42702]:Modifier[42696-42702]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42703-42710]:PrimitiveType[42703-42710]"
    }, {
      "left" : "isAnnotationsShown",
      "right" : "isAnnotationsShown",
      "info" : "SimpleName[42711-42729]:SimpleName[42711-42729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42732-42784]:Block[42732-42784]"
    }, {
      "left" : "return !myTextAnnotationGutters.isEmpty();",
      "right" : "return !myTextAnnotationGutters.isEmpty();",
      "info" : "ReturnStatement[42738-42780]:ReturnStatement[42738-42780]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42788-42797]:MarkerAnnotation[42788-42797]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42800-42806]:Modifier[42800-42806]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42807-42814]:PrimitiveType[42807-42814]"
    }, {
      "left" : "isFoldingOutlineShown",
      "right" : "isFoldingOutlineShown",
      "info" : "SimpleName[42815-42836]:SimpleName[42815-42836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42839-43010]:Block[42839-43010]"
    }, {
      "left" : "return myEditor.getSettings().isFoldingOutlineShown() &&\n           myEditor.getFoldingModel().isFoldingEnabled() &&\n           !myEditor.isInPresentationMode();",
      "right" : "return myEditor.getSettings().isFoldingOutlineShown() &&\n           myEditor.getFoldingModel().isFoldingEnabled() &&\n           !myEditor.isInPresentationMode();",
      "info" : "ReturnStatement[42845-43006]:ReturnStatement[42845-43006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43014-43020]:Modifier[43014-43020]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[43021-43024]:PrimitiveType[43021-43024]"
    }, {
      "left" : "getLineNumberAreaWidth",
      "right" : "getLineNumberAreaWidth",
      "info" : "SimpleName[43025-43047]:SimpleName[43025-43047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43050-43150]:Block[43050-43150]"
    }, {
      "left" : "return isLineNumbersShown() ? myLineNumberAreaWidth + myAdditionalLineNumberAreaWidth : 0;",
      "right" : "return isLineNumbersShown() ? myLineNumberAreaWidth + myAdditionalLineNumberAreaWidth : 0;",
      "info" : "ReturnStatement[43056-43146]:ReturnStatement[43056-43146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43154-43160]:Modifier[43154-43160]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[43161-43164]:PrimitiveType[43161-43164]"
    }, {
      "left" : "getLineMarkerAreaWidth",
      "right" : "getLineMarkerAreaWidth",
      "info" : "SimpleName[43165-43187]:SimpleName[43165-43187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43190-43256]:Block[43190-43256]"
    }, {
      "left" : "return isLineMarkersShown() ? myLineMarkerAreaWidth : 0;",
      "right" : "return isLineMarkersShown() ? myLineMarkerAreaWidth : 0;",
      "info" : "ReturnStatement[43196-43252]:ReturnStatement[43196-43252]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43260-43266]:Modifier[43260-43266]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43267-43271]:PrimitiveType[43267-43271]"
    }, {
      "left" : "setLineNumberAreaWidthFunction",
      "right" : "setLineNumberAreaWidthFunction",
      "info" : "SimpleName[43272-43302]:SimpleName[43272-43302]"
    }, {
      "left" : "@NotNull TIntFunction calculator",
      "right" : "@NotNull TIntFunction calculator",
      "info" : "SingleVariableDeclaration[43303-43335]:SingleVariableDeclaration[43303-43335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43337-43390]:Block[43337-43390]"
    }, {
      "left" : "myLineNumberAreaWidthFunction = calculator;",
      "right" : "myLineNumberAreaWidthFunction = calculator;",
      "info" : "ExpressionStatement[43343-43386]:ExpressionStatement[43343-43386]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43394-43401]:Modifier[43394-43401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43402-43406]:PrimitiveType[43402-43406]"
    }, {
      "left" : "calcLineNumberAreaWidth",
      "right" : "calcLineNumberAreaWidth",
      "info" : "SimpleName[43407-43430]:SimpleName[43407-43430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43433-44098]:Block[43433-44098]"
    }, {
      "left" : "if (myLineNumberAreaWidthFunction == null || !isLineNumbersShown())",
      "right" : "if (myLineNumberAreaWidthFunction == null || !isLineNumbersShown())",
      "info" : "IfStatement[43439-43514]:IfStatement[43439-43514]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43507-43514]:ReturnStatement[43507-43514]"
    }, {
      "left" : "int maxLineNumber = getMaxLineNumber(myLineNumberConvertor);",
      "right" : "int maxLineNumber = getMaxLineNumber(myLineNumberConvertor);",
      "info" : "VariableDeclarationStatement[43520-43580]:VariableDeclarationStatement[43520-43580]"
    }, {
      "left" : "myLineNumberAreaWidth = myLineNumberAreaWidthFunction.execute(maxLineNumber) + GAP_BEFORE_LINE_NUMBERS + GAP_AFTER_LINE_NUMBERS;",
      "right" : "myLineNumberAreaWidth = myLineNumberAreaWidthFunction.execute(maxLineNumber) + GAP_BEFORE_LINE_NUMBERS + GAP_AFTER_LINE_NUMBERS;",
      "info" : "ExpressionStatement[43585-43713]:ExpressionStatement[43585-43713]"
    }, {
      "left" : "myAdditionalLineNumberAreaWidth = 0;",
      "right" : "myAdditionalLineNumberAreaWidth = 0;",
      "info" : "ExpressionStatement[43719-43755]:ExpressionStatement[43719-43755]"
    }, {
      "left" : "if (myAdditionalLineNumberConvertor != null)",
      "right" : "if (myAdditionalLineNumberConvertor != null)",
      "info" : "IfStatement[43760-44094]:IfStatement[43760-44094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43805-44094]:Block[43805-44094]"
    }, {
      "left" : "int maxAdditionalLineNumber = getMaxLineNumber(myAdditionalLineNumberConvertor);",
      "right" : "int maxAdditionalLineNumber = getMaxLineNumber(myAdditionalLineNumberConvertor);",
      "info" : "VariableDeclarationStatement[43813-43893]:VariableDeclarationStatement[43813-43893]"
    }, {
      "left" : "myAdditionalLineNumberAreaWidth = myLineNumberAreaWidthFunction.execute(maxAdditionalLineNumber)\n                                        + GAP_BEFORE_LINE_NUMBERS + GAP_AFTER_LINE_NUMBERS;",
      "right" : "myAdditionalLineNumberAreaWidth = myLineNumberAreaWidthFunction.execute(maxAdditionalLineNumber)\n                                        + GAP_BEFORE_LINE_NUMBERS + GAP_AFTER_LINE_NUMBERS;",
      "info" : "ExpressionStatement[43900-44088]:ExpressionStatement[43900-44088]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44102-44109]:Modifier[44102-44109]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[44110-44113]:PrimitiveType[44110-44113]"
    }, {
      "left" : "getMaxLineNumber",
      "right" : "getMaxLineNumber",
      "info" : "SimpleName[44114-44130]:SimpleName[44114-44130]"
    }, {
      "left" : "@NotNull TIntFunction convertor",
      "right" : "@NotNull TIntFunction convertor",
      "info" : "SingleVariableDeclaration[44131-44162]:SingleVariableDeclaration[44131-44162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44164-44335]:Block[44164-44335]"
    }, {
      "left" : "for (int i = endLineNumber(); i >= 0; i--)",
      "right" : "for (int i = endLineNumber(); i >= 0; i--)",
      "info" : "ForStatement[44170-44317]:ForStatement[44170-44317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44213-44317]:Block[44213-44317]"
    }, {
      "left" : "int number = convertor.execute(i);",
      "right" : "int number = convertor.execute(i);",
      "info" : "VariableDeclarationStatement[44221-44255]:VariableDeclarationStatement[44221-44255]"
    }, {
      "left" : "if (number >= 0)",
      "right" : "if (number >= 0)",
      "info" : "IfStatement[44262-44311]:IfStatement[44262-44311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44279-44311]:Block[44279-44311]"
    }, {
      "left" : "return number;",
      "right" : "return number;",
      "info" : "ReturnStatement[44289-44303]:ReturnStatement[44289-44303]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[44322-44331]:ReturnStatement[44322-44331]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[44339-44348]:MarkerAnnotation[44339-44348]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44351-44357]:Modifier[44351-44357]"
    }, {
      "left" : "EditorMouseEventArea",
      "right" : "EditorMouseEventArea",
      "info" : "SimpleType[44358-44378]:SimpleType[44358-44378]"
    }, {
      "left" : "getEditorMouseAreaByOffset",
      "right" : "getEditorMouseAreaByOffset",
      "info" : "SimpleName[44379-44405]:SimpleName[44379-44405]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[44406-44416]:SingleVariableDeclaration[44406-44416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44418-45074]:Block[44418-45074]"
    }, {
      "left" : "int x = offset - getLineNumberAreaOffset();",
      "right" : "int x = offset - getLineNumberAreaOffset();",
      "info" : "VariableDeclarationStatement[44424-44467]:VariableDeclarationStatement[44424-44467]"
    }, {
      "left" : "if (x >= 0 && (x -= getLineNumberAreaWidth()) < 0)",
      "right" : "if (x >= 0 && (x -= getLineNumberAreaWidth()) < 0)",
      "info" : "IfStatement[44473-44584]:IfStatement[44473-44584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44524-44584]:Block[44524-44584]"
    }, {
      "left" : "return EditorMouseEventArea.LINE_NUMBERS_AREA;",
      "right" : "return EditorMouseEventArea.LINE_NUMBERS_AREA;",
      "info" : "ReturnStatement[44532-44578]:ReturnStatement[44532-44578]"
    }, {
      "left" : "if (x >= 0 && (x -= getAnnotationsAreaWidth()) < 0)",
      "right" : "if (x >= 0 && (x -= getAnnotationsAreaWidth()) < 0)",
      "info" : "IfStatement[44590-44701]:IfStatement[44590-44701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44642-44701]:Block[44642-44701]"
    }, {
      "left" : "return EditorMouseEventArea.ANNOTATIONS_AREA;",
      "right" : "return EditorMouseEventArea.ANNOTATIONS_AREA;",
      "info" : "ReturnStatement[44650-44695]:ReturnStatement[44650-44695]"
    }, {
      "left" : "if (x >= 0 && (x -= myTextAnnotationExtraSize) < 0)",
      "right" : "if (x >= 0 && (x -= myTextAnnotationExtraSize) < 0)",
      "info" : "IfStatement[44707-44819]:IfStatement[44707-44819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44759-44819]:Block[44759-44819]"
    }, {
      "left" : "return EditorMouseEventArea.LINE_MARKERS_AREA;",
      "right" : "return EditorMouseEventArea.LINE_MARKERS_AREA;",
      "info" : "ReturnStatement[44767-44813]:ReturnStatement[44767-44813]"
    }, {
      "left" : "if (x >= 0 && (x -= getLineMarkerAreaWidth()) < 0)",
      "right" : "if (x >= 0 && (x -= getLineMarkerAreaWidth()) < 0)",
      "info" : "IfStatement[44825-44936]:IfStatement[44825-44936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44876-44936]:Block[44876-44936]"
    }, {
      "left" : "return EditorMouseEventArea.LINE_MARKERS_AREA;",
      "right" : "return EditorMouseEventArea.LINE_MARKERS_AREA;",
      "info" : "ReturnStatement[44884-44930]:ReturnStatement[44884-44930]"
    }, {
      "left" : "if (x >= 0 && (x - getFoldingAreaWidth()) < 0)",
      "right" : "if (x >= 0 && (x - getFoldingAreaWidth()) < 0)",
      "info" : "IfStatement[44942-45052]:IfStatement[44942-45052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44989-45052]:Block[44989-45052]"
    }, {
      "left" : "return EditorMouseEventArea.FOLDING_OUTLINE_AREA;",
      "right" : "return EditorMouseEventArea.FOLDING_OUTLINE_AREA;",
      "info" : "ReturnStatement[44997-45046]:ReturnStatement[44997-45046]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45058-45070]:ReturnStatement[45058-45070]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45078-45084]:Modifier[45078-45084]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45085-45091]:Modifier[45085-45091]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45092-45095]:PrimitiveType[45092-45095]"
    }, {
      "left" : "getLineNumberAreaOffset",
      "right" : "getLineNumberAreaOffset",
      "info" : "SimpleName[45096-45119]:SimpleName[45096-45119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45122-45141]:Block[45122-45141]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[45128-45137]:ReturnStatement[45128-45137]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45145-45151]:Modifier[45145-45151]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45152-45155]:PrimitiveType[45152-45155]"
    }, {
      "left" : "getAnnotationsAreaOffset",
      "right" : "getAnnotationsAreaOffset",
      "info" : "SimpleName[45156-45180]:SimpleName[45156-45180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45183-45253]:Block[45183-45253]"
    }, {
      "left" : "return getLineNumberAreaOffset() + getLineNumberAreaWidth();",
      "right" : "return getLineNumberAreaOffset() + getLineNumberAreaWidth();",
      "info" : "ReturnStatement[45189-45249]:ReturnStatement[45189-45249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45257-45263]:Modifier[45257-45263]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45264-45267]:PrimitiveType[45264-45267]"
    }, {
      "left" : "getAnnotationsAreaWidth",
      "right" : "getAnnotationsAreaWidth",
      "info" : "SimpleName[45268-45291]:SimpleName[45268-45291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45294-45339]:Block[45294-45339]"
    }, {
      "left" : "return myTextAnnotationGuttersSize;",
      "right" : "return myTextAnnotationGuttersSize;",
      "info" : "ReturnStatement[45300-45335]:ReturnStatement[45300-45335]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45343-45349]:Modifier[45343-45349]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45350-45353]:PrimitiveType[45350-45353]"
    }, {
      "left" : "getAnnotationsAreaWidthEx",
      "right" : "getAnnotationsAreaWidthEx",
      "info" : "SimpleName[45354-45379]:SimpleName[45354-45379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45382-45455]:Block[45382-45455]"
    }, {
      "left" : "return myTextAnnotationGuttersSize + myTextAnnotationExtraSize;",
      "right" : "return myTextAnnotationGuttersSize + myTextAnnotationExtraSize;",
      "info" : "ReturnStatement[45388-45451]:ReturnStatement[45388-45451]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45459-45468]:MarkerAnnotation[45459-45468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45471-45477]:Modifier[45471-45477]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45478-45481]:PrimitiveType[45478-45481]"
    }, {
      "left" : "getLineMarkerAreaOffset",
      "right" : "getLineMarkerAreaOffset",
      "info" : "SimpleName[45482-45505]:SimpleName[45482-45505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45508-45582]:Block[45508-45582]"
    }, {
      "left" : "return getAnnotationsAreaOffset() + getAnnotationsAreaWidthEx();",
      "right" : "return getAnnotationsAreaOffset() + getAnnotationsAreaWidthEx();",
      "info" : "ReturnStatement[45514-45578]:ReturnStatement[45514-45578]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45586-45595]:MarkerAnnotation[45586-45595]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45598-45604]:Modifier[45598-45604]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45605-45608]:PrimitiveType[45605-45608]"
    }, {
      "left" : "getLineMarkerFreePaintersAreaOffset",
      "right" : "getLineMarkerFreePaintersAreaOffset",
      "info" : "SimpleName[45609-45644]:SimpleName[45609-45644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45647-45752]:Block[45647-45752]"
    }, {
      "left" : "return getLineMarkerAreaOffset() + myIconsAreaWidth + GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA;",
      "right" : "return getLineMarkerAreaOffset() + myIconsAreaWidth + GAP_BETWEEN_ICONS_AND_FREE_PAINTERS_AREA;",
      "info" : "ReturnStatement[45653-45748]:ReturnStatement[45653-45748]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45758-45767]:MarkerAnnotation[45758-45767]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45770-45776]:Modifier[45770-45776]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45777-45780]:PrimitiveType[45777-45780]"
    }, {
      "left" : "getIconsAreaWidth",
      "right" : "getIconsAreaWidth",
      "info" : "SimpleName[45781-45798]:SimpleName[45781-45798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45801-45835]:Block[45801-45835]"
    }, {
      "left" : "return myIconsAreaWidth;",
      "right" : "return myIconsAreaWidth;",
      "info" : "ReturnStatement[45807-45831]:ReturnStatement[45807-45831]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45839-45846]:Modifier[45839-45846]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45847-45854]:PrimitiveType[45847-45854]"
    }, {
      "left" : "isMirrored",
      "right" : "isMirrored",
      "info" : "SimpleName[45855-45865]:SimpleName[45855-45865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45868-45965]:Block[45868-45965]"
    }, {
      "left" : "return myEditor.getVerticalScrollbarOrientation() != EditorEx.VERTICAL_SCROLLBAR_RIGHT;",
      "right" : "return myEditor.getVerticalScrollbarOrientation() != EditorEx.VERTICAL_SCROLLBAR_RIGHT;",
      "info" : "ReturnStatement[45874-45961]:ReturnStatement[45874-45961]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[45969-45978]:MarkerAnnotation[45969-45978]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45981-45990]:MarkerAnnotation[45981-45990]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45993-45999]:Modifier[45993-45999]"
    }, {
      "left" : "FoldRegion",
      "right" : "FoldRegion",
      "info" : "SimpleType[46000-46010]:SimpleType[46000-46010]"
    }, {
      "left" : "findFoldingAnchorAt",
      "right" : "findFoldingAnchorAt",
      "info" : "SimpleName[46011-46030]:SimpleName[46011-46030]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[46031-46036]:SingleVariableDeclaration[46031-46036]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[46038-46043]:SingleVariableDeclaration[46038-46043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46045-46866]:Block[46045-46866]"
    }, {
      "left" : "if (!myEditor.getSettings().isFoldingOutlineShown())",
      "right" : "if (!myEditor.getSettings().isFoldingOutlineShown())",
      "info" : "IfStatement[46051-46116]:IfStatement[46051-46116]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46104-46116]:ReturnStatement[46104-46116]"
    }, {
      "left" : "int anchorX = getFoldingAreaOffset();",
      "right" : "int anchorX = getFoldingAreaOffset();",
      "info" : "VariableDeclarationStatement[46122-46159]:VariableDeclarationStatement[46122-46159]"
    }, {
      "left" : "int anchorWidth = getFoldingAnchorWidth();",
      "right" : "int anchorWidth = getFoldingAnchorWidth();",
      "info" : "VariableDeclarationStatement[46164-46206]:VariableDeclarationStatement[46164-46206]"
    }, {
      "left" : "int neighbourhoodStartOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, y - myEditor.getLineHeight())));",
      "right" : "int neighbourhoodStartOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, y - myEditor.getLineHeight())));",
      "info" : "VariableDeclarationStatement[46212-46350]:VariableDeclarationStatement[46212-46350]"
    }, {
      "left" : "int neighbourhoodEndOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, y + myEditor.getLineHeight())));",
      "right" : "int neighbourhoodEndOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, y + myEditor.getLineHeight())));",
      "info" : "VariableDeclarationStatement[46355-46491]:VariableDeclarationStatement[46355-46491]"
    }, {
      "left" : "Collection<DisplayedFoldingAnchor> displayedAnchors = myAnchorsDisplayStrategy.getAnchorsToDisplay(neighbourhoodStartOffset, neighbourhoodEndOffset, null);",
      "right" : "Collection<DisplayedFoldingAnchor> displayedAnchors = myAnchorsDisplayStrategy.getAnchorsToDisplay(neighbourhoodStartOffset, neighbourhoodEndOffset, null);",
      "info" : "VariableDeclarationStatement[46497-46652]:VariableDeclarationStatement[46497-46652]"
    }, {
      "left" : "for (DisplayedFoldingAnchor anchor : displayedAnchors)",
      "right" : "for (DisplayedFoldingAnchor anchor : displayedAnchors)",
      "info" : "EnhancedForStatement[46657-46844]:EnhancedForStatement[46657-46844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46712-46844]:Block[46712-46844]"
    }, {
      "left" : "if (rectangleByFoldOffset(anchor.visualLine, anchorWidth, anchorX).contains(convertX(x), y))",
      "right" : "if (rectangleByFoldOffset(anchor.visualLine, anchorWidth, anchorX).contains(convertX(x), y))",
      "info" : "IfStatement[46720-46838]:IfStatement[46720-46838]"
    }, {
      "left" : "return anchor.foldRegion;",
      "right" : "return anchor.foldRegion;",
      "info" : "ReturnStatement[46813-46838]:ReturnStatement[46813-46838]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46850-46862]:ReturnStatement[46850-46862]"
    }, {
      "left" : "@SuppressWarnings(\"SuspiciousNameCombination\")",
      "right" : "@SuppressWarnings(\"SuspiciousNameCombination\")",
      "info" : "SingleMemberAnnotation[46870-46916]:SingleMemberAnnotation[46870-46916]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46919-46926]:Modifier[46919-46926]"
    }, {
      "left" : "Rectangle",
      "right" : "Rectangle",
      "info" : "SimpleType[46927-46936]:SimpleType[46927-46936]"
    }, {
      "left" : "rectangleByFoldOffset",
      "right" : "rectangleByFoldOffset",
      "info" : "SimpleName[46937-46958]:SimpleName[46937-46958]"
    }, {
      "left" : "int foldStart",
      "right" : "int foldStart",
      "info" : "SingleVariableDeclaration[46959-46972]:SingleVariableDeclaration[46959-46972]"
    }, {
      "left" : "int anchorWidth",
      "right" : "int anchorWidth",
      "info" : "SingleVariableDeclaration[46974-46989]:SingleVariableDeclaration[46974-46989]"
    }, {
      "left" : "int anchorX",
      "right" : "int anchorX",
      "info" : "SingleVariableDeclaration[46991-47002]:SingleVariableDeclaration[46991-47002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47004-47216]:Block[47004-47216]"
    }, {
      "left" : "int anchorY = myEditor.visibleLineToY(foldStart) + myEditor.getLineHeight() -\n                  myEditor.getDescent() - anchorWidth;",
      "right" : "int anchorY = myEditor.visibleLineToY(foldStart) + myEditor.getLineHeight() -\n                  myEditor.getDescent() - anchorWidth;",
      "info" : "VariableDeclarationStatement[47010-47142]:VariableDeclarationStatement[47010-47142]"
    }, {
      "left" : "return new Rectangle(anchorX, anchorY, anchorWidth, anchorWidth);",
      "right" : "return new Rectangle(anchorX, anchorY, anchorWidth, anchorWidth);",
      "info" : "ReturnStatement[47147-47212]:ReturnStatement[47147-47212]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47220-47229]:MarkerAnnotation[47220-47229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47232-47238]:Modifier[47232-47238]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47239-47243]:PrimitiveType[47239-47243]"
    }, {
      "left" : "mouseDragged",
      "right" : "mouseDragged",
      "info" : "SimpleName[47244-47256]:SimpleName[47244-47256]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[47257-47269]:SingleVariableDeclaration[47257-47269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47271-47330]:Block[47271-47330]"
    }, {
      "left" : "TooltipController.getInstance().cancelTooltips();",
      "right" : "TooltipController.getInstance().cancelTooltips();",
      "info" : "ExpressionStatement[47277-47326]:ExpressionStatement[47277-47326]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47334-47343]:MarkerAnnotation[47334-47343]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47346-47352]:Modifier[47346-47352]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47353-47357]:PrimitiveType[47353-47357]"
    }, {
      "left" : "mouseMoved",
      "right" : "mouseMoved",
      "info" : "SimpleName[47358-47368]:SimpleName[47358-47368]"
    }, {
      "left" : "final MouseEvent e",
      "right" : "final MouseEvent e",
      "info" : "SingleVariableDeclaration[47369-47387]:SingleVariableDeclaration[47369-47387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47389-49800]:Block[47389-49800]"
    }, {
      "left" : "String toolTip = null;",
      "right" : "String toolTip = null;",
      "info" : "VariableDeclarationStatement[47395-47417]:VariableDeclarationStatement[47395-47417]"
    }, {
      "left" : "final GutterIconRenderer renderer = getGutterRenderer(e);",
      "right" : "final GutterIconRenderer renderer = getGutterRenderer(e);",
      "info" : "VariableDeclarationStatement[47422-47479]:VariableDeclarationStatement[47422-47479]"
    }, {
      "left" : "TooltipController controller = TooltipController.getInstance();",
      "right" : "TooltipController controller = TooltipController.getInstance();",
      "info" : "VariableDeclarationStatement[47484-47547]:VariableDeclarationStatement[47484-47547]"
    }, {
      "left" : "if (renderer != null)",
      "right" : "if (renderer != null)",
      "info" : "IfStatement[47552-48188]:IfStatement[47552-48188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47574-47624]:Block[47574-47624]"
    }, {
      "left" : "toolTip = renderer.getTooltipText();",
      "right" : "toolTip = renderer.getTooltipText();",
      "info" : "ExpressionStatement[47582-47618]:ExpressionStatement[47582-47618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47634-48188]:Block[47634-48188]"
    }, {
      "left" : "ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e);",
      "right" : "ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e);",
      "info" : "VariableDeclarationStatement[47642-47711]:VariableDeclarationStatement[47642-47711]"
    }, {
      "left" : "if (lineRenderer == null)",
      "right" : "if (lineRenderer == null)",
      "info" : "IfStatement[47718-48182]:IfStatement[47718-48182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47744-48182]:Block[47744-48182]"
    }, {
      "left" : "TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint());",
      "right" : "TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint());",
      "info" : "VariableDeclarationStatement[47754-47827]:VariableDeclarationStatement[47754-47827]"
    }, {
      "left" : "if (provider != null)",
      "right" : "if (provider != null)",
      "info" : "IfStatement[47836-48174]:IfStatement[47836-48174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47858-48174]:Block[47858-48174]"
    }, {
      "left" : "final int line = getLineNumAtPoint(e.getPoint());",
      "right" : "final int line = getLineNumAtPoint(e.getPoint());",
      "info" : "VariableDeclarationStatement[47870-47919]:VariableDeclarationStatement[47870-47919]"
    }, {
      "left" : "toolTip = provider.getToolTip(line, myEditor);",
      "right" : "toolTip = provider.getToolTip(line, myEditor);",
      "info" : "ExpressionStatement[47930-47976]:ExpressionStatement[47930-47976]"
    }, {
      "left" : "if (!Comparing.equal(toolTip, myLastGutterToolTip))",
      "right" : "if (!Comparing.equal(toolTip, myLastGutterToolTip))",
      "info" : "IfStatement[47987-48164]:IfStatement[47987-48164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48039-48164]:Block[48039-48164]"
    }, {
      "left" : "controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, true);",
      "right" : "controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, true);",
      "info" : "ExpressionStatement[48053-48109]:ExpressionStatement[48053-48109]"
    }, {
      "left" : "myLastGutterToolTip = toolTip;",
      "right" : "myLastGutterToolTip = toolTip;",
      "info" : "ExpressionStatement[48122-48152]:ExpressionStatement[48122-48152]"
    }, {
      "left" : "if (toolTip != null && !toolTip.isEmpty())",
      "right" : "if (toolTip != null && !toolTip.isEmpty())",
      "info" : "IfStatement[48194-49796]:IfStatement[48194-49796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48237-49715]:Block[48237-49715]"
    }, {
      "left" : "final Ref<Point> t = new Ref<Point>(e.getPoint());",
      "right" : "final Ref<Point> t = new Ref<Point>(e.getPoint());",
      "info" : "VariableDeclarationStatement[48245-48295]:VariableDeclarationStatement[48245-48295]"
    }, {
      "left" : "int line = EditorUtil.yPositionToLogicalLine(myEditor, e);",
      "right" : "int line = EditorUtil.yPositionToLogicalLine(myEditor, e);",
      "info" : "VariableDeclarationStatement[48302-48360]:VariableDeclarationStatement[48302-48360]"
    }, {
      "left" : "List<GutterMark> row = myLineToGutterRenderers.get(line);",
      "right" : "List<GutterMark> row = myLineToGutterRenderers.get(line);",
      "info" : "VariableDeclarationStatement[48367-48424]:VariableDeclarationStatement[48367-48424]"
    }, {
      "left" : "Balloon.Position ballPosition = Balloon.Position.atRight;",
      "right" : "Balloon.Position ballPosition = Balloon.Position.atRight;",
      "info" : "VariableDeclarationStatement[48431-48488]:VariableDeclarationStatement[48431-48488]"
    }, {
      "left" : "if (row != null)",
      "right" : "if (row != null)",
      "info" : "IfStatement[48495-49310]:IfStatement[48495-49310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48512-49310]:Block[48512-49310]"
    }, {
      "left" : "final TreeMap<Integer, GutterMark> xPos = new TreeMap<Integer, GutterMark>();",
      "right" : "final TreeMap<Integer, GutterMark> xPos = new TreeMap<Integer, GutterMark>();",
      "info" : "VariableDeclarationStatement[48522-48599]:VariableDeclarationStatement[48522-48599]"
    }, {
      "left" : "final int[] currentPos = {0};",
      "right" : "final int[] currentPos = {0};",
      "info" : "VariableDeclarationStatement[48608-48637]:VariableDeclarationStatement[48608-48637]"
    }, {
      "left" : "processIconsRow(line, row, new LineGutterIconRendererProcessor() {\n          @Override\n          public void process(int x, int y, GutterMark r) {\n            xPos.put(x, r);\n            if (renderer == r && r != null) {\n              currentPos[0] = x;\n              Icon icon = scaleIcon(r.getIcon());\n              t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2));\n            }\n          }\n        });",
      "right" : "processIconsRow(line, row, new LineGutterIconRendererProcessor() {\n          @Override\n          public void process(int x, int y, GutterMark r) {\n            xPos.put(x, r);\n            if (renderer == r && r != null) {\n              currentPos[0] = x;\n              Icon icon = scaleIcon(r.getIcon());\n              t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2));\n            }\n          }\n        });",
      "info" : "ExpressionStatement[48646-49078]:ExpressionStatement[48646-49078]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48723-48732]:MarkerAnnotation[48723-48732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48743-48749]:Modifier[48743-48749]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48750-48754]:PrimitiveType[48750-48754]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[48755-48762]:SimpleName[48755-48762]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[48763-48768]:SingleVariableDeclaration[48763-48768]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[48770-48775]:SingleVariableDeclaration[48770-48775]"
    }, {
      "left" : "GutterMark r",
      "right" : "GutterMark r",
      "info" : "SingleVariableDeclaration[48777-48789]:SingleVariableDeclaration[48777-48789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48791-49066]:Block[48791-49066]"
    }, {
      "left" : "xPos.put(x, r);",
      "right" : "xPos.put(x, r);",
      "info" : "ExpressionStatement[48805-48820]:ExpressionStatement[48805-48820]"
    }, {
      "left" : "if (renderer == r && r != null)",
      "right" : "if (renderer == r && r != null)",
      "info" : "IfStatement[48833-49054]:IfStatement[48833-49054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48865-49054]:Block[48865-49054]"
    }, {
      "left" : "currentPos[0] = x;",
      "right" : "currentPos[0] = x;",
      "info" : "ExpressionStatement[48881-48899]:ExpressionStatement[48881-48899]"
    }, {
      "left" : "Icon icon = scaleIcon(r.getIcon());",
      "right" : "Icon icon = scaleIcon(r.getIcon());",
      "info" : "VariableDeclarationStatement[48914-48949]:VariableDeclarationStatement[48914-48949]"
    }, {
      "left" : "t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2));",
      "right" : "t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2));",
      "info" : "ExpressionStatement[48964-49040]:ExpressionStatement[48964-49040]"
    }, {
      "left" : "List<Integer> xx = new ArrayList<Integer>(xPos.keySet());",
      "right" : "List<Integer> xx = new ArrayList<Integer>(xPos.keySet());",
      "info" : "VariableDeclarationStatement[49088-49145]:VariableDeclarationStatement[49088-49145]"
    }, {
      "left" : "int posIndex = xx.indexOf(currentPos[0]);",
      "right" : "int posIndex = xx.indexOf(currentPos[0]);",
      "info" : "VariableDeclarationStatement[49154-49195]:VariableDeclarationStatement[49154-49195]"
    }, {
      "left" : "if (xPos.size() > 1 && posIndex == 0)",
      "right" : "if (xPos.size() > 1 && posIndex == 0)",
      "info" : "IfStatement[49204-49302]:IfStatement[49204-49302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49242-49302]:Block[49242-49302]"
    }, {
      "left" : "ballPosition = Balloon.Position.below;",
      "right" : "ballPosition = Balloon.Position.below;",
      "info" : "ExpressionStatement[49254-49292]:ExpressionStatement[49254-49292]"
    }, {
      "left" : "RelativePoint showPoint = new RelativePoint(this, t.get());",
      "right" : "RelativePoint showPoint = new RelativePoint(this, t.get());",
      "info" : "VariableDeclarationStatement[49318-49377]:VariableDeclarationStatement[49318-49377]"
    }, {
      "left" : "controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel)myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP,\n                                        new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition));",
      "right" : "controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel)myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP,\n                                        new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition));",
      "info" : "ExpressionStatement[49385-49709]:ExpressionStatement[49385-49709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49725-49796]:Block[49725-49796]"
    }, {
      "left" : "controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, false);",
      "right" : "controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, false);",
      "info" : "ExpressionStatement[49733-49790]:ExpressionStatement[49733-49790]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49804-49808]:PrimitiveType[49804-49808]"
    }, {
      "left" : "validateMousePointer",
      "right" : "validateMousePointer",
      "info" : "SimpleName[49809-49829]:SimpleName[49809-49829]"
    }, {
      "left" : "@NotNull MouseEvent e",
      "right" : "@NotNull MouseEvent e",
      "info" : "SingleVariableDeclaration[49830-49851]:SingleVariableDeclaration[49830-49851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49853-51022]:Block[49853-51022]"
    }, {
      "left" : "Cursor cursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);",
      "right" : "Cursor cursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);",
      "info" : "VariableDeclarationStatement[49859-49925]:VariableDeclarationStatement[49859-49925]"
    }, {
      "left" : "FoldRegion foldingAtCursor = findFoldingAnchorAt(e.getX(), e.getY());",
      "right" : "FoldRegion foldingAtCursor = findFoldingAnchorAt(e.getX(), e.getY());",
      "info" : "VariableDeclarationStatement[49930-49999]:VariableDeclarationStatement[49930-49999]"
    }, {
      "left" : "setActiveFoldRegion(foldingAtCursor);",
      "right" : "setActiveFoldRegion(foldingAtCursor);",
      "info" : "ExpressionStatement[50004-50041]:ExpressionStatement[50004-50041]"
    }, {
      "left" : "if (foldingAtCursor != null)",
      "right" : "if (foldingAtCursor != null)",
      "info" : "IfStatement[50046-50145]:IfStatement[50046-50145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50075-50145]:Block[50075-50145]"
    }, {
      "left" : "cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
      "right" : "cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
      "info" : "ExpressionStatement[50083-50139]:ExpressionStatement[50083-50139]"
    }, {
      "left" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "right" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "info" : "VariableDeclarationStatement[50150-50201]:VariableDeclarationStatement[50150-50201]"
    }, {
      "left" : "if (renderer != null)",
      "right" : "if (renderer != null)",
      "info" : "IfStatement[50206-50995]:IfStatement[50206-50995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50228-50349]:Block[50228-50349]"
    }, {
      "left" : "if (renderer.isNavigateAction())",
      "right" : "if (renderer.isNavigateAction())",
      "info" : "IfStatement[50236-50343]:IfStatement[50236-50343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50269-50343]:Block[50269-50343]"
    }, {
      "left" : "cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
      "right" : "cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
      "info" : "ExpressionStatement[50279-50335]:ExpressionStatement[50279-50335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50359-50995]:Block[50359-50995]"
    }, {
      "left" : "ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e);",
      "right" : "ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e);",
      "info" : "VariableDeclarationStatement[50367-50436]:VariableDeclarationStatement[50367-50436]"
    }, {
      "left" : "if (lineRenderer != null)",
      "right" : "if (lineRenderer != null)",
      "info" : "IfStatement[50443-50989]:IfStatement[50443-50989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50469-50543]:Block[50469-50543]"
    }, {
      "left" : "cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
      "right" : "cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);",
      "info" : "ExpressionStatement[50479-50535]:ExpressionStatement[50479-50535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50555-50989]:Block[50555-50989]"
    }, {
      "left" : "TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint());",
      "right" : "TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint());",
      "info" : "VariableDeclarationStatement[50565-50638]:VariableDeclarationStatement[50565-50638]"
    }, {
      "left" : "if (provider != null)",
      "right" : "if (provider != null)",
      "info" : "IfStatement[50647-50981]:IfStatement[50647-50981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50669-50981]:Block[50669-50981]"
    }, {
      "left" : "if (myProviderToListener.containsKey(provider))",
      "right" : "if (myProviderToListener.containsKey(provider))",
      "info" : "IfStatement[50681-50971]:IfStatement[50681-50971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50729-50971]:Block[50729-50971]"
    }, {
      "left" : "EditorGutterAction action = myProviderToListener.get(provider);",
      "right" : "EditorGutterAction action = myProviderToListener.get(provider);",
      "info" : "VariableDeclarationStatement[50743-50806]:VariableDeclarationStatement[50743-50806]"
    }, {
      "left" : "if (action != null)",
      "right" : "if (action != null)",
      "info" : "IfStatement[50819-50959]:IfStatement[50819-50959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50839-50959]:Block[50839-50959]"
    }, {
      "left" : "int line = getLineNumAtPoint(e.getPoint());",
      "right" : "int line = getLineNumAtPoint(e.getPoint());",
      "info" : "VariableDeclarationStatement[50855-50898]:VariableDeclarationStatement[50855-50898]"
    }, {
      "left" : "cursor = action.getCursor(line);",
      "right" : "cursor = action.getCursor(line);",
      "info" : "ExpressionStatement[50913-50945]:ExpressionStatement[50913-50945]"
    }, {
      "left" : "setCursor(cursor);",
      "right" : "setCursor(cursor);",
      "info" : "ExpressionStatement[51000-51018]:ExpressionStatement[51000-51018]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51026-51035]:MarkerAnnotation[51026-51035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51038-51044]:Modifier[51038-51044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51045-51049]:PrimitiveType[51045-51049]"
    }, {
      "left" : "mouseClicked",
      "right" : "mouseClicked",
      "info" : "SimpleName[51050-51062]:SimpleName[51050-51062]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[51063-51075]:SingleVariableDeclaration[51063-51075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51077-51140]:Block[51077-51140]"
    }, {
      "left" : "if (e.isPopupTrigger())",
      "right" : "if (e.isPopupTrigger())",
      "info" : "IfStatement[51083-51136]:IfStatement[51083-51136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51107-51136]:Block[51107-51136]"
    }, {
      "left" : "invokePopup(e);",
      "right" : "invokePopup(e);",
      "info" : "ExpressionStatement[51115-51130]:ExpressionStatement[51115-51130]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51144-51151]:Modifier[51144-51151]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51152-51156]:PrimitiveType[51152-51156]"
    }, {
      "left" : "fireEventToTextAnnotationListeners",
      "right" : "fireEventToTextAnnotationListeners",
      "info" : "SimpleName[51157-51191]:SimpleName[51157-51191]"
    }, {
      "left" : "final MouseEvent e",
      "right" : "final MouseEvent e",
      "info" : "SingleVariableDeclaration[51192-51210]:SingleVariableDeclaration[51192-51210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51212-51805]:Block[51212-51805]"
    }, {
      "left" : "if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA)",
      "right" : "if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA)",
      "info" : "IfStatement[51218-51801]:IfStatement[51218-51801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51294-51801]:Block[51294-51801]"
    }, {
      "left" : "final Point clickPoint = e.getPoint();",
      "right" : "final Point clickPoint = e.getPoint();",
      "info" : "VariableDeclarationStatement[51302-51340]:VariableDeclarationStatement[51302-51340]"
    }, {
      "left" : "final TextAnnotationGutterProvider provider = getProviderAtPoint(clickPoint);",
      "right" : "final TextAnnotationGutterProvider provider = getProviderAtPoint(clickPoint);",
      "info" : "VariableDeclarationStatement[51348-51425]:VariableDeclarationStatement[51348-51425]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[51433-51480]:IfStatement[51433-51480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51455-51480]:Block[51455-51480]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[51465-51472]:ReturnStatement[51465-51472]"
    }, {
      "left" : "if (myProviderToListener.containsKey(provider))",
      "right" : "if (myProviderToListener.containsKey(provider))",
      "info" : "IfStatement[51488-51795]:IfStatement[51488-51795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51536-51795]:Block[51536-51795]"
    }, {
      "left" : "int line = getLineNumAtPoint(clickPoint);",
      "right" : "int line = getLineNumAtPoint(clickPoint);",
      "info" : "VariableDeclarationStatement[51546-51587]:VariableDeclarationStatement[51546-51587]"
    }, {
      "left" : "if (line >= 0 && line < myEditor.getDocument().getLineCount() && UIUtil.isActionClick(e, MouseEvent.MOUSE_RELEASED))",
      "right" : "if (line >= 0 && line < myEditor.getDocument().getLineCount() && UIUtil.isActionClick(e, MouseEvent.MOUSE_RELEASED))",
      "info" : "IfStatement[51597-51786]:IfStatement[51597-51786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51714-51786]:Block[51714-51786]"
    }, {
      "left" : "myProviderToListener.get(provider).doAction(line);",
      "right" : "myProviderToListener.get(provider).doAction(line);",
      "info" : "ExpressionStatement[51726-51776]:ExpressionStatement[51726-51776]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51809-51816]:Modifier[51809-51816]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[51817-51820]:PrimitiveType[51817-51820]"
    }, {
      "left" : "getLineNumAtPoint",
      "right" : "getLineNumAtPoint",
      "info" : "SimpleName[51821-51838]:SimpleName[51821-51838]"
    }, {
      "left" : "final Point clickPoint",
      "right" : "final Point clickPoint",
      "info" : "SingleVariableDeclaration[51839-51861]:SingleVariableDeclaration[51839-51861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51863-51936]:Block[51863-51936]"
    }, {
      "left" : "return EditorUtil.yPositionToLogicalLine(myEditor, clickPoint);",
      "right" : "return EditorUtil.yPositionToLogicalLine(myEditor, clickPoint);",
      "info" : "ReturnStatement[51869-51932]:ReturnStatement[51869-51932]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[51940-51949]:MarkerAnnotation[51940-51949]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51952-51959]:Modifier[51952-51959]"
    }, {
      "left" : "TextAnnotationGutterProvider",
      "right" : "TextAnnotationGutterProvider",
      "info" : "SimpleType[51960-51988]:SimpleType[51960-51988]"
    }, {
      "left" : "getProviderAtPoint",
      "right" : "getProviderAtPoint",
      "info" : "SimpleName[51989-52007]:SimpleName[51989-52007]"
    }, {
      "left" : "final Point clickPoint",
      "right" : "final Point clickPoint",
      "info" : "SingleVariableDeclaration[52008-52030]:SingleVariableDeclaration[52008-52030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52032-52346]:Block[52032-52346]"
    }, {
      "left" : "int current = getAnnotationsAreaOffset();",
      "right" : "int current = getAnnotationsAreaOffset();",
      "info" : "VariableDeclarationStatement[52038-52079]:VariableDeclarationStatement[52038-52079]"
    }, {
      "left" : "if (clickPoint.x < current)",
      "right" : "if (clickPoint.x < current)",
      "info" : "IfStatement[52084-52124]:IfStatement[52084-52124]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[52112-52124]:ReturnStatement[52112-52124]"
    }, {
      "left" : "for (int i = 0; i < myTextAnnotationGutterSizes.size(); i++)",
      "right" : "for (int i = 0; i < myTextAnnotationGutterSizes.size(); i++)",
      "info" : "ForStatement[52129-52324]:ForStatement[52129-52324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52190-52324]:Block[52190-52324]"
    }, {
      "left" : "current += myTextAnnotationGutterSizes.get(i);",
      "right" : "current += myTextAnnotationGutterSizes.get(i);",
      "info" : "ExpressionStatement[52198-52244]:ExpressionStatement[52198-52244]"
    }, {
      "left" : "if (clickPoint.x <= current)",
      "right" : "if (clickPoint.x <= current)",
      "info" : "IfStatement[52251-52318]:IfStatement[52251-52318]"
    }, {
      "left" : "return myTextAnnotationGutters.get(i);",
      "right" : "return myTextAnnotationGutters.get(i);",
      "info" : "ReturnStatement[52280-52318]:ReturnStatement[52280-52318]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[52330-52342]:ReturnStatement[52330-52342]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52350-52359]:MarkerAnnotation[52350-52359]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52362-52368]:Modifier[52362-52368]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52369-52373]:PrimitiveType[52369-52373]"
    }, {
      "left" : "mousePressed",
      "right" : "mousePressed",
      "info" : "SimpleName[52374-52386]:SimpleName[52374-52386]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[52387-52399]:SingleVariableDeclaration[52387-52399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52401-52548]:Block[52401-52548]"
    }, {
      "left" : "if (e.isPopupTrigger() || isPopupAction(e))",
      "right" : "if (e.isPopupTrigger() || isPopupAction(e))",
      "info" : "IfStatement[52407-52544]:IfStatement[52407-52544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52451-52480]:Block[52451-52480]"
    }, {
      "left" : "invokePopup(e);",
      "right" : "invokePopup(e);",
      "info" : "ExpressionStatement[52459-52474]:ExpressionStatement[52459-52474]"
    }, {
      "left" : "if (UIUtil.isCloseClick(e))",
      "right" : "if (UIUtil.isCloseClick(e))",
      "info" : "IfStatement[52486-52544]:IfStatement[52486-52544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52514-52544]:Block[52514-52544]"
    }, {
      "left" : "processClose(e);",
      "right" : "processClose(e);",
      "info" : "ExpressionStatement[52522-52538]:ExpressionStatement[52522-52538]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52552-52559]:Modifier[52552-52559]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52560-52567]:PrimitiveType[52560-52567]"
    }, {
      "left" : "isPopupAction",
      "right" : "isPopupAction",
      "info" : "SimpleName[52568-52581]:SimpleName[52568-52581]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[52582-52594]:SingleVariableDeclaration[52582-52594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52596-52765]:Block[52596-52833]"
    }, {
      "left" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "right" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "info" : "VariableDeclarationStatement[52602-52653]:VariableDeclarationStatement[52602-52653]"
    }, {
      "left" : "return renderer != null && renderer.getClickAction() == null && renderer.getPopupMenuActions() != null;",
      "right" : "return renderer != null && !isNavigationBlocked(renderer, myEditor.getProject()) &&\n           renderer.getClickAction() == null && renderer.getPopupMenuActions() != null;",
      "info" : "ReturnStatement[52658-52761]:ReturnStatement[52658-52829]"
    }, {
      "left" : "renderer",
      "right" : "renderer",
      "info" : "SimpleName[52665-52673]:SimpleName[52665-52673]"
    }, {
      "left" : "renderer != null && renderer.getClickAction() == null",
      "right" : "renderer != null && !isNavigationBlocked(renderer, myEditor.getProject())",
      "info" : "InfixExpression[52665-52718]:InfixExpression[52665-52738]"
    }, {
      "left" : "!=",
      "right" : "&&",
      "info" : "INFIX_EXPRESSION_OPERATOR[52674-52676]:INFIX_EXPRESSION_OPERATOR[52682-52684]"
    }, {
      "left" : "null",
      "right" : "null",
      "info" : "NullLiteral[52677-52681]:NullLiteral[52677-52681]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52769-52778]:MarkerAnnotation[52837-52846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52781-52787]:Modifier[52849-52855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52788-52792]:PrimitiveType[52856-52860]"
    }, {
      "left" : "mouseReleased",
      "right" : "mouseReleased",
      "info" : "SimpleName[52793-52806]:SimpleName[52861-52874]"
    }, {
      "left" : "final MouseEvent e",
      "right" : "final MouseEvent e",
      "info" : "SingleVariableDeclaration[52807-52825]:SingleVariableDeclaration[52875-52893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52827-54118]:Block[52895-54140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52827-54118]:Block[54253-54355]"
    }, {
      "left" : "if (e.isPopupTrigger())",
      "right" : "if (e.isPopupTrigger())",
      "info" : "IfStatement[52833-52900]:IfStatement[52901-52968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52857-52900]:Block[52925-52968]"
    }, {
      "left" : "invokePopup(e);",
      "right" : "invokePopup(e);",
      "info" : "ExpressionStatement[52865-52880]:ExpressionStatement[52933-52948]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[52887-52894]:ReturnStatement[52955-52962]"
    }, {
      "left" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "right" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "info" : "VariableDeclarationStatement[52906-52957]:VariableDeclarationStatement[52974-53025]"
    }, {
      "left" : "final Project project = myEditor.getProject();",
      "right" : "final Project project = myEditor.getProject();",
      "info" : "VariableDeclarationStatement[52962-53008]:VariableDeclarationStatement[53030-53076]"
    }, {
      "left" : "if (project != null && DumbService.isDumb(project) && !DumbService.isDumbAware(renderer))",
      "right" : "if (isNavigationBlocked(renderer, project))",
      "info" : "IfStatement[53013-53236]:IfStatement[53081-53258]"
    }, {
      "left" : "project != null && DumbService.isDumb(project) && !DumbService.isDumbAware(renderer)",
      "right" : "project != null && DumbService.isDumb(project) && !DumbService.isDumbAware(renderer)",
      "info" : "InfixExpression[53017-53101]:InfixExpression[54266-54350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53103-53236]:Block[53125-53258]"
    }, {
      "left" : "DumbService.getInstance(project).showDumbModeNotification(\"Navigation is not available during indexing\");",
      "right" : "DumbService.getInstance(project).showDumbModeNotification(\"Navigation is not available during indexing\");",
      "info" : "ExpressionStatement[53111-53216]:ExpressionStatement[53133-53238]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53223-53230]:ReturnStatement[53245-53252]"
    }, {
      "left" : "AnAction clickAction = null;",
      "right" : "AnAction clickAction = null;",
      "info" : "VariableDeclarationStatement[53246-53274]:VariableDeclarationStatement[53268-53296]"
    }, {
      "left" : "if (renderer != null && e.getButton() < 4)",
      "right" : "if (renderer != null && e.getButton() < 4)",
      "info" : "IfStatement[53279-53507]:IfStatement[53301-53529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53322-53507]:Block[53344-53529]"
    }, {
      "left" : "clickAction = (InputEvent.BUTTON2_MASK & e.getModifiers()) > 0\n                    ? renderer.getMiddleButtonClickAction()\n                    : renderer.getClickAction();",
      "right" : "clickAction = (InputEvent.BUTTON2_MASK & e.getModifiers()) > 0\n                    ? renderer.getMiddleButtonClickAction()\n                    : renderer.getClickAction();",
      "info" : "ExpressionStatement[53330-53501]:ExpressionStatement[53352-53523]"
    }, {
      "left" : "if (clickAction != null)",
      "right" : "if (clickAction != null)",
      "info" : "IfStatement[53512-54114]:IfStatement[53534-54136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53537-53873]:Block[53559-53895]"
    }, {
      "left" : "clickAction.actionPerformed(new AnActionEvent(e, myEditor.getDataContext(), \"ICON_NAVIGATION\", clickAction.getTemplatePresentation(),\n                                                    ActionManager.getInstance(),\n                                                    e.getModifiers()));",
      "right" : "clickAction.actionPerformed(new AnActionEvent(e, myEditor.getDataContext(), \"ICON_NAVIGATION\", clickAction.getTemplatePresentation(),\n                                                    ActionManager.getInstance(),\n                                                    e.getModifiers()));",
      "info" : "ExpressionStatement[53545-53831]:ExpressionStatement[53567-53853]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[53838-53850]:ExpressionStatement[53860-53872]"
    }, {
      "left" : "repaint();",
      "right" : "repaint();",
      "info" : "ExpressionStatement[53857-53867]:ExpressionStatement[53879-53889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53883-54114]:Block[53905-54136]"
    }, {
      "left" : "ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e);",
      "right" : "ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e);",
      "info" : "VariableDeclarationStatement[53891-53960]:VariableDeclarationStatement[53913-53982]"
    }, {
      "left" : "if (lineRenderer != null)",
      "right" : "if (lineRenderer != null)",
      "info" : "IfStatement[53967-54108]:IfStatement[53989-54130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53993-54046]:Block[54015-54068]"
    }, {
      "left" : "lineRenderer.doAction(myEditor, e);",
      "right" : "lineRenderer.doAction(myEditor, e);",
      "info" : "ExpressionStatement[54003-54038]:ExpressionStatement[54025-54060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54052-54108]:Block[54074-54130]"
    }, {
      "left" : "fireEventToTextAnnotationListeners(e);",
      "right" : "fireEventToTextAnnotationListeners(e);",
      "info" : "ExpressionStatement[54062-54100]:ExpressionStatement[54084-54122]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[54122-54131]:MarkerAnnotation[54359-54368]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54134-54141]:Modifier[54371-54378]"
    }, {
      "left" : "ActiveGutterRenderer",
      "right" : "ActiveGutterRenderer",
      "info" : "SimpleType[54142-54162]:SimpleType[54379-54399]"
    }, {
      "left" : "getActiveRendererByMouseEvent",
      "right" : "getActiveRendererByMouseEvent",
      "info" : "SimpleName[54163-54192]:SimpleName[54400-54429]"
    }, {
      "left" : "final MouseEvent e",
      "right" : "final MouseEvent e",
      "info" : "SingleVariableDeclaration[54193-54211]:SingleVariableDeclaration[54430-54448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54213-55719]:Block[54450-55956]"
    }, {
      "left" : "if (findFoldingAnchorAt(e.getX(), e.getY()) != null)",
      "right" : "if (findFoldingAnchorAt(e.getX(), e.getY()) != null)",
      "info" : "IfStatement[54219-54298]:IfStatement[54456-54535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54272-54298]:Block[54509-54535]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54280-54292]:ReturnStatement[54517-54529]"
    }, {
      "left" : "if (e.isConsumed() || e.getX() > getWhitespaceSeparatorOffset())",
      "right" : "if (e.isConsumed() || e.getX() > getWhitespaceSeparatorOffset())",
      "info" : "IfStatement[54303-54394]:IfStatement[54540-54631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54368-54394]:Block[54605-54631]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54376-54388]:ReturnStatement[54613-54625]"
    }, {
      "left" : "final ActiveGutterRenderer[] gutterRenderer = {null};",
      "right" : "final ActiveGutterRenderer[] gutterRenderer = {null};",
      "info" : "VariableDeclarationStatement[54399-54452]:VariableDeclarationStatement[54636-54689]"
    }, {
      "left" : "Rectangle clip = myEditor.getScrollingModel().getVisibleArea();",
      "right" : "Rectangle clip = myEditor.getScrollingModel().getVisibleArea();",
      "info" : "VariableDeclarationStatement[54457-54520]:VariableDeclarationStatement[54694-54757]"
    }, {
      "left" : "int firstVisibleOffset = myEditor.logicalPositionToOffset(\n      myEditor.xyToLogicalPosition(new Point(0, clip.y - myEditor.getLineHeight())));",
      "right" : "int firstVisibleOffset = myEditor.logicalPositionToOffset(\n      myEditor.xyToLogicalPosition(new Point(0, clip.y - myEditor.getLineHeight())));",
      "info" : "VariableDeclarationStatement[54525-54669]:VariableDeclarationStatement[54762-54906]"
    }, {
      "left" : "int lastVisibleOffset = myEditor.logicalPositionToOffset(\n      myEditor.xyToLogicalPosition(new Point(0, clip.y + clip.height + myEditor.getLineHeight())));",
      "right" : "int lastVisibleOffset = myEditor.logicalPositionToOffset(\n      myEditor.xyToLogicalPosition(new Point(0, clip.y + clip.height + myEditor.getLineHeight())));",
      "info" : "VariableDeclarationStatement[54674-54831]:VariableDeclarationStatement[54911-55068]"
    }, {
      "left" : "processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() {\n      @Override\n      public void process(@NotNull RangeHighlighter highlighter) {\n        if (gutterRenderer[0] != null) return;\n        Rectangle rectangle = getLineRendererRectangle(highlighter);\n        if (rectangle == null) return;\n\n        int startY = rectangle.y;\n        int endY = startY + rectangle.height;\n        if (startY == endY) {\n          endY += myEditor.getLineHeight();\n        }\n\n        if (startY < e.getY() && e.getY() <= endY) {\n          final LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer();\n          if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer)renderer).canDoAction(e)) {\n            gutterRenderer[0] = (ActiveGutterRenderer)renderer;\n          }\n        }\n      }\n    });",
      "right" : "processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() {\n      @Override\n      public void process(@NotNull RangeHighlighter highlighter) {\n        if (gutterRenderer[0] != null) return;\n        Rectangle rectangle = getLineRendererRectangle(highlighter);\n        if (rectangle == null) return;\n\n        int startY = rectangle.y;\n        int endY = startY + rectangle.height;\n        if (startY == endY) {\n          endY += myEditor.getLineHeight();\n        }\n\n        if (startY < e.getY() && e.getY() <= endY) {\n          final LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer();\n          if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer)renderer).canDoAction(e)) {\n            gutterRenderer[0] = (ActiveGutterRenderer)renderer;\n          }\n        }\n      }\n    });",
      "info" : "ExpressionStatement[54837-55685]:ExpressionStatement[55074-55922]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[54941-54950]:MarkerAnnotation[55178-55187]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54957-54963]:Modifier[55194-55200]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54964-54968]:PrimitiveType[55201-55205]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[54969-54976]:SimpleName[55206-55213]"
    }, {
      "left" : "@NotNull RangeHighlighter highlighter",
      "right" : "@NotNull RangeHighlighter highlighter",
      "info" : "SingleVariableDeclaration[54977-55014]:SingleVariableDeclaration[55214-55251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55016-55677]:Block[55253-55914]"
    }, {
      "left" : "if (gutterRenderer[0] != null)",
      "right" : "if (gutterRenderer[0] != null)",
      "info" : "IfStatement[55026-55064]:IfStatement[55263-55301]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55057-55064]:ReturnStatement[55294-55301]"
    }, {
      "left" : "Rectangle rectangle = getLineRendererRectangle(highlighter);",
      "right" : "Rectangle rectangle = getLineRendererRectangle(highlighter);",
      "info" : "VariableDeclarationStatement[55073-55133]:VariableDeclarationStatement[55310-55370]"
    }, {
      "left" : "if (rectangle == null)",
      "right" : "if (rectangle == null)",
      "info" : "IfStatement[55142-55172]:IfStatement[55379-55409]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55165-55172]:ReturnStatement[55402-55409]"
    }, {
      "left" : "int startY = rectangle.y;",
      "right" : "int startY = rectangle.y;",
      "info" : "VariableDeclarationStatement[55182-55207]:VariableDeclarationStatement[55419-55444]"
    }, {
      "left" : "int endY = startY + rectangle.height;",
      "right" : "int endY = startY + rectangle.height;",
      "info" : "VariableDeclarationStatement[55216-55253]:VariableDeclarationStatement[55453-55490]"
    }, {
      "left" : "if (startY == endY)",
      "right" : "if (startY == endY)",
      "info" : "IfStatement[55262-55337]:IfStatement[55499-55574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55282-55337]:Block[55519-55574]"
    }, {
      "left" : "endY += myEditor.getLineHeight();",
      "right" : "endY += myEditor.getLineHeight();",
      "info" : "ExpressionStatement[55294-55327]:ExpressionStatement[55531-55564]"
    }, {
      "left" : "if (startY < e.getY() && e.getY() <= endY)",
      "right" : "if (startY < e.getY() && e.getY() <= endY)",
      "info" : "IfStatement[55347-55669]:IfStatement[55584-55906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55390-55669]:Block[55627-55906]"
    }, {
      "left" : "final LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer();",
      "right" : "final LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer();",
      "info" : "VariableDeclarationStatement[55402-55474]:VariableDeclarationStatement[55639-55711]"
    }, {
      "left" : "if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer)renderer).canDoAction(e))",
      "right" : "if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer)renderer).canDoAction(e))",
      "info" : "IfStatement[55485-55659]:IfStatement[55722-55896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55582-55659]:Block[55819-55896]"
    }, {
      "left" : "gutterRenderer[0] = (ActiveGutterRenderer)renderer;",
      "right" : "gutterRenderer[0] = (ActiveGutterRenderer)renderer;",
      "info" : "ExpressionStatement[55596-55647]:ExpressionStatement[55833-55884]"
    }, {
      "left" : "return gutterRenderer[0];",
      "right" : "return gutterRenderer[0];",
      "info" : "ReturnStatement[55690-55715]:ReturnStatement[55927-55952]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55723-55732]:MarkerAnnotation[55960-55969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55735-55741]:Modifier[55972-55978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55742-55746]:PrimitiveType[55979-55983]"
    }, {
      "left" : "closeAllAnnotations",
      "right" : "closeAllAnnotations",
      "info" : "SimpleName[55747-55766]:SimpleName[55984-56003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55769-55911]:Block[56006-56148]"
    }, {
      "left" : "for (TextAnnotationGutterProvider provider : myTextAnnotationGutters)",
      "right" : "for (TextAnnotationGutterProvider provider : myTextAnnotationGutters)",
      "info" : "EnhancedForStatement[55775-55883]:EnhancedForStatement[56012-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55845-55883]:Block[56082-56120]"
    }, {
      "left" : "provider.gutterClosed();",
      "right" : "provider.gutterClosed();",
      "info" : "ExpressionStatement[55853-55877]:ExpressionStatement[56090-56114]"
    }, {
      "left" : "revalidateSizes();",
      "right" : "revalidateSizes();",
      "info" : "ExpressionStatement[55889-55907]:ExpressionStatement[56126-56144]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55915-55922]:Modifier[56152-56159]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55923-55927]:PrimitiveType[56160-56164]"
    }, {
      "left" : "revalidateSizes",
      "right" : "revalidateSizes",
      "info" : "SimpleName[55928-55943]:SimpleName[56165-56180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55946-56101]:Block[56183-56338]"
    }, {
      "left" : "myTextAnnotationGutters = new ArrayList<TextAnnotationGutterProvider>();",
      "right" : "myTextAnnotationGutters = new ArrayList<TextAnnotationGutterProvider>();",
      "info" : "ExpressionStatement[55952-56024]:ExpressionStatement[56189-56261]"
    }, {
      "left" : "myTextAnnotationGutterSizes = new TIntArrayList();",
      "right" : "myTextAnnotationGutterSizes = new TIntArrayList();",
      "info" : "ExpressionStatement[56029-56079]:ExpressionStatement[56266-56316]"
    }, {
      "left" : "updateSize();",
      "right" : "updateSize();",
      "info" : "ExpressionStatement[56084-56097]:ExpressionStatement[56321-56334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56105-56112]:Modifier[56342-56349]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[56113-56118]:TYPE_DECLARATION_KIND[56350-56355]"
    }, {
      "left" : "CloseAnnotationsAction",
      "right" : "CloseAnnotationsAction",
      "info" : "SimpleName[56119-56141]:SimpleName[56356-56378]"
    }, {
      "left" : "DumbAwareAction",
      "right" : "DumbAwareAction",
      "info" : "SimpleType[56150-56165]:SimpleType[56387-56402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56172-56178]:Modifier[56409-56415]"
    }, {
      "left" : "CloseAnnotationsAction",
      "right" : "CloseAnnotationsAction",
      "info" : "SimpleName[56179-56201]:SimpleName[56416-56438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56204-56286]:Block[56441-56523]"
    }, {
      "left" : "super(EditorBundle.message(\"close.editor.annotations.action.name\"));",
      "right" : "super(EditorBundle.message(\"close.editor.annotations.action.name\"));",
      "info" : "SuperConstructorInvocation[56212-56280]:SuperConstructorInvocation[56449-56517]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56292-56301]:MarkerAnnotation[56529-56538]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56306-56312]:Modifier[56543-56549]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56313-56317]:PrimitiveType[56550-56554]"
    }, {
      "left" : "actionPerformed",
      "right" : "actionPerformed",
      "info" : "SimpleName[56318-56333]:SimpleName[56555-56570]"
    }, {
      "left" : "@NotNull AnActionEvent e",
      "right" : "@NotNull AnActionEvent e",
      "info" : "SingleVariableDeclaration[56334-56358]:SingleVariableDeclaration[56571-56595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56360-56396]:Block[56597-56633]"
    }, {
      "left" : "closeAllAnnotations();",
      "right" : "closeAllAnnotations();",
      "info" : "ExpressionStatement[56368-56390]:ExpressionStatement[56605-56627]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56404-56413]:MarkerAnnotation[56641-56650]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[56416-56425]:MarkerAnnotation[56653-56662]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56428-56434]:Modifier[56665-56671]"
    }, {
      "left" : "Point",
      "right" : "Point",
      "info" : "SimpleType[56435-56440]:SimpleType[56672-56677]"
    }, {
      "left" : "getPoint",
      "right" : "getPoint",
      "info" : "SimpleName[56441-56449]:SimpleName[56678-56686]"
    }, {
      "left" : "final GutterIconRenderer renderer",
      "right" : "final GutterIconRenderer renderer",
      "info" : "SingleVariableDeclaration[56450-56483]:SingleVariableDeclaration[56687-56720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56485-56986]:Block[56722-57223]"
    }, {
      "left" : "final Ref<Point> result = Ref.create();",
      "right" : "final Ref<Point> result = Ref.create();",
      "info" : "VariableDeclarationStatement[56491-56530]:VariableDeclarationStatement[56728-56767]"
    }, {
      "left" : "for (int line : myLineToGutterRenderers.keys())",
      "right" : "for (int line : myLineToGutterRenderers.keys())",
      "info" : "EnhancedForStatement[56535-56965]:EnhancedForStatement[56772-57202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56583-56965]:Block[56820-57202]"
    }, {
      "left" : "processIconsRow(line, myLineToGutterRenderers.get(line), new LineGutterIconRendererProcessor() {\n        @Override\n        public void process(int x, int y, GutterMark r) {\n          if (result.isNull() && r.equals(renderer)) {\n            result.set(new Point(x, y));\n          }\n        }\n      });",
      "right" : "processIconsRow(line, myLineToGutterRenderers.get(line), new LineGutterIconRendererProcessor() {\n        @Override\n        public void process(int x, int y, GutterMark r) {\n          if (result.isNull() && r.equals(renderer)) {\n            result.set(new Point(x, y));\n          }\n        }\n      });",
      "info" : "ExpressionStatement[56591-56891]:ExpressionStatement[56828-57128]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56696-56705]:MarkerAnnotation[56933-56942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56714-56720]:Modifier[56951-56957]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56721-56725]:PrimitiveType[56958-56962]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[56726-56733]:SimpleName[56963-56970]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[56734-56739]:SingleVariableDeclaration[56971-56976]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[56741-56746]:SingleVariableDeclaration[56978-56983]"
    }, {
      "left" : "GutterMark r",
      "right" : "GutterMark r",
      "info" : "SingleVariableDeclaration[56748-56760]:SingleVariableDeclaration[56985-56997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56762-56881]:Block[56999-57118]"
    }, {
      "left" : "if (result.isNull() && r.equals(renderer))",
      "right" : "if (result.isNull() && r.equals(renderer))",
      "info" : "IfStatement[56774-56871]:IfStatement[57011-57108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56817-56871]:Block[57054-57108]"
    }, {
      "left" : "result.set(new Point(x, y));",
      "right" : "result.set(new Point(x, y));",
      "info" : "ExpressionStatement[56831-56859]:ExpressionStatement[57068-57096]"
    }, {
      "left" : "if (!result.isNull())",
      "right" : "if (!result.isNull())",
      "info" : "IfStatement[56899-56959]:IfStatement[57136-57196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56921-56959]:Block[57158-57196]"
    }, {
      "left" : "return result.get();",
      "right" : "return result.get();",
      "info" : "ReturnStatement[56931-56951]:ReturnStatement[57168-57188]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[56970-56982]:ReturnStatement[57207-57219]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56990-56999]:MarkerAnnotation[57227-57236]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57002-57008]:Modifier[57239-57245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57009-57013]:PrimitiveType[57246-57250]"
    }, {
      "left" : "setLineNumberConvertor",
      "right" : "setLineNumberConvertor",
      "info" : "SimpleName[57014-57036]:SimpleName[57251-57273]"
    }, {
      "left" : "@NotNull TIntFunction lineNumberConvertor",
      "right" : "@NotNull TIntFunction lineNumberConvertor",
      "info" : "SingleVariableDeclaration[57037-57078]:SingleVariableDeclaration[57274-57315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57080-57140]:Block[57317-57377]"
    }, {
      "left" : "setLineNumberConvertor(lineNumberConvertor, null);",
      "right" : "setLineNumberConvertor(lineNumberConvertor, null);",
      "info" : "ExpressionStatement[57086-57136]:ExpressionStatement[57323-57373]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57144-57153]:MarkerAnnotation[57381-57390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57156-57162]:Modifier[57393-57399]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57163-57167]:PrimitiveType[57400-57404]"
    }, {
      "left" : "setLineNumberConvertor",
      "right" : "setLineNumberConvertor",
      "info" : "SimpleName[57168-57190]:SimpleName[57405-57427]"
    }, {
      "left" : "@NotNull TIntFunction lineNumberConvertor1",
      "right" : "@NotNull TIntFunction lineNumberConvertor1",
      "info" : "SingleVariableDeclaration[57191-57233]:SingleVariableDeclaration[57428-57470]"
    }, {
      "left" : "@Nullable TIntFunction lineNumberConvertor2",
      "right" : "@Nullable TIntFunction lineNumberConvertor2",
      "info" : "SingleVariableDeclaration[57235-57278]:SingleVariableDeclaration[57472-57515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57280-57395]:Block[57517-57632]"
    }, {
      "left" : "myLineNumberConvertor = lineNumberConvertor1;",
      "right" : "myLineNumberConvertor = lineNumberConvertor1;",
      "info" : "ExpressionStatement[57286-57331]:ExpressionStatement[57523-57568]"
    }, {
      "left" : "myAdditionalLineNumberConvertor = lineNumberConvertor2;",
      "right" : "myAdditionalLineNumberConvertor = lineNumberConvertor2;",
      "info" : "ExpressionStatement[57336-57391]:ExpressionStatement[57573-57628]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57399-57408]:MarkerAnnotation[57636-57645]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57411-57417]:Modifier[57648-57654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57418-57422]:PrimitiveType[57655-57659]"
    }, {
      "left" : "setShowDefaultGutterPopup",
      "right" : "setShowDefaultGutterPopup",
      "info" : "SimpleName[57423-57448]:SimpleName[57660-57685]"
    }, {
      "left" : "boolean show",
      "right" : "boolean show",
      "info" : "SingleVariableDeclaration[57449-57461]:SingleVariableDeclaration[57686-57698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57463-57505]:Block[57700-57742]"
    }, {
      "left" : "myShowDefaultGutterPopup = show;",
      "right" : "myShowDefaultGutterPopup = show;",
      "info" : "ExpressionStatement[57469-57501]:ExpressionStatement[57706-57738]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57509-57518]:MarkerAnnotation[57746-57755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57521-57527]:Modifier[57758-57764]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57528-57532]:PrimitiveType[57765-57769]"
    }, {
      "left" : "setPaintBackground",
      "right" : "setPaintBackground",
      "info" : "SimpleName[57533-57551]:SimpleName[57770-57788]"
    }, {
      "left" : "boolean value",
      "right" : "boolean value",
      "info" : "SingleVariableDeclaration[57552-57565]:SingleVariableDeclaration[57789-57802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57567-57603]:Block[57804-57840]"
    }, {
      "left" : "myPaintBackground = value;",
      "right" : "myPaintBackground = value;",
      "info" : "ExpressionStatement[57573-57599]:ExpressionStatement[57810-57836]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57607-57614]:Modifier[57844-57851]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57615-57619]:PrimitiveType[57852-57856]"
    }, {
      "left" : "invokePopup",
      "right" : "invokePopup",
      "info" : "SimpleName[57620-57631]:SimpleName[57857-57868]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[57632-57644]:SingleVariableDeclaration[57869-57881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57646-60271]:Block[57883-60508]"
    }, {
      "left" : "final ActionManager actionManager = ActionManager.getInstance();",
      "right" : "final ActionManager actionManager = ActionManager.getInstance();",
      "info" : "VariableDeclarationStatement[57652-57716]:VariableDeclarationStatement[57889-57953]"
    }, {
      "left" : "if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA)",
      "right" : "if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA)",
      "info" : "IfStatement[57721-60267]:IfStatement[57958-60504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57797-58837]:Block[58034-59074]"
    }, {
      "left" : "DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message(\"editor.annotations.action.group.name\"), true);",
      "right" : "DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message(\"editor.annotations.action.group.name\"), true);",
      "info" : "VariableDeclarationStatement[57805-57929]:VariableDeclarationStatement[58042-58166]"
    }, {
      "left" : "actionGroup.add(new CloseAnnotationsAction());",
      "right" : "actionGroup.add(new CloseAnnotationsAction());",
      "info" : "ExpressionStatement[57936-57982]:ExpressionStatement[58173-58219]"
    }, {
      "left" : "final List<AnAction> addActions = new ArrayList<AnAction>();",
      "right" : "final List<AnAction> addActions = new ArrayList<AnAction>();",
      "info" : "VariableDeclarationStatement[57989-58049]:VariableDeclarationStatement[58226-58286]"
    }, {
      "left" : "final Point p = e.getPoint();",
      "right" : "final Point p = e.getPoint();",
      "info" : "VariableDeclarationStatement[58056-58085]:VariableDeclarationStatement[58293-58322]"
    }, {
      "left" : "int line = EditorUtil.yPositionToLogicalLine(myEditor, p);",
      "right" : "int line = EditorUtil.yPositionToLogicalLine(myEditor, p);",
      "info" : "VariableDeclarationStatement[58092-58150]:VariableDeclarationStatement[58329-58387]"
    }, {
      "left" : "for (TextAnnotationGutterProvider gutterProvider : myTextAnnotationGutters)",
      "right" : "for (TextAnnotationGutterProvider gutterProvider : myTextAnnotationGutters)",
      "info" : "EnhancedForStatement[58225-58586]:EnhancedForStatement[58462-58823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58301-58586]:Block[58538-58823]"
    }, {
      "left" : "final List<AnAction> list = gutterProvider.getPopupActions(line, myEditor);",
      "right" : "final List<AnAction> list = gutterProvider.getPopupActions(line, myEditor);",
      "info" : "VariableDeclarationStatement[58311-58386]:VariableDeclarationStatement[58548-58623]"
    }, {
      "left" : "if (list != null)",
      "right" : "if (list != null)",
      "info" : "IfStatement[58395-58578]:IfStatement[58632-58815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58413-58578]:Block[58650-58815]"
    }, {
      "left" : "for (AnAction action : list)",
      "right" : "for (AnAction action : list)",
      "info" : "EnhancedForStatement[58425-58568]:EnhancedForStatement[58662-58805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58454-58568]:Block[58691-58805]"
    }, {
      "left" : "if (! addActions.contains(action))",
      "right" : "if (! addActions.contains(action))",
      "info" : "IfStatement[58468-58556]:IfStatement[58705-58793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58503-58556]:Block[58740-58793]"
    }, {
      "left" : "addActions.add(action);",
      "right" : "addActions.add(action);",
      "info" : "ExpressionStatement[58519-58542]:ExpressionStatement[58756-58779]"
    }, {
      "left" : "for (AnAction addAction : addActions)",
      "right" : "for (AnAction addAction : addActions)",
      "info" : "EnhancedForStatement[58593-58676]:EnhancedForStatement[58830-58913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58631-58676]:Block[58868-58913]"
    }, {
      "left" : "actionGroup.add(addAction);",
      "right" : "actionGroup.add(addAction);",
      "info" : "ExpressionStatement[58641-58668]:ExpressionStatement[58878-58905]"
    }, {
      "left" : "JPopupMenu menu = actionManager.createActionPopupMenu(\"\", actionGroup).getComponent();",
      "right" : "JPopupMenu menu = actionManager.createActionPopupMenu(\"\", actionGroup).getComponent();",
      "info" : "VariableDeclarationStatement[58683-58769]:VariableDeclarationStatement[58920-59006]"
    }, {
      "left" : "menu.show(this, e.getX(), e.getY());",
      "right" : "menu.show(this, e.getX(), e.getY());",
      "info" : "ExpressionStatement[58776-58812]:ExpressionStatement[59013-59049]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[58819-58831]:ExpressionStatement[59056-59068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58847-60267]:Block[59084-60504]"
    }, {
      "left" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "right" : "GutterIconRenderer renderer = getGutterRenderer(e);",
      "info" : "VariableDeclarationStatement[58855-58906]:VariableDeclarationStatement[59092-59143]"
    }, {
      "left" : "if (renderer != null)",
      "right" : "if (renderer != null)",
      "info" : "IfStatement[58913-60261]:IfStatement[59150-60498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58935-59869]:Block[59172-60106]"
    }, {
      "left" : "ActionGroup actionGroup = renderer.getPopupMenuActions();",
      "right" : "ActionGroup actionGroup = renderer.getPopupMenuActions();",
      "info" : "VariableDeclarationStatement[58945-59002]:VariableDeclarationStatement[59182-59239]"
    }, {
      "left" : "if (actionGroup != null)",
      "right" : "if (actionGroup != null)",
      "info" : "IfStatement[59011-59861]:IfStatement[59248-60098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59036-59335]:Block[59273-59572]"
    }, {
      "left" : "ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN,\n                                                                                        actionGroup);",
      "right" : "ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN,\n                                                                                        actionGroup);",
      "info" : "VariableDeclarationStatement[59048-59235]:VariableDeclarationStatement[59285-59472]"
    }, {
      "left" : "popupMenu.getComponent().show(this, e.getX(), e.getY());",
      "right" : "popupMenu.getComponent().show(this, e.getX(), e.getY());",
      "info" : "ExpressionStatement[59246-59302]:ExpressionStatement[59483-59539]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[59313-59325]:ExpressionStatement[59550-59562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59341-59861]:Block[59578-60098]"
    }, {
      "left" : "AnAction rightButtonAction = renderer.getRightButtonClickAction();",
      "right" : "AnAction rightButtonAction = renderer.getRightButtonClickAction();",
      "info" : "VariableDeclarationStatement[59353-59419]:VariableDeclarationStatement[59590-59656]"
    }, {
      "left" : "if (rightButtonAction != null)",
      "right" : "if (rightButtonAction != null)",
      "info" : "IfStatement[59430-59851]:IfStatement[59667-60088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59461-59851]:Block[59698-60088]"
    }, {
      "left" : "rightButtonAction.actionPerformed(new AnActionEvent(e, myEditor.getDataContext(), \"ICON_NAVIGATION_SECONDARY_BUTTON\", rightButtonAction.getTemplatePresentation(),\n                                                                ActionManager.getInstance(),\n                                                                e.getModifiers()));",
      "right" : "rightButtonAction.actionPerformed(new AnActionEvent(e, myEditor.getDataContext(), \"ICON_NAVIGATION_SECONDARY_BUTTON\", rightButtonAction.getTemplatePresentation(),\n                                                                ActionManager.getInstance(),\n                                                                e.getModifiers()));",
      "info" : "ExpressionStatement[59475-59814]:ExpressionStatement[59712-60051]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[59827-59839]:ExpressionStatement[60064-60076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59881-60261]:Block[60118-60498]"
    }, {
      "left" : "if (myShowDefaultGutterPopup)",
      "right" : "if (myShowDefaultGutterPopup)",
      "info" : "IfStatement[59891-60232]:IfStatement[60128-60469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59921-60232]:Block[60158-60469]"
    }, {
      "left" : "ActionGroup group = (ActionGroup)CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_GUTTER);",
      "right" : "ActionGroup group = (ActionGroup)CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_GUTTER);",
      "info" : "VariableDeclarationStatement[59933-60051]:VariableDeclarationStatement[60170-60288]"
    }, {
      "left" : "ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group);",
      "right" : "ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group);",
      "info" : "VariableDeclarationStatement[60062-60155]:VariableDeclarationStatement[60299-60392]"
    }, {
      "left" : "popupMenu.getComponent().show(this, e.getX(), e.getY());",
      "right" : "popupMenu.getComponent().show(this, e.getX(), e.getY());",
      "info" : "ExpressionStatement[60166-60222]:ExpressionStatement[60403-60459]"
    }, {
      "left" : "e.consume();",
      "right" : "e.consume();",
      "info" : "ExpressionStatement[60241-60253]:ExpressionStatement[60478-60490]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60275-60284]:MarkerAnnotation[60512-60521]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60287-60293]:Modifier[60524-60530]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60294-60298]:PrimitiveType[60531-60535]"
    }, {
      "left" : "mouseEntered",
      "right" : "mouseEntered",
      "info" : "SimpleName[60299-60311]:SimpleName[60536-60548]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[60312-60324]:SingleVariableDeclaration[60549-60561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60326-60331]:Block[60563-60568]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60335-60344]:MarkerAnnotation[60572-60581]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60347-60353]:Modifier[60584-60590]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60354-60358]:PrimitiveType[60591-60595]"
    }, {
      "left" : "mouseExited",
      "right" : "mouseExited",
      "info" : "SimpleName[60359-60370]:SimpleName[60596-60607]"
    }, {
      "left" : "MouseEvent e",
      "right" : "MouseEvent e",
      "info" : "SingleVariableDeclaration[60371-60383]:SingleVariableDeclaration[60608-60620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60385-60473]:Block[60622-60710]"
    }, {
      "left" : "TooltipController.getInstance().cancelTooltip(GUTTER_TOOLTIP_GROUP, e, false);",
      "right" : "TooltipController.getInstance().cancelTooltip(GUTTER_TOOLTIP_GROUP, e, false);",
      "info" : "ExpressionStatement[60391-60469]:ExpressionStatement[60628-60706]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60477-60484]:Modifier[60714-60721]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[60485-60488]:PrimitiveType[60722-60725]"
    }, {
      "left" : "convertPointToLineNumber",
      "right" : "convertPointToLineNumber",
      "info" : "SimpleName[60489-60513]:SimpleName[60726-60750]"
    }, {
      "left" : "final Point p",
      "right" : "final Point p",
      "info" : "SingleVariableDeclaration[60514-60527]:SingleVariableDeclaration[60751-60764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60529-61024]:Block[60766-61261]"
    }, {
      "left" : "int line = EditorUtil.yPositionToLogicalLine(myEditor, p);",
      "right" : "int line = EditorUtil.yPositionToLogicalLine(myEditor, p);",
      "info" : "VariableDeclarationStatement[60535-60593]:VariableDeclarationStatement[60772-60830]"
    }, {
      "left" : "if (line >= myEditor.getDocument().getLineCount())",
      "right" : "if (line >= myEditor.getDocument().getLineCount())",
      "info" : "IfStatement[60599-60660]:IfStatement[60836-60897]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[60650-60660]:ReturnStatement[60887-60897]"
    }, {
      "left" : "int startOffset = myEditor.getDocument().getLineStartOffset(line);",
      "right" : "int startOffset = myEditor.getDocument().getLineStartOffset(line);",
      "info" : "VariableDeclarationStatement[60665-60731]:VariableDeclarationStatement[60902-60968]"
    }, {
      "left" : "final FoldRegion region = myEditor.getFoldingModel().getCollapsedRegionAtOffset(startOffset);",
      "right" : "final FoldRegion region = myEditor.getFoldingModel().getCollapsedRegionAtOffset(startOffset);",
      "info" : "VariableDeclarationStatement[60736-60829]:VariableDeclarationStatement[60973-61066]"
    }, {
      "left" : "if (region != null)",
      "right" : "if (region != null)",
      "info" : "IfStatement[60834-61003]:IfStatement[61071-61240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60854-61003]:Block[61091-61240]"
    }, {
      "left" : "line = myEditor.getDocument().getLineNumber(region.getEndOffset());",
      "right" : "line = myEditor.getDocument().getLineNumber(region.getEndOffset());",
      "info" : "ExpressionStatement[60862-60929]:ExpressionStatement[61099-61166]"
    }, {
      "left" : "if (line >= myEditor.getDocument().getLineCount())",
      "right" : "if (line >= myEditor.getDocument().getLineCount())",
      "info" : "IfStatement[60936-60997]:IfStatement[61173-61234]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[60987-60997]:ReturnStatement[61224-61234]"
    }, {
      "left" : "return line;",
      "right" : "return line;",
      "info" : "ReturnStatement[61008-61020]:ReturnStatement[61245-61257]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[61028-61037]:MarkerAnnotation[61265-61274]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61040-61047]:Modifier[61277-61284]"
    }, {
      "left" : "GutterMark",
      "right" : "GutterMark",
      "info" : "SimpleType[61048-61058]:SimpleType[61285-61295]"
    }, {
      "left" : "getGutterRenderer",
      "right" : "getGutterRenderer",
      "info" : "SimpleName[61059-61076]:SimpleName[61296-61313]"
    }, {
      "left" : "final Point p",
      "right" : "final Point p",
      "info" : "SingleVariableDeclaration[61077-61090]:SingleVariableDeclaration[61314-61327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61092-61798]:Block[61329-62035]"
    }, {
      "left" : "int line = convertPointToLineNumber(p);",
      "right" : "int line = convertPointToLineNumber(p);",
      "info" : "VariableDeclarationStatement[61098-61137]:VariableDeclarationStatement[61335-61374]"
    }, {
      "left" : "if (line == -1)",
      "right" : "if (line == -1)",
      "info" : "IfStatement[61142-61170]:IfStatement[61379-61407]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61158-61170]:ReturnStatement[61395-61407]"
    }, {
      "left" : "List<GutterMark> renderers = myLineToGutterRenderers.get(line);",
      "right" : "List<GutterMark> renderers = myLineToGutterRenderers.get(line);",
      "info" : "VariableDeclarationStatement[61175-61238]:VariableDeclarationStatement[61412-61475]"
    }, {
      "left" : "if (renderers == null)",
      "right" : "if (renderers == null)",
      "info" : "IfStatement[61243-61292]:IfStatement[61480-61529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61266-61292]:Block[61503-61529]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61274-61286]:ReturnStatement[61511-61523]"
    }, {
      "left" : "final GutterMark[] result = {null};",
      "right" : "final GutterMark[] result = {null};",
      "info" : "VariableDeclarationStatement[61298-61333]:VariableDeclarationStatement[61535-61570]"
    }, {
      "left" : "processIconsRow(line, renderers, new LineGutterIconRendererProcessor() {\n      @Override\n      public void process(int x, int y, GutterMark renderer) {\n        final int ex = convertX((int)p.getX());\n        Icon icon = scaleIcon(renderer.getIcon());\n        // Do not check y to extend the area where users could click\n        if (x <= ex && ex <= x + icon.getIconWidth()) {\n          result[0] = renderer;\n        }\n      }\n    });",
      "right" : "processIconsRow(line, renderers, new LineGutterIconRendererProcessor() {\n      @Override\n      public void process(int x, int y, GutterMark renderer) {\n        final int ex = convertX((int)p.getX());\n        Icon icon = scaleIcon(renderer.getIcon());\n        // Do not check y to extend the area where users could click\n        if (x <= ex && ex <= x + icon.getIconWidth()) {\n          result[0] = renderer;\n        }\n      }\n    });",
      "info" : "ExpressionStatement[61338-61771]:ExpressionStatement[61575-62008]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[61417-61426]:MarkerAnnotation[61654-61663]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61433-61439]:Modifier[61670-61676]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61440-61444]:PrimitiveType[61677-61681]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61445-61452]:SimpleName[61682-61689]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[61453-61458]:SingleVariableDeclaration[61690-61695]"
    }, {
      "left" : "int y",
      "right" : "int y",
      "info" : "SingleVariableDeclaration[61460-61465]:SingleVariableDeclaration[61697-61702]"
    }, {
      "left" : "GutterMark renderer",
      "right" : "GutterMark renderer",
      "info" : "SingleVariableDeclaration[61467-61486]:SingleVariableDeclaration[61704-61723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61488-61763]:Block[61725-62000]"
    }, {
      "left" : "final int ex = convertX((int)p.getX());",
      "right" : "final int ex = convertX((int)p.getX());",
      "info" : "VariableDeclarationStatement[61498-61537]:VariableDeclarationStatement[61735-61774]"
    }, {
      "left" : "Icon icon = scaleIcon(renderer.getIcon());",
      "right" : "Icon icon = scaleIcon(renderer.getIcon());",
      "info" : "VariableDeclarationStatement[61546-61588]:VariableDeclarationStatement[61783-61825]"
    }, {
      "left" : "if (x <= ex && ex <= x + icon.getIconWidth())",
      "right" : "if (x <= ex && ex <= x + icon.getIconWidth())",
      "info" : "IfStatement[61666-61755]:IfStatement[61903-61992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61712-61755]:Block[61949-61992]"
    }, {
      "left" : "result[0] = renderer;",
      "right" : "result[0] = renderer;",
      "info" : "ExpressionStatement[61724-61745]:ExpressionStatement[61961-61982]"
    }, {
      "left" : "return result[0];",
      "right" : "return result[0];",
      "info" : "ReturnStatement[61777-61794]:ReturnStatement[62014-62031]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[61802-61811]:MarkerAnnotation[62039-62048]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61814-61821]:Modifier[62051-62058]"
    }, {
      "left" : "GutterIconRenderer",
      "right" : "GutterIconRenderer",
      "info" : "SimpleType[61822-61840]:SimpleType[62059-62077]"
    }, {
      "left" : "getGutterRenderer",
      "right" : "getGutterRenderer",
      "info" : "SimpleName[61841-61858]:SimpleName[62078-62095]"
    }, {
      "left" : "final MouseEvent e",
      "right" : "final MouseEvent e",
      "info" : "SingleVariableDeclaration[61859-61877]:SingleVariableDeclaration[62096-62114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61879-61948]:Block[62116-62185]"
    }, {
      "left" : "return (GutterIconRenderer)getGutterRenderer(e.getPoint());",
      "right" : "return (GutterIconRenderer)getGutterRenderer(e.getPoint());",
      "info" : "ReturnStatement[61885-61944]:ReturnStatement[62122-62181]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61952-61958]:Modifier[62189-62195]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[61959-61962]:PrimitiveType[62196-62199]"
    }, {
      "left" : "convertX",
      "right" : "convertX",
      "info" : "SimpleName[61963-61971]:SimpleName[62200-62208]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[61972-61977]:SingleVariableDeclaration[62209-62214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61979-62044]:Block[62216-62281]"
    }, {
      "left" : "if (!isMirrored())",
      "right" : "if (!isMirrored())",
      "info" : "IfStatement[61985-62013]:IfStatement[62222-62250]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[62004-62013]:ReturnStatement[62241-62250]"
    }, {
      "left" : "return getWidth() - x;",
      "right" : "return getWidth() - x;",
      "info" : "ReturnStatement[62018-62040]:ReturnStatement[62255-62277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62048-62054]:Modifier[62285-62291]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62055-62059]:PrimitiveType[62292-62296]"
    }, {
      "left" : "dispose",
      "right" : "dispose",
      "info" : "SimpleName[62060-62067]:SimpleName[62297-62304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62070-62234]:Block[62307-62471]"
    }, {
      "left" : "for (TextAnnotationGutterProvider gutterProvider : myTextAnnotationGutters)",
      "right" : "for (TextAnnotationGutterProvider gutterProvider : myTextAnnotationGutters)",
      "info" : "EnhancedForStatement[62076-62196]:EnhancedForStatement[62313-62433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62152-62196]:Block[62389-62433]"
    }, {
      "left" : "gutterProvider.gutterClosed();",
      "right" : "gutterProvider.gutterClosed();",
      "info" : "ExpressionStatement[62160-62190]:ExpressionStatement[62397-62427]"
    }, {
      "left" : "myProviderToListener.clear();",
      "right" : "myProviderToListener.clear();",
      "info" : "ExpressionStatement[62201-62230]:ExpressionStatement[62438-62467]"
    } ]
  },
  "interFileMappings" : { }
}