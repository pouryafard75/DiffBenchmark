{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ScopedAliases",
      "right" : "ScopedAliases",
      "info" : "TypeDeclaration[1458-21343]:TypeDeclaration[1458-21523]"
    }, {
      "left" : "static final String SCOPING_METHOD_NAME = \"goog.scope\";",
      "right" : "static final String SCOPING_METHOD_NAME = \"goog.scope\";",
      "info" : "FieldDeclaration[2378-2506]:FieldDeclaration[2378-2506]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2510-2550]:FieldDeclaration[2510-2550]"
    }, {
      "left" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "right" : "private final PreprocessorSymbolTable preprocessorSymbolTable;",
      "info" : "FieldDeclaration[2553-2615]:FieldDeclaration[2553-2615]"
    }, {
      "left" : "private final AliasTransformationHandler transformationHandler;",
      "right" : "private final AliasTransformationHandler transformationHandler;",
      "info" : "FieldDeclaration[2618-2681]:FieldDeclaration[2618-2681]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
      "info" : "FieldDeclaration[2697-2885]:FieldDeclaration[2697-2885]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
      "info" : "FieldDeclaration[2889-3181]:FieldDeclaration[2889-3181]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
      "info" : "FieldDeclaration[3185-3372]:FieldDeclaration[3185-3372]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
      "info" : "FieldDeclaration[3376-3551]:FieldDeclaration[3376-3551]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
      "info" : "FieldDeclaration[3555-3727]:FieldDeclaration[3555-3727]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
      "info" : "FieldDeclaration[3731-3909]:FieldDeclaration[3731-3909]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_ALIAS_CYCLE = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_CYCLE\",\n      \"The aliases {0} has a cycle.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_ALIAS_CYCLE = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_CYCLE\",\n      \"The aliases {0} has a cycle.\");",
      "info" : "FieldDeclaration[3913-4062]:FieldDeclaration[3913-4062]"
    }, {
      "left" : "static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
      "right" : "static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
      "info" : "FieldDeclaration[4066-4257]:FieldDeclaration[4066-4257]"
    }, {
      "left" : "private Multiset<String> scopedAliasNames = HashMultiset.create();",
      "right" : "private Multiset<String> scopedAliasNames = HashMultiset.create();",
      "info" : "FieldDeclaration[4261-4327]:FieldDeclaration[4261-4327]"
    }, {
      "left" : "ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler)",
      "right" : "ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler)",
      "info" : "MethodDeclaration[4331-4644]:MethodDeclaration[4331-4644]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4648-4741]:MethodDeclaration[4648-4741]"
    }, {
      "left" : "public void hotSwapScript(Node root, Node originalRoot)",
      "right" : "public void hotSwapScript(Node root, Node originalRoot)",
      "info" : "MethodDeclaration[4745-6789]:MethodDeclaration[4745-6789]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "TypeDeclaration[6793-7409]:TypeDeclaration[6793-7409]"
    }, {
      "left" : "final Var aliasVar;",
      "right" : "final Var aliasVar;",
      "info" : "FieldDeclaration[6833-6852]:FieldDeclaration[6833-6852]"
    }, {
      "left" : "final Node aliasReference;",
      "right" : "final Node aliasReference;",
      "info" : "FieldDeclaration[6857-6883]:FieldDeclaration[6857-6883]"
    }, {
      "left" : "AliasUsage(Var aliasVar, Node aliasReference)",
      "right" : "AliasUsage(Var aliasVar, Node aliasReference)",
      "info" : "MethodDeclaration[6889-7018]:MethodDeclaration[6889-7018]"
    }, {
      "left" : "public boolean referencesOtherAlias()",
      "right" : "public boolean referencesOtherAlias()",
      "info" : "MethodDeclaration[7024-7365]:MethodDeclaration[7024-7365]"
    }, {
      "left" : "public abstract void applyAlias();",
      "right" : "public abstract void applyAlias();",
      "info" : "MethodDeclaration[7371-7405]:MethodDeclaration[7371-7405]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "TypeDeclaration[7413-7773]:TypeDeclaration[7413-7773]"
    }, {
      "left" : "AliasedNode(Var aliasVar, Node aliasReference)",
      "right" : "AliasedNode(Var aliasVar, Node aliasReference)",
      "info" : "MethodDeclaration[7464-7557]:MethodDeclaration[7464-7557]"
    }, {
      "left" : "public void applyAlias()",
      "right" : "public void applyAlias()",
      "info" : "MethodDeclaration[7563-7769]:MethodDeclaration[7563-7769]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "TypeDeclaration[7777-8445]:TypeDeclaration[7777-8445]"
    }, {
      "left" : "AliasedTypeNode(Var aliasVar, Node aliasReference)",
      "right" : "AliasedTypeNode(Var aliasVar, Node aliasReference)",
      "info" : "MethodDeclaration[7832-7929]:MethodDeclaration[7832-7929]"
    }, {
      "left" : "public void applyAlias()",
      "right" : "public void applyAlias()",
      "info" : "MethodDeclaration[7935-8441]:MethodDeclaration[7935-8441]"
    }, {
      "left" : "Traversal",
      "right" : "Traversal",
      "info" : "TypeDeclaration[8450-21341]:TypeDeclaration[8450-21521]"
    }, {
      "left" : "private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
      "right" : "private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
      "info" : "FieldDeclaration[8664-8736]:FieldDeclaration[8664-8736]"
    }, {
      "left" : "private final List<Node> scopeCalls = Lists.newArrayList();",
      "right" : "private final List<Node> scopeCalls = Lists.newArrayList();",
      "info" : "FieldDeclaration[8742-8801]:FieldDeclaration[8742-8801]"
    }, {
      "left" : "private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
      "right" : "private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
      "info" : "FieldDeclaration[8807-8873]:FieldDeclaration[8807-8873]"
    }, {
      "left" : "private final Map<String, Var> aliases = Maps.newHashMap();",
      "right" : "private final Map<String, Var> aliases = Maps.newHashMap();",
      "info" : "FieldDeclaration[8936-8995]:FieldDeclaration[8936-8995]"
    }, {
      "left" : "private final Set<String> forbiddenLocals = Sets.newHashSet(\"$jscomp\");",
      "right" : "private final Set<String> forbiddenLocals = Sets.newHashSet(\"$jscomp\");",
      "info" : "FieldDeclaration[9550-9621]:FieldDeclaration[9613-9684]"
    }, {
      "left" : "private boolean hasNamespaceShadows = false;",
      "right" : "private boolean hasNamespaceShadows = false;",
      "info" : "FieldDeclaration[9626-9670]:FieldDeclaration[9689-9733]"
    }, {
      "left" : "private boolean hasErrors = false;",
      "right" : "private boolean hasErrors = false;",
      "info" : "FieldDeclaration[9676-9710]:FieldDeclaration[9739-9773]"
    }, {
      "left" : "private AliasTransformation transformation = null;",
      "right" : "private AliasTransformation transformation = null;",
      "info" : "FieldDeclaration[9716-9766]:FieldDeclaration[9779-9829]"
    }, {
      "left" : "Collection<Node> getAliasDefinitionsInOrder()",
      "right" : "Collection<Node> getAliasDefinitionsInOrder()",
      "info" : "MethodDeclaration[9772-9863]:MethodDeclaration[9835-9926]"
    }, {
      "left" : "private List<AliasUsage> getAliasUsages()",
      "right" : "private List<AliasUsage> getAliasUsages()",
      "info" : "MethodDeclaration[9869-9944]:MethodDeclaration[9932-10007]"
    }, {
      "left" : "List<Node> getScopeCalls()",
      "right" : "List<Node> getScopeCalls()",
      "info" : "MethodDeclaration[9950-10009]:MethodDeclaration[10013-10072]"
    }, {
      "left" : "boolean hasErrors()",
      "right" : "boolean hasErrors()",
      "info" : "MethodDeclaration[10015-10066]:MethodDeclaration[10078-10129]"
    }, {
      "left" : "private boolean isCallToScopeMethod(Node n)",
      "right" : "private boolean isCallToScopeMethod(Node n)",
      "info" : "MethodDeclaration[10072-10226]:MethodDeclaration[10135-10289]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[10232-10548]:MethodDeclaration[10295-10611]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[10554-10896]:MethodDeclaration[10617-10990]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[10902-11245]:MethodDeclaration[10996-11339]"
    }, {
      "left" : "private SourcePosition<AliasTransformation> getSourceRegion(Node n)",
      "right" : "private SourcePosition<AliasTransformation> getSourceRegion(Node n)",
      "info" : "MethodDeclaration[11251-11874]:MethodDeclaration[11345-11968]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType error,\n        String... arguments)",
      "info" : "MethodDeclaration[11880-12064]:MethodDeclaration[11974-12158]"
    }, {
      "left" : "private void findAliases(NodeTraversal t)",
      "right" : "private void findAliases(NodeTraversal t)",
      "info" : "MethodDeclaration[12070-15851]:MethodDeclaration[12164-16001]"
    }, {
      "left" : "private void recordAlias(Var aliasVar)",
      "right" : "private void recordAlias(Var aliasVar)",
      "info" : "MethodDeclaration[15857-16368]:MethodDeclaration[16007-16518]"
    }, {
      "left" : "private void findNamespaceShadows(NodeTraversal t)",
      "right" : "private void findNamespaceShadows(NodeTraversal t)",
      "info" : "MethodDeclaration[16374-16762]:MethodDeclaration[16524-16912]"
    }, {
      "left" : "private void renameNamespaceShadows(NodeTraversal t)",
      "right" : "private void renameNamespaceShadows(NodeTraversal t)",
      "info" : "MethodDeclaration[16768-17506]:MethodDeclaration[16918-17656]"
    }, {
      "left" : "private void validateScopeCall(NodeTraversal t, Node n, Node parent)",
      "right" : "private void validateScopeCall(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[17512-18429]:MethodDeclaration[17662-18579]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[18435-20730]:MethodDeclaration[18585-20910]"
    }, {
      "left" : "private void fixTypeNode(Node typeNode)",
      "right" : "private void fixTypeNode(Node typeNode)",
      "info" : "MethodDeclaration[20736-21337]:MethodDeclaration[20916-21517]"
    } ],
    "mappings" : [
 {
      "left" : "HotSwapCompilerPass",
      "right" : "HotSwapCompilerPass",
      "info" : "SimpleType[2354-2373]:SimpleType[2354-2373]"
    }, {
      "left" : "ScopedAliases",
      "right" : "ScopedAliases",
      "info" : "SimpleName[4331-4344]:SimpleName[4331-4344]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4345-4370]:SingleVariableDeclaration[4345-4370]"
    }, {
      "left" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
      "right" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
      "info" : "SingleVariableDeclaration[4378-4435]:SingleVariableDeclaration[4378-4435]"
    }, {
      "left" : "AliasTransformationHandler transformationHandler",
      "right" : "AliasTransformationHandler transformationHandler",
      "info" : "SingleVariableDeclaration[4443-4491]:SingleVariableDeclaration[4443-4491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4493-4644]:Block[4493-4644]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4499-4524]:ExpressionStatement[4499-4524]"
    }, {
      "left" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "right" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
      "info" : "ExpressionStatement[4529-4584]:ExpressionStatement[4529-4584]"
    }, {
      "left" : "this.transformationHandler = transformationHandler;",
      "right" : "this.transformationHandler = transformationHandler;",
      "info" : "ExpressionStatement[4589-4640]:ExpressionStatement[4589-4640]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4648-4657]:MarkerAnnotation[4648-4657]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4660-4666]:Modifier[4660-4666]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4667-4671]:PrimitiveType[4667-4671]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4672-4679]:SimpleName[4672-4679]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4680-4692]:SingleVariableDeclaration[4680-4692]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4694-4703]:SingleVariableDeclaration[4694-4703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4705-4741]:Block[4705-4741]"
    }, {
      "left" : "hotSwapScript(root, null);",
      "right" : "hotSwapScript(root, null);",
      "info" : "ExpressionStatement[4711-4737]:ExpressionStatement[4711-4737]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4745-4754]:MarkerAnnotation[4745-4754]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4757-4763]:Modifier[4757-4763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4764-4768]:PrimitiveType[4764-4768]"
    }, {
      "left" : "hotSwapScript",
      "right" : "hotSwapScript",
      "info" : "SimpleName[4769-4782]:SimpleName[4769-4782]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4783-4792]:SingleVariableDeclaration[4783-4792]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[4794-4811]:SingleVariableDeclaration[4794-4811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4813-6789]:Block[4813-6789]"
    }, {
      "left" : "Traversal traversal = new Traversal();",
      "right" : "Traversal traversal = new Traversal();",
      "info" : "VariableDeclarationStatement[4819-4857]:VariableDeclarationStatement[4819-4857]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, traversal);",
      "right" : "NodeTraversal.traverse(compiler, root, traversal);",
      "info" : "ExpressionStatement[4862-4912]:ExpressionStatement[4862-4912]"
    }, {
      "left" : "if (!traversal.hasErrors())",
      "right" : "if (!traversal.hasErrors())",
      "info" : "IfStatement[4918-6785]:IfStatement[4918-6785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4946-6785]:Block[4946-6785]"
    }, {
      "left" : "List<AliasUsage> aliasWorkQueue =\n          Lists.newArrayList(traversal.getAliasUsages());",
      "right" : "List<AliasUsage> aliasWorkQueue =\n          Lists.newArrayList(traversal.getAliasUsages());",
      "info" : "VariableDeclarationStatement[4983-5074]:VariableDeclarationStatement[4983-5074]"
    }, {
      "left" : "while (!aliasWorkQueue.isEmpty())",
      "right" : "while (!aliasWorkQueue.isEmpty())",
      "info" : "WhileStatement[5081-5750]:WhileStatement[5081-5750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5115-5750]:Block[5115-5750]"
    }, {
      "left" : "List<AliasUsage> newQueue = Lists.newArrayList();",
      "right" : "List<AliasUsage> newQueue = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[5125-5174]:VariableDeclarationStatement[5125-5174]"
    }, {
      "left" : "for (AliasUsage aliasUsage : aliasWorkQueue)",
      "right" : "for (AliasUsage aliasUsage : aliasWorkQueue)",
      "info" : "EnhancedForStatement[5183-5396]:EnhancedForStatement[5183-5396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5228-5396]:Block[5228-5396]"
    }, {
      "left" : "if (aliasUsage.referencesOtherAlias())",
      "right" : "if (aliasUsage.referencesOtherAlias())",
      "info" : "IfStatement[5240-5386]:IfStatement[5240-5386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5279-5330]:Block[5279-5330]"
    }, {
      "left" : "newQueue.add(aliasUsage);",
      "right" : "newQueue.add(aliasUsage);",
      "info" : "ExpressionStatement[5293-5318]:ExpressionStatement[5293-5318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5336-5386]:Block[5336-5386]"
    }, {
      "left" : "aliasUsage.applyAlias();",
      "right" : "aliasUsage.applyAlias();",
      "info" : "ExpressionStatement[5350-5374]:ExpressionStatement[5350-5374]"
    }, {
      "left" : "if (newQueue.size() == aliasWorkQueue.size())",
      "right" : "if (newQueue.size() == aliasWorkQueue.size())",
      "info" : "IfStatement[5443-5742]:IfStatement[5443-5742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5489-5688]:Block[5489-5688]"
    }, {
      "left" : "Var cycleVar = newQueue.get(0).aliasVar;",
      "right" : "Var cycleVar = newQueue.get(0).aliasVar;",
      "info" : "VariableDeclarationStatement[5501-5541]:VariableDeclarationStatement[5501-5541]"
    }, {
      "left" : "compiler.report(JSError.make(\n              cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));",
      "right" : "compiler.report(JSError.make(\n              cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));",
      "info" : "ExpressionStatement[5552-5661]:ExpressionStatement[5552-5661]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5672-5678]:BreakStatement[5672-5678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5694-5742]:Block[5694-5742]"
    }, {
      "left" : "aliasWorkQueue = newQueue;",
      "right" : "aliasWorkQueue = newQueue;",
      "info" : "ExpressionStatement[5706-5732]:ExpressionStatement[5706-5732]"
    }, {
      "left" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
      "right" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
      "info" : "EnhancedForStatement[5797-6113]:EnhancedForStatement[5797-6113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5865-6113]:Block[5865-6113]"
    }, {
      "left" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
      "right" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
      "info" : "IfStatement[5875-6105]:IfStatement[5875-6105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5973-6042]:Block[5973-6042]"
    }, {
      "left" : "aliasDefinition.getParent().detachFromParent();",
      "right" : "aliasDefinition.getParent().detachFromParent();",
      "info" : "ExpressionStatement[5985-6032]:ExpressionStatement[5985-6032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6048-6105]:Block[6048-6105]"
    }, {
      "left" : "aliasDefinition.detachFromParent();",
      "right" : "aliasDefinition.detachFromParent();",
      "info" : "ExpressionStatement[6060-6095]:ExpressionStatement[6060-6095]"
    }, {
      "left" : "for (Node scopeCall : traversal.getScopeCalls())",
      "right" : "for (Node scopeCall : traversal.getScopeCalls())",
      "info" : "EnhancedForStatement[6151-6569]:EnhancedForStatement[6151-6569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6200-6569]:Block[6200-6569]"
    }, {
      "left" : "Node expressionWithScopeCall = scopeCall.getParent();",
      "right" : "Node expressionWithScopeCall = scopeCall.getParent();",
      "info" : "VariableDeclarationStatement[6210-6263]:VariableDeclarationStatement[6210-6263]"
    }, {
      "left" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
      "right" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
      "info" : "VariableDeclarationStatement[6272-6337]:VariableDeclarationStatement[6272-6337]"
    }, {
      "left" : "scopeClosureBlock.detachFromParent();",
      "right" : "scopeClosureBlock.detachFromParent();",
      "info" : "ExpressionStatement[6346-6383]:ExpressionStatement[6346-6383]"
    }, {
      "left" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
      "right" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
      "info" : "ExpressionStatement[6392-6510]:ExpressionStatement[6392-6510]"
    }, {
      "left" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
      "right" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
      "info" : "ExpressionStatement[6519-6561]:ExpressionStatement[6519-6561]"
    }, {
      "left" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
      "right" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
      "info" : "IfStatement[6577-6779]:IfStatement[6577-6779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6733-6779]:Block[6733-6779]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[6743-6771]:ExpressionStatement[6743-6771]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6793-6800]:Modifier[6793-6800]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[6801-6809]:Modifier[6801-6809]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6810-6815]:TYPE_DECLARATION_KIND[6810-6815]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleName[6816-6826]:SimpleName[6816-6826]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleName[6889-6899]:SimpleName[6889-6899]"
    }, {
      "left" : "Var aliasVar",
      "right" : "Var aliasVar",
      "info" : "SingleVariableDeclaration[6900-6912]:SingleVariableDeclaration[6900-6912]"
    }, {
      "left" : "Node aliasReference",
      "right" : "Node aliasReference",
      "info" : "SingleVariableDeclaration[6914-6933]:SingleVariableDeclaration[6914-6933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6935-7018]:Block[6935-7018]"
    }, {
      "left" : "this.aliasVar = aliasVar;",
      "right" : "this.aliasVar = aliasVar;",
      "info" : "ExpressionStatement[6943-6968]:ExpressionStatement[6943-6968]"
    }, {
      "left" : "this.aliasReference = aliasReference;",
      "right" : "this.aliasReference = aliasReference;",
      "info" : "ExpressionStatement[6975-7012]:ExpressionStatement[6975-7012]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7083-7089]:Modifier[7083-7089]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7090-7097]:PrimitiveType[7090-7097]"
    }, {
      "left" : "referencesOtherAlias",
      "right" : "referencesOtherAlias",
      "info" : "SimpleName[7098-7118]:SimpleName[7098-7118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7121-7365]:Block[7121-7365]"
    }, {
      "left" : "Node aliasDefinition = aliasVar.getInitialValue();",
      "right" : "Node aliasDefinition = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[7129-7179]:VariableDeclarationStatement[7129-7179]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);",
      "info" : "VariableDeclarationStatement[7186-7247]:VariableDeclarationStatement[7186-7247]"
    }, {
      "left" : "Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());",
      "right" : "Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());",
      "info" : "VariableDeclarationStatement[7254-7323]:VariableDeclarationStatement[7254-7323]"
    }, {
      "left" : "return otherAliasVar != null;",
      "right" : "return otherAliasVar != null;",
      "info" : "ReturnStatement[7330-7359]:ReturnStatement[7330-7359]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7371-7377]:Modifier[7371-7377]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[7378-7386]:Modifier[7378-7386]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7387-7391]:PrimitiveType[7387-7391]"
    }, {
      "left" : "applyAlias",
      "right" : "applyAlias",
      "info" : "SimpleName[7392-7402]:SimpleName[7392-7402]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7413-7420]:Modifier[7413-7420]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7421-7426]:TYPE_DECLARATION_KIND[7421-7426]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "SimpleName[7427-7438]:SimpleName[7427-7438]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleType[7447-7457]:SimpleType[7447-7457]"
    }, {
      "left" : "AliasedNode",
      "right" : "AliasedNode",
      "info" : "SimpleName[7464-7475]:SimpleName[7464-7475]"
    }, {
      "left" : "Var aliasVar",
      "right" : "Var aliasVar",
      "info" : "SingleVariableDeclaration[7476-7488]:SingleVariableDeclaration[7476-7488]"
    }, {
      "left" : "Node aliasReference",
      "right" : "Node aliasReference",
      "info" : "SingleVariableDeclaration[7490-7509]:SingleVariableDeclaration[7490-7509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7511-7557]:Block[7511-7557]"
    }, {
      "left" : "super(aliasVar, aliasReference);",
      "right" : "super(aliasVar, aliasReference);",
      "info" : "SuperConstructorInvocation[7519-7551]:SuperConstructorInvocation[7519-7551]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7563-7572]:MarkerAnnotation[7563-7572]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7577-7583]:Modifier[7577-7583]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7584-7588]:PrimitiveType[7584-7588]"
    }, {
      "left" : "applyAlias",
      "right" : "applyAlias",
      "info" : "SimpleName[7589-7599]:SimpleName[7589-7599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7602-7769]:Block[7602-7769]"
    }, {
      "left" : "Node aliasDefinition = aliasVar.getInitialValue();",
      "right" : "Node aliasDefinition = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[7610-7660]:VariableDeclarationStatement[7610-7660]"
    }, {
      "left" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
      "right" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
      "info" : "ExpressionStatement[7667-7763]:ExpressionStatement[7667-7763]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7777-7784]:Modifier[7777-7784]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7785-7790]:TYPE_DECLARATION_KIND[7785-7790]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "SimpleName[7791-7806]:SimpleName[7791-7806]"
    }, {
      "left" : "AliasUsage",
      "right" : "AliasUsage",
      "info" : "SimpleType[7815-7825]:SimpleType[7815-7825]"
    }, {
      "left" : "AliasedTypeNode",
      "right" : "AliasedTypeNode",
      "info" : "SimpleName[7832-7847]:SimpleName[7832-7847]"
    }, {
      "left" : "Var aliasVar",
      "right" : "Var aliasVar",
      "info" : "SingleVariableDeclaration[7848-7860]:SingleVariableDeclaration[7848-7860]"
    }, {
      "left" : "Node aliasReference",
      "right" : "Node aliasReference",
      "info" : "SingleVariableDeclaration[7862-7881]:SingleVariableDeclaration[7862-7881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7883-7929]:Block[7883-7929]"
    }, {
      "left" : "super(aliasVar, aliasReference);",
      "right" : "super(aliasVar, aliasReference);",
      "info" : "SuperConstructorInvocation[7891-7923]:SuperConstructorInvocation[7891-7923]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7935-7944]:MarkerAnnotation[7935-7944]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7949-7955]:Modifier[7949-7955]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7956-7960]:PrimitiveType[7956-7960]"
    }, {
      "left" : "applyAlias",
      "right" : "applyAlias",
      "info" : "SimpleName[7961-7971]:SimpleName[7961-7971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7974-8441]:Block[7974-8441]"
    }, {
      "left" : "Node aliasDefinition = aliasVar.getInitialValue();",
      "right" : "Node aliasDefinition = aliasVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[7982-8032]:VariableDeclarationStatement[7982-8032]"
    }, {
      "left" : "String aliasName = aliasVar.getName();",
      "right" : "String aliasName = aliasVar.getName();",
      "info" : "VariableDeclarationStatement[8039-8077]:VariableDeclarationStatement[8039-8077]"
    }, {
      "left" : "String typeName = aliasReference.getString();",
      "right" : "String typeName = aliasReference.getString();",
      "info" : "VariableDeclarationStatement[8084-8129]:VariableDeclarationStatement[8084-8129]"
    }, {
      "left" : "String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());",
      "right" : "String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());",
      "info" : "VariableDeclarationStatement[8136-8232]:VariableDeclarationStatement[8136-8232]"
    }, {
      "left" : "Preconditions.checkState(typeName.startsWith(aliasName));",
      "right" : "Preconditions.checkState(typeName.startsWith(aliasName));",
      "info" : "ExpressionStatement[8239-8296]:ExpressionStatement[8239-8296]"
    }, {
      "left" : "String replacement =\n          aliasExpanded + typeName.substring(aliasName.length());",
      "right" : "String replacement =\n          aliasExpanded + typeName.substring(aliasName.length());",
      "info" : "VariableDeclarationStatement[8303-8389]:VariableDeclarationStatement[8303-8389]"
    }, {
      "left" : "aliasReference.setString(replacement);",
      "right" : "aliasReference.setString(replacement);",
      "info" : "ExpressionStatement[8396-8434]:ExpressionStatement[8396-8434]"
    }, {
      "left" : "NodeTraversal.ScopedCallback",
      "right" : "NodeTraversal.ScopedCallback",
      "info" : "SimpleType[8485-8513]:SimpleType[8485-8513]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[9772-9788]:ParameterizedType[9835-9851]"
    }, {
      "left" : "getAliasDefinitionsInOrder",
      "right" : "getAliasDefinitionsInOrder",
      "info" : "SimpleName[9789-9815]:SimpleName[9852-9878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9818-9863]:Block[9881-9926]"
    }, {
      "left" : "return aliasDefinitionsInOrder;",
      "right" : "return aliasDefinitionsInOrder;",
      "info" : "ReturnStatement[9826-9857]:ReturnStatement[9889-9920]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9869-9876]:Modifier[9932-9939]"
    }, {
      "left" : "List<AliasUsage>",
      "right" : "List<AliasUsage>",
      "info" : "ParameterizedType[9877-9893]:ParameterizedType[9940-9956]"
    }, {
      "left" : "getAliasUsages",
      "right" : "getAliasUsages",
      "info" : "SimpleName[9894-9908]:SimpleName[9957-9971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9911-9944]:Block[9974-10007]"
    }, {
      "left" : "return aliasUsages;",
      "right" : "return aliasUsages;",
      "info" : "ReturnStatement[9919-9938]:ReturnStatement[9982-10001]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[9950-9960]:ParameterizedType[10013-10023]"
    }, {
      "left" : "getScopeCalls",
      "right" : "getScopeCalls",
      "info" : "SimpleName[9961-9974]:SimpleName[10024-10037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9977-10009]:Block[10040-10072]"
    }, {
      "left" : "return scopeCalls;",
      "right" : "return scopeCalls;",
      "info" : "ReturnStatement[9985-10003]:ReturnStatement[10048-10066]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10015-10022]:PrimitiveType[10078-10085]"
    }, {
      "left" : "hasErrors",
      "right" : "hasErrors",
      "info" : "SimpleName[10023-10032]:SimpleName[10086-10095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10035-10066]:Block[10098-10129]"
    }, {
      "left" : "return hasErrors;",
      "right" : "return hasErrors;",
      "info" : "ReturnStatement[10043-10060]:ReturnStatement[10106-10123]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10072-10079]:Modifier[10135-10142]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10080-10087]:PrimitiveType[10143-10150]"
    }, {
      "left" : "isCallToScopeMethod",
      "right" : "isCallToScopeMethod",
      "info" : "SimpleName[10088-10107]:SimpleName[10151-10170]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10108-10114]:SingleVariableDeclaration[10171-10177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10116-10226]:Block[10179-10289]"
    }, {
      "left" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
      "right" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
      "info" : "ReturnStatement[10124-10220]:ReturnStatement[10187-10283]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10232-10241]:MarkerAnnotation[10295-10304]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10246-10252]:Modifier[10309-10315]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10253-10257]:PrimitiveType[10316-10320]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[10258-10268]:SimpleName[10321-10331]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10269-10284]:SingleVariableDeclaration[10332-10347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10286-10548]:Block[10349-10611]"
    }, {
      "left" : "Node n = t.getCurrentNode().getParent();",
      "right" : "Node n = t.getCurrentNode().getParent();",
      "info" : "VariableDeclarationStatement[10294-10334]:VariableDeclarationStatement[10357-10397]"
    }, {
      "left" : "if (n != null && isCallToScopeMethod(n))",
      "right" : "if (n != null && isCallToScopeMethod(n))",
      "info" : "IfStatement[10341-10542]:IfStatement[10404-10605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10382-10542]:Block[10445-10605]"
    }, {
      "left" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
      "right" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
      "info" : "ExpressionStatement[10392-10510]:ExpressionStatement[10455-10573]"
    }, {
      "left" : "findAliases(t);",
      "right" : "findAliases(t);",
      "info" : "ExpressionStatement[10519-10534]:ExpressionStatement[10582-10597]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10554-10563]:MarkerAnnotation[10617-10626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10568-10574]:Modifier[10631-10637]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10575-10579]:PrimitiveType[10638-10642]"
    }, {
      "left" : "exitScope",
      "right" : "exitScope",
      "info" : "SimpleName[10580-10589]:SimpleName[10643-10652]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10590-10605]:SingleVariableDeclaration[10653-10668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10607-10896]:Block[10670-10990]"
    }, {
      "left" : "if (t.getScopeDepth() > 2)",
      "right" : "if (t.getScopeDepth() > 2)",
      "info" : "IfStatement[10615-10684]:IfStatement[10678-10747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10642-10684]:Block[10705-10747]"
    }, {
      "left" : "findNamespaceShadows(t);",
      "right" : "findNamespaceShadows(t);",
      "info" : "ExpressionStatement[10652-10676]:ExpressionStatement[10715-10739]"
    }, {
      "left" : "if (t.getScopeDepth() == 2)",
      "right" : "if (t.getScopeDepth() == 2)",
      "info" : "IfStatement[10692-10890]:IfStatement[10755-10984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10720-10890]:Block[10783-10984]"
    }, {
      "left" : "renameNamespaceShadows(t);",
      "right" : "renameNamespaceShadows(t);",
      "info" : "ExpressionStatement[10730-10756]:ExpressionStatement[10793-10819]"
    }, {
      "left" : "aliases.clear();",
      "right" : "aliases.clear();",
      "info" : "ExpressionStatement[10765-10781]:ExpressionStatement[10859-10875]"
    }, {
      "left" : "forbiddenLocals.clear();",
      "right" : "forbiddenLocals.clear();",
      "info" : "ExpressionStatement[10790-10814]:ExpressionStatement[10884-10908]"
    }, {
      "left" : "transformation = null;",
      "right" : "transformation = null;",
      "info" : "ExpressionStatement[10823-10845]:ExpressionStatement[10917-10939]"
    }, {
      "left" : "hasNamespaceShadows = false;",
      "right" : "hasNamespaceShadows = false;",
      "info" : "ExpressionStatement[10854-10882]:ExpressionStatement[10948-10976]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10902-10911]:MarkerAnnotation[10996-11005]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10916-10922]:Modifier[11010-11016]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10923-10928]:Modifier[11017-11022]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10929-10936]:PrimitiveType[11023-11030]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[10937-10951]:SimpleName[11031-11045]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[10952-10967]:SingleVariableDeclaration[11046-11061]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10969-10975]:SingleVariableDeclaration[11063-11069]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10977-10988]:SingleVariableDeclaration[11071-11082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10990-11245]:Block[11084-11339]"
    }, {
      "left" : "if (n.isFunction() && t.inGlobalScope())",
      "right" : "if (n.isFunction() && t.inGlobalScope())",
      "info" : "IfStatement[10998-11220]:IfStatement[11092-11314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11039-11220]:Block[11133-11314]"
    }, {
      "left" : "if (parent == null || !isCallToScopeMethod(parent))",
      "right" : "if (parent == null || !isCallToScopeMethod(parent))",
      "info" : "IfStatement[11125-11212]:IfStatement[11219-11306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11177-11212]:Block[11271-11306]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11189-11202]:ReturnStatement[11283-11296]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11227-11239]:ReturnStatement[11321-11333]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11251-11258]:Modifier[11345-11352]"
    }, {
      "left" : "SourcePosition<AliasTransformation>",
      "right" : "SourcePosition<AliasTransformation>",
      "info" : "ParameterizedType[11259-11294]:ParameterizedType[11353-11388]"
    }, {
      "left" : "getSourceRegion",
      "right" : "getSourceRegion",
      "info" : "SimpleName[11295-11310]:SimpleName[11389-11404]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11311-11317]:SingleVariableDeclaration[11405-11411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11319-11874]:Block[11413-11968]"
    }, {
      "left" : "Node testNode = n;",
      "right" : "Node testNode = n;",
      "info" : "VariableDeclarationStatement[11327-11345]:VariableDeclarationStatement[11421-11439]"
    }, {
      "left" : "Node next = null;",
      "right" : "Node next = null;",
      "info" : "VariableDeclarationStatement[11352-11369]:VariableDeclarationStatement[11446-11463]"
    }, {
      "left" : "for (; next != null || testNode.isScript())",
      "right" : "for (; next != null || testNode.isScript())",
      "info" : "ForStatement[11376-11506]:ForStatement[11470-11600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11421-11506]:Block[11515-11600]"
    }, {
      "left" : "next = testNode.getNext();",
      "right" : "next = testNode.getNext();",
      "info" : "ExpressionStatement[11431-11457]:ExpressionStatement[11525-11551]"
    }, {
      "left" : "testNode = testNode.getParent();",
      "right" : "testNode = testNode.getParent();",
      "info" : "ExpressionStatement[11466-11498]:ExpressionStatement[11560-11592]"
    }, {
      "left" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
      "right" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
      "info" : "VariableDeclarationStatement[11514-11580]:VariableDeclarationStatement[11608-11674]"
    }, {
      "left" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
      "right" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
      "info" : "VariableDeclarationStatement[11587-11653]:VariableDeclarationStatement[11681-11747]"
    }, {
      "left" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
      "right" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
      "info" : "VariableDeclarationStatement[11660-11757]:VariableDeclarationStatement[11754-11851]"
    }, {
      "left" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
      "right" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
      "info" : "ExpressionStatement[11764-11850]:ExpressionStatement[11858-11944]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[11857-11868]:ReturnStatement[11951-11962]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11880-11887]:Modifier[11974-11981]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11888-11892]:PrimitiveType[11982-11986]"
    }, {
      "left" : "report",
      "right" : "report",
      "info" : "SimpleName[11893-11899]:SimpleName[11987-11993]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11900-11915]:SingleVariableDeclaration[11994-12009]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11917-11923]:SingleVariableDeclaration[12011-12017]"
    }, {
      "left" : "DiagnosticType error",
      "right" : "DiagnosticType error",
      "info" : "SingleVariableDeclaration[11925-11945]:SingleVariableDeclaration[12019-12039]"
    }, {
      "left" : "String... arguments",
      "right" : "String... arguments",
      "info" : "SingleVariableDeclaration[11955-11974]:SingleVariableDeclaration[12049-12068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11976-12064]:Block[12070-12158]"
    }, {
      "left" : "compiler.report(t.makeError(n, error, arguments));",
      "right" : "compiler.report(t.makeError(n, error, arguments));",
      "info" : "ExpressionStatement[11984-12034]:ExpressionStatement[12078-12128]"
    }, {
      "left" : "hasErrors = true;",
      "right" : "hasErrors = true;",
      "info" : "ExpressionStatement[12041-12058]:ExpressionStatement[12135-12152]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12070-12077]:Modifier[12164-12171]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12078-12082]:PrimitiveType[12172-12176]"
    }, {
      "left" : "findAliases",
      "right" : "findAliases",
      "info" : "SimpleName[12083-12094]:SimpleName[12177-12188]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[12095-12110]:SingleVariableDeclaration[12189-12204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12112-15851]:Block[12206-16001]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[12120-12147]:VariableDeclarationStatement[12214-12241]"
    }, {
      "left" : "for (Var v : scope.getVarIterable())",
      "right" : "for (Var v : scope.getVarIterable())",
      "info" : "EnhancedForStatement[12154-15845]:EnhancedForStatement[12248-15995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12191-15845]:Block[12285-15995]"
    }, {
      "left" : "Node n = v.getNode();",
      "right" : "Node n = v.getNode();",
      "info" : "VariableDeclarationStatement[12201-12222]:VariableDeclarationStatement[12295-12316]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[12231-12259]:VariableDeclarationStatement[12325-12353]"
    }, {
      "left" : "boolean isVar = parent.isVar();",
      "right" : "boolean isVar = parent.isVar();",
      "info" : "VariableDeclarationStatement[12268-12299]:VariableDeclarationStatement[12362-12393]"
    }, {
      "left" : "boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);",
      "right" : "boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);",
      "info" : "VariableDeclarationStatement[12308-12372]:VariableDeclarationStatement[12402-12466]"
    }, {
      "left" : "if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName())",
      "right" : "if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName())",
      "info" : "IfStatement[12381-15837]:IfStatement[12475-15987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12460-12497]:Block[12554-12591]"
    }, {
      "left" : "recordAlias(v);",
      "right" : "recordAlias(v);",
      "info" : "ExpressionStatement[12472-12487]:ExpressionStatement[12566-12581]"
    }, {
      "left" : "if (v.isBleedingFunction())",
      "right" : "if (v.isBleedingFunction())",
      "info" : "IfStatement[12503-15837]:IfStatement[12597-15987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12531-12643]:Block[12625-12737]"
    }, {
      "left" : "if (parent.getType() == Token.LP)",
      "right" : "if (parent.getType() == Token.LP)",
      "info" : "IfStatement[12649-15837]:IfStatement[12743-15987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12683-12786]:Block[12777-12880]"
    }, {
      "left" : "if (isVar || isFunctionDecl)",
      "right" : "if (isVar || isFunctionDecl)",
      "info" : "IfStatement[12792-15837]:IfStatement[12886-15987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12821-15684]:Block[12915-15834]"
    }, {
      "left" : "boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);",
      "right" : "boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);",
      "info" : "VariableDeclarationStatement[12833-12899]:VariableDeclarationStatement[12927-12993]"
    }, {
      "left" : "Node grandparent = parent.getParent();",
      "right" : "Node grandparent = parent.getParent();",
      "info" : "VariableDeclarationStatement[12910-12948]:VariableDeclarationStatement[13004-13042]"
    }, {
      "left" : "Node value = v.getInitialValue() != null ?\n              v.getInitialValue() :\n              null;",
      "right" : "Node value = v.getInitialValue() != null ?\n              v.getInitialValue() :\n              null;",
      "info" : "VariableDeclarationStatement[12959-13057]:VariableDeclarationStatement[13053-13151]"
    }, {
      "left" : "Node varNode = null;",
      "right" : "Node varNode = null;",
      "info" : "VariableDeclarationStatement[13068-13088]:VariableDeclarationStatement[13162-13182]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[13100-13128]:VariableDeclarationStatement[13194-13222]"
    }, {
      "left" : "int nameCount = scopedAliasNames.count(name);",
      "right" : "int nameCount = scopedAliasNames.count(name);",
      "info" : "VariableDeclarationStatement[13139-13184]:VariableDeclarationStatement[13233-13278]"
    }, {
      "left" : "scopedAliasNames.add(name);",
      "right" : "scopedAliasNames.add(name);",
      "info" : "ExpressionStatement[13195-13222]:ExpressionStatement[13289-13316]"
    }, {
      "left" : "String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));",
      "right" : "String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));",
      "info" : "VariableDeclarationStatement[13233-13335]:VariableDeclarationStatement[13327-13429]"
    }, {
      "left" : "compiler.ensureLibraryInjected(\"base\");",
      "right" : "compiler.ensureLibraryInjected(\"base\");",
      "info" : "ExpressionStatement[13347-13386]:ExpressionStatement[13441-13480]"
    }, {
      "left" : "if (isFunctionDecl)",
      "right" : "if (isFunctionDecl)",
      "info" : "IfStatement[13515-14684]:IfStatement[13609-14778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13535-14428]:Block[13629-14522]"
    }, {
      "left" : "Node existingName = v.getNameNode();",
      "right" : "Node existingName = v.getNameNode();",
      "info" : "VariableDeclarationStatement[13616-13652]:VariableDeclarationStatement[13710-13746]"
    }, {
      "left" : "Node newName = IR.name(\"\").useSourceInfoFrom(existingName);",
      "right" : "Node newName = IR.name(\"\").useSourceInfoFrom(existingName);",
      "info" : "VariableDeclarationStatement[14170-14229]:VariableDeclarationStatement[14264-14323]"
    }, {
      "left" : "value.replaceChild(existingName, newName);",
      "right" : "value.replaceChild(existingName, newName);",
      "info" : "ExpressionStatement[14242-14284]:ExpressionStatement[14336-14378]"
    }, {
      "left" : "varNode = IR.var(existingName).useSourceInfoFrom(existingName);",
      "right" : "varNode = IR.var(existingName).useSourceInfoFrom(existingName);",
      "info" : "ExpressionStatement[14298-14361]:ExpressionStatement[14392-14455]"
    }, {
      "left" : "grandparent.replaceChild(parent, varNode);",
      "right" : "grandparent.replaceChild(parent, varNode);",
      "info" : "ExpressionStatement[14374-14416]:ExpressionStatement[14468-14510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14434-14684]:Block[14528-14778]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[14448-14642]:IfStatement[14542-14736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14467-14642]:Block[14561-14736]"
    }, {
      "left" : "value.detachFromParent();",
      "right" : "value.detachFromParent();",
      "info" : "ExpressionStatement[14603-14628]:ExpressionStatement[14697-14722]"
    }, {
      "left" : "varNode = parent;",
      "right" : "varNode = parent;",
      "info" : "ExpressionStatement[14655-14672]:ExpressionStatement[14749-14766]"
    }, {
      "left" : "if (value != null || v.getJSDocInfo() != null)",
      "right" : "if (value != null || v.getJSDocInfo() != null)",
      "info" : "IfStatement[14806-15409]:IfStatement[14900-15559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14853-15409]:Block[14947-15559]"
    }, {
      "left" : "Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);",
      "right" : "Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);",
      "info" : "VariableDeclarationStatement[14867-15111]:VariableDeclarationStatement[14961-15205]"
    }, {
      "left" : "NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);",
      "right" : "NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);",
      "info" : "ExpressionStatement[15124-15220]:ExpressionStatement[15218-15314]"
    }, {
      "left" : "if (isHoisted)",
      "right" : "if (isHoisted)",
      "info" : "IfStatement[15234-15397]:IfStatement[15328-15491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15249-15316]:Block[15343-15410]"
    }, {
      "left" : "grandparent.addChildToFront(newDecl);",
      "right" : "grandparent.addChildToFront(newDecl);",
      "info" : "ExpressionStatement[15265-15302]:ExpressionStatement[15359-15396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15322-15397]:Block[15416-15491]"
    }, {
      "left" : "grandparent.addChildBefore(newDecl, varNode);",
      "right" : "grandparent.addChildBefore(newDecl, varNode);",
      "info" : "ExpressionStatement[15338-15383]:ExpressionStatement[15432-15477]"
    }, {
      "left" : "v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));",
      "right" : "v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));",
      "info" : "ExpressionStatement[15497-15647]:ExpressionStatement[15647-15797]"
    }, {
      "left" : "recordAlias(v);",
      "right" : "recordAlias(v);",
      "info" : "ExpressionStatement[15659-15674]:ExpressionStatement[15809-15824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15690-15837]:Block[15840-15987]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
      "right" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
      "info" : "ExpressionStatement[15771-15827]:ExpressionStatement[15921-15977]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15857-15864]:Modifier[16007-16014]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15865-15869]:PrimitiveType[16015-16019]"
    }, {
      "left" : "recordAlias",
      "right" : "recordAlias",
      "info" : "SimpleName[15870-15881]:SimpleName[16020-16031]"
    }, {
      "left" : "Var aliasVar",
      "right" : "Var aliasVar",
      "info" : "SingleVariableDeclaration[15882-15894]:SingleVariableDeclaration[16032-16044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15896-16368]:Block[16046-16518]"
    }, {
      "left" : "String name = aliasVar.getName();",
      "right" : "String name = aliasVar.getName();",
      "info" : "VariableDeclarationStatement[15904-15937]:VariableDeclarationStatement[16054-16087]"
    }, {
      "left" : "aliases.put(name, aliasVar);",
      "right" : "aliases.put(name, aliasVar);",
      "info" : "ExpressionStatement[15944-15972]:ExpressionStatement[16094-16122]"
    }, {
      "left" : "String qualifiedName =\n        aliasVar.getInitialValue().getQualifiedName();",
      "right" : "String qualifiedName =\n        aliasVar.getInitialValue().getQualifiedName();",
      "info" : "VariableDeclarationStatement[15980-16057]:VariableDeclarationStatement[16130-16207]"
    }, {
      "left" : "transformation.addAlias(name, qualifiedName);",
      "right" : "transformation.addAlias(name, qualifiedName);",
      "info" : "ExpressionStatement[16064-16109]:ExpressionStatement[16214-16259]"
    }, {
      "left" : "int rootIndex = qualifiedName.indexOf(\".\");",
      "right" : "int rootIndex = qualifiedName.indexOf(\".\");",
      "info" : "VariableDeclarationStatement[16117-16160]:VariableDeclarationStatement[16267-16310]"
    }, {
      "left" : "if (rootIndex != -1)",
      "right" : "if (rootIndex != -1)",
      "info" : "IfStatement[16167-16362]:IfStatement[16317-16512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16188-16362]:Block[16338-16512]"
    }, {
      "left" : "String qNameRoot = qualifiedName.substring(0, rootIndex);",
      "right" : "String qNameRoot = qualifiedName.substring(0, rootIndex);",
      "info" : "VariableDeclarationStatement[16198-16255]:VariableDeclarationStatement[16348-16405]"
    }, {
      "left" : "if (!aliases.containsKey(qNameRoot))",
      "right" : "if (!aliases.containsKey(qNameRoot))",
      "info" : "IfStatement[16264-16354]:IfStatement[16414-16504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16301-16354]:Block[16451-16504]"
    }, {
      "left" : "forbiddenLocals.add(qNameRoot);",
      "right" : "forbiddenLocals.add(qNameRoot);",
      "info" : "ExpressionStatement[16313-16344]:ExpressionStatement[16463-16494]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16440-16447]:Modifier[16590-16597]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16448-16452]:PrimitiveType[16598-16602]"
    }, {
      "left" : "findNamespaceShadows",
      "right" : "findNamespaceShadows",
      "info" : "SimpleName[16453-16473]:SimpleName[16603-16623]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[16474-16489]:SingleVariableDeclaration[16624-16639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16491-16762]:Block[16641-16912]"
    }, {
      "left" : "if (hasNamespaceShadows)",
      "right" : "if (hasNamespaceShadows)",
      "info" : "IfStatement[16499-16549]:IfStatement[16649-16699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16524-16549]:Block[16674-16699]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16534-16541]:ReturnStatement[16684-16691]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[16557-16584]:VariableDeclarationStatement[16707-16734]"
    }, {
      "left" : "for (Var v : scope.getVarIterable())",
      "right" : "for (Var v : scope.getVarIterable())",
      "info" : "EnhancedForStatement[16591-16756]:EnhancedForStatement[16741-16906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16628-16756]:Block[16778-16906]"
    }, {
      "left" : "if (forbiddenLocals.contains(v.getName()))",
      "right" : "if (forbiddenLocals.contains(v.getName()))",
      "info" : "IfStatement[16638-16748]:IfStatement[16788-16898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16681-16748]:Block[16831-16898]"
    }, {
      "left" : "hasNamespaceShadows = true;",
      "right" : "hasNamespaceShadows = true;",
      "info" : "ExpressionStatement[16693-16720]:ExpressionStatement[16843-16870]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16731-16738]:ReturnStatement[16881-16888]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16938-16945]:Modifier[17088-17095]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16946-16950]:PrimitiveType[17096-17100]"
    }, {
      "left" : "renameNamespaceShadows",
      "right" : "renameNamespaceShadows",
      "info" : "SimpleName[16951-16973]:SimpleName[17101-17123]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[16974-16989]:SingleVariableDeclaration[17124-17139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16991-17506]:Block[17141-17656]"
    }, {
      "left" : "if (hasNamespaceShadows)",
      "right" : "if (hasNamespaceShadows)",
      "info" : "IfStatement[16999-17500]:IfStatement[17149-17650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17024-17500]:Block[17174-17650]"
    }, {
      "left" : "MakeDeclaredNamesUnique.Renamer renamer =\n            new MakeDeclaredNamesUnique.WhitelistedRenamer(\n                new MakeDeclaredNamesUnique.ContextualRenamer(),\n                forbiddenLocals);",
      "right" : "MakeDeclaredNamesUnique.Renamer renamer =\n            new MakeDeclaredNamesUnique.WhitelistedRenamer(\n                new MakeDeclaredNamesUnique.ContextualRenamer(),\n                forbiddenLocals);",
      "info" : "VariableDeclarationStatement[17034-17234]:VariableDeclarationStatement[17184-17384]"
    }, {
      "left" : "for (String s : forbiddenLocals)",
      "right" : "for (String s : forbiddenLocals)",
      "info" : "EnhancedForStatement[17243-17325]:EnhancedForStatement[17393-17475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17276-17325]:Block[17426-17475]"
    }, {
      "left" : "renamer.addDeclaredName(s);",
      "right" : "renamer.addDeclaredName(s);",
      "info" : "ExpressionStatement[17288-17315]:ExpressionStatement[17438-17465]"
    }, {
      "left" : "MakeDeclaredNamesUnique uniquifier =\n            new MakeDeclaredNamesUnique(renamer);",
      "right" : "MakeDeclaredNamesUnique uniquifier =\n            new MakeDeclaredNamesUnique(renamer);",
      "info" : "VariableDeclarationStatement[17334-17420]:VariableDeclarationStatement[17484-17570]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);",
      "right" : "NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);",
      "info" : "ExpressionStatement[17429-17492]:ExpressionStatement[17579-17642]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17512-17519]:Modifier[17662-17669]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17520-17524]:PrimitiveType[17670-17674]"
    }, {
      "left" : "validateScopeCall",
      "right" : "validateScopeCall",
      "info" : "SimpleName[17525-17542]:SimpleName[17675-17692]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[17543-17558]:SingleVariableDeclaration[17693-17708]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17560-17566]:SingleVariableDeclaration[17710-17716]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[17568-17579]:SingleVariableDeclaration[17718-17729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17581-18429]:Block[17731-18579]"
    }, {
      "left" : "if (preprocessorSymbolTable != null)",
      "right" : "if (preprocessorSymbolTable != null)",
      "info" : "IfStatement[17589-17700]:IfStatement[17739-17850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17626-17700]:Block[17776-17850]"
    }, {
      "left" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
      "right" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
      "info" : "ExpressionStatement[17636-17692]:ExpressionStatement[17786-17842]"
    }, {
      "left" : "if (!parent.isExprResult())",
      "right" : "if (!parent.isExprResult())",
      "info" : "IfStatement[17707-17794]:IfStatement[17857-17944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17735-17794]:Block[17885-17944]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
      "right" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
      "info" : "ExpressionStatement[17745-17786]:ExpressionStatement[17895-17936]"
    }, {
      "left" : "if (n.getChildCount() != 2)",
      "right" : "if (n.getChildCount() != 2)",
      "info" : "IfStatement[17801-18423]:IfStatement[17951-18573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17829-18043]:Block[17979-18193]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "right" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "info" : "ExpressionStatement[17991-18035]:ExpressionStatement[18141-18185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18049-18423]:Block[18199-18573]"
    }, {
      "left" : "Node anonymousFnNode = n.getChildAtIndex(1);",
      "right" : "Node anonymousFnNode = n.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[18059-18103]:VariableDeclarationStatement[18209-18253]"
    }, {
      "left" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
      "right" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
      "info" : "IfStatement[18112-18415]:IfStatement[18262-18565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18289-18369]:Block[18439-18519]"
    }, {
      "left" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "right" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
      "info" : "ExpressionStatement[18301-18359]:ExpressionStatement[18451-18509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18375-18415]:Block[18525-18565]"
    }, {
      "left" : "scopeCalls.add(n);",
      "right" : "scopeCalls.add(n);",
      "info" : "ExpressionStatement[18387-18405]:ExpressionStatement[18537-18555]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18435-18444]:MarkerAnnotation[18585-18594]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18449-18455]:Modifier[18599-18605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18456-18460]:PrimitiveType[18606-18610]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[18461-18466]:SimpleName[18611-18616]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18467-18482]:SingleVariableDeclaration[18617-18632]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18484-18490]:SingleVariableDeclaration[18634-18640]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18492-18503]:SingleVariableDeclaration[18642-18653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18505-20730]:Block[18655-20910]"
    }, {
      "left" : "if (isCallToScopeMethod(n))",
      "right" : "if (isCallToScopeMethod(n))",
      "info" : "IfStatement[18513-18598]:IfStatement[18663-18748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18541-18598]:Block[18691-18748]"
    }, {
      "left" : "validateScopeCall(t, n, n.getParent());",
      "right" : "validateScopeCall(t, n, n.getParent());",
      "info" : "ExpressionStatement[18551-18590]:ExpressionStatement[18701-18740]"
    }, {
      "left" : "if (t.getScopeDepth() < 2)",
      "right" : "if (t.getScopeDepth() < 2)",
      "info" : "IfStatement[18606-18658]:IfStatement[18756-18808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18633-18658]:Block[18783-18808]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18643-18650]:ReturnStatement[18793-18800]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[18666-18689]:VariableDeclarationStatement[18816-18839]"
    }, {
      "left" : "Var aliasVar = null;",
      "right" : "Var aliasVar = null;",
      "info" : "VariableDeclarationStatement[18696-18716]:VariableDeclarationStatement[18846-18866]"
    }, {
      "left" : "if (type == Token.NAME)",
      "right" : "if (type == Token.NAME)",
      "info" : "IfStatement[18723-18966]:IfStatement[18873-19116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18747-18966]:Block[18897-19116]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[18757-18785]:VariableDeclarationStatement[18907-18935]"
    }, {
      "left" : "Var lexicalVar = t.getScope().getVar(n.getString());",
      "right" : "Var lexicalVar = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[18794-18846]:VariableDeclarationStatement[18944-18996]"
    }, {
      "left" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
      "right" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
      "info" : "IfStatement[18855-18958]:IfStatement[19005-19108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18914-18958]:Block[19064-19108]"
    }, {
      "left" : "aliasVar = lexicalVar;",
      "right" : "aliasVar = lexicalVar;",
      "info" : "ExpressionStatement[18926-18948]:ExpressionStatement[19076-19098]"
    }, {
      "left" : "if (t.getScopeDepth() == 2)",
      "right" : "if (t.getScopeDepth() == 2)",
      "info" : "IfStatement[19031-19712]:IfStatement[19181-19862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19059-19712]:Block[19209-19862]"
    }, {
      "left" : "if (aliasVar != null && NodeUtil.isLValue(n))",
      "right" : "if (aliasVar != null && NodeUtil.isLValue(n))",
      "info" : "IfStatement[19069-19427]:IfStatement[19219-19577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19115-19427]:Block[19265-19577]"
    }, {
      "left" : "if (aliasVar.getNode() == n)",
      "right" : "if (aliasVar.getNode() == n)",
      "info" : "IfStatement[19127-19417]:IfStatement[19277-19567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19156-19329]:Block[19306-19479]"
    }, {
      "left" : "aliasDefinitionsInOrder.add(n);",
      "right" : "aliasDefinitionsInOrder.add(n);",
      "info" : "ExpressionStatement[19170-19201]:ExpressionStatement[19320-19351]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19310-19317]:ReturnStatement[19460-19467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19335-19417]:Block[19485-19567]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
      "right" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
      "info" : "ExpressionStatement[19349-19405]:ExpressionStatement[19499-19555]"
    }, {
      "left" : "if (type == Token.RETURN)",
      "right" : "if (type == Token.RETURN)",
      "info" : "IfStatement[19437-19704]:IfStatement[19587-19854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19463-19522]:Block[19613-19672]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
      "right" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
      "info" : "ExpressionStatement[19475-19512]:ExpressionStatement[19625-19662]"
    }, {
      "left" : "if (type == Token.THIS)",
      "right" : "if (type == Token.THIS)",
      "info" : "IfStatement[19528-19704]:IfStatement[19678-19854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19552-19615]:Block[19702-19765]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
      "right" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
      "info" : "ExpressionStatement[19564-19605]:ExpressionStatement[19714-19755]"
    }, {
      "left" : "if (type == Token.THROW)",
      "right" : "if (type == Token.THROW)",
      "info" : "IfStatement[19621-19704]:IfStatement[19771-19854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19646-19704]:Block[19796-19854]"
    }, {
      "left" : "report(t, n, GOOG_SCOPE_USES_THROW);",
      "right" : "report(t, n, GOOG_SCOPE_USES_THROW);",
      "info" : "ExpressionStatement[19658-19694]:ExpressionStatement[19808-19844]"
    }, {
      "left" : "if (t.getScopeDepth() >= 2)",
      "right" : "if (t.getScopeDepth() >= 2)",
      "info" : "IfStatement[19785-20724]:IfStatement[19935-20904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19813-20724]:Block[19963-20904]"
    }, {
      "left" : "if (aliasVar != null)",
      "right" : "if (aliasVar != null)",
      "info" : "IfStatement[19873-20367]:IfStatement[20023-20517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19895-20367]:Block[20045-20517]"
    }, {
      "left" : "aliasUsages.add(new AliasedNode(aliasVar, n));",
      "right" : "aliasUsages.add(new AliasedNode(aliasVar, n));",
      "info" : "ExpressionStatement[20311-20357]:ExpressionStatement[20461-20507]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[20491-20525]:VariableDeclarationStatement[20641-20675]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null && !injectedDecls.contains(n))",
      "info" : "IfStatement[20534-20656]:IfStatement[20684-20836]"
    }, {
      "left" : "info != null",
      "right" : "info != null",
      "info" : "InfixExpression[20538-20550]:InfixExpression[20688-20700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20552-20656]:Block[20732-20836]"
    }, {
      "left" : "for (Node node : info.getTypeNodes())",
      "right" : "for (Node node : info.getTypeNodes())",
      "info" : "EnhancedForStatement[20564-20646]:EnhancedForStatement[20744-20826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20602-20646]:Block[20782-20826]"
    }, {
      "left" : "fixTypeNode(node);",
      "right" : "fixTypeNode(node);",
      "info" : "ExpressionStatement[20616-20634]:ExpressionStatement[20796-20814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20736-20743]:Modifier[20916-20923]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20744-20748]:PrimitiveType[20924-20928]"
    }, {
      "left" : "fixTypeNode",
      "right" : "fixTypeNode",
      "info" : "SimpleName[20749-20760]:SimpleName[20929-20940]"
    }, {
      "left" : "Node typeNode",
      "right" : "Node typeNode",
      "info" : "SingleVariableDeclaration[20761-20774]:SingleVariableDeclaration[20941-20954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20776-21337]:Block[20956-21517]"
    }, {
      "left" : "if (typeNode.isString())",
      "right" : "if (typeNode.isString())",
      "info" : "IfStatement[20784-21191]:IfStatement[20964-21371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20809-21191]:Block[20989-21371]"
    }, {
      "left" : "String name = typeNode.getString();",
      "right" : "String name = typeNode.getString();",
      "info" : "VariableDeclarationStatement[20819-20854]:VariableDeclarationStatement[20999-21034]"
    }, {
      "left" : "int endIndex = name.indexOf('.');",
      "right" : "int endIndex = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[20863-20896]:VariableDeclarationStatement[21043-21076]"
    }, {
      "left" : "if (endIndex == -1)",
      "right" : "if (endIndex == -1)",
      "info" : "IfStatement[20905-20972]:IfStatement[21085-21152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20925-20972]:Block[21105-21152]"
    }, {
      "left" : "endIndex = name.length();",
      "right" : "endIndex = name.length();",
      "info" : "ExpressionStatement[20937-20962]:ExpressionStatement[21117-21142]"
    }, {
      "left" : "String baseName = name.substring(0, endIndex);",
      "right" : "String baseName = name.substring(0, endIndex);",
      "info" : "VariableDeclarationStatement[20981-21027]:VariableDeclarationStatement[21161-21207]"
    }, {
      "left" : "Var aliasVar = aliases.get(baseName);",
      "right" : "Var aliasVar = aliases.get(baseName);",
      "info" : "VariableDeclarationStatement[21036-21073]:VariableDeclarationStatement[21216-21253]"
    }, {
      "left" : "if (aliasVar != null)",
      "right" : "if (aliasVar != null)",
      "info" : "IfStatement[21082-21183]:IfStatement[21262-21363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21104-21183]:Block[21284-21363]"
    }, {
      "left" : "aliasUsages.add(new AliasedTypeNode(aliasVar, typeNode));",
      "right" : "aliasUsages.add(new AliasedTypeNode(aliasVar, typeNode));",
      "info" : "ExpressionStatement[21116-21173]:ExpressionStatement[21296-21353]"
    }, {
      "left" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
      "right" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
      "info" : "ForStatement[21199-21331]:ForStatement[21379-21511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21294-21331]:Block[21474-21511]"
    }, {
      "left" : "fixTypeNode(child);",
      "right" : "fixTypeNode(child);",
      "info" : "ExpressionStatement[21304-21323]:ExpressionStatement[21484-21503]"
    } ]
  },
  "interFileMappings" : { }
}