{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "QueryParser",
      "right" : "QueryParser",
      "info" : "TypeDeclaration[250-13580]:TypeDeclaration[250-13722]"
    }, {
      "left" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "right" : "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};",
      "info" : "FieldDeclaration[338-408]:FieldDeclaration[338-408]"
    }, {
      "left" : "private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};",
      "right" : "private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};",
      "info" : "FieldDeclaration[413-508]:FieldDeclaration[413-508]"
    }, {
      "left" : "private TokenQueue tq;",
      "right" : "private TokenQueue tq;",
      "info" : "FieldDeclaration[514-536]:FieldDeclaration[514-536]"
    }, {
      "left" : "private String query;",
      "right" : "private String query;",
      "info" : "FieldDeclaration[541-562]:FieldDeclaration[541-562]"
    }, {
      "left" : "private List<Evaluator> evals = new ArrayList<Evaluator>();",
      "right" : "private List<Evaluator> evals = new ArrayList<Evaluator>();",
      "info" : "FieldDeclaration[567-626]:FieldDeclaration[567-626]"
    }, {
      "left" : "private QueryParser(String query)",
      "right" : "private QueryParser(String query)",
      "info" : "MethodDeclaration[632-821]:MethodDeclaration[632-821]"
    }, {
      "left" : "public static Evaluator parse(String query)",
      "right" : "public static Evaluator parse(String query)",
      "info" : "MethodDeclaration[827-1075]:MethodDeclaration[827-1217]"
    }, {
      "left" : "Evaluator parse()",
      "right" : "Evaluator parse()",
      "info" : "MethodDeclaration[1081-1991]:MethodDeclaration[1223-2133]"
    }, {
      "left" : "private void combinator(char combinator)",
      "right" : "private void combinator(char combinator)",
      "info" : "MethodDeclaration[1997-4385]:MethodDeclaration[2139-4527]"
    }, {
      "left" : "private String consumeSubQuery()",
      "right" : "private String consumeSubQuery()",
      "info" : "MethodDeclaration[4391-4910]:MethodDeclaration[4533-5052]"
    }, {
      "left" : "private void findElements()",
      "right" : "private void findElements()",
      "info" : "MethodDeclaration[4916-7201]:MethodDeclaration[5058-7343]"
    }, {
      "left" : "private void byId()",
      "right" : "private void byId()",
      "info" : "MethodDeclaration[7207-7353]:MethodDeclaration[7349-7495]"
    }, {
      "left" : "private void byClass()",
      "right" : "private void byClass()",
      "info" : "MethodDeclaration[7359-7539]:MethodDeclaration[7501-7681]"
    }, {
      "left" : "private void byTag()",
      "right" : "private void byTag()",
      "info" : "MethodDeclaration[7545-8231]:MethodDeclaration[7687-8373]"
    }, {
      "left" : "private void byAttribute()",
      "right" : "private void byAttribute()",
      "info" : "MethodDeclaration[8237-9728]:MethodDeclaration[8379-9870]"
    }, {
      "left" : "private void allElements()",
      "right" : "private void allElements()",
      "info" : "MethodDeclaration[9734-9816]:MethodDeclaration[9876-9958]"
    }, {
      "left" : "private void indexLessThan()",
      "right" : "private void indexLessThan()",
      "info" : "MethodDeclaration[9860-9960]:MethodDeclaration[10002-10102]"
    }, {
      "left" : "private void indexGreaterThan()",
      "right" : "private void indexGreaterThan()",
      "info" : "MethodDeclaration[9966-10072]:MethodDeclaration[10108-10214]"
    }, {
      "left" : "private void indexEquals()",
      "right" : "private void indexEquals()",
      "info" : "MethodDeclaration[10078-10174]:MethodDeclaration[10220-10316]"
    }, {
      "left" : "private static final Pattern NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE);",
      "right" : "private static final Pattern NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE);",
      "info" : "FieldDeclaration[10250-10375]:FieldDeclaration[10392-10517]"
    }, {
      "left" : "private static final Pattern NTH_B  = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\");",
      "right" : "private static final Pattern NTH_B  = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\");",
      "info" : "FieldDeclaration[10380-10452]:FieldDeclaration[10522-10594]"
    }, {
      "left" : "private void cssNthChild(boolean backwards, boolean ofType)",
      "right" : "private void cssNthChild(boolean backwards, boolean ofType)",
      "info" : "MethodDeclaration[10455-11479]:MethodDeclaration[10597-11621]"
    }, {
      "left" : "private int consumeIndex()",
      "right" : "private int consumeIndex()",
      "info" : "MethodDeclaration[11485-11688]:MethodDeclaration[11627-11830]"
    }, {
      "left" : "private void has()",
      "right" : "private void has()",
      "info" : "MethodDeclaration[11726-11976]:MethodDeclaration[11868-12118]"
    }, {
      "left" : "private void contains(boolean own)",
      "right" : "private void contains(boolean own)",
      "info" : "MethodDeclaration[12040-12456]:MethodDeclaration[12182-12598]"
    }, {
      "left" : "private void containsData()",
      "right" : "private void containsData()",
      "info" : "MethodDeclaration[12505-12799]:MethodDeclaration[12647-12941]"
    }, {
      "left" : "private void matches(boolean own)",
      "right" : "private void matches(boolean own)",
      "info" : "MethodDeclaration[12847-13293]:MethodDeclaration[12989-13435]"
    }, {
      "left" : "private void not()",
      "right" : "private void not()",
      "info" : "MethodDeclaration[13321-13578]:MethodDeclaration[13463-13720]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[307-313]:Modifier[307-313]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[314-319]:TYPE_DECLARATION_KIND[314-319]"
    }, {
      "left" : "QueryParser",
      "right" : "QueryParser",
      "info" : "SimpleName[320-331]:SimpleName[320-331]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[711-718]:Modifier[711-718]"
    }, {
      "left" : "QueryParser",
      "right" : "QueryParser",
      "info" : "SimpleName[719-730]:SimpleName[719-730]"
    }, {
      "left" : "String query",
      "right" : "String query",
      "info" : "SingleVariableDeclaration[731-743]:SingleVariableDeclaration[731-743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[745-821]:Block[745-821]"
    }, {
      "left" : "this.query = query;",
      "right" : "this.query = query;",
      "info" : "ExpressionStatement[755-774]:ExpressionStatement[755-774]"
    }, {
      "left" : "this.tq = new TokenQueue(query);",
      "right" : "this.tq = new TokenQueue(query);",
      "info" : "ExpressionStatement[783-815]:ExpressionStatement[783-815]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[942-948]:Modifier[942-948]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[949-955]:Modifier[949-955]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[966-971]:SimpleName[966-971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[986-1075]:Block[986-1217]"
    }, {
      "left" : "QueryParser p = new QueryParser(query);",
      "right" : "QueryParser p = new QueryParser(query);",
      "info" : "VariableDeclarationStatement[1000-1039]:VariableDeclarationStatement[1014-1053]"
    }, {
      "left" : "return p.parse();",
      "right" : "return p.parse();",
      "info" : "ReturnStatement[1052-1069]:ReturnStatement[1066-1083]"
    }, {
      "left" : "Evaluator",
      "right" : "Evaluator",
      "info" : "SimpleType[1145-1154]:SimpleType[1287-1296]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[1155-1160]:SimpleName[1297-1302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1163-1991]:Block[1305-2133]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[1173-1196]:ExpressionStatement[1315-1338]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[1206-1440]:IfStatement[1348-1582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1238-1395]:Block[1380-1537]"
    }, {
      "left" : "evals.add(new StructuralEvaluator.Root());",
      "right" : "evals.add(new StructuralEvaluator.Root());",
      "info" : "ExpressionStatement[1305-1347]:ExpressionStatement[1447-1489]"
    }, {
      "left" : "combinator(tq.consume());",
      "right" : "combinator(tq.consume());",
      "info" : "ExpressionStatement[1360-1385]:ExpressionStatement[1502-1527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1401-1440]:Block[1543-1582]"
    }, {
      "left" : "findElements();",
      "right" : "findElements();",
      "info" : "ExpressionStatement[1415-1430]:ExpressionStatement[1557-1572]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[1450-1869]:WhileStatement[1592-2011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1472-1869]:Block[1614-2011]"
    }, {
      "left" : "boolean seenWhite = tq.consumeWhitespace();",
      "right" : "boolean seenWhite = tq.consumeWhitespace();",
      "info" : "VariableDeclarationStatement[1522-1565]:VariableDeclarationStatement[1664-1707]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[1579-1859]:IfStatement[1721-2001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1611-1668]:Block[1753-1810]"
    }, {
      "left" : "combinator(tq.consume());",
      "right" : "combinator(tq.consume());",
      "info" : "ExpressionStatement[1629-1654]:ExpressionStatement[1771-1796]"
    }, {
      "left" : "if (seenWhite)",
      "right" : "if (seenWhite)",
      "info" : "IfStatement[1674-1859]:IfStatement[1816-2001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1689-1737]:Block[1831-1879]"
    }, {
      "left" : "combinator(' ');",
      "right" : "combinator(' ');",
      "info" : "ExpressionStatement[1707-1723]:ExpressionStatement[1849-1865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1743-1859]:Block[1885-2001]"
    }, {
      "left" : "findElements();",
      "right" : "findElements();",
      "info" : "ExpressionStatement[1796-1811]:ExpressionStatement[1938-1953]"
    }, {
      "left" : "if (evals.size() == 1)",
      "right" : "if (evals.size() == 1)",
      "info" : "IfStatement[1879-1934]:IfStatement[2021-2076]"
    }, {
      "left" : "return evals.get(0);",
      "right" : "return evals.get(0);",
      "info" : "ReturnStatement[1914-1934]:ReturnStatement[2056-2076]"
    }, {
      "left" : "return new CombiningEvaluator.And(evals);",
      "right" : "return new CombiningEvaluator.And(evals);",
      "info" : "ReturnStatement[1944-1985]:ReturnStatement[2086-2127]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1997-2004]:Modifier[2139-2146]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2005-2009]:PrimitiveType[2147-2151]"
    }, {
      "left" : "combinator",
      "right" : "combinator",
      "info" : "SimpleName[2010-2020]:SimpleName[2152-2162]"
    }, {
      "left" : "char combinator",
      "right" : "char combinator",
      "info" : "SingleVariableDeclaration[2021-2036]:SingleVariableDeclaration[2163-2178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2038-4385]:Block[2180-4527]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[2048-2071]:ExpressionStatement[2190-2213]"
    }, {
      "left" : "String subQuery = consumeSubQuery();",
      "right" : "String subQuery = consumeSubQuery();",
      "info" : "VariableDeclarationStatement[2080-2116]:VariableDeclarationStatement[2222-2258]"
    }, {
      "left" : "Evaluator rootEval;",
      "right" : "Evaluator rootEval;",
      "info" : "VariableDeclarationStatement[2152-2171]:VariableDeclarationStatement[2294-2313]"
    }, {
      "left" : "Evaluator currentEval;",
      "right" : "Evaluator currentEval;",
      "info" : "VariableDeclarationStatement[2209-2231]:VariableDeclarationStatement[2351-2373]"
    }, {
      "left" : "Evaluator newEval = parse(subQuery);",
      "right" : "Evaluator newEval = parse(subQuery);",
      "info" : "VariableDeclarationStatement[2323-2359]:VariableDeclarationStatement[2465-2501]"
    }, {
      "left" : "boolean replaceRightMost = false;",
      "right" : "boolean replaceRightMost = false;",
      "info" : "VariableDeclarationStatement[2414-2447]:VariableDeclarationStatement[2556-2589]"
    }, {
      "left" : "if (evals.size() == 1)",
      "right" : "if (evals.size() == 1)",
      "info" : "IfStatement[2457-2914]:IfStatement[2599-3056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2480-2817]:Block[2622-2959]"
    }, {
      "left" : "rootEval = currentEval = evals.get(0);",
      "right" : "rootEval = currentEval = evals.get(0);",
      "info" : "ExpressionStatement[2494-2532]:ExpressionStatement[2636-2674]"
    }, {
      "left" : "if (rootEval instanceof CombiningEvaluator.Or && combinator != ',')",
      "right" : "if (rootEval instanceof CombiningEvaluator.Or && combinator != ',')",
      "info" : "IfStatement[2593-2807]:IfStatement[2735-2949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2661-2807]:Block[2803-2949]"
    }, {
      "left" : "currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();",
      "right" : "currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();",
      "info" : "ExpressionStatement[2679-2752]:ExpressionStatement[2821-2894]"
    }, {
      "left" : "replaceRightMost = true;",
      "right" : "replaceRightMost = true;",
      "info" : "ExpressionStatement[2769-2793]:ExpressionStatement[2911-2935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2831-2914]:Block[2973-3056]"
    }, {
      "left" : "rootEval = currentEval = new CombiningEvaluator.And(evals);",
      "right" : "rootEval = currentEval = new CombiningEvaluator.And(evals);",
      "info" : "ExpressionStatement[2845-2904]:ExpressionStatement[2987-3046]"
    }, {
      "left" : "evals.clear();",
      "right" : "evals.clear();",
      "info" : "ExpressionStatement[2923-2937]:ExpressionStatement[3065-3079]"
    }, {
      "left" : "if (combinator == '>')",
      "right" : "if (combinator == '>')",
      "info" : "IfStatement[3053-4195]:IfStatement[3195-4337]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));",
      "info" : "ExpressionStatement[3088-3192]:ExpressionStatement[3230-3334]"
    }, {
      "left" : "if (combinator == ' ')",
      "right" : "if (combinator == ' ')",
      "info" : "IfStatement[3206-4195]:IfStatement[3348-4337]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));",
      "info" : "ExpressionStatement[3241-3336]:ExpressionStatement[3383-3478]"
    }, {
      "left" : "if (combinator == '+')",
      "right" : "if (combinator == '+')",
      "info" : "IfStatement[3350-4195]:IfStatement[3492-4337]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));",
      "info" : "ExpressionStatement[3385-3498]:ExpressionStatement[3527-3640]"
    }, {
      "left" : "if (combinator == '~')",
      "right" : "if (combinator == '~')",
      "info" : "IfStatement[3512-4195]:IfStatement[3654-4337]"
    }, {
      "left" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));",
      "right" : "currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));",
      "info" : "ExpressionStatement[3547-3651]:ExpressionStatement[3689-3793]"
    }, {
      "left" : "if (combinator == ',')",
      "right" : "if (combinator == ',')",
      "info" : "IfStatement[3665-4195]:IfStatement[3807-4337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3688-4090]:Block[3830-4232]"
    }, {
      "left" : "CombiningEvaluator.Or or;",
      "right" : "CombiningEvaluator.Or or;",
      "info" : "VariableDeclarationStatement[3715-3740]:VariableDeclarationStatement[3857-3882]"
    }, {
      "left" : "if (currentEval instanceof CombiningEvaluator.Or)",
      "right" : "if (currentEval instanceof CombiningEvaluator.Or)",
      "info" : "IfStatement[3753-4050]:IfStatement[3895-4192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3803-3909]:Block[3945-4051]"
    }, {
      "left" : "or = (CombiningEvaluator.Or) currentEval;",
      "right" : "or = (CombiningEvaluator.Or) currentEval;",
      "info" : "ExpressionStatement[3821-3862]:ExpressionStatement[3963-4004]"
    }, {
      "left" : "or.add(newEval);",
      "right" : "or.add(newEval);",
      "info" : "ExpressionStatement[3879-3895]:ExpressionStatement[4021-4037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3915-4050]:Block[4057-4192]"
    }, {
      "left" : "or = new CombiningEvaluator.Or();",
      "right" : "or = new CombiningEvaluator.Or();",
      "info" : "ExpressionStatement[3933-3966]:ExpressionStatement[4075-4108]"
    }, {
      "left" : "or.add(currentEval);",
      "right" : "or.add(currentEval);",
      "info" : "ExpressionStatement[3983-4003]:ExpressionStatement[4125-4145]"
    }, {
      "left" : "or.add(newEval);",
      "right" : "or.add(newEval);",
      "info" : "ExpressionStatement[4020-4036]:ExpressionStatement[4162-4178]"
    }, {
      "left" : "currentEval = or;",
      "right" : "currentEval = or;",
      "info" : "ExpressionStatement[4063-4080]:ExpressionStatement[4205-4222]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);",
      "right" : "throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);",
      "info" : "ThrowStatement[4116-4195]:ThrowStatement[4258-4337]"
    }, {
      "left" : "if (replaceRightMost)",
      "right" : "if (replaceRightMost)",
      "info" : "IfStatement[4205-4350]:IfStatement[4347-4492]"
    }, {
      "left" : "((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);",
      "right" : "((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);",
      "info" : "ExpressionStatement[4239-4313]:ExpressionStatement[4381-4455]"
    }, {
      "left" : "rootEval = currentEval;",
      "right" : "rootEval = currentEval;",
      "info" : "ExpressionStatement[4327-4350]:ExpressionStatement[4469-4492]"
    }, {
      "left" : "evals.add(rootEval);",
      "right" : "evals.add(rootEval);",
      "info" : "ExpressionStatement[4359-4379]:ExpressionStatement[4501-4521]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4391-4398]:Modifier[4533-4540]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4399-4405]:SimpleType[4541-4547]"
    }, {
      "left" : "consumeSubQuery",
      "right" : "consumeSubQuery",
      "info" : "SimpleName[4406-4421]:SimpleName[4548-4563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4424-4910]:Block[4566-5052]"
    }, {
      "left" : "StringBuilder sq = new StringBuilder();",
      "right" : "StringBuilder sq = new StringBuilder();",
      "info" : "VariableDeclarationStatement[4434-4473]:VariableDeclarationStatement[4576-4615]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[4482-4874]:WhileStatement[4624-5016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4504-4874]:Block[4646-5016]"
    }, {
      "left" : "if (tq.matches(\"(\"))",
      "right" : "if (tq.matches(\"(\"))",
      "info" : "IfStatement[4518-4864]:IfStatement[4660-5006]"
    }, {
      "left" : "sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");",
      "right" : "sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");",
      "info" : "ExpressionStatement[4555-4617]:ExpressionStatement[4697-4759]"
    }, {
      "left" : "if (tq.matches(\"[\"))",
      "right" : "if (tq.matches(\"[\"))",
      "info" : "IfStatement[4635-4864]:IfStatement[4777-5006]"
    }, {
      "left" : "sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");",
      "right" : "sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");",
      "info" : "ExpressionStatement[4672-4734]:ExpressionStatement[4814-4876]"
    }, {
      "left" : "if (tq.matchesAny(combinators))",
      "right" : "if (tq.matchesAny(combinators))",
      "info" : "IfStatement[4752-4864]:IfStatement[4894-5006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4800-4806]:BreakStatement[4942-4948]"
    }, {
      "left" : "sq.append(tq.consume());",
      "right" : "sq.append(tq.consume());",
      "info" : "ExpressionStatement[4840-4864]:ExpressionStatement[4982-5006]"
    }, {
      "left" : "return sq.toString();",
      "right" : "return sq.toString();",
      "info" : "ReturnStatement[4883-4904]:ReturnStatement[5025-5046]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4916-4923]:Modifier[5058-5065]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4924-4928]:PrimitiveType[5066-5070]"
    }, {
      "left" : "findElements",
      "right" : "findElements",
      "info" : "SimpleName[4929-4941]:SimpleName[5071-5083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4944-7201]:Block[5086-7343]"
    }, {
      "left" : "if (tq.matchChomp(\"#\"))",
      "right" : "if (tq.matchChomp(\"#\"))",
      "info" : "IfStatement[4954-7194]:IfStatement[5096-7336]"
    }, {
      "left" : "byId();",
      "right" : "byId();",
      "info" : "ExpressionStatement[4990-4997]:ExpressionStatement[5132-5139]"
    }, {
      "left" : "if (tq.matchChomp(\".\"))",
      "right" : "if (tq.matchChomp(\".\"))",
      "info" : "IfStatement[5011-7194]:IfStatement[5153-7336]"
    }, {
      "left" : "byClass();",
      "right" : "byClass();",
      "info" : "ExpressionStatement[5047-5057]:ExpressionStatement[5189-5199]"
    }, {
      "left" : "if (tq.matchesWord() || tq.matches(\"*|\"))",
      "right" : "if (tq.matchesWord() || tq.matches(\"*|\"))",
      "info" : "IfStatement[5071-7194]:IfStatement[5213-7336]"
    }, {
      "left" : "byTag();",
      "right" : "byTag();",
      "info" : "ExpressionStatement[5125-5133]:ExpressionStatement[5267-5275]"
    }, {
      "left" : "if (tq.matches(\"[\"))",
      "right" : "if (tq.matches(\"[\"))",
      "info" : "IfStatement[5147-7194]:IfStatement[5289-7336]"
    }, {
      "left" : "byAttribute();",
      "right" : "byAttribute();",
      "info" : "ExpressionStatement[5180-5194]:ExpressionStatement[5322-5336]"
    }, {
      "left" : "if (tq.matchChomp(\"*\"))",
      "right" : "if (tq.matchChomp(\"*\"))",
      "info" : "IfStatement[5208-7194]:IfStatement[5350-7336]"
    }, {
      "left" : "allElements();",
      "right" : "allElements();",
      "info" : "ExpressionStatement[5244-5258]:ExpressionStatement[5386-5400]"
    }, {
      "left" : "if (tq.matchChomp(\":lt(\"))",
      "right" : "if (tq.matchChomp(\":lt(\"))",
      "info" : "IfStatement[5272-7194]:IfStatement[5414-7336]"
    }, {
      "left" : "indexLessThan();",
      "right" : "indexLessThan();",
      "info" : "ExpressionStatement[5311-5327]:ExpressionStatement[5453-5469]"
    }, {
      "left" : "if (tq.matchChomp(\":gt(\"))",
      "right" : "if (tq.matchChomp(\":gt(\"))",
      "info" : "IfStatement[5341-7194]:IfStatement[5483-7336]"
    }, {
      "left" : "indexGreaterThan();",
      "right" : "indexGreaterThan();",
      "info" : "ExpressionStatement[5380-5399]:ExpressionStatement[5522-5541]"
    }, {
      "left" : "if (tq.matchChomp(\":eq(\"))",
      "right" : "if (tq.matchChomp(\":eq(\"))",
      "info" : "IfStatement[5413-7194]:IfStatement[5555-7336]"
    }, {
      "left" : "indexEquals();",
      "right" : "indexEquals();",
      "info" : "ExpressionStatement[5452-5466]:ExpressionStatement[5594-5608]"
    }, {
      "left" : "if (tq.matches(\":has(\"))",
      "right" : "if (tq.matches(\":has(\"))",
      "info" : "IfStatement[5480-7194]:IfStatement[5622-7336]"
    }, {
      "left" : "has();",
      "right" : "has();",
      "info" : "ExpressionStatement[5517-5523]:ExpressionStatement[5659-5665]"
    }, {
      "left" : "if (tq.matches(\":contains(\"))",
      "right" : "if (tq.matches(\":contains(\"))",
      "info" : "IfStatement[5537-7194]:IfStatement[5679-7336]"
    }, {
      "left" : "contains(false);",
      "right" : "contains(false);",
      "info" : "ExpressionStatement[5579-5595]:ExpressionStatement[5721-5737]"
    }, {
      "left" : "if (tq.matches(\":containsOwn(\"))",
      "right" : "if (tq.matches(\":containsOwn(\"))",
      "info" : "IfStatement[5609-7194]:IfStatement[5751-7336]"
    }, {
      "left" : "contains(true);",
      "right" : "contains(true);",
      "info" : "ExpressionStatement[5654-5669]:ExpressionStatement[5796-5811]"
    }, {
      "left" : "if (tq.matches(\":containsData(\"))",
      "right" : "if (tq.matches(\":containsData(\"))",
      "info" : "IfStatement[5683-7194]:IfStatement[5825-7336]"
    }, {
      "left" : "containsData();",
      "right" : "containsData();",
      "info" : "ExpressionStatement[5729-5744]:ExpressionStatement[5871-5886]"
    }, {
      "left" : "if (tq.matches(\":matches(\"))",
      "right" : "if (tq.matches(\":matches(\"))",
      "info" : "IfStatement[5758-7194]:IfStatement[5900-7336]"
    }, {
      "left" : "matches(false);",
      "right" : "matches(false);",
      "info" : "ExpressionStatement[5799-5814]:ExpressionStatement[5941-5956]"
    }, {
      "left" : "if (tq.matches(\":matchesOwn(\"))",
      "right" : "if (tq.matches(\":matchesOwn(\"))",
      "info" : "IfStatement[5828-7194]:IfStatement[5970-7336]"
    }, {
      "left" : "matches(true);",
      "right" : "matches(true);",
      "info" : "ExpressionStatement[5872-5886]:ExpressionStatement[6014-6028]"
    }, {
      "left" : "if (tq.matches(\":not(\"))",
      "right" : "if (tq.matches(\":not(\"))",
      "info" : "IfStatement[5900-7194]:IfStatement[6042-7336]"
    }, {
      "left" : "not();",
      "right" : "not();",
      "info" : "ExpressionStatement[5937-5943]:ExpressionStatement[6079-6085]"
    }, {
      "left" : "if (tq.matchChomp(\":nth-child(\"))",
      "right" : "if (tq.matchChomp(\":nth-child(\"))",
      "info" : "IfStatement[5951-7194]:IfStatement[6093-7336]"
    }, {
      "left" : "cssNthChild(false, false);",
      "right" : "cssNthChild(false, false);",
      "info" : "ExpressionStatement[5994-6020]:ExpressionStatement[6136-6162]"
    }, {
      "left" : "if (tq.matchChomp(\":nth-last-child(\"))",
      "right" : "if (tq.matchChomp(\":nth-last-child(\"))",
      "info" : "IfStatement[6034-7194]:IfStatement[6176-7336]"
    }, {
      "left" : "cssNthChild(true, false);",
      "right" : "cssNthChild(true, false);",
      "info" : "ExpressionStatement[6082-6107]:ExpressionStatement[6224-6249]"
    }, {
      "left" : "if (tq.matchChomp(\":nth-of-type(\"))",
      "right" : "if (tq.matchChomp(\":nth-of-type(\"))",
      "info" : "IfStatement[6121-7194]:IfStatement[6263-7336]"
    }, {
      "left" : "cssNthChild(false, true);",
      "right" : "cssNthChild(false, true);",
      "info" : "ExpressionStatement[6166-6191]:ExpressionStatement[6308-6333]"
    }, {
      "left" : "if (tq.matchChomp(\":nth-last-of-type(\"))",
      "right" : "if (tq.matchChomp(\":nth-last-of-type(\"))",
      "info" : "IfStatement[6205-7194]:IfStatement[6347-7336]"
    }, {
      "left" : "cssNthChild(true, true);",
      "right" : "cssNthChild(true, true);",
      "info" : "ExpressionStatement[6255-6279]:ExpressionStatement[6397-6421]"
    }, {
      "left" : "if (tq.matchChomp(\":first-child\"))",
      "right" : "if (tq.matchChomp(\":first-child\"))",
      "info" : "IfStatement[6293-7194]:IfStatement[6435-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsFirstChild());",
      "right" : "evals.add(new Evaluator.IsFirstChild());",
      "info" : "ExpressionStatement[6337-6377]:ExpressionStatement[6479-6519]"
    }, {
      "left" : "if (tq.matchChomp(\":last-child\"))",
      "right" : "if (tq.matchChomp(\":last-child\"))",
      "info" : "IfStatement[6391-7194]:IfStatement[6533-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsLastChild());",
      "right" : "evals.add(new Evaluator.IsLastChild());",
      "info" : "ExpressionStatement[6434-6473]:ExpressionStatement[6576-6615]"
    }, {
      "left" : "if (tq.matchChomp(\":first-of-type\"))",
      "right" : "if (tq.matchChomp(\":first-of-type\"))",
      "info" : "IfStatement[6487-7194]:IfStatement[6629-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsFirstOfType());",
      "right" : "evals.add(new Evaluator.IsFirstOfType());",
      "info" : "ExpressionStatement[6533-6574]:ExpressionStatement[6675-6716]"
    }, {
      "left" : "if (tq.matchChomp(\":last-of-type\"))",
      "right" : "if (tq.matchChomp(\":last-of-type\"))",
      "info" : "IfStatement[6588-7194]:IfStatement[6730-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsLastOfType());",
      "right" : "evals.add(new Evaluator.IsLastOfType());",
      "info" : "ExpressionStatement[6633-6673]:ExpressionStatement[6775-6815]"
    }, {
      "left" : "if (tq.matchChomp(\":only-child\"))",
      "right" : "if (tq.matchChomp(\":only-child\"))",
      "info" : "IfStatement[6687-7194]:IfStatement[6829-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsOnlyChild());",
      "right" : "evals.add(new Evaluator.IsOnlyChild());",
      "info" : "ExpressionStatement[6730-6769]:ExpressionStatement[6872-6911]"
    }, {
      "left" : "if (tq.matchChomp(\":only-of-type\"))",
      "right" : "if (tq.matchChomp(\":only-of-type\"))",
      "info" : "IfStatement[6783-7194]:IfStatement[6925-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsOnlyOfType());",
      "right" : "evals.add(new Evaluator.IsOnlyOfType());",
      "info" : "ExpressionStatement[6828-6868]:ExpressionStatement[6970-7010]"
    }, {
      "left" : "if (tq.matchChomp(\":empty\"))",
      "right" : "if (tq.matchChomp(\":empty\"))",
      "info" : "IfStatement[6882-7194]:IfStatement[7024-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsEmpty());",
      "right" : "evals.add(new Evaluator.IsEmpty());",
      "info" : "ExpressionStatement[6920-6955]:ExpressionStatement[7062-7097]"
    }, {
      "left" : "if (tq.matchChomp(\":root\"))",
      "right" : "if (tq.matchChomp(\":root\"))",
      "info" : "IfStatement[6969-7194]:IfStatement[7111-7336]"
    }, {
      "left" : "evals.add(new Evaluator.IsRoot());",
      "right" : "evals.add(new Evaluator.IsRoot());",
      "info" : "ExpressionStatement[7006-7040]:ExpressionStatement[7148-7182]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());",
      "right" : "throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());",
      "info" : "ThrowStatement[7073-7194]:ThrowStatement[7215-7336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7207-7214]:Modifier[7349-7356]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7215-7219]:PrimitiveType[7357-7361]"
    }, {
      "left" : "byId",
      "right" : "byId",
      "info" : "SimpleName[7220-7224]:SimpleName[7362-7366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7227-7353]:Block[7369-7495]"
    }, {
      "left" : "String id = tq.consumeCssIdentifier();",
      "right" : "String id = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[7237-7275]:VariableDeclarationStatement[7379-7417]"
    }, {
      "left" : "Validate.notEmpty(id);",
      "right" : "Validate.notEmpty(id);",
      "info" : "ExpressionStatement[7284-7306]:ExpressionStatement[7426-7448]"
    }, {
      "left" : "evals.add(new Evaluator.Id(id));",
      "right" : "evals.add(new Evaluator.Id(id));",
      "info" : "ExpressionStatement[7315-7347]:ExpressionStatement[7457-7489]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7359-7366]:Modifier[7501-7508]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7367-7371]:PrimitiveType[7509-7513]"
    }, {
      "left" : "byClass",
      "right" : "byClass",
      "info" : "SimpleName[7372-7379]:SimpleName[7514-7521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7382-7539]:Block[7524-7681]"
    }, {
      "left" : "String className = tq.consumeCssIdentifier();",
      "right" : "String className = tq.consumeCssIdentifier();",
      "info" : "VariableDeclarationStatement[7392-7437]:VariableDeclarationStatement[7534-7579]"
    }, {
      "left" : "Validate.notEmpty(className);",
      "right" : "Validate.notEmpty(className);",
      "info" : "ExpressionStatement[7446-7475]:ExpressionStatement[7588-7617]"
    }, {
      "left" : "evals.add(new Evaluator.Class(className.trim()));",
      "right" : "evals.add(new Evaluator.Class(className.trim()));",
      "info" : "ExpressionStatement[7484-7533]:ExpressionStatement[7626-7675]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7545-7552]:Modifier[7687-7694]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7553-7557]:PrimitiveType[7695-7699]"
    }, {
      "left" : "byTag",
      "right" : "byTag",
      "info" : "SimpleName[7558-7563]:SimpleName[7700-7705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7566-8231]:Block[7708-8373]"
    }, {
      "left" : "String tagName = tq.consumeElementSelector();",
      "right" : "String tagName = tq.consumeElementSelector();",
      "info" : "VariableDeclarationStatement[7576-7621]:VariableDeclarationStatement[7718-7763]"
    }, {
      "left" : "Validate.notEmpty(tagName);",
      "right" : "Validate.notEmpty(tagName);",
      "info" : "ExpressionStatement[7631-7658]:ExpressionStatement[7773-7800]"
    }, {
      "left" : "if (tagName.startsWith(\"*|\"))",
      "right" : "if (tagName.startsWith(\"*|\"))",
      "info" : "IfStatement[7747-8225]:IfStatement[7889-8367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7777-7963]:Block[7919-8105]"
    }, {
      "left" : "evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase())));",
      "right" : "evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase())));",
      "info" : "ExpressionStatement[7791-7953]:ExpressionStatement[7933-8095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7969-8225]:Block[8111-8367]"
    }, {
      "left" : "if (tagName.contains(\"|\"))",
      "right" : "if (tagName.contains(\"|\"))",
      "info" : "IfStatement[8077-8156]:IfStatement[8219-8298]"
    }, {
      "left" : "tagName = tagName.replace(\"|\", \":\");",
      "right" : "tagName = tagName.replace(\"|\", \":\");",
      "info" : "ExpressionStatement[8120-8156]:ExpressionStatement[8262-8298]"
    }, {
      "left" : "evals.add(new Evaluator.Tag(tagName.trim()));",
      "right" : "evals.add(new Evaluator.Tag(tagName.trim()));",
      "info" : "ExpressionStatement[8170-8215]:ExpressionStatement[8312-8357]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8237-8244]:Modifier[8379-8386]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8245-8249]:PrimitiveType[8387-8391]"
    }, {
      "left" : "byAttribute",
      "right" : "byAttribute",
      "info" : "SimpleName[8250-8261]:SimpleName[8392-8403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8264-9728]:Block[8406-9870]"
    }, {
      "left" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "right" : "TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']'));",
      "info" : "VariableDeclarationStatement[8274-8333]:VariableDeclarationStatement[8416-8475]"
    }, {
      "left" : "String key = cq.consumeToAny(AttributeEvals);",
      "right" : "String key = cq.consumeToAny(AttributeEvals);",
      "info" : "VariableDeclarationStatement[8359-8404]:VariableDeclarationStatement[8501-8546]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[8462-8485]:ExpressionStatement[8604-8627]"
    }, {
      "left" : "cq.consumeWhitespace();",
      "right" : "cq.consumeWhitespace();",
      "info" : "ExpressionStatement[8494-8517]:ExpressionStatement[8636-8659]"
    }, {
      "left" : "if (cq.isEmpty())",
      "right" : "if (cq.isEmpty())",
      "info" : "IfStatement[8527-9722]:IfStatement[8669-9864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8545-8745]:Block[8687-8887]"
    }, {
      "left" : "if (key.startsWith(\"^\"))",
      "right" : "if (key.startsWith(\"^\"))",
      "info" : "IfStatement[8559-8735]:IfStatement[8701-8877]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeStarting(key.substring(1)));",
      "right" : "evals.add(new Evaluator.AttributeStarting(key.substring(1)));",
      "info" : "ExpressionStatement[8600-8661]:ExpressionStatement[8742-8803]"
    }, {
      "left" : "evals.add(new Evaluator.Attribute(key));",
      "right" : "evals.add(new Evaluator.Attribute(key));",
      "info" : "ExpressionStatement[8695-8735]:ExpressionStatement[8837-8877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8751-9722]:Block[8893-9864]"
    }, {
      "left" : "if (cq.matchChomp(\"=\"))",
      "right" : "if (cq.matchChomp(\"=\"))",
      "info" : "IfStatement[8765-9712]:IfStatement[8907-9854]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));",
      "info" : "ExpressionStatement[8805-8870]:ExpressionStatement[8947-9012]"
    }, {
      "left" : "if (cq.matchChomp(\"!=\"))",
      "right" : "if (cq.matchChomp(\"!=\"))",
      "info" : "IfStatement[8889-9712]:IfStatement[9031-9854]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));",
      "info" : "ExpressionStatement[8930-8998]:ExpressionStatement[9072-9140]"
    }, {
      "left" : "if (cq.matchChomp(\"^=\"))",
      "right" : "if (cq.matchChomp(\"^=\"))",
      "info" : "IfStatement[9017-9712]:IfStatement[9159-9854]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));",
      "info" : "ExpressionStatement[9058-9131]:ExpressionStatement[9200-9273]"
    }, {
      "left" : "if (cq.matchChomp(\"$=\"))",
      "right" : "if (cq.matchChomp(\"$=\"))",
      "info" : "IfStatement[9150-9712]:IfStatement[9292-9854]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));",
      "info" : "ExpressionStatement[9191-9262]:ExpressionStatement[9333-9404]"
    }, {
      "left" : "if (cq.matchChomp(\"*=\"))",
      "right" : "if (cq.matchChomp(\"*=\"))",
      "info" : "IfStatement[9281-9712]:IfStatement[9423-9854]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));",
      "right" : "evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));",
      "info" : "ExpressionStatement[9322-9397]:ExpressionStatement[9464-9539]"
    }, {
      "left" : "if (cq.matchChomp(\"~=\"))",
      "right" : "if (cq.matchChomp(\"~=\"))",
      "info" : "IfStatement[9416-9712]:IfStatement[9558-9854]"
    }, {
      "left" : "evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));",
      "right" : "evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));",
      "info" : "ExpressionStatement[9457-9547]:ExpressionStatement[9599-9689]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "right" : "throw new Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());",
      "info" : "ThrowStatement[9581-9712]:ThrowStatement[9723-9854]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9734-9741]:Modifier[9876-9883]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9742-9746]:PrimitiveType[9884-9888]"
    }, {
      "left" : "allElements",
      "right" : "allElements",
      "info" : "SimpleName[9747-9758]:SimpleName[9889-9900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9761-9816]:Block[9903-9958]"
    }, {
      "left" : "evals.add(new Evaluator.AllElements());",
      "right" : "evals.add(new Evaluator.AllElements());",
      "info" : "ExpressionStatement[9771-9810]:ExpressionStatement[9913-9952]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9860-9867]:Modifier[10002-10009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9868-9872]:PrimitiveType[10010-10014]"
    }, {
      "left" : "indexLessThan",
      "right" : "indexLessThan",
      "info" : "SimpleName[9873-9886]:SimpleName[10015-10028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9889-9960]:Block[10031-10102]"
    }, {
      "left" : "evals.add(new Evaluator.IndexLessThan(consumeIndex()));",
      "right" : "evals.add(new Evaluator.IndexLessThan(consumeIndex()));",
      "info" : "ExpressionStatement[9899-9954]:ExpressionStatement[10041-10096]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9966-9973]:Modifier[10108-10115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9974-9978]:PrimitiveType[10116-10120]"
    }, {
      "left" : "indexGreaterThan",
      "right" : "indexGreaterThan",
      "info" : "SimpleName[9979-9995]:SimpleName[10121-10137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9998-10072]:Block[10140-10214]"
    }, {
      "left" : "evals.add(new Evaluator.IndexGreaterThan(consumeIndex()));",
      "right" : "evals.add(new Evaluator.IndexGreaterThan(consumeIndex()));",
      "info" : "ExpressionStatement[10008-10066]:ExpressionStatement[10150-10208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10078-10085]:Modifier[10220-10227]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10086-10090]:PrimitiveType[10228-10232]"
    }, {
      "left" : "indexEquals",
      "right" : "indexEquals",
      "info" : "SimpleName[10091-10102]:SimpleName[10233-10244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10105-10174]:Block[10247-10316]"
    }, {
      "left" : "evals.add(new Evaluator.IndexEquals(consumeIndex()));",
      "right" : "evals.add(new Evaluator.IndexEquals(consumeIndex()));",
      "info" : "ExpressionStatement[10115-10168]:ExpressionStatement[10257-10310]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10455-10462]:Modifier[10597-10604]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10463-10467]:PrimitiveType[10605-10609]"
    }, {
      "left" : "cssNthChild",
      "right" : "cssNthChild",
      "info" : "SimpleName[10468-10479]:SimpleName[10610-10621]"
    }, {
      "left" : "boolean backwards",
      "right" : "boolean backwards",
      "info" : "SingleVariableDeclaration[10480-10497]:SingleVariableDeclaration[10622-10639]"
    }, {
      "left" : "boolean ofType",
      "right" : "boolean ofType",
      "info" : "SingleVariableDeclaration[10499-10513]:SingleVariableDeclaration[10641-10655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10515-11479]:Block[10657-11621]"
    }, {
      "left" : "String argS = tq.chompTo(\")\").trim().toLowerCase();",
      "right" : "String argS = tq.chompTo(\")\").trim().toLowerCase();",
      "info" : "VariableDeclarationStatement[10519-10570]:VariableDeclarationStatement[10661-10712]"
    }, {
      "left" : "Matcher mAB = NTH_AB.matcher(argS);",
      "right" : "Matcher mAB = NTH_AB.matcher(argS);",
      "info" : "VariableDeclarationStatement[10573-10608]:VariableDeclarationStatement[10715-10750]"
    }, {
      "left" : "Matcher mB = NTH_B.matcher(argS);",
      "right" : "Matcher mB = NTH_B.matcher(argS);",
      "info" : "VariableDeclarationStatement[10611-10644]:VariableDeclarationStatement[10753-10786]"
    }, {
      "left" : "final int a, b;",
      "right" : "final int a, b;",
      "info" : "VariableDeclarationStatement[10647-10662]:VariableDeclarationStatement[10789-10804]"
    }, {
      "left" : "if (\"odd\".equals(argS))",
      "right" : "if (\"odd\".equals(argS))",
      "info" : "IfStatement[10665-11199]:IfStatement[10807-11341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10689-10714]:Block[10831-10856]"
    }, {
      "left" : "a = 2;",
      "right" : "a = 2;",
      "info" : "ExpressionStatement[10694-10700]:ExpressionStatement[10836-10842]"
    }, {
      "left" : "b = 1;",
      "right" : "b = 1;",
      "info" : "ExpressionStatement[10704-10710]:ExpressionStatement[10846-10852]"
    }, {
      "left" : "if (\"even\".equals(argS))",
      "right" : "if (\"even\".equals(argS))",
      "info" : "IfStatement[10720-11199]:IfStatement[10862-11341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10745-10770]:Block[10887-10912]"
    }, {
      "left" : "a = 2;",
      "right" : "a = 2;",
      "info" : "ExpressionStatement[10750-10756]:ExpressionStatement[10892-10898]"
    }, {
      "left" : "b = 0;",
      "right" : "b = 0;",
      "info" : "ExpressionStatement[10760-10766]:ExpressionStatement[10902-10908]"
    }, {
      "left" : "if (mAB.matches())",
      "right" : "if (mAB.matches())",
      "info" : "IfStatement[10776-11199]:IfStatement[10918-11341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10795-10982]:Block[10937-11124]"
    }, {
      "left" : "a = mAB.group(3) != null ? Integer.parseInt(mAB.group(1).replaceFirst(\"^\\\\+\", \"\")) : 1;",
      "right" : "a = mAB.group(3) != null ? Integer.parseInt(mAB.group(1).replaceFirst(\"^\\\\+\", \"\")) : 1;",
      "info" : "ExpressionStatement[10800-10887]:ExpressionStatement[10942-11029]"
    }, {
      "left" : "b = mAB.group(4) != null ? Integer.parseInt(mAB.group(4).replaceFirst(\"^\\\\+\", \"\")) : 0;",
      "right" : "b = mAB.group(4) != null ? Integer.parseInt(mAB.group(4).replaceFirst(\"^\\\\+\", \"\")) : 0;",
      "info" : "ExpressionStatement[10891-10978]:ExpressionStatement[11033-11120]"
    }, {
      "left" : "if (mB.matches())",
      "right" : "if (mB.matches())",
      "info" : "IfStatement[10988-11199]:IfStatement[11130-11341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11006-11083]:Block[11148-11225]"
    }, {
      "left" : "a = 0;",
      "right" : "a = 0;",
      "info" : "ExpressionStatement[11011-11017]:ExpressionStatement[11153-11159]"
    }, {
      "left" : "b = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\"));",
      "right" : "b = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\"));",
      "info" : "ExpressionStatement[11021-11079]:ExpressionStatement[11163-11221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11089-11199]:Block[11231-11341]"
    }, {
      "left" : "throw new Selector.SelectorParseException(\"Could not parse nth-index '%s': unexpected format\", argS);",
      "right" : "throw new Selector.SelectorParseException(\"Could not parse nth-index '%s': unexpected format\", argS);",
      "info" : "ThrowStatement[11094-11195]:ThrowStatement[11236-11337]"
    }, {
      "left" : "if (ofType)",
      "right" : "if (ofType)",
      "info" : "IfStatement[11202-11476]:IfStatement[11344-11618]"
    }, {
      "left" : "if (backwards)",
      "right" : "if (backwards)",
      "info" : "IfStatement[11217-11339]:IfStatement[11359-11481]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthLastOfType(a, b));",
      "right" : "evals.add(new Evaluator.IsNthLastOfType(a, b));",
      "info" : "ExpressionStatement[11236-11283]:ExpressionStatement[11378-11425]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthOfType(a, b));",
      "right" : "evals.add(new Evaluator.IsNthOfType(a, b));",
      "info" : "ExpressionStatement[11296-11339]:ExpressionStatement[11438-11481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11347-11476]:Block[11489-11618]"
    }, {
      "left" : "if (backwards)",
      "right" : "if (backwards)",
      "info" : "IfStatement[11352-11472]:IfStatement[11494-11614]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthLastChild(a, b));",
      "right" : "evals.add(new Evaluator.IsNthLastChild(a, b));",
      "info" : "ExpressionStatement[11371-11417]:ExpressionStatement[11513-11559]"
    }, {
      "left" : "evals.add(new Evaluator.IsNthChild(a, b));",
      "right" : "evals.add(new Evaluator.IsNthChild(a, b));",
      "info" : "ExpressionStatement[11430-11472]:ExpressionStatement[11572-11614]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11485-11492]:Modifier[11627-11634]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11493-11496]:PrimitiveType[11635-11638]"
    }, {
      "left" : "consumeIndex",
      "right" : "consumeIndex",
      "info" : "SimpleName[11497-11509]:SimpleName[11639-11651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11512-11688]:Block[11654-11830]"
    }, {
      "left" : "String indexS = tq.chompTo(\")\").trim();",
      "right" : "String indexS = tq.chompTo(\")\").trim();",
      "info" : "VariableDeclarationStatement[11522-11561]:VariableDeclarationStatement[11664-11703]"
    }, {
      "left" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "right" : "Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");",
      "info" : "ExpressionStatement[11570-11641]:ExpressionStatement[11712-11783]"
    }, {
      "left" : "return Integer.parseInt(indexS);",
      "right" : "return Integer.parseInt(indexS);",
      "info" : "ReturnStatement[11650-11682]:ReturnStatement[11792-11824]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11726-11733]:Modifier[11868-11875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11734-11738]:PrimitiveType[11876-11880]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[11739-11742]:SimpleName[11881-11884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11745-11976]:Block[11887-12118]"
    }, {
      "left" : "tq.consume(\":has\");",
      "right" : "tq.consume(\":has\");",
      "info" : "ExpressionStatement[11755-11774]:ExpressionStatement[11897-11916]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(', ')');",
      "right" : "String subQuery = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[11783-11828]:VariableDeclarationStatement[11925-11970]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");",
      "info" : "ExpressionStatement[11837-11905]:ExpressionStatement[11979-12047]"
    }, {
      "left" : "evals.add(new StructuralEvaluator.Has(parse(subQuery)));",
      "right" : "evals.add(new StructuralEvaluator.Has(parse(subQuery)));",
      "info" : "ExpressionStatement[11914-11970]:ExpressionStatement[12056-12112]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12040-12047]:Modifier[12182-12189]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12048-12052]:PrimitiveType[12190-12194]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[12053-12061]:SimpleName[12195-12203]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[12062-12073]:SingleVariableDeclaration[12204-12215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12075-12456]:Block[12217-12598]"
    }, {
      "left" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "right" : "tq.consume(own ? \":containsOwn\" : \":contains\");",
      "info" : "ExpressionStatement[12085-12132]:ExpressionStatement[12227-12274]"
    }, {
      "left" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "right" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "info" : "VariableDeclarationStatement[12141-12209]:VariableDeclarationStatement[12283-12351]"
    }, {
      "left" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "right" : "Validate.notEmpty(searchText, \":contains(text) query must not be empty\");",
      "info" : "ExpressionStatement[12218-12291]:ExpressionStatement[12360-12433]"
    }, {
      "left" : "if (own)",
      "right" : "if (own)",
      "info" : "IfStatement[12300-12450]:IfStatement[12442-12592]"
    }, {
      "left" : "evals.add(new Evaluator.ContainsOwnText(searchText));",
      "right" : "evals.add(new Evaluator.ContainsOwnText(searchText));",
      "info" : "ExpressionStatement[12321-12374]:ExpressionStatement[12463-12516]"
    }, {
      "left" : "evals.add(new Evaluator.ContainsText(searchText));",
      "right" : "evals.add(new Evaluator.ContainsText(searchText));",
      "info" : "ExpressionStatement[12400-12450]:ExpressionStatement[12542-12592]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12505-12512]:Modifier[12647-12654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12513-12517]:PrimitiveType[12655-12659]"
    }, {
      "left" : "containsData",
      "right" : "containsData",
      "info" : "SimpleName[12518-12530]:SimpleName[12660-12672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12533-12799]:Block[12675-12941]"
    }, {
      "left" : "tq.consume(\":containsData\");",
      "right" : "tq.consume(\":containsData\");",
      "info" : "ExpressionStatement[12543-12571]:ExpressionStatement[12685-12713]"
    }, {
      "left" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "right" : "String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')'));",
      "info" : "VariableDeclarationStatement[12580-12648]:VariableDeclarationStatement[12722-12790]"
    }, {
      "left" : "Validate.notEmpty(searchText, \":containsData(text) query must not be empty\");",
      "right" : "Validate.notEmpty(searchText, \":containsData(text) query must not be empty\");",
      "info" : "ExpressionStatement[12657-12734]:ExpressionStatement[12799-12876]"
    }, {
      "left" : "evals.add(new Evaluator.ContainsData(searchText));",
      "right" : "evals.add(new Evaluator.ContainsData(searchText));",
      "info" : "ExpressionStatement[12743-12793]:ExpressionStatement[12885-12935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12847-12854]:Modifier[12989-12996]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12855-12859]:PrimitiveType[12997-13001]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[12860-12867]:SimpleName[13002-13009]"
    }, {
      "left" : "boolean own",
      "right" : "boolean own",
      "info" : "SingleVariableDeclaration[12868-12879]:SingleVariableDeclaration[13010-13021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12881-13293]:Block[13023-13435]"
    }, {
      "left" : "tq.consume(own ? \":matchesOwn\" : \":matches\");",
      "right" : "tq.consume(own ? \":matchesOwn\" : \":matches\");",
      "info" : "ExpressionStatement[12891-12936]:ExpressionStatement[13033-13078]"
    }, {
      "left" : "String regex = tq.chompBalanced('(', ')');",
      "right" : "String regex = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[12945-12987]:VariableDeclarationStatement[13087-13129]"
    }, {
      "left" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "right" : "Validate.notEmpty(regex, \":matches(regex) query must not be empty\");",
      "info" : "ExpressionStatement[13045-13113]:ExpressionStatement[13187-13255]"
    }, {
      "left" : "if (own)",
      "right" : "if (own)",
      "info" : "IfStatement[13123-13287]:IfStatement[13265-13429]"
    }, {
      "left" : "evals.add(new Evaluator.MatchesOwn(Pattern.compile(regex)));",
      "right" : "evals.add(new Evaluator.MatchesOwn(Pattern.compile(regex)));",
      "info" : "ExpressionStatement[13144-13204]:ExpressionStatement[13286-13346]"
    }, {
      "left" : "evals.add(new Evaluator.Matches(Pattern.compile(regex)));",
      "right" : "evals.add(new Evaluator.Matches(Pattern.compile(regex)));",
      "info" : "ExpressionStatement[13230-13287]:ExpressionStatement[13372-13429]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13321-13328]:Modifier[13463-13470]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13329-13333]:PrimitiveType[13471-13475]"
    }, {
      "left" : "not",
      "right" : "not",
      "info" : "SimpleName[13334-13337]:SimpleName[13476-13479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13340-13578]:Block[13482-13720]"
    }, {
      "left" : "tq.consume(\":not\");",
      "right" : "tq.consume(\":not\");",
      "info" : "ExpressionStatement[13350-13369]:ExpressionStatement[13492-13511]"
    }, {
      "left" : "String subQuery = tq.chompBalanced('(', ')');",
      "right" : "String subQuery = tq.chompBalanced('(', ')');",
      "info" : "VariableDeclarationStatement[13378-13423]:VariableDeclarationStatement[13520-13565]"
    }, {
      "left" : "Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");",
      "right" : "Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");",
      "info" : "ExpressionStatement[13432-13506]:ExpressionStatement[13574-13648]"
    }, {
      "left" : "evals.add(new StructuralEvaluator.Not(parse(subQuery)));",
      "right" : "evals.add(new StructuralEvaluator.Not(parse(subQuery)));",
      "info" : "ExpressionStatement[13516-13572]:ExpressionStatement[13658-13714]"
    } ]
  },
  "interFileMappings" : { }
}