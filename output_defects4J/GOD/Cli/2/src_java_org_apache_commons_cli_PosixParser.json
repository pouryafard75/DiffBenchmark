{
  "matchedElements" : [
 {
    "left" : "class : PosixParser",
    "right" : "class : PosixParser",
    "info" : "TypeDeclaration[740-10511]:TypeDeclaration[740-10531]"
  }, {
    "left" : "tokens",
    "right" : "tokens",
    "info" : "FieldDeclaration[1015-1097]:FieldDeclaration[1015-1097]"
  }, {
    "left" : "eatTheRest",
    "right" : "eatTheRest",
    "info" : "FieldDeclaration[1103-1179]:FieldDeclaration[1103-1179]"
  }, {
    "left" : "currentOption",
    "right" : "currentOption",
    "info" : "FieldDeclaration[1185-1255]:FieldDeclaration[1185-1255]"
  }, {
    "left" : "options",
    "right" : "options",
    "info" : "FieldDeclaration[1261-1321]:FieldDeclaration[1261-1321]"
  }, {
    "left" : "private init() : void",
    "right" : "private init() : void",
    "info" : "MethodDeclaration[1327-1656]:MethodDeclaration[1327-1656]"
  }, {
    "left" : "protected flatten(options , arguments , stopAtNonOption boolean) : ",
    "right" : "protected flatten(options , arguments , stopAtNonOption boolean) : ",
    "info" : "MethodDeclaration[1662-5779]:MethodDeclaration[1662-5779]"
  }, {
    "left" : "private gobble(iter ) : void",
    "right" : "private gobble(iter ) : void",
    "info" : "MethodDeclaration[5785-6129]:MethodDeclaration[5785-6129]"
  }, {
    "left" : "private process(value ) : void",
    "right" : "private process(value ) : void",
    "info" : "MethodDeclaration[6135-7260]:MethodDeclaration[6135-7260]"
  }, {
    "left" : "private processSingleHyphen(hyphen ) : void",
    "right" : "private processSingleHyphen(hyphen ) : void",
    "info" : "MethodDeclaration[7266-7512]:MethodDeclaration[7266-7512]"
  }, {
    "left" : "private processOptionToken(token , stopAtNonOption boolean) : void",
    "right" : "private processOptionToken(token , stopAtNonOption boolean) : void",
    "info" : "MethodDeclaration[7518-8360]:MethodDeclaration[7518-8360]"
  }, {
    "left" : "protected burstToken(token , stopAtNonOption boolean) : void",
    "right" : "protected burstToken(token , stopAtNonOption boolean) : void",
    "info" : "MethodDeclaration[8366-10509]:MethodDeclaration[8366-10529]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[968-974]:Modifier[968-974]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[975-980]:TYPE_DECLARATION_KIND[975-980]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[1543-1550]:Modifier[1543-1550]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1551-1555]:PrimitiveType[1551-1555]"
  }, {
    "left" : "init",
    "right" : "init",
    "info" : "SimpleName[1556-1560]:SimpleName[1556-1560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1567-1656]:Block[1567-1656]"
  }, {
    "left" : "eatTheRest = false;",
    "right" : "eatTheRest = false;",
    "info" : "ExpressionStatement[1577-1596]:ExpressionStatement[1577-1596]"
  }, {
    "left" : "tokens.clear();",
    "right" : "tokens.clear();",
    "info" : "ExpressionStatement[1605-1620]:ExpressionStatement[1605-1620]"
  }, {
    "left" : "currentOption = null;",
    "right" : "currentOption = null;",
    "info" : "ExpressionStatement[1629-1650]:ExpressionStatement[1629-1650]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[3789-3798]:Modifier[3789-3798]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[3799-3807]:ArrayType[3799-3807]"
  }, {
    "left" : "flatten",
    "right" : "flatten",
    "info" : "SimpleName[3808-3815]:SimpleName[3808-3815]"
  }, {
    "left" : "Options options",
    "right" : "Options options",
    "info" : "SingleVariableDeclaration[3816-3831]:SingleVariableDeclaration[3816-3831]"
  }, {
    "left" : "String[] arguments",
    "right" : "String[] arguments",
    "info" : "SingleVariableDeclaration[3833-3851]:SingleVariableDeclaration[3833-3851]"
  }, {
    "left" : "boolean stopAtNonOption",
    "right" : "boolean stopAtNonOption",
    "info" : "SingleVariableDeclaration[3885-3908]:SingleVariableDeclaration[3885-3908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3914-5779]:Block[3914-5779]"
  }, {
    "left" : "init();",
    "right" : "init();",
    "info" : "ExpressionStatement[3924-3931]:ExpressionStatement[3924-3931]"
  }, {
    "left" : "this.options = options;",
    "right" : "this.options = options;",
    "info" : "ExpressionStatement[3940-3963]:ExpressionStatement[3940-3963]"
  }, {
    "left" : "Iterator iter = Arrays.asList(arguments).iterator();",
    "right" : "Iterator iter = Arrays.asList(arguments).iterator();",
    "info" : "VariableDeclarationStatement[4024-4076]:VariableDeclarationStatement[4024-4076]"
  }, {
    "left" : "String token;",
    "right" : "String token;",
    "info" : "VariableDeclarationStatement[4085-4098]:VariableDeclarationStatement[4085-4098]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[4151-5711]:WhileStatement[4151-5711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4182-5711]:Block[4182-5711]"
  }, {
    "left" : "token = (String) iter.next();",
    "right" : "token = (String) iter.next();",
    "info" : "ExpressionStatement[4243-4272]:ExpressionStatement[4243-4272]"
  }, {
    "left" : "if (token.startsWith(\"--\"))",
    "right" : "if (token.startsWith(\"--\"))",
    "info" : "IfStatement[4322-5674]:IfStatement[4322-5674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4362-4764]:Block[4362-4764]"
  }, {
    "left" : "if (token.indexOf('=') != -1)",
    "right" : "if (token.indexOf('=') != -1)",
    "info" : "IfStatement[4380-4750]:IfStatement[4380-4750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4426-4654]:Block[4426-4654]"
  }, {
    "left" : "tokens.add(token.substring(0, token.indexOf('=')));",
    "right" : "tokens.add(token.substring(0, token.indexOf('=')));",
    "info" : "ExpressionStatement[4448-4499]:ExpressionStatement[4448-4499]"
  }, {
    "left" : "tokens.add(token.substring(token.indexOf('=') + 1, \n                                               token.length()));",
    "right" : "tokens.add(token.substring(token.indexOf('=') + 1, \n                                               token.length()));",
    "info" : "ExpressionStatement[4520-4636]:ExpressionStatement[4520-4636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4692-4750]:Block[4692-4750]"
  }, {
    "left" : "tokens.add(token);",
    "right" : "tokens.add(token);",
    "info" : "ExpressionStatement[4714-4732]:ExpressionStatement[4714-4732]"
  }, {
    "left" : "if (\"-\".equals(token))",
    "right" : "if (\"-\".equals(token))",
    "info" : "IfStatement[4812-5674]:IfStatement[4812-5674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4847-4906]:Block[4847-4906]"
  }, {
    "left" : "processSingleHyphen(token);",
    "right" : "processSingleHyphen(token);",
    "info" : "ExpressionStatement[4865-4892]:ExpressionStatement[4865-4892]"
  }, {
    "left" : "if (token.startsWith(\"-\"))",
    "right" : "if (token.startsWith(\"-\"))",
    "info" : "IfStatement[4924-5674]:IfStatement[4924-5674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4963-5424]:Block[4963-5424]"
  }, {
    "left" : "int tokenLength = token.length();",
    "right" : "int tokenLength = token.length();",
    "info" : "VariableDeclarationStatement[4981-5014]:VariableDeclarationStatement[4981-5014]"
  }, {
    "left" : "if (tokenLength == 2)",
    "right" : "if (tokenLength == 2)",
    "info" : "IfStatement[5032-5410]:IfStatement[5032-5410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5070-5153]:Block[5070-5153]"
  }, {
    "left" : "processOptionToken(token, stopAtNonOption);",
    "right" : "processOptionToken(token, stopAtNonOption);",
    "info" : "ExpressionStatement[5092-5135]:ExpressionStatement[5092-5135]"
  }, {
    "left" : "if (options.hasOption(token))",
    "right" : "if (options.hasOption(token))",
    "info" : "IfStatement[5175-5410]:IfStatement[5175-5410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5205-5260]:Block[5205-5260]"
  }, {
    "left" : "tokens.add(token);",
    "right" : "tokens.add(token);",
    "info" : "ExpressionStatement[5224-5242]:ExpressionStatement[5224-5242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5335-5410]:Block[5335-5410]"
  }, {
    "left" : "burstToken(token, stopAtNonOption);",
    "right" : "burstToken(token, stopAtNonOption);",
    "info" : "ExpressionStatement[5357-5392]:ExpressionStatement[5357-5392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5454-5674]:Block[5454-5674]"
  }, {
    "left" : "if (stopAtNonOption)",
    "right" : "if (stopAtNonOption)",
    "info" : "IfStatement[5472-5660]:IfStatement[5472-5660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5509-5564]:Block[5509-5564]"
  }, {
    "left" : "process(token);",
    "right" : "process(token);",
    "info" : "ExpressionStatement[5531-5546]:ExpressionStatement[5531-5546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5602-5660]:Block[5602-5660]"
  }, {
    "left" : "tokens.add(token);",
    "right" : "tokens.add(token);",
    "info" : "ExpressionStatement[5624-5642]:ExpressionStatement[5624-5642]"
  }, {
    "left" : "gobble(iter);",
    "right" : "gobble(iter);",
    "info" : "ExpressionStatement[5688-5701]:ExpressionStatement[5688-5701]"
  }, {
    "left" : "return (String[]) tokens.toArray(new String[] {  });",
    "right" : "return (String[]) tokens.toArray(new String[] {  });",
    "info" : "ReturnStatement[5721-5773]:ReturnStatement[5721-5773]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5935-5942]:Modifier[5935-5942]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5943-5947]:PrimitiveType[5943-5947]"
  }, {
    "left" : "gobble",
    "right" : "gobble",
    "info" : "SimpleName[5948-5954]:SimpleName[5948-5954]"
  }, {
    "left" : "Iterator iter",
    "right" : "Iterator iter",
    "info" : "SingleVariableDeclaration[5955-5968]:SingleVariableDeclaration[5955-5968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5974-6129]:Block[5974-6129]"
  }, {
    "left" : "if (eatTheRest)",
    "right" : "if (eatTheRest)",
    "info" : "IfStatement[5984-6123]:IfStatement[5984-6123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6008-6123]:Block[6008-6123]"
  }, {
    "left" : "while (iter.hasNext())",
    "right" : "while (iter.hasNext())",
    "info" : "WhileStatement[6022-6113]:WhileStatement[6022-6113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6057-6113]:Block[6057-6113]"
  }, {
    "left" : "tokens.add(iter.next());",
    "right" : "tokens.add(iter.next());",
    "info" : "ExpressionStatement[6075-6099]:ExpressionStatement[6075-6099]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6756-6763]:Modifier[6756-6763]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6764-6768]:PrimitiveType[6764-6768]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[6769-6776]:SimpleName[6769-6776]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[6777-6789]:SingleVariableDeclaration[6777-6789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6795-7260]:Block[6795-7260]"
  }, {
    "left" : "if ((currentOption != null) && currentOption.hasArg())",
    "right" : "if ((currentOption != null) && currentOption.hasArg())",
    "info" : "IfStatement[6805-7254]:IfStatement[6805-7254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6868-7129]:Block[6868-7129]"
  }, {
    "left" : "if (currentOption.hasArg())",
    "right" : "if (currentOption.hasArg())",
    "info" : "IfStatement[6882-7119]:IfStatement[6882-7119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6922-7010]:Block[6922-7010]"
  }, {
    "left" : "tokens.add(value);",
    "right" : "tokens.add(value);",
    "info" : "ExpressionStatement[6940-6958]:ExpressionStatement[6940-6958]"
  }, {
    "left" : "currentOption = null;",
    "right" : "currentOption = null;",
    "info" : "ExpressionStatement[6975-6996]:ExpressionStatement[6975-6996]"
  }, {
    "left" : "if (currentOption.hasArgs())",
    "right" : "if (currentOption.hasArgs())",
    "info" : "IfStatement[7028-7119]:IfStatement[7028-7119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7069-7119]:Block[7069-7119]"
  }, {
    "left" : "tokens.add(value);",
    "right" : "tokens.add(value);",
    "info" : "ExpressionStatement[7087-7105]:ExpressionStatement[7087-7105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7151-7254]:Block[7151-7254]"
  }, {
    "left" : "eatTheRest = true;",
    "right" : "eatTheRest = true;",
    "info" : "ExpressionStatement[7165-7183]:ExpressionStatement[7165-7183]"
  }, {
    "left" : "tokens.add(\"--\");",
    "right" : "tokens.add(\"--\");",
    "info" : "ExpressionStatement[7196-7213]:ExpressionStatement[7196-7213]"
  }, {
    "left" : "tokens.add(value);",
    "right" : "tokens.add(value);",
    "info" : "ExpressionStatement[7226-7244]:ExpressionStatement[7226-7244]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7425-7432]:Modifier[7425-7432]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7433-7437]:PrimitiveType[7433-7437]"
  }, {
    "left" : "processSingleHyphen",
    "right" : "processSingleHyphen",
    "info" : "SimpleName[7438-7457]:SimpleName[7438-7457]"
  }, {
    "left" : "String hyphen",
    "right" : "String hyphen",
    "info" : "SingleVariableDeclaration[7458-7471]:SingleVariableDeclaration[7458-7471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7477-7512]:Block[7477-7512]"
  }, {
    "left" : "tokens.add(hyphen);",
    "right" : "tokens.add(hyphen);",
    "info" : "ExpressionStatement[7487-7506]:ExpressionStatement[7487-7506]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8040-8047]:Modifier[8040-8047]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8048-8052]:PrimitiveType[8048-8052]"
  }, {
    "left" : "processOptionToken",
    "right" : "processOptionToken",
    "info" : "SimpleName[8053-8071]:SimpleName[8053-8071]"
  }, {
    "left" : "String token",
    "right" : "String token",
    "info" : "SingleVariableDeclaration[8072-8084]:SingleVariableDeclaration[8072-8084]"
  }, {
    "left" : "boolean stopAtNonOption",
    "right" : "boolean stopAtNonOption",
    "info" : "SingleVariableDeclaration[8086-8109]:SingleVariableDeclaration[8086-8109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8115-8360]:Block[8115-8360]"
  }, {
    "left" : "if (this.options.hasOption(token))",
    "right" : "if (this.options.hasOption(token))",
    "info" : "IfStatement[8125-8354]:IfStatement[8125-8354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8168-8269]:Block[8168-8269]"
  }, {
    "left" : "currentOption = this.options.getOption(token);",
    "right" : "currentOption = this.options.getOption(token);",
    "info" : "ExpressionStatement[8182-8228]:ExpressionStatement[8182-8228]"
  }, {
    "left" : "tokens.add(token);",
    "right" : "tokens.add(token);",
    "info" : "ExpressionStatement[8241-8259]:ExpressionStatement[8241-8259]"
  }, {
    "left" : "if (stopAtNonOption)",
    "right" : "if (stopAtNonOption)",
    "info" : "IfStatement[8283-8354]:IfStatement[8283-8354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8312-8354]:Block[8312-8354]"
  }, {
    "left" : "eatTheRest = true;",
    "right" : "eatTheRest = true;",
    "info" : "ExpressionStatement[8326-8344]:ExpressionStatement[8326-8344]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9673-9682]:Modifier[9673-9682]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9683-9687]:PrimitiveType[9683-9687]"
  }, {
    "left" : "burstToken",
    "right" : "burstToken",
    "info" : "SimpleName[9688-9698]:SimpleName[9688-9698]"
  }, {
    "left" : "String token",
    "right" : "String token",
    "info" : "SingleVariableDeclaration[9699-9711]:SingleVariableDeclaration[9699-9711]"
  }, {
    "left" : "boolean stopAtNonOption",
    "right" : "boolean stopAtNonOption",
    "info" : "SingleVariableDeclaration[9713-9736]:SingleVariableDeclaration[9713-9736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9742-10509]:Block[9742-10529]"
  }, {
    "left" : "int tokenLength = token.length();",
    "right" : "int tokenLength = token.length();",
    "info" : "VariableDeclarationStatement[9752-9785]:VariableDeclarationStatement[9752-9785]"
  }, {
    "left" : "for (int i = 1; i < tokenLength; i++)",
    "right" : "for (int i = 1; i < tokenLength; i++)",
    "info" : "ForStatement[9795-10503]:ForStatement[9795-10523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9841-10503]:Block[9841-10523]"
  }, {
    "left" : "String ch = String.valueOf(token.charAt(i));",
    "right" : "String ch = String.valueOf(token.charAt(i));",
    "info" : "VariableDeclarationStatement[9855-9899]:VariableDeclarationStatement[9855-9899]"
  }, {
    "left" : "boolean hasOption = options.hasOption(ch);",
    "right" : "boolean hasOption = options.hasOption(ch);",
    "info" : "VariableDeclarationStatement[9912-9954]:VariableDeclarationStatement[9912-9954]"
  }, {
    "left" : "if (hasOption)",
    "right" : "if (hasOption)",
    "info" : "IfStatement[9968-10493]:IfStatement[9968-10513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9995-10299]:Block[9995-10299]"
  }, {
    "left" : "tokens.add(\"-\" + ch);",
    "right" : "tokens.add(\"-\" + ch);",
    "info" : "ExpressionStatement[10013-10034]:ExpressionStatement[10013-10034]"
  }, {
    "left" : "currentOption = options.getOption(ch);",
    "right" : "currentOption = options.getOption(ch);",
    "info" : "ExpressionStatement[10051-10089]:ExpressionStatement[10051-10089]"
  }, {
    "left" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
    "right" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
    "info" : "IfStatement[10107-10285]:IfStatement[10107-10285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10182-10285]:Block[10182-10285]"
  }, {
    "left" : "tokens.add(token.substring(i + 1));",
    "right" : "tokens.add(token.substring(i + 1));",
    "info" : "ExpressionStatement[10204-10239]:ExpressionStatement[10204-10239]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10261-10267]:BreakStatement[10261-10267]"
  }, {
    "left" : "if (stopAtNonOption)",
    "right" : "if (stopAtNonOption)",
    "info" : "IfStatement[10317-10493]:IfStatement[10317-10513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10350-10410]:Block[10350-10410]"
  }, {
    "left" : "process(token.substring(i));",
    "right" : "process(token.substring(i));",
    "info" : "ExpressionStatement[10368-10396]:ExpressionStatement[10368-10396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10440-10493]:Block[10440-10513]"
  }, {
    "left" : "tokens.add(\"-\" + ch);",
    "right" : "tokens.add(token);",
    "info" : "ExpressionStatement[10458-10479]:ExpressionStatement[10458-10476]"
  } ]
}