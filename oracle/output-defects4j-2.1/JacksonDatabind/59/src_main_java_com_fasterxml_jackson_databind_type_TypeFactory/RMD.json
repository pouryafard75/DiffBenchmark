{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeFactory",
      "right" : "TypeFactory",
      "info" : "TypeDeclaration[413-56969]:TypeDeclaration[413-57023]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1326-1374]:FieldDeclaration[1326-1374]"
    }, {
      "left" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "right" : "private final static JavaType[] NO_TYPES = new JavaType[0];",
      "info" : "FieldDeclaration[1380-1439]:FieldDeclaration[1380-1439]"
    }, {
      "left" : "protected final static TypeFactory instance = new TypeFactory();",
      "right" : "protected final static TypeFactory instance = new TypeFactory();",
      "info" : "FieldDeclaration[1445-1742]:FieldDeclaration[1445-1742]"
    }, {
      "left" : "protected final static TypeBindings EMPTY_BINDINGS = TypeBindings.emptyBindings();",
      "right" : "protected final static TypeBindings EMPTY_BINDINGS = TypeBindings.emptyBindings();",
      "info" : "FieldDeclaration[1748-1830]:FieldDeclaration[1748-1830]"
    }, {
      "left" : "private final static Class<?> CLS_STRING = String.class;",
      "right" : "private final static Class<?> CLS_STRING = String.class;",
      "info" : "FieldDeclaration[2203-2259]:FieldDeclaration[2203-2259]"
    }, {
      "left" : "private final static Class<?> CLS_OBJECT = Object.class;",
      "right" : "private final static Class<?> CLS_OBJECT = Object.class;",
      "info" : "FieldDeclaration[2264-2320]:FieldDeclaration[2264-2320]"
    }, {
      "left" : "private final static Class<?> CLS_COMPARABLE = Comparable.class;",
      "right" : "private final static Class<?> CLS_COMPARABLE = Comparable.class;",
      "info" : "FieldDeclaration[2326-2390]:FieldDeclaration[2326-2390]"
    }, {
      "left" : "private final static Class<?> CLS_CLASS = Class.class;",
      "right" : "private final static Class<?> CLS_CLASS = Class.class;",
      "info" : "FieldDeclaration[2395-2449]:FieldDeclaration[2395-2449]"
    }, {
      "left" : "private final static Class<?> CLS_ENUM = Enum.class;",
      "right" : "private final static Class<?> CLS_ENUM = Enum.class;",
      "info" : "FieldDeclaration[2454-2506]:FieldDeclaration[2454-2506]"
    }, {
      "left" : "private final static Class<?> CLS_BOOL = Boolean.TYPE;",
      "right" : "private final static Class<?> CLS_BOOL = Boolean.TYPE;",
      "info" : "FieldDeclaration[2512-2566]:FieldDeclaration[2512-2566]"
    }, {
      "left" : "private final static Class<?> CLS_INT = Integer.TYPE;",
      "right" : "private final static Class<?> CLS_INT = Integer.TYPE;",
      "info" : "FieldDeclaration[2571-2624]:FieldDeclaration[2571-2624]"
    }, {
      "left" : "private final static Class<?> CLS_LONG = Long.TYPE;",
      "right" : "private final static Class<?> CLS_LONG = Long.TYPE;",
      "info" : "FieldDeclaration[2629-2680]:FieldDeclaration[2629-2680]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(CLS_BOOL);",
      "right" : "protected final static SimpleType CORE_TYPE_BOOL = new SimpleType(CLS_BOOL);",
      "info" : "FieldDeclaration[2934-3010]:FieldDeclaration[2934-3010]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(CLS_INT);",
      "right" : "protected final static SimpleType CORE_TYPE_INT = new SimpleType(CLS_INT);",
      "info" : "FieldDeclaration[3015-3089]:FieldDeclaration[3015-3089]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(CLS_LONG);",
      "right" : "protected final static SimpleType CORE_TYPE_LONG = new SimpleType(CLS_LONG);",
      "info" : "FieldDeclaration[3094-3170]:FieldDeclaration[3094-3170]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(CLS_STRING);",
      "right" : "protected final static SimpleType CORE_TYPE_STRING = new SimpleType(CLS_STRING);",
      "info" : "FieldDeclaration[3241-3321]:FieldDeclaration[3241-3321]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
      "right" : "protected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(CLS_OBJECT);",
      "info" : "FieldDeclaration[3345-3425]:FieldDeclaration[3345-3425]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(CLS_COMPARABLE);",
      "right" : "protected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(CLS_COMPARABLE);",
      "info" : "FieldDeclaration[3431-3726]:FieldDeclaration[3431-3726]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_ENUM = new SimpleType(CLS_ENUM);",
      "right" : "protected final static SimpleType CORE_TYPE_ENUM = new SimpleType(CLS_ENUM);",
      "info" : "FieldDeclaration[3732-3993]:FieldDeclaration[3732-3993]"
    }, {
      "left" : "protected final static SimpleType CORE_TYPE_CLASS = new SimpleType(CLS_CLASS);",
      "right" : "protected final static SimpleType CORE_TYPE_CLASS = new SimpleType(CLS_CLASS);",
      "info" : "FieldDeclaration[3999-4226]:FieldDeclaration[3999-4226]"
    }, {
      "left" : "protected final LRUMap<Object,JavaType> _typeCache;",
      "right" : "protected final LRUMap<Object,JavaType> _typeCache;",
      "info" : "FieldDeclaration[4232-4480]:FieldDeclaration[4232-4480]"
    }, {
      "left" : "protected final TypeModifier[] _modifiers;",
      "right" : "protected final TypeModifier[] _modifiers;",
      "info" : "FieldDeclaration[4651-4839]:FieldDeclaration[4651-4839]"
    }, {
      "left" : "protected final TypeParser _parser;",
      "right" : "protected final TypeParser _parser;",
      "info" : "FieldDeclaration[4845-4880]:FieldDeclaration[4845-4880]"
    }, {
      "left" : "protected final ClassLoader _classLoader;",
      "right" : "protected final ClassLoader _classLoader;",
      "info" : "FieldDeclaration[4890-5003]:FieldDeclaration[4890-5003]"
    }, {
      "left" : "private TypeFactory()",
      "right" : "private TypeFactory()",
      "info" : "MethodDeclaration[5171-5220]:MethodDeclaration[5171-5220]"
    }, {
      "left" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache)",
      "right" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache)",
      "info" : "MethodDeclaration[5226-5557]:MethodDeclaration[5226-5557]"
    }, {
      "left" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p,\n            TypeModifier[] mods, ClassLoader classLoader)",
      "right" : "protected TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p,\n            TypeModifier[] mods, ClassLoader classLoader)",
      "info" : "MethodDeclaration[5563-6026]:MethodDeclaration[5563-6026]"
    }, {
      "left" : "public TypeFactory withModifier(TypeModifier mod)",
      "right" : "public TypeFactory withModifier(TypeModifier mod)",
      "info" : "MethodDeclaration[6032-6701]:MethodDeclaration[6032-6701]"
    }, {
      "left" : "public TypeFactory withClassLoader(ClassLoader classLoader)",
      "right" : "public TypeFactory withClassLoader(ClassLoader classLoader)",
      "info" : "MethodDeclaration[6707-6852]:MethodDeclaration[6707-6852]"
    }, {
      "left" : "public TypeFactory withCache(LRUMap<Object,JavaType> cache)",
      "right" : "public TypeFactory withCache(LRUMap<Object,JavaType> cache)",
      "info" : "MethodDeclaration[6858-7222]:MethodDeclaration[6858-7222]"
    }, {
      "left" : "public static TypeFactory defaultInstance()",
      "right" : "public static TypeFactory defaultInstance()",
      "info" : "MethodDeclaration[7228-7495]:MethodDeclaration[7228-7495]"
    }, {
      "left" : "public void clearCache()",
      "right" : "public void clearCache()",
      "info" : "MethodDeclaration[7501-8010]:MethodDeclaration[7501-8010]"
    }, {
      "left" : "public ClassLoader getClassLoader()",
      "right" : "public ClassLoader getClassLoader()",
      "info" : "MethodDeclaration[8016-8088]:MethodDeclaration[8016-8088]"
    }, {
      "left" : "public static JavaType unknownType()",
      "right" : "public static JavaType unknownType()",
      "info" : "MethodDeclaration[8308-8597]:MethodDeclaration[8308-8597]"
    }, {
      "left" : "public static Class<?> rawClass(Type t)",
      "right" : "public static Class<?> rawClass(Type t)",
      "info" : "MethodDeclaration[8603-9150]:MethodDeclaration[8603-9150]"
    }, {
      "left" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "right" : "public Class<?> findClass(String className) throws ClassNotFoundException",
      "info" : "MethodDeclaration[9332-10671]:MethodDeclaration[9332-10671]"
    }, {
      "left" : "protected Class<?> classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException",
      "right" : "protected Class<?> classForName(String name, boolean initialize,\n                                   ClassLoader loader) throws ClassNotFoundException",
      "info" : "MethodDeclaration[10681-10885]:MethodDeclaration[10681-10885]"
    }, {
      "left" : "protected Class<?> classForName(String name) throws ClassNotFoundException",
      "right" : "protected Class<?> classForName(String name) throws ClassNotFoundException",
      "info" : "MethodDeclaration[10895-11013]:MethodDeclaration[10895-11013]"
    }, {
      "left" : "protected Class<?> _findPrimitive(String className)",
      "right" : "protected Class<?> _findPrimitive(String className)",
      "info" : "MethodDeclaration[11019-11628]:MethodDeclaration[11019-11628]"
    }, {
      "left" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "right" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
      "info" : "MethodDeclaration[11842-18665]:MethodDeclaration[11842-18719]"
    }, {
      "left" : "private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class<?> subclass)",
      "right" : "private TypeBindings _bindingsForSubtype(JavaType baseType, int typeParamCount, Class<?> subclass)",
      "info" : "MethodDeclaration[18671-19728]:MethodDeclaration[18725-19782]"
    }, {
      "left" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
      "right" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
      "info" : "MethodDeclaration[19734-21122]:MethodDeclaration[19788-21176]"
    }, {
      "left" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "right" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
      "info" : "MethodDeclaration[21128-21684]:MethodDeclaration[21182-21738]"
    }, {
      "left" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "right" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
      "info" : "MethodDeclaration[21690-22321]:MethodDeclaration[21744-22375]"
    }, {
      "left" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "right" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
      "info" : "MethodDeclaration[22327-22628]:MethodDeclaration[22381-22682]"
    }, {
      "left" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "right" : "// since 2.7    \n    public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)",
      "info" : "MethodDeclaration[22638-22906]:MethodDeclaration[22692-22960]"
    }, {
      "left" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "right" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
      "info" : "MethodDeclaration[22912-23782]:MethodDeclaration[22966-23836]"
    }, {
      "left" : "public JavaType constructType(Type type)",
      "right" : "public JavaType constructType(Type type)",
      "info" : "MethodDeclaration[23966-24067]:MethodDeclaration[24020-24121]"
    }, {
      "left" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "right" : "public JavaType constructType(Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[24073-24191]:MethodDeclaration[24127-24245]"
    }, {
      "left" : "public JavaType constructType(TypeReference<?> typeRef)",
      "right" : "public JavaType constructType(TypeReference<?> typeRef)",
      "info" : "MethodDeclaration[24201-25237]:MethodDeclaration[24255-25291]"
    }, {
      "left" : "public JavaType constructType(Type type, Class<?> contextClass)",
      "right" : "public JavaType constructType(Type type, Class<?> contextClass)",
      "info" : "MethodDeclaration[25243-25622]:MethodDeclaration[25297-25676]"
    }, {
      "left" : "public JavaType constructType(Type type, JavaType contextType)",
      "right" : "public JavaType constructType(Type type, JavaType contextType)",
      "info" : "MethodDeclaration[25628-25989]:MethodDeclaration[25682-26043]"
    }, {
      "left" : "public ArrayType constructArrayType(Class<?> elementType)",
      "right" : "public ArrayType constructArrayType(Class<?> elementType)",
      "info" : "MethodDeclaration[26169-26522]:MethodDeclaration[26223-26576]"
    }, {
      "left" : "public ArrayType constructArrayType(JavaType elementType)",
      "right" : "public ArrayType constructArrayType(JavaType elementType)",
      "info" : "MethodDeclaration[26532-26839]:MethodDeclaration[26586-26893]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[26845-27283]:MethodDeclaration[26899-27337]"
    }, {
      "left" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "right" : "public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[27289-27866]:MethodDeclaration[27343-27920]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)",
      "info" : "MethodDeclaration[27872-28308]:MethodDeclaration[27926-28362]"
    }, {
      "left" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "right" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
      "info" : "MethodDeclaration[28318-28934]:MethodDeclaration[28372-28988]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[28940-29559]:MethodDeclaration[28994-29613]"
    }, {
      "left" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[29565-30050]:MethodDeclaration[29619-30104]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
      "info" : "MethodDeclaration[30056-30533]:MethodDeclaration[30110-30587]"
    }, {
      "left" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "right" : "public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)",
      "info" : "MethodDeclaration[30539-31276]:MethodDeclaration[30593-31330]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[31282-31609]:MethodDeclaration[31336-31663]"
    }, {
      "left" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "right" : "public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget,\n            JavaType[] parameterTypes)",
      "info" : "MethodDeclaration[31615-31979]:MethodDeclaration[31669-32033]"
    }, {
      "left" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
      "right" : "public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)",
      "info" : "MethodDeclaration[31986-32270]:MethodDeclaration[32040-32324]"
    }, {
      "left" : "// since 2.8\n    public JavaType uncheckedSimpleType(Class<?> cls)",
      "right" : "// since 2.8\n    public JavaType uncheckedSimpleType(Class<?> cls)",
      "info" : "MethodDeclaration[32276-33116]:MethodDeclaration[32330-33170]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[33122-34779]:MethodDeclaration[33176-34833]"
    }, {
      "left" : "public JavaType constructParametricType(Class<?> rawType, JavaType... parameterTypes)",
      "right" : "public JavaType constructParametricType(Class<?> rawType, JavaType... parameterTypes)",
      "info" : "MethodDeclaration[34785-36269]:MethodDeclaration[34839-36323]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            JavaType... parameterTypes)",
      "info" : "MethodDeclaration[36275-36587]:MethodDeclaration[36329-36641]"
    }, {
      "left" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "right" : "public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor,\n            Class<?>... parameterClasses)",
      "info" : "MethodDeclaration[36593-36909]:MethodDeclaration[36647-36963]"
    }, {
      "left" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "right" : "public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)",
      "info" : "MethodDeclaration[37154-37786]:MethodDeclaration[37208-37840]"
    }, {
      "left" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "right" : "public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)",
      "info" : "MethodDeclaration[37792-38426]:MethodDeclaration[37846-38480]"
    }, {
      "left" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "right" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
      "info" : "MethodDeclaration[38432-39050]:MethodDeclaration[38486-39104]"
    }, {
      "left" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "right" : "public MapLikeType constructRawMapLikeType(Class<?> mapClass)",
      "info" : "MethodDeclaration[39056-39683]:MethodDeclaration[39110-39737]"
    }, {
      "left" : "private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[39866-40882]:MethodDeclaration[39920-40936]"
    }, {
      "left" : "private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[40888-41565]:MethodDeclaration[40942-41619]"
    }, {
      "left" : "private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[41571-42245]:MethodDeclaration[41625-42299]"
    }, {
      "left" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[42251-42960]:MethodDeclaration[42305-43014]"
    }, {
      "left" : "protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[42966-43415]:MethodDeclaration[43020-43469]"
    }, {
      "left" : "protected JavaType _unknownType()",
      "right" : "protected JavaType _unknownType()",
      "info" : "MethodDeclaration[43421-43825]:MethodDeclaration[43475-43879]"
    }, {
      "left" : "protected JavaType _findWellKnownSimple(Class<?> clz)",
      "right" : "protected JavaType _findWellKnownSimple(Class<?> clz)",
      "info" : "MethodDeclaration[43831-44517]:MethodDeclaration[43885-44571]"
    }, {
      "left" : "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)",
      "right" : "protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)",
      "info" : "MethodDeclaration[44708-47070]:MethodDeclaration[44762-47124]"
    }, {
      "left" : "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)",
      "right" : "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)",
      "info" : "MethodDeclaration[47076-50982]:MethodDeclaration[47130-51036]"
    }, {
      "left" : "protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "right" : "protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "info" : "MethodDeclaration[50988-51290]:MethodDeclaration[51042-51344]"
    }, {
      "left" : "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "right" : "protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)",
      "info" : "MethodDeclaration[51296-51829]:MethodDeclaration[51350-51883]"
    }, {
      "left" : "protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[51835-53242]:MethodDeclaration[51889-53296]"
    }, {
      "left" : "protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "right" : "protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,\n            JavaType superClass, JavaType[] superInterfaces)",
      "info" : "MethodDeclaration[53248-53854]:MethodDeclaration[53302-53908]"
    }, {
      "left" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)",
      "right" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,\n            TypeBindings parentBindings)",
      "info" : "MethodDeclaration[53860-55465]:MethodDeclaration[53914-55519]"
    }, {
      "left" : "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)",
      "right" : "protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)",
      "info" : "MethodDeclaration[55471-55733]:MethodDeclaration[55525-55787]"
    }, {
      "left" : "protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)",
      "right" : "protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)",
      "info" : "MethodDeclaration[55739-56459]:MethodDeclaration[55793-56513]"
    }, {
      "left" : "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)",
      "right" : "protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)",
      "info" : "MethodDeclaration[56465-56967]:MethodDeclaration[56519-57021]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5193-5220]:Block[5193-5220]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[5203-5214]:ConstructorInvocation[5203-5214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5317-5557]:Block[5317-5557]"
    }, {
      "left" : "if (typeCache == null)",
      "right" : "if (typeCache == null)",
      "info" : "IfStatement[5327-5423]:IfStatement[5327-5423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5350-5423]:Block[5350-5423]"
    }, {
      "left" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "right" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "info" : "ExpressionStatement[5364-5413]:ExpressionStatement[5364-5413]"
    }, {
      "left" : "_typeCache = typeCache;",
      "right" : "_typeCache = typeCache;",
      "info" : "ExpressionStatement[5432-5455]:ExpressionStatement[5432-5455]"
    }, {
      "left" : "_parser = new TypeParser(this);",
      "right" : "_parser = new TypeParser(this);",
      "info" : "ExpressionStatement[5464-5495]:ExpressionStatement[5464-5495]"
    }, {
      "left" : "_modifiers = null;",
      "right" : "_modifiers = null;",
      "info" : "ExpressionStatement[5504-5522]:ExpressionStatement[5504-5522]"
    }, {
      "left" : "_classLoader = null;",
      "right" : "_classLoader = null;",
      "info" : "ExpressionStatement[5531-5551]:ExpressionStatement[5531-5551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5696-6026]:Block[5696-6026]"
    }, {
      "left" : "if (typeCache == null)",
      "right" : "if (typeCache == null)",
      "info" : "IfStatement[5706-5802]:IfStatement[5706-5802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5729-5802]:Block[5729-5802]"
    }, {
      "left" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "right" : "typeCache = new LRUMap<Object,JavaType>(16, 200);",
      "info" : "ExpressionStatement[5743-5792]:ExpressionStatement[5743-5792]"
    }, {
      "left" : "_typeCache = typeCache;",
      "right" : "_typeCache = typeCache;",
      "info" : "ExpressionStatement[5811-5834]:ExpressionStatement[5811-5834]"
    }, {
      "left" : "_parser = p.withFactory(this);",
      "right" : "_parser = p.withFactory(this);",
      "info" : "ExpressionStatement[5927-5957]:ExpressionStatement[5927-5957]"
    }, {
      "left" : "_modifiers = mods;",
      "right" : "_modifiers = mods;",
      "info" : "ExpressionStatement[5966-5984]:ExpressionStatement[5966-5984]"
    }, {
      "left" : "_classLoader = classLoader;",
      "right" : "_classLoader = classLoader;",
      "info" : "ExpressionStatement[5993-6020]:ExpressionStatement[5993-6020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6087-6701]:Block[6087-6701]"
    }, {
      "left" : "LRUMap<Object,JavaType> typeCache = _typeCache;",
      "right" : "LRUMap<Object,JavaType> typeCache = _typeCache;",
      "info" : "VariableDeclarationStatement[6097-6144]:VariableDeclarationStatement[6097-6144]"
    }, {
      "left" : "TypeModifier[] mods;",
      "right" : "TypeModifier[] mods;",
      "info" : "VariableDeclarationStatement[6153-6173]:VariableDeclarationStatement[6153-6173]"
    }, {
      "left" : "if (mod == null)",
      "right" : "if (mod == null)",
      "info" : "IfStatement[6182-6623]:IfStatement[6182-6623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6199-6449]:Block[6199-6449]"
    }, {
      "left" : "mods = null;",
      "right" : "mods = null;",
      "info" : "ExpressionStatement[6238-6250]:ExpressionStatement[6238-6250]"
    }, {
      "left" : "typeCache = null;",
      "right" : "typeCache = null;",
      "info" : "ExpressionStatement[6422-6439]:ExpressionStatement[6422-6439]"
    }, {
      "left" : "if (_modifiers == null)",
      "right" : "if (_modifiers == null)",
      "info" : "IfStatement[6455-6623]:IfStatement[6455-6623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6479-6537]:Block[6479-6537]"
    }, {
      "left" : "mods = new TypeModifier[] { mod };",
      "right" : "mods = new TypeModifier[] { mod };",
      "info" : "ExpressionStatement[6493-6527]:ExpressionStatement[6493-6527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6543-6623]:Block[6543-6623]"
    }, {
      "left" : "mods = ArrayBuilders.insertInListNoDup(_modifiers, mod);",
      "right" : "mods = ArrayBuilders.insertInListNoDup(_modifiers, mod);",
      "info" : "ExpressionStatement[6557-6613]:ExpressionStatement[6557-6613]"
    }, {
      "left" : "return new TypeFactory(typeCache, _parser, mods, _classLoader);",
      "right" : "return new TypeFactory(typeCache, _parser, mods, _classLoader);",
      "info" : "ReturnStatement[6632-6695]:ReturnStatement[6632-6695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6767-6852]:Block[6767-6852]"
    }, {
      "left" : "return new TypeFactory(_typeCache, _parser, _modifiers, classLoader);",
      "right" : "return new TypeFactory(_typeCache, _parser, _modifiers, classLoader);",
      "info" : "ReturnStatement[6777-6846]:ReturnStatement[6777-6846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7141-7222]:Block[7141-7222]"
    }, {
      "left" : "return new TypeFactory(cache, _parser, _modifiers, _classLoader);",
      "right" : "return new TypeFactory(cache, _parser, _modifiers, _classLoader);",
      "info" : "ReturnStatement[7151-7216]:ReturnStatement[7151-7216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7475-7495]:Block[7475-7495]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[7477-7493]:ReturnStatement[7477-7493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7975-8010]:Block[7975-8010]"
    }, {
      "left" : "_typeCache.clear();",
      "right" : "_typeCache.clear();",
      "info" : "ExpressionStatement[7985-8004]:ExpressionStatement[7985-8004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8052-8088]:Block[8052-8088]"
    }, {
      "left" : "return _classLoader;",
      "right" : "return _classLoader;",
      "info" : "ReturnStatement[8062-8082]:ReturnStatement[8062-8082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8541-8597]:Block[8541-8597]"
    }, {
      "left" : "return defaultInstance()._unknownType();",
      "right" : "return defaultInstance()._unknownType();",
      "info" : "ReturnStatement[8551-8591]:ReturnStatement[8551-8591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8938-9150]:Block[8938-9150]"
    }, {
      "left" : "if (t instanceof Class<?>)",
      "right" : "if (t instanceof Class<?>)",
      "info" : "IfStatement[8948-9019]:IfStatement[8948-9019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8975-9019]:Block[8975-9019]"
    }, {
      "left" : "return (Class<?>) t;",
      "right" : "return (Class<?>) t;",
      "info" : "ReturnStatement[8989-9009]:ReturnStatement[8989-9009]"
    }, {
      "left" : "return defaultInstance().constructType(t).getRawClass();",
      "right" : "return defaultInstance().constructType(t).getRawClass();",
      "info" : "ReturnStatement[9088-9144]:ReturnStatement[9088-9144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9630-10671]:Block[9630-10671]"
    }, {
      "left" : "if (className.indexOf('.') < 0)",
      "right" : "if (className.indexOf('.') < 0)",
      "info" : "IfStatement[9640-9813]:IfStatement[9640-9813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9672-9813]:Block[9672-9813]"
    }, {
      "left" : "Class<?> prim = _findPrimitive(className);",
      "right" : "Class<?> prim = _findPrimitive(className);",
      "info" : "VariableDeclarationStatement[9686-9728]:VariableDeclarationStatement[9686-9728]"
    }, {
      "left" : "if (prim != null)",
      "right" : "if (prim != null)",
      "info" : "IfStatement[9741-9803]:IfStatement[9741-9803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9759-9803]:Block[9759-9803]"
    }, {
      "left" : "return prim;",
      "right" : "return prim;",
      "info" : "ReturnStatement[9777-9789]:ReturnStatement[9777-9789]"
    }, {
      "left" : "Throwable prob = null;",
      "right" : "Throwable prob = null;",
      "info" : "VariableDeclarationStatement[9897-9919]:VariableDeclarationStatement[9897-9919]"
    }, {
      "left" : "ClassLoader loader = this.getClassLoader();",
      "right" : "ClassLoader loader = this.getClassLoader();",
      "info" : "VariableDeclarationStatement[9928-9971]:VariableDeclarationStatement[9928-9971]"
    }, {
      "left" : "if (loader == null)",
      "right" : "if (loader == null)",
      "info" : "IfStatement[9980-10081]:IfStatement[9980-10081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10000-10081]:Block[10000-10081]"
    }, {
      "left" : "loader = \tThread.currentThread().getContextClassLoader();",
      "right" : "loader = \tThread.currentThread().getContextClassLoader();",
      "info" : "ExpressionStatement[10014-10071]:ExpressionStatement[10014-10071]"
    }, {
      "left" : "if (loader != null)",
      "right" : "if (loader != null)",
      "info" : "IfStatement[10090-10301]:IfStatement[10090-10301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10110-10301]:Block[10110-10301]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10124-10291]:TryStatement[10124-10291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10128-10205]:Block[10128-10205]"
    }, {
      "left" : "return classForName(className, true, loader);",
      "right" : "return classForName(className, true, loader);",
      "info" : "ReturnStatement[10146-10191]:ReturnStatement[10146-10191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10226-10291]:Block[10226-10291]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[10244-10277]:ExpressionStatement[10244-10277]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10310-10497]:TryStatement[10310-10497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10314-10369]:Block[10314-10369]"
    }, {
      "left" : "return classForName(className);",
      "right" : "return classForName(className);",
      "info" : "ReturnStatement[10328-10359]:ReturnStatement[10328-10359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10390-10497]:Block[10390-10497]"
    }, {
      "left" : "if (prob == null)",
      "right" : "if (prob == null)",
      "info" : "IfStatement[10404-10487]:IfStatement[10404-10487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10422-10487]:Block[10422-10487]"
    }, {
      "left" : "prob = ClassUtil.getRootCause(e);",
      "right" : "prob = ClassUtil.getRootCause(e);",
      "info" : "ExpressionStatement[10440-10473]:ExpressionStatement[10440-10473]"
    }, {
      "left" : "if (prob instanceof RuntimeException)",
      "right" : "if (prob instanceof RuntimeException)",
      "info" : "IfStatement[10506-10598]:IfStatement[10506-10598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10544-10598]:Block[10544-10598]"
    }, {
      "left" : "throw (RuntimeException) prob;",
      "right" : "throw (RuntimeException) prob;",
      "info" : "ThrowStatement[10558-10588]:ThrowStatement[10558-10588]"
    }, {
      "left" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "right" : "throw new ClassNotFoundException(prob.getMessage(), prob);",
      "info" : "ThrowStatement[10607-10665]:ThrowStatement[10607-10665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10831-10885]:Block[10831-10885]"
    }, {
      "left" : "return Class.forName(name, true, loader);",
      "right" : "return Class.forName(name, true, loader);",
      "info" : "ReturnStatement[10838-10879]:ReturnStatement[10838-10879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10970-11013]:Block[10970-11013]"
    }, {
      "left" : "return Class.forName(name);",
      "right" : "return Class.forName(name);",
      "info" : "ReturnStatement[10980-11007]:ReturnStatement[10980-11007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11075-11628]:Block[11075-11628]"
    }, {
      "left" : "if (\"int\".equals(className))",
      "right" : "if (\"int\".equals(className))",
      "info" : "IfStatement[11085-11134]:IfStatement[11085-11134]"
    }, {
      "left" : "return Integer.TYPE;",
      "right" : "return Integer.TYPE;",
      "info" : "ReturnStatement[11114-11134]:ReturnStatement[11114-11134]"
    }, {
      "left" : "if (\"long\".equals(className))",
      "right" : "if (\"long\".equals(className))",
      "info" : "IfStatement[11143-11190]:IfStatement[11143-11190]"
    }, {
      "left" : "return Long.TYPE;",
      "right" : "return Long.TYPE;",
      "info" : "ReturnStatement[11173-11190]:ReturnStatement[11173-11190]"
    }, {
      "left" : "if (\"float\".equals(className))",
      "right" : "if (\"float\".equals(className))",
      "info" : "IfStatement[11199-11248]:IfStatement[11199-11248]"
    }, {
      "left" : "return Float.TYPE;",
      "right" : "return Float.TYPE;",
      "info" : "ReturnStatement[11230-11248]:ReturnStatement[11230-11248]"
    }, {
      "left" : "if (\"double\".equals(className))",
      "right" : "if (\"double\".equals(className))",
      "info" : "IfStatement[11257-11308]:IfStatement[11257-11308]"
    }, {
      "left" : "return Double.TYPE;",
      "right" : "return Double.TYPE;",
      "info" : "ReturnStatement[11289-11308]:ReturnStatement[11289-11308]"
    }, {
      "left" : "if (\"boolean\".equals(className))",
      "right" : "if (\"boolean\".equals(className))",
      "info" : "IfStatement[11317-11370]:IfStatement[11317-11370]"
    }, {
      "left" : "return Boolean.TYPE;",
      "right" : "return Boolean.TYPE;",
      "info" : "ReturnStatement[11350-11370]:ReturnStatement[11350-11370]"
    }, {
      "left" : "if (\"byte\".equals(className))",
      "right" : "if (\"byte\".equals(className))",
      "info" : "IfStatement[11379-11426]:IfStatement[11379-11426]"
    }, {
      "left" : "return Byte.TYPE;",
      "right" : "return Byte.TYPE;",
      "info" : "ReturnStatement[11409-11426]:ReturnStatement[11409-11426]"
    }, {
      "left" : "if (\"char\".equals(className))",
      "right" : "if (\"char\".equals(className))",
      "info" : "IfStatement[11435-11487]:IfStatement[11435-11487]"
    }, {
      "left" : "return Character.TYPE;",
      "right" : "return Character.TYPE;",
      "info" : "ReturnStatement[11465-11487]:ReturnStatement[11465-11487]"
    }, {
      "left" : "if (\"short\".equals(className))",
      "right" : "if (\"short\".equals(className))",
      "info" : "IfStatement[11496-11545]:IfStatement[11496-11545]"
    }, {
      "left" : "return Short.TYPE;",
      "right" : "return Short.TYPE;",
      "info" : "ReturnStatement[11527-11545]:ReturnStatement[11527-11545]"
    }, {
      "left" : "if (\"void\".equals(className))",
      "right" : "if (\"void\".equals(className))",
      "info" : "IfStatement[11554-11601]:IfStatement[11554-11601]"
    }, {
      "left" : "return Void.TYPE;",
      "right" : "return Void.TYPE;",
      "info" : "ReturnStatement[11584-11601]:ReturnStatement[11584-11601]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11610-11622]:ReturnStatement[11610-11622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12277-18665]:Block[12277-18719]"
    }, {
      "left" : "final Class<?> rawBase = baseType.getRawClass();",
      "right" : "final Class<?> rawBase = baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[12384-12432]:VariableDeclarationStatement[12384-12432]"
    }, {
      "left" : "if (rawBase == subclass)",
      "right" : "if (rawBase == subclass)",
      "info" : "IfStatement[12441-12506]:IfStatement[12441-12506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12466-12506]:Block[12466-12506]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[12480-12496]:ReturnStatement[12480-12496]"
    }, {
      "left" : "JavaType newType;",
      "right" : "JavaType newType;",
      "info" : "VariableDeclarationStatement[12516-12533]:VariableDeclarationStatement[12516-12533]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[12603-16506]:DoStatement[12603-16506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12606-16491]:Block[12606-16491]"
    }, {
      "left" : "if (rawBase == Object.class)",
      "right" : "if (rawBase == Object.class)",
      "info" : "IfStatement[12654-12805]:IfStatement[12654-12805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12683-12805]:Block[12683-12805]"
    }, {
      "left" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "right" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "info" : "ExpressionStatement[12701-12768]:ExpressionStatement[12701-12768]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12785-12791]:BreakStatement[12785-12791]"
    }, {
      "left" : "if (!rawBase.isAssignableFrom(subclass))",
      "right" : "if (!rawBase.isAssignableFrom(subclass))",
      "info" : "IfStatement[12818-13026]:IfStatement[12818-13026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12859-13026]:Block[12859-13026]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not subtype of %s\", subclass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not subtype of %s\", subclass.getName(), baseType));",
      "info" : "ThrowStatement[12877-13012]:ThrowStatement[12877-13012]"
    }, {
      "left" : "if (baseType.getBindings().isEmpty())",
      "right" : "if (baseType.getBindings().isEmpty())",
      "info" : "IfStatement[13187-13352]:IfStatement[13187-13352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13225-13352]:Block[13225-13352]"
    }, {
      "left" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "right" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "info" : "ExpressionStatement[13243-13310]:ExpressionStatement[13243-13310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13332-13338]:BreakStatement[13332-13338]"
    }, {
      "left" : "if (baseType.isContainerType())",
      "right" : "if (baseType.isContainerType())",
      "info" : "IfStatement[13457-14836]:IfStatement[13457-14836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13489-14836]:Block[13489-14836]"
    }, {
      "left" : "if (baseType.isMapLikeType())",
      "right" : "if (baseType.isMapLikeType())",
      "info" : "IfStatement[13507-14822]:IfStatement[13507-14822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13537-14022]:Block[13537-14022]"
    }, {
      "left" : "if ((subclass == HashMap.class)\n                            || (subclass == LinkedHashMap.class)\n                            || (subclass == EnumMap.class)\n                            || (subclass == TreeMap.class))",
      "right" : "if ((subclass == HashMap.class)\n                            || (subclass == LinkedHashMap.class)\n                            || (subclass == EnumMap.class)\n                            || (subclass == TreeMap.class))",
      "info" : "IfStatement[13559-14004]:IfStatement[13559-14004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13775-14004]:Block[13775-14004]"
    }, {
      "left" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));",
      "right" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));",
      "info" : "ExpressionStatement[13801-13951]:ExpressionStatement[13801-13951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13976-13982]:BreakStatement[13976-13982]"
    }, {
      "left" : "if (baseType.isCollectionLikeType())",
      "right" : "if (baseType.isCollectionLikeType())",
      "info" : "IfStatement[14028-14822]:IfStatement[14028-14822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14065-14822]:Block[14065-14822]"
    }, {
      "left" : "if ((subclass == ArrayList.class)\n                            || (subclass == LinkedList.class)\n                            || (subclass == HashSet.class)\n                            || (subclass == TreeSet.class))",
      "right" : "if ((subclass == ArrayList.class)\n                            || (subclass == LinkedList.class)\n                            || (subclass == HashSet.class)\n                            || (subclass == TreeSet.class))",
      "info" : "IfStatement[14087-14508]:IfStatement[14087-14508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14302-14508]:Block[14302-14508]"
    }, {
      "left" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getContentType()));",
      "right" : "newType = _fromClass(null, subclass,\n                                TypeBindings.create(subclass, baseType.getContentType()));",
      "info" : "ExpressionStatement[14328-14455]:ExpressionStatement[14328-14455]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14480-14486]:BreakStatement[14480-14486]"
    }, {
      "left" : "if (rawBase == EnumSet.class)",
      "right" : "if (rawBase == EnumSet.class)",
      "info" : "IfStatement[14710-14804]:IfStatement[14710-14804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14740-14804]:Block[14740-14804]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[14766-14782]:ReturnStatement[14766-14782]"
    }, {
      "left" : "int typeParamCount = subclass.getTypeParameters().length;",
      "right" : "int typeParamCount = subclass.getTypeParameters().length;",
      "info" : "VariableDeclarationStatement[14932-14989]:VariableDeclarationStatement[14932-14989]"
    }, {
      "left" : "if (typeParamCount == 0)",
      "right" : "if (typeParamCount == 0)",
      "info" : "IfStatement[15002-15154]:IfStatement[15002-15154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15027-15154]:Block[15027-15154]"
    }, {
      "left" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "right" : "newType = _fromClass(null, subclass, TypeBindings.emptyBindings());",
      "info" : "ExpressionStatement[15045-15112]:ExpressionStatement[15045-15112]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15134-15140]:BreakStatement[15134-15140]"
    }, {
      "left" : "TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);",
      "right" : "TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);",
      "info" : "VariableDeclarationStatement[15976-16050]:VariableDeclarationStatement[15976-16050]"
    }, {
      "left" : "if (baseType.isInterface())",
      "right" : "if (baseType.isInterface())",
      "info" : "IfStatement[16063-16296]:IfStatement[16063-16296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16091-16198]:Block[16091-16198]"
    }, {
      "left" : "newType = baseType.refine(subclass, tb, null, new JavaType[] { baseType });",
      "right" : "newType = baseType.refine(subclass, tb, null, new JavaType[] { baseType });",
      "info" : "ExpressionStatement[16109-16184]:ExpressionStatement[16109-16184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16204-16296]:Block[16204-16296]"
    }, {
      "left" : "newType = baseType.refine(subclass, tb, baseType, NO_TYPES);",
      "right" : "newType = baseType.refine(subclass, tb, baseType, NO_TYPES);",
      "info" : "ExpressionStatement[16222-16282]:ExpressionStatement[16222-16282]"
    }, {
      "left" : "if (newType == null)",
      "right" : "if (newType == null)",
      "info" : "IfStatement[16387-16481]:IfStatement[16387-16481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16408-16481]:Block[16408-16481]"
    }, {
      "left" : "newType = _fromClass(null, subclass, tb);",
      "right" : "newType = _fromClass(null, subclass, tb);",
      "info" : "ExpressionStatement[16426-16467]:ExpressionStatement[16426-16467]"
    }, {
      "left" : "return newType;",
      "right" : "return newType;",
      "info" : "ReturnStatement[16630-16645]:ReturnStatement[16684-16699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18774-19728]:Block[18828-19782]"
    }, {
      "left" : "int baseCount = baseType.containedTypeCount();",
      "right" : "int baseCount = baseType.containedTypeCount();",
      "info" : "VariableDeclarationStatement[18934-18980]:VariableDeclarationStatement[18988-19034]"
    }, {
      "left" : "if (baseCount == typeParamCount)",
      "right" : "if (baseCount == typeParamCount)",
      "info" : "IfStatement[18989-19598]:IfStatement[19043-19652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19022-19598]:Block[19076-19652]"
    }, {
      "left" : "if (typeParamCount == 1)",
      "right" : "if (typeParamCount == 1)",
      "info" : "IfStatement[19036-19157]:IfStatement[19090-19211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19061-19157]:Block[19115-19211]"
    }, {
      "left" : "return TypeBindings.create(subclass, baseType.containedType(0));",
      "right" : "return TypeBindings.create(subclass, baseType.containedType(0));",
      "info" : "ReturnStatement[19079-19143]:ReturnStatement[19133-19197]"
    }, {
      "left" : "if (typeParamCount == 2)",
      "right" : "if (typeParamCount == 2)",
      "info" : "IfStatement[19170-19342]:IfStatement[19224-19396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19195-19342]:Block[19249-19396]"
    }, {
      "left" : "return TypeBindings.create(subclass, baseType.containedType(0),\n                        baseType.containedType(1));",
      "right" : "return TypeBindings.create(subclass, baseType.containedType(0),\n                        baseType.containedType(1));",
      "info" : "ReturnStatement[19213-19328]:ReturnStatement[19267-19382]"
    }, {
      "left" : "List<JavaType> types = new ArrayList<JavaType>(baseCount);",
      "right" : "List<JavaType> types = new ArrayList<JavaType>(baseCount);",
      "info" : "VariableDeclarationStatement[19355-19413]:VariableDeclarationStatement[19409-19467]"
    }, {
      "left" : "for (int i = 0; i < baseCount; ++i)",
      "right" : "for (int i = 0; i < baseCount; ++i)",
      "info" : "ForStatement[19426-19531]:ForStatement[19480-19585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19462-19531]:Block[19516-19585]"
    }, {
      "left" : "types.add(baseType.containedType(i));",
      "right" : "types.add(baseType.containedType(i));",
      "info" : "ExpressionStatement[19480-19517]:ExpressionStatement[19534-19571]"
    }, {
      "left" : "return TypeBindings.create(subclass, types);",
      "right" : "return TypeBindings.create(subclass, types);",
      "info" : "ReturnStatement[19544-19588]:ReturnStatement[19598-19642]"
    }, {
      "left" : "return TypeBindings.emptyBindings();",
      "right" : "return TypeBindings.emptyBindings();",
      "info" : "ReturnStatement[19686-19722]:ReturnStatement[19740-19776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20183-21122]:Block[20237-21176]"
    }, {
      "left" : "final Class<?> rawBase = baseType.getRawClass();",
      "right" : "final Class<?> rawBase = baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[20290-20338]:VariableDeclarationStatement[20344-20392]"
    }, {
      "left" : "if (rawBase == superClass)",
      "right" : "if (rawBase == superClass)",
      "info" : "IfStatement[20347-20414]:IfStatement[20401-20468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20374-20414]:Block[20428-20468]"
    }, {
      "left" : "return baseType;",
      "right" : "return baseType;",
      "info" : "ReturnStatement[20388-20404]:ReturnStatement[20442-20458]"
    }, {
      "left" : "JavaType superType = baseType.findSuperType(superClass);",
      "right" : "JavaType superType = baseType.findSuperType(superClass);",
      "info" : "VariableDeclarationStatement[20423-20479]:VariableDeclarationStatement[20477-20533]"
    }, {
      "left" : "if (superType == null)",
      "right" : "if (superType == null)",
      "info" : "IfStatement[20488-21090]:IfStatement[20542-21144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20511-21090]:Block[20565-21144]"
    }, {
      "left" : "if (!superClass.isAssignableFrom(rawBase))",
      "right" : "if (!superClass.isAssignableFrom(rawBase))",
      "info" : "IfStatement[20603-20820]:IfStatement[20657-20874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20646-20820]:Block[20700-20874]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                        \"Class %s not a super-type of %s\", superClass.getName(), baseType));",
      "info" : "ThrowStatement[20664-20806]:ThrowStatement[20718-20860]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));",
      "right" : "throw new IllegalArgumentException(String.format(\n                    \"Internal error: class %s not included as super-type for %s\",\n                    superClass.getName(), baseType));",
      "info" : "ThrowStatement[20895-21080]:ThrowStatement[20949-21134]"
    }, {
      "left" : "return superType;",
      "right" : "return superType;",
      "info" : "ReturnStatement[21099-21116]:ReturnStatement[21153-21170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21636-21684]:Block[21690-21738]"
    }, {
      "left" : "return _parser.parse(canonical);",
      "right" : "return _parser.parse(canonical);",
      "info" : "ReturnStatement[21646-21678]:ReturnStatement[21700-21732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22135-22321]:Block[22189-22375]"
    }, {
      "left" : "JavaType match = type.findSuperType(expType);",
      "right" : "JavaType match = type.findSuperType(expType);",
      "info" : "VariableDeclarationStatement[22145-22190]:VariableDeclarationStatement[22199-22244]"
    }, {
      "left" : "if (match == null)",
      "right" : "if (match == null)",
      "info" : "IfStatement[22199-22258]:IfStatement[22253-22312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22218-22258]:Block[22272-22312]"
    }, {
      "left" : "return NO_TYPES;",
      "right" : "return NO_TYPES;",
      "info" : "ReturnStatement[22232-22248]:ReturnStatement[22286-22302]"
    }, {
      "left" : "return match.getBindings().typeParameterArray();",
      "right" : "return match.getBindings().typeParameterArray();",
      "info" : "ReturnStatement[22267-22315]:ReturnStatement[22321-22369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22547-22628]:Block[22601-22682]"
    }, {
      "left" : "return findTypeParameters(constructType(clz, bindings), expType);",
      "right" : "return findTypeParameters(constructType(clz, bindings), expType);",
      "info" : "ReturnStatement[22557-22622]:ReturnStatement[22611-22676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22835-22906]:Block[22889-22960]"
    }, {
      "left" : "return findTypeParameters(constructType(clz), expType);",
      "right" : "return findTypeParameters(constructType(clz), expType);",
      "info" : "ReturnStatement[22845-22900]:ReturnStatement[22899-22954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23324-23782]:Block[23378-23836]"
    }, {
      "left" : "if (type1 == null)",
      "right" : "if (type1 == null)",
      "info" : "IfStatement[23334-23390]:IfStatement[23388-23444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23353-23390]:Block[23407-23444]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[23367-23380]:ReturnStatement[23421-23434]"
    }, {
      "left" : "if (type2 == null)",
      "right" : "if (type2 == null)",
      "info" : "IfStatement[23399-23455]:IfStatement[23453-23509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23418-23455]:Block[23472-23509]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[23432-23445]:ReturnStatement[23486-23499]"
    }, {
      "left" : "Class<?> raw1 = type1.getRawClass();",
      "right" : "Class<?> raw1 = type1.getRawClass();",
      "info" : "VariableDeclarationStatement[23464-23500]:VariableDeclarationStatement[23518-23554]"
    }, {
      "left" : "Class<?> raw2 = type2.getRawClass();",
      "right" : "Class<?> raw2 = type2.getRawClass();",
      "info" : "VariableDeclarationStatement[23509-23545]:VariableDeclarationStatement[23563-23599]"
    }, {
      "left" : "if (raw1 == raw2)",
      "right" : "if (raw1 == raw2)",
      "info" : "IfStatement[23554-23609]:IfStatement[23608-23663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23572-23609]:Block[23626-23663]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[23586-23599]:ReturnStatement[23640-23653]"
    }, {
      "left" : "if (raw1.isAssignableFrom(raw2))",
      "right" : "if (raw1.isAssignableFrom(raw2))",
      "info" : "IfStatement[23684-23754]:IfStatement[23738-23808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23717-23754]:Block[23771-23808]"
    }, {
      "left" : "return type2;",
      "right" : "return type2;",
      "info" : "ReturnStatement[23731-23744]:ReturnStatement[23785-23798]"
    }, {
      "left" : "return type1;",
      "right" : "return type1;",
      "info" : "ReturnStatement[23763-23776]:ReturnStatement[23817-23830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24007-24067]:Block[24061-24121]"
    }, {
      "left" : "return _fromAny(null, type, EMPTY_BINDINGS);",
      "right" : "return _fromAny(null, type, EMPTY_BINDINGS);",
      "info" : "ReturnStatement[24017-24061]:ReturnStatement[24071-24115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24137-24191]:Block[24191-24245]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[24147-24185]:ReturnStatement[24201-24239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24261-25237]:Block[24315-25291]"
    }, {
      "left" : "return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);",
      "right" : "return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);",
      "info" : "ReturnStatement[24337-24394]:ReturnStatement[24391-24448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25421-25622]:Block[25475-25676]"
    }, {
      "left" : "TypeBindings bindings = (contextClass == null)\n                ? TypeBindings.emptyBindings() : constructType(contextClass).getBindings();",
      "right" : "TypeBindings bindings = (contextClass == null)\n                ? TypeBindings.emptyBindings() : constructType(contextClass).getBindings();",
      "info" : "VariableDeclarationStatement[25431-25569]:VariableDeclarationStatement[25485-25623]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[25578-25616]:ReturnStatement[25632-25670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25805-25989]:Block[25859-26043]"
    }, {
      "left" : "TypeBindings bindings = (contextType == null)\n                ? TypeBindings.emptyBindings() : contextType.getBindings();",
      "right" : "TypeBindings bindings = (contextType == null)\n                ? TypeBindings.emptyBindings() : contextType.getBindings();",
      "info" : "VariableDeclarationStatement[25815-25936]:VariableDeclarationStatement[25869-25990]"
    }, {
      "left" : "return _fromAny(null, type, bindings);",
      "right" : "return _fromAny(null, type, bindings);",
      "info" : "ReturnStatement[25945-25983]:ReturnStatement[25999-26037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26438-26522]:Block[26492-26576]"
    }, {
      "left" : "return ArrayType.construct(_fromAny(null, elementType, null), null);",
      "right" : "return ArrayType.construct(_fromAny(null, elementType, null), null);",
      "info" : "ReturnStatement[26448-26516]:ReturnStatement[26502-26570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26777-26839]:Block[26831-26893]"
    }, {
      "left" : "return ArrayType.construct(elementType, null);",
      "right" : "return ArrayType.construct(elementType, null);",
      "info" : "ReturnStatement[26787-26833]:ReturnStatement[26841-26887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27155-27283]:Block[27209-27337]"
    }, {
      "left" : "return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "right" : "return constructCollectionType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[27165-27277]:ReturnStatement[27219-27331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27598-27866]:Block[27652-27920]"
    }, {
      "left" : "return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));",
      "right" : "return (CollectionType) _fromClass(null, collectionClass,\n                TypeBindings.create(collectionClass, elementType));",
      "info" : "ReturnStatement[27735-27860]:ReturnStatement[27789-27914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28176-28308]:Block[28230-28362]"
    }, {
      "left" : "return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "right" : "return constructCollectionLikeType(collectionClass,\n                _fromClass(null, elementClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[28186-28302]:ReturnStatement[28240-28356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28621-28934]:Block[28675-28988]"
    }, {
      "left" : "JavaType type = _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));",
      "right" : "JavaType type = _fromClass(null, collectionClass,\n                TypeBindings.createIfNeeded(collectionClass, elementType));",
      "info" : "VariableDeclarationStatement[28631-28756]:VariableDeclarationStatement[28685-28810]"
    }, {
      "left" : "if (type instanceof CollectionLikeType)",
      "right" : "if (type instanceof CollectionLikeType)",
      "info" : "IfStatement[28765-28862]:IfStatement[28819-28916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28805-28862]:Block[28859-28916]"
    }, {
      "left" : "return (CollectionLikeType) type;",
      "right" : "return (CollectionLikeType) type;",
      "info" : "ReturnStatement[28819-28852]:ReturnStatement[28873-28906]"
    }, {
      "left" : "return CollectionLikeType.upgradeFrom(type, elementType);",
      "right" : "return CollectionLikeType.upgradeFrom(type, elementType);",
      "info" : "ReturnStatement[28871-28928]:ReturnStatement[28925-28982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29241-29559]:Block[29295-29613]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[29251-29267]:VariableDeclarationStatement[29305-29321]"
    }, {
      "left" : "if (mapClass == Properties.class)",
      "right" : "if (mapClass == Properties.class)",
      "info" : "IfStatement[29276-29502]:IfStatement[29330-29556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29310-29361]:Block[29364-29415]"
    }, {
      "left" : "kt = vt = CORE_TYPE_STRING;",
      "right" : "kt = vt = CORE_TYPE_STRING;",
      "info" : "ExpressionStatement[29324-29351]:ExpressionStatement[29378-29405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29367-29502]:Block[29421-29556]"
    }, {
      "left" : "kt = _fromClass(null, keyClass, EMPTY_BINDINGS);",
      "right" : "kt = _fromClass(null, keyClass, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[29381-29429]:ExpressionStatement[29435-29483]"
    }, {
      "left" : "vt = _fromClass(null, valueClass, EMPTY_BINDINGS);",
      "right" : "vt = _fromClass(null, valueClass, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[29442-29492]:ExpressionStatement[29496-29546]"
    }, {
      "left" : "return constructMapType(mapClass, kt, vt);",
      "right" : "return constructMapType(mapClass, kt, vt);",
      "info" : "ReturnStatement[29511-29553]:ReturnStatement[29565-29607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29864-30050]:Block[29918-30104]"
    }, {
      "left" : "return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, new JavaType[] {\n                        keyType, valueType\n                }));",
      "right" : "return (MapType) _fromClass(null, mapClass,\n                TypeBindings.create(mapClass, new JavaType[] {\n                        keyType, valueType\n                }));",
      "info" : "ReturnStatement[29874-30044]:ReturnStatement[29928-30098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30357-30533]:Block[30411-30587]"
    }, {
      "left" : "return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));",
      "right" : "return constructMapLikeType(mapClass,\n                _fromClass(null, keyClass, EMPTY_BINDINGS),\n                _fromClass(null, valueClass, EMPTY_BINDINGS));",
      "info" : "ReturnStatement[30367-30527]:ReturnStatement[30421-30581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30838-31276]:Block[30892-31330]"
    }, {
      "left" : "JavaType type = _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));",
      "right" : "JavaType type = _fromClass(null, mapClass,\n                TypeBindings.createIfNeeded(mapClass, new JavaType[] { keyType, valueType }));",
      "info" : "VariableDeclarationStatement[30975-31112]:VariableDeclarationStatement[31029-31166]"
    }, {
      "left" : "if (type instanceof MapLikeType)",
      "right" : "if (type instanceof MapLikeType)",
      "info" : "IfStatement[31121-31204]:IfStatement[31175-31258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31154-31204]:Block[31208-31258]"
    }, {
      "left" : "return (MapLikeType) type;",
      "right" : "return (MapLikeType) type;",
      "info" : "ReturnStatement[31168-31194]:ReturnStatement[31222-31248]"
    }, {
      "left" : "return MapLikeType.upgradeFrom(type, keyType, valueType);",
      "right" : "return MapLikeType.upgradeFrom(type, keyType, valueType);",
      "info" : "ReturnStatement[31213-31270]:ReturnStatement[31267-31324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31514-31609]:Block[31568-31663]"
    }, {
      "left" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "right" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "info" : "ReturnStatement[31524-31603]:ReturnStatement[31578-31657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31911-31979]:Block[31965-32033]"
    }, {
      "left" : "return constructSimpleType(rawType, parameterTypes);",
      "right" : "return constructSimpleType(rawType, parameterTypes);",
      "info" : "ReturnStatement[31921-31973]:ReturnStatement[31975-32027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32104-32270]:Block[32158-32324]"
    }, {
      "left" : "return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);",
      "right" : "return ReferenceType.construct(rawType, null, // no bindings\n                null, null, // or super-class, interfaces?\n                referredType);",
      "info" : "ReturnStatement[32114-32264]:ReturnStatement[32168-32318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32955-33116]:Block[33009-33170]"
    }, {
      "left" : "return _constructSimple(cls, EMPTY_BINDINGS, null, null);",
      "right" : "return _constructSimple(cls, EMPTY_BINDINGS, null, null);",
      "info" : "ReturnStatement[33053-33110]:ReturnStatement[33107-33164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34513-34779]:Block[34567-34833]"
    }, {
      "left" : "int len = parameterClasses.length;",
      "right" : "int len = parameterClasses.length;",
      "info" : "VariableDeclarationStatement[34523-34557]:VariableDeclarationStatement[34577-34611]"
    }, {
      "left" : "JavaType[] pt = new JavaType[len];",
      "right" : "JavaType[] pt = new JavaType[len];",
      "info" : "VariableDeclarationStatement[34566-34600]:VariableDeclarationStatement[34620-34654]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[34609-34715]:ForStatement[34663-34769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34639-34715]:Block[34693-34769]"
    }, {
      "left" : "pt[i] = _fromClass(null, parameterClasses[i], null);",
      "right" : "pt[i] = _fromClass(null, parameterClasses[i], null);",
      "info" : "ExpressionStatement[34653-34705]:ExpressionStatement[34707-34759]"
    }, {
      "left" : "return constructParametricType(parametrized, pt);",
      "right" : "return constructParametricType(parametrized, pt);",
      "info" : "ReturnStatement[34724-34773]:ReturnStatement[34778-34827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36174-36269]:Block[36228-36323]"
    }, {
      "left" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "right" : "return _fromClass(null, rawType, TypeBindings.create(rawType, parameterTypes));",
      "info" : "ReturnStatement[36184-36263]:ReturnStatement[36238-36317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36510-36587]:Block[36564-36641]"
    }, {
      "left" : "return constructParametricType(parametrized, parameterTypes);",
      "right" : "return constructParametricType(parametrized, parameterTypes);",
      "info" : "ReturnStatement[36520-36581]:ReturnStatement[36574-36635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36830-36909]:Block[36884-36963]"
    }, {
      "left" : "return constructParametricType(parametrized, parameterClasses);",
      "right" : "return constructParametricType(parametrized, parameterClasses);",
      "info" : "ReturnStatement[36840-36903]:ReturnStatement[36894-36957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37707-37786]:Block[37761-37840]"
    }, {
      "left" : "return constructCollectionType(collectionClass, unknownType());",
      "right" : "return constructCollectionType(collectionClass, unknownType());",
      "info" : "ReturnStatement[37717-37780]:ReturnStatement[37771-37834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38343-38426]:Block[38397-38480]"
    }, {
      "left" : "return constructCollectionLikeType(collectionClass, unknownType());",
      "right" : "return constructCollectionLikeType(collectionClass, unknownType());",
      "info" : "ReturnStatement[38353-38420]:ReturnStatement[38407-38474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38970-39050]:Block[39024-39104]"
    }, {
      "left" : "return constructMapType(mapClass, unknownType(), unknownType());",
      "right" : "return constructMapType(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[38980-39044]:ReturnStatement[39034-39098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39599-39683]:Block[39653-39737]"
    }, {
      "left" : "return constructMapLikeType(mapClass, unknownType(), unknownType());",
      "right" : "return constructMapLikeType(mapClass, unknownType(), unknownType());",
      "info" : "ReturnStatement[39609-39677]:ReturnStatement[39663-39731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39999-40882]:Block[40053-40936]"
    }, {
      "left" : "JavaType kt, vt;",
      "right" : "JavaType kt, vt;",
      "info" : "VariableDeclarationStatement[40009-40025]:VariableDeclarationStatement[40063-40079]"
    }, {
      "left" : "if (rawClass == Properties.class)",
      "right" : "if (rawClass == Properties.class)",
      "info" : "IfStatement[40141-40785]:IfStatement[40195-40839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40175-40226]:Block[40229-40280]"
    }, {
      "left" : "kt = vt = CORE_TYPE_STRING;",
      "right" : "kt = vt = CORE_TYPE_STRING;",
      "info" : "ExpressionStatement[40189-40216]:ExpressionStatement[40243-40270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40232-40785]:Block[40286-40839]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[40246-40303]:VariableDeclarationStatement[40300-40357]"
    }, {
      "left" : "switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt = vt = _unknownType();\n                break;\n            case 2:\n                kt = typeParams.get(0);\n                vt = typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }",
      "right" : "switch (typeParams.size()) {\n            case 0: // acceptable?\n                kt = vt = _unknownType();\n                break;\n            case 2:\n                kt = typeParams.get(0);\n                vt = typeParams.get(1);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");\n            }",
      "info" : "SwitchStatement[40359-40775]:SwitchStatement[40413-40829]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[40400-40407]:SwitchCase[40454-40461]"
    }, {
      "left" : "kt = vt = _unknownType();",
      "right" : "kt = vt = _unknownType();",
      "info" : "ExpressionStatement[40439-40464]:ExpressionStatement[40493-40518]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40481-40487]:BreakStatement[40535-40541]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[40500-40507]:SwitchCase[40554-40561]"
    }, {
      "left" : "kt = typeParams.get(0);",
      "right" : "kt = typeParams.get(0);",
      "info" : "ExpressionStatement[40524-40547]:ExpressionStatement[40578-40601]"
    }, {
      "left" : "vt = typeParams.get(1);",
      "right" : "vt = typeParams.get(1);",
      "info" : "ExpressionStatement[40564-40587]:ExpressionStatement[40618-40641]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40604-40610]:BreakStatement[40658-40664]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40623-40631]:SwitchCase[40677-40685]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Map type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[40648-40761]:ThrowStatement[40702-40815]"
    }, {
      "left" : "return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);",
      "right" : "return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);",
      "info" : "ReturnStatement[40794-40876]:ReturnStatement[40848-40930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41028-41565]:Block[41082-41619]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[41038-41095]:VariableDeclarationStatement[41092-41149]"
    }, {
      "left" : "JavaType ct;",
      "right" : "JavaType ct;",
      "info" : "VariableDeclarationStatement[41143-41155]:VariableDeclarationStatement[41197-41209]"
    }, {
      "left" : "if (typeParams.isEmpty())",
      "right" : "if (typeParams.isEmpty())",
      "info" : "IfStatement[41164-41465]:IfStatement[41218-41519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41190-41234]:Block[41244-41288]"
    }, {
      "left" : "ct = _unknownType();",
      "right" : "ct = _unknownType();",
      "info" : "ExpressionStatement[41204-41224]:ExpressionStatement[41258-41278]"
    }, {
      "left" : "if (typeParams.size() == 1)",
      "right" : "if (typeParams.size() == 1)",
      "info" : "IfStatement[41240-41465]:IfStatement[41294-41519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41268-41315]:Block[41322-41369]"
    }, {
      "left" : "ct = typeParams.get(0);",
      "right" : "ct = typeParams.get(0);",
      "info" : "ExpressionStatement[41282-41305]:ExpressionStatement[41336-41359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41321-41465]:Block[41375-41519]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Collection type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[41335-41455]:ThrowStatement[41389-41509]"
    }, {
      "left" : "return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "right" : "return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "info" : "ReturnStatement[41474-41559]:ReturnStatement[41528-41613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41710-42245]:Block[41764-42299]"
    }, {
      "left" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "right" : "List<JavaType> typeParams = bindings.getTypeParameters();",
      "info" : "VariableDeclarationStatement[41720-41777]:VariableDeclarationStatement[41774-41831]"
    }, {
      "left" : "JavaType ct;",
      "right" : "JavaType ct;",
      "info" : "VariableDeclarationStatement[41825-41837]:VariableDeclarationStatement[41879-41891]"
    }, {
      "left" : "if (typeParams.isEmpty())",
      "right" : "if (typeParams.isEmpty())",
      "info" : "IfStatement[41846-42146]:IfStatement[41900-42200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41872-41916]:Block[41926-41970]"
    }, {
      "left" : "ct = _unknownType();",
      "right" : "ct = _unknownType();",
      "info" : "ExpressionStatement[41886-41906]:ExpressionStatement[41940-41960]"
    }, {
      "left" : "if (typeParams.size() == 1)",
      "right" : "if (typeParams.size() == 1)",
      "info" : "IfStatement[41922-42146]:IfStatement[41976-42200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41950-41997]:Block[42004-42051]"
    }, {
      "left" : "ct = typeParams.get(0);",
      "right" : "ct = typeParams.get(0);",
      "info" : "ExpressionStatement[41964-41987]:ExpressionStatement[42018-42041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42003-42146]:Block[42057-42200]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");",
      "right" : "throw new IllegalArgumentException(\"Strange Reference type \"+rawClass.getName()+\": can not determine type parameters\");",
      "info" : "ThrowStatement[42017-42136]:ThrowStatement[42071-42190]"
    }, {
      "left" : "return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "right" : "return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);",
      "info" : "ReturnStatement[42155-42239]:ReturnStatement[42209-42293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42698-42960]:Block[42752-43014]"
    }, {
      "left" : "if (bindings.isEmpty())",
      "right" : "if (bindings.isEmpty())",
      "info" : "IfStatement[42708-42879]:IfStatement[42762-42933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42732-42879]:Block[42786-42933]"
    }, {
      "left" : "JavaType result = _findWellKnownSimple(raw);",
      "right" : "JavaType result = _findWellKnownSimple(raw);",
      "info" : "VariableDeclarationStatement[42746-42790]:VariableDeclarationStatement[42800-42844]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[42803-42869]:IfStatement[42857-42923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42823-42869]:Block[42877-42923]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[42841-42855]:ReturnStatement[42895-42909]"
    }, {
      "left" : "return _newSimpleType(raw, bindings, superClass, superInterfaces);",
      "right" : "return _newSimpleType(raw, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[42888-42954]:ReturnStatement[42942-43008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43333-43415]:Block[43387-43469]"
    }, {
      "left" : "return new SimpleType(raw, bindings, superClass, superInterfaces);",
      "right" : "return new SimpleType(raw, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[43343-43409]:ReturnStatement[43397-43463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43455-43825]:Block[43509-43879]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[43795-43819]:ReturnStatement[43849-43873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44130-44517]:Block[44184-44571]"
    }, {
      "left" : "if (clz.isPrimitive())",
      "right" : "if (clz.isPrimitive())",
      "info" : "IfStatement[44140-44490]:IfStatement[44194-44544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44163-44340]:Block[44217-44394]"
    }, {
      "left" : "if (clz == CLS_BOOL)",
      "right" : "if (clz == CLS_BOOL)",
      "info" : "IfStatement[44177-44220]:IfStatement[44231-44274]"
    }, {
      "left" : "return CORE_TYPE_BOOL;",
      "right" : "return CORE_TYPE_BOOL;",
      "info" : "ReturnStatement[44198-44220]:ReturnStatement[44252-44274]"
    }, {
      "left" : "if (clz == CLS_INT)",
      "right" : "if (clz == CLS_INT)",
      "info" : "IfStatement[44233-44274]:IfStatement[44287-44328]"
    }, {
      "left" : "return CORE_TYPE_INT;",
      "right" : "return CORE_TYPE_INT;",
      "info" : "ReturnStatement[44253-44274]:ReturnStatement[44307-44328]"
    }, {
      "left" : "if (clz == CLS_LONG)",
      "right" : "if (clz == CLS_LONG)",
      "info" : "IfStatement[44287-44330]:IfStatement[44341-44384]"
    }, {
      "left" : "return CORE_TYPE_LONG;",
      "right" : "return CORE_TYPE_LONG;",
      "info" : "ReturnStatement[44308-44330]:ReturnStatement[44362-44384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44346-44490]:Block[44400-44544]"
    }, {
      "left" : "if (clz == CLS_STRING)",
      "right" : "if (clz == CLS_STRING)",
      "info" : "IfStatement[44360-44407]:IfStatement[44414-44461]"
    }, {
      "left" : "return CORE_TYPE_STRING;",
      "right" : "return CORE_TYPE_STRING;",
      "info" : "ReturnStatement[44383-44407]:ReturnStatement[44437-44461]"
    }, {
      "left" : "if (clz == CLS_OBJECT)",
      "right" : "if (clz == CLS_OBJECT)",
      "info" : "IfStatement[44420-44467]:IfStatement[44474-44521]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[44443-44467]:ReturnStatement[44497-44521]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44499-44511]:ReturnStatement[44553-44565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44998-47070]:Block[45052-47124]"
    }, {
      "left" : "JavaType resultType;",
      "right" : "JavaType resultType;",
      "info" : "VariableDeclarationStatement[45008-45028]:VariableDeclarationStatement[45062-45082]"
    }, {
      "left" : "if (type instanceof Class<?>)",
      "right" : "if (type instanceof Class<?>)",
      "info" : "IfStatement[45063-46236]:IfStatement[45117-46290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45093-45267]:Block[45147-45321]"
    }, {
      "left" : "resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);",
      "right" : "resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);",
      "info" : "ExpressionStatement[45191-45257]:ExpressionStatement[45245-45311]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[45329-46236]:IfStatement[45383-46290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45368-45465]:Block[45422-45519]"
    }, {
      "left" : "resultType = _fromParamType(context, (ParameterizedType) type, bindings);",
      "right" : "resultType = _fromParamType(context, (ParameterizedType) type, bindings);",
      "info" : "ExpressionStatement[45382-45455]:ExpressionStatement[45436-45509]"
    }, {
      "left" : "if (type instanceof JavaType)",
      "right" : "if (type instanceof JavaType)",
      "info" : "IfStatement[45479-46236]:IfStatement[45533-46290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45509-45642]:Block[45563-45696]"
    }, {
      "left" : "return (JavaType) type;",
      "right" : "return (JavaType) type;",
      "info" : "ReturnStatement[45609-45632]:ReturnStatement[45663-45686]"
    }, {
      "left" : "if (type instanceof GenericArrayType)",
      "right" : "if (type instanceof GenericArrayType)",
      "info" : "IfStatement[45656-46236]:IfStatement[45710-46290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45694-45790]:Block[45748-45844]"
    }, {
      "left" : "resultType = _fromArrayType(context, (GenericArrayType) type, bindings);",
      "right" : "resultType = _fromArrayType(context, (GenericArrayType) type, bindings);",
      "info" : "ExpressionStatement[45708-45780]:ExpressionStatement[45762-45834]"
    }, {
      "left" : "if (type instanceof TypeVariable<?>)",
      "right" : "if (type instanceof TypeVariable<?>)",
      "info" : "IfStatement[45804-46236]:IfStatement[45858-46290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45841-45935]:Block[45895-45989]"
    }, {
      "left" : "resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);",
      "right" : "resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);",
      "info" : "ExpressionStatement[45855-45925]:ExpressionStatement[45909-45979]"
    }, {
      "left" : "if (type instanceof WildcardType)",
      "right" : "if (type instanceof WildcardType)",
      "info" : "IfStatement[45949-46236]:IfStatement[46003-46290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45983-46074]:Block[46037-46128]"
    }, {
      "left" : "resultType = _fromWildcard(context, (WildcardType) type, bindings);",
      "right" : "resultType = _fromWildcard(context, (WildcardType) type, bindings);",
      "info" : "ExpressionStatement[45997-46064]:ExpressionStatement[46051-46118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46080-46236]:Block[46134-46290]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "right" : "throw new IllegalArgumentException(\"Unrecognized Type: \"+((type == null) ? \"[null]\" : type.toString()));",
      "info" : "ThrowStatement[46122-46226]:ThrowStatement[46176-46280]"
    }, {
      "left" : "if (_modifiers != null)",
      "right" : "if (_modifiers != null)",
      "info" : "IfStatement[46425-47037]:IfStatement[46479-47091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46449-47037]:Block[46503-47091]"
    }, {
      "left" : "TypeBindings b = resultType.getBindings();",
      "right" : "TypeBindings b = resultType.getBindings();",
      "info" : "VariableDeclarationStatement[46463-46505]:VariableDeclarationStatement[46517-46559]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[46518-46584]:IfStatement[46572-46638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46533-46584]:Block[46587-46638]"
    }, {
      "left" : "b = EMPTY_BINDINGS;",
      "right" : "b = EMPTY_BINDINGS;",
      "info" : "ExpressionStatement[46551-46570]:ExpressionStatement[46605-46624]"
    }, {
      "left" : "for (TypeModifier mod : _modifiers)",
      "right" : "for (TypeModifier mod : _modifiers)",
      "info" : "EnhancedForStatement[46597-47027]:EnhancedForStatement[46651-47081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46633-47027]:Block[46687-47081]"
    }, {
      "left" : "JavaType t = mod.modifyType(resultType, type, b, this);",
      "right" : "JavaType t = mod.modifyType(resultType, type, b, this);",
      "info" : "VariableDeclarationStatement[46651-46706]:VariableDeclarationStatement[46705-46760]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[46723-46981]:IfStatement[46777-47035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46738-46981]:Block[46792-47035]"
    }, {
      "left" : "throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));",
      "right" : "throw new IllegalStateException(String.format(\n                            \"TypeModifier %s (of type %s) return null for type %s\",\n                            mod, mod.getClass().getName(), resultType));",
      "info" : "ThrowStatement[46760-46963]:ThrowStatement[46814-47017]"
    }, {
      "left" : "resultType = t;",
      "right" : "resultType = t;",
      "info" : "ExpressionStatement[46998-47013]:ExpressionStatement[47052-47067]"
    }, {
      "left" : "return resultType;",
      "right" : "return resultType;",
      "info" : "ReturnStatement[47046-47064]:ReturnStatement[47100-47118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47298-50982]:Block[47352-51036]"
    }, {
      "left" : "JavaType result = _findWellKnownSimple(rawType);",
      "right" : "JavaType result = _findWellKnownSimple(rawType);",
      "info" : "VariableDeclarationStatement[47375-47423]:VariableDeclarationStatement[47429-47477]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[47432-47490]:IfStatement[47486-47544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47452-47490]:Block[47506-47544]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47466-47480]:ReturnStatement[47520-47534]"
    }, {
      "left" : "final Object key;",
      "right" : "final Object key;",
      "info" : "VariableDeclarationStatement[47569-47586]:VariableDeclarationStatement[47623-47640]"
    }, {
      "left" : "if ((bindings == null) || bindings.isEmpty())",
      "right" : "if ((bindings == null) || bindings.isEmpty())",
      "info" : "IfStatement[47595-47739]:IfStatement[47649-47793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47641-47679]:Block[47695-47733]"
    }, {
      "left" : "key = rawType;",
      "right" : "key = rawType;",
      "info" : "ExpressionStatement[47655-47669]:ExpressionStatement[47709-47723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47685-47739]:Block[47739-47793]"
    }, {
      "left" : "key = bindings.asKey(rawType);",
      "right" : "key = bindings.asKey(rawType);",
      "info" : "ExpressionStatement[47699-47729]:ExpressionStatement[47753-47783]"
    }, {
      "left" : "result = _typeCache.get(key);",
      "right" : "result = _typeCache.get(key);",
      "info" : "ExpressionStatement[47748-47777]:ExpressionStatement[47802-47831]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[47816-47874]:IfStatement[47870-47928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47836-47874]:Block[47890-47928]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47850-47864]:ReturnStatement[47904-47918]"
    }, {
      "left" : "if (context == null)",
      "right" : "if (context == null)",
      "info" : "IfStatement[47935-48506]:IfStatement[47989-48560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47956-48014]:Block[48010-48068]"
    }, {
      "left" : "context = new ClassStack(rawType);",
      "right" : "context = new ClassStack(rawType);",
      "info" : "ExpressionStatement[47970-48004]:ExpressionStatement[48024-48058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48020-48506]:Block[48074-48560]"
    }, {
      "left" : "ClassStack prev = context.find(rawType);",
      "right" : "ClassStack prev = context.find(rawType);",
      "info" : "VariableDeclarationStatement[48034-48074]:VariableDeclarationStatement[48088-48128]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[48087-48367]:IfStatement[48141-48421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48105-48367]:Block[48159-48421]"
    }, {
      "left" : "ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);",
      "right" : "ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);",
      "info" : "VariableDeclarationStatement[48190-48273]:VariableDeclarationStatement[48244-48327]"
    }, {
      "left" : "prev.addSelfReference(selfRef);",
      "right" : "prev.addSelfReference(selfRef);",
      "info" : "ExpressionStatement[48290-48321]:ExpressionStatement[48344-48375]"
    }, {
      "left" : "return selfRef;",
      "right" : "return selfRef;",
      "info" : "ReturnStatement[48338-48353]:ReturnStatement[48392-48407]"
    }, {
      "left" : "context = context.child(rawType);",
      "right" : "context = context.child(rawType);",
      "info" : "ExpressionStatement[48463-48496]:ExpressionStatement[48517-48550]"
    }, {
      "left" : "if (rawType.isArray())",
      "right" : "if (rawType.isArray())",
      "info" : "IfStatement[48560-50594]:IfStatement[48614-50648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48583-48723]:Block[48637-48777]"
    }, {
      "left" : "result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);",
      "right" : "result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),\n                    bindings);",
      "info" : "ExpressionStatement[48597-48713]:ExpressionStatement[48651-48767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48729-50594]:Block[48783-50648]"
    }, {
      "left" : "JavaType superClass;",
      "right" : "JavaType superClass;",
      "info" : "VariableDeclarationStatement[48836-48856]:VariableDeclarationStatement[48890-48910]"
    }, {
      "left" : "JavaType[] superInterfaces;",
      "right" : "JavaType[] superInterfaces;",
      "info" : "VariableDeclarationStatement[48869-48896]:VariableDeclarationStatement[48923-48950]"
    }, {
      "left" : "if (rawType.isInterface())",
      "right" : "if (rawType.isInterface())",
      "info" : "IfStatement[48910-49343]:IfStatement[48964-49397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48937-49074]:Block[48991-49128]"
    }, {
      "left" : "superClass = null;",
      "right" : "superClass = null;",
      "info" : "ExpressionStatement[48955-48973]:ExpressionStatement[49009-49027]"
    }, {
      "left" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "right" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "info" : "ExpressionStatement[48990-49060]:ExpressionStatement[49044-49114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49080-49343]:Block[49134-49397]"
    }, {
      "left" : "superClass = _resolveSuperClass(context, rawType, bindings);",
      "right" : "superClass = _resolveSuperClass(context, rawType, bindings);",
      "info" : "ExpressionStatement[49182-49242]:ExpressionStatement[49236-49296]"
    }, {
      "left" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "right" : "superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);",
      "info" : "ExpressionStatement[49259-49329]:ExpressionStatement[49313-49383]"
    }, {
      "left" : "if (rawType == Properties.class)",
      "right" : "if (rawType == Properties.class)",
      "info" : "IfStatement[49452-49947]:IfStatement[49506-50001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49485-49652]:Block[49539-49706]"
    }, {
      "left" : "result = MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "right" : "result = MapType.construct(rawType, bindings, superClass, superInterfaces,\n                        CORE_TYPE_STRING, CORE_TYPE_STRING);",
      "info" : "ExpressionStatement[49503-49638]:ExpressionStatement[49557-49692]"
    }, {
      "left" : "if (superClass != null)",
      "right" : "if (superClass != null)",
      "info" : "IfStatement[49816-49947]:IfStatement[49870-50001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49840-49947]:Block[49894-50001]"
    }, {
      "left" : "result = superClass.refine(rawType, bindings, superClass, superInterfaces);",
      "right" : "result = superClass.refine(rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[49858-49933]:ExpressionStatement[49912-49987]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[50045-50584]:IfStatement[50099-50638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50065-50584]:Block[50119-50638]"
    }, {
      "left" : "result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50083-50169]:ExpressionStatement[50137-50223]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[50187-50570]:IfStatement[50241-50624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50207-50570]:Block[50261-50624]"
    }, {
      "left" : "result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50229-50319]:ExpressionStatement[50283-50373]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[50340-50552]:IfStatement[50394-50606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50360-50552]:Block[50414-50606]"
    }, {
      "left" : "result = _newSimpleType(rawType, bindings, superClass, superInterfaces);",
      "right" : "result = _newSimpleType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ExpressionStatement[50458-50530]:ExpressionStatement[50512-50584]"
    }, {
      "left" : "context.resolveSelfReferences(result);",
      "right" : "context.resolveSelfReferences(result);",
      "info" : "ExpressionStatement[50603-50641]:ExpressionStatement[50657-50695]"
    }, {
      "left" : "if (!result.hasHandlers())",
      "right" : "if (!result.hasHandlers())",
      "info" : "IfStatement[50844-50953]:IfStatement[50898-51007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50871-50953]:Block[50925-51007]"
    }, {
      "left" : "_typeCache.putIfAbsent(key, result);",
      "right" : "_typeCache.putIfAbsent(key, result);",
      "info" : "ExpressionStatement[50885-50921]:ExpressionStatement[50939-50975]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50962-50976]:ReturnStatement[51016-51030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51097-51290]:Block[51151-51344]"
    }, {
      "left" : "Type parent = ClassUtil.getGenericSuperclass(rawType);",
      "right" : "Type parent = ClassUtil.getGenericSuperclass(rawType);",
      "info" : "VariableDeclarationStatement[51107-51161]:VariableDeclarationStatement[51161-51215]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[51170-51226]:IfStatement[51224-51280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51190-51226]:Block[51244-51280]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[51204-51216]:ReturnStatement[51258-51270]"
    }, {
      "left" : "return _fromAny(context, parent, parentBindings);",
      "right" : "return _fromAny(context, parent, parentBindings);",
      "info" : "ReturnStatement[51235-51284]:ReturnStatement[51289-51338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51412-51829]:Block[51466-51883]"
    }, {
      "left" : "Type[] types = ClassUtil.getGenericInterfaces(rawType);",
      "right" : "Type[] types = ClassUtil.getGenericInterfaces(rawType);",
      "info" : "VariableDeclarationStatement[51422-51477]:VariableDeclarationStatement[51476-51531]"
    }, {
      "left" : "if (types == null || types.length == 0)",
      "right" : "if (types == null || types.length == 0)",
      "info" : "IfStatement[51486-51566]:IfStatement[51540-51620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51526-51566]:Block[51580-51620]"
    }, {
      "left" : "return NO_TYPES;",
      "right" : "return NO_TYPES;",
      "info" : "ReturnStatement[51540-51556]:ReturnStatement[51594-51610]"
    }, {
      "left" : "int len = types.length;",
      "right" : "int len = types.length;",
      "info" : "VariableDeclarationStatement[51575-51598]:VariableDeclarationStatement[51629-51652]"
    }, {
      "left" : "JavaType[] resolved = new JavaType[len];",
      "right" : "JavaType[] resolved = new JavaType[len];",
      "info" : "VariableDeclarationStatement[51607-51647]:VariableDeclarationStatement[51661-51701]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[51656-51798]:ForStatement[51710-51852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51686-51798]:Block[51740-51852]"
    }, {
      "left" : "Type type = types[i];",
      "right" : "Type type = types[i];",
      "info" : "VariableDeclarationStatement[51700-51721]:VariableDeclarationStatement[51754-51775]"
    }, {
      "left" : "resolved[i] = _fromAny(context, type, parentBindings);",
      "right" : "resolved[i] = _fromAny(context, type, parentBindings);",
      "info" : "ExpressionStatement[51734-51788]:ExpressionStatement[51788-51842]"
    }, {
      "left" : "return resolved;",
      "right" : "return resolved;",
      "info" : "ReturnStatement[51807-51823]:ReturnStatement[51861-51877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52226-53242]:Block[52280-53296]"
    }, {
      "left" : "if (bindings == null)",
      "right" : "if (bindings == null)",
      "info" : "IfStatement[52236-52322]:IfStatement[52290-52376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52258-52322]:Block[52312-52376]"
    }, {
      "left" : "bindings = TypeBindings.emptyBindings();",
      "right" : "bindings = TypeBindings.emptyBindings();",
      "info" : "ExpressionStatement[52272-52312]:ExpressionStatement[52326-52366]"
    }, {
      "left" : "if (rawType == Map.class)",
      "right" : "if (rawType == Map.class)",
      "info" : "IfStatement[52421-52535]:IfStatement[52475-52589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52447-52535]:Block[52501-52589]"
    }, {
      "left" : "return _mapType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _mapType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[52461-52525]:ReturnStatement[52515-52579]"
    }, {
      "left" : "if (rawType == Collection.class)",
      "right" : "if (rawType == Collection.class)",
      "info" : "IfStatement[52544-52672]:IfStatement[52598-52726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52577-52672]:Block[52631-52726]"
    }, {
      "left" : "return _collectionType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _collectionType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[52591-52662]:ReturnStatement[52645-52716]"
    }, {
      "left" : "if (rawType == AtomicReference.class)",
      "right" : "if (rawType == AtomicReference.class)",
      "info" : "IfStatement[52727-52859]:IfStatement[52781-52913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52765-52859]:Block[52819-52913]"
    }, {
      "left" : "return _referenceType(rawType, bindings, superClass, superInterfaces);",
      "right" : "return _referenceType(rawType, bindings, superClass, superInterfaces);",
      "info" : "ReturnStatement[52779-52849]:ReturnStatement[52833-52903]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53224-53236]:ReturnStatement[53278-53290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53417-53854]:Block[53471-53908]"
    }, {
      "left" : "final int intCount = superInterfaces.length;",
      "right" : "final int intCount = superInterfaces.length;",
      "info" : "VariableDeclarationStatement[53543-53587]:VariableDeclarationStatement[53597-53641]"
    }, {
      "left" : "for (int i = 0; i < intCount; ++i)",
      "right" : "for (int i = 0; i < intCount; ++i)",
      "info" : "ForStatement[53597-53827]:ForStatement[53651-53881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53632-53827]:Block[53686-53881]"
    }, {
      "left" : "JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);",
      "right" : "JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);",
      "info" : "VariableDeclarationStatement[53646-53738]:VariableDeclarationStatement[53700-53792]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[53751-53817]:IfStatement[53805-53871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53771-53817]:Block[53825-53871]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[53789-53803]:ReturnStatement[53843-53857]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53836-53848]:ReturnStatement[53890-53902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54096-55465]:Block[54150-55519]"
    }, {
      "left" : "Class<?> rawType = (Class<?>) ptype.getRawType();",
      "right" : "Class<?> rawType = (Class<?>) ptype.getRawType();",
      "info" : "VariableDeclarationStatement[54183-54232]:VariableDeclarationStatement[54237-54286]"
    }, {
      "left" : "if (rawType == CLS_ENUM)",
      "right" : "if (rawType == CLS_ENUM)",
      "info" : "IfStatement[54380-54451]:IfStatement[54434-54505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54405-54451]:Block[54459-54505]"
    }, {
      "left" : "return CORE_TYPE_ENUM;",
      "right" : "return CORE_TYPE_ENUM;",
      "info" : "ReturnStatement[54419-54441]:ReturnStatement[54473-54495]"
    }, {
      "left" : "if (rawType == CLS_COMPARABLE)",
      "right" : "if (rawType == CLS_COMPARABLE)",
      "info" : "IfStatement[54460-54543]:IfStatement[54514-54597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54491-54543]:Block[54545-54597]"
    }, {
      "left" : "return CORE_TYPE_COMPARABLE;",
      "right" : "return CORE_TYPE_COMPARABLE;",
      "info" : "ReturnStatement[54505-54533]:ReturnStatement[54559-54587]"
    }, {
      "left" : "if (rawType == CLS_CLASS)",
      "right" : "if (rawType == CLS_CLASS)",
      "info" : "IfStatement[54552-54625]:IfStatement[54606-54679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54578-54625]:Block[54632-54679]"
    }, {
      "left" : "return CORE_TYPE_CLASS;",
      "right" : "return CORE_TYPE_CLASS;",
      "info" : "ReturnStatement[54592-54615]:ReturnStatement[54646-54669]"
    }, {
      "left" : "Type[] args = ptype.getActualTypeArguments();",
      "right" : "Type[] args = ptype.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[54895-54940]:VariableDeclarationStatement[54949-54994]"
    }, {
      "left" : "int paramCount = (args == null) ? 0 : args.length;",
      "right" : "int paramCount = (args == null) ? 0 : args.length;",
      "info" : "VariableDeclarationStatement[54949-54999]:VariableDeclarationStatement[55003-55053]"
    }, {
      "left" : "JavaType[] pt;",
      "right" : "JavaType[] pt;",
      "info" : "VariableDeclarationStatement[55008-55022]:VariableDeclarationStatement[55062-55076]"
    }, {
      "left" : "TypeBindings newBindings;",
      "right" : "TypeBindings newBindings;",
      "info" : "VariableDeclarationStatement[55031-55056]:VariableDeclarationStatement[55085-55110]"
    }, {
      "left" : "if (paramCount == 0)",
      "right" : "if (paramCount == 0)",
      "info" : "IfStatement[55074-55401]:IfStatement[55128-55455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55095-55148]:Block[55149-55202]"
    }, {
      "left" : "newBindings = EMPTY_BINDINGS;",
      "right" : "newBindings = EMPTY_BINDINGS;",
      "info" : "ExpressionStatement[55109-55138]:ExpressionStatement[55163-55192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55154-55401]:Block[55208-55455]"
    }, {
      "left" : "pt = new JavaType[paramCount];",
      "right" : "pt = new JavaType[paramCount];",
      "info" : "ExpressionStatement[55168-55198]:ExpressionStatement[55222-55252]"
    }, {
      "left" : "for (int i = 0; i < paramCount; ++i)",
      "right" : "for (int i = 0; i < paramCount; ++i)",
      "info" : "ForStatement[55211-55331]:ForStatement[55265-55385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55248-55331]:Block[55302-55385]"
    }, {
      "left" : "pt[i] = _fromAny(context, args[i], parentBindings);",
      "right" : "pt[i] = _fromAny(context, args[i], parentBindings);",
      "info" : "ExpressionStatement[55266-55317]:ExpressionStatement[55320-55371]"
    }, {
      "left" : "newBindings = TypeBindings.create(rawType, pt);",
      "right" : "newBindings = TypeBindings.create(rawType, pt);",
      "info" : "ExpressionStatement[55344-55391]:ExpressionStatement[55398-55445]"
    }, {
      "left" : "return _fromClass(context, rawType, newBindings);",
      "right" : "return _fromClass(context, rawType, newBindings);",
      "info" : "ReturnStatement[55410-55459]:ReturnStatement[55464-55513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55575-55733]:Block[55629-55787]"
    }, {
      "left" : "JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);",
      "right" : "JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);",
      "info" : "VariableDeclarationStatement[55585-55668]:VariableDeclarationStatement[55639-55722]"
    }, {
      "left" : "return ArrayType.construct(elementType, bindings);",
      "right" : "return ArrayType.construct(elementType, bindings);",
      "info" : "ReturnStatement[55677-55727]:ReturnStatement[55731-55781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55840-56459]:Block[55894-56513]"
    }, {
      "left" : "final String name = var.getName();",
      "right" : "final String name = var.getName();",
      "info" : "VariableDeclarationStatement[55898-55932]:VariableDeclarationStatement[55952-55986]"
    }, {
      "left" : "JavaType type = bindings.findBoundType(name);",
      "right" : "JavaType type = bindings.findBoundType(name);",
      "info" : "VariableDeclarationStatement[55941-55986]:VariableDeclarationStatement[55995-56040]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[55995-56049]:IfStatement[56049-56103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56013-56049]:Block[56067-56103]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[56027-56039]:ReturnStatement[56081-56093]"
    }, {
      "left" : "if (bindings.hasUnbound(name))",
      "right" : "if (bindings.hasUnbound(name))",
      "info" : "IfStatement[56222-56301]:IfStatement[56276-56355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56253-56301]:Block[56307-56355]"
    }, {
      "left" : "return CORE_TYPE_OBJECT;",
      "right" : "return CORE_TYPE_OBJECT;",
      "info" : "ReturnStatement[56267-56291]:ReturnStatement[56321-56345]"
    }, {
      "left" : "bindings = bindings.withUnboundVariable(name);",
      "right" : "bindings = bindings.withUnboundVariable(name);",
      "info" : "ExpressionStatement[56310-56356]:ExpressionStatement[56364-56410]"
    }, {
      "left" : "Type[] bounds = var.getBounds();",
      "right" : "Type[] bounds = var.getBounds();",
      "info" : "VariableDeclarationStatement[56366-56398]:VariableDeclarationStatement[56420-56452]"
    }, {
      "left" : "return _fromAny(context, bounds[0], bindings);",
      "right" : "return _fromAny(context, bounds[0], bindings);",
      "info" : "ReturnStatement[56407-56453]:ReturnStatement[56461-56507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56564-56967]:Block[56618-57021]"
    }, {
      "left" : "return _fromAny(context, type.getUpperBounds()[0], bindings);",
      "right" : "return _fromAny(context, type.getUpperBounds()[0], bindings);",
      "info" : "ReturnStatement[56900-56961]:ReturnStatement[56954-57015]"
    } ]
  },
  "interFileMappings" : { }
}