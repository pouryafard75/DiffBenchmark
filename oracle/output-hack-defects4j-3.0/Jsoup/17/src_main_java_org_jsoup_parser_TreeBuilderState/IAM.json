{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : TreeBuilderState",
      "right" : "enum : TreeBuilderState",
      "info" : "EnumDeclaration[194-68095]:EnumDeclaration[194-68097]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[368-1359]:MethodDeclaration[368-1359]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[1392-2238]:MethodDeclaration[1392-2238]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[2248-2417]:MethodDeclaration[2248-2417]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[2450-3577]:MethodDeclaration[2450-3577]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[3606-6583]:MethodDeclaration[3606-6583]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6593-6742]:MethodDeclaration[6593-6742]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6779-7818]:MethodDeclaration[6779-7818]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[7828-8009]:MethodDeclaration[7828-8009]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[8041-9804]:MethodDeclaration[8041-9804]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[9814-9998]:MethodDeclaration[9814-9998]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[10027-38621]:MethodDeclaration[10027-38621]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, TreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[38631-39459]:MethodDeclaration[38631-39459]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[39549-40191]:MethodDeclaration[39549-40191]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[40221-43932]:MethodDeclaration[40221-43932]"
    }, {
      "left" : "boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[43942-44426]:MethodDeclaration[43942-44426]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[44460-46059]:MethodDeclaration[44460-46059]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[46091-47631]:MethodDeclaration[46091-47631]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[47667-49472]:MethodDeclaration[47667-49472]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49482-49740]:MethodDeclaration[49482-49740]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49774-51761]:MethodDeclaration[49774-51761]"
    }, {
      "left" : "private boolean exitTableBody(Token t, TreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[51771-52218]:MethodDeclaration[51771-52218]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[52228-52336]:MethodDeclaration[52228-52336]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[52364-54337]:MethodDeclaration[52364-54337]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54347-54455]:MethodDeclaration[54347-54455]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54465-54713]:MethodDeclaration[54465-54713]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54742-56668]:MethodDeclaration[54742-56668]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[56678-56785]:MethodDeclaration[56678-56785]"
    }, {
      "left" : "private void closeCell(TreeBuilder tb)",
      "right" : "private void closeCell(TreeBuilder tb)",
      "info" : "MethodDeclaration[56795-57039]:MethodDeclaration[56795-57039]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[57070-60864]:MethodDeclaration[57070-60864]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[60874-60993]:MethodDeclaration[60874-60993]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[61031-61826]:MethodDeclaration[61031-61826]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[61858-62851]:MethodDeclaration[61858-62851]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[62884-64640]:MethodDeclaration[62884-64640]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[64676-65586]:MethodDeclaration[64676-65586]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[65623-66155]:MethodDeclaration[65623-66155]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[66196-66858]:MethodDeclaration[66196-66858]"
    }, {
      "left" : "boolean process(Token t, TreeBuilder tb)",
      "right" : "boolean process(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[66895-67030]:MethodDeclaration[66895-67030]"
    }, {
      "left" : "private static String nullString = String.valueOf(0x0000);",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67043-67101]:FieldDeclaration[67043-67103]"
    }, {
      "left" : "abstract boolean process(Token t, TreeBuilder tb);",
      "right" : "abstract boolean process(Token t, TreeBuilder tb);",
      "info" : "MethodDeclaration[67107-67157]:MethodDeclaration[67109-67159]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67163-67625]:MethodDeclaration[67165-67627]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67631-67858]:MethodDeclaration[67633-67860]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, TreeBuilder tb)",
      "info" : "MethodDeclaration[67864-68093]:MethodDeclaration[67866-68095]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[368-375]:PrimitiveType[368-375]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[376-383]:SimpleName[376-383]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[384-391]:SingleVariableDeclaration[384-391]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[393-407]:SingleVariableDeclaration[393-407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[409-1359]:Block[409-1359]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[423-1324]:IfStatement[423-1324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[444-509]:Block[444-509]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[462-474]:ReturnStatement[462-474]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[515-1324]:IfStatement[515-1324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[534-591]:Block[534-591]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[552-577]:ExpressionStatement[552-577]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[597-1324]:IfStatement[597-1324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[616-1153]:Block[616-1153]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[756-788]:VariableDeclarationStatement[756-788]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "right" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[805-925]:VariableDeclarationStatement[805-925]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[942-980]:ExpressionStatement[942-980]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[997-1096]:IfStatement[997-1096]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1040-1096]:ExpressionStatement[1040-1096]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1113-1139]:ExpressionStatement[1113-1139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1159-1324]:Block[1159-1324]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1226-1252]:ExpressionStatement[1226-1252]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1269-1290]:ReturnStatement[1269-1290]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1337-1349]:ReturnStatement[1337-1349]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1392-1399]:PrimitiveType[1392-1399]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1400-1407]:SimpleName[1400-1407]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[1408-1415]:SingleVariableDeclaration[1408-1415]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[1417-1431]:SingleVariableDeclaration[1417-1431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1433-2238]:Block[1433-2238]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1447-2203]:IfStatement[1447-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1466-1543]:Block[1466-1543]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1484-1499]:ExpressionStatement[1484-1499]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1516-1529]:ReturnStatement[1516-1529]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1549-2203]:IfStatement[1549-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1568-1625]:Block[1568-1625]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1586-1611]:ExpressionStatement[1586-1611]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1631-2203]:IfStatement[1631-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1652-1717]:Block[1652-1717]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1670-1682]:ReturnStatement[1670-1682]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[1723-2203]:IfStatement[1723-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1783-1884]:Block[1783-1884]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1801-1827]:ExpressionStatement[1801-1827]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1844-1870]:ExpressionStatement[1844-1870]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1890-2203]:IfStatement[1890-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1978-2037]:Block[1978-2037]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[1996-2023]:ReturnStatement[1996-2023]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2043-2203]:IfStatement[2043-2203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2061-2138]:Block[2061-2138]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2079-2094]:ExpressionStatement[2079-2094]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2111-2124]:ReturnStatement[2111-2124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2144-2203]:Block[2144-2203]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2162-2189]:ReturnStatement[2162-2189]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2216-2228]:ReturnStatement[2216-2228]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2248-2255]:Modifier[2248-2255]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2256-2263]:PrimitiveType[2256-2263]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[2264-2276]:SimpleName[2264-2276]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2277-2284]:SingleVariableDeclaration[2277-2284]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[2286-2300]:SingleVariableDeclaration[2286-2300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2302-2417]:Block[2302-2417]"
    }, {
      "left" : "tb.insert(\"html\");",
      "right" : "tb.insert(\"html\");",
      "info" : "ExpressionStatement[2316-2334]:ExpressionStatement[2316-2334]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2347-2373]:ExpressionStatement[2347-2373]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2386-2407]:ReturnStatement[2386-2407]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2450-2457]:PrimitiveType[2450-2457]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2458-2465]:SimpleName[2458-2465]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[2466-2473]:SingleVariableDeclaration[2466-2473]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[2475-2489]:SingleVariableDeclaration[2475-2489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2491-3577]:Block[2491-3577]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2505-3542]:IfStatement[2505-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2526-2570]:Block[2526-2570]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2544-2556]:ReturnStatement[2544-2556]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2576-3542]:IfStatement[2576-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2595-2652]:Block[2595-2652]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2613-2638]:ExpressionStatement[2613-2638]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2658-3542]:IfStatement[2658-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2677-2754]:Block[2677-2754]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2695-2710]:ExpressionStatement[2695-2710]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2727-2740]:ReturnStatement[2727-2740]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[2760-3542]:IfStatement[2760-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2820-2904]:Block[2820-2904]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2838-2867]:ReturnStatement[2838-2867]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "info" : "IfStatement[2910-3542]:IfStatement[2910-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2970-3123]:Block[2970-3123]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[2988-3029]:VariableDeclarationStatement[2988-3029]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3046-3070]:ExpressionStatement[3046-3070]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3087-3109]:ExpressionStatement[3087-3109]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3129-3542]:IfStatement[3129-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3217-3326]:Block[3217-3326]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3235-3274]:ExpressionStatement[3235-3274]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3291-3312]:ReturnStatement[3291-3312]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3332-3542]:IfStatement[3332-3542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3350-3427]:Block[3350-3427]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3368-3383]:ExpressionStatement[3368-3383]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3400-3413]:ReturnStatement[3400-3413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3433-3542]:Block[3433-3542]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3451-3490]:ExpressionStatement[3451-3490]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3507-3528]:ReturnStatement[3507-3528]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3555-3567]:ReturnStatement[3555-3567]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3606-3613]:PrimitiveType[3606-3613]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3614-3621]:SimpleName[3614-3621]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[3622-3629]:SingleVariableDeclaration[3622-3629]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[3631-3645]:SingleVariableDeclaration[3631-3645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3647-6583]:Block[3647-6583]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3661-3770]:IfStatement[3661-3770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3682-3770]:Block[3682-3770]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3700-3727]:ExpressionStatement[3700-3727]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3744-3756]:ReturnStatement[3744-3756]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base as it is seen. todo: flip to current browser behaviour of one shot\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.setBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n                        tb.insert(start);\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base as it is seen. todo: flip to current browser behaviour of one shot\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.setBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n                        tb.insert(start);\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3783-6548]:SwitchStatement[3783-6548]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3817-3830]:SwitchCase[3817-3830]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3851-3876]:ExpressionStatement[3851-3876]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3897-3903]:BreakStatement[3897-3903]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3920-3933]:SwitchCase[3920-3933]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3954-3969]:ExpressionStatement[3954-3969]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3990-4003]:ReturnStatement[3990-4003]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4020-4034]:SwitchCase[4020-4034]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4055-4093]:VariableDeclarationStatement[4055-4093]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[4114-4141]:VariableDeclarationStatement[4114-4141]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4162-5898]:IfStatement[4162-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4187-4264]:Block[4187-4264]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4213-4242]:ReturnStatement[4213-4242]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4270-5898]:IfStatement[4270-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4345-4667]:Block[4345-4667]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4371-4406]:VariableDeclarationStatement[4371-4406]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4552-4645]:IfStatement[4552-4645]"
    }, {
      "left" : "tb.setBaseUri(el);",
      "right" : "tb.setBaseUri(el);",
      "info" : "ExpressionStatement[4627-4645]:ExpressionStatement[4627-4645]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4673-5898]:IfStatement[4673-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4698-4833]:Block[4698-4833]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4724-4761]:VariableDeclarationStatement[4724-4761]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4839-5898]:IfStatement[4839-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4865-4937]:Block[4865-4937]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4891-4915]:ExpressionStatement[4891-4915]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4943-5898]:IfStatement[4943-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4989-5062]:Block[4989-5062]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5015-5040]:ExpressionStatement[5015-5040]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5068-5898]:IfStatement[5068-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5097-5345]:Block[5097-5345]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5251-5268]:ExpressionStatement[5251-5268]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5293-5323]:ExpressionStatement[5293-5323]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5351-5898]:IfStatement[5351-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5378-5685]:Block[5378-5685]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5477-5494]:ExpressionStatement[5477-5494]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5519-5570]:ExpressionStatement[5519-5570]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5595-5618]:ExpressionStatement[5595-5618]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5643-5663]:ExpressionStatement[5643-5663]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5691-5898]:IfStatement[5691-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5716-5817]:Block[5716-5817]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5742-5757]:ExpressionStatement[5742-5757]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5782-5795]:ReturnStatement[5782-5795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5823-5898]:Block[5823-5898]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5849-5876]:ReturnStatement[5849-5876]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5919-5925]:BreakStatement[5919-5925]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5942-5954]:SwitchCase[5942-5954]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5975-6007]:VariableDeclarationStatement[5975-6007]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[6028-6046]:ExpressionStatement[6028-6046]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6067-6434]:IfStatement[6067-6434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6092-6199]:Block[6092-6199]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6118-6127]:ExpressionStatement[6118-6127]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6152-6177]:ExpressionStatement[6152-6177]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6205-6434]:IfStatement[6205-6434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6252-6327]:Block[6252-6327]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6278-6305]:ReturnStatement[6278-6305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6333-6434]:Block[6333-6434]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6359-6374]:ExpressionStatement[6359-6374]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6399-6412]:ReturnStatement[6399-6412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6455-6461]:BreakStatement[6455-6461]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6478-6486]:SwitchCase[6478-6486]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6507-6534]:ReturnStatement[6507-6534]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6561-6573]:ReturnStatement[6561-6573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6593-6600]:Modifier[6593-6600]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6601-6608]:PrimitiveType[6601-6608]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[6609-6621]:SimpleName[6609-6621]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6622-6629]:SingleVariableDeclaration[6622-6629]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6631-6645]:SingleVariableDeclaration[6631-6645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6742]:Block[6647-6742]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"head\"));",
      "right" : "tb.process(new Token.EndTag(\"head\"));",
      "info" : "ExpressionStatement[6661-6698]:ExpressionStatement[6661-6698]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6711-6732]:ReturnStatement[6711-6732]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6779-6786]:PrimitiveType[6779-6786]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6787-6794]:SimpleName[6787-6794]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[6795-6802]:SingleVariableDeclaration[6795-6802]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[6804-6818]:SingleVariableDeclaration[6804-6818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6820-7818]:Block[6820-7818]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6834-7783]:IfStatement[6834-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6853-6900]:Block[6853-6900]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6871-6886]:ExpressionStatement[6871-6886]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[6906-7783]:IfStatement[6906-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6966-7027]:Block[6966-7027]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[6984-7013]:ReturnStatement[6984-7013]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "info" : "IfStatement[7033-7783]:IfStatement[7033-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7093-7173]:Block[7093-7173]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7111-7120]:ExpressionStatement[7111-7120]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7137-7159]:ExpressionStatement[7137-7159]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7179-7783]:IfStatement[7179-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7357-7418]:Block[7357-7418]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7375-7404]:ReturnStatement[7375-7404]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "info" : "IfStatement[7424-7783]:IfStatement[7424-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7478-7537]:Block[7478-7537]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7496-7523]:ReturnStatement[7496-7523]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7543-7783]:IfStatement[7543-7783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7641-7718]:Block[7641-7718]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7659-7674]:ExpressionStatement[7659-7674]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7691-7704]:ReturnStatement[7691-7704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7724-7783]:Block[7724-7783]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7742-7769]:ReturnStatement[7742-7769]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7796-7808]:ReturnStatement[7796-7808]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7828-7835]:Modifier[7828-7835]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7836-7843]:PrimitiveType[7836-7843]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[7844-7856]:SimpleName[7844-7856]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[7857-7864]:SingleVariableDeclaration[7857-7864]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[7866-7880]:SingleVariableDeclaration[7866-7880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7882-8009]:Block[7882-8009]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7896-7911]:ExpressionStatement[7896-7911]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"noscript\"));",
      "right" : "tb.process(new Token.EndTag(\"noscript\"));",
      "info" : "ExpressionStatement[7924-7965]:ExpressionStatement[7924-7965]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[7978-7999]:ReturnStatement[7978-7999]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8041-8048]:PrimitiveType[8041-8048]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[8049-8056]:SimpleName[8049-8056]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[8057-8064]:SingleVariableDeclaration[8057-8064]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[8066-8080]:SingleVariableDeclaration[8066-8080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8082-9804]:Block[8082-9804]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8096-9769]:IfStatement[8096-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8117-8176]:Block[8117-8176]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8135-8162]:ExpressionStatement[8135-8162]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8182-9769]:IfStatement[8182-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8201-8258]:Block[8201-8258]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8219-8244]:ExpressionStatement[8219-8244]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8264-9769]:IfStatement[8264-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8283-8330]:Block[8283-8330]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8301-8316]:ExpressionStatement[8301-8316]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8336-9769]:IfStatement[8336-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8356-9444]:Block[8356-9444]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8374-8415]:VariableDeclarationStatement[8374-8415]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[8432-8462]:VariableDeclarationStatement[8432-8462]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8479-9430]:IfStatement[8479-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8504-8573]:Block[8504-8573]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8526-8555]:ReturnStatement[8526-8555]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8579-9430]:IfStatement[8579-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8604-8749]:Block[8604-8749]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8626-8646]:ExpressionStatement[8626-8646]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8667-8688]:ExpressionStatement[8667-8688]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8709-8731]:ExpressionStatement[8709-8731]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8755-9430]:IfStatement[8755-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8784-8891]:Block[8784-8891]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8806-8826]:ExpressionStatement[8806-8826]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8847-8873]:ExpressionStatement[8847-8873]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8897-9430]:IfStatement[8897-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9244]:Block[9009-9244]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9031-9046]:ExpressionStatement[9031-9046]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9067-9102]:VariableDeclarationStatement[9067-9102]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9123-9137]:ExpressionStatement[9123-9137]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9158-9180]:ExpressionStatement[9158-9180]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9201-9226]:ExpressionStatement[9201-9226]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9250-9430]:IfStatement[9250-9430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9275-9364]:Block[9275-9364]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9297-9312]:ExpressionStatement[9297-9312]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9333-9346]:ReturnStatement[9333-9346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9370-9430]:Block[9370-9430]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9392-9412]:ExpressionStatement[9392-9412]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9450-9769]:IfStatement[9450-9769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9468-9711]:Block[9468-9711]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "info" : "IfStatement[9486-9697]:IfStatement[9486-9697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9542-9602]:Block[9542-9602]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9564-9584]:ExpressionStatement[9564-9584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9608-9697]:Block[9608-9697]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9630-9645]:ExpressionStatement[9630-9645]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9666-9679]:ReturnStatement[9666-9679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9717-9769]:Block[9717-9769]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9735-9755]:ExpressionStatement[9735-9755]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9782-9794]:ReturnStatement[9782-9794]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9814-9821]:Modifier[9814-9821]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9822-9829]:PrimitiveType[9822-9829]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9830-9842]:SimpleName[9830-9842]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[9843-9850]:SingleVariableDeclaration[9843-9850]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[9852-9866]:SingleVariableDeclaration[9852-9866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9868-9998]:Block[9868-9998]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"body\"));",
      "right" : "tb.process(new Token.StartTag(\"body\"));",
      "info" : "ExpressionStatement[9882-9921]:ExpressionStatement[9882-9921]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9934-9954]:ExpressionStatement[9934-9954]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[9967-9988]:ReturnStatement[9967-9988]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10027-10034]:PrimitiveType[10027-10034]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[10035-10042]:SimpleName[10035-10042]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[10043-10050]:SingleVariableDeclaration[10043-10050]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[10052-10066]:SingleVariableDeclaration[10052-10066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10068-38621]:Block[10068-38621]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        Element form = tb.insert(startTag);\n                        tb.setFormElement(form);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        // we're not supposed to ask.\n                        startTag.name(\"img\");\n                        return tb.process(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        TreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                        // todo: refactor these lookups\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            for (int si = 0; si < stack.size(); si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        Element form = tb.insert(startTag);\n                        tb.setFormElement(form);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        // we're not supposed to ask.\n                        startTag.name(\"img\");\n                        return tb.process(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        TreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(\"rp\", \"rt\")) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                        // todo: refactor these lookups\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                        if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            for (int si = 0; si < stack.size(); si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10082-38586]:SwitchStatement[10082-38586]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10116-10131]:SwitchCase[10116-10131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10132-10765]:Block[10132-10765]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10154-10190]:VariableDeclarationStatement[10154-10190]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10211-10720]:IfStatement[10211-10720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10247-10399]:Block[10247-10399]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10324-10339]:ExpressionStatement[10324-10339]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10364-10377]:ReturnStatement[10364-10377]"
    }, {
      "left" : "if (isWhitespace(c))",
      "right" : "if (isWhitespace(c))",
      "info" : "IfStatement[10405-10720]:IfStatement[10405-10720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10426-10547]:Block[10426-10547]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10452-10487]:ExpressionStatement[10452-10487]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10512-10525]:ExpressionStatement[10512-10525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10553-10720]:Block[10553-10720]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10579-10614]:ExpressionStatement[10579-10614]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10639-10652]:ExpressionStatement[10639-10652]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10677-10698]:ExpressionStatement[10677-10698]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10741-10747]:BreakStatement[10741-10747]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10782-10795]:SwitchCase[10782-10795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10796-10888]:Block[10796-10888]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10818-10843]:ExpressionStatement[10818-10843]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10864-10870]:BreakStatement[10864-10870]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[10905-10918]:SwitchCase[10905-10918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10919-11008]:Block[10919-11008]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10941-10956]:ExpressionStatement[10941-10956]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10977-10990]:ReturnStatement[10977-10990]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11025-11039]:SwitchCase[11025-11039]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11060-11101]:VariableDeclarationStatement[11060-11101]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[11122-11152]:VariableDeclarationStatement[11122-11152]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[11173-27041]:IfStatement[11173-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11198-11623]:Block[11198-11623]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11224-11239]:ExpressionStatement[11224-11239]"
    }, {
      "left" : "Element html = tb.getStack().getFirst();",
      "right" : "Element html = tb.getStack().getFirst();",
      "info" : "VariableDeclarationStatement[11323-11363]:VariableDeclarationStatement[11323-11363]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[11388-11601]:EnhancedForStatement[11388-11601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11441-11601]:Block[11441-11601]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[11471-11575]:IfStatement[11471-11575]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[11542-11575]:ExpressionStatement[11542-11575]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[11629-27041]:IfStatement[11629-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11752-11829]:Block[11752-11829]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[11778-11807]:ReturnStatement[11778-11807]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[11835-27041]:IfStatement[11835-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11860-12629]:Block[11860-12629]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11886-11901]:ExpressionStatement[11886-11901]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[11926-11968]:VariableDeclarationStatement[11926-11968]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[11993-12607]:IfStatement[11993-12607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12081-12213]:Block[12081-12213]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12164-12177]:ReturnStatement[12164-12177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12219-12607]:Block[12219-12607]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12249-12270]:ExpressionStatement[12249-12270]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[12299-12327]:VariableDeclarationStatement[12299-12327]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[12356-12581]:EnhancedForStatement[12356-12581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12409-12581]:Block[12409-12581]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[12443-12551]:IfStatement[12443-12551]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[12518-12551]:ExpressionStatement[12518-12551]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[12635-27041]:IfStatement[12635-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12664-13616]:Block[12664-13616]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[12690-12705]:ExpressionStatement[12690-12705]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[12730-12772]:VariableDeclarationStatement[12730-12772]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[12797-13594]:IfStatement[12797-13594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12885-13017]:Block[12885-13017]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12968-12981]:ReturnStatement[12968-12981]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[13023-13594]:IfStatement[13023-13594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13045-13133]:Block[13045-13133]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13075-13088]:ReturnStatement[13075-13088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13139-13594]:Block[13139-13594]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[13169-13199]:VariableDeclarationStatement[13169-13199]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[13228-13305]:IfStatement[13228-13305]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[13289-13305]:ExpressionStatement[13289-13305]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.removeLast();",
      "right" : "while (stack.size() > 1)\n                                stack.removeLast();",
      "info" : "WhileStatement[13388-13464]:WhileStatement[13388-13464]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[13445-13464]:ExpressionStatement[13445-13464]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13493-13513]:ExpressionStatement[13493-13513]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[13542-13568]:ExpressionStatement[13542-13568]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\"))",
      "right" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                            \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                            \"p\", \"section\", \"summary\", \"ul\"))",
      "info" : "IfStatement[13622-27041]:IfStatement[13622-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13937-14147]:Block[13937-14147]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13963-14080]:IfStatement[13963-14080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13990-14080]:Block[13990-14080]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14020-14054]:ExpressionStatement[14020-14054]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14105-14125]:ExpressionStatement[14105-14125]"
    }, {
      "left" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "right" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "info" : "IfStatement[14153-27041]:IfStatement[14153-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14214-14645]:Block[14214-14645]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[14240-14357]:IfStatement[14240-14357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14267-14357]:Block[14267-14357]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14297-14331]:ExpressionStatement[14297-14331]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "info" : "IfStatement[14382-14578]:IfStatement[14382-14578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14469-14578]:Block[14469-14578]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14499-14514]:ExpressionStatement[14499-14514]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[14543-14552]:ExpressionStatement[14543-14552]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14603-14623]:ExpressionStatement[14603-14623]"
    }, {
      "left" : "if (StringUtil.in(name, \"pre\", \"listing\"))",
      "right" : "if (StringUtil.in(name, \"pre\", \"listing\"))",
      "info" : "IfStatement[14651-27041]:IfStatement[14651-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14694-15007]:Block[14694-15007]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[14720-14837]:IfStatement[14720-14837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14747-14837]:Block[14747-14837]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14777-14811]:ExpressionStatement[14777-14811]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14862-14882]:ExpressionStatement[14862-14882]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14964-14985]:ExpressionStatement[14964-14985]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[15013-27041]:IfStatement[15013-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15038-15483]:Block[15038-15483]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[15064-15210]:IfStatement[15064-15210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15097-15210]:Block[15097-15210]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15127-15142]:ExpressionStatement[15127-15142]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15171-15184]:ReturnStatement[15171-15184]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[15235-15352]:IfStatement[15235-15352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15262-15352]:Block[15262-15352]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[15292-15326]:ExpressionStatement[15292-15326]"
    }, {
      "left" : "Element form = tb.insert(startTag);",
      "right" : "Element form = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[15377-15412]:VariableDeclarationStatement[15377-15412]"
    }, {
      "left" : "tb.setFormElement(form);",
      "right" : "tb.setFormElement(form);",
      "info" : "ExpressionStatement[15437-15461]:ExpressionStatement[15437-15461]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[15489-27041]:IfStatement[15489-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15512-16329]:Block[15512-16329]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[15538-15559]:ExpressionStatement[15538-15559]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15584-15626]:VariableDeclarationStatement[15584-15626]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[15651-16120]:ForStatement[15651-16120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15694-16120]:Block[15694-16120]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[15724-15750]:VariableDeclarationStatement[15724-15750]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[15779-15949]:IfStatement[15779-15949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15811-15949]:Block[15811-15949]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"li\"));",
      "right" : "tb.process(new Token.EndTag(\"li\"));",
      "info" : "ExpressionStatement[15845-15880]:ExpressionStatement[15845-15880]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15913-15919]:BreakStatement[15913-15919]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "info" : "IfStatement[15978-16094]:IfStatement[15978-16094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16088-16094]:BreakStatement[16088-16094]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16145-16262]:IfStatement[16145-16262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16172-16262]:Block[16172-16262]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[16202-16236]:ExpressionStatement[16202-16236]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16287-16307]:ExpressionStatement[16287-16307]"
    }, {
      "left" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "right" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "info" : "IfStatement[16335-27041]:IfStatement[16335-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16372-17212]:Block[16372-17212]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16398-16419]:ExpressionStatement[16398-16419]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[16444-16486]:VariableDeclarationStatement[16444-16486]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[16511-17003]:ForStatement[16511-17003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16554-17003]:Block[16554-17003]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[16584-16610]:VariableDeclarationStatement[16584-16610]"
    }, {
      "left" : "if (StringUtil.in(el.nodeName(), \"dd\", \"dt\"))",
      "right" : "if (StringUtil.in(el.nodeName(), \"dd\", \"dt\"))",
      "info" : "IfStatement[16639-16832]:IfStatement[16639-16832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16685-16832]:Block[16685-16832]"
    }, {
      "left" : "tb.process(new Token.EndTag(el.nodeName()));",
      "right" : "tb.process(new Token.EndTag(el.nodeName()));",
      "info" : "ExpressionStatement[16719-16763]:ExpressionStatement[16719-16763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16796-16802]:BreakStatement[16796-16802]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))",
      "info" : "IfStatement[16861-16977]:IfStatement[16861-16977]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16971-16977]:BreakStatement[16971-16977]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17028-17145]:IfStatement[17028-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17055-17145]:Block[17055-17145]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[17085-17119]:ExpressionStatement[17085-17119]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17170-17190]:ExpressionStatement[17170-17190]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[17218-27041]:IfStatement[17218-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17248-17560]:Block[17248-17560]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17274-17391]:IfStatement[17274-17391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17301-17391]:Block[17301-17391]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[17331-17365]:ExpressionStatement[17331-17365]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17416-17436]:ExpressionStatement[17416-17436]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[17461-17511]:ExpressionStatement[17461-17511]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[17566-27041]:IfStatement[17566-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17593-18109]:Block[17593-18109]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[17619-18087]:IfStatement[17619-18087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17651-17891]:Block[17651-17891]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17732-17747]:ExpressionStatement[17732-17747]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"button\"));",
      "right" : "tb.process(new Token.EndTag(\"button\"));",
      "info" : "ExpressionStatement[17776-17815]:ExpressionStatement[17776-17815]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[17844-17865]:ExpressionStatement[17844-17865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17897-18087]:Block[17897-18087]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[17927-17962]:ExpressionStatement[17927-17962]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17991-18011]:ExpressionStatement[17991-18011]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[18040-18061]:ExpressionStatement[18040-18061]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[18115-27041]:IfStatement[18115-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18137-18894]:Block[18137-18894]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[18163-18695]:IfStatement[18163-18695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18211-18695]:Block[18211-18695]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18241-18256]:ExpressionStatement[18241-18256]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"a\"));",
      "right" : "tb.process(new Token.EndTag(\"a\"));",
      "info" : "ExpressionStatement[18285-18319]:ExpressionStatement[18285-18319]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[18396-18438]:VariableDeclarationStatement[18396-18438]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[18467-18669]:IfStatement[18467-18669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18491-18669]:Block[18491-18669]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[18525-18575]:ExpressionStatement[18525-18575]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[18608-18639]:ExpressionStatement[18608-18639]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18720-18755]:ExpressionStatement[18720-18755]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[18780-18812]:VariableDeclarationStatement[18780-18812]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[18837-18872]:ExpressionStatement[18837-18872]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "right" : "if (StringUtil.in(name,\n                            \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "info" : "IfStatement[18900-27041]:IfStatement[18900-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19037-19239]:Block[19037-19239]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19063-19098]:ExpressionStatement[19063-19098]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19123-19156]:VariableDeclarationStatement[19123-19156]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19181-19217]:ExpressionStatement[19181-19217]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19245-27041]:IfStatement[19245-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19270-19722]:Block[19270-19722]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19296-19331]:ExpressionStatement[19296-19331]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19356-19581]:IfStatement[19356-19581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19380-19581]:Block[19380-19581]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19410-19425]:ExpressionStatement[19410-19425]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"nobr\"));",
      "right" : "tb.process(new Token.EndTag(\"nobr\"));",
      "info" : "ExpressionStatement[19454-19491]:ExpressionStatement[19454-19491]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19520-19555]:ExpressionStatement[19520-19555]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19606-19639]:VariableDeclarationStatement[19606-19639]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19664-19700]:ExpressionStatement[19664-19700]"
    }, {
      "left" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "right" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "info" : "IfStatement[19728-27041]:IfStatement[19728-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19784-20021]:Block[19784-20021]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19810-19845]:ExpressionStatement[19810-19845]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19870-19890]:ExpressionStatement[19870-19890]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[19915-19953]:ExpressionStatement[19915-19953]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19978-19999]:ExpressionStatement[19978-19999]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[20027-27041]:IfStatement[20027-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20053-20420]:Block[20053-20420]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20079-20259]:IfStatement[20079-20259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20169-20259]:Block[20169-20259]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[20199-20233]:ExpressionStatement[20199-20233]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20284-20304]:ExpressionStatement[20284-20304]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20329-20350]:ExpressionStatement[20329-20350]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20375-20398]:ExpressionStatement[20375-20398]"
    }, {
      "left" : "if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"))",
      "right" : "if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"))",
      "info" : "IfStatement[20426-27041]:IfStatement[20426-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20498-20677]:Block[20498-20677]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20524-20559]:ExpressionStatement[20524-20559]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20584-20609]:ExpressionStatement[20584-20609]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20634-20655]:ExpressionStatement[20634-20655]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20683-27041]:IfStatement[20683-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20709-20978]:Block[20709-20978]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20735-20770]:ExpressionStatement[20735-20770]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20795-20833]:VariableDeclarationStatement[20795-20833]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20858-20956]:IfStatement[20858-20956]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20935-20956]:ExpressionStatement[20935-20956]"
    }, {
      "left" : "if (StringUtil.in(name, \"param\", \"source\", \"track\"))",
      "right" : "if (StringUtil.in(name, \"param\", \"source\", \"track\"))",
      "info" : "IfStatement[20984-27041]:IfStatement[20984-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21037-21110]:Block[21037-21110]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21063-21088]:ExpressionStatement[21063-21088]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[21116-27041]:IfStatement[21116-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21139-21400]:Block[21139-21400]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[21165-21282]:IfStatement[21165-21282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21192-21282]:Block[21192-21282]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[21222-21256]:ExpressionStatement[21222-21256]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21307-21332]:ExpressionStatement[21307-21332]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21357-21378]:ExpressionStatement[21357-21378]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21406-27041]:IfStatement[21406-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21432-21608]:Block[21432-21608]"
    }, {
      "left" : "startTag.name(\"img\");",
      "right" : "startTag.name(\"img\");",
      "info" : "ExpressionStatement[21512-21533]:ExpressionStatement[21512-21533]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[21558-21586]:ReturnStatement[21558-21586]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21614-27041]:IfStatement[21614-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21642-23394]:Block[21642-23394]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21736-21751]:ExpressionStatement[21736-21751]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21776-21850]:IfStatement[21776-21850]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21837-21850]:ReturnStatement[21837-21850]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[21876-21918]:ExpressionStatement[21876-21918]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"form\"));",
      "right" : "tb.process(new Token.StartTag(\"form\"));",
      "info" : "ExpressionStatement[21943-21982]:ExpressionStatement[21943-21982]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[22007-22224]:IfStatement[22007-22224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22049-22224]:Block[22049-22224]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[22079-22114]:VariableDeclarationStatement[22079-22114]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22143-22198]:ExpressionStatement[22143-22198]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"hr\"));",
      "right" : "tb.process(new Token.StartTag(\"hr\"));",
      "info" : "ExpressionStatement[22249-22286]:ExpressionStatement[22249-22286]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"label\"));",
      "right" : "tb.process(new Token.StartTag(\"label\"));",
      "info" : "ExpressionStatement[22311-22351]:ExpressionStatement[22311-22351]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22426-22635]:VariableDeclarationStatement[22426-22635]"
    }, {
      "left" : "tb.process(new Token.Character(prompt));",
      "right" : "tb.process(new Token.Character(prompt));",
      "info" : "ExpressionStatement[22661-22701]:ExpressionStatement[22661-22701]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22760-22803]:VariableDeclarationStatement[22760-22803]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22828-23045]:EnhancedForStatement[22828-23045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22871-23045]:Block[22871-23045]"
    }, {
      "left" : "if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))",
      "right" : "if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))",
      "info" : "IfStatement[22901-23019]:IfStatement[22901-23019]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22996-23019]:ExpressionStatement[22996-23019]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[23070-23106]:ExpressionStatement[23070-23106]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"input\", inputAttribs));",
      "right" : "tb.process(new Token.StartTag(\"input\", inputAttribs));",
      "info" : "ExpressionStatement[23131-23185]:ExpressionStatement[23131-23185]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"label\"));",
      "right" : "tb.process(new Token.EndTag(\"label\"));",
      "info" : "ExpressionStatement[23210-23248]:ExpressionStatement[23210-23248]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"hr\"));",
      "right" : "tb.process(new Token.StartTag(\"hr\"));",
      "info" : "ExpressionStatement[23273-23310]:ExpressionStatement[23273-23310]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"form\"));",
      "right" : "tb.process(new Token.EndTag(\"form\"));",
      "info" : "ExpressionStatement[23335-23372]:ExpressionStatement[23335-23372]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23400-27041]:IfStatement[23400-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23429-23941]:Block[23429-23941]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23455-23475]:ExpressionStatement[23455-23475]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23733-23780]:ExpressionStatement[23733-23780]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23805-23828]:ExpressionStatement[23805-23828]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23853-23874]:ExpressionStatement[23853-23874]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23899-23919]:ExpressionStatement[23899-23919]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23947-27041]:IfStatement[23947-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23971-24295]:Block[23971-24295]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23997-24114]:IfStatement[23997-24114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24024-24114]:Block[24024-24114]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[24054-24088]:ExpressionStatement[24054-24088]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24139-24174]:ExpressionStatement[24139-24174]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24199-24220]:ExpressionStatement[24199-24220]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24245-24273]:ExpressionStatement[24245-24273]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24301-27041]:IfStatement[24301-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24328-24450]:Block[24328-24450]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24354-24375]:ExpressionStatement[24354-24375]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24400-24428]:ExpressionStatement[24400-24428]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24456-27041]:IfStatement[24456-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24484-24626]:Block[24484-24626]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24576-24604]:ExpressionStatement[24576-24604]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24632-27041]:IfStatement[24632-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24659-25191]:Block[24659-25191]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24685-24720]:ExpressionStatement[24685-24720]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24745-24765]:ExpressionStatement[24745-24765]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24790-24811]:ExpressionStatement[24790-24811]"
    }, {
      "left" : "TreeBuilderState state = tb.state();",
      "right" : "TreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24837-24873]:VariableDeclarationStatement[24837-24873]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24898-25169]:IfStatement[24898-25169]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[25056-25087]:ExpressionStatement[25056-25087]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[25145-25169]:ExpressionStatement[25145-25169]"
    }, {
      "left" : "if (StringUtil.in(\"optgroup\", \"option\"))",
      "right" : "if (StringUtil.in(\"optgroup\", \"option\"))",
      "info" : "IfStatement[25197-27041]:IfStatement[25197-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25238-25511]:Block[25238-25511]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[25264-25384]:IfStatement[25264-25384]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[25345-25384]:ExpressionStatement[25345-25384]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25409-25444]:ExpressionStatement[25409-25444]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25469-25489]:ExpressionStatement[25469-25489]"
    }, {
      "left" : "if (StringUtil.in(\"rp\", \"rt\"))",
      "right" : "if (StringUtil.in(\"rp\", \"rt\"))",
      "info" : "IfStatement[25517-27041]:IfStatement[25517-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25548-26015]:Block[25548-26015]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25574-25993]:IfStatement[25574-25993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25598-25993]:Block[25598-25993]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25628-25656]:ExpressionStatement[25628-25656]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25685-25918]:IfStatement[25685-25918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25737-25918]:Block[25737-25918]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25771-25786]:ExpressionStatement[25771-25786]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25819-25847]:ExpressionStatement[25819-25847]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25947-25967]:ExpressionStatement[25947-25967]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[26021-27041]:IfStatement[26021-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26046-26341]:Block[26046-26341]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26072-26107]:ExpressionStatement[26072-26107]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26232-26252]:ExpressionStatement[26232-26252]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26277-26319]:ExpressionStatement[26277-26319]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26347-27041]:IfStatement[26347-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26371-26655]:Block[26371-26655]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26397-26432]:ExpressionStatement[26397-26432]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26546-26566]:ExpressionStatement[26546-26566]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26591-26633]:ExpressionStatement[26591-26633]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                            \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[26661-27041]:IfStatement[26661-27041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26806-26907]:Block[26806-26907]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26832-26847]:ExpressionStatement[26832-26847]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26872-26885]:ReturnStatement[26872-26885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26913-27041]:Block[26913-27041]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26939-26974]:ExpressionStatement[26939-26974]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26999-27019]:ExpressionStatement[26999-27019]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27062-27068]:BreakStatement[27062-27068]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[27086-27098]:SwitchCase[27086-27098]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[27119-27154]:VariableDeclarationStatement[27119-27154]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[27175-27196]:ExpressionStatement[27175-27196]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[27217-38329]:IfStatement[27217-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27242-27675]:Block[27242-27675]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[27268-27653]:IfStatement[27268-27653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27293-27406]:Block[27293-27406]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27323-27338]:ExpressionStatement[27323-27338]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27367-27380]:ReturnStatement[27367-27380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27412-27653]:Block[27412-27653]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[27602-27627]:ExpressionStatement[27602-27627]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[27681-38329]:IfStatement[27681-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27706-27907]:Block[27706-27907]"
    }, {
      "left" : "boolean notIgnored = tb.process(new Token.EndTag(\"body\"));",
      "right" : "boolean notIgnored = tb.process(new Token.EndTag(\"body\"));",
      "info" : "VariableDeclarationStatement[27732-27790]:VariableDeclarationStatement[27732-27790]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[27815-27885]:IfStatement[27815-27885]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[27859-27885]:ReturnStatement[27859-27885]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"))",
      "right" : "if (StringUtil.in(name,\n                            \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                            \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                            \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"))",
      "info" : "IfStatement[27913-38329]:IfStatement[27913-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28251-28809]:Block[28251-28809]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[28333-28787]:IfStatement[28333-28787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28356-28517]:Block[28356-28517]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28434-28449]:ExpressionStatement[28434-28449]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28478-28491]:ReturnStatement[28478-28491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28523-28787]:Block[28523-28787]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[28553-28581]:ExpressionStatement[28553-28581]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[28610-28707]:IfStatement[28610-28707]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28692-28707]:ExpressionStatement[28692-28707]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[28736-28761]:ExpressionStatement[28736-28761]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[28815-38329]:IfStatement[28815-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28840-29532]:Block[28840-29532]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[28866-28908]:VariableDeclarationStatement[28866-28908]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[28933-28957]:ExpressionStatement[28933-28957]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[28982-29510]:IfStatement[28982-29510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29028-29141]:Block[29028-29141]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29058-29073]:ExpressionStatement[29058-29073]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29102-29115]:ReturnStatement[29102-29115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29147-29510]:Block[29147-29510]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[29177-29205]:ExpressionStatement[29177-29205]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[29234-29331]:IfStatement[29234-29331]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29316-29331]:ExpressionStatement[29316-29331]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[29452-29484]:ExpressionStatement[29452-29484]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[29538-38329]:IfStatement[29538-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29560-30149]:Block[29560-30149]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[29586-30127]:IfStatement[29586-30127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29615-29853]:Block[29615-29853]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29645-29660]:ExpressionStatement[29645-29660]"
    }, {
      "left" : "tb.process(new Token.StartTag(name));",
      "right" : "tb.process(new Token.StartTag(name));",
      "info" : "ExpressionStatement[29689-29726]:ExpressionStatement[29689-29726]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[29801-29827]:ReturnStatement[29801-29827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29859-30127]:Block[29859-30127]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[29889-29921]:ExpressionStatement[29889-29921]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[29950-30047]:IfStatement[29950-30047]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30032-30047]:ExpressionStatement[30032-30047]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[30076-30101]:ExpressionStatement[30076-30101]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[30155-38329]:IfStatement[30155-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30178-30644]:Block[30178-30644]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[30204-30622]:IfStatement[30204-30622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30235-30348]:Block[30235-30348]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30265-30280]:ExpressionStatement[30265-30280]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30309-30322]:ReturnStatement[30309-30322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30354-30622]:Block[30354-30622]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[30384-30416]:ExpressionStatement[30384-30416]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[30445-30542]:IfStatement[30445-30542]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30527-30542]:ExpressionStatement[30527-30542]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[30571-30596]:ExpressionStatement[30571-30596]"
    }, {
      "left" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "right" : "if (StringUtil.in(name, \"dd\", \"dt\"))",
      "info" : "IfStatement[30650-38329]:IfStatement[30650-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30687-31145]:Block[30687-31145]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[30713-31123]:IfStatement[30713-31123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30736-30849]:Block[30736-30849]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30766-30781]:ExpressionStatement[30766-30781]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30810-30823]:ReturnStatement[30810-30823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30855-31123]:Block[30855-31123]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[30885-30917]:ExpressionStatement[30885-30917]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[30946-31043]:IfStatement[30946-31043]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31028-31043]:ExpressionStatement[31028-31043]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[31072-31097]:ExpressionStatement[31072-31097]"
    }, {
      "left" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "right" : "if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"))",
      "info" : "IfStatement[31151-38329]:IfStatement[31151-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31212-31744]:Block[31212-31744]"
    }, {
      "left" : "if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}))",
      "right" : "if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}))",
      "info" : "IfStatement[31238-31722]:IfStatement[31238-31722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31305-31418]:Block[31305-31418]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31335-31350]:ExpressionStatement[31335-31350]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31379-31392]:ReturnStatement[31379-31392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31424-31722]:Block[31424-31722]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[31454-31486]:ExpressionStatement[31454-31486]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[31515-31612]:IfStatement[31515-31612]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31597-31612]:ExpressionStatement[31597-31612]"
    }, {
      "left" : "tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");",
      "right" : "tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");",
      "info" : "ExpressionStatement[31641-31696]:ExpressionStatement[31641-31696]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[31750-38329]:IfStatement[31750-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31778-31889]:Block[31778-31889]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[31838-31867]:ReturnStatement[31838-31867]"
    }, {
      "left" : "if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "right" : "if (StringUtil.in(name,\n                            \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"))",
      "info" : "IfStatement[31895-38329]:IfStatement[31895-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32045-37408]:Block[32045-37408]"
    }, {
      "left" : "OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            for (int si = 0; si < stack.size(); si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }",
      "right" : "OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            for (int si = 0; si < stack.size(); si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avvoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }",
      "info" : "LabeledStatement[32125-37386]:LabeledStatement[32125-37386]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[32156-37386]:ForStatement[32156-37386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32184-37386]:Block[32184-37386]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[32214-32269]:VariableDeclarationStatement[32214-32269]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[32298-32906]:IfStatement[32298-32906]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[32352-32381]:ReturnStatement[32352-32381]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[32415-32906]:IfStatement[32415-32906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32442-32647]:Block[32442-32647]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32476-32491]:ExpressionStatement[32476-32491]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32524-32572]:ExpressionStatement[32524-32572]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32605-32617]:ReturnStatement[32605-32617]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[32653-32906]:IfStatement[32653-32906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32691-32816]:Block[32691-32816]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32725-32740]:ExpressionStatement[32725-32740]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32773-32786]:ReturnStatement[32773-32786]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[32822-32906]:IfStatement[32822-32906]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32891-32906]:ExpressionStatement[32891-32906]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[32936-32965]:VariableDeclarationStatement[32936-32965]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[32994-33024]:VariableDeclarationStatement[32994-33024]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[33053-33091]:VariableDeclarationStatement[33053-33091]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[33120-33162]:VariableDeclarationStatement[33120-33162]"
    }, {
      "left" : "for (int si = 0; si < stack.size(); si++)",
      "right" : "for (int si = 0; si < stack.size(); si++)",
      "info" : "ForStatement[33191-33737]:ForStatement[33191-33737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33233-33737]:Block[33233-33737]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[33267-33294]:VariableDeclarationStatement[33267-33294]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[33327-33707]:IfStatement[33327-33707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33347-33520]:Block[33347-33520]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[33385-33420]:ExpressionStatement[33385-33420]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[33457-33486]:ExpressionStatement[33457-33486]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[33526-33707]:IfStatement[33526-33707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33573-33707]:Block[33573-33707]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[33611-33630]:ExpressionStatement[33611-33630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33667-33673]:BreakStatement[33667-33673]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[33766-34023]:IfStatement[33766-34023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33793-34023]:Block[33793-34023]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[33827-33867]:ExpressionStatement[33827-33867]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[33900-33948]:ExpressionStatement[33900-33948]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33981-33993]:ReturnStatement[33981-33993]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[34327-34356]:VariableDeclarationStatement[34327-34356]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[34385-34418]:VariableDeclarationStatement[34385-34418]"
    }, {
      "left" : "INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }",
      "right" : "INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }",
      "info" : "LabeledStatement[34447-35926]:LabeledStatement[34447-35926]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[34482-35926]:ForStatement[34482-35926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34510-35926]:Block[34510-35926]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[34544-34631]:IfStatement[34544-34631]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[34602-34631]:ExpressionStatement[34602-34631]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[34664-34959]:IfStatement[34664-34959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34708-34883]:Block[34708-34883]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[34772-34797]:ExpressionStatement[34772-34797]"
    }, {
      "left" : "continue INNER;",
      "right" : "continue INNER;",
      "info" : "ContinueStatement[34834-34849]:ContinueStatement[34834-34849]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[34889-34959]:IfStatement[34889-34959]"
    }, {
      "left" : "break INNER;",
      "right" : "break INNER;",
      "info" : "BreakStatement[34947-34959]:BreakStatement[34947-34959]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[34993-35074]:VariableDeclarationStatement[34993-35074]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[35107-35160]:ExpressionStatement[35107-35160]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[35193-35230]:ExpressionStatement[35193-35230]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[35263-35282]:ExpressionStatement[35263-35282]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[35316-35668]:IfStatement[35316-35668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35347-35668]:Block[35347-35668]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[35701-35786]:IfStatement[35701-35786]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[35768-35786]:ExpressionStatement[35768-35786]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[35819-35846]:ExpressionStatement[35819-35846]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[35880-35896]:ExpressionStatement[35880-35896]"
    }, {
      "left" : "if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[35956-36485]:IfStatement[35956-36485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36044-36260]:Block[36044-36260]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[36078-36163]:IfStatement[36078-36163]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[36145-36163]:ExpressionStatement[36145-36163]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[36196-36230]:ExpressionStatement[36196-36230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36266-36485]:Block[36266-36485]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[36300-36385]:IfStatement[36300-36385]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[36367-36385]:ExpressionStatement[36367-36385]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[36418-36455]:ExpressionStatement[36418-36455]"
    }, {
      "left" : "Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());",
      "right" : "Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[36515-36581]:VariableDeclarationStatement[36515-36581]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);",
      "info" : "VariableDeclarationStatement[36610-36710]:VariableDeclarationStatement[36610-36710]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[36739-36934]:EnhancedForStatement[36739-36934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36773-36934]:Block[36773-36934]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[36807-36838]:ExpressionStatement[36807-36838]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[36963-36998]:ExpressionStatement[36963-36998]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[37027-37075]:ExpressionStatement[37027-37075]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[37256-37285]:ExpressionStatement[37256-37285]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[37314-37360]:ExpressionStatement[37314-37360]"
    }, {
      "left" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "right" : "if (StringUtil.in(name, \"applet\", \"marquee\", \"object\"))",
      "info" : "IfStatement[37414-38329]:IfStatement[37414-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37470-38054]:Block[37470-38054]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37496-38032]:IfStatement[37496-38032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37521-38032]:Block[37521-38032]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37551-37699]:IfStatement[37551-37699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37574-37699]:Block[37574-37699]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37608-37623]:ExpressionStatement[37608-37623]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37656-37669]:ReturnStatement[37656-37669]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37728-37756]:ExpressionStatement[37728-37756]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37785-37882]:IfStatement[37785-37882]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37867-37882]:ExpressionStatement[37867-37882]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37911-37936]:ExpressionStatement[37911-37936]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37965-38006]:ExpressionStatement[37965-38006]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[38060-38329]:IfStatement[38060-38329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38083-38246]:Block[38083-38246]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38109-38124]:ExpressionStatement[38109-38124]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"br\"));",
      "right" : "tb.process(new Token.StartTag(\"br\"));",
      "info" : "ExpressionStatement[38149-38186]:ExpressionStatement[38149-38186]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38211-38224]:ReturnStatement[38211-38224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38252-38329]:Block[38252-38329]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[38278-38307]:ReturnStatement[38278-38307]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38351-38357]:BreakStatement[38351-38357]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38374-38383]:SwitchCase[38374-38383]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38566-38572]:BreakStatement[38566-38572]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38599-38611]:ReturnStatement[38599-38611]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38631-38638]:PrimitiveType[38631-38638]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38639-38653]:SimpleName[38639-38653]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38654-38661]:SingleVariableDeclaration[38654-38661]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[38663-38677]:SingleVariableDeclaration[38663-38677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38679-39459]:Block[38679-39459]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[38693-38727]:VariableDeclarationStatement[38693-38727]"
    }, {
      "left" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "right" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38740-38793]:VariableDeclarationStatement[38740-38793]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[38806-38856]:VariableDeclarationStatement[38806-38856]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[38869-39424]:WhileStatement[38869-39424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38890-39424]:Block[38890-39424]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[38908-38933]:VariableDeclarationStatement[38908-38933]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38950-39410]:IfStatement[38950-39410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38984-39239]:Block[38984-39239]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[39006-39038]:ExpressionStatement[39006-39038]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[39059-39148]:IfStatement[39059-39148]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39133-39148]:ExpressionStatement[39133-39148]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[39169-39194]:ExpressionStatement[39169-39194]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39215-39221]:BreakStatement[39215-39221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39245-39410]:Block[39245-39410]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39267-39392]:IfStatement[39267-39392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39291-39392]:Block[39291-39392]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39317-39332]:ExpressionStatement[39317-39332]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39357-39370]:ReturnStatement[39357-39370]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39437-39449]:ReturnStatement[39437-39449]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39549-39556]:PrimitiveType[39549-39556]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[39557-39564]:SimpleName[39557-39564]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[39565-39572]:SingleVariableDeclaration[39565-39572]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[39574-39588]:SingleVariableDeclaration[39574-39588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39590-40191]:Block[39590-40191]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39604-40156]:IfStatement[39604-40156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39625-39684]:Block[39625-39684]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39643-39670]:ExpressionStatement[39643-39670]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39690-40156]:IfStatement[39690-40156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39705-39929]:Block[39705-39929]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39723-39738]:ExpressionStatement[39723-39738]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39817-39826]:ExpressionStatement[39817-39826]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39843-39877]:ExpressionStatement[39843-39877]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39894-39915]:ReturnStatement[39894-39915]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39935-40156]:IfStatement[39935-40156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39953-40156]:Block[39953-40156]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[40082-40091]:ExpressionStatement[40082-40091]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[40108-40142]:ExpressionStatement[40108-40142]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40169-40181]:ReturnStatement[40169-40181]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40221-40228]:PrimitiveType[40221-40228]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[40229-40236]:SimpleName[40229-40236]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[40237-40244]:SingleVariableDeclaration[40237-40244]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[40246-40260]:SingleVariableDeclaration[40246-40260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40262-43932]:Block[40262-43932]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[40276-43882]:IfStatement[40276-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40297-40482]:Block[40297-40482]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40315-40346]:ExpressionStatement[40315-40346]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40363-40386]:ExpressionStatement[40363-40386]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40403-40430]:ExpressionStatement[40403-40430]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40447-40468]:ReturnStatement[40447-40468]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40488-43882]:IfStatement[40488-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40507-40564]:Block[40507-40564]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40525-40550]:ExpressionStatement[40525-40550]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40570-43882]:IfStatement[40570-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40589-40666]:Block[40589-40666]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40607-40622]:ExpressionStatement[40607-40622]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40639-40652]:ReturnStatement[40639-40652]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40672-43882]:IfStatement[40672-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40692-42913]:Block[40692-42913]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40710-40751]:VariableDeclarationStatement[40710-40751]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[40768-40798]:VariableDeclarationStatement[40768-40798]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40815-42899]:IfStatement[40815-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40843-41059]:Block[40843-41059]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40865-40895]:ExpressionStatement[40865-40895]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40916-40954]:ExpressionStatement[40916-40954]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40975-40995]:ExpressionStatement[40975-40995]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[41016-41041]:ExpressionStatement[41016-41041]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[41065-42899]:IfStatement[41065-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41094-41255]:Block[41094-41255]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41116-41146]:ExpressionStatement[41116-41146]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41167-41187]:ExpressionStatement[41167-41187]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[41208-41237]:ExpressionStatement[41208-41237]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[41261-42899]:IfStatement[41261-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41285-41410]:Block[41285-41410]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "right" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "info" : "ExpressionStatement[41307-41350]:ExpressionStatement[41307-41350]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41371-41392]:ReturnStatement[41371-41392]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41416-42899]:IfStatement[41416-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41468-41627]:Block[41468-41627]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41490-41520]:ExpressionStatement[41490-41520]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41541-41561]:ExpressionStatement[41541-41561]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41582-41609]:ExpressionStatement[41582-41609]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41633-42899]:IfStatement[41633-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41676-41798]:Block[41676-41798]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tbody\"));",
      "right" : "tb.process(new Token.StartTag(\"tbody\"));",
      "info" : "ExpressionStatement[41698-41738]:ExpressionStatement[41698-41738]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41759-41780]:ReturnStatement[41759-41780]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41804-42899]:IfStatement[41804-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41830-42076]:Block[41830-42076]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41852-41867]:ExpressionStatement[41852-41867]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "info" : "VariableDeclarationStatement[41888-41946]:VariableDeclarationStatement[41888-41946]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41967-42058]:IfStatement[41967-42058]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[42037-42058]:ReturnStatement[42037-42058]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[42082-42899]:IfStatement[42082-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42126-42195]:Block[42126-42195]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[42148-42177]:ReturnStatement[42148-42177]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[42201-42899]:IfStatement[42201-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42227-42486]:Block[42227-42486]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[42249-42468]:IfStatement[42249-42468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42314-42389]:Block[42314-42389]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42340-42367]:ReturnStatement[42340-42367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42395-42468]:Block[42395-42468]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42421-42446]:ExpressionStatement[42421-42446]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42492-42899]:IfStatement[42492-42899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42517-42826]:Block[42517-42826]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42539-42554]:ExpressionStatement[42539-42554]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42575-42808]:IfStatement[42575-42808]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42632-42645]:ReturnStatement[42632-42645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42671-42808]:Block[42671-42808]"
    }, {
      "left" : "Element form = tb.insertEmpty(startTag);",
      "right" : "Element form = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[42697-42737]:VariableDeclarationStatement[42697-42737]"
    }, {
      "left" : "tb.setFormElement(form);",
      "right" : "tb.setFormElement(form);",
      "info" : "ExpressionStatement[42762-42786]:ExpressionStatement[42762-42786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42832-42899]:Block[42832-42899]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42854-42881]:ReturnStatement[42854-42881]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42919-43882]:IfStatement[42919-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42937-43697]:Block[42937-43697]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42955-42990]:VariableDeclarationStatement[42955-42990]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[43007-43035]:VariableDeclarationStatement[43007-43035]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[43053-43683]:IfStatement[43053-43683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43079-43375]:Block[43079-43375]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[43101-43312]:IfStatement[43101-43312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43129-43230]:Block[43129-43230]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43155-43170]:ExpressionStatement[43155-43170]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43195-43208]:ReturnStatement[43195-43208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43236-43312]:Block[43236-43312]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43262-43290]:ExpressionStatement[43262-43290]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43333-43357]:ExpressionStatement[43333-43357]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43381-43683]:IfStatement[43381-43683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43521-43610]:Block[43521-43610]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43543-43558]:ExpressionStatement[43543-43558]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43579-43592]:ReturnStatement[43579-43592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43616-43683]:Block[43616-43683]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43638-43665]:ReturnStatement[43638-43665]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43703-43882]:IfStatement[43703-43882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43718-43882]:Block[43718-43882]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[43736-43822]:IfStatement[43736-43822]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43807-43822]:ExpressionStatement[43807-43822]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43839-43851]:ReturnStatement[43839-43851]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43895-43922]:ReturnStatement[43895-43922]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43942-43949]:PrimitiveType[43942-43949]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[43950-43962]:SimpleName[43950-43962]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[43963-43970]:SingleVariableDeclaration[43963-43970]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[43972-43986]:SingleVariableDeclaration[43972-43986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43988-44426]:Block[43988-44426]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44002-44017]:ExpressionStatement[44002-44017]"
    }, {
      "left" : "boolean processed = true;",
      "right" : "boolean processed = true;",
      "info" : "VariableDeclarationStatement[44030-44055]:VariableDeclarationStatement[44030-44055]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[44068-44386]:IfStatement[44068-44386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44161-44314]:Block[44161-44314]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44179-44205]:ExpressionStatement[44179-44205]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44222-44256]:ExpressionStatement[44222-44256]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44273-44300]:ExpressionStatement[44273-44300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44320-44386]:Block[44320-44386]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44338-44372]:ExpressionStatement[44338-44372]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44399-44416]:ReturnStatement[44399-44416]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44460-44467]:PrimitiveType[44460-44467]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[44468-44475]:SimpleName[44468-44475]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[44476-44483]:SingleVariableDeclaration[44476-44483]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[44485-44499]:SingleVariableDeclaration[44485-44499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44501-46059]:Block[44501-46059]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44515-46024]:SwitchStatement[44515-46024]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44549-44564]:SwitchCase[44549-44564]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44585-44621]:VariableDeclarationStatement[44585-44621]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44642-44871]:IfStatement[44642-44871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44678-44779]:Block[44678-44779]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44704-44719]:ExpressionStatement[44704-44719]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44744-44757]:ReturnStatement[44744-44757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44785-44871]:Block[44785-44871]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c);",
      "right" : "tb.getPendingTableCharacters().add(c);",
      "info" : "ExpressionStatement[44811-44849]:ExpressionStatement[44811-44849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44892-44898]:BreakStatement[44892-44898]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44915-44923]:SwitchCase[44915-44923]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[44944-45913]:IfStatement[44944-45913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44991-45913]:Block[44991-45913]"
    }, {
      "left" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "right" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45017-45835]:EnhancedForStatement[45017-45835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45082-45835]:Block[45082-45835]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45112-45809]:IfStatement[45112-45809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45142-45750]:Block[45142-45750]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45242-45257]:ExpressionStatement[45242-45257]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45290-45720]:IfStatement[45290-45720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45383-45612]:Block[45383-45612]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45421-45447]:ExpressionStatement[45421-45447]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45484-45514]:ExpressionStatement[45484-45514]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45551-45578]:ExpressionStatement[45551-45578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45618-45720]:Block[45618-45720]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45656-45686]:ExpressionStatement[45656-45686]"
    }, {
      "left" : "tb.insert(character);",
      "right" : "tb.insert(character);",
      "info" : "ExpressionStatement[45788-45809]:ExpressionStatement[45788-45809]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[45860-45891]:ExpressionStatement[45860-45891]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[45934-45968]:ExpressionStatement[45934-45968]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[45989-46010]:ReturnStatement[45989-46010]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46037-46049]:ReturnStatement[46037-46049]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46091-46098]:PrimitiveType[46091-46098]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[46099-46106]:SimpleName[46099-46106]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[46107-46114]:SingleVariableDeclaration[46107-46114]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[46116-46130]:SingleVariableDeclaration[46116-46130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46132-47631]:Block[46132-47631]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "info" : "IfStatement[46146-47596]:IfStatement[46146-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46205-46797]:Block[46205-46797]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46223-46258]:VariableDeclarationStatement[46223-46258]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[46275-46303]:VariableDeclarationStatement[46275-46303]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46320-46783]:IfStatement[46320-46783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46348-46437]:Block[46348-46437]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46370-46385]:ExpressionStatement[46370-46385]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46406-46419]:ReturnStatement[46406-46419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46443-46783]:Block[46443-46783]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46465-46493]:ExpressionStatement[46465-46493]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[46514-46608]:IfStatement[46514-46608]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46593-46608]:ExpressionStatement[46593-46608]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46629-46659]:ExpressionStatement[46629-46659]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46680-46721]:ExpressionStatement[46680-46721]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[46742-46765]:ExpressionStatement[46742-46765]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "info" : "IfStatement[46803-47596]:IfStatement[46803-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47093-47290]:Block[47093-47290]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47111-47126]:ExpressionStatement[47111-47126]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "info" : "VariableDeclarationStatement[47143-47203]:VariableDeclarationStatement[47143-47203]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47220-47276]:IfStatement[47220-47276]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47255-47276]:ReturnStatement[47255-47276]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47296-47596]:IfStatement[47296-47596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47452-47529]:Block[47452-47529]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47470-47485]:ExpressionStatement[47470-47485]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47502-47515]:ReturnStatement[47502-47515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47535-47596]:Block[47535-47596]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47553-47582]:ReturnStatement[47553-47582]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47609-47621]:ReturnStatement[47609-47621]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47667-47674]:PrimitiveType[47667-47674]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[47675-47682]:SimpleName[47675-47682]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[47683-47690]:SingleVariableDeclaration[47683-47690]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[47692-47706]:SingleVariableDeclaration[47692-47706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47708-49472]:Block[47708-49472]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[47722-47831]:IfStatement[47722-47831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47743-47831]:Block[47743-47831]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[47761-47788]:ExpressionStatement[47761-47788]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47805-47817]:ReturnStatement[47805-47817]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[47844-49437]:SwitchStatement[47844-49437]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[47878-47891]:SwitchCase[47878-47891]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[47912-47937]:ExpressionStatement[47912-47937]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47958-47964]:BreakStatement[47958-47964]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[47981-47994]:SwitchCase[47981-47994]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48015-48030]:ExpressionStatement[48015-48030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48051-48057]:BreakStatement[48051-48057]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48074-48088]:SwitchCase[48074-48088]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48109-48150]:VariableDeclarationStatement[48109-48150]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[48171-48201]:VariableDeclarationStatement[48171-48201]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[48222-48476]:IfStatement[48222-48476]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48271-48300]:ReturnStatement[48271-48300]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[48326-48476]:IfStatement[48326-48476]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48374-48399]:ExpressionStatement[48374-48399]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48449-48476]:ReturnStatement[48449-48476]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48497-48503]:BreakStatement[48497-48503]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48520-48532]:SwitchCase[48520-48532]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48553-48588]:VariableDeclarationStatement[48553-48588]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[48609-48630]:ExpressionStatement[48609-48630]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[48651-49085]:IfStatement[48651-49085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48680-49028]:Block[48680-49028]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48706-49006]:IfStatement[48706-49006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48757-48883]:Block[48757-48883]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48800-48815]:ExpressionStatement[48800-48815]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48844-48857]:ReturnStatement[48844-48857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48889-49006]:Block[48889-49006]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[48919-48928]:ExpressionStatement[48919-48928]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[48957-48980]:ExpressionStatement[48957-48980]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49058-49085]:ReturnStatement[49058-49085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49106-49112]:BreakStatement[49106-49112]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49129-49138]:SwitchCase[49129-49138]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49159-49350]:IfStatement[49159-49350]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49234-49246]:ReturnStatement[49234-49246]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49323-49350]:ReturnStatement[49323-49350]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49367-49375]:SwitchCase[49367-49375]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49396-49423]:ReturnStatement[49396-49423]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49450-49462]:ReturnStatement[49450-49462]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49482-49489]:Modifier[49482-49489]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49490-49497]:PrimitiveType[49490-49497]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[49498-49510]:SimpleName[49498-49510]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49511-49518]:SingleVariableDeclaration[49511-49518]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49520-49534]:SingleVariableDeclaration[49520-49534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49536-49740]:Block[49536-49740]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "info" : "VariableDeclarationStatement[49550-49611]:VariableDeclarationStatement[49550-49611]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49624-49705]:IfStatement[49624-49705]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49684-49705]:ReturnStatement[49684-49705]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49718-49730]:ReturnStatement[49718-49730]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49774-49781]:PrimitiveType[49774-49781]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[49782-49789]:SimpleName[49782-49789]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[49790-49797]:SingleVariableDeclaration[49790-49797]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[49799-49813]:SingleVariableDeclaration[49799-49813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49815-51761]:Block[49815-51761]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[49829-51726]:SwitchStatement[49829-51726]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[49863-49877]:SwitchCase[49863-49877]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[49898-49939]:VariableDeclarationStatement[49898-49939]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[49960-49990]:VariableDeclarationStatement[49960-49990]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[50011-50649]:IfStatement[50011-50649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50034-50207]:Block[50034-50207]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50060-50094]:ExpressionStatement[50060-50094]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[50119-50139]:ExpressionStatement[50119-50139]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[50164-50185]:ExpressionStatement[50164-50185]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[50213-50649]:IfStatement[50213-50649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50250-50428]:Block[50250-50428]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50276-50291]:ExpressionStatement[50276-50291]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tr\"));",
      "right" : "tb.process(new Token.StartTag(\"tr\"));",
      "info" : "ExpressionStatement[50316-50353]:ExpressionStatement[50316-50353]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[50378-50406]:ReturnStatement[50378-50406]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50434-50649]:IfStatement[50434-50649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50516-50592]:Block[50516-50592]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50542-50570]:ReturnStatement[50542-50570]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[50622-50649]:ReturnStatement[50622-50649]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50670-50676]:BreakStatement[50670-50676]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[50693-50705]:SwitchCase[50693-50705]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[50726-50761]:VariableDeclarationStatement[50726-50761]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[50782-50803]:ExpressionStatement[50782-50803]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50824-51612]:IfStatement[50824-51612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50876-51251]:Block[50876-51251]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[50902-51229]:IfStatement[50902-51229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50930-51043]:Block[50930-51043]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50960-50975]:ExpressionStatement[50960-50975]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51004-51017]:ReturnStatement[51004-51017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51049-51229]:Block[51049-51229]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51079-51113]:ExpressionStatement[51079-51113]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[51142-51151]:ExpressionStatement[51142-51151]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[51180-51203]:ExpressionStatement[51180-51203]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[51257-51612]:IfStatement[51257-51612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51283-51359]:Block[51283-51359]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[51309-51337]:ReturnStatement[51309-51337]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[51365-51612]:IfStatement[51365-51612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51454-51555]:Block[51454-51555]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51480-51495]:ExpressionStatement[51480-51495]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51520-51533]:ReturnStatement[51520-51533]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51585-51612]:ReturnStatement[51585-51612]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51633-51639]:BreakStatement[51633-51639]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51656-51664]:SwitchCase[51656-51664]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51685-51712]:ReturnStatement[51685-51712]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51739-51751]:ReturnStatement[51739-51751]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51771-51778]:Modifier[51771-51778]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51779-51786]:PrimitiveType[51779-51786]"
    }, {
      "left" : "exitTableBody",
      "right" : "exitTableBody",
      "info" : "SimpleName[51787-51800]:SimpleName[51787-51800]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[51801-51808]:SingleVariableDeclaration[51801-51808]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[51810-51824]:SingleVariableDeclaration[51810-51824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51826-52218]:Block[51826-52218]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[51840-52030]:IfStatement[51840-52030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51924-52030]:Block[51924-52030]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51971-51986]:ExpressionStatement[51971-51986]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52003-52016]:ReturnStatement[52003-52016]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52043-52077]:ExpressionStatement[52043-52077]"
    }, {
      "left" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "right" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "info" : "ExpressionStatement[52090-52151]:ExpressionStatement[52090-52151]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52187-52208]:ReturnStatement[52187-52208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52228-52235]:Modifier[52228-52235]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52236-52243]:PrimitiveType[52236-52243]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[52244-52256]:SimpleName[52244-52256]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52257-52264]:SingleVariableDeclaration[52257-52264]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[52266-52280]:SingleVariableDeclaration[52266-52280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52282-52336]:Block[52282-52336]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[52296-52326]:ReturnStatement[52296-52326]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52364-52371]:PrimitiveType[52364-52371]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[52372-52379]:SimpleName[52372-52379]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[52380-52387]:SingleVariableDeclaration[52380-52387]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[52389-52403]:SingleVariableDeclaration[52389-52403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52405-54337]:Block[52405-54337]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[52419-54302]:IfStatement[52419-54302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52439-53067]:Block[52439-53067]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[52457-52498]:VariableDeclarationStatement[52457-52498]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[52515-52545]:VariableDeclarationStatement[52515-52545]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[52563-53053]:IfStatement[52563-53053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52600-52816]:Block[52600-52816]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52622-52655]:ExpressionStatement[52622-52655]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[52676-52696]:ExpressionStatement[52676-52696]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[52717-52739]:ExpressionStatement[52717-52739]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[52760-52798]:ExpressionStatement[52760-52798]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[52822-53053]:IfStatement[52822-53053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52910-52980]:Block[52910-52980]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[52932-52962]:ReturnStatement[52932-52962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52986-53053]:Block[52986-53053]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53008-53035]:ReturnStatement[53008-53035]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[53073-54302]:IfStatement[53073-54302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53091-54237]:Block[53091-54237]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[53109-53144]:VariableDeclarationStatement[53109-53144]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[53161-53189]:VariableDeclarationStatement[53161-53189]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[53207-54223]:IfStatement[53207-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53230-53545]:Block[53230-53545]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53252-53389]:IfStatement[53252-53389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53280-53389]:Block[53280-53389]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53306-53321]:ExpressionStatement[53306-53321]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53354-53367]:ReturnStatement[53354-53367]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[53410-53443]:ExpressionStatement[53410-53443]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[53464-53473]:ExpressionStatement[53464-53473]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53500-53527]:ExpressionStatement[53500-53527]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[53551-54223]:IfStatement[53551-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53577-53647]:Block[53577-53647]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53599-53629]:ReturnStatement[53599-53629]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[53653-54223]:IfStatement[53653-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53705-53972]:Block[53705-53972]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53727-53856]:IfStatement[53727-53856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53755-53856]:Block[53755-53856]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53781-53796]:ExpressionStatement[53781-53796]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53821-53834]:ReturnStatement[53821-53834]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"tr\"));",
      "right" : "tb.process(new Token.EndTag(\"tr\"));",
      "info" : "ExpressionStatement[53877-53912]:ExpressionStatement[53877-53912]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[53933-53954]:ReturnStatement[53933-53954]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[53978-54223]:IfStatement[53978-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54061-54150]:Block[54061-54150]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54083-54098]:ExpressionStatement[54083-54098]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54119-54132]:ReturnStatement[54119-54132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54156-54223]:Block[54156-54223]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54178-54205]:ReturnStatement[54178-54205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54243-54302]:Block[54243-54302]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[54261-54288]:ReturnStatement[54261-54288]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54315-54327]:ReturnStatement[54315-54327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54347-54354]:Modifier[54347-54354]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54355-54362]:PrimitiveType[54355-54362]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[54363-54375]:SimpleName[54363-54375]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54376-54383]:SingleVariableDeclaration[54376-54383]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54385-54399]:SingleVariableDeclaration[54385-54399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54401-54455]:Block[54401-54455]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[54415-54445]:ReturnStatement[54415-54445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54465-54472]:Modifier[54465-54472]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54473-54480]:PrimitiveType[54473-54480]"
    }, {
      "left" : "handleMissingTr",
      "right" : "handleMissingTr",
      "info" : "SimpleName[54481-54496]:SimpleName[54481-54496]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54497-54504]:SingleVariableDeclaration[54497-54504]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54506-54520]:SingleVariableDeclaration[54506-54520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54522-54713]:Block[54522-54713]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "info" : "VariableDeclarationStatement[54536-54591]:VariableDeclarationStatement[54536-54591]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54604-54703]:IfStatement[54604-54703]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54635-54656]:ReturnStatement[54635-54656]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54690-54703]:ReturnStatement[54690-54703]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54742-54749]:PrimitiveType[54742-54749]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[54750-54757]:SimpleName[54750-54757]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[54758-54765]:SingleVariableDeclaration[54758-54765]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[54767-54781]:SingleVariableDeclaration[54767-54781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54783-56668]:Block[54783-56668]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[54797-56633]:IfStatement[54797-56633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54815-56134]:Block[54815-56134]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[54833-54868]:VariableDeclarationStatement[54833-54868]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[54885-54913]:VariableDeclarationStatement[54885-54913]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[54931-56120]:IfStatement[54931-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54968-55562]:Block[54968-55562]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[54990-55235]:IfStatement[54990-55235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55018-55235]:Block[55018-55235]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55044-55059]:ExpressionStatement[55044-55059]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55084-55105]:ExpressionStatement[55084-55105]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55200-55213]:ReturnStatement[55200-55213]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55256-55284]:ExpressionStatement[55256-55284]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[55305-55394]:IfStatement[55305-55394]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55379-55394]:ExpressionStatement[55379-55394]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55415-55440]:ExpressionStatement[55415-55440]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55461-55502]:ExpressionStatement[55461-55502]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55523-55544]:ExpressionStatement[55523-55544]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55568-56120]:IfStatement[55568-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55639-55728]:Block[55639-55728]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55661-55676]:ExpressionStatement[55661-55676]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55697-55710]:ReturnStatement[55697-55710]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55734-56120]:IfStatement[55734-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55801-56047]:Block[55801-56047]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55823-55952]:IfStatement[55823-55952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55851-55952]:Block[55851-55952]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55877-55892]:ExpressionStatement[55877-55892]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55917-55930]:ReturnStatement[55917-55930]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[55973-55987]:ExpressionStatement[55973-55987]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56008-56029]:ReturnStatement[56008-56029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56053-56120]:Block[56053-56120]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56075-56102]:ReturnStatement[56075-56102]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56140-56633]:IfStatement[56140-56633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56323-56568]:Block[56323-56568]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56341-56485]:IfStatement[56341-56485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56396-56485]:Block[56396-56485]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56418-56433]:ExpressionStatement[56418-56433]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56454-56467]:ReturnStatement[56454-56467]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56502-56516]:ExpressionStatement[56502-56516]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56533-56554]:ReturnStatement[56533-56554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56574-56633]:Block[56574-56633]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56592-56619]:ReturnStatement[56592-56619]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56646-56658]:ReturnStatement[56646-56658]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56678-56685]:Modifier[56678-56685]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56686-56693]:PrimitiveType[56686-56693]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[56694-56706]:SimpleName[56694-56706]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[56707-56714]:SingleVariableDeclaration[56707-56714]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[56716-56730]:SingleVariableDeclaration[56716-56730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56732-56785]:Block[56732-56785]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[56746-56775]:ReturnStatement[56746-56775]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56795-56802]:Modifier[56795-56802]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56803-56807]:PrimitiveType[56803-56807]"
    }, {
      "left" : "closeCell",
      "right" : "closeCell",
      "info" : "SimpleName[56808-56817]:SimpleName[56808-56817]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[56818-56832]:SingleVariableDeclaration[56818-56832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56834-57039]:Block[56834-57039]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[56848-56995]:IfStatement[56848-56995]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"td\"));",
      "right" : "tb.process(new Token.EndTag(\"td\"));",
      "info" : "ExpressionStatement[56891-56926]:ExpressionStatement[56891-56926]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"th\"));",
      "right" : "tb.process(new Token.EndTag(\"th\"));",
      "info" : "ExpressionStatement[56960-56995]:ExpressionStatement[56960-56995]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57070-57077]:PrimitiveType[57070-57077]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[57078-57085]:SimpleName[57078-57085]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[57086-57093]:SingleVariableDeclaration[57086-57093]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[57095-57109]:SingleVariableDeclaration[57095-57109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57111-60864]:Block[57111-60864]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57125-60829]:SwitchStatement[57125-60829]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57159-57174]:SwitchCase[57159-57174]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57195-57231]:VariableDeclarationStatement[57195-57231]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57252-57456]:IfStatement[57252-57456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57288-57389]:Block[57288-57389]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57314-57329]:ExpressionStatement[57314-57329]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57354-57367]:ReturnStatement[57354-57367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57395-57456]:Block[57395-57456]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57421-57434]:ExpressionStatement[57421-57434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57477-57483]:BreakStatement[57477-57483]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57500-57513]:SwitchCase[57500-57513]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57534-57559]:ExpressionStatement[57534-57559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57580-57586]:BreakStatement[57580-57586]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57603-57616]:SwitchCase[57603-57616]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57637-57652]:ExpressionStatement[57637-57652]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57673-57686]:ReturnStatement[57673-57686]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[57703-57717]:SwitchCase[57703-57717]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[57738-57776]:VariableDeclarationStatement[57738-57776]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[57797-57824]:VariableDeclarationStatement[57797-57824]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[57845-59212]:IfStatement[57845-59212]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[57894-57927]:ReturnStatement[57894-57927]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[57953-59212]:IfStatement[57953-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57980-58109]:Block[57980-58109]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[58006-58045]:ExpressionStatement[58006-58045]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58070-58087]:ExpressionStatement[58070-58087]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58115-59212]:IfStatement[58115-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58144-58508]:Block[58144-58508]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58170-58444]:IfStatement[58170-58444]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[58251-58290]:ExpressionStatement[58251-58290]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58320-58444]:IfStatement[58320-58444]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "right" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "info" : "ExpressionStatement[58403-58444]:ExpressionStatement[58403-58444]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58469-58486]:ExpressionStatement[58469-58486]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58514-59212]:IfStatement[58514-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58541-58675]:Block[58541-58675]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58567-58582]:ExpressionStatement[58567-58582]"
    }, {
      "left" : "return tb.process(new Token.EndTag(\"select\"));",
      "right" : "return tb.process(new Token.EndTag(\"select\"));",
      "info" : "ReturnStatement[58607-58653]:ReturnStatement[58607-58653]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[58681-59212]:IfStatement[58681-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58737-59021]:Block[58737-59021]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58763-58778]:ExpressionStatement[58763-58778]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[58803-58877]:IfStatement[58803-58877]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58864-58877]:ReturnStatement[58864-58877]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[58910-58949]:ExpressionStatement[58910-58949]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[58974-58999]:ReturnStatement[58974-58999]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59027-59212]:IfStatement[59027-59212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59054-59131]:Block[59054-59131]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59080-59109]:ReturnStatement[59080-59109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59137-59212]:Block[59137-59212]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59163-59190]:ReturnStatement[59163-59190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59233-59239]:BreakStatement[59233-59239]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59256-59268]:SwitchCase[59256-59268]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59289-59321]:VariableDeclarationStatement[59289-59321]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[59342-59360]:ExpressionStatement[59342-59360]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[59381-60550]:IfStatement[59381-60550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59410-59886]:Block[59410-59886]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59436-59674]:IfStatement[59436-59674]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[59635-59674]:ExpressionStatement[59635-59674]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59699-59864]:IfStatement[59699-59864]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59782-59791]:ExpressionStatement[59782-59791]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59849-59864]:ExpressionStatement[59849-59864]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[59892-60550]:IfStatement[59892-60550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59919-60130]:Block[59919-60130]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[59945-60108]:IfStatement[59945-60108]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60026-60035]:ExpressionStatement[60026-60035]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60093-60108]:ExpressionStatement[60093-60108]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[60136-60550]:IfStatement[60136-60550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60163-60493]:Block[60163-60493]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60189-60471]:IfStatement[60189-60471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60218-60331]:Block[60218-60331]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60248-60263]:ExpressionStatement[60248-60263]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60292-60305]:ReturnStatement[60292-60305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60337-60471]:Block[60337-60471]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60367-60392]:ExpressionStatement[60367-60392]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60421-60445]:ExpressionStatement[60421-60445]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60523-60550]:ReturnStatement[60523-60550]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60571-60577]:BreakStatement[60571-60577]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60594-60603]:SwitchCase[60594-60603]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[60624-60715]:IfStatement[60624-60715]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60700-60715]:ExpressionStatement[60700-60715]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60736-60742]:BreakStatement[60736-60742]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60759-60767]:SwitchCase[60759-60767]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60788-60815]:ReturnStatement[60788-60815]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60842-60854]:ReturnStatement[60842-60854]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60874-60881]:Modifier[60874-60881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60882-60889]:PrimitiveType[60882-60889]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[60890-60902]:SimpleName[60890-60902]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[60903-60910]:SingleVariableDeclaration[60903-60910]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[60912-60926]:SingleVariableDeclaration[60912-60926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60928-60993]:Block[60928-60993]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60942-60957]:ExpressionStatement[60942-60957]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60970-60983]:ReturnStatement[60970-60983]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61031-61038]:PrimitiveType[61031-61038]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61039-61046]:SimpleName[61039-61046]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61047-61054]:SingleVariableDeclaration[61047-61054]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[61056-61070]:SingleVariableDeclaration[61056-61070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61072-61826]:Block[61072-61826]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61086-61816]:IfStatement[61086-61816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61211-61352]:Block[61211-61352]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61229-61244]:ExpressionStatement[61229-61244]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61261-61300]:ExpressionStatement[61261-61300]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61317-61338]:ReturnStatement[61317-61338]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61358-61816]:IfStatement[61358-61816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61479-61747]:Block[61479-61747]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61497-61512]:ExpressionStatement[61497-61512]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().name()))",
      "right" : "if (tb.inTableScope(t.asEndTag().name()))",
      "info" : "IfStatement[61529-61733]:IfStatement[61529-61733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61571-61694]:Block[61571-61694]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61593-61632]:ExpressionStatement[61593-61632]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[61653-61676]:ReturnStatement[61653-61676]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61720-61733]:ReturnStatement[61720-61733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61753-61816]:Block[61753-61816]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[61771-61802]:ReturnStatement[61771-61802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61858-61865]:PrimitiveType[61858-61865]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[61866-61873]:SimpleName[61866-61873]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[61874-61881]:SingleVariableDeclaration[61874-61881]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[61883-61897]:SingleVariableDeclaration[61883-61897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61899-62851]:Block[61899-62851]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[61913-62816]:IfStatement[61913-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61934-61995]:Block[61934-61995]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[61952-61981]:ReturnStatement[61952-61981]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62001-62816]:IfStatement[62001-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62020-62095]:Block[62020-62095]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62038-62063]:ExpressionStatement[62038-62063]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62101-62816]:IfStatement[62101-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62120-62197]:Block[62120-62197]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62138-62153]:ExpressionStatement[62138-62153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62170-62183]:ReturnStatement[62170-62183]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[62203-62816]:IfStatement[62203-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62263-62324]:Block[62263-62324]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62281-62310]:ReturnStatement[62281-62310]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[62330-62816]:IfStatement[62330-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62386-62611]:Block[62386-62611]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[62404-62597]:IfStatement[62404-62597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62432-62521]:Block[62432-62521]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62454-62469]:ExpressionStatement[62454-62469]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62490-62503]:ReturnStatement[62490-62503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62527-62597]:Block[62527-62597]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62549-62579]:ExpressionStatement[62549-62579]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[62617-62816]:IfStatement[62617-62816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62632-62686]:Block[62632-62686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62692-62816]:Block[62692-62816]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62710-62725]:ExpressionStatement[62710-62725]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[62742-62764]:ExpressionStatement[62742-62764]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[62781-62802]:ReturnStatement[62781-62802]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62829-62841]:ReturnStatement[62829-62841]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62884-62891]:PrimitiveType[62884-62891]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[62892-62899]:SimpleName[62892-62899]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[62900-62907]:SingleVariableDeclaration[62900-62907]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[62909-62923]:SingleVariableDeclaration[62909-62923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62925-64640]:Block[62925-64640]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62939-64605]:IfStatement[62939-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62960-63019]:Block[62960-63019]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[62978-63005]:ExpressionStatement[62978-63005]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63025-64605]:IfStatement[63025-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63044-63101]:Block[63044-63101]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63062-63087]:ExpressionStatement[63062-63087]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63107-64605]:IfStatement[63107-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63126-63203]:Block[63126-63203]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63144-63159]:ExpressionStatement[63144-63159]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63176-63189]:ReturnStatement[63176-63189]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63209-64605]:IfStatement[63209-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63229-63847]:Block[63229-63847]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63247-63285]:VariableDeclarationStatement[63247-63285]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[63302-63329]:VariableDeclarationStatement[63302-63329]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[63346-63833]:IfStatement[63346-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63371-63444]:Block[63371-63444]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[63393-63426]:ReturnStatement[63393-63426]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[63450-63833]:IfStatement[63450-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63479-63536]:Block[63479-63536]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63501-63518]:ExpressionStatement[63501-63518]"
    }, {
      "left" : "if (name.equals(\"frame\"))",
      "right" : "if (name.equals(\"frame\"))",
      "info" : "IfStatement[63542-63833]:IfStatement[63542-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63568-63630]:Block[63568-63630]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63590-63612]:ExpressionStatement[63590-63612]"
    }, {
      "left" : "if (name.equals(\"noframes\"))",
      "right" : "if (name.equals(\"noframes\"))",
      "info" : "IfStatement[63636-63833]:IfStatement[63636-63833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63665-63738]:Block[63665-63738]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[63687-63720]:ReturnStatement[63687-63720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63744-63833]:Block[63744-63833]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63766-63781]:ExpressionStatement[63766-63781]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63802-63815]:ReturnStatement[63802-63815]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "info" : "IfStatement[63853-64605]:IfStatement[63853-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63913-64329]:Block[63913-64329]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[63931-64315]:IfStatement[63931-64315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63982-64079]:Block[63982-64079]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64012-64027]:ExpressionStatement[64012-64027]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64048-64061]:ReturnStatement[64048-64061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64085-64315]:Block[64085-64315]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64107-64116]:ExpressionStatement[64107-64116]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[64137-64297]:IfStatement[64137-64297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64220-64297]:Block[64220-64297]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64246-64275]:ExpressionStatement[64246-64275]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64335-64605]:IfStatement[64335-64605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64350-64522]:Block[64350-64522]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64368-64508]:IfStatement[64368-64508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64420-64508]:Block[64420-64508]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64442-64457]:ExpressionStatement[64442-64457]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64478-64490]:ReturnStatement[64478-64490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64528-64605]:Block[64528-64605]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64546-64561]:ExpressionStatement[64546-64561]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64578-64591]:ReturnStatement[64578-64591]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64618-64630]:ReturnStatement[64618-64630]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64676-64683]:PrimitiveType[64676-64683]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[64684-64691]:SimpleName[64684-64691]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[64692-64699]:SingleVariableDeclaration[64692-64699]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[64701-64715]:SingleVariableDeclaration[64701-64715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64717-65586]:Block[64717-65586]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[64731-65551]:IfStatement[64731-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64752-64811]:Block[64752-64811]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[64770-64797]:ExpressionStatement[64770-64797]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[64817-65551]:IfStatement[64817-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64836-64893]:Block[64836-64893]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[64854-64879]:ExpressionStatement[64854-64879]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[64899-65551]:IfStatement[64899-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64918-64995]:Block[64918-64995]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64936-64951]:ExpressionStatement[64936-64951]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64968-64981]:ReturnStatement[64968-64981]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[65001-65551]:IfStatement[65001-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65061-65122]:Block[65061-65122]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65079-65108]:ReturnStatement[65079-65108]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[65128-65551]:IfStatement[65128-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65184-65250]:Block[65184-65250]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65202-65236]:ExpressionStatement[65202-65236]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "info" : "IfStatement[65256-65551]:IfStatement[65256-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65320-65381]:Block[65320-65381]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[65338-65367]:ReturnStatement[65338-65367]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65387-65551]:IfStatement[65387-65551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65402-65468]:Block[65402-65468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65474-65551]:Block[65474-65551]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65492-65507]:ExpressionStatement[65492-65507]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65524-65537]:ReturnStatement[65524-65537]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65564-65576]:ReturnStatement[65564-65576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65623-65630]:PrimitiveType[65623-65630]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[65631-65638]:SimpleName[65631-65638]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[65639-65646]:SingleVariableDeclaration[65639-65646]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[65648-65662]:SingleVariableDeclaration[65648-65662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65664-66155]:Block[65664-66155]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65678-66120]:IfStatement[65678-66120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65697-65754]:Block[65697-65754]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65715-65740]:ExpressionStatement[65715-65740]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[65760-66120]:IfStatement[65760-66120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65858-65919]:Block[65858-65919]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65876-65905]:ReturnStatement[65876-65905]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65925-66120]:IfStatement[65925-66120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65940-65990]:Block[65940-65990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65996-66120]:Block[65996-66120]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66014-66029]:ExpressionStatement[66014-66029]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66046-66068]:ExpressionStatement[66046-66068]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66085-66106]:ReturnStatement[66085-66106]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66133-66145]:ReturnStatement[66133-66145]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66196-66203]:PrimitiveType[66196-66203]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66204-66211]:SimpleName[66204-66211]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66212-66219]:SingleVariableDeclaration[66212-66219]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[66221-66235]:SingleVariableDeclaration[66221-66235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66237-66858]:Block[66237-66858]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66251-66823]:IfStatement[66251-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66270-66327]:Block[66270-66327]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66288-66313]:ExpressionStatement[66288-66313]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[66333-66823]:IfStatement[66333-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66431-66492]:Block[66431-66492]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66449-66478]:ReturnStatement[66449-66478]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66498-66823]:IfStatement[66498-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66513-66563]:Block[66513-66563]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"nofrmes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"nofrmes\"))",
      "info" : "IfStatement[66569-66823]:IfStatement[66569-66823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66632-66693]:Block[66632-66693]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[66650-66679]:ReturnStatement[66650-66679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66699-66823]:Block[66699-66823]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66717-66732]:ExpressionStatement[66717-66732]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66749-66771]:ExpressionStatement[66749-66771]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66788-66809]:ReturnStatement[66788-66809]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66836-66848]:ReturnStatement[66836-66848]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[66895-66902]:PrimitiveType[66895-66902]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[66903-66910]:SimpleName[66903-66910]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[66911-66918]:SingleVariableDeclaration[66911-66918]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[66920-66934]:SingleVariableDeclaration[66920-66934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66936-67030]:Block[66936-67030]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66950-66962]:ReturnStatement[66950-66962]"
    }, {
      "left" : "0x0000",
      "right" : "'\\u0000'",
      "info" : "NumberLiteral[67093-67099]:CharacterLiteral[67093-67101]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67107-67115]:Modifier[67109-67117]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67116-67123]:PrimitiveType[67118-67125]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67124-67131]:SimpleName[67126-67133]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67132-67139]:SingleVariableDeclaration[67134-67141]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67141-67155]:SingleVariableDeclaration[67143-67157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67163-67170]:Modifier[67165-67172]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67171-67177]:Modifier[67173-67179]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67178-67185]:PrimitiveType[67180-67187]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67186-67198]:SimpleName[67188-67200]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67199-67206]:SingleVariableDeclaration[67201-67208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67208-67625]:Block[67210-67627]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67218-67597]:IfStatement[67220-67599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67239-67597]:Block[67241-67599]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67253-67293]:VariableDeclarationStatement[67255-67295]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67384-67562]:ForStatement[67386-67564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67424-67562]:Block[67426-67564]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67442-67466]:VariableDeclarationStatement[67444-67468]"
    }, {
      "left" : "if (!Character.isWhitespace(c))",
      "right" : "if (!Character.isWhitespace(c))",
      "info" : "IfStatement[67483-67548]:IfStatement[67485-67550]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67535-67548]:ReturnStatement[67537-67550]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67575-67587]:ReturnStatement[67577-67589]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67606-67619]:ReturnStatement[67608-67621]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67631-67638]:Modifier[67633-67640]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67639-67645]:Modifier[67641-67647]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67646-67650]:PrimitiveType[67648-67652]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[67651-67663]:SimpleName[67653-67665]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[67664-67687]:SingleVariableDeclaration[67666-67689]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67689-67703]:SingleVariableDeclaration[67691-67705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67705-67858]:Block[67707-67860]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67715-67735]:ExpressionStatement[67717-67737]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67744-67791]:ExpressionStatement[67746-67793]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[67800-67823]:ExpressionStatement[67802-67825]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[67832-67852]:ExpressionStatement[67834-67854]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67864-67871]:Modifier[67866-67873]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67872-67878]:Modifier[67874-67880]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67879-67883]:PrimitiveType[67881-67885]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[67884-67897]:SimpleName[67886-67899]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[67898-67921]:SingleVariableDeclaration[67900-67923]"
    }, {
      "left" : "TreeBuilder tb",
      "right" : "TreeBuilder tb",
      "info" : "SingleVariableDeclaration[67923-67937]:SingleVariableDeclaration[67925-67939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67939-68093]:Block[67941-68095]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67949-67969]:ExpressionStatement[67951-67971]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[67978-68026]:ExpressionStatement[67980-68028]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68035-68058]:ExpressionStatement[68037-68060]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68067-68087]:ExpressionStatement[68069-68089]"
    } ]
  },
  "interFileMappings" : { }
}