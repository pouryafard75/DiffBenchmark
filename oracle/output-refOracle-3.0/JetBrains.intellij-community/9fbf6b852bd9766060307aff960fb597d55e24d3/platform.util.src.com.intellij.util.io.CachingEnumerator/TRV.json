{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final int STRIPE_POWER = 4;",
      "right" : "private static final int STRIPE_POWER = 4;",
      "info" : "FieldDeclaration[923-965]:FieldDeclaration[923-965]"
    }, {
      "left" : "private static final int STRIPE_COUNT = 1 << STRIPE_POWER;",
      "right" : "private static final int STRIPE_COUNT = 1 << STRIPE_POWER;",
      "info" : "FieldDeclaration[968-1026]:FieldDeclaration[968-1026]"
    }, {
      "left" : "private static final int STRIPE_MASK = STRIPE_COUNT - 1;",
      "right" : "private static final int STRIPE_MASK = STRIPE_COUNT - 1;",
      "info" : "FieldDeclaration[1029-1085]:FieldDeclaration[1029-1085]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\") private final SLRUMap<Integer, Integer>[] myHashcodeToIdCache = new SLRUMap[STRIPE_COUNT];",
      "right" : "@SuppressWarnings(\"unchecked\") private final SLRUMap<Integer, Integer>[] myHashcodeToIdCache = new SLRUMap[STRIPE_COUNT];",
      "info" : "FieldDeclaration[1088-1209]:FieldDeclaration[1088-1209]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\") private final SLRUMap<Integer, Data>[] myIdToStringCache = new SLRUMap[STRIPE_COUNT];",
      "right" : "@SuppressWarnings(\"unchecked\") private final SLRUMap<Integer, Data>[] myIdToStringCache = new SLRUMap[STRIPE_COUNT];",
      "info" : "FieldDeclaration[1212-1328]:FieldDeclaration[1212-1328]"
    }, {
      "left" : "private final Lock[] myStripeLocks = new Lock[STRIPE_COUNT];",
      "right" : "private final Lock[] myStripeLocks = new Lock[STRIPE_COUNT];",
      "info" : "FieldDeclaration[1331-1391]:FieldDeclaration[1331-1391]"
    }, {
      "left" : "private final DataEnumerator<Data> myBase;",
      "right" : "private final DataEnumerator<Data> myBase;",
      "info" : "FieldDeclaration[1394-1436]:FieldDeclaration[1394-1436]"
    }, {
      "left" : "private final KeyDescriptor<Data> myDataDescriptor;",
      "right" : "private final KeyDescriptor<Data> myDataDescriptor;",
      "info" : "FieldDeclaration[1439-1490]:FieldDeclaration[1439-1490]"
    }, {
      "left" : "public CachingEnumerator(DataEnumerator<Data> base, KeyDescriptor<Data> dataDescriptor)",
      "right" : "public CachingEnumerator(DataEnumerator<Data> base, KeyDescriptor<Data> dataDescriptor)",
      "info" : "MethodDeclaration[1494-2047]:MethodDeclaration[1494-2047]"
    }, {
      "left" : "private static int idStripe(int h)",
      "right" : "private static int idStripe(int h)",
      "info" : "MethodDeclaration[3523-3659]:MethodDeclaration[3492-3628]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1494-1500]:Modifier[1494-1500]"
    }, {
      "left" : "CachingEnumerator",
      "right" : "CachingEnumerator",
      "info" : "SimpleName[1501-1518]:SimpleName[1501-1518]"
    }, {
      "left" : "DataEnumerator<Data> base",
      "right" : "DataEnumerator<Data> base",
      "info" : "SingleVariableDeclaration[1519-1544]:SingleVariableDeclaration[1519-1544]"
    }, {
      "left" : "KeyDescriptor<Data> dataDescriptor",
      "right" : "KeyDescriptor<Data> dataDescriptor",
      "info" : "SingleVariableDeclaration[1546-1580]:SingleVariableDeclaration[1546-1580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1582-2047]:Block[1582-2047]"
    }, {
      "left" : "myBase = base;",
      "right" : "myBase = base;",
      "info" : "ExpressionStatement[1588-1602]:ExpressionStatement[1588-1602]"
    }, {
      "left" : "myDataDescriptor = dataDescriptor;",
      "right" : "myDataDescriptor = dataDescriptor;",
      "info" : "ExpressionStatement[1607-1641]:ExpressionStatement[1607-1641]"
    }, {
      "left" : "int protectedSize = 8192;",
      "right" : "int protectedSize = 8192;",
      "info" : "VariableDeclarationStatement[1646-1671]:VariableDeclarationStatement[1646-1671]"
    }, {
      "left" : "int probationalSize = 8192;",
      "right" : "int probationalSize = 8192;",
      "info" : "VariableDeclarationStatement[1676-1703]:VariableDeclarationStatement[1676-1703]"
    }, {
      "left" : "for(int i = 0; i < STRIPE_COUNT; ++i)",
      "right" : "for(int i = 0; i < STRIPE_COUNT; ++i)",
      "info" : "ForStatement[1709-2042]:ForStatement[1709-2042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1747-2042]:Block[1747-2042]"
    }, {
      "left" : "myHashcodeToIdCache[i] = new SLRUMap<Integer, Integer>(protectedSize / STRIPE_COUNT, probationalSize / STRIPE_COUNT);",
      "right" : "myHashcodeToIdCache[i] = new SLRUMap<Integer, Integer>(protectedSize / STRIPE_COUNT, probationalSize / STRIPE_COUNT);",
      "info" : "ExpressionStatement[1755-1872]:ExpressionStatement[1755-1872]"
    }, {
      "left" : "myIdToStringCache[i] = new SLRUMap<Integer, Data>(protectedSize / STRIPE_COUNT, probationalSize / STRIPE_COUNT);",
      "right" : "myIdToStringCache[i] = new SLRUMap<Integer, Data>(protectedSize / STRIPE_COUNT, probationalSize / STRIPE_COUNT);",
      "info" : "ExpressionStatement[1879-1991]:ExpressionStatement[1879-1991]"
    }, {
      "left" : "myStripeLocks[i] = new SequenceLock();",
      "right" : "myStripeLocks[i] = new SequenceLock();",
      "info" : "ExpressionStatement[1998-2036]:ExpressionStatement[1998-2036]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3523-3530]:Modifier[3492-3499]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3531-3537]:Modifier[3500-3506]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3538-3541]:PrimitiveType[3507-3510]"
    }, {
      "left" : "idStripe",
      "right" : "idStripe",
      "info" : "SimpleName[3542-3550]:SimpleName[3511-3519]"
    }, {
      "left" : "int h",
      "right" : "int h",
      "info" : "SingleVariableDeclaration[3551-3556]:SingleVariableDeclaration[3520-3525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3558-3659]:Block[3527-3628]"
    }, {
      "left" : "h ^= (h >>> 20) ^ (h >>> 12);",
      "right" : "h ^= (h >>> 20) ^ (h >>> 12);",
      "info" : "ExpressionStatement[3564-3593]:ExpressionStatement[3533-3562]"
    }, {
      "left" : "return Math.abs(h ^ (h >>> 7) ^ (h >>> 4)) & STRIPE_MASK;",
      "right" : "return Math.abs(h ^ (h >>> 7) ^ (h >>> 4)) & STRIPE_MASK;",
      "info" : "ReturnStatement[3598-3655]:ReturnStatement[3567-3624]"
    } ]
  },
  "interFileMappings" : { }
}