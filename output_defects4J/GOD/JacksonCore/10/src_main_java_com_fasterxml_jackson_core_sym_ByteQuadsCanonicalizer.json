{
  "matchedElements" : [
 {
    "left" : "class : ByteQuadsCanonicalizer",
    "right" : "class : ByteQuadsCanonicalizer",
    "info" : "TypeDeclaration[219-44117]:TypeDeclaration[219-44214]"
  }, {
    "left" : "DEFAULT_T_SIZE",
    "right" : "DEFAULT_T_SIZE",
    "info" : "FieldDeclaration[600-946]:FieldDeclaration[600-946]"
  }, {
    "left" : "MAX_T_SIZE",
    "right" : "MAX_T_SIZE",
    "info" : "FieldDeclaration[1005-1255]:FieldDeclaration[1005-1255]"
  }, {
    "left" : "MIN_HASH_SIZE",
    "right" : "MIN_HASH_SIZE",
    "info" : "FieldDeclaration[1296-1426]:FieldDeclaration[1296-1426]"
  }, {
    "left" : "MAX_ENTRIES_FOR_REUSE",
    "right" : "MAX_ENTRIES_FOR_REUSE",
    "info" : "FieldDeclaration[1436-1790]:FieldDeclaration[1436-1790]"
  }, {
    "left" : "_parent",
    "right" : "_parent",
    "info" : "FieldDeclaration[1989-2180]:FieldDeclaration[1989-2180]"
  }, {
    "left" : "_tableInfo",
    "right" : "_tableInfo",
    "info" : "FieldDeclaration[2186-2494]:FieldDeclaration[2186-2494]"
  }, {
    "left" : "_seed",
    "right" : "_seed",
    "info" : "FieldDeclaration[2504-2814]:FieldDeclaration[2504-2814]"
  }, {
    "left" : "_intern",
    "right" : "_intern",
    "info" : "FieldDeclaration[2989-3237]:FieldDeclaration[2989-3237]"
  }, {
    "left" : "_failOnDoS",
    "right" : "_failOnDoS",
    "info" : "FieldDeclaration[3243-3470]:FieldDeclaration[3243-3470]"
  }, {
    "left" : "_hashArea",
    "right" : "_hashArea",
    "info" : "FieldDeclaration[3658-3946]:FieldDeclaration[3658-3946]"
  }, {
    "left" : "_hashSize",
    "right" : "_hashSize",
    "info" : "FieldDeclaration[3952-4267]:FieldDeclaration[3952-4267]"
  }, {
    "left" : "_secondaryStart",
    "right" : "_secondaryStart",
    "info" : "FieldDeclaration[4273-4389]:FieldDeclaration[4273-4389]"
  }, {
    "left" : "_tertiaryStart",
    "right" : "_tertiaryStart",
    "info" : "FieldDeclaration[4395-4509]:FieldDeclaration[4395-4509]"
  }, {
    "left" : "_tertiaryShift",
    "right" : "_tertiaryShift",
    "info" : "FieldDeclaration[4519-4949]:FieldDeclaration[4519-4949]"
  }, {
    "left" : "_count",
    "right" : "_count",
    "info" : "FieldDeclaration[4955-5072]:FieldDeclaration[4955-5072]"
  }, {
    "left" : "_names",
    "right" : "_names",
    "info" : "FieldDeclaration[5078-5329]:FieldDeclaration[5078-5329]"
  }, {
    "left" : "_spilloverEnd",
    "right" : "_spilloverEnd",
    "info" : "FieldDeclaration[5521-5759]:FieldDeclaration[5521-5759]"
  }, {
    "left" : "_longNameOffset",
    "right" : "_longNameOffset",
    "info" : "FieldDeclaration[5765-6170]:FieldDeclaration[5765-6170]"
  }, {
    "left" : "_needRehash",
    "right" : "_needRehash",
    "info" : "FieldDeclaration[6176-6368]:FieldDeclaration[6176-6368]"
  }, {
    "left" : "_hashShared",
    "right" : "_hashShared",
    "info" : "FieldDeclaration[6619-7177]:FieldDeclaration[6619-7177]"
  }, {
    "left" : "private ByteQuadsCanonicalizer(sz int, intern boolean, seed int, failOnDoS boolean)",
    "right" : "private ByteQuadsCanonicalizer(sz int, intern boolean, seed int, failOnDoS boolean)",
    "info" : "MethodDeclaration[7359-8604]:MethodDeclaration[7359-8604]"
  }, {
    "left" : "private ByteQuadsCanonicalizer(parent , intern boolean, seed int, failOnDoS boolean, state )",
    "right" : "private ByteQuadsCanonicalizer(parent , intern boolean, seed int, failOnDoS boolean, state )",
    "info" : "MethodDeclaration[8610-9582]:MethodDeclaration[8610-9582]"
  }, {
    "left" : "public createRoot() : ",
    "right" : "public createRoot() : ",
    "info" : "MethodDeclaration[9780-10280]:MethodDeclaration[9780-10280]"
  }, {
    "left" : "protected createRoot(seed int) : ",
    "right" : "protected createRoot(seed int) : ",
    "info" : "MethodDeclaration[10286-10561]:MethodDeclaration[10286-10561]"
  }, {
    "left" : "public makeChild(flags int) : ",
    "right" : "public makeChild(flags int) : ",
    "info" : "MethodDeclaration[10571-11000]:MethodDeclaration[10571-11000]"
  }, {
    "left" : "public release() : void",
    "right" : "public release() : void",
    "info" : "MethodDeclaration[11006-11707]:MethodDeclaration[11006-11707]"
  }, {
    "left" : "private mergeChild(childState ) : void",
    "right" : "private mergeChild(childState ) : void",
    "info" : "MethodDeclaration[11713-12640]:MethodDeclaration[11713-12640]"
  }, {
    "left" : "public size() : int",
    "right" : "public size() : int",
    "info" : "MethodDeclaration[12812-12994]:MethodDeclaration[12812-12994]"
  }, {
    "left" : "public bucketCount() : int",
    "right" : "public bucketCount() : int",
    "info" : "MethodDeclaration[13000-13121]:MethodDeclaration[13000-13121]"
  }, {
    "left" : "public maybeDirty() : boolean",
    "right" : "public maybeDirty() : boolean",
    "info" : "MethodDeclaration[13127-13392]:MethodDeclaration[13127-13392]"
  }, {
    "left" : "public hashSeed() : int",
    "right" : "public hashSeed() : int",
    "info" : "MethodDeclaration[13398-13437]:MethodDeclaration[13398-13437]"
  }, {
    "left" : "public primaryCount() : int",
    "right" : "public primaryCount() : int",
    "info" : "MethodDeclaration[13447-13898]:MethodDeclaration[13447-13898]"
  }, {
    "left" : "public secondaryCount() : int",
    "right" : "public secondaryCount() : int",
    "info" : "MethodDeclaration[13904-14301]:MethodDeclaration[13904-14301]"
  }, {
    "left" : "public tertiaryCount() : int",
    "right" : "public tertiaryCount() : int",
    "info" : "MethodDeclaration[14307-14744]:MethodDeclaration[14307-14744]"
  }, {
    "left" : "public spilloverCount() : int",
    "right" : "public spilloverCount() : int",
    "info" : "MethodDeclaration[14750-15048]:MethodDeclaration[14750-15048]"
  }, {
    "left" : "public totalCount() : int",
    "right" : "public totalCount() : int",
    "info" : "MethodDeclaration[15054-15307]:MethodDeclaration[15054-15307]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[15313-15776]:MethodDeclaration[15313-15776]"
  }, {
    "left" : "public findName(q1 int) : ",
    "right" : "public findName(q1 int) : ",
    "info" : "MethodDeclaration[15963-16919]:MethodDeclaration[15963-16919]"
  }, {
    "left" : "public findName(q1 int, q2 int) : ",
    "right" : "public findName(q1 int, q2 int) : ",
    "info" : "MethodDeclaration[16925-17832]:MethodDeclaration[16925-17832]"
  }, {
    "left" : "public findName(q1 int, q2 int, q3 int) : ",
    "right" : "public findName(q1 int, q2 int, q3 int) : ",
    "info" : "MethodDeclaration[17838-18820]:MethodDeclaration[17838-18820]"
  }, {
    "left" : "public findName(q , qlen int) : ",
    "right" : "public findName(q , qlen int) : ",
    "info" : "MethodDeclaration[18826-20412]:MethodDeclaration[18826-20412]"
  }, {
    "left" : "private _calcOffset(hash int) : int",
    "right" : "private _calcOffset(hash int) : int",
    "info" : "MethodDeclaration[20422-20748]:MethodDeclaration[20422-20748]"
  }, {
    "left" : "private _findSecondary(origOffset int, q1 int) : ",
    "right" : "private _findSecondary(origOffset int, q1 int) : ",
    "info" : "MethodDeclaration[20934-22273]:MethodDeclaration[20934-22273]"
  }, {
    "left" : "private _findSecondary(origOffset int, q1 int, q2 int) : ",
    "right" : "private _findSecondary(origOffset int, q1 int, q2 int) : ",
    "info" : "MethodDeclaration[22279-23159]:MethodDeclaration[22279-23159]"
  }, {
    "left" : "private _findSecondary(origOffset int, q1 int, q2 int, q3 int) : ",
    "right" : "private _findSecondary(origOffset int, q1 int, q2 int, q3 int) : ",
    "info" : "MethodDeclaration[23165-24133]:MethodDeclaration[23165-24133]"
  }, {
    "left" : "private _findSecondary(origOffset int, hash int, q , qlen int) : ",
    "right" : "private _findSecondary(origOffset int, hash int, q , qlen int) : ",
    "info" : "MethodDeclaration[24139-25072]:MethodDeclaration[24139-25072]"
  }, {
    "left" : "private _verifyLongName(q , qlen int, spillOffset int) : boolean",
    "right" : "private _verifyLongName(q , qlen int, spillOffset int) : boolean",
    "info" : "MethodDeclaration[25082-26059]:MethodDeclaration[25082-26059]"
  }, {
    "left" : "private _verifyLongName2(q , qlen int, spillOffset int) : boolean",
    "right" : "private _verifyLongName2(q , qlen int, spillOffset int) : boolean",
    "info" : "MethodDeclaration[26065-26327]:MethodDeclaration[26065-26327]"
  }, {
    "left" : "public addName(name , q1 int) : ",
    "right" : "public addName(name , q1 int) : ",
    "info" : "MethodDeclaration[26498-26887]:MethodDeclaration[26498-26887]"
  }, {
    "left" : "public addName(name , q1 int, q2 int) : ",
    "right" : "public addName(name , q1 int, q2 int) : ",
    "info" : "MethodDeclaration[26893-27380]:MethodDeclaration[26893-27380]"
  }, {
    "left" : "public addName(name , q1 int, q2 int, q3 int) : ",
    "right" : "public addName(name , q1 int, q2 int, q3 int) : ",
    "info" : "MethodDeclaration[27386-27867]:MethodDeclaration[27386-27867]"
  }, {
    "left" : "public addName(name , q , qlen int) : ",
    "right" : "public addName(name , q , qlen int) : ",
    "info" : "MethodDeclaration[27873-29369]:MethodDeclaration[27873-29369]"
  }, {
    "left" : "private _verifyNeedForRehash() : void",
    "right" : "private _verifyNeedForRehash() : void",
    "info" : "MethodDeclaration[29375-29774]:MethodDeclaration[29375-29774]"
  }, {
    "left" : "private _verifySharing() : void",
    "right" : "private _verifySharing() : void",
    "info" : "MethodDeclaration[29780-30077]:MethodDeclaration[29780-30077]"
  }, {
    "left" : "private _findOffsetForAdd(hash int) : int",
    "right" : "private _findOffsetForAdd(hash int) : int",
    "info" : "MethodDeclaration[30087-32378]:MethodDeclaration[30087-32408]"
  }, {
    "left" : "private _appendLongName(quads , qlen int) : int",
    "right" : "private _appendLongName(quads , qlen int) : int",
    "info" : "MethodDeclaration[32384-33163]:MethodDeclaration[32414-33193]"
  }, {
    "left" : "MULT",
    "right" : "MULT",
    "info" : "FieldDeclaration[33854-33889]:FieldDeclaration[33884-33919]"
  }, {
    "left" : "MULT2",
    "right" : "MULT2",
    "info" : "FieldDeclaration[33894-33933]:FieldDeclaration[33924-33963]"
  }, {
    "left" : "MULT3",
    "right" : "MULT3",
    "info" : "FieldDeclaration[33938-33974]:FieldDeclaration[33968-34004]"
  }, {
    "left" : "public calcHash(q1 int) : int",
    "right" : "public calcHash(q1 int) : int",
    "info" : "MethodDeclaration[33984-34509]:MethodDeclaration[34014-34606]"
  }, {
    "left" : "public calcHash(q1 int, q2 int) : int",
    "right" : "public calcHash(q1 int, q2 int) : int",
    "info" : "MethodDeclaration[34515-35067]:MethodDeclaration[34612-35164]"
  }, {
    "left" : "public calcHash(q1 int, q2 int, q3 int) : int",
    "right" : "public calcHash(q1 int, q2 int, q3 int) : int",
    "info" : "MethodDeclaration[35073-35565]:MethodDeclaration[35170-35662]"
  }, {
    "left" : "public calcHash(q , qlen int) : int",
    "right" : "public calcHash(q , qlen int) : int",
    "info" : "MethodDeclaration[35571-36469]:MethodDeclaration[35668-36566]"
  }, {
    "left" : "private rehash() : void",
    "right" : "private rehash() : void",
    "info" : "MethodDeclaration[36636-39806]:MethodDeclaration[36733-39903]"
  }, {
    "left" : "private nukeSymbols(fill boolean) : void",
    "right" : "private nukeSymbols(fill boolean) : void",
    "info" : "MethodDeclaration[39812-40326]:MethodDeclaration[39909-40423]"
  }, {
    "left" : "private _spilloverStart() : int",
    "right" : "private _spilloverStart() : int",
    "info" : "MethodDeclaration[40498-40806]:MethodDeclaration[40595-40903]"
  }, {
    "left" : "protected _reportTooManyCollisions() : void",
    "right" : "protected _reportTooManyCollisions() : void",
    "info" : "MethodDeclaration[40812-41426]:MethodDeclaration[40909-41523]"
  }, {
    "left" : "package _calcTertiaryShift(primarySlots int) : int",
    "right" : "package _calcTertiaryShift(primarySlots int) : int",
    "info" : "MethodDeclaration[41432-42027]:MethodDeclaration[41529-42124]"
  }, {
    "left" : "class : TableInfo",
    "right" : "class : TableInfo",
    "info" : "TypeDeclaration[42199-44115]:TypeDeclaration[42296-44212]"
  }, {
    "left" : "size",
    "right" : "size",
    "info" : "FieldDeclaration[42478-42500]:FieldDeclaration[42575-42597]"
  }, {
    "left" : "count",
    "right" : "count",
    "info" : "FieldDeclaration[42509-42532]:FieldDeclaration[42606-42629]"
  }, {
    "left" : "tertiaryShift",
    "right" : "tertiaryShift",
    "info" : "FieldDeclaration[42541-42572]:FieldDeclaration[42638-42669]"
  }, {
    "left" : "mainHash",
    "right" : "mainHash",
    "info" : "FieldDeclaration[42581-42609]:FieldDeclaration[42678-42706]"
  }, {
    "left" : "names",
    "right" : "names",
    "info" : "FieldDeclaration[42618-42646]:FieldDeclaration[42715-42743]"
  }, {
    "left" : "spilloverEnd",
    "right" : "spilloverEnd",
    "info" : "FieldDeclaration[42655-42685]:FieldDeclaration[42752-42782]"
  }, {
    "left" : "longNameOffset",
    "right" : "longNameOffset",
    "info" : "FieldDeclaration[42694-42726]:FieldDeclaration[42791-42823]"
  }, {
    "left" : "public TableInfo(size int, count int, tertiaryShift int, mainHash , names , spilloverEnd int, longNameOffset int)",
    "right" : "public TableInfo(size int, count int, tertiaryShift int, mainHash , names , spilloverEnd int, longNameOffset int)",
    "info" : "MethodDeclaration[42736-43175]:MethodDeclaration[42833-43272]"
  }, {
    "left" : "public TableInfo(src )",
    "right" : "public TableInfo(src )",
    "info" : "MethodDeclaration[43185-43529]:MethodDeclaration[43282-43626]"
  }, {
    "left" : "public createInitial(sz int) : ",
    "right" : "public createInitial(sz int) : ",
    "info" : "MethodDeclaration[43539-44109]:MethodDeclaration[43636-44206]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[552-558]:Modifier[552-558]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[559-564]:Modifier[559-564]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[565-570]:TYPE_DECLARATION_KIND[565-570]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7794-7801]:Modifier[7794-7801]"
  }, {
    "left" : "ByteQuadsCanonicalizer",
    "right" : "ByteQuadsCanonicalizer",
    "info" : "SimpleName[7802-7824]:SimpleName[7802-7824]"
  }, {
    "left" : "int sz",
    "right" : "int sz",
    "info" : "SingleVariableDeclaration[7825-7831]:SingleVariableDeclaration[7825-7831]"
  }, {
    "left" : "boolean intern",
    "right" : "boolean intern",
    "info" : "SingleVariableDeclaration[7833-7847]:SingleVariableDeclaration[7833-7847]"
  }, {
    "left" : "int seed",
    "right" : "int seed",
    "info" : "SingleVariableDeclaration[7849-7857]:SingleVariableDeclaration[7849-7857]"
  }, {
    "left" : "boolean failOnDoS",
    "right" : "boolean failOnDoS",
    "info" : "SingleVariableDeclaration[7859-7876]:SingleVariableDeclaration[7859-7876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7878-8604]:Block[7878-8604]"
  }, {
    "left" : "_parent = null;",
    "right" : "_parent = null;",
    "info" : "ExpressionStatement[7888-7903]:ExpressionStatement[7888-7903]"
  }, {
    "left" : "_seed = seed;",
    "right" : "_seed = seed;",
    "info" : "ExpressionStatement[7912-7925]:ExpressionStatement[7912-7925]"
  }, {
    "left" : "_intern = intern;",
    "right" : "_intern = intern;",
    "info" : "ExpressionStatement[7934-7951]:ExpressionStatement[7934-7951]"
  }, {
    "left" : "_failOnDoS = failOnDoS;",
    "right" : "_failOnDoS = failOnDoS;",
    "info" : "ExpressionStatement[7960-7983]:ExpressionStatement[7960-7983]"
  }, {
    "left" : "if (sz < MIN_HASH_SIZE)",
    "right" : "if (sz < MIN_HASH_SIZE)",
    "info" : "IfStatement[8072-8516]:IfStatement[8072-8516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8096-8139]:Block[8096-8139]"
  }, {
    "left" : "sz = MIN_HASH_SIZE;",
    "right" : "sz = MIN_HASH_SIZE;",
    "info" : "ExpressionStatement[8110-8129]:ExpressionStatement[8110-8129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8145-8516]:Block[8145-8516]"
  }, {
    "left" : "if ((sz & (sz - 1)) != 0)",
    "right" : "if ((sz & (sz - 1)) != 0)",
    "info" : "IfStatement[8283-8506]:IfStatement[8283-8506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8309-8506]:Block[8309-8506]"
  }, {
    "left" : "int curr = MIN_HASH_SIZE;",
    "right" : "int curr = MIN_HASH_SIZE;",
    "info" : "VariableDeclarationStatement[8352-8377]:VariableDeclarationStatement[8352-8377]"
  }, {
    "left" : "while (curr < sz)",
    "right" : "while (curr < sz)",
    "info" : "WhileStatement[8394-8465]:WhileStatement[8394-8465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8412-8465]:Block[8412-8465]"
  }, {
    "left" : "curr += curr;",
    "right" : "curr += curr;",
    "info" : "ExpressionStatement[8434-8447]:ExpressionStatement[8434-8447]"
  }, {
    "left" : "sz = curr;",
    "right" : "sz = curr;",
    "info" : "ExpressionStatement[8482-8492]:ExpressionStatement[8482-8492]"
  }, {
    "left" : "_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));",
    "right" : "_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));",
    "info" : "ExpressionStatement[8525-8598]:ExpressionStatement[8525-8598]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8681-8688]:Modifier[8681-8688]"
  }, {
    "left" : "ByteQuadsCanonicalizer",
    "right" : "ByteQuadsCanonicalizer",
    "info" : "SimpleName[8689-8711]:SimpleName[8689-8711]"
  }, {
    "left" : "ByteQuadsCanonicalizer parent",
    "right" : "ByteQuadsCanonicalizer parent",
    "info" : "SingleVariableDeclaration[8712-8741]:SingleVariableDeclaration[8712-8741]"
  }, {
    "left" : "boolean intern",
    "right" : "boolean intern",
    "info" : "SingleVariableDeclaration[8743-8757]:SingleVariableDeclaration[8743-8757]"
  }, {
    "left" : "int seed",
    "right" : "int seed",
    "info" : "SingleVariableDeclaration[8771-8779]:SingleVariableDeclaration[8771-8779]"
  }, {
    "left" : "boolean failOnDoS",
    "right" : "boolean failOnDoS",
    "info" : "SingleVariableDeclaration[8781-8798]:SingleVariableDeclaration[8781-8798]"
  }, {
    "left" : "TableInfo state",
    "right" : "TableInfo state",
    "info" : "SingleVariableDeclaration[8800-8815]:SingleVariableDeclaration[8800-8815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8821-9582]:Block[8821-9582]"
  }, {
    "left" : "_parent = parent;",
    "right" : "_parent = parent;",
    "info" : "ExpressionStatement[8831-8848]:ExpressionStatement[8831-8848]"
  }, {
    "left" : "_seed = seed;",
    "right" : "_seed = seed;",
    "info" : "ExpressionStatement[8857-8870]:ExpressionStatement[8857-8870]"
  }, {
    "left" : "_intern = intern;",
    "right" : "_intern = intern;",
    "info" : "ExpressionStatement[8879-8896]:ExpressionStatement[8879-8896]"
  }, {
    "left" : "_failOnDoS = failOnDoS;",
    "right" : "_failOnDoS = failOnDoS;",
    "info" : "ExpressionStatement[8905-8928]:ExpressionStatement[8905-8928]"
  }, {
    "left" : "_tableInfo = null;",
    "right" : "_tableInfo = null;",
    "info" : "ExpressionStatement[8937-8955]:ExpressionStatement[8937-8955]"
  }, {
    "left" : "_count = state.count;",
    "right" : "_count = state.count;",
    "info" : "ExpressionStatement[9027-9048]:ExpressionStatement[9027-9048]"
  }, {
    "left" : "_hashSize = state.size;",
    "right" : "_hashSize = state.size;",
    "info" : "ExpressionStatement[9057-9080]:ExpressionStatement[9057-9080]"
  }, {
    "left" : "_secondaryStart = _hashSize << 2;",
    "right" : "_secondaryStart = _hashSize << 2;",
    "info" : "ExpressionStatement[9089-9122]:ExpressionStatement[9089-9122]"
  }, {
    "left" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
    "right" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
    "info" : "ExpressionStatement[9159-9217]:ExpressionStatement[9159-9217]"
  }, {
    "left" : "_tertiaryShift = state.tertiaryShift;",
    "right" : "_tertiaryShift = state.tertiaryShift;",
    "info" : "ExpressionStatement[9251-9288]:ExpressionStatement[9251-9288]"
  }, {
    "left" : "_hashArea = state.mainHash;",
    "right" : "_hashArea = state.mainHash;",
    "info" : "ExpressionStatement[9306-9333]:ExpressionStatement[9306-9333]"
  }, {
    "left" : "_names = state.names;",
    "right" : "_names = state.names;",
    "info" : "ExpressionStatement[9342-9363]:ExpressionStatement[9342-9363]"
  }, {
    "left" : "_spilloverEnd = state.spilloverEnd;",
    "right" : "_spilloverEnd = state.spilloverEnd;",
    "info" : "ExpressionStatement[9373-9408]:ExpressionStatement[9373-9408]"
  }, {
    "left" : "_longNameOffset = state.longNameOffset;",
    "right" : "_longNameOffset = state.longNameOffset;",
    "info" : "ExpressionStatement[9417-9456]:ExpressionStatement[9417-9456]"
  }, {
    "left" : "_needRehash = false;",
    "right" : "_needRehash = false;",
    "info" : "ExpressionStatement[9528-9548]:ExpressionStatement[9528-9548]"
  }, {
    "left" : "_hashShared = true;",
    "right" : "_hashShared = true;",
    "info" : "ExpressionStatement[9557-9576]:ExpressionStatement[9557-9576]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9897-9903]:Modifier[9897-9903]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9904-9910]:Modifier[9904-9910]"
  }, {
    "left" : "ByteQuadsCanonicalizer",
    "right" : "ByteQuadsCanonicalizer",
    "info" : "SimpleType[9911-9933]:SimpleType[9911-9933]"
  }, {
    "left" : "createRoot",
    "right" : "createRoot",
    "info" : "SimpleName[9934-9944]:SimpleName[9934-9944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9947-10280]:Block[9947-10280]"
  }, {
    "left" : "long now = System.currentTimeMillis();",
    "right" : "long now = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[10072-10110]:VariableDeclarationStatement[10072-10110]"
  }, {
    "left" : "int seed = (((int) now) + ((int) (now >>> 32))) | 1;",
    "right" : "int seed = (((int) now) + ((int) (now >>> 32))) | 1;",
    "info" : "VariableDeclarationStatement[10189-10241]:VariableDeclarationStatement[10189-10241]"
  }, {
    "left" : "return createRoot(seed);",
    "right" : "return createRoot(seed);",
    "info" : "ReturnStatement[10250-10274]:ReturnStatement[10250-10274]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[10416-10425]:Modifier[10416-10425]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10426-10432]:Modifier[10426-10432]"
  }, {
    "left" : "ByteQuadsCanonicalizer",
    "right" : "ByteQuadsCanonicalizer",
    "info" : "SimpleType[10433-10455]:SimpleType[10433-10455]"
  }, {
    "left" : "createRoot",
    "right" : "createRoot",
    "info" : "SimpleName[10456-10466]:SimpleName[10456-10466]"
  }, {
    "left" : "int seed",
    "right" : "int seed",
    "info" : "SingleVariableDeclaration[10467-10475]:SingleVariableDeclaration[10467-10475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10477-10561]:Block[10477-10561]"
  }, {
    "left" : "return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);",
    "right" : "return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);",
    "info" : "ReturnStatement[10487-10555]:ReturnStatement[10487-10555]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10680-10686]:Modifier[10680-10686]"
  }, {
    "left" : "ByteQuadsCanonicalizer",
    "right" : "ByteQuadsCanonicalizer",
    "info" : "SimpleType[10687-10709]:SimpleType[10687-10709]"
  }, {
    "left" : "makeChild",
    "right" : "makeChild",
    "info" : "SimpleName[10710-10719]:SimpleName[10710-10719]"
  }, {
    "left" : "int flags",
    "right" : "int flags",
    "info" : "SingleVariableDeclaration[10720-10729]:SingleVariableDeclaration[10720-10729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10731-11000]:Block[10731-11000]"
  }, {
    "left" : "return new ByteQuadsCanonicalizer(this,\n                JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                _seed,\n                JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),\n                _tableInfo.get());",
    "right" : "return new ByteQuadsCanonicalizer(this,\n                JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                _seed,\n                JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),\n                _tableInfo.get());",
    "info" : "ReturnStatement[10741-10994]:ReturnStatement[10741-10994]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11292-11298]:Modifier[11292-11298]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11299-11303]:PrimitiveType[11299-11303]"
  }, {
    "left" : "release",
    "right" : "release",
    "info" : "SimpleName[11304-11311]:SimpleName[11304-11311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11318-11707]:Block[11318-11707]"
  }, {
    "left" : "if (_parent != null && maybeDirty())",
    "right" : "if (_parent != null && maybeDirty())",
    "info" : "IfStatement[11391-11701]:IfStatement[11391-11701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11428-11701]:Block[11428-11701]"
  }, {
    "left" : "_parent.mergeChild(new TableInfo(this));",
    "right" : "_parent.mergeChild(new TableInfo(this));",
    "info" : "ExpressionStatement[11442-11482]:ExpressionStatement[11442-11482]"
  }, {
    "left" : "_hashShared = true;",
    "right" : "_hashShared = true;",
    "info" : "ExpressionStatement[11672-11691]:ExpressionStatement[11672-11691]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11713-11720]:Modifier[11713-11720]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11721-11725]:PrimitiveType[11721-11725]"
  }, {
    "left" : "mergeChild",
    "right" : "mergeChild",
    "info" : "SimpleName[11726-11736]:SimpleName[11726-11736]"
  }, {
    "left" : "TableInfo childState",
    "right" : "TableInfo childState",
    "info" : "SingleVariableDeclaration[11737-11757]:SingleVariableDeclaration[11737-11757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11763-12640]:Block[11763-12640]"
  }, {
    "left" : "final int childCount = childState.count;",
    "right" : "final int childCount = childState.count;",
    "info" : "VariableDeclarationStatement[11773-11813]:VariableDeclarationStatement[11773-11813]"
  }, {
    "left" : "TableInfo currState = _tableInfo.get();",
    "right" : "TableInfo currState = _tableInfo.get();",
    "info" : "VariableDeclarationStatement[11822-11861]:VariableDeclarationStatement[11822-11861]"
  }, {
    "left" : "if (childCount == currState.count)",
    "right" : "if (childCount == currState.count)",
    "info" : "IfStatement[12029-12095]:IfStatement[12029-12095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12064-12095]:Block[12064-12095]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[12078-12085]:ReturnStatement[12078-12085]"
  }, {
    "left" : "if (childCount > MAX_ENTRIES_FOR_REUSE)",
    "right" : "if (childCount > MAX_ENTRIES_FOR_REUSE)",
    "info" : "IfStatement[12404-12577]:IfStatement[12404-12577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12444-12577]:Block[12444-12577]"
  }, {
    "left" : "childState = TableInfo.createInitial(DEFAULT_T_SIZE);",
    "right" : "childState = TableInfo.createInitial(DEFAULT_T_SIZE);",
    "info" : "ExpressionStatement[12514-12567]:ExpressionStatement[12514-12567]"
  }, {
    "left" : "_tableInfo.compareAndSet(currState, childState);",
    "right" : "_tableInfo.compareAndSet(currState, childState);",
    "info" : "ExpressionStatement[12586-12634]:ExpressionStatement[12586-12634]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12812-12818]:Modifier[12812-12818]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[12819-12822]:PrimitiveType[12819-12822]"
  }, {
    "left" : "size",
    "right" : "size",
    "info" : "SimpleName[12823-12827]:SimpleName[12823-12827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12834-12994]:Block[12834-12994]"
  }, {
    "left" : "if (_tableInfo != null)",
    "right" : "if (_tableInfo != null)",
    "info" : "IfStatement[12844-12936]:IfStatement[12844-12936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12868-12936]:Block[12868-12936]"
  }, {
    "left" : "return _tableInfo.get().count;",
    "right" : "return _tableInfo.get().count;",
    "info" : "ReturnStatement[12896-12926]:ReturnStatement[12896-12926]"
  }, {
    "left" : "return _count;",
    "right" : "return _count;",
    "info" : "ReturnStatement[12974-12988]:ReturnStatement[12974-12988]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13075-13081]:Modifier[13075-13081]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13082-13085]:PrimitiveType[13082-13085]"
  }, {
    "left" : "bucketCount",
    "right" : "bucketCount",
    "info" : "SimpleName[13086-13097]:SimpleName[13086-13097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13100-13121]:Block[13100-13121]"
  }, {
    "left" : "return _hashSize;",
    "right" : "return _hashSize;",
    "info" : "ReturnStatement[13102-13119]:ReturnStatement[13102-13119]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13340-13346]:Modifier[13340-13346]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13347-13354]:PrimitiveType[13347-13354]"
  }, {
    "left" : "maybeDirty",
    "right" : "maybeDirty",
    "info" : "SimpleName[13355-13365]:SimpleName[13355-13365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13368-13392]:Block[13368-13392]"
  }, {
    "left" : "return !_hashShared;",
    "right" : "return !_hashShared;",
    "info" : "ReturnStatement[13370-13390]:ReturnStatement[13370-13390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13398-13404]:Modifier[13398-13404]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13405-13408]:PrimitiveType[13405-13408]"
  }, {
    "left" : "hashSeed",
    "right" : "hashSeed",
    "info" : "SimpleName[13409-13417]:SimpleName[13409-13417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13420-13437]:Block[13420-13437]"
  }, {
    "left" : "return _seed;",
    "right" : "return _seed;",
    "info" : "ReturnStatement[13422-13435]:ReturnStatement[13422-13435]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13644-13650]:Modifier[13644-13650]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13651-13654]:PrimitiveType[13651-13654]"
  }, {
    "left" : "primaryCount",
    "right" : "primaryCount",
    "info" : "SimpleName[13655-13667]:SimpleName[13655-13667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13674-13898]:Block[13674-13898]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[13684-13698]:VariableDeclarationStatement[13684-13698]"
  }, {
    "left" : "for (int offset = 3, end = _secondaryStart; offset < end; offset += 4)",
    "right" : "for (int offset = 3, end = _secondaryStart; offset < end; offset += 4)",
    "info" : "ForStatement[13707-13870]:ForStatement[13707-13870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13778-13870]:Block[13778-13870]"
  }, {
    "left" : "if (_hashArea[offset] != 0)",
    "right" : "if (_hashArea[offset] != 0)",
    "info" : "IfStatement[13792-13860]:IfStatement[13792-13860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13820-13860]:Block[13820-13860]"
  }, {
    "left" : "++count;",
    "right" : "++count;",
    "info" : "ExpressionStatement[13838-13846]:ExpressionStatement[13838-13846]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[13879-13892]:ReturnStatement[13879-13892]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14020-14026]:Modifier[14020-14026]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14027-14030]:PrimitiveType[14027-14030]"
  }, {
    "left" : "secondaryCount",
    "right" : "secondaryCount",
    "info" : "SimpleName[14031-14045]:SimpleName[14031-14045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14048-14301]:Block[14048-14301]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[14058-14072]:VariableDeclarationStatement[14058-14072]"
  }, {
    "left" : "int offset = _secondaryStart + 3;",
    "right" : "int offset = _secondaryStart + 3;",
    "info" : "VariableDeclarationStatement[14081-14114]:VariableDeclarationStatement[14081-14114]"
  }, {
    "left" : "for (int end = _tertiaryStart; offset < end; offset += 4)",
    "right" : "for (int end = _tertiaryStart; offset < end; offset += 4)",
    "info" : "ForStatement[14123-14273]:ForStatement[14123-14273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14181-14273]:Block[14181-14273]"
  }, {
    "left" : "if (_hashArea[offset] != 0)",
    "right" : "if (_hashArea[offset] != 0)",
    "info" : "IfStatement[14195-14263]:IfStatement[14195-14263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14223-14263]:Block[14223-14263]"
  }, {
    "left" : "++count;",
    "right" : "++count;",
    "info" : "ExpressionStatement[14241-14249]:ExpressionStatement[14241-14249]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[14282-14295]:ReturnStatement[14282-14295]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14422-14428]:Modifier[14422-14428]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14429-14432]:PrimitiveType[14429-14432]"
  }, {
    "left" : "tertiaryCount",
    "right" : "tertiaryCount",
    "info" : "SimpleName[14433-14446]:SimpleName[14433-14446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14449-14744]:Block[14449-14744]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[14459-14473]:VariableDeclarationStatement[14459-14473]"
  }, {
    "left" : "int offset = _tertiaryStart + 3;",
    "right" : "int offset = _tertiaryStart + 3;",
    "info" : "VariableDeclarationStatement[14482-14514]:VariableDeclarationStatement[14482-14514]"
  }, {
    "left" : "for (int end = offset + _hashSize; offset < end; offset += 4)",
    "right" : "for (int end = offset + _hashSize; offset < end; offset += 4)",
    "info" : "ForStatement[14562-14716]:ForStatement[14562-14716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14624-14716]:Block[14624-14716]"
  }, {
    "left" : "if (_hashArea[offset] != 0)",
    "right" : "if (_hashArea[offset] != 0)",
    "info" : "IfStatement[14638-14706]:IfStatement[14638-14706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14666-14706]:Block[14666-14706]"
  }, {
    "left" : "++count;",
    "right" : "++count;",
    "info" : "ExpressionStatement[14684-14692]:ExpressionStatement[14684-14692]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[14725-14738]:ReturnStatement[14725-14738]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14870-14876]:Modifier[14870-14876]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14877-14880]:PrimitiveType[14877-14880]"
  }, {
    "left" : "spilloverCount",
    "right" : "spilloverCount",
    "info" : "SimpleName[14881-14895]:SimpleName[14881-14895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14898-15048]:Block[14898-15048]"
  }, {
    "left" : "return (_spilloverEnd - _spilloverStart()) >> 2;",
    "right" : "return (_spilloverEnd - _spilloverStart()) >> 2;",
    "info" : "ReturnStatement[14994-15042]:ReturnStatement[14994-15042]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15054-15060]:Modifier[15054-15060]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[15061-15064]:PrimitiveType[15061-15064]"
  }, {
    "left" : "totalCount",
    "right" : "totalCount",
    "info" : "SimpleName[15065-15075]:SimpleName[15065-15075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15082-15307]:Block[15082-15307]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[15092-15106]:VariableDeclarationStatement[15092-15106]"
  }, {
    "left" : "for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4)",
    "right" : "for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4)",
    "info" : "ForStatement[15115-15279]:ForStatement[15115-15279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15187-15279]:Block[15187-15279]"
  }, {
    "left" : "if (_hashArea[offset] != 0)",
    "right" : "if (_hashArea[offset] != 0)",
    "info" : "IfStatement[15201-15269]:IfStatement[15201-15269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15229-15269]:Block[15229-15269]"
  }, {
    "left" : "++count;",
    "right" : "++count;",
    "info" : "ExpressionStatement[15247-15255]:ExpressionStatement[15247-15255]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[15288-15301]:ReturnStatement[15288-15301]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15313-15322]:MarkerAnnotation[15313-15322]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15327-15333]:Modifier[15327-15333]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[15334-15340]:SimpleType[15334-15340]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[15341-15349]:SimpleName[15341-15349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15352-15776]:Block[15352-15776]"
  }, {
    "left" : "int pri = primaryCount();",
    "right" : "int pri = primaryCount();",
    "info" : "VariableDeclarationStatement[15362-15387]:VariableDeclarationStatement[15362-15387]"
  }, {
    "left" : "int sec = secondaryCount();",
    "right" : "int sec = secondaryCount();",
    "info" : "VariableDeclarationStatement[15396-15423]:VariableDeclarationStatement[15396-15423]"
  }, {
    "left" : "int tert = tertiaryCount();",
    "right" : "int tert = tertiaryCount();",
    "info" : "VariableDeclarationStatement[15432-15459]:VariableDeclarationStatement[15432-15459]"
  }, {
    "left" : "int spill = spilloverCount();",
    "right" : "int spill = spilloverCount();",
    "info" : "VariableDeclarationStatement[15468-15497]:VariableDeclarationStatement[15468-15497]"
  }, {
    "left" : "int total = totalCount();",
    "right" : "int total = totalCount();",
    "info" : "VariableDeclarationStatement[15506-15531]:VariableDeclarationStatement[15506-15531]"
  }, {
    "left" : "return String.format(\"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]\",\n                getClass().getName(), _count, _hashSize,\n                pri, sec, tert, spill, total, (pri+sec+tert+spill), total);",
    "right" : "return String.format(\"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]\",\n                getClass().getName(), _count, _hashSize,\n                pri, sec, tert, spill, total, (pri+sec+tert+spill), total);",
    "info" : "ReturnStatement[15540-15770]:ReturnStatement[15540-15770]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15963-15969]:Modifier[15963-15969]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[15970-15976]:SimpleType[15970-15976]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[15977-15985]:SimpleName[15977-15985]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[15986-15992]:SingleVariableDeclaration[15986-15992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15998-16919]:Block[15998-16919]"
  }, {
    "left" : "int offset = _calcOffset(calcHash(q1));",
    "right" : "int offset = _calcOffset(calcHash(q1));",
    "info" : "VariableDeclarationStatement[16008-16047]:VariableDeclarationStatement[16008-16047]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[16089-16122]:VariableDeclarationStatement[16089-16122]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[16132-16161]:VariableDeclarationStatement[16132-16161]"
  }, {
    "left" : "if (len == 1)",
    "right" : "if (len == 1)",
    "info" : "IfStatement[16171-16408]:IfStatement[16171-16408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16185-16296]:Block[16185-16296]"
  }, {
    "left" : "if (hashArea[offset] == q1)",
    "right" : "if (hashArea[offset] == q1)",
    "info" : "IfStatement[16199-16286]:IfStatement[16199-16286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16227-16286]:Block[16227-16286]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[16245-16272]:ReturnStatement[16245-16272]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[16302-16408]:IfStatement[16302-16408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16316-16408]:Block[16316-16408]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[16386-16398]:ReturnStatement[16386-16398]"
  }, {
    "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "info" : "VariableDeclarationStatement[16475-16528]:VariableDeclarationStatement[16475-16528]"
  }, {
    "left" : "len = hashArea[offset2+3];",
    "right" : "len = hashArea[offset2+3];",
    "info" : "ExpressionStatement[16538-16564]:ExpressionStatement[16538-16564]"
  }, {
    "left" : "if (len == 1)",
    "right" : "if (len == 1)",
    "info" : "IfStatement[16574-16813]:IfStatement[16574-16813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16588-16701]:Block[16588-16701]"
  }, {
    "left" : "if (hashArea[offset2] == q1)",
    "right" : "if (hashArea[offset2] == q1)",
    "info" : "IfStatement[16602-16691]:IfStatement[16602-16691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16631-16691]:Block[16631-16691]"
  }, {
    "left" : "return _names[offset2 >> 2];",
    "right" : "return _names[offset2 >> 2];",
    "info" : "ReturnStatement[16649-16677]:ReturnStatement[16649-16677]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[16707-16813]:IfStatement[16707-16813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16721-16813]:Block[16721-16813]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[16791-16803]:ReturnStatement[16791-16803]"
  }, {
    "left" : "return _findSecondary(offset, q1);",
    "right" : "return _findSecondary(offset, q1);",
    "info" : "ReturnStatement[16879-16913]:ReturnStatement[16879-16913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16925-16931]:Modifier[16925-16931]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[16932-16938]:SimpleType[16932-16938]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[16939-16947]:SimpleName[16939-16947]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[16948-16954]:SingleVariableDeclaration[16948-16954]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[16956-16962]:SingleVariableDeclaration[16956-16962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16968-17832]:Block[16968-17832]"
  }, {
    "left" : "int offset = _calcOffset(calcHash(q1, q2));",
    "right" : "int offset = _calcOffset(calcHash(q1, q2));",
    "info" : "VariableDeclarationStatement[16978-17021]:VariableDeclarationStatement[16978-17021]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[17031-17064]:VariableDeclarationStatement[17031-17064]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[17074-17103]:VariableDeclarationStatement[17074-17103]"
  }, {
    "left" : "if (len == 2)",
    "right" : "if (len == 2)",
    "info" : "IfStatement[17113-17382]:IfStatement[17113-17382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17127-17270]:Block[17127-17270]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]))",
    "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]))",
    "info" : "IfStatement[17141-17260]:IfStatement[17141-17260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17201-17260]:Block[17201-17260]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[17219-17246]:ReturnStatement[17219-17246]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[17276-17382]:IfStatement[17276-17382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17290-17382]:Block[17290-17382]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[17360-17372]:ReturnStatement[17360-17372]"
  }, {
    "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "info" : "VariableDeclarationStatement[17413-17466]:VariableDeclarationStatement[17413-17466]"
  }, {
    "left" : "len = hashArea[offset2+3];",
    "right" : "len = hashArea[offset2+3];",
    "info" : "ExpressionStatement[17476-17502]:ExpressionStatement[17476-17502]"
  }, {
    "left" : "if (len == 2)",
    "right" : "if (len == 2)",
    "info" : "IfStatement[17512-17779]:IfStatement[17512-17779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17526-17672]:Block[17526-17672]"
  }, {
    "left" : "if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2+1]))",
    "right" : "if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2+1]))",
    "info" : "IfStatement[17540-17662]:IfStatement[17540-17662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17602-17662]:Block[17602-17662]"
  }, {
    "left" : "return _names[offset2 >> 2];",
    "right" : "return _names[offset2 >> 2];",
    "info" : "ReturnStatement[17620-17648]:ReturnStatement[17620-17648]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[17678-17779]:IfStatement[17678-17779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17692-17779]:Block[17692-17779]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[17757-17769]:ReturnStatement[17757-17769]"
  }, {
    "left" : "return _findSecondary(offset, q1, q2);",
    "right" : "return _findSecondary(offset, q1, q2);",
    "info" : "ReturnStatement[17788-17826]:ReturnStatement[17788-17826]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17838-17844]:Modifier[17838-17844]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[17845-17851]:SimpleType[17845-17851]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[17852-17860]:SimpleName[17852-17860]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[17861-17867]:SingleVariableDeclaration[17861-17867]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[17869-17875]:SingleVariableDeclaration[17869-17875]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[17877-17883]:SingleVariableDeclaration[17877-17883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17889-18820]:Block[17889-18820]"
  }, {
    "left" : "int offset = _calcOffset(calcHash(q1, q2, q3));",
    "right" : "int offset = _calcOffset(calcHash(q1, q2, q3));",
    "info" : "VariableDeclarationStatement[17899-17946]:VariableDeclarationStatement[17899-17946]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[17955-17988]:VariableDeclarationStatement[17955-17988]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[17997-18026]:VariableDeclarationStatement[17997-18026]"
  }, {
    "left" : "if (len == 3)",
    "right" : "if (len == 3)",
    "info" : "IfStatement[18036-18335]:IfStatement[18036-18335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18050-18223]:Block[18050-18223]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (hashArea[offset+1] == q2) && (hashArea[offset+2] == q3))",
    "right" : "if ((q1 == hashArea[offset]) && (hashArea[offset+1] == q2) && (hashArea[offset+2] == q3))",
    "info" : "IfStatement[18064-18213]:IfStatement[18064-18213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18154-18213]:Block[18154-18213]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[18172-18199]:ReturnStatement[18172-18199]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[18229-18335]:IfStatement[18229-18335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18243-18335]:Block[18243-18335]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[18313-18325]:ReturnStatement[18313-18325]"
  }, {
    "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "info" : "VariableDeclarationStatement[18366-18419]:VariableDeclarationStatement[18366-18419]"
  }, {
    "left" : "len = hashArea[offset2+3];",
    "right" : "len = hashArea[offset2+3];",
    "info" : "ExpressionStatement[18429-18455]:ExpressionStatement[18429-18455]"
  }, {
    "left" : "if (len == 3)",
    "right" : "if (len == 3)",
    "info" : "IfStatement[18465-18763]:IfStatement[18465-18763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18479-18656]:Block[18479-18656]"
  }, {
    "left" : "if ((q1 == hashArea[offset2]) && (hashArea[offset2+1] == q2) && (hashArea[offset2+2] == q3))",
    "right" : "if ((q1 == hashArea[offset2]) && (hashArea[offset2+1] == q2) && (hashArea[offset2+2] == q3))",
    "info" : "IfStatement[18493-18646]:IfStatement[18493-18646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18586-18646]:Block[18586-18646]"
  }, {
    "left" : "return _names[offset2 >> 2];",
    "right" : "return _names[offset2 >> 2];",
    "info" : "ReturnStatement[18604-18632]:ReturnStatement[18604-18632]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[18662-18763]:IfStatement[18662-18763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18676-18763]:Block[18676-18763]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[18741-18753]:ReturnStatement[18741-18753]"
  }, {
    "left" : "return _findSecondary(offset, q1, q2, q3);",
    "right" : "return _findSecondary(offset, q1, q2, q3);",
    "info" : "ReturnStatement[18772-18814]:ReturnStatement[18772-18814]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18826-18832]:Modifier[18826-18832]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[18833-18839]:SimpleType[18833-18839]"
  }, {
    "left" : "findName",
    "right" : "findName",
    "info" : "SimpleName[18840-18848]:SimpleName[18840-18848]"
  }, {
    "left" : "int[] q",
    "right" : "int[] q",
    "info" : "SingleVariableDeclaration[18849-18856]:SingleVariableDeclaration[18849-18856]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[18858-18866]:SingleVariableDeclaration[18858-18866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18872-20412]:Block[18872-20412]"
  }, {
    "left" : "if (qlen < 4)",
    "right" : "if (qlen < 4)",
    "info" : "IfStatement[19112-19378]:IfStatement[19112-19378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19126-19378]:Block[19126-19378]"
  }, {
    "left" : "if (qlen == 3)",
    "right" : "if (qlen == 3)",
    "info" : "IfStatement[19164-19245]:IfStatement[19164-19245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19179-19245]:Block[19179-19245]"
  }, {
    "left" : "return findName(q[0], q[1], q[2]);",
    "right" : "return findName(q[0], q[1], q[2]);",
    "info" : "ReturnStatement[19197-19231]:ReturnStatement[19197-19231]"
  }, {
    "left" : "if (qlen == 2)",
    "right" : "if (qlen == 2)",
    "info" : "IfStatement[19258-19333]:IfStatement[19258-19333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19273-19333]:Block[19273-19333]"
  }, {
    "left" : "return findName(q[0], q[1]);",
    "right" : "return findName(q[0], q[1]);",
    "info" : "ReturnStatement[19291-19319]:ReturnStatement[19291-19319]"
  }, {
    "left" : "return findName(q[0]);",
    "right" : "return findName(q[0]);",
    "info" : "ReturnStatement[19346-19368]:ReturnStatement[19346-19368]"
  }, {
    "left" : "final int hash = calcHash(q, qlen);",
    "right" : "final int hash = calcHash(q, qlen);",
    "info" : "VariableDeclarationStatement[19387-19422]:VariableDeclarationStatement[19387-19422]"
  }, {
    "left" : "int offset = _calcOffset(hash);",
    "right" : "int offset = _calcOffset(hash);",
    "info" : "VariableDeclarationStatement[19431-19462]:VariableDeclarationStatement[19431-19462]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[19472-19505]:VariableDeclarationStatement[19472-19505]"
  }, {
    "left" : "final int len = hashArea[offset+3];",
    "right" : "final int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[19515-19550]:VariableDeclarationStatement[19515-19550]"
  }, {
    "left" : "if ((hash == hashArea[offset]) && (len == qlen))",
    "right" : "if ((hash == hashArea[offset]) && (len == qlen))",
    "info" : "IfStatement[19568-19801]:IfStatement[19568-19801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19617-19801]:Block[19617-19801]"
  }, {
    "left" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
    "right" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
    "info" : "IfStatement[19682-19791]:IfStatement[19682-19791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19732-19791]:Block[19732-19791]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[19750-19777]:ReturnStatement[19750-19777]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[19810-19916]:IfStatement[19810-19916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19824-19916]:Block[19824-19916]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[19894-19906]:ReturnStatement[19894-19906]"
  }, {
    "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "info" : "VariableDeclarationStatement[19947-20000]:VariableDeclarationStatement[19947-20000]"
  }, {
    "left" : "final int len2 = hashArea[offset2+3];",
    "right" : "final int len2 = hashArea[offset2+3];",
    "info" : "VariableDeclarationStatement[20010-20047]:VariableDeclarationStatement[20010-20047]"
  }, {
    "left" : "if ((hash == hashArea[offset2]) && (len2 == qlen))",
    "right" : "if ((hash == hashArea[offset2]) && (len2 == qlen))",
    "info" : "IfStatement[20056-20242]:IfStatement[20056-20242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20107-20242]:Block[20107-20242]"
  }, {
    "left" : "if (_verifyLongName(q, qlen, hashArea[offset2+1]))",
    "right" : "if (_verifyLongName(q, qlen, hashArea[offset2+1]))",
    "info" : "IfStatement[20121-20232]:IfStatement[20121-20232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20172-20232]:Block[20172-20232]"
  }, {
    "left" : "return _names[offset2 >> 2];",
    "right" : "return _names[offset2 >> 2];",
    "info" : "ReturnStatement[20190-20218]:ReturnStatement[20190-20218]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[20251-20352]:IfStatement[20251-20352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20265-20352]:Block[20265-20352]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[20330-20342]:ReturnStatement[20330-20342]"
  }, {
    "left" : "return _findSecondary(offset, hash, q, qlen);",
    "right" : "return _findSecondary(offset, hash, q, qlen);",
    "info" : "ReturnStatement[20361-20406]:ReturnStatement[20361-20406]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20422-20429]:Modifier[20422-20429]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[20430-20435]:Modifier[20430-20435]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20436-20439]:PrimitiveType[20436-20439]"
  }, {
    "left" : "_calcOffset",
    "right" : "_calcOffset",
    "info" : "SimpleName[20440-20451]:SimpleName[20440-20451]"
  }, {
    "left" : "int hash",
    "right" : "int hash",
    "info" : "SingleVariableDeclaration[20452-20460]:SingleVariableDeclaration[20452-20460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20466-20748]:Block[20466-20748]"
  }, {
    "left" : "int ix = hash & (_hashSize-1);",
    "right" : "int ix = hash & (_hashSize-1);",
    "info" : "VariableDeclarationStatement[20634-20664]:VariableDeclarationStatement[20634-20664]"
  }, {
    "left" : "return (ix << 2);",
    "right" : "return (ix << 2);",
    "info" : "ReturnStatement[20725-20742]:ReturnStatement[20725-20742]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20934-20941]:Modifier[20934-20941]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[20942-20948]:SimpleType[20942-20948]"
  }, {
    "left" : "_findSecondary",
    "right" : "_findSecondary",
    "info" : "SimpleName[20949-20963]:SimpleName[20949-20963]"
  }, {
    "left" : "int origOffset",
    "right" : "int origOffset",
    "info" : "SingleVariableDeclaration[20964-20978]:SingleVariableDeclaration[20964-20978]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[20980-20986]:SingleVariableDeclaration[20980-20986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20992-22273]:Block[20992-22273]"
  }, {
    "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[21342-21429]:VariableDeclarationStatement[21342-21429]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[21438-21471]:VariableDeclarationStatement[21438-21471]"
  }, {
    "left" : "final int bucketSize = (1 << _tertiaryShift);",
    "right" : "final int bucketSize = (1 << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[21480-21525]:VariableDeclarationStatement[21480-21525]"
  }, {
    "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "info" : "ForStatement[21534-21837]:ForStatement[21534-21837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21597-21837]:Block[21597-21837]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[21611-21640]:VariableDeclarationStatement[21611-21640]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (1 == len))",
    "right" : "if ((q1 == hashArea[offset]) && (1 == len))",
    "info" : "IfStatement[21653-21756]:IfStatement[21653-21756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21697-21756]:Block[21697-21756]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[21715-21742]:ReturnStatement[21715-21742]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[21769-21827]:IfStatement[21769-21827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21783-21827]:Block[21783-21827]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[21801-21813]:ReturnStatement[21801-21813]"
  }, {
    "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "info" : "ForStatement[22034-22246]:ForStatement[22034-22246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22104-22246]:Block[22104-22246]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3]))",
    "right" : "if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3]))",
    "info" : "IfStatement[22118-22236]:IfStatement[22118-22236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22177-22236]:Block[22177-22236]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[22195-22222]:ReturnStatement[22195-22222]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[22255-22267]:ReturnStatement[22255-22267]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22279-22286]:Modifier[22279-22286]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[22287-22293]:SimpleType[22287-22293]"
  }, {
    "left" : "_findSecondary",
    "right" : "_findSecondary",
    "info" : "SimpleName[22294-22308]:SimpleName[22294-22308]"
  }, {
    "left" : "int origOffset",
    "right" : "int origOffset",
    "info" : "SingleVariableDeclaration[22309-22323]:SingleVariableDeclaration[22309-22323]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[22325-22331]:SingleVariableDeclaration[22325-22331]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[22333-22339]:SingleVariableDeclaration[22333-22339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22345-23159]:Block[22345-23159]"
  }, {
    "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[22355-22442]:VariableDeclarationStatement[22355-22442]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[22451-22484]:VariableDeclarationStatement[22451-22484]"
  }, {
    "left" : "final int bucketSize = (1 << _tertiaryShift);",
    "right" : "final int bucketSize = (1 << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[22494-22539]:VariableDeclarationStatement[22494-22539]"
  }, {
    "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "info" : "ForStatement[22548-22881]:ForStatement[22548-22881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22611-22881]:Block[22611-22881]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[22625-22654]:VariableDeclarationStatement[22625-22654]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == len))",
    "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == len))",
    "info" : "IfStatement[22667-22800]:IfStatement[22667-22800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22741-22800]:Block[22741-22800]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[22759-22786]:ReturnStatement[22759-22786]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[22813-22871]:IfStatement[22813-22871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22827-22871]:Block[22827-22871]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[22845-22857]:ReturnStatement[22845-22857]"
  }, {
    "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "info" : "ForStatement[22890-23132]:ForStatement[22890-23132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22960-23132]:Block[22960-23132]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == hashArea[offset+3]))",
    "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == hashArea[offset+3]))",
    "info" : "IfStatement[22974-23122]:IfStatement[22974-23122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23063-23122]:Block[23063-23122]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[23081-23108]:ReturnStatement[23081-23108]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[23141-23153]:ReturnStatement[23141-23153]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23165-23172]:Modifier[23165-23172]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[23173-23179]:SimpleType[23173-23179]"
  }, {
    "left" : "_findSecondary",
    "right" : "_findSecondary",
    "info" : "SimpleName[23180-23194]:SimpleName[23180-23194]"
  }, {
    "left" : "int origOffset",
    "right" : "int origOffset",
    "info" : "SingleVariableDeclaration[23195-23209]:SingleVariableDeclaration[23195-23209]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[23211-23217]:SingleVariableDeclaration[23211-23217]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[23219-23225]:SingleVariableDeclaration[23219-23225]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[23227-23233]:SingleVariableDeclaration[23227-23233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23239-24133]:Block[23239-24133]"
  }, {
    "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[23249-23336]:VariableDeclarationStatement[23249-23336]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[23345-23378]:VariableDeclarationStatement[23345-23378]"
  }, {
    "left" : "final int bucketSize = (1 << _tertiaryShift);",
    "right" : "final int bucketSize = (1 << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[23388-23433]:VariableDeclarationStatement[23388-23433]"
  }, {
    "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "info" : "ForStatement[23442-23805]:ForStatement[23442-23805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23505-23805]:Block[23505-23805]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[23519-23548]:VariableDeclarationStatement[23519-23548]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2]) && (3 == len))",
    "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2]) && (3 == len))",
    "info" : "IfStatement[23561-23724]:IfStatement[23561-23724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23665-23724]:Block[23665-23724]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[23683-23710]:ReturnStatement[23683-23710]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[23737-23795]:IfStatement[23737-23795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23751-23795]:Block[23751-23795]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[23769-23781]:ReturnStatement[23769-23781]"
  }, {
    "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "info" : "ForStatement[23814-24106]:ForStatement[23814-24106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23884-24106]:Block[23884-24106]"
  }, {
    "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2])\n                    && (3 == hashArea[offset+3]))",
    "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2])\n                    && (3 == hashArea[offset+3]))",
    "info" : "IfStatement[23898-24096]:IfStatement[23898-24096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24037-24096]:Block[24037-24096]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[24055-24082]:ReturnStatement[24055-24082]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[24115-24127]:ReturnStatement[24115-24127]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24139-24146]:Modifier[24139-24146]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[24147-24153]:SimpleType[24147-24153]"
  }, {
    "left" : "_findSecondary",
    "right" : "_findSecondary",
    "info" : "SimpleName[24154-24168]:SimpleName[24154-24168]"
  }, {
    "left" : "int origOffset",
    "right" : "int origOffset",
    "info" : "SingleVariableDeclaration[24169-24183]:SingleVariableDeclaration[24169-24183]"
  }, {
    "left" : "int hash",
    "right" : "int hash",
    "info" : "SingleVariableDeclaration[24185-24193]:SingleVariableDeclaration[24185-24193]"
  }, {
    "left" : "int[] q",
    "right" : "int[] q",
    "info" : "SingleVariableDeclaration[24195-24202]:SingleVariableDeclaration[24195-24202]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[24204-24212]:SingleVariableDeclaration[24204-24212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24218-25072]:Block[24218-25072]"
  }, {
    "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[24228-24315]:VariableDeclarationStatement[24228-24315]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[24324-24357]:VariableDeclarationStatement[24324-24357]"
  }, {
    "left" : "final int bucketSize = (1 << _tertiaryShift);",
    "right" : "final int bucketSize = (1 << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[24367-24412]:VariableDeclarationStatement[24367-24412]"
  }, {
    "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
    "info" : "ForStatement[24421-24729]:ForStatement[24421-24729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24484-24729]:Block[24484-24729]"
  }, {
    "left" : "int len = hashArea[offset+3];",
    "right" : "int len = hashArea[offset+3];",
    "info" : "VariableDeclarationStatement[24498-24527]:VariableDeclarationStatement[24498-24527]"
  }, {
    "left" : "if ((hash == hashArea[offset]) && (qlen == len))",
    "right" : "if ((hash == hashArea[offset]) && (qlen == len))",
    "info" : "IfStatement[24540-24648]:IfStatement[24540-24648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24589-24648]:Block[24589-24648]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[24607-24634]:ReturnStatement[24607-24634]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[24661-24719]:IfStatement[24661-24719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24675-24719]:Block[24675-24719]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[24693-24705]:ReturnStatement[24693-24705]"
  }, {
    "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
    "info" : "ForStatement[24738-25045]:ForStatement[24738-25045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24808-25045]:Block[24808-25045]"
  }, {
    "left" : "if ((hash == hashArea[offset]) && (qlen == hashArea[offset+3]))",
    "right" : "if ((hash == hashArea[offset]) && (qlen == hashArea[offset+3]))",
    "info" : "IfStatement[24822-25035]:IfStatement[24822-25035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24886-25035]:Block[24886-25035]"
  }, {
    "left" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
    "right" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
    "info" : "IfStatement[24904-25021]:IfStatement[24904-25021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24954-25021]:Block[24954-25021]"
  }, {
    "left" : "return _names[offset >> 2];",
    "right" : "return _names[offset >> 2];",
    "info" : "ReturnStatement[24976-25003]:ReturnStatement[24976-25003]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[25054-25066]:ReturnStatement[25054-25066]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25082-25089]:Modifier[25082-25089]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25090-25097]:PrimitiveType[25090-25097]"
  }, {
    "left" : "_verifyLongName",
    "right" : "_verifyLongName",
    "info" : "SimpleName[25098-25113]:SimpleName[25098-25113]"
  }, {
    "left" : "int[] q",
    "right" : "int[] q",
    "info" : "SingleVariableDeclaration[25114-25121]:SingleVariableDeclaration[25114-25121]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[25123-25131]:SingleVariableDeclaration[25123-25131]"
  }, {
    "left" : "int spillOffset",
    "right" : "int spillOffset",
    "info" : "SingleVariableDeclaration[25133-25148]:SingleVariableDeclaration[25133-25148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25154-26059]:Block[25154-26059]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[25164-25197]:VariableDeclarationStatement[25164-25197]"
  }, {
    "left" : "int ix = 0;",
    "right" : "int ix = 0;",
    "info" : "VariableDeclarationStatement[25281-25292]:VariableDeclarationStatement[25281-25292]"
  }, {
    "left" : "switch (qlen) {\n        default:\n            return _verifyLongName2(q, qlen, spillOffset);\n        case 8:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 7:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 6:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 5:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 4: // always at least 4\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        }",
    "right" : "switch (qlen) {\n        default:\n            return _verifyLongName2(q, qlen, spillOffset);\n        case 8:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 7:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 6:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 5:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 4: // always at least 4\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        }",
    "info" : "SwitchStatement[25302-26032]:SwitchStatement[25302-26032]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25326-25334]:SwitchCase[25326-25334]"
  }, {
    "left" : "return _verifyLongName2(q, qlen, spillOffset);",
    "right" : "return _verifyLongName2(q, qlen, spillOffset);",
    "info" : "ReturnStatement[25347-25393]:ReturnStatement[25347-25393]"
  }, {
    "left" : "case 8:",
    "right" : "case 8:",
    "info" : "SwitchCase[25402-25409]:SwitchCase[25402-25409]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25422-25475]:IfStatement[25422-25475]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25462-25475]:ReturnStatement[25462-25475]"
  }, {
    "left" : "case 7:",
    "right" : "case 7:",
    "info" : "SwitchCase[25484-25491]:SwitchCase[25484-25491]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25504-25557]:IfStatement[25504-25557]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25544-25557]:ReturnStatement[25544-25557]"
  }, {
    "left" : "case 6:",
    "right" : "case 6:",
    "info" : "SwitchCase[25566-25573]:SwitchCase[25566-25573]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25586-25639]:IfStatement[25586-25639]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25626-25639]:ReturnStatement[25626-25639]"
  }, {
    "left" : "case 5:",
    "right" : "case 5:",
    "info" : "SwitchCase[25648-25655]:SwitchCase[25648-25655]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25668-25721]:IfStatement[25668-25721]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25708-25721]:ReturnStatement[25708-25721]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[25730-25737]:SwitchCase[25730-25737]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25771-25824]:IfStatement[25771-25824]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25811-25824]:ReturnStatement[25811-25824]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25837-25890]:IfStatement[25837-25890]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25877-25890]:ReturnStatement[25877-25890]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25903-25956]:IfStatement[25903-25956]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25943-25956]:ReturnStatement[25943-25956]"
  }, {
    "left" : "if (q[ix++] != hashArea[spillOffset++])",
    "right" : "if (q[ix++] != hashArea[spillOffset++])",
    "info" : "IfStatement[25969-26022]:IfStatement[25969-26022]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26009-26022]:ReturnStatement[26009-26022]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26041-26053]:ReturnStatement[26041-26053]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26065-26072]:Modifier[26065-26072]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26073-26080]:PrimitiveType[26073-26080]"
  }, {
    "left" : "_verifyLongName2",
    "right" : "_verifyLongName2",
    "info" : "SimpleName[26081-26097]:SimpleName[26081-26097]"
  }, {
    "left" : "int[] q",
    "right" : "int[] q",
    "info" : "SingleVariableDeclaration[26098-26105]:SingleVariableDeclaration[26098-26105]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[26107-26115]:SingleVariableDeclaration[26107-26115]"
  }, {
    "left" : "int spillOffset",
    "right" : "int spillOffset",
    "info" : "SingleVariableDeclaration[26117-26132]:SingleVariableDeclaration[26117-26132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26138-26327]:Block[26138-26327]"
  }, {
    "left" : "int ix = 0;",
    "right" : "int ix = 0;",
    "info" : "VariableDeclarationStatement[26148-26159]:VariableDeclarationStatement[26148-26159]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[26168-26300]:DoStatement[26168-26300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26171-26281]:Block[26171-26281]"
  }, {
    "left" : "if (q[ix++] != _hashArea[spillOffset++])",
    "right" : "if (q[ix++] != _hashArea[spillOffset++])",
    "info" : "IfStatement[26185-26271]:IfStatement[26185-26271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26226-26271]:Block[26226-26271]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26244-26257]:ReturnStatement[26244-26257]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26309-26321]:ReturnStatement[26309-26321]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26498-26504]:Modifier[26498-26504]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26505-26511]:SimpleType[26505-26511]"
  }, {
    "left" : "addName",
    "right" : "addName",
    "info" : "SimpleName[26512-26519]:SimpleName[26512-26519]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[26520-26531]:SingleVariableDeclaration[26520-26531]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[26533-26539]:SingleVariableDeclaration[26533-26539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26541-26887]:Block[26541-26887]"
  }, {
    "left" : "_verifySharing();",
    "right" : "_verifySharing();",
    "info" : "ExpressionStatement[26551-26568]:ExpressionStatement[26551-26568]"
  }, {
    "left" : "if (_intern)",
    "right" : "if (_intern)",
    "info" : "IfStatement[26577-26655]:IfStatement[26577-26655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26590-26655]:Block[26590-26655]"
  }, {
    "left" : "name = InternCache.instance.intern(name);",
    "right" : "name = InternCache.instance.intern(name);",
    "info" : "ExpressionStatement[26604-26645]:ExpressionStatement[26604-26645]"
  }, {
    "left" : "int offset = _findOffsetForAdd(calcHash(q1));",
    "right" : "int offset = _findOffsetForAdd(calcHash(q1));",
    "info" : "VariableDeclarationStatement[26664-26709]:VariableDeclarationStatement[26664-26709]"
  }, {
    "left" : "_hashArea[offset] = q1;",
    "right" : "_hashArea[offset] = q1;",
    "info" : "ExpressionStatement[26718-26741]:ExpressionStatement[26718-26741]"
  }, {
    "left" : "_hashArea[offset+3] = 1;",
    "right" : "_hashArea[offset+3] = 1;",
    "info" : "ExpressionStatement[26750-26774]:ExpressionStatement[26750-26774]"
  }, {
    "left" : "_names[offset >> 2] = name;",
    "right" : "_names[offset >> 2] = name;",
    "info" : "ExpressionStatement[26783-26810]:ExpressionStatement[26783-26810]"
  }, {
    "left" : "++_count;",
    "right" : "++_count;",
    "info" : "ExpressionStatement[26819-26828]:ExpressionStatement[26819-26828]"
  }, {
    "left" : "_verifyNeedForRehash();",
    "right" : "_verifyNeedForRehash();",
    "info" : "ExpressionStatement[26837-26860]:ExpressionStatement[26837-26860]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[26869-26881]:ReturnStatement[26869-26881]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26893-26899]:Modifier[26893-26899]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26900-26906]:SimpleType[26900-26906]"
  }, {
    "left" : "addName",
    "right" : "addName",
    "info" : "SimpleName[26907-26914]:SimpleName[26907-26914]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[26915-26926]:SingleVariableDeclaration[26915-26926]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[26928-26934]:SingleVariableDeclaration[26928-26934]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[26936-26942]:SingleVariableDeclaration[26936-26942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26944-27380]:Block[26944-27380]"
  }, {
    "left" : "_verifySharing();",
    "right" : "_verifySharing();",
    "info" : "ExpressionStatement[26954-26971]:ExpressionStatement[26954-26971]"
  }, {
    "left" : "if (_intern)",
    "right" : "if (_intern)",
    "info" : "IfStatement[26980-27058]:IfStatement[26980-27058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26993-27058]:Block[26993-27058]"
  }, {
    "left" : "name = InternCache.instance.intern(name);",
    "right" : "name = InternCache.instance.intern(name);",
    "info" : "ExpressionStatement[27007-27048]:ExpressionStatement[27007-27048]"
  }, {
    "left" : "int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);",
    "right" : "int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);",
    "info" : "VariableDeclarationStatement[27067-27122]:VariableDeclarationStatement[27067-27122]"
  }, {
    "left" : "int offset = _findOffsetForAdd(hash);",
    "right" : "int offset = _findOffsetForAdd(hash);",
    "info" : "VariableDeclarationStatement[27131-27168]:VariableDeclarationStatement[27131-27168]"
  }, {
    "left" : "_hashArea[offset] = q1;",
    "right" : "_hashArea[offset] = q1;",
    "info" : "ExpressionStatement[27177-27200]:ExpressionStatement[27177-27200]"
  }, {
    "left" : "_hashArea[offset+1] = q2;",
    "right" : "_hashArea[offset+1] = q2;",
    "info" : "ExpressionStatement[27209-27234]:ExpressionStatement[27209-27234]"
  }, {
    "left" : "_hashArea[offset+3] = 2;",
    "right" : "_hashArea[offset+3] = 2;",
    "info" : "ExpressionStatement[27243-27267]:ExpressionStatement[27243-27267]"
  }, {
    "left" : "_names[offset >> 2] = name;",
    "right" : "_names[offset >> 2] = name;",
    "info" : "ExpressionStatement[27276-27303]:ExpressionStatement[27276-27303]"
  }, {
    "left" : "++_count;",
    "right" : "++_count;",
    "info" : "ExpressionStatement[27312-27321]:ExpressionStatement[27312-27321]"
  }, {
    "left" : "_verifyNeedForRehash();",
    "right" : "_verifyNeedForRehash();",
    "info" : "ExpressionStatement[27330-27353]:ExpressionStatement[27330-27353]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[27362-27374]:ReturnStatement[27362-27374]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27386-27392]:Modifier[27386-27392]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27393-27399]:SimpleType[27393-27399]"
  }, {
    "left" : "addName",
    "right" : "addName",
    "info" : "SimpleName[27400-27407]:SimpleName[27400-27407]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[27408-27419]:SingleVariableDeclaration[27408-27419]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[27421-27427]:SingleVariableDeclaration[27421-27427]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[27429-27435]:SingleVariableDeclaration[27429-27435]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[27437-27443]:SingleVariableDeclaration[27437-27443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27445-27867]:Block[27445-27867]"
  }, {
    "left" : "_verifySharing();",
    "right" : "_verifySharing();",
    "info" : "ExpressionStatement[27455-27472]:ExpressionStatement[27455-27472]"
  }, {
    "left" : "if (_intern)",
    "right" : "if (_intern)",
    "info" : "IfStatement[27481-27559]:IfStatement[27481-27559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27494-27559]:Block[27494-27559]"
  }, {
    "left" : "name = InternCache.instance.intern(name);",
    "right" : "name = InternCache.instance.intern(name);",
    "info" : "ExpressionStatement[27508-27549]:ExpressionStatement[27508-27549]"
  }, {
    "left" : "int offset = _findOffsetForAdd(calcHash(q1, q2, q3));",
    "right" : "int offset = _findOffsetForAdd(calcHash(q1, q2, q3));",
    "info" : "VariableDeclarationStatement[27568-27621]:VariableDeclarationStatement[27568-27621]"
  }, {
    "left" : "_hashArea[offset] = q1;",
    "right" : "_hashArea[offset] = q1;",
    "info" : "ExpressionStatement[27630-27653]:ExpressionStatement[27630-27653]"
  }, {
    "left" : "_hashArea[offset+1] = q2;",
    "right" : "_hashArea[offset+1] = q2;",
    "info" : "ExpressionStatement[27662-27687]:ExpressionStatement[27662-27687]"
  }, {
    "left" : "_hashArea[offset+2] = q3;",
    "right" : "_hashArea[offset+2] = q3;",
    "info" : "ExpressionStatement[27696-27721]:ExpressionStatement[27696-27721]"
  }, {
    "left" : "_hashArea[offset+3] = 3;",
    "right" : "_hashArea[offset+3] = 3;",
    "info" : "ExpressionStatement[27730-27754]:ExpressionStatement[27730-27754]"
  }, {
    "left" : "_names[offset >> 2] = name;",
    "right" : "_names[offset >> 2] = name;",
    "info" : "ExpressionStatement[27763-27790]:ExpressionStatement[27763-27790]"
  }, {
    "left" : "++_count;",
    "right" : "++_count;",
    "info" : "ExpressionStatement[27799-27808]:ExpressionStatement[27799-27808]"
  }, {
    "left" : "_verifyNeedForRehash();",
    "right" : "_verifyNeedForRehash();",
    "info" : "ExpressionStatement[27817-27840]:ExpressionStatement[27817-27840]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[27849-27861]:ReturnStatement[27849-27861]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27873-27879]:Modifier[27873-27879]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27880-27886]:SimpleType[27880-27886]"
  }, {
    "left" : "addName",
    "right" : "addName",
    "info" : "SimpleName[27887-27894]:SimpleName[27887-27894]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[27895-27906]:SingleVariableDeclaration[27895-27906]"
  }, {
    "left" : "int[] q",
    "right" : "int[] q",
    "info" : "SingleVariableDeclaration[27908-27915]:SingleVariableDeclaration[27908-27915]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[27917-27925]:SingleVariableDeclaration[27917-27925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27931-29369]:Block[27931-29369]"
  }, {
    "left" : "_verifySharing();",
    "right" : "_verifySharing();",
    "info" : "ExpressionStatement[27941-27958]:ExpressionStatement[27941-27958]"
  }, {
    "left" : "if (_intern)",
    "right" : "if (_intern)",
    "info" : "IfStatement[27967-28045]:IfStatement[27967-28045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27980-28045]:Block[27980-28045]"
  }, {
    "left" : "name = InternCache.instance.intern(name);",
    "right" : "name = InternCache.instance.intern(name);",
    "info" : "ExpressionStatement[27994-28035]:ExpressionStatement[27994-28035]"
  }, {
    "left" : "int offset;",
    "right" : "int offset;",
    "info" : "VariableDeclarationStatement[28054-28065]:VariableDeclarationStatement[28054-28065]"
  }, {
    "left" : "switch (qlen) {\n        case 1:\n        {\n                offset = _findOffsetForAdd(calcHash(q[0]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+3] = 1;\n            }\n            break;\n        case 2:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+3] = 2;\n            }\n            break;\n        case 3:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+2] = q[2];\n                _hashArea[offset+3] = 3;\n            }\n            break;\n        default:\n            final int hash = calcHash(q, qlen);\n            offset = _findOffsetForAdd(hash);\n\n            _hashArea[offset] = hash;\n            int longStart = _appendLongName(q, qlen);\n            _hashArea[offset+1] = longStart;\n            _hashArea[offset+3] = qlen;\n        }",
    "right" : "switch (qlen) {\n        case 1:\n        {\n                offset = _findOffsetForAdd(calcHash(q[0]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+3] = 1;\n            }\n            break;\n        case 2:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+3] = 2;\n            }\n            break;\n        case 3:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+2] = q[2];\n                _hashArea[offset+3] = 3;\n            }\n            break;\n        default:\n            final int hash = calcHash(q, qlen);\n            offset = _findOffsetForAdd(hash);\n\n            _hashArea[offset] = hash;\n            int longStart = _appendLongName(q, qlen);\n            _hashArea[offset+1] = longStart;\n            _hashArea[offset+3] = qlen;\n        }",
    "info" : "SwitchStatement[28083-29161]:SwitchStatement[28083-29161]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[28107-28114]:SwitchCase[28107-28114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28123-28281]:Block[28123-28281]"
  }, {
    "left" : "offset = _findOffsetForAdd(calcHash(q[0]));",
    "right" : "offset = _findOffsetForAdd(calcHash(q[0]));",
    "info" : "ExpressionStatement[28141-28184]:ExpressionStatement[28141-28184]"
  }, {
    "left" : "_hashArea[offset] = q[0];",
    "right" : "_hashArea[offset] = q[0];",
    "info" : "ExpressionStatement[28201-28226]:ExpressionStatement[28201-28226]"
  }, {
    "left" : "_hashArea[offset+3] = 1;",
    "right" : "_hashArea[offset+3] = 1;",
    "info" : "ExpressionStatement[28243-28267]:ExpressionStatement[28243-28267]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28294-28300]:BreakStatement[28294-28300]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[28309-28316]:SwitchCase[28309-28316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28329-28537]:Block[28329-28537]"
  }, {
    "left" : "offset = _findOffsetForAdd(calcHash(q[0], q[1]));",
    "right" : "offset = _findOffsetForAdd(calcHash(q[0], q[1]));",
    "info" : "ExpressionStatement[28347-28396]:ExpressionStatement[28347-28396]"
  }, {
    "left" : "_hashArea[offset] = q[0];",
    "right" : "_hashArea[offset] = q[0];",
    "info" : "ExpressionStatement[28413-28438]:ExpressionStatement[28413-28438]"
  }, {
    "left" : "_hashArea[offset+1] = q[1];",
    "right" : "_hashArea[offset+1] = q[1];",
    "info" : "ExpressionStatement[28455-28482]:ExpressionStatement[28455-28482]"
  }, {
    "left" : "_hashArea[offset+3] = 2;",
    "right" : "_hashArea[offset+3] = 2;",
    "info" : "ExpressionStatement[28499-28523]:ExpressionStatement[28499-28523]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28550-28556]:BreakStatement[28550-28556]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[28565-28572]:SwitchCase[28565-28572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28585-28843]:Block[28585-28843]"
  }, {
    "left" : "offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));",
    "right" : "offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));",
    "info" : "ExpressionStatement[28603-28658]:ExpressionStatement[28603-28658]"
  }, {
    "left" : "_hashArea[offset] = q[0];",
    "right" : "_hashArea[offset] = q[0];",
    "info" : "ExpressionStatement[28675-28700]:ExpressionStatement[28675-28700]"
  }, {
    "left" : "_hashArea[offset+1] = q[1];",
    "right" : "_hashArea[offset+1] = q[1];",
    "info" : "ExpressionStatement[28717-28744]:ExpressionStatement[28717-28744]"
  }, {
    "left" : "_hashArea[offset+2] = q[2];",
    "right" : "_hashArea[offset+2] = q[2];",
    "info" : "ExpressionStatement[28761-28788]:ExpressionStatement[28761-28788]"
  }, {
    "left" : "_hashArea[offset+3] = 3;",
    "right" : "_hashArea[offset+3] = 3;",
    "info" : "ExpressionStatement[28805-28829]:ExpressionStatement[28805-28829]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28856-28862]:BreakStatement[28856-28862]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[28871-28879]:SwitchCase[28871-28879]"
  }, {
    "left" : "final int hash = calcHash(q, qlen);",
    "right" : "final int hash = calcHash(q, qlen);",
    "info" : "VariableDeclarationStatement[28892-28927]:VariableDeclarationStatement[28892-28927]"
  }, {
    "left" : "offset = _findOffsetForAdd(hash);",
    "right" : "offset = _findOffsetForAdd(hash);",
    "info" : "ExpressionStatement[28940-28973]:ExpressionStatement[28940-28973]"
  }, {
    "left" : "_hashArea[offset] = hash;",
    "right" : "_hashArea[offset] = hash;",
    "info" : "ExpressionStatement[28987-29012]:ExpressionStatement[28987-29012]"
  }, {
    "left" : "int longStart = _appendLongName(q, qlen);",
    "right" : "int longStart = _appendLongName(q, qlen);",
    "info" : "VariableDeclarationStatement[29025-29066]:VariableDeclarationStatement[29025-29066]"
  }, {
    "left" : "_hashArea[offset+1] = longStart;",
    "right" : "_hashArea[offset+1] = longStart;",
    "info" : "ExpressionStatement[29079-29111]:ExpressionStatement[29079-29111]"
  }, {
    "left" : "_hashArea[offset+3] = qlen;",
    "right" : "_hashArea[offset+3] = qlen;",
    "info" : "ExpressionStatement[29124-29151]:ExpressionStatement[29124-29151]"
  }, {
    "left" : "_names[offset >> 2] = name;",
    "right" : "_names[offset >> 2] = name;",
    "info" : "ExpressionStatement[29208-29235]:ExpressionStatement[29208-29235]"
  }, {
    "left" : "++_count;",
    "right" : "++_count;",
    "info" : "ExpressionStatement[29301-29310]:ExpressionStatement[29301-29310]"
  }, {
    "left" : "_verifyNeedForRehash();",
    "right" : "_verifyNeedForRehash();",
    "info" : "ExpressionStatement[29319-29342]:ExpressionStatement[29319-29342]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[29351-29363]:ReturnStatement[29351-29363]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29375-29382]:Modifier[29375-29382]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29383-29387]:PrimitiveType[29383-29387]"
  }, {
    "left" : "_verifyNeedForRehash",
    "right" : "_verifyNeedForRehash",
    "info" : "SimpleName[29388-29408]:SimpleName[29388-29408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29411-29774]:Block[29411-29774]"
  }, {
    "left" : "if (_count > (_hashSize >> 1))",
    "right" : "if (_count > (_hashSize >> 1))",
    "info" : "IfStatement[29488-29768]:IfStatement[29488-29768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29519-29768]:Block[29519-29768]"
  }, {
    "left" : "int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;",
    "right" : "int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;",
    "info" : "VariableDeclarationStatement[29545-29603]:VariableDeclarationStatement[29545-29603]"
  }, {
    "left" : "if ((spillCount > (1 + _count >> 7))\n                    || (_count > (_hashSize * 0.80)))",
    "right" : "if ((spillCount > (1 + _count >> 7))\n                    || (_count > (_hashSize * 0.80)))",
    "info" : "IfStatement[29616-29758]:IfStatement[29616-29758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29707-29758]:Block[29707-29758]"
  }, {
    "left" : "_needRehash = true;",
    "right" : "_needRehash = true;",
    "info" : "ExpressionStatement[29725-29744]:ExpressionStatement[29725-29744]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29780-29787]:Modifier[29780-29787]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29788-29792]:PrimitiveType[29788-29792]"
  }, {
    "left" : "_verifySharing",
    "right" : "_verifySharing",
    "info" : "SimpleName[29793-29807]:SimpleName[29793-29807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29814-30077]:Block[29814-30077]"
  }, {
    "left" : "if (_hashShared)",
    "right" : "if (_hashShared)",
    "info" : "IfStatement[29824-30012]:IfStatement[29824-30012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29841-30012]:Block[29841-30012]"
  }, {
    "left" : "_hashArea = Arrays.copyOf(_hashArea, _hashArea.length);",
    "right" : "_hashArea = Arrays.copyOf(_hashArea, _hashArea.length);",
    "info" : "ExpressionStatement[29855-29910]:ExpressionStatement[29855-29910]"
  }, {
    "left" : "_names = Arrays.copyOf(_names, _names.length);",
    "right" : "_names = Arrays.copyOf(_names, _names.length);",
    "info" : "ExpressionStatement[29923-29969]:ExpressionStatement[29923-29969]"
  }, {
    "left" : "_hashShared = false;",
    "right" : "_hashShared = false;",
    "info" : "ExpressionStatement[29982-30002]:ExpressionStatement[29982-30002]"
  }, {
    "left" : "if (_needRehash)",
    "right" : "if (_needRehash)",
    "info" : "IfStatement[30021-30071]:IfStatement[30021-30071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30038-30071]:Block[30038-30071]"
  }, {
    "left" : "rehash();",
    "right" : "rehash();",
    "info" : "ExpressionStatement[30052-30061]:ExpressionStatement[30052-30061]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30187-30194]:Modifier[30187-30194]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[30195-30198]:PrimitiveType[30195-30198]"
  }, {
    "left" : "_findOffsetForAdd",
    "right" : "_findOffsetForAdd",
    "info" : "SimpleName[30199-30216]:SimpleName[30199-30216]"
  }, {
    "left" : "int hash",
    "right" : "int hash",
    "info" : "SingleVariableDeclaration[30217-30225]:SingleVariableDeclaration[30217-30225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30231-32378]:Block[30231-32408]"
  }, {
    "left" : "int offset = _calcOffset(hash);",
    "right" : "int offset = _calcOffset(hash);",
    "info" : "VariableDeclarationStatement[30278-30309]:VariableDeclarationStatement[30278-30309]"
  }, {
    "left" : "final int[] hashArea = _hashArea;",
    "right" : "final int[] hashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[30318-30351]:VariableDeclarationStatement[30318-30351]"
  }, {
    "left" : "if (hashArea[offset+3] == 0)",
    "right" : "if (hashArea[offset+3] == 0)",
    "info" : "IfStatement[30360-30506]:IfStatement[30360-30506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30389-30506]:Block[30389-30506]"
  }, {
    "left" : "return offset;",
    "right" : "return offset;",
    "info" : "ReturnStatement[30482-30496]:ReturnStatement[30482-30496]"
  }, {
    "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
    "info" : "VariableDeclarationStatement[30541-30594]:VariableDeclarationStatement[30541-30594]"
  }, {
    "left" : "if (hashArea[offset2+3] == 0)",
    "right" : "if (hashArea[offset2+3] == 0)",
    "info" : "IfStatement[30603-30785]:IfStatement[30603-30785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30633-30785]:Block[30633-30785]"
  }, {
    "left" : "return offset2;",
    "right" : "return offset2;",
    "info" : "ReturnStatement[30760-30775]:ReturnStatement[30760-30775]"
  }, {
    "left" : "offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "right" : "offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);",
    "info" : "ExpressionStatement[30824-30904]:ExpressionStatement[30824-30904]"
  }, {
    "left" : "final int bucketSize = (1 << _tertiaryShift);",
    "right" : "final int bucketSize = (1 << _tertiaryShift);",
    "info" : "VariableDeclarationStatement[30913-30958]:VariableDeclarationStatement[30913-30958]"
  }, {
    "left" : "for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4)",
    "right" : "for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4)",
    "info" : "ForStatement[30967-31305]:ForStatement[30967-31305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31033-31305]:Block[31033-31305]"
  }, {
    "left" : "if (hashArea[offset2+3] == 0)",
    "right" : "if (hashArea[offset2+3] == 0)",
    "info" : "IfStatement[31047-31295]:IfStatement[31047-31295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31077-31295]:Block[31077-31295]"
  }, {
    "left" : "return offset2;",
    "right" : "return offset2;",
    "info" : "ReturnStatement[31266-31281]:ReturnStatement[31266-31281]"
  }, {
    "left" : "offset = _spilloverEnd;",
    "right" : "offset = _spilloverEnd;",
    "info" : "ExpressionStatement[31385-31408]:ExpressionStatement[31385-31408]"
  }, {
    "left" : "_spilloverEnd += 4;",
    "right" : "_spilloverEnd += 4;",
    "info" : "ExpressionStatement[31417-31436]:ExpressionStatement[31417-31436]"
  }, {
    "left" : "if (_spilloverEnd >= hashArea.length)",
    "right" : "if (_spilloverEnd >= end)",
    "info" : "IfStatement[32016-32349]:IfStatement[32058-32379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32054-32349]:Block[32084-32379]"
  }, {
    "left" : "if (_failOnDoS)",
    "right" : "if (_failOnDoS)",
    "info" : "IfStatement[32068-32143]:IfStatement[32098-32173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32084-32143]:Block[32114-32173]"
  }, {
    "left" : "_reportTooManyCollisions();",
    "right" : "_reportTooManyCollisions();",
    "info" : "ExpressionStatement[32102-32129]:ExpressionStatement[32132-32159]"
  }, {
    "left" : "_needRehash = true;",
    "right" : "_needRehash = true;",
    "info" : "ExpressionStatement[32320-32339]:ExpressionStatement[32350-32369]"
  }, {
    "left" : "return offset;",
    "right" : "return offset;",
    "info" : "ReturnStatement[32358-32372]:ReturnStatement[32388-32402]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32384-32391]:Modifier[32414-32421]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[32392-32395]:PrimitiveType[32422-32425]"
  }, {
    "left" : "_appendLongName",
    "right" : "_appendLongName",
    "info" : "SimpleName[32396-32411]:SimpleName[32426-32441]"
  }, {
    "left" : "int[] quads",
    "right" : "int[] quads",
    "info" : "SingleVariableDeclaration[32412-32423]:SingleVariableDeclaration[32442-32453]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[32425-32433]:SingleVariableDeclaration[32455-32463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32439-33163]:Block[32469-33193]"
  }, {
    "left" : "int start = _longNameOffset;",
    "right" : "int start = _longNameOffset;",
    "info" : "VariableDeclarationStatement[32449-32477]:VariableDeclarationStatement[32479-32507]"
  }, {
    "left" : "if ((start + qlen) > _hashArea.length)",
    "right" : "if ((start + qlen) > _hashArea.length)",
    "info" : "IfStatement[32583-33042]:IfStatement[32613-33072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32622-33042]:Block[32652-33072]"
  }, {
    "left" : "int toAdd = (start + qlen) - _hashArea.length;",
    "right" : "int toAdd = (start + qlen) - _hashArea.length;",
    "info" : "VariableDeclarationStatement[32718-32764]:VariableDeclarationStatement[32748-32794]"
  }, {
    "left" : "int minAdd = Math.min(4096, _hashSize);",
    "right" : "int minAdd = Math.min(4096, _hashSize);",
    "info" : "VariableDeclarationStatement[32863-32902]:VariableDeclarationStatement[32893-32932]"
  }, {
    "left" : "int newSize = _hashArea.length + Math.max(toAdd, minAdd);",
    "right" : "int newSize = _hashArea.length + Math.max(toAdd, minAdd);",
    "info" : "VariableDeclarationStatement[32916-32973]:VariableDeclarationStatement[32946-33003]"
  }, {
    "left" : "_hashArea = Arrays.copyOf(_hashArea, newSize);",
    "right" : "_hashArea = Arrays.copyOf(_hashArea, newSize);",
    "info" : "ExpressionStatement[32986-33032]:ExpressionStatement[33016-33062]"
  }, {
    "left" : "System.arraycopy(quads, 0, _hashArea, start, qlen);",
    "right" : "System.arraycopy(quads, 0, _hashArea, start, qlen);",
    "info" : "ExpressionStatement[33051-33102]:ExpressionStatement[33081-33132]"
  }, {
    "left" : "_longNameOffset += qlen;",
    "right" : "_longNameOffset += qlen;",
    "info" : "ExpressionStatement[33111-33135]:ExpressionStatement[33141-33165]"
  }, {
    "left" : "return start;",
    "right" : "return start;",
    "info" : "ReturnStatement[33144-33157]:ReturnStatement[33174-33187]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33984-33990]:Modifier[34014-34020]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[33991-33994]:PrimitiveType[34021-34024]"
  }, {
    "left" : "calcHash",
    "right" : "calcHash",
    "info" : "SimpleName[33995-34003]:SimpleName[34025-34033]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[34004-34010]:SingleVariableDeclaration[34034-34040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34016-34509]:Block[34046-34606]"
  }, {
    "left" : "int hash = q1 ^ _seed;",
    "right" : "int hash = q1 ^ _seed;",
    "info" : "VariableDeclarationStatement[34026-34048]:VariableDeclarationStatement[34056-34078]"
  }, {
    "left" : "hash += (hash >>> 16);",
    "right" : "hash += (hash >>> 16);",
    "info" : "ExpressionStatement[34398-34420]:ExpressionStatement[34428-34450]"
  }, {
    "left" : "hash ^= (hash >>> 12);",
    "right" : "hash += (hash >>> 12);",
    "info" : "ExpressionStatement[34460-34482]:ExpressionStatement[34541-34563]"
  }, {
    "left" : "^=",
    "right" : "+=",
    "info" : "ASSIGNMENT_OPERATOR[34465-34467]:ASSIGNMENT_OPERATOR[34546-34548]"
  }, {
    "left" : "return hash;",
    "right" : "return hash;",
    "info" : "ReturnStatement[34491-34503]:ReturnStatement[34588-34600]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34515-34521]:Modifier[34612-34618]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[34522-34525]:PrimitiveType[34619-34622]"
  }, {
    "left" : "calcHash",
    "right" : "calcHash",
    "info" : "SimpleName[34526-34534]:SimpleName[34623-34631]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[34535-34541]:SingleVariableDeclaration[34632-34638]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[34543-34549]:SingleVariableDeclaration[34640-34646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34555-35067]:Block[34652-35164]"
  }, {
    "left" : "int hash = q1;",
    "right" : "int hash = q1;",
    "info" : "VariableDeclarationStatement[34687-34701]:VariableDeclarationStatement[34784-34798]"
  }, {
    "left" : "hash += (hash >>> 15);",
    "right" : "hash += (hash >>> 15);",
    "info" : "ExpressionStatement[34711-34733]:ExpressionStatement[34808-34830]"
  }, {
    "left" : "hash ^= (hash >>> 9);",
    "right" : "hash ^= (hash >>> 9);",
    "info" : "ExpressionStatement[34790-34811]:ExpressionStatement[34887-34908]"
  }, {
    "left" : "hash += (q2 * MULT);",
    "right" : "hash += (q2 * MULT);",
    "info" : "ExpressionStatement[34849-34869]:ExpressionStatement[34946-34966]"
  }, {
    "left" : "hash ^= _seed;",
    "right" : "hash ^= _seed;",
    "info" : "ExpressionStatement[34902-34916]:ExpressionStatement[34999-35013]"
  }, {
    "left" : "hash += (hash >>> 16);",
    "right" : "hash += (hash >>> 16);",
    "info" : "ExpressionStatement[34925-34947]:ExpressionStatement[35022-35044]"
  }, {
    "left" : "hash ^= (hash >>> 4);",
    "right" : "hash ^= (hash >>> 4);",
    "info" : "ExpressionStatement[34981-35002]:ExpressionStatement[35078-35099]"
  }, {
    "left" : "hash += (hash << 3);",
    "right" : "hash += (hash << 3);",
    "info" : "ExpressionStatement[35011-35031]:ExpressionStatement[35108-35128]"
  }, {
    "left" : "return hash;",
    "right" : "return hash;",
    "info" : "ReturnStatement[35049-35061]:ReturnStatement[35146-35158]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35073-35079]:Modifier[35170-35176]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35080-35083]:PrimitiveType[35177-35180]"
  }, {
    "left" : "calcHash",
    "right" : "calcHash",
    "info" : "SimpleName[35084-35092]:SimpleName[35181-35189]"
  }, {
    "left" : "int q1",
    "right" : "int q1",
    "info" : "SingleVariableDeclaration[35093-35099]:SingleVariableDeclaration[35190-35196]"
  }, {
    "left" : "int q2",
    "right" : "int q2",
    "info" : "SingleVariableDeclaration[35101-35107]:SingleVariableDeclaration[35198-35204]"
  }, {
    "left" : "int q3",
    "right" : "int q3",
    "info" : "SingleVariableDeclaration[35109-35115]:SingleVariableDeclaration[35206-35212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35121-35565]:Block[35218-35662]"
  }, {
    "left" : "int hash = q1 ^ _seed;",
    "right" : "int hash = q1 ^ _seed;",
    "info" : "VariableDeclarationStatement[35188-35210]:VariableDeclarationStatement[35285-35307]"
  }, {
    "left" : "hash += (hash >>> 9);",
    "right" : "hash += (hash >>> 9);",
    "info" : "ExpressionStatement[35219-35240]:ExpressionStatement[35316-35337]"
  }, {
    "left" : "hash *= MULT3;",
    "right" : "hash *= MULT3;",
    "info" : "ExpressionStatement[35249-35263]:ExpressionStatement[35346-35360]"
  }, {
    "left" : "hash += q2;",
    "right" : "hash += q2;",
    "info" : "ExpressionStatement[35272-35283]:ExpressionStatement[35369-35380]"
  }, {
    "left" : "hash *= MULT;",
    "right" : "hash *= MULT;",
    "info" : "ExpressionStatement[35292-35305]:ExpressionStatement[35389-35402]"
  }, {
    "left" : "hash += (hash >>> 15);",
    "right" : "hash += (hash >>> 15);",
    "info" : "ExpressionStatement[35314-35336]:ExpressionStatement[35411-35433]"
  }, {
    "left" : "hash ^= q3;",
    "right" : "hash ^= q3;",
    "info" : "ExpressionStatement[35345-35356]:ExpressionStatement[35442-35453]"
  }, {
    "left" : "hash += (hash >>> 4);",
    "right" : "hash += (hash >>> 4);",
    "info" : "ExpressionStatement[35455-35476]:ExpressionStatement[35552-35573]"
  }, {
    "left" : "hash += (hash >>> 15);",
    "right" : "hash += (hash >>> 15);",
    "info" : "ExpressionStatement[35486-35508]:ExpressionStatement[35583-35605]"
  }, {
    "left" : "hash ^= (hash << 9);",
    "right" : "hash ^= (hash << 9);",
    "info" : "ExpressionStatement[35517-35537]:ExpressionStatement[35614-35634]"
  }, {
    "left" : "return hash;",
    "right" : "return hash;",
    "info" : "ReturnStatement[35547-35559]:ReturnStatement[35644-35656]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35571-35577]:Modifier[35668-35674]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35578-35581]:PrimitiveType[35675-35678]"
  }, {
    "left" : "calcHash",
    "right" : "calcHash",
    "info" : "SimpleName[35582-35590]:SimpleName[35679-35687]"
  }, {
    "left" : "int[] q",
    "right" : "int[] q",
    "info" : "SingleVariableDeclaration[35591-35598]:SingleVariableDeclaration[35688-35695]"
  }, {
    "left" : "int qlen",
    "right" : "int qlen",
    "info" : "SingleVariableDeclaration[35600-35608]:SingleVariableDeclaration[35697-35705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35614-36469]:Block[35711-36566]"
  }, {
    "left" : "if (qlen < 4)",
    "right" : "if (qlen < 4)",
    "info" : "IfStatement[35624-35699]:IfStatement[35721-35796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35638-35699]:Block[35735-35796]"
  }, {
    "left" : "throw new IllegalArgumentException();",
    "right" : "throw new IllegalArgumentException();",
    "info" : "ThrowStatement[35652-35689]:ThrowStatement[35749-35786]"
  }, {
    "left" : "int hash = q[0] ^ _seed;",
    "right" : "int hash = q[0] ^ _seed;",
    "info" : "VariableDeclarationStatement[35971-35995]:VariableDeclarationStatement[36068-36092]"
  }, {
    "left" : "hash += (hash >>> 9);",
    "right" : "hash += (hash >>> 9);",
    "info" : "ExpressionStatement[36004-36025]:ExpressionStatement[36101-36122]"
  }, {
    "left" : "hash += q[1];",
    "right" : "hash += q[1];",
    "info" : "ExpressionStatement[36034-36047]:ExpressionStatement[36131-36144]"
  }, {
    "left" : "hash += (hash >>> 15);",
    "right" : "hash += (hash >>> 15);",
    "info" : "ExpressionStatement[36056-36078]:ExpressionStatement[36153-36175]"
  }, {
    "left" : "hash *= MULT;",
    "right" : "hash *= MULT;",
    "info" : "ExpressionStatement[36087-36100]:ExpressionStatement[36184-36197]"
  }, {
    "left" : "hash ^= q[2];",
    "right" : "hash ^= q[2];",
    "info" : "ExpressionStatement[36109-36122]:ExpressionStatement[36206-36219]"
  }, {
    "left" : "hash += (hash >>> 4);",
    "right" : "hash += (hash >>> 4);",
    "info" : "ExpressionStatement[36131-36152]:ExpressionStatement[36228-36249]"
  }, {
    "left" : "for (int i = 3; i < qlen; ++i)",
    "right" : "for (int i = 3; i < qlen; ++i)",
    "info" : "ForStatement[36162-36299]:ForStatement[36259-36396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36193-36299]:Block[36290-36396]"
  }, {
    "left" : "int next = q[i];",
    "right" : "int next = q[i];",
    "info" : "VariableDeclarationStatement[36207-36223]:VariableDeclarationStatement[36304-36320]"
  }, {
    "left" : "next = next ^ (next >> 21);",
    "right" : "next = next ^ (next >> 21);",
    "info" : "ExpressionStatement[36236-36263]:ExpressionStatement[36333-36360]"
  }, {
    "left" : "hash += next;",
    "right" : "hash += next;",
    "info" : "ExpressionStatement[36276-36289]:ExpressionStatement[36373-36386]"
  }, {
    "left" : "hash *= MULT2;",
    "right" : "hash *= MULT2;",
    "info" : "ExpressionStatement[36308-36322]:ExpressionStatement[36405-36419]"
  }, {
    "left" : "hash += (hash >>> 19);",
    "right" : "hash += (hash >>> 19);",
    "info" : "ExpressionStatement[36391-36413]:ExpressionStatement[36488-36510]"
  }, {
    "left" : "hash ^= (hash << 5);",
    "right" : "hash ^= (hash << 5);",
    "info" : "ExpressionStatement[36422-36442]:ExpressionStatement[36519-36539]"
  }, {
    "left" : "return hash;",
    "right" : "return hash;",
    "info" : "ReturnStatement[36451-36463]:ReturnStatement[36548-36560]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36636-36643]:Modifier[36733-36740]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36644-36648]:PrimitiveType[36741-36745]"
  }, {
    "left" : "rehash",
    "right" : "rehash",
    "info" : "SimpleName[36649-36655]:SimpleName[36746-36752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36662-39806]:Block[36759-39903]"
  }, {
    "left" : "_needRehash = false;",
    "right" : "_needRehash = false;",
    "info" : "ExpressionStatement[36672-36692]:ExpressionStatement[36769-36789]"
  }, {
    "left" : "_hashShared = false;",
    "right" : "_hashShared = false;",
    "info" : "ExpressionStatement[36786-36806]:ExpressionStatement[36883-36903]"
  }, {
    "left" : "final int[] oldHashArea = _hashArea;",
    "right" : "final int[] oldHashArea = _hashArea;",
    "info" : "VariableDeclarationStatement[36988-37024]:VariableDeclarationStatement[37085-37121]"
  }, {
    "left" : "final String[] oldNames = _names;",
    "right" : "final String[] oldNames = _names;",
    "info" : "VariableDeclarationStatement[37033-37066]:VariableDeclarationStatement[37130-37163]"
  }, {
    "left" : "final int oldSize = _hashSize;",
    "right" : "final int oldSize = _hashSize;",
    "info" : "VariableDeclarationStatement[37075-37105]:VariableDeclarationStatement[37172-37202]"
  }, {
    "left" : "final int oldCount = _count;",
    "right" : "final int oldCount = _count;",
    "info" : "VariableDeclarationStatement[37114-37142]:VariableDeclarationStatement[37211-37239]"
  }, {
    "left" : "final int newSize = oldSize + oldSize;",
    "right" : "final int newSize = oldSize + oldSize;",
    "info" : "VariableDeclarationStatement[37151-37189]:VariableDeclarationStatement[37248-37286]"
  }, {
    "left" : "final int oldEnd = _spilloverEnd;",
    "right" : "final int oldEnd = _spilloverEnd;",
    "info" : "VariableDeclarationStatement[37198-37231]:VariableDeclarationStatement[37295-37328]"
  }, {
    "left" : "if (newSize > MAX_T_SIZE)",
    "right" : "if (newSize > MAX_T_SIZE)",
    "info" : "IfStatement[37395-37483]:IfStatement[37492-37580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37421-37483]:Block[37518-37580]"
  }, {
    "left" : "nukeSymbols(true);",
    "right" : "nukeSymbols(true);",
    "info" : "ExpressionStatement[37435-37453]:ExpressionStatement[37532-37550]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37466-37473]:ReturnStatement[37563-37570]"
  }, {
    "left" : "_hashArea = new int[oldHashArea.length + (oldSize<<3)];",
    "right" : "_hashArea = new int[oldHashArea.length + (oldSize<<3)];",
    "info" : "ExpressionStatement[37563-37618]:ExpressionStatement[37660-37715]"
  }, {
    "left" : "_hashSize = newSize;",
    "right" : "_hashSize = newSize;",
    "info" : "ExpressionStatement[37627-37647]:ExpressionStatement[37724-37744]"
  }, {
    "left" : "_secondaryStart = (newSize << 2);",
    "right" : "_secondaryStart = (newSize << 2);",
    "info" : "ExpressionStatement[37656-37689]:ExpressionStatement[37753-37786]"
  }, {
    "left" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
    "right" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
    "info" : "ExpressionStatement[37718-37776]:ExpressionStatement[37815-37873]"
  }, {
    "left" : "_tertiaryShift = _calcTertiaryShift(newSize);",
    "right" : "_tertiaryShift = _calcTertiaryShift(newSize);",
    "info" : "ExpressionStatement[37810-37855]:ExpressionStatement[37907-37952]"
  }, {
    "left" : "_names = new String[oldNames.length << 1];",
    "right" : "_names = new String[oldNames.length << 1];",
    "info" : "ExpressionStatement[37916-37958]:ExpressionStatement[38013-38055]"
  }, {
    "left" : "nukeSymbols(false);",
    "right" : "nukeSymbols(false);",
    "info" : "ExpressionStatement[37967-37986]:ExpressionStatement[38064-38083]"
  }, {
    "left" : "int copyCount = 0;",
    "right" : "int copyCount = 0;",
    "info" : "VariableDeclarationStatement[38309-38327]:VariableDeclarationStatement[38406-38424]"
  }, {
    "left" : "int[] q = new int[16];",
    "right" : "int[] q = new int[16];",
    "info" : "VariableDeclarationStatement[38336-38358]:VariableDeclarationStatement[38433-38455]"
  }, {
    "left" : "for (int offset = 0, end = oldEnd; offset < end; offset += 4)",
    "right" : "for (int offset = 0, end = oldEnd; offset < end; offset += 4)",
    "info" : "ForStatement[38367-39528]:ForStatement[38464-39625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38429-39528]:Block[38526-39625]"
  }, {
    "left" : "int len = oldHashArea[offset+3];",
    "right" : "int len = oldHashArea[offset+3];",
    "info" : "VariableDeclarationStatement[38443-38475]:VariableDeclarationStatement[38540-38572]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[38488-38563]:IfStatement[38585-38660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38502-38563]:Block[38599-38660]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[38540-38549]:ContinueStatement[38637-38646]"
  }, {
    "left" : "++copyCount;",
    "right" : "++copyCount;",
    "info" : "ExpressionStatement[38576-38588]:ExpressionStatement[38673-38685]"
  }, {
    "left" : "String name = oldNames[offset>>2];",
    "right" : "String name = oldNames[offset>>2];",
    "info" : "VariableDeclarationStatement[38601-38635]:VariableDeclarationStatement[38698-38732]"
  }, {
    "left" : "switch (len) {\n            case 1:\n                q[0] = oldHashArea[offset];\n                addName(name, q, 1);\n                break;\n            case 2:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                addName(name, q, 2);\n                break;\n            case 3:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                q[2] = oldHashArea[offset+2];\n                addName(name, q, 3);\n                break;\n            default:\n                if (len > q.length) {\n                    q = new int[len];\n                }\n                // #0 is hash, #1 offset\n                int qoff = oldHashArea[offset+1];\n                System.arraycopy(oldHashArea, qoff, q, 0, len);\n                addName(name, q, len);\n                break;\n            }",
    "right" : "switch (len) {\n            case 1:\n                q[0] = oldHashArea[offset];\n                addName(name, q, 1);\n                break;\n            case 2:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                addName(name, q, 2);\n                break;\n            case 3:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                q[2] = oldHashArea[offset+2];\n                addName(name, q, 3);\n                break;\n            default:\n                if (len > q.length) {\n                    q = new int[len];\n                }\n                // #0 is hash, #1 offset\n                int qoff = oldHashArea[offset+1];\n                System.arraycopy(oldHashArea, qoff, q, 0, len);\n                addName(name, q, len);\n                break;\n            }",
    "info" : "SwitchStatement[38648-39518]:SwitchStatement[38745-39615]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[38675-38682]:SwitchCase[38772-38779]"
  }, {
    "left" : "q[0] = oldHashArea[offset];",
    "right" : "q[0] = oldHashArea[offset];",
    "info" : "ExpressionStatement[38699-38726]:ExpressionStatement[38796-38823]"
  }, {
    "left" : "addName(name, q, 1);",
    "right" : "addName(name, q, 1);",
    "info" : "ExpressionStatement[38743-38763]:ExpressionStatement[38840-38860]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38780-38786]:BreakStatement[38877-38883]"
  }, {
    "left" : "case 2:",
    "right" : "case 2:",
    "info" : "SwitchCase[38799-38806]:SwitchCase[38896-38903]"
  }, {
    "left" : "q[0] = oldHashArea[offset];",
    "right" : "q[0] = oldHashArea[offset];",
    "info" : "ExpressionStatement[38823-38850]:ExpressionStatement[38920-38947]"
  }, {
    "left" : "q[1] = oldHashArea[offset+1];",
    "right" : "q[1] = oldHashArea[offset+1];",
    "info" : "ExpressionStatement[38867-38896]:ExpressionStatement[38964-38993]"
  }, {
    "left" : "addName(name, q, 2);",
    "right" : "addName(name, q, 2);",
    "info" : "ExpressionStatement[38913-38933]:ExpressionStatement[39010-39030]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38950-38956]:BreakStatement[39047-39053]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[38969-38976]:SwitchCase[39066-39073]"
  }, {
    "left" : "q[0] = oldHashArea[offset];",
    "right" : "q[0] = oldHashArea[offset];",
    "info" : "ExpressionStatement[38993-39020]:ExpressionStatement[39090-39117]"
  }, {
    "left" : "q[1] = oldHashArea[offset+1];",
    "right" : "q[1] = oldHashArea[offset+1];",
    "info" : "ExpressionStatement[39037-39066]:ExpressionStatement[39134-39163]"
  }, {
    "left" : "q[2] = oldHashArea[offset+2];",
    "right" : "q[2] = oldHashArea[offset+2];",
    "info" : "ExpressionStatement[39083-39112]:ExpressionStatement[39180-39209]"
  }, {
    "left" : "addName(name, q, 3);",
    "right" : "addName(name, q, 3);",
    "info" : "ExpressionStatement[39129-39149]:ExpressionStatement[39226-39246]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39166-39172]:BreakStatement[39263-39269]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[39185-39193]:SwitchCase[39282-39290]"
  }, {
    "left" : "if (len > q.length)",
    "right" : "if (len > q.length)",
    "info" : "IfStatement[39210-39287]:IfStatement[39307-39384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39230-39287]:Block[39327-39384]"
  }, {
    "left" : "q = new int[len];",
    "right" : "q = new int[len];",
    "info" : "ExpressionStatement[39252-39269]:ExpressionStatement[39349-39366]"
  }, {
    "left" : "int qoff = oldHashArea[offset+1];",
    "right" : "int qoff = oldHashArea[offset+1];",
    "info" : "VariableDeclarationStatement[39345-39378]:VariableDeclarationStatement[39442-39475]"
  }, {
    "left" : "System.arraycopy(oldHashArea, qoff, q, 0, len);",
    "right" : "System.arraycopy(oldHashArea, qoff, q, 0, len);",
    "info" : "ExpressionStatement[39395-39442]:ExpressionStatement[39492-39539]"
  }, {
    "left" : "addName(name, q, len);",
    "right" : "addName(name, q, len);",
    "info" : "ExpressionStatement[39459-39481]:ExpressionStatement[39556-39578]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39498-39504]:BreakStatement[39595-39601]"
  }, {
    "left" : "if (copyCount != oldCount)",
    "right" : "if (copyCount != oldCount)",
    "info" : "IfStatement[39652-39800]:IfStatement[39749-39897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39679-39800]:Block[39776-39897]"
  }, {
    "left" : "throw new IllegalStateException(\"Failed rehash(): old count=\"+oldCount+\", copyCount=\"+copyCount);",
    "right" : "throw new IllegalStateException(\"Failed rehash(): old count=\"+oldCount+\", copyCount=\"+copyCount);",
    "info" : "ThrowStatement[39693-39790]:ThrowStatement[39790-39887]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39922-39929]:Modifier[40019-40026]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39930-39934]:PrimitiveType[40027-40031]"
  }, {
    "left" : "nukeSymbols",
    "right" : "nukeSymbols",
    "info" : "SimpleName[39935-39946]:SimpleName[40032-40043]"
  }, {
    "left" : "boolean fill",
    "right" : "boolean fill",
    "info" : "SingleVariableDeclaration[39947-39959]:SingleVariableDeclaration[40044-40056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39961-40326]:Block[40058-40423]"
  }, {
    "left" : "_count = 0;",
    "right" : "_count = 0;",
    "info" : "ExpressionStatement[39971-39982]:ExpressionStatement[40068-40079]"
  }, {
    "left" : "_spilloverEnd = _spilloverStart();",
    "right" : "_spilloverEnd = _spilloverStart();",
    "info" : "ExpressionStatement[40059-40093]:ExpressionStatement[40156-40190]"
  }, {
    "left" : "_longNameOffset = _hashSize << 3;",
    "right" : "_longNameOffset = _hashSize << 3;",
    "info" : "ExpressionStatement[40179-40212]:ExpressionStatement[40276-40309]"
  }, {
    "left" : "if (fill)",
    "right" : "if (fill)",
    "info" : "IfStatement[40221-40320]:IfStatement[40318-40417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40231-40320]:Block[40328-40417]"
  }, {
    "left" : "Arrays.fill(_hashArea, 0);",
    "right" : "Arrays.fill(_hashArea, 0);",
    "info" : "ExpressionStatement[40245-40271]:ExpressionStatement[40342-40368]"
  }, {
    "left" : "Arrays.fill(_names, null);",
    "right" : "Arrays.fill(_names, null);",
    "info" : "ExpressionStatement[40284-40310]:ExpressionStatement[40381-40407]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40579-40586]:Modifier[40676-40683]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[40587-40592]:Modifier[40684-40689]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[40593-40596]:PrimitiveType[40690-40693]"
  }, {
    "left" : "_spilloverStart",
    "right" : "_spilloverStart",
    "info" : "SimpleName[40597-40612]:SimpleName[40694-40709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40615-40806]:Block[40712-40903]"
  }, {
    "left" : "int offset = _hashSize;",
    "right" : "int offset = _hashSize;",
    "info" : "VariableDeclarationStatement[40738-40761]:VariableDeclarationStatement[40835-40858]"
  }, {
    "left" : "return (offset << 3) - offset;",
    "right" : "return (offset << 3) - offset;",
    "info" : "ReturnStatement[40770-40800]:ReturnStatement[40867-40897]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[40812-40821]:Modifier[40909-40918]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40822-40826]:PrimitiveType[40919-40923]"
  }, {
    "left" : "_reportTooManyCollisions",
    "right" : "_reportTooManyCollisions",
    "info" : "SimpleName[40827-40851]:SimpleName[40924-40948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40858-41426]:Block[40955-41523]"
  }, {
    "left" : "if (_hashSize <= 1024)",
    "right" : "if (_hashSize <= 1024)",
    "info" : "IfStatement[40957-41056]:IfStatement[41054-41153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40980-41056]:Block[41077-41153]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[41039-41046]:ReturnStatement[41136-41143]"
  }, {
    "left" : "throw new IllegalStateException(\"Spill-over slots in symbol table with \"+_count\n                +\" entries, hash area of \"+_hashSize+\" slots is now full (all \"\n                +(_hashSize >> 3)+\" slots -- suspect a DoS attack based on hash collisions.\"\n                +\" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`\");",
    "right" : "throw new IllegalStateException(\"Spill-over slots in symbol table with \"+_count\n                +\" entries, hash area of \"+_hashSize+\" slots is now full (all \"\n                +(_hashSize >> 3)+\" slots -- suspect a DoS attack based on hash collisions.\"\n                +\" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`\");",
    "info" : "ThrowStatement[41065-41420]:ThrowStatement[41162-41517]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41432-41438]:Modifier[41529-41535]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[41439-41442]:PrimitiveType[41536-41539]"
  }, {
    "left" : "_calcTertiaryShift",
    "right" : "_calcTertiaryShift",
    "info" : "SimpleName[41443-41461]:SimpleName[41540-41558]"
  }, {
    "left" : "int primarySlots",
    "right" : "int primarySlots",
    "info" : "SingleVariableDeclaration[41462-41478]:SingleVariableDeclaration[41559-41575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41484-42027]:Block[41581-42124]"
  }, {
    "left" : "int tertSlots = (primarySlots) >> 2;",
    "right" : "int tertSlots = (primarySlots) >> 2;",
    "info" : "VariableDeclarationStatement[41559-41595]:VariableDeclarationStatement[41656-41692]"
  }, {
    "left" : "if (tertSlots < 64)",
    "right" : "if (tertSlots < 64)",
    "info" : "IfStatement[41685-41738]:IfStatement[41782-41835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41705-41738]:Block[41802-41835]"
  }, {
    "left" : "return 4;",
    "right" : "return 4;",
    "info" : "ReturnStatement[41719-41728]:ReturnStatement[41816-41825]"
  }, {
    "left" : "if (tertSlots <= 256)",
    "right" : "if (tertSlots <= 256)",
    "info" : "IfStatement[41747-41846]:IfStatement[41844-41943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41769-41846]:Block[41866-41943]"
  }, {
    "left" : "return 5;",
    "right" : "return 5;",
    "info" : "ReturnStatement[41827-41836]:ReturnStatement[41924-41933]"
  }, {
    "left" : "if (tertSlots <= 1024)",
    "right" : "if (tertSlots <= 1024)",
    "info" : "IfStatement[41855-41958]:IfStatement[41952-42055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41878-41958]:Block[41975-42055]"
  }, {
    "left" : "return 6;",
    "right" : "return 6;",
    "info" : "ReturnStatement[41939-41948]:ReturnStatement[42036-42045]"
  }, {
    "left" : "return 7;",
    "right" : "return 7;",
    "info" : "ReturnStatement[42012-42021]:ReturnStatement[42109-42118]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42427-42434]:Modifier[42524-42531]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[42435-42440]:Modifier[42532-42537]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42441-42447]:Modifier[42538-42544]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[42448-42453]:TYPE_DECLARATION_KIND[42545-42550]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42736-42742]:Modifier[42833-42839]"
  }, {
    "left" : "TableInfo",
    "right" : "TableInfo",
    "info" : "SimpleName[42743-42752]:SimpleName[42840-42849]"
  }, {
    "left" : "int size",
    "right" : "int size",
    "info" : "SingleVariableDeclaration[42753-42761]:SingleVariableDeclaration[42850-42858]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[42763-42772]:SingleVariableDeclaration[42860-42869]"
  }, {
    "left" : "int tertiaryShift",
    "right" : "int tertiaryShift",
    "info" : "SingleVariableDeclaration[42774-42791]:SingleVariableDeclaration[42871-42888]"
  }, {
    "left" : "int[] mainHash",
    "right" : "int[] mainHash",
    "info" : "SingleVariableDeclaration[42810-42824]:SingleVariableDeclaration[42907-42921]"
  }, {
    "left" : "String[] names",
    "right" : "String[] names",
    "info" : "SingleVariableDeclaration[42826-42840]:SingleVariableDeclaration[42923-42937]"
  }, {
    "left" : "int spilloverEnd",
    "right" : "int spilloverEnd",
    "info" : "SingleVariableDeclaration[42842-42858]:SingleVariableDeclaration[42939-42955]"
  }, {
    "left" : "int longNameOffset",
    "right" : "int longNameOffset",
    "info" : "SingleVariableDeclaration[42860-42878]:SingleVariableDeclaration[42957-42975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42888-43175]:Block[42985-43272]"
  }, {
    "left" : "this.size = size;",
    "right" : "this.size = size;",
    "info" : "ExpressionStatement[42902-42919]:ExpressionStatement[42999-43016]"
  }, {
    "left" : "this.count = count;",
    "right" : "this.count = count;",
    "info" : "ExpressionStatement[42932-42951]:ExpressionStatement[43029-43048]"
  }, {
    "left" : "this.tertiaryShift = tertiaryShift;",
    "right" : "this.tertiaryShift = tertiaryShift;",
    "info" : "ExpressionStatement[42964-42999]:ExpressionStatement[43061-43096]"
  }, {
    "left" : "this.mainHash = mainHash;",
    "right" : "this.mainHash = mainHash;",
    "info" : "ExpressionStatement[43012-43037]:ExpressionStatement[43109-43134]"
  }, {
    "left" : "this.names = names;",
    "right" : "this.names = names;",
    "info" : "ExpressionStatement[43050-43069]:ExpressionStatement[43147-43166]"
  }, {
    "left" : "this.spilloverEnd = spilloverEnd;",
    "right" : "this.spilloverEnd = spilloverEnd;",
    "info" : "ExpressionStatement[43082-43115]:ExpressionStatement[43179-43212]"
  }, {
    "left" : "this.longNameOffset = longNameOffset;",
    "right" : "this.longNameOffset = longNameOffset;",
    "info" : "ExpressionStatement[43128-43165]:ExpressionStatement[43225-43262]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43185-43191]:Modifier[43282-43288]"
  }, {
    "left" : "TableInfo",
    "right" : "TableInfo",
    "info" : "SimpleName[43192-43201]:SimpleName[43289-43298]"
  }, {
    "left" : "ByteQuadsCanonicalizer src",
    "right" : "ByteQuadsCanonicalizer src",
    "info" : "SingleVariableDeclaration[43202-43228]:SingleVariableDeclaration[43299-43325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43238-43529]:Block[43335-43626]"
  }, {
    "left" : "size = src._hashSize;",
    "right" : "size = src._hashSize;",
    "info" : "ExpressionStatement[43252-43273]:ExpressionStatement[43349-43370]"
  }, {
    "left" : "count = src._count;",
    "right" : "count = src._count;",
    "info" : "ExpressionStatement[43286-43305]:ExpressionStatement[43383-43402]"
  }, {
    "left" : "tertiaryShift = src._tertiaryShift;",
    "right" : "tertiaryShift = src._tertiaryShift;",
    "info" : "ExpressionStatement[43318-43353]:ExpressionStatement[43415-43450]"
  }, {
    "left" : "mainHash = src._hashArea;",
    "right" : "mainHash = src._hashArea;",
    "info" : "ExpressionStatement[43366-43391]:ExpressionStatement[43463-43488]"
  }, {
    "left" : "names = src._names;",
    "right" : "names = src._names;",
    "info" : "ExpressionStatement[43404-43423]:ExpressionStatement[43501-43520]"
  }, {
    "left" : "spilloverEnd = src._spilloverEnd;",
    "right" : "spilloverEnd = src._spilloverEnd;",
    "info" : "ExpressionStatement[43436-43469]:ExpressionStatement[43533-43566]"
  }, {
    "left" : "longNameOffset = src._longNameOffset;",
    "right" : "longNameOffset = src._longNameOffset;",
    "info" : "ExpressionStatement[43482-43519]:ExpressionStatement[43579-43616]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43539-43545]:Modifier[43636-43642]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43546-43552]:Modifier[43643-43649]"
  }, {
    "left" : "TableInfo",
    "right" : "TableInfo",
    "info" : "SimpleType[43553-43562]:SimpleType[43650-43659]"
  }, {
    "left" : "createInitial",
    "right" : "createInitial",
    "info" : "SimpleName[43563-43576]:SimpleName[43660-43673]"
  }, {
    "left" : "int sz",
    "right" : "int sz",
    "info" : "SingleVariableDeclaration[43577-43583]:SingleVariableDeclaration[43674-43680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43585-44109]:Block[43682-44206]"
  }, {
    "left" : "int hashAreaSize = sz << 3;",
    "right" : "int hashAreaSize = sz << 3;",
    "info" : "VariableDeclarationStatement[43599-43626]:VariableDeclarationStatement[43696-43723]"
  }, {
    "left" : "int tertShift = _calcTertiaryShift(sz);",
    "right" : "int tertShift = _calcTertiaryShift(sz);",
    "info" : "VariableDeclarationStatement[43639-43678]:VariableDeclarationStatement[43736-43775]"
  }, {
    "left" : "return new TableInfo(sz, // hashSize\n                    0, // count\n                    tertShift,\n                    new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot\n                    new String[sz << 1], // names == 2x slots\n                    hashAreaSize - sz, // at 7/8 of the total area\n                    hashAreaSize // longNameOffset, immediately after main hashes\n            );",
    "right" : "return new TableInfo(sz, // hashSize\n                    0, // count\n                    tertShift,\n                    new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot\n                    new String[sz << 1], // names == 2x slots\n                    hashAreaSize - sz, // at 7/8 of the total area\n                    hashAreaSize // longNameOffset, immediately after main hashes\n            );",
    "info" : "ReturnStatement[43692-44099]:ReturnStatement[43789-44196]"
  } ]
}