{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final long MILLIS_PER_SECOND = 1000;",
      "right" : "public static final long MILLIS_PER_SECOND = 1000;",
      "info" : "FieldDeclaration[2265-2401]:FieldDeclaration[2265-2401]"
    }, {
      "left" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "right" : "public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;",
      "info" : "FieldDeclaration[2406-2560]:FieldDeclaration[2406-2560]"
    }, {
      "left" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "right" : "public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;",
      "info" : "FieldDeclaration[2565-2715]:FieldDeclaration[2565-2715]"
    }, {
      "left" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "right" : "public static final long MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;",
      "info" : "FieldDeclaration[2720-2866]:FieldDeclaration[2720-2866]"
    }, {
      "left" : "public static final int SEMI_MONTH = 1001;",
      "right" : "public static final int SEMI_MONTH = 1001;",
      "info" : "FieldDeclaration[2872-3043]:FieldDeclaration[2872-3043]"
    }, {
      "left" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "right" : "private static final int[][] fields = {\n            {Calendar.MILLISECOND},\n            {Calendar.SECOND},\n            {Calendar.MINUTE},\n            {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM \n                \n            },\n            {Calendar.MONTH, DateUtils.SEMI_MONTH},\n            {Calendar.YEAR},\n            {Calendar.ERA}};",
      "info" : "FieldDeclaration[3049-3525]:FieldDeclaration[3049-3525]"
    }, {
      "left" : "public static final int RANGE_WEEK_SUNDAY = 1;",
      "right" : "public static final int RANGE_WEEK_SUNDAY = 1;",
      "info" : "FieldDeclaration[3531-3634]:FieldDeclaration[3531-3634]"
    }, {
      "left" : "public static final int RANGE_WEEK_MONDAY = 2;",
      "right" : "public static final int RANGE_WEEK_MONDAY = 2;",
      "info" : "FieldDeclaration[3639-3742]:FieldDeclaration[3639-3742]"
    }, {
      "left" : "public static final int RANGE_WEEK_RELATIVE = 3;",
      "right" : "public static final int RANGE_WEEK_RELATIVE = 3;",
      "info" : "FieldDeclaration[3747-3861]:FieldDeclaration[3747-3861]"
    }, {
      "left" : "public static final int RANGE_WEEK_CENTER = 4;",
      "right" : "public static final int RANGE_WEEK_CENTER = 4;",
      "info" : "FieldDeclaration[3866-3982]:FieldDeclaration[3866-3982]"
    }, {
      "left" : "public static final int RANGE_MONTH_SUNDAY = 5;",
      "right" : "public static final int RANGE_MONTH_SUNDAY = 5;",
      "info" : "FieldDeclaration[3987-4101]:FieldDeclaration[3987-4101]"
    }, {
      "left" : "public static final int RANGE_MONTH_MONDAY = 6;",
      "right" : "public static final int RANGE_MONTH_MONDAY = 6;",
      "info" : "FieldDeclaration[4106-4220]:FieldDeclaration[4106-4220]"
    }, {
      "left" : "enum : ModifyType",
      "right" : "enum : ModifyType",
      "info" : "EnumDeclaration[4226-4514]:EnumDeclaration[4226-4514]"
    }, {
      "left" : "public DateUtils()",
      "right" : "public DateUtils()",
      "info" : "MethodDeclaration[4520-4902]:MethodDeclaration[4520-4902]"
    }, {
      "left" : "public static boolean isSameDay(final Date date1, final Date date2)",
      "right" : "public static boolean isSameDay(final Date date1, final Date date2)",
      "info" : "MethodDeclaration[4986-5917]:MethodDeclaration[4986-5917]"
    }, {
      "left" : "public static boolean isSameDay(final Calendar cal1, final Calendar cal2)",
      "right" : "public static boolean isSameDay(final Calendar cal1, final Calendar cal2)",
      "info" : "MethodDeclaration[5923-6887]:MethodDeclaration[5923-6887]"
    }, {
      "left" : "public static boolean isSameInstant(final Date date1, final Date date2)",
      "right" : "public static boolean isSameInstant(final Date date1, final Date date2)",
      "info" : "MethodDeclaration[6971-7703]:MethodDeclaration[6971-7703]"
    }, {
      "left" : "public static boolean isSameInstant(final Calendar cal1, final Calendar cal2)",
      "right" : "public static boolean isSameInstant(final Calendar cal1, final Calendar cal2)",
      "info" : "MethodDeclaration[7709-8473]:MethodDeclaration[7709-8473]"
    }, {
      "left" : "public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2)",
      "right" : "public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2)",
      "info" : "MethodDeclaration[8557-9907]:MethodDeclaration[8557-9907]"
    }, {
      "left" : "public static Date parseDate(final String str, final String... parsePatterns) throws ParseException",
      "right" : "public static Date parseDate(final String str, final String... parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[9991-10890]:MethodDeclaration[9991-10890]"
    }, {
      "left" : "public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException",
      "right" : "public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[10978-12180]:MethodDeclaration[10978-12180]"
    }, {
      "left" : "public static Date parseDateStrictly(final String str, final String... parsePatterns) throws ParseException",
      "right" : "public static Date parseDateStrictly(final String str, final String... parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[12266-13215]:MethodDeclaration[12266-13215]"
    }, {
      "left" : "public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException",
      "right" : "public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException",
      "info" : "MethodDeclaration[13221-14457]:MethodDeclaration[13221-14457]"
    }, {
      "left" : "private static Date parseDateWithLeniency(\n            final String str, final Locale locale, final String[] parsePatterns, final boolean lenient) throws ParseException",
      "right" : "private static Date parseDateWithLeniency(\n            final String str, final Locale locale, final String[] parsePatterns, final boolean lenient) throws ParseException",
      "info" : "MethodDeclaration[14467-16589]:MethodDeclaration[14467-16589]"
    }, {
      "left" : "public static Date addYears(final Date date, final int amount)",
      "right" : "public static Date addYears(final Date date, final int amount)",
      "info" : "MethodDeclaration[16673-17140]:MethodDeclaration[16673-17140]"
    }, {
      "left" : "public static Date addMonths(final Date date, final int amount)",
      "right" : "public static Date addMonths(final Date date, final int amount)",
      "info" : "MethodDeclaration[17224-17694]:MethodDeclaration[17224-17694]"
    }, {
      "left" : "public static Date addWeeks(final Date date, final int amount)",
      "right" : "public static Date addWeeks(final Date date, final int amount)",
      "info" : "MethodDeclaration[17778-18253]:MethodDeclaration[17778-18253]"
    }, {
      "left" : "public static Date addDays(final Date date, final int amount)",
      "right" : "public static Date addDays(final Date date, final int amount)",
      "info" : "MethodDeclaration[18337-18810]:MethodDeclaration[18337-18810]"
    }, {
      "left" : "public static Date addHours(final Date date, final int amount)",
      "right" : "public static Date addHours(final Date date, final int amount)",
      "info" : "MethodDeclaration[18894-19368]:MethodDeclaration[18894-19368]"
    }, {
      "left" : "public static Date addMinutes(final Date date, final int amount)",
      "right" : "public static Date addMinutes(final Date date, final int amount)",
      "info" : "MethodDeclaration[19452-19925]:MethodDeclaration[19452-19925]"
    }, {
      "left" : "public static Date addSeconds(final Date date, final int amount)",
      "right" : "public static Date addSeconds(final Date date, final int amount)",
      "info" : "MethodDeclaration[20009-20482]:MethodDeclaration[20009-20482]"
    }, {
      "left" : "public static Date addMilliseconds(final Date date, final int amount)",
      "right" : "public static Date addMilliseconds(final Date date, final int amount)",
      "info" : "MethodDeclaration[20566-21054]:MethodDeclaration[20566-21054]"
    }, {
      "left" : "private static Date add(final Date date, final int calendarField, final int amount)",
      "right" : "private static Date add(final Date date, final int calendarField, final int amount)",
      "info" : "MethodDeclaration[21138-21874]:MethodDeclaration[21138-21874]"
    }, {
      "left" : "public static Date setYears(final Date date, final int amount)",
      "right" : "public static Date setYears(final Date date, final int amount)",
      "info" : "MethodDeclaration[21962-22432]:MethodDeclaration[21962-22432]"
    }, {
      "left" : "public static Date setMonths(final Date date, final int amount)",
      "right" : "public static Date setMonths(final Date date, final int amount)",
      "info" : "MethodDeclaration[22516-22989]:MethodDeclaration[22516-22989]"
    }, {
      "left" : "public static Date setDays(final Date date, final int amount)",
      "right" : "public static Date setDays(final Date date, final int amount)",
      "info" : "MethodDeclaration[23073-23557]:MethodDeclaration[23073-23557]"
    }, {
      "left" : "public static Date setHours(final Date date, final int amount)",
      "right" : "public static Date setHours(final Date date, final int amount)",
      "info" : "MethodDeclaration[23641-24151]:MethodDeclaration[23641-24151]"
    }, {
      "left" : "public static Date setMinutes(final Date date, final int amount)",
      "right" : "public static Date setMinutes(final Date date, final int amount)",
      "info" : "MethodDeclaration[24235-24710]:MethodDeclaration[24235-24710]"
    }, {
      "left" : "public static Date setSeconds(final Date date, final int amount)",
      "right" : "public static Date setSeconds(final Date date, final int amount)",
      "info" : "MethodDeclaration[24798-25274]:MethodDeclaration[24798-25274]"
    }, {
      "left" : "public static Date setMilliseconds(final Date date, final int amount)",
      "right" : "public static Date setMilliseconds(final Date date, final int amount)",
      "info" : "MethodDeclaration[25358-25849]:MethodDeclaration[25358-25849]"
    }, {
      "left" : "private static Date set(final Date date, final int calendarField, final int amount)",
      "right" : "private static Date set(final Date date, final int calendarField, final int amount)",
      "info" : "MethodDeclaration[25938-26872]:MethodDeclaration[25938-26872]"
    }, {
      "left" : "public static Calendar toCalendar(final Date date)",
      "right" : "public static Calendar toCalendar(final Date date)",
      "info" : "MethodDeclaration[26959-27356]:MethodDeclaration[26959-27356]"
    }, {
      "left" : "public static Date round(final Date date, final int field)",
      "right" : "public static Date round(final Date date, final int field)",
      "info" : "MethodDeclaration[27920-29493]:MethodDeclaration[28009-29582]"
    }, {
      "left" : "public static Calendar round(final Calendar date, final int field)",
      "right" : "public static Calendar round(final Calendar date, final int field)",
      "info" : "MethodDeclaration[29499-31130]:MethodDeclaration[29588-31219]"
    }, {
      "left" : "public static Date round(final Object date, final int field)",
      "right" : "public static Date round(final Object date, final int field)",
      "info" : "MethodDeclaration[31136-33050]:MethodDeclaration[31225-33139]"
    }, {
      "left" : "public static Date truncate(final Date date, final int field)",
      "right" : "public static Date truncate(final Date date, final int field)",
      "info" : "MethodDeclaration[33134-34177]:MethodDeclaration[33223-34266]"
    }, {
      "left" : "public static Calendar truncate(final Calendar date, final int field)",
      "right" : "public static Calendar truncate(final Calendar date, final int field)",
      "info" : "MethodDeclaration[34183-35212]:MethodDeclaration[34272-35301]"
    }, {
      "left" : "public static Date truncate(final Object date, final int field)",
      "right" : "public static Date truncate(final Object date, final int field)",
      "info" : "MethodDeclaration[35218-36530]:MethodDeclaration[35307-36619]"
    }, {
      "left" : "public static Date ceiling(final Date date, final int field)",
      "right" : "public static Date ceiling(final Date date, final int field)",
      "info" : "MethodDeclaration[36616-37673]:MethodDeclaration[36705-37762]"
    }, {
      "left" : "public static Calendar ceiling(final Calendar date, final int field)",
      "right" : "public static Calendar ceiling(final Calendar date, final int field)",
      "info" : "MethodDeclaration[37679-38713]:MethodDeclaration[37768-38802]"
    }, {
      "left" : "public static Date ceiling(final Object date, final int field)",
      "right" : "public static Date ceiling(final Object date, final int field)",
      "info" : "MethodDeclaration[38719-40072]:MethodDeclaration[38808-40161]"
    }, {
      "left" : "private static void modify(final Calendar val, final int field, final ModifyType modType)",
      "right" : "private static void modify(final Calendar val, final int field, final ModifyType modType)",
      "info" : "MethodDeclaration[40156-46586]:MethodDeclaration[40245-46675]"
    }, {
      "left" : "public static Iterator<Calendar> iterator(final Date focus, final int rangeStyle)",
      "right" : "public static Iterator<Calendar> iterator(final Date focus, final int rangeStyle)",
      "info" : "MethodDeclaration[46670-48188]:MethodDeclaration[46759-48277]"
    }, {
      "left" : "public static Iterator<Calendar> iterator(final Calendar focus, final int rangeStyle)",
      "right" : "public static Iterator<Calendar> iterator(final Calendar focus, final int rangeStyle)",
      "info" : "MethodDeclaration[48194-52317]:MethodDeclaration[48283-52406]"
    }, {
      "left" : "public static Iterator<?> iterator(final Object focus, final int rangeStyle)",
      "right" : "public static Iterator<?> iterator(final Object focus, final int rangeStyle)",
      "info" : "MethodDeclaration[52323-53732]:MethodDeclaration[52412-53821]"
    }, {
      "left" : "public static long getFragmentInMilliseconds(final Date date, final int fragment)",
      "right" : "public static long getFragmentInMilliseconds(final Date date, final int fragment)",
      "info" : "MethodDeclaration[53742-55649]:MethodDeclaration[53831-55738]"
    }, {
      "left" : "public static long getFragmentInSeconds(final Date date, final int fragment)",
      "right" : "public static long getFragmentInSeconds(final Date date, final int fragment)",
      "info" : "MethodDeclaration[55659-57628]:MethodDeclaration[55748-57717]"
    }, {
      "left" : "public static long getFragmentInMinutes(final Date date, final int fragment)",
      "right" : "public static long getFragmentInMinutes(final Date date, final int fragment)",
      "info" : "MethodDeclaration[57638-59660]:MethodDeclaration[57727-59749]"
    }, {
      "left" : "public static long getFragmentInHours(final Date date, final int fragment)",
      "right" : "public static long getFragmentInHours(final Date date, final int fragment)",
      "info" : "MethodDeclaration[59670-61649]:MethodDeclaration[59759-61738]"
    }, {
      "left" : "public static long getFragmentInDays(final Date date, final int fragment)",
      "right" : "public static long getFragmentInDays(final Date date, final int fragment)",
      "info" : "MethodDeclaration[61659-63550]:MethodDeclaration[61748-63639]"
    }, {
      "left" : "public static long getFragmentInMilliseconds(final Calendar calendar, final int fragment)",
      "right" : "public static long getFragmentInMilliseconds(final Calendar calendar, final int fragment)",
      "info" : "MethodDeclaration[63556-65602]:MethodDeclaration[63645-65691]"
    }, {
      "left" : "public static long getFragmentInSeconds(final Calendar calendar, final int fragment)",
      "right" : "public static long getFragmentInSeconds(final Calendar calendar, final int fragment)",
      "info" : "MethodDeclaration[65607-67603]:MethodDeclaration[65696-67692]"
    }, {
      "left" : "public static long getFragmentInMinutes(final Calendar calendar, final int fragment)",
      "right" : "public static long getFragmentInMinutes(final Calendar calendar, final int fragment)",
      "info" : "MethodDeclaration[67613-69663]:MethodDeclaration[67702-69752]"
    }, {
      "left" : "public static long getFragmentInHours(final Calendar calendar, final int fragment)",
      "right" : "public static long getFragmentInHours(final Calendar calendar, final int fragment)",
      "info" : "MethodDeclaration[69673-71694]:MethodDeclaration[69762-71783]"
    }, {
      "left" : "public static long getFragmentInDays(final Calendar calendar, final int fragment)",
      "right" : "public static long getFragmentInDays(final Calendar calendar, final int fragment)",
      "info" : "MethodDeclaration[71704-73759]:MethodDeclaration[71793-73848]"
    }, {
      "left" : "private static long getFragment(final Date date, final int fragment, final TimeUnit unit)",
      "right" : "private static long getFragment(final Date date, final int fragment, final TimeUnit unit)",
      "info" : "MethodDeclaration[73769-74535]:MethodDeclaration[73858-74624]"
    }, {
      "left" : "private static long getFragment(final Calendar calendar, final int fragment, final TimeUnit unit)",
      "right" : "private static long getFragment(final Calendar calendar, final int fragment, final TimeUnit unit)",
      "info" : "MethodDeclaration[74541-76849]:MethodDeclaration[74630-76938]"
    }, {
      "left" : "public static boolean truncatedEquals(final Calendar cal1, final Calendar cal2, final int field)",
      "right" : "public static boolean truncatedEquals(final Calendar cal1, final Calendar cal2, final int field)",
      "info" : "MethodDeclaration[76859-77581]:MethodDeclaration[76948-77670]"
    }, {
      "left" : "public static boolean truncatedEquals(final Date date1, final Date date2, final int field)",
      "right" : "public static boolean truncatedEquals(final Date date1, final Date date2, final int field)",
      "info" : "MethodDeclaration[77587-78299]:MethodDeclaration[77676-78388]"
    }, {
      "left" : "public static int truncatedCompareTo(final Calendar cal1, final Calendar cal2, final int field)",
      "right" : "public static int truncatedCompareTo(final Calendar cal1, final Calendar cal2, final int field)",
      "info" : "MethodDeclaration[78305-79221]:MethodDeclaration[78394-79310]"
    }, {
      "left" : "public static int truncatedCompareTo(final Date date1, final Date date2, final int field)",
      "right" : "public static int truncatedCompareTo(final Date date1, final Date date2, final int field)",
      "info" : "MethodDeclaration[79227-80126]:MethodDeclaration[79316-80215]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "TypeDeclaration[80211-81809]:TypeDeclaration[80300-81898]"
    }, {
      "left" : "private final Calendar endFinal;",
      "right" : "private final Calendar endFinal;",
      "info" : "FieldDeclaration[80322-80354]:FieldDeclaration[80411-80443]"
    }, {
      "left" : "private final Calendar spot;",
      "right" : "private final Calendar spot;",
      "info" : "FieldDeclaration[80363-80391]:FieldDeclaration[80452-80480]"
    }, {
      "left" : "DateIterator(final Calendar startFinal, final Calendar endFinal)",
      "right" : "DateIterator(final Calendar startFinal, final Calendar endFinal)",
      "info" : "MethodDeclaration[80409-80827]:MethodDeclaration[80498-80916]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[80837-81109]:MethodDeclaration[80926-81198]"
    }, {
      "left" : "public Calendar next()",
      "right" : "public Calendar next()",
      "info" : "MethodDeclaration[81119-81503]:MethodDeclaration[81208-81592]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[81513-81803]:MethodDeclaration[81602-81892]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4859-4865]:Modifier[4859-4865]"
    }, {
      "left" : "DateUtils",
      "right" : "DateUtils",
      "info" : "SimpleName[4866-4875]:SimpleName[4866-4875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4878-4902]:Block[4878-4902]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[4888-4896]:SuperConstructorInvocation[4888-4896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5505-5511]:Modifier[5505-5511]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5512-5518]:Modifier[5512-5518]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5519-5526]:PrimitiveType[5519-5526]"
    }, {
      "left" : "isSameDay",
      "right" : "isSameDay",
      "info" : "SimpleName[5527-5536]:SimpleName[5527-5536]"
    }, {
      "left" : "final Date date1",
      "right" : "final Date date1",
      "info" : "SingleVariableDeclaration[5537-5553]:SingleVariableDeclaration[5537-5553]"
    }, {
      "left" : "final Date date2",
      "right" : "final Date date2",
      "info" : "SingleVariableDeclaration[5555-5571]:SingleVariableDeclaration[5555-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5573-5917]:Block[5573-5917]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[5583-5707]:IfStatement[5583-5707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5619-5707]:Block[5619-5707]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[5633-5697]:ThrowStatement[5633-5697]"
    }, {
      "left" : "final Calendar cal1 = Calendar.getInstance();",
      "right" : "final Calendar cal1 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[5716-5761]:VariableDeclarationStatement[5716-5761]"
    }, {
      "left" : "cal1.setTime(date1);",
      "right" : "cal1.setTime(date1);",
      "info" : "ExpressionStatement[5770-5790]:ExpressionStatement[5770-5790]"
    }, {
      "left" : "final Calendar cal2 = Calendar.getInstance();",
      "right" : "final Calendar cal2 = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[5799-5844]:VariableDeclarationStatement[5799-5844]"
    }, {
      "left" : "cal2.setTime(date2);",
      "right" : "cal2.setTime(date2);",
      "info" : "ExpressionStatement[5853-5873]:ExpressionStatement[5853-5873]"
    }, {
      "left" : "return isSameDay(cal1, cal2);",
      "right" : "return isSameDay(cal1, cal2);",
      "info" : "ReturnStatement[5882-5911]:ReturnStatement[5882-5911]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6456-6462]:Modifier[6456-6462]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6463-6469]:Modifier[6463-6469]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6470-6477]:PrimitiveType[6470-6477]"
    }, {
      "left" : "isSameDay",
      "right" : "isSameDay",
      "info" : "SimpleName[6478-6487]:SimpleName[6478-6487]"
    }, {
      "left" : "final Calendar cal1",
      "right" : "final Calendar cal1",
      "info" : "SingleVariableDeclaration[6488-6507]:SingleVariableDeclaration[6488-6507]"
    }, {
      "left" : "final Calendar cal2",
      "right" : "final Calendar cal2",
      "info" : "SingleVariableDeclaration[6509-6528]:SingleVariableDeclaration[6509-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6530-6887]:Block[6530-6887]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[6540-6662]:IfStatement[6540-6662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6574-6662]:Block[6574-6662]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[6588-6652]:ThrowStatement[6588-6652]"
    }, {
      "left" : "return cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);",
      "right" : "return cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);",
      "info" : "ReturnStatement[6671-6881]:ReturnStatement[6671-6881]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7440-7446]:Modifier[7440-7446]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7447-7453]:Modifier[7447-7453]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7454-7461]:PrimitiveType[7454-7461]"
    }, {
      "left" : "isSameInstant",
      "right" : "isSameInstant",
      "info" : "SimpleName[7462-7475]:SimpleName[7462-7475]"
    }, {
      "left" : "final Date date1",
      "right" : "final Date date1",
      "info" : "SingleVariableDeclaration[7476-7492]:SingleVariableDeclaration[7476-7492]"
    }, {
      "left" : "final Date date2",
      "right" : "final Date date2",
      "info" : "SingleVariableDeclaration[7494-7510]:SingleVariableDeclaration[7494-7510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7512-7703]:Block[7512-7703]"
    }, {
      "left" : "if (date1 == null || date2 == null)",
      "right" : "if (date1 == null || date2 == null)",
      "info" : "IfStatement[7522-7646]:IfStatement[7522-7646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7558-7646]:Block[7558-7646]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[7572-7636]:ThrowStatement[7572-7636]"
    }, {
      "left" : "return date1.getTime() == date2.getTime();",
      "right" : "return date1.getTime() == date2.getTime();",
      "info" : "ReturnStatement[7655-7697]:ReturnStatement[7655-7697]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8188-8194]:Modifier[8188-8194]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8195-8201]:Modifier[8195-8201]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8202-8209]:PrimitiveType[8202-8209]"
    }, {
      "left" : "isSameInstant",
      "right" : "isSameInstant",
      "info" : "SimpleName[8210-8223]:SimpleName[8210-8223]"
    }, {
      "left" : "final Calendar cal1",
      "right" : "final Calendar cal1",
      "info" : "SingleVariableDeclaration[8224-8243]:SingleVariableDeclaration[8224-8243]"
    }, {
      "left" : "final Calendar cal2",
      "right" : "final Calendar cal2",
      "info" : "SingleVariableDeclaration[8245-8264]:SingleVariableDeclaration[8245-8264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8266-8473]:Block[8266-8473]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[8276-8398]:IfStatement[8276-8398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8310-8398]:Block[8310-8398]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[8324-8388]:ThrowStatement[8324-8388]"
    }, {
      "left" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "right" : "return cal1.getTime().getTime() == cal2.getTime().getTime();",
      "info" : "ReturnStatement[8407-8467]:ReturnStatement[8407-8467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9100-9106]:Modifier[9100-9106]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9107-9113]:Modifier[9107-9113]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9114-9121]:PrimitiveType[9114-9121]"
    }, {
      "left" : "isSameLocalTime",
      "right" : "isSameLocalTime",
      "info" : "SimpleName[9122-9137]:SimpleName[9122-9137]"
    }, {
      "left" : "final Calendar cal1",
      "right" : "final Calendar cal1",
      "info" : "SingleVariableDeclaration[9138-9157]:SingleVariableDeclaration[9138-9157]"
    }, {
      "left" : "final Calendar cal2",
      "right" : "final Calendar cal2",
      "info" : "SingleVariableDeclaration[9159-9178]:SingleVariableDeclaration[9159-9178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9180-9907]:Block[9180-9907]"
    }, {
      "left" : "if (cal1 == null || cal2 == null)",
      "right" : "if (cal1 == null || cal2 == null)",
      "info" : "IfStatement[9190-9312]:IfStatement[9190-9312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9224-9312]:Block[9224-9312]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[9238-9302]:ThrowStatement[9238-9302]"
    }, {
      "left" : "return cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass();",
      "right" : "return cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n                cal1.getClass() == cal2.getClass();",
      "info" : "ReturnStatement[9321-9901]:ReturnStatement[9321-9901]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10731-10737]:Modifier[10731-10737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10738-10744]:Modifier[10738-10744]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[10745-10749]:SimpleType[10745-10749]"
    }, {
      "left" : "parseDate",
      "right" : "parseDate",
      "info" : "SimpleName[10750-10759]:SimpleName[10750-10759]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[10760-10776]:SingleVariableDeclaration[10760-10776]"
    }, {
      "left" : "final String... parsePatterns",
      "right" : "final String... parsePatterns",
      "info" : "SingleVariableDeclaration[10778-10807]:SingleVariableDeclaration[10778-10807]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[10816-10830]:SimpleType[10816-10830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10831-10890]:Block[10831-10890]"
    }, {
      "left" : "return parseDate(str, null, parsePatterns);",
      "right" : "return parseDate(str, null, parsePatterns);",
      "info" : "ReturnStatement[10841-10884]:ReturnStatement[10841-10884]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11980-11986]:Modifier[11980-11986]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11987-11993]:Modifier[11987-11993]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[11994-11998]:SimpleType[11994-11998]"
    }, {
      "left" : "parseDate",
      "right" : "parseDate",
      "info" : "SimpleName[11999-12008]:SimpleName[11999-12008]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[12009-12025]:SingleVariableDeclaration[12009-12025]"
    }, {
      "left" : "final Locale locale",
      "right" : "final Locale locale",
      "info" : "SingleVariableDeclaration[12027-12046]:SingleVariableDeclaration[12027-12046]"
    }, {
      "left" : "final String... parsePatterns",
      "right" : "final String... parsePatterns",
      "info" : "SingleVariableDeclaration[12048-12077]:SingleVariableDeclaration[12048-12077]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[12086-12100]:SimpleType[12086-12100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12101-12180]:Block[12101-12180]"
    }, {
      "left" : "return parseDateWithLeniency(str, locale, parsePatterns, true);",
      "right" : "return parseDateWithLeniency(str, locale, parsePatterns, true);",
      "info" : "ReturnStatement[12111-12174]:ReturnStatement[12111-12174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13040-13046]:Modifier[13040-13046]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13047-13053]:Modifier[13047-13053]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[13054-13058]:SimpleType[13054-13058]"
    }, {
      "left" : "parseDateStrictly",
      "right" : "parseDateStrictly",
      "info" : "SimpleName[13059-13076]:SimpleName[13059-13076]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[13077-13093]:SingleVariableDeclaration[13077-13093]"
    }, {
      "left" : "final String... parsePatterns",
      "right" : "final String... parsePatterns",
      "info" : "SingleVariableDeclaration[13095-13124]:SingleVariableDeclaration[13095-13124]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[13133-13147]:SimpleType[13133-13147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13148-13215]:Block[13148-13215]"
    }, {
      "left" : "return parseDateStrictly(str, null, parsePatterns);",
      "right" : "return parseDateStrictly(str, null, parsePatterns);",
      "info" : "ReturnStatement[13158-13209]:ReturnStatement[13158-13209]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14248-14254]:Modifier[14248-14254]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14255-14261]:Modifier[14255-14261]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[14262-14266]:SimpleType[14262-14266]"
    }, {
      "left" : "parseDateStrictly",
      "right" : "parseDateStrictly",
      "info" : "SimpleName[14267-14284]:SimpleName[14267-14284]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[14285-14301]:SingleVariableDeclaration[14285-14301]"
    }, {
      "left" : "final Locale locale",
      "right" : "final Locale locale",
      "info" : "SingleVariableDeclaration[14303-14322]:SingleVariableDeclaration[14303-14322]"
    }, {
      "left" : "final String... parsePatterns",
      "right" : "final String... parsePatterns",
      "info" : "SingleVariableDeclaration[14324-14353]:SingleVariableDeclaration[14324-14353]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[14362-14376]:SimpleType[14362-14376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14377-14457]:Block[14377-14457]"
    }, {
      "left" : "return parseDateWithLeniency(str, locale, parsePatterns, false);",
      "right" : "return parseDateWithLeniency(str, locale, parsePatterns, false);",
      "info" : "ReturnStatement[14387-14451]:ReturnStatement[14387-14451]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15390-15397]:Modifier[15390-15397]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15398-15404]:Modifier[15398-15404]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[15405-15409]:SimpleType[15405-15409]"
    }, {
      "left" : "parseDateWithLeniency",
      "right" : "parseDateWithLeniency",
      "info" : "SimpleName[15410-15431]:SimpleName[15410-15431]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[15445-15461]:SingleVariableDeclaration[15445-15461]"
    }, {
      "left" : "final Locale locale",
      "right" : "final Locale locale",
      "info" : "SingleVariableDeclaration[15463-15482]:SingleVariableDeclaration[15463-15482]"
    }, {
      "left" : "final String[] parsePatterns",
      "right" : "final String[] parsePatterns",
      "info" : "SingleVariableDeclaration[15484-15512]:SingleVariableDeclaration[15484-15512]"
    }, {
      "left" : "final boolean lenient",
      "right" : "final boolean lenient",
      "info" : "SingleVariableDeclaration[15514-15535]:SingleVariableDeclaration[15514-15535]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[15544-15558]:SimpleType[15544-15558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15559-16589]:Block[15559-16589]"
    }, {
      "left" : "if (str == null || parsePatterns == null)",
      "right" : "if (str == null || parsePatterns == null)",
      "info" : "IfStatement[15569-15708]:IfStatement[15569-15708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15611-15708]:Block[15611-15708]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Date and Patterns must not be null\");",
      "info" : "ThrowStatement[15625-15698]:ThrowStatement[15625-15698]"
    }, {
      "left" : "final TimeZone tz = TimeZone.getDefault();",
      "right" : "final TimeZone tz = TimeZone.getDefault();",
      "info" : "VariableDeclarationStatement[15718-15760]:VariableDeclarationStatement[15718-15760]"
    }, {
      "left" : "final Locale lcl = locale==null ?Locale.getDefault() : locale;",
      "right" : "final Locale lcl = locale==null ?Locale.getDefault() : locale;",
      "info" : "VariableDeclarationStatement[15769-15831]:VariableDeclarationStatement[15769-15831]"
    }, {
      "left" : "final ParsePosition pos = new ParsePosition(0);",
      "right" : "final ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[15840-15887]:VariableDeclarationStatement[15840-15887]"
    }, {
      "left" : "final Calendar calendar = Calendar.getInstance(tz, lcl);",
      "right" : "final Calendar calendar = Calendar.getInstance(tz, lcl);",
      "info" : "VariableDeclarationStatement[15896-15952]:VariableDeclarationStatement[15896-15952]"
    }, {
      "left" : "calendar.setLenient(lenient);",
      "right" : "calendar.setLenient(lenient);",
      "info" : "ExpressionStatement[15961-15990]:ExpressionStatement[15961-15990]"
    }, {
      "left" : "for (final String parsePattern : parsePatterns)",
      "right" : "for (final String parsePattern : parsePatterns)",
      "info" : "EnhancedForStatement[16000-16509]:EnhancedForStatement[16000-16509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16048-16509]:Block[16048-16509]"
    }, {
      "left" : "FastDateParser fdp = new FastDateParser(parsePattern, tz, lcl);",
      "right" : "FastDateParser fdp = new FastDateParser(parsePattern, tz, lcl);",
      "info" : "VariableDeclarationStatement[16062-16125]:VariableDeclarationStatement[16062-16125]"
    }, {
      "left" : "calendar.clear();",
      "right" : "calendar.clear();",
      "info" : "ExpressionStatement[16138-16155]:ExpressionStatement[16138-16155]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16168-16470]:TryStatement[16168-16470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16172-16337]:Block[16172-16337]"
    }, {
      "left" : "if (fdp.parse(str, pos, calendar) && pos.getIndex()==str.length())",
      "right" : "if (fdp.parse(str, pos, calendar) && pos.getIndex()==str.length())",
      "info" : "IfStatement[16190-16323]:IfStatement[16190-16323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16257-16323]:Block[16257-16323]"
    }, {
      "left" : "return calendar.getTime();",
      "right" : "return calendar.getTime();",
      "info" : "ReturnStatement[16279-16305]:ReturnStatement[16279-16305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16389-16470]:Block[16389-16470]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[16483-16499]:ExpressionStatement[16483-16499]"
    }, {
      "left" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "right" : "throw new ParseException(\"Unable to parse the date: \" + str, -1);",
      "info" : "ThrowStatement[16518-16583]:ThrowStatement[16518-16583]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17021-17027]:Modifier[17021-17027]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17028-17034]:Modifier[17028-17034]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[17035-17039]:SimpleType[17035-17039]"
    }, {
      "left" : "addYears",
      "right" : "addYears",
      "info" : "SimpleName[17040-17048]:SimpleName[17040-17048]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[17049-17064]:SingleVariableDeclaration[17049-17064]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[17066-17082]:SingleVariableDeclaration[17066-17082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17084-17140]:Block[17084-17140]"
    }, {
      "left" : "return add(date, Calendar.YEAR, amount);",
      "right" : "return add(date, Calendar.YEAR, amount);",
      "info" : "ReturnStatement[17094-17134]:ReturnStatement[17094-17134]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17573-17579]:Modifier[17573-17579]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17580-17586]:Modifier[17580-17586]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[17587-17591]:SimpleType[17587-17591]"
    }, {
      "left" : "addMonths",
      "right" : "addMonths",
      "info" : "SimpleName[17592-17601]:SimpleName[17592-17601]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[17602-17617]:SingleVariableDeclaration[17602-17617]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[17619-17635]:SingleVariableDeclaration[17619-17635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17637-17694]:Block[17637-17694]"
    }, {
      "left" : "return add(date, Calendar.MONTH, amount);",
      "right" : "return add(date, Calendar.MONTH, amount);",
      "info" : "ReturnStatement[17647-17688]:ReturnStatement[17647-17688]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18126-18132]:Modifier[18126-18132]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18133-18139]:Modifier[18133-18139]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[18140-18144]:SimpleType[18140-18144]"
    }, {
      "left" : "addWeeks",
      "right" : "addWeeks",
      "info" : "SimpleName[18145-18153]:SimpleName[18145-18153]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[18154-18169]:SingleVariableDeclaration[18154-18169]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[18171-18187]:SingleVariableDeclaration[18171-18187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18189-18253]:Block[18189-18253]"
    }, {
      "left" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "right" : "return add(date, Calendar.WEEK_OF_YEAR, amount);",
      "info" : "ReturnStatement[18199-18247]:ReturnStatement[18199-18247]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18684-18690]:Modifier[18684-18690]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18691-18697]:Modifier[18691-18697]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[18698-18702]:SimpleType[18698-18702]"
    }, {
      "left" : "addDays",
      "right" : "addDays",
      "info" : "SimpleName[18703-18710]:SimpleName[18703-18710]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[18711-18726]:SingleVariableDeclaration[18711-18726]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[18728-18744]:SingleVariableDeclaration[18728-18744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18746-18810]:Block[18746-18810]"
    }, {
      "left" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "right" : "return add(date, Calendar.DAY_OF_MONTH, amount);",
      "info" : "ReturnStatement[18756-18804]:ReturnStatement[18756-18804]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19242-19248]:Modifier[19242-19248]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19249-19255]:Modifier[19249-19255]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[19256-19260]:SimpleType[19256-19260]"
    }, {
      "left" : "addHours",
      "right" : "addHours",
      "info" : "SimpleName[19261-19269]:SimpleName[19261-19269]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[19270-19285]:SingleVariableDeclaration[19270-19285]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[19287-19303]:SingleVariableDeclaration[19287-19303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19305-19368]:Block[19305-19368]"
    }, {
      "left" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "right" : "return add(date, Calendar.HOUR_OF_DAY, amount);",
      "info" : "ReturnStatement[19315-19362]:ReturnStatement[19315-19362]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19802-19808]:Modifier[19802-19808]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19809-19815]:Modifier[19809-19815]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[19816-19820]:SimpleType[19816-19820]"
    }, {
      "left" : "addMinutes",
      "right" : "addMinutes",
      "info" : "SimpleName[19821-19831]:SimpleName[19821-19831]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[19832-19847]:SingleVariableDeclaration[19832-19847]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[19849-19865]:SingleVariableDeclaration[19849-19865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19867-19925]:Block[19867-19925]"
    }, {
      "left" : "return add(date, Calendar.MINUTE, amount);",
      "right" : "return add(date, Calendar.MINUTE, amount);",
      "info" : "ReturnStatement[19877-19919]:ReturnStatement[19877-19919]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20359-20365]:Modifier[20359-20365]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20366-20372]:Modifier[20366-20372]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[20373-20377]:SimpleType[20373-20377]"
    }, {
      "left" : "addSeconds",
      "right" : "addSeconds",
      "info" : "SimpleName[20378-20388]:SimpleName[20378-20388]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[20389-20404]:SingleVariableDeclaration[20389-20404]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[20406-20422]:SingleVariableDeclaration[20406-20422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20424-20482]:Block[20424-20482]"
    }, {
      "left" : "return add(date, Calendar.SECOND, amount);",
      "right" : "return add(date, Calendar.SECOND, amount);",
      "info" : "ReturnStatement[20434-20476]:ReturnStatement[20434-20476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20921-20927]:Modifier[20921-20927]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20928-20934]:Modifier[20928-20934]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[20935-20939]:SimpleType[20935-20939]"
    }, {
      "left" : "addMilliseconds",
      "right" : "addMilliseconds",
      "info" : "SimpleName[20940-20955]:SimpleName[20940-20955]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[20956-20971]:SingleVariableDeclaration[20956-20971]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[20973-20989]:SingleVariableDeclaration[20973-20989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20991-21054]:Block[20991-21054]"
    }, {
      "left" : "return add(date, Calendar.MILLISECOND, amount);",
      "right" : "return add(date, Calendar.MILLISECOND, amount);",
      "info" : "ReturnStatement[21001-21048]:ReturnStatement[21001-21048]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21526-21533]:Modifier[21526-21533]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21534-21540]:Modifier[21534-21540]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[21541-21545]:SimpleType[21541-21545]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[21546-21549]:SimpleName[21546-21549]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[21550-21565]:SingleVariableDeclaration[21550-21565]"
    }, {
      "left" : "final int calendarField",
      "right" : "final int calendarField",
      "info" : "SingleVariableDeclaration[21567-21590]:SingleVariableDeclaration[21567-21590]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[21592-21608]:SingleVariableDeclaration[21592-21608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21610-21874]:Block[21610-21874]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[21620-21726]:IfStatement[21620-21726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21638-21726]:Block[21638-21726]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[21652-21716]:ThrowStatement[21652-21716]"
    }, {
      "left" : "final Calendar c = Calendar.getInstance();",
      "right" : "final Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[21735-21777]:VariableDeclarationStatement[21735-21777]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[21786-21802]:ExpressionStatement[21786-21802]"
    }, {
      "left" : "c.add(calendarField, amount);",
      "right" : "c.add(calendarField, amount);",
      "info" : "ExpressionStatement[21811-21840]:ExpressionStatement[21811-21840]"
    }, {
      "left" : "return c.getTime();",
      "right" : "return c.getTime();",
      "info" : "ReturnStatement[21849-21868]:ReturnStatement[21849-21868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22313-22319]:Modifier[22313-22319]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22320-22326]:Modifier[22320-22326]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[22327-22331]:SimpleType[22327-22331]"
    }, {
      "left" : "setYears",
      "right" : "setYears",
      "info" : "SimpleName[22332-22340]:SimpleName[22332-22340]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[22341-22356]:SingleVariableDeclaration[22341-22356]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[22358-22374]:SingleVariableDeclaration[22358-22374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22376-22432]:Block[22376-22432]"
    }, {
      "left" : "return set(date, Calendar.YEAR, amount);",
      "right" : "return set(date, Calendar.YEAR, amount);",
      "info" : "ReturnStatement[22386-22426]:ReturnStatement[22386-22426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22868-22874]:Modifier[22868-22874]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22875-22881]:Modifier[22875-22881]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[22882-22886]:SimpleType[22882-22886]"
    }, {
      "left" : "setMonths",
      "right" : "setMonths",
      "info" : "SimpleName[22887-22896]:SimpleName[22887-22896]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[22897-22912]:SingleVariableDeclaration[22897-22912]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[22914-22930]:SingleVariableDeclaration[22914-22930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22932-22989]:Block[22932-22989]"
    }, {
      "left" : "return set(date, Calendar.MONTH, amount);",
      "right" : "return set(date, Calendar.MONTH, amount);",
      "info" : "ReturnStatement[22942-22983]:ReturnStatement[22942-22983]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23431-23437]:Modifier[23431-23437]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23438-23444]:Modifier[23438-23444]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[23445-23449]:SimpleType[23445-23449]"
    }, {
      "left" : "setDays",
      "right" : "setDays",
      "info" : "SimpleName[23450-23457]:SimpleName[23450-23457]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[23458-23473]:SingleVariableDeclaration[23458-23473]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[23475-23491]:SingleVariableDeclaration[23475-23491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23493-23557]:Block[23493-23557]"
    }, {
      "left" : "return set(date, Calendar.DAY_OF_MONTH, amount);",
      "right" : "return set(date, Calendar.DAY_OF_MONTH, amount);",
      "info" : "ReturnStatement[23503-23551]:ReturnStatement[23503-23551]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24025-24031]:Modifier[24025-24031]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24032-24038]:Modifier[24032-24038]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[24039-24043]:SimpleType[24039-24043]"
    }, {
      "left" : "setHours",
      "right" : "setHours",
      "info" : "SimpleName[24044-24052]:SimpleName[24044-24052]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[24053-24068]:SingleVariableDeclaration[24053-24068]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[24070-24086]:SingleVariableDeclaration[24070-24086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24088-24151]:Block[24088-24151]"
    }, {
      "left" : "return set(date, Calendar.HOUR_OF_DAY, amount);",
      "right" : "return set(date, Calendar.HOUR_OF_DAY, amount);",
      "info" : "ReturnStatement[24098-24145]:ReturnStatement[24098-24145]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24587-24593]:Modifier[24587-24593]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24594-24600]:Modifier[24594-24600]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[24601-24605]:SimpleType[24601-24605]"
    }, {
      "left" : "setMinutes",
      "right" : "setMinutes",
      "info" : "SimpleName[24606-24616]:SimpleName[24606-24616]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[24617-24632]:SingleVariableDeclaration[24617-24632]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[24634-24650]:SingleVariableDeclaration[24634-24650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24652-24710]:Block[24652-24710]"
    }, {
      "left" : "return set(date, Calendar.MINUTE, amount);",
      "right" : "return set(date, Calendar.MINUTE, amount);",
      "info" : "ReturnStatement[24662-24704]:ReturnStatement[24662-24704]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25151-25157]:Modifier[25151-25157]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25158-25164]:Modifier[25158-25164]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[25165-25169]:SimpleType[25165-25169]"
    }, {
      "left" : "setSeconds",
      "right" : "setSeconds",
      "info" : "SimpleName[25170-25180]:SimpleName[25170-25180]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[25181-25196]:SingleVariableDeclaration[25181-25196]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[25198-25214]:SingleVariableDeclaration[25198-25214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25216-25274]:Block[25216-25274]"
    }, {
      "left" : "return set(date, Calendar.SECOND, amount);",
      "right" : "return set(date, Calendar.SECOND, amount);",
      "info" : "ReturnStatement[25226-25268]:ReturnStatement[25226-25268]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25716-25722]:Modifier[25716-25722]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25723-25729]:Modifier[25723-25729]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[25730-25734]:SimpleType[25730-25734]"
    }, {
      "left" : "setMilliseconds",
      "right" : "setMilliseconds",
      "info" : "SimpleName[25735-25750]:SimpleName[25735-25750]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[25751-25766]:SingleVariableDeclaration[25751-25766]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[25768-25784]:SingleVariableDeclaration[25768-25784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25786-25849]:Block[25786-25849]"
    }, {
      "left" : "return set(date, Calendar.MILLISECOND, amount);",
      "right" : "return set(date, Calendar.MILLISECOND, amount);",
      "info" : "ReturnStatement[25796-25843]:ReturnStatement[25796-25843]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26417-26424]:Modifier[26417-26424]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26425-26431]:Modifier[26425-26431]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[26432-26436]:SimpleType[26432-26436]"
    }, {
      "left" : "set",
      "right" : "set",
      "info" : "SimpleName[26437-26440]:SimpleName[26437-26440]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[26441-26456]:SingleVariableDeclaration[26441-26456]"
    }, {
      "left" : "final int calendarField",
      "right" : "final int calendarField",
      "info" : "SingleVariableDeclaration[26458-26481]:SingleVariableDeclaration[26458-26481]"
    }, {
      "left" : "final int amount",
      "right" : "final int amount",
      "info" : "SingleVariableDeclaration[26483-26499]:SingleVariableDeclaration[26483-26499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26501-26872]:Block[26501-26872]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[26511-26617]:IfStatement[26511-26617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26529-26617]:Block[26529-26617]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[26543-26607]:ThrowStatement[26543-26607]"
    }, {
      "left" : "final Calendar c = Calendar.getInstance();",
      "right" : "final Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[26704-26746]:VariableDeclarationStatement[26704-26746]"
    }, {
      "left" : "c.setLenient(false);",
      "right" : "c.setLenient(false);",
      "info" : "ExpressionStatement[26755-26775]:ExpressionStatement[26755-26775]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[26784-26800]:ExpressionStatement[26784-26800]"
    }, {
      "left" : "c.set(calendarField, amount);",
      "right" : "c.set(calendarField, amount);",
      "info" : "ExpressionStatement[26809-26838]:ExpressionStatement[26809-26838]"
    }, {
      "left" : "return c.getTime();",
      "right" : "return c.getTime();",
      "info" : "ReturnStatement[26847-26866]:ReturnStatement[26847-26866]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27204-27210]:Modifier[27204-27210]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27211-27217]:Modifier[27211-27217]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[27218-27226]:SimpleType[27218-27226]"
    }, {
      "left" : "toCalendar",
      "right" : "toCalendar",
      "info" : "SimpleName[27227-27237]:SimpleName[27227-27237]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[27238-27253]:SingleVariableDeclaration[27238-27253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27255-27356]:Block[27255-27356]"
    }, {
      "left" : "final Calendar c = Calendar.getInstance();",
      "right" : "final Calendar c = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[27265-27307]:VariableDeclarationStatement[27265-27307]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[27316-27332]:ExpressionStatement[27316-27332]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[27341-27350]:ReturnStatement[27341-27350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29152-29158]:Modifier[29241-29247]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29159-29165]:Modifier[29248-29254]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[29166-29170]:SimpleType[29255-29259]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[29171-29176]:SimpleName[29260-29265]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[29177-29192]:SingleVariableDeclaration[29266-29281]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[29194-29209]:SingleVariableDeclaration[29283-29298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29211-29493]:Block[29300-29582]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[29221-29327]:IfStatement[29310-29416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29239-29327]:Block[29328-29416]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[29253-29317]:ThrowStatement[29342-29406]"
    }, {
      "left" : "final Calendar gval = Calendar.getInstance();",
      "right" : "final Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[29336-29381]:VariableDeclarationStatement[29425-29470]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[29390-29409]:ExpressionStatement[29479-29498]"
    }, {
      "left" : "modify(gval, field, ModifyType.ROUND);",
      "right" : "modify(gval, field, ModifyType.ROUND);",
      "info" : "ExpressionStatement[29418-29456]:ExpressionStatement[29507-29545]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[29465-29487]:ReturnStatement[29554-29576]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30809-30815]:Modifier[30898-30904]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30816-30822]:Modifier[30905-30911]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[30823-30831]:SimpleType[30912-30920]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[30832-30837]:SimpleName[30921-30926]"
    }, {
      "left" : "final Calendar date",
      "right" : "final Calendar date",
      "info" : "SingleVariableDeclaration[30838-30857]:SingleVariableDeclaration[30927-30946]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[30859-30874]:SingleVariableDeclaration[30948-30963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30876-31130]:Block[30965-31219]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[30886-30992]:IfStatement[30975-31081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30904-30992]:Block[30993-31081]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[30918-30982]:ThrowStatement[31007-31071]"
    }, {
      "left" : "final Calendar rounded = (Calendar) date.clone();",
      "right" : "final Calendar rounded = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[31001-31050]:VariableDeclarationStatement[31090-31139]"
    }, {
      "left" : "modify(rounded, field, ModifyType.ROUND);",
      "right" : "modify(rounded, field, ModifyType.ROUND);",
      "info" : "ExpressionStatement[31059-31100]:ExpressionStatement[31148-31189]"
    }, {
      "left" : "return rounded;",
      "right" : "return rounded;",
      "info" : "ReturnStatement[31109-31124]:ReturnStatement[31198-31213]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32582-32588]:Modifier[32671-32677]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32589-32595]:Modifier[32678-32684]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[32596-32600]:SimpleType[32685-32689]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[32601-32606]:SimpleName[32690-32695]"
    }, {
      "left" : "final Object date",
      "right" : "final Object date",
      "info" : "SingleVariableDeclaration[32607-32624]:SingleVariableDeclaration[32696-32713]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[32626-32641]:SingleVariableDeclaration[32715-32730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32643-33050]:Block[32732-33139]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[32653-32759]:IfStatement[32742-32848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32671-32759]:Block[32760-32848]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[32685-32749]:ThrowStatement[32774-32838]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[32768-33044]:IfStatement[32857-33133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32794-32851]:Block[32883-32940]"
    }, {
      "left" : "return round((Date) date, field);",
      "right" : "return round((Date) date, field);",
      "info" : "ReturnStatement[32808-32841]:ReturnStatement[32897-32930]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[32857-33044]:IfStatement[32946-33133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32887-32958]:Block[32976-33047]"
    }, {
      "left" : "return round((Calendar) date, field).getTime();",
      "right" : "return round((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[32901-32948]:ReturnStatement[32990-33037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32964-33044]:Block[33053-33133]"
    }, {
      "left" : "throw new ClassCastException(\"Could not round \" + date);",
      "right" : "throw new ClassCastException(\"Could not round \" + date);",
      "info" : "ThrowStatement[32978-33034]:ThrowStatement[33067-33123]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33830-33836]:Modifier[33919-33925]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33837-33843]:Modifier[33926-33932]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[33844-33848]:SimpleType[33933-33937]"
    }, {
      "left" : "truncate",
      "right" : "truncate",
      "info" : "SimpleName[33849-33857]:SimpleName[33938-33946]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[33858-33873]:SingleVariableDeclaration[33947-33962]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[33875-33890]:SingleVariableDeclaration[33964-33979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33892-34177]:Block[33981-34266]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[33902-34008]:IfStatement[33991-34097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33920-34008]:Block[34009-34097]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[33934-33998]:ThrowStatement[34023-34087]"
    }, {
      "left" : "final Calendar gval = Calendar.getInstance();",
      "right" : "final Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[34017-34062]:VariableDeclarationStatement[34106-34151]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[34071-34090]:ExpressionStatement[34160-34179]"
    }, {
      "left" : "modify(gval, field, ModifyType.TRUNCATE);",
      "right" : "modify(gval, field, ModifyType.TRUNCATE);",
      "info" : "ExpressionStatement[34099-34140]:ExpressionStatement[34188-34229]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[34149-34171]:ReturnStatement[34238-34260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34879-34885]:Modifier[34968-34974]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34886-34892]:Modifier[34975-34981]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[34893-34901]:SimpleType[34982-34990]"
    }, {
      "left" : "truncate",
      "right" : "truncate",
      "info" : "SimpleName[34902-34910]:SimpleName[34991-34999]"
    }, {
      "left" : "final Calendar date",
      "right" : "final Calendar date",
      "info" : "SingleVariableDeclaration[34911-34930]:SingleVariableDeclaration[35000-35019]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[34932-34947]:SingleVariableDeclaration[35021-35036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34949-35212]:Block[35038-35301]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[34959-35065]:IfStatement[35048-35154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34977-35065]:Block[35066-35154]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[34991-35055]:ThrowStatement[35080-35144]"
    }, {
      "left" : "final Calendar truncated = (Calendar) date.clone();",
      "right" : "final Calendar truncated = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[35074-35125]:VariableDeclarationStatement[35163-35214]"
    }, {
      "left" : "modify(truncated, field, ModifyType.TRUNCATE);",
      "right" : "modify(truncated, field, ModifyType.TRUNCATE);",
      "info" : "ExpressionStatement[35134-35180]:ExpressionStatement[35223-35269]"
    }, {
      "left" : "return truncated;",
      "right" : "return truncated;",
      "info" : "ReturnStatement[35189-35206]:ReturnStatement[35278-35295]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36050-36056]:Modifier[36139-36145]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36057-36063]:Modifier[36146-36152]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[36064-36068]:SimpleType[36153-36157]"
    }, {
      "left" : "truncate",
      "right" : "truncate",
      "info" : "SimpleName[36069-36077]:SimpleName[36158-36166]"
    }, {
      "left" : "final Object date",
      "right" : "final Object date",
      "info" : "SingleVariableDeclaration[36078-36095]:SingleVariableDeclaration[36167-36184]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[36097-36112]:SingleVariableDeclaration[36186-36201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36114-36530]:Block[36203-36619]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[36124-36230]:IfStatement[36213-36319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36142-36230]:Block[36231-36319]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[36156-36220]:ThrowStatement[36245-36309]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[36239-36524]:IfStatement[36328-36613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36265-36325]:Block[36354-36414]"
    }, {
      "left" : "return truncate((Date) date, field);",
      "right" : "return truncate((Date) date, field);",
      "info" : "ReturnStatement[36279-36315]:ReturnStatement[36368-36404]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[36331-36524]:IfStatement[36420-36613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36361-36435]:Block[36450-36524]"
    }, {
      "left" : "return truncate((Calendar) date, field).getTime();",
      "right" : "return truncate((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[36375-36425]:ReturnStatement[36464-36514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36441-36524]:Block[36530-36613]"
    }, {
      "left" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "right" : "throw new ClassCastException(\"Could not truncate \" + date);",
      "info" : "ThrowStatement[36455-36514]:ThrowStatement[36544-36603]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37328-37334]:Modifier[37417-37423]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37335-37341]:Modifier[37424-37430]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[37342-37346]:SimpleType[37431-37435]"
    }, {
      "left" : "ceiling",
      "right" : "ceiling",
      "info" : "SimpleName[37347-37354]:SimpleName[37436-37443]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[37355-37370]:SingleVariableDeclaration[37444-37459]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[37372-37387]:SingleVariableDeclaration[37461-37476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37389-37673]:Block[37478-37762]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[37399-37505]:IfStatement[37488-37594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37417-37505]:Block[37506-37594]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[37431-37495]:ThrowStatement[37520-37584]"
    }, {
      "left" : "final Calendar gval = Calendar.getInstance();",
      "right" : "final Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[37514-37559]:VariableDeclarationStatement[37603-37648]"
    }, {
      "left" : "gval.setTime(date);",
      "right" : "gval.setTime(date);",
      "info" : "ExpressionStatement[37568-37587]:ExpressionStatement[37657-37676]"
    }, {
      "left" : "modify(gval, field, ModifyType.CEILING);",
      "right" : "modify(gval, field, ModifyType.CEILING);",
      "info" : "ExpressionStatement[37596-37636]:ExpressionStatement[37685-37725]"
    }, {
      "left" : "return gval.getTime();",
      "right" : "return gval.getTime();",
      "info" : "ReturnStatement[37645-37667]:ReturnStatement[37734-37756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38391-38397]:Modifier[38480-38486]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38398-38404]:Modifier[38487-38493]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[38405-38413]:SimpleType[38494-38502]"
    }, {
      "left" : "ceiling",
      "right" : "ceiling",
      "info" : "SimpleName[38414-38421]:SimpleName[38503-38510]"
    }, {
      "left" : "final Calendar date",
      "right" : "final Calendar date",
      "info" : "SingleVariableDeclaration[38422-38441]:SingleVariableDeclaration[38511-38530]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[38443-38458]:SingleVariableDeclaration[38532-38547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38460-38713]:Block[38549-38802]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[38470-38576]:IfStatement[38559-38665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38488-38576]:Block[38577-38665]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[38502-38566]:ThrowStatement[38591-38655]"
    }, {
      "left" : "final Calendar ceiled = (Calendar) date.clone();",
      "right" : "final Calendar ceiled = (Calendar) date.clone();",
      "info" : "VariableDeclarationStatement[38585-38633]:VariableDeclarationStatement[38674-38722]"
    }, {
      "left" : "modify(ceiled, field, ModifyType.CEILING);",
      "right" : "modify(ceiled, field, ModifyType.CEILING);",
      "info" : "ExpressionStatement[38642-38684]:ExpressionStatement[38731-38773]"
    }, {
      "left" : "return ceiled;",
      "right" : "return ceiled;",
      "info" : "ReturnStatement[38693-38707]:ReturnStatement[38782-38796]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39567-39573]:Modifier[39656-39662]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39574-39580]:Modifier[39663-39669]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[39581-39585]:SimpleType[39670-39674]"
    }, {
      "left" : "ceiling",
      "right" : "ceiling",
      "info" : "SimpleName[39586-39593]:SimpleName[39675-39682]"
    }, {
      "left" : "final Object date",
      "right" : "final Object date",
      "info" : "SingleVariableDeclaration[39594-39611]:SingleVariableDeclaration[39683-39700]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[39613-39628]:SingleVariableDeclaration[39702-39717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39630-40072]:Block[39719-40161]"
    }, {
      "left" : "if (date == null)",
      "right" : "if (date == null)",
      "info" : "IfStatement[39640-39746]:IfStatement[39729-39835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39658-39746]:Block[39747-39835]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[39672-39736]:ThrowStatement[39761-39825]"
    }, {
      "left" : "if (date instanceof Date)",
      "right" : "if (date instanceof Date)",
      "info" : "IfStatement[39755-40066]:IfStatement[39844-40155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39781-39840]:Block[39870-39929]"
    }, {
      "left" : "return ceiling((Date) date, field);",
      "right" : "return ceiling((Date) date, field);",
      "info" : "ReturnStatement[39795-39830]:ReturnStatement[39884-39919]"
    }, {
      "left" : "if (date instanceof Calendar)",
      "right" : "if (date instanceof Calendar)",
      "info" : "IfStatement[39846-40066]:IfStatement[39935-40155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39876-39949]:Block[39965-40038]"
    }, {
      "left" : "return ceiling((Calendar) date, field).getTime();",
      "right" : "return ceiling((Calendar) date, field).getTime();",
      "info" : "ReturnStatement[39890-39939]:ReturnStatement[39979-40028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39955-40066]:Block[40044-40155]"
    }, {
      "left" : "throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());",
      "right" : "throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());",
      "info" : "ThrowStatement[39969-40056]:ThrowStatement[40058-40145]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40430-40437]:Modifier[40519-40526]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40438-40444]:Modifier[40527-40533]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40445-40449]:PrimitiveType[40534-40538]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[40450-40456]:SimpleName[40539-40545]"
    }, {
      "left" : "final Calendar val",
      "right" : "final Calendar val",
      "info" : "SingleVariableDeclaration[40457-40475]:SingleVariableDeclaration[40546-40564]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[40477-40492]:SingleVariableDeclaration[40566-40581]"
    }, {
      "left" : "final ModifyType modType",
      "right" : "final ModifyType modType",
      "info" : "SingleVariableDeclaration[40494-40518]:SingleVariableDeclaration[40583-40607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40520-46586]:Block[40609-46675]"
    }, {
      "left" : "if (val.get(Calendar.YEAR) > 280000000)",
      "right" : "if (val.get(Calendar.YEAR) > 280000000)",
      "info" : "IfStatement[40530-40678]:IfStatement[40619-40767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40570-40678]:Block[40659-40767]"
    }, {
      "left" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "right" : "throw new ArithmeticException(\"Calendar value too large for accurate calculations\");",
      "info" : "ThrowStatement[40584-40668]:ThrowStatement[40673-40757]"
    }, {
      "left" : "if (field == Calendar.MILLISECOND)",
      "right" : "if (field == Calendar.MILLISECOND)",
      "info" : "IfStatement[40696-40762]:IfStatement[40785-40851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40731-40762]:Block[40820-40851]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[40745-40752]:ReturnStatement[40834-40841]"
    }, {
      "left" : "final Date date = val.getTime();",
      "right" : "final Date date = val.getTime();",
      "info" : "VariableDeclarationStatement[41045-41077]:VariableDeclarationStatement[41134-41166]"
    }, {
      "left" : "long time = date.getTime();",
      "right" : "long time = date.getTime();",
      "info" : "VariableDeclarationStatement[41086-41113]:VariableDeclarationStatement[41175-41202]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[41122-41143]:VariableDeclarationStatement[41211-41232]"
    }, {
      "left" : "final int millisecs = val.get(Calendar.MILLISECOND);",
      "right" : "final int millisecs = val.get(Calendar.MILLISECOND);",
      "info" : "VariableDeclarationStatement[41186-41238]:VariableDeclarationStatement[41275-41327]"
    }, {
      "left" : "if (ModifyType.TRUNCATE == modType || millisecs < 500)",
      "right" : "if (ModifyType.TRUNCATE == modType || millisecs < 500)",
      "info" : "IfStatement[41247-41350]:IfStatement[41336-41439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41302-41350]:Block[41391-41439]"
    }, {
      "left" : "time = time - millisecs;",
      "right" : "time = time - millisecs;",
      "info" : "ExpressionStatement[41316-41340]:ExpressionStatement[41405-41429]"
    }, {
      "left" : "if (field == Calendar.SECOND)",
      "right" : "if (field == Calendar.SECOND)",
      "info" : "IfStatement[41359-41425]:IfStatement[41448-41514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41389-41425]:Block[41478-41514]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[41403-41415]:ExpressionStatement[41492-41504]"
    }, {
      "left" : "final int seconds = val.get(Calendar.SECOND);",
      "right" : "final int seconds = val.get(Calendar.SECOND);",
      "info" : "VariableDeclarationStatement[41463-41508]:VariableDeclarationStatement[41552-41597]"
    }, {
      "left" : "if (!done && (ModifyType.TRUNCATE == modType || seconds < 30))",
      "right" : "if (!done && (ModifyType.TRUNCATE == modType || seconds < 30))",
      "info" : "IfStatement[41517-41636]:IfStatement[41606-41725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41580-41636]:Block[41669-41725]"
    }, {
      "left" : "time = time - (seconds * 1000L);",
      "right" : "time = time - (seconds * 1000L);",
      "info" : "ExpressionStatement[41594-41626]:ExpressionStatement[41683-41715]"
    }, {
      "left" : "if (field == Calendar.MINUTE)",
      "right" : "if (field == Calendar.MINUTE)",
      "info" : "IfStatement[41645-41711]:IfStatement[41734-41800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41675-41711]:Block[41764-41800]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[41689-41701]:ExpressionStatement[41778-41790]"
    }, {
      "left" : "final int minutes = val.get(Calendar.MINUTE);",
      "right" : "final int minutes = val.get(Calendar.MINUTE);",
      "info" : "VariableDeclarationStatement[41749-41794]:VariableDeclarationStatement[41838-41883]"
    }, {
      "left" : "if (!done && (ModifyType.TRUNCATE == modType || minutes < 30))",
      "right" : "if (!done && (ModifyType.TRUNCATE == modType || minutes < 30))",
      "info" : "IfStatement[41803-41923]:IfStatement[41892-42012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41866-41923]:Block[41955-42012]"
    }, {
      "left" : "time = time - (minutes * 60000L);",
      "right" : "time = time - (minutes * 60000L);",
      "info" : "ExpressionStatement[41880-41913]:ExpressionStatement[41969-42002]"
    }, {
      "left" : "if (date.getTime() != time)",
      "right" : "if (date.getTime() != time)",
      "info" : "IfStatement[41955-42057]:IfStatement[42044-42146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41983-42057]:Block[42072-42146]"
    }, {
      "left" : "date.setTime(time);",
      "right" : "date.setTime(time);",
      "info" : "ExpressionStatement[41997-42016]:ExpressionStatement[42086-42105]"
    }, {
      "left" : "val.setTime(date);",
      "right" : "val.setTime(date);",
      "info" : "ExpressionStatement[42029-42047]:ExpressionStatement[42118-42136]"
    }, {
      "left" : "boolean roundUp = false;",
      "right" : "boolean roundUp = false;",
      "info" : "VariableDeclarationStatement[42157-42181]:VariableDeclarationStatement[42246-42270]"
    }, {
      "left" : "for (final int[] aField : fields)",
      "right" : "for (final int[] aField : fields)",
      "info" : "EnhancedForStatement[42190-46491]:EnhancedForStatement[42279-46580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42224-46491]:Block[42313-46580]"
    }, {
      "left" : "for (final int element : aField)",
      "right" : "for (final int element : aField)",
      "info" : "EnhancedForStatement[42238-44153]:EnhancedForStatement[42327-44242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42271-44153]:Block[42360-44242]"
    }, {
      "left" : "if (element == field)",
      "right" : "if (element == field)",
      "info" : "IfStatement[42289-44139]:IfStatement[42378-44228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42311-44139]:Block[42400-44228]"
    }, {
      "left" : "if (modType == ModifyType.CEILING || modType == ModifyType.ROUND && roundUp)",
      "right" : "if (modType == ModifyType.CEILING || modType == ModifyType.ROUND && roundUp)",
      "info" : "IfStatement[42392-44093]:IfStatement[42481-44182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42469-44093]:Block[42558-44182]"
    }, {
      "left" : "if (field == DateUtils.SEMI_MONTH)",
      "right" : "if (field == DateUtils.SEMI_MONTH)",
      "info" : "IfStatement[42495-44071]:IfStatement[42584-44160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42530-43175]:Block[42619-43264]"
    }, {
      "left" : "if (val.get(Calendar.DATE) == 1)",
      "right" : "if (val.get(Calendar.DATE) == 1)",
      "info" : "IfStatement[42784-43066]:IfStatement[42873-43155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42817-42908]:Block[42906-42997]"
    }, {
      "left" : "val.add(Calendar.DATE, 15);",
      "right" : "val.add(Calendar.DATE, 15);",
      "info" : "ExpressionStatement[42851-42878]:ExpressionStatement[42940-42967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42914-43066]:Block[43003-43155]"
    }, {
      "left" : "val.add(Calendar.DATE, -15);",
      "right" : "val.add(Calendar.DATE, -15);",
      "info" : "ExpressionStatement[42948-42976]:ExpressionStatement[43037-43065]"
    }, {
      "left" : "val.add(Calendar.MONTH, 1);",
      "right" : "val.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[43009-43036]:ExpressionStatement[43098-43125]"
    }, {
      "left" : "if (field == Calendar.AM_PM)",
      "right" : "if (field == Calendar.AM_PM)",
      "info" : "IfStatement[43181-44071]:IfStatement[43270-44160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43210-43848]:Block[43299-43937]"
    }, {
      "left" : "if (val.get(Calendar.HOUR_OF_DAY) == 0)",
      "right" : "if (val.get(Calendar.HOUR_OF_DAY) == 0)",
      "info" : "IfStatement[43439-43741]:IfStatement[43528-43830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43479-43577]:Block[43568-43666]"
    }, {
      "left" : "val.add(Calendar.HOUR_OF_DAY, 12);",
      "right" : "val.add(Calendar.HOUR_OF_DAY, 12);",
      "info" : "ExpressionStatement[43513-43547]:ExpressionStatement[43602-43636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43583-43741]:Block[43672-43830]"
    }, {
      "left" : "val.add(Calendar.HOUR_OF_DAY, -12);",
      "right" : "val.add(Calendar.HOUR_OF_DAY, -12);",
      "info" : "ExpressionStatement[43617-43652]:ExpressionStatement[43706-43741]"
    }, {
      "left" : "val.add(Calendar.DATE, 1);",
      "right" : "val.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[43685-43711]:ExpressionStatement[43774-43800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43854-44071]:Block[43943-44160]"
    }, {
      "left" : "val.add(aField[0], 1);",
      "right" : "val.add(aField[0], 1);",
      "info" : "ExpressionStatement[44023-44045]:ExpressionStatement[44112-44134]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44114-44121]:ReturnStatement[44203-44210]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[44231-44246]:VariableDeclarationStatement[44320-44335]"
    }, {
      "left" : "boolean offsetSet = false;",
      "right" : "boolean offsetSet = false;",
      "info" : "VariableDeclarationStatement[44259-44285]:VariableDeclarationStatement[44348-44374]"
    }, {
      "left" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n                default:\n                    break;\n            }",
      "right" : "switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (aField[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (aField[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset >= 6;\n                        offsetSet = true;\n                    }\n                    break;\n                default:\n                    break;\n            }",
      "info" : "SwitchStatement[44384-45887]:SwitchStatement[44473-45976]"
    }, {
      "left" : "case DateUtils.SEMI_MONTH:",
      "right" : "case DateUtils.SEMI_MONTH:",
      "info" : "SwitchCase[44417-44443]:SwitchCase[44506-44532]"
    }, {
      "left" : "if (aField[0] == Calendar.DATE)",
      "right" : "if (aField[0] == Calendar.DATE)",
      "info" : "IfStatement[44464-45249]:IfStatement[44553-45338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44496-45249]:Block[44585-45338]"
    }, {
      "left" : "offset = val.get(Calendar.DATE) - 1;",
      "right" : "offset = val.get(Calendar.DATE) - 1;",
      "info" : "ExpressionStatement[44737-44773]:ExpressionStatement[44826-44862]"
    }, {
      "left" : "if (offset >= 15)",
      "right" : "if (offset >= 15)",
      "info" : "IfStatement[44965-45052]:IfStatement[45054-45141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44983-45052]:Block[45072-45141]"
    }, {
      "left" : "offset -= 15;",
      "right" : "offset -= 15;",
      "info" : "ExpressionStatement[45013-45026]:ExpressionStatement[45102-45115]"
    }, {
      "left" : "roundUp = offset > 7;",
      "right" : "roundUp = offset > 7;",
      "info" : "ExpressionStatement[45164-45185]:ExpressionStatement[45253-45274]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[45210-45227]:ExpressionStatement[45299-45316]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45270-45276]:BreakStatement[45359-45365]"
    }, {
      "left" : "case Calendar.AM_PM:",
      "right" : "case Calendar.AM_PM:",
      "info" : "SwitchCase[45293-45313]:SwitchCase[45382-45402]"
    }, {
      "left" : "if (aField[0] == Calendar.HOUR_OF_DAY)",
      "right" : "if (aField[0] == Calendar.HOUR_OF_DAY)",
      "info" : "IfStatement[45334-45794]:IfStatement[45423-45883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45373-45794]:Block[45462-45883]"
    }, {
      "left" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "right" : "offset = val.get(Calendar.HOUR_OF_DAY);",
      "info" : "ExpressionStatement[45532-45571]:ExpressionStatement[45621-45660]"
    }, {
      "left" : "if (offset >= 12)",
      "right" : "if (offset >= 12)",
      "info" : "IfStatement[45596-45683]:IfStatement[45685-45772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45614-45683]:Block[45703-45772]"
    }, {
      "left" : "offset -= 12;",
      "right" : "offset -= 12;",
      "info" : "ExpressionStatement[45644-45657]:ExpressionStatement[45733-45746]"
    }, {
      "left" : "roundUp = offset >= 6;",
      "right" : "roundUp = offset >= 6;",
      "info" : "ExpressionStatement[45708-45730]:ExpressionStatement[45797-45819]"
    }, {
      "left" : "offsetSet = true;",
      "right" : "offsetSet = true;",
      "info" : "ExpressionStatement[45755-45772]:ExpressionStatement[45844-45861]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45815-45821]:BreakStatement[45904-45910]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45838-45846]:SwitchCase[45927-45935]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45867-45873]:BreakStatement[45956-45962]"
    }, {
      "left" : "if (!offsetSet)",
      "right" : "if (!offsetSet)",
      "info" : "IfStatement[45900-46328]:IfStatement[45989-46417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45916-46328]:Block[46005-46417]"
    }, {
      "left" : "final int min = val.getActualMinimum(aField[0]);",
      "right" : "final int min = val.getActualMinimum(aField[0]);",
      "info" : "VariableDeclarationStatement[45934-45982]:VariableDeclarationStatement[46023-46071]"
    }, {
      "left" : "final int max = val.getActualMaximum(aField[0]);",
      "right" : "final int max = val.getActualMaximum(aField[0]);",
      "info" : "VariableDeclarationStatement[45999-46047]:VariableDeclarationStatement[46088-46136]"
    }, {
      "left" : "offset = val.get(aField[0]) - min;",
      "right" : "offset = val.get(aField[0]) - min;",
      "info" : "ExpressionStatement[46134-46168]:ExpressionStatement[46223-46257]"
    }, {
      "left" : "roundUp = offset > ((max - min) / 2);",
      "right" : "roundUp = offset > ((max - min) / 2);",
      "info" : "ExpressionStatement[46277-46314]:ExpressionStatement[46366-46403]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[46384-46481]:IfStatement[46473-46570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46401-46481]:Block[46490-46570]"
    }, {
      "left" : "val.set(aField[0], val.get(aField[0]) - offset);",
      "right" : "val.set(aField[0], val.get(aField[0]) - offset);",
      "info" : "ExpressionStatement[46419-46467]:ExpressionStatement[46508-46556]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "right" : "throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");",
      "info" : "ThrowStatement[46500-46579]:ThrowStatement[46589-46668]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47857-47863]:Modifier[47946-47952]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47864-47870]:Modifier[47953-47959]"
    }, {
      "left" : "Iterator<Calendar>",
      "right" : "Iterator<Calendar>",
      "info" : "ParameterizedType[47871-47889]:ParameterizedType[47960-47978]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[47890-47898]:SimpleName[47979-47987]"
    }, {
      "left" : "final Date focus",
      "right" : "final Date focus",
      "info" : "SingleVariableDeclaration[47899-47915]:SingleVariableDeclaration[47988-48004]"
    }, {
      "left" : "final int rangeStyle",
      "right" : "final int rangeStyle",
      "info" : "SingleVariableDeclaration[47917-47937]:SingleVariableDeclaration[48006-48026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47939-48188]:Block[48028-48277]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[47949-48056]:IfStatement[48038-48145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47968-48056]:Block[48057-48145]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[47982-48046]:ThrowStatement[48071-48135]"
    }, {
      "left" : "final Calendar gval = Calendar.getInstance();",
      "right" : "final Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[48065-48110]:VariableDeclarationStatement[48154-48199]"
    }, {
      "left" : "gval.setTime(focus);",
      "right" : "gval.setTime(focus);",
      "info" : "ExpressionStatement[48119-48139]:ExpressionStatement[48208-48228]"
    }, {
      "left" : "return iterator(gval, rangeStyle);",
      "right" : "return iterator(gval, rangeStyle);",
      "info" : "ReturnStatement[48148-48182]:ReturnStatement[48237-48271]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49371-49377]:Modifier[49460-49466]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49378-49384]:Modifier[49467-49473]"
    }, {
      "left" : "Iterator<Calendar>",
      "right" : "Iterator<Calendar>",
      "info" : "ParameterizedType[49385-49403]:ParameterizedType[49474-49492]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[49404-49412]:SimpleName[49493-49501]"
    }, {
      "left" : "final Calendar focus",
      "right" : "final Calendar focus",
      "info" : "SingleVariableDeclaration[49413-49433]:SingleVariableDeclaration[49502-49522]"
    }, {
      "left" : "final int rangeStyle",
      "right" : "final int rangeStyle",
      "info" : "SingleVariableDeclaration[49435-49455]:SingleVariableDeclaration[49524-49544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49457-52317]:Block[49546-52406]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[49467-49574]:IfStatement[49556-49663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49486-49574]:Block[49575-49663]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[49500-49564]:ThrowStatement[49589-49653]"
    }, {
      "left" : "Calendar start = null;",
      "right" : "Calendar start = null;",
      "info" : "VariableDeclarationStatement[49583-49605]:VariableDeclarationStatement[49672-49694]"
    }, {
      "left" : "Calendar end = null;",
      "right" : "Calendar end = null;",
      "info" : "VariableDeclarationStatement[49614-49634]:VariableDeclarationStatement[49703-49723]"
    }, {
      "left" : "int startCutoff = Calendar.SUNDAY;",
      "right" : "int startCutoff = Calendar.SUNDAY;",
      "info" : "VariableDeclarationStatement[49643-49677]:VariableDeclarationStatement[49732-49766]"
    }, {
      "left" : "int endCutoff = Calendar.SATURDAY;",
      "right" : "int endCutoff = Calendar.SATURDAY;",
      "info" : "VariableDeclarationStatement[49686-49720]:VariableDeclarationStatement[49775-49809]"
    }, {
      "left" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "right" : "switch (rangeStyle) {\n            case RANGE_MONTH_SUNDAY:\n            case RANGE_MONTH_MONDAY:\n                //Set start to the first of the month\n                start = truncate(focus, Calendar.MONTH);\n                //Set end to the last of the month\n                end = (Calendar) start.clone();\n                end.add(Calendar.MONTH, 1);\n                end.add(Calendar.DATE, -1);\n                //Loop start back to the previous sunday or monday\n                if (rangeStyle == RANGE_MONTH_MONDAY) {\n                    startCutoff = Calendar.MONDAY;\n                    endCutoff = Calendar.SUNDAY;\n                }\n                break;\n            case RANGE_WEEK_SUNDAY:\n            case RANGE_WEEK_MONDAY:\n            case RANGE_WEEK_RELATIVE:\n            case RANGE_WEEK_CENTER:\n                //Set start and end to the current date\n                start = truncate(focus, Calendar.DATE);\n                end = truncate(focus, Calendar.DATE);\n                switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n        }",
      "info" : "SwitchStatement[49729-51703]:SwitchStatement[49818-51792]"
    }, {
      "left" : "case RANGE_MONTH_SUNDAY:",
      "right" : "case RANGE_MONTH_SUNDAY:",
      "info" : "SwitchCase[49763-49787]:SwitchCase[49852-49876]"
    }, {
      "left" : "case RANGE_MONTH_MONDAY:",
      "right" : "case RANGE_MONTH_MONDAY:",
      "info" : "SwitchCase[49800-49824]:SwitchCase[49889-49913]"
    }, {
      "left" : "start = truncate(focus, Calendar.MONTH);",
      "right" : "start = truncate(focus, Calendar.MONTH);",
      "info" : "ExpressionStatement[49895-49935]:ExpressionStatement[49984-50024]"
    }, {
      "left" : "end = (Calendar) start.clone();",
      "right" : "end = (Calendar) start.clone();",
      "info" : "ExpressionStatement[50003-50034]:ExpressionStatement[50092-50123]"
    }, {
      "left" : "end.add(Calendar.MONTH, 1);",
      "right" : "end.add(Calendar.MONTH, 1);",
      "info" : "ExpressionStatement[50051-50078]:ExpressionStatement[50140-50167]"
    }, {
      "left" : "end.add(Calendar.DATE, -1);",
      "right" : "end.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[50095-50122]:ExpressionStatement[50184-50211]"
    }, {
      "left" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "right" : "if (rangeStyle == RANGE_MONTH_MONDAY)",
      "info" : "IfStatement[50206-50363]:IfStatement[50295-50452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50244-50363]:Block[50333-50452]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[50266-50296]:ExpressionStatement[50355-50385]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[50317-50345]:ExpressionStatement[50406-50434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50380-50386]:BreakStatement[50469-50475]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[50399-50422]:SwitchCase[50488-50511]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[50435-50458]:SwitchCase[50524-50547]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[50471-50496]:SwitchCase[50560-50585]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[50509-50532]:SwitchCase[50598-50621]"
    }, {
      "left" : "start = truncate(focus, Calendar.DATE);",
      "right" : "start = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[50605-50644]:ExpressionStatement[50694-50733]"
    }, {
      "left" : "end = truncate(focus, Calendar.DATE);",
      "right" : "end = truncate(focus, Calendar.DATE);",
      "info" : "ExpressionStatement[50661-50698]:ExpressionStatement[50750-50787]"
    }, {
      "left" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                    default:\n                        break;\n                }",
      "right" : "switch (rangeStyle) {\n                    case RANGE_WEEK_SUNDAY:\n                        //already set by default\n                        break;\n                    case RANGE_WEEK_MONDAY:\n                        startCutoff = Calendar.MONDAY;\n                        endCutoff = Calendar.SUNDAY;\n                        break;\n                    case RANGE_WEEK_RELATIVE:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK);\n                        endCutoff = startCutoff - 1;\n                        break;\n                    case RANGE_WEEK_CENTER:\n                        startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;\n                        endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;\n                        break;\n                    default:\n                        break;\n                }",
      "info" : "SwitchStatement[50715-51545]:SwitchStatement[50804-51634]"
    }, {
      "left" : "case RANGE_WEEK_SUNDAY:",
      "right" : "case RANGE_WEEK_SUNDAY:",
      "info" : "SwitchCase[50757-50780]:SwitchCase[50846-50869]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50854-50860]:BreakStatement[50943-50949]"
    }, {
      "left" : "case RANGE_WEEK_MONDAY:",
      "right" : "case RANGE_WEEK_MONDAY:",
      "info" : "SwitchCase[50881-50904]:SwitchCase[50970-50993]"
    }, {
      "left" : "startCutoff = Calendar.MONDAY;",
      "right" : "startCutoff = Calendar.MONDAY;",
      "info" : "ExpressionStatement[50929-50959]:ExpressionStatement[51018-51048]"
    }, {
      "left" : "endCutoff = Calendar.SUNDAY;",
      "right" : "endCutoff = Calendar.SUNDAY;",
      "info" : "ExpressionStatement[50984-51012]:ExpressionStatement[51073-51101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51037-51043]:BreakStatement[51126-51132]"
    }, {
      "left" : "case RANGE_WEEK_RELATIVE:",
      "right" : "case RANGE_WEEK_RELATIVE:",
      "info" : "SwitchCase[51064-51089]:SwitchCase[51153-51178]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK);",
      "info" : "ExpressionStatement[51114-51160]:ExpressionStatement[51203-51249]"
    }, {
      "left" : "endCutoff = startCutoff - 1;",
      "right" : "endCutoff = startCutoff - 1;",
      "info" : "ExpressionStatement[51185-51213]:ExpressionStatement[51274-51302]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51238-51244]:BreakStatement[51327-51333]"
    }, {
      "left" : "case RANGE_WEEK_CENTER:",
      "right" : "case RANGE_WEEK_CENTER:",
      "info" : "SwitchCase[51265-51288]:SwitchCase[51354-51377]"
    }, {
      "left" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "right" : "startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;",
      "info" : "ExpressionStatement[51313-51363]:ExpressionStatement[51402-51452]"
    }, {
      "left" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "right" : "endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;",
      "info" : "ExpressionStatement[51388-51436]:ExpressionStatement[51477-51525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51461-51467]:BreakStatement[51550-51556]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51488-51496]:SwitchCase[51577-51585]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51521-51527]:BreakStatement[51610-51616]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51562-51568]:BreakStatement[51651-51657]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51581-51589]:SwitchCase[51670-51678]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "right" : "throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");",
      "info" : "ThrowStatement[51606-51693]:ThrowStatement[51695-51782]"
    }, {
      "left" : "if (startCutoff < Calendar.SUNDAY)",
      "right" : "if (startCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[51712-51788]:IfStatement[51801-51877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51747-51788]:Block[51836-51877]"
    }, {
      "left" : "startCutoff += 7;",
      "right" : "startCutoff += 7;",
      "info" : "ExpressionStatement[51761-51778]:ExpressionStatement[51850-51867]"
    }, {
      "left" : "if (startCutoff > Calendar.SATURDAY)",
      "right" : "if (startCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[51797-51875]:IfStatement[51886-51964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51834-51875]:Block[51923-51964]"
    }, {
      "left" : "startCutoff -= 7;",
      "right" : "startCutoff -= 7;",
      "info" : "ExpressionStatement[51848-51865]:ExpressionStatement[51937-51954]"
    }, {
      "left" : "if (endCutoff < Calendar.SUNDAY)",
      "right" : "if (endCutoff < Calendar.SUNDAY)",
      "info" : "IfStatement[51884-51956]:IfStatement[51973-52045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51917-51956]:Block[52006-52045]"
    }, {
      "left" : "endCutoff += 7;",
      "right" : "endCutoff += 7;",
      "info" : "ExpressionStatement[51931-51946]:ExpressionStatement[52020-52035]"
    }, {
      "left" : "if (endCutoff > Calendar.SATURDAY)",
      "right" : "if (endCutoff > Calendar.SATURDAY)",
      "info" : "IfStatement[51965-52039]:IfStatement[52054-52128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52000-52039]:Block[52089-52128]"
    }, {
      "left" : "endCutoff -= 7;",
      "right" : "endCutoff -= 7;",
      "info" : "ExpressionStatement[52014-52029]:ExpressionStatement[52103-52118]"
    }, {
      "left" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "right" : "while (start.get(Calendar.DAY_OF_WEEK) != startCutoff)",
      "info" : "WhileStatement[52048-52156]:WhileStatement[52137-52245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52103-52156]:Block[52192-52245]"
    }, {
      "left" : "start.add(Calendar.DATE, -1);",
      "right" : "start.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[52117-52146]:ExpressionStatement[52206-52235]"
    }, {
      "left" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "right" : "while (end.get(Calendar.DAY_OF_WEEK) != endCutoff)",
      "info" : "WhileStatement[52165-52266]:WhileStatement[52254-52355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52216-52266]:Block[52305-52355]"
    }, {
      "left" : "end.add(Calendar.DATE, 1);",
      "right" : "end.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[52230-52256]:ExpressionStatement[52319-52345]"
    }, {
      "left" : "return new DateIterator(start, end);",
      "right" : "return new DateIterator(start, end);",
      "info" : "ReturnStatement[52275-52311]:ReturnStatement[52364-52400]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53225-53231]:Modifier[53314-53320]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53232-53238]:Modifier[53321-53327]"
    }, {
      "left" : "Iterator<?>",
      "right" : "Iterator<?>",
      "info" : "ParameterizedType[53239-53250]:ParameterizedType[53328-53339]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[53251-53259]:SimpleName[53340-53348]"
    }, {
      "left" : "final Object focus",
      "right" : "final Object focus",
      "info" : "SingleVariableDeclaration[53260-53278]:SingleVariableDeclaration[53349-53367]"
    }, {
      "left" : "final int rangeStyle",
      "right" : "final int rangeStyle",
      "info" : "SingleVariableDeclaration[53280-53300]:SingleVariableDeclaration[53369-53389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53302-53732]:Block[53391-53821]"
    }, {
      "left" : "if (focus == null)",
      "right" : "if (focus == null)",
      "info" : "IfStatement[53312-53419]:IfStatement[53401-53508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53331-53419]:Block[53420-53508]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[53345-53409]:ThrowStatement[53434-53498]"
    }, {
      "left" : "if (focus instanceof Date)",
      "right" : "if (focus instanceof Date)",
      "info" : "IfStatement[53428-53726]:IfStatement[53517-53815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53455-53521]:Block[53544-53610]"
    }, {
      "left" : "return iterator((Date) focus, rangeStyle);",
      "right" : "return iterator((Date) focus, rangeStyle);",
      "info" : "ReturnStatement[53469-53511]:ReturnStatement[53558-53600]"
    }, {
      "left" : "if (focus instanceof Calendar)",
      "right" : "if (focus instanceof Calendar)",
      "info" : "IfStatement[53527-53726]:IfStatement[53616-53815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53558-53628]:Block[53647-53717]"
    }, {
      "left" : "return iterator((Calendar) focus, rangeStyle);",
      "right" : "return iterator((Calendar) focus, rangeStyle);",
      "info" : "ReturnStatement[53572-53618]:ReturnStatement[53661-53707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53634-53726]:Block[53723-53815]"
    }, {
      "left" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "right" : "throw new ClassCastException(\"Could not iterate based on \" + focus);",
      "info" : "ThrowStatement[53648-53716]:ThrowStatement[53737-53805]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55489-55495]:Modifier[55578-55584]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55496-55502]:Modifier[55585-55591]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[55503-55507]:PrimitiveType[55592-55596]"
    }, {
      "left" : "getFragmentInMilliseconds",
      "right" : "getFragmentInMilliseconds",
      "info" : "SimpleName[55508-55533]:SimpleName[55597-55622]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[55534-55549]:SingleVariableDeclaration[55623-55638]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[55551-55569]:SingleVariableDeclaration[55640-55658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55571-55649]:Block[55660-55738]"
    }, {
      "left" : "return getFragment(date, fragment, TimeUnit.MILLISECONDS);",
      "right" : "return getFragment(date, fragment, TimeUnit.MILLISECONDS);",
      "info" : "ReturnStatement[55581-55639]:ReturnStatement[55670-55728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57482-57488]:Modifier[57571-57577]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57489-57495]:Modifier[57578-57584]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[57496-57500]:PrimitiveType[57585-57589]"
    }, {
      "left" : "getFragmentInSeconds",
      "right" : "getFragmentInSeconds",
      "info" : "SimpleName[57501-57521]:SimpleName[57590-57610]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[57522-57537]:SingleVariableDeclaration[57611-57626]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[57539-57557]:SingleVariableDeclaration[57628-57646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57559-57628]:Block[57648-57717]"
    }, {
      "left" : "return getFragment(date, fragment, TimeUnit.SECONDS);",
      "right" : "return getFragment(date, fragment, TimeUnit.SECONDS);",
      "info" : "ReturnStatement[57569-57622]:ReturnStatement[57658-57711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59514-59520]:Modifier[59603-59609]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59521-59527]:Modifier[59610-59616]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[59528-59532]:PrimitiveType[59617-59621]"
    }, {
      "left" : "getFragmentInMinutes",
      "right" : "getFragmentInMinutes",
      "info" : "SimpleName[59533-59553]:SimpleName[59622-59642]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[59554-59569]:SingleVariableDeclaration[59643-59658]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[59571-59589]:SingleVariableDeclaration[59660-59678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59591-59660]:Block[59680-59749]"
    }, {
      "left" : "return getFragment(date, fragment, TimeUnit.MINUTES);",
      "right" : "return getFragment(date, fragment, TimeUnit.MINUTES);",
      "info" : "ReturnStatement[59601-59654]:ReturnStatement[59690-59743]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61507-61513]:Modifier[61596-61602]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61514-61520]:Modifier[61603-61609]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[61521-61525]:PrimitiveType[61610-61614]"
    }, {
      "left" : "getFragmentInHours",
      "right" : "getFragmentInHours",
      "info" : "SimpleName[61526-61544]:SimpleName[61615-61633]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[61545-61560]:SingleVariableDeclaration[61634-61649]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[61562-61580]:SingleVariableDeclaration[61651-61669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61582-61649]:Block[61671-61738]"
    }, {
      "left" : "return getFragment(date, fragment, TimeUnit.HOURS);",
      "right" : "return getFragment(date, fragment, TimeUnit.HOURS);",
      "info" : "ReturnStatement[61592-61643]:ReturnStatement[61681-61732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63410-63416]:Modifier[63499-63505]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63417-63423]:Modifier[63506-63512]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[63424-63428]:PrimitiveType[63513-63517]"
    }, {
      "left" : "getFragmentInDays",
      "right" : "getFragmentInDays",
      "info" : "SimpleName[63429-63446]:SimpleName[63518-63535]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[63447-63462]:SingleVariableDeclaration[63536-63551]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[63464-63482]:SingleVariableDeclaration[63553-63571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63484-63550]:Block[63573-63639]"
    }, {
      "left" : "return getFragment(date, fragment, TimeUnit.DAYS);",
      "right" : "return getFragment(date, fragment, TimeUnit.DAYS);",
      "info" : "ReturnStatement[63494-63544]:ReturnStatement[63583-63633]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65440-65446]:Modifier[65529-65535]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65447-65453]:Modifier[65536-65542]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[65454-65458]:PrimitiveType[65543-65547]"
    }, {
      "left" : "getFragmentInMilliseconds",
      "right" : "getFragmentInMilliseconds",
      "info" : "SimpleName[65459-65484]:SimpleName[65548-65573]"
    }, {
      "left" : "final Calendar calendar",
      "right" : "final Calendar calendar",
      "info" : "SingleVariableDeclaration[65485-65508]:SingleVariableDeclaration[65574-65597]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[65510-65528]:SingleVariableDeclaration[65599-65617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65530-65602]:Block[65619-65691]"
    }, {
      "left" : "return getFragment(calendar, fragment, TimeUnit.MILLISECONDS);",
      "right" : "return getFragment(calendar, fragment, TimeUnit.MILLISECONDS);",
      "info" : "ReturnStatement[65536-65598]:ReturnStatement[65625-65687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67445-67451]:Modifier[67534-67540]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67452-67458]:Modifier[67541-67547]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[67459-67463]:PrimitiveType[67548-67552]"
    }, {
      "left" : "getFragmentInSeconds",
      "right" : "getFragmentInSeconds",
      "info" : "SimpleName[67464-67484]:SimpleName[67553-67573]"
    }, {
      "left" : "final Calendar calendar",
      "right" : "final Calendar calendar",
      "info" : "SingleVariableDeclaration[67485-67508]:SingleVariableDeclaration[67574-67597]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[67510-67528]:SingleVariableDeclaration[67599-67617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67530-67603]:Block[67619-67692]"
    }, {
      "left" : "return getFragment(calendar, fragment, TimeUnit.SECONDS);",
      "right" : "return getFragment(calendar, fragment, TimeUnit.SECONDS);",
      "info" : "ReturnStatement[67540-67597]:ReturnStatement[67629-67686]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[69505-69511]:Modifier[69594-69600]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[69512-69518]:Modifier[69601-69607]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[69519-69523]:PrimitiveType[69608-69612]"
    }, {
      "left" : "getFragmentInMinutes",
      "right" : "getFragmentInMinutes",
      "info" : "SimpleName[69524-69544]:SimpleName[69613-69633]"
    }, {
      "left" : "final Calendar calendar",
      "right" : "final Calendar calendar",
      "info" : "SingleVariableDeclaration[69545-69568]:SingleVariableDeclaration[69634-69657]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[69570-69588]:SingleVariableDeclaration[69659-69677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69590-69663]:Block[69679-69752]"
    }, {
      "left" : "return getFragment(calendar, fragment, TimeUnit.MINUTES);",
      "right" : "return getFragment(calendar, fragment, TimeUnit.MINUTES);",
      "info" : "ReturnStatement[69600-69657]:ReturnStatement[69689-69746]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71540-71546]:Modifier[71629-71635]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71547-71553]:Modifier[71636-71642]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[71554-71558]:PrimitiveType[71643-71647]"
    }, {
      "left" : "getFragmentInHours",
      "right" : "getFragmentInHours",
      "info" : "SimpleName[71559-71577]:SimpleName[71648-71666]"
    }, {
      "left" : "final Calendar calendar",
      "right" : "final Calendar calendar",
      "info" : "SingleVariableDeclaration[71578-71601]:SingleVariableDeclaration[71667-71690]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[71603-71621]:SingleVariableDeclaration[71692-71710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71623-71694]:Block[71712-71783]"
    }, {
      "left" : "return getFragment(calendar, fragment, TimeUnit.HOURS);",
      "right" : "return getFragment(calendar, fragment, TimeUnit.HOURS);",
      "info" : "ReturnStatement[71633-71688]:ReturnStatement[71722-71777]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73607-73613]:Modifier[73696-73702]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73614-73620]:Modifier[73703-73709]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[73621-73625]:PrimitiveType[73710-73714]"
    }, {
      "left" : "getFragmentInDays",
      "right" : "getFragmentInDays",
      "info" : "SimpleName[73626-73643]:SimpleName[73715-73732]"
    }, {
      "left" : "final Calendar calendar",
      "right" : "final Calendar calendar",
      "info" : "SingleVariableDeclaration[73644-73667]:SingleVariableDeclaration[73733-73756]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[73669-73687]:SingleVariableDeclaration[73758-73776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73689-73759]:Block[73778-73848]"
    }, {
      "left" : "return getFragment(calendar, fragment, TimeUnit.DAYS);",
      "right" : "return getFragment(calendar, fragment, TimeUnit.DAYS);",
      "info" : "ReturnStatement[73699-73753]:ReturnStatement[73788-73842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74179-74186]:Modifier[74268-74275]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74187-74193]:Modifier[74276-74282]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[74194-74198]:PrimitiveType[74283-74287]"
    }, {
      "left" : "getFragment",
      "right" : "getFragment",
      "info" : "SimpleName[74199-74210]:SimpleName[74288-74299]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[74211-74226]:SingleVariableDeclaration[74300-74315]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[74228-74246]:SingleVariableDeclaration[74317-74335]"
    }, {
      "left" : "final TimeUnit unit",
      "right" : "final TimeUnit unit",
      "info" : "SingleVariableDeclaration[74248-74267]:SingleVariableDeclaration[74337-74356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74269-74535]:Block[74358-74624]"
    }, {
      "left" : "if(date == null)",
      "right" : "if(date == null)",
      "info" : "IfStatement[74279-74385]:IfStatement[74368-74474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74296-74385]:Block[74385-74474]"
    }, {
      "left" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[74310-74375]:ThrowStatement[74399-74464]"
    }, {
      "left" : "final Calendar calendar = Calendar.getInstance();",
      "right" : "final Calendar calendar = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[74394-74443]:VariableDeclarationStatement[74483-74532]"
    }, {
      "left" : "calendar.setTime(date);",
      "right" : "calendar.setTime(date);",
      "info" : "ExpressionStatement[74452-74475]:ExpressionStatement[74541-74564]"
    }, {
      "left" : "return getFragment(calendar, fragment, unit);",
      "right" : "return getFragment(calendar, fragment, unit);",
      "info" : "ReturnStatement[74484-74529]:ReturnStatement[74573-74618]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74971-74978]:Modifier[75060-75067]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74979-74985]:Modifier[75068-75074]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[74986-74990]:PrimitiveType[75075-75079]"
    }, {
      "left" : "getFragment",
      "right" : "getFragment",
      "info" : "SimpleName[74991-75002]:SimpleName[75080-75091]"
    }, {
      "left" : "final Calendar calendar",
      "right" : "final Calendar calendar",
      "info" : "SingleVariableDeclaration[75003-75026]:SingleVariableDeclaration[75092-75115]"
    }, {
      "left" : "final int fragment",
      "right" : "final int fragment",
      "info" : "SingleVariableDeclaration[75028-75046]:SingleVariableDeclaration[75117-75135]"
    }, {
      "left" : "final TimeUnit unit",
      "right" : "final TimeUnit unit",
      "info" : "SingleVariableDeclaration[75048-75067]:SingleVariableDeclaration[75137-75156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75069-76849]:Block[75158-76938]"
    }, {
      "left" : "if(calendar == null)",
      "right" : "if(calendar == null)",
      "info" : "IfStatement[75079-75190]:IfStatement[75168-75279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75100-75190]:Block[75189-75279]"
    }, {
      "left" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "right" : "throw  new IllegalArgumentException(\"The date must not be null\");",
      "info" : "ThrowStatement[75114-75179]:ThrowStatement[75203-75268]"
    }, {
      "left" : "long result = 0;",
      "right" : "long result = 0;",
      "info" : "VariableDeclarationStatement[75200-75216]:VariableDeclarationStatement[75289-75305]"
    }, {
      "left" : "final int offset = (unit == TimeUnit.DAYS) ? 0 : 1;",
      "right" : "final int offset = (unit == TimeUnit.DAYS) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[75234-75285]:VariableDeclarationStatement[75323-75374]"
    }, {
      "left" : "switch (fragment) {\n            case Calendar.YEAR:\n                result += unit.convert(calendar.get(Calendar.DAY_OF_YEAR) - offset, TimeUnit.DAYS);\n                break;\n            case Calendar.MONTH:\n                result += unit.convert(calendar.get(Calendar.DAY_OF_MONTH) - offset, TimeUnit.DAYS);\n                break;\n            default:\n                break;\n        }",
      "right" : "switch (fragment) {\n            case Calendar.YEAR:\n                result += unit.convert(calendar.get(Calendar.DAY_OF_YEAR) - offset, TimeUnit.DAYS);\n                break;\n            case Calendar.MONTH:\n                result += unit.convert(calendar.get(Calendar.DAY_OF_MONTH) - offset, TimeUnit.DAYS);\n                break;\n            default:\n                break;\n        }",
      "info" : "SwitchStatement[75370-75755]:SwitchStatement[75459-75844]"
    }, {
      "left" : "case Calendar.YEAR:",
      "right" : "case Calendar.YEAR:",
      "info" : "SwitchCase[75402-75421]:SwitchCase[75491-75510]"
    }, {
      "left" : "result += unit.convert(calendar.get(Calendar.DAY_OF_YEAR) - offset, TimeUnit.DAYS);",
      "right" : "result += unit.convert(calendar.get(Calendar.DAY_OF_YEAR) - offset, TimeUnit.DAYS);",
      "info" : "ExpressionStatement[75438-75521]:ExpressionStatement[75527-75610]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75538-75544]:BreakStatement[75627-75633]"
    }, {
      "left" : "case Calendar.MONTH:",
      "right" : "case Calendar.MONTH:",
      "info" : "SwitchCase[75557-75577]:SwitchCase[75646-75666]"
    }, {
      "left" : "result += unit.convert(calendar.get(Calendar.DAY_OF_MONTH) - offset, TimeUnit.DAYS);",
      "right" : "result += unit.convert(calendar.get(Calendar.DAY_OF_MONTH) - offset, TimeUnit.DAYS);",
      "info" : "ExpressionStatement[75594-75678]:ExpressionStatement[75683-75767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75695-75701]:BreakStatement[75784-75790]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[75714-75722]:SwitchCase[75803-75811]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75739-75745]:BreakStatement[75828-75834]"
    }, {
      "left" : "switch (fragment) {\n            // Number of days already calculated for these cases\n            case Calendar.YEAR:\n            case Calendar.MONTH:\n            \n            // The rest of the valid cases\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result += unit.convert(calendar.get(Calendar.HOUR_OF_DAY), TimeUnit.HOURS);\n                //$FALL-THROUGH$\n            case Calendar.HOUR_OF_DAY:\n                result += unit.convert(calendar.get(Calendar.MINUTE), TimeUnit.MINUTES);\n                //$FALL-THROUGH$\n            case Calendar.MINUTE:\n                result += unit.convert(calendar.get(Calendar.SECOND), TimeUnit.SECONDS);\n                //$FALL-THROUGH$\n            case Calendar.SECOND:\n                result += unit.convert(calendar.get(Calendar.MILLISECOND), TimeUnit.MILLISECONDS);\n                break;\n            case Calendar.MILLISECOND: break;//never useful\n                default: throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");\n        }",
      "right" : "switch (fragment) {\n            // Number of days already calculated for these cases\n            case Calendar.YEAR:\n            case Calendar.MONTH:\n            \n            // The rest of the valid cases\n            case Calendar.DAY_OF_YEAR:\n            case Calendar.DATE:\n                result += unit.convert(calendar.get(Calendar.HOUR_OF_DAY), TimeUnit.HOURS);\n                //$FALL-THROUGH$\n            case Calendar.HOUR_OF_DAY:\n                result += unit.convert(calendar.get(Calendar.MINUTE), TimeUnit.MINUTES);\n                //$FALL-THROUGH$\n            case Calendar.MINUTE:\n                result += unit.convert(calendar.get(Calendar.SECOND), TimeUnit.SECONDS);\n                //$FALL-THROUGH$\n            case Calendar.SECOND:\n                result += unit.convert(calendar.get(Calendar.MILLISECOND), TimeUnit.MILLISECONDS);\n                break;\n            case Calendar.MILLISECOND: break;//never useful\n                default: throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");\n        }",
      "info" : "SwitchStatement[75765-76820]:SwitchStatement[75854-76909]"
    }, {
      "left" : "case Calendar.YEAR:",
      "right" : "case Calendar.YEAR:",
      "info" : "SwitchCase[75862-75881]:SwitchCase[75951-75970]"
    }, {
      "left" : "case Calendar.MONTH:",
      "right" : "case Calendar.MONTH:",
      "info" : "SwitchCase[75894-75914]:SwitchCase[75983-76003]"
    }, {
      "left" : "case Calendar.DAY_OF_YEAR:",
      "right" : "case Calendar.DAY_OF_YEAR:",
      "info" : "SwitchCase[75983-76009]:SwitchCase[76072-76098]"
    }, {
      "left" : "case Calendar.DATE:",
      "right" : "case Calendar.DATE:",
      "info" : "SwitchCase[76022-76041]:SwitchCase[76111-76130]"
    }, {
      "left" : "result += unit.convert(calendar.get(Calendar.HOUR_OF_DAY), TimeUnit.HOURS);",
      "right" : "result += unit.convert(calendar.get(Calendar.HOUR_OF_DAY), TimeUnit.HOURS);",
      "info" : "ExpressionStatement[76058-76133]:ExpressionStatement[76147-76222]"
    }, {
      "left" : "case Calendar.HOUR_OF_DAY:",
      "right" : "case Calendar.HOUR_OF_DAY:",
      "info" : "SwitchCase[76179-76205]:SwitchCase[76268-76294]"
    }, {
      "left" : "result += unit.convert(calendar.get(Calendar.MINUTE), TimeUnit.MINUTES);",
      "right" : "result += unit.convert(calendar.get(Calendar.MINUTE), TimeUnit.MINUTES);",
      "info" : "ExpressionStatement[76222-76294]:ExpressionStatement[76311-76383]"
    }, {
      "left" : "case Calendar.MINUTE:",
      "right" : "case Calendar.MINUTE:",
      "info" : "SwitchCase[76340-76361]:SwitchCase[76429-76450]"
    }, {
      "left" : "result += unit.convert(calendar.get(Calendar.SECOND), TimeUnit.SECONDS);",
      "right" : "result += unit.convert(calendar.get(Calendar.SECOND), TimeUnit.SECONDS);",
      "info" : "ExpressionStatement[76378-76450]:ExpressionStatement[76467-76539]"
    }, {
      "left" : "case Calendar.SECOND:",
      "right" : "case Calendar.SECOND:",
      "info" : "SwitchCase[76496-76517]:SwitchCase[76585-76606]"
    }, {
      "left" : "result += unit.convert(calendar.get(Calendar.MILLISECOND), TimeUnit.MILLISECONDS);",
      "right" : "result += unit.convert(calendar.get(Calendar.MILLISECOND), TimeUnit.MILLISECONDS);",
      "info" : "ExpressionStatement[76534-76616]:ExpressionStatement[76623-76705]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76633-76639]:BreakStatement[76722-76728]"
    }, {
      "left" : "case Calendar.MILLISECOND:",
      "right" : "case Calendar.MILLISECOND:",
      "info" : "SwitchCase[76652-76678]:SwitchCase[76741-76767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76679-76685]:BreakStatement[76768-76774]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[76716-76724]:SwitchCase[76805-76813]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");",
      "right" : "throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");",
      "info" : "ThrowStatement[76725-76810]:ThrowStatement[76814-76899]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[76829-76843]:ReturnStatement[76918-76932]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77418-77424]:Modifier[77507-77513]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77425-77431]:Modifier[77514-77520]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[77432-77439]:PrimitiveType[77521-77528]"
    }, {
      "left" : "truncatedEquals",
      "right" : "truncatedEquals",
      "info" : "SimpleName[77440-77455]:SimpleName[77529-77544]"
    }, {
      "left" : "final Calendar cal1",
      "right" : "final Calendar cal1",
      "info" : "SingleVariableDeclaration[77456-77475]:SingleVariableDeclaration[77545-77564]"
    }, {
      "left" : "final Calendar cal2",
      "right" : "final Calendar cal2",
      "info" : "SingleVariableDeclaration[77477-77496]:SingleVariableDeclaration[77566-77585]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[77498-77513]:SingleVariableDeclaration[77587-77602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77515-77581]:Block[77604-77670]"
    }, {
      "left" : "return truncatedCompareTo(cal1, cal2, field) == 0;",
      "right" : "return truncatedCompareTo(cal1, cal2, field) == 0;",
      "info" : "ReturnStatement[77525-77575]:ReturnStatement[77614-77664]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78140-78146]:Modifier[78229-78235]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78147-78153]:Modifier[78236-78242]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[78154-78161]:PrimitiveType[78243-78250]"
    }, {
      "left" : "truncatedEquals",
      "right" : "truncatedEquals",
      "info" : "SimpleName[78162-78177]:SimpleName[78251-78266]"
    }, {
      "left" : "final Date date1",
      "right" : "final Date date1",
      "info" : "SingleVariableDeclaration[78178-78194]:SingleVariableDeclaration[78267-78283]"
    }, {
      "left" : "final Date date2",
      "right" : "final Date date2",
      "info" : "SingleVariableDeclaration[78196-78212]:SingleVariableDeclaration[78285-78301]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[78214-78229]:SingleVariableDeclaration[78303-78318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78231-78299]:Block[78320-78388]"
    }, {
      "left" : "return truncatedCompareTo(date1, date2, field) == 0;",
      "right" : "return truncatedCompareTo(date1, date2, field) == 0;",
      "info" : "ReturnStatement[78241-78293]:ReturnStatement[78330-78382]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78939-78945]:Modifier[79028-79034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78946-78952]:Modifier[79035-79041]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[78953-78956]:PrimitiveType[79042-79045]"
    }, {
      "left" : "truncatedCompareTo",
      "right" : "truncatedCompareTo",
      "info" : "SimpleName[78957-78975]:SimpleName[79046-79064]"
    }, {
      "left" : "final Calendar cal1",
      "right" : "final Calendar cal1",
      "info" : "SingleVariableDeclaration[78976-78995]:SingleVariableDeclaration[79065-79084]"
    }, {
      "left" : "final Calendar cal2",
      "right" : "final Calendar cal2",
      "info" : "SingleVariableDeclaration[78997-79016]:SingleVariableDeclaration[79086-79105]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[79018-79033]:SingleVariableDeclaration[79107-79122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79035-79221]:Block[79124-79310]"
    }, {
      "left" : "final Calendar truncatedCal1 = truncate(cal1, field);",
      "right" : "final Calendar truncatedCal1 = truncate(cal1, field);",
      "info" : "VariableDeclarationStatement[79045-79098]:VariableDeclarationStatement[79134-79187]"
    }, {
      "left" : "final Calendar truncatedCal2 = truncate(cal2, field);",
      "right" : "final Calendar truncatedCal2 = truncate(cal2, field);",
      "info" : "VariableDeclarationStatement[79107-79160]:VariableDeclarationStatement[79196-79249]"
    }, {
      "left" : "return truncatedCal1.compareTo(truncatedCal2);",
      "right" : "return truncatedCal1.compareTo(truncatedCal2);",
      "info" : "ReturnStatement[79169-79215]:ReturnStatement[79258-79304]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[79852-79858]:Modifier[79941-79947]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79859-79865]:Modifier[79948-79954]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[79866-79869]:PrimitiveType[79955-79958]"
    }, {
      "left" : "truncatedCompareTo",
      "right" : "truncatedCompareTo",
      "info" : "SimpleName[79870-79888]:SimpleName[79959-79977]"
    }, {
      "left" : "final Date date1",
      "right" : "final Date date1",
      "info" : "SingleVariableDeclaration[79889-79905]:SingleVariableDeclaration[79978-79994]"
    }, {
      "left" : "final Date date2",
      "right" : "final Date date2",
      "info" : "SingleVariableDeclaration[79907-79923]:SingleVariableDeclaration[79996-80012]"
    }, {
      "left" : "final int field",
      "right" : "final int field",
      "info" : "SingleVariableDeclaration[79925-79940]:SingleVariableDeclaration[80014-80029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79942-80126]:Block[80031-80215]"
    }, {
      "left" : "final Date truncatedDate1 = truncate(date1, field);",
      "right" : "final Date truncatedDate1 = truncate(date1, field);",
      "info" : "VariableDeclarationStatement[79952-80003]:VariableDeclarationStatement[80041-80092]"
    }, {
      "left" : "final Date truncatedDate2 = truncate(date2, field);",
      "right" : "final Date truncatedDate2 = truncate(date2, field);",
      "info" : "VariableDeclarationStatement[80012-80063]:VariableDeclarationStatement[80101-80152]"
    }, {
      "left" : "return truncatedDate1.compareTo(truncatedDate2);",
      "right" : "return truncatedDate1.compareTo(truncatedDate2);",
      "info" : "ReturnStatement[80072-80120]:ReturnStatement[80161-80209]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80256-80262]:Modifier[80345-80351]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[80263-80268]:TYPE_DECLARATION_KIND[80352-80357]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "SimpleName[80269-80281]:SimpleName[80358-80370]"
    }, {
      "left" : "DateIterator",
      "right" : "DateIterator",
      "info" : "SimpleName[80620-80632]:SimpleName[80709-80721]"
    }, {
      "left" : "final Calendar startFinal",
      "right" : "final Calendar startFinal",
      "info" : "SingleVariableDeclaration[80633-80658]:SingleVariableDeclaration[80722-80747]"
    }, {
      "left" : "final Calendar endFinal",
      "right" : "final Calendar endFinal",
      "info" : "SingleVariableDeclaration[80660-80683]:SingleVariableDeclaration[80749-80772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80685-80827]:Block[80774-80916]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[80699-80707]:SuperConstructorInvocation[80788-80796]"
    }, {
      "left" : "this.endFinal = endFinal;",
      "right" : "this.endFinal = endFinal;",
      "info" : "ExpressionStatement[80720-80745]:ExpressionStatement[80809-80834]"
    }, {
      "left" : "spot = startFinal;",
      "right" : "spot = startFinal;",
      "info" : "ExpressionStatement[80758-80776]:ExpressionStatement[80847-80865]"
    }, {
      "left" : "spot.add(Calendar.DATE, -1);",
      "right" : "spot.add(Calendar.DATE, -1);",
      "info" : "ExpressionStatement[80789-80817]:ExpressionStatement[80878-80906]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[81013-81022]:MarkerAnnotation[81102-81111]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[81031-81037]:Modifier[81120-81126]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[81038-81045]:PrimitiveType[81127-81134]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[81046-81053]:SimpleName[81135-81142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81056-81109]:Block[81145-81198]"
    }, {
      "left" : "return spot.before(endFinal);",
      "right" : "return spot.before(endFinal);",
      "info" : "ReturnStatement[81070-81099]:ReturnStatement[81159-81188]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[81260-81269]:MarkerAnnotation[81349-81358]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[81278-81284]:Modifier[81367-81373]"
    }, {
      "left" : "Calendar",
      "right" : "Calendar",
      "info" : "SimpleType[81285-81293]:SimpleType[81374-81382]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[81294-81298]:SimpleName[81383-81387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81301-81503]:Block[81390-81592]"
    }, {
      "left" : "if (spot.equals(endFinal))",
      "right" : "if (spot.equals(endFinal))",
      "info" : "IfStatement[81315-81409]:IfStatement[81404-81498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81342-81409]:Block[81431-81498]"
    }, {
      "left" : "throw new NoSuchElementException();",
      "right" : "throw new NoSuchElementException();",
      "info" : "ThrowStatement[81360-81395]:ThrowStatement[81449-81484]"
    }, {
      "left" : "spot.add(Calendar.DATE, 1);",
      "right" : "spot.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[81422-81449]:ExpressionStatement[81511-81538]"
    }, {
      "left" : "return (Calendar) spot.clone();",
      "right" : "return (Calendar) spot.clone();",
      "info" : "ReturnStatement[81462-81493]:ReturnStatement[81551-81582]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[81698-81707]:MarkerAnnotation[81787-81796]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[81716-81722]:Modifier[81805-81811]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81723-81727]:PrimitiveType[81812-81816]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[81728-81734]:SimpleName[81817-81823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81737-81803]:Block[81826-81892]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[81751-81793]:ThrowStatement[81840-81882]"
    } ]
  },
  "interFileMappings" : { }
}