{
  "matchedElements" : [
 {
    "left" : "class : ODatabaseImport",
    "right" : "class : ODatabaseImport",
    "info" : "TypeDeclaration[4491-57293]:TypeDeclaration[4491-57449]"
  }, {
    "left" : "EXPORT_IMPORT_MAP_NAME",
    "right" : "EXPORT_IMPORT_MAP_NAME",
    "info" : "FieldDeclaration[4681-4774]:FieldDeclaration[4681-4774]"
  }, {
    "left" : "IMPORT_RECORD_DUMP_LAP_EVERY_MS",
    "right" : "IMPORT_RECORD_DUMP_LAP_EVERY_MS",
    "info" : "FieldDeclaration[4778-4852]:FieldDeclaration[4778-4852]"
  }, {
    "left" : "linkedClasses",
    "right" : "linkedClasses",
    "info" : "FieldDeclaration[4858-4964]:FieldDeclaration[4858-4964]"
  }, {
    "left" : "superClasses",
    "right" : "superClasses",
    "info" : "FieldDeclaration[4968-5067]:FieldDeclaration[4968-5067]"
  }, {
    "left" : "jsonReader",
    "right" : "jsonReader",
    "info" : "FieldDeclaration[5071-5117]:FieldDeclaration[5071-5117]"
  }, {
    "left" : "record",
    "right" : "record",
    "info" : "FieldDeclaration[5121-5163]:FieldDeclaration[5121-5163]"
  }, {
    "left" : "schemaImported",
    "right" : "schemaImported",
    "info" : "FieldDeclaration[5167-5242]:FieldDeclaration[5167-5242]"
  }, {
    "left" : "exporterVersion",
    "right" : "exporterVersion",
    "info" : "FieldDeclaration[5246-5318]:FieldDeclaration[5246-5318]"
  }, {
    "left" : "schemaRecordId",
    "right" : "schemaRecordId",
    "info" : "FieldDeclaration[5322-5372]:FieldDeclaration[5322-5372]"
  }, {
    "left" : "indexMgrRecordId",
    "right" : "indexMgrRecordId",
    "info" : "FieldDeclaration[5376-5428]:FieldDeclaration[5376-5428]"
  }, {
    "left" : "deleteRIDMapping",
    "right" : "deleteRIDMapping",
    "info" : "FieldDeclaration[5434-5508]:FieldDeclaration[5434-5508]"
  }, {
    "left" : "exportImportHashTable",
    "right" : "exportImportHashTable",
    "info" : "FieldDeclaration[5514-5571]:FieldDeclaration[5514-5571]"
  }, {
    "left" : "preserveClusterIDs",
    "right" : "preserveClusterIDs",
    "info" : "FieldDeclaration[5577-5651]:FieldDeclaration[5577-5651]"
  }, {
    "left" : "migrateLinks",
    "right" : "migrateLinks",
    "info" : "FieldDeclaration[5655-5729]:FieldDeclaration[5655-5729]"
  }, {
    "left" : "merge",
    "right" : "merge",
    "info" : "FieldDeclaration[5733-5808]:FieldDeclaration[5733-5808]"
  }, {
    "left" : "rebuildIndexes",
    "right" : "rebuildIndexes",
    "info" : "FieldDeclaration[5812-5886]:FieldDeclaration[5812-5886]"
  }, {
    "left" : "indexesToRebuild",
    "right" : "indexesToRebuild",
    "info" : "FieldDeclaration[5892-5983]:FieldDeclaration[5892-5983]"
  }, {
    "left" : "interface : ValuesConverter",
    "right" : "interface : ValuesConverter",
    "info" : "TypeDeclaration[5989-6057]:TypeDeclaration[5989-6057]"
  }, {
    "left" : "public convert(value ) : ",
    "right" : "public convert(value ) : ",
    "info" : "MethodDeclaration[6033-6052]:MethodDeclaration[6033-6052]"
  }, {
    "left" : "class : ConvertersFactory",
    "right" : "class : ConvertersFactory",
    "info" : "TypeDeclaration[6063-6669]:TypeDeclaration[6063-6669]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[6115-6188]:FieldDeclaration[6115-6188]"
  }, {
    "left" : "public getConverter(value ) : ",
    "right" : "public getConverter(value ) : ",
    "info" : "MethodDeclaration[6196-6664]:MethodDeclaration[6196-6664]"
  }, {
    "left" : "class : LinksRewriter",
    "right" : "class : LinksRewriter",
    "info" : "TypeDeclaration[6675-7940]:TypeDeclaration[6675-7940]"
  }, {
    "left" : "public visitField(type , linkedType , value ) : ",
    "right" : "public visitField(type , linkedType , value ) : ",
    "info" : "MethodDeclaration[6756-7598]:MethodDeclaration[6756-7598]"
  }, {
    "left" : "public goFurther(type , linkedType , value , newValue ) : boolean",
    "right" : "public goFurther(type , linkedType , value , newValue ) : boolean",
    "info" : "MethodDeclaration[7606-7735]:MethodDeclaration[7606-7735]"
  }, {
    "left" : "public goDeeper(type , linkedType , value ) : boolean",
    "right" : "public goDeeper(type , linkedType , value ) : boolean",
    "info" : "MethodDeclaration[7743-7854]:MethodDeclaration[7743-7854]"
  }, {
    "left" : "public updateMode() : boolean",
    "right" : "public updateMode() : boolean",
    "info" : "MethodDeclaration[7862-7933]:MethodDeclaration[7862-7933]"
  }, {
    "left" : "class : AbstractCollectionConverter",
    "right" : "class : AbstractCollectionConverter",
    "info" : "TypeDeclaration[7946-9064]:TypeDeclaration[7946-9064]"
  }, {
    "left" : "interface : ResultCallback",
    "right" : "interface : ResultCallback",
    "info" : "TypeDeclaration[8044-8107]:TypeDeclaration[8044-8107]"
  }, {
    "left" : "public add(item ) : void",
    "right" : "public add(item ) : void",
    "info" : "MethodDeclaration[8078-8100]:MethodDeclaration[8078-8100]"
  }, {
    "left" : "protected convertSingleValue(item , result , updated boolean) : boolean",
    "right" : "protected convertSingleValue(item , result , updated boolean) : boolean",
    "info" : "MethodDeclaration[8115-9059]:MethodDeclaration[8115-9059]"
  }, {
    "left" : "class : SetConverter",
    "right" : "class : SetConverter",
    "info" : "TypeDeclaration[9070-9913]:TypeDeclaration[9070-9913]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[9158-9221]:FieldDeclaration[9158-9221]"
  }, {
    "left" : "public convert(value ) : ",
    "right" : "public convert(value ) : ",
    "info" : "MethodDeclaration[9229-9908]:MethodDeclaration[9229-9908]"
  }, {
    "left" : "public add(item ) : void",
    "right" : "public add(item ) : void",
    "info" : "MethodDeclaration[9634-9723]:MethodDeclaration[9634-9723]"
  }, {
    "left" : "class : ListConverter",
    "right" : "class : ListConverter",
    "info" : "TypeDeclaration[9919-10559]:TypeDeclaration[9919-10559]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[10009-10074]:FieldDeclaration[10009-10074]"
  }, {
    "left" : "public convert(value ) : ",
    "right" : "public convert(value ) : ",
    "info" : "MethodDeclaration[10082-10554]:MethodDeclaration[10082-10554]"
  }, {
    "left" : "public add(item ) : void",
    "right" : "public add(item ) : void",
    "info" : "MethodDeclaration[10248-10337]:MethodDeclaration[10248-10337]"
  }, {
    "left" : "class : RidBagConverter",
    "right" : "class : RidBagConverter",
    "info" : "TypeDeclaration[10565-11258]:TypeDeclaration[10565-11258]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[10660-10729]:FieldDeclaration[10660-10729]"
  }, {
    "left" : "public convert(value ) : ",
    "right" : "public convert(value ) : ",
    "info" : "MethodDeclaration[10737-11253]:MethodDeclaration[10737-11253]"
  }, {
    "left" : "public add(item ) : void",
    "right" : "public add(item ) : void",
    "info" : "MethodDeclaration[10940-11045]:MethodDeclaration[10940-11045]"
  }, {
    "left" : "class : MapConverter",
    "right" : "class : MapConverter",
    "info" : "TypeDeclaration[11264-12184]:TypeDeclaration[11264-12184]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[11352-11415]:FieldDeclaration[11352-11415]"
  }, {
    "left" : "public convert(value ) : ",
    "right" : "public convert(value ) : ",
    "info" : "MethodDeclaration[11423-12179]:MethodDeclaration[11423-12179]"
  }, {
    "left" : "class : MapResultCallback",
    "right" : "class : MapResultCallback",
    "info" : "TypeDeclaration[11554-11837]:TypeDeclaration[11554-11837]"
  }, {
    "left" : "key",
    "right" : "key",
    "info" : "FieldDeclaration[11621-11640]:FieldDeclaration[11621-11640]"
  }, {
    "left" : "public add(item ) : void",
    "right" : "public add(item ) : void",
    "info" : "MethodDeclaration[11652-11746]:MethodDeclaration[11652-11746]"
  }, {
    "left" : "public setKey(key ) : void",
    "right" : "public setKey(key ) : void",
    "info" : "MethodDeclaration[11758-11828]:MethodDeclaration[11758-11828]"
  }, {
    "left" : "class : LinkConverter",
    "right" : "class : LinkConverter",
    "info" : "TypeDeclaration[12190-12910]:TypeDeclaration[12190-12910]"
  }, {
    "left" : "INSTANCE",
    "right" : "INSTANCE",
    "info" : "FieldDeclaration[12280-12345]:FieldDeclaration[12280-12345]"
  }, {
    "left" : "exportImportHashTable",
    "right" : "exportImportHashTable",
    "info" : "FieldDeclaration[12353-12409]:FieldDeclaration[12353-12409]"
  }, {
    "left" : "public convert(value ) : ",
    "right" : "public convert(value ) : ",
    "info" : "MethodDeclaration[12417-12748]:MethodDeclaration[12417-12748]"
  }, {
    "left" : "public setExportImportHashTable(exportImportHashTable ) : void",
    "right" : "public setExportImportHashTable(exportImportHashTable ) : void",
    "info" : "MethodDeclaration[12756-12905]:MethodDeclaration[12756-12905]"
  }, {
    "left" : "public ODatabaseImport(database , iFileName , iListener ) : ",
    "right" : "public ODatabaseImport(database , iFileName , iListener ) : ",
    "info" : "MethodDeclaration[12916-13714]:MethodDeclaration[12916-13714]"
  }, {
    "left" : "public ODatabaseImport(database , iStream , iListener ) : ",
    "right" : "public ODatabaseImport(database , iStream , iListener ) : ",
    "info" : "MethodDeclaration[13720-14054]:MethodDeclaration[13720-14054]"
  }, {
    "left" : "public setOptions(iOptions ...) : ",
    "right" : "public setOptions(iOptions ...) : ",
    "info" : "MethodDeclaration[14060-14181]:MethodDeclaration[14060-14181]"
  }, {
    "left" : "public importDatabase() : ",
    "right" : "public importDatabase() : ",
    "info" : "MethodDeclaration[14187-16596]:MethodDeclaration[14187-16596]"
  }, {
    "left" : "public rebuildIndexes() : void",
    "right" : "public rebuildIndexes() : void",
    "info" : "MethodDeclaration[16602-17374]:MethodDeclaration[16602-17374]"
  }, {
    "left" : "public removeExportImportRIDsMap() : ",
    "right" : "public removeExportImportRIDsMap() : ",
    "info" : "MethodDeclaration[17380-17718]:MethodDeclaration[17380-17718]"
  }, {
    "left" : "public close() : void",
    "right" : "public close() : void",
    "info" : "MethodDeclaration[17724-17785]:MethodDeclaration[17724-17785]"
  }, {
    "left" : "public isMigrateLinks() : boolean",
    "right" : "public isMigrateLinks() : boolean",
    "info" : "MethodDeclaration[17791-17855]:MethodDeclaration[17791-17855]"
  }, {
    "left" : "public setMigrateLinks(migrateLinks boolean) : void",
    "right" : "public setMigrateLinks(migrateLinks boolean) : void",
    "info" : "MethodDeclaration[17861-17956]:MethodDeclaration[17861-17956]"
  }, {
    "left" : "public isRebuildIndexes() : boolean",
    "right" : "public isRebuildIndexes() : boolean",
    "info" : "MethodDeclaration[17962-18030]:MethodDeclaration[17962-18030]"
  }, {
    "left" : "public setRebuildIndexes(rebuildIndexes boolean) : void",
    "right" : "public setRebuildIndexes(rebuildIndexes boolean) : void",
    "info" : "MethodDeclaration[18036-18139]:MethodDeclaration[18036-18139]"
  }, {
    "left" : "public isPreserveClusterIDs() : boolean",
    "right" : "public isPreserveClusterIDs() : boolean",
    "info" : "MethodDeclaration[18145-18221]:MethodDeclaration[18145-18221]"
  }, {
    "left" : "public setPreserveClusterIDs(preserveClusterIDs boolean) : void",
    "right" : "public setPreserveClusterIDs(preserveClusterIDs boolean) : void",
    "info" : "MethodDeclaration[18227-18346]:MethodDeclaration[18227-18346]"
  }, {
    "left" : "public isMerge() : boolean",
    "right" : "public isMerge() : boolean",
    "info" : "MethodDeclaration[18352-18402]:MethodDeclaration[18352-18402]"
  }, {
    "left" : "public setMerge(merge boolean) : void",
    "right" : "public setMerge(merge boolean) : void",
    "info" : "MethodDeclaration[18408-18475]:MethodDeclaration[18408-18475]"
  }, {
    "left" : "public isDeleteRIDMapping() : boolean",
    "right" : "public isDeleteRIDMapping() : boolean",
    "info" : "MethodDeclaration[18481-18553]:MethodDeclaration[18481-18553]"
  }, {
    "left" : "public setDeleteRIDMapping(deleteRIDMapping boolean) : void",
    "right" : "public setDeleteRIDMapping(deleteRIDMapping boolean) : void",
    "info" : "MethodDeclaration[18559-18670]:MethodDeclaration[18559-18670]"
  }, {
    "left" : "protected parseSetting(option , items ...) : void",
    "right" : "protected parseSetting(option , items ...) : void",
    "info" : "MethodDeclaration[18676-19397]:MethodDeclaration[18676-19397]"
  }, {
    "left" : "protected removeDefaultClusters() : void",
    "right" : "protected removeDefaultClusters() : void",
    "info" : "MethodDeclaration[19403-21022]:MethodDeclaration[19403-21022]"
  }, {
    "left" : "private removeDefaultNonSecurityClasses() : void",
    "right" : "private removeDefaultNonSecurityClasses() : void",
    "info" : "MethodDeclaration[21028-22740]:MethodDeclaration[21028-22740]"
  }, {
    "left" : "private importInfo() : void",
    "right" : "private importInfo() : void",
    "info" : "MethodDeclaration[22746-23906]:MethodDeclaration[22746-23906]"
  }, {
    "left" : "private importManualIndexes() : void",
    "right" : "private importManualIndexes() : void",
    "info" : "MethodDeclaration[23912-26683]:MethodDeclaration[23912-26683]"
  }, {
    "left" : "private importSchema() : void",
    "right" : "private importSchema() : void",
    "info" : "MethodDeclaration[26689-33287]:MethodDeclaration[26689-33287]"
  }, {
    "left" : "private importProperty(iClass ) : void",
    "right" : "private importProperty(iClass ) : void",
    "info" : "MethodDeclaration[33293-36227]:MethodDeclaration[33293-36227]"
  }, {
    "left" : "private importCustomFields() : ",
    "right" : "private importCustomFields() : ",
    "info" : "MethodDeclaration[36233-36766]:MethodDeclaration[36233-36766]"
  }, {
    "left" : "private importClusters() : long",
    "right" : "private importClusters() : long",
    "info" : "MethodDeclaration[36772-43680]:MethodDeclaration[36772-43680]"
  }, {
    "left" : "last",
    "right" : "last",
    "info" : "FieldDeclaration[41775-41797]:FieldDeclaration[41775-41797]"
  }, {
    "left" : "public onBegin(iTask , iTotal long, metadata ) : void",
    "right" : "public onBegin(iTask , iTotal long, metadata ) : void",
    "info" : "MethodDeclaration[41809-42011]:MethodDeclaration[41809-42011]"
  }, {
    "left" : "public onProgress(iTask , iCounter long, iPercent float) : boolean",
    "right" : "public onProgress(iTask , iCounter long, iPercent float) : boolean",
    "info" : "MethodDeclaration[42023-42445]:MethodDeclaration[42023-42445]"
  }, {
    "left" : "public onCompletition(iTask , iSucceed boolean) : void",
    "right" : "public onCompletition(iTask , iSucceed boolean) : void",
    "info" : "MethodDeclaration[42457-42632]:MethodDeclaration[42457-42632]"
  }, {
    "left" : "private importRecords() : long",
    "right" : "private importRecords() : long",
    "info" : "MethodDeclaration[43686-45983]:MethodDeclaration[43686-45983]"
  }, {
    "left" : "private importRecord() : ",
    "right" : "private importRecord() : ",
    "info" : "MethodDeclaration[45989-49495]:MethodDeclaration[45989-49495]"
  }, {
    "left" : "private importIndexes() : void",
    "right" : "private importIndexes() : void",
    "info" : "MethodDeclaration[49501-52458]:MethodDeclaration[49501-52458]"
  }, {
    "left" : "private importClustersToIndex() : ",
    "right" : "private importClustersToIndex() : ",
    "info" : "MethodDeclaration[52464-52942]:MethodDeclaration[52464-52942]"
  }, {
    "left" : "private importIndexDefinition() : ",
    "right" : "private importIndexDefinition() : ",
    "info" : "MethodDeclaration[52948-54522]:MethodDeclaration[52948-54522]"
  }, {
    "left" : "private migrateLinksInImportedDocuments() : void",
    "right" : "private migrateLinksInImportedDocuments() : void",
    "info" : "MethodDeclaration[54528-56925]:MethodDeclaration[54528-56925]"
  }, {
    "left" : "private rewriteLinksInDocument(document ) : void",
    "right" : "protected rewriteLinksInDocument(document , rewrite ) : void",
    "info" : "MethodDeclaration[56931-57290]:MethodDeclaration[57083-57446]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4615-4621]:Modifier[4615-4621]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4622-4627]:TYPE_DECLARATION_KIND[4622-4627]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5989-5996]:Modifier[5989-5996]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[5997-6006]:TYPE_DECLARATION_KIND[5997-6006]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[6033-6034]:SimpleType[6033-6034]"
  }, {
    "left" : "convert",
    "right" : "convert",
    "info" : "SimpleName[6035-6042]:SimpleName[6035-6042]"
  }, {
    "left" : "T value",
    "right" : "T value",
    "info" : "SingleVariableDeclaration[6043-6050]:SingleVariableDeclaration[6043-6050]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6063-6070]:Modifier[6063-6070]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6071-6077]:Modifier[6071-6077]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[6078-6083]:Modifier[6078-6083]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6084-6089]:TYPE_DECLARATION_KIND[6084-6089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6196-6202]:Modifier[6196-6202]"
  }, {
    "left" : "ValuesConverter",
    "right" : "ValuesConverter",
    "info" : "SimpleType[6203-6218]:SimpleType[6203-6218]"
  }, {
    "left" : "getConverter",
    "right" : "getConverter",
    "info" : "SimpleName[6219-6231]:SimpleName[6219-6231]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[6232-6244]:SingleVariableDeclaration[6232-6244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6246-6664]:Block[6246-6664]"
  }, {
    "left" : "if (value instanceof Map)",
    "right" : "if (value instanceof Map)",
    "info" : "IfStatement[6255-6319]:IfStatement[6255-6319]"
  }, {
    "left" : "return MapConverter.INSTANCE;",
    "right" : "return MapConverter.INSTANCE;",
    "info" : "ReturnStatement[6290-6319]:ReturnStatement[6290-6319]"
  }, {
    "left" : "if (value instanceof List)",
    "right" : "if (value instanceof List)",
    "info" : "IfStatement[6329-6395]:IfStatement[6329-6395]"
  }, {
    "left" : "return ListConverter.INSTANCE;",
    "right" : "return ListConverter.INSTANCE;",
    "info" : "ReturnStatement[6365-6395]:ReturnStatement[6365-6395]"
  }, {
    "left" : "if (value instanceof Set)",
    "right" : "if (value instanceof Set)",
    "info" : "IfStatement[6405-6469]:IfStatement[6405-6469]"
  }, {
    "left" : "return SetConverter.INSTANCE;",
    "right" : "return SetConverter.INSTANCE;",
    "info" : "ReturnStatement[6440-6469]:ReturnStatement[6440-6469]"
  }, {
    "left" : "if (value instanceof ORidBag)",
    "right" : "if (value instanceof ORidBag)",
    "info" : "IfStatement[6479-6550]:IfStatement[6479-6550]"
  }, {
    "left" : "return RidBagConverter.INSTANCE;",
    "right" : "return RidBagConverter.INSTANCE;",
    "info" : "ReturnStatement[6518-6550]:ReturnStatement[6518-6550]"
  }, {
    "left" : "if (value instanceof OIdentifiable)",
    "right" : "if (value instanceof OIdentifiable)",
    "info" : "IfStatement[6560-6635]:IfStatement[6560-6635]"
  }, {
    "left" : "return LinkConverter.INSTANCE;",
    "right" : "return LinkConverter.INSTANCE;",
    "info" : "ReturnStatement[6605-6635]:ReturnStatement[6605-6635]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6645-6657]:ReturnStatement[6645-6657]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6675-6682]:Modifier[6675-6682]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6683-6689]:Modifier[6683-6689]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[6690-6695]:Modifier[6690-6695]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6696-6701]:TYPE_DECLARATION_KIND[6696-6701]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6756-6765]:MarkerAnnotation[6756-6765]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6771-6777]:Modifier[6771-6777]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[6778-6784]:SimpleType[6778-6784]"
  }, {
    "left" : "visitField",
    "right" : "visitField",
    "info" : "SimpleName[6785-6795]:SimpleName[6785-6795]"
  }, {
    "left" : "OType type",
    "right" : "OType type",
    "info" : "SingleVariableDeclaration[6796-6806]:SingleVariableDeclaration[6796-6806]"
  }, {
    "left" : "OType linkedType",
    "right" : "OType linkedType",
    "info" : "SingleVariableDeclaration[6808-6824]:SingleVariableDeclaration[6808-6824]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[6826-6838]:SingleVariableDeclaration[6826-6838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6840-7598]:Block[6840-7598]"
  }, {
    "left" : "boolean oldAutoConvertValue = false;",
    "right" : "boolean oldAutoConvertValue = false;",
    "info" : "VariableDeclarationStatement[6849-6885]:VariableDeclarationStatement[6849-6885]"
  }, {
    "left" : "if (value instanceof ORecordLazyMultiValue)",
    "right" : "if (value instanceof ORecordLazyMultiValue)",
    "info" : "IfStatement[6893-7140]:IfStatement[6893-7140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6937-7140]:Block[6937-7140]"
  }, {
    "left" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
    "right" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
    "info" : "VariableDeclarationStatement[6948-7013]:VariableDeclarationStatement[6948-7013]"
  }, {
    "left" : "oldAutoConvertValue = multiValue.isAutoConvertToRecord();",
    "right" : "oldAutoConvertValue = multiValue.isAutoConvertToRecord();",
    "info" : "ExpressionStatement[7023-7080]:ExpressionStatement[7023-7080]"
  }, {
    "left" : "multiValue.setAutoConvertToRecord(false);",
    "right" : "multiValue.setAutoConvertToRecord(false);",
    "info" : "ExpressionStatement[7090-7131]:ExpressionStatement[7090-7131]"
  }, {
    "left" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(value);",
    "right" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(value);",
    "info" : "VariableDeclarationStatement[7150-7237]:VariableDeclarationStatement[7150-7237]"
  }, {
    "left" : "if (valuesConverter == null)",
    "right" : "if (valuesConverter == null)",
    "info" : "IfStatement[7245-7296]:IfStatement[7245-7296]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[7283-7296]:ReturnStatement[7283-7296]"
  }, {
    "left" : "final Object newValue = valuesConverter.convert(value);",
    "right" : "final Object newValue = valuesConverter.convert(value);",
    "info" : "VariableDeclarationStatement[7306-7361]:VariableDeclarationStatement[7306-7361]"
  }, {
    "left" : "if (value instanceof ORecordLazyMultiValue)",
    "right" : "if (value instanceof ORecordLazyMultiValue)",
    "info" : "IfStatement[7371-7565]:IfStatement[7371-7565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7415-7565]:Block[7415-7565]"
  }, {
    "left" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
    "right" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
    "info" : "VariableDeclarationStatement[7426-7491]:VariableDeclarationStatement[7426-7491]"
  }, {
    "left" : "multiValue.setAutoConvertToRecord(oldAutoConvertValue);",
    "right" : "multiValue.setAutoConvertToRecord(oldAutoConvertValue);",
    "info" : "ExpressionStatement[7501-7556]:ExpressionStatement[7501-7556]"
  }, {
    "left" : "return newValue;",
    "right" : "return newValue;",
    "info" : "ReturnStatement[7575-7591]:ReturnStatement[7575-7591]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7606-7615]:MarkerAnnotation[7606-7615]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7621-7627]:Modifier[7621-7627]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7628-7635]:PrimitiveType[7628-7635]"
  }, {
    "left" : "goFurther",
    "right" : "goFurther",
    "info" : "SimpleName[7636-7645]:SimpleName[7636-7645]"
  }, {
    "left" : "OType type",
    "right" : "OType type",
    "info" : "SingleVariableDeclaration[7646-7656]:SingleVariableDeclaration[7646-7656]"
  }, {
    "left" : "OType linkedType",
    "right" : "OType linkedType",
    "info" : "SingleVariableDeclaration[7658-7674]:SingleVariableDeclaration[7658-7674]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[7676-7688]:SingleVariableDeclaration[7676-7688]"
  }, {
    "left" : "Object newValue",
    "right" : "Object newValue",
    "info" : "SingleVariableDeclaration[7690-7705]:SingleVariableDeclaration[7690-7705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7707-7735]:Block[7707-7735]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7716-7728]:ReturnStatement[7716-7728]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7743-7752]:MarkerAnnotation[7743-7752]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7758-7764]:Modifier[7758-7764]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7765-7772]:PrimitiveType[7765-7772]"
  }, {
    "left" : "goDeeper",
    "right" : "goDeeper",
    "info" : "SimpleName[7773-7781]:SimpleName[7773-7781]"
  }, {
    "left" : "OType type",
    "right" : "OType type",
    "info" : "SingleVariableDeclaration[7782-7792]:SingleVariableDeclaration[7782-7792]"
  }, {
    "left" : "OType linkedType",
    "right" : "OType linkedType",
    "info" : "SingleVariableDeclaration[7794-7810]:SingleVariableDeclaration[7794-7810]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[7812-7824]:SingleVariableDeclaration[7812-7824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7826-7854]:Block[7826-7854]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7835-7847]:ReturnStatement[7835-7847]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7862-7871]:MarkerAnnotation[7862-7871]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7877-7883]:Modifier[7877-7883]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7884-7891]:PrimitiveType[7884-7891]"
  }, {
    "left" : "updateMode",
    "right" : "updateMode",
    "info" : "SimpleName[7892-7902]:SimpleName[7892-7902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7905-7933]:Block[7905-7933]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7914-7926]:ReturnStatement[7914-7926]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7946-7953]:Modifier[7946-7953]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7954-7960]:Modifier[7954-7960]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[7961-7969]:Modifier[7961-7969]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7970-7975]:TYPE_DECLARATION_KIND[7970-7975]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[8044-8053]:TYPE_DECLARATION_KIND[8044-8053]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8078-8082]:PrimitiveType[8078-8082]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[8083-8086]:SimpleName[8083-8086]"
  }, {
    "left" : "Object item",
    "right" : "Object item",
    "info" : "SingleVariableDeclaration[8087-8098]:SingleVariableDeclaration[8087-8098]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8115-8124]:Modifier[8115-8124]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8125-8132]:PrimitiveType[8125-8132]"
  }, {
    "left" : "convertSingleValue",
    "right" : "convertSingleValue",
    "info" : "SimpleName[8133-8151]:SimpleName[8133-8151]"
  }, {
    "left" : "final Object item",
    "right" : "final Object item",
    "info" : "SingleVariableDeclaration[8152-8169]:SingleVariableDeclaration[8152-8169]"
  }, {
    "left" : "ResultCallback result",
    "right" : "ResultCallback result",
    "info" : "SingleVariableDeclaration[8171-8192]:SingleVariableDeclaration[8171-8192]"
  }, {
    "left" : "boolean updated",
    "right" : "boolean updated",
    "info" : "SingleVariableDeclaration[8194-8209]:SingleVariableDeclaration[8194-8209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8211-9059]:Block[8211-9059]"
  }, {
    "left" : "if (item == null)",
    "right" : "if (item == null)",
    "info" : "IfStatement[8220-8260]:IfStatement[8220-8260]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[8247-8260]:ReturnStatement[8247-8260]"
  }, {
    "left" : "if (item instanceof OIdentifiable)",
    "right" : "if (item instanceof OIdentifiable)",
    "info" : "IfStatement[8270-9027]:IfStatement[8270-9027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8305-8647]:Block[8305-8647]"
  }, {
    "left" : "final ValuesConverter<OIdentifiable> converter = (ValuesConverter<OIdentifiable>) ConvertersFactory.INSTANCE\r\n            .getConverter(item);",
    "right" : "final ValuesConverter<OIdentifiable> converter = (ValuesConverter<OIdentifiable>) ConvertersFactory.INSTANCE\r\n            .getConverter(item);",
    "info" : "VariableDeclarationStatement[8316-8458]:VariableDeclarationStatement[8316-8458]"
  }, {
    "left" : "final OIdentifiable newValue = converter.convert((OIdentifiable) item);",
    "right" : "final OIdentifiable newValue = converter.convert((OIdentifiable) item);",
    "info" : "VariableDeclarationStatement[8470-8541]:VariableDeclarationStatement[8470-8541]"
  }, {
    "left" : "result.add(newValue);",
    "right" : "result.add(newValue);",
    "info" : "ExpressionStatement[8551-8572]:ExpressionStatement[8551-8572]"
  }, {
    "left" : "if (!newValue.equals(item))",
    "right" : "if (!newValue.equals(item))",
    "info" : "IfStatement[8584-8638]:IfStatement[8584-8638]"
  }, {
    "left" : "updated = true;",
    "right" : "updated = true;",
    "info" : "ExpressionStatement[8623-8638]:ExpressionStatement[8623-8638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8653-9027]:Block[8653-9027]"
  }, {
    "left" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(item.getClass());",
    "right" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(item.getClass());",
    "info" : "VariableDeclarationStatement[8664-8761]:VariableDeclarationStatement[8664-8761]"
  }, {
    "left" : "if (valuesConverter == null)",
    "right" : "if (valuesConverter == null)",
    "info" : "IfStatement[8771-9018]:IfStatement[8771-9018]"
  }, {
    "left" : "result.add(item);",
    "right" : "result.add(item);",
    "info" : "ExpressionStatement[8811-8828]:ExpressionStatement[8811-8828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8843-9018]:Block[8843-9018]"
  }, {
    "left" : "final Object newValue = valuesConverter.convert(item);",
    "right" : "final Object newValue = valuesConverter.convert(item);",
    "info" : "VariableDeclarationStatement[8856-8910]:VariableDeclarationStatement[8856-8910]"
  }, {
    "left" : "if (newValue != item)",
    "right" : "if (newValue != item)",
    "info" : "IfStatement[8922-8972]:IfStatement[8922-8972]"
  }, {
    "left" : "updated = true;",
    "right" : "updated = true;",
    "info" : "ExpressionStatement[8957-8972]:ExpressionStatement[8957-8972]"
  }, {
    "left" : "result.add(newValue);",
    "right" : "result.add(newValue);",
    "info" : "ExpressionStatement[8986-9007]:ExpressionStatement[8986-9007]"
  }, {
    "left" : "return updated;",
    "right" : "return updated;",
    "info" : "ReturnStatement[9037-9052]:ReturnStatement[9037-9052]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9070-9077]:Modifier[9070-9077]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9078-9084]:Modifier[9078-9084]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[9085-9090]:Modifier[9085-9090]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[9091-9096]:TYPE_DECLARATION_KIND[9091-9096]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9229-9238]:MarkerAnnotation[9229-9238]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9244-9250]:Modifier[9244-9250]"
  }, {
    "left" : "Set",
    "right" : "Set",
    "info" : "SimpleType[9251-9254]:SimpleType[9251-9254]"
  }, {
    "left" : "convert",
    "right" : "convert",
    "info" : "SimpleName[9255-9262]:SimpleName[9255-9262]"
  }, {
    "left" : "Set value",
    "right" : "Set value",
    "info" : "SingleVariableDeclaration[9263-9272]:SingleVariableDeclaration[9263-9272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9274-9908]:Block[9274-9908]"
  }, {
    "left" : "boolean updated = false;",
    "right" : "boolean updated = false;",
    "info" : "VariableDeclarationStatement[9283-9307]:VariableDeclarationStatement[9283-9307]"
  }, {
    "left" : "final Set result;",
    "right" : "final Set result;",
    "info" : "VariableDeclarationStatement[9315-9332]:VariableDeclarationStatement[9315-9332]"
  }, {
    "left" : "if (value instanceof OMVRBTreeRIDSet)",
    "right" : "if (value instanceof OMVRBTreeRIDSet)",
    "info" : "IfStatement[9342-9560]:IfStatement[9342-9560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9380-9522]:Block[9380-9522]"
  }, {
    "left" : "OMVRBTreeRIDSet ridSet = new OMVRBTreeRIDSet();",
    "right" : "OMVRBTreeRIDSet ridSet = new OMVRBTreeRIDSet();",
    "info" : "VariableDeclarationStatement[9391-9438]:VariableDeclarationStatement[9391-9438]"
  }, {
    "left" : "ridSet.setAutoConvertToRecord(false);",
    "right" : "ridSet.setAutoConvertToRecord(false);",
    "info" : "ExpressionStatement[9448-9485]:ExpressionStatement[9448-9485]"
  }, {
    "left" : "result = ridSet;",
    "right" : "result = ridSet;",
    "info" : "ExpressionStatement[9497-9513]:ExpressionStatement[9497-9513]"
  }, {
    "left" : "result = new HashSet();",
    "right" : "result = new HashSet();",
    "info" : "ExpressionStatement[9537-9560]:ExpressionStatement[9537-9560]"
  }, {
    "left" : "final ResultCallback callback = new ResultCallback() {\r\n        @Override\r\n        public void add(Object item) {\r\n          result.add(item);\r\n        }\r\n      };",
    "right" : "final ResultCallback callback = new ResultCallback() {\r\n        @Override\r\n        public void add(Object item) {\r\n          result.add(item);\r\n        }\r\n      };",
    "info" : "VariableDeclarationStatement[9570-9733]:VariableDeclarationStatement[9570-9733]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9634-9643]:MarkerAnnotation[9634-9643]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9653-9659]:Modifier[9653-9659]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9660-9664]:PrimitiveType[9660-9664]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[9665-9668]:SimpleName[9665-9668]"
  }, {
    "left" : "Object item",
    "right" : "Object item",
    "info" : "SingleVariableDeclaration[9669-9680]:SingleVariableDeclaration[9669-9680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9682-9723]:Block[9682-9723]"
  }, {
    "left" : "result.add(item);",
    "right" : "result.add(item);",
    "info" : "ExpressionStatement[9695-9712]:ExpressionStatement[9695-9712]"
  }, {
    "left" : "for (Object item : value)\r\n        updated = convertSingleValue(item, callback, updated);",
    "right" : "for (Object item : value)\r\n        updated = convertSingleValue(item, callback, updated);",
    "info" : "EnhancedForStatement[9743-9832]:EnhancedForStatement[9743-9832]"
  }, {
    "left" : "updated = convertSingleValue(item, callback, updated);",
    "right" : "updated = convertSingleValue(item, callback, updated);",
    "info" : "ExpressionStatement[9778-9832]:ExpressionStatement[9778-9832]"
  }, {
    "left" : "if (updated)",
    "right" : "if (updated)",
    "info" : "IfStatement[9842-9878]:IfStatement[9842-9878]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[9864-9878]:ReturnStatement[9864-9878]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[9888-9901]:ReturnStatement[9888-9901]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9919-9926]:Modifier[9919-9926]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9927-9933]:Modifier[9927-9933]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[9934-9939]:Modifier[9934-9939]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[9940-9945]:TYPE_DECLARATION_KIND[9940-9945]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10082-10091]:MarkerAnnotation[10082-10091]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10097-10103]:Modifier[10097-10103]"
  }, {
    "left" : "List",
    "right" : "List",
    "info" : "SimpleType[10104-10108]:SimpleType[10104-10108]"
  }, {
    "left" : "convert",
    "right" : "convert",
    "info" : "SimpleName[10109-10116]:SimpleName[10109-10116]"
  }, {
    "left" : "List value",
    "right" : "List value",
    "info" : "SingleVariableDeclaration[10117-10127]:SingleVariableDeclaration[10117-10127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10129-10554]:Block[10129-10554]"
  }, {
    "left" : "final List result = new ArrayList();",
    "right" : "final List result = new ArrayList();",
    "info" : "VariableDeclarationStatement[10138-10174]:VariableDeclarationStatement[10138-10174]"
  }, {
    "left" : "final ResultCallback callback = new ResultCallback() {\r\n        @Override\r\n        public void add(Object item) {\r\n          result.add(item);\r\n        }\r\n      };",
    "right" : "final ResultCallback callback = new ResultCallback() {\r\n        @Override\r\n        public void add(Object item) {\r\n          result.add(item);\r\n        }\r\n      };",
    "info" : "VariableDeclarationStatement[10184-10347]:VariableDeclarationStatement[10184-10347]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10248-10257]:MarkerAnnotation[10248-10257]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10267-10273]:Modifier[10267-10273]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10274-10278]:PrimitiveType[10274-10278]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[10279-10282]:SimpleName[10279-10282]"
  }, {
    "left" : "Object item",
    "right" : "Object item",
    "info" : "SingleVariableDeclaration[10283-10294]:SingleVariableDeclaration[10283-10294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10296-10337]:Block[10296-10337]"
  }, {
    "left" : "result.add(item);",
    "right" : "result.add(item);",
    "info" : "ExpressionStatement[10309-10326]:ExpressionStatement[10309-10326]"
  }, {
    "left" : "boolean updated = false;",
    "right" : "boolean updated = false;",
    "info" : "VariableDeclarationStatement[10355-10379]:VariableDeclarationStatement[10355-10379]"
  }, {
    "left" : "for (Object item : value)\r\n        updated = convertSingleValue(item, callback, updated);",
    "right" : "for (Object item : value)\r\n        updated = convertSingleValue(item, callback, updated);",
    "info" : "EnhancedForStatement[10389-10478]:EnhancedForStatement[10389-10478]"
  }, {
    "left" : "updated = convertSingleValue(item, callback, updated);",
    "right" : "updated = convertSingleValue(item, callback, updated);",
    "info" : "ExpressionStatement[10424-10478]:ExpressionStatement[10424-10478]"
  }, {
    "left" : "if (updated)",
    "right" : "if (updated)",
    "info" : "IfStatement[10488-10524]:IfStatement[10488-10524]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[10510-10524]:ReturnStatement[10510-10524]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[10534-10547]:ReturnStatement[10534-10547]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10565-10572]:Modifier[10565-10572]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10573-10579]:Modifier[10573-10579]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[10580-10585]:Modifier[10580-10585]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[10586-10591]:TYPE_DECLARATION_KIND[10586-10591]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10737-10746]:MarkerAnnotation[10737-10746]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10752-10758]:Modifier[10752-10758]"
  }, {
    "left" : "ORidBag",
    "right" : "ORidBag",
    "info" : "SimpleType[10759-10766]:SimpleType[10759-10766]"
  }, {
    "left" : "convert",
    "right" : "convert",
    "info" : "SimpleName[10767-10774]:SimpleName[10767-10774]"
  }, {
    "left" : "ORidBag value",
    "right" : "ORidBag value",
    "info" : "SingleVariableDeclaration[10775-10788]:SingleVariableDeclaration[10775-10788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10790-11253]:Block[10790-11253]"
  }, {
    "left" : "final ORidBag result = new ORidBag();",
    "right" : "final ORidBag result = new ORidBag();",
    "info" : "VariableDeclarationStatement[10799-10836]:VariableDeclarationStatement[10799-10836]"
  }, {
    "left" : "boolean updated = false;",
    "right" : "boolean updated = false;",
    "info" : "VariableDeclarationStatement[10844-10868]:VariableDeclarationStatement[10844-10868]"
  }, {
    "left" : "final ResultCallback callback = new ResultCallback() {\r\n        @Override\r\n        public void add(Object item) {\r\n          result.add((OIdentifiable) item);\r\n        }\r\n      };",
    "right" : "final ResultCallback callback = new ResultCallback() {\r\n        @Override\r\n        public void add(Object item) {\r\n          result.add((OIdentifiable) item);\r\n        }\r\n      };",
    "info" : "VariableDeclarationStatement[10876-11055]:VariableDeclarationStatement[10876-11055]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10940-10949]:MarkerAnnotation[10940-10949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10959-10965]:Modifier[10959-10965]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10966-10970]:PrimitiveType[10966-10970]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[10971-10974]:SimpleName[10971-10974]"
  }, {
    "left" : "Object item",
    "right" : "Object item",
    "info" : "SingleVariableDeclaration[10975-10986]:SingleVariableDeclaration[10975-10986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10988-11045]:Block[10988-11045]"
  }, {
    "left" : "result.add((OIdentifiable) item);",
    "right" : "result.add((OIdentifiable) item);",
    "info" : "ExpressionStatement[11001-11034]:ExpressionStatement[11001-11034]"
  }, {
    "left" : "for (OIdentifiable identifiable : value)\r\n        updated = convertSingleValue(identifiable, callback, updated);",
    "right" : "for (OIdentifiable identifiable : value)\r\n        updated = convertSingleValue(identifiable, callback, updated);",
    "info" : "EnhancedForStatement[11065-11177]:EnhancedForStatement[11065-11177]"
  }, {
    "left" : "updated = convertSingleValue(identifiable, callback, updated);",
    "right" : "updated = convertSingleValue(identifiable, callback, updated);",
    "info" : "ExpressionStatement[11115-11177]:ExpressionStatement[11115-11177]"
  }, {
    "left" : "if (updated)",
    "right" : "if (updated)",
    "info" : "IfStatement[11187-11223]:IfStatement[11187-11223]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[11209-11223]:ReturnStatement[11209-11223]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[11233-11246]:ReturnStatement[11233-11246]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11264-11271]:Modifier[11264-11271]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11272-11278]:Modifier[11272-11278]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11279-11284]:Modifier[11279-11284]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[11285-11290]:TYPE_DECLARATION_KIND[11285-11290]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11423-11432]:MarkerAnnotation[11423-11432]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11438-11444]:Modifier[11438-11444]"
  }, {
    "left" : "Map",
    "right" : "Map",
    "info" : "SimpleType[11445-11448]:SimpleType[11445-11448]"
  }, {
    "left" : "convert",
    "right" : "convert",
    "info" : "SimpleName[11449-11456]:SimpleName[11449-11456]"
  }, {
    "left" : "Map value",
    "right" : "Map value",
    "info" : "SingleVariableDeclaration[11457-11466]:SingleVariableDeclaration[11457-11466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11468-12179]:Block[11468-12179]"
  }, {
    "left" : "final HashMap result = new HashMap();",
    "right" : "final HashMap result = new HashMap();",
    "info" : "VariableDeclarationStatement[11477-11514]:VariableDeclarationStatement[11477-11514]"
  }, {
    "left" : "boolean updated = false;",
    "right" : "boolean updated = false;",
    "info" : "VariableDeclarationStatement[11522-11546]:VariableDeclarationStatement[11522-11546]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[11554-11559]:Modifier[11554-11559]"
  }, {
    "left" : "final class MapResultCallback implements ResultCallback {\r\n        private Object key;\r\n\r\n        @Override\r\n        public void add(Object item) {\r\n          result.put(key, item);\r\n        }\r\n\r\n        public void setKey(Object key) {\r\n          this.key = key;\r\n        }\r\n      }",
    "right" : "final class MapResultCallback implements ResultCallback {\r\n        private Object key;\r\n\r\n        @Override\r\n        public void add(Object item) {\r\n          result.put(key, item);\r\n        }\r\n\r\n        public void setKey(Object key) {\r\n          this.key = key;\r\n        }\r\n      }",
    "info" : "TypeDeclarationStatement[11554-11837]:TypeDeclarationStatement[11554-11837]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[11560-11565]:TYPE_DECLARATION_KIND[11560-11565]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11652-11661]:MarkerAnnotation[11652-11661]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11671-11677]:Modifier[11671-11677]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11678-11682]:PrimitiveType[11678-11682]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[11683-11686]:SimpleName[11683-11686]"
  }, {
    "left" : "Object item",
    "right" : "Object item",
    "info" : "SingleVariableDeclaration[11687-11698]:SingleVariableDeclaration[11687-11698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11700-11746]:Block[11700-11746]"
  }, {
    "left" : "result.put(key, item);",
    "right" : "result.put(key, item);",
    "info" : "ExpressionStatement[11713-11735]:ExpressionStatement[11713-11735]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11758-11764]:Modifier[11758-11764]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11765-11769]:PrimitiveType[11765-11769]"
  }, {
    "left" : "setKey",
    "right" : "setKey",
    "info" : "SimpleName[11770-11776]:SimpleName[11770-11776]"
  }, {
    "left" : "Object key",
    "right" : "Object key",
    "info" : "SingleVariableDeclaration[11777-11787]:SingleVariableDeclaration[11777-11787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11789-11828]:Block[11789-11828]"
  }, {
    "left" : "this.key = key;",
    "right" : "this.key = key;",
    "info" : "ExpressionStatement[11802-11817]:ExpressionStatement[11802-11817]"
  }, {
    "left" : "final MapResultCallback callback = new MapResultCallback();",
    "right" : "final MapResultCallback callback = new MapResultCallback();",
    "info" : "VariableDeclarationStatement[11847-11906]:VariableDeclarationStatement[11847-11906]"
  }, {
    "left" : "for (Map.Entry entry : (Iterable<Map.Entry>) value.entrySet())",
    "right" : "for (Map.Entry entry : (Iterable<Map.Entry>) value.entrySet())",
    "info" : "EnhancedForStatement[11914-12105]:EnhancedForStatement[11914-12105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11977-12105]:Block[11977-12105]"
  }, {
    "left" : "callback.setKey(entry.getKey());",
    "right" : "callback.setKey(entry.getKey());",
    "info" : "ExpressionStatement[11988-12020]:ExpressionStatement[11988-12020]"
  }, {
    "left" : "updated = convertSingleValue(entry.getValue(), callback, updated);",
    "right" : "updated = convertSingleValue(entry.getValue(), callback, updated);",
    "info" : "ExpressionStatement[12030-12096]:ExpressionStatement[12030-12096]"
  }, {
    "left" : "if (updated)",
    "right" : "if (updated)",
    "info" : "IfStatement[12113-12149]:IfStatement[12113-12149]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[12135-12149]:ReturnStatement[12135-12149]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[12159-12172]:ReturnStatement[12159-12172]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12190-12197]:Modifier[12190-12197]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12198-12204]:Modifier[12198-12204]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12205-12210]:Modifier[12205-12210]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[12211-12216]:TYPE_DECLARATION_KIND[12211-12216]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12417-12426]:MarkerAnnotation[12417-12426]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12432-12438]:Modifier[12432-12438]"
  }, {
    "left" : "OIdentifiable",
    "right" : "OIdentifiable",
    "info" : "SimpleType[12439-12452]:SimpleType[12439-12452]"
  }, {
    "left" : "convert",
    "right" : "convert",
    "info" : "SimpleName[12453-12460]:SimpleName[12453-12460]"
  }, {
    "left" : "OIdentifiable value",
    "right" : "OIdentifiable value",
    "info" : "SingleVariableDeclaration[12461-12480]:SingleVariableDeclaration[12461-12480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12482-12748]:Block[12482-12748]"
  }, {
    "left" : "final ORID rid = value.getIdentity();",
    "right" : "final ORID rid = value.getIdentity();",
    "info" : "VariableDeclarationStatement[12491-12528]:VariableDeclarationStatement[12491-12528]"
  }, {
    "left" : "if (!rid.isPersistent())",
    "right" : "if (!rid.isPersistent())",
    "info" : "IfStatement[12536-12583]:IfStatement[12536-12583]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[12570-12583]:ReturnStatement[12570-12583]"
  }, {
    "left" : "final OIdentifiable newRid = exportImportHashTable.get(rid);",
    "right" : "final OIdentifiable newRid = exportImportHashTable.get(rid);",
    "info" : "VariableDeclarationStatement[12593-12653]:VariableDeclarationStatement[12593-12653]"
  }, {
    "left" : "if (newRid == null)",
    "right" : "if (newRid == null)",
    "info" : "IfStatement[12661-12703]:IfStatement[12661-12703]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[12690-12703]:ReturnStatement[12690-12703]"
  }, {
    "left" : "return newRid.getIdentity();",
    "right" : "return newRid.getIdentity();",
    "info" : "ReturnStatement[12713-12741]:ReturnStatement[12713-12741]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12756-12762]:Modifier[12756-12762]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12763-12767]:PrimitiveType[12763-12767]"
  }, {
    "left" : "setExportImportHashTable",
    "right" : "setExportImportHashTable",
    "info" : "SimpleName[12768-12792]:SimpleName[12768-12792]"
  }, {
    "left" : "OIndex<OIdentifiable> exportImportHashTable",
    "right" : "OIndex<OIdentifiable> exportImportHashTable",
    "info" : "SingleVariableDeclaration[12793-12836]:SingleVariableDeclaration[12793-12836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12838-12905]:Block[12838-12905]"
  }, {
    "left" : "this.exportImportHashTable = exportImportHashTable;",
    "right" : "this.exportImportHashTable = exportImportHashTable;",
    "info" : "ExpressionStatement[12847-12898]:ExpressionStatement[12847-12898]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12916-12922]:Modifier[12916-12922]"
  }, {
    "left" : "ODatabaseImport",
    "right" : "ODatabaseImport",
    "info" : "SimpleName[12923-12938]:SimpleName[12923-12938]"
  }, {
    "left" : "final ODatabaseDocumentInternal database",
    "right" : "final ODatabaseDocumentInternal database",
    "info" : "SingleVariableDeclaration[12939-12979]:SingleVariableDeclaration[12939-12979]"
  }, {
    "left" : "final String iFileName",
    "right" : "final String iFileName",
    "info" : "SingleVariableDeclaration[12981-13003]:SingleVariableDeclaration[12981-13003]"
  }, {
    "left" : "final OCommandOutputListener iListener",
    "right" : "final OCommandOutputListener iListener",
    "info" : "SingleVariableDeclaration[13005-13043]:SingleVariableDeclaration[13005-13043]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13059-13070]:SimpleType[13059-13070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13071-13714]:Block[13071-13714]"
  }, {
    "left" : "super(database, iFileName, iListener);",
    "right" : "super(database, iFileName, iListener);",
    "info" : "SuperConstructorInvocation[13078-13116]:SuperConstructorInvocation[13078-13116]"
  }, {
    "left" : "InputStream inStream;",
    "right" : "InputStream inStream;",
    "info" : "VariableDeclarationStatement[13124-13145]:VariableDeclarationStatement[13124-13145]"
  }, {
    "left" : "final BufferedInputStream bf = new BufferedInputStream(new FileInputStream(fileName));",
    "right" : "final BufferedInputStream bf = new BufferedInputStream(new FileInputStream(fileName));",
    "info" : "VariableDeclarationStatement[13151-13237]:VariableDeclarationStatement[13151-13237]"
  }, {
    "left" : "bf.mark(1024);",
    "right" : "bf.mark(1024);",
    "info" : "ExpressionStatement[13243-13257]:ExpressionStatement[13243-13257]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[13263-13403]:TryStatement[13263-13403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13267-13333]:Block[13267-13333]"
  }, {
    "left" : "inStream = new GZIPInputStream(bf, 16384);",
    "right" : "inStream = new GZIPInputStream(bf, 16384);",
    "info" : "ExpressionStatement[13276-13318]:ExpressionStatement[13276-13318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13354-13403]:Block[13354-13403]"
  }, {
    "left" : "bf.reset();",
    "right" : "bf.reset();",
    "info" : "ExpressionStatement[13363-13374]:ExpressionStatement[13363-13374]"
  }, {
    "left" : "inStream = bf;",
    "right" : "inStream = bf;",
    "info" : "ExpressionStatement[13382-13396]:ExpressionStatement[13382-13396]"
  }, {
    "left" : "OMurmurHash3HashFunction<OIdentifiable> keyHashFunction = new OMurmurHash3HashFunction<OIdentifiable>();",
    "right" : "OMurmurHash3HashFunction<OIdentifiable> keyHashFunction = new OMurmurHash3HashFunction<OIdentifiable>();",
    "info" : "VariableDeclarationStatement[13411-13515]:VariableDeclarationStatement[13411-13515]"
  }, {
    "left" : "keyHashFunction.setValueSerializer(OLinkSerializer.INSTANCE);",
    "right" : "keyHashFunction.setValueSerializer(OLinkSerializer.INSTANCE);",
    "info" : "ExpressionStatement[13521-13582]:ExpressionStatement[13521-13582]"
  }, {
    "left" : "jsonReader = new OJSONReader(new InputStreamReader(inStream));",
    "right" : "jsonReader = new OJSONReader(new InputStreamReader(inStream));",
    "info" : "ExpressionStatement[13590-13652]:ExpressionStatement[13590-13652]"
  }, {
    "left" : "database.declareIntent(new OIntentMassiveInsert());",
    "right" : "database.declareIntent(new OIntentMassiveInsert());",
    "info" : "ExpressionStatement[13658-13709]:ExpressionStatement[13658-13709]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13720-13726]:Modifier[13720-13726]"
  }, {
    "left" : "ODatabaseImport",
    "right" : "ODatabaseImport",
    "info" : "SimpleName[13727-13742]:SimpleName[13727-13742]"
  }, {
    "left" : "final ODatabaseDocumentInternal database",
    "right" : "final ODatabaseDocumentInternal database",
    "info" : "SingleVariableDeclaration[13743-13783]:SingleVariableDeclaration[13743-13783]"
  }, {
    "left" : "final InputStream iStream",
    "right" : "final InputStream iStream",
    "info" : "SingleVariableDeclaration[13785-13810]:SingleVariableDeclaration[13785-13810]"
  }, {
    "left" : "final OCommandOutputListener iListener",
    "right" : "final OCommandOutputListener iListener",
    "info" : "SingleVariableDeclaration[13812-13850]:SingleVariableDeclaration[13812-13850]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13866-13877]:SimpleType[13866-13877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13878-14054]:Block[13878-14054]"
  }, {
    "left" : "super(database, \"streaming\", iListener);",
    "right" : "super(database, \"streaming\", iListener);",
    "info" : "SuperConstructorInvocation[13885-13925]:SuperConstructorInvocation[13885-13925]"
  }, {
    "left" : "jsonReader = new OJSONReader(new InputStreamReader(iStream));",
    "right" : "jsonReader = new OJSONReader(new InputStreamReader(iStream));",
    "info" : "ExpressionStatement[13931-13992]:ExpressionStatement[13931-13992]"
  }, {
    "left" : "database.declareIntent(new OIntentMassiveInsert());",
    "right" : "database.declareIntent(new OIntentMassiveInsert());",
    "info" : "ExpressionStatement[13998-14049]:ExpressionStatement[13998-14049]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14060-14069]:MarkerAnnotation[14060-14069]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14073-14079]:Modifier[14073-14079]"
  }, {
    "left" : "ODatabaseImport",
    "right" : "ODatabaseImport",
    "info" : "SimpleType[14080-14095]:SimpleType[14080-14095]"
  }, {
    "left" : "setOptions",
    "right" : "setOptions",
    "info" : "SimpleName[14096-14106]:SimpleName[14096-14106]"
  }, {
    "left" : "String iOptions",
    "right" : "String iOptions",
    "info" : "SingleVariableDeclaration[14107-14122]:SingleVariableDeclaration[14107-14122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14124-14181]:Block[14124-14181]"
  }, {
    "left" : "super.setOptions(iOptions);",
    "right" : "super.setOptions(iOptions);",
    "info" : "ExpressionStatement[14131-14158]:ExpressionStatement[14131-14158]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[14164-14176]:ReturnStatement[14164-14176]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14187-14193]:Modifier[14187-14193]"
  }, {
    "left" : "ODatabaseImport",
    "right" : "ODatabaseImport",
    "info" : "SimpleType[14194-14209]:SimpleType[14194-14209]"
  }, {
    "left" : "importDatabase",
    "right" : "importDatabase",
    "info" : "SimpleName[14210-14224]:SimpleName[14210-14224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14227-16596]:Block[14227-16596]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[14234-16571]:TryStatement[14234-16571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14238-15760]:Block[14238-15760]"
  }, {
    "left" : "listener.onMessage(\"\\nStarted import of database '\" + database.getURL() + \"' from \" + fileName + \"...\");",
    "right" : "listener.onMessage(\"\\nStarted import of database '\" + database.getURL() + \"' from \" + fileName + \"...\");",
    "info" : "ExpressionStatement[14247-14351]:ExpressionStatement[14247-14351]"
  }, {
    "left" : "long time = System.currentTimeMillis();",
    "right" : "long time = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[14361-14400]:VariableDeclarationStatement[14361-14400]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[14410-14456]:ExpressionStatement[14410-14456]"
  }, {
    "left" : "database.setMVCC(false);",
    "right" : "database.setMVCC(false);",
    "info" : "ExpressionStatement[14466-14490]:ExpressionStatement[14466-14490]"
  }, {
    "left" : "database.setValidationEnabled(false);",
    "right" : "database.setValidationEnabled(false);",
    "info" : "ExpressionStatement[14498-14535]:ExpressionStatement[14498-14535]"
  }, {
    "left" : "database.setStatus(STATUS.IMPORTING);",
    "right" : "database.setStatus(STATUS.IMPORTING);",
    "info" : "ExpressionStatement[14545-14582]:ExpressionStatement[14545-14582]"
  }, {
    "left" : "for (OIndex<?> index : database.getMetadata().getIndexManager().getIndexes())",
    "right" : "for (OIndex<?> index : database.getMetadata().getIndexManager().getIndexes())",
    "info" : "EnhancedForStatement[14592-14778]:EnhancedForStatement[14592-14778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14670-14778]:Block[14670-14778]"
  }, {
    "left" : "if (index.isAutomatic())",
    "right" : "if (index.isAutomatic())",
    "info" : "IfStatement[14681-14769]:IfStatement[14681-14769]"
  }, {
    "left" : "indexesToRebuild.add(index.getName().toLowerCase());",
    "right" : "indexesToRebuild.add(index.getName().toLowerCase());",
    "info" : "ExpressionStatement[14717-14769]:ExpressionStatement[14717-14769]"
  }, {
    "left" : "if (!merge)",
    "right" : "if (!merge)",
    "info" : "IfStatement[14788-14843]:IfStatement[14788-14843]"
  }, {
    "left" : "removeDefaultNonSecurityClasses();",
    "right" : "removeDefaultNonSecurityClasses();",
    "info" : "ExpressionStatement[14809-14843]:ExpressionStatement[14809-14843]"
  }, {
    "left" : "String tag;",
    "right" : "String tag;",
    "info" : "VariableDeclarationStatement[14853-14864]:VariableDeclarationStatement[14853-14864]"
  }, {
    "left" : "while (jsonReader.hasNext() && jsonReader.lastChar() != '}')",
    "right" : "while (jsonReader.hasNext() && jsonReader.lastChar() != '}')",
    "info" : "WhileStatement[14872-15428]:WhileStatement[14872-15428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14933-15428]:Block[14933-15428]"
  }, {
    "left" : "tag = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "tag = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[14944-15002]:ExpressionStatement[14944-15002]"
  }, {
    "left" : "if (tag.equals(\"info\"))",
    "right" : "if (tag.equals(\"info\"))",
    "info" : "IfStatement[15014-15419]:IfStatement[15014-15419]"
  }, {
    "left" : "importInfo();",
    "right" : "importInfo();",
    "info" : "ExpressionStatement[15049-15062]:ExpressionStatement[15049-15062]"
  }, {
    "left" : "if (tag.equals(\"clusters\"))",
    "right" : "if (tag.equals(\"clusters\"))",
    "info" : "IfStatement[15077-15419]:IfStatement[15077-15419]"
  }, {
    "left" : "importClusters();",
    "right" : "importClusters();",
    "info" : "ExpressionStatement[15116-15133]:ExpressionStatement[15116-15133]"
  }, {
    "left" : "if (tag.equals(\"schema\"))",
    "right" : "if (tag.equals(\"schema\"))",
    "info" : "IfStatement[15148-15419]:IfStatement[15148-15419]"
  }, {
    "left" : "importSchema();",
    "right" : "importSchema();",
    "info" : "ExpressionStatement[15185-15200]:ExpressionStatement[15185-15200]"
  }, {
    "left" : "if (tag.equals(\"records\"))",
    "right" : "if (tag.equals(\"records\"))",
    "info" : "IfStatement[15215-15419]:IfStatement[15215-15419]"
  }, {
    "left" : "importRecords();",
    "right" : "importRecords();",
    "info" : "ExpressionStatement[15253-15269]:ExpressionStatement[15253-15269]"
  }, {
    "left" : "if (tag.equals(\"indexes\"))",
    "right" : "if (tag.equals(\"indexes\"))",
    "info" : "IfStatement[15284-15419]:IfStatement[15284-15419]"
  }, {
    "left" : "importIndexes();",
    "right" : "importIndexes();",
    "info" : "ExpressionStatement[15322-15338]:ExpressionStatement[15322-15338]"
  }, {
    "left" : "if (tag.equals(\"manualIndexes\"))",
    "right" : "if (tag.equals(\"manualIndexes\"))",
    "info" : "IfStatement[15353-15419]:IfStatement[15353-15419]"
  }, {
    "left" : "importManualIndexes();",
    "right" : "importManualIndexes();",
    "info" : "ExpressionStatement[15397-15419]:ExpressionStatement[15397-15419]"
  }, {
    "left" : "if (rebuildIndexes)",
    "right" : "if (rebuildIndexes)",
    "info" : "IfStatement[15438-15484]:IfStatement[15438-15484]"
  }, {
    "left" : "rebuildIndexes();",
    "right" : "rebuildIndexes();",
    "info" : "ExpressionStatement[15467-15484]:ExpressionStatement[15467-15484]"
  }, {
    "left" : "database.getStorage().synch();",
    "right" : "database.getStorage().synch();",
    "info" : "ExpressionStatement[15494-15524]:ExpressionStatement[15494-15524]"
  }, {
    "left" : "database.setStatus(STATUS.OPEN);",
    "right" : "database.setStatus(STATUS.OPEN);",
    "info" : "ExpressionStatement[15532-15564]:ExpressionStatement[15532-15564]"
  }, {
    "left" : "if (isDeleteRIDMapping())",
    "right" : "if (isDeleteRIDMapping())",
    "info" : "IfStatement[15574-15637]:IfStatement[15574-15637]"
  }, {
    "left" : "removeExportImportRIDsMap();",
    "right" : "removeExportImportRIDsMap();",
    "info" : "ExpressionStatement[15609-15637]:ExpressionStatement[15609-15637]"
  }, {
    "left" : "listener.onMessage(\"\\n\\nDatabase import completed in \" + ((System.currentTimeMillis() - time)) + \" ms\");",
    "right" : "listener.onMessage(\"\\n\\nDatabase import completed in \" + ((System.currentTimeMillis() - time)) + \" ms\");",
    "info" : "ExpressionStatement[15647-15751]:ExpressionStatement[15647-15751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15781-16538]:Block[15781-16538]"
  }, {
    "left" : "final StringWriter writer = new StringWriter();",
    "right" : "final StringWriter writer = new StringWriter();",
    "info" : "VariableDeclarationStatement[15790-15837]:VariableDeclarationStatement[15790-15837]"
  }, {
    "left" : "writer.append(\"Error on database import happened just before line \" + jsonReader.getLineNumber() + \", column \"\r\n          + jsonReader.getColumnNumber() + \"\\n\");",
    "right" : "writer.append(\"Error on database import happened just before line \" + jsonReader.getLineNumber() + \", column \"\r\n          + jsonReader.getColumnNumber() + \"\\n\");",
    "info" : "ExpressionStatement[15845-16006]:ExpressionStatement[15845-16006]"
  }, {
    "left" : "final PrintWriter printWriter = new PrintWriter(writer);",
    "right" : "final PrintWriter printWriter = new PrintWriter(writer);",
    "info" : "VariableDeclarationStatement[16014-16070]:VariableDeclarationStatement[16014-16070]"
  }, {
    "left" : "e.printStackTrace(printWriter);",
    "right" : "e.printStackTrace(printWriter);",
    "info" : "ExpressionStatement[16078-16109]:ExpressionStatement[16078-16109]"
  }, {
    "left" : "printWriter.flush();",
    "right" : "printWriter.flush();",
    "info" : "ExpressionStatement[16117-16137]:ExpressionStatement[16117-16137]"
  }, {
    "left" : "listener.onMessage(writer.toString());",
    "right" : "listener.onMessage(writer.toString());",
    "info" : "ExpressionStatement[16147-16185]:ExpressionStatement[16147-16185]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[16195-16400]:TryStatement[16195-16400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16199-16234]:Block[16199-16234]"
  }, {
    "left" : "writer.close();",
    "right" : "writer.close();",
    "info" : "ExpressionStatement[16210-16225]:ExpressionStatement[16210-16225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16258-16400]:Block[16258-16400]"
  }, {
    "left" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e1);",
    "right" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e1);",
    "info" : "ThrowStatement[16269-16391]:ThrowStatement[16269-16391]"
  }, {
    "left" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e);",
    "right" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e);",
    "info" : "ThrowStatement[16410-16531]:ThrowStatement[16410-16531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16547-16571]:Block[16547-16571]"
  }, {
    "left" : "close();",
    "right" : "close();",
    "info" : "ExpressionStatement[16556-16564]:ExpressionStatement[16556-16564]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[16579-16591]:ReturnStatement[16579-16591]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16602-16608]:Modifier[16602-16608]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16609-16613]:PrimitiveType[16609-16613]"
  }, {
    "left" : "rebuildIndexes",
    "right" : "rebuildIndexes",
    "info" : "SimpleName[16614-16628]:SimpleName[16614-16628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16631-17374]:Block[16631-17374]"
  }, {
    "left" : "database.getMetadata().getIndexManager().reload();",
    "right" : "database.getMetadata().getIndexManager().reload();",
    "info" : "ExpressionStatement[16638-16688]:ExpressionStatement[16638-16688]"
  }, {
    "left" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
    "right" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
    "info" : "VariableDeclarationStatement[16696-16771]:VariableDeclarationStatement[16696-16771]"
  }, {
    "left" : "listener.onMessage(\"\\nRebuild of stale indexes...\");",
    "right" : "listener.onMessage(\"\\nRebuild of stale indexes...\");",
    "info" : "ExpressionStatement[16779-16831]:ExpressionStatement[16779-16831]"
  }, {
    "left" : "for (String indexName : indexesToRebuild)",
    "right" : "for (String indexName : indexesToRebuild)",
    "info" : "EnhancedForStatement[16837-17309]:EnhancedForStatement[16837-17309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16879-17309]:Block[16879-17309]"
  }, {
    "left" : "if (indexManager.getIndex(indexName) == null)",
    "right" : "if (indexManager.getIndex(indexName) == null)",
    "info" : "IfStatement[16890-17071]:IfStatement[16890-17071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16936-17071]:Block[16936-17071]"
  }, {
    "left" : "listener.onMessage(\"\\nIndex \" + indexName + \" is skipped because it is absent in imported DB.\");",
    "right" : "listener.onMessage(\"\\nIndex \" + indexName + \" is skipped because it is absent in imported DB.\");",
    "info" : "ExpressionStatement[16947-17043]:ExpressionStatement[16947-17043]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[17053-17062]:ContinueStatement[17053-17062]"
  }, {
    "left" : "listener.onMessage(\"\\nStart rebuild index \" + indexName);",
    "right" : "listener.onMessage(\"\\nStart rebuild index \" + indexName);",
    "info" : "ExpressionStatement[17081-17138]:ExpressionStatement[17081-17138]"
  }, {
    "left" : "database.command(new OCommandSQL(\"rebuild index \" + indexName)).execute();",
    "right" : "database.command(new OCommandSQL(\"rebuild index \" + indexName)).execute();",
    "info" : "ExpressionStatement[17146-17220]:ExpressionStatement[17146-17220]"
  }, {
    "left" : "listener.onMessage(\"\\nRebuild  of index \" + indexName + \" is completed.\");",
    "right" : "listener.onMessage(\"\\nRebuild  of index \" + indexName + \" is completed.\");",
    "info" : "ExpressionStatement[17228-17302]:ExpressionStatement[17228-17302]"
  }, {
    "left" : "listener.onMessage(\"\\nStale indexes were rebuilt...\");",
    "right" : "listener.onMessage(\"\\nStale indexes were rebuilt...\");",
    "info" : "ExpressionStatement[17315-17369]:ExpressionStatement[17315-17369]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17380-17386]:Modifier[17380-17386]"
  }, {
    "left" : "ODatabaseImport",
    "right" : "ODatabaseImport",
    "info" : "SimpleType[17387-17402]:SimpleType[17387-17402]"
  }, {
    "left" : "removeExportImportRIDsMap",
    "right" : "removeExportImportRIDsMap",
    "info" : "SimpleName[17403-17428]:SimpleName[17403-17428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17431-17718]:Block[17431-17718]"
  }, {
    "left" : "listener.onMessage(\"\\nDeleting RID Mapping table...\");",
    "right" : "listener.onMessage(\"\\nDeleting RID Mapping table...\");",
    "info" : "ExpressionStatement[17438-17492]:ExpressionStatement[17438-17492]"
  }, {
    "left" : "if (exportImportHashTable != null)",
    "right" : "if (exportImportHashTable != null)",
    "info" : "IfStatement[17498-17660]:IfStatement[17498-17660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17533-17660]:Block[17533-17660]"
  }, {
    "left" : "database.command(new OCommandSQL(\"drop index \" + EXPORT_IMPORT_MAP_NAME));",
    "right" : "database.command(new OCommandSQL(\"drop index \" + EXPORT_IMPORT_MAP_NAME));",
    "info" : "ExpressionStatement[17542-17616]:ExpressionStatement[17542-17616]"
  }, {
    "left" : "exportImportHashTable = null;",
    "right" : "exportImportHashTable = null;",
    "info" : "ExpressionStatement[17624-17653]:ExpressionStatement[17624-17653]"
  }, {
    "left" : "listener.onMessage(\"OK\\n\");",
    "right" : "listener.onMessage(\"OK\\n\");",
    "info" : "ExpressionStatement[17668-17695]:ExpressionStatement[17668-17695]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[17701-17713]:ReturnStatement[17701-17713]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17724-17730]:Modifier[17724-17730]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17731-17735]:PrimitiveType[17731-17735]"
  }, {
    "left" : "close",
    "right" : "close",
    "info" : "SimpleName[17736-17741]:SimpleName[17736-17741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17744-17785]:Block[17744-17785]"
  }, {
    "left" : "database.declareIntent(null);",
    "right" : "database.declareIntent(null);",
    "info" : "ExpressionStatement[17751-17780]:ExpressionStatement[17751-17780]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17791-17797]:Modifier[17791-17797]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17798-17805]:PrimitiveType[17798-17805]"
  }, {
    "left" : "isMigrateLinks",
    "right" : "isMigrateLinks",
    "info" : "SimpleName[17806-17820]:SimpleName[17806-17820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17823-17855]:Block[17823-17855]"
  }, {
    "left" : "return migrateLinks;",
    "right" : "return migrateLinks;",
    "info" : "ReturnStatement[17830-17850]:ReturnStatement[17830-17850]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17861-17867]:Modifier[17861-17867]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17868-17872]:PrimitiveType[17868-17872]"
  }, {
    "left" : "setMigrateLinks",
    "right" : "setMigrateLinks",
    "info" : "SimpleName[17873-17888]:SimpleName[17873-17888]"
  }, {
    "left" : "boolean migrateLinks",
    "right" : "boolean migrateLinks",
    "info" : "SingleVariableDeclaration[17889-17909]:SingleVariableDeclaration[17889-17909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17911-17956]:Block[17911-17956]"
  }, {
    "left" : "this.migrateLinks = migrateLinks;",
    "right" : "this.migrateLinks = migrateLinks;",
    "info" : "ExpressionStatement[17918-17951]:ExpressionStatement[17918-17951]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17962-17968]:Modifier[17962-17968]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17969-17976]:PrimitiveType[17969-17976]"
  }, {
    "left" : "isRebuildIndexes",
    "right" : "isRebuildIndexes",
    "info" : "SimpleName[17977-17993]:SimpleName[17977-17993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17996-18030]:Block[17996-18030]"
  }, {
    "left" : "return rebuildIndexes;",
    "right" : "return rebuildIndexes;",
    "info" : "ReturnStatement[18003-18025]:ReturnStatement[18003-18025]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18036-18042]:Modifier[18036-18042]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18043-18047]:PrimitiveType[18043-18047]"
  }, {
    "left" : "setRebuildIndexes",
    "right" : "setRebuildIndexes",
    "info" : "SimpleName[18048-18065]:SimpleName[18048-18065]"
  }, {
    "left" : "boolean rebuildIndexes",
    "right" : "boolean rebuildIndexes",
    "info" : "SingleVariableDeclaration[18066-18088]:SingleVariableDeclaration[18066-18088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18090-18139]:Block[18090-18139]"
  }, {
    "left" : "this.rebuildIndexes = rebuildIndexes;",
    "right" : "this.rebuildIndexes = rebuildIndexes;",
    "info" : "ExpressionStatement[18097-18134]:ExpressionStatement[18097-18134]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18145-18151]:Modifier[18145-18151]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18152-18159]:PrimitiveType[18152-18159]"
  }, {
    "left" : "isPreserveClusterIDs",
    "right" : "isPreserveClusterIDs",
    "info" : "SimpleName[18160-18180]:SimpleName[18160-18180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18183-18221]:Block[18183-18221]"
  }, {
    "left" : "return preserveClusterIDs;",
    "right" : "return preserveClusterIDs;",
    "info" : "ReturnStatement[18190-18216]:ReturnStatement[18190-18216]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18227-18233]:Modifier[18227-18233]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18234-18238]:PrimitiveType[18234-18238]"
  }, {
    "left" : "setPreserveClusterIDs",
    "right" : "setPreserveClusterIDs",
    "info" : "SimpleName[18239-18260]:SimpleName[18239-18260]"
  }, {
    "left" : "boolean preserveClusterIDs",
    "right" : "boolean preserveClusterIDs",
    "info" : "SingleVariableDeclaration[18261-18287]:SingleVariableDeclaration[18261-18287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18289-18346]:Block[18289-18346]"
  }, {
    "left" : "this.preserveClusterIDs = preserveClusterIDs;",
    "right" : "this.preserveClusterIDs = preserveClusterIDs;",
    "info" : "ExpressionStatement[18296-18341]:ExpressionStatement[18296-18341]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18352-18358]:Modifier[18352-18358]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18359-18366]:PrimitiveType[18359-18366]"
  }, {
    "left" : "isMerge",
    "right" : "isMerge",
    "info" : "SimpleName[18367-18374]:SimpleName[18367-18374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18377-18402]:Block[18377-18402]"
  }, {
    "left" : "return merge;",
    "right" : "return merge;",
    "info" : "ReturnStatement[18384-18397]:ReturnStatement[18384-18397]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18408-18414]:Modifier[18408-18414]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18415-18419]:PrimitiveType[18415-18419]"
  }, {
    "left" : "setMerge",
    "right" : "setMerge",
    "info" : "SimpleName[18420-18428]:SimpleName[18420-18428]"
  }, {
    "left" : "boolean merge",
    "right" : "boolean merge",
    "info" : "SingleVariableDeclaration[18429-18442]:SingleVariableDeclaration[18429-18442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18444-18475]:Block[18444-18475]"
  }, {
    "left" : "this.merge = merge;",
    "right" : "this.merge = merge;",
    "info" : "ExpressionStatement[18451-18470]:ExpressionStatement[18451-18470]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18481-18487]:Modifier[18481-18487]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18488-18495]:PrimitiveType[18488-18495]"
  }, {
    "left" : "isDeleteRIDMapping",
    "right" : "isDeleteRIDMapping",
    "info" : "SimpleName[18496-18514]:SimpleName[18496-18514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18517-18553]:Block[18517-18553]"
  }, {
    "left" : "return deleteRIDMapping;",
    "right" : "return deleteRIDMapping;",
    "info" : "ReturnStatement[18524-18548]:ReturnStatement[18524-18548]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18559-18565]:Modifier[18559-18565]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18566-18570]:PrimitiveType[18566-18570]"
  }, {
    "left" : "setDeleteRIDMapping",
    "right" : "setDeleteRIDMapping",
    "info" : "SimpleName[18571-18590]:SimpleName[18571-18590]"
  }, {
    "left" : "boolean deleteRIDMapping",
    "right" : "boolean deleteRIDMapping",
    "info" : "SingleVariableDeclaration[18591-18615]:SingleVariableDeclaration[18591-18615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18617-18670]:Block[18617-18670]"
  }, {
    "left" : "this.deleteRIDMapping = deleteRIDMapping;",
    "right" : "this.deleteRIDMapping = deleteRIDMapping;",
    "info" : "ExpressionStatement[18624-18665]:ExpressionStatement[18624-18665]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18676-18685]:MarkerAnnotation[18676-18685]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[18689-18698]:Modifier[18689-18698]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18699-18703]:PrimitiveType[18699-18703]"
  }, {
    "left" : "parseSetting",
    "right" : "parseSetting",
    "info" : "SimpleName[18704-18716]:SimpleName[18704-18716]"
  }, {
    "left" : "final String option",
    "right" : "final String option",
    "info" : "SingleVariableDeclaration[18717-18736]:SingleVariableDeclaration[18717-18736]"
  }, {
    "left" : "final List<String> items",
    "right" : "final List<String> items",
    "info" : "SingleVariableDeclaration[18738-18762]:SingleVariableDeclaration[18738-18762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18764-19397]:Block[18764-19397]"
  }, {
    "left" : "if (option.equalsIgnoreCase(\"-deleteRIDMapping\"))",
    "right" : "if (option.equalsIgnoreCase(\"-deleteRIDMapping\"))",
    "info" : "IfStatement[18771-19392]:IfStatement[18771-19392]"
  }, {
    "left" : "deleteRIDMapping = Boolean.parseBoolean(items.get(0));",
    "right" : "deleteRIDMapping = Boolean.parseBoolean(items.get(0));",
    "info" : "ExpressionStatement[18828-18882]:ExpressionStatement[18828-18882]"
  }, {
    "left" : "if (option.equalsIgnoreCase(\"-preserveClusterIDs\"))",
    "right" : "if (option.equalsIgnoreCase(\"-preserveClusterIDs\"))",
    "info" : "IfStatement[18893-19392]:IfStatement[18893-19392]"
  }, {
    "left" : "preserveClusterIDs = Boolean.parseBoolean(items.get(0));",
    "right" : "preserveClusterIDs = Boolean.parseBoolean(items.get(0));",
    "info" : "ExpressionStatement[18952-19008]:ExpressionStatement[18952-19008]"
  }, {
    "left" : "if (option.equalsIgnoreCase(\"-merge\"))",
    "right" : "if (option.equalsIgnoreCase(\"-merge\"))",
    "info" : "IfStatement[19019-19392]:IfStatement[19019-19392]"
  }, {
    "left" : "merge = Boolean.parseBoolean(items.get(0));",
    "right" : "merge = Boolean.parseBoolean(items.get(0));",
    "info" : "ExpressionStatement[19065-19108]:ExpressionStatement[19065-19108]"
  }, {
    "left" : "if (option.equalsIgnoreCase(\"-migrateLinks\"))",
    "right" : "if (option.equalsIgnoreCase(\"-migrateLinks\"))",
    "info" : "IfStatement[19119-19392]:IfStatement[19119-19392]"
  }, {
    "left" : "migrateLinks = Boolean.parseBoolean(items.get(0));",
    "right" : "migrateLinks = Boolean.parseBoolean(items.get(0));",
    "info" : "ExpressionStatement[19172-19222]:ExpressionStatement[19172-19222]"
  }, {
    "left" : "if (option.equalsIgnoreCase(\"-rebuildIndexes\"))",
    "right" : "if (option.equalsIgnoreCase(\"-rebuildIndexes\"))",
    "info" : "IfStatement[19233-19392]:IfStatement[19233-19392]"
  }, {
    "left" : "rebuildIndexes = Boolean.parseBoolean(items.get(0));",
    "right" : "rebuildIndexes = Boolean.parseBoolean(items.get(0));",
    "info" : "ExpressionStatement[19288-19340]:ExpressionStatement[19288-19340]"
  }, {
    "left" : "super.parseSetting(option, items);",
    "right" : "super.parseSetting(option, items);",
    "info" : "ExpressionStatement[19358-19392]:ExpressionStatement[19358-19392]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[19403-19412]:Modifier[19403-19412]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19413-19417]:PrimitiveType[19413-19417]"
  }, {
    "left" : "removeDefaultClusters",
    "right" : "removeDefaultClusters",
    "info" : "SimpleName[19418-19439]:SimpleName[19418-19439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19442-21022]:Block[19442-21022]"
  }, {
    "left" : "listener.onMessage(\"\\nWARN: Exported database does not support manual index separation.\"\r\n        + \" Manual index cluster will be dropped.\");",
    "right" : "listener.onMessage(\"\\nWARN: Exported database does not support manual index separation.\"\r\n        + \" Manual index cluster will be dropped.\");",
    "info" : "ExpressionStatement[19449-19591]:ExpressionStatement[19449-19591]"
  }, {
    "left" : "database.dropCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME, true);",
    "right" : "database.dropCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME, true);",
    "info" : "ExpressionStatement[19788-19859]:ExpressionStatement[19788-19859]"
  }, {
    "left" : "final OSchema schema = database.getMetadata().getSchema();",
    "right" : "final OSchema schema = database.getMetadata().getSchema();",
    "info" : "VariableDeclarationStatement[19867-19925]:VariableDeclarationStatement[19867-19925]"
  }, {
    "left" : "if (schema.existsClass(OUser.CLASS_NAME))",
    "right" : "if (schema.existsClass(OUser.CLASS_NAME))",
    "info" : "IfStatement[19931-20015]:IfStatement[19931-20015]"
  }, {
    "left" : "schema.dropClass(OUser.CLASS_NAME);",
    "right" : "schema.dropClass(OUser.CLASS_NAME);",
    "info" : "ExpressionStatement[19980-20015]:ExpressionStatement[19980-20015]"
  }, {
    "left" : "if (schema.existsClass(ORole.CLASS_NAME))",
    "right" : "if (schema.existsClass(ORole.CLASS_NAME))",
    "info" : "IfStatement[20021-20105]:IfStatement[20021-20105]"
  }, {
    "left" : "schema.dropClass(ORole.CLASS_NAME);",
    "right" : "schema.dropClass(ORole.CLASS_NAME);",
    "info" : "ExpressionStatement[20070-20105]:ExpressionStatement[20070-20105]"
  }, {
    "left" : "if (schema.existsClass(OSecurityShared.RESTRICTED_CLASSNAME))",
    "right" : "if (schema.existsClass(OSecurityShared.RESTRICTED_CLASSNAME))",
    "info" : "IfStatement[20111-20235]:IfStatement[20111-20235]"
  }, {
    "left" : "schema.dropClass(OSecurityShared.RESTRICTED_CLASSNAME);",
    "right" : "schema.dropClass(OSecurityShared.RESTRICTED_CLASSNAME);",
    "info" : "ExpressionStatement[20180-20235]:ExpressionStatement[20180-20235]"
  }, {
    "left" : "if (schema.existsClass(OFunction.CLASS_NAME))",
    "right" : "if (schema.existsClass(OFunction.CLASS_NAME))",
    "info" : "IfStatement[20241-20333]:IfStatement[20241-20333]"
  }, {
    "left" : "schema.dropClass(OFunction.CLASS_NAME);",
    "right" : "schema.dropClass(OFunction.CLASS_NAME);",
    "info" : "ExpressionStatement[20294-20333]:ExpressionStatement[20294-20333]"
  }, {
    "left" : "if (schema.existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))",
    "right" : "if (schema.existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))",
    "info" : "IfStatement[20339-20475]:IfStatement[20339-20475]"
  }, {
    "left" : "schema.dropClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
    "right" : "schema.dropClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
    "info" : "ExpressionStatement[20414-20475]:ExpressionStatement[20414-20475]"
  }, {
    "left" : "if (schema.existsClass(OClassTrigger.CLASSNAME))",
    "right" : "if (schema.existsClass(OClassTrigger.CLASSNAME))",
    "info" : "IfStatement[20481-20579]:IfStatement[20481-20579]"
  }, {
    "left" : "schema.dropClass(OClassTrigger.CLASSNAME);",
    "right" : "schema.dropClass(OClassTrigger.CLASSNAME);",
    "info" : "ExpressionStatement[20537-20579]:ExpressionStatement[20537-20579]"
  }, {
    "left" : "schema.save();",
    "right" : "schema.save();",
    "info" : "ExpressionStatement[20585-20599]:ExpressionStatement[20585-20599]"
  }, {
    "left" : "database.dropCluster(OStorage.CLUSTER_DEFAULT_NAME, true);",
    "right" : "database.dropCluster(OStorage.CLUSTER_DEFAULT_NAME, true);",
    "info" : "ExpressionStatement[20607-20665]:ExpressionStatement[20607-20665]"
  }, {
    "left" : "database.getStorage().setDefaultClusterId(database.addCluster(OStorage.CLUSTER_DEFAULT_NAME));",
    "right" : "database.getStorage().setDefaultClusterId(database.addCluster(OStorage.CLUSTER_DEFAULT_NAME));",
    "info" : "ExpressionStatement[20673-20767]:ExpressionStatement[20673-20767]"
  }, {
    "left" : "new ODocument().save(OStorage.CLUSTER_DEFAULT_NAME);",
    "right" : "new ODocument().save(OStorage.CLUSTER_DEFAULT_NAME);",
    "info" : "ExpressionStatement[20911-20963]:ExpressionStatement[20911-20963]"
  }, {
    "left" : "database.getMetadata().getSecurity().create();",
    "right" : "database.getMetadata().getSecurity().create();",
    "info" : "ExpressionStatement[20971-21017]:ExpressionStatement[20971-21017]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21028-21035]:Modifier[21028-21035]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21036-21040]:PrimitiveType[21036-21040]"
  }, {
    "left" : "removeDefaultNonSecurityClasses",
    "right" : "removeDefaultNonSecurityClasses",
    "info" : "SimpleName[21041-21072]:SimpleName[21041-21072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21075-22740]:Block[21075-22740]"
  }, {
    "left" : "listener.onMessage(\"\\nNon merge mode (-merge=false): removing all default non security classes\");",
    "right" : "listener.onMessage(\"\\nNon merge mode (-merge=false): removing all default non security classes\");",
    "info" : "ExpressionStatement[21082-21179]:ExpressionStatement[21082-21179]"
  }, {
    "left" : "OSchema schema = database.getMetadata().getSchema();",
    "right" : "OSchema schema = database.getMetadata().getSchema();",
    "info" : "VariableDeclarationStatement[21187-21239]:VariableDeclarationStatement[21187-21239]"
  }, {
    "left" : "Collection<OClass> classes = schema.getClasses();",
    "right" : "Collection<OClass> classes = schema.getClasses();",
    "info" : "VariableDeclarationStatement[21245-21294]:VariableDeclarationStatement[21245-21294]"
  }, {
    "left" : "final Map<String, OClass> classesToDrop = new HashMap<String, OClass>();",
    "right" : "final Map<String, OClass> classesToDrop = new HashMap<String, OClass>();",
    "info" : "VariableDeclarationStatement[21302-21374]:VariableDeclarationStatement[21302-21374]"
  }, {
    "left" : "for (OClass dbClass : classes)",
    "right" : "for (OClass dbClass : classes)",
    "info" : "EnhancedForStatement[21380-21708]:EnhancedForStatement[21380-21708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21411-21708]:Block[21411-21708]"
  }, {
    "left" : "String className = dbClass.getName();",
    "right" : "String className = dbClass.getName();",
    "info" : "VariableDeclarationStatement[21420-21457]:VariableDeclarationStatement[21420-21457]"
  }, {
    "left" : "if (!className.equalsIgnoreCase(ORole.CLASS_NAME) && !className.equalsIgnoreCase(OUser.CLASS_NAME)\r\n          && !className.equalsIgnoreCase(OSecurityShared.IDENTITY_CLASSNAME))",
    "right" : "if (!className.equalsIgnoreCase(ORole.CLASS_NAME) && !className.equalsIgnoreCase(OUser.CLASS_NAME)\r\n          && !className.equalsIgnoreCase(OSecurityShared.IDENTITY_CLASSNAME))",
    "info" : "IfStatement[21465-21701]:IfStatement[21465-21701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21643-21701]:Block[21643-21701]"
  }, {
    "left" : "classesToDrop.put(className, dbClass);",
    "right" : "classesToDrop.put(className, dbClass);",
    "info" : "ExpressionStatement[21654-21692]:ExpressionStatement[21654-21692]"
  }, {
    "left" : "int removedClasses = 0;",
    "right" : "int removedClasses = 0;",
    "info" : "VariableDeclarationStatement[21716-21739]:VariableDeclarationStatement[21716-21739]"
  }, {
    "left" : "while (!classesToDrop.isEmpty())",
    "right" : "while (!classesToDrop.isEmpty())",
    "info" : "WhileStatement[21745-22619]:WhileStatement[21745-22619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21778-22619]:Block[21778-22619]"
  }, {
    "left" : "final AbstractList<String> classesReadyToDrop = new ArrayList<String>();",
    "right" : "final AbstractList<String> classesReadyToDrop = new ArrayList<String>();",
    "info" : "VariableDeclarationStatement[21787-21859]:VariableDeclarationStatement[21787-21859]"
  }, {
    "left" : "for (String className : classesToDrop.keySet())",
    "right" : "for (String className : classesToDrop.keySet())",
    "info" : "EnhancedForStatement[21867-22370]:EnhancedForStatement[21867-22370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21915-22370]:Block[21915-22370]"
  }, {
    "left" : "boolean isSuperClass = false;",
    "right" : "boolean isSuperClass = false;",
    "info" : "VariableDeclarationStatement[21926-21955]:VariableDeclarationStatement[21926-21955]"
  }, {
    "left" : "for (OClass dbClass : classesToDrop.values())",
    "right" : "for (OClass dbClass : classesToDrop.values())",
    "info" : "EnhancedForStatement[21965-22274]:EnhancedForStatement[21965-22274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22011-22274]:Block[22011-22274]"
  }, {
    "left" : "OClass parentClass = dbClass.getSuperClass();",
    "right" : "OClass parentClass = dbClass.getSuperClass();",
    "info" : "VariableDeclarationStatement[22024-22069]:VariableDeclarationStatement[22024-22069]"
  }, {
    "left" : "if (parentClass != null)",
    "right" : "if (parentClass != null)",
    "info" : "IfStatement[22081-22263]:IfStatement[22081-22263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22106-22263]:Block[22106-22263]"
  }, {
    "left" : "if (className.equalsIgnoreCase(parentClass.getName()))",
    "right" : "if (className.equalsIgnoreCase(parentClass.getName()))",
    "info" : "IfStatement[22121-22250]:IfStatement[22121-22250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22176-22250]:Block[22176-22250]"
  }, {
    "left" : "isSuperClass = true;",
    "right" : "isSuperClass = true;",
    "info" : "ExpressionStatement[22193-22213]:ExpressionStatement[22193-22213]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22229-22235]:BreakStatement[22229-22235]"
  }, {
    "left" : "if (!isSuperClass)",
    "right" : "if (!isSuperClass)",
    "info" : "IfStatement[22284-22361]:IfStatement[22284-22361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22303-22361]:Block[22303-22361]"
  }, {
    "left" : "classesReadyToDrop.add(className);",
    "right" : "classesReadyToDrop.add(className);",
    "info" : "ExpressionStatement[22316-22350]:ExpressionStatement[22316-22350]"
  }, {
    "left" : "for (String className : classesReadyToDrop)",
    "right" : "for (String className : classesReadyToDrop)",
    "info" : "EnhancedForStatement[22378-22612]:EnhancedForStatement[22378-22612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22422-22612]:Block[22422-22612]"
  }, {
    "left" : "schema.dropClass(className);",
    "right" : "schema.dropClass(className);",
    "info" : "ExpressionStatement[22433-22461]:ExpressionStatement[22433-22461]"
  }, {
    "left" : "classesToDrop.remove(className);",
    "right" : "classesToDrop.remove(className);",
    "info" : "ExpressionStatement[22471-22503]:ExpressionStatement[22471-22503]"
  }, {
    "left" : "removedClasses++;",
    "right" : "removedClasses++;",
    "info" : "ExpressionStatement[22513-22530]:ExpressionStatement[22513-22530]"
  }, {
    "left" : "listener.onMessage(\"\\n- Class \" + className + \" was removed.\");",
    "right" : "listener.onMessage(\"\\n- Class \" + className + \" was removed.\");",
    "info" : "ExpressionStatement[22540-22603]:ExpressionStatement[22540-22603]"
  }, {
    "left" : "schema.save();",
    "right" : "schema.save();",
    "info" : "ExpressionStatement[22627-22641]:ExpressionStatement[22627-22641]"
  }, {
    "left" : "schema.reload();",
    "right" : "schema.reload();",
    "info" : "ExpressionStatement[22647-22663]:ExpressionStatement[22647-22663]"
  }, {
    "left" : "listener.onMessage(\"\\nRemoved \" + removedClasses + \" classes.\");",
    "right" : "listener.onMessage(\"\\nRemoved \" + removedClasses + \" classes.\");",
    "info" : "ExpressionStatement[22671-22735]:ExpressionStatement[22671-22735]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22746-22753]:Modifier[22746-22753]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22754-22758]:PrimitiveType[22754-22758]"
  }, {
    "left" : "importInfo",
    "right" : "importInfo",
    "info" : "SimpleName[22759-22769]:SimpleName[22759-22769]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[22779-22790]:SimpleType[22779-22790]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[22792-22806]:SimpleType[22792-22806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22807-23906]:Block[22807-23906]"
  }, {
    "left" : "listener.onMessage(\"\\nImporting database info...\");",
    "right" : "listener.onMessage(\"\\nImporting database info...\");",
    "info" : "ExpressionStatement[22814-22865]:ExpressionStatement[22814-22865]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[22873-22919]:ExpressionStatement[22873-22919]"
  }, {
    "left" : "while (jsonReader.lastChar() != '}')",
    "right" : "while (jsonReader.lastChar() != '}')",
    "info" : "WhileStatement[22925-23545]:WhileStatement[22925-23545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22962-23545]:Block[22962-23545]"
  }, {
    "left" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "VariableDeclarationStatement[22971-23048]:VariableDeclarationStatement[22971-23048]"
  }, {
    "left" : "if (fieldName.equals(\"exporter-version\"))",
    "right" : "if (fieldName.equals(\"exporter-version\"))",
    "info" : "IfStatement[23056-23538]:IfStatement[23056-23538]"
  }, {
    "left" : "exporterVersion = jsonReader.readInteger(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "exporterVersion = jsonReader.readInteger(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[23107-23176]:ExpressionStatement[23107-23176]"
  }, {
    "left" : "if (fieldName.equals(\"schemaRecordId\"))",
    "right" : "if (fieldName.equals(\"schemaRecordId\"))",
    "info" : "IfStatement[23189-23538]:IfStatement[23189-23538]"
  }, {
    "left" : "schemaRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
    "right" : "schemaRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
    "info" : "ExpressionStatement[23238-23320]:ExpressionStatement[23238-23320]"
  }, {
    "left" : "if (fieldName.equals(\"indexMgrRecordId\"))",
    "right" : "if (fieldName.equals(\"indexMgrRecordId\"))",
    "info" : "IfStatement[23333-23538]:IfStatement[23333-23538]"
  }, {
    "left" : "indexMgrRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
    "right" : "indexMgrRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
    "info" : "ExpressionStatement[23384-23468]:ExpressionStatement[23384-23468]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[23490-23538]:ExpressionStatement[23490-23538]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[23551-23600]:ExpressionStatement[23551-23600]"
  }, {
    "left" : "if (schemaRecordId == null)",
    "right" : "if (schemaRecordId == null)",
    "info" : "IfStatement[23608-23731]:IfStatement[23608-23731]"
  }, {
    "left" : "schemaRecordId = new ORecordId(database.getStorage().getConfiguration().schemaRecordId);",
    "right" : "schemaRecordId = new ORecordId(database.getStorage().getConfiguration().schemaRecordId);",
    "info" : "ExpressionStatement[23643-23731]:ExpressionStatement[23643-23731]"
  }, {
    "left" : "if (indexMgrRecordId == null)",
    "right" : "if (indexMgrRecordId == null)",
    "info" : "IfStatement[23739-23868]:IfStatement[23739-23868]"
  }, {
    "left" : "indexMgrRecordId = new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId);",
    "right" : "indexMgrRecordId = new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId);",
    "info" : "ExpressionStatement[23776-23868]:ExpressionStatement[23776-23868]"
  }, {
    "left" : "listener.onMessage(\"OK\");",
    "right" : "listener.onMessage(\"OK\");",
    "info" : "ExpressionStatement[23876-23901]:ExpressionStatement[23876-23901]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23912-23919]:Modifier[23912-23919]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23920-23924]:PrimitiveType[23920-23924]"
  }, {
    "left" : "importManualIndexes",
    "right" : "importManualIndexes",
    "info" : "SimpleName[23925-23944]:SimpleName[23925-23944]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[23954-23965]:SimpleType[23954-23965]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[23967-23981]:SimpleType[23967-23981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23982-26683]:Block[23982-26683]"
  }, {
    "left" : "listener.onMessage(\"\\nImporting manual index entries...\");",
    "right" : "listener.onMessage(\"\\nImporting manual index entries...\");",
    "info" : "ExpressionStatement[23989-24047]:ExpressionStatement[23989-24047]"
  }, {
    "left" : "ODocument doc = new ODocument();",
    "right" : "ODocument doc = new ODocument();",
    "info" : "VariableDeclarationStatement[24055-24087]:VariableDeclarationStatement[24055-24087]"
  }, {
    "left" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
    "right" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
    "info" : "VariableDeclarationStatement[24095-24170]:VariableDeclarationStatement[24095-24170]"
  }, {
    "left" : "indexManager.reload();",
    "right" : "indexManager.reload();",
    "info" : "ExpressionStatement[24200-24222]:ExpressionStatement[24200-24222]"
  }, {
    "left" : "int n = 0;",
    "right" : "int n = 0;",
    "info" : "VariableDeclarationStatement[24230-24240]:VariableDeclarationStatement[24230-24240]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[24246-26534]:DoStatement[24246-26534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24249-26496]:Block[24249-26496]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[24258-24304]:ExpressionStatement[24258-24304]"
  }, {
    "left" : "jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[24314-24366]:ExpressionStatement[24314-24366]"
  }, {
    "left" : "final String indexName = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "final String indexName = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "VariableDeclarationStatement[24374-24448]:VariableDeclarationStatement[24374-24448]"
  }, {
    "left" : "if (indexName == null || indexName.length() == 0)",
    "right" : "if (indexName == null || indexName.length() == 0)",
    "info" : "IfStatement[24458-24524]:IfStatement[24458-24524]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24517-24524]:ReturnStatement[24517-24524]"
  }, {
    "left" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
    "right" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
    "info" : "ExpressionStatement[24534-24589]:ExpressionStatement[24534-24589]"
  }, {
    "left" : "final OIndex<?> index = database.getMetadata().getIndexManager().getIndex(indexName);",
    "right" : "final OIndex<?> index = database.getMetadata().getIndexManager().getIndex(indexName);",
    "info" : "VariableDeclarationStatement[24599-24684]:VariableDeclarationStatement[24599-24684]"
  }, {
    "left" : "long tot = 0;",
    "right" : "long tot = 0;",
    "info" : "VariableDeclarationStatement[24694-24707]:VariableDeclarationStatement[24694-24707]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[24717-24767]:ExpressionStatement[24717-24767]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[24777-26186]:DoStatement[24777-26186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24780-26148]:Block[24780-26148]"
  }, {
    "left" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY).trim();",
    "right" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY).trim();",
    "info" : "VariableDeclarationStatement[24791-24868]:VariableDeclarationStatement[24791-24868]"
  }, {
    "left" : "if (!value.isEmpty() && !indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
    "right" : "if (!value.isEmpty() && !indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
    "info" : "IfStatement[24880-26139]:IfStatement[24880-26139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24957-26139]:Block[24957-26139]"
  }, {
    "left" : "doc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, doc, null);",
    "right" : "doc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, doc, null);",
    "info" : "ExpressionStatement[24970-25048]:ExpressionStatement[24970-25048]"
  }, {
    "left" : "doc.setLazyLoad(false);",
    "right" : "doc.setLazyLoad(false);",
    "info" : "ExpressionStatement[25060-25083]:ExpressionStatement[25060-25083]"
  }, {
    "left" : "final OIdentifiable oldRid = doc.<OIdentifiable> field(\"rid\");",
    "right" : "final OIdentifiable oldRid = doc.<OIdentifiable> field(\"rid\");",
    "info" : "VariableDeclarationStatement[25097-25159]:VariableDeclarationStatement[25097-25159]"
  }, {
    "left" : "final OIdentifiable newRid;",
    "right" : "final OIdentifiable newRid;",
    "info" : "VariableDeclarationStatement[25171-25198]:VariableDeclarationStatement[25171-25198]"
  }, {
    "left" : "if (!doc.<Boolean> field(\"binary\"))",
    "right" : "if (!doc.<Boolean> field(\"binary\"))",
    "info" : "IfStatement[25210-26110]:IfStatement[25210-26110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25246-25523]:Block[25246-25523]"
  }, {
    "left" : "if (exportImportHashTable != null)",
    "right" : "if (exportImportHashTable != null)",
    "info" : "IfStatement[25261-25404]:IfStatement[25261-25404]"
  }, {
    "left" : "newRid = exportImportHashTable.get(oldRid);",
    "right" : "newRid = exportImportHashTable.get(oldRid);",
    "info" : "ExpressionStatement[25311-25354]:ExpressionStatement[25311-25354]"
  }, {
    "left" : "newRid = oldRid;",
    "right" : "newRid = oldRid;",
    "info" : "ExpressionStatement[25388-25404]:ExpressionStatement[25388-25404]"
  }, {
    "left" : "index.put(doc.field(\"key\"), newRid != null ? newRid.getIdentity() : oldRid.getIdentity());",
    "right" : "index.put(doc.field(\"key\"), newRid != null ? newRid.getIdentity() : oldRid.getIdentity());",
    "info" : "ExpressionStatement[25420-25510]:ExpressionStatement[25420-25510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25529-26110]:Block[25529-26110]"
  }, {
    "left" : "ORuntimeKeyIndexDefinition<?> runtimeKeyIndexDefinition = (ORuntimeKeyIndexDefinition<?>) index.getDefinition();",
    "right" : "ORuntimeKeyIndexDefinition<?> runtimeKeyIndexDefinition = (ORuntimeKeyIndexDefinition<?>) index.getDefinition();",
    "info" : "VariableDeclarationStatement[25544-25656]:VariableDeclarationStatement[25544-25656]"
  }, {
    "left" : "OBinarySerializer<?> binarySerializer = runtimeKeyIndexDefinition.getSerializer();",
    "right" : "OBinarySerializer<?> binarySerializer = runtimeKeyIndexDefinition.getSerializer();",
    "info" : "VariableDeclarationStatement[25670-25752]:VariableDeclarationStatement[25670-25752]"
  }, {
    "left" : "if (exportImportHashTable != null)",
    "right" : "if (exportImportHashTable != null)",
    "info" : "IfStatement[25768-25977]:IfStatement[25768-25977]"
  }, {
    "left" : "newRid = exportImportHashTable.get(doc.<OIdentifiable> field(\"rid\")).getIdentity();",
    "right" : "newRid = exportImportHashTable.get(doc.<OIdentifiable> field(\"rid\")).getIdentity();",
    "info" : "ExpressionStatement[25818-25901]:ExpressionStatement[25818-25901]"
  }, {
    "left" : "newRid = doc.<OIdentifiable> field(\"rid\");",
    "right" : "newRid = doc.<OIdentifiable> field(\"rid\");",
    "info" : "ExpressionStatement[25935-25977]:ExpressionStatement[25935-25977]"
  }, {
    "left" : "index.put(binarySerializer.deserialize(doc.<byte[]> field(\"key\"), 0), newRid != null ? newRid : oldRid);",
    "right" : "index.put(binarySerializer.deserialize(doc.<byte[]> field(\"key\"), 0), newRid != null ? newRid : oldRid);",
    "info" : "ExpressionStatement[25993-26097]:ExpressionStatement[25993-26097]"
  }, {
    "left" : "tot++;",
    "right" : "tot++;",
    "info" : "ExpressionStatement[26122-26128]:ExpressionStatement[26122-26128]"
  }, {
    "left" : "if (index != null)",
    "right" : "if (index != null)",
    "info" : "IfStatement[26196-26378]:IfStatement[26196-26378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26215-26296]:Block[26215-26296]"
  }, {
    "left" : "listener.onMessage(\"OK (\" + tot + \" entries)\");",
    "right" : "listener.onMessage(\"OK (\" + tot + \" entries)\");",
    "info" : "ExpressionStatement[26226-26273]:ExpressionStatement[26226-26273]"
  }, {
    "left" : "n++;",
    "right" : "n++;",
    "info" : "ExpressionStatement[26283-26287]:ExpressionStatement[26283-26287]"
  }, {
    "left" : "listener.onMessage(\"ERR, the index wasn't found in configuration\");",
    "right" : "listener.onMessage(\"ERR, the index wasn't found in configuration\");",
    "info" : "ExpressionStatement[26311-26378]:ExpressionStatement[26311-26378]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
    "info" : "ExpressionStatement[26388-26432]:ExpressionStatement[26388-26432]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[26440-26487]:ExpressionStatement[26440-26487]"
  }, {
    "left" : "listener.onMessage(\"\\nDone. Imported \" + String.format(\"%,d\", n) + \" indexes.\");",
    "right" : "listener.onMessage(\"\\nDone. Imported \" + String.format(\"%,d\", n) + \" indexes.\");",
    "info" : "ExpressionStatement[26542-26622]:ExpressionStatement[26542-26622]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[26630-26678]:ExpressionStatement[26630-26678]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26689-26696]:Modifier[26689-26696]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[26697-26701]:PrimitiveType[26697-26701]"
  }, {
    "left" : "importSchema",
    "right" : "importSchema",
    "info" : "SimpleName[26702-26714]:SimpleName[26702-26714]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[26724-26735]:SimpleType[26724-26735]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[26737-26751]:SimpleType[26737-26751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26752-33287]:Block[26752-33287]"
  }, {
    "left" : "listener.onMessage(\"\\nImporting database schema...\");",
    "right" : "listener.onMessage(\"\\nImporting database schema...\");",
    "info" : "ExpressionStatement[26759-26812]:ExpressionStatement[26759-26812]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[26820-26866]:ExpressionStatement[26820-26866]"
  }, {
    "left" : "@SuppressWarnings(\"unused\")\r\n    int schemaVersion = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"version\\\"\")\r\n        .readNumber(OJSONReader.ANY_NUMBER, true);",
    "right" : "@SuppressWarnings(\"unused\")\r\n    int schemaVersion = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"version\\\"\")\r\n        .readNumber(OJSONReader.ANY_NUMBER, true);",
    "info" : "VariableDeclarationStatement[26872-27054]:VariableDeclarationStatement[26872-27054]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[27060-27109]:ExpressionStatement[27060-27109]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[27115-27165]:ExpressionStatement[27115-27165]"
  }, {
    "left" : "if (jsonReader.getValue().equals(\"\\\"globalProperties\\\"\"))",
    "right" : "if (jsonReader.getValue().equals(\"\\\"globalProperties\\\"\"))",
    "info" : "IfStatement[27220-28233]:IfStatement[27220-28233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27278-28233]:Block[27278-28233]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[27287-27337]:ExpressionStatement[27287-27337]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[27345-28111]:DoStatement[27345-28111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27348-28073]:Block[27348-28073]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[27359-27405]:ExpressionStatement[27359-27405]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\");",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\");",
    "info" : "ExpressionStatement[27415-27490]:ExpressionStatement[27415-27490]"
  }, {
    "left" : "String name = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "String name = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[27500-27564]:VariableDeclarationStatement[27500-27564]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"global-id\\\"\");",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"global-id\\\"\");",
    "info" : "ExpressionStatement[27574-27654]:ExpressionStatement[27574-27654]"
  }, {
    "left" : "String id = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "String id = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[27664-27726]:VariableDeclarationStatement[27664-27726]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\");",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\");",
    "info" : "ExpressionStatement[27736-27811]:ExpressionStatement[27736-27811]"
  }, {
    "left" : "String type = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "String type = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[27821-27885]:VariableDeclarationStatement[27821-27885]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[28017-28064]:ExpressionStatement[28017-28064]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[28119-28168]:ExpressionStatement[28119-28168]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[28176-28226]:ExpressionStatement[28176-28226]"
  }, {
    "left" : "jsonReader.checkContent(\"\\\"classes\\\"\").readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.checkContent(\"\\\"classes\\\"\").readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[28241-28319]:ExpressionStatement[28241-28319]"
  }, {
    "left" : "long classImported = 0;",
    "right" : "long classImported = 0;",
    "info" : "VariableDeclarationStatement[28327-28350]:VariableDeclarationStatement[28327-28350]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[28358-33282]:TryStatement[28358-33282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28362-33104]:Block[28362-33104]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[28371-32234]:DoStatement[28371-32234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28374-32196]:Block[28374-32196]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[28385-28431]:ExpressionStatement[28385-28431]"
  }, {
    "left" : "final String className = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\r\n            .readString(OJSONReader.COMMA_SEPARATOR);",
    "right" : "final String className = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\r\n            .readString(OJSONReader.COMMA_SEPARATOR);",
    "info" : "VariableDeclarationStatement[28443-28597]:VariableDeclarationStatement[28443-28597]"
  }, {
    "left" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "right" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "info" : "VariableDeclarationStatement[28609-28684]:VariableDeclarationStatement[28609-28684]"
  }, {
    "left" : "if (next.equals(\"\\\"id\\\"\"))",
    "right" : "if (next.equals(\"\\\"id\\\"\"))",
    "info" : "IfStatement[28696-28935]:IfStatement[28696-28935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28723-28935]:Block[28723-28935]"
  }, {
    "left" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
    "right" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[28786-28844]:ExpressionStatement[28786-28844]"
  }, {
    "left" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "right" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "info" : "ExpressionStatement[28856-28924]:ExpressionStatement[28856-28924]"
  }, {
    "left" : "final int classDefClusterId;",
    "right" : "final int classDefClusterId;",
    "info" : "VariableDeclarationStatement[28947-28975]:VariableDeclarationStatement[28947-28975]"
  }, {
    "left" : "if (jsonReader.isContent(\"\\\"default-cluster-id\\\"\"))",
    "right" : "if (jsonReader.isContent(\"\\\"default-cluster-id\\\"\"))",
    "info" : "IfStatement[28985-29241]:IfStatement[28985-29241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29037-29173]:Block[29037-29173]"
  }, {
    "left" : "next = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "next = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[29050-29107]:ExpressionStatement[29050-29107]"
  }, {
    "left" : "classDefClusterId = Integer.parseInt(next);",
    "right" : "classDefClusterId = Integer.parseInt(next);",
    "info" : "ExpressionStatement[29119-29162]:ExpressionStatement[29119-29162]"
  }, {
    "left" : "classDefClusterId = database.getDefaultClusterId();",
    "right" : "classDefClusterId = database.getDefaultClusterId();",
    "info" : "ExpressionStatement[29190-29241]:ExpressionStatement[29190-29241]"
  }, {
    "left" : "String classClusterIds = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"cluster-ids\\\"\")\r\n            .readString(OJSONReader.END_COLLECTION, true).trim();",
    "right" : "String classClusterIds = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"cluster-ids\\\"\")\r\n            .readString(OJSONReader.END_COLLECTION, true).trim();",
    "info" : "VariableDeclarationStatement[29253-29426]:VariableDeclarationStatement[29253-29426]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[29438-29486]:ExpressionStatement[29438-29486]"
  }, {
    "left" : "OClassImpl cls = (OClassImpl) database.getMetadata().getSchema().getClass(className);",
    "right" : "OClassImpl cls = (OClassImpl) database.getMetadata().getSchema().getClass(className);",
    "info" : "VariableDeclarationStatement[29498-29583]:VariableDeclarationStatement[29498-29583]"
  }, {
    "left" : "if (cls != null)",
    "right" : "if (cls != null)",
    "info" : "IfStatement[29595-29857]:IfStatement[29595-29857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29612-29744]:Block[29612-29744]"
  }, {
    "left" : "if (cls.getDefaultClusterId() != classDefClusterId)",
    "right" : "if (cls.getDefaultClusterId() != classDefClusterId)",
    "info" : "IfStatement[29625-29733]:IfStatement[29625-29733]"
  }, {
    "left" : "cls.setDefaultClusterId(classDefClusterId);",
    "right" : "cls.setDefaultClusterId(classDefClusterId);",
    "info" : "ExpressionStatement[29690-29733]:ExpressionStatement[29690-29733]"
  }, {
    "left" : "cls = (OClassImpl) database.getMetadata().getSchema().createClass(className, classDefClusterId);",
    "right" : "cls = (OClassImpl) database.getMetadata().getSchema().createClass(className, classDefClusterId);",
    "info" : "ExpressionStatement[29761-29857]:ExpressionStatement[29761-29857]"
  }, {
    "left" : "if (classClusterIds != null)",
    "right" : "if (classClusterIds != null)",
    "info" : "IfStatement[29869-30225]:IfStatement[29869-30225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29898-30225]:Block[29898-30225]"
  }, {
    "left" : "classClusterIds = classClusterIds.substring(1, classClusterIds.length() - 1);",
    "right" : "classClusterIds = classClusterIds.substring(1, classClusterIds.length() - 1);",
    "info" : "ExpressionStatement[29939-30016]:ExpressionStatement[29939-30016]"
  }, {
    "left" : "for (int i : OStringSerializerHelper.splitIntArray(classClusterIds))",
    "right" : "for (int i : OStringSerializerHelper.splitIntArray(classClusterIds))",
    "info" : "EnhancedForStatement[30069-30214]:EnhancedForStatement[30069-30214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30138-30214]:Block[30138-30214]"
  }, {
    "left" : "if (i != -1)",
    "right" : "if (i != -1)",
    "info" : "IfStatement[30153-30201]:IfStatement[30153-30201]"
  }, {
    "left" : "cls.addClusterId(i);",
    "right" : "cls.addClusterId(i);",
    "info" : "ExpressionStatement[30181-30201]:ExpressionStatement[30181-30201]"
  }, {
    "left" : "String value;",
    "right" : "String value;",
    "info" : "VariableDeclarationStatement[30237-30250]:VariableDeclarationStatement[30237-30250]"
  }, {
    "left" : "while (jsonReader.lastChar() == ',')",
    "right" : "while (jsonReader.lastChar() == ',')",
    "info" : "WhileStatement[30260-32100]:WhileStatement[30260-32100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30297-32100]:Block[30297-32100]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[30310-30360]:ExpressionStatement[30310-30360]"
  }, {
    "left" : "value = jsonReader.getValue();",
    "right" : "value = jsonReader.getValue();",
    "info" : "ExpressionStatement[30372-30402]:ExpressionStatement[30372-30402]"
  }, {
    "left" : "if (value.equals(\"\\\"strictMode\\\"\"))",
    "right" : "if (value.equals(\"\\\"strictMode\\\"\"))",
    "info" : "IfStatement[30416-32089]:IfStatement[30416-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30452-30550]:Block[30452-30550]"
  }, {
    "left" : "cls.setStrictMode(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
    "right" : "cls.setStrictMode(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
    "info" : "ExpressionStatement[30467-30537]:ExpressionStatement[30467-30537]"
  }, {
    "left" : "if (value.equals(\"\\\"abstract\\\"\"))",
    "right" : "if (value.equals(\"\\\"abstract\\\"\"))",
    "info" : "IfStatement[30556-32089]:IfStatement[30556-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30590-30686]:Block[30590-30686]"
  }, {
    "left" : "cls.setAbstract(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
    "right" : "cls.setAbstract(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
    "info" : "ExpressionStatement[30605-30673]:ExpressionStatement[30605-30673]"
  }, {
    "left" : "if (value.equals(\"\\\"oversize\\\"\"))",
    "right" : "if (value.equals(\"\\\"oversize\\\"\"))",
    "info" : "IfStatement[30692-32089]:IfStatement[30692-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30726-30886]:Block[30726-30886]"
  }, {
    "left" : "final String oversize = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "final String oversize = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[30741-30815]:VariableDeclarationStatement[30741-30815]"
  }, {
    "left" : "cls.setOverSize(Float.parseFloat(oversize));",
    "right" : "cls.setOverSize(Float.parseFloat(oversize));",
    "info" : "ExpressionStatement[30829-30873]:ExpressionStatement[30829-30873]"
  }, {
    "left" : "if (value.equals(\"\\\"strictMode\\\"\"))",
    "right" : "if (value.equals(\"\\\"strictMode\\\"\"))",
    "info" : "IfStatement[30892-32089]:IfStatement[30892-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30928-31098]:Block[30928-31098]"
  }, {
    "left" : "final String strictMode = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "final String strictMode = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[30943-31019]:VariableDeclarationStatement[30943-31019]"
  }, {
    "left" : "cls.setStrictMode(Boolean.parseBoolean(strictMode));",
    "right" : "cls.setStrictMode(Boolean.parseBoolean(strictMode));",
    "info" : "ExpressionStatement[31033-31085]:ExpressionStatement[31033-31085]"
  }, {
    "left" : "if (value.equals(\"\\\"short-name\\\"\"))",
    "right" : "if (value.equals(\"\\\"short-name\\\"\"))",
    "info" : "IfStatement[31104-32089]:IfStatement[31104-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31140-31285]:Block[31140-31285]"
  }, {
    "left" : "final String shortName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "final String shortName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[31155-31230]:VariableDeclarationStatement[31155-31230]"
  }, {
    "left" : "cls.setShortName(shortName);",
    "right" : "cls.setShortName(shortName);",
    "info" : "ExpressionStatement[31244-31272]:ExpressionStatement[31244-31272]"
  }, {
    "left" : "if (value.equals(\"\\\"super-class\\\"\"))",
    "right" : "if (value.equals(\"\\\"super-class\\\"\"))",
    "info" : "IfStatement[31291-32089]:IfStatement[31291-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31328-31480]:Block[31328-31480]"
  }, {
    "left" : "final String classSuper = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "final String classSuper = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[31343-31419]:VariableDeclarationStatement[31343-31419]"
  }, {
    "left" : "superClasses.put(cls, classSuper);",
    "right" : "superClasses.put(cls, classSuper);",
    "info" : "ExpressionStatement[31433-31467]:ExpressionStatement[31433-31467]"
  }, {
    "left" : "if (value.equals(\"\\\"properties\\\"\"))",
    "right" : "if (value.equals(\"\\\"properties\\\"\"))",
    "info" : "IfStatement[31486-32089]:IfStatement[31486-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31522-31910]:Block[31522-31910]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[31568-31618]:ExpressionStatement[31568-31618]"
  }, {
    "left" : "while (jsonReader.lastChar() != ']')",
    "right" : "while (jsonReader.lastChar() != ']')",
    "info" : "WhileStatement[31634-31839]:WhileStatement[31634-31839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31671-31839]:Block[31671-31839]"
  }, {
    "left" : "importProperty(cls);",
    "right" : "importProperty(cls);",
    "info" : "ExpressionStatement[31688-31708]:ExpressionStatement[31688-31708]"
  }, {
    "left" : "if (jsonReader.lastChar() == '}')",
    "right" : "if (jsonReader.lastChar() == '}')",
    "info" : "IfStatement[31726-31824]:IfStatement[31726-31824]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[31777-31824]:ExpressionStatement[31777-31824]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
    "info" : "ExpressionStatement[31853-31897]:ExpressionStatement[31853-31897]"
  }, {
    "left" : "if (value.equals(\"\\\"cluster-selection\\\"\"))",
    "right" : "if (value.equals(\"\\\"cluster-selection\\\"\"))",
    "info" : "IfStatement[31916-32089]:IfStatement[31916-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31959-32089]:Block[31959-32089]"
  }, {
    "left" : "cls.setClusterSelection(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
    "right" : "cls.setClusterSelection(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
    "info" : "ExpressionStatement[32001-32076]:ExpressionStatement[32001-32076]"
  }, {
    "left" : "classImported++;",
    "right" : "classImported++;",
    "info" : "ExpressionStatement[32112-32128]:ExpressionStatement[32112-32128]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[32140-32187]:ExpressionStatement[32140-32187]"
  }, {
    "left" : "for (Map.Entry<OClass, String> entry : superClasses.entrySet())\r\n        entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
    "right" : "for (Map.Entry<OClass, String> entry : superClasses.entrySet())\r\n        entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
    "info" : "EnhancedForStatement[32282-32447]:EnhancedForStatement[32282-32447]"
  }, {
    "left" : "entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
    "right" : "entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
    "info" : "ExpressionStatement[32355-32447]:ExpressionStatement[32355-32447]"
  }, {
    "left" : "for (Map.Entry<OPropertyImpl, String> entry : linkedClasses.entrySet())",
    "right" : "for (Map.Entry<OPropertyImpl, String> entry : linkedClasses.entrySet())",
    "info" : "EnhancedForStatement[32494-32679]:EnhancedForStatement[32494-32679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32566-32679]:Block[32566-32679]"
  }, {
    "left" : "entry.getKey().setLinkedClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
    "right" : "entry.getKey().setLinkedClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
    "info" : "ExpressionStatement[32577-32670]:ExpressionStatement[32577-32670]"
  }, {
    "left" : "database.getMetadata().getSchema().save();",
    "right" : "database.getMetadata().getSchema().save();",
    "info" : "ExpressionStatement[32689-32731]:ExpressionStatement[32689-32731]"
  }, {
    "left" : "if (exporterVersion < 11)",
    "right" : "if (exporterVersion < 11)",
    "info" : "IfStatement[32741-32891]:IfStatement[32741-32891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32767-32891]:Block[32767-32891]"
  }, {
    "left" : "OClass role = database.getMetadata().getSchema().getClass(\"ORole\");",
    "right" : "OClass role = database.getMetadata().getSchema().getClass(\"ORole\");",
    "info" : "VariableDeclarationStatement[32778-32845]:VariableDeclarationStatement[32778-32845]"
  }, {
    "left" : "role.dropProperty(\"rules\");",
    "right" : "role.dropProperty(\"rules\");",
    "info" : "ExpressionStatement[32855-32882]:ExpressionStatement[32855-32882]"
  }, {
    "left" : "listener.onMessage(\"OK (\" + classImported + \" classes)\");",
    "right" : "listener.onMessage(\"OK (\" + classImported + \" classes)\");",
    "info" : "ExpressionStatement[32901-32958]:ExpressionStatement[32901-32958]"
  }, {
    "left" : "schemaImported = true;",
    "right" : "schemaImported = true;",
    "info" : "ExpressionStatement[32966-32988]:ExpressionStatement[32966-32988]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
    "info" : "ExpressionStatement[32996-33040]:ExpressionStatement[32996-33040]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[33048-33097]:ExpressionStatement[33048-33097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33125-33282]:Block[33125-33282]"
  }, {
    "left" : "OLogManager.instance().error(this, \"Error on importing schema\", e);",
    "right" : "OLogManager.instance().error(this, \"Error on importing schema\", e);",
    "info" : "ExpressionStatement[33134-33201]:ExpressionStatement[33134-33201]"
  }, {
    "left" : "listener.onMessage(\"ERROR (\" + classImported + \" entries): \" + e);",
    "right" : "listener.onMessage(\"ERROR (\" + classImported + \" entries): \" + e);",
    "info" : "ExpressionStatement[33209-33275]:ExpressionStatement[33209-33275]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33293-33300]:Modifier[33293-33300]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33301-33305]:PrimitiveType[33301-33305]"
  }, {
    "left" : "importProperty",
    "right" : "importProperty",
    "info" : "SimpleName[33306-33320]:SimpleName[33306-33320]"
  }, {
    "left" : "final OClass iClass",
    "right" : "final OClass iClass",
    "info" : "SingleVariableDeclaration[33321-33340]:SingleVariableDeclaration[33321-33340]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[33349-33360]:SimpleType[33349-33360]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[33362-33376]:SimpleType[33362-33376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33377-36227]:Block[33377-36227]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_OBJ_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_OBJ_IN_ARRAY);",
    "info" : "ExpressionStatement[33384-33435]:ExpressionStatement[33384-33435]"
  }, {
    "left" : "if (jsonReader.lastChar() == ']')",
    "right" : "if (jsonReader.lastChar() == ']')",
    "info" : "IfStatement[33443-33491]:IfStatement[33443-33491]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33484-33491]:ReturnStatement[33484-33491]"
  }, {
    "left" : "final String propName = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\r\n        .readString(OJSONReader.COMMA_SEPARATOR);",
    "right" : "final String propName = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\r\n        .readString(OJSONReader.COMMA_SEPARATOR);",
    "info" : "VariableDeclarationStatement[33499-33648]:VariableDeclarationStatement[33499-33648]"
  }, {
    "left" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "right" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "info" : "VariableDeclarationStatement[33656-33731]:VariableDeclarationStatement[33656-33731]"
  }, {
    "left" : "if (next.equals(\"\\\"id\\\"\"))",
    "right" : "if (next.equals(\"\\\"id\\\"\"))",
    "info" : "IfStatement[33739-33962]:IfStatement[33739-33962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33766-33962]:Block[33766-33962]"
  }, {
    "left" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
    "right" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[33821-33879]:ExpressionStatement[33821-33879]"
  }, {
    "left" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "right" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
    "info" : "ExpressionStatement[33887-33955]:ExpressionStatement[33887-33955]"
  }, {
    "left" : "next = jsonReader.checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "next = jsonReader.checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[33968-34050]:ExpressionStatement[33968-34050]"
  }, {
    "left" : "final OType type = OType.valueOf(next);",
    "right" : "final OType type = OType.valueOf(next);",
    "info" : "VariableDeclarationStatement[34058-34097]:VariableDeclarationStatement[34058-34097]"
  }, {
    "left" : "String attrib;",
    "right" : "String attrib;",
    "info" : "VariableDeclarationStatement[34105-34119]:VariableDeclarationStatement[34105-34119]"
  }, {
    "left" : "String value = null;",
    "right" : "String value = null;",
    "info" : "VariableDeclarationStatement[34125-34145]:VariableDeclarationStatement[34125-34145]"
  }, {
    "left" : "String min = null;",
    "right" : "String min = null;",
    "info" : "VariableDeclarationStatement[34153-34171]:VariableDeclarationStatement[34153-34171]"
  }, {
    "left" : "String max = null;",
    "right" : "String max = null;",
    "info" : "VariableDeclarationStatement[34177-34195]:VariableDeclarationStatement[34177-34195]"
  }, {
    "left" : "String linkedClass = null;",
    "right" : "String linkedClass = null;",
    "info" : "VariableDeclarationStatement[34201-34227]:VariableDeclarationStatement[34201-34227]"
  }, {
    "left" : "OType linkedType = null;",
    "right" : "OType linkedType = null;",
    "info" : "VariableDeclarationStatement[34233-34257]:VariableDeclarationStatement[34233-34257]"
  }, {
    "left" : "boolean mandatory = false;",
    "right" : "boolean mandatory = false;",
    "info" : "VariableDeclarationStatement[34263-34289]:VariableDeclarationStatement[34263-34289]"
  }, {
    "left" : "boolean readonly = false;",
    "right" : "boolean readonly = false;",
    "info" : "VariableDeclarationStatement[34295-34320]:VariableDeclarationStatement[34295-34320]"
  }, {
    "left" : "boolean notNull = false;",
    "right" : "boolean notNull = false;",
    "info" : "VariableDeclarationStatement[34326-34350]:VariableDeclarationStatement[34326-34350]"
  }, {
    "left" : "String collate = null;",
    "right" : "String collate = null;",
    "info" : "VariableDeclarationStatement[34356-34378]:VariableDeclarationStatement[34356-34378]"
  }, {
    "left" : "Map<String, String> customFields = null;",
    "right" : "Map<String, String> customFields = null;",
    "info" : "VariableDeclarationStatement[34386-34426]:VariableDeclarationStatement[34386-34426]"
  }, {
    "left" : "while (jsonReader.lastChar() == ',')",
    "right" : "while (jsonReader.lastChar() == ',')",
    "info" : "WhileStatement[34434-35451]:WhileStatement[34434-35451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34471-35451]:Block[34471-35451]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[34480-34530]:ExpressionStatement[34480-34530]"
  }, {
    "left" : "attrib = jsonReader.getValue();",
    "right" : "attrib = jsonReader.getValue();",
    "info" : "ExpressionStatement[34540-34571]:ExpressionStatement[34540-34571]"
  }, {
    "left" : "if (!attrib.equals(\"\\\"customFields\\\"\"))",
    "right" : "if (!attrib.equals(\"\\\"customFields\\\"\"))",
    "info" : "IfStatement[34579-34686]:IfStatement[34579-34686]"
  }, {
    "left" : "value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[34628-34686]:ExpressionStatement[34628-34686]"
  }, {
    "left" : "if (attrib.equals(\"\\\"min\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"min\\\"\"))",
    "info" : "IfStatement[34696-35444]:IfStatement[34696-35444]"
  }, {
    "left" : "min = value;",
    "right" : "min = value;",
    "info" : "ExpressionStatement[34735-34747]:ExpressionStatement[34735-34747]"
  }, {
    "left" : "if (attrib.equals(\"\\\"max\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"max\\\"\"))",
    "info" : "IfStatement[34760-35444]:IfStatement[34760-35444]"
  }, {
    "left" : "max = value;",
    "right" : "max = value;",
    "info" : "ExpressionStatement[34799-34811]:ExpressionStatement[34799-34811]"
  }, {
    "left" : "if (attrib.equals(\"\\\"linked-class\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"linked-class\\\"\"))",
    "info" : "IfStatement[34824-35444]:IfStatement[34824-35444]"
  }, {
    "left" : "linkedClass = value;",
    "right" : "linkedClass = value;",
    "info" : "ExpressionStatement[34872-34892]:ExpressionStatement[34872-34892]"
  }, {
    "left" : "if (attrib.equals(\"\\\"mandatory\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"mandatory\\\"\"))",
    "info" : "IfStatement[34905-35444]:IfStatement[34905-35444]"
  }, {
    "left" : "mandatory = Boolean.parseBoolean(value);",
    "right" : "mandatory = Boolean.parseBoolean(value);",
    "info" : "ExpressionStatement[34950-34990]:ExpressionStatement[34950-34990]"
  }, {
    "left" : "if (attrib.equals(\"\\\"readonly\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"readonly\\\"\"))",
    "info" : "IfStatement[35003-35444]:IfStatement[35003-35444]"
  }, {
    "left" : "readonly = Boolean.parseBoolean(value);",
    "right" : "readonly = Boolean.parseBoolean(value);",
    "info" : "ExpressionStatement[35047-35086]:ExpressionStatement[35047-35086]"
  }, {
    "left" : "if (attrib.equals(\"\\\"not-null\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"not-null\\\"\"))",
    "info" : "IfStatement[35099-35444]:IfStatement[35099-35444]"
  }, {
    "left" : "notNull = Boolean.parseBoolean(value);",
    "right" : "notNull = Boolean.parseBoolean(value);",
    "info" : "ExpressionStatement[35143-35181]:ExpressionStatement[35143-35181]"
  }, {
    "left" : "if (attrib.equals(\"\\\"linked-type\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"linked-type\\\"\"))",
    "info" : "IfStatement[35194-35444]:IfStatement[35194-35444]"
  }, {
    "left" : "linkedType = OType.valueOf(value);",
    "right" : "linkedType = OType.valueOf(value);",
    "info" : "ExpressionStatement[35241-35275]:ExpressionStatement[35241-35275]"
  }, {
    "left" : "if (attrib.equals(\"\\\"collate\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"collate\\\"\"))",
    "info" : "IfStatement[35288-35444]:IfStatement[35288-35444]"
  }, {
    "left" : "collate = value;",
    "right" : "collate = value;",
    "info" : "ExpressionStatement[35331-35347]:ExpressionStatement[35331-35347]"
  }, {
    "left" : "if (attrib.equals(\"\\\"customFields\\\"\"))",
    "right" : "if (attrib.equals(\"\\\"customFields\\\"\"))",
    "info" : "IfStatement[35360-35444]:IfStatement[35360-35444]"
  }, {
    "left" : "customFields = importCustomFields();",
    "right" : "customFields = importCustomFields();",
    "info" : "ExpressionStatement[35408-35444]:ExpressionStatement[35408-35444]"
  }, {
    "left" : "OPropertyImpl prop = (OPropertyImpl) iClass.getProperty(propName);",
    "right" : "OPropertyImpl prop = (OPropertyImpl) iClass.getProperty(propName);",
    "info" : "VariableDeclarationStatement[35459-35525]:VariableDeclarationStatement[35459-35525]"
  }, {
    "left" : "if (prop == null)",
    "right" : "if (prop == null)",
    "info" : "IfStatement[35531-35646]:IfStatement[35531-35646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35549-35646]:Block[35549-35646]"
  }, {
    "left" : "prop = (OPropertyImpl) iClass.createProperty(propName, type);",
    "right" : "prop = (OPropertyImpl) iClass.createProperty(propName, type);",
    "info" : "ExpressionStatement[35578-35639]:ExpressionStatement[35578-35639]"
  }, {
    "left" : "prop.setMandatory(mandatory);",
    "right" : "prop.setMandatory(mandatory);",
    "info" : "ExpressionStatement[35652-35681]:ExpressionStatement[35652-35681]"
  }, {
    "left" : "prop.setReadonly(readonly);",
    "right" : "prop.setReadonly(readonly);",
    "info" : "ExpressionStatement[35687-35714]:ExpressionStatement[35687-35714]"
  }, {
    "left" : "prop.setNotNull(notNull);",
    "right" : "prop.setNotNull(notNull);",
    "info" : "ExpressionStatement[35720-35745]:ExpressionStatement[35720-35745]"
  }, {
    "left" : "if (min != null)",
    "right" : "if (min != null)",
    "info" : "IfStatement[35753-35794]:IfStatement[35753-35794]"
  }, {
    "left" : "prop.setMin(min);",
    "right" : "prop.setMin(min);",
    "info" : "ExpressionStatement[35777-35794]:ExpressionStatement[35777-35794]"
  }, {
    "left" : "if (max != null)",
    "right" : "if (max != null)",
    "info" : "IfStatement[35800-35841]:IfStatement[35800-35841]"
  }, {
    "left" : "prop.setMax(max);",
    "right" : "prop.setMax(max);",
    "info" : "ExpressionStatement[35824-35841]:ExpressionStatement[35824-35841]"
  }, {
    "left" : "if (linkedClass != null)",
    "right" : "if (linkedClass != null)",
    "info" : "IfStatement[35847-35916]:IfStatement[35847-35916]"
  }, {
    "left" : "linkedClasses.put(prop, linkedClass);",
    "right" : "linkedClasses.put(prop, linkedClass);",
    "info" : "ExpressionStatement[35879-35916]:ExpressionStatement[35879-35916]"
  }, {
    "left" : "if (linkedType != null)",
    "right" : "if (linkedType != null)",
    "info" : "IfStatement[35922-35984]:IfStatement[35922-35984]"
  }, {
    "left" : "prop.setLinkedType(linkedType);",
    "right" : "prop.setLinkedType(linkedType);",
    "info" : "ExpressionStatement[35953-35984]:ExpressionStatement[35953-35984]"
  }, {
    "left" : "if (collate != null)",
    "right" : "if (collate != null)",
    "info" : "IfStatement[35990-36041]:IfStatement[35990-36041]"
  }, {
    "left" : "prop.setCollate(value);",
    "right" : "prop.setCollate(value);",
    "info" : "ExpressionStatement[36018-36041]:ExpressionStatement[36018-36041]"
  }, {
    "left" : "if (customFields != null)",
    "right" : "if (customFields != null)",
    "info" : "IfStatement[36047-36222]:IfStatement[36047-36222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36073-36222]:Block[36073-36222]"
  }, {
    "left" : "for (Map.Entry<String, String> entry : customFields.entrySet())",
    "right" : "for (Map.Entry<String, String> entry : customFields.entrySet())",
    "info" : "EnhancedForStatement[36082-36215]:EnhancedForStatement[36082-36215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36146-36215]:Block[36146-36215]"
  }, {
    "left" : "prop.setCustom(entry.getKey(), entry.getValue());",
    "right" : "prop.setCustom(entry.getKey(), entry.getValue());",
    "info" : "ExpressionStatement[36157-36206]:ExpressionStatement[36157-36206]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36233-36240]:Modifier[36233-36240]"
  }, {
    "left" : "Map<String, String>",
    "right" : "Map<String, String>",
    "info" : "ParameterizedType[36241-36260]:ParameterizedType[36241-36260]"
  }, {
    "left" : "importCustomFields",
    "right" : "importCustomFields",
    "info" : "SimpleName[36261-36279]:SimpleName[36261-36279]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[36289-36303]:SimpleType[36289-36303]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36305-36316]:SimpleType[36305-36316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36317-36766]:Block[36317-36766]"
  }, {
    "left" : "Map<String, String> result = new HashMap<String, String>();",
    "right" : "Map<String, String> result = new HashMap<String, String>();",
    "info" : "VariableDeclarationStatement[36324-36383]:VariableDeclarationStatement[36324-36383]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[36391-36437]:ExpressionStatement[36391-36437]"
  }, {
    "left" : "while (jsonReader.lastChar() != '}')",
    "right" : "while (jsonReader.lastChar() != '}')",
    "info" : "WhileStatement[36445-36681]:WhileStatement[36445-36681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36482-36681]:Block[36482-36681]"
  }, {
    "left" : "final String key = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "final String key = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "VariableDeclarationStatement[36491-36562]:VariableDeclarationStatement[36491-36562]"
  }, {
    "left" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[36570-36641]:VariableDeclarationStatement[36570-36641]"
  }, {
    "left" : "result.put(key, value);",
    "right" : "result.put(key, value);",
    "info" : "ExpressionStatement[36651-36674]:ExpressionStatement[36651-36674]"
  }, {
    "left" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[36689-36739]:ExpressionStatement[36689-36739]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[36747-36761]:ReturnStatement[36747-36761]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36772-36779]:Modifier[36772-36779]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[36780-36784]:PrimitiveType[36780-36784]"
  }, {
    "left" : "importClusters",
    "right" : "importClusters",
    "info" : "SimpleName[36785-36799]:SimpleName[36785-36799]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[36809-36823]:SimpleType[36809-36823]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36825-36836]:SimpleType[36825-36836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36837-43680]:Block[36837-43680]"
  }, {
    "left" : "listener.onMessage(\"\\nImporting clusters...\");",
    "right" : "listener.onMessage(\"\\nImporting clusters...\");",
    "info" : "ExpressionStatement[36844-36890]:ExpressionStatement[36844-36890]"
  }, {
    "left" : "long total = 0;",
    "right" : "long total = 0;",
    "info" : "VariableDeclarationStatement[36898-36913]:VariableDeclarationStatement[36898-36913]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[36921-36971]:ExpressionStatement[36921-36971]"
  }, {
    "left" : "boolean makeFullCheckPointAfterClusterCreation = false;",
    "right" : "boolean makeFullCheckPointAfterClusterCreation = false;",
    "info" : "VariableDeclarationStatement[36979-37034]:VariableDeclarationStatement[36979-37034]"
  }, {
    "left" : "if (database.getStorage() instanceof OLocalPaginatedStorage)",
    "right" : "if (database.getStorage() instanceof OLocalPaginatedStorage)",
    "info" : "IfStatement[37040-37359]:IfStatement[37040-37359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37101-37359]:Block[37101-37359]"
  }, {
    "left" : "makeFullCheckPointAfterClusterCreation = ((OLocalPaginatedStorage) database.getStorage())\r\n          .isMakeFullCheckPointAfterClusterCreate();",
    "right" : "makeFullCheckPointAfterClusterCreation = ((OLocalPaginatedStorage) database.getStorage())\r\n          .isMakeFullCheckPointAfterClusterCreate();",
    "info" : "ExpressionStatement[37110-37253]:ExpressionStatement[37110-37253]"
  }, {
    "left" : "((OLocalPaginatedStorage) database.getStorage()).disableFullCheckPointAfterClusterCreate();",
    "right" : "((OLocalPaginatedStorage) database.getStorage()).disableFullCheckPointAfterClusterCreate();",
    "info" : "ExpressionStatement[37261-37352]:ExpressionStatement[37261-37352]"
  }, {
    "left" : "boolean recreateManualIndex = false;",
    "right" : "boolean recreateManualIndex = false;",
    "info" : "VariableDeclarationStatement[37367-37403]:VariableDeclarationStatement[37367-37403]"
  }, {
    "left" : "if (exporterVersion <= 4)",
    "right" : "if (exporterVersion <= 4)",
    "info" : "IfStatement[37409-37510]:IfStatement[37409-37510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37435-37510]:Block[37435-37510]"
  }, {
    "left" : "removeDefaultClusters();",
    "right" : "removeDefaultClusters();",
    "info" : "ExpressionStatement[37444-37468]:ExpressionStatement[37444-37468]"
  }, {
    "left" : "recreateManualIndex = true;",
    "right" : "recreateManualIndex = true;",
    "info" : "ExpressionStatement[37476-37503]:ExpressionStatement[37476-37503]"
  }, {
    "left" : "final Set<String> indexesToRebuild = new HashSet<String>();",
    "right" : "final Set<String> indexesToRebuild = new HashSet<String>();",
    "info" : "VariableDeclarationStatement[37518-37577]:VariableDeclarationStatement[37518-37577]"
  }, {
    "left" : "@SuppressWarnings(\"unused\")\r\n    ORecordId rid = null;",
    "right" : "@SuppressWarnings(\"unused\")\r\n    ORecordId rid = null;",
    "info" : "VariableDeclarationStatement[37585-37639]:VariableDeclarationStatement[37585-37639]"
  }, {
    "left" : "while (jsonReader.lastChar() != ']')",
    "right" : "while (jsonReader.lastChar() != ']')",
    "info" : "WhileStatement[37645-41476]:WhileStatement[37645-41476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37682-41476]:Block[37682-41476]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[37691-37737]:ExpressionStatement[37691-37737]"
  }, {
    "left" : "String name = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\r\n          .readString(OJSONReader.COMMA_SEPARATOR);",
    "right" : "String name = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\r\n          .readString(OJSONReader.COMMA_SEPARATOR);",
    "info" : "VariableDeclarationStatement[37747-37888]:VariableDeclarationStatement[37747-37888]"
  }, {
    "left" : "if (name.length() == 0)",
    "right" : "if (name.length() == 0)",
    "info" : "IfStatement[37898-37943]:IfStatement[37898-37943]"
  }, {
    "left" : "name = null;",
    "right" : "name = null;",
    "info" : "ExpressionStatement[37931-37943]:ExpressionStatement[37931-37943]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[37953-38406]:IfStatement[37953-38406]"
  }, {
    "left" : "if (includeClusters != null)",
    "right" : "if (includeClusters != null)",
    "info" : "IfStatement[38025-38406]:IfStatement[38025-38406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38054-38213]:Block[38054-38213]"
  }, {
    "left" : "if (!includeClusters.contains(name))",
    "right" : "if (!includeClusters.contains(name))",
    "info" : "IfStatement[38067-38202]:IfStatement[38067-38202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38104-38202]:Block[38104-38202]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[38119-38166]:ExpressionStatement[38119-38166]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[38180-38189]:ContinueStatement[38180-38189]"
  }, {
    "left" : "if (excludeClusters != null)",
    "right" : "if (excludeClusters != null)",
    "info" : "IfStatement[38219-38406]:IfStatement[38219-38406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38248-38406]:Block[38248-38406]"
  }, {
    "left" : "if (excludeClusters.contains(name))",
    "right" : "if (excludeClusters.contains(name))",
    "info" : "IfStatement[38261-38395]:IfStatement[38261-38395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38297-38395]:Block[38297-38395]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[38312-38359]:ExpressionStatement[38312-38359]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[38373-38382]:ContinueStatement[38373-38382]"
  }, {
    "left" : "int id;",
    "right" : "int id;",
    "info" : "VariableDeclarationStatement[38416-38423]:VariableDeclarationStatement[38416-38423]"
  }, {
    "left" : "if (exporterVersion < 9)",
    "right" : "if (exporterVersion < 9)",
    "info" : "IfStatement[38431-38880]:IfStatement[38431-38880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38456-38747]:Block[38456-38747]"
  }, {
    "left" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.COMMA_SEPARATOR);",
    "right" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[38467-38586]:ExpressionStatement[38467-38586]"
  }, {
    "left" : "String type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\")\r\n            .readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "String type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\")\r\n            .readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[38596-38738]:VariableDeclarationStatement[38596-38738]"
  }, {
    "left" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[38762-38880]:ExpressionStatement[38762-38880]"
  }, {
    "left" : "String type;",
    "right" : "String type;",
    "info" : "VariableDeclarationStatement[38890-38902]:VariableDeclarationStatement[38890-38902]"
  }, {
    "left" : "if (jsonReader.lastChar() == ',')",
    "right" : "if (jsonReader.lastChar() == ',')",
    "info" : "IfStatement[38910-39114]:IfStatement[38910-39114]"
  }, {
    "left" : "type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[38953-39074]:ExpressionStatement[38953-39074]"
  }, {
    "left" : "type = \"PHYSICAL\";",
    "right" : "type = \"PHYSICAL\";",
    "info" : "ExpressionStatement[39096-39114]:ExpressionStatement[39096-39114]"
  }, {
    "left" : "if (jsonReader.lastChar() == ',')",
    "right" : "if (jsonReader.lastChar() == ',')",
    "info" : "IfStatement[39124-39352]:IfStatement[39124-39352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39158-39326]:Block[39158-39326]"
  }, {
    "left" : "rid = new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"rid\\\"\")\r\n            .readString(OJSONReader.NEXT_IN_OBJECT));",
    "right" : "rid = new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"rid\\\"\")\r\n            .readString(OJSONReader.NEXT_IN_OBJECT));",
    "info" : "ExpressionStatement[39169-39317]:ExpressionStatement[39169-39317]"
  }, {
    "left" : "rid = null;",
    "right" : "rid = null;",
    "info" : "ExpressionStatement[39341-39352]:ExpressionStatement[39341-39352]"
  }, {
    "left" : "listener.onMessage(\"\\n- Creating cluster \" + (name != null ? \"'\" + name + \"'\" : \"NULL\") + \"...\");",
    "right" : "listener.onMessage(\"\\n- Creating cluster \" + (name != null ? \"'\" + name + \"'\" : \"NULL\") + \"...\");",
    "info" : "ExpressionStatement[39362-39459]:ExpressionStatement[39362-39459]"
  }, {
    "left" : "int clusterId = name != null ? database.getClusterIdByName(name) : -1;",
    "right" : "int clusterId = name != null ? database.getClusterIdByName(name) : -1;",
    "info" : "VariableDeclarationStatement[39469-39539]:VariableDeclarationStatement[39469-39539]"
  }, {
    "left" : "if (clusterId == -1)",
    "right" : "if (clusterId == -1)",
    "info" : "IfStatement[39547-39806]:IfStatement[39547-39806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39568-39806]:Block[39568-39806]"
  }, {
    "left" : "if (!preserveClusterIDs)",
    "right" : "if (!preserveClusterIDs)",
    "info" : "IfStatement[39601-39797]:IfStatement[39601-39797]"
  }, {
    "left" : "clusterId = database.addCluster(name);",
    "right" : "clusterId = database.addCluster(name);",
    "info" : "ExpressionStatement[39637-39675]:ExpressionStatement[39637-39675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39690-39797]:Block[39690-39797]"
  }, {
    "left" : "clusterId = database.addCluster(name, id, null);",
    "right" : "clusterId = database.addCluster(name, id, null);",
    "info" : "ExpressionStatement[39703-39751]:ExpressionStatement[39703-39751]"
  }, {
    "left" : "assert clusterId == id;",
    "right" : "assert clusterId == id;",
    "info" : "AssertStatement[39763-39786]:AssertStatement[39763-39786]"
  }, {
    "left" : "if (clusterId != id)",
    "right" : "if (clusterId != id)",
    "info" : "IfStatement[39816-40706]:IfStatement[39816-40706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39837-40706]:Block[39837-40706]"
  }, {
    "left" : "if (!preserveClusterIDs)",
    "right" : "if (!preserveClusterIDs)",
    "info" : "IfStatement[39848-40697]:IfStatement[39848-40697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39873-40580]:Block[39873-40580]"
  }, {
    "left" : "if (database.countClusterElements(clusterId - 1) == 0)",
    "right" : "if (database.countClusterElements(clusterId - 1) == 0)",
    "info" : "IfStatement[39886-40569]:IfStatement[39886-40569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39941-40201]:Block[39941-40201]"
  }, {
    "left" : "listener.onMessage(\"Found previous version: migrating old clusters...\");",
    "right" : "listener.onMessage(\"Found previous version: migrating old clusters...\");",
    "info" : "ExpressionStatement[39956-40028]:ExpressionStatement[39956-40028]"
  }, {
    "left" : "database.dropCluster(name, true);",
    "right" : "database.dropCluster(name, true);",
    "info" : "ExpressionStatement[40042-40075]:ExpressionStatement[40042-40075]"
  }, {
    "left" : "database.addCluster(\"temp_\" + clusterId, null);",
    "right" : "database.addCluster(\"temp_\" + clusterId, null);",
    "info" : "ExpressionStatement[40089-40136]:ExpressionStatement[40089-40136]"
  }, {
    "left" : "clusterId = database.addCluster(name);",
    "right" : "clusterId = database.addCluster(name);",
    "info" : "ExpressionStatement[40150-40188]:ExpressionStatement[40150-40188]"
  }, {
    "left" : "throw new OConfigurationException(\"Imported cluster '\" + name + \"' has id=\" + clusterId\r\n                + \" different from the original: \" + id + \". To continue the import drop the cluster '\"\r\n                + database.getClusterNameById(clusterId - 1) + \"' that has \" + database.countClusterElements(clusterId - 1)\r\n                + \" records\");",
    "right" : "throw new OConfigurationException(\"Imported cluster '\" + name + \"' has id=\" + clusterId\r\n                + \" different from the original: \" + id + \". To continue the import drop the cluster '\"\r\n                + database.getClusterNameById(clusterId - 1) + \"' that has \" + database.countClusterElements(clusterId - 1)\r\n                + \" records\");",
    "info" : "ThrowStatement[40220-40569]:ThrowStatement[40220-40569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40586-40697]:Block[40586-40697]"
  }, {
    "left" : "database.dropCluster(clusterId, false);",
    "right" : "database.dropCluster(clusterId, false);",
    "info" : "ExpressionStatement[40599-40638]:ExpressionStatement[40599-40638]"
  }, {
    "left" : "database.addCluster(name, id, null);",
    "right" : "database.addCluster(name, id, null);",
    "info" : "ExpressionStatement[40650-40686]:ExpressionStatement[40650-40686]"
  }, {
    "left" : "if (name != null\r\n          && !(name.equalsIgnoreCase(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME)\r\n              || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INTERNAL_NAME) || name\r\n                .equalsIgnoreCase(OMetadataDefault.CLUSTER_INDEX_NAME)))",
    "right" : "if (name != null\r\n          && !(name.equalsIgnoreCase(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME)\r\n              || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INTERNAL_NAME) || name\r\n                .equalsIgnoreCase(OMetadataDefault.CLUSTER_INDEX_NAME)))",
    "info" : "IfStatement[40716-41333]:IfStatement[40716-41333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40977-41333]:Block[40977-41333]"
  }, {
    "left" : "if (!merge)",
    "right" : "if (!merge)",
    "info" : "IfStatement[40988-41083]:IfStatement[40988-41083]"
  }, {
    "left" : "database.command(new OCommandSQL(\"truncate cluster \" + name)).execute();",
    "right" : "database.command(new OCommandSQL(\"truncate cluster \" + name)).execute();",
    "info" : "ExpressionStatement[41011-41083]:ExpressionStatement[41011-41083]"
  }, {
    "left" : "for (OIndex existingIndex : database.getMetadata().getIndexManager().getIndexes())",
    "right" : "for (OIndex existingIndex : database.getMetadata().getIndexManager().getIndexes())",
    "info" : "EnhancedForStatement[41095-41324]:EnhancedForStatement[41095-41324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41178-41324]:Block[41178-41324]"
  }, {
    "left" : "if (existingIndex.getClusters().contains(name))",
    "right" : "if (existingIndex.getClusters().contains(name))",
    "info" : "IfStatement[41191-41313]:IfStatement[41191-41313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41239-41313]:Block[41239-41313]"
  }, {
    "left" : "indexesToRebuild.add(existingIndex.getName());",
    "right" : "indexesToRebuild.add(existingIndex.getName());",
    "info" : "ExpressionStatement[41254-41300]:ExpressionStatement[41254-41300]"
  }, {
    "left" : "listener.onMessage(\"OK, assigned id=\" + clusterId);",
    "right" : "listener.onMessage(\"OK, assigned id=\" + clusterId);",
    "info" : "ExpressionStatement[41343-41394]:ExpressionStatement[41343-41394]"
  }, {
    "left" : "total++;",
    "right" : "total++;",
    "info" : "ExpressionStatement[41404-41412]:ExpressionStatement[41404-41412]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[41422-41469]:ExpressionStatement[41422-41469]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[41482-41531]:ExpressionStatement[41482-41531]"
  }, {
    "left" : "listener.onMessage(\"\\nRebuilding indexes of truncated clusters ...\");",
    "right" : "listener.onMessage(\"\\nRebuilding indexes of truncated clusters ...\");",
    "info" : "ExpressionStatement[41539-41608]:ExpressionStatement[41539-41608]"
  }, {
    "left" : "for (final String indexName : indexesToRebuild)\r\n      database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\r\n        private long last = 0;\r\n\r\n        @Override\r\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\r\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\r\n        }\r\n\r\n        @Override\r\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\r\n          final long now = System.currentTimeMillis();\r\n          if (last == 0)\r\n            last = now;\r\n          else if (now - last > 1000) {\r\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\r\n            last = now;\r\n          }\r\n          return true;\r\n        }\r\n\r\n        @Override\r\n        public void onCompletition(Object iTask, boolean iSucceed) {\r\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\r\n        }\r\n      });",
    "right" : "for (final String indexName : indexesToRebuild)\r\n      database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\r\n        private long last = 0;\r\n\r\n        @Override\r\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\r\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\r\n        }\r\n\r\n        @Override\r\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\r\n          final long now = System.currentTimeMillis();\r\n          if (last == 0)\r\n            last = now;\r\n          else if (now - last > 1000) {\r\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\r\n            last = now;\r\n          }\r\n          return true;\r\n        }\r\n\r\n        @Override\r\n        public void onCompletition(Object iTask, boolean iSucceed) {\r\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\r\n        }\r\n      });",
    "info" : "EnhancedForStatement[41616-42643]:EnhancedForStatement[41616-42643]"
  }, {
    "left" : "database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\r\n        private long last = 0;\r\n\r\n        @Override\r\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\r\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\r\n        }\r\n\r\n        @Override\r\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\r\n          final long now = System.currentTimeMillis();\r\n          if (last == 0)\r\n            last = now;\r\n          else if (now - last > 1000) {\r\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\r\n            last = now;\r\n          }\r\n          return true;\r\n        }\r\n\r\n        @Override\r\n        public void onCompletition(Object iTask, boolean iSucceed) {\r\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\r\n        }\r\n      });",
    "right" : "database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\r\n        private long last = 0;\r\n\r\n        @Override\r\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\r\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\r\n        }\r\n\r\n        @Override\r\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\r\n          final long now = System.currentTimeMillis();\r\n          if (last == 0)\r\n            last = now;\r\n          else if (now - last > 1000) {\r\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\r\n            last = now;\r\n          }\r\n          return true;\r\n        }\r\n\r\n        @Override\r\n        public void onCompletition(Object iTask, boolean iSucceed) {\r\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\r\n        }\r\n      });",
    "info" : "ExpressionStatement[41671-42643]:ExpressionStatement[41671-42643]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[41809-41818]:MarkerAnnotation[41809-41818]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41828-41834]:Modifier[41828-41834]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41835-41839]:PrimitiveType[41835-41839]"
  }, {
    "left" : "onBegin",
    "right" : "onBegin",
    "info" : "SimpleName[41840-41847]:SimpleName[41840-41847]"
  }, {
    "left" : "Object iTask",
    "right" : "Object iTask",
    "info" : "SingleVariableDeclaration[41848-41860]:SingleVariableDeclaration[41848-41860]"
  }, {
    "left" : "long iTotal",
    "right" : "long iTotal",
    "info" : "SingleVariableDeclaration[41862-41873]:SingleVariableDeclaration[41862-41873]"
  }, {
    "left" : "Object metadata",
    "right" : "Object metadata",
    "info" : "SingleVariableDeclaration[41875-41890]:SingleVariableDeclaration[41875-41890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41892-42011]:Block[41892-42011]"
  }, {
    "left" : "listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");",
    "right" : "listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");",
    "info" : "ExpressionStatement[41905-42000]:ExpressionStatement[41905-42000]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[42023-42032]:MarkerAnnotation[42023-42032]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42042-42048]:Modifier[42042-42048]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42049-42056]:PrimitiveType[42049-42056]"
  }, {
    "left" : "onProgress",
    "right" : "onProgress",
    "info" : "SimpleName[42057-42067]:SimpleName[42057-42067]"
  }, {
    "left" : "Object iTask",
    "right" : "Object iTask",
    "info" : "SingleVariableDeclaration[42068-42080]:SingleVariableDeclaration[42068-42080]"
  }, {
    "left" : "long iCounter",
    "right" : "long iCounter",
    "info" : "SingleVariableDeclaration[42082-42095]:SingleVariableDeclaration[42082-42095]"
  }, {
    "left" : "float iPercent",
    "right" : "float iPercent",
    "info" : "SingleVariableDeclaration[42097-42111]:SingleVariableDeclaration[42097-42111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42113-42445]:Block[42113-42445]"
  }, {
    "left" : "final long now = System.currentTimeMillis();",
    "right" : "final long now = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[42126-42170]:VariableDeclarationStatement[42126-42170]"
  }, {
    "left" : "if (last == 0)",
    "right" : "if (last == 0)",
    "info" : "IfStatement[42182-42410]:IfStatement[42182-42410]"
  }, {
    "left" : "last = now;",
    "right" : "last = now;",
    "info" : "ExpressionStatement[42210-42221]:ExpressionStatement[42210-42221]"
  }, {
    "left" : "if (now - last > 1000)",
    "right" : "if (now - last > 1000)",
    "info" : "IfStatement[42238-42410]:IfStatement[42238-42410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42261-42410]:Block[42261-42410]"
  }, {
    "left" : "listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));",
    "right" : "listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));",
    "info" : "ExpressionStatement[42276-42372]:ExpressionStatement[42276-42372]"
  }, {
    "left" : "last = now;",
    "right" : "last = now;",
    "info" : "ExpressionStatement[42386-42397]:ExpressionStatement[42386-42397]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42422-42434]:ReturnStatement[42422-42434]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[42457-42466]:MarkerAnnotation[42457-42466]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42476-42482]:Modifier[42476-42482]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42483-42487]:PrimitiveType[42483-42487]"
  }, {
    "left" : "onCompletition",
    "right" : "onCompletition",
    "info" : "SimpleName[42488-42502]:SimpleName[42488-42502]"
  }, {
    "left" : "Object iTask",
    "right" : "Object iTask",
    "info" : "SingleVariableDeclaration[42503-42515]:SingleVariableDeclaration[42503-42515]"
  }, {
    "left" : "boolean iSucceed",
    "right" : "boolean iSucceed",
    "info" : "SingleVariableDeclaration[42517-42533]:SingleVariableDeclaration[42517-42533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42535-42632]:Block[42535-42632]"
  }, {
    "left" : "listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");",
    "right" : "listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");",
    "info" : "ExpressionStatement[42548-42621]:ExpressionStatement[42548-42621]"
  }, {
    "left" : "listener.onMessage(\"\\nDone \" + indexesToRebuild.size() + \" indexes were rebuilt.\");",
    "right" : "listener.onMessage(\"\\nDone \" + indexesToRebuild.size() + \" indexes were rebuilt.\");",
    "info" : "ExpressionStatement[42651-42734]:ExpressionStatement[42651-42734]"
  }, {
    "left" : "if (recreateManualIndex)",
    "right" : "if (recreateManualIndex)",
    "info" : "IfStatement[42742-42975]:IfStatement[42742-42975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42767-42975]:Block[42767-42975]"
  }, {
    "left" : "database.addCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
    "right" : "database.addCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
    "info" : "ExpressionStatement[42776-42840]:ExpressionStatement[42776-42840]"
  }, {
    "left" : "database.getMetadata().getIndexManager().create();",
    "right" : "database.getMetadata().getIndexManager().create();",
    "info" : "ExpressionStatement[42848-42898]:ExpressionStatement[42848-42898]"
  }, {
    "left" : "listener.onMessage(\"\\nManual index cluster was recreated.\");",
    "right" : "listener.onMessage(\"\\nManual index cluster was recreated.\");",
    "info" : "ExpressionStatement[42908-42968]:ExpressionStatement[42908-42968]"
  }, {
    "left" : "listener.onMessage(\"\\nDone. Imported \" + total + \" clusters\");",
    "right" : "listener.onMessage(\"\\nDone. Imported \" + total + \" clusters\");",
    "info" : "ExpressionStatement[42983-43045]:ExpressionStatement[42983-43045]"
  }, {
    "left" : "if (database.load(new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId)) == null)",
    "right" : "if (database.load(new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId)) == null)",
    "info" : "IfStatement[43053-43446]:IfStatement[43053-43446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43154-43446]:Block[43154-43446]"
  }, {
    "left" : "ODocument indexDocument = new ODocument();",
    "right" : "ODocument indexDocument = new ODocument();",
    "info" : "VariableDeclarationStatement[43163-43205]:VariableDeclarationStatement[43163-43205]"
  }, {
    "left" : "indexDocument.save(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
    "right" : "indexDocument.save(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
    "info" : "ExpressionStatement[43213-43272]:ExpressionStatement[43213-43272]"
  }, {
    "left" : "database.getStorage().getConfiguration().indexMgrRecordId = indexDocument.getIdentity().toString();",
    "right" : "database.getStorage().getConfiguration().indexMgrRecordId = indexDocument.getIdentity().toString();",
    "info" : "ExpressionStatement[43282-43381]:ExpressionStatement[43282-43381]"
  }, {
    "left" : "database.getStorage().getConfiguration().update();",
    "right" : "database.getStorage().getConfiguration().update();",
    "info" : "ExpressionStatement[43389-43439]:ExpressionStatement[43389-43439]"
  }, {
    "left" : "if (database.getStorage() instanceof OLocalPaginatedStorage && makeFullCheckPointAfterClusterCreation)",
    "right" : "if (database.getStorage() instanceof OLocalPaginatedStorage && makeFullCheckPointAfterClusterCreation)",
    "info" : "IfStatement[43454-43654]:IfStatement[43454-43654]"
  }, {
    "left" : "((OLocalPaginatedStorage) database.getStorage()).enableFullCheckPointAfterClusterCreate();",
    "right" : "((OLocalPaginatedStorage) database.getStorage()).enableFullCheckPointAfterClusterCreate();",
    "info" : "ExpressionStatement[43564-43654]:ExpressionStatement[43564-43654]"
  }, {
    "left" : "return total;",
    "right" : "return total;",
    "info" : "ReturnStatement[43662-43675]:ReturnStatement[43662-43675]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43686-43693]:Modifier[43686-43693]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[43694-43698]:PrimitiveType[43694-43698]"
  }, {
    "left" : "importRecords",
    "right" : "importRecords",
    "info" : "SimpleName[43699-43712]:SimpleName[43699-43712]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[43722-43731]:SimpleType[43722-43731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43732-45983]:Block[43732-45983]"
  }, {
    "left" : "long total = 0;",
    "right" : "long total = 0;",
    "info" : "VariableDeclarationStatement[43739-43754]:VariableDeclarationStatement[43739-43754]"
  }, {
    "left" : "database.getMetadata().getIndexManager().dropIndex(EXPORT_IMPORT_MAP_NAME);",
    "right" : "database.getMetadata().getIndexManager().dropIndex(EXPORT_IMPORT_MAP_NAME);",
    "info" : "ExpressionStatement[43762-43837]:ExpressionStatement[43762-43837]"
  }, {
    "left" : "OIndexFactory factory = OIndexes.getFactory(OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(), null);",
    "right" : "OIndexFactory factory = OIndexes.getFactory(OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(), null);",
    "info" : "VariableDeclarationStatement[43843-43945]:VariableDeclarationStatement[43843-43945]"
  }, {
    "left" : "exportImportHashTable = (OIndex<OIdentifiable>) database\r\n        .getMetadata()\r\n        .getIndexManager()\r\n        .createIndex(EXPORT_IMPORT_MAP_NAME, OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(),\r\n            new OSimpleKeyIndexDefinition(factory.getLastVersion(), OType.LINK), null, null, null);",
    "right" : "exportImportHashTable = (OIndex<OIdentifiable>) database\r\n        .getMetadata()\r\n        .getIndexManager()\r\n        .createIndex(EXPORT_IMPORT_MAP_NAME, OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(),\r\n            new OSimpleKeyIndexDefinition(factory.getLastVersion(), OType.LINK), null, null, null);",
    "info" : "ExpressionStatement[43953-44260]:ExpressionStatement[43953-44260]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[44268-44318]:ExpressionStatement[44268-44318]"
  }, {
    "left" : "long totalRecords = 0;",
    "right" : "long totalRecords = 0;",
    "info" : "VariableDeclarationStatement[44326-44348]:VariableDeclarationStatement[44326-44348]"
  }, {
    "left" : "listener.onMessage(\"\\n\\nImporting records...\");",
    "right" : "listener.onMessage(\"\\n\\nImporting records...\");",
    "info" : "ExpressionStatement[44356-44403]:ExpressionStatement[44356-44403]"
  }, {
    "left" : "ORID rid;",
    "right" : "ORID rid;",
    "info" : "VariableDeclarationStatement[44411-44420]:VariableDeclarationStatement[44411-44420]"
  }, {
    "left" : "ORID lastRid = new ORecordId();",
    "right" : "ORID lastRid = new ORecordId();",
    "info" : "VariableDeclarationStatement[44426-44457]:VariableDeclarationStatement[44426-44457]"
  }, {
    "left" : "final long begin = System.currentTimeMillis();",
    "right" : "final long begin = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[44463-44509]:VariableDeclarationStatement[44463-44509]"
  }, {
    "left" : "long lastLapRecords = 0;",
    "right" : "long lastLapRecords = 0;",
    "info" : "VariableDeclarationStatement[44515-44539]:VariableDeclarationStatement[44515-44539]"
  }, {
    "left" : "long last = begin;",
    "right" : "long last = begin;",
    "info" : "VariableDeclarationStatement[44545-44563]:VariableDeclarationStatement[44545-44563]"
  }, {
    "left" : "Set<String> involvedClusters = new HashSet<String>();",
    "right" : "Set<String> involvedClusters = new HashSet<String>();",
    "info" : "VariableDeclarationStatement[44569-44622]:VariableDeclarationStatement[44569-44622]"
  }, {
    "left" : "while (jsonReader.lastChar() != ']')",
    "right" : "while (jsonReader.lastChar() != ']')",
    "info" : "WhileStatement[44630-45663]:WhileStatement[44630-45663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44667-45663]:Block[44667-45663]"
  }, {
    "left" : "rid = importRecord();",
    "right" : "rid = importRecord();",
    "info" : "ExpressionStatement[44676-44697]:ExpressionStatement[44676-44697]"
  }, {
    "left" : "if (rid != null)",
    "right" : "if (rid != null)",
    "info" : "IfStatement[44707-45632]:IfStatement[44707-45632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44724-45632]:Block[44724-45632]"
  }, {
    "left" : "++lastLapRecords;",
    "right" : "++lastLapRecords;",
    "info" : "ExpressionStatement[44735-44752]:ExpressionStatement[44735-44752]"
  }, {
    "left" : "++totalRecords;",
    "right" : "++totalRecords;",
    "info" : "ExpressionStatement[44762-44777]:ExpressionStatement[44762-44777]"
  }, {
    "left" : "if (rid.getClusterId() != lastRid.getClusterId())",
    "right" : "if (rid.getClusterId() != lastRid.getClusterId())",
    "info" : "IfStatement[44789-44920]:IfStatement[44789-44920]"
  }, {
    "left" : "involvedClusters.add(database.getClusterNameById(rid.getClusterId()));",
    "right" : "involvedClusters.add(database.getClusterNameById(rid.getClusterId()));",
    "info" : "ExpressionStatement[44850-44920]:ExpressionStatement[44850-44920]"
  }, {
    "left" : "final long now = System.currentTimeMillis();",
    "right" : "final long now = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[44932-44976]:VariableDeclarationStatement[44932-44976]"
  }, {
    "left" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
    "right" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
    "info" : "IfStatement[44986-45599]:IfStatement[44986-45599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45036-45599]:Block[45036-45599]"
  }, {
    "left" : "final List<String> sortedClusters = new ArrayList<String>(involvedClusters);",
    "right" : "final List<String> sortedClusters = new ArrayList<String>(involvedClusters);",
    "info" : "VariableDeclarationStatement[45049-45125]:VariableDeclarationStatement[45049-45125]"
  }, {
    "left" : "Collections.sort(sortedClusters);",
    "right" : "Collections.sort(sortedClusters);",
    "info" : "ExpressionStatement[45137-45170]:ExpressionStatement[45137-45170]"
  }, {
    "left" : "listener.onMessage(String.format(\r\n              \"\\n- Imported %,d records into clusters: %s. Total records imported so far: %,d (%,.2f/sec)\", lastLapRecords,\r\n              sortedClusters, totalRecords, (float) lastLapRecords * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
    "right" : "listener.onMessage(String.format(\r\n              \"\\n- Imported %,d records into clusters: %s. Total records imported so far: %,d (%,.2f/sec)\", lastLapRecords,\r\n              sortedClusters, totalRecords, (float) lastLapRecords * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
    "info" : "ExpressionStatement[45184-45462]:ExpressionStatement[45184-45462]"
  }, {
    "left" : "last = now;",
    "right" : "last = now;",
    "info" : "ExpressionStatement[45509-45520]:ExpressionStatement[45509-45520]"
  }, {
    "left" : "lastLapRecords = 0;",
    "right" : "lastLapRecords = 0;",
    "info" : "ExpressionStatement[45532-45551]:ExpressionStatement[45532-45551]"
  }, {
    "left" : "involvedClusters.clear();",
    "right" : "involvedClusters.clear();",
    "info" : "ExpressionStatement[45563-45588]:ExpressionStatement[45563-45588]"
  }, {
    "left" : "lastRid = rid;",
    "right" : "lastRid = rid;",
    "info" : "ExpressionStatement[45609-45623]:ExpressionStatement[45609-45623]"
  }, {
    "left" : "record = null;",
    "right" : "record = null;",
    "info" : "ExpressionStatement[45642-45656]:ExpressionStatement[45642-45656]"
  }, {
    "left" : "if (migrateLinks)",
    "right" : "if (migrateLinks)",
    "info" : "IfStatement[45671-45730]:IfStatement[45671-45730]"
  }, {
    "left" : "migrateLinksInImportedDocuments();",
    "right" : "migrateLinksInImportedDocuments();",
    "info" : "ExpressionStatement[45696-45730]:ExpressionStatement[45696-45730]"
  }, {
    "left" : "listener.onMessage(String.format(\"\\n\\nDone. Imported %,d records in %,.2f secs\\n\", totalRecords,\r\n        ((float) (System.currentTimeMillis() - begin)) / 1000));",
    "right" : "listener.onMessage(String.format(\"\\n\\nDone. Imported %,d records in %,.2f secs\\n\", totalRecords,\r\n        ((float) (System.currentTimeMillis() - begin)) / 1000));",
    "info" : "ExpressionStatement[45738-45900]:ExpressionStatement[45738-45900]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
    "info" : "ExpressionStatement[45908-45957]:ExpressionStatement[45908-45957]"
  }, {
    "left" : "return total;",
    "right" : "return total;",
    "info" : "ReturnStatement[45965-45978]:ReturnStatement[45965-45978]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45989-45996]:Modifier[45989-45996]"
  }, {
    "left" : "ORID",
    "right" : "ORID",
    "info" : "SimpleType[45997-46001]:SimpleType[45997-46001]"
  }, {
    "left" : "importRecord",
    "right" : "importRecord",
    "info" : "SimpleName[46002-46014]:SimpleName[46002-46014]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[46024-46033]:SimpleType[46024-46033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46034-49495]:Block[46034-49495]"
  }, {
    "left" : "String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
    "right" : "String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
    "info" : "VariableDeclarationStatement[46041-46108]:VariableDeclarationStatement[46041-46108]"
  }, {
    "left" : "while (!value.isEmpty() && value.charAt(0) != '{')",
    "right" : "while (!value.isEmpty() && value.charAt(0) != '{')",
    "info" : "WhileStatement[46143-46237]:WhileStatement[46143-46237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46194-46237]:Block[46194-46237]"
  }, {
    "left" : "value = value.substring(1);",
    "right" : "value = value.substring(1);",
    "info" : "ExpressionStatement[46203-46230]:ExpressionStatement[46203-46230]"
  }, {
    "left" : "record = null;",
    "right" : "record = null;",
    "info" : "ExpressionStatement[46245-46259]:ExpressionStatement[46245-46259]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[46265-49454]:TryStatement[46265-49454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46269-48892]:Block[46269-48892]"
  }, {
    "left" : "record = ORecordSerializerJSON.INSTANCE.fromString(value, record, null);",
    "right" : "record = ORecordSerializerJSON.INSTANCE.fromString(value, record, null);",
    "info" : "ExpressionStatement[46278-46350]:ExpressionStatement[46278-46350]"
  }, {
    "left" : "if (schemaImported && record.getIdentity().equals(schemaRecordId))",
    "right" : "if (schemaImported && record.getIdentity().equals(schemaRecordId))",
    "info" : "IfStatement[46360-46487]:IfStatement[46360-46487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46427-46487]:Block[46427-46487]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[46466-46478]:ReturnStatement[46466-46478]"
  }, {
    "left" : "if (includeClusters != null)",
    "right" : "if (includeClusters != null)",
    "info" : "IfStatement[46540-46955]:IfStatement[46540-46955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46569-46781]:Block[46569-46781]"
  }, {
    "left" : "if (!includeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
    "right" : "if (!includeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
    "info" : "IfStatement[46580-46772]:IfStatement[46580-46772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46677-46772]:Block[46677-46772]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[46690-46737]:ExpressionStatement[46690-46737]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[46749-46761]:ReturnStatement[46749-46761]"
  }, {
    "left" : "if (excludeClusters != null)",
    "right" : "if (excludeClusters != null)",
    "info" : "IfStatement[46787-46955]:IfStatement[46787-46955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46816-46955]:Block[46816-46955]"
  }, {
    "left" : "if (excludeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
    "right" : "if (excludeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
    "info" : "IfStatement[46827-46946]:IfStatement[46827-46946]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[46934-46946]:ReturnStatement[46934-46946]"
  }, {
    "left" : "if (record.getIdentity().getClusterId() == 0 && record.getIdentity().getClusterPosition() == 1)",
    "right" : "if (record.getIdentity().getClusterId() == 0 && record.getIdentity().getClusterPosition() == 1)",
    "info" : "IfStatement[46965-47116]:IfStatement[46965-47116]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47104-47116]:ReturnStatement[47104-47116]"
  }, {
    "left" : "if (exporterVersion >= 3)",
    "right" : "if (exporterVersion >= 3)",
    "info" : "IfStatement[47126-47517]:IfStatement[47126-47517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47152-47517]:Block[47152-47517]"
  }, {
    "left" : "int oridsId = database.getClusterIdByName(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
    "right" : "int oridsId = database.getClusterIdByName(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
    "info" : "VariableDeclarationStatement[47163-47249]:VariableDeclarationStatement[47163-47249]"
  }, {
    "left" : "int indexId = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
    "right" : "int indexId = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
    "info" : "VariableDeclarationStatement[47259-47338]:VariableDeclarationStatement[47259-47338]"
  }, {
    "left" : "if (record.getIdentity().getClusterId() == indexId || record.getIdentity().getClusterId() == oridsId)",
    "right" : "if (record.getIdentity().getClusterId() == indexId || record.getIdentity().getClusterId() == oridsId)",
    "info" : "IfStatement[47350-47508]:IfStatement[47350-47508]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47496-47508]:ReturnStatement[47496-47508]"
  }, {
    "left" : "final int manualIndexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
    "right" : "final int manualIndexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
    "info" : "VariableDeclarationStatement[47527-47630]:VariableDeclarationStatement[47527-47630]"
  }, {
    "left" : "final int internalCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
    "right" : "final int internalCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
    "info" : "VariableDeclarationStatement[47638-47734]:VariableDeclarationStatement[47638-47734]"
  }, {
    "left" : "final int indexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
    "right" : "final int indexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
    "info" : "VariableDeclarationStatement[47742-47832]:VariableDeclarationStatement[47742-47832]"
  }, {
    "left" : "if (exporterVersion >= 4)",
    "right" : "if (exporterVersion >= 4)",
    "info" : "IfStatement[47842-48007]:IfStatement[47842-48007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47868-48007]:Block[47868-48007]"
  }, {
    "left" : "if (record.getIdentity().getClusterId() == manualIndexCluster)",
    "right" : "if (record.getIdentity().getClusterId() == manualIndexCluster)",
    "info" : "IfStatement[47879-47998]:IfStatement[47879-47998]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[47986-47998]:ReturnStatement[47986-47998]"
  }, {
    "left" : "if (record.getIdentity().equals(indexMgrRecordId))",
    "right" : "if (record.getIdentity().equals(indexMgrRecordId))",
    "info" : "IfStatement[48017-48089]:IfStatement[48017-48089]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48077-48089]:ReturnStatement[48077-48089]"
  }, {
    "left" : "final ORID rid = record.getIdentity();",
    "right" : "final ORID rid = record.getIdentity();",
    "info" : "VariableDeclarationStatement[48099-48137]:VariableDeclarationStatement[48099-48137]"
  }, {
    "left" : "final int clusterId = rid.getClusterId();",
    "right" : "final int clusterId = rid.getClusterId();",
    "info" : "VariableDeclarationStatement[48147-48188]:VariableDeclarationStatement[48147-48188]"
  }, {
    "left" : "if ((clusterId != manualIndexCluster && clusterId != internalCluster && clusterId != indexCluster))",
    "right" : "if ((clusterId != manualIndexCluster && clusterId != internalCluster && clusterId != indexCluster))",
    "info" : "IfStatement[48198-48883]:IfStatement[48198-48883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48298-48883]:Block[48298-48883]"
  }, {
    "left" : "record.getRecordVersion().copyFrom(OVersionFactory.instance().createVersion());",
    "right" : "record.getRecordVersion().copyFrom(OVersionFactory.instance().createVersion());",
    "info" : "ExpressionStatement[48309-48388]:ExpressionStatement[48309-48388]"
  }, {
    "left" : "record.setDirty();",
    "right" : "record.setDirty();",
    "info" : "ExpressionStatement[48398-48416]:ExpressionStatement[48398-48416]"
  }, {
    "left" : "ORecordInternal.setIdentity(record, new ORecordId());",
    "right" : "ORecordInternal.setIdentity(record, new ORecordId());",
    "info" : "ExpressionStatement[48426-48479]:ExpressionStatement[48426-48479]"
  }, {
    "left" : "if (!preserveRids && record instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument) record)) != null)",
    "right" : "if (!preserveRids && record instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument) record)) != null)",
    "info" : "IfStatement[48491-48719]:IfStatement[48491-48719]"
  }, {
    "left" : "record.save();",
    "right" : "record.save();",
    "info" : "ExpressionStatement[48627-48641]:ExpressionStatement[48627-48641]"
  }, {
    "left" : "record.save(database.getClusterNameById(clusterId));",
    "right" : "record.save(database.getClusterNameById(clusterId));",
    "info" : "ExpressionStatement[48667-48719]:ExpressionStatement[48667-48719]"
  }, {
    "left" : "if (!rid.equals(record.getIdentity()))",
    "right" : "if (!rid.equals(record.getIdentity()))",
    "info" : "IfStatement[48731-48874]:IfStatement[48731-48874]"
  }, {
    "left" : "exportImportHashTable.put(rid, record.getIdentity());",
    "right" : "exportImportHashTable.put(rid, record.getIdentity());",
    "info" : "ExpressionStatement[48821-48874]:ExpressionStatement[48821-48874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48913-49382]:Block[48913-49382]"
  }, {
    "left" : "if (record != null)",
    "right" : "if (record != null)",
    "info" : "IfStatement[48922-49357]:IfStatement[48922-49357]"
  }, {
    "left" : "OLogManager.instance().error(\r\n            this,\r\n            \"Error importing record \" + record.getIdentity() + \". Source line \" + jsonReader.getLineNumber() + \", column \"\r\n                + jsonReader.getColumnNumber());",
    "right" : "OLogManager.instance().error(\r\n            this,\r\n            \"Error importing record \" + record.getIdentity() + \". Source line \" + jsonReader.getLineNumber() + \", column \"\r\n                + jsonReader.getColumnNumber());",
    "info" : "ExpressionStatement[48951-49173]:ExpressionStatement[48951-49173]"
  }, {
    "left" : "OLogManager.instance().error(this,\r\n            \"Error importing record. Source line \" + jsonReader.getLineNumber() + \", column \" + jsonReader.getColumnNumber());",
    "right" : "OLogManager.instance().error(this,\r\n            \"Error importing record. Source line \" + jsonReader.getLineNumber() + \", column \" + jsonReader.getColumnNumber());",
    "info" : "ExpressionStatement[49195-49357]:ExpressionStatement[49195-49357]"
  }, {
    "left" : "throw t;",
    "right" : "throw t;",
    "info" : "ThrowStatement[49367-49375]:ThrowStatement[49367-49375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49391-49454]:Block[49391-49454]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[49400-49447]:ExpressionStatement[49400-49447]"
  }, {
    "left" : "return record.getIdentity();",
    "right" : "return record.getIdentity();",
    "info" : "ReturnStatement[49462-49490]:ReturnStatement[49462-49490]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49501-49508]:Modifier[49501-49508]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49509-49513]:PrimitiveType[49509-49513]"
  }, {
    "left" : "importIndexes",
    "right" : "importIndexes",
    "info" : "SimpleName[49514-49527]:SimpleName[49514-49527]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49537-49548]:SimpleType[49537-49548]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[49550-49564]:SimpleType[49550-49564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49565-52458]:Block[49565-52458]"
  }, {
    "left" : "listener.onMessage(\"\\n\\nImporting indexes ...\");",
    "right" : "listener.onMessage(\"\\n\\nImporting indexes ...\");",
    "info" : "ExpressionStatement[49572-49620]:ExpressionStatement[49572-49620]"
  }, {
    "left" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
    "right" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
    "info" : "VariableDeclarationStatement[49628-49703]:VariableDeclarationStatement[49628-49703]"
  }, {
    "left" : "indexManager.reload();",
    "right" : "indexManager.reload();",
    "info" : "ExpressionStatement[49709-49731]:ExpressionStatement[49709-49731]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[49739-49789]:ExpressionStatement[49739-49789]"
  }, {
    "left" : "int n = 0;",
    "right" : "int n = 0;",
    "info" : "VariableDeclarationStatement[49797-49807]:VariableDeclarationStatement[49797-49807]"
  }, {
    "left" : "while (jsonReader.lastChar() != ']')",
    "right" : "while (jsonReader.lastChar() != ']')",
    "info" : "WhileStatement[49813-52334]:WhileStatement[49813-52334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49850-52334]:Block[49850-52334]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[49859-49905]:ExpressionStatement[49859-49905]"
  }, {
    "left" : "String blueprintsIndexClass = null;",
    "right" : "String blueprintsIndexClass = null;",
    "info" : "VariableDeclarationStatement[49915-49950]:VariableDeclarationStatement[49915-49950]"
  }, {
    "left" : "String indexName = null;",
    "right" : "String indexName = null;",
    "info" : "VariableDeclarationStatement[49958-49982]:VariableDeclarationStatement[49958-49982]"
  }, {
    "left" : "String indexType = null;",
    "right" : "String indexType = null;",
    "info" : "VariableDeclarationStatement[49990-50014]:VariableDeclarationStatement[49990-50014]"
  }, {
    "left" : "Set<String> clustersToIndex = new HashSet<String>();",
    "right" : "Set<String> clustersToIndex = new HashSet<String>();",
    "info" : "VariableDeclarationStatement[50022-50074]:VariableDeclarationStatement[50022-50074]"
  }, {
    "left" : "OIndexDefinition indexDefinition = null;",
    "right" : "OIndexDefinition indexDefinition = null;",
    "info" : "VariableDeclarationStatement[50082-50122]:VariableDeclarationStatement[50082-50122]"
  }, {
    "left" : "ODocument metadata = null;",
    "right" : "ODocument metadata = null;",
    "info" : "VariableDeclarationStatement[50130-50156]:VariableDeclarationStatement[50130-50156]"
  }, {
    "left" : "while (jsonReader.lastChar() != '}')",
    "right" : "while (jsonReader.lastChar() != '}')",
    "info" : "WhileStatement[50166-51213]:WhileStatement[50166-51213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50203-51213]:Block[50203-51213]"
  }, {
    "left" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "VariableDeclarationStatement[50214-50291]:VariableDeclarationStatement[50214-50291]"
  }, {
    "left" : "if (fieldName.equals(\"name\"))",
    "right" : "if (fieldName.equals(\"name\"))",
    "info" : "IfStatement[50301-51204]:IfStatement[50301-51204]"
  }, {
    "left" : "indexName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "indexName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[50342-50404]:ExpressionStatement[50342-50404]"
  }, {
    "left" : "if (fieldName.equals(\"type\"))",
    "right" : "if (fieldName.equals(\"type\"))",
    "info" : "IfStatement[50419-51204]:IfStatement[50419-51204]"
  }, {
    "left" : "indexType = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "indexType = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[50460-50522]:ExpressionStatement[50460-50522]"
  }, {
    "left" : "if (fieldName.equals(\"clustersToIndex\"))",
    "right" : "if (fieldName.equals(\"clustersToIndex\"))",
    "info" : "IfStatement[50537-51204]:IfStatement[50537-51204]"
  }, {
    "left" : "clustersToIndex = importClustersToIndex();",
    "right" : "clustersToIndex = importClustersToIndex();",
    "info" : "ExpressionStatement[50589-50631]:ExpressionStatement[50589-50631]"
  }, {
    "left" : "if (fieldName.equals(\"definition\"))",
    "right" : "if (fieldName.equals(\"definition\"))",
    "info" : "IfStatement[50646-51204]:IfStatement[50646-51204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50682-50808]:Block[50682-50808]"
  }, {
    "left" : "indexDefinition = importIndexDefinition();",
    "right" : "indexDefinition = importIndexDefinition();",
    "info" : "ExpressionStatement[50695-50737]:ExpressionStatement[50695-50737]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[50749-50797]:ExpressionStatement[50749-50797]"
  }, {
    "left" : "if (fieldName.equals(\"metadata\"))",
    "right" : "if (fieldName.equals(\"metadata\"))",
    "info" : "IfStatement[50814-51204]:IfStatement[50814-51204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50848-51068]:Block[50848-51068]"
  }, {
    "left" : "String jsonMetadata = jsonReader.readString(OJSONReader.END_OBJECT, true);",
    "right" : "String jsonMetadata = jsonReader.readString(OJSONReader.END_OBJECT, true);",
    "info" : "VariableDeclarationStatement[50861-50935]:VariableDeclarationStatement[50861-50935]"
  }, {
    "left" : "metadata = new ODocument().fromJSON(jsonMetadata);",
    "right" : "metadata = new ODocument().fromJSON(jsonMetadata);",
    "info" : "ExpressionStatement[50947-50997]:ExpressionStatement[50947-50997]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[51009-51057]:ExpressionStatement[51009-51057]"
  }, {
    "left" : "if (fieldName.equals(\"blueprintsIndexClass\"))",
    "right" : "if (fieldName.equals(\"blueprintsIndexClass\"))",
    "info" : "IfStatement[51074-51204]:IfStatement[51074-51204]"
  }, {
    "left" : "blueprintsIndexClass = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "blueprintsIndexClass = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[51131-51204]:ExpressionStatement[51131-51204]"
  }, {
    "left" : "if (indexName == null)",
    "right" : "if (indexName == null)",
    "info" : "IfStatement[51223-51315]:IfStatement[51223-51315]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Index name is missing\");",
    "right" : "throw new IllegalArgumentException(\"Index name is missing\");",
    "info" : "ThrowStatement[51255-51315]:ThrowStatement[51255-51315]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "ExpressionStatement[51325-51372]:ExpressionStatement[51325-51372]"
  }, {
    "left" : "if (!indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
    "right" : "if (!indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
    "info" : "IfStatement[51427-52327]:IfStatement[51427-52327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51484-52327]:Block[51484-52327]"
  }, {
    "left" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
    "right" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
    "info" : "ExpressionStatement[51495-51550]:ExpressionStatement[51495-51550]"
  }, {
    "left" : "indexManager.dropIndex(indexName);",
    "right" : "indexManager.dropIndex(indexName);",
    "info" : "ExpressionStatement[51562-51596]:ExpressionStatement[51562-51596]"
  }, {
    "left" : "indexesToRebuild.remove(indexName.toLowerCase());",
    "right" : "indexesToRebuild.remove(indexName.toLowerCase());",
    "info" : "ExpressionStatement[51606-51655]:ExpressionStatement[51606-51655]"
  }, {
    "left" : "int[] clusterIdsToIndex = new int[clustersToIndex.size()];",
    "right" : "int[] clusterIdsToIndex = new int[clustersToIndex.size()];",
    "info" : "VariableDeclarationStatement[51667-51725]:VariableDeclarationStatement[51667-51725]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[51737-51747]:VariableDeclarationStatement[51737-51747]"
  }, {
    "left" : "for (final String clusterName : clustersToIndex)",
    "right" : "for (final String clusterName : clustersToIndex)",
    "info" : "EnhancedForStatement[51757-51910]:EnhancedForStatement[51757-51910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51806-51910]:Block[51806-51910]"
  }, {
    "left" : "clusterIdsToIndex[i] = database.getClusterIdByName(clusterName);",
    "right" : "clusterIdsToIndex[i] = database.getClusterIdByName(clusterName);",
    "info" : "ExpressionStatement[51819-51883]:ExpressionStatement[51819-51883]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[51895-51899]:ExpressionStatement[51895-51899]"
  }, {
    "left" : "OIndex index = indexManager.createIndex(indexName, indexType, indexDefinition, clusterIdsToIndex, null, metadata);",
    "right" : "OIndex index = indexManager.createIndex(indexName, indexType, indexDefinition, clusterIdsToIndex, null, metadata);",
    "info" : "VariableDeclarationStatement[51922-52036]:VariableDeclarationStatement[51922-52036]"
  }, {
    "left" : "if (blueprintsIndexClass != null)",
    "right" : "if (blueprintsIndexClass != null)",
    "info" : "IfStatement[52046-52265]:IfStatement[52046-52265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52080-52265]:Block[52080-52265]"
  }, {
    "left" : "ODocument configuration = index.getConfiguration();",
    "right" : "ODocument configuration = index.getConfiguration();",
    "info" : "VariableDeclarationStatement[52093-52144]:VariableDeclarationStatement[52093-52144]"
  }, {
    "left" : "configuration.field(\"blueprintsIndexClass\", blueprintsIndexClass);",
    "right" : "configuration.field(\"blueprintsIndexClass\", blueprintsIndexClass);",
    "info" : "ExpressionStatement[52156-52222]:ExpressionStatement[52156-52222]"
  }, {
    "left" : "indexManager.save();",
    "right" : "indexManager.save();",
    "info" : "ExpressionStatement[52234-52254]:ExpressionStatement[52234-52254]"
  }, {
    "left" : "n++;",
    "right" : "n++;",
    "info" : "ExpressionStatement[52277-52281]:ExpressionStatement[52277-52281]"
  }, {
    "left" : "listener.onMessage(\"OK\");",
    "right" : "listener.onMessage(\"OK\");",
    "info" : "ExpressionStatement[52291-52316]:ExpressionStatement[52291-52316]"
  }, {
    "left" : "listener.onMessage(\"\\nDone. Created \" + n + \" indexes.\");",
    "right" : "listener.onMessage(\"\\nDone. Created \" + n + \" indexes.\");",
    "info" : "ExpressionStatement[52342-52399]:ExpressionStatement[52342-52399]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[52405-52453]:ExpressionStatement[52405-52453]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52464-52471]:Modifier[52464-52471]"
  }, {
    "left" : "Set<String>",
    "right" : "Set<String>",
    "info" : "ParameterizedType[52472-52483]:ParameterizedType[52472-52483]"
  }, {
    "left" : "importClustersToIndex",
    "right" : "importClustersToIndex",
    "info" : "SimpleName[52484-52505]:SimpleName[52484-52505]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[52515-52526]:SimpleType[52515-52526]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[52528-52542]:SimpleType[52528-52542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52543-52942]:Block[52543-52942]"
  }, {
    "left" : "final Set<String> clustersToIndex = new HashSet<String>();",
    "right" : "final Set<String> clustersToIndex = new HashSet<String>();",
    "info" : "VariableDeclarationStatement[52550-52608]:VariableDeclarationStatement[52550-52608]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
    "info" : "ExpressionStatement[52616-52666]:ExpressionStatement[52616-52666]"
  }, {
    "left" : "while (jsonReader.lastChar() != ']')",
    "right" : "while (jsonReader.lastChar() != ']')",
    "info" : "WhileStatement[52674-52850]:WhileStatement[52674-52850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52711-52850]:Block[52711-52850]"
  }, {
    "left" : "final String clusterToIndex = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
    "right" : "final String clusterToIndex = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
    "info" : "VariableDeclarationStatement[52720-52799]:VariableDeclarationStatement[52720-52799]"
  }, {
    "left" : "clustersToIndex.add(clusterToIndex);",
    "right" : "clustersToIndex.add(clusterToIndex);",
    "info" : "ExpressionStatement[52807-52843]:ExpressionStatement[52807-52843]"
  }, {
    "left" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[52858-52908]:ExpressionStatement[52858-52908]"
  }, {
    "left" : "return clustersToIndex;",
    "right" : "return clustersToIndex;",
    "info" : "ReturnStatement[52914-52937]:ReturnStatement[52914-52937]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52948-52955]:Modifier[52948-52955]"
  }, {
    "left" : "OIndexDefinition",
    "right" : "OIndexDefinition",
    "info" : "SimpleType[52956-52972]:SimpleType[52956-52972]"
  }, {
    "left" : "importIndexDefinition",
    "right" : "importIndexDefinition",
    "info" : "SimpleName[52973-52994]:SimpleName[52973-52994]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[53004-53015]:SimpleType[53004-53015]"
  }, {
    "left" : "ParseException",
    "right" : "ParseException",
    "info" : "SimpleType[53017-53031]:SimpleType[53017-53031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53032-54522]:Block[53032-54522]"
  }, {
    "left" : "jsonReader.readString(OJSONReader.BEGIN_OBJECT);",
    "right" : "jsonReader.readString(OJSONReader.BEGIN_OBJECT);",
    "info" : "ExpressionStatement[53039-53087]:ExpressionStatement[53039-53087]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[53093-53143]:ExpressionStatement[53093-53143]"
  }, {
    "left" : "final String className = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "final String className = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "VariableDeclarationStatement[53151-53226]:VariableDeclarationStatement[53151-53226]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
    "info" : "ExpressionStatement[53234-53284]:ExpressionStatement[53234-53284]"
  }, {
    "left" : "final String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
    "right" : "final String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
    "info" : "VariableDeclarationStatement[53292-53365]:VariableDeclarationStatement[53292-53365]"
  }, {
    "left" : "final OIndexDefinition indexDefinition;",
    "right" : "final OIndexDefinition indexDefinition;",
    "info" : "VariableDeclarationStatement[53373-53412]:VariableDeclarationStatement[53373-53412]"
  }, {
    "left" : "final ODocument indexDefinitionDoc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, null, null);",
    "right" : "final ODocument indexDefinitionDoc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, null, null);",
    "info" : "VariableDeclarationStatement[53418-53528]:VariableDeclarationStatement[53418-53528]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[53534-54430]:TryStatement[53534-54430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53538-53763]:Block[53538-53763]"
  }, {
    "left" : "final Class<?> indexDefClass = Class.forName(className);",
    "right" : "final Class<?> indexDefClass = Class.forName(className);",
    "info" : "VariableDeclarationStatement[53547-53603]:VariableDeclarationStatement[53547-53603]"
  }, {
    "left" : "indexDefinition = (OIndexDefinition) indexDefClass.getDeclaredConstructor().newInstance();",
    "right" : "indexDefinition = (OIndexDefinition) indexDefClass.getDeclaredConstructor().newInstance();",
    "info" : "ExpressionStatement[53611-53701]:ExpressionStatement[53611-53701]"
  }, {
    "left" : "indexDefinition.fromStream(indexDefinitionDoc);",
    "right" : "indexDefinition.fromStream(indexDefinitionDoc);",
    "info" : "ExpressionStatement[53709-53756]:ExpressionStatement[53709-53756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53803-53896]:Block[53803-53896]"
  }, {
    "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "info" : "ThrowStatement[53812-53889]:ThrowStatement[53812-53889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53935-54028]:Block[53935-54028]"
  }, {
    "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "info" : "ThrowStatement[53944-54021]:ThrowStatement[53944-54021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54071-54164]:Block[54071-54164]"
  }, {
    "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "info" : "ThrowStatement[54080-54157]:ThrowStatement[54080-54157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54204-54297]:Block[54204-54297]"
  }, {
    "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "info" : "ThrowStatement[54213-54290]:ThrowStatement[54213-54290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54337-54430]:Block[54337-54430]"
  }, {
    "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
    "info" : "ThrowStatement[54346-54423]:ThrowStatement[54346-54423]"
  }, {
    "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
    "info" : "ExpressionStatement[54438-54486]:ExpressionStatement[54438-54486]"
  }, {
    "left" : "return indexDefinition;",
    "right" : "return indexDefinition;",
    "info" : "ReturnStatement[54494-54517]:ReturnStatement[54494-54517]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54528-54535]:Modifier[54528-54535]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[54536-54540]:PrimitiveType[54536-54540]"
  }, {
    "left" : "migrateLinksInImportedDocuments",
    "right" : "migrateLinksInImportedDocuments",
    "info" : "SimpleName[54541-54572]:SimpleName[54541-54572]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[54582-54593]:SimpleType[54582-54593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54594-56925]:Block[54594-56925]"
  }, {
    "left" : "listener.onMessage(\"\\n\\nStarted migration of links (-migrateLinks=true). Links are going to be updated according to new RIDs:\");",
    "right" : "listener.onMessage(\"\\n\\nStarted migration of links (-migrateLinks=true). Links are going to be updated according to new RIDs:\");",
    "info" : "ExpressionStatement[54601-54729]:ExpressionStatement[54601-54729]"
  }, {
    "left" : "final long begin = System.currentTimeMillis();",
    "right" : "final long begin = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[54737-54783]:VariableDeclarationStatement[54737-54783]"
  }, {
    "left" : "long last = begin;",
    "right" : "long last = begin;",
    "info" : "VariableDeclarationStatement[54789-54807]:VariableDeclarationStatement[54789-54807]"
  }, {
    "left" : "long documentsLastLap = 0;",
    "right" : "long documentsLastLap = 0;",
    "info" : "VariableDeclarationStatement[54813-54839]:VariableDeclarationStatement[54813-54839]"
  }, {
    "left" : "long totalDocuments = 0;",
    "right" : "long totalDocuments = 0;",
    "info" : "VariableDeclarationStatement[54847-54871]:VariableDeclarationStatement[54847-54871]"
  }, {
    "left" : "Collection<String> clusterNames = database.getClusterNames();",
    "right" : "Collection<String> clusterNames = database.getClusterNames();",
    "info" : "VariableDeclarationStatement[54877-54938]:VariableDeclarationStatement[54877-54938]"
  }, {
    "left" : "for (String clusterName : clusterNames)",
    "right" : "for (String clusterName : clusterNames)",
    "info" : "EnhancedForStatement[54944-56832]:EnhancedForStatement[54944-56832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54984-56832]:Block[54984-56832]"
  }, {
    "left" : "if (OMetadataDefault.CLUSTER_INDEX_NAME.equals(clusterName) || OMetadataDefault.CLUSTER_INTERNAL_NAME.equals(clusterName)\r\n          || OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME.equals(clusterName))",
    "right" : "if (OMetadataDefault.CLUSTER_INDEX_NAME.equals(clusterName) || OMetadataDefault.CLUSTER_INTERNAL_NAME.equals(clusterName)\r\n          || OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME.equals(clusterName))",
    "info" : "IfStatement[54993-55211]:IfStatement[54993-55211]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[55202-55211]:ContinueStatement[55202-55211]"
  }, {
    "left" : "long documents = 0;",
    "right" : "long documents = 0;",
    "info" : "VariableDeclarationStatement[55221-55240]:VariableDeclarationStatement[55221-55240]"
  }, {
    "left" : "String prefix = \"\";",
    "right" : "String prefix = \"\";",
    "info" : "VariableDeclarationStatement[55248-55267]:VariableDeclarationStatement[55248-55267]"
  }, {
    "left" : "listener.onMessage(\"\\n- Cluster \" + clusterName + \"...\");",
    "right" : "listener.onMessage(\"\\n- Cluster \" + clusterName + \"...\");",
    "info" : "ExpressionStatement[55277-55334]:ExpressionStatement[55277-55334]"
  }, {
    "left" : "final int clusterId = database.getClusterIdByName(clusterName);",
    "right" : "final int clusterId = database.getClusterIdByName(clusterName);",
    "info" : "VariableDeclarationStatement[55344-55407]:VariableDeclarationStatement[55344-55407]"
  }, {
    "left" : "final long clusterRecords = database.countClusterElements(clusterId);",
    "right" : "final long clusterRecords = database.countClusterElements(clusterId);",
    "info" : "VariableDeclarationStatement[55415-55484]:VariableDeclarationStatement[55415-55484]"
  }, {
    "left" : "OStorage storage = database.getStorage();",
    "right" : "OStorage storage = database.getStorage();",
    "info" : "VariableDeclarationStatement[55492-55533]:VariableDeclarationStatement[55492-55533]"
  }, {
    "left" : "OPhysicalPosition[] positions = storage.ceilingPhysicalPositions(clusterId, new OPhysicalPosition(0));",
    "right" : "OPhysicalPosition[] positions = storage.ceilingPhysicalPositions(clusterId, new OPhysicalPosition(0));",
    "info" : "VariableDeclarationStatement[55543-55645]:VariableDeclarationStatement[55543-55645]"
  }, {
    "left" : "while (positions.length > 0)",
    "right" : "while (positions.length > 0)",
    "info" : "WhileStatement[55653-56702]:WhileStatement[55653-56702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55682-56702]:Block[55682-56702]"
  }, {
    "left" : "for (OPhysicalPosition position : positions)",
    "right" : "for (OPhysicalPosition position : positions)",
    "info" : "EnhancedForStatement[55693-56593]:EnhancedForStatement[55693-56593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55738-56593]:Block[55738-56593]"
  }, {
    "left" : "ORecord record = database.load(new ORecordId(clusterId, position.clusterPosition));",
    "right" : "ORecord record = database.load(new ORecordId(clusterId, position.clusterPosition));",
    "info" : "VariableDeclarationStatement[55751-55834]:VariableDeclarationStatement[55751-55834]"
  }, {
    "left" : "if (record instanceof ODocument)",
    "right" : "if (record instanceof ODocument)",
    "info" : "IfStatement[55846-56582]:IfStatement[55846-56582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55879-56582]:Block[55879-56582]"
  }, {
    "left" : "ODocument document = (ODocument) record;",
    "right" : "ODocument document = (ODocument) record;",
    "info" : "VariableDeclarationStatement[55894-55934]:VariableDeclarationStatement[55894-55934]"
  }, {
    "left" : "rewriteLinksInDocument(document);",
    "right" : "rewriteLinksInDocument(document);",
    "info" : "ExpressionStatement[55948-55981]:ExpressionStatement[55948-55981]"
  }, {
    "left" : "documents++;",
    "right" : "documents++;",
    "info" : "ExpressionStatement[55997-56009]:ExpressionStatement[55997-56009]"
  }, {
    "left" : "documentsLastLap++;",
    "right" : "documentsLastLap++;",
    "info" : "ExpressionStatement[56023-56042]:ExpressionStatement[56023-56042]"
  }, {
    "left" : "totalDocuments++;",
    "right" : "totalDocuments++;",
    "info" : "ExpressionStatement[56056-56073]:ExpressionStatement[56056-56073]"
  }, {
    "left" : "final long now = System.currentTimeMillis();",
    "right" : "final long now = System.currentTimeMillis();",
    "info" : "VariableDeclarationStatement[56089-56133]:VariableDeclarationStatement[56089-56133]"
  }, {
    "left" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
    "right" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
    "info" : "IfStatement[56147-56569]:IfStatement[56147-56569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56197-56569]:Block[56197-56569]"
  }, {
    "left" : "listener.onMessage(String.format(\"\\n--- Migrated %,d of %,d records (%,.2f/sec)\", documents, clusterRecords,\r\n                  (float) documentsLastLap * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
    "right" : "listener.onMessage(String.format(\"\\n--- Migrated %,d of %,d records (%,.2f/sec)\", documents, clusterRecords,\r\n                  (float) documentsLastLap * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
    "info" : "ExpressionStatement[56214-56418]:ExpressionStatement[56214-56418]"
  }, {
    "left" : "last = now;",
    "right" : "last = now;",
    "info" : "ExpressionStatement[56473-56484]:ExpressionStatement[56473-56484]"
  }, {
    "left" : "documentsLastLap = 0;",
    "right" : "documentsLastLap = 0;",
    "info" : "ExpressionStatement[56500-56521]:ExpressionStatement[56500-56521]"
  }, {
    "left" : "prefix = \"\\n---\";",
    "right" : "prefix = \"\\n---\";",
    "info" : "ExpressionStatement[56537-56554]:ExpressionStatement[56537-56554]"
  }, {
    "left" : "positions = storage.higherPhysicalPositions(clusterId, positions[positions.length - 1]);",
    "right" : "positions = storage.higherPhysicalPositions(clusterId, positions[positions.length - 1]);",
    "info" : "ExpressionStatement[56605-56693]:ExpressionStatement[56605-56693]"
  }, {
    "left" : "listener.onMessage(String.format(\"%s Completed migration of %,d records in current cluster\", prefix, documents));",
    "right" : "listener.onMessage(String.format(\"%s Completed migration of %,d records in current cluster\", prefix, documents));",
    "info" : "ExpressionStatement[56712-56825]:ExpressionStatement[56712-56825]"
  }, {
    "left" : "listener.onMessage(String.format(\"\\nTotal links updated: %,d\", totalDocuments));",
    "right" : "listener.onMessage(String.format(\"\\nTotal links updated: %,d\", totalDocuments));",
    "info" : "ExpressionStatement[56840-56920]:ExpressionStatement[56840-56920]"
  }, {
    "left" : "private",
    "right" : "protected",
    "info" : "Modifier[56931-56938]:Modifier[57083-57092]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56939-56943]:PrimitiveType[57100-57104]"
  }, {
    "left" : "rewriteLinksInDocument",
    "right" : "rewriteLinksInDocument",
    "info" : "SimpleName[56944-56966]:SimpleName[57105-57127]"
  }, {
    "left" : "ODocument document",
    "right" : "ODocument document",
    "info" : "SingleVariableDeclaration[56967-56985]:SingleVariableDeclaration[57128-57146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56987-57290]:Block[57179-57446]"
  }, {
    "left" : "LinkConverter.INSTANCE.setExportImportHashTable(exportImportHashTable);",
    "right" : "LinkConverter.INSTANCE.setExportImportHashTable(rewrite);",
    "info" : "ExpressionStatement[56994-57065]:ExpressionStatement[57186-57243]"
  }, {
    "left" : "exportImportHashTable",
    "right" : "rewrite",
    "info" : "SimpleName[57042-57063]:SimpleName[57234-57241]"
  }, {
    "left" : "final LinksRewriter rewriter = new LinksRewriter();",
    "right" : "final LinksRewriter rewriter = new LinksRewriter();",
    "info" : "VariableDeclarationStatement[57071-57122]:VariableDeclarationStatement[57249-57300]"
  }, {
    "left" : "final ODocumentFieldWalker documentFieldWalker = new ODocumentFieldWalker();",
    "right" : "final ODocumentFieldWalker documentFieldWalker = new ODocumentFieldWalker();",
    "info" : "VariableDeclarationStatement[57128-57204]:VariableDeclarationStatement[57306-57382]"
  }, {
    "left" : "documentFieldWalker.walkDocument(document, rewriter);",
    "right" : "documentFieldWalker.walkDocument(document, rewriter);",
    "info" : "ExpressionStatement[57210-57263]:ExpressionStatement[57388-57441]"
  }, {
    "left" : "document.save();",
    "right" : "document.save();",
    "info" : "ExpressionStatement[57269-57285]:ExpressionStatement[57056-57072]"
  } ]
}