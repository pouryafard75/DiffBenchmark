{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Lexer",
      "right" : "Lexer",
      "info" : "TypeDeclaration[1250-6126]:TypeDeclaration[1250-6262]"
    }, {
      "left" : "private static final char DISABLED = '\\ufffe';",
      "right" : "private static final char DISABLED = '\\ufffe';",
      "info" : "FieldDeclaration[1381-1769]:FieldDeclaration[1381-1769]"
    }, {
      "left" : "private final char delimiter;",
      "right" : "private final char delimiter;",
      "info" : "FieldDeclaration[1775-1804]:FieldDeclaration[1775-1804]"
    }, {
      "left" : "private final char escape;",
      "right" : "private final char escape;",
      "info" : "FieldDeclaration[1809-1835]:FieldDeclaration[1809-1835]"
    }, {
      "left" : "private final char quoteChar;",
      "right" : "private final char quoteChar;",
      "info" : "FieldDeclaration[1840-1869]:FieldDeclaration[1840-1869]"
    }, {
      "left" : "private final char commmentStart;",
      "right" : "private final char commmentStart;",
      "info" : "FieldDeclaration[1874-1907]:FieldDeclaration[1874-1907]"
    }, {
      "left" : "final boolean ignoreSurroundingSpaces;",
      "right" : "final boolean ignoreSurroundingSpaces;",
      "info" : "FieldDeclaration[1913-1951]:FieldDeclaration[1913-1951]"
    }, {
      "left" : "final boolean ignoreEmptyLines;",
      "right" : "final boolean ignoreEmptyLines;",
      "info" : "FieldDeclaration[1956-1987]:FieldDeclaration[1956-1987]"
    }, {
      "left" : "final CSVFormat format;",
      "right" : "final CSVFormat format;",
      "info" : "FieldDeclaration[1993-2016]:FieldDeclaration[1993-2016]"
    }, {
      "left" : "final ExtendedBufferedReader in;",
      "right" : "final ExtendedBufferedReader in;",
      "info" : "FieldDeclaration[2022-2082]:FieldDeclaration[2022-2082]"
    }, {
      "left" : "Lexer(final CSVFormat format, final ExtendedBufferedReader in)",
      "right" : "Lexer(final CSVFormat format, final ExtendedBufferedReader in)",
      "info" : "MethodDeclaration[2088-2598]:MethodDeclaration[2088-2598]"
    }, {
      "left" : "private final char mapNullToDisabled(final Character c)",
      "right" : "private final char mapNullToDisabled(final Character c)",
      "info" : "MethodDeclaration[2604-2720]:MethodDeclaration[2604-2720]"
    }, {
      "left" : "long getLineNumber()",
      "right" : "long getLineNumber()",
      "info" : "MethodDeclaration[2726-2789]:MethodDeclaration[2726-2789]"
    }, {
      "left" : "int readEscape() throws IOException",
      "right" : "int readEscape() throws IOException",
      "info" : "MethodDeclaration[2839-4243]:MethodDeclaration[2839-4379]"
    }, {
      "left" : "void trimTrailingSpaces(final StringBuilder buffer)",
      "right" : "void trimTrailingSpaces(final StringBuilder buffer)",
      "info" : "MethodDeclaration[4249-4560]:MethodDeclaration[4385-4696]"
    }, {
      "left" : "boolean readEndOfLine(int c) throws IOException",
      "right" : "boolean readEndOfLine(int c) throws IOException",
      "info" : "MethodDeclaration[4566-5037]:MethodDeclaration[4702-5173]"
    }, {
      "left" : "abstract Token nextToken(Token reusableToken) throws IOException;",
      "right" : "abstract Token nextToken(Token reusableToken) throws IOException;",
      "info" : "MethodDeclaration[5043-5108]:MethodDeclaration[5179-5244]"
    }, {
      "left" : "boolean isWhitespace(final int c)",
      "right" : "boolean isWhitespace(final int c)",
      "info" : "MethodDeclaration[5114-5314]:MethodDeclaration[5250-5450]"
    }, {
      "left" : "boolean isStartOfLine(final int c)",
      "right" : "boolean isStartOfLine(final int c)",
      "info" : "MethodDeclaration[5320-5653]:MethodDeclaration[5456-5789]"
    }, {
      "left" : "boolean isEndOfFile(final int c)",
      "right" : "boolean isEndOfFile(final int c)",
      "info" : "MethodDeclaration[5659-5815]:MethodDeclaration[5795-5951]"
    }, {
      "left" : "boolean isDelimiter(final int c)",
      "right" : "boolean isDelimiter(final int c)",
      "info" : "MethodDeclaration[5821-5892]:MethodDeclaration[5957-6028]"
    }, {
      "left" : "boolean isEscape(final int c)",
      "right" : "boolean isEscape(final int c)",
      "info" : "MethodDeclaration[5898-5963]:MethodDeclaration[6034-6099]"
    }, {
      "left" : "boolean isQuoteChar(final int c)",
      "right" : "boolean isQuoteChar(final int c)",
      "info" : "MethodDeclaration[5969-6040]:MethodDeclaration[6105-6176]"
    }, {
      "left" : "boolean isCommentStart(final int c)",
      "right" : "boolean isCommentStart(final int c)",
      "info" : "MethodDeclaration[6046-6124]:MethodDeclaration[6182-6260]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2151-2598]:Block[2151-2598]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[2161-2182]:ExpressionStatement[2161-2182]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[2191-2204]:ExpressionStatement[2191-2204]"
    }, {
      "left" : "this.delimiter = format.getDelimiter();",
      "right" : "this.delimiter = format.getDelimiter();",
      "info" : "ExpressionStatement[2213-2252]:ExpressionStatement[2213-2252]"
    }, {
      "left" : "this.escape = mapNullToDisabled(format.getEscape());",
      "right" : "this.escape = mapNullToDisabled(format.getEscape());",
      "info" : "ExpressionStatement[2261-2313]:ExpressionStatement[2261-2313]"
    }, {
      "left" : "this.quoteChar = mapNullToDisabled(format.getQuoteChar());",
      "right" : "this.quoteChar = mapNullToDisabled(format.getQuoteChar());",
      "info" : "ExpressionStatement[2322-2380]:ExpressionStatement[2322-2380]"
    }, {
      "left" : "this.commmentStart = mapNullToDisabled(format.getCommentStart());",
      "right" : "this.commmentStart = mapNullToDisabled(format.getCommentStart());",
      "info" : "ExpressionStatement[2389-2454]:ExpressionStatement[2389-2454]"
    }, {
      "left" : "this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();",
      "right" : "this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();",
      "info" : "ExpressionStatement[2463-2530]:ExpressionStatement[2463-2530]"
    }, {
      "left" : "this.ignoreEmptyLines = format.getIgnoreEmptyLines();",
      "right" : "this.ignoreEmptyLines = format.getIgnoreEmptyLines();",
      "info" : "ExpressionStatement[2539-2592]:ExpressionStatement[2539-2592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2660-2720]:Block[2660-2720]"
    }, {
      "left" : "return c == null ? DISABLED : c.charValue();",
      "right" : "return c == null ? DISABLED : c.charValue();",
      "info" : "ReturnStatement[2670-2714]:ReturnStatement[2670-2714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2747-2789]:Block[2747-2789]"
    }, {
      "left" : "return in.getLineNumber();",
      "right" : "return in.getLineNumber();",
      "info" : "ReturnStatement[2757-2783]:ReturnStatement[2757-2783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3406-4243]:Block[3406-4379]"
    }, {
      "left" : "final int c = in.read();",
      "right" : "final int c = in.read();",
      "info" : "VariableDeclarationStatement[3485-3509]:VariableDeclarationStatement[3485-3509]"
    }, {
      "left" : "switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct?\n        case TAB: // TODO is this correct? Do tabs need to be escaped?\n        case BACKSPACE: // TODO is this correct?\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Now check for meta-characters\n                return c;\n            // indicate unexpected char - available from in.getLastChar()\n        }",
      "right" : "switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct?\n        case TAB: // TODO is this correct? Do tabs need to be escaped?\n        case BACKSPACE: // TODO is this correct?\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Now check for meta-characters\n            if (isDelimiter(c) || isEscape(c) || isQuoteChar(c) || isCommentStart(c)) {\n                return c;\n            }\n            // indicate unexpected char - available from in.getLastChar()\n            return END_OF_STREAM;\n        }",
      "info" : "SwitchStatement[3518-4237]:SwitchStatement[3518-4373]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[3539-3548]:SwitchCase[3539-3548]"
    }, {
      "left" : "return CR;",
      "right" : "return CR;",
      "info" : "ReturnStatement[3561-3571]:ReturnStatement[3561-3571]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[3580-3589]:SwitchCase[3580-3589]"
    }, {
      "left" : "return LF;",
      "right" : "return LF;",
      "info" : "ReturnStatement[3602-3612]:ReturnStatement[3602-3612]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[3621-3630]:SwitchCase[3621-3630]"
    }, {
      "left" : "return TAB;",
      "right" : "return TAB;",
      "info" : "ReturnStatement[3643-3654]:ReturnStatement[3643-3654]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[3663-3672]:SwitchCase[3663-3672]"
    }, {
      "left" : "return BACKSPACE;",
      "right" : "return BACKSPACE;",
      "info" : "ReturnStatement[3685-3702]:ReturnStatement[3685-3702]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[3711-3720]:SwitchCase[3711-3720]"
    }, {
      "left" : "return FF;",
      "right" : "return FF;",
      "info" : "ReturnStatement[3733-3743]:ReturnStatement[3733-3743]"
    }, {
      "left" : "case CR:",
      "right" : "case CR:",
      "info" : "SwitchCase[3752-3760]:SwitchCase[3752-3760]"
    }, {
      "left" : "case LF:",
      "right" : "case LF:",
      "info" : "SwitchCase[3769-3777]:SwitchCase[3769-3777]"
    }, {
      "left" : "case FF:",
      "right" : "case FF:",
      "info" : "SwitchCase[3786-3794]:SwitchCase[3786-3794]"
    }, {
      "left" : "case TAB:",
      "right" : "case TAB:",
      "info" : "SwitchCase[3828-3837]:SwitchCase[3828-3837]"
    }, {
      "left" : "case BACKSPACE:",
      "right" : "case BACKSPACE:",
      "info" : "SwitchCase[3899-3914]:SwitchCase[3899-3914]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[3952-3961]:ReturnStatement[3952-3961]"
    }, {
      "left" : "case END_OF_STREAM:",
      "right" : "case END_OF_STREAM:",
      "info" : "SwitchCase[3970-3989]:SwitchCase[3970-3989]"
    }, {
      "left" : "throw new IOException(\"EOF whilst processing escape sequence\");",
      "right" : "throw new IOException(\"EOF whilst processing escape sequence\");",
      "info" : "ThrowStatement[4002-4065]:ThrowStatement[4002-4065]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4074-4082]:SwitchCase[4074-4082]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[4144-4153]:ReturnStatement[4232-4241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4301-4560]:Block[4437-4696]"
    }, {
      "left" : "int length = buffer.length();",
      "right" : "int length = buffer.length();",
      "info" : "VariableDeclarationStatement[4311-4340]:VariableDeclarationStatement[4447-4476]"
    }, {
      "left" : "while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1)))",
      "right" : "while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1)))",
      "info" : "WhileStatement[4349-4465]:WhileStatement[4485-4601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4421-4465]:Block[4557-4601]"
    }, {
      "left" : "length = length - 1;",
      "right" : "length = length - 1;",
      "info" : "ExpressionStatement[4435-4455]:ExpressionStatement[4571-4591]"
    }, {
      "left" : "if (length != buffer.length())",
      "right" : "if (length != buffer.length())",
      "info" : "IfStatement[4474-4554]:IfStatement[4610-4690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4505-4554]:Block[4641-4690]"
    }, {
      "left" : "buffer.setLength(length);",
      "right" : "buffer.setLength(length);",
      "info" : "ExpressionStatement[4519-4544]:ExpressionStatement[4655-4680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4812-5037]:Block[4948-5173]"
    }, {
      "left" : "if (c == CR && in.lookAhead() == LF)",
      "right" : "if (c == CR && in.lookAhead() == LF)",
      "info" : "IfStatement[4858-4996]:IfStatement[4994-5132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4895-4996]:Block[5031-5132]"
    }, {
      "left" : "c = in.read();",
      "right" : "c = in.read();",
      "info" : "ExpressionStatement[4972-4986]:ExpressionStatement[5108-5122]"
    }, {
      "left" : "return c == LF || c == CR;",
      "right" : "return c == LF || c == CR;",
      "info" : "ReturnStatement[5005-5031]:ReturnStatement[5141-5167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5228-5314]:Block[5364-5450]"
    }, {
      "left" : "return c != format.getDelimiter() && Character.isWhitespace((char) c);",
      "right" : "return c != format.getDelimiter() && Character.isWhitespace((char) c);",
      "info" : "ReturnStatement[5238-5308]:ReturnStatement[5374-5444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5593-5653]:Block[5729-5789]"
    }, {
      "left" : "return c == LF || c == CR || c == UNDEFINED;",
      "right" : "return c == LF || c == CR || c == UNDEFINED;",
      "info" : "ReturnStatement[5603-5647]:ReturnStatement[5739-5783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5773-5815]:Block[5909-5951]"
    }, {
      "left" : "return c == END_OF_STREAM;",
      "right" : "return c == END_OF_STREAM;",
      "info" : "ReturnStatement[5783-5809]:ReturnStatement[5919-5945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5854-5892]:Block[5990-6028]"
    }, {
      "left" : "return c == delimiter;",
      "right" : "return c == delimiter;",
      "info" : "ReturnStatement[5864-5886]:ReturnStatement[6000-6022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5928-5963]:Block[6064-6099]"
    }, {
      "left" : "return c == escape;",
      "right" : "return c == escape;",
      "info" : "ReturnStatement[5938-5957]:ReturnStatement[6074-6093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6002-6040]:Block[6138-6176]"
    }, {
      "left" : "return c == quoteChar;",
      "right" : "return c == quoteChar;",
      "info" : "ReturnStatement[6012-6034]:ReturnStatement[6148-6170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6082-6124]:Block[6218-6260]"
    }, {
      "left" : "return c == commmentStart;",
      "right" : "return c == commmentStart;",
      "info" : "ReturnStatement[6092-6118]:ReturnStatement[6228-6254]"
    } ]
  },
  "interFileMappings" : { }
}