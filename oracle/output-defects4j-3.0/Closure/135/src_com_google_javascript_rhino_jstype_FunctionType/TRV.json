{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2596-2644]:FieldDeclaration[2596-2644]"
    }, {
      "left" : "enum : Kind",
      "right" : "enum : Kind",
      "info" : "EnumDeclaration[2648-2716]:EnumDeclaration[2648-2716]"
    }, {
      "left" : "private ArrowType call;",
      "right" : "private ArrowType call;",
      "info" : "FieldDeclaration[2720-2787]:FieldDeclaration[2720-2787]"
    }, {
      "left" : "private FunctionPrototypeType prototype;",
      "right" : "private FunctionPrototypeType prototype;",
      "info" : "FieldDeclaration[2791-3164]:FieldDeclaration[2791-3164]"
    }, {
      "left" : "private final Kind kind;",
      "right" : "private final Kind kind;",
      "info" : "FieldDeclaration[3168-3295]:FieldDeclaration[3168-3295]"
    }, {
      "left" : "private ObjectType typeOfThis;",
      "right" : "private ObjectType typeOfThis;",
      "info" : "FieldDeclaration[3299-3402]:FieldDeclaration[3299-3402]"
    }, {
      "left" : "private Node source;",
      "right" : "private Node source;",
      "info" : "FieldDeclaration[3406-3513]:FieldDeclaration[3406-3513]"
    }, {
      "left" : "private List<ObjectType> implementedInterfaces = ImmutableList.of();",
      "right" : "private List<ObjectType> implementedInterfaces = ImmutableList.of();",
      "info" : "FieldDeclaration[3517-3724]:FieldDeclaration[3517-3724]"
    }, {
      "left" : "private List<FunctionType> subTypes;",
      "right" : "private List<FunctionType> subTypes;",
      "info" : "FieldDeclaration[3728-3895]:FieldDeclaration[3728-3895]"
    }, {
      "left" : "private String templateTypeName;",
      "right" : "private String templateTypeName;",
      "info" : "FieldDeclaration[3899-3993]:FieldDeclaration[3899-3993]"
    }, {
      "left" : "public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType)",
      "right" : "public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType)",
      "info" : "MethodDeclaration[3997-4814]:MethodDeclaration[3997-4814]"
    }, {
      "left" : "public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis)",
      "right" : "public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis)",
      "info" : "MethodDeclaration[4818-5798]:MethodDeclaration[4818-5798]"
    }, {
      "left" : "public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName)",
      "right" : "public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName)",
      "info" : "MethodDeclaration[5802-6894]:MethodDeclaration[5802-6894]"
    }, {
      "left" : "FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType)",
      "right" : "FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType)",
      "info" : "MethodDeclaration[6898-8133]:MethodDeclaration[6898-8133]"
    }, {
      "left" : "FunctionType(JSTypeRegistry registry, String name, Node source)",
      "right" : "FunctionType(JSTypeRegistry registry, String name, Node source)",
      "info" : "MethodDeclaration[8137-8658]:MethodDeclaration[8137-8658]"
    }, {
      "left" : "public boolean isInstanceType()",
      "right" : "public boolean isInstanceType()",
      "info" : "MethodDeclaration[8662-8841]:MethodDeclaration[8662-8841]"
    }, {
      "left" : "public boolean isConstructor()",
      "right" : "public boolean isConstructor()",
      "info" : "MethodDeclaration[8845-8930]:MethodDeclaration[8845-8930]"
    }, {
      "left" : "public boolean isInterface()",
      "right" : "public boolean isInterface()",
      "info" : "MethodDeclaration[8934-9015]:MethodDeclaration[8934-9015]"
    }, {
      "left" : "public boolean isOrdinaryFunction()",
      "right" : "public boolean isOrdinaryFunction()",
      "info" : "MethodDeclaration[9019-9106]:MethodDeclaration[9019-9106]"
    }, {
      "left" : "public boolean isFunctionType()",
      "right" : "public boolean isFunctionType()",
      "info" : "MethodDeclaration[9110-9176]:MethodDeclaration[9110-9176]"
    }, {
      "left" : "public boolean canBeCalled()",
      "right" : "public boolean canBeCalled()",
      "info" : "MethodDeclaration[9180-9243]:MethodDeclaration[9180-9243]"
    }, {
      "left" : "public Iterable<Node> getParameters()",
      "right" : "public Iterable<Node> getParameters()",
      "info" : "MethodDeclaration[9247-9428]:MethodDeclaration[9247-9428]"
    }, {
      "left" : "public Node getParametersNode()",
      "right" : "public Node getParametersNode()",
      "info" : "MethodDeclaration[9432-9583]:MethodDeclaration[9432-9583]"
    }, {
      "left" : "public int getMinArguments()",
      "right" : "public int getMinArguments()",
      "info" : "MethodDeclaration[9587-10068]:MethodDeclaration[9587-10068]"
    }, {
      "left" : "public int getMaxArguments()",
      "right" : "public int getMaxArguments()",
      "info" : "MethodDeclaration[10072-10508]:MethodDeclaration[10072-10508]"
    }, {
      "left" : "public JSType getReturnType()",
      "right" : "public JSType getReturnType()",
      "info" : "MethodDeclaration[10512-10597]:MethodDeclaration[10512-10597]"
    }, {
      "left" : "public FunctionPrototypeType getPrototype()",
      "right" : "public FunctionPrototypeType getPrototype()",
      "info" : "MethodDeclaration[10601-10980]:MethodDeclaration[10601-10980]"
    }, {
      "left" : "public void setPrototypeBasedOn(ObjectType baseType)",
      "right" : "public void setPrototypeBasedOn(ObjectType baseType)",
      "info" : "MethodDeclaration[10984-11393]:MethodDeclaration[10984-11393]"
    }, {
      "left" : "public boolean setPrototype(FunctionPrototypeType prototype)",
      "right" : "public boolean setPrototype(FunctionPrototypeType prototype)",
      "info" : "MethodDeclaration[11397-12056]:MethodDeclaration[11397-12056]"
    }, {
      "left" : "public Iterable<ObjectType> getAllImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getAllImplementedInterfaces()",
      "info" : "MethodDeclaration[12060-12531]:MethodDeclaration[12060-12531]"
    }, {
      "left" : "private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set)",
      "right" : "private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set)",
      "info" : "MethodDeclaration[12535-12976]:MethodDeclaration[12535-12976]"
    }, {
      "left" : "public Iterable<ObjectType> getImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getImplementedInterfaces()",
      "info" : "MethodDeclaration[12980-13396]:MethodDeclaration[12980-13396]"
    }, {
      "left" : "public void setImplementedInterfaces(List<ObjectType> implementedInterfaces)",
      "right" : "public void setImplementedInterfaces(List<ObjectType> implementedInterfaces)",
      "info" : "MethodDeclaration[13400-13737]:MethodDeclaration[13400-13737]"
    }, {
      "left" : "public boolean hasProperty(String name)",
      "right" : "public boolean hasProperty(String name)",
      "info" : "MethodDeclaration[13741-13862]:MethodDeclaration[13741-13862]"
    }, {
      "left" : "public JSType getPropertyType(String name)",
      "right" : "public JSType getPropertyType(String name)",
      "info" : "MethodDeclaration[13867-15857]:MethodDeclaration[13997-15987]"
    }, {
      "left" : "public boolean isPropertyTypeInferred(String property)",
      "right" : "public boolean isPropertyTypeInferred(String property)",
      "info" : "MethodDeclaration[16337-16500]:MethodDeclaration[16541-16704]"
    }, {
      "left" : "public JSType getLeastSupertype(JSType that)",
      "right" : "public JSType getLeastSupertype(JSType that)",
      "info" : "MethodDeclaration[16504-17815]:MethodDeclaration[16708-18019]"
    }, {
      "left" : "public JSType getGreatestSubtype(JSType that)",
      "right" : "public JSType getGreatestSubtype(JSType that)",
      "info" : "MethodDeclaration[17819-18355]:MethodDeclaration[18023-18559]"
    }, {
      "left" : "public FunctionType getSuperClassConstructor()",
      "right" : "public FunctionType getSuperClassConstructor()",
      "info" : "MethodDeclaration[18359-18803]:MethodDeclaration[18563-19007]"
    }, {
      "left" : "public boolean hasUnknownSupertype()",
      "right" : "public boolean hasUnknownSupertype()",
      "info" : "MethodDeclaration[18807-19734]:MethodDeclaration[19011-19938]"
    }, {
      "left" : "public JSType getTopMostDefiningType(String propertyName)",
      "right" : "public JSType getTopMostDefiningType(String propertyName)",
      "info" : "MethodDeclaration[19738-20380]:MethodDeclaration[19942-20584]"
    }, {
      "left" : "public boolean equals(Object otherType)",
      "right" : "public boolean equals(Object otherType)",
      "info" : "MethodDeclaration[20384-21228]:MethodDeclaration[20588-21432]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[21232-21347]:MethodDeclaration[21436-21551]"
    }, {
      "left" : "public boolean hasEqualCallType(FunctionType otherType)",
      "right" : "public boolean hasEqualCallType(FunctionType otherType)",
      "info" : "MethodDeclaration[21351-21457]:MethodDeclaration[21555-21661]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[21461-22925]:MethodDeclaration[21665-23129]"
    }, {
      "left" : "private void appendVarArgsString(StringBuilder builder, JSType paramType)",
      "right" : "private void appendVarArgsString(StringBuilder builder, JSType paramType)",
      "info" : "MethodDeclaration[22929-23351]:MethodDeclaration[23133-23555]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[23355-24993]:MethodDeclaration[23559-25197]"
    }, {
      "left" : "public <T> T visit(Visitor<T> visitor)",
      "right" : "public <T> T visit(Visitor<T> visitor)",
      "info" : "MethodDeclaration[24997-25096]:MethodDeclaration[25201-25300]"
    }, {
      "left" : "public ObjectType getInstanceType()",
      "right" : "public ObjectType getInstanceType()",
      "info" : "MethodDeclaration[25100-25392]:MethodDeclaration[25304-25596]"
    }, {
      "left" : "void setInstanceType(ObjectType instanceType)",
      "right" : "void setInstanceType(ObjectType instanceType)",
      "info" : "MethodDeclaration[25396-25562]:MethodDeclaration[25600-25766]"
    }, {
      "left" : "public boolean hasInstanceType()",
      "right" : "public boolean hasInstanceType()",
      "info" : "MethodDeclaration[25566-25723]:MethodDeclaration[25770-25927]"
    }, {
      "left" : "public ObjectType getTypeOfThis()",
      "right" : "public ObjectType getTypeOfThis()",
      "info" : "MethodDeclaration[25727-25949]:MethodDeclaration[25931-26153]"
    }, {
      "left" : "public Node getSource()",
      "right" : "public Node getSource()",
      "info" : "MethodDeclaration[25953-26040]:MethodDeclaration[26157-26244]"
    }, {
      "left" : "public void setSource(Node source)",
      "right" : "public void setSource(Node source)",
      "info" : "MethodDeclaration[26044-26149]:MethodDeclaration[26248-26353]"
    }, {
      "left" : "private void addSubType(FunctionType subType)",
      "right" : "private void addSubType(FunctionType subType)",
      "info" : "MethodDeclaration[26153-26364]:MethodDeclaration[26357-26568]"
    }, {
      "left" : "public List<FunctionType> getSubTypes()",
      "right" : "public List<FunctionType> getSubTypes()",
      "info" : "MethodDeclaration[26368-26635]:MethodDeclaration[26572-26839]"
    }, {
      "left" : "public boolean hasCachedValues()",
      "right" : "public boolean hasCachedValues()",
      "info" : "MethodDeclaration[26639-26746]:MethodDeclaration[26843-26950]"
    }, {
      "left" : "public String getTemplateTypeName()",
      "right" : "public String getTemplateTypeName()",
      "info" : "MethodDeclaration[26750-26866]:MethodDeclaration[26954-27070]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[26870-27781]:MethodDeclaration[27074-27985]"
    } ],
    "mappings" : [
 {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[4582-4600]:MarkerAnnotation[4582-4600]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4603-4609]:Modifier[4603-4609]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[4610-4622]:SimpleName[4610-4622]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[4623-4646]:SingleVariableDeclaration[4623-4646]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[4648-4659]:SingleVariableDeclaration[4648-4659]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[4661-4672]:SingleVariableDeclaration[4661-4672]"
    }, {
      "left" : "Node parameters",
      "right" : "Node parameters",
      "info" : "SingleVariableDeclaration[4680-4695]:SingleVariableDeclaration[4680-4695]"
    }, {
      "left" : "JSType returnType",
      "right" : "JSType returnType",
      "info" : "SingleVariableDeclaration[4697-4714]:SingleVariableDeclaration[4697-4714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4716-4814]:Block[4716-4814]"
    }, {
      "left" : "this(registry, name, source, parameters, returnType, null, null, false,\n         false);",
      "right" : "this(registry, name, source, parameters, returnType, null, null, false,\n         false);",
      "info" : "ConstructorInvocation[4722-4810]:ConstructorInvocation[4722-4810]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5559-5565]:Modifier[5559-5565]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[5566-5578]:SimpleName[5566-5578]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[5579-5602]:SingleVariableDeclaration[5579-5602]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[5604-5615]:SingleVariableDeclaration[5604-5615]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[5617-5628]:SingleVariableDeclaration[5617-5628]"
    }, {
      "left" : "Node parameters",
      "right" : "Node parameters",
      "info" : "SingleVariableDeclaration[5636-5651]:SingleVariableDeclaration[5636-5651]"
    }, {
      "left" : "JSType returnType",
      "right" : "JSType returnType",
      "info" : "SingleVariableDeclaration[5653-5670]:SingleVariableDeclaration[5653-5670]"
    }, {
      "left" : "ObjectType typeOfThis",
      "right" : "ObjectType typeOfThis",
      "info" : "SingleVariableDeclaration[5672-5693]:SingleVariableDeclaration[5672-5693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-5798]:Block[5695-5798]"
    }, {
      "left" : "this(registry, name, source, parameters, returnType, typeOfThis,\n        null, false, false);",
      "right" : "this(registry, name, source, parameters, returnType, typeOfThis,\n        null, false, false);",
      "info" : "ConstructorInvocation[5701-5794]:ConstructorInvocation[5701-5794]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6612-6618]:Modifier[6612-6618]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[6619-6631]:SimpleName[6619-6631]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[6632-6655]:SingleVariableDeclaration[6632-6655]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[6657-6668]:SingleVariableDeclaration[6657-6668]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[6670-6681]:SingleVariableDeclaration[6670-6681]"
    }, {
      "left" : "Node parameters",
      "right" : "Node parameters",
      "info" : "SingleVariableDeclaration[6689-6704]:SingleVariableDeclaration[6689-6704]"
    }, {
      "left" : "JSType returnType",
      "right" : "JSType returnType",
      "info" : "SingleVariableDeclaration[6706-6723]:SingleVariableDeclaration[6706-6723]"
    }, {
      "left" : "ObjectType typeOfThis",
      "right" : "ObjectType typeOfThis",
      "info" : "SingleVariableDeclaration[6725-6746]:SingleVariableDeclaration[6725-6746]"
    }, {
      "left" : "String templateTypeName",
      "right" : "String templateTypeName",
      "info" : "SingleVariableDeclaration[6754-6777]:SingleVariableDeclaration[6754-6777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6779-6894]:Block[6779-6894]"
    }, {
      "left" : "this(registry, name, source, parameters, returnType, typeOfThis,\n        templateTypeName, false, false);",
      "right" : "this(registry, name, source, parameters, returnType, typeOfThis,\n        templateTypeName, false, false);",
      "info" : "ConstructorInvocation[6785-6890]:ConstructorInvocation[6785-6890]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[6971-6983]:SimpleName[6971-6983]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[6984-7007]:SingleVariableDeclaration[6984-7007]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7009-7020]:SingleVariableDeclaration[7009-7020]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[7022-7033]:SingleVariableDeclaration[7022-7033]"
    }, {
      "left" : "Node parameters",
      "right" : "Node parameters",
      "info" : "SingleVariableDeclaration[7041-7056]:SingleVariableDeclaration[7041-7056]"
    }, {
      "left" : "JSType returnType",
      "right" : "JSType returnType",
      "info" : "SingleVariableDeclaration[7058-7075]:SingleVariableDeclaration[7058-7075]"
    }, {
      "left" : "ObjectType typeOfThis",
      "right" : "ObjectType typeOfThis",
      "info" : "SingleVariableDeclaration[7077-7098]:SingleVariableDeclaration[7077-7098]"
    }, {
      "left" : "String templateTypeName",
      "right" : "String templateTypeName",
      "info" : "SingleVariableDeclaration[7106-7129]:SingleVariableDeclaration[7106-7129]"
    }, {
      "left" : "boolean isConstructor",
      "right" : "boolean isConstructor",
      "info" : "SingleVariableDeclaration[7132-7153]:SingleVariableDeclaration[7132-7153]"
    }, {
      "left" : "boolean nativeType",
      "right" : "boolean nativeType",
      "info" : "SingleVariableDeclaration[7155-7173]:SingleVariableDeclaration[7155-7173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7175-8133]:Block[7175-8133]"
    }, {
      "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
      "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
      "info" : "SuperConstructorInvocation[7181-7298]:SuperConstructorInvocation[7181-7298]"
    }, {
      "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "info" : "ExpressionStatement[7303-7393]:ExpressionStatement[7303-7393]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[7398-7419]:ExpressionStatement[7398-7419]"
    }, {
      "left" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
      "right" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
      "info" : "ExpressionStatement[7424-7485]:ExpressionStatement[7424-7485]"
    }, {
      "left" : "if (isConstructor)",
      "right" : "if (isConstructor)",
      "info" : "IfStatement[7490-7815]:IfStatement[7490-7815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7509-7667]:Block[7509-7667]"
    }, {
      "left" : "this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
      "right" : "this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
      "info" : "ExpressionStatement[7517-7661]:ExpressionStatement[7517-7661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7673-7815]:Block[7673-7815]"
    }, {
      "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[7681-7809]:ExpressionStatement[7681-7809]"
    }, {
      "left" : "this.call = new ArrowType(registry, parameters,\n        (returnType == null ? getReturnType() : returnType));",
      "right" : "this.call = new ArrowType(registry, parameters,\n        (returnType == null ? getReturnType() : returnType));",
      "info" : "ExpressionStatement[7974-8083]:ExpressionStatement[7974-8083]"
    }, {
      "left" : "this.templateTypeName = templateTypeName;",
      "right" : "this.templateTypeName = templateTypeName;",
      "info" : "ExpressionStatement[8088-8129]:ExpressionStatement[8088-8129]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[8203-8215]:SimpleName[8203-8215]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[8216-8239]:SingleVariableDeclaration[8216-8239]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[8241-8252]:SingleVariableDeclaration[8241-8252]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[8254-8265]:SingleVariableDeclaration[8254-8265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8267-8658]:Block[8267-8658]"
    }, {
      "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
      "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
      "info" : "SuperConstructorInvocation[8273-8370]:SuperConstructorInvocation[8273-8370]"
    }, {
      "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "info" : "ExpressionStatement[8375-8465]:ExpressionStatement[8375-8465]"
    }, {
      "left" : "Preconditions.checkArgument(name != null);",
      "right" : "Preconditions.checkArgument(name != null);",
      "info" : "ExpressionStatement[8470-8512]:ExpressionStatement[8470-8512]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[8517-8538]:ExpressionStatement[8517-8538]"
    }, {
      "left" : "this.call = null;",
      "right" : "this.call = null;",
      "info" : "ExpressionStatement[8543-8560]:ExpressionStatement[8543-8560]"
    }, {
      "left" : "this.kind = Kind.INTERFACE;",
      "right" : "this.kind = Kind.INTERFACE;",
      "info" : "ExpressionStatement[8565-8592]:ExpressionStatement[8565-8592]"
    }, {
      "left" : "this.typeOfThis = new InstanceObjectType(registry, this);",
      "right" : "this.typeOfThis = new InstanceObjectType(registry, this);",
      "info" : "ExpressionStatement[8597-8654]:ExpressionStatement[8597-8654]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8662-8671]:MarkerAnnotation[8662-8671]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8674-8680]:Modifier[8674-8680]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8681-8688]:PrimitiveType[8681-8688]"
    }, {
      "left" : "isInstanceType",
      "right" : "isInstanceType",
      "info" : "SimpleName[8689-8703]:SimpleName[8689-8703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8706-8841]:Block[8706-8841]"
    }, {
      "left" : "return equals(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "return equals(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ReturnStatement[8777-8837]:ReturnStatement[8777-8837]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8845-8854]:MarkerAnnotation[8845-8854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8857-8863]:Modifier[8857-8863]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8864-8871]:PrimitiveType[8864-8871]"
    }, {
      "left" : "isConstructor",
      "right" : "isConstructor",
      "info" : "SimpleName[8872-8885]:SimpleName[8872-8885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8888-8930]:Block[8888-8930]"
    }, {
      "left" : "return kind == Kind.CONSTRUCTOR;",
      "right" : "return kind == Kind.CONSTRUCTOR;",
      "info" : "ReturnStatement[8894-8926]:ReturnStatement[8894-8926]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8934-8943]:MarkerAnnotation[8934-8943]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8946-8952]:Modifier[8946-8952]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8953-8960]:PrimitiveType[8953-8960]"
    }, {
      "left" : "isInterface",
      "right" : "isInterface",
      "info" : "SimpleName[8961-8972]:SimpleName[8961-8972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8975-9015]:Block[8975-9015]"
    }, {
      "left" : "return kind == Kind.INTERFACE;",
      "right" : "return kind == Kind.INTERFACE;",
      "info" : "ReturnStatement[8981-9011]:ReturnStatement[8981-9011]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9019-9028]:MarkerAnnotation[9019-9028]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9031-9037]:Modifier[9031-9037]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9038-9045]:PrimitiveType[9038-9045]"
    }, {
      "left" : "isOrdinaryFunction",
      "right" : "isOrdinaryFunction",
      "info" : "SimpleName[9046-9064]:SimpleName[9046-9064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9067-9106]:Block[9067-9106]"
    }, {
      "left" : "return kind == Kind.ORDINARY;",
      "right" : "return kind == Kind.ORDINARY;",
      "info" : "ReturnStatement[9073-9102]:ReturnStatement[9073-9102]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9110-9119]:MarkerAnnotation[9110-9119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9122-9128]:Modifier[9122-9128]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9129-9136]:PrimitiveType[9129-9136]"
    }, {
      "left" : "isFunctionType",
      "right" : "isFunctionType",
      "info" : "SimpleName[9137-9151]:SimpleName[9137-9151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9154-9176]:Block[9154-9176]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9160-9172]:ReturnStatement[9160-9172]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9180-9189]:MarkerAnnotation[9180-9189]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9192-9198]:Modifier[9192-9198]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9199-9206]:PrimitiveType[9199-9206]"
    }, {
      "left" : "canBeCalled",
      "right" : "canBeCalled",
      "info" : "SimpleName[9207-9218]:SimpleName[9207-9218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9221-9243]:Block[9221-9243]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9227-9239]:ReturnStatement[9227-9239]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9247-9253]:Modifier[9247-9253]"
    }, {
      "left" : "Iterable<Node>",
      "right" : "Iterable<Node>",
      "info" : "ParameterizedType[9254-9268]:ParameterizedType[9254-9268]"
    }, {
      "left" : "getParameters",
      "right" : "getParameters",
      "info" : "SimpleName[9269-9282]:SimpleName[9269-9282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9285-9428]:Block[9285-9428]"
    }, {
      "left" : "Node n = getParametersNode();",
      "right" : "Node n = getParametersNode();",
      "info" : "VariableDeclarationStatement[9291-9320]:VariableDeclarationStatement[9291-9320]"
    }, {
      "left" : "if (n != null)",
      "right" : "if (n != null)",
      "info" : "IfStatement[9325-9424]:IfStatement[9325-9424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9340-9374]:Block[9340-9374]"
    }, {
      "left" : "return n.children();",
      "right" : "return n.children();",
      "info" : "ReturnStatement[9348-9368]:ReturnStatement[9348-9368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9380-9424]:Block[9380-9424]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[9388-9418]:ReturnStatement[9388-9418]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9496-9502]:Modifier[9496-9502]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9503-9507]:SimpleType[9503-9507]"
    }, {
      "left" : "getParametersNode",
      "right" : "getParametersNode",
      "info" : "SimpleName[9508-9525]:SimpleName[9508-9525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9528-9583]:Block[9528-9583]"
    }, {
      "left" : "return call == null ? null : call.parameters;",
      "right" : "return call == null ? null : call.parameters;",
      "info" : "ReturnStatement[9534-9579]:ReturnStatement[9534-9579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9662-9668]:Modifier[9662-9668]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9669-9672]:PrimitiveType[9669-9672]"
    }, {
      "left" : "getMinArguments",
      "right" : "getMinArguments",
      "info" : "SimpleName[9673-9688]:SimpleName[9673-9688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9691-10068]:Block[9691-10068]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[9892-9902]:VariableDeclarationStatement[9892-9902]"
    }, {
      "left" : "int min = 0;",
      "right" : "int min = 0;",
      "info" : "VariableDeclarationStatement[9907-9919]:VariableDeclarationStatement[9907-9919]"
    }, {
      "left" : "for (Node n : getParameters())",
      "right" : "for (Node n : getParameters())",
      "info" : "EnhancedForStatement[9924-10048]:EnhancedForStatement[9924-10048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9955-10048]:Block[9955-10048]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[9963-9967]:ExpressionStatement[9963-9967]"
    }, {
      "left" : "if (!n.isOptionalArg() && !n.isVarArgs())",
      "right" : "if (!n.isOptionalArg() && !n.isVarArgs())",
      "info" : "IfStatement[9974-10042]:IfStatement[9974-10042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10016-10042]:Block[10016-10042]"
    }, {
      "left" : "min = i;",
      "right" : "min = i;",
      "info" : "ExpressionStatement[10026-10034]:ExpressionStatement[10026-10034]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[10053-10064]:ReturnStatement[10053-10064]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10222-10228]:Modifier[10222-10228]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10229-10232]:PrimitiveType[10229-10232]"
    }, {
      "left" : "getMaxArguments",
      "right" : "getMaxArguments",
      "info" : "SimpleName[10233-10248]:SimpleName[10233-10248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10251-10508]:Block[10251-10508]"
    }, {
      "left" : "Node params = getParametersNode();",
      "right" : "Node params = getParametersNode();",
      "info" : "VariableDeclarationStatement[10257-10291]:VariableDeclarationStatement[10257-10291]"
    }, {
      "left" : "if (params != null)",
      "right" : "if (params != null)",
      "info" : "IfStatement[10296-10473]:IfStatement[10296-10473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10316-10473]:Block[10316-10473]"
    }, {
      "left" : "Node lastParam = params.getLastChild();",
      "right" : "Node lastParam = params.getLastChild();",
      "info" : "VariableDeclarationStatement[10324-10363]:VariableDeclarationStatement[10324-10363]"
    }, {
      "left" : "if (lastParam == null || !lastParam.isVarArgs())",
      "right" : "if (lastParam == null || !lastParam.isVarArgs())",
      "info" : "IfStatement[10370-10467]:IfStatement[10370-10467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10419-10467]:Block[10419-10467]"
    }, {
      "left" : "return params.getChildCount();",
      "right" : "return params.getChildCount();",
      "info" : "ReturnStatement[10429-10459]:ReturnStatement[10429-10459]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[10479-10504]:ReturnStatement[10479-10504]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10512-10518]:Modifier[10512-10518]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[10519-10525]:SimpleType[10519-10525]"
    }, {
      "left" : "getReturnType",
      "right" : "getReturnType",
      "info" : "SimpleName[10526-10539]:SimpleName[10526-10539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10542-10597]:Block[10542-10597]"
    }, {
      "left" : "return call == null ? null : call.returnType;",
      "right" : "return call == null ? null : call.returnType;",
      "info" : "ReturnStatement[10548-10593]:ReturnStatement[10548-10593]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10755-10761]:Modifier[10755-10761]"
    }, {
      "left" : "FunctionPrototypeType",
      "right" : "FunctionPrototypeType",
      "info" : "SimpleType[10762-10783]:SimpleType[10762-10783]"
    }, {
      "left" : "getPrototype",
      "right" : "getPrototype",
      "info" : "SimpleName[10784-10796]:SimpleName[10784-10796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10799-10980]:Block[10799-10980]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[10855-10954]:IfStatement[10855-10954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10878-10954]:Block[10878-10954]"
    }, {
      "left" : "setPrototype(new FunctionPrototypeType(registry, this, null));",
      "right" : "setPrototype(new FunctionPrototypeType(registry, this, null));",
      "info" : "ExpressionStatement[10886-10948]:ExpressionStatement[10886-10948]"
    }, {
      "left" : "return prototype;",
      "right" : "return prototype;",
      "info" : "ReturnStatement[10959-10976]:ReturnStatement[10959-10976]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11118-11124]:Modifier[11118-11124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11125-11129]:PrimitiveType[11125-11129]"
    }, {
      "left" : "setPrototypeBasedOn",
      "right" : "setPrototypeBasedOn",
      "info" : "SimpleName[11130-11149]:SimpleName[11130-11149]"
    }, {
      "left" : "ObjectType baseType",
      "right" : "ObjectType baseType",
      "info" : "SingleVariableDeclaration[11150-11169]:SingleVariableDeclaration[11150-11169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11171-11393]:Block[11171-11393]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[11177-11389]:IfStatement[11177-11389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11200-11328]:Block[11200-11328]"
    }, {
      "left" : "setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));",
      "right" : "setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));",
      "info" : "ExpressionStatement[11208-11322]:ExpressionStatement[11208-11322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11334-11389]:Block[11334-11389]"
    }, {
      "left" : "prototype.setImplicitPrototype(baseType);",
      "right" : "prototype.setImplicitPrototype(baseType);",
      "info" : "ExpressionStatement[11342-11383]:ExpressionStatement[11342-11383]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11544-11550]:Modifier[11544-11550]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11551-11558]:PrimitiveType[11551-11558]"
    }, {
      "left" : "setPrototype",
      "right" : "setPrototype",
      "info" : "SimpleName[11559-11571]:SimpleName[11559-11571]"
    }, {
      "left" : "FunctionPrototypeType prototype",
      "right" : "FunctionPrototypeType prototype",
      "info" : "SingleVariableDeclaration[11572-11603]:SingleVariableDeclaration[11572-11603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11605-12056]:Block[11605-12056]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[11611-11661]:IfStatement[11611-11661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11634-11661]:Block[11634-11661]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11642-11655]:ReturnStatement[11642-11655]"
    }, {
      "left" : "if (isConstructor() && prototype == getInstanceType())",
      "right" : "if (isConstructor() && prototype == getInstanceType())",
      "info" : "IfStatement[11732-11814]:IfStatement[11732-11814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11787-11814]:Block[11787-11814]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11795-11808]:ReturnStatement[11795-11808]"
    }, {
      "left" : "this.prototype = prototype;",
      "right" : "this.prototype = prototype;",
      "info" : "ExpressionStatement[11820-11847]:ExpressionStatement[11820-11847]"
    }, {
      "left" : "if (isConstructor() || isInterface())",
      "right" : "if (isConstructor() || isInterface())",
      "info" : "IfStatement[11853-12035]:IfStatement[11853-12035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11891-12035]:Block[11891-12035]"
    }, {
      "left" : "FunctionType superClass = getSuperClassConstructor();",
      "right" : "FunctionType superClass = getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[11899-11952]:VariableDeclarationStatement[11899-11952]"
    }, {
      "left" : "if (superClass != null)",
      "right" : "if (superClass != null)",
      "info" : "IfStatement[11959-12029]:IfStatement[11959-12029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11983-12029]:Block[11983-12029]"
    }, {
      "left" : "superClass.addSubType(this);",
      "right" : "superClass.addSubType(this);",
      "info" : "ExpressionStatement[11993-12021]:ExpressionStatement[11993-12021]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12040-12052]:ReturnStatement[12040-12052]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12283-12289]:Modifier[12283-12289]"
    }, {
      "left" : "Iterable<ObjectType>",
      "right" : "Iterable<ObjectType>",
      "info" : "ParameterizedType[12290-12310]:ParameterizedType[12290-12310]"
    }, {
      "left" : "getAllImplementedInterfaces",
      "right" : "getAllImplementedInterfaces",
      "info" : "SimpleName[12311-12338]:SimpleName[12311-12338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12341-12531]:Block[12341-12531]"
    }, {
      "left" : "Set<ObjectType> interfaces = Sets.newHashSet();",
      "right" : "Set<ObjectType> interfaces = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[12347-12394]:VariableDeclarationStatement[12347-12394]"
    }, {
      "left" : "for (ObjectType type : getImplementedInterfaces())",
      "right" : "for (ObjectType type : getImplementedInterfaces())",
      "info" : "EnhancedForStatement[12400-12504]:EnhancedForStatement[12400-12504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12451-12504]:Block[12451-12504]"
    }, {
      "left" : "addRelatedInterfaces(type, interfaces);",
      "right" : "addRelatedInterfaces(type, interfaces);",
      "info" : "ExpressionStatement[12459-12498]:ExpressionStatement[12459-12498]"
    }, {
      "left" : "return interfaces;",
      "right" : "return interfaces;",
      "info" : "ReturnStatement[12509-12527]:ReturnStatement[12509-12527]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12535-12542]:Modifier[12535-12542]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12543-12547]:PrimitiveType[12543-12547]"
    }, {
      "left" : "addRelatedInterfaces",
      "right" : "addRelatedInterfaces",
      "info" : "SimpleName[12548-12568]:SimpleName[12548-12568]"
    }, {
      "left" : "ObjectType instance",
      "right" : "ObjectType instance",
      "info" : "SingleVariableDeclaration[12569-12588]:SingleVariableDeclaration[12569-12588]"
    }, {
      "left" : "Set<ObjectType> set",
      "right" : "Set<ObjectType> set",
      "info" : "SingleVariableDeclaration[12590-12609]:SingleVariableDeclaration[12590-12609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12611-12976]:Block[12611-12976]"
    }, {
      "left" : "FunctionType constructor = instance.getConstructor();",
      "right" : "FunctionType constructor = instance.getConstructor();",
      "info" : "VariableDeclarationStatement[12617-12670]:VariableDeclarationStatement[12617-12670]"
    }, {
      "left" : "if (constructor != null)",
      "right" : "if (constructor != null)",
      "info" : "IfStatement[12675-12972]:IfStatement[12675-12972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12700-12972]:Block[12700-12972]"
    }, {
      "left" : "if (!constructor.isInterface())",
      "right" : "if (!constructor.isInterface())",
      "info" : "IfStatement[12708-12765]:IfStatement[12708-12765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12740-12765]:Block[12740-12765]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12750-12757]:ReturnStatement[12750-12757]"
    }, {
      "left" : "set.add(instance);",
      "right" : "set.add(instance);",
      "info" : "ExpressionStatement[12773-12791]:ExpressionStatement[12773-12791]"
    }, {
      "left" : "if (constructor.getSuperClassConstructor() != null)",
      "right" : "if (constructor.getSuperClassConstructor() != null)",
      "info" : "IfStatement[12799-12966]:IfStatement[12799-12966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12851-12966]:Block[12851-12966]"
    }, {
      "left" : "addRelatedInterfaces(\n            constructor.getSuperClassConstructor().getInstanceType(), set);",
      "right" : "addRelatedInterfaces(\n            constructor.getSuperClassConstructor().getInstanceType(), set);",
      "info" : "ExpressionStatement[12861-12958]:ExpressionStatement[12861-12958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13059-13065]:Modifier[13059-13065]"
    }, {
      "left" : "Iterable<ObjectType>",
      "right" : "Iterable<ObjectType>",
      "info" : "ParameterizedType[13066-13086]:ParameterizedType[13066-13086]"
    }, {
      "left" : "getImplementedInterfaces",
      "right" : "getImplementedInterfaces",
      "info" : "SimpleName[13087-13111]:SimpleName[13087-13111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13114-13396]:Block[13114-13396]"
    }, {
      "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
      "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
      "info" : "VariableDeclarationStatement[13120-13205]:VariableDeclarationStatement[13120-13205]"
    }, {
      "left" : "if (superCtor == null)",
      "right" : "if (superCtor == null)",
      "info" : "IfStatement[13210-13392]:IfStatement[13210-13392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13233-13276]:Block[13233-13276]"
    }, {
      "left" : "return implementedInterfaces;",
      "right" : "return implementedInterfaces;",
      "info" : "ReturnStatement[13241-13270]:ReturnStatement[13241-13270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13282-13392]:Block[13282-13392]"
    }, {
      "left" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
      "right" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
      "info" : "ReturnStatement[13290-13386]:ReturnStatement[13290-13386]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13400-13406]:Modifier[13400-13406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13407-13411]:PrimitiveType[13407-13411]"
    }, {
      "left" : "setImplementedInterfaces",
      "right" : "setImplementedInterfaces",
      "info" : "SimpleName[13412-13436]:SimpleName[13412-13436]"
    }, {
      "left" : "List<ObjectType> implementedInterfaces",
      "right" : "List<ObjectType> implementedInterfaces",
      "info" : "SingleVariableDeclaration[13437-13475]:SingleVariableDeclaration[13437-13475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13477-13737]:Block[13477-13737]"
    }, {
      "left" : "for (ObjectType type : implementedInterfaces)",
      "right" : "for (ObjectType type : implementedInterfaces)",
      "info" : "EnhancedForStatement[13540-13655]:EnhancedForStatement[13540-13655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13586-13655]:Block[13586-13655]"
    }, {
      "left" : "registry.registerTypeImplementingInterface(this, type);",
      "right" : "registry.registerTypeImplementingInterface(this, type);",
      "info" : "ExpressionStatement[13594-13649]:ExpressionStatement[13594-13649]"
    }, {
      "left" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
      "right" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
      "info" : "ExpressionStatement[13660-13733]:ExpressionStatement[13660-13733]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13741-13750]:MarkerAnnotation[13741-13750]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13753-13759]:Modifier[13753-13759]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13760-13767]:PrimitiveType[13760-13767]"
    }, {
      "left" : "hasProperty",
      "right" : "hasProperty",
      "info" : "SimpleName[13768-13779]:SimpleName[13768-13779]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13780-13791]:SingleVariableDeclaration[13780-13791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13793-13862]:Block[13793-13862]"
    }, {
      "left" : "return super.hasProperty(name) || \"prototype\".equals(name);",
      "right" : "return super.hasProperty(name) || \"prototype\".equals(name);",
      "info" : "ReturnStatement[13799-13858]:ReturnStatement[13799-13858]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13867-13876]:MarkerAnnotation[13997-14006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13879-13885]:Modifier[14009-14015]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[13886-13892]:SimpleType[14016-14022]"
    }, {
      "left" : "getPropertyType",
      "right" : "getPropertyType",
      "info" : "SimpleName[13893-13908]:SimpleName[14023-14038]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13909-13920]:SingleVariableDeclaration[14039-14050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13922-15857]:Block[14052-15987]"
    }, {
      "left" : "if (\"prototype\".equals(name))",
      "right" : "if (\"prototype\".equals(name))",
      "info" : "IfStatement[13928-15853]:IfStatement[14058-15983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13958-13994]:Block[14088-14124]"
    }, {
      "left" : "return getPrototype();",
      "right" : "return getPrototype();",
      "info" : "ReturnStatement[13966-13988]:ReturnStatement[14096-14118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14000-15853]:Block[14130-15983]"
    }, {
      "left" : "if (!hasOwnProperty(name))",
      "right" : "if (!hasOwnProperty(name))",
      "info" : "IfStatement[14008-15804]:IfStatement[14138-15934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14035-15804]:Block[14165-15934]"
    }, {
      "left" : "if (\"call\".equals(name))",
      "right" : "if (\"call\".equals(name))",
      "info" : "IfStatement[14045-15796]:IfStatement[14175-15926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14070-14993]:Block[14200-15123]"
    }, {
      "left" : "Node params = getParametersNode();",
      "right" : "Node params = getParametersNode();",
      "info" : "VariableDeclarationStatement[14130-14164]:VariableDeclarationStatement[14260-14294]"
    }, {
      "left" : "if (params == null)",
      "right" : "if (params == null)",
      "info" : "IfStatement[14175-14983]:IfStatement[14305-15113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14195-14480]:Block[14325-14610]"
    }, {
      "left" : "defineDeclaredProperty(name,\n                new FunctionType(registry, null, null,\n                    null, getReturnType()),\n                false);",
      "right" : "defineDeclaredProperty(name,\n                new FunctionType(registry, null, null,\n                    null, getReturnType()),\n                false);",
      "info" : "ExpressionStatement[14317-14468]:ExpressionStatement[14447-14598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14486-14983]:Block[14616-15113]"
    }, {
      "left" : "params = params.cloneTree();",
      "right" : "params = params.cloneTree();",
      "info" : "ExpressionStatement[14500-14528]:ExpressionStatement[14630-14658]"
    }, {
      "left" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
      "right" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
      "info" : "VariableDeclarationStatement[14541-14600]:VariableDeclarationStatement[14671-14730]"
    }, {
      "left" : "thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));",
      "right" : "thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));",
      "info" : "ExpressionStatement[14613-14707]:ExpressionStatement[14743-14837]"
    }, {
      "left" : "params.addChildToFront(thisTypeNode);",
      "right" : "params.addChildToFront(thisTypeNode);",
      "info" : "ExpressionStatement[14720-14757]:ExpressionStatement[14850-14887]"
    }, {
      "left" : "thisTypeNode.setOptionalArg(true);",
      "right" : "thisTypeNode.setOptionalArg(true);",
      "info" : "ExpressionStatement[14770-14804]:ExpressionStatement[14900-14934]"
    }, {
      "left" : "defineDeclaredProperty(name,\n                new FunctionType(registry, null, null,\n                    params, getReturnType()),\n                false);",
      "right" : "defineDeclaredProperty(name,\n                new FunctionType(registry, null, null,\n                    params, getReturnType()),\n                false);",
      "info" : "ExpressionStatement[14818-14971]:ExpressionStatement[14948-15101]"
    }, {
      "left" : "if (\"apply\".equals(name))",
      "right" : "if (\"apply\".equals(name))",
      "info" : "IfStatement[14999-15796]:IfStatement[15129-15926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15025-15796]:Block[15155-15926]"
    }, {
      "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
      "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
      "info" : "VariableDeclarationStatement[15086-15152]:VariableDeclarationStatement[15216-15282]"
    }, {
      "left" : "builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
      "right" : "builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
      "info" : "ExpressionStatement[15419-15618]:ExpressionStatement[15549-15748]"
    }, {
      "left" : "defineDeclaredProperty(name,\n              new FunctionType(registry, null, null,\n                  builder.build(), getReturnType()),\n              false);",
      "right" : "defineDeclaredProperty(name,\n              new FunctionType(registry, null, null,\n                  builder.build(), getReturnType()),\n              false);",
      "info" : "ExpressionStatement[15630-15786]:ExpressionStatement[15760-15916]"
    }, {
      "left" : "return super.getPropertyType(name);",
      "right" : "return super.getPropertyType(name);",
      "info" : "ReturnStatement[15812-15847]:ReturnStatement[15942-15977]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16337-16346]:MarkerAnnotation[16541-16550]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16349-16355]:Modifier[16553-16559]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16356-16363]:PrimitiveType[16560-16567]"
    }, {
      "left" : "isPropertyTypeInferred",
      "right" : "isPropertyTypeInferred",
      "info" : "SimpleName[16364-16386]:SimpleName[16568-16590]"
    }, {
      "left" : "String property",
      "right" : "String property",
      "info" : "SingleVariableDeclaration[16387-16402]:SingleVariableDeclaration[16591-16606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16404-16500]:Block[16608-16704]"
    }, {
      "left" : "return \"prototype\".equals(property) ||\n        super.isPropertyTypeInferred(property);",
      "right" : "return \"prototype\".equals(property) ||\n        super.isPropertyTypeInferred(property);",
      "info" : "ReturnStatement[16410-16496]:ReturnStatement[16614-16700]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16504-16513]:MarkerAnnotation[16708-16717]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16516-16522]:Modifier[16720-16726]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[16523-16529]:SimpleType[16727-16733]"
    }, {
      "left" : "getLeastSupertype",
      "right" : "getLeastSupertype",
      "info" : "SimpleName[16530-16547]:SimpleName[16734-16751]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[16548-16559]:SingleVariableDeclaration[16752-16763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16561-17815]:Block[16765-18019]"
    }, {
      "left" : "if (isFunctionType() && that.isFunctionType())",
      "right" : "if (isFunctionType() && that.isFunctionType())",
      "info" : "IfStatement[17338-17768]:IfStatement[17542-17972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17385-17768]:Block[17589-17972]"
    }, {
      "left" : "if (equals(that))",
      "right" : "if (equals(that))",
      "info" : "IfStatement[17393-17441]:IfStatement[17597-17645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17411-17441]:Block[17615-17645]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17421-17433]:ReturnStatement[17625-17637]"
    }, {
      "left" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "right" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "info" : "VariableDeclarationStatement[17449-17546]:VariableDeclarationStatement[17653-17750]"
    }, {
      "left" : "if (functionInstance.equals(that))",
      "right" : "if (functionInstance.equals(that))",
      "info" : "IfStatement[17553-17689]:IfStatement[17757-17893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17588-17618]:Block[17792-17822]"
    }, {
      "left" : "return that;",
      "right" : "return that;",
      "info" : "ReturnStatement[17598-17610]:ReturnStatement[17802-17814]"
    }, {
      "left" : "if (functionInstance.equals(this))",
      "right" : "if (functionInstance.equals(this))",
      "info" : "IfStatement[17624-17689]:IfStatement[17828-17893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17659-17689]:Block[17863-17893]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17669-17681]:ReturnStatement[17873-17885]"
    }, {
      "left" : "return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
      "right" : "return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
      "info" : "ReturnStatement[17697-17762]:ReturnStatement[17901-17966]"
    }, {
      "left" : "return super.getLeastSupertype(that);",
      "right" : "return super.getLeastSupertype(that);",
      "info" : "ReturnStatement[17774-17811]:ReturnStatement[17978-18015]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17819-17828]:MarkerAnnotation[18023-18032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17831-17837]:Modifier[18035-18041]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[17838-17844]:SimpleType[18042-18048]"
    }, {
      "left" : "getGreatestSubtype",
      "right" : "getGreatestSubtype",
      "info" : "SimpleName[17845-17863]:SimpleName[18049-18067]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[17864-17875]:SingleVariableDeclaration[18068-18079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17877-18355]:Block[18081-18559]"
    }, {
      "left" : "if (isFunctionType() && that.isFunctionType())",
      "right" : "if (isFunctionType() && that.isFunctionType())",
      "info" : "IfStatement[17883-18307]:IfStatement[18087-18511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17930-18307]:Block[18134-18511]"
    }, {
      "left" : "if (equals(that))",
      "right" : "if (equals(that))",
      "info" : "IfStatement[17938-17986]:IfStatement[18142-18190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17956-17986]:Block[18160-18190]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17966-17978]:ReturnStatement[18170-18182]"
    }, {
      "left" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "right" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "info" : "VariableDeclarationStatement[17994-18091]:VariableDeclarationStatement[18198-18295]"
    }, {
      "left" : "if (functionInstance.equals(that))",
      "right" : "if (functionInstance.equals(that))",
      "info" : "IfStatement[18098-18234]:IfStatement[18302-18438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18133-18163]:Block[18337-18367]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18143-18155]:ReturnStatement[18347-18359]"
    }, {
      "left" : "if (functionInstance.equals(this))",
      "right" : "if (functionInstance.equals(this))",
      "info" : "IfStatement[18169-18234]:IfStatement[18373-18438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18204-18234]:Block[18408-18438]"
    }, {
      "left" : "return that;",
      "right" : "return that;",
      "info" : "ReturnStatement[18214-18226]:ReturnStatement[18418-18430]"
    }, {
      "left" : "return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[18242-18301]:ReturnStatement[18446-18505]"
    }, {
      "left" : "return super.getGreatestSubtype(that);",
      "right" : "return super.getGreatestSubtype(that);",
      "info" : "ReturnStatement[18313-18351]:ReturnStatement[18517-18555]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18486-18492]:Modifier[18690-18696]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[18493-18505]:SimpleType[18697-18709]"
    }, {
      "left" : "getSuperClassConstructor",
      "right" : "getSuperClassConstructor",
      "info" : "SimpleName[18506-18530]:SimpleName[18710-18734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18533-18803]:Block[18737-19007]"
    }, {
      "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[18539-18601]:ExpressionStatement[18743-18805]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[18606-18680]:VariableDeclarationStatement[18810-18884]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[18685-18747]:IfStatement[18889-18951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18721-18747]:Block[18925-18951]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18729-18741]:ReturnStatement[18933-18945]"
    }, {
      "left" : "return maybeSuperInstanceType.getConstructor();",
      "right" : "return maybeSuperInstanceType.getConstructor();",
      "info" : "ReturnStatement[18752-18799]:ReturnStatement[18956-19003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18941-18947]:Modifier[19145-19151]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18948-18955]:PrimitiveType[19152-19159]"
    }, {
      "left" : "hasUnknownSupertype",
      "right" : "hasUnknownSupertype",
      "info" : "SimpleName[18956-18975]:SimpleName[19160-19179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18978-19734]:Block[19182-19938]"
    }, {
      "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[18984-19046]:ExpressionStatement[19188-19250]"
    }, {
      "left" : "Preconditions.checkArgument(!this.isUnknownType());",
      "right" : "Preconditions.checkArgument(!this.isUnknownType());",
      "info" : "ExpressionStatement[19051-19102]:ExpressionStatement[19255-19306]"
    }, {
      "left" : "FunctionType ctor = this;",
      "right" : "FunctionType ctor = this;",
      "info" : "VariableDeclarationStatement[19243-19268]:VariableDeclarationStatement[19447-19472]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[19273-19730]:WhileStatement[19477-19934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19286-19730]:Block[19490-19934]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[19294-19383]:VariableDeclarationStatement[19498-19587]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[19390-19457]:IfStatement[19594-19661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19426-19457]:Block[19630-19661]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19436-19449]:ReturnStatement[19640-19653]"
    }, {
      "left" : "if (maybeSuperInstanceType.isUnknownType())",
      "right" : "if (maybeSuperInstanceType.isUnknownType())",
      "info" : "IfStatement[19464-19538]:IfStatement[19668-19742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19508-19538]:Block[19712-19742]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19518-19530]:ReturnStatement[19722-19734]"
    }, {
      "left" : "ctor = maybeSuperInstanceType.getConstructor();",
      "right" : "ctor = maybeSuperInstanceType.getConstructor();",
      "info" : "ExpressionStatement[19545-19592]:ExpressionStatement[19749-19796]"
    }, {
      "left" : "if (ctor == null)",
      "right" : "if (ctor == null)",
      "info" : "IfStatement[19599-19648]:IfStatement[19803-19852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19617-19648]:Block[19821-19852]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19627-19640]:ReturnStatement[19831-19844]"
    }, {
      "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[19655-19724]:ExpressionStatement[19859-19928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19912-19918]:Modifier[20116-20122]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[19919-19925]:SimpleType[20123-20129]"
    }, {
      "left" : "getTopMostDefiningType",
      "right" : "getTopMostDefiningType",
      "info" : "SimpleName[19926-19948]:SimpleName[20130-20152]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[19949-19968]:SingleVariableDeclaration[20153-20172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19970-20380]:Block[20174-20584]"
    }, {
      "left" : "Preconditions.checkState(isConstructor() || isInterface());",
      "right" : "Preconditions.checkState(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[19976-20035]:ExpressionStatement[20180-20239]"
    }, {
      "left" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
      "right" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
      "info" : "ExpressionStatement[20040-20110]:ExpressionStatement[20244-20314]"
    }, {
      "left" : "FunctionType ctor = this;",
      "right" : "FunctionType ctor = this;",
      "info" : "VariableDeclarationStatement[20115-20140]:VariableDeclarationStatement[20319-20344]"
    }, {
      "left" : "JSType topInstanceType;",
      "right" : "JSType topInstanceType;",
      "info" : "VariableDeclarationStatement[20145-20168]:VariableDeclarationStatement[20349-20372]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[20173-20348]:DoStatement[20377-20552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20176-20277]:Block[20380-20481]"
    }, {
      "left" : "topInstanceType = ctor.getInstanceType();",
      "right" : "topInstanceType = ctor.getInstanceType();",
      "info" : "ExpressionStatement[20184-20225]:ExpressionStatement[20388-20429]"
    }, {
      "left" : "ctor = ctor.getSuperClassConstructor();",
      "right" : "ctor = ctor.getSuperClassConstructor();",
      "info" : "ExpressionStatement[20232-20271]:ExpressionStatement[20436-20475]"
    }, {
      "left" : "return topInstanceType;",
      "right" : "return topInstanceType;",
      "info" : "ReturnStatement[20353-20376]:ReturnStatement[20557-20580]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20543-20552]:MarkerAnnotation[20747-20756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20555-20561]:Modifier[20759-20765]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20562-20569]:PrimitiveType[20766-20773]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[20570-20576]:SimpleName[20774-20780]"
    }, {
      "left" : "Object otherType",
      "right" : "Object otherType",
      "info" : "SingleVariableDeclaration[20577-20593]:SingleVariableDeclaration[20781-20797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20595-21228]:Block[20799-21432]"
    }, {
      "left" : "if (!(otherType instanceof FunctionType))",
      "right" : "if (!(otherType instanceof FunctionType))",
      "info" : "IfStatement[20601-20670]:IfStatement[20805-20874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20643-20670]:Block[20847-20874]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20651-20664]:ReturnStatement[20855-20868]"
    }, {
      "left" : "FunctionType that = (FunctionType) otherType;",
      "right" : "FunctionType that = (FunctionType) otherType;",
      "info" : "VariableDeclarationStatement[20675-20720]:VariableDeclarationStatement[20879-20924]"
    }, {
      "left" : "if (!that.isFunctionType())",
      "right" : "if (!that.isFunctionType())",
      "info" : "IfStatement[20725-20780]:IfStatement[20929-20984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20753-20780]:Block[20957-20984]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20761-20774]:ReturnStatement[20965-20978]"
    }, {
      "left" : "if (this.isConstructor())",
      "right" : "if (this.isConstructor())",
      "info" : "IfStatement[20785-20909]:IfStatement[20989-21113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20811-20909]:Block[21015-21113]"
    }, {
      "left" : "if (that.isConstructor())",
      "right" : "if (that.isConstructor())",
      "info" : "IfStatement[20819-20883]:IfStatement[21023-21087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20845-20883]:Block[21049-21087]"
    }, {
      "left" : "return this == that;",
      "right" : "return this == that;",
      "info" : "ReturnStatement[20855-20875]:ReturnStatement[21059-21079]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20890-20903]:ReturnStatement[21094-21107]"
    }, {
      "left" : "if (this.isInterface())",
      "right" : "if (this.isInterface())",
      "info" : "IfStatement[20914-21077]:IfStatement[21118-21281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20938-21077]:Block[21142-21281]"
    }, {
      "left" : "if (that.isInterface())",
      "right" : "if (that.isInterface())",
      "info" : "IfStatement[20946-21051]:IfStatement[21150-21255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20970-21051]:Block[21174-21255]"
    }, {
      "left" : "return this.getReferenceName().equals(that.getReferenceName());",
      "right" : "return this.getReferenceName().equals(that.getReferenceName());",
      "info" : "ReturnStatement[20980-21043]:ReturnStatement[21184-21247]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21058-21071]:ReturnStatement[21262-21275]"
    }, {
      "left" : "if (that.isInterface())",
      "right" : "if (that.isInterface())",
      "info" : "IfStatement[21082-21133]:IfStatement[21286-21337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21106-21133]:Block[21310-21337]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21114-21127]:ReturnStatement[21318-21331]"
    }, {
      "left" : "return this.typeOfThis.equals(that.typeOfThis) &&\n        this.call.equals(that.call);",
      "right" : "return this.typeOfThis.equals(that.typeOfThis) &&\n        this.call.equals(that.call);",
      "info" : "ReturnStatement[21138-21224]:ReturnStatement[21342-21428]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21232-21241]:MarkerAnnotation[21436-21445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21244-21250]:Modifier[21448-21454]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21251-21254]:PrimitiveType[21455-21458]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[21255-21263]:SimpleName[21459-21467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21266-21347]:Block[21470-21551]"
    }, {
      "left" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
      "right" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
      "info" : "ReturnStatement[21272-21343]:ReturnStatement[21476-21547]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21351-21357]:Modifier[21555-21561]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21358-21365]:PrimitiveType[21562-21569]"
    }, {
      "left" : "hasEqualCallType",
      "right" : "hasEqualCallType",
      "info" : "SimpleName[21366-21382]:SimpleName[21570-21586]"
    }, {
      "left" : "FunctionType otherType",
      "right" : "FunctionType otherType",
      "info" : "SingleVariableDeclaration[21383-21405]:SingleVariableDeclaration[21587-21609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21407-21457]:Block[21611-21661]"
    }, {
      "left" : "return this.call.equals(otherType.call);",
      "right" : "return this.call.equals(otherType.call);",
      "info" : "ReturnStatement[21413-21453]:ReturnStatement[21617-21657]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21733-21742]:MarkerAnnotation[21937-21946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21745-21751]:Modifier[21949-21955]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[21752-21758]:SimpleType[21956-21962]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[21759-21767]:SimpleName[21963-21971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21770-22925]:Block[21974-23129]"
    }, {
      "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "info" : "IfStatement[21776-21881]:IfStatement[21980-22085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21849-21881]:Block[22053-22085]"
    }, {
      "left" : "return \"Function\";",
      "right" : "return \"Function\";",
      "info" : "ReturnStatement[21857-21875]:ReturnStatement[22061-22079]"
    }, {
      "left" : "StringBuilder b = new StringBuilder(32);",
      "right" : "StringBuilder b = new StringBuilder(32);",
      "info" : "VariableDeclarationStatement[21887-21927]:VariableDeclarationStatement[22091-22131]"
    }, {
      "left" : "b.append(\"function (\");",
      "right" : "b.append(\"function (\");",
      "info" : "ExpressionStatement[21932-21955]:ExpressionStatement[22136-22159]"
    }, {
      "left" : "int paramNum = (call == null || call.parameters == null) ?\n        0 : call.parameters.getChildCount();",
      "right" : "int paramNum = (call == null || call.parameters == null) ?\n        0 : call.parameters.getChildCount();",
      "info" : "VariableDeclarationStatement[21960-22063]:VariableDeclarationStatement[22164-22267]"
    }, {
      "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "info" : "VariableDeclarationStatement[22068-22125]:VariableDeclarationStatement[22272-22329]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[22130-22225]:IfStatement[22334-22429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22154-22225]:Block[22358-22429]"
    }, {
      "left" : "b.append(\"this:\");",
      "right" : "b.append(\"this:\");",
      "info" : "ExpressionStatement[22162-22180]:ExpressionStatement[22366-22384]"
    }, {
      "left" : "b.append(typeOfThis.toString());",
      "right" : "b.append(typeOfThis.toString());",
      "info" : "ExpressionStatement[22187-22219]:ExpressionStatement[22391-22423]"
    }, {
      "left" : "if (paramNum > 0)",
      "right" : "if (paramNum > 0)",
      "info" : "IfStatement[22230-22765]:IfStatement[22434-22969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22248-22765]:Block[22452-22969]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[22256-22313]:IfStatement[22460-22517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22280-22313]:Block[22484-22517]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[22290-22305]:ExpressionStatement[22494-22509]"
    }, {
      "left" : "Node p = call.parameters.getFirstChild();",
      "right" : "Node p = call.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[22320-22361]:VariableDeclarationStatement[22524-22565]"
    }, {
      "left" : "if (p.isVarArgs())",
      "right" : "if (p.isVarArgs())",
      "info" : "IfStatement[22368-22502]:IfStatement[22572-22706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22387-22443]:Block[22591-22647]"
    }, {
      "left" : "appendVarArgsString(b, p.getJSType());",
      "right" : "appendVarArgsString(b, p.getJSType());",
      "info" : "ExpressionStatement[22397-22435]:ExpressionStatement[22601-22639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22449-22502]:Block[22653-22706]"
    }, {
      "left" : "b.append(p.getJSType().toString());",
      "right" : "b.append(p.getJSType().toString());",
      "info" : "ExpressionStatement[22459-22494]:ExpressionStatement[22663-22698]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[22509-22525]:ExpressionStatement[22713-22729]"
    }, {
      "left" : "while (p != null)",
      "right" : "while (p != null)",
      "info" : "WhileStatement[22532-22759]:WhileStatement[22736-22963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22550-22759]:Block[22754-22963]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[22560-22575]:ExpressionStatement[22764-22779]"
    }, {
      "left" : "if (p.isVarArgs())",
      "right" : "if (p.isVarArgs())",
      "info" : "IfStatement[22584-22726]:IfStatement[22788-22930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22603-22663]:Block[22807-22867]"
    }, {
      "left" : "appendVarArgsString(b, p.getJSType());",
      "right" : "appendVarArgsString(b, p.getJSType());",
      "info" : "ExpressionStatement[22615-22653]:ExpressionStatement[22819-22857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22669-22726]:Block[22873-22930]"
    }, {
      "left" : "b.append(p.getJSType().toString());",
      "right" : "b.append(p.getJSType().toString());",
      "info" : "ExpressionStatement[22681-22716]:ExpressionStatement[22885-22920]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[22735-22751]:ExpressionStatement[22939-22955]"
    }, {
      "left" : "b.append(\")\");",
      "right" : "b.append(\")\");",
      "info" : "ExpressionStatement[22770-22784]:ExpressionStatement[22974-22988]"
    }, {
      "left" : "if (call != null && call.returnType != null)",
      "right" : "if (call != null && call.returnType != null)",
      "info" : "IfStatement[22789-22896]:IfStatement[22993-23100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22834-22896]:Block[23038-23100]"
    }, {
      "left" : "b.append(\": \");",
      "right" : "b.append(\": \");",
      "info" : "ExpressionStatement[22842-22857]:ExpressionStatement[23046-23061]"
    }, {
      "left" : "b.append(call.returnType);",
      "right" : "b.append(call.returnType);",
      "info" : "ExpressionStatement[22864-22890]:ExpressionStatement[23068-23094]"
    }, {
      "left" : "return b.toString();",
      "right" : "return b.toString();",
      "info" : "ReturnStatement[22901-22921]:ReturnStatement[23105-23125]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22990-22997]:Modifier[23194-23201]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22998-23002]:PrimitiveType[23202-23206]"
    }, {
      "left" : "appendVarArgsString",
      "right" : "appendVarArgsString",
      "info" : "SimpleName[23003-23022]:SimpleName[23207-23226]"
    }, {
      "left" : "StringBuilder builder",
      "right" : "StringBuilder builder",
      "info" : "SingleVariableDeclaration[23023-23044]:SingleVariableDeclaration[23227-23248]"
    }, {
      "left" : "JSType paramType",
      "right" : "JSType paramType",
      "info" : "SingleVariableDeclaration[23046-23062]:SingleVariableDeclaration[23250-23266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23064-23351]:Block[23268-23555]"
    }, {
      "left" : "if (paramType.isUnionType())",
      "right" : "if (paramType.isUnionType())",
      "info" : "IfStatement[23070-23278]:IfStatement[23274-23482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23099-23278]:Block[23303-23482]"
    }, {
      "left" : "paramType = ((UnionType) paramType).getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
      "right" : "paramType = ((UnionType) paramType).getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
      "info" : "ExpressionStatement[23158-23272]:ExpressionStatement[23362-23476]"
    }, {
      "left" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
      "right" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
      "info" : "ExpressionStatement[23283-23347]:ExpressionStatement[23487-23551]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23547-23556]:MarkerAnnotation[23751-23760]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23559-23565]:Modifier[23763-23769]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23566-23573]:PrimitiveType[23770-23777]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[23574-23583]:SimpleName[23778-23787]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[23584-23595]:SingleVariableDeclaration[23788-23799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23597-24993]:Block[23801-25197]"
    }, {
      "left" : "if (this.equals(that))",
      "right" : "if (this.equals(that))",
      "info" : "IfStatement[23603-23652]:IfStatement[23807-23856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23626-23652]:Block[23830-23856]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23634-23646]:ReturnStatement[23838-23850]"
    }, {
      "left" : "if (that.isFunctionType())",
      "right" : "if (that.isFunctionType())",
      "info" : "IfStatement[23657-24701]:IfStatement[23861-24905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23684-24701]:Block[23888-24905]"
    }, {
      "left" : "if (((FunctionType) that).isInterface())",
      "right" : "if (((FunctionType) that).isInterface())",
      "info" : "IfStatement[23692-23829]:IfStatement[23896-24033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23733-23829]:Block[23937-24033]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23809-23821]:ReturnStatement[24013-24025]"
    }, {
      "left" : "if (this.isInterface())",
      "right" : "if (this.isInterface())",
      "info" : "IfStatement[23836-23956]:IfStatement[24040-24160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23860-23956]:Block[24064-24160]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23935-23948]:ReturnStatement[24139-24152]"
    }, {
      "left" : "FunctionType other = (FunctionType) that;",
      "right" : "FunctionType other = (FunctionType) that;",
      "info" : "VariableDeclarationStatement[24425-24466]:VariableDeclarationStatement[24629-24670]"
    }, {
      "left" : "return (this.isConstructor() || other.isConstructor() ||\n              other.typeOfThis.isSubtype(this.typeOfThis) ||\n              this.typeOfThis.isSubtype(other.typeOfThis)) &&\n          this.call.isSubtype(other.call);",
      "right" : "return (this.isConstructor() || other.isConstructor() ||\n              other.typeOfThis.isSubtype(this.typeOfThis) ||\n              this.typeOfThis.isSubtype(other.typeOfThis)) &&\n          this.call.isSubtype(other.call);",
      "info" : "ReturnStatement[24473-24695]:ReturnStatement[24677-24899]"
    }, {
      "left" : "if (that instanceof UnionType)",
      "right" : "if (that instanceof UnionType)",
      "info" : "IfStatement[24706-24914]:IfStatement[24910-25118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24737-24914]:Block[24941-25118]"
    }, {
      "left" : "UnionType union = (UnionType) that;",
      "right" : "UnionType union = (UnionType) that;",
      "info" : "VariableDeclarationStatement[24745-24780]:VariableDeclarationStatement[24949-24984]"
    }, {
      "left" : "for (JSType element : union.alternates)",
      "right" : "for (JSType element : union.alternates)",
      "info" : "EnhancedForStatement[24787-24908]:EnhancedForStatement[24991-25112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24827-24908]:Block[25031-25112]"
    }, {
      "left" : "if (this.isSubtype(element))",
      "right" : "if (this.isSubtype(element))",
      "info" : "IfStatement[24837-24900]:IfStatement[25041-25104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24866-24900]:Block[25070-25104]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24878-24890]:ReturnStatement[25082-25094]"
    }, {
      "left" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
      "right" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
      "info" : "ReturnStatement[24919-24989]:ReturnStatement[25123-25193]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24997-25006]:MarkerAnnotation[25201-25210]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25009-25015]:Modifier[25213-25219]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[25017-25018]:TypeParameter[25221-25222]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[25020-25021]:SimpleType[25224-25225]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[25022-25027]:SimpleName[25226-25231]"
    }, {
      "left" : "Visitor<T> visitor",
      "right" : "Visitor<T> visitor",
      "info" : "SingleVariableDeclaration[25028-25046]:SingleVariableDeclaration[25232-25250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25048-25096]:Block[25252-25300]"
    }, {
      "left" : "return visitor.caseFunctionType(this);",
      "right" : "return visitor.caseFunctionType(this);",
      "info" : "ReturnStatement[25054-25092]:ReturnStatement[25258-25296]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25279-25285]:Modifier[25483-25489]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[25286-25296]:SimpleType[25490-25500]"
    }, {
      "left" : "getInstanceType",
      "right" : "getInstanceType",
      "info" : "SimpleName[25297-25312]:SimpleName[25501-25516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25315-25392]:Block[25519-25596]"
    }, {
      "left" : "Preconditions.checkState(hasInstanceType());",
      "right" : "Preconditions.checkState(hasInstanceType());",
      "info" : "ExpressionStatement[25321-25365]:ExpressionStatement[25525-25569]"
    }, {
      "left" : "return typeOfThis;",
      "right" : "return typeOfThis;",
      "info" : "ReturnStatement[25370-25388]:ReturnStatement[25574-25592]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25480-25484]:PrimitiveType[25684-25688]"
    }, {
      "left" : "setInstanceType",
      "right" : "setInstanceType",
      "info" : "SimpleName[25485-25500]:SimpleName[25689-25704]"
    }, {
      "left" : "ObjectType instanceType",
      "right" : "ObjectType instanceType",
      "info" : "SingleVariableDeclaration[25501-25524]:SingleVariableDeclaration[25705-25728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25526-25562]:Block[25730-25766]"
    }, {
      "left" : "typeOfThis = instanceType;",
      "right" : "typeOfThis = instanceType;",
      "info" : "ExpressionStatement[25532-25558]:ExpressionStatement[25736-25762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25640-25646]:Modifier[25844-25850]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25647-25654]:PrimitiveType[25851-25858]"
    }, {
      "left" : "hasInstanceType",
      "right" : "hasInstanceType",
      "info" : "SimpleName[25655-25670]:SimpleName[25859-25874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25673-25723]:Block[25877-25927]"
    }, {
      "left" : "return isConstructor() || isInterface();",
      "right" : "return isConstructor() || isInterface();",
      "info" : "ReturnStatement[25679-25719]:ReturnStatement[25883-25923]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25792-25798]:Modifier[25996-26002]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[25799-25809]:SimpleType[26003-26013]"
    }, {
      "left" : "getTypeOfThis",
      "right" : "getTypeOfThis",
      "info" : "SimpleName[25810-25823]:SimpleName[26014-26027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25826-25949]:Block[26030-26153]"
    }, {
      "left" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
      "right" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
      "info" : "ReturnStatement[25832-25945]:ReturnStatement[26036-26149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25992-25998]:Modifier[26196-26202]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25999-26003]:SimpleType[26203-26207]"
    }, {
      "left" : "getSource",
      "right" : "getSource",
      "info" : "SimpleName[26004-26013]:SimpleName[26208-26217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26016-26040]:Block[26220-26244]"
    }, {
      "left" : "return source;",
      "right" : "return source;",
      "info" : "ReturnStatement[26022-26036]:ReturnStatement[26226-26240]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26083-26089]:Modifier[26287-26293]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26090-26094]:PrimitiveType[26294-26298]"
    }, {
      "left" : "setSource",
      "right" : "setSource",
      "info" : "SimpleName[26095-26104]:SimpleName[26299-26308]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[26105-26116]:SingleVariableDeclaration[26309-26320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26118-26149]:Block[26322-26353]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[26124-26145]:ExpressionStatement[26328-26349]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26213-26220]:Modifier[26417-26424]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26221-26225]:PrimitiveType[26425-26429]"
    }, {
      "left" : "addSubType",
      "right" : "addSubType",
      "info" : "SimpleName[26226-26236]:SimpleName[26430-26440]"
    }, {
      "left" : "FunctionType subType",
      "right" : "FunctionType subType",
      "info" : "SingleVariableDeclaration[26237-26257]:SingleVariableDeclaration[26441-26461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26259-26364]:Block[26463-26568]"
    }, {
      "left" : "if (subTypes == null)",
      "right" : "if (subTypes == null)",
      "info" : "IfStatement[26265-26333]:IfStatement[26469-26537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26287-26333]:Block[26491-26537]"
    }, {
      "left" : "subTypes = Lists.newArrayList();",
      "right" : "subTypes = Lists.newArrayList();",
      "info" : "ExpressionStatement[26295-26327]:ExpressionStatement[26499-26531]"
    }, {
      "left" : "subTypes.add(subType);",
      "right" : "subTypes.add(subType);",
      "info" : "ExpressionStatement[26338-26360]:ExpressionStatement[26542-26564]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26569-26575]:Modifier[26773-26779]"
    }, {
      "left" : "List<FunctionType>",
      "right" : "List<FunctionType>",
      "info" : "ParameterizedType[26576-26594]:ParameterizedType[26780-26798]"
    }, {
      "left" : "getSubTypes",
      "right" : "getSubTypes",
      "info" : "SimpleName[26595-26606]:SimpleName[26799-26810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26609-26635]:Block[26813-26839]"
    }, {
      "left" : "return subTypes;",
      "right" : "return subTypes;",
      "info" : "ReturnStatement[26615-26631]:ReturnStatement[26819-26835]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26639-26648]:MarkerAnnotation[26843-26852]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26651-26657]:Modifier[26855-26861]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26658-26665]:PrimitiveType[26862-26869]"
    }, {
      "left" : "hasCachedValues",
      "right" : "hasCachedValues",
      "info" : "SimpleName[26666-26681]:SimpleName[26870-26885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26684-26746]:Block[26888-26950]"
    }, {
      "left" : "return prototype != null || super.hasCachedValues();",
      "right" : "return prototype != null || super.hasCachedValues();",
      "info" : "ReturnStatement[26690-26742]:ReturnStatement[26894-26946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26796-26802]:Modifier[27000-27006]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[26803-26809]:SimpleType[27007-27013]"
    }, {
      "left" : "getTemplateTypeName",
      "right" : "getTemplateTypeName",
      "info" : "SimpleName[26810-26829]:SimpleName[27014-27033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26832-26866]:Block[27036-27070]"
    }, {
      "left" : "return templateTypeName;",
      "right" : "return templateTypeName;",
      "info" : "ReturnStatement[26838-26862]:ReturnStatement[27042-27066]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26870-26879]:MarkerAnnotation[27074-27083]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[26882-26888]:SimpleType[27086-27092]"
    }, {
      "left" : "resolveInternal",
      "right" : "resolveInternal",
      "info" : "SimpleName[26889-26904]:SimpleName[27093-27108]"
    }, {
      "left" : "ErrorReporter t",
      "right" : "ErrorReporter t",
      "info" : "SingleVariableDeclaration[26905-26920]:SingleVariableDeclaration[27109-27124]"
    }, {
      "left" : "StaticScope<JSType> scope",
      "right" : "StaticScope<JSType> scope",
      "info" : "SingleVariableDeclaration[26922-26947]:SingleVariableDeclaration[27126-27151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26949-27781]:Block[27153-27985]"
    }, {
      "left" : "call = (ArrowType) safeResolve(call, t, scope);",
      "right" : "call = (ArrowType) safeResolve(call, t, scope);",
      "info" : "ExpressionStatement[26955-27002]:ExpressionStatement[27159-27206]"
    }, {
      "left" : "prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);",
      "right" : "prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);",
      "info" : "ExpressionStatement[27007-27076]:ExpressionStatement[27211-27280]"
    }, {
      "left" : "typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
      "right" : "typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
      "info" : "ExpressionStatement[27081-27141]:ExpressionStatement[27285-27345]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[27147-27171]:VariableDeclarationStatement[27351-27375]"
    }, {
      "left" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
      "right" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[27176-27263]:VariableDeclarationStatement[27380-27467]"
    }, {
      "left" : "for (ObjectType iface : implementedInterfaces)",
      "right" : "for (ObjectType iface : implementedInterfaces)",
      "info" : "EnhancedForStatement[27268-27481]:EnhancedForStatement[27472-27685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27315-27481]:Block[27519-27685]"
    }, {
      "left" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
      "right" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
      "info" : "VariableDeclarationStatement[27323-27387]:VariableDeclarationStatement[27527-27591]"
    }, {
      "left" : "resolvedInterfaces.add(resolvedIface);",
      "right" : "resolvedInterfaces.add(resolvedIface);",
      "info" : "ExpressionStatement[27394-27432]:ExpressionStatement[27598-27636]"
    }, {
      "left" : "changed |= (resolvedIface != iface);",
      "right" : "changed |= (resolvedIface != iface);",
      "info" : "ExpressionStatement[27439-27475]:ExpressionStatement[27643-27679]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[27486-27564]:IfStatement[27690-27768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27499-27564]:Block[27703-27768]"
    }, {
      "left" : "implementedInterfaces = resolvedInterfaces.build();",
      "right" : "implementedInterfaces = resolvedInterfaces.build();",
      "info" : "ExpressionStatement[27507-27558]:ExpressionStatement[27711-27762]"
    }, {
      "left" : "if (subTypes != null)",
      "right" : "if (subTypes != null)",
      "info" : "IfStatement[27570-27732]:IfStatement[27774-27936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27592-27732]:Block[27796-27936]"
    }, {
      "left" : "for (int i = 0; i < subTypes.size(); i++)",
      "right" : "for (int i = 0; i < subTypes.size(); i++)",
      "info" : "ForStatement[27600-27726]:ForStatement[27804-27930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27642-27726]:Block[27846-27930]"
    }, {
      "left" : "subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));",
      "right" : "subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));",
      "info" : "ExpressionStatement[27652-27718]:ExpressionStatement[27856-27922]"
    }, {
      "left" : "return super.resolveInternal(t, scope);",
      "right" : "return super.resolveInternal(t, scope);",
      "info" : "ReturnStatement[27738-27777]:ReturnStatement[27942-27981]"
    } ]
  },
  "interFileMappings" : { }
}