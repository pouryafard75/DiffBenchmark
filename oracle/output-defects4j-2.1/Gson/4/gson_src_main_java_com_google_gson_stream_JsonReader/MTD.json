{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsonReader",
      "right" : "JsonReader",
      "info" : "TypeDeclaration[852-51049]:TypeDeclaration[852-50935]"
    }, {
      "left" : "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();",
      "right" : "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();",
      "info" : "FieldDeclaration[7245-7374]:FieldDeclaration[7245-7374]"
    }, {
      "left" : "private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;",
      "right" : "private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;",
      "info" : "FieldDeclaration[7377-7448]:FieldDeclaration[7377-7448]"
    }, {
      "left" : "private static final int PEEKED_NONE = 0;",
      "right" : "private static final int PEEKED_NONE = 0;",
      "info" : "FieldDeclaration[7452-7493]:FieldDeclaration[7452-7493]"
    }, {
      "left" : "private static final int PEEKED_BEGIN_OBJECT = 1;",
      "right" : "private static final int PEEKED_BEGIN_OBJECT = 1;",
      "info" : "FieldDeclaration[7496-7545]:FieldDeclaration[7496-7545]"
    }, {
      "left" : "private static final int PEEKED_END_OBJECT = 2;",
      "right" : "private static final int PEEKED_END_OBJECT = 2;",
      "info" : "FieldDeclaration[7548-7595]:FieldDeclaration[7548-7595]"
    }, {
      "left" : "private static final int PEEKED_BEGIN_ARRAY = 3;",
      "right" : "private static final int PEEKED_BEGIN_ARRAY = 3;",
      "info" : "FieldDeclaration[7598-7646]:FieldDeclaration[7598-7646]"
    }, {
      "left" : "private static final int PEEKED_END_ARRAY = 4;",
      "right" : "private static final int PEEKED_END_ARRAY = 4;",
      "info" : "FieldDeclaration[7649-7695]:FieldDeclaration[7649-7695]"
    }, {
      "left" : "private static final int PEEKED_TRUE = 5;",
      "right" : "private static final int PEEKED_TRUE = 5;",
      "info" : "FieldDeclaration[7698-7739]:FieldDeclaration[7698-7739]"
    }, {
      "left" : "private static final int PEEKED_FALSE = 6;",
      "right" : "private static final int PEEKED_FALSE = 6;",
      "info" : "FieldDeclaration[7742-7784]:FieldDeclaration[7742-7784]"
    }, {
      "left" : "private static final int PEEKED_NULL = 7;",
      "right" : "private static final int PEEKED_NULL = 7;",
      "info" : "FieldDeclaration[7787-7828]:FieldDeclaration[7787-7828]"
    }, {
      "left" : "private static final int PEEKED_SINGLE_QUOTED = 8;",
      "right" : "private static final int PEEKED_SINGLE_QUOTED = 8;",
      "info" : "FieldDeclaration[7831-7881]:FieldDeclaration[7831-7881]"
    }, {
      "left" : "private static final int PEEKED_DOUBLE_QUOTED = 9;",
      "right" : "private static final int PEEKED_DOUBLE_QUOTED = 9;",
      "info" : "FieldDeclaration[7884-7934]:FieldDeclaration[7884-7934]"
    }, {
      "left" : "private static final int PEEKED_UNQUOTED = 10;",
      "right" : "private static final int PEEKED_UNQUOTED = 10;",
      "info" : "FieldDeclaration[7937-7983]:FieldDeclaration[7937-7983]"
    }, {
      "left" : "private static final int PEEKED_BUFFERED = 11;",
      "right" : "private static final int PEEKED_BUFFERED = 11;",
      "info" : "FieldDeclaration[7986-8108]:FieldDeclaration[7986-8108]"
    }, {
      "left" : "private static final int PEEKED_SINGLE_QUOTED_NAME = 12;",
      "right" : "private static final int PEEKED_SINGLE_QUOTED_NAME = 12;",
      "info" : "FieldDeclaration[8111-8167]:FieldDeclaration[8111-8167]"
    }, {
      "left" : "private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;",
      "right" : "private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;",
      "info" : "FieldDeclaration[8170-8226]:FieldDeclaration[8170-8226]"
    }, {
      "left" : "private static final int PEEKED_UNQUOTED_NAME = 14;",
      "right" : "private static final int PEEKED_UNQUOTED_NAME = 14;",
      "info" : "FieldDeclaration[8229-8280]:FieldDeclaration[8229-8280]"
    }, {
      "left" : "private static final int PEEKED_LONG = 15;",
      "right" : "private static final int PEEKED_LONG = 15;",
      "info" : "FieldDeclaration[8283-8400]:FieldDeclaration[8283-8400]"
    }, {
      "left" : "private static final int PEEKED_NUMBER = 16;",
      "right" : "private static final int PEEKED_NUMBER = 16;",
      "info" : "FieldDeclaration[8403-8447]:FieldDeclaration[8403-8447]"
    }, {
      "left" : "private static final int PEEKED_EOF = 17;",
      "right" : "private static final int PEEKED_EOF = 17;",
      "info" : "FieldDeclaration[8450-8491]:FieldDeclaration[8450-8491]"
    }, {
      "left" : "private static final int NUMBER_CHAR_NONE = 0;",
      "right" : "private static final int NUMBER_CHAR_NONE = 0;",
      "info" : "FieldDeclaration[8538-8584]:FieldDeclaration[8538-8584]"
    }, {
      "left" : "private static final int NUMBER_CHAR_SIGN = 1;",
      "right" : "private static final int NUMBER_CHAR_SIGN = 1;",
      "info" : "FieldDeclaration[8587-8633]:FieldDeclaration[8587-8633]"
    }, {
      "left" : "private static final int NUMBER_CHAR_DIGIT = 2;",
      "right" : "private static final int NUMBER_CHAR_DIGIT = 2;",
      "info" : "FieldDeclaration[8636-8683]:FieldDeclaration[8636-8683]"
    }, {
      "left" : "private static final int NUMBER_CHAR_DECIMAL = 3;",
      "right" : "private static final int NUMBER_CHAR_DECIMAL = 3;",
      "info" : "FieldDeclaration[8686-8735]:FieldDeclaration[8686-8735]"
    }, {
      "left" : "private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;",
      "right" : "private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;",
      "info" : "FieldDeclaration[8738-8794]:FieldDeclaration[8738-8794]"
    }, {
      "left" : "private static final int NUMBER_CHAR_EXP_E = 5;",
      "right" : "private static final int NUMBER_CHAR_EXP_E = 5;",
      "info" : "FieldDeclaration[8797-8844]:FieldDeclaration[8797-8844]"
    }, {
      "left" : "private static final int NUMBER_CHAR_EXP_SIGN = 6;",
      "right" : "private static final int NUMBER_CHAR_EXP_SIGN = 6;",
      "info" : "FieldDeclaration[8847-8897]:FieldDeclaration[8847-8897]"
    }, {
      "left" : "private static final int NUMBER_CHAR_EXP_DIGIT = 7;",
      "right" : "private static final int NUMBER_CHAR_EXP_DIGIT = 7;",
      "info" : "FieldDeclaration[8900-8951]:FieldDeclaration[8900-8951]"
    }, {
      "left" : "private final Reader in;",
      "right" : "private final Reader in;",
      "info" : "FieldDeclaration[8955-9004]:FieldDeclaration[8955-9004]"
    }, {
      "left" : "private boolean lenient = false;",
      "right" : "private boolean lenient = false;",
      "info" : "FieldDeclaration[9008-9088]:FieldDeclaration[9008-9088]"
    }, {
      "left" : "private final char[] buffer = new char[1024];",
      "right" : "private final char[] buffer = new char[1024];",
      "info" : "FieldDeclaration[9092-9443]:FieldDeclaration[9092-9443]"
    }, {
      "left" : "private int pos = 0;",
      "right" : "private int pos = 0;",
      "info" : "FieldDeclaration[9446-9466]:FieldDeclaration[9446-9466]"
    }, {
      "left" : "private int limit = 0;",
      "right" : "private int limit = 0;",
      "info" : "FieldDeclaration[9469-9491]:FieldDeclaration[9469-9491]"
    }, {
      "left" : "private int lineNumber = 0;",
      "right" : "private int lineNumber = 0;",
      "info" : "FieldDeclaration[9495-9522]:FieldDeclaration[9495-9522]"
    }, {
      "left" : "private int lineStart = 0;",
      "right" : "private int lineStart = 0;",
      "info" : "FieldDeclaration[9525-9551]:FieldDeclaration[9525-9551]"
    }, {
      "left" : "int peeked = PEEKED_NONE;",
      "right" : "int peeked = PEEKED_NONE;",
      "info" : "FieldDeclaration[9555-9580]:FieldDeclaration[9555-9580]"
    }, {
      "left" : "private long peekedLong;",
      "right" : "private long peekedLong;",
      "info" : "FieldDeclaration[9584-9755]:FieldDeclaration[9584-9755]"
    }, {
      "left" : "private int peekedNumberLength;",
      "right" : "private int peekedNumberLength;",
      "info" : "FieldDeclaration[9759-9913]:FieldDeclaration[9759-9913]"
    }, {
      "left" : "private String peekedString;",
      "right" : "private String peekedString;",
      "info" : "FieldDeclaration[9917-10129]:FieldDeclaration[9917-10129]"
    }, {
      "left" : "private int[] stack = new int[32];",
      "right" : "private int[] stack = new int[32];",
      "info" : "FieldDeclaration[10225-10259]:FieldDeclaration[10225-10259]"
    }, {
      "left" : "private int stackSize = 0;",
      "right" : "private int stackSize = 0;",
      "info" : "FieldDeclaration[10262-10288]:FieldDeclaration[10262-10288]"
    }, {
      "left" : "private String[] pathNames = new String[32];",
      "right" : "private String[] pathNames = new String[32];",
      "info" : "FieldDeclaration[10814-10858]:FieldDeclaration[10814-10858]"
    }, {
      "left" : "private int[] pathIndices = new int[32];",
      "right" : "private int[] pathIndices = new int[32];",
      "info" : "FieldDeclaration[10861-10901]:FieldDeclaration[10861-10901]"
    }, {
      "left" : "public JsonReader(Reader in)",
      "right" : "public JsonReader(Reader in)",
      "info" : "MethodDeclaration[10905-11127]:MethodDeclaration[10905-11127]"
    }, {
      "left" : "public final void setLenient(boolean lenient)",
      "right" : "public final void setLenient(boolean lenient)",
      "info" : "MethodDeclaration[11131-12766]:MethodDeclaration[11131-12766]"
    }, {
      "left" : "public final boolean isLenient()",
      "right" : "public final boolean isLenient()",
      "info" : "MethodDeclaration[12770-12904]:MethodDeclaration[12770-12904]"
    }, {
      "left" : "public void beginArray() throws IOException",
      "right" : "public void beginArray() throws IOException",
      "info" : "MethodDeclaration[12908-13485]:MethodDeclaration[12908-13485]"
    }, {
      "left" : "public void endArray() throws IOException",
      "right" : "public void endArray() throws IOException",
      "info" : "MethodDeclaration[13489-14042]:MethodDeclaration[13489-14042]"
    }, {
      "left" : "public void beginObject() throws IOException",
      "right" : "public void beginObject() throws IOException",
      "info" : "MethodDeclaration[14046-14590]:MethodDeclaration[14046-14590]"
    }, {
      "left" : "public void endObject() throws IOException",
      "right" : "public void endObject() throws IOException",
      "info" : "MethodDeclaration[14594-15250]:MethodDeclaration[14594-15250]"
    }, {
      "left" : "public boolean hasNext() throws IOException",
      "right" : "public boolean hasNext() throws IOException",
      "info" : "MethodDeclaration[15254-15519]:MethodDeclaration[15254-15519]"
    }, {
      "left" : "public JsonToken peek() throws IOException",
      "right" : "public JsonToken peek() throws IOException",
      "info" : "MethodDeclaration[15523-16586]:MethodDeclaration[15523-16586]"
    }, {
      "left" : "int doPeek() throws IOException",
      "right" : "int doPeek() throws IOException",
      "info" : "MethodDeclaration[16590-20685]:MethodDeclaration[16590-20571]"
    }, {
      "left" : "private int peekKeyword() throws IOException",
      "right" : "private int peekKeyword() throws IOException",
      "info" : "MethodDeclaration[20689-21978]:MethodDeclaration[20575-21864]"
    }, {
      "left" : "private int peekNumber() throws IOException",
      "right" : "private int peekNumber() throws IOException",
      "info" : "MethodDeclaration[21982-25097]:MethodDeclaration[21868-24983]"
    }, {
      "left" : "private boolean isLiteral(char c) throws IOException",
      "right" : "private boolean isLiteral(char c) throws IOException",
      "info" : "MethodDeclaration[25101-25501]:MethodDeclaration[24987-25387]"
    }, {
      "left" : "public String nextName() throws IOException",
      "right" : "public String nextName() throws IOException",
      "info" : "MethodDeclaration[25505-26399]:MethodDeclaration[25391-26285]"
    }, {
      "left" : "public String nextString() throws IOException",
      "right" : "public String nextString() throws IOException",
      "info" : "MethodDeclaration[26403-27671]:MethodDeclaration[26289-27557]"
    }, {
      "left" : "public boolean nextBoolean() throws IOException",
      "right" : "public boolean nextBoolean() throws IOException",
      "info" : "MethodDeclaration[27675-28455]:MethodDeclaration[27561-28341]"
    }, {
      "left" : "public void nextNull() throws IOException",
      "right" : "public void nextNull() throws IOException",
      "info" : "MethodDeclaration[28459-29077]:MethodDeclaration[28345-28963]"
    }, {
      "left" : "public double nextDouble() throws IOException",
      "right" : "public double nextDouble() throws IOException",
      "info" : "MethodDeclaration[29081-30874]:MethodDeclaration[28967-30760]"
    }, {
      "left" : "public long nextLong() throws IOException",
      "right" : "public long nextLong() throws IOException",
      "info" : "MethodDeclaration[30878-32935]:MethodDeclaration[30764-32821]"
    }, {
      "left" : "private String nextQuotedValue(char quote) throws IOException",
      "right" : "private String nextQuotedValue(char quote) throws IOException",
      "info" : "MethodDeclaration[32939-34419]:MethodDeclaration[32825-34305]"
    }, {
      "left" : "private String nextUnquotedValue() throws IOException",
      "right" : "private String nextUnquotedValue() throws IOException",
      "info" : "MethodDeclaration[34423-35849]:MethodDeclaration[34309-35735]"
    }, {
      "left" : "private void skipQuotedValue(char quote) throws IOException",
      "right" : "private void skipQuotedValue(char quote) throws IOException",
      "info" : "MethodDeclaration[35853-36598]:MethodDeclaration[35739-36484]"
    }, {
      "left" : "private void skipUnquotedValue() throws IOException",
      "right" : "private void skipUnquotedValue() throws IOException",
      "info" : "MethodDeclaration[36602-37193]:MethodDeclaration[36488-37079]"
    }, {
      "left" : "public int nextInt() throws IOException",
      "right" : "public int nextInt() throws IOException",
      "info" : "MethodDeclaration[37197-39562]:MethodDeclaration[37083-39448]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[39566-39788]:MethodDeclaration[39452-39674]"
    }, {
      "left" : "public void skipValue() throws IOException",
      "right" : "public void skipValue() throws IOException",
      "info" : "MethodDeclaration[39792-41058]:MethodDeclaration[39678-40944]"
    }, {
      "left" : "private void push(int newTop)",
      "right" : "private void push(int newTop)",
      "info" : "MethodDeclaration[41062-41616]:MethodDeclaration[40948-41502]"
    }, {
      "left" : "private boolean fillBuffer(int minimum) throws IOException",
      "right" : "private boolean fillBuffer(int minimum) throws IOException",
      "info" : "MethodDeclaration[41620-42490]:MethodDeclaration[41506-42376]"
    }, {
      "left" : "int getLineNumber()",
      "right" : "int getLineNumber()",
      "info" : "MethodDeclaration[42494-42546]:MethodDeclaration[42380-42432]"
    }, {
      "left" : "int getColumnNumber()",
      "right" : "int getColumnNumber()",
      "info" : "MethodDeclaration[42550-42609]:MethodDeclaration[42436-42495]"
    }, {
      "left" : "private int nextNonWhitespace(boolean throwOnEof) throws IOException",
      "right" : "private int nextNonWhitespace(boolean throwOnEof) throws IOException",
      "info" : "MethodDeclaration[42613-45315]:MethodDeclaration[42499-45201]"
    }, {
      "left" : "private void checkLenient() throws IOException",
      "right" : "private void checkLenient() throws IOException",
      "info" : "MethodDeclaration[45319-45482]:MethodDeclaration[45205-45368]"
    }, {
      "left" : "private void skipToEndOfLine() throws IOException",
      "right" : "private void skipToEndOfLine() throws IOException",
      "info" : "MethodDeclaration[45486-45939]:MethodDeclaration[45372-45825]"
    }, {
      "left" : "private boolean skipTo(String toFind) throws IOException",
      "right" : "private boolean skipTo(String toFind) throws IOException",
      "info" : "MethodDeclaration[45943-46480]:MethodDeclaration[45829-46366]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[46484-46636]:MethodDeclaration[46370-46522]"
    }, {
      "left" : "public String getPath()",
      "right" : "public String getPath()",
      "info" : "MethodDeclaration[46640-47532]:MethodDeclaration[46526-47418]"
    }, {
      "left" : "private char readEscapeCharacter() throws IOException",
      "right" : "private char readEscapeCharacter() throws IOException",
      "info" : "MethodDeclaration[47536-49157]:MethodDeclaration[47422-49043]"
    }, {
      "left" : "private IOException syntaxError(String message) throws IOException",
      "right" : "private IOException syntaxError(String message) throws IOException",
      "info" : "MethodDeclaration[49161-49497]:MethodDeclaration[49047-49383]"
    }, {
      "left" : "private void consumeNonExecutePrefix() throws IOException",
      "right" : "private void consumeNonExecutePrefix() throws IOException",
      "info" : "MethodDeclaration[49501-50076]:MethodDeclaration[49387-49962]"
    }, {
      "left" : "public void promoteNameToValue(JsonReader reader) throws IOException",
      "right" : "public void promoteNameToValue(JsonReader reader) throws IOException",
      "info" : "MethodDeclaration[50168-51036]:MethodDeclaration[50054-50922]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10291-10347]:Block[10291-10347]"
    }, {
      "left" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
      "right" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
      "info" : "ExpressionStatement[10297-10343]:ExpressionStatement[10297-10343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11024-11127]:Block[11024-11127]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[11030-11105]:IfStatement[11030-11105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11046-11105]:Block[11046-11105]"
    }, {
      "left" : "throw new NullPointerException(\"in == null\");",
      "right" : "throw new NullPointerException(\"in == null\");",
      "info" : "ThrowStatement[11054-11099]:ThrowStatement[11054-11099]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[11110-11123]:ExpressionStatement[11110-11123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12733-12766]:Block[12733-12766]"
    }, {
      "left" : "this.lenient = lenient;",
      "right" : "this.lenient = lenient;",
      "info" : "ExpressionStatement[12739-12762]:ExpressionStatement[12739-12762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12879-12904]:Block[12879-12904]"
    }, {
      "left" : "return lenient;",
      "right" : "return lenient;",
      "info" : "ReturnStatement[12885-12900]:ReturnStatement[12885-12900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13072-13485]:Block[13072-13485]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[13078-13093]:VariableDeclarationStatement[13078-13093]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[13098-13147]:IfStatement[13098-13147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13120-13147]:Block[13120-13147]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[13128-13141]:ExpressionStatement[13128-13141]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_ARRAY)",
      "right" : "if (p == PEEKED_BEGIN_ARRAY)",
      "info" : "IfStatement[13152-13481]:IfStatement[13152-13481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13181-13289]:Block[13181-13289]"
    }, {
      "left" : "push(JsonScope.EMPTY_ARRAY);",
      "right" : "push(JsonScope.EMPTY_ARRAY);",
      "info" : "ExpressionStatement[13189-13217]:ExpressionStatement[13189-13217]"
    }, {
      "left" : "pathIndices[stackSize - 1] = 0;",
      "right" : "pathIndices[stackSize - 1] = 0;",
      "info" : "ExpressionStatement[13224-13255]:ExpressionStatement[13224-13255]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[13262-13283]:ExpressionStatement[13262-13283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13295-13481]:Block[13295-13481]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[13303-13475]:ThrowStatement[13303-13475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13651-14042]:Block[13651-14042]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[13657-13672]:VariableDeclarationStatement[13657-13672]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[13677-13726]:IfStatement[13677-13726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13699-13726]:Block[13699-13726]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[13707-13720]:ExpressionStatement[13707-13720]"
    }, {
      "left" : "if (p == PEEKED_END_ARRAY)",
      "right" : "if (p == PEEKED_END_ARRAY)",
      "info" : "IfStatement[13731-14038]:IfStatement[13731-14038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13758-13848]:Block[13758-13848]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[13766-13778]:ExpressionStatement[13766-13778]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[13785-13814]:ExpressionStatement[13785-13814]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[13821-13842]:ExpressionStatement[13821-13842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13854-14038]:Block[13854-14038]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[13862-14032]:ThrowStatement[13862-14032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14212-14590]:Block[14212-14590]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[14218-14233]:VariableDeclarationStatement[14218-14233]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[14238-14287]:IfStatement[14238-14287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14260-14287]:Block[14260-14287]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[14268-14281]:ExpressionStatement[14268-14281]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_OBJECT)",
      "right" : "if (p == PEEKED_BEGIN_OBJECT)",
      "info" : "IfStatement[14292-14586]:IfStatement[14292-14586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14322-14393]:Block[14322-14393]"
    }, {
      "left" : "push(JsonScope.EMPTY_OBJECT);",
      "right" : "push(JsonScope.EMPTY_OBJECT);",
      "info" : "ExpressionStatement[14330-14359]:ExpressionStatement[14330-14359]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[14366-14387]:ExpressionStatement[14366-14387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14399-14586]:Block[14399-14586]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[14407-14580]:ThrowStatement[14407-14580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14758-15250]:Block[14758-15250]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[14764-14779]:VariableDeclarationStatement[14764-14779]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[14784-14833]:IfStatement[14784-14833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14806-14833]:Block[14806-14833]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[14814-14827]:ExpressionStatement[14814-14827]"
    }, {
      "left" : "if (p == PEEKED_END_OBJECT)",
      "right" : "if (p == PEEKED_END_OBJECT)",
      "info" : "IfStatement[14838-15246]:IfStatement[14838-15246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14866-15055]:Block[14866-15055]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[14874-14886]:ExpressionStatement[14874-14886]"
    }, {
      "left" : "pathNames[stackSize] = null;",
      "right" : "pathNames[stackSize] = null;",
      "info" : "ExpressionStatement[14893-14921]:ExpressionStatement[14893-14921]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[14992-15021]:ExpressionStatement[14992-15021]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[15028-15049]:ExpressionStatement[15028-15049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15061-15246]:Block[15061-15246]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[15069-15240]:ThrowStatement[15069-15240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15380-15519]:Block[15380-15519]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[15386-15401]:VariableDeclarationStatement[15386-15401]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[15406-15455]:IfStatement[15406-15455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15428-15455]:Block[15428-15455]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[15436-15449]:ExpressionStatement[15436-15449]"
    }, {
      "left" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
      "right" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
      "info" : "ReturnStatement[15460-15515]:ReturnStatement[15460-15515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15640-16586]:Block[15640-16586]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[15646-15661]:VariableDeclarationStatement[15646-15661]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[15666-15715]:IfStatement[15666-15715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15688-15715]:Block[15688-15715]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[15696-15709]:ExpressionStatement[15696-15709]"
    }, {
      "left" : "switch (p) {\n    case PEEKED_BEGIN_OBJECT:\n      return JsonToken.BEGIN_OBJECT;\n    case PEEKED_END_OBJECT:\n      return JsonToken.END_OBJECT;\n    case PEEKED_BEGIN_ARRAY:\n      return JsonToken.BEGIN_ARRAY;\n    case PEEKED_END_ARRAY:\n      return JsonToken.END_ARRAY;\n    case PEEKED_SINGLE_QUOTED_NAME:\n    case PEEKED_DOUBLE_QUOTED_NAME:\n    case PEEKED_UNQUOTED_NAME:\n      return JsonToken.NAME;\n    case PEEKED_TRUE:\n    case PEEKED_FALSE:\n      return JsonToken.BOOLEAN;\n    case PEEKED_NULL:\n      return JsonToken.NULL;\n    case PEEKED_SINGLE_QUOTED:\n    case PEEKED_DOUBLE_QUOTED:\n    case PEEKED_UNQUOTED:\n    case PEEKED_BUFFERED:\n      return JsonToken.STRING;\n    case PEEKED_LONG:\n    case PEEKED_NUMBER:\n      return JsonToken.NUMBER;\n    case PEEKED_EOF:\n      return JsonToken.END_DOCUMENT;\n    default:\n      throw new AssertionError();\n    }",
      "right" : "switch (p) {\n    case PEEKED_BEGIN_OBJECT:\n      return JsonToken.BEGIN_OBJECT;\n    case PEEKED_END_OBJECT:\n      return JsonToken.END_OBJECT;\n    case PEEKED_BEGIN_ARRAY:\n      return JsonToken.BEGIN_ARRAY;\n    case PEEKED_END_ARRAY:\n      return JsonToken.END_ARRAY;\n    case PEEKED_SINGLE_QUOTED_NAME:\n    case PEEKED_DOUBLE_QUOTED_NAME:\n    case PEEKED_UNQUOTED_NAME:\n      return JsonToken.NAME;\n    case PEEKED_TRUE:\n    case PEEKED_FALSE:\n      return JsonToken.BOOLEAN;\n    case PEEKED_NULL:\n      return JsonToken.NULL;\n    case PEEKED_SINGLE_QUOTED:\n    case PEEKED_DOUBLE_QUOTED:\n    case PEEKED_UNQUOTED:\n    case PEEKED_BUFFERED:\n      return JsonToken.STRING;\n    case PEEKED_LONG:\n    case PEEKED_NUMBER:\n      return JsonToken.NUMBER;\n    case PEEKED_EOF:\n      return JsonToken.END_DOCUMENT;\n    default:\n      throw new AssertionError();\n    }",
      "info" : "SwitchStatement[15721-16582]:SwitchStatement[15721-16582]"
    }, {
      "left" : "case PEEKED_BEGIN_OBJECT:",
      "right" : "case PEEKED_BEGIN_OBJECT:",
      "info" : "SwitchCase[15738-15763]:SwitchCase[15738-15763]"
    }, {
      "left" : "return JsonToken.BEGIN_OBJECT;",
      "right" : "return JsonToken.BEGIN_OBJECT;",
      "info" : "ReturnStatement[15770-15800]:ReturnStatement[15770-15800]"
    }, {
      "left" : "case PEEKED_END_OBJECT:",
      "right" : "case PEEKED_END_OBJECT:",
      "info" : "SwitchCase[15805-15828]:SwitchCase[15805-15828]"
    }, {
      "left" : "return JsonToken.END_OBJECT;",
      "right" : "return JsonToken.END_OBJECT;",
      "info" : "ReturnStatement[15835-15863]:ReturnStatement[15835-15863]"
    }, {
      "left" : "case PEEKED_BEGIN_ARRAY:",
      "right" : "case PEEKED_BEGIN_ARRAY:",
      "info" : "SwitchCase[15868-15892]:SwitchCase[15868-15892]"
    }, {
      "left" : "return JsonToken.BEGIN_ARRAY;",
      "right" : "return JsonToken.BEGIN_ARRAY;",
      "info" : "ReturnStatement[15899-15928]:ReturnStatement[15899-15928]"
    }, {
      "left" : "case PEEKED_END_ARRAY:",
      "right" : "case PEEKED_END_ARRAY:",
      "info" : "SwitchCase[15933-15955]:SwitchCase[15933-15955]"
    }, {
      "left" : "return JsonToken.END_ARRAY;",
      "right" : "return JsonToken.END_ARRAY;",
      "info" : "ReturnStatement[15962-15989]:ReturnStatement[15962-15989]"
    }, {
      "left" : "case PEEKED_SINGLE_QUOTED_NAME:",
      "right" : "case PEEKED_SINGLE_QUOTED_NAME:",
      "info" : "SwitchCase[15994-16025]:SwitchCase[15994-16025]"
    }, {
      "left" : "case PEEKED_DOUBLE_QUOTED_NAME:",
      "right" : "case PEEKED_DOUBLE_QUOTED_NAME:",
      "info" : "SwitchCase[16030-16061]:SwitchCase[16030-16061]"
    }, {
      "left" : "case PEEKED_UNQUOTED_NAME:",
      "right" : "case PEEKED_UNQUOTED_NAME:",
      "info" : "SwitchCase[16066-16092]:SwitchCase[16066-16092]"
    }, {
      "left" : "return JsonToken.NAME;",
      "right" : "return JsonToken.NAME;",
      "info" : "ReturnStatement[16099-16121]:ReturnStatement[16099-16121]"
    }, {
      "left" : "case PEEKED_TRUE:",
      "right" : "case PEEKED_TRUE:",
      "info" : "SwitchCase[16126-16143]:SwitchCase[16126-16143]"
    }, {
      "left" : "case PEEKED_FALSE:",
      "right" : "case PEEKED_FALSE:",
      "info" : "SwitchCase[16148-16166]:SwitchCase[16148-16166]"
    }, {
      "left" : "return JsonToken.BOOLEAN;",
      "right" : "return JsonToken.BOOLEAN;",
      "info" : "ReturnStatement[16173-16198]:ReturnStatement[16173-16198]"
    }, {
      "left" : "case PEEKED_NULL:",
      "right" : "case PEEKED_NULL:",
      "info" : "SwitchCase[16203-16220]:SwitchCase[16203-16220]"
    }, {
      "left" : "return JsonToken.NULL;",
      "right" : "return JsonToken.NULL;",
      "info" : "ReturnStatement[16227-16249]:ReturnStatement[16227-16249]"
    }, {
      "left" : "case PEEKED_SINGLE_QUOTED:",
      "right" : "case PEEKED_SINGLE_QUOTED:",
      "info" : "SwitchCase[16254-16280]:SwitchCase[16254-16280]"
    }, {
      "left" : "case PEEKED_DOUBLE_QUOTED:",
      "right" : "case PEEKED_DOUBLE_QUOTED:",
      "info" : "SwitchCase[16285-16311]:SwitchCase[16285-16311]"
    }, {
      "left" : "case PEEKED_UNQUOTED:",
      "right" : "case PEEKED_UNQUOTED:",
      "info" : "SwitchCase[16316-16337]:SwitchCase[16316-16337]"
    }, {
      "left" : "case PEEKED_BUFFERED:",
      "right" : "case PEEKED_BUFFERED:",
      "info" : "SwitchCase[16342-16363]:SwitchCase[16342-16363]"
    }, {
      "left" : "return JsonToken.STRING;",
      "right" : "return JsonToken.STRING;",
      "info" : "ReturnStatement[16370-16394]:ReturnStatement[16370-16394]"
    }, {
      "left" : "case PEEKED_LONG:",
      "right" : "case PEEKED_LONG:",
      "info" : "SwitchCase[16399-16416]:SwitchCase[16399-16416]"
    }, {
      "left" : "case PEEKED_NUMBER:",
      "right" : "case PEEKED_NUMBER:",
      "info" : "SwitchCase[16421-16440]:SwitchCase[16421-16440]"
    }, {
      "left" : "return JsonToken.NUMBER;",
      "right" : "return JsonToken.NUMBER;",
      "info" : "ReturnStatement[16447-16471]:ReturnStatement[16447-16471]"
    }, {
      "left" : "case PEEKED_EOF:",
      "right" : "case PEEKED_EOF:",
      "info" : "SwitchCase[16476-16492]:SwitchCase[16476-16492]"
    }, {
      "left" : "return JsonToken.END_DOCUMENT;",
      "right" : "return JsonToken.END_DOCUMENT;",
      "info" : "ReturnStatement[16499-16529]:ReturnStatement[16499-16529]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16534-16542]:SwitchCase[16534-16542]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[16549-16576]:ThrowStatement[16549-16576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16622-20685]:Block[16622-20571]"
    }, {
      "left" : "int peekStack = stack[stackSize - 1];",
      "right" : "int peekStack = stack[stackSize - 1];",
      "info" : "VariableDeclarationStatement[16628-16665]:VariableDeclarationStatement[16628-16665]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "info" : "IfStatement[16670-19364]:IfStatement[16670-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16710-16772]:Block[16710-16772]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
      "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
      "info" : "ExpressionStatement[16718-16766]:ExpressionStatement[16718-16766]"
    }, {
      "left" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
      "info" : "IfStatement[16778-19364]:IfStatement[16778-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16821-17154]:Block[16821-17154]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[16880-16912]:VariableDeclarationStatement[16880-16912]"
    }, {
      "left" : "switch (c) {\n      case ']':\n        return peeked = PEEKED_END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }",
      "right" : "switch (c) {\n      case ']':\n        return peeked = PEEKED_END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }",
      "info" : "SwitchStatement[16919-17148]:SwitchStatement[16919-17148]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[16938-16947]:SwitchCase[16938-16947]"
    }, {
      "left" : "return peeked = PEEKED_END_ARRAY;",
      "right" : "return peeked = PEEKED_END_ARRAY;",
      "info" : "ReturnStatement[16956-16989]:ReturnStatement[16956-16989]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[16996-17005]:SwitchCase[16996-17005]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[17014-17029]:ExpressionStatement[17014-17029]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[17052-17061]:SwitchCase[17052-17061]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17070-17076]:BreakStatement[17070-17076]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17083-17091]:SwitchCase[17083-17091]"
    }, {
      "left" : "throw syntaxError(\"Unterminated array\");",
      "right" : "throw syntaxError(\"Unterminated array\");",
      "info" : "ThrowStatement[17100-17140]:ThrowStatement[17100-17140]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
      "right" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
      "info" : "IfStatement[17160-19364]:IfStatement[17160-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17243-18397]:Block[17243-18397]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
      "right" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
      "info" : "ExpressionStatement[17251-17298]:ExpressionStatement[17251-17298]"
    }, {
      "left" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
      "right" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
      "info" : "IfStatement[17356-17708]:IfStatement[17356-17708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17400-17708]:Block[17400-17708]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[17410-17442]:VariableDeclarationStatement[17410-17442]"
    }, {
      "left" : "switch (c) {\n        case '}':\n          return peeked = PEEKED_END_OBJECT;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw syntaxError(\"Unterminated object\");\n        }",
      "right" : "switch (c) {\n        case '}':\n          return peeked = PEEKED_END_OBJECT;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw syntaxError(\"Unterminated object\");\n        }",
      "info" : "SwitchStatement[17451-17700]:SwitchStatement[17451-17700]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[17472-17481]:SwitchCase[17472-17481]"
    }, {
      "left" : "return peeked = PEEKED_END_OBJECT;",
      "right" : "return peeked = PEEKED_END_OBJECT;",
      "info" : "ReturnStatement[17492-17526]:ReturnStatement[17492-17526]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[17535-17544]:SwitchCase[17535-17544]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[17555-17570]:ExpressionStatement[17555-17570]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[17595-17604]:SwitchCase[17595-17604]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17615-17621]:BreakStatement[17615-17621]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17630-17638]:SwitchCase[17630-17638]"
    }, {
      "left" : "throw syntaxError(\"Unterminated object\");",
      "right" : "throw syntaxError(\"Unterminated object\");",
      "info" : "ThrowStatement[17649-17690]:ThrowStatement[17649-17690]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[17715-17747]:VariableDeclarationStatement[17715-17747]"
    }, {
      "left" : "switch (c) {\n      case '\"':\n        return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED_NAME;\n      case '}':\n        if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n          return peeked = PEEKED_END_OBJECT;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      default:\n        checkLenient();\n        pos--; // Don't consume the first character in an unquoted string.\n        if (isLiteral((char) c)) {\n          return peeked = PEEKED_UNQUOTED_NAME;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      }",
      "right" : "switch (c) {\n      case '\"':\n        return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED_NAME;\n      case '}':\n        if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n          return peeked = PEEKED_END_OBJECT;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      default:\n        checkLenient();\n        pos--; // Don't consume the first character in an unquoted string.\n        if (isLiteral((char) c)) {\n          return peeked = PEEKED_UNQUOTED_NAME;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      }",
      "info" : "SwitchStatement[17754-18391]:SwitchStatement[17754-18391]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[17773-17782]:SwitchCase[17773-17782]"
    }, {
      "left" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
      "right" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
      "info" : "ReturnStatement[17791-17833]:ReturnStatement[17791-17833]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[17840-17850]:SwitchCase[17840-17850]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[17859-17874]:ExpressionStatement[17859-17874]"
    }, {
      "left" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
      "right" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
      "info" : "ReturnStatement[17883-17925]:ReturnStatement[17883-17925]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[17932-17941]:SwitchCase[17932-17941]"
    }, {
      "left" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
      "right" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
      "info" : "IfStatement[17950-18113]:IfStatement[17950-18113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17994-18050]:Block[17994-18050]"
    }, {
      "left" : "return peeked = PEEKED_END_OBJECT;",
      "right" : "return peeked = PEEKED_END_OBJECT;",
      "info" : "ReturnStatement[18006-18040]:ReturnStatement[18006-18040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18056-18113]:Block[18056-18113]"
    }, {
      "left" : "throw syntaxError(\"Expected name\");",
      "right" : "throw syntaxError(\"Expected name\");",
      "info" : "ThrowStatement[18068-18103]:ThrowStatement[18068-18103]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18120-18128]:SwitchCase[18120-18128]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[18137-18152]:ExpressionStatement[18137-18152]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[18161-18167]:ExpressionStatement[18161-18167]"
    }, {
      "left" : "if (isLiteral((char) c))",
      "right" : "if (isLiteral((char) c))",
      "info" : "IfStatement[18236-18383]:IfStatement[18236-18383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18261-18320]:Block[18261-18320]"
    }, {
      "left" : "return peeked = PEEKED_UNQUOTED_NAME;",
      "right" : "return peeked = PEEKED_UNQUOTED_NAME;",
      "info" : "ReturnStatement[18273-18310]:ReturnStatement[18273-18310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18326-18383]:Block[18326-18383]"
    }, {
      "left" : "throw syntaxError(\"Expected name\");",
      "right" : "throw syntaxError(\"Expected name\");",
      "info" : "ThrowStatement[18338-18373]:ThrowStatement[18338-18373]"
    }, {
      "left" : "if (peekStack == JsonScope.DANGLING_NAME)",
      "right" : "if (peekStack == JsonScope.DANGLING_NAME)",
      "info" : "IfStatement[18403-19364]:IfStatement[18403-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18445-18857]:Block[18445-18857]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
      "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
      "info" : "ExpressionStatement[18453-18502]:ExpressionStatement[18453-18502]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[18553-18585]:VariableDeclarationStatement[18553-18585]"
    }, {
      "left" : "switch (c) {\n      case ':':\n        break;\n      case '=':\n        checkLenient();\n        if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n          pos++;\n        }\n        break;\n      default:\n        throw syntaxError(\"Expected ':'\");\n      }",
      "right" : "switch (c) {\n      case ':':\n        break;\n      case '=':\n        checkLenient();\n        if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n          pos++;\n        }\n        break;\n      default:\n        throw syntaxError(\"Expected ':'\");\n      }",
      "info" : "SwitchStatement[18592-18851]:SwitchStatement[18592-18851]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[18611-18620]:SwitchCase[18611-18620]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18629-18635]:BreakStatement[18629-18635]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[18642-18651]:SwitchCase[18642-18651]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[18660-18675]:ExpressionStatement[18660-18675]"
    }, {
      "left" : "if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>')",
      "right" : "if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>')",
      "info" : "IfStatement[18684-18770]:IfStatement[18684-18770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18742-18770]:Block[18742-18770]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[18754-18760]:ExpressionStatement[18754-18760]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18779-18785]:BreakStatement[18779-18785]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18792-18800]:SwitchCase[18792-18800]"
    }, {
      "left" : "throw syntaxError(\"Expected ':'\");",
      "right" : "throw syntaxError(\"Expected ':'\");",
      "info" : "ThrowStatement[18809-18843]:ThrowStatement[18809-18843]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
      "right" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
      "info" : "IfStatement[18863-19364]:IfStatement[18863-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18906-19035]:Block[18906-19035]"
    }, {
      "left" : "if (lenient)",
      "right" : "if (lenient)",
      "info" : "IfStatement[18914-18971]:IfStatement[18914-18971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18927-18971]:Block[18927-18971]"
    }, {
      "left" : "consumeNonExecutePrefix();",
      "right" : "consumeNonExecutePrefix();",
      "info" : "ExpressionStatement[18937-18963]:ExpressionStatement[18937-18963]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
      "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
      "info" : "ExpressionStatement[18978-19029]:ExpressionStatement[18978-19029]"
    }, {
      "left" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
      "right" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
      "info" : "IfStatement[19041-19364]:IfStatement[19041-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19087-19253]:Block[19087-19253]"
    }, {
      "left" : "int c = nextNonWhitespace(false);",
      "right" : "int c = nextNonWhitespace(false);",
      "info" : "VariableDeclarationStatement[19095-19128]:VariableDeclarationStatement[19095-19128]"
    }, {
      "left" : "if (c == -1)",
      "right" : "if (c == -1)",
      "info" : "IfStatement[19135-19247]:IfStatement[19135-19247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19148-19193]:Block[19148-19193]"
    }, {
      "left" : "return peeked = PEEKED_EOF;",
      "right" : "return peeked = PEEKED_EOF;",
      "info" : "ReturnStatement[19158-19185]:ReturnStatement[19158-19185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19199-19247]:Block[19199-19247]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[19209-19224]:ExpressionStatement[19209-19224]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[19233-19239]:ExpressionStatement[19233-19239]"
    }, {
      "left" : "if (peekStack == JsonScope.CLOSED)",
      "right" : "if (peekStack == JsonScope.CLOSED)",
      "info" : "IfStatement[19259-19364]:IfStatement[19259-19364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19294-19364]:Block[19294-19364]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonReader is closed\");",
      "right" : "throw new IllegalStateException(\"JsonReader is closed\");",
      "info" : "ThrowStatement[19302-19358]:ThrowStatement[19302-19358]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[19370-19402]:VariableDeclarationStatement[19370-19402]"
    }, {
      "left" : "switch (c) {\n    case ']':\n      if (peekStack == JsonScope.EMPTY_ARRAY) {\n        return peeked = PEEKED_END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      // In lenient mode, a 0-length literal in an array means 'null'.\n      if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n        checkLenient();\n        pos--;\n        return peeked = PEEKED_NULL;\n      } else {\n        throw syntaxError(\"Unexpected value\");\n      }\n    case '\\'':\n      checkLenient();\n      return peeked = PEEKED_SINGLE_QUOTED;\n    case '\"':\n      if (stackSize == 1) {\n        checkLenient();\n      }\n      return peeked = PEEKED_DOUBLE_QUOTED;\n    case '[':\n      return peeked = PEEKED_BEGIN_ARRAY;\n    case '{':\n      return peeked = PEEKED_BEGIN_OBJECT;\n    default:\n      pos--; // Don't consume the first character in a literal value.\n    }",
      "right" : "switch (c) {\n    case ']':\n      if (peekStack == JsonScope.EMPTY_ARRAY) {\n        return peeked = PEEKED_END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      // In lenient mode, a 0-length literal in an array means 'null'.\n      if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n        checkLenient();\n        pos--;\n        return peeked = PEEKED_NULL;\n      } else {\n        throw syntaxError(\"Unexpected value\");\n      }\n    case '\\'':\n      checkLenient();\n      return peeked = PEEKED_SINGLE_QUOTED;\n    case '\"':\n      return peeked = PEEKED_DOUBLE_QUOTED;\n    case '[':\n      return peeked = PEEKED_BEGIN_ARRAY;\n    case '{':\n      return peeked = PEEKED_BEGIN_OBJECT;\n    default:\n      pos--; // Don't consume the first character in a literal value.\n    }",
      "info" : "SwitchStatement[19407-20303]:SwitchStatement[19407-20243]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[19424-19433]:SwitchCase[19424-19433]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "info" : "IfStatement[19440-19531]:IfStatement[19440-19531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19480-19531]:Block[19480-19531]"
    }, {
      "left" : "return peeked = PEEKED_END_ARRAY;",
      "right" : "return peeked = PEEKED_END_ARRAY;",
      "info" : "ReturnStatement[19490-19523]:ReturnStatement[19490-19523]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[19573-19582]:SwitchCase[19573-19582]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[19587-19596]:SwitchCase[19587-19596]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
      "info" : "IfStatement[19674-19902]:IfStatement[19674-19902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19755-19840]:Block[19755-19840]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[19765-19780]:ExpressionStatement[19765-19780]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[19789-19795]:ExpressionStatement[19789-19795]"
    }, {
      "left" : "return peeked = PEEKED_NULL;",
      "right" : "return peeked = PEEKED_NULL;",
      "info" : "ReturnStatement[19804-19832]:ReturnStatement[19804-19832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19846-19902]:Block[19846-19902]"
    }, {
      "left" : "throw syntaxError(\"Unexpected value\");",
      "right" : "throw syntaxError(\"Unexpected value\");",
      "info" : "ThrowStatement[19856-19894]:ThrowStatement[19856-19894]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[19907-19917]:SwitchCase[19907-19917]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[19924-19939]:ExpressionStatement[19924-19939]"
    }, {
      "left" : "return peeked = PEEKED_SINGLE_QUOTED;",
      "right" : "return peeked = PEEKED_SINGLE_QUOTED;",
      "info" : "ReturnStatement[19946-19983]:ReturnStatement[19946-19983]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[19988-19997]:SwitchCase[19988-19997]"
    }, {
      "left" : "return peeked = PEEKED_DOUBLE_QUOTED;",
      "right" : "return peeked = PEEKED_DOUBLE_QUOTED;",
      "info" : "ReturnStatement[20064-20101]:ReturnStatement[20004-20041]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[20106-20115]:SwitchCase[20046-20055]"
    }, {
      "left" : "return peeked = PEEKED_BEGIN_ARRAY;",
      "right" : "return peeked = PEEKED_BEGIN_ARRAY;",
      "info" : "ReturnStatement[20122-20157]:ReturnStatement[20062-20097]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[20162-20171]:SwitchCase[20102-20111]"
    }, {
      "left" : "return peeked = PEEKED_BEGIN_OBJECT;",
      "right" : "return peeked = PEEKED_BEGIN_OBJECT;",
      "info" : "ReturnStatement[20178-20214]:ReturnStatement[20118-20154]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20219-20227]:SwitchCase[20159-20167]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[20234-20240]:ExpressionStatement[20174-20180]"
    }, {
      "left" : "int result = peekKeyword();",
      "right" : "int result = peekKeyword();",
      "info" : "VariableDeclarationStatement[20363-20390]:VariableDeclarationStatement[20249-20276]"
    }, {
      "left" : "if (result != PEEKED_NONE)",
      "right" : "if (result != PEEKED_NONE)",
      "info" : "IfStatement[20395-20450]:IfStatement[20281-20336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20422-20450]:Block[20308-20336]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[20430-20444]:ReturnStatement[20316-20330]"
    }, {
      "left" : "result = peekNumber();",
      "right" : "result = peekNumber();",
      "info" : "ExpressionStatement[20456-20478]:ExpressionStatement[20342-20364]"
    }, {
      "left" : "if (result != PEEKED_NONE)",
      "right" : "if (result != PEEKED_NONE)",
      "info" : "IfStatement[20483-20538]:IfStatement[20369-20424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20510-20538]:Block[20396-20424]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[20518-20532]:ReturnStatement[20404-20418]"
    }, {
      "left" : "if (!isLiteral(buffer[pos]))",
      "right" : "if (!isLiteral(buffer[pos]))",
      "info" : "IfStatement[20544-20623]:IfStatement[20430-20509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20573-20623]:Block[20459-20509]"
    }, {
      "left" : "throw syntaxError(\"Expected value\");",
      "right" : "throw syntaxError(\"Expected value\");",
      "info" : "ThrowStatement[20581-20617]:ThrowStatement[20467-20503]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[20629-20644]:ExpressionStatement[20515-20530]"
    }, {
      "left" : "return peeked = PEEKED_UNQUOTED;",
      "right" : "return peeked = PEEKED_UNQUOTED;",
      "info" : "ReturnStatement[20649-20681]:ReturnStatement[20535-20567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20734-21978]:Block[20620-21864]"
    }, {
      "left" : "char c = buffer[pos];",
      "right" : "char c = buffer[pos];",
      "info" : "VariableDeclarationStatement[20819-20840]:VariableDeclarationStatement[20705-20726]"
    }, {
      "left" : "String keyword;",
      "right" : "String keyword;",
      "info" : "VariableDeclarationStatement[20845-20860]:VariableDeclarationStatement[20731-20746]"
    }, {
      "left" : "String keywordUpper;",
      "right" : "String keywordUpper;",
      "info" : "VariableDeclarationStatement[20865-20885]:VariableDeclarationStatement[20751-20771]"
    }, {
      "left" : "int peeking;",
      "right" : "int peeking;",
      "info" : "VariableDeclarationStatement[20890-20902]:VariableDeclarationStatement[20776-20788]"
    }, {
      "left" : "if (c == 't' || c == 'T')",
      "right" : "if (c == 't' || c == 'T')",
      "info" : "IfStatement[20907-21306]:IfStatement[20793-21192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20933-21022]:Block[20819-20908]"
    }, {
      "left" : "keyword = \"true\";",
      "right" : "keyword = \"true\";",
      "info" : "ExpressionStatement[20941-20958]:ExpressionStatement[20827-20844]"
    }, {
      "left" : "keywordUpper = \"TRUE\";",
      "right" : "keywordUpper = \"TRUE\";",
      "info" : "ExpressionStatement[20965-20987]:ExpressionStatement[20851-20873]"
    }, {
      "left" : "peeking = PEEKED_TRUE;",
      "right" : "peeking = PEEKED_TRUE;",
      "info" : "ExpressionStatement[20994-21016]:ExpressionStatement[20880-20902]"
    }, {
      "left" : "if (c == 'f' || c == 'F')",
      "right" : "if (c == 'f' || c == 'F')",
      "info" : "IfStatement[21028-21306]:IfStatement[20914-21192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21054-21146]:Block[20940-21032]"
    }, {
      "left" : "keyword = \"false\";",
      "right" : "keyword = \"false\";",
      "info" : "ExpressionStatement[21062-21080]:ExpressionStatement[20948-20966]"
    }, {
      "left" : "keywordUpper = \"FALSE\";",
      "right" : "keywordUpper = \"FALSE\";",
      "info" : "ExpressionStatement[21087-21110]:ExpressionStatement[20973-20996]"
    }, {
      "left" : "peeking = PEEKED_FALSE;",
      "right" : "peeking = PEEKED_FALSE;",
      "info" : "ExpressionStatement[21117-21140]:ExpressionStatement[21003-21026]"
    }, {
      "left" : "if (c == 'n' || c == 'N')",
      "right" : "if (c == 'n' || c == 'N')",
      "info" : "IfStatement[21152-21306]:IfStatement[21038-21192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21178-21267]:Block[21064-21153]"
    }, {
      "left" : "keyword = \"null\";",
      "right" : "keyword = \"null\";",
      "info" : "ExpressionStatement[21186-21203]:ExpressionStatement[21072-21089]"
    }, {
      "left" : "keywordUpper = \"NULL\";",
      "right" : "keywordUpper = \"NULL\";",
      "info" : "ExpressionStatement[21210-21232]:ExpressionStatement[21096-21118]"
    }, {
      "left" : "peeking = PEEKED_NULL;",
      "right" : "peeking = PEEKED_NULL;",
      "info" : "ExpressionStatement[21239-21261]:ExpressionStatement[21125-21147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21273-21306]:Block[21159-21192]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[21281-21300]:ReturnStatement[21167-21186]"
    }, {
      "left" : "int length = keyword.length();",
      "right" : "int length = keyword.length();",
      "info" : "VariableDeclarationStatement[21369-21399]:VariableDeclarationStatement[21255-21285]"
    }, {
      "left" : "for (int i = 1; i < length; i++)",
      "right" : "for (int i = 1; i < length; i++)",
      "info" : "ForStatement[21404-21662]:ForStatement[21290-21548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21437-21662]:Block[21323-21548]"
    }, {
      "left" : "if (pos + i >= limit && !fillBuffer(i + 1))",
      "right" : "if (pos + i >= limit && !fillBuffer(i + 1))",
      "info" : "IfStatement[21445-21526]:IfStatement[21331-21412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21489-21526]:Block[21375-21412]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[21499-21518]:ReturnStatement[21385-21404]"
    }, {
      "left" : "c = buffer[pos + i];",
      "right" : "c = buffer[pos + i];",
      "info" : "ExpressionStatement[21533-21553]:ExpressionStatement[21419-21439]"
    }, {
      "left" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
      "right" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
      "info" : "IfStatement[21560-21656]:IfStatement[21446-21542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21619-21656]:Block[21505-21542]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[21629-21648]:ReturnStatement[21515-21534]"
    }, {
      "left" : "if ((pos + length < limit || fillBuffer(length + 1))\n        && isLiteral(buffer[pos + length]))",
      "right" : "if ((pos + length < limit || fillBuffer(length + 1))\n        && isLiteral(buffer[pos + length]))",
      "info" : "IfStatement[21668-21840]:IfStatement[21554-21726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21765-21840]:Block[21651-21726]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[21773-21792]:ReturnStatement[21659-21678]"
    }, {
      "left" : "pos += length;",
      "right" : "pos += length;",
      "info" : "ExpressionStatement[21931-21945]:ExpressionStatement[21817-21831]"
    }, {
      "left" : "return peeked = peeking;",
      "right" : "return peeked = peeking;",
      "info" : "ReturnStatement[21950-21974]:ReturnStatement[21836-21860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22026-25097]:Block[21912-24983]"
    }, {
      "left" : "char[] buffer = this.buffer;",
      "right" : "char[] buffer = this.buffer;",
      "info" : "VariableDeclarationStatement[22125-22153]:VariableDeclarationStatement[22011-22039]"
    }, {
      "left" : "int p = pos;",
      "right" : "int p = pos;",
      "info" : "VariableDeclarationStatement[22158-22170]:VariableDeclarationStatement[22044-22056]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[22175-22189]:VariableDeclarationStatement[22061-22075]"
    }, {
      "left" : "long value = 0;",
      "right" : "long value = 0;",
      "info" : "VariableDeclarationStatement[22195-22210]:VariableDeclarationStatement[22081-22096]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[22270-22295]:VariableDeclarationStatement[22156-22181]"
    }, {
      "left" : "boolean fitsInLong = true;",
      "right" : "boolean fitsInLong = true;",
      "info" : "VariableDeclarationStatement[22300-22326]:VariableDeclarationStatement[22186-22212]"
    }, {
      "left" : "int last = NUMBER_CHAR_NONE;",
      "right" : "int last = NUMBER_CHAR_NONE;",
      "info" : "VariableDeclarationStatement[22331-22359]:VariableDeclarationStatement[22217-22245]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[22365-22375]:VariableDeclarationStatement[22251-22261]"
    }, {
      "left" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }\n    }",
      "right" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }\n    }",
      "info" : "LabeledStatement[22381-24582]:LabeledStatement[22267-24468]"
    }, {
      "left" : "for (; true; i++)",
      "right" : "for (; true; i++)",
      "info" : "ForStatement[22405-24582]:ForStatement[22291-24468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22423-24582]:Block[22309-24468]"
    }, {
      "left" : "if (p + i == l)",
      "right" : "if (p + i == l)",
      "info" : "IfStatement[22431-22801]:IfStatement[22317-22687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22447-22801]:Block[22333-22687]"
    }, {
      "left" : "if (i == buffer.length)",
      "right" : "if (i == buffer.length)",
      "info" : "IfStatement[22457-22696]:IfStatement[22343-22582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22481-22696]:Block[22367-22582]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[22667-22686]:ReturnStatement[22553-22572]"
    }, {
      "left" : "if (!fillBuffer(i + 1))",
      "right" : "if (!fillBuffer(i + 1))",
      "info" : "IfStatement[22705-22757]:IfStatement[22591-22643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22729-22757]:Block[22615-22643]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22741-22747]:BreakStatement[22627-22633]"
    }, {
      "left" : "p = pos;",
      "right" : "p = pos;",
      "info" : "ExpressionStatement[22766-22774]:ExpressionStatement[22652-22660]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[22783-22793]:ExpressionStatement[22669-22679]"
    }, {
      "left" : "char c = buffer[p + i];",
      "right" : "char c = buffer[p + i];",
      "info" : "VariableDeclarationStatement[22809-22832]:VariableDeclarationStatement[22695-22718]"
    }, {
      "left" : "switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }",
      "right" : "switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }",
      "info" : "SwitchStatement[22839-24576]:SwitchStatement[22725-24462]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[22858-22867]:SwitchCase[22744-22753]"
    }, {
      "left" : "if (last == NUMBER_CHAR_NONE)",
      "right" : "if (last == NUMBER_CHAR_NONE)",
      "info" : "IfStatement[22876-23106]:IfStatement[22762-22992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22906-22999]:Block[22792-22885]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[22918-22934]:ExpressionStatement[22804-22820]"
    }, {
      "left" : "last = NUMBER_CHAR_SIGN;",
      "right" : "last = NUMBER_CHAR_SIGN;",
      "info" : "ExpressionStatement[22945-22969]:ExpressionStatement[22831-22855]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22980-22989]:ContinueStatement[22866-22875]"
    }, {
      "left" : "if (last == NUMBER_CHAR_EXP_E)",
      "right" : "if (last == NUMBER_CHAR_EXP_E)",
      "info" : "IfStatement[23005-23106]:IfStatement[22891-22992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23036-23106]:Block[22922-22992]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_SIGN;",
      "right" : "last = NUMBER_CHAR_EXP_SIGN;",
      "info" : "ExpressionStatement[23048-23076]:ExpressionStatement[22934-22962]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23087-23096]:ContinueStatement[22973-22982]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[23115-23134]:ReturnStatement[23001-23020]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[23142-23151]:SwitchCase[23028-23037]"
    }, {
      "left" : "if (last == NUMBER_CHAR_EXP_E)",
      "right" : "if (last == NUMBER_CHAR_EXP_E)",
      "info" : "IfStatement[23160-23261]:IfStatement[23046-23147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23191-23261]:Block[23077-23147]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_SIGN;",
      "right" : "last = NUMBER_CHAR_EXP_SIGN;",
      "info" : "ExpressionStatement[23203-23231]:ExpressionStatement[23089-23117]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23242-23251]:ContinueStatement[23128-23137]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[23270-23289]:ReturnStatement[23156-23175]"
    }, {
      "left" : "case 'e':",
      "right" : "case 'e':",
      "info" : "SwitchCase[23297-23306]:SwitchCase[23183-23192]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[23313-23322]:SwitchCase[23199-23208]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
      "info" : "IfStatement[23331-23467]:IfStatement[23217-23353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23400-23467]:Block[23286-23353]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_E;",
      "right" : "last = NUMBER_CHAR_EXP_E;",
      "info" : "ExpressionStatement[23412-23437]:ExpressionStatement[23298-23323]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23448-23457]:ContinueStatement[23334-23343]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[23476-23495]:ReturnStatement[23362-23381]"
    }, {
      "left" : "case '.':",
      "right" : "case '.':",
      "info" : "SwitchCase[23503-23512]:SwitchCase[23389-23398]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT)",
      "info" : "IfStatement[23521-23621]:IfStatement[23407-23507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23552-23621]:Block[23438-23507]"
    }, {
      "left" : "last = NUMBER_CHAR_DECIMAL;",
      "right" : "last = NUMBER_CHAR_DECIMAL;",
      "info" : "ExpressionStatement[23564-23591]:ExpressionStatement[23450-23477]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23602-23611]:ContinueStatement[23488-23497]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[23630-23649]:ReturnStatement[23516-23535]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23657-23665]:SwitchCase[23543-23551]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[23674-23820]:IfStatement[23560-23706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23698-23820]:Block[23584-23706]"
    }, {
      "left" : "if (!isLiteral(c))",
      "right" : "if (!isLiteral(c))",
      "info" : "IfStatement[23710-23780]:IfStatement[23596-23666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23729-23780]:Block[23615-23666]"
    }, {
      "left" : "break charactersOfNumber;",
      "right" : "break charactersOfNumber;",
      "info" : "BreakStatement[23743-23768]:BreakStatement[23629-23654]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[23791-23810]:ReturnStatement[23677-23696]"
    }, {
      "left" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
      "right" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
      "info" : "IfStatement[23829-24568]:IfStatement[23715-24454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23887-23964]:Block[23773-23850]"
    }, {
      "left" : "value = -(c - '0');",
      "right" : "value = -(c - '0');",
      "info" : "ExpressionStatement[23899-23918]:ExpressionStatement[23785-23804]"
    }, {
      "left" : "last = NUMBER_CHAR_DIGIT;",
      "right" : "last = NUMBER_CHAR_DIGIT;",
      "info" : "ExpressionStatement[23929-23954]:ExpressionStatement[23815-23840]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT)",
      "info" : "IfStatement[23970-24568]:IfStatement[23856-24454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24001-24353]:Block[23887-24239]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[24013-24138]:IfStatement[23899-24024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24029-24138]:Block[23915-24024]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[24043-24062]:ReturnStatement[23929-23948]"
    }, {
      "left" : "long newValue = value * 10 - (c - '0');",
      "right" : "long newValue = value * 10 - (c - '0');",
      "info" : "VariableDeclarationStatement[24149-24188]:VariableDeclarationStatement[24035-24074]"
    }, {
      "left" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
      "right" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
      "info" : "ExpressionStatement[24199-24315]:ExpressionStatement[24085-24201]"
    }, {
      "left" : "value = newValue;",
      "right" : "value = newValue;",
      "info" : "ExpressionStatement[24326-24343]:ExpressionStatement[24212-24229]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DECIMAL)",
      "right" : "if (last == NUMBER_CHAR_DECIMAL)",
      "info" : "IfStatement[24359-24568]:IfStatement[24245-24454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24392-24448]:Block[24278-24334]"
    }, {
      "left" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
      "right" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
      "info" : "ExpressionStatement[24404-24438]:ExpressionStatement[24290-24324]"
    }, {
      "left" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
      "right" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
      "info" : "IfStatement[24454-24568]:IfStatement[24340-24454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24517-24568]:Block[24403-24454]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_DIGIT;",
      "right" : "last = NUMBER_CHAR_EXP_DIGIT;",
      "info" : "ExpressionStatement[24529-24558]:ExpressionStatement[24415-24444]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
      "right" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
      "info" : "IfStatement[24674-25093]:IfStatement[24560-24979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24760-24864]:Block[24646-24750]"
    }, {
      "left" : "peekedLong = negative ? value : -value;",
      "right" : "peekedLong = negative ? value : -value;",
      "info" : "ExpressionStatement[24768-24807]:ExpressionStatement[24654-24693]"
    }, {
      "left" : "pos += i;",
      "right" : "pos += i;",
      "info" : "ExpressionStatement[24814-24823]:ExpressionStatement[24700-24709]"
    }, {
      "left" : "return peeked = PEEKED_LONG;",
      "right" : "return peeked = PEEKED_LONG;",
      "info" : "ReturnStatement[24830-24858]:ReturnStatement[24716-24744]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n        || last == NUMBER_CHAR_EXP_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n        || last == NUMBER_CHAR_EXP_DIGIT)",
      "info" : "IfStatement[24870-25093]:IfStatement[24756-24979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24980-25054]:Block[24866-24940]"
    }, {
      "left" : "peekedNumberLength = i;",
      "right" : "peekedNumberLength = i;",
      "info" : "ExpressionStatement[24988-25011]:ExpressionStatement[24874-24897]"
    }, {
      "left" : "return peeked = PEEKED_NUMBER;",
      "right" : "return peeked = PEEKED_NUMBER;",
      "info" : "ReturnStatement[25018-25048]:ReturnStatement[24904-24934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25060-25093]:Block[24946-24979]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[25068-25087]:ReturnStatement[24954-24973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25154-25501]:Block[25040-25387]"
    }, {
      "left" : "switch (c) {\n    case '/':\n    case '\\\\':\n    case ';':\n    case '#':\n    case '=':\n      checkLenient(); // fall-through\n    case '{':\n    case '}':\n    case '[':\n    case ']':\n    case ':':\n    case ',':\n    case ' ':\n    case '\\t':\n    case '\\f':\n    case '\\r':\n    case '\\n':\n      return false;\n    default:\n      return true;\n    }",
      "right" : "switch (c) {\n    case '/':\n    case '\\\\':\n    case ';':\n    case '#':\n    case '=':\n      checkLenient(); // fall-through\n    case '{':\n    case '}':\n    case '[':\n    case ']':\n    case ':':\n    case ',':\n    case ' ':\n    case '\\t':\n    case '\\f':\n    case '\\r':\n    case '\\n':\n      return false;\n    default:\n      return true;\n    }",
      "info" : "SwitchStatement[25160-25497]:SwitchStatement[25046-25383]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[25177-25186]:SwitchCase[25063-25072]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[25191-25201]:SwitchCase[25077-25087]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[25206-25215]:SwitchCase[25092-25101]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[25220-25229]:SwitchCase[25106-25115]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[25234-25243]:SwitchCase[25120-25129]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[25250-25265]:ExpressionStatement[25136-25151]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[25286-25295]:SwitchCase[25172-25181]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[25300-25309]:SwitchCase[25186-25195]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[25314-25323]:SwitchCase[25200-25209]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[25328-25337]:SwitchCase[25214-25223]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[25342-25351]:SwitchCase[25228-25237]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[25356-25365]:SwitchCase[25242-25251]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[25370-25379]:SwitchCase[25256-25265]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[25384-25394]:SwitchCase[25270-25280]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[25399-25409]:SwitchCase[25285-25295]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[25414-25424]:SwitchCase[25300-25310]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[25429-25439]:SwitchCase[25315-25325]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25446-25459]:ReturnStatement[25332-25345]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25464-25472]:SwitchCase[25350-25358]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25479-25491]:ReturnStatement[25365-25377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25778-26399]:Block[25664-26285]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[25784-25799]:VariableDeclarationStatement[25670-25685]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[25804-25853]:IfStatement[25690-25739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25826-25853]:Block[25712-25739]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[25834-25847]:ExpressionStatement[25720-25733]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[25858-25872]:VariableDeclarationStatement[25744-25758]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED_NAME)",
      "right" : "if (p == PEEKED_UNQUOTED_NAME)",
      "info" : "IfStatement[25877-26311]:IfStatement[25763-26197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25908-25951]:Block[25794-25837]"
    }, {
      "left" : "result = nextUnquotedValue();",
      "right" : "result = nextUnquotedValue();",
      "info" : "ExpressionStatement[25916-25945]:ExpressionStatement[25802-25831]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
      "info" : "IfStatement[25957-26311]:IfStatement[25843-26197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25993-26038]:Block[25879-25924]"
    }, {
      "left" : "result = nextQuotedValue('\\'');",
      "right" : "result = nextQuotedValue('\\'');",
      "info" : "ExpressionStatement[26001-26032]:ExpressionStatement[25887-25918]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
      "info" : "IfStatement[26044-26311]:IfStatement[25930-26197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26080-26124]:Block[25966-26010]"
    }, {
      "left" : "result = nextQuotedValue('\"');",
      "right" : "result = nextQuotedValue('\"');",
      "info" : "ExpressionStatement[26088-26118]:ExpressionStatement[25974-26004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26130-26311]:Block[26016-26197]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected a name but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected a name but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[26138-26305]:ThrowStatement[26024-26191]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[26316-26337]:ExpressionStatement[26202-26223]"
    }, {
      "left" : "pathNames[stackSize - 1] = result;",
      "right" : "pathNames[stackSize - 1] = result;",
      "info" : "ExpressionStatement[26342-26376]:ExpressionStatement[26228-26262]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[26381-26395]:ReturnStatement[26267-26281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26766-27671]:Block[26652-27557]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[26772-26787]:VariableDeclarationStatement[26658-26673]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[26792-26841]:IfStatement[26678-26727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26814-26841]:Block[26700-26727]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[26822-26835]:ExpressionStatement[26708-26721]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[26846-26860]:VariableDeclarationStatement[26732-26746]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED)",
      "right" : "if (p == PEEKED_UNQUOTED)",
      "info" : "IfStatement[26865-27588]:IfStatement[26751-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26891-26934]:Block[26777-26820]"
    }, {
      "left" : "result = nextUnquotedValue();",
      "right" : "result = nextUnquotedValue();",
      "info" : "ExpressionStatement[26899-26928]:ExpressionStatement[26785-26814]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED)",
      "info" : "IfStatement[26940-27588]:IfStatement[26826-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26971-27016]:Block[26857-26902]"
    }, {
      "left" : "result = nextQuotedValue('\\'');",
      "right" : "result = nextQuotedValue('\\'');",
      "info" : "ExpressionStatement[26979-27010]:ExpressionStatement[26865-26896]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[27022-27588]:IfStatement[26908-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27053-27097]:Block[26939-26983]"
    }, {
      "left" : "result = nextQuotedValue('\"');",
      "right" : "result = nextQuotedValue('\"');",
      "info" : "ExpressionStatement[27061-27091]:ExpressionStatement[26947-26977]"
    }, {
      "left" : "if (p == PEEKED_BUFFERED)",
      "right" : "if (p == PEEKED_BUFFERED)",
      "info" : "IfStatement[27103-27588]:IfStatement[26989-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27129-27192]:Block[27015-27078]"
    }, {
      "left" : "result = peekedString;",
      "right" : "result = peekedString;",
      "info" : "ExpressionStatement[27137-27159]:ExpressionStatement[27023-27045]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[27166-27186]:ExpressionStatement[27052-27072]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[27198-27588]:IfStatement[27084-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27220-27269]:Block[27106-27155]"
    }, {
      "left" : "result = Long.toString(peekedLong);",
      "right" : "result = Long.toString(peekedLong);",
      "info" : "ExpressionStatement[27228-27263]:ExpressionStatement[27114-27149]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[27275-27588]:IfStatement[27161-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27299-27399]:Block[27185-27285]"
    }, {
      "left" : "result = new String(buffer, pos, peekedNumberLength);",
      "right" : "result = new String(buffer, pos, peekedNumberLength);",
      "info" : "ExpressionStatement[27307-27360]:ExpressionStatement[27193-27246]"
    }, {
      "left" : "pos += peekedNumberLength;",
      "right" : "pos += peekedNumberLength;",
      "info" : "ExpressionStatement[27367-27393]:ExpressionStatement[27253-27279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27405-27588]:Block[27291-27474]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected a string but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected a string but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[27413-27582]:ThrowStatement[27299-27468]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[27593-27614]:ExpressionStatement[27479-27500]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[27619-27648]:ExpressionStatement[27505-27534]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27653-27667]:ReturnStatement[27539-27553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27966-28455]:Block[27852-28341]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[27972-27987]:VariableDeclarationStatement[27858-27873]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[27992-28041]:IfStatement[27878-27927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28014-28041]:Block[27900-27927]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[28022-28035]:ExpressionStatement[27908-27921]"
    }, {
      "left" : "if (p == PEEKED_TRUE)",
      "right" : "if (p == PEEKED_TRUE)",
      "info" : "IfStatement[28046-28278]:IfStatement[27932-28164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28068-28158]:Block[27954-28044]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[28076-28097]:ExpressionStatement[27962-27983]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[28104-28133]:ExpressionStatement[27990-28019]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28140-28152]:ReturnStatement[28026-28038]"
    }, {
      "left" : "if (p == PEEKED_FALSE)",
      "right" : "if (p == PEEKED_FALSE)",
      "info" : "IfStatement[28164-28278]:IfStatement[28050-28164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28187-28278]:Block[28073-28164]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[28195-28216]:ExpressionStatement[28081-28102]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[28223-28252]:ExpressionStatement[28109-28138]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28259-28272]:ReturnStatement[28145-28158]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[28283-28451]:ThrowStatement[28169-28337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28715-29077]:Block[28601-28963]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[28721-28736]:VariableDeclarationStatement[28607-28622]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[28741-28790]:IfStatement[28627-28676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28763-28790]:Block[28649-28676]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[28771-28784]:ExpressionStatement[28657-28670]"
    }, {
      "left" : "if (p == PEEKED_NULL)",
      "right" : "if (p == PEEKED_NULL)",
      "info" : "IfStatement[28795-29073]:IfStatement[28681-28959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28817-28888]:Block[28703-28774]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[28825-28846]:ExpressionStatement[28711-28732]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[28853-28882]:ExpressionStatement[28739-28768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28894-29073]:Block[28780-28959]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected null but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected null but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[28902-29067]:ThrowStatement[28788-28953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29582-30874]:Block[29468-30760]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[29588-29603]:VariableDeclarationStatement[29474-29489]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[29608-29657]:IfStatement[29494-29543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29630-29657]:Block[29516-29543]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[29638-29651]:ExpressionStatement[29524-29537]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[29663-29790]:IfStatement[29549-29676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29685-29790]:Block[29571-29676]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[29693-29714]:ExpressionStatement[29579-29600]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[29721-29750]:ExpressionStatement[29607-29636]"
    }, {
      "left" : "return (double) peekedLong;",
      "right" : "return (double) peekedLong;",
      "info" : "ReturnStatement[29757-29784]:ReturnStatement[29643-29670]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[29796-30373]:IfStatement[29682-30259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29820-29926]:Block[29706-29812]"
    }, {
      "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
      "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
      "info" : "ExpressionStatement[29828-29887]:ExpressionStatement[29714-29773]"
    }, {
      "left" : "pos += peekedNumberLength;",
      "right" : "pos += peekedNumberLength;",
      "info" : "ExpressionStatement[29894-29920]:ExpressionStatement[29780-29806]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[29932-30373]:IfStatement[29818-30259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29992-30077]:Block[29878-29963]"
    }, {
      "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "info" : "ExpressionStatement[30000-30071]:ExpressionStatement[29886-29957]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED)",
      "right" : "if (p == PEEKED_UNQUOTED)",
      "info" : "IfStatement[30083-30373]:IfStatement[29969-30259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30109-30158]:Block[29995-30044]"
    }, {
      "left" : "peekedString = nextUnquotedValue();",
      "right" : "peekedString = nextUnquotedValue();",
      "info" : "ExpressionStatement[30117-30152]:ExpressionStatement[30003-30038]"
    }, {
      "left" : "if (p != PEEKED_BUFFERED)",
      "right" : "if (p != PEEKED_BUFFERED)",
      "info" : "IfStatement[30164-30373]:IfStatement[30050-30259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30190-30373]:Block[30076-30259]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected a double but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected a double but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[30198-30367]:ThrowStatement[30084-30253]"
    }, {
      "left" : "peeked = PEEKED_BUFFERED;",
      "right" : "peeked = PEEKED_BUFFERED;",
      "info" : "ExpressionStatement[30379-30404]:ExpressionStatement[30265-30290]"
    }, {
      "left" : "double result = Double.parseDouble(peekedString);",
      "right" : "double result = Double.parseDouble(peekedString);",
      "info" : "VariableDeclarationStatement[30409-30458]:VariableDeclarationStatement[30295-30344]"
    }, {
      "left" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
      "right" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
      "info" : "IfStatement[30506-30766]:IfStatement[30392-30652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30575-30766]:Block[30461-30652]"
    }, {
      "left" : "throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[30583-30760]:ThrowStatement[30469-30646]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[30771-30791]:ExpressionStatement[30657-30677]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[30796-30817]:ExpressionStatement[30682-30703]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[30822-30851]:ExpressionStatement[30708-30737]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30856-30870]:ReturnStatement[30742-30756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31459-32935]:Block[31345-32821]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[31465-31480]:VariableDeclarationStatement[31351-31366]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[31485-31534]:IfStatement[31371-31420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31507-31534]:Block[31393-31420]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[31515-31528]:ExpressionStatement[31401-31414]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[31540-31658]:IfStatement[31426-31544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31562-31658]:Block[31448-31544]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[31570-31591]:ExpressionStatement[31456-31477]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[31598-31627]:ExpressionStatement[31484-31513]"
    }, {
      "left" : "return peekedLong;",
      "right" : "return peekedLong;",
      "info" : "ReturnStatement[31634-31652]:ReturnStatement[31520-31538]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[31664-32392]:IfStatement[31550-32278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31688-31794]:Block[31574-31680]"
    }, {
      "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
      "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
      "info" : "ExpressionStatement[31696-31755]:ExpressionStatement[31582-31641]"
    }, {
      "left" : "pos += peekedNumberLength;",
      "right" : "pos += peekedNumberLength;",
      "info" : "ExpressionStatement[31762-31788]:ExpressionStatement[31648-31674]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[31800-32392]:IfStatement[31686-32278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31860-32205]:Block[31746-32091]"
    }, {
      "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "info" : "ExpressionStatement[31868-31939]:ExpressionStatement[31754-31825]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31946-32199]:TryStatement[31832-32085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31950-32102]:Block[31836-31988]"
    }, {
      "left" : "long result = Long.parseLong(peekedString);",
      "right" : "long result = Long.parseLong(peekedString);",
      "info" : "VariableDeclarationStatement[31960-32003]:VariableDeclarationStatement[31846-31889]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[32012-32033]:ExpressionStatement[31898-31919]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[32042-32071]:ExpressionStatement[31928-31957]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32080-32094]:ReturnStatement[31966-31980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32141-32199]:Block[32027-32085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32211-32392]:Block[32097-32278]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected a long but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected a long but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[32219-32386]:ThrowStatement[32105-32272]"
    }, {
      "left" : "peeked = PEEKED_BUFFERED;",
      "right" : "peeked = PEEKED_BUFFERED;",
      "info" : "ExpressionStatement[32398-32423]:ExpressionStatement[32284-32309]"
    }, {
      "left" : "double asDouble = Double.parseDouble(peekedString);",
      "right" : "double asDouble = Double.parseDouble(peekedString);",
      "info" : "VariableDeclarationStatement[32428-32479]:VariableDeclarationStatement[32314-32365]"
    }, {
      "left" : "long result = (long) asDouble;",
      "right" : "long result = (long) asDouble;",
      "info" : "VariableDeclarationStatement[32527-32557]:VariableDeclarationStatement[32413-32443]"
    }, {
      "left" : "if (result != asDouble)",
      "right" : "if (result != asDouble)",
      "info" : "IfStatement[32562-32827]:IfStatement[32448-32713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32586-32827]:Block[32472-32713]"
    }, {
      "left" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[32648-32821]:ThrowStatement[32534-32707]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[32832-32852]:ExpressionStatement[32718-32738]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[32857-32878]:ExpressionStatement[32743-32764]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[32883-32912]:ExpressionStatement[32769-32798]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32917-32931]:ReturnStatement[32803-32817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33419-34419]:Block[33305-34305]"
    }, {
      "left" : "char[] buffer = this.buffer;",
      "right" : "char[] buffer = this.buffer;",
      "info" : "VariableDeclarationStatement[33518-33546]:VariableDeclarationStatement[33404-33432]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[33551-33595]:VariableDeclarationStatement[33437-33481]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[33600-34415]:WhileStatement[33486-34301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33613-34415]:Block[33499-34301]"
    }, {
      "left" : "int p = pos;",
      "right" : "int p = pos;",
      "info" : "VariableDeclarationStatement[33621-33633]:VariableDeclarationStatement[33507-33519]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[33640-33654]:VariableDeclarationStatement[33526-33540]"
    }, {
      "left" : "int start = p;",
      "right" : "int start = p;",
      "info" : "VariableDeclarationStatement[33739-33753]:VariableDeclarationStatement[33625-33639]"
    }, {
      "left" : "while (p < l)",
      "right" : "while (p < l)",
      "info" : "WhileStatement[33760-34259]:WhileStatement[33646-34145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33774-34259]:Block[33660-34145]"
    }, {
      "left" : "int c = buffer[p++];",
      "right" : "int c = buffer[p++];",
      "info" : "VariableDeclarationStatement[33784-33804]:VariableDeclarationStatement[33670-33690]"
    }, {
      "left" : "if (c == quote)",
      "right" : "if (c == quote)",
      "info" : "IfStatement[33814-34251]:IfStatement[33700-34137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33830-33953]:Block[33716-33839]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[33842-33850]:ExpressionStatement[33728-33736]"
    }, {
      "left" : "builder.append(buffer, start, p - start - 1);",
      "right" : "builder.append(buffer, start, p - start - 1);",
      "info" : "ExpressionStatement[33861-33906]:ExpressionStatement[33747-33792]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[33917-33943]:ReturnStatement[33803-33829]"
    }, {
      "left" : "if (c == '\\\\')",
      "right" : "if (c == '\\\\')",
      "info" : "IfStatement[33959-34251]:IfStatement[33845-34137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33974-34170]:Block[33860-34056]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[33986-33994]:ExpressionStatement[33872-33880]"
    }, {
      "left" : "builder.append(buffer, start, p - start - 1);",
      "right" : "builder.append(buffer, start, p - start - 1);",
      "info" : "ExpressionStatement[34005-34050]:ExpressionStatement[33891-33936]"
    }, {
      "left" : "builder.append(readEscapeCharacter());",
      "right" : "builder.append(readEscapeCharacter());",
      "info" : "ExpressionStatement[34061-34099]:ExpressionStatement[33947-33985]"
    }, {
      "left" : "p = pos;",
      "right" : "p = pos;",
      "info" : "ExpressionStatement[34110-34118]:ExpressionStatement[33996-34004]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[34129-34139]:ExpressionStatement[34015-34025]"
    }, {
      "left" : "start = p;",
      "right" : "start = p;",
      "info" : "ExpressionStatement[34150-34160]:ExpressionStatement[34036-34046]"
    }, {
      "left" : "if (c == '\\n')",
      "right" : "if (c == '\\n')",
      "info" : "IfStatement[34176-34251]:IfStatement[34062-34137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34191-34251]:Block[34077-34137]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[34203-34216]:ExpressionStatement[34089-34102]"
    }, {
      "left" : "lineStart = p;",
      "right" : "lineStart = p;",
      "info" : "ExpressionStatement[34227-34241]:ExpressionStatement[34113-34127]"
    }, {
      "left" : "builder.append(buffer, start, p - start);",
      "right" : "builder.append(buffer, start, p - start);",
      "info" : "ExpressionStatement[34267-34308]:ExpressionStatement[34153-34194]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[34315-34323]:ExpressionStatement[34201-34209]"
    }, {
      "left" : "if (!fillBuffer(1))",
      "right" : "if (!fillBuffer(1))",
      "info" : "IfStatement[34330-34409]:IfStatement[34216-34295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34350-34409]:Block[34236-34295]"
    }, {
      "left" : "throw syntaxError(\"Unterminated string\");",
      "right" : "throw syntaxError(\"Unterminated string\");",
      "info" : "ThrowStatement[34360-34401]:ThrowStatement[34246-34287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34568-35849]:Block[34454-35735]"
    }, {
      "left" : "StringBuilder builder = null;",
      "right" : "StringBuilder builder = null;",
      "info" : "VariableDeclarationStatement[34574-34603]:VariableDeclarationStatement[34460-34489]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[34608-34618]:VariableDeclarationStatement[34494-34504]"
    }, {
      "left" : "findNonLiteralCharacter:\n    while (true) {\n      for (; pos + i < limit; i++) {\n        switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }\n      }\n\n      // Attempt to load the entire literal into the buffer at once.\n      if (i < buffer.length) {\n        if (fillBuffer(i + 1)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n\n      // use a StringBuilder when the value is too long. This is too long to be a number!\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, pos, i);\n      pos += i;\n      i = 0;\n      if (!fillBuffer(1)) {\n        break;\n      }\n    }",
      "right" : "findNonLiteralCharacter:\n    while (true) {\n      for (; pos + i < limit; i++) {\n        switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }\n      }\n\n      // Attempt to load the entire literal into the buffer at once.\n      if (i < buffer.length) {\n        if (fillBuffer(i + 1)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n\n      // use a StringBuilder when the value is too long. This is too long to be a number!\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, pos, i);\n      pos += i;\n      i = 0;\n      if (!fillBuffer(1)) {\n        break;\n      }\n    }",
      "info" : "LabeledStatement[34624-35630]:LabeledStatement[34510-35516]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[34653-35630]:WhileStatement[34539-35516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34666-35630]:Block[34552-35516]"
    }, {
      "left" : "for (; pos + i < limit; i++)",
      "right" : "for (; pos + i < limit; i++)",
      "info" : "ForStatement[34674-35133]:ForStatement[34560-35019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34703-35133]:Block[34589-35019]"
    }, {
      "left" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }",
      "right" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }",
      "info" : "SwitchStatement[34713-35125]:SwitchStatement[34599-35011]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[34748-34757]:SwitchCase[34634-34643]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[34766-34776]:SwitchCase[34652-34662]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[34785-34794]:SwitchCase[34671-34680]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[34803-34812]:SwitchCase[34689-34698]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[34821-34830]:SwitchCase[34707-34716]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[34841-34856]:ExpressionStatement[34727-34742]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[34881-34890]:SwitchCase[34767-34776]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[34899-34908]:SwitchCase[34785-34794]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[34917-34926]:SwitchCase[34803-34812]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[34935-34944]:SwitchCase[34821-34830]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[34953-34962]:SwitchCase[34839-34848]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[34971-34980]:SwitchCase[34857-34866]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[34989-34998]:SwitchCase[34875-34884]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[35007-35017]:SwitchCase[34893-34903]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[35026-35036]:SwitchCase[34912-34922]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[35045-35055]:SwitchCase[34931-34941]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[35064-35074]:SwitchCase[34950-34960]"
    }, {
      "left" : "break findNonLiteralCharacter;",
      "right" : "break findNonLiteralCharacter;",
      "info" : "BreakStatement[35085-35115]:BreakStatement[34971-35001]"
    }, {
      "left" : "if (i < buffer.length)",
      "right" : "if (i < buffer.length)",
      "info" : "IfStatement[35210-35339]:IfStatement[35096-35225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35233-35339]:Block[35119-35225]"
    }, {
      "left" : "if (fillBuffer(i + 1))",
      "right" : "if (fillBuffer(i + 1))",
      "info" : "IfStatement[35243-35331]:IfStatement[35129-35217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35266-35297]:Block[35152-35183]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35278-35287]:ContinueStatement[35164-35173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35303-35331]:Block[35189-35217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35315-35321]:BreakStatement[35201-35207]"
    }, {
      "left" : "if (builder == null)",
      "right" : "if (builder == null)",
      "info" : "IfStatement[35437-35506]:IfStatement[35323-35392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35458-35506]:Block[35344-35392]"
    }, {
      "left" : "builder = new StringBuilder();",
      "right" : "builder = new StringBuilder();",
      "info" : "ExpressionStatement[35468-35498]:ExpressionStatement[35354-35384]"
    }, {
      "left" : "builder.append(buffer, pos, i);",
      "right" : "builder.append(buffer, pos, i);",
      "info" : "ExpressionStatement[35513-35544]:ExpressionStatement[35399-35430]"
    }, {
      "left" : "pos += i;",
      "right" : "pos += i;",
      "info" : "ExpressionStatement[35551-35560]:ExpressionStatement[35437-35446]"
    }, {
      "left" : "i = 0;",
      "right" : "i = 0;",
      "info" : "ExpressionStatement[35567-35573]:ExpressionStatement[35453-35459]"
    }, {
      "left" : "if (!fillBuffer(1))",
      "right" : "if (!fillBuffer(1))",
      "info" : "IfStatement[35580-35624]:IfStatement[35466-35510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35600-35624]:Block[35486-35510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35610-35616]:BreakStatement[35496-35502]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[35636-35650]:VariableDeclarationStatement[35522-35536]"
    }, {
      "left" : "if (builder == null)",
      "right" : "if (builder == null)",
      "info" : "IfStatement[35655-35812]:IfStatement[35541-35698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35676-35726]:Block[35562-35612]"
    }, {
      "left" : "result = new String(buffer, pos, i);",
      "right" : "result = new String(buffer, pos, i);",
      "info" : "ExpressionStatement[35684-35720]:ExpressionStatement[35570-35606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35732-35812]:Block[35618-35698]"
    }, {
      "left" : "builder.append(buffer, pos, i);",
      "right" : "builder.append(buffer, pos, i);",
      "info" : "ExpressionStatement[35740-35771]:ExpressionStatement[35626-35657]"
    }, {
      "left" : "result = builder.toString();",
      "right" : "result = builder.toString();",
      "info" : "ExpressionStatement[35778-35806]:ExpressionStatement[35664-35692]"
    }, {
      "left" : "pos += i;",
      "right" : "pos += i;",
      "info" : "ExpressionStatement[35817-35826]:ExpressionStatement[35703-35712]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35831-35845]:ReturnStatement[35717-35731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35913-36598]:Block[35799-36484]"
    }, {
      "left" : "char[] buffer = this.buffer;",
      "right" : "char[] buffer = this.buffer;",
      "info" : "VariableDeclarationStatement[36012-36040]:VariableDeclarationStatement[35898-35926]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[36045-36548]:DoStatement[35931-36434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36048-36525]:Block[35934-36411]"
    }, {
      "left" : "int p = pos;",
      "right" : "int p = pos;",
      "info" : "VariableDeclarationStatement[36056-36068]:VariableDeclarationStatement[35942-35954]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[36075-36089]:VariableDeclarationStatement[35961-35975]"
    }, {
      "left" : "while (p < l)",
      "right" : "while (p < l)",
      "info" : "WhileStatement[36174-36504]:WhileStatement[36060-36390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36188-36504]:Block[36074-36390]"
    }, {
      "left" : "int c = buffer[p++];",
      "right" : "int c = buffer[p++];",
      "info" : "VariableDeclarationStatement[36198-36218]:VariableDeclarationStatement[36084-36104]"
    }, {
      "left" : "if (c == quote)",
      "right" : "if (c == quote)",
      "info" : "IfStatement[36227-36496]:IfStatement[36113-36382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36243-36291]:Block[36129-36177]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[36255-36263]:ExpressionStatement[36141-36149]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36274-36281]:ReturnStatement[36160-36167]"
    }, {
      "left" : "if (c == '\\\\')",
      "right" : "if (c == '\\\\')",
      "info" : "IfStatement[36297-36496]:IfStatement[36183-36382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36312-36415]:Block[36198-36301]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[36324-36332]:ExpressionStatement[36210-36218]"
    }, {
      "left" : "readEscapeCharacter();",
      "right" : "readEscapeCharacter();",
      "info" : "ExpressionStatement[36343-36365]:ExpressionStatement[36229-36251]"
    }, {
      "left" : "p = pos;",
      "right" : "p = pos;",
      "info" : "ExpressionStatement[36376-36384]:ExpressionStatement[36262-36270]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[36395-36405]:ExpressionStatement[36281-36291]"
    }, {
      "left" : "if (c == '\\n')",
      "right" : "if (c == '\\n')",
      "info" : "IfStatement[36421-36496]:IfStatement[36307-36382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36436-36496]:Block[36322-36382]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[36448-36461]:ExpressionStatement[36334-36347]"
    }, {
      "left" : "lineStart = p;",
      "right" : "lineStart = p;",
      "info" : "ExpressionStatement[36472-36486]:ExpressionStatement[36358-36372]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[36511-36519]:ExpressionStatement[36397-36405]"
    }, {
      "left" : "throw syntaxError(\"Unterminated string\");",
      "right" : "throw syntaxError(\"Unterminated string\");",
      "info" : "ThrowStatement[36553-36594]:ThrowStatement[36439-36480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36654-37193]:Block[36540-37079]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[36660-37189]:DoStatement[36546-37075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36663-37166]:Block[36549-37052]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[36671-36681]:VariableDeclarationStatement[36557-36567]"
    }, {
      "left" : "for (; pos + i < limit; i++)",
      "right" : "for (; pos + i < limit; i++)",
      "info" : "ForStatement[36688-37144]:ForStatement[36574-37030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36717-37144]:Block[36603-37030]"
    }, {
      "left" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos += i;\n          return;\n        }",
      "right" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos += i;\n          return;\n        }",
      "info" : "SwitchStatement[36727-37136]:SwitchStatement[36613-37022]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[36762-36771]:SwitchCase[36648-36657]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[36780-36790]:SwitchCase[36666-36676]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[36799-36808]:SwitchCase[36685-36694]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[36817-36826]:SwitchCase[36703-36712]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[36835-36844]:SwitchCase[36721-36730]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[36855-36870]:ExpressionStatement[36741-36756]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[36895-36904]:SwitchCase[36781-36790]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[36913-36922]:SwitchCase[36799-36808]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[36931-36940]:SwitchCase[36817-36826]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[36949-36958]:SwitchCase[36835-36844]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[36967-36976]:SwitchCase[36853-36862]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[36985-36994]:SwitchCase[36871-36880]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[37003-37012]:SwitchCase[36889-36898]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[37021-37031]:SwitchCase[36907-36917]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[37040-37050]:SwitchCase[36926-36936]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[37059-37069]:SwitchCase[36945-36955]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[37078-37088]:SwitchCase[36964-36974]"
    }, {
      "left" : "pos += i;",
      "right" : "pos += i;",
      "info" : "ExpressionStatement[37099-37108]:ExpressionStatement[36985-36994]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37119-37126]:ReturnStatement[37005-37012]"
    }, {
      "left" : "pos += i;",
      "right" : "pos += i;",
      "info" : "ExpressionStatement[37151-37160]:ExpressionStatement[37037-37046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37774-39562]:Block[37660-39448]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[37780-37795]:VariableDeclarationStatement[37666-37681]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[37800-37849]:IfStatement[37686-37735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37822-37849]:Block[37708-37735]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[37830-37843]:ExpressionStatement[37716-37729]"
    }, {
      "left" : "int result;",
      "right" : "int result;",
      "info" : "VariableDeclarationStatement[37855-37866]:VariableDeclarationStatement[37741-37752]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[37871-38295]:IfStatement[37757-38181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37893-38295]:Block[37779-38181]"
    }, {
      "left" : "result = (int) peekedLong;",
      "right" : "result = (int) peekedLong;",
      "info" : "ExpressionStatement[37901-37927]:ExpressionStatement[37787-37813]"
    }, {
      "left" : "if (peekedLong != result)",
      "right" : "if (peekedLong != result)",
      "info" : "IfStatement[37934-38204]:IfStatement[37820-38090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37960-38204]:Block[37846-38090]"
    }, {
      "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[38023-38196]:ThrowStatement[37909-38082]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[38211-38232]:ExpressionStatement[38097-38118]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[38239-38268]:ExpressionStatement[38125-38154]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38275-38289]:ReturnStatement[38161-38175]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[38301-39026]:IfStatement[38187-38912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38325-38431]:Block[38211-38317]"
    }, {
      "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
      "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
      "info" : "ExpressionStatement[38333-38392]:ExpressionStatement[38219-38278]"
    }, {
      "left" : "pos += peekedNumberLength;",
      "right" : "pos += peekedNumberLength;",
      "info" : "ExpressionStatement[38399-38425]:ExpressionStatement[38285-38311]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[38437-39026]:IfStatement[38323-38912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38497-38839]:Block[38383-38725]"
    }, {
      "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "info" : "ExpressionStatement[38505-38576]:ExpressionStatement[38391-38462]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38583-38833]:TryStatement[38469-38719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38587-38736]:Block[38473-38622]"
    }, {
      "left" : "result = Integer.parseInt(peekedString);",
      "right" : "result = Integer.parseInt(peekedString);",
      "info" : "ExpressionStatement[38597-38637]:ExpressionStatement[38483-38523]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[38646-38667]:ExpressionStatement[38532-38553]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[38676-38705]:ExpressionStatement[38562-38591]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38714-38728]:ReturnStatement[38600-38614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38775-38833]:Block[38661-38719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38845-39026]:Block[38731-38912]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected an int but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new IllegalStateException(\"Expected an int but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[38853-39020]:ThrowStatement[38739-38906]"
    }, {
      "left" : "peeked = PEEKED_BUFFERED;",
      "right" : "peeked = PEEKED_BUFFERED;",
      "info" : "ExpressionStatement[39032-39057]:ExpressionStatement[38918-38943]"
    }, {
      "left" : "double asDouble = Double.parseDouble(peekedString);",
      "right" : "double asDouble = Double.parseDouble(peekedString);",
      "info" : "VariableDeclarationStatement[39062-39113]:VariableDeclarationStatement[38948-38999]"
    }, {
      "left" : "result = (int) asDouble;",
      "right" : "result = (int) asDouble;",
      "info" : "ExpressionStatement[39161-39185]:ExpressionStatement[39047-39071]"
    }, {
      "left" : "if (result != asDouble)",
      "right" : "if (result != asDouble)",
      "info" : "IfStatement[39190-39454]:IfStatement[39076-39340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39214-39454]:Block[39100-39340]"
    }, {
      "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[39275-39448]:ThrowStatement[39161-39334]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[39459-39479]:ExpressionStatement[39345-39365]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[39484-39505]:ExpressionStatement[39370-39391]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[39510-39539]:ExpressionStatement[39396-39425]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[39544-39558]:ReturnStatement[39430-39444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39689-39788]:Block[39575-39674]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[39695-39716]:ExpressionStatement[39581-39602]"
    }, {
      "left" : "stack[0] = JsonScope.CLOSED;",
      "right" : "stack[0] = JsonScope.CLOSED;",
      "info" : "ExpressionStatement[39721-39749]:ExpressionStatement[39607-39635]"
    }, {
      "left" : "stackSize = 1;",
      "right" : "stackSize = 1;",
      "info" : "ExpressionStatement[39754-39768]:ExpressionStatement[39640-39654]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[39773-39784]:ExpressionStatement[39659-39670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40060-41058]:Block[39946-40944]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[40066-40080]:VariableDeclarationStatement[39952-39966]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[40085-40980]:DoStatement[39971-40866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40088-40960]:Block[39974-40846]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[40096-40111]:VariableDeclarationStatement[39982-39997]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[40118-40171]:IfStatement[40004-40057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40140-40171]:Block[40026-40057]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[40150-40163]:ExpressionStatement[40036-40049]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_ARRAY)",
      "right" : "if (p == PEEKED_BEGIN_ARRAY)",
      "info" : "IfStatement[40179-40926]:IfStatement[40065-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40208-40271]:Block[40094-40157]"
    }, {
      "left" : "push(JsonScope.EMPTY_ARRAY);",
      "right" : "push(JsonScope.EMPTY_ARRAY);",
      "info" : "ExpressionStatement[40218-40246]:ExpressionStatement[40104-40132]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[40255-40263]:ExpressionStatement[40141-40149]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_OBJECT)",
      "right" : "if (p == PEEKED_BEGIN_OBJECT)",
      "info" : "IfStatement[40277-40926]:IfStatement[40163-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40307-40371]:Block[40193-40257]"
    }, {
      "left" : "push(JsonScope.EMPTY_OBJECT);",
      "right" : "push(JsonScope.EMPTY_OBJECT);",
      "info" : "ExpressionStatement[40317-40346]:ExpressionStatement[40203-40232]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[40355-40363]:ExpressionStatement[40241-40249]"
    }, {
      "left" : "if (p == PEEKED_END_ARRAY)",
      "right" : "if (p == PEEKED_END_ARRAY)",
      "info" : "IfStatement[40377-40926]:IfStatement[40263-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40404-40451]:Block[40290-40337]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[40414-40426]:ExpressionStatement[40300-40312]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[40435-40443]:ExpressionStatement[40321-40329]"
    }, {
      "left" : "if (p == PEEKED_END_OBJECT)",
      "right" : "if (p == PEEKED_END_OBJECT)",
      "info" : "IfStatement[40457-40926]:IfStatement[40343-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40485-40532]:Block[40371-40418]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[40495-40507]:ExpressionStatement[40381-40393]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[40516-40524]:ExpressionStatement[40402-40410]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
      "right" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
      "info" : "IfStatement[40538-40926]:IfStatement[40424-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40593-40631]:Block[40479-40517]"
    }, {
      "left" : "skipUnquotedValue();",
      "right" : "skipUnquotedValue();",
      "info" : "ExpressionStatement[40603-40623]:ExpressionStatement[40489-40509]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
      "info" : "IfStatement[40637-40926]:IfStatement[40523-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40702-40742]:Block[40588-40628]"
    }, {
      "left" : "skipQuotedValue('\\'');",
      "right" : "skipQuotedValue('\\'');",
      "info" : "ExpressionStatement[40712-40734]:ExpressionStatement[40598-40620]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
      "info" : "IfStatement[40748-40926]:IfStatement[40634-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40813-40852]:Block[40699-40738]"
    }, {
      "left" : "skipQuotedValue('\"');",
      "right" : "skipQuotedValue('\"');",
      "info" : "ExpressionStatement[40823-40844]:ExpressionStatement[40709-40730]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[40858-40926]:IfStatement[40744-40812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40882-40926]:Block[40768-40812]"
    }, {
      "left" : "pos += peekedNumberLength;",
      "right" : "pos += peekedNumberLength;",
      "info" : "ExpressionStatement[40892-40918]:ExpressionStatement[40778-40804]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[40933-40954]:ExpressionStatement[40819-40840]"
    }, {
      "left" : "pathIndices[stackSize - 1]++;",
      "right" : "pathIndices[stackSize - 1]++;",
      "info" : "ExpressionStatement[40986-41015]:ExpressionStatement[40872-40901]"
    }, {
      "left" : "pathNames[stackSize - 1] = \"null\";",
      "right" : "pathNames[stackSize - 1] = \"null\";",
      "info" : "ExpressionStatement[41020-41054]:ExpressionStatement[40906-40940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41092-41616]:Block[40978-41502]"
    }, {
      "left" : "if (stackSize == stack.length)",
      "right" : "if (stackSize == stack.length)",
      "info" : "IfStatement[41098-41579]:IfStatement[40984-41465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41129-41579]:Block[41015-41465]"
    }, {
      "left" : "int[] newStack = new int[stackSize * 2];",
      "right" : "int[] newStack = new int[stackSize * 2];",
      "info" : "VariableDeclarationStatement[41137-41177]:VariableDeclarationStatement[41023-41063]"
    }, {
      "left" : "int[] newPathIndices = new int[stackSize * 2];",
      "right" : "int[] newPathIndices = new int[stackSize * 2];",
      "info" : "VariableDeclarationStatement[41184-41230]:VariableDeclarationStatement[41070-41116]"
    }, {
      "left" : "String[] newPathNames = new String[stackSize * 2];",
      "right" : "String[] newPathNames = new String[stackSize * 2];",
      "info" : "VariableDeclarationStatement[41237-41287]:VariableDeclarationStatement[41123-41173]"
    }, {
      "left" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "right" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "info" : "ExpressionStatement[41294-41345]:ExpressionStatement[41180-41231]"
    }, {
      "left" : "System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);",
      "right" : "System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);",
      "info" : "ExpressionStatement[41352-41415]:ExpressionStatement[41238-41301]"
    }, {
      "left" : "System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);",
      "right" : "System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);",
      "info" : "ExpressionStatement[41422-41481]:ExpressionStatement[41308-41367]"
    }, {
      "left" : "stack = newStack;",
      "right" : "stack = newStack;",
      "info" : "ExpressionStatement[41488-41505]:ExpressionStatement[41374-41391]"
    }, {
      "left" : "pathIndices = newPathIndices;",
      "right" : "pathIndices = newPathIndices;",
      "info" : "ExpressionStatement[41512-41541]:ExpressionStatement[41398-41427]"
    }, {
      "left" : "pathNames = newPathNames;",
      "right" : "pathNames = newPathNames;",
      "info" : "ExpressionStatement[41548-41573]:ExpressionStatement[41434-41459]"
    }, {
      "left" : "stack[stackSize++] = newTop;",
      "right" : "stack[stackSize++] = newTop;",
      "info" : "ExpressionStatement[41584-41612]:ExpressionStatement[41470-41498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41844-42490]:Block[41730-42376]"
    }, {
      "left" : "char[] buffer = this.buffer;",
      "right" : "char[] buffer = this.buffer;",
      "info" : "VariableDeclarationStatement[41850-41878]:VariableDeclarationStatement[41736-41764]"
    }, {
      "left" : "lineStart -= pos;",
      "right" : "lineStart -= pos;",
      "info" : "ExpressionStatement[41883-41900]:ExpressionStatement[41769-41786]"
    }, {
      "left" : "if (limit != pos)",
      "right" : "if (limit != pos)",
      "info" : "IfStatement[41905-42035]:IfStatement[41791-41921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41923-42005]:Block[41809-41891]"
    }, {
      "left" : "limit -= pos;",
      "right" : "limit -= pos;",
      "info" : "ExpressionStatement[41931-41944]:ExpressionStatement[41817-41830]"
    }, {
      "left" : "System.arraycopy(buffer, pos, buffer, 0, limit);",
      "right" : "System.arraycopy(buffer, pos, buffer, 0, limit);",
      "info" : "ExpressionStatement[41951-41999]:ExpressionStatement[41837-41885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42011-42035]:Block[41897-41921]"
    }, {
      "left" : "limit = 0;",
      "right" : "limit = 0;",
      "info" : "ExpressionStatement[42019-42029]:ExpressionStatement[41905-41915]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[42041-42049]:ExpressionStatement[41927-41935]"
    }, {
      "left" : "int total;",
      "right" : "int total;",
      "info" : "VariableDeclarationStatement[42054-42064]:VariableDeclarationStatement[41940-41950]"
    }, {
      "left" : "while ((total = in.read(buffer, limit, buffer.length - limit)) != -1)",
      "right" : "while ((total = in.read(buffer, limit, buffer.length - limit)) != -1)",
      "info" : "WhileStatement[42069-42468]:WhileStatement[41955-42354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42139-42468]:Block[42025-42354]"
    }, {
      "left" : "limit += total;",
      "right" : "limit += total;",
      "info" : "ExpressionStatement[42147-42162]:ExpressionStatement[42033-42048]"
    }, {
      "left" : "if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff')",
      "right" : "if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff')",
      "info" : "IfStatement[42261-42402]:IfStatement[42147-42288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42338-42402]:Block[42224-42288]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[42348-42354]:ExpressionStatement[42234-42240]"
    }, {
      "left" : "lineStart++;",
      "right" : "lineStart++;",
      "info" : "ExpressionStatement[42363-42375]:ExpressionStatement[42249-42261]"
    }, {
      "left" : "minimum++;",
      "right" : "minimum++;",
      "info" : "ExpressionStatement[42384-42394]:ExpressionStatement[42270-42280]"
    }, {
      "left" : "if (limit >= minimum)",
      "right" : "if (limit >= minimum)",
      "info" : "IfStatement[42410-42462]:IfStatement[42296-42348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42432-42462]:Block[42318-42348]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42442-42454]:ReturnStatement[42328-42340]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42473-42486]:ReturnStatement[42359-42372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42514-42546]:Block[42400-42432]"
    }, {
      "left" : "return lineNumber + 1;",
      "right" : "return lineNumber + 1;",
      "info" : "ReturnStatement[42520-42542]:ReturnStatement[42406-42428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42572-42609]:Block[42458-42495]"
    }, {
      "left" : "return pos - lineStart + 1;",
      "right" : "return pos - lineStart + 1;",
      "info" : "ReturnStatement[42578-42605]:ReturnStatement[42464-42491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42980-45315]:Block[42866-45201]"
    }, {
      "left" : "char[] buffer = this.buffer;",
      "right" : "char[] buffer = this.buffer;",
      "info" : "VariableDeclarationStatement[43465-43493]:VariableDeclarationStatement[43351-43379]"
    }, {
      "left" : "int p = pos;",
      "right" : "int p = pos;",
      "info" : "VariableDeclarationStatement[43498-43510]:VariableDeclarationStatement[43384-43396]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[43515-43529]:VariableDeclarationStatement[43401-43415]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[43534-45132]:WhileStatement[43420-45018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43547-45132]:Block[43433-45018]"
    }, {
      "left" : "if (p == l)",
      "right" : "if (p == l)",
      "info" : "IfStatement[43555-43686]:IfStatement[43441-43572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43567-43686]:Block[43453-43572]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[43577-43585]:ExpressionStatement[43463-43471]"
    }, {
      "left" : "if (!fillBuffer(1))",
      "right" : "if (!fillBuffer(1))",
      "info" : "IfStatement[43594-43642]:IfStatement[43480-43528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43614-43642]:Block[43500-43528]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43626-43632]:BreakStatement[43512-43518]"
    }, {
      "left" : "p = pos;",
      "right" : "p = pos;",
      "info" : "ExpressionStatement[43651-43659]:ExpressionStatement[43537-43545]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[43668-43678]:ExpressionStatement[43554-43564]"
    }, {
      "left" : "int c = buffer[p++];",
      "right" : "int c = buffer[p++];",
      "info" : "VariableDeclarationStatement[43694-43714]:VariableDeclarationStatement[43580-43600]"
    }, {
      "left" : "if (c == '\\n')",
      "right" : "if (c == '\\n')",
      "info" : "IfStatement[43721-43881]:IfStatement[43607-43767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43736-43808]:Block[43622-43694]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[43746-43759]:ExpressionStatement[43632-43645]"
    }, {
      "left" : "lineStart = p;",
      "right" : "lineStart = p;",
      "info" : "ExpressionStatement[43768-43782]:ExpressionStatement[43654-43668]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[43791-43800]:ContinueStatement[43677-43686]"
    }, {
      "left" : "if (c == ' ' || c == '\\r' || c == '\\t')",
      "right" : "if (c == ' ' || c == '\\r' || c == '\\t')",
      "info" : "IfStatement[43814-43881]:IfStatement[43700-43767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43854-43881]:Block[43740-43767]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[43864-43873]:ContinueStatement[43750-43759]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[43889-45126]:IfStatement[43775-45012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43903-44738]:Block[43789-44624]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[43913-43921]:ExpressionStatement[43799-43807]"
    }, {
      "left" : "if (p == l)",
      "right" : "if (p == l)",
      "info" : "IfStatement[43930-44193]:IfStatement[43816-44079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43942-44193]:Block[43828-44079]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[43954-43960]:ExpressionStatement[43840-43846]"
    }, {
      "left" : "boolean charsLoaded = fillBuffer(2);",
      "right" : "boolean charsLoaded = fillBuffer(2);",
      "info" : "VariableDeclarationStatement[44041-44077]:VariableDeclarationStatement[43927-43963]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[44088-44094]:ExpressionStatement[43974-43980]"
    }, {
      "left" : "if (!charsLoaded)",
      "right" : "if (!charsLoaded)",
      "info" : "IfStatement[44130-44183]:IfStatement[44016-44069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44148-44183]:Block[44034-44069]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[44162-44171]:ReturnStatement[44048-44057]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[44203-44218]:ExpressionStatement[44089-44104]"
    }, {
      "left" : "char peek = buffer[pos];",
      "right" : "char peek = buffer[pos];",
      "info" : "VariableDeclarationStatement[44227-44251]:VariableDeclarationStatement[44113-44137]"
    }, {
      "left" : "switch (peek) {\n        case '*':\n          // skip a /* c-style comment */\n          pos++;\n          if (!skipTo(\"*/\")) {\n            throw syntaxError(\"Unterminated comment\");\n          }\n          p = pos + 2;\n          l = limit;\n          continue;\n\n        case '/':\n          // skip a // end-of-line comment\n          pos++;\n          skipToEndOfLine();\n          p = pos;\n          l = limit;\n          continue;\n\n        default:\n          return c;\n        }",
      "right" : "switch (peek) {\n        case '*':\n          // skip a /* c-style comment */\n          pos++;\n          if (!skipTo(\"*/\")) {\n            throw syntaxError(\"Unterminated comment\");\n          }\n          p = pos + 2;\n          l = limit;\n          continue;\n\n        case '/':\n          // skip a // end-of-line comment\n          pos++;\n          skipToEndOfLine();\n          p = pos;\n          l = limit;\n          continue;\n\n        default:\n          return c;\n        }",
      "info" : "SwitchStatement[44260-44730]:SwitchStatement[44146-44616]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[44284-44293]:SwitchCase[44170-44179]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[44346-44352]:ExpressionStatement[44232-44238]"
    }, {
      "left" : "if (!skipTo(\"*/\"))",
      "right" : "if (!skipTo(\"*/\"))",
      "info" : "IfStatement[44363-44450]:IfStatement[44249-44336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44382-44450]:Block[44268-44336]"
    }, {
      "left" : "throw syntaxError(\"Unterminated comment\");",
      "right" : "throw syntaxError(\"Unterminated comment\");",
      "info" : "ThrowStatement[44396-44438]:ThrowStatement[44282-44324]"
    }, {
      "left" : "p = pos + 2;",
      "right" : "p = pos + 2;",
      "info" : "ExpressionStatement[44461-44473]:ExpressionStatement[44347-44359]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[44484-44494]:ExpressionStatement[44370-44380]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[44505-44514]:ContinueStatement[44391-44400]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[44524-44533]:SwitchCase[44410-44419]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[44587-44593]:ExpressionStatement[44473-44479]"
    }, {
      "left" : "skipToEndOfLine();",
      "right" : "skipToEndOfLine();",
      "info" : "ExpressionStatement[44604-44622]:ExpressionStatement[44490-44508]"
    }, {
      "left" : "p = pos;",
      "right" : "p = pos;",
      "info" : "ExpressionStatement[44633-44641]:ExpressionStatement[44519-44527]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[44652-44662]:ExpressionStatement[44538-44548]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[44673-44682]:ContinueStatement[44559-44568]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44692-44700]:SwitchCase[44578-44586]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[44711-44720]:ReturnStatement[44597-44606]"
    }, {
      "left" : "if (c == '#')",
      "right" : "if (c == '#')",
      "info" : "IfStatement[44744-45126]:IfStatement[44630-45012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44758-45076]:Block[44644-44962]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[44768-44776]:ExpressionStatement[44654-44662]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[44990-45005]:ExpressionStatement[44876-44891]"
    }, {
      "left" : "skipToEndOfLine();",
      "right" : "skipToEndOfLine();",
      "info" : "ExpressionStatement[45014-45032]:ExpressionStatement[44900-44918]"
    }, {
      "left" : "p = pos;",
      "right" : "p = pos;",
      "info" : "ExpressionStatement[45041-45049]:ExpressionStatement[44927-44935]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[45058-45068]:ExpressionStatement[44944-44954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45082-45126]:Block[44968-45012]"
    }, {
      "left" : "pos = p;",
      "right" : "pos = p;",
      "info" : "ExpressionStatement[45092-45100]:ExpressionStatement[44978-44986]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[45109-45118]:ReturnStatement[44995-45004]"
    }, {
      "left" : "if (throwOnEof)",
      "right" : "if (throwOnEof)",
      "info" : "IfStatement[45137-45311]:IfStatement[45023-45197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45153-45281]:Block[45039-45167]"
    }, {
      "left" : "throw new EOFException(\"End of input\"\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "right" : "throw new EOFException(\"End of input\"\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "info" : "ThrowStatement[45161-45275]:ThrowStatement[45047-45161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45287-45311]:Block[45173-45197]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[45295-45305]:ReturnStatement[45181-45191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45366-45482]:Block[45252-45368]"
    }, {
      "left" : "if (!lenient)",
      "right" : "if (!lenient)",
      "info" : "IfStatement[45372-45478]:IfStatement[45258-45364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45386-45478]:Block[45272-45364]"
    }, {
      "left" : "throw syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");",
      "right" : "throw syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");",
      "info" : "ThrowStatement[45394-45472]:ThrowStatement[45280-45358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45717-45939]:Block[45603-45825]"
    }, {
      "left" : "while (pos < limit || fillBuffer(1))",
      "right" : "while (pos < limit || fillBuffer(1))",
      "info" : "WhileStatement[45723-45935]:WhileStatement[45609-45821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45760-45935]:Block[45646-45821]"
    }, {
      "left" : "char c = buffer[pos++];",
      "right" : "char c = buffer[pos++];",
      "info" : "VariableDeclarationStatement[45768-45791]:VariableDeclarationStatement[45654-45677]"
    }, {
      "left" : "if (c == '\\n')",
      "right" : "if (c == '\\n')",
      "info" : "IfStatement[45798-45929]:IfStatement[45684-45815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45813-45884]:Block[45699-45770]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[45823-45836]:ExpressionStatement[45709-45722]"
    }, {
      "left" : "lineStart = pos;",
      "right" : "lineStart = pos;",
      "info" : "ExpressionStatement[45845-45861]:ExpressionStatement[45731-45747]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45870-45876]:BreakStatement[45756-45762]"
    }, {
      "left" : "if (c == '\\r')",
      "right" : "if (c == '\\r')",
      "info" : "IfStatement[45890-45929]:IfStatement[45776-45815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45905-45929]:Block[45791-45815]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45915-45921]:BreakStatement[45801-45807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46083-46480]:Block[45969-46366]"
    }, {
      "left" : "outer:\n    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n      if (buffer[pos] == '\\n') {\n        lineNumber++;\n        lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (buffer[pos + c] != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
      "right" : "outer:\n    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n      if (buffer[pos] == '\\n') {\n        lineNumber++;\n        lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (buffer[pos + c] != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
      "info" : "LabeledStatement[46089-46458]:LabeledStatement[45975-46344]"
    }, {
      "left" : "for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++)",
      "right" : "for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++)",
      "info" : "ForStatement[46100-46458]:ForStatement[45986-46344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46177-46458]:Block[46063-46344]"
    }, {
      "left" : "if (buffer[pos] == '\\n')",
      "right" : "if (buffer[pos] == '\\n')",
      "info" : "IfStatement[46185-46288]:IfStatement[46071-46174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46210-46288]:Block[46096-46174]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[46220-46233]:ExpressionStatement[46106-46119]"
    }, {
      "left" : "lineStart = pos + 1;",
      "right" : "lineStart = pos + 1;",
      "info" : "ExpressionStatement[46242-46262]:ExpressionStatement[46128-46148]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[46271-46280]:ContinueStatement[46157-46166]"
    }, {
      "left" : "for (int c = 0; c < toFind.length(); c++)",
      "right" : "for (int c = 0; c < toFind.length(); c++)",
      "info" : "ForStatement[46295-46433]:ForStatement[46181-46319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46337-46433]:Block[46223-46319]"
    }, {
      "left" : "if (buffer[pos + c] != toFind.charAt(c))",
      "right" : "if (buffer[pos + c] != toFind.charAt(c))",
      "info" : "IfStatement[46347-46425]:IfStatement[46233-46311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46388-46425]:Block[46274-46311]"
    }, {
      "left" : "continue outer;",
      "right" : "continue outer;",
      "info" : "ContinueStatement[46400-46415]:ContinueStatement[46286-46301]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46440-46452]:ReturnStatement[46326-46338]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46463-46476]:ReturnStatement[46349-46362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46519-46636]:Block[46405-46522]"
    }, {
      "left" : "return getClass().getSimpleName()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();",
      "right" : "return getClass().getSimpleName()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();",
      "info" : "ReturnStatement[46525-46632]:ReturnStatement[46411-46518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46801-47532]:Block[46687-47418]"
    }, {
      "left" : "StringBuilder result = new StringBuilder().append('$');",
      "right" : "StringBuilder result = new StringBuilder().append('$');",
      "info" : "VariableDeclarationStatement[46807-46862]:VariableDeclarationStatement[46693-46748]"
    }, {
      "left" : "for (int i = 0, size = stackSize; i < size; i++)",
      "right" : "for (int i = 0, size = stackSize; i < size; i++)",
      "info" : "ForStatement[46867-47498]:ForStatement[46753-47384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46916-47498]:Block[46802-47384]"
    }, {
      "left" : "switch (stack[i]) {\n        case JsonScope.EMPTY_ARRAY:\n        case JsonScope.NONEMPTY_ARRAY:\n          result.append('[').append(pathIndices[i]).append(']');\n          break;\n\n        case JsonScope.EMPTY_OBJECT:\n        case JsonScope.DANGLING_NAME:\n        case JsonScope.NONEMPTY_OBJECT:\n          result.append('.');\n          if (pathNames[i] != null) {\n            result.append(pathNames[i]);\n          }\n          break;\n\n        case JsonScope.NONEMPTY_DOCUMENT:\n        case JsonScope.EMPTY_DOCUMENT:\n        case JsonScope.CLOSED:\n          break;\n      }",
      "right" : "switch (stack[i]) {\n        case JsonScope.EMPTY_ARRAY:\n        case JsonScope.NONEMPTY_ARRAY:\n          result.append('[').append(pathIndices[i]).append(']');\n          break;\n\n        case JsonScope.EMPTY_OBJECT:\n        case JsonScope.DANGLING_NAME:\n        case JsonScope.NONEMPTY_OBJECT:\n          result.append('.');\n          if (pathNames[i] != null) {\n            result.append(pathNames[i]);\n          }\n          break;\n\n        case JsonScope.NONEMPTY_DOCUMENT:\n        case JsonScope.EMPTY_DOCUMENT:\n        case JsonScope.CLOSED:\n          break;\n      }",
      "info" : "SwitchStatement[46924-47492]:SwitchStatement[46810-47378]"
    }, {
      "left" : "case JsonScope.EMPTY_ARRAY:",
      "right" : "case JsonScope.EMPTY_ARRAY:",
      "info" : "SwitchCase[46952-46979]:SwitchCase[46838-46865]"
    }, {
      "left" : "case JsonScope.NONEMPTY_ARRAY:",
      "right" : "case JsonScope.NONEMPTY_ARRAY:",
      "info" : "SwitchCase[46988-47018]:SwitchCase[46874-46904]"
    }, {
      "left" : "result.append('[').append(pathIndices[i]).append(']');",
      "right" : "result.append('[').append(pathIndices[i]).append(']');",
      "info" : "ExpressionStatement[47029-47083]:ExpressionStatement[46915-46969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47094-47100]:BreakStatement[46980-46986]"
    }, {
      "left" : "case JsonScope.EMPTY_OBJECT:",
      "right" : "case JsonScope.EMPTY_OBJECT:",
      "info" : "SwitchCase[47110-47138]:SwitchCase[46996-47024]"
    }, {
      "left" : "case JsonScope.DANGLING_NAME:",
      "right" : "case JsonScope.DANGLING_NAME:",
      "info" : "SwitchCase[47147-47176]:SwitchCase[47033-47062]"
    }, {
      "left" : "case JsonScope.NONEMPTY_OBJECT:",
      "right" : "case JsonScope.NONEMPTY_OBJECT:",
      "info" : "SwitchCase[47185-47216]:SwitchCase[47071-47102]"
    }, {
      "left" : "result.append('.');",
      "right" : "result.append('.');",
      "info" : "ExpressionStatement[47227-47246]:ExpressionStatement[47113-47132]"
    }, {
      "left" : "if (pathNames[i] != null)",
      "right" : "if (pathNames[i] != null)",
      "info" : "IfStatement[47257-47337]:IfStatement[47143-47223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47283-47337]:Block[47169-47223]"
    }, {
      "left" : "result.append(pathNames[i]);",
      "right" : "result.append(pathNames[i]);",
      "info" : "ExpressionStatement[47297-47325]:ExpressionStatement[47183-47211]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47348-47354]:BreakStatement[47234-47240]"
    }, {
      "left" : "case JsonScope.NONEMPTY_DOCUMENT:",
      "right" : "case JsonScope.NONEMPTY_DOCUMENT:",
      "info" : "SwitchCase[47364-47397]:SwitchCase[47250-47283]"
    }, {
      "left" : "case JsonScope.EMPTY_DOCUMENT:",
      "right" : "case JsonScope.EMPTY_DOCUMENT:",
      "info" : "SwitchCase[47406-47436]:SwitchCase[47292-47322]"
    }, {
      "left" : "case JsonScope.CLOSED:",
      "right" : "case JsonScope.CLOSED:",
      "info" : "SwitchCase[47445-47467]:SwitchCase[47331-47353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47478-47484]:BreakStatement[47364-47370]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[47503-47528]:ReturnStatement[47389-47414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47945-49157]:Block[47831-49043]"
    }, {
      "left" : "if (pos == limit && !fillBuffer(1))",
      "right" : "if (pos == limit && !fillBuffer(1))",
      "info" : "IfStatement[47951-48051]:IfStatement[47837-47937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47987-48051]:Block[47873-47937]"
    }, {
      "left" : "throw syntaxError(\"Unterminated escape sequence\");",
      "right" : "throw syntaxError(\"Unterminated escape sequence\");",
      "info" : "ThrowStatement[47995-48045]:ThrowStatement[47881-47931]"
    }, {
      "left" : "char escaped = buffer[pos++];",
      "right" : "char escaped = buffer[pos++];",
      "info" : "VariableDeclarationStatement[48057-48086]:VariableDeclarationStatement[47943-47972]"
    }, {
      "left" : "switch (escaped) {\n    case 'u':\n      if (pos + 4 > limit && !fillBuffer(4)) {\n        throw syntaxError(\"Unterminated escape sequence\");\n      }\n      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n      char result = 0;\n      for (int i = pos, end = i + 4; i < end; i++) {\n        char c = buffer[i];\n        result <<= 4;\n        if (c >= '0' && c <= '9') {\n          result += (c - '0');\n        } else if (c >= 'a' && c <= 'f') {\n          result += (c - 'a' + 10);\n        } else if (c >= 'A' && c <= 'F') {\n          result += (c - 'A' + 10);\n        } else {\n          throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));\n        }\n      }\n      pos += 4;\n      return result;\n\n    case 't':\n      return '\\t';\n\n    case 'b':\n      return '\\b';\n\n    case 'n':\n      return '\\n';\n\n    case 'r':\n      return '\\r';\n\n    case 'f':\n      return '\\f';\n\n    case '\\n':\n      lineNumber++;\n      lineStart = pos;\n      // fall-through\n\n    case '\\'':\n    case '\"':\n    case '\\\\':\n    default:\n      return escaped;\n    }",
      "right" : "switch (escaped) {\n    case 'u':\n      if (pos + 4 > limit && !fillBuffer(4)) {\n        throw syntaxError(\"Unterminated escape sequence\");\n      }\n      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n      char result = 0;\n      for (int i = pos, end = i + 4; i < end; i++) {\n        char c = buffer[i];\n        result <<= 4;\n        if (c >= '0' && c <= '9') {\n          result += (c - '0');\n        } else if (c >= 'a' && c <= 'f') {\n          result += (c - 'a' + 10);\n        } else if (c >= 'A' && c <= 'F') {\n          result += (c - 'A' + 10);\n        } else {\n          throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));\n        }\n      }\n      pos += 4;\n      return result;\n\n    case 't':\n      return '\\t';\n\n    case 'b':\n      return '\\b';\n\n    case 'n':\n      return '\\n';\n\n    case 'r':\n      return '\\r';\n\n    case 'f':\n      return '\\f';\n\n    case '\\n':\n      lineNumber++;\n      lineStart = pos;\n      // fall-through\n\n    case '\\'':\n    case '\"':\n    case '\\\\':\n    default:\n      return escaped;\n    }",
      "info" : "SwitchStatement[48091-49153]:SwitchStatement[47977-49039]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[48114-48123]:SwitchCase[48000-48009]"
    }, {
      "left" : "if (pos + 4 > limit && !fillBuffer(4))",
      "right" : "if (pos + 4 > limit && !fillBuffer(4))",
      "info" : "IfStatement[48130-48237]:IfStatement[48016-48123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48169-48237]:Block[48055-48123]"
    }, {
      "left" : "throw syntaxError(\"Unterminated escape sequence\");",
      "right" : "throw syntaxError(\"Unterminated escape sequence\");",
      "info" : "ThrowStatement[48179-48229]:ThrowStatement[48065-48115]"
    }, {
      "left" : "char result = 0;",
      "right" : "char result = 0;",
      "info" : "VariableDeclarationStatement[48321-48337]:VariableDeclarationStatement[48207-48223]"
    }, {
      "left" : "for (int i = pos, end = i + 4; i < end; i++)",
      "right" : "for (int i = pos, end = i + 4; i < end; i++)",
      "info" : "ForStatement[48344-48779]:ForStatement[48230-48665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48389-48779]:Block[48275-48665]"
    }, {
      "left" : "char c = buffer[i];",
      "right" : "char c = buffer[i];",
      "info" : "VariableDeclarationStatement[48399-48418]:VariableDeclarationStatement[48285-48304]"
    }, {
      "left" : "result <<= 4;",
      "right" : "result <<= 4;",
      "info" : "ExpressionStatement[48427-48440]:ExpressionStatement[48313-48326]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[48449-48771]:IfStatement[48335-48657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48475-48517]:Block[48361-48403]"
    }, {
      "left" : "result += (c - '0');",
      "right" : "result += (c - '0');",
      "info" : "ExpressionStatement[48487-48507]:ExpressionStatement[48373-48393]"
    }, {
      "left" : "if (c >= 'a' && c <= 'f')",
      "right" : "if (c >= 'a' && c <= 'f')",
      "info" : "IfStatement[48523-48771]:IfStatement[48409-48657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48549-48596]:Block[48435-48482]"
    }, {
      "left" : "result += (c - 'a' + 10);",
      "right" : "result += (c - 'a' + 10);",
      "info" : "ExpressionStatement[48561-48586]:ExpressionStatement[48447-48472]"
    }, {
      "left" : "if (c >= 'A' && c <= 'F')",
      "right" : "if (c >= 'A' && c <= 'F')",
      "info" : "IfStatement[48602-48771]:IfStatement[48488-48657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48628-48675]:Block[48514-48561]"
    }, {
      "left" : "result += (c - 'A' + 10);",
      "right" : "result += (c - 'A' + 10);",
      "info" : "ExpressionStatement[48640-48665]:ExpressionStatement[48526-48551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48681-48771]:Block[48567-48657]"
    }, {
      "left" : "throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));",
      "right" : "throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));",
      "info" : "ThrowStatement[48693-48761]:ThrowStatement[48579-48647]"
    }, {
      "left" : "pos += 4;",
      "right" : "pos += 4;",
      "info" : "ExpressionStatement[48786-48795]:ExpressionStatement[48672-48681]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[48802-48816]:ReturnStatement[48688-48702]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[48822-48831]:SwitchCase[48708-48717]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[48838-48850]:ReturnStatement[48724-48736]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[48856-48865]:SwitchCase[48742-48751]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[48872-48884]:ReturnStatement[48758-48770]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[48890-48899]:SwitchCase[48776-48785]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[48906-48918]:ReturnStatement[48792-48804]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[48924-48933]:SwitchCase[48810-48819]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[48940-48952]:ReturnStatement[48826-48838]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[48958-48967]:SwitchCase[48844-48853]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[48974-48986]:ReturnStatement[48860-48872]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[48992-49002]:SwitchCase[48878-48888]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[49009-49022]:ExpressionStatement[48895-48908]"
    }, {
      "left" : "lineStart = pos;",
      "right" : "lineStart = pos;",
      "info" : "ExpressionStatement[49029-49045]:ExpressionStatement[48915-48931]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[49073-49083]:SwitchCase[48959-48969]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[49088-49097]:SwitchCase[48974-48983]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[49102-49112]:SwitchCase[48988-48998]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49117-49125]:SwitchCase[49003-49011]"
    }, {
      "left" : "return escaped;",
      "right" : "return escaped;",
      "info" : "ReturnStatement[49132-49147]:ReturnStatement[49018-49033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49349-49497]:Block[49235-49383]"
    }, {
      "left" : "throw new MalformedJsonException(message\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "right" : "throw new MalformedJsonException(message\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
      "info" : "ThrowStatement[49355-49493]:ThrowStatement[49241-49379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49622-50076]:Block[49508-49962]"
    }, {
      "left" : "nextNonWhitespace(true);",
      "right" : "nextNonWhitespace(true);",
      "info" : "ExpressionStatement[49679-49703]:ExpressionStatement[49565-49589]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[49708-49714]:ExpressionStatement[49594-49600]"
    }, {
      "left" : "if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length))",
      "right" : "if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length))",
      "info" : "IfStatement[49720-49828]:IfStatement[49606-49714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49807-49828]:Block[49693-49714]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[49815-49822]:ReturnStatement[49701-49708]"
    }, {
      "left" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
      "right" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
      "info" : "ForStatement[49834-49996]:ForStatement[49720-49882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49886-49996]:Block[49772-49882]"
    }, {
      "left" : "if (buffer[pos + i] != NON_EXECUTE_PREFIX[i])",
      "right" : "if (buffer[pos + i] != NON_EXECUTE_PREFIX[i])",
      "info" : "IfStatement[49894-49990]:IfStatement[49780-49876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49940-49990]:Block[49826-49876]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[49950-49957]:ReturnStatement[49836-49843]"
    }, {
      "left" : "pos += NON_EXECUTE_PREFIX.length;",
      "right" : "pos += NON_EXECUTE_PREFIX.length;",
      "info" : "ExpressionStatement[50039-50072]:ExpressionStatement[49925-49958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50087-51047]:Block[49973-50933]"
    }, {
      "left" : "JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n      @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n        if (reader instanceof JsonTreeReader) {\n          ((JsonTreeReader)reader).promoteNameToValue();\n          return;\n        }\n        int p = reader.peeked;\n        if (p == PEEKED_NONE) {\n          p = reader.doPeek();\n        }\n        if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_DOUBLE_QUOTED;\n        } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_SINGLE_QUOTED;\n        } else if (p == PEEKED_UNQUOTED_NAME) {\n          reader.peeked = PEEKED_UNQUOTED;\n        } else {\n          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());\n        }\n      }\n    };",
      "right" : "JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n      @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n        if (reader instanceof JsonTreeReader) {\n          ((JsonTreeReader)reader).promoteNameToValue();\n          return;\n        }\n        int p = reader.peeked;\n        if (p == PEEKED_NONE) {\n          p = reader.doPeek();\n        }\n        if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_DOUBLE_QUOTED;\n        } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_SINGLE_QUOTED;\n        } else if (p == PEEKED_UNQUOTED_NAME) {\n          reader.peeked = PEEKED_UNQUOTED;\n        } else {\n          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());\n        }\n      }\n    };",
      "info" : "ExpressionStatement[50093-51043]:ExpressionStatement[49979-50929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50247-51036]:Block[50133-50922]"
    }, {
      "left" : "if (reader instanceof JsonTreeReader)",
      "right" : "if (reader instanceof JsonTreeReader)",
      "info" : "IfStatement[50257-50381]:IfStatement[50143-50267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50295-50381]:Block[50181-50267]"
    }, {
      "left" : "((JsonTreeReader)reader).promoteNameToValue();",
      "right" : "((JsonTreeReader)reader).promoteNameToValue();",
      "info" : "ExpressionStatement[50307-50353]:ExpressionStatement[50193-50239]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[50364-50371]:ReturnStatement[50250-50257]"
    }, {
      "left" : "int p = reader.peeked;",
      "right" : "int p = reader.peeked;",
      "info" : "VariableDeclarationStatement[50390-50412]:VariableDeclarationStatement[50276-50298]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[50421-50485]:IfStatement[50307-50371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50443-50485]:Block[50329-50371]"
    }, {
      "left" : "p = reader.doPeek();",
      "right" : "p = reader.doPeek();",
      "info" : "ExpressionStatement[50455-50475]:ExpressionStatement[50341-50361]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
      "info" : "IfStatement[50494-51028]:IfStatement[50380-50914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50530-50589]:Block[50416-50475]"
    }, {
      "left" : "reader.peeked = PEEKED_DOUBLE_QUOTED;",
      "right" : "reader.peeked = PEEKED_DOUBLE_QUOTED;",
      "info" : "ExpressionStatement[50542-50579]:ExpressionStatement[50428-50465]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
      "info" : "IfStatement[50595-51028]:IfStatement[50481-50914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50631-50690]:Block[50517-50576]"
    }, {
      "left" : "reader.peeked = PEEKED_SINGLE_QUOTED;",
      "right" : "reader.peeked = PEEKED_SINGLE_QUOTED;",
      "info" : "ExpressionStatement[50643-50680]:ExpressionStatement[50529-50566]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED_NAME)",
      "right" : "if (p == PEEKED_UNQUOTED_NAME)",
      "info" : "IfStatement[50696-51028]:IfStatement[50582-50914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50727-50781]:Block[50613-50667]"
    }, {
      "left" : "reader.peeked = PEEKED_UNQUOTED;",
      "right" : "reader.peeked = PEEKED_UNQUOTED;",
      "info" : "ExpressionStatement[50739-50771]:ExpressionStatement[50625-50657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50787-51028]:Block[50673-50914]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());",
      "right" : "throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());",
      "info" : "ThrowStatement[50799-51018]:ThrowStatement[50685-50904]"
    } ]
  },
  "interFileMappings" : { }
}