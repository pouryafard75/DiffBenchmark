{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "LiveVariablesAnalysis",
      "right" : "LiveVariablesAnalysis",
      "info" : "TypeDeclaration[1063-9333]:TypeDeclaration[1063-9459]"
    }, {
      "left" : "public static final String ARGUMENT_ARRAY_ALIAS = \"arguments\";",
      "right" : "public static final String ARGUMENT_ARRAY_ALIAS = \"arguments\";",
      "info" : "FieldDeclaration[2062-2124]:FieldDeclaration[2062-2124]"
    }, {
      "left" : "LiveVariableJoinOp",
      "right" : "LiveVariableJoinOp",
      "info" : "TypeDeclaration[2128-2497]:TypeDeclaration[2128-2497]"
    }, {
      "left" : "public LiveVariableLattice apply(List<LiveVariableLattice> in)",
      "right" : "public LiveVariableLattice apply(List<LiveVariableLattice> in)",
      "info" : "MethodDeclaration[2219-2493]:MethodDeclaration[2219-2493]"
    }, {
      "left" : "LiveVariableLattice",
      "right" : "LiveVariableLattice",
      "info" : "TypeDeclaration[2501-3737]:TypeDeclaration[2501-3737]"
    }, {
      "left" : "private final BitSet liveSet;",
      "right" : "private final BitSet liveSet;",
      "info" : "FieldDeclaration[2788-2817]:FieldDeclaration[2788-2817]"
    }, {
      "left" : "private LiveVariableLattice(int numVars)",
      "right" : "private LiveVariableLattice(int numVars)",
      "info" : "MethodDeclaration[2823-2982]:MethodDeclaration[2823-2982]"
    }, {
      "left" : "private LiveVariableLattice(LiveVariableLattice other)",
      "right" : "private LiveVariableLattice(LiveVariableLattice other)",
      "info" : "MethodDeclaration[2988-3144]:MethodDeclaration[2988-3144]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[3150-3373]:MethodDeclaration[3150-3373]"
    }, {
      "left" : "public boolean isLive(Var v)",
      "right" : "public boolean isLive(Var v)",
      "info" : "MethodDeclaration[3379-3487]:MethodDeclaration[3379-3487]"
    }, {
      "left" : "public boolean isLive(int index)",
      "right" : "public boolean isLive(int index)",
      "info" : "MethodDeclaration[3493-3566]:MethodDeclaration[3493-3566]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[3572-3651]:MethodDeclaration[3572-3651]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[3657-3733]:MethodDeclaration[3657-3733]"
    }, {
      "left" : "private final Scope jsScope;",
      "right" : "private final Scope jsScope;",
      "info" : "FieldDeclaration[3795-3823]:FieldDeclaration[3795-3823]"
    }, {
      "left" : "private final Set<Var> escaped;",
      "right" : "private final Set<Var> escaped;",
      "info" : "FieldDeclaration[3826-3857]:FieldDeclaration[3826-3857]"
    }, {
      "left" : "LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,\n      AbstractCompiler compiler)",
      "right" : "LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,\n      AbstractCompiler compiler)",
      "info" : "MethodDeclaration[3861-4120]:MethodDeclaration[3861-4120]"
    }, {
      "left" : "public Set<Var> getEscapedLocals()",
      "right" : "public Set<Var> getEscapedLocals()",
      "info" : "MethodDeclaration[4124-4184]:MethodDeclaration[4124-4184]"
    }, {
      "left" : "public int getVarIndex(String var)",
      "right" : "public int getVarIndex(String var)",
      "info" : "MethodDeclaration[4188-4266]:MethodDeclaration[4188-4266]"
    }, {
      "left" : "boolean isForward()",
      "right" : "boolean isForward()",
      "info" : "MethodDeclaration[4270-4325]:MethodDeclaration[4270-4325]"
    }, {
      "left" : "LiveVariableLattice createEntryLattice()",
      "right" : "LiveVariableLattice createEntryLattice()",
      "info" : "MethodDeclaration[4329-4446]:MethodDeclaration[4329-4446]"
    }, {
      "left" : "LiveVariableLattice createInitialEstimateLattice()",
      "right" : "LiveVariableLattice createInitialEstimateLattice()",
      "info" : "MethodDeclaration[4450-4577]:MethodDeclaration[4450-4577]"
    }, {
      "left" : "LiveVariableLattice flowThrough(Node node, LiveVariableLattice input)",
      "right" : "LiveVariableLattice flowThrough(Node node, LiveVariableLattice input)",
      "info" : "MethodDeclaration[4581-5342]:MethodDeclaration[4581-5342]"
    }, {
      "left" : "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional)",
      "right" : "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional)",
      "info" : "MethodDeclaration[5346-8396]:MethodDeclaration[5346-8522]"
    }, {
      "left" : "private void addToSetIfLocal(Node node, BitSet set)",
      "right" : "private void addToSetIfLocal(Node node, BitSet set)",
      "info" : "MethodDeclaration[8400-8712]:MethodDeclaration[8526-8838]"
    }, {
      "left" : "void markAllParametersEscaped()",
      "right" : "void markAllParametersEscaped()",
      "info" : "MethodDeclaration[8716-9073]:MethodDeclaration[8842-9199]"
    }, {
      "left" : "private boolean isArgumentsName(Node n)",
      "right" : "private boolean isArgumentsName(Node n)",
      "info" : "MethodDeclaration[9077-9331]:MethodDeclaration[9203-9457]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2296-2493]:Block[2296-2493]"
    }, {
      "left" : "LiveVariableLattice result = new LiveVariableLattice(in.get(0));",
      "right" : "LiveVariableLattice result = new LiveVariableLattice(in.get(0));",
      "info" : "VariableDeclarationStatement[2304-2368]:VariableDeclarationStatement[2304-2368]"
    }, {
      "left" : "for (int i = 1; i < in.size(); i++)",
      "right" : "for (int i = 1; i < in.size(); i++)",
      "info" : "ForStatement[2375-2466]:ForStatement[2375-2466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2411-2466]:Block[2411-2466]"
    }, {
      "left" : "result.liveSet.or(in.get(i).liveSet);",
      "right" : "result.liveSet.or(in.get(i).liveSet);",
      "info" : "ExpressionStatement[2421-2458]:ExpressionStatement[2421-2458]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[2473-2487]:ReturnStatement[2473-2487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2933-2982]:Block[2933-2982]"
    }, {
      "left" : "this.liveSet = new BitSet(numVars);",
      "right" : "this.liveSet = new BitSet(numVars);",
      "info" : "ExpressionStatement[2941-2976]:ExpressionStatement[2941-2976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3043-3144]:Block[3043-3144]"
    }, {
      "left" : "Preconditions.checkNotNull(other);",
      "right" : "Preconditions.checkNotNull(other);",
      "info" : "ExpressionStatement[3051-3085]:ExpressionStatement[3051-3085]"
    }, {
      "left" : "this.liveSet = (BitSet) other.liveSet.clone();",
      "right" : "this.liveSet = (BitSet) other.liveSet.clone();",
      "info" : "ExpressionStatement[3092-3138]:ExpressionStatement[3092-3138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3200-3373]:Block[3200-3373]"
    }, {
      "left" : "Preconditions.checkNotNull(other);",
      "right" : "Preconditions.checkNotNull(other);",
      "info" : "ExpressionStatement[3208-3242]:ExpressionStatement[3208-3242]"
    }, {
      "left" : "return (other instanceof LiveVariableLattice) &&\n          this.liveSet.equals(((LiveVariableLattice) other).liveSet);",
      "right" : "return (other instanceof LiveVariableLattice) &&\n          this.liveSet.equals(((LiveVariableLattice) other).liveSet);",
      "info" : "ReturnStatement[3249-3367]:ReturnStatement[3249-3367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3408-3487]:Block[3408-3487]"
    }, {
      "left" : "Preconditions.checkNotNull(v);",
      "right" : "Preconditions.checkNotNull(v);",
      "info" : "ExpressionStatement[3416-3446]:ExpressionStatement[3416-3446]"
    }, {
      "left" : "return liveSet.get(v.index);",
      "right" : "return liveSet.get(v.index);",
      "info" : "ReturnStatement[3453-3481]:ReturnStatement[3453-3481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3526-3566]:Block[3526-3566]"
    }, {
      "left" : "return liveSet.get(index);",
      "right" : "return liveSet.get(index);",
      "info" : "ReturnStatement[3534-3560]:ReturnStatement[3534-3560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3611-3651]:Block[3611-3651]"
    }, {
      "left" : "return liveSet.toString();",
      "right" : "return liveSet.toString();",
      "info" : "ReturnStatement[3619-3645]:ReturnStatement[3619-3645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3693-3733]:Block[3693-3733]"
    }, {
      "left" : "return liveSet.hashCode();",
      "right" : "return liveSet.hashCode();",
      "info" : "ReturnStatement[3701-3727]:ReturnStatement[3701-3727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3959-4120]:Block[3959-4120]"
    }, {
      "left" : "super(cfg, new LiveVariableJoinOp());",
      "right" : "super(cfg, new LiveVariableJoinOp());",
      "info" : "SuperConstructorInvocation[3965-4002]:SuperConstructorInvocation[3965-4002]"
    }, {
      "left" : "this.jsScope = jsScope;",
      "right" : "this.jsScope = jsScope;",
      "info" : "ExpressionStatement[4007-4030]:ExpressionStatement[4007-4030]"
    }, {
      "left" : "this.escaped = Sets.newHashSet();",
      "right" : "this.escaped = Sets.newHashSet();",
      "info" : "ExpressionStatement[4035-4068]:ExpressionStatement[4035-4068]"
    }, {
      "left" : "computeEscaped(jsScope, escaped, compiler);",
      "right" : "computeEscaped(jsScope, escaped, compiler);",
      "info" : "ExpressionStatement[4073-4116]:ExpressionStatement[4073-4116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4159-4184]:Block[4159-4184]"
    }, {
      "left" : "return escaped;",
      "right" : "return escaped;",
      "info" : "ReturnStatement[4165-4180]:ReturnStatement[4165-4180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4223-4266]:Block[4223-4266]"
    }, {
      "left" : "return jsScope.getVar(var).index;",
      "right" : "return jsScope.getVar(var).index;",
      "info" : "ReturnStatement[4229-4262]:ReturnStatement[4229-4262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4302-4325]:Block[4302-4325]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4308-4321]:ReturnStatement[4308-4321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4382-4446]:Block[4382-4446]"
    }, {
      "left" : "return new LiveVariableLattice(jsScope.getVarCount());",
      "right" : "return new LiveVariableLattice(jsScope.getVarCount());",
      "info" : "ReturnStatement[4388-4442]:ReturnStatement[4388-4442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4513-4577]:Block[4513-4577]"
    }, {
      "left" : "return new LiveVariableLattice(jsScope.getVarCount());",
      "right" : "return new LiveVariableLattice(jsScope.getVarCount());",
      "info" : "ReturnStatement[4519-4573]:ReturnStatement[4519-4573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4663-5342]:Block[4663-5342]"
    }, {
      "left" : "final BitSet gen = new BitSet(input.liveSet.size());",
      "right" : "final BitSet gen = new BitSet(input.liveSet.size());",
      "info" : "VariableDeclarationStatement[4669-4721]:VariableDeclarationStatement[4669-4721]"
    }, {
      "left" : "final BitSet kill = new BitSet(input.liveSet.size());",
      "right" : "final BitSet kill = new BitSet(input.liveSet.size());",
      "info" : "VariableDeclarationStatement[4726-4779]:VariableDeclarationStatement[4726-4779]"
    }, {
      "left" : "boolean conditional = false;",
      "right" : "boolean conditional = false;",
      "info" : "VariableDeclarationStatement[4861-4889]:VariableDeclarationStatement[4861-4889]"
    }, {
      "left" : "List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);",
      "right" : "List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);",
      "info" : "VariableDeclarationStatement[4894-4964]:VariableDeclarationStatement[4894-4964]"
    }, {
      "left" : "for (DiGraphEdge<Node, Branch> edge : edgeList)",
      "right" : "for (DiGraphEdge<Node, Branch> edge : edgeList)",
      "info" : "EnhancedForStatement[4969-5110]:EnhancedForStatement[4969-5110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5017-5110]:Block[5017-5110]"
    }, {
      "left" : "if (Branch.ON_EX.equals(edge.getValue()))",
      "right" : "if (Branch.ON_EX.equals(edge.getValue()))",
      "info" : "IfStatement[5025-5104]:IfStatement[5025-5104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5067-5104]:Block[5067-5104]"
    }, {
      "left" : "conditional = true;",
      "right" : "conditional = true;",
      "info" : "ExpressionStatement[5077-5096]:ExpressionStatement[5077-5096]"
    }, {
      "left" : "computeGenKill(node, gen, kill, conditional);",
      "right" : "computeGenKill(node, gen, kill, conditional);",
      "info" : "ExpressionStatement[5115-5160]:ExpressionStatement[5115-5160]"
    }, {
      "left" : "LiveVariableLattice result = new LiveVariableLattice(input);",
      "right" : "LiveVariableLattice result = new LiveVariableLattice(input);",
      "info" : "VariableDeclarationStatement[5165-5225]:VariableDeclarationStatement[5165-5225]"
    }, {
      "left" : "result.liveSet.andNot(kill);",
      "right" : "result.liveSet.andNot(kill);",
      "info" : "ExpressionStatement[5263-5291]:ExpressionStatement[5263-5291]"
    }, {
      "left" : "result.liveSet.or(gen);",
      "right" : "result.liveSet.or(gen);",
      "info" : "ExpressionStatement[5296-5319]:ExpressionStatement[5296-5319]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5324-5338]:ReturnStatement[5324-5338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5918-8396]:Block[5918-8522]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          if (NodeUtil.isName(lhs)) {\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          } else {\n            computeGenKill(lhs, gen, kill, conditional);\n          }\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }",
      "info" : "SwitchStatement[5925-8392]:SwitchStatement[5925-8518]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[5954-5972]:SwitchCase[5954-5972]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[5979-5996]:SwitchCase[5979-5996]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[6003-6023]:SwitchCase[6003-6023]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6032-6039]:ReturnStatement[6032-6039]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[6047-6064]:SwitchCase[6047-6064]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[6071-6085]:SwitchCase[6071-6085]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[6092-6106]:SwitchCase[6092-6106]"
    }, {
      "left" : "computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);",
      "right" : "computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);",
      "info" : "ExpressionStatement[6115-6202]:ExpressionStatement[6115-6202]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6211-6218]:ReturnStatement[6211-6218]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[6226-6241]:SwitchCase[6226-6241]"
    }, {
      "left" : "if (!NodeUtil.isForIn(n))",
      "right" : "if (!NodeUtil.isForIn(n))",
      "info" : "IfStatement[6250-6769]:IfStatement[6250-6895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6276-6387]:Block[6276-6387]"
    }, {
      "left" : "computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);",
      "right" : "computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);",
      "info" : "ExpressionStatement[6288-6377]:ExpressionStatement[6288-6377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6393-6769]:Block[6393-6895]"
    }, {
      "left" : "Node lhs = n.getFirstChild();",
      "right" : "Node lhs = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[6436-6465]:VariableDeclarationStatement[6436-6465]"
    }, {
      "left" : "Node rhs = lhs.getNext();",
      "right" : "Node rhs = lhs.getNext();",
      "info" : "VariableDeclarationStatement[6476-6501]:VariableDeclarationStatement[6476-6501]"
    }, {
      "left" : "if (NodeUtil.isVar(lhs))",
      "right" : "if (NodeUtil.isVar(lhs))",
      "info" : "IfStatement[6512-6625]:IfStatement[6512-6625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6537-6625]:Block[6537-6625]"
    }, {
      "left" : "lhs = lhs.getLastChild();",
      "right" : "lhs = lhs.getLastChild();",
      "info" : "ExpressionStatement[6588-6613]:ExpressionStatement[6588-6613]"
    }, {
      "left" : "addToSetIfLocal(lhs, kill);",
      "right" : "addToSetIfLocal(lhs, kill);",
      "info" : "ExpressionStatement[6638-6665]:ExpressionStatement[6676-6703]"
    }, {
      "left" : "addToSetIfLocal(lhs, gen);",
      "right" : "addToSetIfLocal(lhs, gen);",
      "info" : "ExpressionStatement[6678-6704]:ExpressionStatement[6716-6742]"
    }, {
      "left" : "computeGenKill(rhs, gen, kill, conditional);",
      "right" : "computeGenKill(rhs, gen, kill, conditional);",
      "info" : "ExpressionStatement[6715-6759]:ExpressionStatement[6841-6885]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6778-6785]:ReturnStatement[6904-6911]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[6793-6808]:SwitchCase[6919-6934]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[6817-7091]:ForStatement[6943-7217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6878-7091]:Block[7004-7217]"
    }, {
      "left" : "if (c.hasChildren())",
      "right" : "if (c.hasChildren())",
      "info" : "IfStatement[6890-7081]:IfStatement[7016-7207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6911-7081]:Block[7037-7207]"
    }, {
      "left" : "computeGenKill(c.getFirstChild(), gen, kill, conditional);",
      "right" : "computeGenKill(c.getFirstChild(), gen, kill, conditional);",
      "info" : "ExpressionStatement[6925-6983]:ExpressionStatement[7051-7109]"
    }, {
      "left" : "if (!conditional)",
      "right" : "if (!conditional)",
      "info" : "IfStatement[6996-7069]:IfStatement[7122-7195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7014-7069]:Block[7140-7195]"
    }, {
      "left" : "addToSetIfLocal(c, kill);",
      "right" : "addToSetIfLocal(c, kill);",
      "info" : "ExpressionStatement[7030-7055]:ExpressionStatement[7156-7181]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7100-7107]:ReturnStatement[7226-7233]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[7115-7130]:SwitchCase[7241-7256]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[7137-7151]:SwitchCase[7263-7277]"
    }, {
      "left" : "computeGenKill(n.getFirstChild(), gen, kill, conditional);",
      "right" : "computeGenKill(n.getFirstChild(), gen, kill, conditional);",
      "info" : "ExpressionStatement[7160-7218]:ExpressionStatement[7286-7344]"
    }, {
      "left" : "computeGenKill(n.getLastChild(), gen, kill, true);",
      "right" : "computeGenKill(n.getLastChild(), gen, kill, true);",
      "info" : "ExpressionStatement[7257-7307]:ExpressionStatement[7383-7433]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7316-7323]:ReturnStatement[7442-7449]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[7331-7347]:SwitchCase[7457-7473]"
    }, {
      "left" : "computeGenKill(n.getFirstChild(), gen, kill, conditional);",
      "right" : "computeGenKill(n.getFirstChild(), gen, kill, conditional);",
      "info" : "ExpressionStatement[7356-7414]:ExpressionStatement[7482-7540]"
    }, {
      "left" : "computeGenKill(n.getFirstChild().getNext(), gen, kill, true);",
      "right" : "computeGenKill(n.getFirstChild().getNext(), gen, kill, true);",
      "info" : "ExpressionStatement[7469-7530]:ExpressionStatement[7595-7656]"
    }, {
      "left" : "computeGenKill(n.getLastChild(), gen, kill, true);",
      "right" : "computeGenKill(n.getLastChild(), gen, kill, true);",
      "info" : "ExpressionStatement[7539-7589]:ExpressionStatement[7665-7715]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7598-7605]:ReturnStatement[7724-7731]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7613-7629]:SwitchCase[7739-7755]"
    }, {
      "left" : "if (isArgumentsName(n))",
      "right" : "if (isArgumentsName(n))",
      "info" : "IfStatement[7638-7763]:IfStatement[7764-7889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7662-7711]:Block[7788-7837]"
    }, {
      "left" : "markAllParametersEscaped();",
      "right" : "markAllParametersEscaped();",
      "info" : "ExpressionStatement[7674-7701]:ExpressionStatement[7800-7827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-7763]:Block[7843-7889]"
    }, {
      "left" : "addToSetIfLocal(n, gen);",
      "right" : "addToSetIfLocal(n, gen);",
      "info" : "ExpressionStatement[7729-7753]:ExpressionStatement[7855-7879]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7772-7779]:ReturnStatement[7898-7905]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7787-7795]:SwitchCase[7913-7921]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild()))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild()))",
      "info" : "IfStatement[7804-8370]:IfStatement[7930-8496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7874-8213]:Block[8000-8339]"
    }, {
      "left" : "Node lhs = n.getFirstChild();",
      "right" : "Node lhs = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7886-7915]:VariableDeclarationStatement[8012-8041]"
    }, {
      "left" : "if (!conditional)",
      "right" : "if (!conditional)",
      "info" : "IfStatement[7926-7997]:IfStatement[8052-8123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7944-7997]:Block[8070-8123]"
    }, {
      "left" : "addToSetIfLocal(lhs, kill);",
      "right" : "addToSetIfLocal(lhs, kill);",
      "info" : "ExpressionStatement[7958-7985]:ExpressionStatement[8084-8111]"
    }, {
      "left" : "if (!NodeUtil.isAssign(n))",
      "right" : "if (!NodeUtil.isAssign(n))",
      "info" : "IfStatement[8008-8138]:IfStatement[8134-8264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8035-8138]:Block[8161-8264]"
    }, {
      "left" : "addToSetIfLocal(lhs, gen);",
      "right" : "addToSetIfLocal(lhs, gen);",
      "info" : "ExpressionStatement[8100-8126]:ExpressionStatement[8226-8252]"
    }, {
      "left" : "computeGenKill(lhs.getNext(), gen, kill, conditional);",
      "right" : "computeGenKill(lhs.getNext(), gen, kill, conditional);",
      "info" : "ExpressionStatement[8149-8203]:ExpressionStatement[8275-8329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8219-8370]:Block[8345-8496]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[8231-8360]:ForStatement[8357-8486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8292-8360]:Block[8418-8486]"
    }, {
      "left" : "computeGenKill(c, gen, kill, conditional);",
      "right" : "computeGenKill(c, gen, kill, conditional);",
      "info" : "ExpressionStatement[8306-8348]:ExpressionStatement[8432-8474]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8379-8386]:ReturnStatement[8505-8512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8452-8712]:Block[8578-8838]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.isName(node));",
      "right" : "Preconditions.checkState(NodeUtil.isName(node));",
      "info" : "ExpressionStatement[8458-8506]:ExpressionStatement[8584-8632]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[8511-8542]:VariableDeclarationStatement[8637-8668]"
    }, {
      "left" : "if (!jsScope.isDeclared(name, false))",
      "right" : "if (!jsScope.isDeclared(name, false))",
      "info" : "IfStatement[8547-8606]:IfStatement[8673-8732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8585-8606]:Block[8711-8732]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8593-8600]:ReturnStatement[8719-8726]"
    }, {
      "left" : "Var var = jsScope.getVar(name);",
      "right" : "Var var = jsScope.getVar(name);",
      "info" : "VariableDeclarationStatement[8611-8642]:VariableDeclarationStatement[8737-8768]"
    }, {
      "left" : "if (!escaped.contains(var))",
      "right" : "if (!escaped.contains(var))",
      "info" : "IfStatement[8647-8708]:IfStatement[8773-8834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8675-8708]:Block[8801-8834]"
    }, {
      "left" : "set.set(var.index);",
      "right" : "set.set(var.index);",
      "info" : "ExpressionStatement[8683-8702]:ExpressionStatement[8809-8828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8872-9073]:Block[8998-9199]"
    }, {
      "left" : "Node lp = jsScope.getRootNode().getFirstChild().getNext();",
      "right" : "Node lp = jsScope.getRootNode().getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[8878-8936]:VariableDeclarationStatement[9004-9062]"
    }, {
      "left" : "for(Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext())",
      "right" : "for(Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext())",
      "info" : "ForStatement[8941-9069]:ForStatement[9067-9195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9010-9069]:Block[9136-9195]"
    }, {
      "left" : "escaped.add(jsScope.getVar(arg.getString()));",
      "right" : "escaped.add(jsScope.getVar(arg.getString()));",
      "info" : "ExpressionStatement[9018-9063]:ExpressionStatement[9144-9189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9117-9331]:Block[9243-9457]"
    }, {
      "left" : "if (n.getType() != Token.NAME ||\n        !n.getString().equals(ARGUMENT_ARRAY_ALIAS) ||\n        jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false))",
      "right" : "if (n.getType() != Token.NAME ||\n        !n.getString().equals(ARGUMENT_ARRAY_ALIAS) ||\n        jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false))",
      "info" : "IfStatement[9123-9327]:IfStatement[9249-9453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9268-9295]:Block[9394-9421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9276-9289]:ReturnStatement[9402-9415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9301-9327]:Block[9427-9453]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9309-9321]:ReturnStatement[9435-9447]"
    } ]
  },
  "interFileMappings" : { }
}