{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PowellOptimizer",
      "right" : "PowellOptimizer",
      "info" : "TypeDeclaration[2038-14801]:TypeDeclaration[2038-14809]"
    }, {
      "left" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "right" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "info" : "FieldDeclaration[3283-3408]:FieldDeclaration[3283-3408]"
    }, {
      "left" : "private final double relativeThreshold;",
      "right" : "private final double relativeThreshold;",
      "info" : "FieldDeclaration[3413-3495]:FieldDeclaration[3413-3495]"
    }, {
      "left" : "private final double absoluteThreshold;",
      "right" : "private final double absoluteThreshold;",
      "info" : "FieldDeclaration[3500-3582]:FieldDeclaration[3500-3582]"
    }, {
      "left" : "private final LineSearch line;",
      "right" : "private final LineSearch line;",
      "info" : "FieldDeclaration[3587-3653]:FieldDeclaration[3587-3653]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[3659-4496]:MethodDeclaration[3659-4496]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[4502-5878]:MethodDeclaration[4502-5878]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs)",
      "info" : "MethodDeclaration[5884-6459]:MethodDeclaration[5884-6459]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs)",
      "info" : "MethodDeclaration[6465-7157]:MethodDeclaration[6465-7157]"
    }, {
      "left" : "protected PointValuePair doOptimize()",
      "right" : "protected PointValuePair doOptimize()",
      "info" : "MethodDeclaration[7163-10385]:MethodDeclaration[7163-10393]"
    }, {
      "left" : "private double[][] newPointAndDirection(double[] p,\n                                            double[] d,\n                                            double optimum)",
      "right" : "private double[][] newPointAndDirection(double[] p,\n                                            double[] d,\n                                            double optimum)",
      "info" : "MethodDeclaration[10391-11335]:MethodDeclaration[10399-11343]"
    }, {
      "left" : "LineSearch",
      "right" : "LineSearch",
      "info" : "TypeDeclaration[11341-14425]:TypeDeclaration[11349-14433]"
    }, {
      "left" : "private static final double REL_TOL_UNUSED = 1e-15;",
      "right" : "private static final double REL_TOL_UNUSED = 1e-15;",
      "info" : "FieldDeclaration[11510-11806]:FieldDeclaration[11518-11814]"
    }, {
      "left" : "private static final double ABS_TOL_UNUSED = Double.MIN_VALUE;",
      "right" : "private static final double ABS_TOL_UNUSED = Double.MIN_VALUE;",
      "info" : "FieldDeclaration[11815-12122]:FieldDeclaration[11823-12130]"
    }, {
      "left" : "private final BracketFinder bracket = new BracketFinder();",
      "right" : "private final BracketFinder bracket = new BracketFinder();",
      "info" : "FieldDeclaration[12131-12246]:FieldDeclaration[12139-12254]"
    }, {
      "left" : "LineSearch(double rel,\n                   double abs)",
      "right" : "LineSearch(double rel,\n                   double abs)",
      "info" : "MethodDeclaration[12256-12789]:MethodDeclaration[12264-12797]"
    }, {
      "left" : "public UnivariatePointValuePair search(final double[] p, final double[] d)",
      "right" : "public UnivariatePointValuePair search(final double[] p, final double[] d)",
      "info" : "MethodDeclaration[12799-14419]:MethodDeclaration[12807-14427]"
    }, {
      "left" : "public double value(double alpha)",
      "right" : "public double value(double alpha)",
      "info" : "MethodDeclaration[13346-13723]:MethodDeclaration[13354-13731]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[14431-14799]:MethodDeclaration[14439-14807]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4416-4496]:Block[4416-4496]"
    }, {
      "left" : "this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);",
      "right" : "this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);",
      "info" : "ConstructorInvocation[4426-4490]:ConstructorInvocation[4426-4490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5426-5878]:Block[5426-5878]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[5436-5451]:SuperConstructorInvocation[5436-5451]"
    }, {
      "left" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "right" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "info" : "IfStatement[5461-5590]:IfStatement[5461-5590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5495-5590]:Block[5495-5590]"
    }, {
      "left" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "right" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "info" : "ThrowStatement[5509-5580]:ThrowStatement[5509-5580]"
    }, {
      "left" : "if (abs <= 0)",
      "right" : "if (abs <= 0)",
      "info" : "IfStatement[5599-5681]:IfStatement[5599-5681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-5681]:Block[5613-5681]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(abs);",
      "right" : "throw new NotStrictlyPositiveException(abs);",
      "info" : "ThrowStatement[5627-5671]:ThrowStatement[5627-5671]"
    }, {
      "left" : "relativeThreshold = rel;",
      "right" : "relativeThreshold = rel;",
      "info" : "ExpressionStatement[5690-5714]:ExpressionStatement[5690-5714]"
    }, {
      "left" : "absoluteThreshold = abs;",
      "right" : "absoluteThreshold = abs;",
      "info" : "ExpressionStatement[5723-5747]:ExpressionStatement[5723-5747]"
    }, {
      "left" : "line = new LineSearch(lineRel,\n                              lineAbs);",
      "right" : "line = new LineSearch(lineRel,\n                              lineAbs);",
      "info" : "ExpressionStatement[5802-5872]:ExpressionStatement[5802-5872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6422-6459]:Block[6422-6459]"
    }, {
      "left" : "this(rel, abs, null);",
      "right" : "this(rel, abs, null);",
      "info" : "ConstructorInvocation[6432-6453]:ConstructorInvocation[6432-6453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-7157]:Block[7102-7157]"
    }, {
      "left" : "this(rel, abs, lineRel, lineAbs, null);",
      "right" : "this(rel, abs, lineRel, lineAbs, null);",
      "info" : "ConstructorInvocation[7112-7151]:ConstructorInvocation[7112-7151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7240-10385]:Block[7240-10393]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[7250-7268]:ExpressionStatement[7250-7268]"
    }, {
      "left" : "final GoalType goal = getGoalType();",
      "right" : "final GoalType goal = getGoalType();",
      "info" : "VariableDeclarationStatement[7278-7314]:VariableDeclarationStatement[7278-7314]"
    }, {
      "left" : "final double[] guess = getStartPoint();",
      "right" : "final double[] guess = getStartPoint();",
      "info" : "VariableDeclarationStatement[7323-7362]:VariableDeclarationStatement[7323-7362]"
    }, {
      "left" : "final int n = guess.length;",
      "right" : "final int n = guess.length;",
      "info" : "VariableDeclarationStatement[7371-7398]:VariableDeclarationStatement[7371-7398]"
    }, {
      "left" : "final double[][] direc = new double[n][n];",
      "right" : "final double[][] direc = new double[n][n];",
      "info" : "VariableDeclarationStatement[7408-7450]:VariableDeclarationStatement[7408-7450]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[7459-7527]:ForStatement[7459-7527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7487-7527]:Block[7487-7527]"
    }, {
      "left" : "direc[i][i] = 1;",
      "right" : "direc[i][i] = 1;",
      "info" : "ExpressionStatement[7501-7517]:ExpressionStatement[7501-7517]"
    }, {
      "left" : "final ConvergenceChecker<PointValuePair> checker\n            = getConvergenceChecker();",
      "right" : "final ConvergenceChecker<PointValuePair> checker\n            = getConvergenceChecker();",
      "info" : "VariableDeclarationStatement[7537-7624]:VariableDeclarationStatement[7537-7624]"
    }, {
      "left" : "double[] x = guess;",
      "right" : "double[] x = guess;",
      "info" : "VariableDeclarationStatement[7634-7653]:VariableDeclarationStatement[7634-7653]"
    }, {
      "left" : "double fVal = computeObjectiveValue(x);",
      "right" : "double fVal = computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[7662-7701]:VariableDeclarationStatement[7662-7701]"
    }, {
      "left" : "double[] x1 = x.clone();",
      "right" : "double[] x1 = x.clone();",
      "info" : "VariableDeclarationStatement[7710-7734]:VariableDeclarationStatement[7710-7734]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7765-10379]:WhileStatement[7743-10387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7778-10379]:Block[7756-10387]"
    }, {
      "left" : "double fX = fVal;",
      "right" : "double fX = fVal;",
      "info" : "VariableDeclarationStatement[7813-7830]:VariableDeclarationStatement[7810-7827]"
    }, {
      "left" : "double fX2 = 0;",
      "right" : "double fX2 = 0;",
      "info" : "VariableDeclarationStatement[7843-7858]:VariableDeclarationStatement[7840-7855]"
    }, {
      "left" : "double delta = 0;",
      "right" : "double delta = 0;",
      "info" : "VariableDeclarationStatement[7871-7888]:VariableDeclarationStatement[7868-7885]"
    }, {
      "left" : "int bigInd = 0;",
      "right" : "int bigInd = 0;",
      "info" : "VariableDeclarationStatement[7901-7916]:VariableDeclarationStatement[7898-7913]"
    }, {
      "left" : "double alphaMin = 0;",
      "right" : "double alphaMin = 0;",
      "info" : "VariableDeclarationStatement[7929-7949]:VariableDeclarationStatement[7926-7946]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[7963-8512]:ForStatement[7960-8509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7991-8512]:Block[7988-8509]"
    }, {
      "left" : "final double[] d = MathArrays.copyOf(direc[i]);",
      "right" : "final double[] d = MathArrays.copyOf(direc[i]);",
      "info" : "VariableDeclarationStatement[8009-8056]:VariableDeclarationStatement[8006-8053]"
    }, {
      "left" : "fX2 = fVal;",
      "right" : "fX2 = fVal;",
      "info" : "ExpressionStatement[8074-8085]:ExpressionStatement[8071-8082]"
    }, {
      "left" : "final UnivariatePointValuePair optimum = line.search(x, d);",
      "right" : "final UnivariatePointValuePair optimum = line.search(x, d);",
      "info" : "VariableDeclarationStatement[8103-8162]:VariableDeclarationStatement[8100-8159]"
    }, {
      "left" : "fVal = optimum.getValue();",
      "right" : "fVal = optimum.getValue();",
      "info" : "ExpressionStatement[8179-8205]:ExpressionStatement[8176-8202]"
    }, {
      "left" : "alphaMin = optimum.getPoint();",
      "right" : "alphaMin = optimum.getPoint();",
      "info" : "ExpressionStatement[8222-8252]:ExpressionStatement[8219-8249]"
    }, {
      "left" : "final double[][] result = newPointAndDirection(x, d, alphaMin);",
      "right" : "final double[][] result = newPointAndDirection(x, d, alphaMin);",
      "info" : "VariableDeclarationStatement[8269-8332]:VariableDeclarationStatement[8266-8329]"
    }, {
      "left" : "x = result[0];",
      "right" : "x = result[0];",
      "info" : "ExpressionStatement[8349-8363]:ExpressionStatement[8346-8360]"
    }, {
      "left" : "if ((fX2 - fVal) > delta)",
      "right" : "if ((fX2 - fVal) > delta)",
      "info" : "IfStatement[8381-8498]:IfStatement[8378-8495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8407-8498]:Block[8404-8495]"
    }, {
      "left" : "delta = fX2 - fVal;",
      "right" : "delta = fX2 - fVal;",
      "info" : "ExpressionStatement[8429-8448]:ExpressionStatement[8426-8445]"
    }, {
      "left" : "bigInd = i;",
      "right" : "bigInd = i;",
      "info" : "ExpressionStatement[8469-8480]:ExpressionStatement[8466-8477]"
    }, {
      "left" : "boolean stop = 2 * (fX - fVal) <=\n                (relativeThreshold * (FastMath.abs(fX) + FastMath.abs(fVal)) +\n                 absoluteThreshold);",
      "right" : "boolean stop = 2 * (fX - fVal) <=\n                (relativeThreshold * (FastMath.abs(fX) + FastMath.abs(fVal)) +\n                 absoluteThreshold);",
      "info" : "VariableDeclarationStatement[8568-8717]:VariableDeclarationStatement[8565-8714]"
    }, {
      "left" : "final PointValuePair previous = new PointValuePair(x1, fX);",
      "right" : "final PointValuePair previous = new PointValuePair(x1, fX);",
      "info" : "VariableDeclarationStatement[8731-8790]:VariableDeclarationStatement[8728-8787]"
    }, {
      "left" : "final PointValuePair current = new PointValuePair(x, fVal);",
      "right" : "final PointValuePair current = new PointValuePair(x, fVal);",
      "info" : "VariableDeclarationStatement[8803-8862]:VariableDeclarationStatement[8800-8859]"
    }, {
      "left" : "if (!stop)",
      "right" : "if (!stop)",
      "info" : "IfStatement[8875-9064]:IfStatement[8872-9072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8886-9064]:Block[8883-9072]"
    }, {
      "left" : "if (checker != null)",
      "right" : "if (checker != null)",
      "info" : "IfStatement[8939-9050]:IfStatement[8936-9058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8960-9050]:Block[8957-9058]"
    }, {
      "left" : "stop = checker.converged(iter, previous, current);",
      "right" : "stop = checker.converged(getIterations(), previous, current);",
      "info" : "ExpressionStatement[8982-9032]:ExpressionStatement[8979-9040]"
    }, {
      "left" : "if (stop)",
      "right" : "if (stop)",
      "info" : "IfStatement[9077-9316]:IfStatement[9085-9324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9087-9316]:Block[9095-9324]"
    }, {
      "left" : "if (goal == GoalType.MINIMIZE)",
      "right" : "if (goal == GoalType.MINIMIZE)",
      "info" : "IfStatement[9105-9302]:IfStatement[9113-9310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9136-9216]:Block[9144-9224]"
    }, {
      "left" : "return (fVal < fX) ? current : previous;",
      "right" : "return (fVal < fX) ? current : previous;",
      "info" : "ReturnStatement[9158-9198]:ReturnStatement[9166-9206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9222-9302]:Block[9230-9310]"
    }, {
      "left" : "return (fVal > fX) ? current : previous;",
      "right" : "return (fVal > fX) ? current : previous;",
      "info" : "ReturnStatement[9244-9284]:ReturnStatement[9252-9292]"
    }, {
      "left" : "final double[] d = new double[n];",
      "right" : "final double[] d = new double[n];",
      "info" : "VariableDeclarationStatement[9330-9363]:VariableDeclarationStatement[9338-9371]"
    }, {
      "left" : "final double[] x2 = new double[n];",
      "right" : "final double[] x2 = new double[n];",
      "info" : "VariableDeclarationStatement[9376-9410]:VariableDeclarationStatement[9384-9418]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[9423-9545]:ForStatement[9431-9553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9451-9545]:Block[9459-9553]"
    }, {
      "left" : "d[i] = x[i] - x1[i];",
      "right" : "d[i] = x[i] - x1[i];",
      "info" : "ExpressionStatement[9469-9489]:ExpressionStatement[9477-9497]"
    }, {
      "left" : "x2[i] = 2 * x[i] - x1[i];",
      "right" : "x2[i] = 2 * x[i] - x1[i];",
      "info" : "ExpressionStatement[9506-9531]:ExpressionStatement[9514-9539]"
    }, {
      "left" : "x1 = x.clone();",
      "right" : "x1 = x.clone();",
      "info" : "ExpressionStatement[9559-9574]:ExpressionStatement[9567-9582]"
    }, {
      "left" : "fX2 = computeObjectiveValue(x2);",
      "right" : "fX2 = computeObjectiveValue(x2);",
      "info" : "ExpressionStatement[9587-9619]:ExpressionStatement[9595-9627]"
    }, {
      "left" : "if (fX > fX2)",
      "right" : "if (fX > fX2)",
      "info" : "IfStatement[9633-10369]:IfStatement[9641-10377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9647-10369]:Block[9655-10377]"
    }, {
      "left" : "double t = 2 * (fX + fX2 - 2 * fVal);",
      "right" : "double t = 2 * (fX + fX2 - 2 * fVal);",
      "info" : "VariableDeclarationStatement[9665-9702]:VariableDeclarationStatement[9673-9710]"
    }, {
      "left" : "double temp = fX - fVal - delta;",
      "right" : "double temp = fX - fVal - delta;",
      "info" : "VariableDeclarationStatement[9719-9751]:VariableDeclarationStatement[9727-9759]"
    }, {
      "left" : "t *= temp * temp;",
      "right" : "t *= temp * temp;",
      "info" : "ExpressionStatement[9768-9785]:ExpressionStatement[9776-9793]"
    }, {
      "left" : "temp = fX - fX2;",
      "right" : "temp = fX - fX2;",
      "info" : "ExpressionStatement[9802-9818]:ExpressionStatement[9810-9826]"
    }, {
      "left" : "t -= delta * temp * temp;",
      "right" : "t -= delta * temp * temp;",
      "info" : "ExpressionStatement[9835-9860]:ExpressionStatement[9843-9868]"
    }, {
      "left" : "if (t < 0.0)",
      "right" : "if (t < 0.0)",
      "info" : "IfStatement[9878-10355]:IfStatement[9886-10363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9891-10355]:Block[9899-10363]"
    }, {
      "left" : "final UnivariatePointValuePair optimum = line.search(x, d);",
      "right" : "final UnivariatePointValuePair optimum = line.search(x, d);",
      "info" : "VariableDeclarationStatement[9913-9972]:VariableDeclarationStatement[9921-9980]"
    }, {
      "left" : "fVal = optimum.getValue();",
      "right" : "fVal = optimum.getValue();",
      "info" : "ExpressionStatement[9993-10019]:ExpressionStatement[10001-10027]"
    }, {
      "left" : "alphaMin = optimum.getPoint();",
      "right" : "alphaMin = optimum.getPoint();",
      "info" : "ExpressionStatement[10040-10070]:ExpressionStatement[10048-10078]"
    }, {
      "left" : "final double[][] result = newPointAndDirection(x, d, alphaMin);",
      "right" : "final double[][] result = newPointAndDirection(x, d, alphaMin);",
      "info" : "VariableDeclarationStatement[10091-10154]:VariableDeclarationStatement[10099-10162]"
    }, {
      "left" : "x = result[0];",
      "right" : "x = result[0];",
      "info" : "ExpressionStatement[10175-10189]:ExpressionStatement[10183-10197]"
    }, {
      "left" : "final int lastInd = n - 1;",
      "right" : "final int lastInd = n - 1;",
      "info" : "VariableDeclarationStatement[10211-10237]:VariableDeclarationStatement[10219-10245]"
    }, {
      "left" : "direc[bigInd] = direc[lastInd];",
      "right" : "direc[bigInd] = direc[lastInd];",
      "info" : "ExpressionStatement[10258-10289]:ExpressionStatement[10266-10297]"
    }, {
      "left" : "direc[lastInd] = result[1];",
      "right" : "direc[lastInd] = result[1];",
      "info" : "ExpressionStatement[10310-10337]:ExpressionStatement[10318-10345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10968-11335]:Block[10976-11343]"
    }, {
      "left" : "final int n = p.length;",
      "right" : "final int n = p.length;",
      "info" : "VariableDeclarationStatement[10978-11001]:VariableDeclarationStatement[10986-11009]"
    }, {
      "left" : "final double[] nP = new double[n];",
      "right" : "final double[] nP = new double[n];",
      "info" : "VariableDeclarationStatement[11010-11044]:VariableDeclarationStatement[11018-11052]"
    }, {
      "left" : "final double[] nD = new double[n];",
      "right" : "final double[] nD = new double[n];",
      "info" : "VariableDeclarationStatement[11053-11087]:VariableDeclarationStatement[11061-11095]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[11096-11205]:ForStatement[11104-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11124-11205]:Block[11132-11213]"
    }, {
      "left" : "nD[i] = d[i] * optimum;",
      "right" : "nD[i] = d[i] * optimum;",
      "info" : "ExpressionStatement[11138-11161]:ExpressionStatement[11146-11169]"
    }, {
      "left" : "nP[i] = p[i] + nD[i];",
      "right" : "nP[i] = p[i] + nD[i];",
      "info" : "ExpressionStatement[11174-11195]:ExpressionStatement[11182-11203]"
    }, {
      "left" : "final double[][] result = new double[2][];",
      "right" : "final double[][] result = new double[2][];",
      "info" : "VariableDeclarationStatement[11215-11257]:VariableDeclarationStatement[11223-11265]"
    }, {
      "left" : "result[0] = nP;",
      "right" : "result[0] = nP;",
      "info" : "ExpressionStatement[11266-11281]:ExpressionStatement[11274-11289]"
    }, {
      "left" : "result[1] = nD;",
      "right" : "result[1] = nD;",
      "info" : "ExpressionStatement[11290-11305]:ExpressionStatement[11298-11313]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11315-11329]:ReturnStatement[11323-11337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12647-12789]:Block[12655-12797]"
    }, {
      "left" : "super(REL_TOL_UNUSED,\n                  ABS_TOL_UNUSED,\n                  new SimpleUnivariateValueChecker(rel, abs));",
      "right" : "super(REL_TOL_UNUSED,\n                  ABS_TOL_UNUSED,\n                  new SimpleUnivariateValueChecker(rel, abs));",
      "info" : "SuperConstructorInvocation[12661-12779]:SuperConstructorInvocation[12669-12787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13220-14419]:Block[13228-14427]"
    }, {
      "left" : "final int n = p.length;",
      "right" : "final int n = p.length;",
      "info" : "VariableDeclarationStatement[13234-13257]:VariableDeclarationStatement[13242-13265]"
    }, {
      "left" : "final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(double alpha) {\n                        final double[] x = new double[n];\n                        for (int i = 0; i < n; i++) {\n                            x[i] = p[i] + alpha * d[i];\n                        }\n                        final double obj = PowellOptimizer.this.computeObjectiveValue(x);\n                        return obj;\n                    }\n                };",
      "right" : "final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(double alpha) {\n                        final double[] x = new double[n];\n                        for (int i = 0; i < n; i++) {\n                            x[i] = p[i] + alpha * d[i];\n                        }\n                        final double obj = PowellOptimizer.this.computeObjectiveValue(x);\n                        return obj;\n                    }\n                };",
      "info" : "VariableDeclarationStatement[13270-13742]:VariableDeclarationStatement[13278-13750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13380-13723]:Block[13388-13731]"
    }, {
      "left" : "final double[] x = new double[n];",
      "right" : "final double[] x = new double[n];",
      "info" : "VariableDeclarationStatement[13406-13439]:VariableDeclarationStatement[13414-13447]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[13464-13575]:ForStatement[13472-13583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13492-13575]:Block[13500-13583]"
    }, {
      "left" : "x[i] = p[i] + alpha * d[i];",
      "right" : "x[i] = p[i] + alpha * d[i];",
      "info" : "ExpressionStatement[13522-13549]:ExpressionStatement[13530-13557]"
    }, {
      "left" : "final double obj = PowellOptimizer.this.computeObjectiveValue(x);",
      "right" : "final double obj = PowellOptimizer.this.computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[13600-13665]:VariableDeclarationStatement[13608-13673]"
    }, {
      "left" : "return obj;",
      "right" : "return obj;",
      "info" : "ReturnStatement[13690-13701]:ReturnStatement[13698-13709]"
    }, {
      "left" : "final GoalType goal = PowellOptimizer.this.getGoalType();",
      "right" : "final GoalType goal = PowellOptimizer.this.getGoalType();",
      "info" : "VariableDeclarationStatement[13756-13813]:VariableDeclarationStatement[13764-13821]"
    }, {
      "left" : "bracket.search(f, goal, 0, 1);",
      "right" : "bracket.search(f, goal, 0, 1);",
      "info" : "ExpressionStatement[13826-13856]:ExpressionStatement[13834-13864]"
    }, {
      "left" : "return optimize(new MaxEval(Integer.MAX_VALUE),\n                            new UnivariateObjectiveFunction(f),\n                            goal,\n                            new SearchInterval(bracket.getLo(),\n                                               bracket.getHi(),\n                                               bracket.getMid()));",
      "right" : "return optimize(new MaxEval(Integer.MAX_VALUE),\n                            new UnivariateObjectiveFunction(f),\n                            goal,\n                            new SearchInterval(bracket.getLo(),\n                                               bracket.getHi(),\n                                               bracket.getMid()));",
      "info" : "ReturnStatement[14069-14409]:ReturnStatement[14077-14417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14618-14799]:Block[14626-14807]"
    }, {
      "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "info" : "IfStatement[14628-14793]:IfStatement[14636-14801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14696-14793]:Block[14704-14801]"
    }, {
      "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "info" : "ThrowStatement[14710-14783]:ThrowStatement[14718-14791]"
    } ]
  },
  "interFileMappings" : { }
}