{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "TypeDeclaration[4406-55792]:TypeDeclaration[4406-55944]"
    }, {
      "left" : "public static final String         EXPORT_IMPORT_MAP_NAME          = \"___exportImportRIDMap\";",
      "right" : "public static final String         EXPORT_IMPORT_MAP_NAME          = \"___exportImportRIDMap\";",
      "info" : "FieldDeclaration[4590-4683]:FieldDeclaration[4590-4683]"
    }, {
      "left" : "public static final int            IMPORT_RECORD_DUMP_LAP_EVERY_MS = 5000;",
      "right" : "public static final int            IMPORT_RECORD_DUMP_LAP_EVERY_MS = 5000;",
      "info" : "FieldDeclaration[4686-4760]:FieldDeclaration[4686-4760]"
    }, {
      "left" : "private Map<OPropertyImpl, String> linkedClasses                   = new HashMap<OPropertyImpl, String>();",
      "right" : "private Map<OPropertyImpl, String> linkedClasses                   = new HashMap<OPropertyImpl, String>();",
      "info" : "FieldDeclaration[4764-4870]:FieldDeclaration[4764-4870]"
    }, {
      "left" : "private Map<OClass, String>        superClasses                    = new HashMap<OClass, String>();",
      "right" : "private Map<OClass, String>        superClasses                    = new HashMap<OClass, String>();",
      "info" : "FieldDeclaration[4873-4972]:FieldDeclaration[4873-4972]"
    }, {
      "left" : "private OJSONReader                jsonReader;",
      "right" : "private OJSONReader                jsonReader;",
      "info" : "FieldDeclaration[4975-5021]:FieldDeclaration[4975-5021]"
    }, {
      "left" : "private ORecord                    record;",
      "right" : "private ORecord                    record;",
      "info" : "FieldDeclaration[5024-5066]:FieldDeclaration[5024-5066]"
    }, {
      "left" : "private boolean                    schemaImported                  = false;",
      "right" : "private boolean                    schemaImported                  = false;",
      "info" : "FieldDeclaration[5069-5144]:FieldDeclaration[5069-5144]"
    }, {
      "left" : "private int                        exporterVersion                 = -1;",
      "right" : "private int                        exporterVersion                 = -1;",
      "info" : "FieldDeclaration[5147-5219]:FieldDeclaration[5147-5219]"
    }, {
      "left" : "private ORID                       schemaRecordId;",
      "right" : "private ORID                       schemaRecordId;",
      "info" : "FieldDeclaration[5222-5272]:FieldDeclaration[5222-5272]"
    }, {
      "left" : "private ORID                       indexMgrRecordId;",
      "right" : "private ORID                       indexMgrRecordId;",
      "info" : "FieldDeclaration[5275-5327]:FieldDeclaration[5275-5327]"
    }, {
      "left" : "private boolean                    deleteRIDMapping                = true;",
      "right" : "private boolean                    deleteRIDMapping                = true;",
      "info" : "FieldDeclaration[5331-5405]:FieldDeclaration[5331-5405]"
    }, {
      "left" : "private OIndex<OIdentifiable>      exportImportHashTable;",
      "right" : "private OIndex<OIdentifiable>      exportImportHashTable;",
      "info" : "FieldDeclaration[5409-5466]:FieldDeclaration[5409-5466]"
    }, {
      "left" : "private boolean                    preserveClusterIDs              = true;",
      "right" : "private boolean                    preserveClusterIDs              = true;",
      "info" : "FieldDeclaration[5470-5544]:FieldDeclaration[5470-5544]"
    }, {
      "left" : "private boolean                    migrateLinks                    = true;",
      "right" : "private boolean                    migrateLinks                    = true;",
      "info" : "FieldDeclaration[5547-5621]:FieldDeclaration[5547-5621]"
    }, {
      "left" : "private boolean                    merge                           = false;",
      "right" : "private boolean                    merge                           = false;",
      "info" : "FieldDeclaration[5624-5699]:FieldDeclaration[5624-5699]"
    }, {
      "left" : "private boolean                    rebuildIndexes                  = true;",
      "right" : "private boolean                    rebuildIndexes                  = true;",
      "info" : "FieldDeclaration[5702-5776]:FieldDeclaration[5702-5776]"
    }, {
      "left" : "private Set<String>                indexesToRebuild                = new HashSet<String>();",
      "right" : "private Set<String>                indexesToRebuild                = new HashSet<String>();",
      "info" : "FieldDeclaration[5780-5871]:FieldDeclaration[5780-5871]"
    }, {
      "left" : "ValuesConverter",
      "right" : "ValuesConverter",
      "info" : "TypeDeclaration[5875-5941]:TypeDeclaration[5875-5941]"
    }, {
      "left" : "T convert(T value);",
      "right" : "T convert(T value);",
      "info" : "MethodDeclaration[5918-5937]:MethodDeclaration[5918-5937]"
    }, {
      "left" : "ConvertersFactory",
      "right" : "ConvertersFactory",
      "info" : "TypeDeclaration[5945-6530]:TypeDeclaration[5945-6530]"
    }, {
      "left" : "public static final ConvertersFactory INSTANCE = new ConvertersFactory();",
      "right" : "public static final ConvertersFactory INSTANCE = new ConvertersFactory();",
      "info" : "FieldDeclaration[5996-6069]:FieldDeclaration[5996-6069]"
    }, {
      "left" : "public ValuesConverter getConverter(Object value)",
      "right" : "public ValuesConverter getConverter(Object value)",
      "info" : "MethodDeclaration[6075-6526]:MethodDeclaration[6075-6526]"
    }, {
      "left" : "LinksRewriter",
      "right" : "LinksRewriter",
      "info" : "TypeDeclaration[6534-7760]:TypeDeclaration[6534-7760]"
    }, {
      "left" : "public Object visitField(OType type, OType linkedType, Object value)",
      "right" : "public Object visitField(OType type, OType linkedType, Object value)",
      "info" : "MethodDeclaration[6614-7435]:MethodDeclaration[6614-7435]"
    }, {
      "left" : "public boolean goFurther(OType type, OType linkedType, Object value, Object newValue)",
      "right" : "public boolean goFurther(OType type, OType linkedType, Object value, Object newValue)",
      "info" : "MethodDeclaration[7441-7567]:MethodDeclaration[7441-7567]"
    }, {
      "left" : "public boolean goDeeper(OType type, OType linkedType, Object value)",
      "right" : "public boolean goDeeper(OType type, OType linkedType, Object value)",
      "info" : "MethodDeclaration[7573-7681]:MethodDeclaration[7573-7681]"
    }, {
      "left" : "public boolean updateMode()",
      "right" : "public boolean updateMode()",
      "info" : "MethodDeclaration[7687-7755]:MethodDeclaration[7687-7755]"
    }, {
      "left" : "AbstractCollectionConverter",
      "right" : "AbstractCollectionConverter",
      "info" : "TypeDeclaration[7764-8849]:TypeDeclaration[7764-8849]"
    }, {
      "left" : "ResultCallback",
      "right" : "ResultCallback",
      "info" : "TypeDeclaration[7861-7922]:TypeDeclaration[7861-7922]"
    }, {
      "left" : "void add(Object item);",
      "right" : "void add(Object item);",
      "info" : "MethodDeclaration[7894-7916]:MethodDeclaration[7894-7916]"
    }, {
      "left" : "protected boolean convertSingleValue(final Object item, ResultCallback result, boolean updated)",
      "right" : "protected boolean convertSingleValue(final Object item, ResultCallback result, boolean updated)",
      "info" : "MethodDeclaration[7928-8845]:MethodDeclaration[7928-8845]"
    }, {
      "left" : "SetConverter",
      "right" : "SetConverter",
      "info" : "TypeDeclaration[8853-9665]:TypeDeclaration[8853-9665]"
    }, {
      "left" : "public static final SetConverter INSTANCE = new SetConverter();",
      "right" : "public static final SetConverter INSTANCE = new SetConverter();",
      "info" : "FieldDeclaration[8940-9003]:FieldDeclaration[8940-9003]"
    }, {
      "left" : "public Set convert(Set value)",
      "right" : "public Set convert(Set value)",
      "info" : "MethodDeclaration[9009-9661]:MethodDeclaration[9009-9661]"
    }, {
      "left" : "public void add(Object item)",
      "right" : "public void add(Object item)",
      "info" : "MethodDeclaration[9400-9486]:MethodDeclaration[9400-9486]"
    }, {
      "left" : "ListConverter",
      "right" : "ListConverter",
      "info" : "TypeDeclaration[9669-10286]:TypeDeclaration[9669-10286]"
    }, {
      "left" : "public static final ListConverter INSTANCE = new ListConverter();",
      "right" : "public static final ListConverter INSTANCE = new ListConverter();",
      "info" : "FieldDeclaration[9758-9823]:FieldDeclaration[9758-9823]"
    }, {
      "left" : "public List convert(List value)",
      "right" : "public List convert(List value)",
      "info" : "MethodDeclaration[9829-10282]:MethodDeclaration[9829-10282]"
    }, {
      "left" : "public void add(Object item)",
      "right" : "public void add(Object item)",
      "info" : "MethodDeclaration[9990-10076]:MethodDeclaration[9990-10076]"
    }, {
      "left" : "RidBagConverter",
      "right" : "RidBagConverter",
      "info" : "TypeDeclaration[10290-10961]:TypeDeclaration[10290-10961]"
    }, {
      "left" : "public static final RidBagConverter INSTANCE = new RidBagConverter();",
      "right" : "public static final RidBagConverter INSTANCE = new RidBagConverter();",
      "info" : "FieldDeclaration[10384-10453]:FieldDeclaration[10384-10453]"
    }, {
      "left" : "public ORidBag convert(ORidBag value)",
      "right" : "public ORidBag convert(ORidBag value)",
      "info" : "MethodDeclaration[10459-10957]:MethodDeclaration[10459-10957]"
    }, {
      "left" : "public void add(Object item)",
      "right" : "public void add(Object item)",
      "info" : "MethodDeclaration[10657-10759]:MethodDeclaration[10657-10759]"
    }, {
      "left" : "MapConverter",
      "right" : "MapConverter",
      "info" : "TypeDeclaration[10965-11855]:TypeDeclaration[10965-11855]"
    }, {
      "left" : "public static final MapConverter INSTANCE = new MapConverter();",
      "right" : "public static final MapConverter INSTANCE = new MapConverter();",
      "info" : "FieldDeclaration[11052-11115]:FieldDeclaration[11052-11115]"
    }, {
      "left" : "public Map convert(Map value)",
      "right" : "public Map convert(Map value)",
      "info" : "MethodDeclaration[11121-11851]:MethodDeclaration[11121-11851]"
    }, {
      "left" : "MapResultCallback",
      "right" : "MapResultCallback",
      "info" : "TypeDeclaration[11248-11520]:TypeDeclaration[11248-11520]"
    }, {
      "left" : "private Object key;",
      "right" : "private Object key;",
      "info" : "FieldDeclaration[11314-11333]:FieldDeclaration[11314-11333]"
    }, {
      "left" : "public void add(Object item)",
      "right" : "public void add(Object item)",
      "info" : "MethodDeclaration[11343-11434]:MethodDeclaration[11343-11434]"
    }, {
      "left" : "public void setKey(Object key)",
      "right" : "public void setKey(Object key)",
      "info" : "MethodDeclaration[11444-11512]:MethodDeclaration[11444-11512]"
    }, {
      "left" : "LinkConverter",
      "right" : "LinkConverter",
      "info" : "TypeDeclaration[11859-12558]:TypeDeclaration[11859-12558]"
    }, {
      "left" : "public static final LinkConverter INSTANCE = new LinkConverter();",
      "right" : "public static final LinkConverter INSTANCE = new LinkConverter();",
      "info" : "FieldDeclaration[11948-12013]:FieldDeclaration[11948-12013]"
    }, {
      "left" : "private OIndex<OIdentifiable>     exportImportHashTable;",
      "right" : "private OIndex<OIdentifiable>     exportImportHashTable;",
      "info" : "FieldDeclaration[12019-12075]:FieldDeclaration[12019-12075]"
    }, {
      "left" : "public OIdentifiable convert(OIdentifiable value)",
      "right" : "public OIdentifiable convert(OIdentifiable value)",
      "info" : "MethodDeclaration[12081-12401]:MethodDeclaration[12081-12401]"
    }, {
      "left" : "public void setExportImportHashTable(OIndex<OIdentifiable> exportImportHashTable)",
      "right" : "public void setExportImportHashTable(OIndex<OIdentifiable> exportImportHashTable)",
      "info" : "MethodDeclaration[12407-12554]:MethodDeclaration[12407-12554]"
    }, {
      "left" : "public ODatabaseImport(final ODatabaseDocumentInternal database, final String iFileName, final OCommandOutputListener iListener)\n      throws IOException",
      "right" : "public ODatabaseImport(final ODatabaseDocumentInternal database, final String iFileName, final OCommandOutputListener iListener)\n      throws IOException",
      "info" : "MethodDeclaration[12562-13341]:MethodDeclaration[12562-13341]"
    }, {
      "left" : "public ODatabaseImport(final ODatabaseDocumentInternal database, final InputStream iStream, final OCommandOutputListener iListener)\n      throws IOException",
      "right" : "public ODatabaseImport(final ODatabaseDocumentInternal database, final InputStream iStream, final OCommandOutputListener iListener)\n      throws IOException",
      "info" : "MethodDeclaration[13345-13674]:MethodDeclaration[13345-13674]"
    }, {
      "left" : "public ODatabaseImport setOptions(String iOptions)",
      "right" : "public ODatabaseImport setOptions(String iOptions)",
      "info" : "MethodDeclaration[13678-13795]:MethodDeclaration[13678-13795]"
    }, {
      "left" : "public ODatabaseImport importDatabase()",
      "right" : "public ODatabaseImport importDatabase()",
      "info" : "MethodDeclaration[13799-16136]:MethodDeclaration[13799-16136]"
    }, {
      "left" : "public void rebuildIndexes()",
      "right" : "public void rebuildIndexes()",
      "info" : "MethodDeclaration[16140-16894]:MethodDeclaration[16140-16894]"
    }, {
      "left" : "public ODatabaseImport removeExportImportRIDsMap()",
      "right" : "public ODatabaseImport removeExportImportRIDsMap()",
      "info" : "MethodDeclaration[16898-17227]:MethodDeclaration[16898-17227]"
    }, {
      "left" : "public void close()",
      "right" : "public void close()",
      "info" : "MethodDeclaration[17231-17290]:MethodDeclaration[17231-17290]"
    }, {
      "left" : "public boolean isMigrateLinks()",
      "right" : "public boolean isMigrateLinks()",
      "info" : "MethodDeclaration[17294-17356]:MethodDeclaration[17294-17356]"
    }, {
      "left" : "public void setMigrateLinks(boolean migrateLinks)",
      "right" : "public void setMigrateLinks(boolean migrateLinks)",
      "info" : "MethodDeclaration[17360-17453]:MethodDeclaration[17360-17453]"
    }, {
      "left" : "public boolean isRebuildIndexes()",
      "right" : "public boolean isRebuildIndexes()",
      "info" : "MethodDeclaration[17457-17523]:MethodDeclaration[17457-17523]"
    }, {
      "left" : "public void setRebuildIndexes(boolean rebuildIndexes)",
      "right" : "public void setRebuildIndexes(boolean rebuildIndexes)",
      "info" : "MethodDeclaration[17527-17628]:MethodDeclaration[17527-17628]"
    }, {
      "left" : "public boolean isPreserveClusterIDs()",
      "right" : "public boolean isPreserveClusterIDs()",
      "info" : "MethodDeclaration[17632-17706]:MethodDeclaration[17632-17706]"
    }, {
      "left" : "public void setPreserveClusterIDs(boolean preserveClusterIDs)",
      "right" : "public void setPreserveClusterIDs(boolean preserveClusterIDs)",
      "info" : "MethodDeclaration[17710-17827]:MethodDeclaration[17710-17827]"
    }, {
      "left" : "public boolean isMerge()",
      "right" : "public boolean isMerge()",
      "info" : "MethodDeclaration[17831-17879]:MethodDeclaration[17831-17879]"
    }, {
      "left" : "public void setMerge(boolean merge)",
      "right" : "public void setMerge(boolean merge)",
      "info" : "MethodDeclaration[17883-17948]:MethodDeclaration[17883-17948]"
    }, {
      "left" : "public boolean isDeleteRIDMapping()",
      "right" : "public boolean isDeleteRIDMapping()",
      "info" : "MethodDeclaration[17952-18022]:MethodDeclaration[17952-18022]"
    }, {
      "left" : "public void setDeleteRIDMapping(boolean deleteRIDMapping)",
      "right" : "public void setDeleteRIDMapping(boolean deleteRIDMapping)",
      "info" : "MethodDeclaration[18026-18135]:MethodDeclaration[18026-18135]"
    }, {
      "left" : "protected void parseSetting(final String option, final List<String> items)",
      "right" : "protected void parseSetting(final String option, final List<String> items)",
      "info" : "MethodDeclaration[18139-18846]:MethodDeclaration[18139-18846]"
    }, {
      "left" : "protected void removeDefaultClusters()",
      "right" : "protected void removeDefaultClusters()",
      "info" : "MethodDeclaration[18850-20437]:MethodDeclaration[18850-20437]"
    }, {
      "left" : "private void removeDefaultNonSecurityClasses()",
      "right" : "private void removeDefaultNonSecurityClasses()",
      "info" : "MethodDeclaration[20441-22108]:MethodDeclaration[20441-22108]"
    }, {
      "left" : "private void importInfo() throws IOException, ParseException",
      "right" : "private void importInfo() throws IOException, ParseException",
      "info" : "MethodDeclaration[22112-23248]:MethodDeclaration[22112-23248]"
    }, {
      "left" : "private void importManualIndexes() throws IOException, ParseException",
      "right" : "private void importManualIndexes() throws IOException, ParseException",
      "info" : "MethodDeclaration[23252-25951]:MethodDeclaration[23252-25951]"
    }, {
      "left" : "private void importSchema() throws IOException, ParseException",
      "right" : "private void importSchema() throws IOException, ParseException",
      "info" : "MethodDeclaration[25955-32409]:MethodDeclaration[25955-32409]"
    }, {
      "left" : "private void importProperty(final OClass iClass) throws IOException, ParseException",
      "right" : "private void importProperty(final OClass iClass) throws IOException, ParseException",
      "info" : "MethodDeclaration[32413-35262]:MethodDeclaration[32413-35262]"
    }, {
      "left" : "private Map<String, String> importCustomFields() throws ParseException, IOException",
      "right" : "private Map<String, String> importCustomFields() throws ParseException, IOException",
      "info" : "MethodDeclaration[35266-35784]:MethodDeclaration[35266-35784]"
    }, {
      "left" : "private long importClusters() throws ParseException, IOException",
      "right" : "private long importClusters() throws ParseException, IOException",
      "info" : "MethodDeclaration[35788-42524]:MethodDeclaration[35788-42524]"
    }, {
      "left" : "private long last = 0;",
      "right" : "private long last = 0;",
      "info" : "FieldDeclaration[40667-40689]:FieldDeclaration[40667-40689]"
    }, {
      "left" : "public void onBegin(Object iTask, long iTotal, Object metadata)",
      "right" : "public void onBegin(Object iTask, long iTotal, Object metadata)",
      "info" : "MethodDeclaration[40699-40898]:MethodDeclaration[40699-40898]"
    }, {
      "left" : "public boolean onProgress(Object iTask, long iCounter, float iPercent)",
      "right" : "public boolean onProgress(Object iTask, long iCounter, float iPercent)",
      "info" : "MethodDeclaration[40908-41320]:MethodDeclaration[40908-41320]"
    }, {
      "left" : "public void onCompletition(Object iTask, boolean iSucceed)",
      "right" : "public void onCompletition(Object iTask, boolean iSucceed)",
      "info" : "MethodDeclaration[41330-41502]:MethodDeclaration[41330-41502]"
    }, {
      "left" : "private long importRecords() throws Exception",
      "right" : "private long importRecords() throws Exception",
      "info" : "MethodDeclaration[42528-44761]:MethodDeclaration[42528-44761]"
    }, {
      "left" : "private ORID importRecord() throws Exception",
      "right" : "private ORID importRecord() throws Exception",
      "info" : "MethodDeclaration[44765-48182]:MethodDeclaration[44765-48182]"
    }, {
      "left" : "private void importIndexes() throws IOException, ParseException",
      "right" : "private void importIndexes() throws IOException, ParseException",
      "info" : "MethodDeclaration[48186-51070]:MethodDeclaration[48186-51070]"
    }, {
      "left" : "private Set<String> importClustersToIndex() throws IOException, ParseException",
      "right" : "private Set<String> importClustersToIndex() throws IOException, ParseException",
      "info" : "MethodDeclaration[51074-51540]:MethodDeclaration[51074-51540]"
    }, {
      "left" : "private OIndexDefinition importIndexDefinition() throws IOException, ParseException",
      "right" : "private OIndexDefinition importIndexDefinition() throws IOException, ParseException",
      "info" : "MethodDeclaration[51544-53087]:MethodDeclaration[51544-53087]"
    }, {
      "left" : "private void migrateLinksInImportedDocuments() throws IOException",
      "right" : "private void migrateLinksInImportedDocuments() throws IOException",
      "info" : "MethodDeclaration[53091-55433]:MethodDeclaration[53091-55433]"
    }, {
      "left" : "private void rewriteLinksInDocument(ODocument document)",
      "right" : "private void rewriteLinksInDocument(ODocument document)",
      "info" : "MethodDeclaration[55437-55790]:MethodDeclaration[55437-55580]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4525-4531]:Modifier[4525-4531]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4532-4537]:TYPE_DECLARATION_KIND[4532-4537]"
    }, {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "SimpleName[4538-4553]:SimpleName[4538-4553]"
    }, {
      "left" : "ODatabaseImpExpAbstract",
      "right" : "ODatabaseImpExpAbstract",
      "info" : "SimpleType[4562-4585]:SimpleType[4562-4585]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5875-5882]:Modifier[5875-5882]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[5883-5892]:TYPE_DECLARATION_KIND[5883-5892]"
    }, {
      "left" : "ValuesConverter",
      "right" : "ValuesConverter",
      "info" : "SimpleName[5893-5908]:SimpleName[5893-5908]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[5918-5919]:SimpleType[5918-5919]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[5920-5927]:SimpleName[5920-5927]"
    }, {
      "left" : "T value",
      "right" : "T value",
      "info" : "SingleVariableDeclaration[5928-5935]:SingleVariableDeclaration[5928-5935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5945-5952]:Modifier[5945-5952]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5953-5959]:Modifier[5953-5959]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5960-5965]:Modifier[5960-5965]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[5966-5971]:TYPE_DECLARATION_KIND[5966-5971]"
    }, {
      "left" : "ConvertersFactory",
      "right" : "ConvertersFactory",
      "info" : "SimpleName[5972-5989]:SimpleName[5972-5989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6075-6081]:Modifier[6075-6081]"
    }, {
      "left" : "ValuesConverter",
      "right" : "ValuesConverter",
      "info" : "SimpleType[6082-6097]:SimpleType[6082-6097]"
    }, {
      "left" : "getConverter",
      "right" : "getConverter",
      "info" : "SimpleName[6098-6110]:SimpleName[6098-6110]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[6111-6123]:SingleVariableDeclaration[6111-6123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6125-6526]:Block[6125-6526]"
    }, {
      "left" : "if (value instanceof Map)",
      "right" : "if (value instanceof Map)",
      "info" : "IfStatement[6133-6196]:IfStatement[6133-6196]"
    }, {
      "left" : "return MapConverter.INSTANCE;",
      "right" : "return MapConverter.INSTANCE;",
      "info" : "ReturnStatement[6167-6196]:ReturnStatement[6167-6196]"
    }, {
      "left" : "if (value instanceof List)",
      "right" : "if (value instanceof List)",
      "info" : "IfStatement[6204-6269]:IfStatement[6204-6269]"
    }, {
      "left" : "return ListConverter.INSTANCE;",
      "right" : "return ListConverter.INSTANCE;",
      "info" : "ReturnStatement[6239-6269]:ReturnStatement[6239-6269]"
    }, {
      "left" : "if (value instanceof Set)",
      "right" : "if (value instanceof Set)",
      "info" : "IfStatement[6277-6340]:IfStatement[6277-6340]"
    }, {
      "left" : "return SetConverter.INSTANCE;",
      "right" : "return SetConverter.INSTANCE;",
      "info" : "ReturnStatement[6311-6340]:ReturnStatement[6311-6340]"
    }, {
      "left" : "if (value instanceof ORidBag)",
      "right" : "if (value instanceof ORidBag)",
      "info" : "IfStatement[6348-6418]:IfStatement[6348-6418]"
    }, {
      "left" : "return RidBagConverter.INSTANCE;",
      "right" : "return RidBagConverter.INSTANCE;",
      "info" : "ReturnStatement[6386-6418]:ReturnStatement[6386-6418]"
    }, {
      "left" : "if (value instanceof OIdentifiable)",
      "right" : "if (value instanceof OIdentifiable)",
      "info" : "IfStatement[6426-6500]:IfStatement[6426-6500]"
    }, {
      "left" : "return LinkConverter.INSTANCE;",
      "right" : "return LinkConverter.INSTANCE;",
      "info" : "ReturnStatement[6470-6500]:ReturnStatement[6470-6500]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6508-6520]:ReturnStatement[6508-6520]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6534-6541]:Modifier[6534-6541]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6542-6548]:Modifier[6542-6548]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6549-6554]:Modifier[6549-6554]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6555-6560]:TYPE_DECLARATION_KIND[6555-6560]"
    }, {
      "left" : "LinksRewriter",
      "right" : "LinksRewriter",
      "info" : "SimpleName[6561-6574]:SimpleName[6561-6574]"
    }, {
      "left" : "ODocumentFieldVisitor",
      "right" : "ODocumentFieldVisitor",
      "info" : "SimpleType[6586-6607]:SimpleType[6586-6607]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6614-6623]:MarkerAnnotation[6614-6623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6628-6634]:Modifier[6628-6634]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[6635-6641]:SimpleType[6635-6641]"
    }, {
      "left" : "visitField",
      "right" : "visitField",
      "info" : "SimpleName[6642-6652]:SimpleName[6642-6652]"
    }, {
      "left" : "OType type",
      "right" : "OType type",
      "info" : "SingleVariableDeclaration[6653-6663]:SingleVariableDeclaration[6653-6663]"
    }, {
      "left" : "OType linkedType",
      "right" : "OType linkedType",
      "info" : "SingleVariableDeclaration[6665-6681]:SingleVariableDeclaration[6665-6681]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[6683-6695]:SingleVariableDeclaration[6683-6695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-7435]:Block[6697-7435]"
    }, {
      "left" : "boolean oldAutoConvertValue = false;",
      "right" : "boolean oldAutoConvertValue = false;",
      "info" : "VariableDeclarationStatement[6705-6741]:VariableDeclarationStatement[6705-6741]"
    }, {
      "left" : "if (value instanceof ORecordLazyMultiValue)",
      "right" : "if (value instanceof ORecordLazyMultiValue)",
      "info" : "IfStatement[6748-6991]:IfStatement[6748-6991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6792-6991]:Block[6792-6991]"
    }, {
      "left" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
      "right" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
      "info" : "VariableDeclarationStatement[6802-6867]:VariableDeclarationStatement[6802-6867]"
    }, {
      "left" : "oldAutoConvertValue = multiValue.isAutoConvertToRecord();",
      "right" : "oldAutoConvertValue = multiValue.isAutoConvertToRecord();",
      "info" : "ExpressionStatement[6876-6933]:ExpressionStatement[6876-6933]"
    }, {
      "left" : "multiValue.setAutoConvertToRecord(false);",
      "right" : "multiValue.setAutoConvertToRecord(false);",
      "info" : "ExpressionStatement[6942-6983]:ExpressionStatement[6942-6983]"
    }, {
      "left" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(value);",
      "right" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(value);",
      "info" : "VariableDeclarationStatement[6999-7086]:VariableDeclarationStatement[6999-7086]"
    }, {
      "left" : "if (valuesConverter == null)",
      "right" : "if (valuesConverter == null)",
      "info" : "IfStatement[7093-7143]:IfStatement[7093-7143]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[7130-7143]:ReturnStatement[7130-7143]"
    }, {
      "left" : "final Object newValue = valuesConverter.convert(value);",
      "right" : "final Object newValue = valuesConverter.convert(value);",
      "info" : "VariableDeclarationStatement[7151-7206]:VariableDeclarationStatement[7151-7206]"
    }, {
      "left" : "if (value instanceof ORecordLazyMultiValue)",
      "right" : "if (value instanceof ORecordLazyMultiValue)",
      "info" : "IfStatement[7214-7405]:IfStatement[7214-7405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7258-7405]:Block[7258-7405]"
    }, {
      "left" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
      "right" : "ORecordLazyMultiValue multiValue = (ORecordLazyMultiValue) value;",
      "info" : "VariableDeclarationStatement[7268-7333]:VariableDeclarationStatement[7268-7333]"
    }, {
      "left" : "multiValue.setAutoConvertToRecord(oldAutoConvertValue);",
      "right" : "multiValue.setAutoConvertToRecord(oldAutoConvertValue);",
      "info" : "ExpressionStatement[7342-7397]:ExpressionStatement[7342-7397]"
    }, {
      "left" : "return newValue;",
      "right" : "return newValue;",
      "info" : "ReturnStatement[7413-7429]:ReturnStatement[7413-7429]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7441-7450]:MarkerAnnotation[7441-7450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7455-7461]:Modifier[7455-7461]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7462-7469]:PrimitiveType[7462-7469]"
    }, {
      "left" : "goFurther",
      "right" : "goFurther",
      "info" : "SimpleName[7470-7479]:SimpleName[7470-7479]"
    }, {
      "left" : "OType type",
      "right" : "OType type",
      "info" : "SingleVariableDeclaration[7480-7490]:SingleVariableDeclaration[7480-7490]"
    }, {
      "left" : "OType linkedType",
      "right" : "OType linkedType",
      "info" : "SingleVariableDeclaration[7492-7508]:SingleVariableDeclaration[7492-7508]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[7510-7522]:SingleVariableDeclaration[7510-7522]"
    }, {
      "left" : "Object newValue",
      "right" : "Object newValue",
      "info" : "SingleVariableDeclaration[7524-7539]:SingleVariableDeclaration[7524-7539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7541-7567]:Block[7541-7567]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7549-7561]:ReturnStatement[7549-7561]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7573-7582]:MarkerAnnotation[7573-7582]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7587-7593]:Modifier[7587-7593]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7594-7601]:PrimitiveType[7594-7601]"
    }, {
      "left" : "goDeeper",
      "right" : "goDeeper",
      "info" : "SimpleName[7602-7610]:SimpleName[7602-7610]"
    }, {
      "left" : "OType type",
      "right" : "OType type",
      "info" : "SingleVariableDeclaration[7611-7621]:SingleVariableDeclaration[7611-7621]"
    }, {
      "left" : "OType linkedType",
      "right" : "OType linkedType",
      "info" : "SingleVariableDeclaration[7623-7639]:SingleVariableDeclaration[7623-7639]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[7641-7653]:SingleVariableDeclaration[7641-7653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7655-7681]:Block[7655-7681]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7663-7675]:ReturnStatement[7663-7675]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7687-7696]:MarkerAnnotation[7687-7696]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7701-7707]:Modifier[7701-7707]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7708-7715]:PrimitiveType[7708-7715]"
    }, {
      "left" : "updateMode",
      "right" : "updateMode",
      "info" : "SimpleName[7716-7726]:SimpleName[7716-7726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7729-7755]:Block[7729-7755]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7737-7749]:ReturnStatement[7737-7749]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7764-7771]:Modifier[7764-7771]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7772-7778]:Modifier[7772-7778]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[7779-7787]:Modifier[7779-7787]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7788-7793]:TYPE_DECLARATION_KIND[7788-7793]"
    }, {
      "left" : "AbstractCollectionConverter",
      "right" : "AbstractCollectionConverter",
      "info" : "SimpleName[7794-7821]:SimpleName[7794-7821]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[7861-7870]:TYPE_DECLARATION_KIND[7861-7870]"
    }, {
      "left" : "ResultCallback",
      "right" : "ResultCallback",
      "info" : "SimpleName[7871-7885]:SimpleName[7871-7885]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7894-7898]:PrimitiveType[7894-7898]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[7899-7902]:SimpleName[7899-7902]"
    }, {
      "left" : "Object item",
      "right" : "Object item",
      "info" : "SingleVariableDeclaration[7903-7914]:SingleVariableDeclaration[7903-7914]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7928-7937]:Modifier[7928-7937]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7938-7945]:PrimitiveType[7938-7945]"
    }, {
      "left" : "convertSingleValue",
      "right" : "convertSingleValue",
      "info" : "SimpleName[7946-7964]:SimpleName[7946-7964]"
    }, {
      "left" : "final Object item",
      "right" : "final Object item",
      "info" : "SingleVariableDeclaration[7965-7982]:SingleVariableDeclaration[7965-7982]"
    }, {
      "left" : "ResultCallback result",
      "right" : "ResultCallback result",
      "info" : "SingleVariableDeclaration[7984-8005]:SingleVariableDeclaration[7984-8005]"
    }, {
      "left" : "boolean updated",
      "right" : "boolean updated",
      "info" : "SingleVariableDeclaration[8007-8022]:SingleVariableDeclaration[8007-8022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8024-8845]:Block[8024-8845]"
    }, {
      "left" : "if (item == null)",
      "right" : "if (item == null)",
      "info" : "IfStatement[8032-8071]:IfStatement[8032-8071]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8058-8071]:ReturnStatement[8058-8071]"
    }, {
      "left" : "if (item instanceof OIdentifiable)",
      "right" : "if (item instanceof OIdentifiable)",
      "info" : "IfStatement[8079-8816]:IfStatement[8079-8816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8114-8447]:Block[8114-8447]"
    }, {
      "left" : "final ValuesConverter<OIdentifiable> converter = (ValuesConverter<OIdentifiable>) ConvertersFactory.INSTANCE\n            .getConverter(item);",
      "right" : "final ValuesConverter<OIdentifiable> converter = (ValuesConverter<OIdentifiable>) ConvertersFactory.INSTANCE\n            .getConverter(item);",
      "info" : "VariableDeclarationStatement[8124-8265]:VariableDeclarationStatement[8124-8265]"
    }, {
      "left" : "final OIdentifiable newValue = converter.convert((OIdentifiable) item);",
      "right" : "final OIdentifiable newValue = converter.convert((OIdentifiable) item);",
      "info" : "VariableDeclarationStatement[8275-8346]:VariableDeclarationStatement[8275-8346]"
    }, {
      "left" : "result.add(newValue);",
      "right" : "result.add(newValue);",
      "info" : "ExpressionStatement[8355-8376]:ExpressionStatement[8355-8376]"
    }, {
      "left" : "if (!newValue.equals(item))",
      "right" : "if (!newValue.equals(item))",
      "info" : "IfStatement[8386-8439]:IfStatement[8386-8439]"
    }, {
      "left" : "updated = true;",
      "right" : "updated = true;",
      "info" : "ExpressionStatement[8424-8439]:ExpressionStatement[8424-8439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8453-8816]:Block[8453-8816]"
    }, {
      "left" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(item.getClass());",
      "right" : "final ValuesConverter valuesConverter = ConvertersFactory.INSTANCE.getConverter(item.getClass());",
      "info" : "VariableDeclarationStatement[8463-8560]:VariableDeclarationStatement[8463-8560]"
    }, {
      "left" : "if (valuesConverter == null)",
      "right" : "if (valuesConverter == null)",
      "info" : "IfStatement[8569-8808]:IfStatement[8569-8808]"
    }, {
      "left" : "result.add(item);",
      "right" : "result.add(item);",
      "info" : "ExpressionStatement[8608-8625]:ExpressionStatement[8608-8625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8639-8808]:Block[8639-8808]"
    }, {
      "left" : "final Object newValue = valuesConverter.convert(item);",
      "right" : "final Object newValue = valuesConverter.convert(item);",
      "info" : "VariableDeclarationStatement[8651-8705]:VariableDeclarationStatement[8651-8705]"
    }, {
      "left" : "if (newValue != item)",
      "right" : "if (newValue != item)",
      "info" : "IfStatement[8716-8765]:IfStatement[8716-8765]"
    }, {
      "left" : "updated = true;",
      "right" : "updated = true;",
      "info" : "ExpressionStatement[8750-8765]:ExpressionStatement[8750-8765]"
    }, {
      "left" : "result.add(newValue);",
      "right" : "result.add(newValue);",
      "info" : "ExpressionStatement[8777-8798]:ExpressionStatement[8777-8798]"
    }, {
      "left" : "return updated;",
      "right" : "return updated;",
      "info" : "ReturnStatement[8824-8839]:ReturnStatement[8824-8839]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8853-8860]:Modifier[8853-8860]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8861-8867]:Modifier[8861-8867]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[8868-8873]:Modifier[8868-8873]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8874-8879]:TYPE_DECLARATION_KIND[8874-8879]"
    }, {
      "left" : "SetConverter",
      "right" : "SetConverter",
      "info" : "SimpleName[8880-8892]:SimpleName[8880-8892]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9009-9018]:MarkerAnnotation[9009-9018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9023-9029]:Modifier[9023-9029]"
    }, {
      "left" : "Set",
      "right" : "Set",
      "info" : "SimpleType[9030-9033]:SimpleType[9030-9033]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[9034-9041]:SimpleName[9034-9041]"
    }, {
      "left" : "Set value",
      "right" : "Set value",
      "info" : "SingleVariableDeclaration[9042-9051]:SingleVariableDeclaration[9042-9051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9053-9661]:Block[9053-9661]"
    }, {
      "left" : "boolean updated = false;",
      "right" : "boolean updated = false;",
      "info" : "VariableDeclarationStatement[9061-9085]:VariableDeclarationStatement[9061-9085]"
    }, {
      "left" : "final Set result;",
      "right" : "final Set result;",
      "info" : "VariableDeclarationStatement[9092-9109]:VariableDeclarationStatement[9092-9109]"
    }, {
      "left" : "if (value instanceof OMVRBTreeRIDSet)",
      "right" : "if (value instanceof OMVRBTreeRIDSet)",
      "info" : "IfStatement[9117-9329]:IfStatement[9117-9329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9155-9292]:Block[9155-9292]"
    }, {
      "left" : "OMVRBTreeRIDSet ridSet = new OMVRBTreeRIDSet();",
      "right" : "OMVRBTreeRIDSet ridSet = new OMVRBTreeRIDSet();",
      "info" : "VariableDeclarationStatement[9165-9212]:VariableDeclarationStatement[9165-9212]"
    }, {
      "left" : "ridSet.setAutoConvertToRecord(false);",
      "right" : "ridSet.setAutoConvertToRecord(false);",
      "info" : "ExpressionStatement[9221-9258]:ExpressionStatement[9221-9258]"
    }, {
      "left" : "result = ridSet;",
      "right" : "result = ridSet;",
      "info" : "ExpressionStatement[9268-9284]:ExpressionStatement[9268-9284]"
    }, {
      "left" : "result = new HashSet();",
      "right" : "result = new HashSet();",
      "info" : "ExpressionStatement[9306-9329]:ExpressionStatement[9306-9329]"
    }, {
      "left" : "final ResultCallback callback = new ResultCallback() {\n        @Override\n        public void add(Object item) {\n          result.add(item);\n        }\n      };",
      "right" : "final ResultCallback callback = new ResultCallback() {\n        @Override\n        public void add(Object item) {\n          result.add(item);\n        }\n      };",
      "info" : "VariableDeclarationStatement[9337-9495]:VariableDeclarationStatement[9337-9495]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9400-9409]:MarkerAnnotation[9400-9409]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9418-9424]:Modifier[9418-9424]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9425-9429]:PrimitiveType[9425-9429]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[9430-9433]:SimpleName[9430-9433]"
    }, {
      "left" : "Object item",
      "right" : "Object item",
      "info" : "SingleVariableDeclaration[9434-9445]:SingleVariableDeclaration[9434-9445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9447-9486]:Block[9447-9486]"
    }, {
      "left" : "result.add(item);",
      "right" : "result.add(item);",
      "info" : "ExpressionStatement[9459-9476]:ExpressionStatement[9459-9476]"
    }, {
      "left" : "for (Object item : value)\n        updated = convertSingleValue(item, callback, updated);",
      "right" : "for (Object item : value)\n        updated = convertSingleValue(item, callback, updated);",
      "info" : "EnhancedForStatement[9503-9591]:EnhancedForStatement[9503-9591]"
    }, {
      "left" : "updated = convertSingleValue(item, callback, updated);",
      "right" : "updated = convertSingleValue(item, callback, updated);",
      "info" : "ExpressionStatement[9537-9591]:ExpressionStatement[9537-9591]"
    }, {
      "left" : "if (updated)",
      "right" : "if (updated)",
      "info" : "IfStatement[9599-9634]:IfStatement[9599-9634]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[9620-9634]:ReturnStatement[9620-9634]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[9642-9655]:ReturnStatement[9642-9655]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9669-9676]:Modifier[9669-9676]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9677-9683]:Modifier[9677-9683]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9684-9689]:Modifier[9684-9689]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[9690-9695]:TYPE_DECLARATION_KIND[9690-9695]"
    }, {
      "left" : "ListConverter",
      "right" : "ListConverter",
      "info" : "SimpleName[9696-9709]:SimpleName[9696-9709]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9829-9838]:MarkerAnnotation[9829-9838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9843-9849]:Modifier[9843-9849]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[9850-9854]:SimpleType[9850-9854]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[9855-9862]:SimpleName[9855-9862]"
    }, {
      "left" : "List value",
      "right" : "List value",
      "info" : "SingleVariableDeclaration[9863-9873]:SingleVariableDeclaration[9863-9873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9875-10282]:Block[9875-10282]"
    }, {
      "left" : "final List result = new ArrayList();",
      "right" : "final List result = new ArrayList();",
      "info" : "VariableDeclarationStatement[9883-9919]:VariableDeclarationStatement[9883-9919]"
    }, {
      "left" : "final ResultCallback callback = new ResultCallback() {\n        @Override\n        public void add(Object item) {\n          result.add(item);\n        }\n      };",
      "right" : "final ResultCallback callback = new ResultCallback() {\n        @Override\n        public void add(Object item) {\n          result.add(item);\n        }\n      };",
      "info" : "VariableDeclarationStatement[9927-10085]:VariableDeclarationStatement[9927-10085]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9990-9999]:MarkerAnnotation[9990-9999]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10008-10014]:Modifier[10008-10014]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10015-10019]:PrimitiveType[10015-10019]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[10020-10023]:SimpleName[10020-10023]"
    }, {
      "left" : "Object item",
      "right" : "Object item",
      "info" : "SingleVariableDeclaration[10024-10035]:SingleVariableDeclaration[10024-10035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10037-10076]:Block[10037-10076]"
    }, {
      "left" : "result.add(item);",
      "right" : "result.add(item);",
      "info" : "ExpressionStatement[10049-10066]:ExpressionStatement[10049-10066]"
    }, {
      "left" : "boolean updated = false;",
      "right" : "boolean updated = false;",
      "info" : "VariableDeclarationStatement[10092-10116]:VariableDeclarationStatement[10092-10116]"
    }, {
      "left" : "for (Object item : value)\n        updated = convertSingleValue(item, callback, updated);",
      "right" : "for (Object item : value)\n        updated = convertSingleValue(item, callback, updated);",
      "info" : "EnhancedForStatement[10124-10212]:EnhancedForStatement[10124-10212]"
    }, {
      "left" : "updated = convertSingleValue(item, callback, updated);",
      "right" : "updated = convertSingleValue(item, callback, updated);",
      "info" : "ExpressionStatement[10158-10212]:ExpressionStatement[10158-10212]"
    }, {
      "left" : "if (updated)",
      "right" : "if (updated)",
      "info" : "IfStatement[10220-10255]:IfStatement[10220-10255]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[10241-10255]:ReturnStatement[10241-10255]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[10263-10276]:ReturnStatement[10263-10276]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10290-10297]:Modifier[10290-10297]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10298-10304]:Modifier[10298-10304]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10305-10310]:Modifier[10305-10310]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10311-10316]:TYPE_DECLARATION_KIND[10311-10316]"
    }, {
      "left" : "RidBagConverter",
      "right" : "RidBagConverter",
      "info" : "SimpleName[10317-10332]:SimpleName[10317-10332]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10459-10468]:MarkerAnnotation[10459-10468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10473-10479]:Modifier[10473-10479]"
    }, {
      "left" : "ORidBag",
      "right" : "ORidBag",
      "info" : "SimpleType[10480-10487]:SimpleType[10480-10487]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[10488-10495]:SimpleName[10488-10495]"
    }, {
      "left" : "ORidBag value",
      "right" : "ORidBag value",
      "info" : "SingleVariableDeclaration[10496-10509]:SingleVariableDeclaration[10496-10509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10511-10957]:Block[10511-10957]"
    }, {
      "left" : "final ORidBag result = new ORidBag();",
      "right" : "final ORidBag result = new ORidBag();",
      "info" : "VariableDeclarationStatement[10519-10556]:VariableDeclarationStatement[10519-10556]"
    }, {
      "left" : "boolean updated = false;",
      "right" : "boolean updated = false;",
      "info" : "VariableDeclarationStatement[10563-10587]:VariableDeclarationStatement[10563-10587]"
    }, {
      "left" : "final ResultCallback callback = new ResultCallback() {\n        @Override\n        public void add(Object item) {\n          result.add((OIdentifiable) item);\n        }\n      };",
      "right" : "final ResultCallback callback = new ResultCallback() {\n        @Override\n        public void add(Object item) {\n          result.add((OIdentifiable) item);\n        }\n      };",
      "info" : "VariableDeclarationStatement[10594-10768]:VariableDeclarationStatement[10594-10768]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10657-10666]:MarkerAnnotation[10657-10666]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10675-10681]:Modifier[10675-10681]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10682-10686]:PrimitiveType[10682-10686]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[10687-10690]:SimpleName[10687-10690]"
    }, {
      "left" : "Object item",
      "right" : "Object item",
      "info" : "SingleVariableDeclaration[10691-10702]:SingleVariableDeclaration[10691-10702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10704-10759]:Block[10704-10759]"
    }, {
      "left" : "result.add((OIdentifiable) item);",
      "right" : "result.add((OIdentifiable) item);",
      "info" : "ExpressionStatement[10716-10749]:ExpressionStatement[10716-10749]"
    }, {
      "left" : "for (OIdentifiable identifiable : value)\n        updated = convertSingleValue(identifiable, callback, updated);",
      "right" : "for (OIdentifiable identifiable : value)\n        updated = convertSingleValue(identifiable, callback, updated);",
      "info" : "EnhancedForStatement[10776-10887]:EnhancedForStatement[10776-10887]"
    }, {
      "left" : "updated = convertSingleValue(identifiable, callback, updated);",
      "right" : "updated = convertSingleValue(identifiable, callback, updated);",
      "info" : "ExpressionStatement[10825-10887]:ExpressionStatement[10825-10887]"
    }, {
      "left" : "if (updated)",
      "right" : "if (updated)",
      "info" : "IfStatement[10895-10930]:IfStatement[10895-10930]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[10916-10930]:ReturnStatement[10916-10930]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[10938-10951]:ReturnStatement[10938-10951]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10965-10972]:Modifier[10965-10972]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10973-10979]:Modifier[10973-10979]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10980-10985]:Modifier[10980-10985]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10986-10991]:TYPE_DECLARATION_KIND[10986-10991]"
    }, {
      "left" : "MapConverter",
      "right" : "MapConverter",
      "info" : "SimpleName[10992-11004]:SimpleName[10992-11004]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11121-11130]:MarkerAnnotation[11121-11130]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11135-11141]:Modifier[11135-11141]"
    }, {
      "left" : "Map",
      "right" : "Map",
      "info" : "SimpleType[11142-11145]:SimpleType[11142-11145]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[11146-11153]:SimpleName[11146-11153]"
    }, {
      "left" : "Map value",
      "right" : "Map value",
      "info" : "SingleVariableDeclaration[11154-11163]:SingleVariableDeclaration[11154-11163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11165-11851]:Block[11165-11851]"
    }, {
      "left" : "final HashMap result = new HashMap();",
      "right" : "final HashMap result = new HashMap();",
      "info" : "VariableDeclarationStatement[11173-11210]:VariableDeclarationStatement[11173-11210]"
    }, {
      "left" : "boolean updated = false;",
      "right" : "boolean updated = false;",
      "info" : "VariableDeclarationStatement[11217-11241]:VariableDeclarationStatement[11217-11241]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11248-11253]:Modifier[11248-11253]"
    }, {
      "left" : "final class MapResultCallback implements ResultCallback {\n        private Object key;\n\n        @Override\n        public void add(Object item) {\n          result.put(key, item);\n        }\n\n        public void setKey(Object key) {\n          this.key = key;\n        }\n      }",
      "right" : "final class MapResultCallback implements ResultCallback {\n        private Object key;\n\n        @Override\n        public void add(Object item) {\n          result.put(key, item);\n        }\n\n        public void setKey(Object key) {\n          this.key = key;\n        }\n      }",
      "info" : "TypeDeclarationStatement[11248-11520]:TypeDeclarationStatement[11248-11520]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11254-11259]:TYPE_DECLARATION_KIND[11254-11259]"
    }, {
      "left" : "MapResultCallback",
      "right" : "MapResultCallback",
      "info" : "SimpleName[11260-11277]:SimpleName[11260-11277]"
    }, {
      "left" : "ResultCallback",
      "right" : "ResultCallback",
      "info" : "SimpleType[11289-11303]:SimpleType[11289-11303]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11343-11352]:MarkerAnnotation[11343-11352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11361-11367]:Modifier[11361-11367]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11368-11372]:PrimitiveType[11368-11372]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[11373-11376]:SimpleName[11373-11376]"
    }, {
      "left" : "Object item",
      "right" : "Object item",
      "info" : "SingleVariableDeclaration[11377-11388]:SingleVariableDeclaration[11377-11388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11390-11434]:Block[11390-11434]"
    }, {
      "left" : "result.put(key, item);",
      "right" : "result.put(key, item);",
      "info" : "ExpressionStatement[11402-11424]:ExpressionStatement[11402-11424]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11444-11450]:Modifier[11444-11450]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11451-11455]:PrimitiveType[11451-11455]"
    }, {
      "left" : "setKey",
      "right" : "setKey",
      "info" : "SimpleName[11456-11462]:SimpleName[11456-11462]"
    }, {
      "left" : "Object key",
      "right" : "Object key",
      "info" : "SingleVariableDeclaration[11463-11473]:SingleVariableDeclaration[11463-11473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11475-11512]:Block[11475-11512]"
    }, {
      "left" : "this.key = key;",
      "right" : "this.key = key;",
      "info" : "ExpressionStatement[11487-11502]:ExpressionStatement[11487-11502]"
    }, {
      "left" : "final MapResultCallback callback = new MapResultCallback();",
      "right" : "final MapResultCallback callback = new MapResultCallback();",
      "info" : "VariableDeclarationStatement[11528-11587]:VariableDeclarationStatement[11528-11587]"
    }, {
      "left" : "for (Map.Entry entry : (Iterable<Map.Entry>) value.entrySet())",
      "right" : "for (Map.Entry entry : (Iterable<Map.Entry>) value.entrySet())",
      "info" : "EnhancedForStatement[11594-11782]:EnhancedForStatement[11594-11782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11657-11782]:Block[11657-11782]"
    }, {
      "left" : "callback.setKey(entry.getKey());",
      "right" : "callback.setKey(entry.getKey());",
      "info" : "ExpressionStatement[11667-11699]:ExpressionStatement[11667-11699]"
    }, {
      "left" : "updated = convertSingleValue(entry.getValue(), callback, updated);",
      "right" : "updated = convertSingleValue(entry.getValue(), callback, updated);",
      "info" : "ExpressionStatement[11708-11774]:ExpressionStatement[11708-11774]"
    }, {
      "left" : "if (updated)",
      "right" : "if (updated)",
      "info" : "IfStatement[11789-11824]:IfStatement[11789-11824]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11810-11824]:ReturnStatement[11810-11824]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[11832-11845]:ReturnStatement[11832-11845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11859-11866]:Modifier[11859-11866]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11867-11873]:Modifier[11867-11873]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11874-11879]:Modifier[11874-11879]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11880-11885]:TYPE_DECLARATION_KIND[11880-11885]"
    }, {
      "left" : "LinkConverter",
      "right" : "LinkConverter",
      "info" : "SimpleName[11886-11899]:SimpleName[11886-11899]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12081-12090]:MarkerAnnotation[12081-12090]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12095-12101]:Modifier[12095-12101]"
    }, {
      "left" : "OIdentifiable",
      "right" : "OIdentifiable",
      "info" : "SimpleType[12102-12115]:SimpleType[12102-12115]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[12116-12123]:SimpleName[12116-12123]"
    }, {
      "left" : "OIdentifiable value",
      "right" : "OIdentifiable value",
      "info" : "SingleVariableDeclaration[12124-12143]:SingleVariableDeclaration[12124-12143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12145-12401]:Block[12145-12401]"
    }, {
      "left" : "final ORID rid = value.getIdentity();",
      "right" : "final ORID rid = value.getIdentity();",
      "info" : "VariableDeclarationStatement[12153-12190]:VariableDeclarationStatement[12153-12190]"
    }, {
      "left" : "if (!rid.isPersistent())",
      "right" : "if (!rid.isPersistent())",
      "info" : "IfStatement[12197-12243]:IfStatement[12197-12243]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[12230-12243]:ReturnStatement[12230-12243]"
    }, {
      "left" : "final OIdentifiable newRid = exportImportHashTable.get(rid);",
      "right" : "final OIdentifiable newRid = exportImportHashTable.get(rid);",
      "info" : "VariableDeclarationStatement[12251-12311]:VariableDeclarationStatement[12251-12311]"
    }, {
      "left" : "if (newRid == null)",
      "right" : "if (newRid == null)",
      "info" : "IfStatement[12318-12359]:IfStatement[12318-12359]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[12346-12359]:ReturnStatement[12346-12359]"
    }, {
      "left" : "return newRid.getIdentity();",
      "right" : "return newRid.getIdentity();",
      "info" : "ReturnStatement[12367-12395]:ReturnStatement[12367-12395]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12407-12413]:Modifier[12407-12413]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12414-12418]:PrimitiveType[12414-12418]"
    }, {
      "left" : "setExportImportHashTable",
      "right" : "setExportImportHashTable",
      "info" : "SimpleName[12419-12443]:SimpleName[12419-12443]"
    }, {
      "left" : "OIndex<OIdentifiable> exportImportHashTable",
      "right" : "OIndex<OIdentifiable> exportImportHashTable",
      "info" : "SingleVariableDeclaration[12444-12487]:SingleVariableDeclaration[12444-12487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12489-12554]:Block[12489-12554]"
    }, {
      "left" : "this.exportImportHashTable = exportImportHashTable;",
      "right" : "this.exportImportHashTable = exportImportHashTable;",
      "info" : "ExpressionStatement[12497-12548]:ExpressionStatement[12497-12548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12562-12568]:Modifier[12562-12568]"
    }, {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "SimpleName[12569-12584]:SimpleName[12569-12584]"
    }, {
      "left" : "final ODatabaseDocumentInternal database",
      "right" : "final ODatabaseDocumentInternal database",
      "info" : "SingleVariableDeclaration[12585-12625]:SingleVariableDeclaration[12585-12625]"
    }, {
      "left" : "final String iFileName",
      "right" : "final String iFileName",
      "info" : "SingleVariableDeclaration[12627-12649]:SingleVariableDeclaration[12627-12649]"
    }, {
      "left" : "final OCommandOutputListener iListener",
      "right" : "final OCommandOutputListener iListener",
      "info" : "SingleVariableDeclaration[12651-12689]:SingleVariableDeclaration[12651-12689]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12704-12715]:SimpleType[12704-12715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12716-13341]:Block[12716-13341]"
    }, {
      "left" : "super(database, iFileName, iListener);",
      "right" : "super(database, iFileName, iListener);",
      "info" : "SuperConstructorInvocation[12722-12760]:SuperConstructorInvocation[12722-12760]"
    }, {
      "left" : "InputStream inStream;",
      "right" : "InputStream inStream;",
      "info" : "VariableDeclarationStatement[12766-12787]:VariableDeclarationStatement[12766-12787]"
    }, {
      "left" : "final BufferedInputStream bf = new BufferedInputStream(new FileInputStream(fileName));",
      "right" : "final BufferedInputStream bf = new BufferedInputStream(new FileInputStream(fileName));",
      "info" : "VariableDeclarationStatement[12792-12878]:VariableDeclarationStatement[12792-12878]"
    }, {
      "left" : "bf.mark(1024);",
      "right" : "bf.mark(1024);",
      "info" : "ExpressionStatement[12883-12897]:ExpressionStatement[12883-12897]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12902-13037]:TryStatement[12902-13037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12906-12970]:Block[12906-12970]"
    }, {
      "left" : "inStream = new GZIPInputStream(bf, 16384);",
      "right" : "inStream = new GZIPInputStream(bf, 16384);",
      "info" : "ExpressionStatement[12914-12956]:ExpressionStatement[12914-12956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12991-13037]:Block[12991-13037]"
    }, {
      "left" : "bf.reset();",
      "right" : "bf.reset();",
      "info" : "ExpressionStatement[12999-13010]:ExpressionStatement[12999-13010]"
    }, {
      "left" : "inStream = bf;",
      "right" : "inStream = bf;",
      "info" : "ExpressionStatement[13017-13031]:ExpressionStatement[13017-13031]"
    }, {
      "left" : "OMurmurHash3HashFunction<OIdentifiable> keyHashFunction = new OMurmurHash3HashFunction<OIdentifiable>();",
      "right" : "OMurmurHash3HashFunction<OIdentifiable> keyHashFunction = new OMurmurHash3HashFunction<OIdentifiable>();",
      "info" : "VariableDeclarationStatement[13043-13147]:VariableDeclarationStatement[13043-13147]"
    }, {
      "left" : "keyHashFunction.setValueSerializer(OLinkSerializer.INSTANCE);",
      "right" : "keyHashFunction.setValueSerializer(OLinkSerializer.INSTANCE);",
      "info" : "ExpressionStatement[13152-13213]:ExpressionStatement[13152-13213]"
    }, {
      "left" : "jsonReader = new OJSONReader(new InputStreamReader(inStream));",
      "right" : "jsonReader = new OJSONReader(new InputStreamReader(inStream));",
      "info" : "ExpressionStatement[13219-13281]:ExpressionStatement[13219-13281]"
    }, {
      "left" : "database.declareIntent(new OIntentMassiveInsert());",
      "right" : "database.declareIntent(new OIntentMassiveInsert());",
      "info" : "ExpressionStatement[13286-13337]:ExpressionStatement[13286-13337]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13345-13351]:Modifier[13345-13351]"
    }, {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "SimpleName[13352-13367]:SimpleName[13352-13367]"
    }, {
      "left" : "final ODatabaseDocumentInternal database",
      "right" : "final ODatabaseDocumentInternal database",
      "info" : "SingleVariableDeclaration[13368-13408]:SingleVariableDeclaration[13368-13408]"
    }, {
      "left" : "final InputStream iStream",
      "right" : "final InputStream iStream",
      "info" : "SingleVariableDeclaration[13410-13435]:SingleVariableDeclaration[13410-13435]"
    }, {
      "left" : "final OCommandOutputListener iListener",
      "right" : "final OCommandOutputListener iListener",
      "info" : "SingleVariableDeclaration[13437-13475]:SingleVariableDeclaration[13437-13475]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13490-13501]:SimpleType[13490-13501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13502-13674]:Block[13502-13674]"
    }, {
      "left" : "super(database, \"streaming\", iListener);",
      "right" : "super(database, \"streaming\", iListener);",
      "info" : "SuperConstructorInvocation[13508-13548]:SuperConstructorInvocation[13508-13548]"
    }, {
      "left" : "jsonReader = new OJSONReader(new InputStreamReader(iStream));",
      "right" : "jsonReader = new OJSONReader(new InputStreamReader(iStream));",
      "info" : "ExpressionStatement[13553-13614]:ExpressionStatement[13553-13614]"
    }, {
      "left" : "database.declareIntent(new OIntentMassiveInsert());",
      "right" : "database.declareIntent(new OIntentMassiveInsert());",
      "info" : "ExpressionStatement[13619-13670]:ExpressionStatement[13619-13670]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13678-13687]:MarkerAnnotation[13678-13687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13690-13696]:Modifier[13690-13696]"
    }, {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "SimpleType[13697-13712]:SimpleType[13697-13712]"
    }, {
      "left" : "setOptions",
      "right" : "setOptions",
      "info" : "SimpleName[13713-13723]:SimpleName[13713-13723]"
    }, {
      "left" : "String iOptions",
      "right" : "String iOptions",
      "info" : "SingleVariableDeclaration[13724-13739]:SingleVariableDeclaration[13724-13739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13741-13795]:Block[13741-13795]"
    }, {
      "left" : "super.setOptions(iOptions);",
      "right" : "super.setOptions(iOptions);",
      "info" : "ExpressionStatement[13747-13774]:ExpressionStatement[13747-13774]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13779-13791]:ReturnStatement[13779-13791]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13799-13805]:Modifier[13799-13805]"
    }, {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "SimpleType[13806-13821]:SimpleType[13806-13821]"
    }, {
      "left" : "importDatabase",
      "right" : "importDatabase",
      "info" : "SimpleName[13822-13836]:SimpleName[13822-13836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13839-16136]:Block[13839-16136]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13845-16114]:TryStatement[13845-16114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13849-15322]:Block[13849-15322]"
    }, {
      "left" : "listener.onMessage(\"\\nStarted import of database '\" + database.getURL() + \"' from \" + fileName + \"...\");",
      "right" : "listener.onMessage(\"\\nStarted import of database '\" + database.getURL() + \"' from \" + fileName + \"...\");",
      "info" : "ExpressionStatement[13857-13961]:ExpressionStatement[13857-13961]"
    }, {
      "left" : "long time = System.currentTimeMillis();",
      "right" : "long time = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[13969-14008]:VariableDeclarationStatement[13969-14008]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[14016-14062]:ExpressionStatement[14016-14062]"
    }, {
      "left" : "database.setMVCC(false);",
      "right" : "database.setMVCC(false);",
      "info" : "ExpressionStatement[14070-14094]:ExpressionStatement[14070-14094]"
    }, {
      "left" : "database.setValidationEnabled(false);",
      "right" : "database.setValidationEnabled(false);",
      "info" : "ExpressionStatement[14101-14138]:ExpressionStatement[14101-14138]"
    }, {
      "left" : "database.setStatus(STATUS.IMPORTING);",
      "right" : "database.setStatus(STATUS.IMPORTING);",
      "info" : "ExpressionStatement[14146-14183]:ExpressionStatement[14146-14183]"
    }, {
      "left" : "for (OIndex<?> index : database.getMetadata().getIndexManager().getIndexes())",
      "right" : "for (OIndex<?> index : database.getMetadata().getIndexManager().getIndexes())",
      "info" : "EnhancedForStatement[14191-14374]:EnhancedForStatement[14191-14374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14269-14374]:Block[14269-14374]"
    }, {
      "left" : "if (index.isAutomatic())",
      "right" : "if (index.isAutomatic())",
      "info" : "IfStatement[14279-14366]:IfStatement[14279-14366]"
    }, {
      "left" : "indexesToRebuild.add(index.getName().toLowerCase());",
      "right" : "indexesToRebuild.add(index.getName().toLowerCase());",
      "info" : "ExpressionStatement[14314-14366]:ExpressionStatement[14314-14366]"
    }, {
      "left" : "if (!merge)",
      "right" : "if (!merge)",
      "info" : "IfStatement[14382-14436]:IfStatement[14382-14436]"
    }, {
      "left" : "removeDefaultNonSecurityClasses();",
      "right" : "removeDefaultNonSecurityClasses();",
      "info" : "ExpressionStatement[14402-14436]:ExpressionStatement[14402-14436]"
    }, {
      "left" : "String tag;",
      "right" : "String tag;",
      "info" : "VariableDeclarationStatement[14444-14455]:VariableDeclarationStatement[14444-14455]"
    }, {
      "left" : "while (jsonReader.hasNext() && jsonReader.lastChar() != '}')",
      "right" : "while (jsonReader.hasNext() && jsonReader.lastChar() != '}')",
      "info" : "WhileStatement[14462-15003]:WhileStatement[14462-15003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14523-15003]:Block[14523-15003]"
    }, {
      "left" : "tag = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "tag = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[14533-14591]:ExpressionStatement[14533-14591]"
    }, {
      "left" : "if (tag.equals(\"info\"))",
      "right" : "if (tag.equals(\"info\"))",
      "info" : "IfStatement[14601-14995]:IfStatement[14601-14995]"
    }, {
      "left" : "importInfo();",
      "right" : "importInfo();",
      "info" : "ExpressionStatement[14635-14648]:ExpressionStatement[14635-14648]"
    }, {
      "left" : "if (tag.equals(\"clusters\"))",
      "right" : "if (tag.equals(\"clusters\"))",
      "info" : "IfStatement[14662-14995]:IfStatement[14662-14995]"
    }, {
      "left" : "importClusters();",
      "right" : "importClusters();",
      "info" : "ExpressionStatement[14700-14717]:ExpressionStatement[14700-14717]"
    }, {
      "left" : "if (tag.equals(\"schema\"))",
      "right" : "if (tag.equals(\"schema\"))",
      "info" : "IfStatement[14731-14995]:IfStatement[14731-14995]"
    }, {
      "left" : "importSchema();",
      "right" : "importSchema();",
      "info" : "ExpressionStatement[14767-14782]:ExpressionStatement[14767-14782]"
    }, {
      "left" : "if (tag.equals(\"records\"))",
      "right" : "if (tag.equals(\"records\"))",
      "info" : "IfStatement[14796-14995]:IfStatement[14796-14995]"
    }, {
      "left" : "importRecords();",
      "right" : "importRecords();",
      "info" : "ExpressionStatement[14833-14849]:ExpressionStatement[14833-14849]"
    }, {
      "left" : "if (tag.equals(\"indexes\"))",
      "right" : "if (tag.equals(\"indexes\"))",
      "info" : "IfStatement[14863-14995]:IfStatement[14863-14995]"
    }, {
      "left" : "importIndexes();",
      "right" : "importIndexes();",
      "info" : "ExpressionStatement[14900-14916]:ExpressionStatement[14900-14916]"
    }, {
      "left" : "if (tag.equals(\"manualIndexes\"))",
      "right" : "if (tag.equals(\"manualIndexes\"))",
      "info" : "IfStatement[14930-14995]:IfStatement[14930-14995]"
    }, {
      "left" : "importManualIndexes();",
      "right" : "importManualIndexes();",
      "info" : "ExpressionStatement[14973-14995]:ExpressionStatement[14973-14995]"
    }, {
      "left" : "if (rebuildIndexes)",
      "right" : "if (rebuildIndexes)",
      "info" : "IfStatement[15011-15056]:IfStatement[15011-15056]"
    }, {
      "left" : "rebuildIndexes();",
      "right" : "rebuildIndexes();",
      "info" : "ExpressionStatement[15039-15056]:ExpressionStatement[15039-15056]"
    }, {
      "left" : "database.getStorage().synch();",
      "right" : "database.getStorage().synch();",
      "info" : "ExpressionStatement[15064-15094]:ExpressionStatement[15064-15094]"
    }, {
      "left" : "database.setStatus(STATUS.OPEN);",
      "right" : "database.setStatus(STATUS.OPEN);",
      "info" : "ExpressionStatement[15101-15133]:ExpressionStatement[15101-15133]"
    }, {
      "left" : "if (isDeleteRIDMapping())",
      "right" : "if (isDeleteRIDMapping())",
      "info" : "IfStatement[15141-15203]:IfStatement[15141-15203]"
    }, {
      "left" : "removeExportImportRIDsMap();",
      "right" : "removeExportImportRIDsMap();",
      "info" : "ExpressionStatement[15175-15203]:ExpressionStatement[15175-15203]"
    }, {
      "left" : "listener.onMessage(\"\\n\\nDatabase import completed in \" + ((System.currentTimeMillis() - time)) + \" ms\");",
      "right" : "listener.onMessage(\"\\n\\nDatabase import completed in \" + ((System.currentTimeMillis() - time)) + \" ms\");",
      "info" : "ExpressionStatement[15211-15315]:ExpressionStatement[15211-15315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15343-16083]:Block[15343-16083]"
    }, {
      "left" : "final StringWriter writer = new StringWriter();",
      "right" : "final StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[15351-15398]:VariableDeclarationStatement[15351-15398]"
    }, {
      "left" : "writer.append(\"Error on database import happened just before line \" + jsonReader.getLineNumber() + \", column \"\n          + jsonReader.getColumnNumber() + \"\\n\");",
      "right" : "writer.append(\"Error on database import happened just before line \" + jsonReader.getLineNumber() + \", column \"\n          + jsonReader.getColumnNumber() + \"\\n\");",
      "info" : "ExpressionStatement[15405-15565]:ExpressionStatement[15405-15565]"
    }, {
      "left" : "final PrintWriter printWriter = new PrintWriter(writer);",
      "right" : "final PrintWriter printWriter = new PrintWriter(writer);",
      "info" : "VariableDeclarationStatement[15572-15628]:VariableDeclarationStatement[15572-15628]"
    }, {
      "left" : "e.printStackTrace(printWriter);",
      "right" : "e.printStackTrace(printWriter);",
      "info" : "ExpressionStatement[15635-15666]:ExpressionStatement[15635-15666]"
    }, {
      "left" : "printWriter.flush();",
      "right" : "printWriter.flush();",
      "info" : "ExpressionStatement[15673-15693]:ExpressionStatement[15673-15693]"
    }, {
      "left" : "listener.onMessage(writer.toString());",
      "right" : "listener.onMessage(writer.toString());",
      "info" : "ExpressionStatement[15701-15739]:ExpressionStatement[15701-15739]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15747-15948]:TryStatement[15747-15948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15751-15784]:Block[15751-15784]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[15761-15776]:ExpressionStatement[15761-15776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15808-15948]:Block[15808-15948]"
    }, {
      "left" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e1);",
      "right" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e1);",
      "info" : "ThrowStatement[15818-15940]:ThrowStatement[15818-15940]"
    }, {
      "left" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e);",
      "right" : "throw new ODatabaseExportException(\"Error on importing database '\" + database.getName() + \"' from file: \" + fileName, e);",
      "info" : "ThrowStatement[15956-16077]:ThrowStatement[15956-16077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16092-16114]:Block[16092-16114]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[16100-16108]:ExpressionStatement[16100-16108]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16120-16132]:ReturnStatement[16120-16132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16140-16146]:Modifier[16140-16146]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16147-16151]:PrimitiveType[16147-16151]"
    }, {
      "left" : "rebuildIndexes",
      "right" : "rebuildIndexes",
      "info" : "SimpleName[16152-16166]:SimpleName[16152-16166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16169-16894]:Block[16169-16894]"
    }, {
      "left" : "database.getMetadata().getIndexManager().reload();",
      "right" : "database.getMetadata().getIndexManager().reload();",
      "info" : "ExpressionStatement[16175-16225]:ExpressionStatement[16175-16225]"
    }, {
      "left" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
      "right" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
      "info" : "VariableDeclarationStatement[16231-16306]:VariableDeclarationStatement[16231-16306]"
    }, {
      "left" : "listener.onMessage(\"\\nRebuild of stale indexes...\");",
      "right" : "listener.onMessage(\"\\nRebuild of stale indexes...\");",
      "info" : "ExpressionStatement[16312-16364]:ExpressionStatement[16312-16364]"
    }, {
      "left" : "for (String indexName : indexesToRebuild)",
      "right" : "for (String indexName : indexesToRebuild)",
      "info" : "EnhancedForStatement[16369-16831]:EnhancedForStatement[16369-16831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16411-16831]:Block[16411-16831]"
    }, {
      "left" : "if (indexManager.getIndex(indexName) == null)",
      "right" : "if (indexManager.getIndex(indexName) == null)",
      "info" : "IfStatement[16420-16598]:IfStatement[16420-16598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16466-16598]:Block[16466-16598]"
    }, {
      "left" : "listener.onMessage(\"\\nIndex \" + indexName + \" is skipped because it is absent in imported DB.\");",
      "right" : "listener.onMessage(\"\\nIndex \" + indexName + \" is skipped because it is absent in imported DB.\");",
      "info" : "ExpressionStatement[16476-16572]:ExpressionStatement[16476-16572]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16581-16590]:ContinueStatement[16581-16590]"
    }, {
      "left" : "listener.onMessage(\"\\nStart rebuild index \" + indexName);",
      "right" : "listener.onMessage(\"\\nStart rebuild index \" + indexName);",
      "info" : "ExpressionStatement[16606-16663]:ExpressionStatement[16606-16663]"
    }, {
      "left" : "database.command(new OCommandSQL(\"rebuild index \" + indexName)).execute();",
      "right" : "database.command(new OCommandSQL(\"rebuild index \" + indexName)).execute();",
      "info" : "ExpressionStatement[16670-16744]:ExpressionStatement[16670-16744]"
    }, {
      "left" : "listener.onMessage(\"\\nRebuild  of index \" + indexName + \" is completed.\");",
      "right" : "listener.onMessage(\"\\nRebuild  of index \" + indexName + \" is completed.\");",
      "info" : "ExpressionStatement[16751-16825]:ExpressionStatement[16751-16825]"
    }, {
      "left" : "listener.onMessage(\"\\nStale indexes were rebuilt...\");",
      "right" : "listener.onMessage(\"\\nStale indexes were rebuilt...\");",
      "info" : "ExpressionStatement[16836-16890]:ExpressionStatement[16836-16890]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16898-16904]:Modifier[16898-16904]"
    }, {
      "left" : "ODatabaseImport",
      "right" : "ODatabaseImport",
      "info" : "SimpleType[16905-16920]:SimpleType[16905-16920]"
    }, {
      "left" : "removeExportImportRIDsMap",
      "right" : "removeExportImportRIDsMap",
      "info" : "SimpleName[16921-16946]:SimpleName[16921-16946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16949-17227]:Block[16949-17227]"
    }, {
      "left" : "listener.onMessage(\"\\nDeleting RID Mapping table...\");",
      "right" : "listener.onMessage(\"\\nDeleting RID Mapping table...\");",
      "info" : "ExpressionStatement[16955-17009]:ExpressionStatement[16955-17009]"
    }, {
      "left" : "if (exportImportHashTable != null)",
      "right" : "if (exportImportHashTable != null)",
      "info" : "IfStatement[17014-17173]:IfStatement[17014-17173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17049-17173]:Block[17049-17173]"
    }, {
      "left" : "database.command(new OCommandSQL(\"drop index \" + EXPORT_IMPORT_MAP_NAME));",
      "right" : "database.command(new OCommandSQL(\"drop index \" + EXPORT_IMPORT_MAP_NAME));",
      "info" : "ExpressionStatement[17057-17131]:ExpressionStatement[17057-17131]"
    }, {
      "left" : "exportImportHashTable = null;",
      "right" : "exportImportHashTable = null;",
      "info" : "ExpressionStatement[17138-17167]:ExpressionStatement[17138-17167]"
    }, {
      "left" : "listener.onMessage(\"OK\\n\");",
      "right" : "listener.onMessage(\"OK\\n\");",
      "info" : "ExpressionStatement[17179-17206]:ExpressionStatement[17179-17206]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17211-17223]:ReturnStatement[17211-17223]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17231-17237]:Modifier[17231-17237]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17238-17242]:PrimitiveType[17238-17242]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[17243-17248]:SimpleName[17243-17248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17251-17290]:Block[17251-17290]"
    }, {
      "left" : "database.declareIntent(null);",
      "right" : "database.declareIntent(null);",
      "info" : "ExpressionStatement[17257-17286]:ExpressionStatement[17257-17286]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17294-17300]:Modifier[17294-17300]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17301-17308]:PrimitiveType[17301-17308]"
    }, {
      "left" : "isMigrateLinks",
      "right" : "isMigrateLinks",
      "info" : "SimpleName[17309-17323]:SimpleName[17309-17323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17326-17356]:Block[17326-17356]"
    }, {
      "left" : "return migrateLinks;",
      "right" : "return migrateLinks;",
      "info" : "ReturnStatement[17332-17352]:ReturnStatement[17332-17352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17360-17366]:Modifier[17360-17366]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17367-17371]:PrimitiveType[17367-17371]"
    }, {
      "left" : "setMigrateLinks",
      "right" : "setMigrateLinks",
      "info" : "SimpleName[17372-17387]:SimpleName[17372-17387]"
    }, {
      "left" : "boolean migrateLinks",
      "right" : "boolean migrateLinks",
      "info" : "SingleVariableDeclaration[17388-17408]:SingleVariableDeclaration[17388-17408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17410-17453]:Block[17410-17453]"
    }, {
      "left" : "this.migrateLinks = migrateLinks;",
      "right" : "this.migrateLinks = migrateLinks;",
      "info" : "ExpressionStatement[17416-17449]:ExpressionStatement[17416-17449]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17457-17463]:Modifier[17457-17463]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17464-17471]:PrimitiveType[17464-17471]"
    }, {
      "left" : "isRebuildIndexes",
      "right" : "isRebuildIndexes",
      "info" : "SimpleName[17472-17488]:SimpleName[17472-17488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17491-17523]:Block[17491-17523]"
    }, {
      "left" : "return rebuildIndexes;",
      "right" : "return rebuildIndexes;",
      "info" : "ReturnStatement[17497-17519]:ReturnStatement[17497-17519]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17527-17533]:Modifier[17527-17533]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17534-17538]:PrimitiveType[17534-17538]"
    }, {
      "left" : "setRebuildIndexes",
      "right" : "setRebuildIndexes",
      "info" : "SimpleName[17539-17556]:SimpleName[17539-17556]"
    }, {
      "left" : "boolean rebuildIndexes",
      "right" : "boolean rebuildIndexes",
      "info" : "SingleVariableDeclaration[17557-17579]:SingleVariableDeclaration[17557-17579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17581-17628]:Block[17581-17628]"
    }, {
      "left" : "this.rebuildIndexes = rebuildIndexes;",
      "right" : "this.rebuildIndexes = rebuildIndexes;",
      "info" : "ExpressionStatement[17587-17624]:ExpressionStatement[17587-17624]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17632-17638]:Modifier[17632-17638]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17639-17646]:PrimitiveType[17639-17646]"
    }, {
      "left" : "isPreserveClusterIDs",
      "right" : "isPreserveClusterIDs",
      "info" : "SimpleName[17647-17667]:SimpleName[17647-17667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17670-17706]:Block[17670-17706]"
    }, {
      "left" : "return preserveClusterIDs;",
      "right" : "return preserveClusterIDs;",
      "info" : "ReturnStatement[17676-17702]:ReturnStatement[17676-17702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17710-17716]:Modifier[17710-17716]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17717-17721]:PrimitiveType[17717-17721]"
    }, {
      "left" : "setPreserveClusterIDs",
      "right" : "setPreserveClusterIDs",
      "info" : "SimpleName[17722-17743]:SimpleName[17722-17743]"
    }, {
      "left" : "boolean preserveClusterIDs",
      "right" : "boolean preserveClusterIDs",
      "info" : "SingleVariableDeclaration[17744-17770]:SingleVariableDeclaration[17744-17770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17772-17827]:Block[17772-17827]"
    }, {
      "left" : "this.preserveClusterIDs = preserveClusterIDs;",
      "right" : "this.preserveClusterIDs = preserveClusterIDs;",
      "info" : "ExpressionStatement[17778-17823]:ExpressionStatement[17778-17823]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17831-17837]:Modifier[17831-17837]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17838-17845]:PrimitiveType[17838-17845]"
    }, {
      "left" : "isMerge",
      "right" : "isMerge",
      "info" : "SimpleName[17846-17853]:SimpleName[17846-17853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17856-17879]:Block[17856-17879]"
    }, {
      "left" : "return merge;",
      "right" : "return merge;",
      "info" : "ReturnStatement[17862-17875]:ReturnStatement[17862-17875]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17883-17889]:Modifier[17883-17889]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17890-17894]:PrimitiveType[17890-17894]"
    }, {
      "left" : "setMerge",
      "right" : "setMerge",
      "info" : "SimpleName[17895-17903]:SimpleName[17895-17903]"
    }, {
      "left" : "boolean merge",
      "right" : "boolean merge",
      "info" : "SingleVariableDeclaration[17904-17917]:SingleVariableDeclaration[17904-17917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17919-17948]:Block[17919-17948]"
    }, {
      "left" : "this.merge = merge;",
      "right" : "this.merge = merge;",
      "info" : "ExpressionStatement[17925-17944]:ExpressionStatement[17925-17944]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17952-17958]:Modifier[17952-17958]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17959-17966]:PrimitiveType[17959-17966]"
    }, {
      "left" : "isDeleteRIDMapping",
      "right" : "isDeleteRIDMapping",
      "info" : "SimpleName[17967-17985]:SimpleName[17967-17985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17988-18022]:Block[17988-18022]"
    }, {
      "left" : "return deleteRIDMapping;",
      "right" : "return deleteRIDMapping;",
      "info" : "ReturnStatement[17994-18018]:ReturnStatement[17994-18018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18026-18032]:Modifier[18026-18032]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18033-18037]:PrimitiveType[18033-18037]"
    }, {
      "left" : "setDeleteRIDMapping",
      "right" : "setDeleteRIDMapping",
      "info" : "SimpleName[18038-18057]:SimpleName[18038-18057]"
    }, {
      "left" : "boolean deleteRIDMapping",
      "right" : "boolean deleteRIDMapping",
      "info" : "SingleVariableDeclaration[18058-18082]:SingleVariableDeclaration[18058-18082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18084-18135]:Block[18084-18135]"
    }, {
      "left" : "this.deleteRIDMapping = deleteRIDMapping;",
      "right" : "this.deleteRIDMapping = deleteRIDMapping;",
      "info" : "ExpressionStatement[18090-18131]:ExpressionStatement[18090-18131]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18139-18148]:MarkerAnnotation[18139-18148]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18151-18160]:Modifier[18151-18160]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18161-18165]:PrimitiveType[18161-18165]"
    }, {
      "left" : "parseSetting",
      "right" : "parseSetting",
      "info" : "SimpleName[18166-18178]:SimpleName[18166-18178]"
    }, {
      "left" : "final String option",
      "right" : "final String option",
      "info" : "SingleVariableDeclaration[18179-18198]:SingleVariableDeclaration[18179-18198]"
    }, {
      "left" : "final List<String> items",
      "right" : "final List<String> items",
      "info" : "SingleVariableDeclaration[18200-18224]:SingleVariableDeclaration[18200-18224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18226-18846]:Block[18226-18846]"
    }, {
      "left" : "if (option.equalsIgnoreCase(\"-deleteRIDMapping\"))",
      "right" : "if (option.equalsIgnoreCase(\"-deleteRIDMapping\"))",
      "info" : "IfStatement[18232-18842]:IfStatement[18232-18842]"
    }, {
      "left" : "deleteRIDMapping = Boolean.parseBoolean(items.get(0));",
      "right" : "deleteRIDMapping = Boolean.parseBoolean(items.get(0));",
      "info" : "ExpressionStatement[18288-18342]:ExpressionStatement[18288-18342]"
    }, {
      "left" : "if (option.equalsIgnoreCase(\"-preserveClusterIDs\"))",
      "right" : "if (option.equalsIgnoreCase(\"-preserveClusterIDs\"))",
      "info" : "IfStatement[18352-18842]:IfStatement[18352-18842]"
    }, {
      "left" : "preserveClusterIDs = Boolean.parseBoolean(items.get(0));",
      "right" : "preserveClusterIDs = Boolean.parseBoolean(items.get(0));",
      "info" : "ExpressionStatement[18410-18466]:ExpressionStatement[18410-18466]"
    }, {
      "left" : "if (option.equalsIgnoreCase(\"-merge\"))",
      "right" : "if (option.equalsIgnoreCase(\"-merge\"))",
      "info" : "IfStatement[18476-18842]:IfStatement[18476-18842]"
    }, {
      "left" : "merge = Boolean.parseBoolean(items.get(0));",
      "right" : "merge = Boolean.parseBoolean(items.get(0));",
      "info" : "ExpressionStatement[18521-18564]:ExpressionStatement[18521-18564]"
    }, {
      "left" : "if (option.equalsIgnoreCase(\"-migrateLinks\"))",
      "right" : "if (option.equalsIgnoreCase(\"-migrateLinks\"))",
      "info" : "IfStatement[18574-18842]:IfStatement[18574-18842]"
    }, {
      "left" : "migrateLinks = Boolean.parseBoolean(items.get(0));",
      "right" : "migrateLinks = Boolean.parseBoolean(items.get(0));",
      "info" : "ExpressionStatement[18626-18676]:ExpressionStatement[18626-18676]"
    }, {
      "left" : "if (option.equalsIgnoreCase(\"-rebuildIndexes\"))",
      "right" : "if (option.equalsIgnoreCase(\"-rebuildIndexes\"))",
      "info" : "IfStatement[18686-18842]:IfStatement[18686-18842]"
    }, {
      "left" : "rebuildIndexes = Boolean.parseBoolean(items.get(0));",
      "right" : "rebuildIndexes = Boolean.parseBoolean(items.get(0));",
      "info" : "ExpressionStatement[18740-18792]:ExpressionStatement[18740-18792]"
    }, {
      "left" : "super.parseSetting(option, items);",
      "right" : "super.parseSetting(option, items);",
      "info" : "ExpressionStatement[18808-18842]:ExpressionStatement[18808-18842]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18850-18859]:Modifier[18850-18859]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18860-18864]:PrimitiveType[18860-18864]"
    }, {
      "left" : "removeDefaultClusters",
      "right" : "removeDefaultClusters",
      "info" : "SimpleName[18865-18886]:SimpleName[18865-18886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18889-20437]:Block[18889-20437]"
    }, {
      "left" : "listener.onMessage(\"\\nWARN: Exported database does not support manual index separation.\"\n        + \" Manual index cluster will be dropped.\");",
      "right" : "listener.onMessage(\"\\nWARN: Exported database does not support manual index separation.\"\n        + \" Manual index cluster will be dropped.\");",
      "info" : "ExpressionStatement[18895-19036]:ExpressionStatement[18895-19036]"
    }, {
      "left" : "database.dropCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME, true);",
      "right" : "database.dropCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME, true);",
      "info" : "ExpressionStatement[19229-19300]:ExpressionStatement[19229-19300]"
    }, {
      "left" : "final OSchema schema = database.getMetadata().getSchema();",
      "right" : "final OSchema schema = database.getMetadata().getSchema();",
      "info" : "VariableDeclarationStatement[19306-19364]:VariableDeclarationStatement[19306-19364]"
    }, {
      "left" : "if (schema.existsClass(OUser.CLASS_NAME))",
      "right" : "if (schema.existsClass(OUser.CLASS_NAME))",
      "info" : "IfStatement[19369-19452]:IfStatement[19369-19452]"
    }, {
      "left" : "schema.dropClass(OUser.CLASS_NAME);",
      "right" : "schema.dropClass(OUser.CLASS_NAME);",
      "info" : "ExpressionStatement[19417-19452]:ExpressionStatement[19417-19452]"
    }, {
      "left" : "if (schema.existsClass(ORole.CLASS_NAME))",
      "right" : "if (schema.existsClass(ORole.CLASS_NAME))",
      "info" : "IfStatement[19457-19540]:IfStatement[19457-19540]"
    }, {
      "left" : "schema.dropClass(ORole.CLASS_NAME);",
      "right" : "schema.dropClass(ORole.CLASS_NAME);",
      "info" : "ExpressionStatement[19505-19540]:ExpressionStatement[19505-19540]"
    }, {
      "left" : "if (schema.existsClass(OSecurityShared.RESTRICTED_CLASSNAME))",
      "right" : "if (schema.existsClass(OSecurityShared.RESTRICTED_CLASSNAME))",
      "info" : "IfStatement[19545-19668]:IfStatement[19545-19668]"
    }, {
      "left" : "schema.dropClass(OSecurityShared.RESTRICTED_CLASSNAME);",
      "right" : "schema.dropClass(OSecurityShared.RESTRICTED_CLASSNAME);",
      "info" : "ExpressionStatement[19613-19668]:ExpressionStatement[19613-19668]"
    }, {
      "left" : "if (schema.existsClass(OFunction.CLASS_NAME))",
      "right" : "if (schema.existsClass(OFunction.CLASS_NAME))",
      "info" : "IfStatement[19673-19764]:IfStatement[19673-19764]"
    }, {
      "left" : "schema.dropClass(OFunction.CLASS_NAME);",
      "right" : "schema.dropClass(OFunction.CLASS_NAME);",
      "info" : "ExpressionStatement[19725-19764]:ExpressionStatement[19725-19764]"
    }, {
      "left" : "if (schema.existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))",
      "right" : "if (schema.existsClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME))",
      "info" : "IfStatement[19769-19904]:IfStatement[19769-19904]"
    }, {
      "left" : "schema.dropClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
      "right" : "schema.dropClass(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
      "info" : "ExpressionStatement[19843-19904]:ExpressionStatement[19843-19904]"
    }, {
      "left" : "if (schema.existsClass(OClassTrigger.CLASSNAME))",
      "right" : "if (schema.existsClass(OClassTrigger.CLASSNAME))",
      "info" : "IfStatement[19909-20006]:IfStatement[19909-20006]"
    }, {
      "left" : "schema.dropClass(OClassTrigger.CLASSNAME);",
      "right" : "schema.dropClass(OClassTrigger.CLASSNAME);",
      "info" : "ExpressionStatement[19964-20006]:ExpressionStatement[19964-20006]"
    }, {
      "left" : "schema.save();",
      "right" : "schema.save();",
      "info" : "ExpressionStatement[20011-20025]:ExpressionStatement[20011-20025]"
    }, {
      "left" : "database.dropCluster(OStorage.CLUSTER_DEFAULT_NAME, true);",
      "right" : "database.dropCluster(OStorage.CLUSTER_DEFAULT_NAME, true);",
      "info" : "ExpressionStatement[20031-20089]:ExpressionStatement[20031-20089]"
    }, {
      "left" : "database.getStorage().setDefaultClusterId(database.addCluster(OStorage.CLUSTER_DEFAULT_NAME));",
      "right" : "database.getStorage().setDefaultClusterId(database.addCluster(OStorage.CLUSTER_DEFAULT_NAME));",
      "info" : "ExpressionStatement[20095-20189]:ExpressionStatement[20095-20189]"
    }, {
      "left" : "new ODocument().save(OStorage.CLUSTER_DEFAULT_NAME);",
      "right" : "new ODocument().save(OStorage.CLUSTER_DEFAULT_NAME);",
      "info" : "ExpressionStatement[20329-20381]:ExpressionStatement[20329-20381]"
    }, {
      "left" : "database.getMetadata().getSecurity().create();",
      "right" : "database.getMetadata().getSecurity().create();",
      "info" : "ExpressionStatement[20387-20433]:ExpressionStatement[20387-20433]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20441-20448]:Modifier[20441-20448]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20449-20453]:PrimitiveType[20449-20453]"
    }, {
      "left" : "removeDefaultNonSecurityClasses",
      "right" : "removeDefaultNonSecurityClasses",
      "info" : "SimpleName[20454-20485]:SimpleName[20454-20485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20488-22108]:Block[20488-22108]"
    }, {
      "left" : "listener.onMessage(\"\\nNon merge mode (-merge=false): removing all default non security classes\");",
      "right" : "listener.onMessage(\"\\nNon merge mode (-merge=false): removing all default non security classes\");",
      "info" : "ExpressionStatement[20494-20591]:ExpressionStatement[20494-20591]"
    }, {
      "left" : "OSchema schema = database.getMetadata().getSchema();",
      "right" : "OSchema schema = database.getMetadata().getSchema();",
      "info" : "VariableDeclarationStatement[20597-20649]:VariableDeclarationStatement[20597-20649]"
    }, {
      "left" : "Collection<OClass> classes = schema.getClasses();",
      "right" : "Collection<OClass> classes = schema.getClasses();",
      "info" : "VariableDeclarationStatement[20654-20703]:VariableDeclarationStatement[20654-20703]"
    }, {
      "left" : "final Map<String, OClass> classesToDrop = new HashMap<String, OClass>();",
      "right" : "final Map<String, OClass> classesToDrop = new HashMap<String, OClass>();",
      "info" : "VariableDeclarationStatement[20709-20781]:VariableDeclarationStatement[20709-20781]"
    }, {
      "left" : "for (OClass dbClass : classes)",
      "right" : "for (OClass dbClass : classes)",
      "info" : "EnhancedForStatement[20786-21108]:EnhancedForStatement[20786-21108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20817-21108]:Block[20817-21108]"
    }, {
      "left" : "String className = dbClass.getName();",
      "right" : "String className = dbClass.getName();",
      "info" : "VariableDeclarationStatement[20825-20862]:VariableDeclarationStatement[20825-20862]"
    }, {
      "left" : "if (!className.equalsIgnoreCase(ORole.CLASS_NAME) && !className.equalsIgnoreCase(OUser.CLASS_NAME)\n          && !className.equalsIgnoreCase(OSecurityShared.IDENTITY_CLASSNAME))",
      "right" : "if (!className.equalsIgnoreCase(ORole.CLASS_NAME) && !className.equalsIgnoreCase(OUser.CLASS_NAME)\n          && !className.equalsIgnoreCase(OSecurityShared.IDENTITY_CLASSNAME))",
      "info" : "IfStatement[20869-21102]:IfStatement[20869-21102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21046-21102]:Block[21046-21102]"
    }, {
      "left" : "classesToDrop.put(className, dbClass);",
      "right" : "classesToDrop.put(className, dbClass);",
      "info" : "ExpressionStatement[21056-21094]:ExpressionStatement[21056-21094]"
    }, {
      "left" : "int removedClasses = 0;",
      "right" : "int removedClasses = 0;",
      "info" : "VariableDeclarationStatement[21114-21137]:VariableDeclarationStatement[21114-21137]"
    }, {
      "left" : "while (!classesToDrop.isEmpty())",
      "right" : "while (!classesToDrop.isEmpty())",
      "info" : "WhileStatement[21142-21993]:WhileStatement[21142-21993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21175-21993]:Block[21175-21993]"
    }, {
      "left" : "final AbstractList<String> classesReadyToDrop = new ArrayList<String>();",
      "right" : "final AbstractList<String> classesReadyToDrop = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[21183-21255]:VariableDeclarationStatement[21183-21255]"
    }, {
      "left" : "for (String className : classesToDrop.keySet())",
      "right" : "for (String className : classesToDrop.keySet())",
      "info" : "EnhancedForStatement[21262-21751]:EnhancedForStatement[21262-21751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21310-21751]:Block[21310-21751]"
    }, {
      "left" : "boolean isSuperClass = false;",
      "right" : "boolean isSuperClass = false;",
      "info" : "VariableDeclarationStatement[21320-21349]:VariableDeclarationStatement[21320-21349]"
    }, {
      "left" : "for (OClass dbClass : classesToDrop.values())",
      "right" : "for (OClass dbClass : classesToDrop.values())",
      "info" : "EnhancedForStatement[21358-21659]:EnhancedForStatement[21358-21659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21404-21659]:Block[21404-21659]"
    }, {
      "left" : "OClass parentClass = dbClass.getSuperClass();",
      "right" : "OClass parentClass = dbClass.getSuperClass();",
      "info" : "VariableDeclarationStatement[21416-21461]:VariableDeclarationStatement[21416-21461]"
    }, {
      "left" : "if (parentClass != null)",
      "right" : "if (parentClass != null)",
      "info" : "IfStatement[21472-21649]:IfStatement[21472-21649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21497-21649]:Block[21497-21649]"
    }, {
      "left" : "if (className.equalsIgnoreCase(parentClass.getName()))",
      "right" : "if (className.equalsIgnoreCase(parentClass.getName()))",
      "info" : "IfStatement[21511-21637]:IfStatement[21511-21637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21566-21637]:Block[21566-21637]"
    }, {
      "left" : "isSuperClass = true;",
      "right" : "isSuperClass = true;",
      "info" : "ExpressionStatement[21582-21602]:ExpressionStatement[21582-21602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21617-21623]:BreakStatement[21617-21623]"
    }, {
      "left" : "if (!isSuperClass)",
      "right" : "if (!isSuperClass)",
      "info" : "IfStatement[21668-21743]:IfStatement[21668-21743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21687-21743]:Block[21687-21743]"
    }, {
      "left" : "classesReadyToDrop.add(className);",
      "right" : "classesReadyToDrop.add(className);",
      "info" : "ExpressionStatement[21699-21733]:ExpressionStatement[21699-21733]"
    }, {
      "left" : "for (String className : classesReadyToDrop)",
      "right" : "for (String className : classesReadyToDrop)",
      "info" : "EnhancedForStatement[21758-21987]:EnhancedForStatement[21758-21987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21802-21987]:Block[21802-21987]"
    }, {
      "left" : "schema.dropClass(className);",
      "right" : "schema.dropClass(className);",
      "info" : "ExpressionStatement[21812-21840]:ExpressionStatement[21812-21840]"
    }, {
      "left" : "classesToDrop.remove(className);",
      "right" : "classesToDrop.remove(className);",
      "info" : "ExpressionStatement[21849-21881]:ExpressionStatement[21849-21881]"
    }, {
      "left" : "removedClasses++;",
      "right" : "removedClasses++;",
      "info" : "ExpressionStatement[21890-21907]:ExpressionStatement[21890-21907]"
    }, {
      "left" : "listener.onMessage(\"\\n- Class \" + className + \" was removed.\");",
      "right" : "listener.onMessage(\"\\n- Class \" + className + \" was removed.\");",
      "info" : "ExpressionStatement[21916-21979]:ExpressionStatement[21916-21979]"
    }, {
      "left" : "schema.save();",
      "right" : "schema.save();",
      "info" : "ExpressionStatement[21999-22013]:ExpressionStatement[21999-22013]"
    }, {
      "left" : "schema.reload();",
      "right" : "schema.reload();",
      "info" : "ExpressionStatement[22018-22034]:ExpressionStatement[22018-22034]"
    }, {
      "left" : "listener.onMessage(\"\\nRemoved \" + removedClasses + \" classes.\");",
      "right" : "listener.onMessage(\"\\nRemoved \" + removedClasses + \" classes.\");",
      "info" : "ExpressionStatement[22040-22104]:ExpressionStatement[22040-22104]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22112-22119]:Modifier[22112-22119]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22120-22124]:PrimitiveType[22120-22124]"
    }, {
      "left" : "importInfo",
      "right" : "importInfo",
      "info" : "SimpleName[22125-22135]:SimpleName[22125-22135]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22145-22156]:SimpleType[22145-22156]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[22158-22172]:SimpleType[22158-22172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22173-23248]:Block[22173-23248]"
    }, {
      "left" : "listener.onMessage(\"\\nImporting database info...\");",
      "right" : "listener.onMessage(\"\\nImporting database info...\");",
      "info" : "ExpressionStatement[22179-22230]:ExpressionStatement[22179-22230]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[22236-22282]:ExpressionStatement[22236-22282]"
    }, {
      "left" : "while (jsonReader.lastChar() != '}')",
      "right" : "while (jsonReader.lastChar() != '}')",
      "info" : "WhileStatement[22287-22897]:WhileStatement[22287-22897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22324-22897]:Block[22324-22897]"
    }, {
      "left" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "VariableDeclarationStatement[22332-22409]:VariableDeclarationStatement[22332-22409]"
    }, {
      "left" : "if (fieldName.equals(\"exporter-version\"))",
      "right" : "if (fieldName.equals(\"exporter-version\"))",
      "info" : "IfStatement[22416-22891]:IfStatement[22416-22891]"
    }, {
      "left" : "exporterVersion = jsonReader.readInteger(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "exporterVersion = jsonReader.readInteger(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[22466-22535]:ExpressionStatement[22466-22535]"
    }, {
      "left" : "if (fieldName.equals(\"schemaRecordId\"))",
      "right" : "if (fieldName.equals(\"schemaRecordId\"))",
      "info" : "IfStatement[22547-22891]:IfStatement[22547-22891]"
    }, {
      "left" : "schemaRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
      "right" : "schemaRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
      "info" : "ExpressionStatement[22595-22677]:ExpressionStatement[22595-22677]"
    }, {
      "left" : "if (fieldName.equals(\"indexMgrRecordId\"))",
      "right" : "if (fieldName.equals(\"indexMgrRecordId\"))",
      "info" : "IfStatement[22689-22891]:IfStatement[22689-22891]"
    }, {
      "left" : "indexMgrRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
      "right" : "indexMgrRecordId = new ORecordId(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
      "info" : "ExpressionStatement[22739-22823]:ExpressionStatement[22739-22823]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[22843-22891]:ExpressionStatement[22843-22891]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[22902-22951]:ExpressionStatement[22902-22951]"
    }, {
      "left" : "if (schemaRecordId == null)",
      "right" : "if (schemaRecordId == null)",
      "info" : "IfStatement[22957-23079]:IfStatement[22957-23079]"
    }, {
      "left" : "schemaRecordId = new ORecordId(database.getStorage().getConfiguration().schemaRecordId);",
      "right" : "schemaRecordId = new ORecordId(database.getStorage().getConfiguration().schemaRecordId);",
      "info" : "ExpressionStatement[22991-23079]:ExpressionStatement[22991-23079]"
    }, {
      "left" : "if (indexMgrRecordId == null)",
      "right" : "if (indexMgrRecordId == null)",
      "info" : "IfStatement[23085-23213]:IfStatement[23085-23213]"
    }, {
      "left" : "indexMgrRecordId = new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId);",
      "right" : "indexMgrRecordId = new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId);",
      "info" : "ExpressionStatement[23121-23213]:ExpressionStatement[23121-23213]"
    }, {
      "left" : "listener.onMessage(\"OK\");",
      "right" : "listener.onMessage(\"OK\");",
      "info" : "ExpressionStatement[23219-23244]:ExpressionStatement[23219-23244]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23252-23259]:Modifier[23252-23259]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23260-23264]:PrimitiveType[23260-23264]"
    }, {
      "left" : "importManualIndexes",
      "right" : "importManualIndexes",
      "info" : "SimpleName[23265-23284]:SimpleName[23265-23284]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23294-23305]:SimpleType[23294-23305]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[23307-23321]:SimpleType[23307-23321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23322-25951]:Block[23322-25951]"
    }, {
      "left" : "listener.onMessage(\"\\nImporting manual index entries...\");",
      "right" : "listener.onMessage(\"\\nImporting manual index entries...\");",
      "info" : "ExpressionStatement[23328-23386]:ExpressionStatement[23328-23386]"
    }, {
      "left" : "ODocument doc = new ODocument();",
      "right" : "ODocument doc = new ODocument();",
      "info" : "VariableDeclarationStatement[23392-23424]:VariableDeclarationStatement[23392-23424]"
    }, {
      "left" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
      "right" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
      "info" : "VariableDeclarationStatement[23430-23505]:VariableDeclarationStatement[23430-23505]"
    }, {
      "left" : "indexManager.reload();",
      "right" : "indexManager.reload();",
      "info" : "ExpressionStatement[23533-23555]:ExpressionStatement[23533-23555]"
    }, {
      "left" : "int n = 0;",
      "right" : "int n = 0;",
      "info" : "VariableDeclarationStatement[23561-23571]:VariableDeclarationStatement[23561-23571]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[23576-25807]:DoStatement[23576-25807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23579-25769]:Block[23579-25769]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[23587-23633]:ExpressionStatement[23587-23633]"
    }, {
      "left" : "jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[23641-23693]:ExpressionStatement[23641-23693]"
    }, {
      "left" : "final String indexName = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "final String indexName = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "VariableDeclarationStatement[23700-23774]:VariableDeclarationStatement[23700-23774]"
    }, {
      "left" : "if (indexName == null || indexName.length() == 0)",
      "right" : "if (indexName == null || indexName.length() == 0)",
      "info" : "IfStatement[23782-23847]:IfStatement[23782-23847]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23840-23847]:ReturnStatement[23840-23847]"
    }, {
      "left" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
      "right" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
      "info" : "ExpressionStatement[23855-23910]:ExpressionStatement[23855-23910]"
    }, {
      "left" : "final OIndex<?> index = database.getMetadata().getIndexManager().getIndex(indexName);",
      "right" : "final OIndex<?> index = database.getMetadata().getIndexManager().getIndex(indexName);",
      "info" : "VariableDeclarationStatement[23918-24003]:VariableDeclarationStatement[23918-24003]"
    }, {
      "left" : "long tot = 0;",
      "right" : "long tot = 0;",
      "info" : "VariableDeclarationStatement[24011-24024]:VariableDeclarationStatement[24011-24024]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[24032-24082]:ExpressionStatement[24032-24082]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[24090-25470]:DoStatement[24090-25470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24093-25432]:Block[24093-25432]"
    }, {
      "left" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY).trim();",
      "right" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY).trim();",
      "info" : "VariableDeclarationStatement[24103-24180]:VariableDeclarationStatement[24103-24180]"
    }, {
      "left" : "if (!value.isEmpty() && !indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
      "right" : "if (!value.isEmpty() && !indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
      "info" : "IfStatement[24190-25424]:IfStatement[24190-25424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24267-25424]:Block[24267-25424]"
    }, {
      "left" : "doc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, doc, null);",
      "right" : "doc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, doc, null);",
      "info" : "ExpressionStatement[24279-24357]:ExpressionStatement[24279-24357]"
    }, {
      "left" : "doc.setLazyLoad(false);",
      "right" : "doc.setLazyLoad(false);",
      "info" : "ExpressionStatement[24368-24391]:ExpressionStatement[24368-24391]"
    }, {
      "left" : "final OIdentifiable oldRid = doc.<OIdentifiable> field(\"rid\");",
      "right" : "final OIdentifiable oldRid = doc.<OIdentifiable> field(\"rid\");",
      "info" : "VariableDeclarationStatement[24403-24465]:VariableDeclarationStatement[24403-24465]"
    }, {
      "left" : "final OIdentifiable newRid;",
      "right" : "final OIdentifiable newRid;",
      "info" : "VariableDeclarationStatement[24476-24503]:VariableDeclarationStatement[24476-24503]"
    }, {
      "left" : "if (!doc.<Boolean> field(\"binary\"))",
      "right" : "if (!doc.<Boolean> field(\"binary\"))",
      "info" : "IfStatement[24514-25397]:IfStatement[24514-25397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24550-24820]:Block[24550-24820]"
    }, {
      "left" : "if (exportImportHashTable != null)",
      "right" : "if (exportImportHashTable != null)",
      "info" : "IfStatement[24564-24704]:IfStatement[24564-24704]"
    }, {
      "left" : "newRid = exportImportHashTable.get(oldRid);",
      "right" : "newRid = exportImportHashTable.get(oldRid);",
      "info" : "ExpressionStatement[24613-24656]:ExpressionStatement[24613-24656]"
    }, {
      "left" : "newRid = oldRid;",
      "right" : "newRid = oldRid;",
      "info" : "ExpressionStatement[24688-24704]:ExpressionStatement[24688-24704]"
    }, {
      "left" : "index.put(doc.field(\"key\"), newRid != null ? newRid.getIdentity() : oldRid.getIdentity());",
      "right" : "index.put(doc.field(\"key\"), newRid != null ? newRid.getIdentity() : oldRid.getIdentity());",
      "info" : "ExpressionStatement[24718-24808]:ExpressionStatement[24718-24808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24826-25397]:Block[24826-25397]"
    }, {
      "left" : "ORuntimeKeyIndexDefinition<?> runtimeKeyIndexDefinition = (ORuntimeKeyIndexDefinition<?>) index.getDefinition();",
      "right" : "ORuntimeKeyIndexDefinition<?> runtimeKeyIndexDefinition = (ORuntimeKeyIndexDefinition<?>) index.getDefinition();",
      "info" : "VariableDeclarationStatement[24840-24952]:VariableDeclarationStatement[24840-24952]"
    }, {
      "left" : "OBinarySerializer<?> binarySerializer = runtimeKeyIndexDefinition.getSerializer();",
      "right" : "OBinarySerializer<?> binarySerializer = runtimeKeyIndexDefinition.getSerializer();",
      "info" : "VariableDeclarationStatement[24965-25047]:VariableDeclarationStatement[24965-25047]"
    }, {
      "left" : "if (exportImportHashTable != null)",
      "right" : "if (exportImportHashTable != null)",
      "info" : "IfStatement[25061-25267]:IfStatement[25061-25267]"
    }, {
      "left" : "newRid = exportImportHashTable.get(doc.<OIdentifiable> field(\"rid\")).getIdentity();",
      "right" : "newRid = exportImportHashTable.get(doc.<OIdentifiable> field(\"rid\")).getIdentity();",
      "info" : "ExpressionStatement[25110-25193]:ExpressionStatement[25110-25193]"
    }, {
      "left" : "newRid = doc.<OIdentifiable> field(\"rid\");",
      "right" : "newRid = doc.<OIdentifiable> field(\"rid\");",
      "info" : "ExpressionStatement[25225-25267]:ExpressionStatement[25225-25267]"
    }, {
      "left" : "index.put(binarySerializer.deserialize(doc.<byte[]> field(\"key\"), 0), newRid != null ? newRid : oldRid);",
      "right" : "index.put(binarySerializer.deserialize(doc.<byte[]> field(\"key\"), 0), newRid != null ? newRid : oldRid);",
      "info" : "ExpressionStatement[25281-25385]:ExpressionStatement[25281-25385]"
    }, {
      "left" : "tot++;",
      "right" : "tot++;",
      "info" : "ExpressionStatement[25408-25414]:ExpressionStatement[25408-25414]"
    }, {
      "left" : "if (index != null)",
      "right" : "if (index != null)",
      "info" : "IfStatement[25478-25656]:IfStatement[25478-25656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25497-25575]:Block[25497-25575]"
    }, {
      "left" : "listener.onMessage(\"OK (\" + tot + \" entries)\");",
      "right" : "listener.onMessage(\"OK (\" + tot + \" entries)\");",
      "info" : "ExpressionStatement[25507-25554]:ExpressionStatement[25507-25554]"
    }, {
      "left" : "n++;",
      "right" : "n++;",
      "info" : "ExpressionStatement[25563-25567]:ExpressionStatement[25563-25567]"
    }, {
      "left" : "listener.onMessage(\"ERR, the index wasn't found in configuration\");",
      "right" : "listener.onMessage(\"ERR, the index wasn't found in configuration\");",
      "info" : "ExpressionStatement[25589-25656]:ExpressionStatement[25589-25656]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
      "info" : "ExpressionStatement[25664-25708]:ExpressionStatement[25664-25708]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[25715-25762]:ExpressionStatement[25715-25762]"
    }, {
      "left" : "listener.onMessage(\"\\nDone. Imported \" + String.format(\"%,d\", n) + \" indexes.\");",
      "right" : "listener.onMessage(\"\\nDone. Imported \" + String.format(\"%,d\", n) + \" indexes.\");",
      "info" : "ExpressionStatement[25813-25893]:ExpressionStatement[25813-25893]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[25899-25947]:ExpressionStatement[25899-25947]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25955-25962]:Modifier[25955-25962]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25963-25967]:PrimitiveType[25963-25967]"
    }, {
      "left" : "importSchema",
      "right" : "importSchema",
      "info" : "SimpleName[25968-25980]:SimpleName[25968-25980]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25990-26001]:SimpleType[25990-26001]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[26003-26017]:SimpleType[26003-26017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26018-32409]:Block[26018-32409]"
    }, {
      "left" : "listener.onMessage(\"\\nImporting database schema...\");",
      "right" : "listener.onMessage(\"\\nImporting database schema...\");",
      "info" : "ExpressionStatement[26024-26077]:ExpressionStatement[26024-26077]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[26083-26129]:ExpressionStatement[26083-26129]"
    }, {
      "left" : "@SuppressWarnings(\"unused\")\n    int schemaVersion = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"version\\\"\")\n        .readNumber(OJSONReader.ANY_NUMBER, true);",
      "right" : "@SuppressWarnings(\"unused\")\n    int schemaVersion = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"version\\\"\")\n        .readNumber(OJSONReader.ANY_NUMBER, true);",
      "info" : "VariableDeclarationStatement[26134-26314]:VariableDeclarationStatement[26134-26314]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[26319-26368]:ExpressionStatement[26319-26368]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[26373-26423]:ExpressionStatement[26373-26423]"
    }, {
      "left" : "if (jsonReader.getValue().equals(\"\\\"globalProperties\\\"\"))",
      "right" : "if (jsonReader.getValue().equals(\"\\\"globalProperties\\\"\"))",
      "info" : "IfStatement[26476-27474]:IfStatement[26476-27474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26534-27474]:Block[26534-27474]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[26542-26592]:ExpressionStatement[26542-26592]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[26599-27355]:DoStatement[26599-27355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26602-27317]:Block[26602-27317]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[26612-26658]:ExpressionStatement[26612-26658]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\");",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\");",
      "info" : "ExpressionStatement[26667-26742]:ExpressionStatement[26667-26742]"
    }, {
      "left" : "String name = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "String name = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[26751-26815]:VariableDeclarationStatement[26751-26815]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"global-id\\\"\");",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"global-id\\\"\");",
      "info" : "ExpressionStatement[26824-26904]:ExpressionStatement[26824-26904]"
    }, {
      "left" : "String id = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "String id = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[26913-26975]:VariableDeclarationStatement[26913-26975]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\");",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\");",
      "info" : "ExpressionStatement[26984-27059]:ExpressionStatement[26984-27059]"
    }, {
      "left" : "String type = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "String type = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[27068-27132]:VariableDeclarationStatement[27068-27132]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[27262-27309]:ExpressionStatement[27262-27309]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[27362-27411]:ExpressionStatement[27362-27411]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[27418-27468]:ExpressionStatement[27418-27468]"
    }, {
      "left" : "jsonReader.checkContent(\"\\\"classes\\\"\").readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.checkContent(\"\\\"classes\\\"\").readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[27480-27558]:ExpressionStatement[27480-27558]"
    }, {
      "left" : "long classImported = 0;",
      "right" : "long classImported = 0;",
      "info" : "VariableDeclarationStatement[27564-27587]:VariableDeclarationStatement[27564-27587]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27593-32405]:TryStatement[27593-32405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27597-32230]:Block[27597-32230]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[27605-31382]:DoStatement[27605-31382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27608-31344]:Block[27608-31344]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[27618-27664]:ExpressionStatement[27618-27664]"
    }, {
      "left" : "final String className = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\n            .readString(OJSONReader.COMMA_SEPARATOR);",
      "right" : "final String className = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\n            .readString(OJSONReader.COMMA_SEPARATOR);",
      "info" : "VariableDeclarationStatement[27674-27827]:VariableDeclarationStatement[27674-27827]"
    }, {
      "left" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "right" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "info" : "VariableDeclarationStatement[27837-27912]:VariableDeclarationStatement[27837-27912]"
    }, {
      "left" : "if (next.equals(\"\\\"id\\\"\"))",
      "right" : "if (next.equals(\"\\\"id\\\"\"))",
      "info" : "IfStatement[27922-28157]:IfStatement[27922-28157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27949-28157]:Block[27949-28157]"
    }, {
      "left" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
      "right" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[28010-28068]:ExpressionStatement[28010-28068]"
    }, {
      "left" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "right" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "info" : "ExpressionStatement[28079-28147]:ExpressionStatement[28079-28147]"
    }, {
      "left" : "final int classDefClusterId;",
      "right" : "final int classDefClusterId;",
      "info" : "VariableDeclarationStatement[28167-28195]:VariableDeclarationStatement[28167-28195]"
    }, {
      "left" : "if (jsonReader.isContent(\"\\\"default-cluster-id\\\"\"))",
      "right" : "if (jsonReader.isContent(\"\\\"default-cluster-id\\\"\"))",
      "info" : "IfStatement[28204-28456]:IfStatement[28204-28456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28256-28389]:Block[28256-28389]"
    }, {
      "left" : "next = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "next = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[28268-28325]:ExpressionStatement[28268-28325]"
    }, {
      "left" : "classDefClusterId = Integer.parseInt(next);",
      "right" : "classDefClusterId = Integer.parseInt(next);",
      "info" : "ExpressionStatement[28336-28379]:ExpressionStatement[28336-28379]"
    }, {
      "left" : "classDefClusterId = database.getDefaultClusterId();",
      "right" : "classDefClusterId = database.getDefaultClusterId();",
      "info" : "ExpressionStatement[28405-28456]:ExpressionStatement[28405-28456]"
    }, {
      "left" : "String classClusterIds = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"cluster-ids\\\"\")\n            .readString(OJSONReader.END_COLLECTION, true).trim();",
      "right" : "String classClusterIds = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"cluster-ids\\\"\")\n            .readString(OJSONReader.END_COLLECTION, true).trim();",
      "info" : "VariableDeclarationStatement[28466-28638]:VariableDeclarationStatement[28466-28638]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[28648-28696]:ExpressionStatement[28648-28696]"
    }, {
      "left" : "OClassImpl cls = (OClassImpl) database.getMetadata().getSchema().getClass(className);",
      "right" : "OClassImpl cls = (OClassImpl) database.getMetadata().getSchema().getClass(className);",
      "info" : "VariableDeclarationStatement[28706-28791]:VariableDeclarationStatement[28706-28791]"
    }, {
      "left" : "if (cls != null)",
      "right" : "if (cls != null)",
      "info" : "IfStatement[28801-29059]:IfStatement[28801-29059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28818-28947]:Block[28818-28947]"
    }, {
      "left" : "if (cls.getDefaultClusterId() != classDefClusterId)",
      "right" : "if (cls.getDefaultClusterId() != classDefClusterId)",
      "info" : "IfStatement[28830-28937]:IfStatement[28830-28937]"
    }, {
      "left" : "cls.setDefaultClusterId(classDefClusterId);",
      "right" : "cls.setDefaultClusterId(classDefClusterId);",
      "info" : "ExpressionStatement[28894-28937]:ExpressionStatement[28894-28937]"
    }, {
      "left" : "cls = (OClassImpl) database.getMetadata().getSchema().createClass(className, classDefClusterId);",
      "right" : "cls = (OClassImpl) database.getMetadata().getSchema().createClass(className, classDefClusterId);",
      "info" : "ExpressionStatement[28963-29059]:ExpressionStatement[28963-29059]"
    }, {
      "left" : "if (classClusterIds != null)",
      "right" : "if (classClusterIds != null)",
      "info" : "IfStatement[29069-29416]:IfStatement[29069-29416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29098-29416]:Block[29098-29416]"
    }, {
      "left" : "classClusterIds = classClusterIds.substring(1, classClusterIds.length() - 1);",
      "right" : "classClusterIds = classClusterIds.substring(1, classClusterIds.length() - 1);",
      "info" : "ExpressionStatement[29137-29214]:ExpressionStatement[29137-29214]"
    }, {
      "left" : "for (int i : OStringSerializerHelper.splitIntArray(classClusterIds))",
      "right" : "for (int i : OStringSerializerHelper.splitIntArray(classClusterIds))",
      "info" : "EnhancedForStatement[29264-29406]:EnhancedForStatement[29264-29406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29333-29406]:Block[29333-29406]"
    }, {
      "left" : "if (i != -1)",
      "right" : "if (i != -1)",
      "info" : "IfStatement[29347-29394]:IfStatement[29347-29394]"
    }, {
      "left" : "cls.addClusterId(i);",
      "right" : "cls.addClusterId(i);",
      "info" : "ExpressionStatement[29374-29394]:ExpressionStatement[29374-29394]"
    }, {
      "left" : "String value;",
      "right" : "String value;",
      "info" : "VariableDeclarationStatement[29426-29439]:VariableDeclarationStatement[29426-29439]"
    }, {
      "left" : "while (jsonReader.lastChar() == ',')",
      "right" : "while (jsonReader.lastChar() == ',')",
      "info" : "WhileStatement[29448-31253]:WhileStatement[29448-31253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29485-31253]:Block[29485-31253]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[29497-29547]:ExpressionStatement[29497-29547]"
    }, {
      "left" : "value = jsonReader.getValue();",
      "right" : "value = jsonReader.getValue();",
      "info" : "ExpressionStatement[29558-29588]:ExpressionStatement[29558-29588]"
    }, {
      "left" : "if (value.equals(\"\\\"strictMode\\\"\"))",
      "right" : "if (value.equals(\"\\\"strictMode\\\"\"))",
      "info" : "IfStatement[29600-31243]:IfStatement[29600-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29636-29732]:Block[29636-29732]"
    }, {
      "left" : "cls.setStrictMode(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
      "right" : "cls.setStrictMode(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
      "info" : "ExpressionStatement[29650-29720]:ExpressionStatement[29650-29720]"
    }, {
      "left" : "if (value.equals(\"\\\"abstract\\\"\"))",
      "right" : "if (value.equals(\"\\\"abstract\\\"\"))",
      "info" : "IfStatement[29738-31243]:IfStatement[29738-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29772-29866]:Block[29772-29866]"
    }, {
      "left" : "cls.setAbstract(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
      "right" : "cls.setAbstract(jsonReader.readBoolean(OJSONReader.NEXT_IN_OBJECT));",
      "info" : "ExpressionStatement[29786-29854]:ExpressionStatement[29786-29854]"
    }, {
      "left" : "if (value.equals(\"\\\"oversize\\\"\"))",
      "right" : "if (value.equals(\"\\\"oversize\\\"\"))",
      "info" : "IfStatement[29872-31243]:IfStatement[29872-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29906-30063]:Block[29906-30063]"
    }, {
      "left" : "final String oversize = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "final String oversize = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[29920-29994]:VariableDeclarationStatement[29920-29994]"
    }, {
      "left" : "cls.setOverSize(Float.parseFloat(oversize));",
      "right" : "cls.setOverSize(Float.parseFloat(oversize));",
      "info" : "ExpressionStatement[30007-30051]:ExpressionStatement[30007-30051]"
    }, {
      "left" : "if (value.equals(\"\\\"strictMode\\\"\"))",
      "right" : "if (value.equals(\"\\\"strictMode\\\"\"))",
      "info" : "IfStatement[30069-31243]:IfStatement[30069-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30105-30272]:Block[30105-30272]"
    }, {
      "left" : "final String strictMode = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "final String strictMode = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[30119-30195]:VariableDeclarationStatement[30119-30195]"
    }, {
      "left" : "cls.setStrictMode(Boolean.parseBoolean(strictMode));",
      "right" : "cls.setStrictMode(Boolean.parseBoolean(strictMode));",
      "info" : "ExpressionStatement[30208-30260]:ExpressionStatement[30208-30260]"
    }, {
      "left" : "if (value.equals(\"\\\"short-name\\\"\"))",
      "right" : "if (value.equals(\"\\\"short-name\\\"\"))",
      "info" : "IfStatement[30278-31243]:IfStatement[30278-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30314-30456]:Block[30314-30456]"
    }, {
      "left" : "final String shortName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "final String shortName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[30328-30403]:VariableDeclarationStatement[30328-30403]"
    }, {
      "left" : "cls.setShortName(shortName);",
      "right" : "cls.setShortName(shortName);",
      "info" : "ExpressionStatement[30416-30444]:ExpressionStatement[30416-30444]"
    }, {
      "left" : "if (value.equals(\"\\\"super-class\\\"\"))",
      "right" : "if (value.equals(\"\\\"super-class\\\"\"))",
      "info" : "IfStatement[30462-31243]:IfStatement[30462-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30499-30648]:Block[30499-30648]"
    }, {
      "left" : "final String classSuper = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "final String classSuper = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[30513-30589]:VariableDeclarationStatement[30513-30589]"
    }, {
      "left" : "superClasses.put(cls, classSuper);",
      "right" : "superClasses.put(cls, classSuper);",
      "info" : "ExpressionStatement[30602-30636]:ExpressionStatement[30602-30636]"
    }, {
      "left" : "if (value.equals(\"\\\"properties\\\"\"))",
      "right" : "if (value.equals(\"\\\"properties\\\"\"))",
      "info" : "IfStatement[30654-31243]:IfStatement[30654-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30690-31067]:Block[30690-31067]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[30734-30784]:ExpressionStatement[30734-30784]"
    }, {
      "left" : "while (jsonReader.lastChar() != ']')",
      "right" : "while (jsonReader.lastChar() != ']')",
      "info" : "WhileStatement[30798-30998]:WhileStatement[30798-30998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30835-30998]:Block[30835-30998]"
    }, {
      "left" : "importProperty(cls);",
      "right" : "importProperty(cls);",
      "info" : "ExpressionStatement[30851-30871]:ExpressionStatement[30851-30871]"
    }, {
      "left" : "if (jsonReader.lastChar() == '}')",
      "right" : "if (jsonReader.lastChar() == '}')",
      "info" : "IfStatement[30887-30984]:IfStatement[30887-30984]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[30937-30984]:ExpressionStatement[30937-30984]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
      "info" : "ExpressionStatement[31011-31055]:ExpressionStatement[31011-31055]"
    }, {
      "left" : "if (value.equals(\"\\\"cluster-selection\\\"\"))",
      "right" : "if (value.equals(\"\\\"cluster-selection\\\"\"))",
      "info" : "IfStatement[31073-31243]:IfStatement[31073-31243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31116-31243]:Block[31116-31243]"
    }, {
      "left" : "cls.setClusterSelection(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
      "right" : "cls.setClusterSelection(jsonReader.readString(OJSONReader.NEXT_IN_OBJECT));",
      "info" : "ExpressionStatement[31156-31231]:ExpressionStatement[31156-31231]"
    }, {
      "left" : "classImported++;",
      "right" : "classImported++;",
      "info" : "ExpressionStatement[31263-31279]:ExpressionStatement[31263-31279]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[31289-31336]:ExpressionStatement[31289-31336]"
    }, {
      "left" : "for (Map.Entry<OClass, String> entry : superClasses.entrySet())\n        entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
      "right" : "for (Map.Entry<OClass, String> entry : superClasses.entrySet())\n        entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
      "info" : "EnhancedForStatement[31427-31591]:EnhancedForStatement[31427-31591]"
    }, {
      "left" : "entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
      "right" : "entry.getKey().setSuperClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
      "info" : "ExpressionStatement[31499-31591]:ExpressionStatement[31499-31591]"
    }, {
      "left" : "for (Map.Entry<OPropertyImpl, String> entry : linkedClasses.entrySet())",
      "right" : "for (Map.Entry<OPropertyImpl, String> entry : linkedClasses.entrySet())",
      "info" : "EnhancedForStatement[31635-31818]:EnhancedForStatement[31635-31818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31707-31818]:Block[31707-31818]"
    }, {
      "left" : "entry.getKey().setLinkedClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
      "right" : "entry.getKey().setLinkedClass(database.getMetadata().getSchema().getClass(entry.getValue()));",
      "info" : "ExpressionStatement[31717-31810]:ExpressionStatement[31717-31810]"
    }, {
      "left" : "database.getMetadata().getSchema().save();",
      "right" : "database.getMetadata().getSchema().save();",
      "info" : "ExpressionStatement[31826-31868]:ExpressionStatement[31826-31868]"
    }, {
      "left" : "if (exporterVersion < 11)",
      "right" : "if (exporterVersion < 11)",
      "info" : "IfStatement[31876-32023]:IfStatement[31876-32023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31902-32023]:Block[31902-32023]"
    }, {
      "left" : "OClass role = database.getMetadata().getSchema().getClass(\"ORole\");",
      "right" : "OClass role = database.getMetadata().getSchema().getClass(\"ORole\");",
      "info" : "VariableDeclarationStatement[31912-31979]:VariableDeclarationStatement[31912-31979]"
    }, {
      "left" : "role.dropProperty(\"rules\");",
      "right" : "role.dropProperty(\"rules\");",
      "info" : "ExpressionStatement[31988-32015]:ExpressionStatement[31988-32015]"
    }, {
      "left" : "listener.onMessage(\"OK (\" + classImported + \" classes)\");",
      "right" : "listener.onMessage(\"OK (\" + classImported + \" classes)\");",
      "info" : "ExpressionStatement[32031-32088]:ExpressionStatement[32031-32088]"
    }, {
      "left" : "schemaImported = true;",
      "right" : "schemaImported = true;",
      "info" : "ExpressionStatement[32095-32117]:ExpressionStatement[32095-32117]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.END_OBJECT);",
      "info" : "ExpressionStatement[32124-32168]:ExpressionStatement[32124-32168]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[32175-32224]:ExpressionStatement[32175-32224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32251-32405]:Block[32251-32405]"
    }, {
      "left" : "OLogManager.instance().error(this, \"Error on importing schema\", e);",
      "right" : "OLogManager.instance().error(this, \"Error on importing schema\", e);",
      "info" : "ExpressionStatement[32259-32326]:ExpressionStatement[32259-32326]"
    }, {
      "left" : "listener.onMessage(\"ERROR (\" + classImported + \" entries): \" + e);",
      "right" : "listener.onMessage(\"ERROR (\" + classImported + \" entries): \" + e);",
      "info" : "ExpressionStatement[32333-32399]:ExpressionStatement[32333-32399]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32413-32420]:Modifier[32413-32420]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32421-32425]:PrimitiveType[32421-32425]"
    }, {
      "left" : "importProperty",
      "right" : "importProperty",
      "info" : "SimpleName[32426-32440]:SimpleName[32426-32440]"
    }, {
      "left" : "final OClass iClass",
      "right" : "final OClass iClass",
      "info" : "SingleVariableDeclaration[32441-32460]:SingleVariableDeclaration[32441-32460]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32469-32480]:SimpleType[32469-32480]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[32482-32496]:SimpleType[32482-32496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32497-35262]:Block[32497-35262]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_OBJ_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_OBJ_IN_ARRAY);",
      "info" : "ExpressionStatement[32503-32554]:ExpressionStatement[32503-32554]"
    }, {
      "left" : "if (jsonReader.lastChar() == ']')",
      "right" : "if (jsonReader.lastChar() == ']')",
      "info" : "IfStatement[32560-32607]:IfStatement[32560-32607]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32600-32607]:ReturnStatement[32600-32607]"
    }, {
      "left" : "final String propName = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\n        .readString(OJSONReader.COMMA_SEPARATOR);",
      "right" : "final String propName = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\n        .readString(OJSONReader.COMMA_SEPARATOR);",
      "info" : "VariableDeclarationStatement[32613-32761]:VariableDeclarationStatement[32613-32761]"
    }, {
      "left" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "right" : "String next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "info" : "VariableDeclarationStatement[32767-32842]:VariableDeclarationStatement[32767-32842]"
    }, {
      "left" : "if (next.equals(\"\\\"id\\\"\"))",
      "right" : "if (next.equals(\"\\\"id\\\"\"))",
      "info" : "IfStatement[32848-33067]:IfStatement[32848-33067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32875-33067]:Block[32875-33067]"
    }, {
      "left" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
      "right" : "next = jsonReader.readString(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[32928-32986]:ExpressionStatement[32928-32986]"
    }, {
      "left" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "right" : "next = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).getValue();",
      "info" : "ExpressionStatement[32993-33061]:ExpressionStatement[32993-33061]"
    }, {
      "left" : "next = jsonReader.checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "next = jsonReader.checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[33072-33154]:ExpressionStatement[33072-33154]"
    }, {
      "left" : "final OType type = OType.valueOf(next);",
      "right" : "final OType type = OType.valueOf(next);",
      "info" : "VariableDeclarationStatement[33160-33199]:VariableDeclarationStatement[33160-33199]"
    }, {
      "left" : "String attrib;",
      "right" : "String attrib;",
      "info" : "VariableDeclarationStatement[33205-33219]:VariableDeclarationStatement[33205-33219]"
    }, {
      "left" : "String value = null;",
      "right" : "String value = null;",
      "info" : "VariableDeclarationStatement[33224-33244]:VariableDeclarationStatement[33224-33244]"
    }, {
      "left" : "String min = null;",
      "right" : "String min = null;",
      "info" : "VariableDeclarationStatement[33250-33268]:VariableDeclarationStatement[33250-33268]"
    }, {
      "left" : "String max = null;",
      "right" : "String max = null;",
      "info" : "VariableDeclarationStatement[33273-33291]:VariableDeclarationStatement[33273-33291]"
    }, {
      "left" : "String linkedClass = null;",
      "right" : "String linkedClass = null;",
      "info" : "VariableDeclarationStatement[33296-33322]:VariableDeclarationStatement[33296-33322]"
    }, {
      "left" : "OType linkedType = null;",
      "right" : "OType linkedType = null;",
      "info" : "VariableDeclarationStatement[33327-33351]:VariableDeclarationStatement[33327-33351]"
    }, {
      "left" : "boolean mandatory = false;",
      "right" : "boolean mandatory = false;",
      "info" : "VariableDeclarationStatement[33356-33382]:VariableDeclarationStatement[33356-33382]"
    }, {
      "left" : "boolean readonly = false;",
      "right" : "boolean readonly = false;",
      "info" : "VariableDeclarationStatement[33387-33412]:VariableDeclarationStatement[33387-33412]"
    }, {
      "left" : "boolean notNull = false;",
      "right" : "boolean notNull = false;",
      "info" : "VariableDeclarationStatement[33417-33441]:VariableDeclarationStatement[33417-33441]"
    }, {
      "left" : "String collate = null;",
      "right" : "String collate = null;",
      "info" : "VariableDeclarationStatement[33446-33468]:VariableDeclarationStatement[33446-33468]"
    }, {
      "left" : "Map<String, String> customFields = null;",
      "right" : "Map<String, String> customFields = null;",
      "info" : "VariableDeclarationStatement[33474-33514]:VariableDeclarationStatement[33474-33514]"
    }, {
      "left" : "while (jsonReader.lastChar() == ',')",
      "right" : "while (jsonReader.lastChar() == ',')",
      "info" : "WhileStatement[33520-34512]:WhileStatement[33520-34512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33557-34512]:Block[33557-34512]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[33565-33615]:ExpressionStatement[33565-33615]"
    }, {
      "left" : "attrib = jsonReader.getValue();",
      "right" : "attrib = jsonReader.getValue();",
      "info" : "ExpressionStatement[33623-33654]:ExpressionStatement[33623-33654]"
    }, {
      "left" : "if (!attrib.equals(\"\\\"customFields\\\"\"))",
      "right" : "if (!attrib.equals(\"\\\"customFields\\\"\"))",
      "info" : "IfStatement[33661-33767]:IfStatement[33661-33767]"
    }, {
      "left" : "value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[33709-33767]:ExpressionStatement[33709-33767]"
    }, {
      "left" : "if (attrib.equals(\"\\\"min\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"min\\\"\"))",
      "info" : "IfStatement[33775-34506]:IfStatement[33775-34506]"
    }, {
      "left" : "min = value;",
      "right" : "min = value;",
      "info" : "ExpressionStatement[33813-33825]:ExpressionStatement[33813-33825]"
    }, {
      "left" : "if (attrib.equals(\"\\\"max\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"max\\\"\"))",
      "info" : "IfStatement[33837-34506]:IfStatement[33837-34506]"
    }, {
      "left" : "max = value;",
      "right" : "max = value;",
      "info" : "ExpressionStatement[33875-33887]:ExpressionStatement[33875-33887]"
    }, {
      "left" : "if (attrib.equals(\"\\\"linked-class\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"linked-class\\\"\"))",
      "info" : "IfStatement[33899-34506]:IfStatement[33899-34506]"
    }, {
      "left" : "linkedClass = value;",
      "right" : "linkedClass = value;",
      "info" : "ExpressionStatement[33946-33966]:ExpressionStatement[33946-33966]"
    }, {
      "left" : "if (attrib.equals(\"\\\"mandatory\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"mandatory\\\"\"))",
      "info" : "IfStatement[33978-34506]:IfStatement[33978-34506]"
    }, {
      "left" : "mandatory = Boolean.parseBoolean(value);",
      "right" : "mandatory = Boolean.parseBoolean(value);",
      "info" : "ExpressionStatement[34022-34062]:ExpressionStatement[34022-34062]"
    }, {
      "left" : "if (attrib.equals(\"\\\"readonly\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"readonly\\\"\"))",
      "info" : "IfStatement[34074-34506]:IfStatement[34074-34506]"
    }, {
      "left" : "readonly = Boolean.parseBoolean(value);",
      "right" : "readonly = Boolean.parseBoolean(value);",
      "info" : "ExpressionStatement[34117-34156]:ExpressionStatement[34117-34156]"
    }, {
      "left" : "if (attrib.equals(\"\\\"not-null\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"not-null\\\"\"))",
      "info" : "IfStatement[34168-34506]:IfStatement[34168-34506]"
    }, {
      "left" : "notNull = Boolean.parseBoolean(value);",
      "right" : "notNull = Boolean.parseBoolean(value);",
      "info" : "ExpressionStatement[34211-34249]:ExpressionStatement[34211-34249]"
    }, {
      "left" : "if (attrib.equals(\"\\\"linked-type\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"linked-type\\\"\"))",
      "info" : "IfStatement[34261-34506]:IfStatement[34261-34506]"
    }, {
      "left" : "linkedType = OType.valueOf(value);",
      "right" : "linkedType = OType.valueOf(value);",
      "info" : "ExpressionStatement[34307-34341]:ExpressionStatement[34307-34341]"
    }, {
      "left" : "if (attrib.equals(\"\\\"collate\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"collate\\\"\"))",
      "info" : "IfStatement[34353-34506]:IfStatement[34353-34506]"
    }, {
      "left" : "collate = value;",
      "right" : "collate = value;",
      "info" : "ExpressionStatement[34395-34411]:ExpressionStatement[34395-34411]"
    }, {
      "left" : "if (attrib.equals(\"\\\"customFields\\\"\"))",
      "right" : "if (attrib.equals(\"\\\"customFields\\\"\"))",
      "info" : "IfStatement[34423-34506]:IfStatement[34423-34506]"
    }, {
      "left" : "customFields = importCustomFields();",
      "right" : "customFields = importCustomFields();",
      "info" : "ExpressionStatement[34470-34506]:ExpressionStatement[34470-34506]"
    }, {
      "left" : "OPropertyImpl prop = (OPropertyImpl) iClass.getProperty(propName);",
      "right" : "OPropertyImpl prop = (OPropertyImpl) iClass.getProperty(propName);",
      "info" : "VariableDeclarationStatement[34518-34584]:VariableDeclarationStatement[34518-34584]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[34589-34701]:IfStatement[34589-34701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34607-34701]:Block[34607-34701]"
    }, {
      "left" : "prop = (OPropertyImpl) iClass.createProperty(propName, type);",
      "right" : "prop = (OPropertyImpl) iClass.createProperty(propName, type);",
      "info" : "ExpressionStatement[34634-34695]:ExpressionStatement[34634-34695]"
    }, {
      "left" : "prop.setMandatory(mandatory);",
      "right" : "prop.setMandatory(mandatory);",
      "info" : "ExpressionStatement[34706-34735]:ExpressionStatement[34706-34735]"
    }, {
      "left" : "prop.setReadonly(readonly);",
      "right" : "prop.setReadonly(readonly);",
      "info" : "ExpressionStatement[34740-34767]:ExpressionStatement[34740-34767]"
    }, {
      "left" : "prop.setNotNull(notNull);",
      "right" : "prop.setNotNull(notNull);",
      "info" : "ExpressionStatement[34772-34797]:ExpressionStatement[34772-34797]"
    }, {
      "left" : "if (min != null)",
      "right" : "if (min != null)",
      "info" : "IfStatement[34803-34843]:IfStatement[34803-34843]"
    }, {
      "left" : "prop.setMin(min);",
      "right" : "prop.setMin(min);",
      "info" : "ExpressionStatement[34826-34843]:ExpressionStatement[34826-34843]"
    }, {
      "left" : "if (max != null)",
      "right" : "if (max != null)",
      "info" : "IfStatement[34848-34888]:IfStatement[34848-34888]"
    }, {
      "left" : "prop.setMax(max);",
      "right" : "prop.setMax(max);",
      "info" : "ExpressionStatement[34871-34888]:ExpressionStatement[34871-34888]"
    }, {
      "left" : "if (linkedClass != null)",
      "right" : "if (linkedClass != null)",
      "info" : "IfStatement[34893-34961]:IfStatement[34893-34961]"
    }, {
      "left" : "linkedClasses.put(prop, linkedClass);",
      "right" : "linkedClasses.put(prop, linkedClass);",
      "info" : "ExpressionStatement[34924-34961]:ExpressionStatement[34924-34961]"
    }, {
      "left" : "if (linkedType != null)",
      "right" : "if (linkedType != null)",
      "info" : "IfStatement[34966-35027]:IfStatement[34966-35027]"
    }, {
      "left" : "prop.setLinkedType(linkedType);",
      "right" : "prop.setLinkedType(linkedType);",
      "info" : "ExpressionStatement[34996-35027]:ExpressionStatement[34996-35027]"
    }, {
      "left" : "if (collate != null)",
      "right" : "if (collate != null)",
      "info" : "IfStatement[35032-35082]:IfStatement[35032-35082]"
    }, {
      "left" : "prop.setCollate(value);",
      "right" : "prop.setCollate(value);",
      "info" : "ExpressionStatement[35059-35082]:ExpressionStatement[35059-35082]"
    }, {
      "left" : "if (customFields != null)",
      "right" : "if (customFields != null)",
      "info" : "IfStatement[35087-35258]:IfStatement[35087-35258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35113-35258]:Block[35113-35258]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : customFields.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : customFields.entrySet())",
      "info" : "EnhancedForStatement[35121-35252]:EnhancedForStatement[35121-35252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35185-35252]:Block[35185-35252]"
    }, {
      "left" : "prop.setCustom(entry.getKey(), entry.getValue());",
      "right" : "prop.setCustom(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[35195-35244]:ExpressionStatement[35195-35244]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35266-35273]:Modifier[35266-35273]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[35274-35293]:ParameterizedType[35274-35293]"
    }, {
      "left" : "importCustomFields",
      "right" : "importCustomFields",
      "info" : "SimpleName[35294-35312]:SimpleName[35294-35312]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[35322-35336]:SimpleType[35322-35336]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35338-35349]:SimpleType[35338-35349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35350-35784]:Block[35350-35784]"
    }, {
      "left" : "Map<String, String> result = new HashMap<String, String>();",
      "right" : "Map<String, String> result = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[35356-35415]:VariableDeclarationStatement[35356-35415]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[35421-35467]:ExpressionStatement[35421-35467]"
    }, {
      "left" : "while (jsonReader.lastChar() != '}')",
      "right" : "while (jsonReader.lastChar() != '}')",
      "info" : "WhileStatement[35473-35704]:WhileStatement[35473-35704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35510-35704]:Block[35510-35704]"
    }, {
      "left" : "final String key = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "final String key = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "VariableDeclarationStatement[35518-35589]:VariableDeclarationStatement[35518-35589]"
    }, {
      "left" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "final String value = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[35596-35667]:VariableDeclarationStatement[35596-35667]"
    }, {
      "left" : "result.put(key, value);",
      "right" : "result.put(key, value);",
      "info" : "ExpressionStatement[35675-35698]:ExpressionStatement[35675-35698]"
    }, {
      "left" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[35710-35760]:ExpressionStatement[35710-35760]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35766-35780]:ReturnStatement[35766-35780]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35788-35795]:Modifier[35788-35795]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[35796-35800]:PrimitiveType[35796-35800]"
    }, {
      "left" : "importClusters",
      "right" : "importClusters",
      "info" : "SimpleName[35801-35815]:SimpleName[35801-35815]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[35825-35839]:SimpleType[35825-35839]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35841-35852]:SimpleType[35841-35852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35853-42524]:Block[35853-42524]"
    }, {
      "left" : "listener.onMessage(\"\\nImporting clusters...\");",
      "right" : "listener.onMessage(\"\\nImporting clusters...\");",
      "info" : "ExpressionStatement[35859-35905]:ExpressionStatement[35859-35905]"
    }, {
      "left" : "long total = 0;",
      "right" : "long total = 0;",
      "info" : "VariableDeclarationStatement[35911-35926]:VariableDeclarationStatement[35911-35926]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[35932-35982]:ExpressionStatement[35932-35982]"
    }, {
      "left" : "boolean makeFullCheckPointAfterClusterCreation = false;",
      "right" : "boolean makeFullCheckPointAfterClusterCreation = false;",
      "info" : "VariableDeclarationStatement[35988-36043]:VariableDeclarationStatement[35988-36043]"
    }, {
      "left" : "if (database.getStorage() instanceof OLocalPaginatedStorage)",
      "right" : "if (database.getStorage() instanceof OLocalPaginatedStorage)",
      "info" : "IfStatement[36048-36363]:IfStatement[36048-36363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36109-36363]:Block[36109-36363]"
    }, {
      "left" : "makeFullCheckPointAfterClusterCreation = ((OLocalPaginatedStorage) database.getStorage())\n          .isMakeFullCheckPointAfterClusterCreate();",
      "right" : "makeFullCheckPointAfterClusterCreation = ((OLocalPaginatedStorage) database.getStorage())\n          .isMakeFullCheckPointAfterClusterCreate();",
      "info" : "ExpressionStatement[36117-36259]:ExpressionStatement[36117-36259]"
    }, {
      "left" : "((OLocalPaginatedStorage) database.getStorage()).disableFullCheckPointAfterClusterCreate();",
      "right" : "((OLocalPaginatedStorage) database.getStorage()).disableFullCheckPointAfterClusterCreate();",
      "info" : "ExpressionStatement[36266-36357]:ExpressionStatement[36266-36357]"
    }, {
      "left" : "boolean recreateManualIndex = false;",
      "right" : "boolean recreateManualIndex = false;",
      "info" : "VariableDeclarationStatement[36369-36405]:VariableDeclarationStatement[36369-36405]"
    }, {
      "left" : "if (exporterVersion <= 4)",
      "right" : "if (exporterVersion <= 4)",
      "info" : "IfStatement[36410-36508]:IfStatement[36410-36508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36436-36508]:Block[36436-36508]"
    }, {
      "left" : "removeDefaultClusters();",
      "right" : "removeDefaultClusters();",
      "info" : "ExpressionStatement[36444-36468]:ExpressionStatement[36444-36468]"
    }, {
      "left" : "recreateManualIndex = true;",
      "right" : "recreateManualIndex = true;",
      "info" : "ExpressionStatement[36475-36502]:ExpressionStatement[36475-36502]"
    }, {
      "left" : "final Set<String> indexesToRebuild = new HashSet<String>();",
      "right" : "final Set<String> indexesToRebuild = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[36514-36573]:VariableDeclarationStatement[36514-36573]"
    }, {
      "left" : "@SuppressWarnings(\"unused\")\n    ORecordId rid = null;",
      "right" : "@SuppressWarnings(\"unused\")\n    ORecordId rid = null;",
      "info" : "VariableDeclarationStatement[36579-36632]:VariableDeclarationStatement[36579-36632]"
    }, {
      "left" : "while (jsonReader.lastChar() != ']')",
      "right" : "while (jsonReader.lastChar() != ']')",
      "info" : "WhileStatement[36637-40375]:WhileStatement[36637-40375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36674-40375]:Block[36674-40375]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[36682-36728]:ExpressionStatement[36682-36728]"
    }, {
      "left" : "String name = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\n          .readString(OJSONReader.COMMA_SEPARATOR);",
      "right" : "String name = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"name\\\"\")\n          .readString(OJSONReader.COMMA_SEPARATOR);",
      "info" : "VariableDeclarationStatement[36736-36876]:VariableDeclarationStatement[36736-36876]"
    }, {
      "left" : "if (name.length() == 0)",
      "right" : "if (name.length() == 0)",
      "info" : "IfStatement[36884-36928]:IfStatement[36884-36928]"
    }, {
      "left" : "name = null;",
      "right" : "name = null;",
      "info" : "ExpressionStatement[36916-36928]:ExpressionStatement[36916-36928]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[36936-37377]:IfStatement[36936-37377]"
    }, {
      "left" : "if (includeClusters != null)",
      "right" : "if (includeClusters != null)",
      "info" : "IfStatement[37006-37377]:IfStatement[37006-37377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37035-37189]:Block[37035-37189]"
    }, {
      "left" : "if (!includeClusters.contains(name))",
      "right" : "if (!includeClusters.contains(name))",
      "info" : "IfStatement[37047-37179]:IfStatement[37047-37179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37084-37179]:Block[37084-37179]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[37098-37145]:ExpressionStatement[37098-37145]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[37158-37167]:ContinueStatement[37158-37167]"
    }, {
      "left" : "if (excludeClusters != null)",
      "right" : "if (excludeClusters != null)",
      "info" : "IfStatement[37195-37377]:IfStatement[37195-37377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37224-37377]:Block[37224-37377]"
    }, {
      "left" : "if (excludeClusters.contains(name))",
      "right" : "if (excludeClusters.contains(name))",
      "info" : "IfStatement[37236-37367]:IfStatement[37236-37367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37272-37367]:Block[37272-37367]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[37286-37333]:ExpressionStatement[37286-37333]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[37346-37355]:ContinueStatement[37346-37355]"
    }, {
      "left" : "int id;",
      "right" : "int id;",
      "info" : "VariableDeclarationStatement[37385-37392]:VariableDeclarationStatement[37385-37392]"
    }, {
      "left" : "if (exporterVersion < 9)",
      "right" : "if (exporterVersion < 9)",
      "info" : "IfStatement[37399-37843]:IfStatement[37399-37843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37424-37711]:Block[37424-37711]"
    }, {
      "left" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.COMMA_SEPARATOR);",
      "right" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[37434-37553]:ExpressionStatement[37434-37553]"
    }, {
      "left" : "String type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\")\n            .readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "String type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\")\n            .readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[37562-37703]:VariableDeclarationStatement[37562-37703]"
    }, {
      "left" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "id = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"id\\\"\").readInteger(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[37725-37843]:ExpressionStatement[37725-37843]"
    }, {
      "left" : "String type;",
      "right" : "String type;",
      "info" : "VariableDeclarationStatement[37851-37863]:VariableDeclarationStatement[37851-37863]"
    }, {
      "left" : "if (jsonReader.lastChar() == ',')",
      "right" : "if (jsonReader.lastChar() == ',')",
      "info" : "IfStatement[37870-38071]:IfStatement[37870-38071]"
    }, {
      "left" : "type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "type = jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"type\\\"\").readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[37912-38033]:ExpressionStatement[37912-38033]"
    }, {
      "left" : "type = \"PHYSICAL\";",
      "right" : "type = \"PHYSICAL\";",
      "info" : "ExpressionStatement[38053-38071]:ExpressionStatement[38053-38071]"
    }, {
      "left" : "if (jsonReader.lastChar() == ',')",
      "right" : "if (jsonReader.lastChar() == ',')",
      "info" : "IfStatement[38079-38303]:IfStatement[38079-38303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38113-38278]:Block[38113-38278]"
    }, {
      "left" : "rid = new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"rid\\\"\")\n            .readString(OJSONReader.NEXT_IN_OBJECT));",
      "right" : "rid = new ORecordId(jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT).checkContent(\"\\\"rid\\\"\")\n            .readString(OJSONReader.NEXT_IN_OBJECT));",
      "info" : "ExpressionStatement[38123-38270]:ExpressionStatement[38123-38270]"
    }, {
      "left" : "rid = null;",
      "right" : "rid = null;",
      "info" : "ExpressionStatement[38292-38303]:ExpressionStatement[38292-38303]"
    }, {
      "left" : "listener.onMessage(\"\\n- Creating cluster \" + (name != null ? \"'\" + name + \"'\" : \"NULL\") + \"...\");",
      "right" : "listener.onMessage(\"\\n- Creating cluster \" + (name != null ? \"'\" + name + \"'\" : \"NULL\") + \"...\");",
      "info" : "ExpressionStatement[38311-38408]:ExpressionStatement[38311-38408]"
    }, {
      "left" : "int clusterId = name != null ? database.getClusterIdByName(name) : -1;",
      "right" : "int clusterId = name != null ? database.getClusterIdByName(name) : -1;",
      "info" : "VariableDeclarationStatement[38416-38486]:VariableDeclarationStatement[38416-38486]"
    }, {
      "left" : "if (clusterId == -1)",
      "right" : "if (clusterId == -1)",
      "info" : "IfStatement[38493-38744]:IfStatement[38493-38744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38514-38744]:Block[38514-38744]"
    }, {
      "left" : "if (!preserveClusterIDs)",
      "right" : "if (!preserveClusterIDs)",
      "info" : "IfStatement[38545-38736]:IfStatement[38545-38736]"
    }, {
      "left" : "clusterId = database.addCluster(name);",
      "right" : "clusterId = database.addCluster(name);",
      "info" : "ExpressionStatement[38580-38618]:ExpressionStatement[38580-38618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38632-38736]:Block[38632-38736]"
    }, {
      "left" : "clusterId = database.addCluster(name, id, null);",
      "right" : "clusterId = database.addCluster(name, id, null);",
      "info" : "ExpressionStatement[38644-38692]:ExpressionStatement[38644-38692]"
    }, {
      "left" : "assert clusterId == id;",
      "right" : "assert clusterId == id;",
      "info" : "AssertStatement[38703-38726]:AssertStatement[38703-38726]"
    }, {
      "left" : "if (clusterId != id)",
      "right" : "if (clusterId != id)",
      "info" : "IfStatement[38752-39626]:IfStatement[38752-39626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38773-39626]:Block[38773-39626]"
    }, {
      "left" : "if (!preserveClusterIDs)",
      "right" : "if (!preserveClusterIDs)",
      "info" : "IfStatement[38783-39618]:IfStatement[38783-39618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38808-39504]:Block[38808-39504]"
    }, {
      "left" : "if (database.countClusterElements(clusterId - 1) == 0)",
      "right" : "if (database.countClusterElements(clusterId - 1) == 0)",
      "info" : "IfStatement[38820-39494]:IfStatement[38820-39494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38875-39130]:Block[38875-39130]"
    }, {
      "left" : "listener.onMessage(\"Found previous version: migrating old clusters...\");",
      "right" : "listener.onMessage(\"Found previous version: migrating old clusters...\");",
      "info" : "ExpressionStatement[38889-38961]:ExpressionStatement[38889-38961]"
    }, {
      "left" : "database.dropCluster(name, true);",
      "right" : "database.dropCluster(name, true);",
      "info" : "ExpressionStatement[38974-39007]:ExpressionStatement[38974-39007]"
    }, {
      "left" : "database.addCluster(\"temp_\" + clusterId, null);",
      "right" : "database.addCluster(\"temp_\" + clusterId, null);",
      "info" : "ExpressionStatement[39020-39067]:ExpressionStatement[39020-39067]"
    }, {
      "left" : "clusterId = database.addCluster(name);",
      "right" : "clusterId = database.addCluster(name);",
      "info" : "ExpressionStatement[39080-39118]:ExpressionStatement[39080-39118]"
    }, {
      "left" : "throw new OConfigurationException(\"Imported cluster '\" + name + \"' has id=\" + clusterId\n                + \" different from the original: \" + id + \". To continue the import drop the cluster '\"\n                + database.getClusterNameById(clusterId - 1) + \"' that has \" + database.countClusterElements(clusterId - 1)\n                + \" records\");",
      "right" : "throw new OConfigurationException(\"Imported cluster '\" + name + \"' has id=\" + clusterId\n                + \" different from the original: \" + id + \". To continue the import drop the cluster '\"\n                + database.getClusterNameById(clusterId - 1) + \"' that has \" + database.countClusterElements(clusterId - 1)\n                + \" records\");",
      "info" : "ThrowStatement[39148-39494]:ThrowStatement[39148-39494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39510-39618]:Block[39510-39618]"
    }, {
      "left" : "database.dropCluster(clusterId, false);",
      "right" : "database.dropCluster(clusterId, false);",
      "info" : "ExpressionStatement[39522-39561]:ExpressionStatement[39522-39561]"
    }, {
      "left" : "database.addCluster(name, id, null);",
      "right" : "database.addCluster(name, id, null);",
      "info" : "ExpressionStatement[39572-39608]:ExpressionStatement[39572-39608]"
    }, {
      "left" : "if (name != null\n          && !(name.equalsIgnoreCase(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME)\n              || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INTERNAL_NAME) || name\n                .equalsIgnoreCase(OMetadataDefault.CLUSTER_INDEX_NAME)))",
      "right" : "if (name != null\n          && !(name.equalsIgnoreCase(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME)\n              || name.equalsIgnoreCase(OMetadataDefault.CLUSTER_INTERNAL_NAME) || name\n                .equalsIgnoreCase(OMetadataDefault.CLUSTER_INDEX_NAME)))",
      "info" : "IfStatement[39634-40239]:IfStatement[39634-40239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39892-40239]:Block[39892-40239]"
    }, {
      "left" : "if (!merge)",
      "right" : "if (!merge)",
      "info" : "IfStatement[39902-39996]:IfStatement[39902-39996]"
    }, {
      "left" : "database.command(new OCommandSQL(\"truncate cluster \" + name)).execute();",
      "right" : "database.command(new OCommandSQL(\"truncate cluster \" + name)).execute();",
      "info" : "ExpressionStatement[39924-39996]:ExpressionStatement[39924-39996]"
    }, {
      "left" : "for (OIndex existingIndex : database.getMetadata().getIndexManager().getIndexes())",
      "right" : "for (OIndex existingIndex : database.getMetadata().getIndexManager().getIndexes())",
      "info" : "EnhancedForStatement[40006-40231]:EnhancedForStatement[40006-40231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40089-40231]:Block[40089-40231]"
    }, {
      "left" : "if (existingIndex.getClusters().contains(name))",
      "right" : "if (existingIndex.getClusters().contains(name))",
      "info" : "IfStatement[40101-40221]:IfStatement[40101-40221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40149-40221]:Block[40149-40221]"
    }, {
      "left" : "indexesToRebuild.add(existingIndex.getName());",
      "right" : "indexesToRebuild.add(existingIndex.getName());",
      "info" : "ExpressionStatement[40163-40209]:ExpressionStatement[40163-40209]"
    }, {
      "left" : "listener.onMessage(\"OK, assigned id=\" + clusterId);",
      "right" : "listener.onMessage(\"OK, assigned id=\" + clusterId);",
      "info" : "ExpressionStatement[40247-40298]:ExpressionStatement[40247-40298]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[40306-40314]:ExpressionStatement[40306-40314]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[40322-40369]:ExpressionStatement[40322-40369]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[40380-40429]:ExpressionStatement[40380-40429]"
    }, {
      "left" : "listener.onMessage(\"\\nRebuilding indexes of truncated clusters ...\");",
      "right" : "listener.onMessage(\"\\nRebuilding indexes of truncated clusters ...\");",
      "info" : "ExpressionStatement[40435-40504]:ExpressionStatement[40435-40504]"
    }, {
      "left" : "for (final String indexName : indexesToRebuild)\n      database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\n        private long last = 0;\n\n        @Override\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\n        }\n\n        @Override\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\n          final long now = System.currentTimeMillis();\n          if (last == 0)\n            last = now;\n          else if (now - last > 1000) {\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\n            last = now;\n          }\n          return true;\n        }\n\n        @Override\n        public void onCompletition(Object iTask, boolean iSucceed) {\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\n        }\n      });",
      "right" : "for (final String indexName : indexesToRebuild)\n      database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\n        private long last = 0;\n\n        @Override\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\n        }\n\n        @Override\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\n          final long now = System.currentTimeMillis();\n          if (last == 0)\n            last = now;\n          else if (now - last > 1000) {\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\n            last = now;\n          }\n          return true;\n        }\n\n        @Override\n        public void onCompletition(Object iTask, boolean iSucceed) {\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\n        }\n      });",
      "info" : "EnhancedForStatement[40510-41512]:EnhancedForStatement[40510-41512]"
    }, {
      "left" : "database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\n        private long last = 0;\n\n        @Override\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\n        }\n\n        @Override\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\n          final long now = System.currentTimeMillis();\n          if (last == 0)\n            last = now;\n          else if (now - last > 1000) {\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\n            last = now;\n          }\n          return true;\n        }\n\n        @Override\n        public void onCompletition(Object iTask, boolean iSucceed) {\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\n        }\n      });",
      "right" : "database.getMetadata().getIndexManager().getIndex(indexName).rebuild(new OProgressListener() {\n        private long last = 0;\n\n        @Override\n        public void onBegin(Object iTask, long iTotal, Object metadata) {\n          listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");\n        }\n\n        @Override\n        public boolean onProgress(Object iTask, long iCounter, float iPercent) {\n          final long now = System.currentTimeMillis();\n          if (last == 0)\n            last = now;\n          else if (now - last > 1000) {\n            listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));\n            last = now;\n          }\n          return true;\n        }\n\n        @Override\n        public void onCompletition(Object iTask, boolean iSucceed) {\n          listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");\n        }\n      });",
      "info" : "ExpressionStatement[40564-41512]:ExpressionStatement[40564-41512]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40699-40708]:MarkerAnnotation[40699-40708]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40717-40723]:Modifier[40717-40723]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40724-40728]:PrimitiveType[40724-40728]"
    }, {
      "left" : "onBegin",
      "right" : "onBegin",
      "info" : "SimpleName[40729-40736]:SimpleName[40729-40736]"
    }, {
      "left" : "Object iTask",
      "right" : "Object iTask",
      "info" : "SingleVariableDeclaration[40737-40749]:SingleVariableDeclaration[40737-40749]"
    }, {
      "left" : "long iTotal",
      "right" : "long iTotal",
      "info" : "SingleVariableDeclaration[40751-40762]:SingleVariableDeclaration[40751-40762]"
    }, {
      "left" : "Object metadata",
      "right" : "Object metadata",
      "info" : "SingleVariableDeclaration[40764-40779]:SingleVariableDeclaration[40764-40779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40781-40898]:Block[40781-40898]"
    }, {
      "left" : "listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");",
      "right" : "listener.onMessage(\"\\n- Cluster content was updated: rebuilding index '\" + indexName + \"'...\");",
      "info" : "ExpressionStatement[40793-40888]:ExpressionStatement[40793-40888]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40908-40917]:MarkerAnnotation[40908-40917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40926-40932]:Modifier[40926-40932]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40933-40940]:PrimitiveType[40933-40940]"
    }, {
      "left" : "onProgress",
      "right" : "onProgress",
      "info" : "SimpleName[40941-40951]:SimpleName[40941-40951]"
    }, {
      "left" : "Object iTask",
      "right" : "Object iTask",
      "info" : "SingleVariableDeclaration[40952-40964]:SingleVariableDeclaration[40952-40964]"
    }, {
      "left" : "long iCounter",
      "right" : "long iCounter",
      "info" : "SingleVariableDeclaration[40966-40979]:SingleVariableDeclaration[40966-40979]"
    }, {
      "left" : "float iPercent",
      "right" : "float iPercent",
      "info" : "SingleVariableDeclaration[40981-40995]:SingleVariableDeclaration[40981-40995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40997-41320]:Block[40997-41320]"
    }, {
      "left" : "final long now = System.currentTimeMillis();",
      "right" : "final long now = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[41009-41053]:VariableDeclarationStatement[41009-41053]"
    }, {
      "left" : "if (last == 0)",
      "right" : "if (last == 0)",
      "info" : "IfStatement[41064-41287]:IfStatement[41064-41287]"
    }, {
      "left" : "last = now;",
      "right" : "last = now;",
      "info" : "ExpressionStatement[41091-41102]:ExpressionStatement[41091-41102]"
    }, {
      "left" : "if (now - last > 1000)",
      "right" : "if (now - last > 1000)",
      "info" : "IfStatement[41118-41287]:IfStatement[41118-41287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41141-41287]:Block[41141-41287]"
    }, {
      "left" : "listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));",
      "right" : "listener.onMessage(String.format(\"\\nIndex '%s' is rebuilding (%.2f/100)\", indexName, iPercent));",
      "info" : "ExpressionStatement[41155-41251]:ExpressionStatement[41155-41251]"
    }, {
      "left" : "last = now;",
      "right" : "last = now;",
      "info" : "ExpressionStatement[41264-41275]:ExpressionStatement[41264-41275]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41298-41310]:ReturnStatement[41298-41310]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41330-41339]:MarkerAnnotation[41330-41339]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41348-41354]:Modifier[41348-41354]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41355-41359]:PrimitiveType[41355-41359]"
    }, {
      "left" : "onCompletition",
      "right" : "onCompletition",
      "info" : "SimpleName[41360-41374]:SimpleName[41360-41374]"
    }, {
      "left" : "Object iTask",
      "right" : "Object iTask",
      "info" : "SingleVariableDeclaration[41375-41387]:SingleVariableDeclaration[41375-41387]"
    }, {
      "left" : "boolean iSucceed",
      "right" : "boolean iSucceed",
      "info" : "SingleVariableDeclaration[41389-41405]:SingleVariableDeclaration[41389-41405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41407-41502]:Block[41407-41502]"
    }, {
      "left" : "listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");",
      "right" : "listener.onMessage(\" Index \" + indexName + \" was successfully rebuilt.\");",
      "info" : "ExpressionStatement[41419-41492]:ExpressionStatement[41419-41492]"
    }, {
      "left" : "listener.onMessage(\"\\nDone \" + indexesToRebuild.size() + \" indexes were rebuilt.\");",
      "right" : "listener.onMessage(\"\\nDone \" + indexesToRebuild.size() + \" indexes were rebuilt.\");",
      "info" : "ExpressionStatement[41518-41601]:ExpressionStatement[41518-41601]"
    }, {
      "left" : "if (recreateManualIndex)",
      "right" : "if (recreateManualIndex)",
      "info" : "IfStatement[41607-41835]:IfStatement[41607-41835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41632-41835]:Block[41632-41835]"
    }, {
      "left" : "database.addCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
      "right" : "database.addCluster(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
      "info" : "ExpressionStatement[41640-41704]:ExpressionStatement[41640-41704]"
    }, {
      "left" : "database.getMetadata().getIndexManager().create();",
      "right" : "database.getMetadata().getIndexManager().create();",
      "info" : "ExpressionStatement[41711-41761]:ExpressionStatement[41711-41761]"
    }, {
      "left" : "listener.onMessage(\"\\nManual index cluster was recreated.\");",
      "right" : "listener.onMessage(\"\\nManual index cluster was recreated.\");",
      "info" : "ExpressionStatement[41769-41829]:ExpressionStatement[41769-41829]"
    }, {
      "left" : "listener.onMessage(\"\\nDone. Imported \" + total + \" clusters\");",
      "right" : "listener.onMessage(\"\\nDone. Imported \" + total + \" clusters\");",
      "info" : "ExpressionStatement[41841-41903]:ExpressionStatement[41841-41903]"
    }, {
      "left" : "if (database.load(new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId)) == null)",
      "right" : "if (database.load(new ORecordId(database.getStorage().getConfiguration().indexMgrRecordId)) == null)",
      "info" : "IfStatement[41909-42296]:IfStatement[41909-42296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42010-42296]:Block[42010-42296]"
    }, {
      "left" : "ODocument indexDocument = new ODocument();",
      "right" : "ODocument indexDocument = new ODocument();",
      "info" : "VariableDeclarationStatement[42018-42060]:VariableDeclarationStatement[42018-42060]"
    }, {
      "left" : "indexDocument.save(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
      "right" : "indexDocument.save(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
      "info" : "ExpressionStatement[42067-42126]:ExpressionStatement[42067-42126]"
    }, {
      "left" : "database.getStorage().getConfiguration().indexMgrRecordId = indexDocument.getIdentity().toString();",
      "right" : "database.getStorage().getConfiguration().indexMgrRecordId = indexDocument.getIdentity().toString();",
      "info" : "ExpressionStatement[42134-42233]:ExpressionStatement[42134-42233]"
    }, {
      "left" : "database.getStorage().getConfiguration().update();",
      "right" : "database.getStorage().getConfiguration().update();",
      "info" : "ExpressionStatement[42240-42290]:ExpressionStatement[42240-42290]"
    }, {
      "left" : "if (database.getStorage() instanceof OLocalPaginatedStorage && makeFullCheckPointAfterClusterCreation)",
      "right" : "if (database.getStorage() instanceof OLocalPaginatedStorage && makeFullCheckPointAfterClusterCreation)",
      "info" : "IfStatement[42302-42501]:IfStatement[42302-42501]"
    }, {
      "left" : "((OLocalPaginatedStorage) database.getStorage()).enableFullCheckPointAfterClusterCreate();",
      "right" : "((OLocalPaginatedStorage) database.getStorage()).enableFullCheckPointAfterClusterCreate();",
      "info" : "ExpressionStatement[42411-42501]:ExpressionStatement[42411-42501]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[42507-42520]:ReturnStatement[42507-42520]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42528-42535]:Modifier[42528-42535]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[42536-42540]:PrimitiveType[42536-42540]"
    }, {
      "left" : "importRecords",
      "right" : "importRecords",
      "info" : "SimpleName[42541-42554]:SimpleName[42541-42554]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[42564-42573]:SimpleType[42564-42573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42574-44761]:Block[42574-44761]"
    }, {
      "left" : "long total = 0;",
      "right" : "long total = 0;",
      "info" : "VariableDeclarationStatement[42580-42595]:VariableDeclarationStatement[42580-42595]"
    }, {
      "left" : "database.getMetadata().getIndexManager().dropIndex(EXPORT_IMPORT_MAP_NAME);",
      "right" : "database.getMetadata().getIndexManager().dropIndex(EXPORT_IMPORT_MAP_NAME);",
      "info" : "ExpressionStatement[42601-42676]:ExpressionStatement[42601-42676]"
    }, {
      "left" : "OIndexFactory factory = OIndexes.getFactory(OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(), null);",
      "right" : "OIndexFactory factory = OIndexes.getFactory(OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(), null);",
      "info" : "VariableDeclarationStatement[42681-42783]:VariableDeclarationStatement[42681-42783]"
    }, {
      "left" : "exportImportHashTable = (OIndex<OIdentifiable>) database\n        .getMetadata()\n        .getIndexManager()\n        .createIndex(EXPORT_IMPORT_MAP_NAME, OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(),\n            new OSimpleKeyIndexDefinition(factory.getLastVersion(), OType.LINK), null, null, null);",
      "right" : "exportImportHashTable = (OIndex<OIdentifiable>) database\n        .getMetadata()\n        .getIndexManager()\n        .createIndex(EXPORT_IMPORT_MAP_NAME, OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX.toString(),\n            new OSimpleKeyIndexDefinition(factory.getLastVersion(), OType.LINK), null, null, null);",
      "info" : "ExpressionStatement[42789-43092]:ExpressionStatement[42789-43092]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[43098-43148]:ExpressionStatement[43098-43148]"
    }, {
      "left" : "long totalRecords = 0;",
      "right" : "long totalRecords = 0;",
      "info" : "VariableDeclarationStatement[43154-43176]:VariableDeclarationStatement[43154-43176]"
    }, {
      "left" : "listener.onMessage(\"\\n\\nImporting records...\");",
      "right" : "listener.onMessage(\"\\n\\nImporting records...\");",
      "info" : "ExpressionStatement[43182-43229]:ExpressionStatement[43182-43229]"
    }, {
      "left" : "ORID rid;",
      "right" : "ORID rid;",
      "info" : "VariableDeclarationStatement[43235-43244]:VariableDeclarationStatement[43235-43244]"
    }, {
      "left" : "ORID lastRid = new ORecordId();",
      "right" : "ORID lastRid = new ORecordId();",
      "info" : "VariableDeclarationStatement[43249-43280]:VariableDeclarationStatement[43249-43280]"
    }, {
      "left" : "final long begin = System.currentTimeMillis();",
      "right" : "final long begin = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[43285-43331]:VariableDeclarationStatement[43285-43331]"
    }, {
      "left" : "long lastLapRecords = 0;",
      "right" : "long lastLapRecords = 0;",
      "info" : "VariableDeclarationStatement[43336-43360]:VariableDeclarationStatement[43336-43360]"
    }, {
      "left" : "long last = begin;",
      "right" : "long last = begin;",
      "info" : "VariableDeclarationStatement[43365-43383]:VariableDeclarationStatement[43365-43383]"
    }, {
      "left" : "Set<String> involvedClusters = new HashSet<String>();",
      "right" : "Set<String> involvedClusters = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[43388-43441]:VariableDeclarationStatement[43388-43441]"
    }, {
      "left" : "while (jsonReader.lastChar() != ']')",
      "right" : "while (jsonReader.lastChar() != ']')",
      "info" : "WhileStatement[43447-44452]:WhileStatement[43447-44452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43484-44452]:Block[43484-44452]"
    }, {
      "left" : "rid = importRecord();",
      "right" : "rid = importRecord();",
      "info" : "ExpressionStatement[43492-43513]:ExpressionStatement[43492-43513]"
    }, {
      "left" : "if (rid != null)",
      "right" : "if (rid != null)",
      "info" : "IfStatement[43521-44424]:IfStatement[43521-44424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43538-44424]:Block[43538-44424]"
    }, {
      "left" : "++lastLapRecords;",
      "right" : "++lastLapRecords;",
      "info" : "ExpressionStatement[43548-43565]:ExpressionStatement[43548-43565]"
    }, {
      "left" : "++totalRecords;",
      "right" : "++totalRecords;",
      "info" : "ExpressionStatement[43574-43589]:ExpressionStatement[43574-43589]"
    }, {
      "left" : "if (rid.getClusterId() != lastRid.getClusterId())",
      "right" : "if (rid.getClusterId() != lastRid.getClusterId())",
      "info" : "IfStatement[43599-43729]:IfStatement[43599-43729]"
    }, {
      "left" : "involvedClusters.add(database.getClusterNameById(rid.getClusterId()));",
      "right" : "involvedClusters.add(database.getClusterNameById(rid.getClusterId()));",
      "info" : "ExpressionStatement[43659-43729]:ExpressionStatement[43659-43729]"
    }, {
      "left" : "final long now = System.currentTimeMillis();",
      "right" : "final long now = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[43739-43783]:VariableDeclarationStatement[43739-43783]"
    }, {
      "left" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
      "right" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
      "info" : "IfStatement[43792-44393]:IfStatement[43792-44393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43842-44393]:Block[43842-44393]"
    }, {
      "left" : "final List<String> sortedClusters = new ArrayList<String>(involvedClusters);",
      "right" : "final List<String> sortedClusters = new ArrayList<String>(involvedClusters);",
      "info" : "VariableDeclarationStatement[43854-43930]:VariableDeclarationStatement[43854-43930]"
    }, {
      "left" : "Collections.sort(sortedClusters);",
      "right" : "Collections.sort(sortedClusters);",
      "info" : "ExpressionStatement[43941-43974]:ExpressionStatement[43941-43974]"
    }, {
      "left" : "listener.onMessage(String.format(\n              \"\\n- Imported %,d records into clusters: %s. Total records imported so far: %,d (%,.2f/sec)\", lastLapRecords,\n              sortedClusters, totalRecords, (float) lastLapRecords * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
      "right" : "listener.onMessage(String.format(\n              \"\\n- Imported %,d records into clusters: %s. Total records imported so far: %,d (%,.2f/sec)\", lastLapRecords,\n              sortedClusters, totalRecords, (float) lastLapRecords * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
      "info" : "ExpressionStatement[43986-44262]:ExpressionStatement[43986-44262]"
    }, {
      "left" : "last = now;",
      "right" : "last = now;",
      "info" : "ExpressionStatement[44306-44317]:ExpressionStatement[44306-44317]"
    }, {
      "left" : "lastLapRecords = 0;",
      "right" : "lastLapRecords = 0;",
      "info" : "ExpressionStatement[44328-44347]:ExpressionStatement[44328-44347]"
    }, {
      "left" : "involvedClusters.clear();",
      "right" : "involvedClusters.clear();",
      "info" : "ExpressionStatement[44358-44383]:ExpressionStatement[44358-44383]"
    }, {
      "left" : "lastRid = rid;",
      "right" : "lastRid = rid;",
      "info" : "ExpressionStatement[44402-44416]:ExpressionStatement[44402-44416]"
    }, {
      "left" : "record = null;",
      "right" : "record = null;",
      "info" : "ExpressionStatement[44432-44446]:ExpressionStatement[44432-44446]"
    }, {
      "left" : "if (migrateLinks)",
      "right" : "if (migrateLinks)",
      "info" : "IfStatement[44458-44516]:IfStatement[44458-44516]"
    }, {
      "left" : "migrateLinksInImportedDocuments();",
      "right" : "migrateLinksInImportedDocuments();",
      "info" : "ExpressionStatement[44482-44516]:ExpressionStatement[44482-44516]"
    }, {
      "left" : "listener.onMessage(String.format(\"\\n\\nDone. Imported %,d records in %,.2f secs\\n\", totalRecords,\n        ((float) (System.currentTimeMillis() - begin)) / 1000));",
      "right" : "listener.onMessage(String.format(\"\\n\\nDone. Imported %,d records in %,.2f secs\\n\", totalRecords,\n        ((float) (System.currentTimeMillis() - begin)) / 1000));",
      "info" : "ExpressionStatement[44522-44683]:ExpressionStatement[44522-44683]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "right" : "jsonReader.readNext(OJSONReader.COMMA_SEPARATOR);",
      "info" : "ExpressionStatement[44689-44738]:ExpressionStatement[44689-44738]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[44744-44757]:ReturnStatement[44744-44757]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44765-44772]:Modifier[44765-44772]"
    }, {
      "left" : "ORID",
      "right" : "ORID",
      "info" : "SimpleType[44773-44777]:SimpleType[44773-44777]"
    }, {
      "left" : "importRecord",
      "right" : "importRecord",
      "info" : "SimpleName[44778-44790]:SimpleName[44778-44790]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[44800-44809]:SimpleType[44800-44809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44810-48182]:Block[44810-48182]"
    }, {
      "left" : "String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
      "right" : "String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
      "info" : "VariableDeclarationStatement[44816-44883]:VariableDeclarationStatement[44816-44883]"
    }, {
      "left" : "while (!value.isEmpty() && value.charAt(0) != '{')",
      "right" : "while (!value.isEmpty() && value.charAt(0) != '{')",
      "info" : "WhileStatement[44915-45007]:WhileStatement[44915-45007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44966-45007]:Block[44966-45007]"
    }, {
      "left" : "value = value.substring(1);",
      "right" : "value = value.substring(1);",
      "info" : "ExpressionStatement[44974-45001]:ExpressionStatement[44974-45001]"
    }, {
      "left" : "record = null;",
      "right" : "record = null;",
      "info" : "ExpressionStatement[45013-45027]:ExpressionStatement[45013-45027]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[45032-48144]:TryStatement[45032-48144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45036-47595]:Block[45036-47595]"
    }, {
      "left" : "record = ORecordSerializerJSON.INSTANCE.fromString(value, record, null);",
      "right" : "record = ORecordSerializerJSON.INSTANCE.fromString(value, record, null);",
      "info" : "ExpressionStatement[45044-45116]:ExpressionStatement[45044-45116]"
    }, {
      "left" : "if (schemaImported && record.getIdentity().equals(schemaRecordId))",
      "right" : "if (schemaImported && record.getIdentity().equals(schemaRecordId))",
      "info" : "IfStatement[45124-45248]:IfStatement[45124-45248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45191-45248]:Block[45191-45248]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45228-45240]:ReturnStatement[45228-45240]"
    }, {
      "left" : "if (includeClusters != null)",
      "right" : "if (includeClusters != null)",
      "info" : "IfStatement[45298-45705]:IfStatement[45298-45705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45327-45534]:Block[45327-45534]"
    }, {
      "left" : "if (!includeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
      "right" : "if (!includeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
      "info" : "IfStatement[45337-45526]:IfStatement[45337-45526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45434-45526]:Block[45434-45526]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[45446-45493]:ExpressionStatement[45446-45493]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45504-45516]:ReturnStatement[45504-45516]"
    }, {
      "left" : "if (excludeClusters != null)",
      "right" : "if (excludeClusters != null)",
      "info" : "IfStatement[45540-45705]:IfStatement[45540-45705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45569-45705]:Block[45569-45705]"
    }, {
      "left" : "if (excludeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
      "right" : "if (excludeClusters.contains(database.getClusterNameById(record.getIdentity().getClusterId())))",
      "info" : "IfStatement[45579-45697]:IfStatement[45579-45697]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45685-45697]:ReturnStatement[45685-45697]"
    }, {
      "left" : "if (record.getIdentity().getClusterId() == 0 && record.getIdentity().getClusterPosition() == 1)",
      "right" : "if (record.getIdentity().getClusterId() == 0 && record.getIdentity().getClusterPosition() == 1)",
      "info" : "IfStatement[45713-45862]:IfStatement[45713-45862]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45850-45862]:ReturnStatement[45850-45862]"
    }, {
      "left" : "if (exporterVersion >= 3)",
      "right" : "if (exporterVersion >= 3)",
      "info" : "IfStatement[45870-46254]:IfStatement[45870-46254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45896-46254]:Block[45896-46254]"
    }, {
      "left" : "int oridsId = database.getClusterIdByName(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
      "right" : "int oridsId = database.getClusterIdByName(OMVRBTreeRIDProvider.PERSISTENT_CLASS_NAME);",
      "info" : "VariableDeclarationStatement[45906-45992]:VariableDeclarationStatement[45906-45992]"
    }, {
      "left" : "int indexId = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
      "right" : "int indexId = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
      "info" : "VariableDeclarationStatement[46001-46080]:VariableDeclarationStatement[46001-46080]"
    }, {
      "left" : "if (record.getIdentity().getClusterId() == indexId || record.getIdentity().getClusterId() == oridsId)",
      "right" : "if (record.getIdentity().getClusterId() == indexId || record.getIdentity().getClusterId() == oridsId)",
      "info" : "IfStatement[46090-46246]:IfStatement[46090-46246]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46234-46246]:ReturnStatement[46234-46246]"
    }, {
      "left" : "final int manualIndexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
      "right" : "final int manualIndexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME);",
      "info" : "VariableDeclarationStatement[46262-46365]:VariableDeclarationStatement[46262-46365]"
    }, {
      "left" : "final int internalCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
      "right" : "final int internalCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INTERNAL_NAME);",
      "info" : "VariableDeclarationStatement[46372-46468]:VariableDeclarationStatement[46372-46468]"
    }, {
      "left" : "final int indexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
      "right" : "final int indexCluster = database.getClusterIdByName(OMetadataDefault.CLUSTER_INDEX_NAME);",
      "info" : "VariableDeclarationStatement[46475-46565]:VariableDeclarationStatement[46475-46565]"
    }, {
      "left" : "if (exporterVersion >= 4)",
      "right" : "if (exporterVersion >= 4)",
      "info" : "IfStatement[46573-46734]:IfStatement[46573-46734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46599-46734]:Block[46599-46734]"
    }, {
      "left" : "if (record.getIdentity().getClusterId() == manualIndexCluster)",
      "right" : "if (record.getIdentity().getClusterId() == manualIndexCluster)",
      "info" : "IfStatement[46609-46726]:IfStatement[46609-46726]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46714-46726]:ReturnStatement[46714-46726]"
    }, {
      "left" : "if (record.getIdentity().equals(indexMgrRecordId))",
      "right" : "if (record.getIdentity().equals(indexMgrRecordId))",
      "info" : "IfStatement[46742-46813]:IfStatement[46742-46813]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46801-46813]:ReturnStatement[46801-46813]"
    }, {
      "left" : "final ORID rid = record.getIdentity();",
      "right" : "final ORID rid = record.getIdentity();",
      "info" : "VariableDeclarationStatement[46821-46859]:VariableDeclarationStatement[46821-46859]"
    }, {
      "left" : "final int clusterId = rid.getClusterId();",
      "right" : "final int clusterId = rid.getClusterId();",
      "info" : "VariableDeclarationStatement[46867-46908]:VariableDeclarationStatement[46867-46908]"
    }, {
      "left" : "if ((clusterId != manualIndexCluster && clusterId != internalCluster && clusterId != indexCluster))",
      "right" : "if ((clusterId != manualIndexCluster && clusterId != internalCluster && clusterId != indexCluster))",
      "info" : "IfStatement[46916-47588]:IfStatement[46916-47588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47016-47588]:Block[47016-47588]"
    }, {
      "left" : "record.getRecordVersion().copyFrom(OVersionFactory.instance().createVersion());",
      "right" : "record.getRecordVersion().copyFrom(OVersionFactory.instance().createVersion());",
      "info" : "ExpressionStatement[47026-47105]:ExpressionStatement[47026-47105]"
    }, {
      "left" : "record.setDirty();",
      "right" : "record.setDirty();",
      "info" : "ExpressionStatement[47114-47132]:ExpressionStatement[47114-47132]"
    }, {
      "left" : "ORecordInternal.setIdentity(record, new ORecordId());",
      "right" : "ORecordInternal.setIdentity(record, new ORecordId());",
      "info" : "ExpressionStatement[47141-47194]:ExpressionStatement[47141-47194]"
    }, {
      "left" : "if (!preserveRids && record instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument) record)) != null)",
      "right" : "if (!preserveRids && record instanceof ODocument && ODocumentInternal.getImmutableSchemaClass(((ODocument) record)) != null)",
      "info" : "IfStatement[47204-47429]:IfStatement[47204-47429]"
    }, {
      "left" : "record.save();",
      "right" : "record.save();",
      "info" : "ExpressionStatement[47339-47353]:ExpressionStatement[47339-47353]"
    }, {
      "left" : "record.save(database.getClusterNameById(clusterId));",
      "right" : "record.save(database.getClusterNameById(clusterId));",
      "info" : "ExpressionStatement[47377-47429]:ExpressionStatement[47377-47429]"
    }, {
      "left" : "if (!rid.equals(record.getIdentity()))",
      "right" : "if (!rid.equals(record.getIdentity()))",
      "info" : "IfStatement[47439-47580]:IfStatement[47439-47580]"
    }, {
      "left" : "exportImportHashTable.put(rid, record.getIdentity());",
      "right" : "exportImportHashTable.put(rid, record.getIdentity());",
      "info" : "ExpressionStatement[47527-47580]:ExpressionStatement[47527-47580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47616-48074]:Block[47616-48074]"
    }, {
      "left" : "if (record != null)",
      "right" : "if (record != null)",
      "info" : "IfStatement[47624-48052]:IfStatement[47624-48052]"
    }, {
      "left" : "OLogManager.instance().error(\n            this,\n            \"Error importing record \" + record.getIdentity() + \". Source line \" + jsonReader.getLineNumber() + \", column \"\n                + jsonReader.getColumnNumber());",
      "right" : "OLogManager.instance().error(\n            this,\n            \"Error importing record \" + record.getIdentity() + \". Source line \" + jsonReader.getLineNumber() + \", column \"\n                + jsonReader.getColumnNumber());",
      "info" : "ExpressionStatement[47652-47871]:ExpressionStatement[47652-47871]"
    }, {
      "left" : "OLogManager.instance().error(this,\n            \"Error importing record. Source line \" + jsonReader.getLineNumber() + \", column \" + jsonReader.getColumnNumber());",
      "right" : "OLogManager.instance().error(this,\n            \"Error importing record. Source line \" + jsonReader.getLineNumber() + \", column \" + jsonReader.getColumnNumber());",
      "info" : "ExpressionStatement[47891-48052]:ExpressionStatement[47891-48052]"
    }, {
      "left" : "throw t;",
      "right" : "throw t;",
      "info" : "ThrowStatement[48060-48068]:ThrowStatement[48060-48068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48083-48144]:Block[48083-48144]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[48091-48138]:ExpressionStatement[48091-48138]"
    }, {
      "left" : "return record.getIdentity();",
      "right" : "return record.getIdentity();",
      "info" : "ReturnStatement[48150-48178]:ReturnStatement[48150-48178]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48186-48193]:Modifier[48186-48193]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48194-48198]:PrimitiveType[48194-48198]"
    }, {
      "left" : "importIndexes",
      "right" : "importIndexes",
      "info" : "SimpleName[48199-48212]:SimpleName[48199-48212]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[48222-48233]:SimpleType[48222-48233]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[48235-48249]:SimpleType[48235-48249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48250-51070]:Block[48250-51070]"
    }, {
      "left" : "listener.onMessage(\"\\n\\nImporting indexes ...\");",
      "right" : "listener.onMessage(\"\\n\\nImporting indexes ...\");",
      "info" : "ExpressionStatement[48256-48304]:ExpressionStatement[48256-48304]"
    }, {
      "left" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
      "right" : "OIndexManagerProxy indexManager = database.getMetadata().getIndexManager();",
      "info" : "VariableDeclarationStatement[48310-48385]:VariableDeclarationStatement[48310-48385]"
    }, {
      "left" : "indexManager.reload();",
      "right" : "indexManager.reload();",
      "info" : "ExpressionStatement[48390-48412]:ExpressionStatement[48390-48412]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[48418-48468]:ExpressionStatement[48418-48468]"
    }, {
      "left" : "int n = 0;",
      "right" : "int n = 0;",
      "info" : "VariableDeclarationStatement[48474-48484]:VariableDeclarationStatement[48474-48484]"
    }, {
      "left" : "while (jsonReader.lastChar() != ']')",
      "right" : "while (jsonReader.lastChar() != ']')",
      "info" : "WhileStatement[48489-50950]:WhileStatement[48489-50950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48526-50950]:Block[48526-50950]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[48534-48580]:ExpressionStatement[48534-48580]"
    }, {
      "left" : "String blueprintsIndexClass = null;",
      "right" : "String blueprintsIndexClass = null;",
      "info" : "VariableDeclarationStatement[48588-48623]:VariableDeclarationStatement[48588-48623]"
    }, {
      "left" : "String indexName = null;",
      "right" : "String indexName = null;",
      "info" : "VariableDeclarationStatement[48630-48654]:VariableDeclarationStatement[48630-48654]"
    }, {
      "left" : "String indexType = null;",
      "right" : "String indexType = null;",
      "info" : "VariableDeclarationStatement[48661-48685]:VariableDeclarationStatement[48661-48685]"
    }, {
      "left" : "Set<String> clustersToIndex = new HashSet<String>();",
      "right" : "Set<String> clustersToIndex = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[48692-48744]:VariableDeclarationStatement[48692-48744]"
    }, {
      "left" : "OIndexDefinition indexDefinition = null;",
      "right" : "OIndexDefinition indexDefinition = null;",
      "info" : "VariableDeclarationStatement[48751-48791]:VariableDeclarationStatement[48751-48791]"
    }, {
      "left" : "ODocument metadata = null;",
      "right" : "ODocument metadata = null;",
      "info" : "VariableDeclarationStatement[48798-48824]:VariableDeclarationStatement[48798-48824]"
    }, {
      "left" : "while (jsonReader.lastChar() != '}')",
      "right" : "while (jsonReader.lastChar() != '}')",
      "info" : "WhileStatement[48832-49862]:WhileStatement[48832-49862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48869-49862]:Block[48869-49862]"
    }, {
      "left" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "final String fieldName = jsonReader.readString(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "VariableDeclarationStatement[48879-48956]:VariableDeclarationStatement[48879-48956]"
    }, {
      "left" : "if (fieldName.equals(\"name\"))",
      "right" : "if (fieldName.equals(\"name\"))",
      "info" : "IfStatement[48965-49854]:IfStatement[48965-49854]"
    }, {
      "left" : "indexName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "indexName = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[49005-49067]:ExpressionStatement[49005-49067]"
    }, {
      "left" : "if (fieldName.equals(\"type\"))",
      "right" : "if (fieldName.equals(\"type\"))",
      "info" : "IfStatement[49081-49854]:IfStatement[49081-49854]"
    }, {
      "left" : "indexType = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "indexType = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[49121-49183]:ExpressionStatement[49121-49183]"
    }, {
      "left" : "if (fieldName.equals(\"clustersToIndex\"))",
      "right" : "if (fieldName.equals(\"clustersToIndex\"))",
      "info" : "IfStatement[49197-49854]:IfStatement[49197-49854]"
    }, {
      "left" : "clustersToIndex = importClustersToIndex();",
      "right" : "clustersToIndex = importClustersToIndex();",
      "info" : "ExpressionStatement[49248-49290]:ExpressionStatement[49248-49290]"
    }, {
      "left" : "if (fieldName.equals(\"definition\"))",
      "right" : "if (fieldName.equals(\"definition\"))",
      "info" : "IfStatement[49304-49854]:IfStatement[49304-49854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49340-49463]:Block[49340-49463]"
    }, {
      "left" : "indexDefinition = importIndexDefinition();",
      "right" : "indexDefinition = importIndexDefinition();",
      "info" : "ExpressionStatement[49352-49394]:ExpressionStatement[49352-49394]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[49405-49453]:ExpressionStatement[49405-49453]"
    }, {
      "left" : "if (fieldName.equals(\"metadata\"))",
      "right" : "if (fieldName.equals(\"metadata\"))",
      "info" : "IfStatement[49469-49854]:IfStatement[49469-49854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49503-49719]:Block[49503-49719]"
    }, {
      "left" : "String jsonMetadata = jsonReader.readString(OJSONReader.END_OBJECT, true);",
      "right" : "String jsonMetadata = jsonReader.readString(OJSONReader.END_OBJECT, true);",
      "info" : "VariableDeclarationStatement[49515-49589]:VariableDeclarationStatement[49515-49589]"
    }, {
      "left" : "metadata = new ODocument().fromJSON(jsonMetadata);",
      "right" : "metadata = new ODocument().fromJSON(jsonMetadata);",
      "info" : "ExpressionStatement[49600-49650]:ExpressionStatement[49600-49650]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[49661-49709]:ExpressionStatement[49661-49709]"
    }, {
      "left" : "if (fieldName.equals(\"blueprintsIndexClass\"))",
      "right" : "if (fieldName.equals(\"blueprintsIndexClass\"))",
      "info" : "IfStatement[49725-49854]:IfStatement[49725-49854]"
    }, {
      "left" : "blueprintsIndexClass = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "blueprintsIndexClass = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[49781-49854]:ExpressionStatement[49781-49854]"
    }, {
      "left" : "if (indexName == null)",
      "right" : "if (indexName == null)",
      "info" : "IfStatement[49870-49961]:IfStatement[49870-49961]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Index name is missing\");",
      "right" : "throw new IllegalArgumentException(\"Index name is missing\");",
      "info" : "ThrowStatement[49901-49961]:ThrowStatement[49901-49961]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "ExpressionStatement[49969-50016]:ExpressionStatement[49969-50016]"
    }, {
      "left" : "if (!indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
      "right" : "if (!indexName.equalsIgnoreCase(EXPORT_IMPORT_MAP_NAME))",
      "info" : "IfStatement[50068-50944]:IfStatement[50068-50944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50125-50944]:Block[50125-50944]"
    }, {
      "left" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
      "right" : "listener.onMessage(\"\\n- Index '\" + indexName + \"'...\");",
      "info" : "ExpressionStatement[50135-50190]:ExpressionStatement[50135-50190]"
    }, {
      "left" : "indexManager.dropIndex(indexName);",
      "right" : "indexManager.dropIndex(indexName);",
      "info" : "ExpressionStatement[50200-50234]:ExpressionStatement[50200-50234]"
    }, {
      "left" : "indexesToRebuild.remove(indexName.toLowerCase());",
      "right" : "indexesToRebuild.remove(indexName.toLowerCase());",
      "info" : "ExpressionStatement[50243-50292]:ExpressionStatement[50243-50292]"
    }, {
      "left" : "int[] clusterIdsToIndex = new int[clustersToIndex.size()];",
      "right" : "int[] clusterIdsToIndex = new int[clustersToIndex.size()];",
      "info" : "VariableDeclarationStatement[50302-50360]:VariableDeclarationStatement[50302-50360]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[50370-50380]:VariableDeclarationStatement[50370-50380]"
    }, {
      "left" : "for (final String clusterName : clustersToIndex)",
      "right" : "for (final String clusterName : clustersToIndex)",
      "info" : "EnhancedForStatement[50389-50539]:EnhancedForStatement[50389-50539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50438-50539]:Block[50438-50539]"
    }, {
      "left" : "clusterIdsToIndex[i] = database.getClusterIdByName(clusterName);",
      "right" : "clusterIdsToIndex[i] = database.getClusterIdByName(clusterName);",
      "info" : "ExpressionStatement[50450-50514]:ExpressionStatement[50450-50514]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[50525-50529]:ExpressionStatement[50525-50529]"
    }, {
      "left" : "OIndex index = indexManager.createIndex(indexName, indexType, indexDefinition, clusterIdsToIndex, null, metadata);",
      "right" : "OIndex index = indexManager.createIndex(indexName, indexType, indexDefinition, clusterIdsToIndex, null, metadata);",
      "info" : "VariableDeclarationStatement[50549-50663]:VariableDeclarationStatement[50549-50663]"
    }, {
      "left" : "if (blueprintsIndexClass != null)",
      "right" : "if (blueprintsIndexClass != null)",
      "info" : "IfStatement[50672-50887]:IfStatement[50672-50887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50706-50887]:Block[50706-50887]"
    }, {
      "left" : "ODocument configuration = index.getConfiguration();",
      "right" : "ODocument configuration = index.getConfiguration();",
      "info" : "VariableDeclarationStatement[50718-50769]:VariableDeclarationStatement[50718-50769]"
    }, {
      "left" : "configuration.field(\"blueprintsIndexClass\", blueprintsIndexClass);",
      "right" : "configuration.field(\"blueprintsIndexClass\", blueprintsIndexClass);",
      "info" : "ExpressionStatement[50780-50846]:ExpressionStatement[50780-50846]"
    }, {
      "left" : "indexManager.save();",
      "right" : "indexManager.save();",
      "info" : "ExpressionStatement[50857-50877]:ExpressionStatement[50857-50877]"
    }, {
      "left" : "n++;",
      "right" : "n++;",
      "info" : "ExpressionStatement[50897-50901]:ExpressionStatement[50897-50901]"
    }, {
      "left" : "listener.onMessage(\"OK\");",
      "right" : "listener.onMessage(\"OK\");",
      "info" : "ExpressionStatement[50910-50935]:ExpressionStatement[50910-50935]"
    }, {
      "left" : "listener.onMessage(\"\\nDone. Created \" + n + \" indexes.\");",
      "right" : "listener.onMessage(\"\\nDone. Created \" + n + \" indexes.\");",
      "info" : "ExpressionStatement[50956-51013]:ExpressionStatement[50956-51013]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[51018-51066]:ExpressionStatement[51018-51066]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51074-51081]:Modifier[51074-51081]"
    }, {
      "left" : "Set<String>",
      "right" : "Set<String>",
      "info" : "ParameterizedType[51082-51093]:ParameterizedType[51082-51093]"
    }, {
      "left" : "importClustersToIndex",
      "right" : "importClustersToIndex",
      "info" : "SimpleName[51094-51115]:SimpleName[51094-51115]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51125-51136]:SimpleType[51125-51136]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[51138-51152]:SimpleType[51138-51152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51153-51540]:Block[51153-51540]"
    }, {
      "left" : "final Set<String> clustersToIndex = new HashSet<String>();",
      "right" : "final Set<String> clustersToIndex = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[51159-51217]:VariableDeclarationStatement[51159-51217]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "right" : "jsonReader.readNext(OJSONReader.BEGIN_COLLECTION);",
      "info" : "ExpressionStatement[51223-51273]:ExpressionStatement[51223-51273]"
    }, {
      "left" : "while (jsonReader.lastChar() != ']')",
      "right" : "while (jsonReader.lastChar() != ']')",
      "info" : "WhileStatement[51279-51452]:WhileStatement[51279-51452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51316-51452]:Block[51316-51452]"
    }, {
      "left" : "final String clusterToIndex = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
      "right" : "final String clusterToIndex = jsonReader.readString(OJSONReader.NEXT_IN_ARRAY);",
      "info" : "VariableDeclarationStatement[51324-51403]:VariableDeclarationStatement[51324-51403]"
    }, {
      "left" : "clustersToIndex.add(clusterToIndex);",
      "right" : "clustersToIndex.add(clusterToIndex);",
      "info" : "ExpressionStatement[51410-51446]:ExpressionStatement[51410-51446]"
    }, {
      "left" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[51458-51508]:ExpressionStatement[51458-51508]"
    }, {
      "left" : "return clustersToIndex;",
      "right" : "return clustersToIndex;",
      "info" : "ReturnStatement[51513-51536]:ReturnStatement[51513-51536]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51544-51551]:Modifier[51544-51551]"
    }, {
      "left" : "OIndexDefinition",
      "right" : "OIndexDefinition",
      "info" : "SimpleType[51552-51568]:SimpleType[51552-51568]"
    }, {
      "left" : "importIndexDefinition",
      "right" : "importIndexDefinition",
      "info" : "SimpleName[51569-51590]:SimpleName[51569-51590]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51600-51611]:SimpleType[51600-51611]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[51613-51627]:SimpleType[51613-51627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51628-53087]:Block[51628-53087]"
    }, {
      "left" : "jsonReader.readString(OJSONReader.BEGIN_OBJECT);",
      "right" : "jsonReader.readString(OJSONReader.BEGIN_OBJECT);",
      "info" : "ExpressionStatement[51634-51682]:ExpressionStatement[51634-51682]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[51687-51737]:ExpressionStatement[51687-51737]"
    }, {
      "left" : "final String className = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "final String className = jsonReader.readString(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "VariableDeclarationStatement[51743-51818]:VariableDeclarationStatement[51743-51818]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "right" : "jsonReader.readNext(OJSONReader.FIELD_ASSIGNMENT);",
      "info" : "ExpressionStatement[51824-51874]:ExpressionStatement[51824-51874]"
    }, {
      "left" : "final String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
      "right" : "final String value = jsonReader.readString(OJSONReader.END_OBJECT, true);",
      "info" : "VariableDeclarationStatement[51880-51953]:VariableDeclarationStatement[51880-51953]"
    }, {
      "left" : "final OIndexDefinition indexDefinition;",
      "right" : "final OIndexDefinition indexDefinition;",
      "info" : "VariableDeclarationStatement[51959-51998]:VariableDeclarationStatement[51959-51998]"
    }, {
      "left" : "final ODocument indexDefinitionDoc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, null, null);",
      "right" : "final ODocument indexDefinitionDoc = (ODocument) ORecordSerializerJSON.INSTANCE.fromString(value, null, null);",
      "info" : "VariableDeclarationStatement[52003-52113]:VariableDeclarationStatement[52003-52113]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52118-53000]:TryStatement[52118-53000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52122-52343]:Block[52122-52343]"
    }, {
      "left" : "final Class<?> indexDefClass = Class.forName(className);",
      "right" : "final Class<?> indexDefClass = Class.forName(className);",
      "info" : "VariableDeclarationStatement[52130-52186]:VariableDeclarationStatement[52130-52186]"
    }, {
      "left" : "indexDefinition = (OIndexDefinition) indexDefClass.getDeclaredConstructor().newInstance();",
      "right" : "indexDefinition = (OIndexDefinition) indexDefClass.getDeclaredConstructor().newInstance();",
      "info" : "ExpressionStatement[52193-52283]:ExpressionStatement[52193-52283]"
    }, {
      "left" : "indexDefinition.fromStream(indexDefinitionDoc);",
      "right" : "indexDefinition.fromStream(indexDefinitionDoc);",
      "info" : "ExpressionStatement[52290-52337]:ExpressionStatement[52290-52337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52383-52474]:Block[52383-52474]"
    }, {
      "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "info" : "ThrowStatement[52391-52468]:ThrowStatement[52391-52468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52513-52604]:Block[52513-52604]"
    }, {
      "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "info" : "ThrowStatement[52521-52598]:ThrowStatement[52521-52598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52647-52738]:Block[52647-52738]"
    }, {
      "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "info" : "ThrowStatement[52655-52732]:ThrowStatement[52655-52732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52778-52869]:Block[52778-52869]"
    }, {
      "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "info" : "ThrowStatement[52786-52863]:ThrowStatement[52786-52863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52909-53000]:Block[52909-53000]"
    }, {
      "left" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "right" : "throw new IOException(\"Error during deserialization of index definition\", e);",
      "info" : "ThrowStatement[52917-52994]:ThrowStatement[52917-52994]"
    }, {
      "left" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "right" : "jsonReader.readNext(OJSONReader.NEXT_IN_OBJECT);",
      "info" : "ExpressionStatement[53006-53054]:ExpressionStatement[53006-53054]"
    }, {
      "left" : "return indexDefinition;",
      "right" : "return indexDefinition;",
      "info" : "ReturnStatement[53060-53083]:ReturnStatement[53060-53083]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53091-53098]:Modifier[53091-53098]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53099-53103]:PrimitiveType[53099-53103]"
    }, {
      "left" : "migrateLinksInImportedDocuments",
      "right" : "migrateLinksInImportedDocuments",
      "info" : "SimpleName[53104-53135]:SimpleName[53104-53135]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[53145-53156]:SimpleType[53145-53156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53157-55433]:Block[53157-55433]"
    }, {
      "left" : "listener.onMessage(\"\\n\\nStarted migration of links (-migrateLinks=true). Links are going to be updated according to new RIDs:\");",
      "right" : "listener.onMessage(\"\\n\\nStarted migration of links (-migrateLinks=true). Links are going to be updated according to new RIDs:\");",
      "info" : "ExpressionStatement[53163-53291]:ExpressionStatement[53163-53291]"
    }, {
      "left" : "final long begin = System.currentTimeMillis();",
      "right" : "final long begin = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[53297-53343]:VariableDeclarationStatement[53297-53343]"
    }, {
      "left" : "long last = begin;",
      "right" : "long last = begin;",
      "info" : "VariableDeclarationStatement[53348-53366]:VariableDeclarationStatement[53348-53366]"
    }, {
      "left" : "long documentsLastLap = 0;",
      "right" : "long documentsLastLap = 0;",
      "info" : "VariableDeclarationStatement[53371-53397]:VariableDeclarationStatement[53371-53397]"
    }, {
      "left" : "long totalDocuments = 0;",
      "right" : "long totalDocuments = 0;",
      "info" : "VariableDeclarationStatement[53403-53427]:VariableDeclarationStatement[53403-53427]"
    }, {
      "left" : "Collection<String> clusterNames = database.getClusterNames();",
      "right" : "Collection<String> clusterNames = database.getClusterNames();",
      "info" : "VariableDeclarationStatement[53432-53493]:VariableDeclarationStatement[53432-53493]"
    }, {
      "left" : "for (String clusterName : clusterNames)",
      "right" : "for (String clusterName : clusterNames)",
      "info" : "EnhancedForStatement[53498-55343]:EnhancedForStatement[53498-55343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53538-55343]:Block[53538-55343]"
    }, {
      "left" : "if (OMetadataDefault.CLUSTER_INDEX_NAME.equals(clusterName) || OMetadataDefault.CLUSTER_INTERNAL_NAME.equals(clusterName)\n          || OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME.equals(clusterName))",
      "right" : "if (OMetadataDefault.CLUSTER_INDEX_NAME.equals(clusterName) || OMetadataDefault.CLUSTER_INTERNAL_NAME.equals(clusterName)\n          || OMetadataDefault.CLUSTER_MANUAL_INDEX_NAME.equals(clusterName))",
      "info" : "IfStatement[53546-53762]:IfStatement[53546-53762]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53753-53762]:ContinueStatement[53753-53762]"
    }, {
      "left" : "long documents = 0;",
      "right" : "long documents = 0;",
      "info" : "VariableDeclarationStatement[53770-53789]:VariableDeclarationStatement[53770-53789]"
    }, {
      "left" : "String prefix = \"\";",
      "right" : "String prefix = \"\";",
      "info" : "VariableDeclarationStatement[53796-53815]:VariableDeclarationStatement[53796-53815]"
    }, {
      "left" : "listener.onMessage(\"\\n- Cluster \" + clusterName + \"...\");",
      "right" : "listener.onMessage(\"\\n- Cluster \" + clusterName + \"...\");",
      "info" : "ExpressionStatement[53823-53880]:ExpressionStatement[53823-53880]"
    }, {
      "left" : "final int clusterId = database.getClusterIdByName(clusterName);",
      "right" : "final int clusterId = database.getClusterIdByName(clusterName);",
      "info" : "VariableDeclarationStatement[53888-53951]:VariableDeclarationStatement[53888-53951]"
    }, {
      "left" : "final long clusterRecords = database.countClusterElements(clusterId);",
      "right" : "final long clusterRecords = database.countClusterElements(clusterId);",
      "info" : "VariableDeclarationStatement[53958-54027]:VariableDeclarationStatement[53958-54027]"
    }, {
      "left" : "OStorage storage = database.getStorage();",
      "right" : "OStorage storage = database.getStorage();",
      "info" : "VariableDeclarationStatement[54034-54075]:VariableDeclarationStatement[54034-54075]"
    }, {
      "left" : "OPhysicalPosition[] positions = storage.ceilingPhysicalPositions(clusterId, new OPhysicalPosition(0));",
      "right" : "OPhysicalPosition[] positions = storage.ceilingPhysicalPositions(clusterId, new OPhysicalPosition(0));",
      "info" : "VariableDeclarationStatement[54083-54185]:VariableDeclarationStatement[54083-54185]"
    }, {
      "left" : "while (positions.length > 0)",
      "right" : "while (positions.length > 0)",
      "info" : "WhileStatement[54192-55216]:WhileStatement[54192-55216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54221-55216]:Block[54221-55216]"
    }, {
      "left" : "for (OPhysicalPosition position : positions)",
      "right" : "for (OPhysicalPosition position : positions)",
      "info" : "EnhancedForStatement[54231-55110]:EnhancedForStatement[54231-55110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54276-55110]:Block[54276-55110]"
    }, {
      "left" : "ORecord record = database.load(new ORecordId(clusterId, position.clusterPosition));",
      "right" : "ORecord record = database.load(new ORecordId(clusterId, position.clusterPosition));",
      "info" : "VariableDeclarationStatement[54288-54371]:VariableDeclarationStatement[54288-54371]"
    }, {
      "left" : "if (record instanceof ODocument)",
      "right" : "if (record instanceof ODocument)",
      "info" : "IfStatement[54382-55100]:IfStatement[54382-55100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54415-55100]:Block[54415-55100]"
    }, {
      "left" : "ODocument document = (ODocument) record;",
      "right" : "ODocument document = (ODocument) record;",
      "info" : "VariableDeclarationStatement[54429-54469]:VariableDeclarationStatement[54429-54469]"
    }, {
      "left" : "rewriteLinksInDocument(document);",
      "right" : "rewriteLinksInDocument(document);",
      "info" : "ExpressionStatement[54482-54515]:ExpressionStatement[54482-54515]"
    }, {
      "left" : "documents++;",
      "right" : "documents++;",
      "info" : "ExpressionStatement[54529-54541]:ExpressionStatement[54529-54541]"
    }, {
      "left" : "documentsLastLap++;",
      "right" : "documentsLastLap++;",
      "info" : "ExpressionStatement[54554-54573]:ExpressionStatement[54554-54573]"
    }, {
      "left" : "totalDocuments++;",
      "right" : "totalDocuments++;",
      "info" : "ExpressionStatement[54586-54603]:ExpressionStatement[54586-54603]"
    }, {
      "left" : "final long now = System.currentTimeMillis();",
      "right" : "final long now = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[54617-54661]:VariableDeclarationStatement[54617-54661]"
    }, {
      "left" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
      "right" : "if (now - last > IMPORT_RECORD_DUMP_LAP_EVERY_MS)",
      "info" : "IfStatement[54674-55088]:IfStatement[54674-55088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54724-55088]:Block[54724-55088]"
    }, {
      "left" : "listener.onMessage(String.format(\"\\n--- Migrated %,d of %,d records (%,.2f/sec)\", documents, clusterRecords,\n                  (float) documentsLastLap * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
      "right" : "listener.onMessage(String.format(\"\\n--- Migrated %,d of %,d records (%,.2f/sec)\", documents, clusterRecords,\n                  (float) documentsLastLap * 1000 / (float) IMPORT_RECORD_DUMP_LAP_EVERY_MS));",
      "info" : "ExpressionStatement[54740-54943]:ExpressionStatement[54740-54943]"
    }, {
      "left" : "last = now;",
      "right" : "last = now;",
      "info" : "ExpressionStatement[54995-55006]:ExpressionStatement[54995-55006]"
    }, {
      "left" : "documentsLastLap = 0;",
      "right" : "documentsLastLap = 0;",
      "info" : "ExpressionStatement[55021-55042]:ExpressionStatement[55021-55042]"
    }, {
      "left" : "prefix = \"\\n---\";",
      "right" : "prefix = \"\\n---\";",
      "info" : "ExpressionStatement[55057-55074]:ExpressionStatement[55057-55074]"
    }, {
      "left" : "positions = storage.higherPhysicalPositions(clusterId, positions[positions.length - 1]);",
      "right" : "positions = storage.higherPhysicalPositions(clusterId, positions[positions.length - 1]);",
      "info" : "ExpressionStatement[55120-55208]:ExpressionStatement[55120-55208]"
    }, {
      "left" : "listener.onMessage(String.format(\"%s Completed migration of %,d records in current cluster\", prefix, documents));",
      "right" : "listener.onMessage(String.format(\"%s Completed migration of %,d records in current cluster\", prefix, documents));",
      "info" : "ExpressionStatement[55224-55337]:ExpressionStatement[55224-55337]"
    }, {
      "left" : "listener.onMessage(String.format(\"\\nTotal links updated: %,d\", totalDocuments));",
      "right" : "listener.onMessage(String.format(\"\\nTotal links updated: %,d\", totalDocuments));",
      "info" : "ExpressionStatement[55349-55429]:ExpressionStatement[55349-55429]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55437-55444]:Modifier[55437-55444]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55445-55449]:PrimitiveType[55445-55449]"
    }, {
      "left" : "rewriteLinksInDocument",
      "right" : "rewriteLinksInDocument",
      "info" : "SimpleName[55450-55472]:SimpleName[55450-55472]"
    }, {
      "left" : "ODocument document",
      "right" : "ODocument document",
      "info" : "SingleVariableDeclaration[55473-55491]:SingleVariableDeclaration[55473-55491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55493-55790]:Block[55493-55580]"
    }, {
      "left" : "LinkConverter.INSTANCE.setExportImportHashTable(exportImportHashTable);",
      "right" : "LinkConverter.INSTANCE.setExportImportHashTable(rewrite);",
      "info" : "ExpressionStatement[55499-55570]:ExpressionStatement[55686-55743]"
    }, {
      "left" : "exportImportHashTable",
      "right" : "exportImportHashTable",
      "info" : "SimpleName[55547-55568]:SimpleName[55532-55553]"
    }, {
      "left" : "final LinksRewriter rewriter = new LinksRewriter();",
      "right" : "final LinksRewriter rewriter = new LinksRewriter();",
      "info" : "VariableDeclarationStatement[55575-55626]:VariableDeclarationStatement[55748-55799]"
    }, {
      "left" : "final ODocumentFieldWalker documentFieldWalker = new ODocumentFieldWalker();",
      "right" : "final ODocumentFieldWalker documentFieldWalker = new ODocumentFieldWalker();",
      "info" : "VariableDeclarationStatement[55631-55707]:VariableDeclarationStatement[55804-55880]"
    }, {
      "left" : "documentFieldWalker.walkDocument(document, rewriter);",
      "right" : "documentFieldWalker.walkDocument(document, rewriter);",
      "info" : "ExpressionStatement[55712-55765]:ExpressionStatement[55885-55938]"
    }, {
      "left" : "document.save();",
      "right" : "document.save();",
      "info" : "ExpressionStatement[55770-55786]:ExpressionStatement[55560-55576]"
    } ]
  },
  "interFileMappings" : { }
}