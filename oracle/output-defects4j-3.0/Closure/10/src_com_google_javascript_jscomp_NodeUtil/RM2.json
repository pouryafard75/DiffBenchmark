{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "TypeDeclaration[1540-95394]:TypeDeclaration[1540-95394]"
    }, {
      "left" : "static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);",
      "right" : "static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);",
      "info" : "FieldDeclaration[1637-1708]:FieldDeclaration[1637-1708]"
    }, {
      "left" : "static final String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "right" : "static final String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "info" : "FieldDeclaration[1712-1783]:FieldDeclaration[1712-1783]"
    }, {
      "left" : "static final char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "static final char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "FieldDeclaration[1787-1832]:FieldDeclaration[1787-1832]"
    }, {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1836-2130]:FieldDeclaration[1836-2130]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[2174-2195]:MethodDeclaration[2174-2195]"
    }, {
      "left" : "static TernaryValue getImpureBooleanValue(Node n)",
      "right" : "static TernaryValue getImpureBooleanValue(Node n)",
      "info" : "MethodDeclaration[2199-3838]:MethodDeclaration[2199-3838]"
    }, {
      "left" : "static TernaryValue getPureBooleanValue(Node n)",
      "right" : "static TernaryValue getPureBooleanValue(Node n)",
      "info" : "MethodDeclaration[3842-5418]:MethodDeclaration[3842-5418]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[5422-6708]:MethodDeclaration[5422-6708]"
    }, {
      "left" : "static String getStringValue(double value)",
      "right" : "static String getStringValue(double value)",
      "info" : "MethodDeclaration[6712-6956]:MethodDeclaration[6712-6956]"
    }, {
      "left" : "static String getArrayElementStringValue(Node n)",
      "right" : "static String getArrayElementStringValue(Node n)",
      "info" : "MethodDeclaration[6960-7482]:MethodDeclaration[6960-7482]"
    }, {
      "left" : "static String arrayToString(Node literal)",
      "right" : "static String arrayToString(Node literal)",
      "info" : "MethodDeclaration[7486-7992]:MethodDeclaration[7486-7992]"
    }, {
      "left" : "static Double getNumberValue(Node n)",
      "right" : "static Double getNumberValue(Node n)",
      "info" : "MethodDeclaration[7996-9694]:MethodDeclaration[7996-9694]"
    }, {
      "left" : "static Double getStringNumberValue(String rawJsString)",
      "right" : "static Double getStringNumberValue(String rawJsString)",
      "info" : "MethodDeclaration[9698-10968]:MethodDeclaration[9698-10968]"
    }, {
      "left" : "static String trimJsWhiteSpace(String s)",
      "right" : "static String trimJsWhiteSpace(String s)",
      "info" : "MethodDeclaration[10972-11327]:MethodDeclaration[10972-11327]"
    }, {
      "left" : "public static TernaryValue isStrWhiteSpaceChar(int c)",
      "right" : "public static TernaryValue isStrWhiteSpaceChar(int c)",
      "info" : "MethodDeclaration[11331-11988]:MethodDeclaration[11331-11988]"
    }, {
      "left" : "static String getFunctionName(Node n)",
      "right" : "static String getFunctionName(Node n)",
      "info" : "MethodDeclaration[11992-13216]:MethodDeclaration[11992-13216]"
    }, {
      "left" : "public static String getNearestFunctionName(Node n)",
      "right" : "public static String getNearestFunctionName(Node n)",
      "info" : "MethodDeclaration[13220-14394]:MethodDeclaration[13220-14394]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[14399-15187]:MethodDeclaration[14399-15187]"
    }, {
      "left" : "static boolean isSymmetricOperation(Node n)",
      "right" : "static boolean isSymmetricOperation(Node n)",
      "info" : "MethodDeclaration[15191-15683]:MethodDeclaration[15191-15683]"
    }, {
      "left" : "static boolean isRelationalOperation(Node n)",
      "right" : "static boolean isRelationalOperation(Node n)",
      "info" : "MethodDeclaration[15687-16082]:MethodDeclaration[15687-16082]"
    }, {
      "left" : "static int getInverseOperator(int type)",
      "right" : "static int getInverseOperator(int type)",
      "info" : "MethodDeclaration[16086-16459]:MethodDeclaration[16086-16459]"
    }, {
      "left" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "right" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "info" : "MethodDeclaration[16463-18527]:MethodDeclaration[16463-18527]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[18531-20020]:MethodDeclaration[18531-20020]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[20024-20376]:MethodDeclaration[20024-20376]"
    }, {
      "left" : "static boolean isSimpleOperator(Node n)",
      "right" : "static boolean isSimpleOperator(Node n)",
      "info" : "MethodDeclaration[20380-20471]:MethodDeclaration[20380-20471]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[20475-21452]:MethodDeclaration[20475-21452]"
    }, {
      "left" : "static Node newExpr(Node child)",
      "right" : "static Node newExpr(Node child)",
      "info" : "MethodDeclaration[21456-21697]:MethodDeclaration[21456-21697]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[21701-21964]:MethodDeclaration[21701-21964]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[21968-22102]:MethodDeclaration[21968-22102]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[22106-22278]:MethodDeclaration[22106-22278]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[22282-22414]:MethodDeclaration[22282-22414]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[22418-27283]:MethodDeclaration[22418-27283]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[27287-27525]:MethodDeclaration[27287-27525]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "right" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[27529-28038]:MethodDeclaration[27529-28038]"
    }, {
      "left" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "right" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "info" : "FieldDeclaration[28251-28426]:FieldDeclaration[28251-28426]"
    }, {
      "left" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "right" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "info" : "FieldDeclaration[28429-28544]:FieldDeclaration[28429-28544]"
    }, {
      "left" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "right" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "info" : "FieldDeclaration[28547-28635]:FieldDeclaration[28547-28635]"
    }, {
      "left" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "right" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "info" : "FieldDeclaration[28638-28756]:FieldDeclaration[28638-28756]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[28760-28999]:MethodDeclaration[28760-28999]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "right" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "info" : "MethodDeclaration[29003-31110]:MethodDeclaration[29003-31110]"
    }, {
      "left" : "static boolean callHasLocalResult(Node n)",
      "right" : "static boolean callHasLocalResult(Node n)",
      "info" : "MethodDeclaration[31114-31332]:MethodDeclaration[31114-31332]"
    }, {
      "left" : "static boolean newHasLocalResult(Node n)",
      "right" : "static boolean newHasLocalResult(Node n)",
      "info" : "MethodDeclaration[31336-31523]:MethodDeclaration[31336-31523]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[31527-31899]:MethodDeclaration[31527-31899]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[31903-32491]:MethodDeclaration[31903-32491]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[32495-32735]:MethodDeclaration[32495-32735]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "right" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "info" : "MethodDeclaration[32739-34074]:MethodDeclaration[32739-34074]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[34511-36550]:MethodDeclaration[34511-36550]"
    }, {
      "left" : "static boolean isUndefined(Node n)",
      "right" : "static boolean isUndefined(Node n)",
      "info" : "MethodDeclaration[36554-36762]:MethodDeclaration[36554-36762]"
    }, {
      "left" : "static boolean isNullOrUndefined(Node n)",
      "right" : "static boolean isNullOrUndefined(Node n)",
      "info" : "MethodDeclaration[36766-36853]:MethodDeclaration[36766-36853]"
    }, {
      "left" : "static boolean allResultsMatch(Node n, Predicate<Node> p)",
      "right" : "static boolean allResultsMatch(Node n, Predicate<Node> p)",
      "info" : "MethodDeclaration[36857-37489]:MethodDeclaration[36857-37489]"
    }, {
      "left" : "static boolean anyResultsMatch(Node n, Predicate<Node> p)",
      "right" : "static boolean anyResultsMatch(Node n, Predicate<Node> p)",
      "info" : "MethodDeclaration[37493-38125]:MethodDeclaration[37493-38125]"
    }, {
      "left" : "NumbericResultPredicate",
      "right" : "NumbericResultPredicate",
      "info" : "TypeDeclaration[38129-38292]:TypeDeclaration[38129-38292]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[38199-38288]:MethodDeclaration[38199-38288]"
    }, {
      "left" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "right" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "info" : "FieldDeclaration[38296-38397]:FieldDeclaration[38296-38397]"
    }, {
      "left" : "static boolean isNumericResult(Node n)",
      "right" : "static boolean isNumericResult(Node n)",
      "info" : "MethodDeclaration[38401-38585]:MethodDeclaration[38401-38585]"
    }, {
      "left" : "static boolean isNumericResultHelper(Node n)",
      "right" : "static boolean isNumericResultHelper(Node n)",
      "info" : "MethodDeclaration[38589-39434]:MethodDeclaration[38589-39434]"
    }, {
      "left" : "BooleanResultPredicate",
      "right" : "BooleanResultPredicate",
      "info" : "TypeDeclaration[39438-39600]:TypeDeclaration[39438-39600]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[39507-39596]:MethodDeclaration[39507-39596]"
    }, {
      "left" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "right" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "info" : "FieldDeclaration[39604-39702]:FieldDeclaration[39604-39702]"
    }, {
      "left" : "static boolean isBooleanResult(Node n)",
      "right" : "static boolean isBooleanResult(Node n)",
      "info" : "MethodDeclaration[39706-39890]:MethodDeclaration[39706-39890]"
    }, {
      "left" : "static boolean isBooleanResultHelper(Node n)",
      "right" : "static boolean isBooleanResultHelper(Node n)",
      "info" : "MethodDeclaration[39894-40473]:MethodDeclaration[39894-40473]"
    }, {
      "left" : "MayBeStringResultPredicate",
      "right" : "MayBeStringResultPredicate",
      "info" : "TypeDeclaration[40479-40641]:TypeDeclaration[40479-40641]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[40552-40637]:MethodDeclaration[40552-40637]"
    }, {
      "left" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "right" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "info" : "FieldDeclaration[40645-40750]:FieldDeclaration[40645-40750]"
    }, {
      "left" : "static boolean mayBeString(Node n)",
      "right" : "static boolean mayBeString(Node n)",
      "info" : "MethodDeclaration[40754-40895]:MethodDeclaration[40754-40895]"
    }, {
      "left" : "static boolean mayBeString(Node n, boolean recurse)",
      "right" : "static boolean mayBeString(Node n, boolean recurse)",
      "info" : "MethodDeclaration[40899-41087]:MethodDeclaration[40899-41087]"
    }, {
      "left" : "static boolean mayBeStringHelper(Node n)",
      "right" : "static boolean mayBeStringHelper(Node n)",
      "info" : "MethodDeclaration[41091-41234]:MethodDeclaration[41091-41234]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[41238-41730]:MethodDeclaration[41238-41730]"
    }, {
      "left" : "static boolean isCommutative(int type)",
      "right" : "static boolean isCommutative(int type)",
      "info" : "MethodDeclaration[41734-42262]:MethodDeclaration[41734-42262]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[42266-42733]:MethodDeclaration[42266-42733]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[42737-43507]:MethodDeclaration[42737-43507]"
    }, {
      "left" : "static boolean containsFunction(Node n)",
      "right" : "static boolean containsFunction(Node n)",
      "info" : "MethodDeclaration[43511-43705]:MethodDeclaration[43511-43705]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[43709-43963]:MethodDeclaration[43709-43963]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[43967-44096]:MethodDeclaration[43967-44096]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[44100-44479]:MethodDeclaration[44100-44479]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[44483-44928]:MethodDeclaration[44483-44928]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[44932-45229]:MethodDeclaration[44932-45229]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[45233-45517]:MethodDeclaration[45233-45517]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[45521-45681]:MethodDeclaration[45521-45681]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[45685-45967]:MethodDeclaration[45685-45967]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[45971-46374]:MethodDeclaration[45971-46374]"
    }, {
      "left" : "static boolean isWithinLoop(Node n)",
      "right" : "static boolean isWithinLoop(Node n)",
      "info" : "MethodDeclaration[46378-46727]:MethodDeclaration[46378-46727]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[46731-47219]:MethodDeclaration[46731-47219]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[47223-48109]:MethodDeclaration[47223-48109]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[48113-48913]:MethodDeclaration[48113-48913]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[48917-49088]:MethodDeclaration[48917-49088]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[49092-49243]:MethodDeclaration[49092-49243]"
    }, {
      "left" : "static boolean isStatementParent(Node parent)",
      "right" : "static boolean isStatementParent(Node parent)",
      "info" : "MethodDeclaration[49247-49708]:MethodDeclaration[49247-49708]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[49712-49854]:MethodDeclaration[49712-49854]"
    }, {
      "left" : "static boolean isReferenceName(Node n)",
      "right" : "static boolean isReferenceName(Node n)",
      "info" : "MethodDeclaration[49858-50118]:MethodDeclaration[49858-50118]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[50122-50347]:MethodDeclaration[50122-50347]"
    }, {
      "left" : "static boolean isTryCatchNodeContainer(Node n)",
      "right" : "static boolean isTryCatchNodeContainer(Node n)",
      "info" : "MethodDeclaration[50351-50566]:MethodDeclaration[50351-50566]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[50570-52950]:MethodDeclaration[50570-52950]"
    }, {
      "left" : "static void maybeAddFinally(Node tryNode)",
      "right" : "static void maybeAddFinally(Node tryNode)",
      "info" : "MethodDeclaration[52954-53216]:MethodDeclaration[52954-53216]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[53220-53894]:MethodDeclaration[53220-53894]"
    }, {
      "left" : "static boolean isCallOrNew(Node node)",
      "right" : "static boolean isCallOrNew(Node node)",
      "info" : "MethodDeclaration[53898-54072]:MethodDeclaration[53898-54072]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[54076-54264]:MethodDeclaration[54076-54264]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[54268-54602]:MethodDeclaration[54268-54602]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[54606-54978]:MethodDeclaration[54606-54978]"
    }, {
      "left" : "static boolean isFunctionExpression(Node n)",
      "right" : "static boolean isFunctionExpression(Node n)",
      "info" : "MethodDeclaration[54982-55733]:MethodDeclaration[54982-55733]"
    }, {
      "left" : "static boolean isBleedingFunctionName(Node n)",
      "right" : "static boolean isBleedingFunctionName(Node n)",
      "info" : "MethodDeclaration[55737-56016]:MethodDeclaration[55737-56016]"
    }, {
      "left" : "static boolean isEmptyFunctionExpression(Node node)",
      "right" : "static boolean isEmptyFunctionExpression(Node node)",
      "info" : "MethodDeclaration[56020-56344]:MethodDeclaration[56020-56344]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[56348-56759]:MethodDeclaration[56348-56759]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[56763-57336]:MethodDeclaration[56763-57336]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[57341-57576]:MethodDeclaration[57341-57576]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[57580-57819]:MethodDeclaration[57580-57819]"
    }, {
      "left" : "static boolean isVarOrSimpleAssignLhs(Node n, Node parent)",
      "right" : "static boolean isVarOrSimpleAssignLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[57823-58328]:MethodDeclaration[57823-58328]"
    }, {
      "left" : "public static boolean isLValue(Node n)",
      "right" : "public static boolean isLValue(Node n)",
      "info" : "MethodDeclaration[58332-59429]:MethodDeclaration[58332-59429]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[59433-59846]:MethodDeclaration[59433-59846]"
    }, {
      "left" : "static String getObjectLitKeyName(Node key)",
      "right" : "static String getObjectLitKeyName(Node key)",
      "info" : "MethodDeclaration[59850-60206]:MethodDeclaration[59850-60206]"
    }, {
      "left" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "right" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "info" : "MethodDeclaration[60210-61245]:MethodDeclaration[60210-61245]"
    }, {
      "left" : "static boolean isGetOrSetKey(Node node)",
      "right" : "static boolean isGetOrSetKey(Node node)",
      "info" : "MethodDeclaration[61249-61594]:MethodDeclaration[61249-61594]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[61598-63511]:MethodDeclaration[61598-63511]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[63515-64018]:MethodDeclaration[63515-64018]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[64022-64327]:MethodDeclaration[64022-64327]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[64331-64537]:MethodDeclaration[64331-64537]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[64542-65221]:MethodDeclaration[64542-65221]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[65225-65526]:MethodDeclaration[65225-65526]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[65530-66308]:MethodDeclaration[65530-66308]"
    }, {
      "left" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name)",
      "right" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name)",
      "info" : "MethodDeclaration[66312-67224]:MethodDeclaration[66312-67224]"
    }, {
      "left" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[67228-68014]:MethodDeclaration[67228-68014]"
    }, {
      "left" : "static Node getRootOfQualifiedName(Node qName)",
      "right" : "static Node getRootOfQualifiedName(Node qName)",
      "info" : "MethodDeclaration[68018-68380]:MethodDeclaration[68018-68380]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[68384-68916]:MethodDeclaration[68384-68916]"
    }, {
      "left" : "private static Node newName(\n      CodingConvention convention, String name)",
      "right" : "private static Node newName(\n      CodingConvention convention, String name)",
      "info" : "MethodDeclaration[68920-69163]:MethodDeclaration[68920-69163]"
    }, {
      "left" : "static Node newName(CodingConvention convention, String name, Node srcref)",
      "right" : "static Node newName(CodingConvention convention, String name, Node srcref)",
      "info" : "MethodDeclaration[69167-69623]:MethodDeclaration[69167-69623]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "right" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "info" : "MethodDeclaration[69627-70396]:MethodDeclaration[69627-70396]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[70400-71229]:MethodDeclaration[70400-71229]"
    }, {
      "left" : "static boolean isValidSimpleName(String name)",
      "right" : "static boolean isValidSimpleName(String name)",
      "info" : "MethodDeclaration[71233-71817]:MethodDeclaration[71233-71817]"
    }, {
      "left" : "// TODO(nicksantos): This should be moved into a \"Language\" API,\n  // so that the results are different for es5 and es3.\n  public static boolean isValidQualifiedName(String name)",
      "right" : "// TODO(nicksantos): This should be moved into a \"Language\" API,\n  // so that the results are different for es5 and es3.\n  public static boolean isValidQualifiedName(String name)",
      "info" : "MethodDeclaration[71821-72326]:MethodDeclaration[71821-72326]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[72330-72571]:MethodDeclaration[72330-72571]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[72575-72996]:TypeDeclaration[72575-72996]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[72634-72689]:FieldDeclaration[72634-72689]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[72695-72992]:MethodDeclaration[72695-72992]"
    }, {
      "left" : "static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[73000-73323]:MethodDeclaration[73000-73323]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[73327-73625]:MethodDeclaration[73327-73625]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[73629-73950]:MethodDeclaration[73629-73950]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[73954-74314]:MethodDeclaration[73954-74314]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[74318-74676]:MethodDeclaration[74318-74676]"
    }, {
      "left" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "right" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "info" : "MethodDeclaration[74680-74977]:MethodDeclaration[74680-74977]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[74981-75383]:MethodDeclaration[74981-75383]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[75387-75728]:TypeDeclaration[75387-75728]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[75532-75550]:FieldDeclaration[75532-75550]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[75556-75613]:MethodDeclaration[75556-75613]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75619-75724]:MethodDeclaration[75619-75724]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[75732-76033]:TypeDeclaration[75732-76033]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[75864-75879]:FieldDeclaration[75864-75879]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[75885-75939]:MethodDeclaration[75885-75939]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75945-76029]:MethodDeclaration[75945-76029]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "TypeDeclaration[76038-76279]:TypeDeclaration[76038-76279]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76173-76275]:MethodDeclaration[76173-76275]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "TypeDeclaration[76283-76511]:TypeDeclaration[76283-76511]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76427-76507]:MethodDeclaration[76427-76507]"
    }, {
      "left" : "static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
      "right" : "static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
      "info" : "FieldDeclaration[76515-76588]:FieldDeclaration[76515-76588]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "TypeDeclaration[76592-76999]:TypeDeclaration[76592-76999]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76747-76995]:MethodDeclaration[76747-76995]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[77003-77271]:MethodDeclaration[77003-77271]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[77275-77586]:MethodDeclaration[77275-77586]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[77590-77798]:MethodDeclaration[77590-77798]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[77802-78049]:MethodDeclaration[77802-78049]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78053-78580]:MethodDeclaration[78053-78580]"
    }, {
      "left" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78584-79065]:MethodDeclaration[78584-79065]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[79069-79201]:TypeDeclaration[79069-79201]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[79175-79197]:MethodDeclaration[79175-79197]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor visitor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor visitor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[79205-79663]:MethodDeclaration[79205-79663]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor visitor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor visitor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[79667-80128]:MethodDeclaration[79667-80128]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[80132-80315]:MethodDeclaration[80132-80315]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[80319-80532]:MethodDeclaration[80319-80532]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[80536-80793]:MethodDeclaration[80536-80793]"
    }, {
      "left" : "public static Node getFunctionParameters(Node fnNode)",
      "right" : "public static Node getFunctionParameters(Node fnNode)",
      "info" : "MethodDeclaration[80797-81127]:MethodDeclaration[80797-81127]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[81131-81934]:MethodDeclaration[81131-81934]"
    }, {
      "left" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "right" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "info" : "MethodDeclaration[81938-82412]:MethodDeclaration[81938-82412]"
    }, {
      "left" : "public static JSDocInfo getFunctionJSDocInfo(Node n)",
      "right" : "public static JSDocInfo getFunctionJSDocInfo(Node n)",
      "info" : "MethodDeclaration[82416-83011]:MethodDeclaration[82416-83011]"
    }, {
      "left" : "public static String getSourceName(Node n)",
      "right" : "public static String getSourceName(Node n)",
      "info" : "MethodDeclaration[83015-83339]:MethodDeclaration[83015-83339]"
    }, {
      "left" : "public static StaticSourceFile getSourceFile(Node n)",
      "right" : "public static StaticSourceFile getSourceFile(Node n)",
      "info" : "MethodDeclaration[83343-83689]:MethodDeclaration[83343-83689]"
    }, {
      "left" : "public static InputId getInputId(Node n)",
      "right" : "public static InputId getInputId(Node n)",
      "info" : "MethodDeclaration[83693-83976]:MethodDeclaration[83693-83976]"
    }, {
      "left" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "right" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "info" : "MethodDeclaration[83980-84362]:MethodDeclaration[83980-84362]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value)",
      "right" : "static boolean evaluatesToLocalValue(Node value)",
      "info" : "MethodDeclaration[84366-84597]:MethodDeclaration[84366-84597]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "right" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "info" : "MethodDeclaration[84601-87290]:MethodDeclaration[84601-87290]"
    }, {
      "left" : "private static Node getNthSibling(Node first, int index)",
      "right" : "private static Node getNthSibling(Node first, int index)",
      "info" : "MethodDeclaration[87294-87692]:MethodDeclaration[87294-87692]"
    }, {
      "left" : "static Node getArgumentForFunction(Node function, int index)",
      "right" : "static Node getArgumentForFunction(Node function, int index)",
      "info" : "MethodDeclaration[87696-88018]:MethodDeclaration[87696-88018]"
    }, {
      "left" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "right" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "info" : "MethodDeclaration[88022-88329]:MethodDeclaration[88022-88329]"
    }, {
      "left" : "private static boolean isToStringMethodCall(Node call)",
      "right" : "private static boolean isToStringMethodCall(Node call)",
      "info" : "MethodDeclaration[88333-88607]:MethodDeclaration[88333-88607]"
    }, {
      "left" : "static JSDocInfo getBestJSDocInfo(Node n)",
      "right" : "static JSDocInfo getBestJSDocInfo(Node n)",
      "info" : "MethodDeclaration[88611-89565]:MethodDeclaration[88611-89565]"
    }, {
      "left" : "static Node getBestLValue(Node n)",
      "right" : "static Node getBestLValue(Node n)",
      "info" : "MethodDeclaration[89569-90296]:MethodDeclaration[89569-90296]"
    }, {
      "left" : "static Node getRValueOfLValue(Node n)",
      "right" : "static Node getRValueOfLValue(Node n)",
      "info" : "MethodDeclaration[90300-90653]:MethodDeclaration[90300-90653]"
    }, {
      "left" : "static Node getBestLValueOwner(@Nullable Node lValue)",
      "right" : "static Node getBestLValueOwner(@Nullable Node lValue)",
      "info" : "MethodDeclaration[90657-91042]:MethodDeclaration[90657-91042]"
    }, {
      "left" : "static String getBestLValueName(@Nullable Node lValue)",
      "right" : "static String getBestLValueName(@Nullable Node lValue)",
      "info" : "MethodDeclaration[91046-91602]:MethodDeclaration[91046-91602]"
    }, {
      "left" : "static boolean isExpressionResultUsed(Node expr)",
      "right" : "static boolean isExpressionResultUsed(Node expr)",
      "info" : "MethodDeclaration[91606-93185]:MethodDeclaration[91606-93185]"
    }, {
      "left" : "static boolean isExecutedExactlyOnce(Node n)",
      "right" : "static boolean isExecutedExactlyOnce(Node n)",
      "info" : "MethodDeclaration[93189-94692]:MethodDeclaration[93189-94692]"
    }, {
      "left" : "static Node booleanNode(boolean value)",
      "right" : "static Node booleanNode(boolean value)",
      "info" : "MethodDeclaration[94696-94863]:MethodDeclaration[94696-94863]"
    }, {
      "left" : "static Node numberNode(double value, Node srcref)",
      "right" : "static Node numberNode(double value, Node srcref)",
      "info" : "MethodDeclaration[94867-95392]:MethodDeclaration[94867-95392]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1604-1610]:Modifier[1604-1610]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1617-1622]:TYPE_DECLARATION_KIND[1617-1622]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1623-1631]:SimpleName[1623-1631]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2174-2181]:Modifier[2174-2181]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[2182-2190]:SimpleName[2182-2190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2193-2195]:Block[2193-2195]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2482-2488]:Modifier[2482-2488]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[2489-2501]:SimpleType[2489-2501]"
    }, {
      "left" : "getImpureBooleanValue",
      "right" : "getImpureBooleanValue",
      "info" : "SimpleName[2502-2523]:SimpleName[2502-2523]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2524-2530]:SingleVariableDeclaration[2524-2530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2532-3838]:Block[2532-3838]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
      "info" : "SwitchStatement[2538-3834]:SwitchStatement[2538-3834]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[2567-2585]:SwitchCase[2567-2585]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[2592-2609]:SwitchCase[2592-2609]"
    }, {
      "left" : "return getImpureBooleanValue(n.getLastChild());",
      "right" : "return getImpureBooleanValue(n.getLastChild());",
      "info" : "ReturnStatement[2685-2732]:ReturnStatement[2685-2732]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2739-2754]:SwitchCase[2739-2754]"
    }, {
      "left" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2763-2824]:VariableDeclarationStatement[2763-2824]"
    }, {
      "left" : "return value.not();",
      "right" : "return value.not();",
      "info" : "ReturnStatement[2833-2852]:ReturnStatement[2833-2852]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[2859-2874]:SwitchCase[2859-2874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2875-3050]:Block[2875-3050]"
    }, {
      "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2885-2945]:VariableDeclarationStatement[2885-2945]"
    }, {
      "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2954-3013]:VariableDeclarationStatement[2954-3013]"
    }, {
      "left" : "return lhs.and(rhs);",
      "right" : "return lhs.and(rhs);",
      "info" : "ReturnStatement[3022-3042]:ReturnStatement[3022-3042]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3057-3071]:SwitchCase[3057-3071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3073-3247]:Block[3073-3247]"
    }, {
      "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[3083-3143]:VariableDeclarationStatement[3083-3143]"
    }, {
      "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3152-3211]:VariableDeclarationStatement[3152-3211]"
    }, {
      "left" : "return lhs.or(rhs);",
      "right" : "return lhs.or(rhs);",
      "info" : "ReturnStatement[3220-3239]:ReturnStatement[3220-3239]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[3254-3270]:SwitchCase[3254-3270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3272-3592]:Block[3272-3592]"
    }, {
      "left" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
      "right" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
      "info" : "VariableDeclarationStatement[3282-3371]:VariableDeclarationStatement[3282-3371]"
    }, {
      "left" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3380-3446]:VariableDeclarationStatement[3380-3446]"
    }, {
      "left" : "if (trueValue.equals(falseValue))",
      "right" : "if (trueValue.equals(falseValue))",
      "info" : "IfStatement[3455-3584]:IfStatement[3455-3584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3489-3528]:Block[3489-3528]"
    }, {
      "left" : "return trueValue;",
      "right" : "return trueValue;",
      "info" : "ReturnStatement[3501-3518]:ReturnStatement[3501-3518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3534-3584]:Block[3534-3584]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[3546-3574]:ReturnStatement[3546-3574]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[3599-3619]:SwitchCase[3599-3619]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[3626-3647]:SwitchCase[3626-3647]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[3689-3714]:ReturnStatement[3689-3714]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[3722-3738]:SwitchCase[3722-3738]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[3747-3773]:ReturnStatement[3747-3773]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3781-3789]:SwitchCase[3781-3789]"
    }, {
      "left" : "return getPureBooleanValue(n);",
      "right" : "return getPureBooleanValue(n);",
      "info" : "ReturnStatement[3798-3828]:ReturnStatement[3798-3828]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4148-4154]:Modifier[4148-4154]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[4155-4167]:SimpleType[4155-4167]"
    }, {
      "left" : "getPureBooleanValue",
      "right" : "getPureBooleanValue",
      "info" : "SimpleName[4168-4187]:SimpleName[4168-4187]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4188-4194]:SingleVariableDeclaration[4188-4194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4196-5418]:Block[4196-5418]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }",
      "info" : "SwitchStatement[4202-5380]:SwitchStatement[4202-5380]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[4231-4249]:SwitchCase[4231-4249]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "info" : "ReturnStatement[4258-4317]:ReturnStatement[4258-4317]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[4325-4343]:SwitchCase[4325-4343]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "info" : "ReturnStatement[4352-4403]:ReturnStatement[4352-4403]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[4411-4426]:SwitchCase[4411-4426]"
    }, {
      "left" : "return getPureBooleanValue(n.getLastChild()).not();",
      "right" : "return getPureBooleanValue(n.getLastChild()).not();",
      "info" : "ReturnStatement[4435-4486]:ReturnStatement[4435-4486]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[4494-4510]:SwitchCase[4494-4510]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4517-4534]:SwitchCase[4517-4534]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4543-4569]:ReturnStatement[4543-4569]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[4577-4593]:SwitchCase[4577-4593]"
    }, {
      "left" : "if (!mayHaveSideEffects(n.getFirstChild()))",
      "right" : "if (!mayHaveSideEffects(n.getFirstChild()))",
      "info" : "IfStatement[4602-4694]:IfStatement[4602-4694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4646-4694]:Block[4646-4694]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4658-4684]:ReturnStatement[4658-4684]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4703-4709]:BreakStatement[4703-4709]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4717-4733]:SwitchCase[4717-4733]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[4742-4770]:VariableDeclarationStatement[4742-4770]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[4779-5121]:IfStatement[4779-5121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4843-5039]:Block[4843-5039]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[5003-5029]:ReturnStatement[5003-5029]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[5045-5121]:IfStatement[5045-5121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5074-5121]:Block[5074-5121]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[5086-5111]:ReturnStatement[5086-5111]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5130-5136]:BreakStatement[5130-5136]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[5144-5160]:SwitchCase[5144-5160]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[5167-5185]:SwitchCase[5167-5185]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[5194-5219]:ReturnStatement[5194-5219]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[5227-5247]:SwitchCase[5227-5247]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[5254-5275]:SwitchCase[5254-5275]"
    }, {
      "left" : "if (!mayHaveSideEffects(n))",
      "right" : "if (!mayHaveSideEffects(n))",
      "info" : "IfStatement[5284-5359]:IfStatement[5284-5359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5312-5359]:Block[5312-5359]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[5324-5349]:ReturnStatement[5324-5349]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5368-5374]:BreakStatement[5368-5374]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[5386-5414]:ReturnStatement[5386-5414]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5642-5648]:Modifier[5642-5648]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5649-5655]:SimpleType[5649-5655]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[5656-5670]:SimpleName[5656-5670]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5671-5677]:SingleVariableDeclaration[5671-5677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5679-6708]:Block[5679-6708]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.STRING_KEY:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n        return \"false\";\n\n      case Token.TRUE:\n        return \"true\";\n\n      case Token.NULL:\n        return \"null\";\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.STRING_KEY:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        return getStringValue(n.getDouble());\n\n      case Token.FALSE:\n        return \"false\";\n\n      case Token.TRUE:\n        return \"true\";\n\n      case Token.NULL:\n        return \"null\";\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "info" : "SwitchStatement[5728-6687]:SwitchStatement[5728-6687]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[5757-5775]:SwitchCase[5757-5775]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[5782-5804]:SwitchCase[5782-5804]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[5813-5834]:ReturnStatement[5813-5834]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5842-5858]:SwitchCase[5842-5858]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5867-5895]:VariableDeclarationStatement[5867-5895]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[5904-6041]:IfStatement[5904-6041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6007-6041]:Block[6007-6041]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[6019-6031]:ReturnStatement[6019-6031]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6050-6056]:BreakStatement[6050-6056]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6064-6082]:SwitchCase[6064-6082]"
    }, {
      "left" : "return getStringValue(n.getDouble());",
      "right" : "return getStringValue(n.getDouble());",
      "info" : "ReturnStatement[6091-6128]:ReturnStatement[6091-6128]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[6136-6153]:SwitchCase[6136-6153]"
    }, {
      "left" : "return \"false\";",
      "right" : "return \"false\";",
      "info" : "ReturnStatement[6162-6177]:ReturnStatement[6162-6177]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[6185-6201]:SwitchCase[6185-6201]"
    }, {
      "left" : "return \"true\";",
      "right" : "return \"true\";",
      "info" : "ReturnStatement[6210-6224]:ReturnStatement[6210-6224]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[6232-6248]:SwitchCase[6232-6248]"
    }, {
      "left" : "return \"null\";",
      "right" : "return \"null\";",
      "info" : "ReturnStatement[6257-6271]:ReturnStatement[6257-6271]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6279-6295]:SwitchCase[6279-6295]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[6304-6323]:ReturnStatement[6304-6323]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6331-6346]:SwitchCase[6331-6346]"
    }, {
      "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[6355-6415]:VariableDeclarationStatement[6355-6415]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[6424-6542]:IfStatement[6424-6542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6459-6542]:Block[6459-6542]"
    }, {
      "left" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "right" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "info" : "ReturnStatement[6471-6519]:ReturnStatement[6471-6519]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6551-6557]:BreakStatement[6551-6557]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6565-6585]:SwitchCase[6565-6585]"
    }, {
      "left" : "return arrayToString(n);",
      "right" : "return arrayToString(n);",
      "info" : "ReturnStatement[6594-6618]:ReturnStatement[6594-6618]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[6626-6647]:SwitchCase[6626-6647]"
    }, {
      "left" : "return \"[object Object]\";",
      "right" : "return \"[object Object]\";",
      "info" : "ReturnStatement[6656-6681]:ReturnStatement[6656-6681]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6692-6704]:ReturnStatement[6692-6704]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6712-6718]:Modifier[6712-6718]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6719-6725]:SimpleType[6719-6725]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[6726-6740]:SimpleName[6726-6740]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[6741-6753]:SingleVariableDeclaration[6741-6753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6755-6956]:Block[6755-6956]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[6761-6791]:VariableDeclarationStatement[6761-6791]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[6832-6952]:IfStatement[6832-6952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6856-6902]:Block[6856-6902]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[6864-6896]:ReturnStatement[6864-6896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6908-6952]:Block[6908-6952]"
    }, {
      "left" : "return Double.toString(value);",
      "right" : "return Double.toString(value);",
      "info" : "ReturnStatement[6916-6946]:ReturnStatement[6916-6946]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7336-7342]:Modifier[7336-7342]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7343-7349]:SimpleType[7343-7349]"
    }, {
      "left" : "getArrayElementStringValue",
      "right" : "getArrayElementStringValue",
      "info" : "SimpleName[7350-7376]:SimpleName[7350-7376]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7377-7383]:SingleVariableDeclaration[7377-7383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7385-7482]:Block[7385-7482]"
    }, {
      "left" : "return (NodeUtil.isNullOrUndefined(n) || n.isEmpty())\n        ? \"\" : getStringValue(n);",
      "right" : "return (NodeUtil.isNullOrUndefined(n) || n.isEmpty())\n        ? \"\" : getStringValue(n);",
      "info" : "ReturnStatement[7391-7478]:ReturnStatement[7391-7478]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7486-7492]:Modifier[7486-7492]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7493-7499]:SimpleType[7493-7499]"
    }, {
      "left" : "arrayToString",
      "right" : "arrayToString",
      "info" : "SimpleName[7500-7513]:SimpleName[7500-7513]"
    }, {
      "left" : "Node literal",
      "right" : "Node literal",
      "info" : "SingleVariableDeclaration[7514-7526]:SingleVariableDeclaration[7514-7526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7528-7992]:Block[7528-7992]"
    }, {
      "left" : "Node first = literal.getFirstChild();",
      "right" : "Node first = literal.getFirstChild();",
      "info" : "VariableDeclarationStatement[7534-7571]:VariableDeclarationStatement[7534-7571]"
    }, {
      "left" : "StringBuilder result = new StringBuilder();",
      "right" : "StringBuilder result = new StringBuilder();",
      "info" : "VariableDeclarationStatement[7576-7619]:VariableDeclarationStatement[7576-7619]"
    }, {
      "left" : "int nextSlot = 0;",
      "right" : "int nextSlot = 0;",
      "info" : "VariableDeclarationStatement[7624-7641]:VariableDeclarationStatement[7624-7641]"
    }, {
      "left" : "int nextSkipSlot = 0;",
      "right" : "int nextSkipSlot = 0;",
      "info" : "VariableDeclarationStatement[7646-7667]:VariableDeclarationStatement[7646-7667]"
    }, {
      "left" : "for (Node n = first; n != null; n = n.getNext())",
      "right" : "for (Node n = first; n != null; n = n.getNext())",
      "info" : "ForStatement[7672-7958]:ForStatement[7672-7958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7721-7958]:Block[7721-7958]"
    }, {
      "left" : "String childValue = getArrayElementStringValue(n);",
      "right" : "String childValue = getArrayElementStringValue(n);",
      "info" : "VariableDeclarationStatement[7729-7779]:VariableDeclarationStatement[7729-7779]"
    }, {
      "left" : "if (childValue == null)",
      "right" : "if (childValue == null)",
      "info" : "IfStatement[7786-7840]:IfStatement[7786-7840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7810-7840]:Block[7810-7840]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7820-7832]:ReturnStatement[7820-7832]"
    }, {
      "left" : "if (n != first)",
      "right" : "if (n != first)",
      "info" : "IfStatement[7847-7900]:IfStatement[7847-7900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7863-7900]:Block[7863-7900]"
    }, {
      "left" : "result.append(',');",
      "right" : "result.append(',');",
      "info" : "ExpressionStatement[7873-7892]:ExpressionStatement[7873-7892]"
    }, {
      "left" : "result.append(childValue);",
      "right" : "result.append(childValue);",
      "info" : "ExpressionStatement[7907-7933]:ExpressionStatement[7907-7933]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[7941-7952]:ExpressionStatement[7941-7952]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[7963-7988]:ReturnStatement[7963-7988]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8216-8222]:Modifier[8216-8222]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[8223-8229]:SimpleType[8223-8229]"
    }, {
      "left" : "getNumberValue",
      "right" : "getNumberValue",
      "info" : "SimpleName[8230-8244]:SimpleName[8230-8244]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8245-8251]:SingleVariableDeclaration[8245-8251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8253-9694]:Block[8253-9694]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().isName()\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().isName()\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "info" : "SwitchStatement[8259-9672]:SwitchStatement[8259-9672]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[8288-8304]:SwitchCase[8288-8304]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[8313-8324]:ReturnStatement[8313-8324]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[8332-8349]:SwitchCase[8332-8349]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[8356-8372]:SwitchCase[8356-8372]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[8381-8392]:ReturnStatement[8381-8392]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[8400-8418]:SwitchCase[8400-8418]"
    }, {
      "left" : "return n.getDouble();",
      "right" : "return n.getDouble();",
      "info" : "ReturnStatement[8427-8448]:ReturnStatement[8427-8448]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8456-8472]:SwitchCase[8456-8472]"
    }, {
      "left" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "right" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "info" : "IfStatement[8481-8604]:IfStatement[8481-8604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8524-8558]:Block[8524-8558]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8536-8548]:ReturnStatement[8536-8548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8564-8604]:Block[8564-8604]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8576-8594]:ReturnStatement[8576-8594]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8612-8628]:SwitchCase[8612-8628]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8674-8702]:VariableDeclarationStatement[8674-8702]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[8711-8781]:IfStatement[8711-8781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8741-8781]:Block[8741-8781]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8753-8771]:ReturnStatement[8753-8771]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[8790-8854]:IfStatement[8790-8854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8814-8854]:Block[8814-8854]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8826-8844]:ReturnStatement[8826-8844]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[8863-8946]:IfStatement[8863-8946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8892-8946]:Block[8892-8946]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[8904-8936]:ReturnStatement[8904-8936]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8955-8967]:ReturnStatement[8955-8967]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[8975-8990]:SwitchCase[8975-8990]"
    }, {
      "left" : "if (n.getChildCount() == 1 && n.getFirstChild().isName()\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "right" : "if (n.getChildCount() == 1 && n.getFirstChild().isName()\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "info" : "IfStatement[8999-9175]:IfStatement[8999-9175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9121-9175]:Block[9121-9175]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[9133-9165]:ReturnStatement[9133-9165]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9184-9196]:ReturnStatement[9184-9196]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[9204-9219]:SwitchCase[9204-9219]"
    }, {
      "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[9228-9288]:VariableDeclarationStatement[9228-9288]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[9297-9408]:IfStatement[9297-9408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9332-9408]:Block[9332-9408]"
    }, {
      "left" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "right" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "info" : "ReturnStatement[9344-9385]:ReturnStatement[9344-9385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9417-9423]:BreakStatement[9417-9423]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[9431-9449]:SwitchCase[9431-9449]"
    }, {
      "left" : "return getStringNumberValue(n.getString());",
      "right" : "return getStringNumberValue(n.getString());",
      "info" : "ReturnStatement[9458-9501]:ReturnStatement[9458-9501]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[9509-9529]:SwitchCase[9509-9529]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[9536-9557]:SwitchCase[9536-9557]"
    }, {
      "left" : "String value = getStringValue(n);",
      "right" : "String value = getStringValue(n);",
      "info" : "VariableDeclarationStatement[9566-9599]:VariableDeclarationStatement[9566-9599]"
    }, {
      "left" : "return value != null ? getStringNumberValue(value) : null;",
      "right" : "return value != null ? getStringNumberValue(value) : null;",
      "info" : "ReturnStatement[9608-9666]:ReturnStatement[9608-9666]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9678-9690]:ReturnStatement[9678-9690]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9698-9704]:Modifier[9698-9704]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[9705-9711]:SimpleType[9705-9711]"
    }, {
      "left" : "getStringNumberValue",
      "right" : "getStringNumberValue",
      "info" : "SimpleName[9712-9732]:SimpleName[9712-9732]"
    }, {
      "left" : "String rawJsString",
      "right" : "String rawJsString",
      "info" : "SingleVariableDeclaration[9733-9751]:SingleVariableDeclaration[9733-9751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9753-10968]:Block[9753-10968]"
    }, {
      "left" : "if (rawJsString.contains(\"\\u000b\"))",
      "right" : "if (rawJsString.contains(\"\\u000b\"))",
      "info" : "IfStatement[9759-9868]:IfStatement[9759-9868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9795-9868]:Block[9795-9868]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9850-9862]:ReturnStatement[9850-9862]"
    }, {
      "left" : "String s = trimJsWhiteSpace(rawJsString);",
      "right" : "String s = trimJsWhiteSpace(rawJsString);",
      "info" : "VariableDeclarationStatement[9874-9915]:VariableDeclarationStatement[9874-9915]"
    }, {
      "left" : "if (s.length() == 0)",
      "right" : "if (s.length() == 0)",
      "info" : "IfStatement[9961-10007]:IfStatement[9961-10007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9982-10007]:Block[9982-10007]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[9990-10001]:ReturnStatement[9990-10001]"
    }, {
      "left" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "right" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "info" : "IfStatement[10013-10323]:IfStatement[10013-10323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10117-10323]:Block[10117-10323]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10166-10317]:TryStatement[10166-10317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10170-10248]:Block[10170-10248]"
    }, {
      "left" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "right" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "info" : "ReturnStatement[10180-10240]:ReturnStatement[10180-10240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10281-10317]:Block[10281-10317]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[10291-10309]:ReturnStatement[10291-10309]"
    }, {
      "left" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "right" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "info" : "IfStatement[10329-10577]:IfStatement[10329-10577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10487-10577]:Block[10487-10577]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10559-10571]:ReturnStatement[10559-10571]"
    }, {
      "left" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "right" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "info" : "IfStatement[10728-10846]:IfStatement[10728-10846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10820-10846]:Block[10820-10846]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10828-10840]:ReturnStatement[10828-10840]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10852-10964]:TryStatement[10852-10964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10856-10899]:Block[10856-10899]"
    }, {
      "left" : "return Double.parseDouble(s);",
      "right" : "return Double.parseDouble(s);",
      "info" : "ReturnStatement[10864-10893]:ReturnStatement[10864-10893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10932-10964]:Block[10932-10964]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[10940-10958]:ReturnStatement[10940-10958]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10972-10978]:Modifier[10972-10978]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10979-10985]:SimpleType[10979-10985]"
    }, {
      "left" : "trimJsWhiteSpace",
      "right" : "trimJsWhiteSpace",
      "info" : "SimpleName[10986-11002]:SimpleName[10986-11002]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[11003-11011]:SingleVariableDeclaration[11003-11011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11013-11327]:Block[11013-11327]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[11019-11033]:VariableDeclarationStatement[11019-11033]"
    }, {
      "left" : "int end = s.length();",
      "right" : "int end = s.length();",
      "info" : "VariableDeclarationStatement[11038-11059]:VariableDeclarationStatement[11038-11059]"
    }, {
      "left" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
      "right" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
      "info" : "WhileStatement[11064-11171]:WhileStatement[11064-11171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11151-11171]:Block[11151-11171]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[11159-11165]:ExpressionStatement[11159-11165]"
    }, {
      "left" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
      "right" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
      "info" : "WhileStatement[11176-11287]:WhileStatement[11176-11287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11265-11287]:Block[11265-11287]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[11273-11281]:ExpressionStatement[11273-11281]"
    }, {
      "left" : "return s.substring(start, end);",
      "right" : "return s.substring(start, end);",
      "info" : "ReturnStatement[11292-11323]:ReturnStatement[11292-11323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11382-11388]:Modifier[11382-11388]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11389-11395]:Modifier[11389-11395]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[11396-11408]:SimpleType[11396-11408]"
    }, {
      "left" : "isStrWhiteSpaceChar",
      "right" : "isStrWhiteSpaceChar",
      "info" : "SimpleName[11409-11428]:SimpleName[11409-11428]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[11429-11434]:SingleVariableDeclaration[11429-11434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11436-11988]:Block[11436-11988]"
    }, {
      "left" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", ECMAScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
      "right" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", ECMAScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
      "info" : "SwitchStatement[11442-11984]:SwitchStatement[11442-11984]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[11461-11475]:SwitchCase[11461-11475]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[11492-11520]:ReturnStatement[11492-11520]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[11567-11576]:SwitchCase[11567-11576]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[11591-11601]:SwitchCase[11591-11601]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[11616-11626]:SwitchCase[11616-11626]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[11641-11651]:SwitchCase[11641-11651]"
    }, {
      "left" : "case '\\u00A0':",
      "right" : "case '\\u00A0':",
      "info" : "SwitchCase[11667-11681]:SwitchCase[11667-11681]"
    }, {
      "left" : "case '\\u000C':",
      "right" : "case '\\u000C':",
      "info" : "SwitchCase[11698-11712]:SwitchCase[11698-11712]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[11727-11741]:SwitchCase[11727-11741]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[11756-11770]:SwitchCase[11756-11770]"
    }, {
      "left" : "case '\\uFEFF':",
      "right" : "case '\\uFEFF':",
      "info" : "SwitchCase[11785-11799]:SwitchCase[11785-11799]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[11817-11842]:ReturnStatement[11817-11842]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11849-11857]:SwitchCase[11849-11857]"
    }, {
      "left" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "right" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "info" : "ReturnStatement[11866-11978]:ReturnStatement[11866-11978]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12605-12611]:Modifier[12605-12611]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12612-12618]:SimpleType[12612-12618]"
    }, {
      "left" : "getFunctionName",
      "right" : "getFunctionName",
      "info" : "SimpleName[12619-12634]:SimpleName[12619-12634]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12635-12641]:SingleVariableDeclaration[12635-12641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12643-13216]:Block[12643-13216]"
    }, {
      "left" : "Preconditions.checkState(n.isFunction());",
      "right" : "Preconditions.checkState(n.isFunction());",
      "info" : "ExpressionStatement[12649-12690]:ExpressionStatement[12649-12690]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[12695-12723]:VariableDeclarationStatement[12695-12723]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getQualifiedName();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        String name = n.getFirstChild().getQualifiedName();\n        return name;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getQualifiedName();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        String name = n.getFirstChild().getQualifiedName();\n        return name;\n    }",
      "info" : "SwitchStatement[12728-13212]:SwitchStatement[12728-13212]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[12762-12778]:SwitchCase[12762-12778]"
    }, {
      "left" : "return parent.getQualifiedName();",
      "right" : "return parent.getQualifiedName();",
      "info" : "ReturnStatement[12868-12901]:ReturnStatement[12868-12901]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[12909-12927]:SwitchCase[12909-12927]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[13029-13078]:ReturnStatement[13029-13078]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13086-13094]:SwitchCase[13086-13094]"
    }, {
      "left" : "String name = n.getFirstChild().getQualifiedName();",
      "right" : "String name = n.getFirstChild().getQualifiedName();",
      "info" : "VariableDeclarationStatement[13134-13185]:VariableDeclarationStatement[13134-13185]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[13194-13206]:ReturnStatement[13194-13206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13821-13827]:Modifier[13821-13827]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13828-13834]:Modifier[13828-13834]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13835-13841]:SimpleType[13835-13841]"
    }, {
      "left" : "getNearestFunctionName",
      "right" : "getNearestFunctionName",
      "info" : "SimpleName[13842-13864]:SimpleName[13842-13864]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13865-13871]:SingleVariableDeclaration[13865-13871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13873-14394]:Block[13873-14394]"
    }, {
      "left" : "if (!n.isFunction())",
      "right" : "if (!n.isFunction())",
      "info" : "IfStatement[13879-13926]:IfStatement[13879-13926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13900-13926]:Block[13900-13926]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13908-13920]:ReturnStatement[13908-13920]"
    }, {
      "left" : "String name = getFunctionName(n);",
      "right" : "String name = getFunctionName(n);",
      "info" : "VariableDeclarationStatement[13932-13965]:VariableDeclarationStatement[13932-13965]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[13970-14014]:IfStatement[13970-14014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13988-14014]:Block[13988-14014]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[13996-14008]:ReturnStatement[13996-14008]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[14071-14099]:VariableDeclarationStatement[14071-14099]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SETTER_DEF:\n      case Token.GETTER_DEF:\n      case Token.STRING_KEY:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SETTER_DEF:\n      case Token.GETTER_DEF:\n      case Token.STRING_KEY:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "info" : "SwitchStatement[14104-14372]:SwitchStatement[14104-14372]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[14138-14160]:SwitchCase[14138-14160]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[14167-14189]:SwitchCase[14167-14189]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[14196-14218]:SwitchCase[14196-14218]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[14276-14302]:ReturnStatement[14276-14302]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[14309-14327]:SwitchCase[14309-14327]"
    }, {
      "left" : "return getStringValue(parent);",
      "right" : "return getStringValue(parent);",
      "info" : "ReturnStatement[14336-14366]:ReturnStatement[14336-14366]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14378-14390]:ReturnStatement[14378-14390]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14460-14466]:Modifier[14460-14466]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14467-14474]:PrimitiveType[14467-14474]"
    }, {
      "left" : "isImmutableValue",
      "right" : "isImmutableValue",
      "info" : "SimpleName[14475-14491]:SimpleName[14475-14491]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14492-14498]:SingleVariableDeclaration[14492-14498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14500-15187]:Block[14500-15187]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[14506-15164]:SwitchStatement[14506-15164]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[14535-14553]:SwitchCase[14535-14553]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[14560-14578]:SwitchCase[14560-14578]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[14585-14601]:SwitchCase[14585-14601]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[14608-14624]:SwitchCase[14608-14624]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[14631-14648]:SwitchCase[14631-14648]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14657-14669]:ReturnStatement[14657-14669]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[14676-14691]:SwitchCase[14676-14691]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[14700-14743]:ReturnStatement[14700-14743]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[14750-14766]:SwitchCase[14750-14766]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[14773-14788]:SwitchCase[14773-14788]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[14797-14840]:ReturnStatement[14797-14840]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14847-14863]:SwitchCase[14847-14863]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[14872-14900]:VariableDeclarationStatement[14872-14900]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[15053-15158]:ReturnStatement[15053-15158]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15170-15183]:ReturnStatement[15170-15183]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15263-15269]:Modifier[15263-15269]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15270-15277]:PrimitiveType[15270-15277]"
    }, {
      "left" : "isSymmetricOperation",
      "right" : "isSymmetricOperation",
      "info" : "SimpleName[15278-15298]:SimpleName[15278-15298]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15299-15305]:SingleVariableDeclaration[15299-15305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15307-15683]:Block[15307-15683]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.EQ: // equal\n      case Token.NE: // not equal\n      case Token.SHEQ: // exactly equal\n      case Token.SHNE: // exactly not equal\n      case Token.MUL: // multiply, unlike add it only works on numbers\n                      // or results NaN if any of the operators is not a number\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.EQ: // equal\n      case Token.NE: // not equal\n      case Token.SHEQ: // exactly equal\n      case Token.SHNE: // exactly not equal\n      case Token.MUL: // multiply, unlike add it only works on numbers\n                      // or results NaN if any of the operators is not a number\n        return true;\n    }",
      "info" : "SwitchStatement[15313-15661]:SwitchStatement[15313-15661]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[15342-15356]:SwitchCase[15342-15356]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[15372-15386]:SwitchCase[15372-15386]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[15406-15422]:SwitchCase[15406-15422]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[15446-15462]:SwitchCase[15446-15462]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[15490-15505]:SwitchCase[15490-15505]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15643-15655]:ReturnStatement[15643-15655]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15666-15679]:ReturnStatement[15666-15679]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15816-15822]:Modifier[15816-15822]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15823-15830]:PrimitiveType[15823-15830]"
    }, {
      "left" : "isRelationalOperation",
      "right" : "isRelationalOperation",
      "info" : "SimpleName[15831-15852]:SimpleName[15831-15852]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15853-15859]:SingleVariableDeclaration[15853-15859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15861-16082]:Block[15861-16082]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.GT: // equal\n      case Token.GE: // not equal\n      case Token.LT: // exactly equal\n      case Token.LE: // exactly not equal\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.GT: // equal\n      case Token.GE: // not equal\n      case Token.LT: // exactly equal\n      case Token.LE: // exactly not equal\n        return true;\n    }",
      "info" : "SwitchStatement[15867-16060]:SwitchStatement[15867-16060]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[15896-15910]:SwitchCase[15896-15910]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[15926-15940]:SwitchCase[15926-15940]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[15960-15974]:SwitchCase[15960-15974]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[15998-16012]:SwitchCase[15998-16012]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16042-16054]:ReturnStatement[16042-16054]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16065-16078]:ReturnStatement[16065-16078]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16180-16186]:Modifier[16180-16186]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16187-16190]:PrimitiveType[16187-16190]"
    }, {
      "left" : "getInverseOperator",
      "right" : "getInverseOperator",
      "info" : "SimpleName[16191-16209]:SimpleName[16191-16209]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[16210-16218]:SingleVariableDeclaration[16210-16218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16220-16459]:Block[16220-16459]"
    }, {
      "left" : "switch (type) {\n      case Token.GT:\n        return Token.LT;\n      case Token.LT:\n        return Token.GT;\n      case Token.GE:\n        return Token.LE;\n      case Token.LE:\n        return Token.GE;\n    }",
      "right" : "switch (type) {\n      case Token.GT:\n        return Token.LT;\n      case Token.LT:\n        return Token.GT;\n      case Token.GE:\n        return Token.LE;\n      case Token.LE:\n        return Token.GE;\n    }",
      "info" : "SwitchStatement[16226-16431]:SwitchStatement[16226-16431]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[16248-16262]:SwitchCase[16248-16262]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[16271-16287]:ReturnStatement[16271-16287]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[16294-16308]:SwitchCase[16294-16308]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[16317-16333]:ReturnStatement[16317-16333]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[16340-16354]:SwitchCase[16340-16354]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[16363-16379]:ReturnStatement[16363-16379]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[16386-16400]:SwitchCase[16386-16400]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[16409-16425]:ReturnStatement[16409-16425]"
    }, {
      "left" : "return Token.ERROR;",
      "right" : "return Token.ERROR;",
      "info" : "ReturnStatement[16436-16455]:ReturnStatement[16436-16455]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17365-17371]:Modifier[17365-17371]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17372-17379]:PrimitiveType[17372-17379]"
    }, {
      "left" : "isLiteralValue",
      "right" : "isLiteralValue",
      "info" : "SimpleName[17380-17394]:SimpleName[17380-17394]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17395-17401]:SingleVariableDeclaration[17395-17401]"
    }, {
      "left" : "boolean includeFunctions",
      "right" : "boolean includeFunctions",
      "info" : "SingleVariableDeclaration[17403-17427]:SingleVariableDeclaration[17403-17427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17429-18527]:Block[17429-18527]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[17435-18523]:SwitchStatement[17435-18523]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[17464-17484]:SwitchCase[17464-17484]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[17493-17712]:ForStatement[17493-17712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17583-17712]:Block[17583-17712]"
    }, {
      "left" : "if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions))",
      "right" : "if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[17595-17702]:IfStatement[17595-17702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17663-17702]:Block[17663-17702]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17677-17690]:ReturnStatement[17677-17690]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17721-17733]:ReturnStatement[17721-17733]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[17741-17759]:SwitchCase[17741-17759]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[17823-18020]:ForStatement[17823-18020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17913-18020]:Block[17913-18020]"
    }, {
      "left" : "if (!isLiteralValue(child, includeFunctions))",
      "right" : "if (!isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[17925-18010]:IfStatement[17925-18010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17971-18010]:Block[17971-18010]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17985-17998]:ReturnStatement[17985-17998]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18029-18041]:ReturnStatement[18029-18041]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[18049-18070]:SwitchCase[18049-18070]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[18132-18345]:ForStatement[18132-18345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18222-18345]:Block[18222-18345]"
    }, {
      "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "info" : "IfStatement[18234-18335]:IfStatement[18234-18335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18296-18335]:Block[18296-18335]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18310-18323]:ReturnStatement[18310-18323]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18354-18366]:ReturnStatement[18354-18366]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[18374-18394]:SwitchCase[18374-18394]"
    }, {
      "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "info" : "ReturnStatement[18403-18465]:ReturnStatement[18403-18465]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18473-18481]:SwitchCase[18473-18481]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[18490-18517]:ReturnStatement[18490-18517]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18718-18724]:Modifier[18718-18724]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18725-18732]:PrimitiveType[18725-18732]"
    }, {
      "left" : "isValidDefineValue",
      "right" : "isValidDefineValue",
      "info" : "SimpleName[18733-18751]:SimpleName[18733-18751]"
    }, {
      "left" : "Node val",
      "right" : "Node val",
      "info" : "SingleVariableDeclaration[18752-18760]:SingleVariableDeclaration[18752-18760]"
    }, {
      "left" : "Set<String> defines",
      "right" : "Set<String> defines",
      "info" : "SingleVariableDeclaration[18762-18781]:SingleVariableDeclaration[18762-18781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18783-20020]:Block[18783-20020]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Unary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[18789-19998]:SwitchStatement[18789-19998]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[18820-18838]:SwitchCase[18820-18838]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[18845-18863]:SwitchCase[18845-18863]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[18870-18886]:SwitchCase[18870-18886]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[18893-18910]:SwitchCase[18893-18910]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18919-18931]:ReturnStatement[18919-18931]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[19008-19023]:SwitchCase[19008-19023]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[19030-19048]:SwitchCase[19030-19048]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19055-19073]:SwitchCase[19055-19073]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[19080-19097]:SwitchCase[19080-19097]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[19104-19122]:SwitchCase[19104-19122]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[19129-19144]:SwitchCase[19129-19144]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19151-19165]:SwitchCase[19151-19165]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[19172-19186]:SwitchCase[19172-19186]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[19193-19207]:SwitchCase[19193-19207]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[19214-19228]:SwitchCase[19214-19228]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[19235-19250]:SwitchCase[19235-19250]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[19257-19271]:SwitchCase[19257-19271]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[19278-19293]:SwitchCase[19278-19293]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[19300-19315]:SwitchCase[19300-19315]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19322-19336]:SwitchCase[19322-19336]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[19343-19358]:SwitchCase[19343-19358]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[19365-19381]:SwitchCase[19365-19381]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[19388-19404]:SwitchCase[19388-19404]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[19411-19426]:SwitchCase[19411-19426]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[19433-19449]:SwitchCase[19433-19449]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "info" : "ReturnStatement[19458-19577]:ReturnStatement[19458-19577]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[19643-19658]:SwitchCase[19643-19658]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19665-19680]:SwitchCase[19665-19680]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19687-19702]:SwitchCase[19687-19702]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[19711-19767]:ReturnStatement[19711-19767]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[19844-19860]:SwitchCase[19844-19860]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19867-19886]:SwitchCase[19867-19886]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[19895-19992]:IfStatement[19895-19992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19922-19992]:Block[19922-19992]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[19934-19982]:ReturnStatement[19934-19982]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20003-20016]:ReturnStatement[20003-20016]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20126-20132]:Modifier[20126-20132]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20133-20140]:PrimitiveType[20133-20140]"
    }, {
      "left" : "isEmptyBlock",
      "right" : "isEmptyBlock",
      "info" : "SimpleName[20141-20153]:SimpleName[20141-20153]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[20154-20164]:SingleVariableDeclaration[20154-20164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20166-20376]:Block[20166-20376]"
    }, {
      "left" : "if (!block.isBlock())",
      "right" : "if (!block.isBlock())",
      "info" : "IfStatement[20172-20221]:IfStatement[20172-20221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20194-20221]:Block[20194-20221]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20202-20215]:ReturnStatement[20202-20215]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[20227-20355]:ForStatement[20227-20355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20292-20355]:Block[20292-20355]"
    }, {
      "left" : "if (!n.isEmpty())",
      "right" : "if (!n.isEmpty())",
      "info" : "IfStatement[20300-20349]:IfStatement[20300-20349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20318-20349]:Block[20318-20349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20328-20341]:ReturnStatement[20328-20341]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20360-20372]:ReturnStatement[20360-20372]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20380-20386]:Modifier[20380-20386]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20387-20394]:PrimitiveType[20387-20394]"
    }, {
      "left" : "isSimpleOperator",
      "right" : "isSimpleOperator",
      "info" : "SimpleName[20395-20411]:SimpleName[20395-20411]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20412-20418]:SingleVariableDeclaration[20412-20418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20420-20471]:Block[20420-20471]"
    }, {
      "left" : "return isSimpleOperatorType(n.getType());",
      "right" : "return isSimpleOperatorType(n.getType());",
      "info" : "ReturnStatement[20426-20467]:ReturnStatement[20426-20467]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20649-20655]:Modifier[20649-20655]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20656-20663]:PrimitiveType[20656-20663]"
    }, {
      "left" : "isSimpleOperatorType",
      "right" : "isSimpleOperatorType",
      "info" : "SimpleName[20664-20684]:SimpleName[20664-20684]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[20685-20693]:SingleVariableDeclaration[20685-20693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20695-21452]:Block[20695-21452]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[20701-21448]:SwitchStatement[20701-21448]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[20723-20738]:SwitchCase[20723-20738]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[20745-20763]:SwitchCase[20745-20763]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[20770-20788]:SwitchCase[20770-20788]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[20795-20812]:SwitchCase[20795-20812]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[20819-20837]:SwitchCase[20819-20837]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[20844-20861]:SwitchCase[20844-20861]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[20868-20883]:SwitchCase[20868-20883]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[20890-20904]:SwitchCase[20890-20904]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[20911-20925]:SwitchCase[20911-20925]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[20932-20951]:SwitchCase[20932-20951]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[20958-20977]:SwitchCase[20958-20977]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[20984-20998]:SwitchCase[20984-20998]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[21005-21027]:SwitchCase[21005-21027]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[21034-21048]:SwitchCase[21034-21048]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[21055-21070]:SwitchCase[21055-21070]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[21077-21091]:SwitchCase[21077-21091]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[21098-21113]:SwitchCase[21098-21113]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[21120-21135]:SwitchCase[21120-21135]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[21142-21156]:SwitchCase[21142-21156]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[21163-21178]:SwitchCase[21163-21178]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[21185-21200]:SwitchCase[21185-21200]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[21207-21223]:SwitchCase[21207-21223]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[21230-21246]:SwitchCase[21230-21246]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[21253-21268]:SwitchCase[21253-21268]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[21275-21293]:SwitchCase[21275-21293]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21300-21316]:SwitchCase[21300-21316]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[21323-21338]:SwitchCase[21323-21338]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[21345-21360]:SwitchCase[21345-21360]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[21367-21383]:SwitchCase[21367-21383]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21392-21404]:ReturnStatement[21392-21404]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21412-21420]:SwitchCase[21412-21420]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21429-21442]:ReturnStatement[21429-21442]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21613-21619]:Modifier[21613-21619]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21620-21624]:SimpleType[21620-21624]"
    }, {
      "left" : "newExpr",
      "right" : "newExpr",
      "info" : "SimpleName[21625-21632]:SimpleName[21625-21632]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[21633-21643]:SingleVariableDeclaration[21633-21643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21645-21697]:Block[21645-21697]"
    }, {
      "left" : "return IR.exprResult(child).srcref(child);",
      "right" : "return IR.exprResult(child).srcref(child);",
      "info" : "ReturnStatement[21651-21693]:ReturnStatement[21651-21693]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21871-21877]:Modifier[21871-21877]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21878-21885]:PrimitiveType[21878-21885]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[21886-21907]:SimpleName[21886-21907]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21908-21914]:SingleVariableDeclaration[21908-21914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21916-21964]:Block[21916-21964]"
    }, {
      "left" : "return mayEffectMutableState(n, null);",
      "right" : "return mayEffectMutableState(n, null);",
      "info" : "ReturnStatement[21922-21960]:ReturnStatement[21922-21960]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21968-21974]:Modifier[21968-21974]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21975-21982]:PrimitiveType[21975-21982]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[21983-22004]:SimpleName[21983-22004]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22005-22011]:SingleVariableDeclaration[22005-22011]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[22013-22038]:SingleVariableDeclaration[22013-22038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22040-22102]:Block[22040-22102]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true, compiler);",
      "right" : "return checkForStateChangeHelper(n, true, compiler);",
      "info" : "ReturnStatement[22046-22098]:ReturnStatement[22046-22098]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22191-22197]:Modifier[22191-22197]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22198-22205]:PrimitiveType[22198-22205]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[22206-22224]:SimpleName[22206-22224]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22225-22231]:SingleVariableDeclaration[22225-22231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22233-22278]:Block[22233-22278]"
    }, {
      "left" : "return mayHaveSideEffects(n, null);",
      "right" : "return mayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[22239-22274]:ReturnStatement[22239-22274]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22282-22288]:Modifier[22282-22288]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22289-22296]:PrimitiveType[22289-22296]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[22297-22315]:SimpleName[22297-22315]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22316-22322]:SingleVariableDeclaration[22316-22322]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[22324-22349]:SingleVariableDeclaration[22324-22349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22351-22414]:Block[22351-22414]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false, compiler);",
      "right" : "return checkForStateChangeHelper(n, false, compiler);",
      "info" : "ReturnStatement[22357-22410]:ReturnStatement[22357-22410]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22692-22699]:Modifier[22692-22699]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22700-22706]:Modifier[22700-22706]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22707-22714]:PrimitiveType[22707-22714]"
    }, {
      "left" : "checkForStateChangeHelper",
      "right" : "checkForStateChangeHelper",
      "info" : "SimpleName[22715-22740]:SimpleName[22715-22740]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22748-22754]:SingleVariableDeclaration[22748-22754]"
    }, {
      "left" : "boolean checkForNewObjects",
      "right" : "boolean checkForNewObjects",
      "info" : "SingleVariableDeclaration[22756-22782]:SingleVariableDeclaration[22756-22782]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[22784-22809]:SingleVariableDeclaration[22784-22809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22811-27283]:Block[22811-27283]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperator(n)) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperator(n)) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[22915-27085]:SwitchStatement[22915-27085]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[23003-23018]:SwitchCase[23003-23018]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[23025-23042]:SwitchCase[23025-23042]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[23049-23072]:SwitchCase[23049-23072]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[23079-23095]:SwitchCase[23079-23095]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[23102-23116]:SwitchCase[23102-23116]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[23123-23137]:SwitchCase[23123-23137]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[23144-23166]:SwitchCase[23144-23166]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[23173-23191]:SwitchCase[23173-23191]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[23198-23212]:SwitchCase[23198-23212]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[23219-23235]:SwitchCase[23219-23235]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[23242-23258]:SwitchCase[23242-23258]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[23265-23282]:SwitchCase[23265-23282]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[23289-23305]:SwitchCase[23289-23305]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[23312-23330]:SwitchCase[23312-23330]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[23337-23359]:SwitchCase[23337-23359]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[23366-23384]:SwitchCase[23366-23384]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[23391-23406]:SwitchCase[23391-23406]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[23413-23430]:SwitchCase[23413-23430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23439-23445]:BreakStatement[23439-23445]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[23500-23517]:SwitchCase[23500-23517]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23526-23538]:ReturnStatement[23526-23538]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[23546-23567]:SwitchCase[23546-23567]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[23576-23634]:IfStatement[23576-23634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23600-23634]:Block[23600-23634]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23612-23624]:ReturnStatement[23612-23624]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[23643-23863]:ForStatement[23643-23863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23704-23863]:Block[23704-23863]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[23716-23853]:IfStatement[23716-23853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23815-23853]:Block[23815-23853]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23829-23841]:ReturnStatement[23829-23841]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23872-23885]:ReturnStatement[23872-23885]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[23893-23913]:SwitchCase[23893-23913]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[23920-23938]:SwitchCase[23920-23938]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[23947-24005]:IfStatement[23947-24005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23971-24005]:Block[23971-24005]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23983-23995]:ReturnStatement[23983-23995]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24014-24020]:BreakStatement[24014-24020]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[24028-24043]:SwitchCase[24028-24043]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[24093-24109]:SwitchCase[24093-24109]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[24142-24207]:IfStatement[24142-24207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24173-24207]:Block[24173-24207]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24185-24197]:ReturnStatement[24185-24197]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24216-24222]:BreakStatement[24216-24222]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[24230-24250]:SwitchCase[24230-24250]"
    }, {
      "left" : "return checkForNewObjects || !isFunctionExpression(n);",
      "right" : "return checkForNewObjects || !isFunctionExpression(n);",
      "info" : "ReturnStatement[24483-24537]:ReturnStatement[24483-24537]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[24545-24560]:SwitchCase[24545-24560]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[24569-24627]:IfStatement[24569-24627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24593-24627]:Block[24593-24627]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24605-24617]:ReturnStatement[24605-24617]"
    }, {
      "left" : "if (!constructorCallHasSideEffects(n))",
      "right" : "if (!constructorCallHasSideEffects(n))",
      "info" : "IfStatement[24637-24798]:IfStatement[24637-24798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24676-24798]:Block[24676-24798]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24782-24788]:BreakStatement[24782-24788]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24807-24819]:ReturnStatement[24807-24819]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[24827-24843]:SwitchCase[24827-24843]"
    }, {
      "left" : "if (!functionCallHasSideEffects(n, compiler))",
      "right" : "if (!functionCallHasSideEffects(n, compiler))",
      "info" : "IfStatement[24957-25122]:IfStatement[24957-25122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25003-25122]:Block[25003-25122]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25106-25112]:BreakStatement[25106-25112]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25131-25143]:ReturnStatement[25131-25143]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25151-25159]:SwitchCase[25151-25159]"
    }, {
      "left" : "if (isSimpleOperator(n))",
      "right" : "if (isSimpleOperator(n))",
      "info" : "IfStatement[25168-25221]:IfStatement[25168-25221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25193-25221]:Block[25193-25221]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25205-25211]:BreakStatement[25205-25211]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[25231-27057]:IfStatement[25231-27057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25254-27057]:Block[25254-27057]"
    }, {
      "left" : "Node assignTarget = n.getFirstChild();",
      "right" : "Node assignTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[25266-25304]:VariableDeclarationStatement[25266-25304]"
    }, {
      "left" : "if (assignTarget.isName())",
      "right" : "if (assignTarget.isName())",
      "info" : "IfStatement[25315-25380]:IfStatement[25315-25380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25342-25380]:Block[25342-25380]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25356-25368]:ReturnStatement[25356-25368]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[25613-25860]:IfStatement[25613-25860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25822-25860]:Block[25822-25860]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25836-25848]:ReturnStatement[25836-25848]"
    }, {
      "left" : "if (isGet(assignTarget))",
      "right" : "if (isGet(assignTarget))",
      "info" : "IfStatement[25872-27047]:IfStatement[25872-27047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25897-26775]:Block[25897-26775]"
    }, {
      "left" : "Node current = assignTarget.getFirstChild();",
      "right" : "Node current = assignTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[26197-26241]:VariableDeclarationStatement[26197-26241]"
    }, {
      "left" : "if (evaluatesToLocalValue(current))",
      "right" : "if (evaluatesToLocalValue(current))",
      "info" : "IfStatement[26254-26333]:IfStatement[26254-26333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26290-26333]:Block[26290-26333]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26306-26319]:ReturnStatement[26306-26319]"
    }, {
      "left" : "while (isGet(current))",
      "right" : "while (isGet(current))",
      "info" : "WhileStatement[26624-26711]:WhileStatement[26624-26711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26647-26711]:Block[26647-26711]"
    }, {
      "left" : "current = current.getFirstChild();",
      "right" : "current = current.getFirstChild();",
      "info" : "ExpressionStatement[26663-26697]:ExpressionStatement[26663-26697]"
    }, {
      "left" : "return !isLiteralValue(current, true);",
      "right" : "return !isLiteralValue(current, true);",
      "info" : "ReturnStatement[26725-26763]:ReturnStatement[26725-26763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26781-27047]:Block[26781-27047]"
    }, {
      "left" : "return !isLiteralValue(assignTarget, true);",
      "right" : "return !isLiteralValue(assignTarget, true);",
      "info" : "ReturnStatement[26992-27035]:ReturnStatement[26992-27035]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27067-27079]:ReturnStatement[27067-27079]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[27091-27260]:ForStatement[27091-27260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27152-27260]:Block[27152-27260]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "info" : "IfStatement[27160-27254]:IfStatement[27160-27254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27224-27254]:Block[27224-27254]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27234-27246]:ReturnStatement[27234-27246]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27266-27279]:ReturnStatement[27266-27279]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27402-27408]:Modifier[27402-27408]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27409-27416]:PrimitiveType[27409-27416]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[27417-27446]:SimpleName[27417-27446]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[27447-27460]:SingleVariableDeclaration[27447-27460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27462-27525]:Block[27462-27525]"
    }, {
      "left" : "return constructorCallHasSideEffects(callNode, null);",
      "right" : "return constructorCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[27468-27521]:ReturnStatement[27468-27521]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27529-27535]:Modifier[27529-27535]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27536-27543]:PrimitiveType[27536-27543]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[27544-27573]:SimpleName[27544-27573]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[27581-27594]:SingleVariableDeclaration[27581-27594]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[27596-27621]:SingleVariableDeclaration[27596-27621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27623-28038]:Block[27623-28038]"
    }, {
      "left" : "if (!callNode.isNew())",
      "right" : "if (!callNode.isNew())",
      "info" : "IfStatement[27629-27769]:IfStatement[27629-27769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27652-27769]:Block[27652-27769]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[27660-27763]:ThrowStatement[27660-27763]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[27775-27838]:IfStatement[27775-27838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27811-27838]:Block[27811-27838]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27819-27832]:ReturnStatement[27819-27832]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[27844-27885]:VariableDeclarationStatement[27844-27885]"
    }, {
      "left" : "if (nameNode.isName() &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.isName() &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[27890-28016]:IfStatement[27890-28016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27989-28016]:Block[27989-28016]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27997-28010]:ReturnStatement[27997-28010]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28022-28034]:ReturnStatement[28022-28034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28882-28888]:Modifier[28882-28888]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28889-28896]:PrimitiveType[28889-28896]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[28897-28923]:SimpleName[28897-28923]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[28924-28937]:SingleVariableDeclaration[28924-28937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28939-28999]:Block[28939-28999]"
    }, {
      "left" : "return functionCallHasSideEffects(callNode, null);",
      "right" : "return functionCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[28945-28995]:ReturnStatement[28945-28995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29248-29254]:Modifier[29248-29254]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29255-29262]:PrimitiveType[29255-29262]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[29263-29289]:SimpleName[29263-29289]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[29297-29310]:SingleVariableDeclaration[29297-29310]"
    }, {
      "left" : "@Nullable AbstractCompiler compiler",
      "right" : "@Nullable AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[29312-29347]:SingleVariableDeclaration[29312-29347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29349-31110]:Block[29349-31110]"
    }, {
      "left" : "if (!callNode.isCall())",
      "right" : "if (!callNode.isCall())",
      "info" : "IfStatement[29355-29497]:IfStatement[29355-29497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29379-29497]:Block[29379-29497]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[29387-29491]:ThrowStatement[29387-29491]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[29503-29566]:IfStatement[29503-29566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29539-29566]:Block[29539-29566]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29547-29560]:ReturnStatement[29547-29560]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[29572-29613]:VariableDeclarationStatement[29572-29613]"
    }, {
      "left" : "if (nameNode.isName())",
      "right" : "if (nameNode.isName())",
      "info" : "IfStatement[29667-31088]:IfStatement[29667-31088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29690-29835]:Block[29690-29835]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[29698-29733]:VariableDeclarationStatement[29698-29733]"
    }, {
      "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "info" : "IfStatement[29740-29829]:IfStatement[29740-29829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29798-29829]:Block[29798-29829]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29808-29821]:ReturnStatement[29808-29821]"
    }, {
      "left" : "if (nameNode.isGetProp())",
      "right" : "if (nameNode.isGetProp())",
      "info" : "IfStatement[29841-31088]:IfStatement[29841-31088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29867-31088]:Block[29867-31088]"
    }, {
      "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[29875-30045]:IfStatement[29875-30045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30014-30045]:Block[30014-30045]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30024-30037]:ReturnStatement[30024-30037]"
    }, {
      "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "info" : "IfStatement[30053-30184]:IfStatement[30053-30184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30153-30184]:Block[30153-30184]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30163-30176]:ReturnStatement[30163-30176]"
    }, {
      "left" : "if (nameNode.getFirstChild().isName())",
      "right" : "if (nameNode.getFirstChild().isName())",
      "info" : "IfStatement[30369-30515]:IfStatement[30369-30515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30408-30515]:Block[30408-30515]"
    }, {
      "left" : "if (\"Math.floor\".equals(nameNode.getQualifiedName()))",
      "right" : "if (\"Math.floor\".equals(nameNode.getQualifiedName()))",
      "info" : "IfStatement[30418-30507]:IfStatement[30418-30507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30472-30507]:Block[30472-30507]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30484-30497]:ReturnStatement[30484-30497]"
    }, {
      "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "info" : "IfStatement[30523-31082]:IfStatement[30523-31082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30586-31082]:Block[30586-31082]"
    }, {
      "left" : "if (nameNode.getFirstChild().isRegExp()\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().isRegExp()\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "info" : "IfStatement[30596-31074]:IfStatement[30596-31074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30713-30748]:Block[30713-30748]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30725-30738]:ReturnStatement[30725-30738]"
    }, {
      "left" : "if (nameNode.getFirstChild().isString()\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().isString()\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[30754-31074]:IfStatement[30754-31074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30895-31074]:Block[30895-31074]"
    }, {
      "left" : "Node param = nameNode.getNext();",
      "right" : "Node param = nameNode.getNext();",
      "info" : "VariableDeclarationStatement[30907-30939]:VariableDeclarationStatement[30907-30939]"
    }, {
      "left" : "if (param != null &&\n              (param.isString() || param.isRegExp()))",
      "right" : "if (param != null &&\n              (param.isString() || param.isRegExp()))",
      "info" : "IfStatement[30950-31064]:IfStatement[30950-31064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31025-31064]:Block[31025-31064]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31039-31052]:ReturnStatement[31039-31052]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31094-31106]:ReturnStatement[31094-31106]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31176-31182]:Modifier[31176-31182]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31183-31190]:PrimitiveType[31183-31190]"
    }, {
      "left" : "callHasLocalResult",
      "right" : "callHasLocalResult",
      "info" : "SimpleName[31191-31209]:SimpleName[31191-31209]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31210-31216]:SingleVariableDeclaration[31210-31216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31218-31332]:Block[31218-31332]"
    }, {
      "left" : "Preconditions.checkState(n.isCall());",
      "right" : "Preconditions.checkState(n.isCall());",
      "info" : "ExpressionStatement[31224-31261]:ExpressionStatement[31224-31261]"
    }, {
      "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "info" : "ReturnStatement[31266-31328]:ReturnStatement[31266-31328]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31397-31403]:Modifier[31397-31403]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31404-31411]:PrimitiveType[31404-31411]"
    }, {
      "left" : "newHasLocalResult",
      "right" : "newHasLocalResult",
      "info" : "SimpleName[31412-31429]:SimpleName[31412-31429]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31430-31436]:SingleVariableDeclaration[31430-31436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31438-31523]:Block[31438-31523]"
    }, {
      "left" : "Preconditions.checkState(n.isNew());",
      "right" : "Preconditions.checkState(n.isNew());",
      "info" : "ExpressionStatement[31444-31480]:ExpressionStatement[31444-31480]"
    }, {
      "left" : "return n.isOnlyModifiesThisCall();",
      "right" : "return n.isOnlyModifiesThisCall();",
      "info" : "ReturnStatement[31485-31519]:ReturnStatement[31485-31519]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31796-31802]:Modifier[31796-31802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31803-31810]:PrimitiveType[31803-31810]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[31811-31837]:SimpleName[31811-31837]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31838-31844]:SingleVariableDeclaration[31838-31844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31846-31899]:Block[31846-31899]"
    }, {
      "left" : "return nodeTypeMayHaveSideEffects(n, null);",
      "right" : "return nodeTypeMayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[31852-31895]:ReturnStatement[31852-31895]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31903-31909]:Modifier[31903-31909]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31910-31917]:PrimitiveType[31910-31917]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[31918-31944]:SimpleName[31918-31944]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31945-31951]:SingleVariableDeclaration[31945-31951]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[31953-31978]:SingleVariableDeclaration[31953-31978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31980-32491]:Block[31980-32491]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[31986-32035]:IfStatement[31986-32035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32009-32035]:Block[32009-32035]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32017-32029]:ReturnStatement[32017-32029]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[32041-32487]:SwitchStatement[32041-32487]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[32069-32088]:SwitchCase[32069-32088]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[32095-32110]:SwitchCase[32095-32110]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[32117-32132]:SwitchCase[32117-32132]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[32139-32156]:SwitchCase[32139-32156]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32165-32177]:ReturnStatement[32165-32177]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[32184-32200]:SwitchCase[32184-32200]"
    }, {
      "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[32209-32265]:ReturnStatement[32209-32265]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[32272-32287]:SwitchCase[32272-32287]"
    }, {
      "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[32296-32355]:ReturnStatement[32296-32355]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[32362-32378]:SwitchCase[32362-32378]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[32421-32444]:ReturnStatement[32421-32444]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32451-32459]:SwitchCase[32451-32459]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32468-32481]:ReturnStatement[32468-32481]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32595-32601]:Modifier[32595-32601]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32602-32609]:PrimitiveType[32602-32609]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[32610-32627]:SimpleName[32610-32627]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32628-32634]:SingleVariableDeclaration[32628-32634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32636-32735]:Block[32636-32735]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[32642-32688]:VariableDeclarationStatement[32642-32688]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[32693-32731]:ReturnStatement[32693-32731]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32986-32992]:Modifier[32986-32992]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32993-33000]:PrimitiveType[32993-33000]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[33001-33018]:SimpleName[33001-33018]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33019-33025]:SingleVariableDeclaration[33019-33025]"
    }, {
      "left" : "Set<String> knownConstants",
      "right" : "Set<String> knownConstants",
      "info" : "SingleVariableDeclaration[33027-33053]:SingleVariableDeclaration[33027-33053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33055-34074]:Block[33055-34074]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "info" : "SwitchStatement[33061-33898]:SwitchStatement[33061-33898]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[33090-33106]:SwitchCase[33090-33106]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[33113-33128]:SwitchCase[33113-33128]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33328-33340]:ReturnStatement[33328-33340]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[33347-33363]:SwitchCase[33347-33363]"
    }, {
      "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "info" : "ReturnStatement[33432-33513]:ReturnStatement[33432-33513]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[33587-33606]:SwitchCase[33587-33606]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[33613-33632]:SwitchCase[33613-33632]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33641-33653]:ReturnStatement[33641-33653]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[33661-33681]:SwitchCase[33661-33681]"
    }, {
      "left" : "Preconditions.checkState(isFunctionExpression(n));",
      "right" : "Preconditions.checkState(isFunctionExpression(n));",
      "info" : "ExpressionStatement[33820-33870]:ExpressionStatement[33820-33870]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33879-33892]:ReturnStatement[33879-33892]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[33904-34051]:ForStatement[33904-34051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33965-34051]:Block[33965-34051]"
    }, {
      "left" : "if (canBeSideEffected(c, knownConstants))",
      "right" : "if (canBeSideEffected(c, knownConstants))",
      "info" : "IfStatement[33973-34045]:IfStatement[33973-34045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34015-34045]:Block[34015-34045]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34025-34037]:ReturnStatement[34025-34037]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34057-34070]:ReturnStatement[34057-34070]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34511-34517]:Modifier[34511-34517]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[34518-34521]:PrimitiveType[34518-34521]"
    }, {
      "left" : "precedence",
      "right" : "precedence",
      "info" : "SimpleName[34522-34532]:SimpleName[34522-34532]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[34533-34541]:SingleVariableDeclaration[34533-34541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34543-36550]:Block[34543-36550]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[34549-36546]:SwitchStatement[34549-36546]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[34571-34588]:SwitchCase[34571-34588]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[34590-34599]:ReturnStatement[34590-34599]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[34606-34630]:SwitchCase[34606-34630]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[34637-34662]:SwitchCase[34637-34662]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[34669-34694]:SwitchCase[34669-34694]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[34701-34723]:SwitchCase[34701-34723]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[34730-34752]:SwitchCase[34730-34752]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[34759-34782]:SwitchCase[34759-34782]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[34789-34811]:SwitchCase[34789-34811]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[34818-34840]:SwitchCase[34818-34840]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[34847-34869]:SwitchCase[34847-34869]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[34876-34898]:SwitchCase[34876-34898]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[34905-34927]:SwitchCase[34905-34927]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[34934-34952]:SwitchCase[34934-34952]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[34953-34962]:ReturnStatement[34953-34962]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[34969-34985]:SwitchCase[34969-34985]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[34988-34997]:ReturnStatement[34988-34997]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[35020-35034]:SwitchCase[35020-35034]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[35039-35048]:ReturnStatement[35039-35048]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[35055-35070]:SwitchCase[35055-35070]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[35074-35083]:ReturnStatement[35074-35083]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[35090-35107]:SwitchCase[35090-35107]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[35109-35118]:ReturnStatement[35109-35118]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[35125-35143]:SwitchCase[35125-35143]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[35144-35153]:ReturnStatement[35144-35153]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[35160-35178]:SwitchCase[35160-35178]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[35179-35188]:ReturnStatement[35179-35188]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[35195-35209]:SwitchCase[35195-35209]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[35216-35230]:SwitchCase[35216-35230]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[35237-35253]:SwitchCase[35237-35253]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[35260-35276]:SwitchCase[35260-35276]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[35279-35288]:ReturnStatement[35279-35288]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[35295-35309]:SwitchCase[35295-35309]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[35316-35330]:SwitchCase[35316-35330]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[35337-35351]:SwitchCase[35337-35351]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[35358-35372]:SwitchCase[35358-35372]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[35379-35401]:SwitchCase[35379-35401]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[35408-35422]:SwitchCase[35408-35422]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[35427-35436]:ReturnStatement[35427-35436]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[35443-35458]:SwitchCase[35443-35458]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[35465-35480]:SwitchCase[35465-35480]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[35487-35503]:SwitchCase[35487-35503]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[35506-35516]:ReturnStatement[35506-35516]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[35523-35538]:SwitchCase[35523-35538]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[35545-35560]:SwitchCase[35545-35560]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[35564-35574]:ReturnStatement[35564-35574]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[35581-35596]:SwitchCase[35581-35596]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[35603-35618]:SwitchCase[35603-35618]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[35625-35640]:SwitchCase[35625-35640]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[35644-35654]:ReturnStatement[35644-35654]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[35661-35676]:SwitchCase[35661-35676]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[35683-35698]:SwitchCase[35683-35698]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[35705-35720]:SwitchCase[35705-35720]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[35727-35746]:SwitchCase[35727-35746]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[35753-35771]:SwitchCase[35753-35771]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[35778-35794]:SwitchCase[35778-35794]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[35801-35816]:SwitchCase[35801-35816]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[35823-35841]:SwitchCase[35823-35841]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[35848-35863]:SwitchCase[35848-35863]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[35870-35885]:SwitchCase[35870-35885]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[35889-35899]:ReturnStatement[35889-35899]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[35907-35923]:SwitchCase[35907-35923]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[35930-35949]:SwitchCase[35930-35949]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[35956-35975]:SwitchCase[35956-35975]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[36003-36023]:SwitchCase[36003-36023]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[36030-36047]:SwitchCase[36030-36047]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[36087-36104]:SwitchCase[36087-36104]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[36111-36131]:SwitchCase[36111-36131]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[36138-36154]:SwitchCase[36138-36154]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[36161-36177]:SwitchCase[36161-36177]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[36184-36202]:SwitchCase[36184-36202]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[36209-36230]:SwitchCase[36209-36230]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[36237-36255]:SwitchCase[36237-36255]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[36262-36280]:SwitchCase[36262-36280]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[36287-36309]:SwitchCase[36287-36309]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[36316-36332]:SwitchCase[36316-36332]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[36339-36355]:SwitchCase[36339-36355]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[36364-36374]:ReturnStatement[36364-36374]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36382-36390]:SwitchCase[36382-36390]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[36391-36540]:ThrowStatement[36391-36540]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36554-36560]:Modifier[36554-36560]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36561-36568]:PrimitiveType[36561-36568]"
    }, {
      "left" : "isUndefined",
      "right" : "isUndefined",
      "info" : "SimpleName[36569-36580]:SimpleName[36569-36580]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36581-36587]:SingleVariableDeclaration[36581-36587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36589-36762]:Block[36589-36762]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "right" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "info" : "SwitchStatement[36595-36740]:SwitchStatement[36595-36740]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[36624-36640]:SwitchCase[36624-36640]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36649-36661]:ReturnStatement[36649-36661]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[36668-36684]:SwitchCase[36668-36684]"
    }, {
      "left" : "return n.getString().equals(\"undefined\");",
      "right" : "return n.getString().equals(\"undefined\");",
      "info" : "ReturnStatement[36693-36734]:ReturnStatement[36693-36734]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36745-36758]:ReturnStatement[36745-36758]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36766-36772]:Modifier[36766-36772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36773-36780]:PrimitiveType[36773-36780]"
    }, {
      "left" : "isNullOrUndefined",
      "right" : "isNullOrUndefined",
      "info" : "SimpleName[36781-36798]:SimpleName[36781-36798]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36799-36805]:SingleVariableDeclaration[36799-36805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36807-36853]:Block[36807-36853]"
    }, {
      "left" : "return n.isNull() || isUndefined(n);",
      "right" : "return n.isNull() || isUndefined(n);",
      "info" : "ReturnStatement[36813-36849]:ReturnStatement[36813-36849]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36961-36967]:Modifier[36961-36967]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36968-36975]:PrimitiveType[36968-36975]"
    }, {
      "left" : "allResultsMatch",
      "right" : "allResultsMatch",
      "info" : "SimpleName[36976-36991]:SimpleName[36976-36991]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36992-36998]:SingleVariableDeclaration[36992-36998]"
    }, {
      "left" : "Predicate<Node> p",
      "right" : "Predicate<Node> p",
      "info" : "SingleVariableDeclaration[37000-37017]:SingleVariableDeclaration[37000-37017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37019-37489]:Block[37019-37489]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return allResultsMatch(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return allResultsMatch(n.getFirstChild(), p)\n            && allResultsMatch(n.getLastChild(), p);\n      case Token.HOOK:\n        return allResultsMatch(n.getFirstChild().getNext(), p)\n            && allResultsMatch(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return allResultsMatch(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return allResultsMatch(n.getFirstChild(), p)\n            && allResultsMatch(n.getLastChild(), p);\n      case Token.HOOK:\n        return allResultsMatch(n.getFirstChild().getNext(), p)\n            && allResultsMatch(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "info" : "SwitchStatement[37025-37485]:SwitchStatement[37025-37485]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[37054-37072]:SwitchCase[37054-37072]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[37079-37096]:SwitchCase[37079-37096]"
    }, {
      "left" : "return allResultsMatch(n.getLastChild(), p);",
      "right" : "return allResultsMatch(n.getLastChild(), p);",
      "info" : "ReturnStatement[37105-37149]:ReturnStatement[37105-37149]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[37156-37171]:SwitchCase[37156-37171]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[37178-37192]:SwitchCase[37178-37192]"
    }, {
      "left" : "return allResultsMatch(n.getFirstChild(), p)\n            && allResultsMatch(n.getLastChild(), p);",
      "right" : "return allResultsMatch(n.getFirstChild(), p)\n            && allResultsMatch(n.getLastChild(), p);",
      "info" : "ReturnStatement[37201-37298]:ReturnStatement[37201-37298]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[37305-37321]:SwitchCase[37305-37321]"
    }, {
      "left" : "return allResultsMatch(n.getFirstChild().getNext(), p)\n            && allResultsMatch(n.getLastChild(), p);",
      "right" : "return allResultsMatch(n.getFirstChild().getNext(), p)\n            && allResultsMatch(n.getLastChild(), p);",
      "info" : "ReturnStatement[37330-37437]:ReturnStatement[37330-37437]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[37444-37452]:SwitchCase[37444-37452]"
    }, {
      "left" : "return p.apply(n);",
      "right" : "return p.apply(n);",
      "info" : "ReturnStatement[37461-37479]:ReturnStatement[37461-37479]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37597-37603]:Modifier[37597-37603]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37604-37611]:PrimitiveType[37604-37611]"
    }, {
      "left" : "anyResultsMatch",
      "right" : "anyResultsMatch",
      "info" : "SimpleName[37612-37627]:SimpleName[37612-37627]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[37628-37634]:SingleVariableDeclaration[37628-37634]"
    }, {
      "left" : "Predicate<Node> p",
      "right" : "Predicate<Node> p",
      "info" : "SingleVariableDeclaration[37636-37653]:SingleVariableDeclaration[37636-37653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37655-38125]:Block[37655-38125]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return anyResultsMatch(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return anyResultsMatch(n.getFirstChild(), p)\n            || anyResultsMatch(n.getLastChild(), p);\n      case Token.HOOK:\n        return anyResultsMatch(n.getFirstChild().getNext(), p)\n            || anyResultsMatch(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return anyResultsMatch(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return anyResultsMatch(n.getFirstChild(), p)\n            || anyResultsMatch(n.getLastChild(), p);\n      case Token.HOOK:\n        return anyResultsMatch(n.getFirstChild().getNext(), p)\n            || anyResultsMatch(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "info" : "SwitchStatement[37661-38121]:SwitchStatement[37661-38121]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[37690-37708]:SwitchCase[37690-37708]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[37715-37732]:SwitchCase[37715-37732]"
    }, {
      "left" : "return anyResultsMatch(n.getLastChild(), p);",
      "right" : "return anyResultsMatch(n.getLastChild(), p);",
      "info" : "ReturnStatement[37741-37785]:ReturnStatement[37741-37785]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[37792-37807]:SwitchCase[37792-37807]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[37814-37828]:SwitchCase[37814-37828]"
    }, {
      "left" : "return anyResultsMatch(n.getFirstChild(), p)\n            || anyResultsMatch(n.getLastChild(), p);",
      "right" : "return anyResultsMatch(n.getFirstChild(), p)\n            || anyResultsMatch(n.getLastChild(), p);",
      "info" : "ReturnStatement[37837-37934]:ReturnStatement[37837-37934]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[37941-37957]:SwitchCase[37941-37957]"
    }, {
      "left" : "return anyResultsMatch(n.getFirstChild().getNext(), p)\n            || anyResultsMatch(n.getLastChild(), p);",
      "right" : "return anyResultsMatch(n.getFirstChild().getNext(), p)\n            || anyResultsMatch(n.getLastChild(), p);",
      "info" : "ReturnStatement[37966-38073]:ReturnStatement[37966-38073]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38080-38088]:SwitchCase[38080-38088]"
    }, {
      "left" : "return p.apply(n);",
      "right" : "return p.apply(n);",
      "info" : "ReturnStatement[38097-38115]:ReturnStatement[38097-38115]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38129-38135]:Modifier[38129-38135]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[38136-38141]:TYPE_DECLARATION_KIND[38136-38141]"
    }, {
      "left" : "NumbericResultPredicate",
      "right" : "NumbericResultPredicate",
      "info" : "SimpleName[38142-38165]:SimpleName[38142-38165]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38199-38208]:MarkerAnnotation[38199-38208]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38213-38219]:Modifier[38213-38219]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38220-38227]:PrimitiveType[38220-38227]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[38228-38233]:SimpleName[38228-38233]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38234-38240]:SingleVariableDeclaration[38234-38240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38242-38288]:Block[38242-38288]"
    }, {
      "left" : "return isNumericResultHelper(n);",
      "right" : "return isNumericResultHelper(n);",
      "info" : "ReturnStatement[38250-38282]:ReturnStatement[38250-38282]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38483-38489]:Modifier[38483-38489]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38490-38497]:PrimitiveType[38490-38497]"
    }, {
      "left" : "isNumericResult",
      "right" : "isNumericResult",
      "info" : "SimpleName[38498-38513]:SimpleName[38498-38513]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38514-38520]:SingleVariableDeclaration[38514-38520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38522-38585]:Block[38522-38585]"
    }, {
      "left" : "return allResultsMatch(n, NUMBERIC_RESULT_PREDICATE);",
      "right" : "return allResultsMatch(n, NUMBERIC_RESULT_PREDICATE);",
      "info" : "ReturnStatement[38528-38581]:ReturnStatement[38528-38581]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38589-38595]:Modifier[38589-38595]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38596-38603]:PrimitiveType[38596-38603]"
    }, {
      "left" : "isNumericResultHelper",
      "right" : "isNumericResultHelper",
      "info" : "SimpleName[38604-38625]:SimpleName[38604-38625]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38626-38632]:SingleVariableDeclaration[38626-38632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38634-39434]:Block[38634-39434]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[38640-39430]:SwitchStatement[38640-39430]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[38669-38684]:SwitchCase[38669-38684]"
    }, {
      "left" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "right" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "info" : "ReturnStatement[38693-38778]:ReturnStatement[38693-38778]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[38785-38803]:SwitchCase[38785-38803]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[38810-38827]:SwitchCase[38810-38827]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[38834-38852]:SwitchCase[38834-38852]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[38859-38877]:SwitchCase[38859-38877]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[38884-38899]:SwitchCase[38884-38899]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[38906-38921]:SwitchCase[38906-38921]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[38928-38944]:SwitchCase[38928-38944]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[38951-38966]:SwitchCase[38951-38966]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[38973-38988]:SwitchCase[38973-38988]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[38995-39010]:SwitchCase[38995-39010]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[39017-39032]:SwitchCase[39017-39032]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[39039-39054]:SwitchCase[39039-39054]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[39061-39076]:SwitchCase[39061-39076]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[39083-39098]:SwitchCase[39083-39098]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[39105-39120]:SwitchCase[39105-39120]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[39127-39145]:SwitchCase[39127-39145]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39154-39166]:ReturnStatement[39154-39166]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[39173-39189]:SwitchCase[39173-39189]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[39198-39226]:VariableDeclarationStatement[39198-39226]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[39235-39293]:IfStatement[39235-39293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39259-39293]:Block[39259-39293]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39271-39283]:ReturnStatement[39271-39283]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[39302-39365]:IfStatement[39302-39365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39331-39365]:Block[39331-39365]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39343-39355]:ReturnStatement[39343-39355]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39374-39387]:ReturnStatement[39374-39387]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39394-39402]:SwitchCase[39394-39402]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39411-39424]:ReturnStatement[39411-39424]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39438-39444]:Modifier[39438-39444]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[39445-39450]:TYPE_DECLARATION_KIND[39445-39450]"
    }, {
      "left" : "BooleanResultPredicate",
      "right" : "BooleanResultPredicate",
      "info" : "SimpleName[39451-39473]:SimpleName[39451-39473]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39507-39516]:MarkerAnnotation[39507-39516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39521-39527]:Modifier[39521-39527]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39528-39535]:PrimitiveType[39528-39535]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[39536-39541]:SimpleName[39536-39541]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39542-39548]:SingleVariableDeclaration[39542-39548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39550-39596]:Block[39550-39596]"
    }, {
      "left" : "return isBooleanResultHelper(n);",
      "right" : "return isBooleanResultHelper(n);",
      "info" : "ReturnStatement[39558-39590]:ReturnStatement[39558-39590]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39789-39795]:Modifier[39789-39795]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39796-39803]:PrimitiveType[39796-39803]"
    }, {
      "left" : "isBooleanResult",
      "right" : "isBooleanResult",
      "info" : "SimpleName[39804-39819]:SimpleName[39804-39819]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39820-39826]:SingleVariableDeclaration[39820-39826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39828-39890]:Block[39828-39890]"
    }, {
      "left" : "return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);",
      "right" : "return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);",
      "info" : "ReturnStatement[39834-39886]:ReturnStatement[39834-39886]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39894-39900]:Modifier[39894-39900]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39901-39908]:PrimitiveType[39901-39908]"
    }, {
      "left" : "isBooleanResultHelper",
      "right" : "isBooleanResultHelper",
      "info" : "SimpleName[39909-39930]:SimpleName[39909-39930]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39931-39937]:SingleVariableDeclaration[39931-39937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39939-40473]:Block[39939-40473]"
    }, {
      "left" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queries\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queries\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[39945-40469]:SwitchStatement[39945-40469]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[39994-40010]:SwitchCase[39994-40010]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[40017-40034]:SwitchCase[40017-40034]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[40062-40076]:SwitchCase[40062-40076]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[40083-40097]:SwitchCase[40083-40097]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[40104-40120]:SwitchCase[40104-40120]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[40127-40143]:SwitchCase[40127-40143]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[40150-40164]:SwitchCase[40150-40164]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[40171-40185]:SwitchCase[40171-40185]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[40192-40206]:SwitchCase[40192-40206]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[40213-40227]:SwitchCase[40213-40227]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[40251-40265]:SwitchCase[40251-40265]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[40272-40294]:SwitchCase[40272-40294]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[40320-40335]:SwitchCase[40320-40335]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[40386-40405]:SwitchCase[40386-40405]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40414-40426]:ReturnStatement[40414-40426]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40433-40441]:SwitchCase[40433-40441]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40450-40463]:ReturnStatement[40450-40463]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40479-40485]:Modifier[40479-40485]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[40486-40491]:TYPE_DECLARATION_KIND[40486-40491]"
    }, {
      "left" : "MayBeStringResultPredicate",
      "right" : "MayBeStringResultPredicate",
      "info" : "SimpleName[40492-40518]:SimpleName[40492-40518]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40552-40561]:MarkerAnnotation[40552-40561]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40566-40572]:Modifier[40566-40572]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40573-40580]:PrimitiveType[40573-40580]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[40581-40586]:SimpleName[40581-40586]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40587-40593]:SingleVariableDeclaration[40587-40593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40595-40637]:Block[40595-40637]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[40603-40631]:ReturnStatement[40603-40631]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40822-40828]:Modifier[40822-40828]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40829-40836]:PrimitiveType[40829-40836]"
    }, {
      "left" : "mayBeString",
      "right" : "mayBeString",
      "info" : "SimpleName[40837-40848]:SimpleName[40837-40848]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40849-40855]:SingleVariableDeclaration[40849-40855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40857-40895]:Block[40857-40895]"
    }, {
      "left" : "return mayBeString(n, true);",
      "right" : "return mayBeString(n, true);",
      "info" : "ReturnStatement[40863-40891]:ReturnStatement[40863-40891]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40899-40905]:Modifier[40899-40905]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40906-40913]:PrimitiveType[40906-40913]"
    }, {
      "left" : "mayBeString",
      "right" : "mayBeString",
      "info" : "SimpleName[40914-40925]:SimpleName[40914-40925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40951-41087]:Block[40951-41087]"
    }, {
      "left" : "if (recurse)",
      "right" : "if (recurse)",
      "info" : "IfStatement[40957-41083]:IfStatement[40957-41083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40970-41035]:Block[40970-41035]"
    }, {
      "left" : "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
      "right" : "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);",
      "info" : "ReturnStatement[40978-41029]:ReturnStatement[40978-41029]"
    }, {
      "left" : "allResultsMatch",
      "right" : "anyResultsMatch",
      "info" : "SimpleName[40985-41000]:SimpleName[40985-41000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41041-41083]:Block[41041-41083]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[41049-41077]:ReturnStatement[41049-41077]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41091-41097]:Modifier[41091-41097]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41098-41105]:PrimitiveType[41098-41105]"
    }, {
      "left" : "mayBeStringHelper",
      "right" : "mayBeStringHelper",
      "info" : "SimpleName[41106-41123]:SimpleName[41106-41123]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41124-41130]:SingleVariableDeclaration[41124-41130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41132-41234]:Block[41132-41234]"
    }, {
      "left" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !n.isNull();",
      "right" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !n.isNull();",
      "info" : "ReturnStatement[41138-41230]:ReturnStatement[41138-41230]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41463-41469]:Modifier[41463-41469]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41470-41477]:PrimitiveType[41470-41477]"
    }, {
      "left" : "isAssociative",
      "right" : "isAssociative",
      "info" : "SimpleName[41478-41491]:SimpleName[41478-41491]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[41492-41500]:SingleVariableDeclaration[41492-41500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41502-41730]:Block[41502-41730]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[41508-41726]:SwitchStatement[41508-41726]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[41530-41545]:SwitchCase[41530-41545]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[41552-41567]:SwitchCase[41552-41567]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[41574-41588]:SwitchCase[41574-41588]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[41595-41612]:SwitchCase[41595-41612]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[41619-41637]:SwitchCase[41619-41637]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[41644-41662]:SwitchCase[41644-41662]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41671-41683]:ReturnStatement[41671-41683]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[41690-41698]:SwitchCase[41690-41698]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41707-41720]:ReturnStatement[41707-41720]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42038-42044]:Modifier[42038-42044]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42045-42052]:PrimitiveType[42045-42052]"
    }, {
      "left" : "isCommutative",
      "right" : "isCommutative",
      "info" : "SimpleName[42053-42066]:SimpleName[42053-42066]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[42067-42075]:SingleVariableDeclaration[42067-42075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42077-42262]:Block[42077-42262]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[42083-42258]:SwitchStatement[42083-42258]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[42105-42120]:SwitchCase[42105-42120]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[42127-42144]:SwitchCase[42127-42144]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[42151-42169]:SwitchCase[42151-42169]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[42176-42194]:SwitchCase[42176-42194]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42203-42215]:ReturnStatement[42203-42215]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42222-42230]:SwitchCase[42222-42230]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42239-42252]:ReturnStatement[42239-42252]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42266-42272]:Modifier[42266-42272]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42273-42280]:PrimitiveType[42273-42280]"
    }, {
      "left" : "isAssignmentOp",
      "right" : "isAssignmentOp",
      "info" : "SimpleName[42281-42295]:SimpleName[42281-42295]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42296-42302]:SingleVariableDeclaration[42296-42302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42304-42733]:Block[42304-42733]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[42310-42711]:SwitchStatement[42310-42711]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[42338-42356]:SwitchCase[42338-42356]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[42363-42387]:SwitchCase[42363-42387]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[42394-42419]:SwitchCase[42394-42419]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[42426-42451]:SwitchCase[42426-42451]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[42458-42480]:SwitchCase[42458-42480]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[42487-42509]:SwitchCase[42487-42509]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[42516-42539]:SwitchCase[42516-42539]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[42546-42568]:SwitchCase[42546-42568]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[42575-42597]:SwitchCase[42575-42597]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[42604-42626]:SwitchCase[42604-42626]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[42633-42655]:SwitchCase[42633-42655]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[42662-42684]:SwitchCase[42662-42684]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42693-42705]:ReturnStatement[42693-42705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42716-42729]:ReturnStatement[42716-42729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42737-42743]:Modifier[42737-42743]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[42744-42747]:PrimitiveType[42744-42747]"
    }, {
      "left" : "getOpFromAssignmentOp",
      "right" : "getOpFromAssignmentOp",
      "info" : "SimpleName[42748-42769]:SimpleName[42748-42769]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42770-42776]:SingleVariableDeclaration[42770-42776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42778-43507]:Block[42778-43507]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[42784-43434]:SwitchStatement[42784-43434]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[42812-42836]:SwitchCase[42812-42836]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[42845-42864]:ReturnStatement[42845-42864]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[42871-42896]:SwitchCase[42871-42896]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[42905-42925]:ReturnStatement[42905-42925]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[42932-42957]:SwitchCase[42932-42957]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[42966-42986]:ReturnStatement[42966-42986]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[42993-43015]:SwitchCase[42993-43015]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[43024-43041]:ReturnStatement[43024-43041]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[43048-43070]:SwitchCase[43048-43070]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[43079-43096]:ReturnStatement[43079-43096]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[43103-43126]:SwitchCase[43103-43126]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[43135-43153]:ReturnStatement[43135-43153]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[43160-43182]:SwitchCase[43160-43182]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[43191-43208]:ReturnStatement[43191-43208]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[43215-43237]:SwitchCase[43215-43237]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[43246-43263]:ReturnStatement[43246-43263]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[43270-43292]:SwitchCase[43270-43292]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[43301-43318]:ReturnStatement[43301-43318]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[43325-43347]:SwitchCase[43325-43347]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[43356-43373]:ReturnStatement[43356-43373]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[43380-43402]:SwitchCase[43380-43402]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[43411-43428]:ReturnStatement[43411-43428]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assignment op:\" + n);",
      "right" : "throw new IllegalArgumentException(\"Not an assignment op:\" + n);",
      "info" : "ThrowStatement[43439-43503]:ThrowStatement[43439-43503]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43616-43622]:Modifier[43616-43622]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43623-43630]:PrimitiveType[43623-43630]"
    }, {
      "left" : "containsFunction",
      "right" : "containsFunction",
      "info" : "SimpleName[43631-43647]:SimpleName[43631-43647]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43648-43654]:SingleVariableDeclaration[43648-43654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43656-43705]:Block[43656-43705]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[43662-43701]:ReturnStatement[43662-43701]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43798-43804]:Modifier[43798-43804]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43805-43812]:PrimitiveType[43805-43812]"
    }, {
      "left" : "referencesThis",
      "right" : "referencesThis",
      "info" : "SimpleName[43813-43827]:SimpleName[43813-43827]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43828-43834]:SingleVariableDeclaration[43828-43834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43836-43963]:Block[43836-43963]"
    }, {
      "left" : "Node start = (n.isFunction()) ? n.getLastChild() : n;",
      "right" : "Node start = (n.isFunction()) ? n.getLastChild() : n;",
      "info" : "VariableDeclarationStatement[43842-43895]:VariableDeclarationStatement[43842-43895]"
    }, {
      "left" : "return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);",
      "right" : "return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);",
      "info" : "ReturnStatement[43900-43959]:ReturnStatement[43900-43959]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44019-44025]:Modifier[44019-44025]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44026-44033]:PrimitiveType[44026-44033]"
    }, {
      "left" : "isGet",
      "right" : "isGet",
      "info" : "SimpleName[44034-44039]:SimpleName[44034-44039]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44040-44046]:SingleVariableDeclaration[44040-44046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44048-44096]:Block[44048-44096]"
    }, {
      "left" : "return n.isGetProp() || n.isGetElem();",
      "right" : "return n.isGetProp() || n.isGetElem();",
      "info" : "ReturnStatement[44054-44092]:ReturnStatement[44054-44092]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44262-44268]:Modifier[44262-44268]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44269-44276]:PrimitiveType[44269-44276]"
    }, {
      "left" : "isVarDeclaration",
      "right" : "isVarDeclaration",
      "info" : "SimpleName[44277-44293]:SimpleName[44277-44293]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44294-44300]:SingleVariableDeclaration[44294-44300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44302-44479]:Block[44302-44479]"
    }, {
      "left" : "return n.isName() && n.getParent().isVar();",
      "right" : "return n.isName() && n.getParent().isVar();",
      "info" : "ReturnStatement[44432-44475]:ReturnStatement[44432-44475]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44622-44628]:Modifier[44622-44628]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44629-44633]:SimpleType[44629-44633]"
    }, {
      "left" : "getAssignedValue",
      "right" : "getAssignedValue",
      "info" : "SimpleName[44634-44650]:SimpleName[44634-44650]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44651-44657]:SingleVariableDeclaration[44651-44657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44659-44928]:Block[44659-44928]"
    }, {
      "left" : "Preconditions.checkState(n.isName());",
      "right" : "Preconditions.checkState(n.isName());",
      "info" : "ExpressionStatement[44665-44702]:ExpressionStatement[44665-44702]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[44707-44735]:VariableDeclarationStatement[44707-44735]"
    }, {
      "left" : "if (parent.isVar())",
      "right" : "if (parent.isVar())",
      "info" : "IfStatement[44740-44924]:IfStatement[44740-44924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44760-44799]:Block[44760-44799]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[44768-44793]:ReturnStatement[44768-44793]"
    }, {
      "left" : "if (parent.isAssign() && parent.getFirstChild() == n)",
      "right" : "if (parent.isAssign() && parent.getFirstChild() == n)",
      "info" : "IfStatement[44805-44924]:IfStatement[44805-44924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44859-44892]:Block[44859-44892]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[44867-44886]:ReturnStatement[44867-44886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44898-44924]:Block[44898-44924]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44906-44918]:ReturnStatement[44906-44918]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45119-45125]:Modifier[45119-45125]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45126-45133]:PrimitiveType[45126-45133]"
    }, {
      "left" : "isExprAssign",
      "right" : "isExprAssign",
      "info" : "SimpleName[45134-45146]:SimpleName[45134-45146]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45147-45153]:SingleVariableDeclaration[45147-45153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45155-45229]:Block[45155-45229]"
    }, {
      "left" : "return n.isExprResult()\n        && n.getFirstChild().isAssign();",
      "right" : "return n.isExprResult()\n        && n.getFirstChild().isAssign();",
      "info" : "ReturnStatement[45161-45225]:ReturnStatement[45161-45225]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45411-45417]:Modifier[45411-45417]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45418-45425]:PrimitiveType[45418-45425]"
    }, {
      "left" : "isExprCall",
      "right" : "isExprCall",
      "info" : "SimpleName[45426-45436]:SimpleName[45426-45436]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45437-45443]:SingleVariableDeclaration[45437-45443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45445-45517]:Block[45445-45517]"
    }, {
      "left" : "return n.isExprResult()\n        && n.getFirstChild().isCall();",
      "right" : "return n.isExprResult()\n        && n.getFirstChild().isCall();",
      "info" : "ReturnStatement[45451-45513]:ReturnStatement[45451-45513]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45589-45595]:Modifier[45589-45595]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45596-45603]:PrimitiveType[45596-45603]"
    }, {
      "left" : "isForIn",
      "right" : "isForIn",
      "info" : "SimpleName[45604-45611]:SimpleName[45604-45611]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45612-45618]:SingleVariableDeclaration[45612-45618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45620-45681]:Block[45620-45681]"
    }, {
      "left" : "return n.isFor()\n        && n.getChildCount() == 3;",
      "right" : "return n.isFor()\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[45626-45677]:ReturnStatement[45626-45677]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45765-45771]:Modifier[45765-45771]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45772-45779]:PrimitiveType[45772-45779]"
    }, {
      "left" : "isLoopStructure",
      "right" : "isLoopStructure",
      "info" : "SimpleName[45780-45795]:SimpleName[45780-45795]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45796-45802]:SingleVariableDeclaration[45796-45802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45804-45967]:Block[45804-45967]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[45810-45963]:SwitchStatement[45810-45963]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[45839-45854]:SwitchCase[45839-45854]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45861-45875]:SwitchCase[45861-45875]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45882-45899]:SwitchCase[45882-45899]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45908-45920]:ReturnStatement[45908-45920]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45927-45935]:SwitchCase[45927-45935]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45944-45957]:ReturnStatement[45944-45957]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46129-46135]:Modifier[46129-46135]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[46136-46140]:SimpleType[46136-46140]"
    }, {
      "left" : "getLoopCodeBlock",
      "right" : "getLoopCodeBlock",
      "info" : "SimpleName[46141-46157]:SimpleName[46141-46157]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46158-46164]:SingleVariableDeclaration[46158-46164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46166-46374]:Block[46166-46374]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[46172-46370]:SwitchStatement[46172-46370]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[46201-46216]:SwitchCase[46201-46216]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[46223-46240]:SwitchCase[46223-46240]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[46249-46273]:ReturnStatement[46249-46273]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[46280-46294]:SwitchCase[46280-46294]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[46303-46328]:ReturnStatement[46303-46328]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46335-46343]:SwitchCase[46335-46343]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46352-46364]:ReturnStatement[46352-46364]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46487-46493]:Modifier[46487-46493]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46494-46501]:PrimitiveType[46494-46501]"
    }, {
      "left" : "isWithinLoop",
      "right" : "isWithinLoop",
      "info" : "SimpleName[46502-46514]:SimpleName[46502-46514]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46515-46521]:SingleVariableDeclaration[46515-46521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46523-46727]:Block[46523-46727]"
    }, {
      "left" : "for (Node parent : n.getAncestors())",
      "right" : "for (Node parent : n.getAncestors())",
      "info" : "EnhancedForStatement[46529-46705]:EnhancedForStatement[46529-46705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46566-46705]:Block[46566-46705]"
    }, {
      "left" : "if (NodeUtil.isLoopStructure(parent))",
      "right" : "if (NodeUtil.isLoopStructure(parent))",
      "info" : "IfStatement[46574-46642]:IfStatement[46574-46642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46612-46642]:Block[46612-46642]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46622-46634]:ReturnStatement[46622-46634]"
    }, {
      "left" : "if (parent.isFunction())",
      "right" : "if (parent.isFunction())",
      "info" : "IfStatement[46650-46699]:IfStatement[46650-46699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46675-46699]:Block[46675-46699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46685-46691]:BreakStatement[46685-46691]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46710-46723]:ReturnStatement[46710-46723]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46821-46827]:Modifier[46821-46827]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46828-46835]:PrimitiveType[46828-46835]"
    }, {
      "left" : "isControlStructure",
      "right" : "isControlStructure",
      "info" : "SimpleName[46836-46854]:SimpleName[46836-46854]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46855-46861]:SingleVariableDeclaration[46855-46861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46863-47219]:Block[46863-47219]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[46869-47215]:SwitchStatement[46869-47215]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[46898-46913]:SwitchCase[46898-46913]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[46920-46934]:SwitchCase[46920-46934]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[46941-46958]:SwitchCase[46941-46958]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[46965-46981]:SwitchCase[46965-46981]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[46988-47002]:SwitchCase[46988-47002]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[47009-47026]:SwitchCase[47009-47026]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[47033-47048]:SwitchCase[47033-47048]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[47055-47072]:SwitchCase[47055-47072]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[47079-47097]:SwitchCase[47079-47097]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[47104-47120]:SwitchCase[47104-47120]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[47127-47151]:SwitchCase[47127-47151]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47160-47172]:ReturnStatement[47160-47172]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47179-47187]:SwitchCase[47179-47187]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47196-47209]:ReturnStatement[47196-47209]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47330-47336]:Modifier[47330-47336]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47337-47344]:PrimitiveType[47337-47344]"
    }, {
      "left" : "isControlStructureCodeBlock",
      "right" : "isControlStructureCodeBlock",
      "info" : "SimpleName[47345-47372]:SimpleName[47345-47372]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[47373-47384]:SingleVariableDeclaration[47373-47384]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47386-47392]:SingleVariableDeclaration[47386-47392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47394-48109]:Block[47394-48109]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[47400-48105]:SwitchStatement[47400-48105]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[47434-47449]:SwitchCase[47434-47449]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[47456-47473]:SwitchCase[47456-47473]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[47480-47497]:SwitchCase[47480-47497]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[47504-47520]:SwitchCase[47504-47520]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[47529-47563]:ReturnStatement[47529-47563]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[47570-47584]:SwitchCase[47570-47584]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[47593-47628]:ReturnStatement[47593-47628]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[47635-47649]:SwitchCase[47635-47649]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[47658-47693]:ReturnStatement[47658-47693]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[47700-47715]:SwitchCase[47700-47715]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[47724-47789]:ReturnStatement[47724-47789]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[47796-47813]:SwitchCase[47796-47813]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[47822-47856]:ReturnStatement[47822-47856]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[47863-47881]:SwitchCase[47863-47881]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[47888-47904]:SwitchCase[47888-47904]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[47913-47948]:ReturnStatement[47913-47948]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[47955-47979]:SwitchCase[47955-47979]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47988-48000]:ReturnStatement[47988-48000]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48007-48015]:SwitchCase[48007-48015]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[48024-48077]:ExpressionStatement[48024-48077]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48086-48099]:ReturnStatement[48086-48099]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48324-48330]:Modifier[48324-48330]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[48331-48335]:SimpleType[48331-48335]"
    }, {
      "left" : "getConditionExpression",
      "right" : "getConditionExpression",
      "info" : "SimpleName[48336-48358]:SimpleName[48336-48358]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48359-48365]:SingleVariableDeclaration[48359-48365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48367-48913]:Block[48367-48913]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[48373-48834]:SwitchStatement[48373-48834]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[48402-48416]:SwitchCase[48402-48416]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[48423-48440]:SwitchCase[48423-48440]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[48449-48474]:ReturnStatement[48449-48474]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[48481-48495]:SwitchCase[48481-48495]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[48504-48528]:ReturnStatement[48504-48528]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[48535-48550]:SwitchCase[48535-48550]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[48559-48706]:SwitchStatement[48559-48706]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[48598-48605]:SwitchCase[48598-48605]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48618-48630]:ReturnStatement[48618-48630]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[48641-48648]:SwitchCase[48641-48648]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[48661-48696]:ReturnStatement[48661-48696]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[48715-48784]:ThrowStatement[48715-48784]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[48791-48807]:SwitchCase[48791-48807]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48816-48828]:ReturnStatement[48816-48828]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[48839-48909]:ThrowStatement[48839-48909]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49003-49009]:Modifier[49003-49009]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49010-49017]:PrimitiveType[49010-49017]"
    }, {
      "left" : "isStatementBlock",
      "right" : "isStatementBlock",
      "info" : "SimpleName[49018-49034]:SimpleName[49018-49034]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49035-49041]:SingleVariableDeclaration[49035-49041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49043-49088]:Block[49043-49088]"
    }, {
      "left" : "return n.isScript() || n.isBlock();",
      "right" : "return n.isScript() || n.isBlock();",
      "info" : "ReturnStatement[49049-49084]:ReturnStatement[49049-49084]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49158-49164]:Modifier[49158-49164]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49165-49172]:PrimitiveType[49165-49172]"
    }, {
      "left" : "isStatement",
      "right" : "isStatement",
      "info" : "SimpleName[49173-49184]:SimpleName[49173-49184]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49185-49191]:SingleVariableDeclaration[49185-49191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49193-49243]:Block[49193-49243]"
    }, {
      "left" : "return isStatementParent(n.getParent());",
      "right" : "return isStatementParent(n.getParent());",
      "info" : "ReturnStatement[49199-49239]:ReturnStatement[49199-49239]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49247-49253]:Modifier[49247-49253]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49254-49261]:PrimitiveType[49254-49261]"
    }, {
      "left" : "isStatementParent",
      "right" : "isStatementParent",
      "info" : "SimpleName[49262-49279]:SimpleName[49262-49279]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[49280-49291]:SingleVariableDeclaration[49280-49291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49293-49708]:Block[49293-49708]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[49494-49535]:ExpressionStatement[49494-49535]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[49540-49704]:SwitchStatement[49540-49704]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[49574-49592]:SwitchCase[49574-49592]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[49599-49616]:SwitchCase[49599-49616]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[49623-49640]:SwitchCase[49623-49640]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49649-49661]:ReturnStatement[49649-49661]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49668-49676]:SwitchCase[49668-49676]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49685-49698]:ReturnStatement[49685-49698]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49769-49775]:Modifier[49769-49775]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49776-49783]:PrimitiveType[49776-49783]"
    }, {
      "left" : "isSwitchCase",
      "right" : "isSwitchCase",
      "info" : "SimpleName[49784-49796]:SimpleName[49784-49796]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49797-49803]:SingleVariableDeclaration[49797-49803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49805-49854]:Block[49805-49854]"
    }, {
      "left" : "return n.isCase() || n.isDefaultCase();",
      "right" : "return n.isCase() || n.isDefaultCase();",
      "info" : "ReturnStatement[49811-49850]:ReturnStatement[49811-49850]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50023-50029]:Modifier[50023-50029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[50030-50037]:PrimitiveType[50030-50037]"
    }, {
      "left" : "isReferenceName",
      "right" : "isReferenceName",
      "info" : "SimpleName[50038-50053]:SimpleName[50038-50053]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50054-50060]:SingleVariableDeclaration[50054-50060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50062-50118]:Block[50062-50118]"
    }, {
      "left" : "return n.isName() && !n.getString().isEmpty();",
      "right" : "return n.isName() && !n.getString().isEmpty();",
      "info" : "ReturnStatement[50068-50114]:ReturnStatement[50068-50114]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50185-50191]:Modifier[50185-50191]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[50192-50199]:PrimitiveType[50192-50199]"
    }, {
      "left" : "isTryFinallyNode",
      "right" : "isTryFinallyNode",
      "info" : "SimpleName[50200-50216]:SimpleName[50200-50216]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50217-50228]:SingleVariableDeclaration[50217-50228]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[50230-50240]:SingleVariableDeclaration[50230-50240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50242-50347]:Block[50242-50347]"
    }, {
      "left" : "return parent.isTry() && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.isTry() && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[50248-50343]:ReturnStatement[50248-50343]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50405-50411]:Modifier[50405-50411]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[50412-50419]:PrimitiveType[50412-50419]"
    }, {
      "left" : "isTryCatchNodeContainer",
      "right" : "isTryCatchNodeContainer",
      "info" : "SimpleName[50420-50443]:SimpleName[50420-50443]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[50444-50450]:SingleVariableDeclaration[50444-50450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50452-50566]:Block[50452-50566]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[50458-50486]:VariableDeclarationStatement[50458-50486]"
    }, {
      "left" : "return parent.isTry()\n        && parent.getFirstChild().getNext() == n;",
      "right" : "return parent.isTry()\n        && parent.getFirstChild().getNext() == n;",
      "info" : "ReturnStatement[50491-50562]:ReturnStatement[50491-50562]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50644-50650]:Modifier[50644-50650]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50651-50655]:PrimitiveType[50651-50655]"
    }, {
      "left" : "removeChild",
      "right" : "removeChild",
      "info" : "SimpleName[50656-50667]:SimpleName[50656-50667]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[50668-50679]:SingleVariableDeclaration[50668-50679]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[50681-50690]:SingleVariableDeclaration[50681-50690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50692-52950]:Block[50692-52950]"
    }, {
      "left" : "if (isTryFinallyNode(parent, node))",
      "right" : "if (isTryFinallyNode(parent, node))",
      "info" : "IfStatement[50698-52946]:IfStatement[50698-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50734-51008]:Block[50734-51008]"
    }, {
      "left" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "right" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "info" : "IfStatement[50742-51002]:IfStatement[50742-51002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50795-50900]:Block[50795-50900]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50867-50892]:ExpressionStatement[50867-50892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50906-51002]:Block[50906-51002]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[50972-50994]:ExpressionStatement[50972-50994]"
    }, {
      "left" : "if (node.isCatch())",
      "right" : "if (node.isCatch())",
      "info" : "IfStatement[51014-52946]:IfStatement[51014-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51034-51258]:Block[51034-51258]"
    }, {
      "left" : "Node tryNode = node.getParent().getParent();",
      "right" : "Node tryNode = node.getParent().getParent();",
      "info" : "VariableDeclarationStatement[51115-51159]:VariableDeclarationStatement[51115-51159]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[51166-51221]:ExpressionStatement[51166-51221]"
    }, {
      "left" : "node.detachFromParent();",
      "right" : "node.detachFromParent();",
      "info" : "ExpressionStatement[51228-51252]:ExpressionStatement[51228-51252]"
    }, {
      "left" : "if (isTryCatchNodeContainer(node))",
      "right" : "if (isTryCatchNodeContainer(node))",
      "info" : "IfStatement[51264-52946]:IfStatement[51264-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51299-51557]:Block[51299-51557]"
    }, {
      "left" : "Node tryNode = node.getParent();",
      "right" : "Node tryNode = node.getParent();",
      "info" : "VariableDeclarationStatement[51428-51460]:VariableDeclarationStatement[51428-51460]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[51467-51522]:ExpressionStatement[51467-51522]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[51529-51551]:ExpressionStatement[51529-51551]"
    }, {
      "left" : "if (node.isBlock())",
      "right" : "if (node.isBlock())",
      "info" : "IfStatement[51563-52946]:IfStatement[51563-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51583-51715]:Block[51583-51715]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[51687-51709]:ExpressionStatement[51687-51709]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "info" : "IfStatement[51721-52946]:IfStatement[51721-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51781-51875]:Block[51781-51875]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51844-51869]:ExpressionStatement[51844-51869]"
    }, {
      "left" : "if (parent.isVar())",
      "right" : "if (parent.isVar())",
      "info" : "IfStatement[51881-52946]:IfStatement[51881-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51901-52220]:Block[51901-52220]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[51909-52214]:IfStatement[51909-52214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51943-51986]:Block[51943-51986]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51953-51978]:ExpressionStatement[51953-51978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51992-52214]:Block[51992-52214]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[52067-52092]:ExpressionStatement[52067-52092]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[52166-52206]:ExpressionStatement[52166-52206]"
    }, {
      "left" : "if (parent.isLabel()\n        && node == parent.getLastChild())",
      "right" : "if (parent.isLabel()\n        && node == parent.getLastChild())",
      "info" : "IfStatement[52226-52946]:IfStatement[52226-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52289-52507]:Block[52289-52507]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[52360-52385]:ExpressionStatement[52360-52385]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[52461-52501]:ExpressionStatement[52461-52501]"
    }, {
      "left" : "if (parent.isFor()\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.isFor()\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[52513-52946]:IfStatement[52513-52946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52572-52801]:Block[52572-52801]"
    }, {
      "left" : "parent.replaceChild(node, IR.empty());",
      "right" : "parent.replaceChild(node, IR.empty());",
      "info" : "ExpressionStatement[52757-52795]:ExpressionStatement[52757-52795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52807-52946]:Block[52807-52946]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \" + parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \" + parent.toString());",
      "info" : "ThrowStatement[52815-52940]:ThrowStatement[52815-52940]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53014-53020]:Modifier[53014-53020]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53021-53025]:PrimitiveType[53021-53025]"
    }, {
      "left" : "maybeAddFinally",
      "right" : "maybeAddFinally",
      "info" : "SimpleName[53026-53041]:SimpleName[53026-53041]"
    }, {
      "left" : "Node tryNode",
      "right" : "Node tryNode",
      "info" : "SingleVariableDeclaration[53042-53054]:SingleVariableDeclaration[53042-53054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53056-53216]:Block[53056-53216]"
    }, {
      "left" : "Preconditions.checkState(tryNode.isTry());",
      "right" : "Preconditions.checkState(tryNode.isTry());",
      "info" : "ExpressionStatement[53062-53104]:ExpressionStatement[53062-53104]"
    }, {
      "left" : "if (!NodeUtil.hasFinally(tryNode))",
      "right" : "if (!NodeUtil.hasFinally(tryNode))",
      "info" : "IfStatement[53109-53212]:IfStatement[53109-53212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53144-53212]:Block[53144-53212]"
    }, {
      "left" : "tryNode.addChildrenToBack(IR.block().srcref(tryNode));",
      "right" : "tryNode.addChildrenToBack(IR.block().srcref(tryNode));",
      "info" : "ExpressionStatement[53152-53206]:ExpressionStatement[53152-53206]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53318-53324]:Modifier[53318-53324]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53325-53332]:PrimitiveType[53325-53332]"
    }, {
      "left" : "tryMergeBlock",
      "right" : "tryMergeBlock",
      "info" : "SimpleName[53333-53346]:SimpleName[53333-53346]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[53347-53357]:SingleVariableDeclaration[53347-53357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53359-53894]:Block[53359-53894]"
    }, {
      "left" : "Preconditions.checkState(block.isBlock());",
      "right" : "Preconditions.checkState(block.isBlock());",
      "info" : "ExpressionStatement[53365-53407]:ExpressionStatement[53365-53407]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[53412-53444]:VariableDeclarationStatement[53412-53444]"
    }, {
      "left" : "if (isStatementBlock(parent))",
      "right" : "if (isStatementBlock(parent))",
      "info" : "IfStatement[53575-53890]:IfStatement[53575-53890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53605-53857]:Block[53605-53857]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[53613-53635]:VariableDeclarationStatement[53613-53635]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[53642-53799]:WhileStatement[53642-53799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53670-53799]:Block[53670-53799]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[53680-53718]:VariableDeclarationStatement[53680-53718]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[53727-53765]:ExpressionStatement[53727-53765]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[53774-53791]:ExpressionStatement[53774-53791]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[53806-53832]:ExpressionStatement[53806-53832]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53839-53851]:ReturnStatement[53839-53851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53863-53890]:Block[53863-53890]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53871-53884]:ReturnStatement[53871-53884]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53987-53993]:Modifier[53987-53993]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53994-54001]:PrimitiveType[53994-54001]"
    }, {
      "left" : "isCallOrNew",
      "right" : "isCallOrNew",
      "info" : "SimpleName[54002-54013]:SimpleName[54002-54013]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[54014-54023]:SingleVariableDeclaration[54014-54023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54025-54072]:Block[54025-54072]"
    }, {
      "left" : "return node.isCall() || node.isNew();",
      "right" : "return node.isCall() || node.isNew();",
      "info" : "ReturnStatement[54031-54068]:ReturnStatement[54031-54068]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54142-54148]:Modifier[54142-54148]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[54149-54153]:SimpleType[54149-54153]"
    }, {
      "left" : "getFunctionBody",
      "right" : "getFunctionBody",
      "info" : "SimpleName[54154-54169]:SimpleName[54154-54169]"
    }, {
      "left" : "Node fn",
      "right" : "Node fn",
      "info" : "SingleVariableDeclaration[54170-54177]:SingleVariableDeclaration[54170-54177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54179-54264]:Block[54179-54264]"
    }, {
      "left" : "Preconditions.checkArgument(fn.isFunction());",
      "right" : "Preconditions.checkArgument(fn.isFunction());",
      "info" : "ExpressionStatement[54185-54230]:ExpressionStatement[54185-54230]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[54235-54260]:ReturnStatement[54235-54260]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54507-54513]:Modifier[54507-54513]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54514-54521]:PrimitiveType[54514-54521]"
    }, {
      "left" : "isFunctionDeclaration",
      "right" : "isFunctionDeclaration",
      "info" : "SimpleName[54522-54543]:SimpleName[54522-54543]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54544-54550]:SingleVariableDeclaration[54544-54550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54552-54602]:Block[54552-54602]"
    }, {
      "left" : "return n.isFunction() && isStatement(n);",
      "right" : "return n.isFunction() && isStatement(n);",
      "info" : "ReturnStatement[54558-54598]:ReturnStatement[54558-54598]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54792-54798]:Modifier[54792-54798]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54799-54806]:PrimitiveType[54799-54806]"
    }, {
      "left" : "isHoistedFunctionDeclaration",
      "right" : "isHoistedFunctionDeclaration",
      "info" : "SimpleName[54807-54835]:SimpleName[54807-54835]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[54836-54842]:SingleVariableDeclaration[54836-54842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54844-54978]:Block[54844-54978]"
    }, {
      "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().isScript()\n            || n.getParent().getParent().isFunction());",
      "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().isScript()\n            || n.getParent().getParent().isFunction());",
      "info" : "ReturnStatement[54850-54974]:ReturnStatement[54850-54974]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55638-55644]:Modifier[55638-55644]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55645-55652]:PrimitiveType[55645-55652]"
    }, {
      "left" : "isFunctionExpression",
      "right" : "isFunctionExpression",
      "info" : "SimpleName[55653-55673]:SimpleName[55653-55673]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55674-55680]:SingleVariableDeclaration[55674-55680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55682-55733]:Block[55682-55733]"
    }, {
      "left" : "return n.isFunction() && !isStatement(n);",
      "right" : "return n.isFunction() && !isStatement(n);",
      "info" : "ReturnStatement[55688-55729]:ReturnStatement[55688-55729]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55867-55873]:Modifier[55867-55873]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55874-55881]:PrimitiveType[55874-55881]"
    }, {
      "left" : "isBleedingFunctionName",
      "right" : "isBleedingFunctionName",
      "info" : "SimpleName[55882-55904]:SimpleName[55882-55904]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55905-55911]:SingleVariableDeclaration[55905-55911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55913-56016]:Block[55913-56016]"
    }, {
      "left" : "return n.isName() && !n.getString().isEmpty() &&\n        isFunctionExpression(n.getParent());",
      "right" : "return n.isName() && !n.getString().isEmpty() &&\n        isFunctionExpression(n.getParent());",
      "info" : "ReturnStatement[55919-56012]:ReturnStatement[55919-56012]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56211-56217]:Modifier[56211-56217]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56218-56225]:PrimitiveType[56218-56225]"
    }, {
      "left" : "isEmptyFunctionExpression",
      "right" : "isEmptyFunctionExpression",
      "info" : "SimpleName[56226-56251]:SimpleName[56226-56251]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[56252-56261]:SingleVariableDeclaration[56252-56261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56263-56344]:Block[56263-56344]"
    }, {
      "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "info" : "ReturnStatement[56269-56340]:ReturnStatement[56269-56340]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56494-56500]:Modifier[56494-56500]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56501-56508]:PrimitiveType[56501-56508]"
    }, {
      "left" : "isVarArgsFunction",
      "right" : "isVarArgsFunction",
      "info" : "SimpleName[56509-56526]:SimpleName[56509-56526]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[56527-56540]:SingleVariableDeclaration[56527-56540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56542-56759]:Block[56542-56759]"
    }, {
      "left" : "Preconditions.checkArgument(function.isFunction());",
      "right" : "Preconditions.checkArgument(function.isFunction());",
      "info" : "ExpressionStatement[56592-56643]:ExpressionStatement[56592-56643]"
    }, {
      "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);",
      "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        MATCH_NOT_FUNCTION);",
      "info" : "ReturnStatement[56648-56755]:ReturnStatement[56648-56755]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56863-56869]:Modifier[56863-56869]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56870-56877]:PrimitiveType[56870-56877]"
    }, {
      "left" : "isObjectCallMethod",
      "right" : "isObjectCallMethod",
      "info" : "SimpleName[56878-56896]:SimpleName[56878-56896]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[56897-56910]:SingleVariableDeclaration[56897-56910]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[56912-56929]:SingleVariableDeclaration[56912-56929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56931-57336]:Block[56931-57336]"
    }, {
      "left" : "if (callNode.isCall())",
      "right" : "if (callNode.isCall())",
      "info" : "IfStatement[56937-57314]:IfStatement[56937-57314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56960-57314]:Block[56960-57314]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[56968-57031]:VariableDeclarationStatement[56968-57031]"
    }, {
      "left" : "if (isGet(functionIndentifyingExpression))",
      "right" : "if (isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[57038-57308]:IfStatement[57038-57308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57081-57308]:Block[57081-57308]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[57091-57149]:VariableDeclarationStatement[57091-57149]"
    }, {
      "left" : "if (last != null && last.isString())",
      "right" : "if (last != null && last.isString())",
      "info" : "IfStatement[57158-57300]:IfStatement[57158-57300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57195-57300]:Block[57195-57300]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[57207-57242]:VariableDeclarationStatement[57207-57242]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[57253-57290]:ReturnStatement[57253-57290]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57319-57332]:ReturnStatement[57319-57332]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57471-57477]:Modifier[57471-57477]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57478-57485]:PrimitiveType[57478-57485]"
    }, {
      "left" : "isFunctionObjectCall",
      "right" : "isFunctionObjectCall",
      "info" : "SimpleName[57486-57506]:SimpleName[57486-57506]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[57507-57520]:SingleVariableDeclaration[57507-57520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57522-57576]:Block[57522-57576]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[57528-57572]:ReturnStatement[57528-57572]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57712-57718]:Modifier[57712-57718]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[57719-57726]:PrimitiveType[57719-57726]"
    }, {
      "left" : "isFunctionObjectApply",
      "right" : "isFunctionObjectApply",
      "info" : "SimpleName[57727-57748]:SimpleName[57727-57748]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[57749-57762]:SingleVariableDeclaration[57749-57762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57764-57819]:Block[57764-57819]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[57770-57815]:ReturnStatement[57770-57815]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58172-58178]:Modifier[58172-58178]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58179-58186]:PrimitiveType[58179-58186]"
    }, {
      "left" : "isVarOrSimpleAssignLhs",
      "right" : "isVarOrSimpleAssignLhs",
      "info" : "SimpleName[58187-58209]:SimpleName[58187-58209]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58210-58216]:SingleVariableDeclaration[58210-58216]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[58218-58229]:SingleVariableDeclaration[58218-58229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58231-58328]:Block[58231-58328]"
    }, {
      "left" : "return (parent.isAssign() && parent.getFirstChild() == n) ||\n           parent.isVar();",
      "right" : "return (parent.isAssign() && parent.getFirstChild() == n) ||\n           parent.isVar();",
      "info" : "ReturnStatement[58237-58324]:ReturnStatement[58237-58324]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58865-58871]:Modifier[58865-58871]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58872-58878]:Modifier[58872-58878]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58879-58886]:PrimitiveType[58879-58886]"
    }, {
      "left" : "isLValue",
      "right" : "isLValue",
      "info" : "SimpleName[58887-58895]:SimpleName[58887-58895]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58896-58902]:SingleVariableDeclaration[58896-58902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58904-59429]:Block[58904-59429]"
    }, {
      "left" : "Preconditions.checkArgument(n.isName() || n.isGetProp() ||\n        n.isGetElem());",
      "right" : "Preconditions.checkArgument(n.isName() || n.isGetProp() ||\n        n.isGetElem());",
      "info" : "ExpressionStatement[58910-58992]:ExpressionStatement[58910-58992]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[58997-59025]:VariableDeclarationStatement[58997-59025]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[59030-59077]:IfStatement[59030-59077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59050-59077]:Block[59050-59077]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59058-59071]:ReturnStatement[59058-59071]"
    }, {
      "left" : "return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n)\n        || parent.isVar()\n        || (parent.isFunction() && parent.getFirstChild() == n)\n        || parent.isDec()\n        || parent.isInc()\n        || parent.isParamList()\n        || parent.isCatch();",
      "right" : "return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n)\n        || parent.isVar()\n        || (parent.isFunction() && parent.getFirstChild() == n)\n        || parent.isDec()\n        || parent.isInc()\n        || parent.isParamList()\n        || parent.isCatch();",
      "info" : "ReturnStatement[59082-59425]:ReturnStatement[59082-59425]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59625-59631]:Modifier[59625-59631]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[59632-59639]:PrimitiveType[59632-59639]"
    }, {
      "left" : "isObjectLitKey",
      "right" : "isObjectLitKey",
      "info" : "SimpleName[59640-59654]:SimpleName[59640-59654]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[59655-59664]:SingleVariableDeclaration[59655-59664]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[59666-59677]:SingleVariableDeclaration[59666-59677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59679-59846]:Block[59679-59846]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }",
      "info" : "SwitchStatement[59685-59824]:SwitchStatement[59685-59824]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[59717-59739]:SwitchCase[59717-59739]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[59746-59768]:SwitchCase[59746-59768]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[59775-59797]:SwitchCase[59775-59797]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[59806-59818]:ReturnStatement[59806-59818]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59829-59842]:ReturnStatement[59829-59842]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59934-59940]:Modifier[59934-59940]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[59941-59947]:SimpleType[59941-59947]"
    }, {
      "left" : "getObjectLitKeyName",
      "right" : "getObjectLitKeyName",
      "info" : "SimpleName[59948-59967]:SimpleName[59948-59967]"
    }, {
      "left" : "Node key",
      "right" : "Node key",
      "info" : "SingleVariableDeclaration[59968-59976]:SingleVariableDeclaration[59968-59976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59978-60206]:Block[59978-60206]"
    }, {
      "left" : "switch (key.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return key.getString();\n    }",
      "right" : "switch (key.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return key.getString();\n    }",
      "info" : "SwitchStatement[59984-60133]:SwitchStatement[59984-60133]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[60015-60037]:SwitchCase[60015-60037]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[60044-60066]:SwitchCase[60044-60066]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[60073-60095]:SwitchCase[60073-60095]"
    }, {
      "left" : "return key.getString();",
      "right" : "return key.getString();",
      "info" : "ReturnStatement[60104-60127]:ReturnStatement[60104-60127]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "right" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "info" : "ThrowStatement[60138-60202]:ThrowStatement[60138-60202]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60311-60317]:Modifier[60311-60317]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[60318-60324]:SimpleType[60318-60324]"
    }, {
      "left" : "getObjectLitKeyTypeFromValueType",
      "right" : "getObjectLitKeyTypeFromValueType",
      "info" : "SimpleName[60325-60357]:SimpleName[60325-60357]"
    }, {
      "left" : "Node key",
      "right" : "Node key",
      "info" : "SingleVariableDeclaration[60358-60366]:SingleVariableDeclaration[60358-60366]"
    }, {
      "left" : "JSType valueType",
      "right" : "JSType valueType",
      "info" : "SingleVariableDeclaration[60368-60384]:SingleVariableDeclaration[60368-60384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60386-61245]:Block[60386-61245]"
    }, {
      "left" : "if (valueType != null)",
      "right" : "if (valueType != null)",
      "info" : "IfStatement[60392-61219]:IfStatement[60392-61219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60415-61219]:Block[60415-61219]"
    }, {
      "left" : "switch (key.getType()) {\n        case Token.GETTER_DEF:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = valueType.toMaybeFunctionType();\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SETTER_DEF:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = valueType.toMaybeFunctionType();\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "right" : "switch (key.getType()) {\n        case Token.GETTER_DEF:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = valueType.toMaybeFunctionType();\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SETTER_DEF:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = valueType.toMaybeFunctionType();\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "info" : "SwitchStatement[60423-61213]:SwitchStatement[60423-61213]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[60456-60478]:SwitchCase[60456-60478]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[60542-60746]:IfStatement[60542-60746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60574-60702]:Block[60574-60702]"
    }, {
      "left" : "FunctionType fntype = valueType.toMaybeFunctionType();",
      "right" : "FunctionType fntype = valueType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[60588-60642]:VariableDeclarationStatement[60588-60642]"
    }, {
      "left" : "valueType = fntype.getReturnType();",
      "right" : "valueType = fntype.getReturnType();",
      "info" : "ExpressionStatement[60655-60690]:ExpressionStatement[60655-60690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60708-60746]:Block[60708-60746]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[60722-60734]:ReturnStatement[60722-60734]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60757-60763]:BreakStatement[60757-60763]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[60772-60794]:SwitchCase[60772-60794]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[60805-61188]:IfStatement[60805-61188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60837-61144]:Block[60837-61144]"
    }, {
      "left" : "FunctionType fntype = valueType.toMaybeFunctionType();",
      "right" : "FunctionType fntype = valueType.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[60906-60960]:VariableDeclarationStatement[60906-60960]"
    }, {
      "left" : "Node param = fntype.getParametersNode().getFirstChild();",
      "right" : "Node param = fntype.getParametersNode().getFirstChild();",
      "info" : "VariableDeclarationStatement[60973-61029]:VariableDeclarationStatement[60973-61029]"
    }, {
      "left" : "valueType = param.getJSType();",
      "right" : "valueType = param.getJSType();",
      "info" : "ExpressionStatement[61102-61132]:ExpressionStatement[61102-61132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61150-61188]:Block[61150-61188]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[61164-61176]:ReturnStatement[61164-61176]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61199-61205]:BreakStatement[61199-61205]"
    }, {
      "left" : "return valueType;",
      "right" : "return valueType;",
      "info" : "ReturnStatement[61224-61241]:ReturnStatement[61224-61241]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61416-61422]:Modifier[61416-61422]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[61423-61430]:PrimitiveType[61423-61430]"
    }, {
      "left" : "isGetOrSetKey",
      "right" : "isGetOrSetKey",
      "info" : "SimpleName[61431-61444]:SimpleName[61431-61444]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[61445-61454]:SingleVariableDeclaration[61445-61454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61456-61594]:Block[61456-61594]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }",
      "info" : "SwitchStatement[61462-61572]:SwitchStatement[61462-61572]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[61494-61516]:SwitchCase[61494-61516]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[61523-61545]:SwitchCase[61523-61545]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61554-61566]:ReturnStatement[61554-61566]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61577-61590]:ReturnStatement[61577-61590]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61865-61871]:Modifier[61865-61871]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[61872-61878]:SimpleType[61872-61878]"
    }, {
      "left" : "opToStr",
      "right" : "opToStr",
      "info" : "SimpleName[61879-61886]:SimpleName[61879-61886]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[61887-61899]:SingleVariableDeclaration[61887-61899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61901-63511]:Block[61901-63511]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[61907-63507]:SwitchStatement[61907-63507]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[61933-61950]:SwitchCase[61933-61950]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[61951-61962]:ReturnStatement[61951-61962]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[61969-61983]:SwitchCase[61969-61983]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[61984-61996]:ReturnStatement[61984-61996]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[62003-62021]:SwitchCase[62003-62021]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[62022-62033]:ReturnStatement[62022-62033]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[62040-62055]:SwitchCase[62040-62055]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[62056-62068]:ReturnStatement[62056-62068]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[62075-62093]:SwitchCase[62075-62093]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[62094-62105]:ReturnStatement[62094-62105]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[62112-62128]:SwitchCase[62112-62128]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[62129-62142]:ReturnStatement[62129-62142]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[62149-62163]:SwitchCase[62149-62163]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[62164-62176]:ReturnStatement[62164-62176]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[62183-62198]:SwitchCase[62183-62198]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[62199-62210]:ReturnStatement[62199-62210]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[62217-62231]:SwitchCase[62217-62231]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[62232-62244]:ReturnStatement[62232-62244]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[62251-62267]:SwitchCase[62251-62267]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[62268-62281]:ReturnStatement[62268-62281]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[62288-62303]:SwitchCase[62288-62303]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[62304-62316]:ReturnStatement[62304-62316]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[62323-62337]:SwitchCase[62323-62337]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[62338-62350]:ReturnStatement[62338-62350]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[62357-62371]:SwitchCase[62357-62371]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[62372-62384]:ReturnStatement[62372-62384]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[62391-62405]:SwitchCase[62391-62405]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[62406-62417]:ReturnStatement[62406-62417]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[62424-62440]:SwitchCase[62424-62440]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[62441-62454]:ReturnStatement[62441-62454]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[62461-62476]:SwitchCase[62461-62476]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[62477-62489]:ReturnStatement[62477-62489]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[62496-62510]:SwitchCase[62496-62510]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[62511-62523]:ReturnStatement[62511-62523]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[62530-62544]:SwitchCase[62530-62544]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[62545-62556]:ReturnStatement[62545-62556]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[62563-62578]:SwitchCase[62563-62578]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[62579-62590]:ReturnStatement[62579-62590]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[62597-62612]:SwitchCase[62597-62612]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[62613-62624]:ReturnStatement[62613-62624]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[62631-62646]:SwitchCase[62631-62646]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[62647-62658]:ReturnStatement[62647-62658]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[62665-62683]:SwitchCase[62665-62683]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[62684-62695]:ReturnStatement[62684-62695]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[62702-62717]:SwitchCase[62702-62717]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[62718-62729]:ReturnStatement[62718-62729]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[62736-62751]:SwitchCase[62736-62751]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[62752-62763]:ReturnStatement[62752-62763]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[62770-62785]:SwitchCase[62770-62785]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[62786-62797]:ReturnStatement[62786-62797]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[62804-62819]:SwitchCase[62804-62819]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[62820-62831]:ReturnStatement[62820-62831]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[62838-62856]:SwitchCase[62838-62856]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[62857-62868]:ReturnStatement[62857-62868]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[62875-62899]:SwitchCase[62875-62899]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[62900-62912]:ReturnStatement[62900-62912]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[62919-62944]:SwitchCase[62919-62944]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[62945-62957]:ReturnStatement[62945-62957]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[62964-62989]:SwitchCase[62964-62989]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[62990-63002]:ReturnStatement[62990-63002]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[63009-63031]:SwitchCase[63009-63031]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[63032-63045]:ReturnStatement[63032-63045]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[63052-63074]:SwitchCase[63052-63074]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[63075-63088]:ReturnStatement[63075-63088]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[63095-63118]:SwitchCase[63095-63118]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[63119-63133]:ReturnStatement[63119-63133]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[63140-63162]:SwitchCase[63140-63162]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[63163-63175]:ReturnStatement[63163-63175]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[63182-63204]:SwitchCase[63182-63204]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[63205-63217]:ReturnStatement[63205-63217]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[63224-63246]:SwitchCase[63224-63246]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[63247-63259]:ReturnStatement[63247-63259]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[63266-63288]:SwitchCase[63266-63288]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[63289-63301]:ReturnStatement[63289-63301]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[63308-63330]:SwitchCase[63308-63330]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[63331-63343]:ReturnStatement[63331-63343]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[63350-63366]:SwitchCase[63350-63366]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[63367-63381]:ReturnStatement[63367-63381]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[63388-63406]:SwitchCase[63388-63406]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[63407-63423]:ReturnStatement[63407-63423]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[63430-63452]:SwitchCase[63430-63452]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[63453-63473]:ReturnStatement[63453-63473]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[63480-63488]:SwitchCase[63480-63488]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[63489-63501]:ReturnStatement[63489-63501]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63789-63795]:Modifier[63789-63795]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[63796-63802]:SimpleType[63796-63802]"
    }, {
      "left" : "opToStrNoFail",
      "right" : "opToStrNoFail",
      "info" : "SimpleName[63803-63816]:SimpleName[63803-63816]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[63817-63829]:SingleVariableDeclaration[63817-63829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63831-64018]:Block[63831-64018]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[63837-63868]:VariableDeclarationStatement[63837-63868]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[63873-63998]:IfStatement[63873-63998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63890-63998]:Block[63890-63998]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[63898-63992]:ThrowStatement[63898-63992]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[64003-64014]:ReturnStatement[64003-64014]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64106-64112]:Modifier[64106-64112]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64113-64120]:PrimitiveType[64113-64120]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[64121-64133]:SimpleName[64121-64133]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[64134-64143]:SingleVariableDeclaration[64134-64143]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[64175-64183]:SingleVariableDeclaration[64175-64183]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[64215-64251]:SingleVariableDeclaration[64215-64251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64253-64327]:Block[64253-64327]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[64259-64323]:ReturnStatement[64259-64323]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64415-64421]:Modifier[64415-64421]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64422-64429]:PrimitiveType[64422-64429]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[64430-64442]:SimpleName[64430-64442]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[64443-64452]:SingleVariableDeclaration[64443-64452]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[64454-64462]:SingleVariableDeclaration[64454-64462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64464-64537]:Block[64464-64537]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[64470-64533]:ReturnStatement[64470-64533]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64757-64763]:Modifier[64757-64763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[64764-64768]:PrimitiveType[64764-64768]"
    }, {
      "left" : "redeclareVarsInsideBranch",
      "right" : "redeclareVarsInsideBranch",
      "info" : "SimpleName[64769-64794]:SimpleName[64769-64794]"
    }, {
      "left" : "Node branch",
      "right" : "Node branch",
      "info" : "SingleVariableDeclaration[64795-64806]:SingleVariableDeclaration[64795-64806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64808-65221]:Block[64808-65221]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[64814-64870]:VariableDeclarationStatement[64814-64870]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[64875-64916]:IfStatement[64875-64916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64895-64916]:Block[64895-64916]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[64903-64910]:ReturnStatement[64903-64910]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[64922-64958]:VariableDeclarationStatement[64922-64958]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[64963-65217]:EnhancedForStatement[64963-65217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64990-65217]:Block[64990-65217]"
    }, {
      "left" : "Node var = IR.var(\n          IR.name(nameNode.getString())\n              .srcref(nameNode))\n          .srcref(nameNode);",
      "right" : "Node var = IR.var(\n          IR.name(nameNode.getString())\n              .srcref(nameNode))\n          .srcref(nameNode);",
      "info" : "VariableDeclarationStatement[64998-65118]:VariableDeclarationStatement[64998-65118]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[65125-65176]:ExpressionStatement[65125-65176]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[65183-65211]:ExpressionStatement[65183-65211]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65333-65339]:Modifier[65333-65339]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65340-65344]:PrimitiveType[65340-65344]"
    }, {
      "left" : "copyNameAnnotations",
      "right" : "copyNameAnnotations",
      "info" : "SimpleName[65345-65364]:SimpleName[65345-65364]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[65365-65376]:SingleVariableDeclaration[65365-65376]"
    }, {
      "left" : "Node destination",
      "right" : "Node destination",
      "info" : "SingleVariableDeclaration[65378-65394]:SingleVariableDeclaration[65378-65394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65396-65526]:Block[65396-65526]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[65402-65522]:IfStatement[65402-65522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65452-65522]:Block[65452-65522]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[65460-65516]:ExpressionStatement[65460-65516]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65647-65654]:Modifier[65647-65654]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65655-65661]:Modifier[65655-65661]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[65662-65666]:SimpleType[65662-65666]"
    }, {
      "left" : "getAddingRoot",
      "right" : "getAddingRoot",
      "info" : "SimpleName[65667-65680]:SimpleName[65667-65680]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65681-65687]:SingleVariableDeclaration[65681-65687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65689-66308]:Block[65689-66308]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[65695-65718]:VariableDeclarationStatement[65695-65718]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[65723-65741]:VariableDeclarationStatement[65723-65741]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[65746-66032]:WhileStatement[65746-66032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65796-66032]:Block[65796-66032]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[65804-65834]:VariableDeclarationStatement[65804-65834]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[65841-66026]:IfStatement[65841-66026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65867-65922]:Block[65867-65922]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[65877-65899]:ExpressionStatement[65877-65899]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65908-65914]:BreakStatement[65908-65914]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[65928-66026]:IfStatement[65928-66026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65956-66026]:Block[65956-66026]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[65966-66003]:ExpressionStatement[65966-66003]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66012-66018]:BreakStatement[66012-66018]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.isBlock() ||\n        addingRoot.isScript());",
      "right" : "Preconditions.checkState(addingRoot.isBlock() ||\n        addingRoot.isScript());",
      "info" : "ExpressionStatement[66085-66165]:ExpressionStatement[66085-66165]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        !addingRoot.getFirstChild().isScript());",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        !addingRoot.getFirstChild().isScript());",
      "info" : "ExpressionStatement[66170-66281]:ExpressionStatement[66170-66281]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[66286-66304]:ReturnStatement[66286-66304]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66480-66486]:Modifier[66480-66486]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66487-66493]:Modifier[66487-66493]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[66494-66498]:SimpleType[66494-66498]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[66499-66519]:SimpleName[66499-66519]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[66527-66554]:SingleVariableDeclaration[66527-66554]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[66556-66567]:SingleVariableDeclaration[66556-66567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66569-67224]:Block[66569-67224]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[66575-66606]:VariableDeclarationStatement[66575-66606]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[66611-66676]:IfStatement[66611-66676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66629-66676]:Block[66629-66676]"
    }, {
      "left" : "return newName(convention, name);",
      "right" : "return newName(convention, name);",
      "info" : "ReturnStatement[66637-66670]:ReturnStatement[66637-66670]"
    }, {
      "left" : "Node node = newName(convention, name.substring(0, endPos));",
      "right" : "Node node = newName(convention, name.substring(0, endPos));",
      "info" : "VariableDeclarationStatement[66681-66740]:VariableDeclarationStatement[66681-66740]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[66745-66758]:VariableDeclarationStatement[66745-66758]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[66763-67202]:DoStatement[66763-67202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66766-67180]:Block[66766-67180]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[66774-66796]:ExpressionStatement[66774-66796]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[66803-66840]:ExpressionStatement[66803-66840]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[66847-66980]:VariableDeclarationStatement[66847-66980]"
    }, {
      "left" : "Node propNode = IR.string(part);",
      "right" : "Node propNode = IR.string(part);",
      "info" : "VariableDeclarationStatement[66987-67019]:VariableDeclarationStatement[66987-67019]"
    }, {
      "left" : "if (convention.isConstantKey(part))",
      "right" : "if (convention.isConstantKey(part))",
      "info" : "IfStatement[67026-67133]:IfStatement[67026-67133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67062-67133]:Block[67062-67133]"
    }, {
      "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[67072-67125]:ExpressionStatement[67072-67125]"
    }, {
      "left" : "node = IR.getprop(node, propNode);",
      "right" : "node = IR.getprop(node, propNode);",
      "info" : "ExpressionStatement[67140-67174]:ExpressionStatement[67140-67174]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[67208-67220]:ReturnStatement[67208-67220]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67755-67761]:Modifier[67755-67761]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[67762-67766]:SimpleType[67762-67766]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[67767-67787]:SimpleName[67767-67787]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[67795-67822]:SingleVariableDeclaration[67795-67822]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[67824-67835]:SingleVariableDeclaration[67824-67835]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[67837-67851]:SingleVariableDeclaration[67837-67851]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[67859-67878]:SingleVariableDeclaration[67859-67878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67880-68014]:Block[67880-68014]"
    }, {
      "left" : "Node node = newQualifiedNameNode(convention, name);",
      "right" : "Node node = newQualifiedNameNode(convention, name);",
      "info" : "VariableDeclarationStatement[67886-67937]:VariableDeclarationStatement[67886-67937]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[67942-67993]:ExpressionStatement[67942-67993]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[67998-68010]:ReturnStatement[67998-68010]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68104-68110]:Modifier[68104-68110]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[68111-68115]:SimpleType[68111-68115]"
    }, {
      "left" : "getRootOfQualifiedName",
      "right" : "getRootOfQualifiedName",
      "info" : "SimpleName[68116-68138]:SimpleName[68116-68138]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[68139-68149]:SingleVariableDeclaration[68139-68149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68151-68380]:Block[68151-68380]"
    }, {
      "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "info" : "ForStatement[68157-68376]:ForStatement[68157-68376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68234-68376]:Block[68234-68376]"
    }, {
      "left" : "if (current.isName() || current.isThis())",
      "right" : "if (current.isName() || current.isThis())",
      "info" : "IfStatement[68242-68317]:IfStatement[68242-68317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68284-68317]:Block[68284-68317]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[68294-68309]:ReturnStatement[68294-68309]"
    }, {
      "left" : "Preconditions.checkState(current.isGetProp());",
      "right" : "Preconditions.checkState(current.isGetProp());",
      "info" : "ExpressionStatement[68324-68370]:ExpressionStatement[68324-68370]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68693-68699]:Modifier[68693-68699]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68700-68704]:PrimitiveType[68700-68704]"
    }, {
      "left" : "setDebugInformation",
      "right" : "setDebugInformation",
      "info" : "SimpleName[68705-68724]:SimpleName[68705-68724]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[68725-68734]:SingleVariableDeclaration[68725-68734]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[68736-68750]:SingleVariableDeclaration[68736-68750]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[68786-68805]:SingleVariableDeclaration[68786-68805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68807-68916]:Block[68807-68916]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[68813-68856]:ExpressionStatement[68813-68856]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[68861-68912]:ExpressionStatement[68861-68912]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68920-68927]:Modifier[68920-68927]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68928-68934]:Modifier[68928-68934]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[68935-68939]:SimpleType[68935-68939]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[68940-68947]:SimpleName[68940-68947]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[68955-68982]:SingleVariableDeclaration[68955-68982]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[68984-68995]:SingleVariableDeclaration[68984-68995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68997-69163]:Block[68997-69163]"
    }, {
      "left" : "Node nameNode = IR.name(name);",
      "right" : "Node nameNode = IR.name(name);",
      "info" : "VariableDeclarationStatement[69003-69033]:VariableDeclarationStatement[69003-69033]"
    }, {
      "left" : "if (convention.isConstant(name))",
      "right" : "if (convention.isConstant(name))",
      "info" : "IfStatement[69038-69138]:IfStatement[69038-69138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69071-69138]:Block[69071-69138]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[69079-69132]:ExpressionStatement[69079-69132]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[69143-69159]:ReturnStatement[69143-69159]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[69490-69496]:Modifier[69490-69496]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[69497-69501]:SimpleType[69497-69501]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[69502-69509]:SimpleName[69502-69509]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[69510-69537]:SingleVariableDeclaration[69510-69537]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[69539-69550]:SingleVariableDeclaration[69539-69550]"
    }, {
      "left" : "Node srcref",
      "right" : "Node srcref",
      "info" : "SingleVariableDeclaration[69552-69563]:SingleVariableDeclaration[69552-69563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69565-69623]:Block[69565-69623]"
    }, {
      "left" : "return newName(convention, name).srcref(srcref);",
      "right" : "return newName(convention, name).srcref(srcref);",
      "info" : "ReturnStatement[69571-69619]:ReturnStatement[69571-69619]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70140-70146]:Modifier[70140-70146]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[70147-70151]:SimpleType[70147-70151]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[70152-70159]:SimpleName[70152-70159]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[70167-70194]:SingleVariableDeclaration[70167-70194]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[70196-70207]:SingleVariableDeclaration[70196-70207]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[70215-70229]:SingleVariableDeclaration[70215-70229]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[70231-70250]:SingleVariableDeclaration[70231-70250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70252-70396]:Block[70252-70396]"
    }, {
      "left" : "Node nameNode = newName(convention, name, basisNode);",
      "right" : "Node nameNode = newName(convention, name, basisNode);",
      "info" : "VariableDeclarationStatement[70258-70311]:VariableDeclarationStatement[70258-70311]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[70316-70371]:ExpressionStatement[70316-70371]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[70376-70392]:ReturnStatement[70376-70392]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70995-71001]:Modifier[70995-71001]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[71002-71009]:PrimitiveType[71002-71009]"
    }, {
      "left" : "isLatin",
      "right" : "isLatin",
      "info" : "SimpleName[71010-71017]:SimpleName[71010-71017]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[71018-71026]:SingleVariableDeclaration[71018-71026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71028-71229]:Block[71028-71229]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[71034-71055]:VariableDeclarationStatement[71034-71055]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[71060-71208]:ForStatement[71060-71208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71102-71208]:Block[71102-71208]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[71110-71135]:VariableDeclarationStatement[71110-71135]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[71142-71202]:IfStatement[71142-71202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71171-71202]:Block[71171-71202]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71181-71194]:ReturnStatement[71181-71194]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[71213-71225]:ReturnStatement[71213-71225]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71310-71316]:Modifier[71310-71316]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[71317-71324]:PrimitiveType[71317-71324]"
    }, {
      "left" : "isValidSimpleName",
      "right" : "isValidSimpleName",
      "info" : "SimpleName[71325-71342]:SimpleName[71325-71342]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[71343-71354]:SingleVariableDeclaration[71343-71354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71356-71817]:Block[71356-71817]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, Unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, Unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "info" : "ReturnStatement[71362-71813]:ReturnStatement[71362-71813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72022-72028]:Modifier[72022-72028]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[72029-72035]:Modifier[72029-72035]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[72036-72043]:PrimitiveType[72036-72043]"
    }, {
      "left" : "isValidQualifiedName",
      "right" : "isValidQualifiedName",
      "info" : "SimpleName[72044-72064]:SimpleName[72044-72064]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[72065-72076]:SingleVariableDeclaration[72065-72076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72078-72326]:Block[72078-72326]"
    }, {
      "left" : "if (name.endsWith(\".\") || name.startsWith(\".\"))",
      "right" : "if (name.endsWith(\".\") || name.startsWith(\".\"))",
      "info" : "IfStatement[72084-72159]:IfStatement[72084-72159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72132-72159]:Block[72132-72159]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[72140-72153]:ReturnStatement[72140-72153]"
    }, {
      "left" : "String[] parts = name.split(\"\\\\.\");",
      "right" : "String[] parts = name.split(\"\\\\.\");",
      "info" : "VariableDeclarationStatement[72164-72199]:VariableDeclarationStatement[72164-72199]"
    }, {
      "left" : "for (String part : parts)",
      "right" : "for (String part : parts)",
      "info" : "EnhancedForStatement[72204-72305]:EnhancedForStatement[72204-72305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72230-72305]:Block[72230-72305]"
    }, {
      "left" : "if (!isValidSimpleName(part))",
      "right" : "if (!isValidSimpleName(part))",
      "info" : "IfStatement[72238-72299]:IfStatement[72238-72299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72268-72299]:Block[72268-72299]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[72278-72291]:ReturnStatement[72278-72291]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[72310-72322]:ReturnStatement[72310-72322]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[72482-72488]:Modifier[72482-72488]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[72489-72496]:PrimitiveType[72489-72496]"
    }, {
      "left" : "isValidPropertyName",
      "right" : "isValidPropertyName",
      "info" : "SimpleName[72497-72516]:SimpleName[72497-72516]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[72517-72528]:SingleVariableDeclaration[72517-72528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72530-72571]:Block[72530-72571]"
    }, {
      "left" : "return isValidSimpleName(name);",
      "right" : "return isValidSimpleName(name);",
      "info" : "ReturnStatement[72536-72567]:ReturnStatement[72536-72567]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72575-72582]:Modifier[72575-72582]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[72583-72589]:Modifier[72583-72589]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[72590-72595]:TYPE_DECLARATION_KIND[72590-72595]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "SimpleName[72596-72608]:SimpleName[72596-72608]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleType[72620-72627]:SimpleType[72620-72627]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[72695-72704]:MarkerAnnotation[72695-72704]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72709-72715]:Modifier[72709-72715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72716-72720]:PrimitiveType[72716-72720]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[72721-72726]:SimpleName[72721-72726]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[72727-72733]:SingleVariableDeclaration[72727-72733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72735-72992]:Block[72735-72992]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[72743-72986]:IfStatement[72743-72986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72759-72986]:Block[72759-72986]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[72769-72797]:VariableDeclarationStatement[72769-72797]"
    }, {
      "left" : "if (parent != null && parent.isVar())",
      "right" : "if (parent != null && parent.isVar())",
      "info" : "IfStatement[72806-72978]:IfStatement[72806-72978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72844-72978]:Block[72844-72978]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[72856-72884]:VariableDeclarationStatement[72856-72884]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[72895-72968]:IfStatement[72895-72968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72924-72968]:Block[72924-72968]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[72938-72956]:ExpressionStatement[72938-72956]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73093-73099]:Modifier[73093-73099]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[73100-73116]:ParameterizedType[73100-73116]"
    }, {
      "left" : "getVarsDeclaredInBranch",
      "right" : "getVarsDeclaredInBranch",
      "info" : "SimpleName[73117-73140]:SimpleName[73117-73140]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[73141-73150]:SingleVariableDeclaration[73141-73150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73152-73323]:Block[73152-73323]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[73158-73202]:VariableDeclarationStatement[73158-73202]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[73207-73283]:ExpressionStatement[73207-73283]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[73288-73319]:ReturnStatement[73288-73319]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73445-73451]:Modifier[73445-73451]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[73452-73459]:PrimitiveType[73452-73459]"
    }, {
      "left" : "isPrototypePropertyDeclaration",
      "right" : "isPrototypePropertyDeclaration",
      "info" : "SimpleName[73460-73490]:SimpleName[73460-73490]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[73491-73497]:SingleVariableDeclaration[73491-73497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73499-73625]:Block[73499-73625]"
    }, {
      "left" : "if (!isExprAssign(n))",
      "right" : "if (!isExprAssign(n))",
      "info" : "IfStatement[73505-73554]:IfStatement[73505-73554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73527-73554]:Block[73527-73554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73535-73548]:ReturnStatement[73535-73548]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[73559-73621]:ReturnStatement[73559-73621]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[73714-73720]:Modifier[73714-73720]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[73721-73728]:PrimitiveType[73721-73728]"
    }, {
      "left" : "isPrototypeProperty",
      "right" : "isPrototypeProperty",
      "info" : "SimpleName[73729-73748]:SimpleName[73729-73748]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[73749-73755]:SingleVariableDeclaration[73749-73755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73757-73950]:Block[73757-73950]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[73763-73803]:VariableDeclarationStatement[73763-73803]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[73808-73858]:IfStatement[73808-73858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73831-73858]:Block[73831-73858]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73839-73852]:ReturnStatement[73839-73852]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[73863-73915]:VariableDeclarationStatement[73863-73915]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[73920-73946]:ReturnStatement[73920-73946]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74030-74036]:Modifier[74030-74036]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[74037-74041]:SimpleType[74037-74041]"
    }, {
      "left" : "getPrototypeClassName",
      "right" : "getPrototypeClassName",
      "info" : "SimpleName[74042-74063]:SimpleName[74042-74063]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[74064-74074]:SingleVariableDeclaration[74064-74074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74076-74314]:Block[74076-74314]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[74082-74099]:VariableDeclarationStatement[74082-74099]"
    }, {
      "left" : "while (cur.isGetProp())",
      "right" : "while (cur.isGetProp())",
      "info" : "WhileStatement[74104-74293]:WhileStatement[74104-74293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74128-74293]:Block[74128-74293]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[74136-74287]:IfStatement[74136-74287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74192-74237]:Block[74192-74237]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[74202-74229]:ReturnStatement[74202-74229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74243-74287]:Block[74243-74287]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[74253-74279]:ExpressionStatement[74253-74279]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74298-74310]:ReturnStatement[74298-74310]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74404-74410]:Modifier[74404-74410]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[74411-74417]:SimpleType[74411-74417]"
    }, {
      "left" : "getPrototypePropertyName",
      "right" : "getPrototypePropertyName",
      "info" : "SimpleName[74418-74442]:SimpleName[74418-74442]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[74443-74453]:SingleVariableDeclaration[74443-74453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74455-74676]:Block[74455-74676]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[74461-74504]:VariableDeclarationStatement[74461-74504]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[74509-74564]:VariableDeclarationStatement[74509-74564]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[74569-74628]:VariableDeclarationStatement[74569-74628]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[74633-74672]:ReturnStatement[74633-74672]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[74759-74765]:Modifier[74759-74765]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[74766-74770]:SimpleType[74766-74770]"
    }, {
      "left" : "newUndefinedNode",
      "right" : "newUndefinedNode",
      "info" : "SimpleName[74771-74787]:SimpleName[74771-74787]"
    }, {
      "left" : "Node srcReferenceNode",
      "right" : "Node srcReferenceNode",
      "info" : "SingleVariableDeclaration[74788-74809]:SingleVariableDeclaration[74788-74809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74811-74977]:Block[74811-74977]"
    }, {
      "left" : "Node node = IR.voidNode(IR.number(0));",
      "right" : "Node node = IR.voidNode(IR.number(0));",
      "info" : "VariableDeclarationStatement[74817-74855]:VariableDeclarationStatement[74817-74855]"
    }, {
      "left" : "if (srcReferenceNode != null)",
      "right" : "if (srcReferenceNode != null)",
      "info" : "IfStatement[74860-74956]:IfStatement[74860-74956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74890-74956]:Block[74890-74956]"
    }, {
      "left" : "node.copyInformationFromForTree(srcReferenceNode);",
      "right" : "node.copyInformationFromForTree(srcReferenceNode);",
      "info" : "ExpressionStatement[74900-74950]:ExpressionStatement[74900-74950]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[74961-74973]:ReturnStatement[74961-74973]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75072-75078]:Modifier[75072-75078]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[75079-75083]:SimpleType[75079-75083]"
    }, {
      "left" : "newVarNode",
      "right" : "newVarNode",
      "info" : "SimpleName[75084-75094]:SimpleName[75084-75094]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[75095-75106]:SingleVariableDeclaration[75095-75106]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[75108-75118]:SingleVariableDeclaration[75108-75118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75120-75383]:Block[75120-75383]"
    }, {
      "left" : "Node nodeName = IR.name(name);",
      "right" : "Node nodeName = IR.name(name);",
      "info" : "VariableDeclarationStatement[75126-75156]:VariableDeclarationStatement[75126-75156]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[75161-75312]:IfStatement[75161-75312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75180-75312]:Block[75180-75312]"
    }, {
      "left" : "Preconditions.checkState(value.getNext() == null);",
      "right" : "Preconditions.checkState(value.getNext() == null);",
      "info" : "ExpressionStatement[75188-75238]:ExpressionStatement[75188-75238]"
    }, {
      "left" : "nodeName.addChildToBack(value);",
      "right" : "nodeName.addChildToBack(value);",
      "info" : "ExpressionStatement[75245-75276]:ExpressionStatement[75245-75276]"
    }, {
      "left" : "nodeName.srcref(value);",
      "right" : "nodeName.srcref(value);",
      "info" : "ExpressionStatement[75283-75306]:ExpressionStatement[75283-75306]"
    }, {
      "left" : "Node var = IR.var(nodeName).srcref(nodeName);",
      "right" : "Node var = IR.var(nodeName).srcref(nodeName);",
      "info" : "VariableDeclarationStatement[75317-75362]:VariableDeclarationStatement[75317-75362]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[75368-75379]:ReturnStatement[75368-75379]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75465-75472]:Modifier[75465-75472]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75473-75479]:Modifier[75473-75479]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[75480-75485]:TYPE_DECLARATION_KIND[75480-75485]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[75486-75499]:SimpleName[75486-75499]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[75556-75569]:SimpleName[75556-75569]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[75570-75581]:SingleVariableDeclaration[75570-75581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75582-75613]:Block[75582-75613]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[75590-75607]:ExpressionStatement[75590-75607]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[75619-75628]:MarkerAnnotation[75619-75628]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75633-75639]:Modifier[75633-75639]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[75640-75647]:PrimitiveType[75640-75647]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[75648-75653]:SimpleName[75648-75653]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[75654-75660]:SingleVariableDeclaration[75654-75660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75662-75724]:Block[75662-75724]"
    }, {
      "left" : "return n.isName() && n.getString().equals(name);",
      "right" : "return n.isName() && n.getString().equals(name);",
      "info" : "ReturnStatement[75670-75718]:ReturnStatement[75670-75718]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[75805-75811]:Modifier[75805-75811]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[75812-75817]:TYPE_DECLARATION_KIND[75812-75817]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[75818-75831]:SimpleName[75818-75831]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[75885-75898]:SimpleName[75885-75898]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[75899-75907]:SingleVariableDeclaration[75899-75907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75908-75939]:Block[75908-75939]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[75916-75933]:ExpressionStatement[75916-75933]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[75945-75954]:MarkerAnnotation[75945-75954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[75959-75965]:Modifier[75959-75965]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[75966-75973]:PrimitiveType[75966-75973]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[75974-75979]:SimpleName[75974-75979]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[75980-75986]:SingleVariableDeclaration[75980-75986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75988-76029]:Block[75988-76029]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[75996-76023]:ReturnStatement[75996-76023]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76110-76116]:Modifier[76110-76116]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[76117-76122]:TYPE_DECLARATION_KIND[76117-76122]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "SimpleName[76123-76139]:SimpleName[76123-76139]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[76173-76182]:MarkerAnnotation[76173-76182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76187-76193]:Modifier[76187-76193]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[76194-76201]:PrimitiveType[76194-76201]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[76202-76207]:SimpleName[76202-76207]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[76208-76214]:SingleVariableDeclaration[76208-76214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76216-76275]:Block[76216-76275]"
    }, {
      "left" : "return isFunctionDeclaration(n) || n.isVar();",
      "right" : "return isFunctionDeclaration(n) || n.isVar();",
      "info" : "ReturnStatement[76224-76269]:ReturnStatement[76224-76269]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76357-76364]:Modifier[76357-76364]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76365-76371]:Modifier[76365-76371]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[76372-76377]:TYPE_DECLARATION_KIND[76372-76377]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "SimpleName[76378-76394]:SimpleName[76378-76394]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[76427-76436]:MarkerAnnotation[76427-76436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76441-76447]:Modifier[76441-76447]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[76448-76455]:PrimitiveType[76448-76455]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[76456-76461]:SimpleName[76456-76461]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[76462-76468]:SingleVariableDeclaration[76462-76468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76470-76507]:Block[76470-76507]"
    }, {
      "left" : "return !n.isFunction();",
      "right" : "return !n.isFunction();",
      "info" : "ReturnStatement[76478-76501]:ReturnStatement[76478-76501]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76680-76686]:Modifier[76680-76686]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[76687-76692]:TYPE_DECLARATION_KIND[76687-76692]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "SimpleName[76693-76714]:SimpleName[76693-76714]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[76747-76756]:MarkerAnnotation[76747-76756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76761-76767]:Modifier[76761-76767]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[76768-76775]:PrimitiveType[76768-76775]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[76776-76781]:SimpleName[76776-76781]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[76782-76788]:SingleVariableDeclaration[76782-76788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76790-76995]:Block[76790-76995]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[76798-76826]:VariableDeclarationStatement[76798-76826]"
    }, {
      "left" : "return n.isBlock()\n          || (!n.isFunction() && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "right" : "return n.isBlock()\n          || (!n.isFunction() && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "info" : "ReturnStatement[76833-76989]:ReturnStatement[76833-76989]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77089-77095]:Modifier[77089-77095]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77096-77099]:PrimitiveType[77096-77099]"
    }, {
      "left" : "getNodeTypeReferenceCount",
      "right" : "getNodeTypeReferenceCount",
      "info" : "SimpleName[77100-77125]:SimpleName[77100-77125]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77133-77142]:SingleVariableDeclaration[77133-77142]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[77144-77152]:SingleVariableDeclaration[77144-77152]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[77154-77190]:SingleVariableDeclaration[77154-77190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77192-77271]:Block[77192-77271]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[77198-77267]:ReturnStatement[77198-77267]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77350-77356]:Modifier[77350-77356]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[77357-77364]:PrimitiveType[77357-77364]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[77365-77381]:SimpleName[77365-77381]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77382-77391]:SingleVariableDeclaration[77382-77391]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[77427-77438]:SingleVariableDeclaration[77427-77438]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[77474-77510]:SingleVariableDeclaration[77474-77510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77512-77586]:Block[77512-77586]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[77518-77582]:ReturnStatement[77518-77582]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77665-77671]:Modifier[77665-77671]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[77672-77679]:PrimitiveType[77672-77679]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[77680-77696]:SimpleName[77680-77696]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77697-77706]:SingleVariableDeclaration[77697-77706]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[77708-77719]:SingleVariableDeclaration[77708-77719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77721-77798]:Block[77721-77798]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[77727-77794]:ReturnStatement[77727-77794]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[77895-77901]:Modifier[77895-77901]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77902-77905]:PrimitiveType[77902-77905]"
    }, {
      "left" : "getNameReferenceCount",
      "right" : "getNameReferenceCount",
      "info" : "SimpleName[77906-77927]:SimpleName[77906-77927]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[77928-77937]:SingleVariableDeclaration[77928-77937]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[77939-77950]:SingleVariableDeclaration[77939-77950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77952-78049]:Block[77952-78049]"
    }, {
      "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[77958-78045]:ReturnStatement[77958-78045]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78145-78151]:Modifier[78145-78151]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[78152-78159]:PrimitiveType[78152-78159]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[78160-78163]:SimpleName[78160-78163]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[78164-78173]:SingleVariableDeclaration[78164-78173]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[78196-78216]:SingleVariableDeclaration[78196-78216]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[78239-78275]:SingleVariableDeclaration[78239-78275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78277-78580]:Block[78277-78580]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[78283-78331]:IfStatement[78283-78331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78305-78331]:Block[78305-78331]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[78313-78325]:ReturnStatement[78313-78325]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[78337-78403]:IfStatement[78337-78403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78376-78403]:Block[78376-78403]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78384-78397]:ReturnStatement[78384-78397]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[78409-78557]:ForStatement[78409-78557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78473-78557]:Block[78473-78557]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[78481-78551]:IfStatement[78481-78551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78521-78551]:Block[78521-78551]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[78531-78543]:ReturnStatement[78531-78543]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78563-78576]:ReturnStatement[78563-78576]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78697-78703]:Modifier[78697-78703]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[78704-78707]:PrimitiveType[78704-78707]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[78708-78716]:SimpleName[78708-78716]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[78724-78730]:SingleVariableDeclaration[78724-78730]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[78732-78752]:SingleVariableDeclaration[78732-78752]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[78754-78790]:SingleVariableDeclaration[78754-78790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78792-79065]:Block[78792-79065]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[78798-78812]:VariableDeclarationStatement[78798-78812]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[78818-78859]:IfStatement[78818-78859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78837-78859]:Block[78837-78859]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[78845-78853]:ExpressionStatement[78845-78853]"
    }, {
      "left" : "if (traverseChildrenPred.apply(n))",
      "right" : "if (traverseChildrenPred.apply(n))",
      "info" : "IfStatement[78865-79042]:IfStatement[78865-79042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78900-79042]:Block[78900-79042]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[78908-79036]:ForStatement[78908-79036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78969-79036]:Block[78969-79036]"
    }, {
      "left" : "total += getCount(c, pred, traverseChildrenPred);",
      "right" : "total += getCount(c, pred, traverseChildrenPred);",
      "info" : "ExpressionStatement[78979-79028]:ExpressionStatement[78979-79028]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[79048-79061]:ReturnStatement[79048-79061]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79144-79150]:Modifier[79144-79150]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[79151-79160]:TYPE_DECLARATION_KIND[79151-79160]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleName[79161-79168]:SimpleName[79161-79168]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79175-79179]:PrimitiveType[79175-79179]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[79180-79185]:SimpleName[79180-79185]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[79186-79195]:SingleVariableDeclaration[79186-79195]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79311-79317]:Modifier[79311-79317]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79318-79322]:PrimitiveType[79318-79322]"
    }, {
      "left" : "visitPreOrder",
      "right" : "visitPreOrder",
      "info" : "SimpleName[79323-79336]:SimpleName[79323-79336]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[79337-79346]:SingleVariableDeclaration[79337-79346]"
    }, {
      "left" : "Visitor visitor",
      "right" : "Visitor visitor",
      "info" : "SingleVariableDeclaration[79369-79384]:SingleVariableDeclaration[79369-79384]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[79407-79443]:SingleVariableDeclaration[79407-79443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79445-79663]:Block[79445-79663]"
    }, {
      "left" : "visitor.visit(node);",
      "right" : "visitor.visit(node);",
      "info" : "ExpressionStatement[79451-79471]:ExpressionStatement[79451-79471]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[79477-79659]:IfStatement[79477-79659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79515-79659]:Block[79515-79659]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[79523-79653]:ForStatement[79523-79653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79587-79653]:Block[79587-79653]"
    }, {
      "left" : "visitPreOrder(c, visitor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, visitor, traverseChildrenPred);",
      "info" : "ExpressionStatement[79597-79645]:ExpressionStatement[79597-79645]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79774-79780]:Modifier[79774-79780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79781-79785]:PrimitiveType[79781-79785]"
    }, {
      "left" : "visitPostOrder",
      "right" : "visitPostOrder",
      "info" : "SimpleName[79786-79800]:SimpleName[79786-79800]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[79801-79810]:SingleVariableDeclaration[79801-79810]"
    }, {
      "left" : "Visitor visitor",
      "right" : "Visitor visitor",
      "info" : "SingleVariableDeclaration[79833-79848]:SingleVariableDeclaration[79833-79848]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[79871-79907]:SingleVariableDeclaration[79871-79907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79909-80128]:Block[79909-80128]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[79915-80098]:IfStatement[79915-80098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79953-80098]:Block[79953-80098]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[79961-80092]:ForStatement[79961-80092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80025-80092]:Block[80025-80092]"
    }, {
      "left" : "visitPostOrder(c, visitor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, visitor, traverseChildrenPred);",
      "info" : "ExpressionStatement[80035-80084]:ExpressionStatement[80035-80084]"
    }, {
      "left" : "visitor.visit(node);",
      "right" : "visitor.visit(node);",
      "info" : "ExpressionStatement[80104-80124]:ExpressionStatement[80104-80124]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80197-80203]:Modifier[80197-80203]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[80204-80211]:PrimitiveType[80204-80211]"
    }, {
      "left" : "hasFinally",
      "right" : "hasFinally",
      "info" : "SimpleName[80212-80222]:SimpleName[80212-80222]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[80223-80229]:SingleVariableDeclaration[80223-80229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80231-80315]:Block[80231-80315]"
    }, {
      "left" : "Preconditions.checkArgument(n.isTry());",
      "right" : "Preconditions.checkArgument(n.isTry());",
      "info" : "ExpressionStatement[80237-80276]:ExpressionStatement[80237-80276]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[80281-80311]:ReturnStatement[80281-80311]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80409-80415]:Modifier[80409-80415]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[80416-80420]:SimpleType[80416-80420]"
    }, {
      "left" : "getCatchBlock",
      "right" : "getCatchBlock",
      "info" : "SimpleName[80421-80434]:SimpleName[80421-80434]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[80435-80441]:SingleVariableDeclaration[80435-80441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80443-80532]:Block[80443-80532]"
    }, {
      "left" : "Preconditions.checkArgument(n.isTry());",
      "right" : "Preconditions.checkArgument(n.isTry());",
      "info" : "ExpressionStatement[80449-80488]:ExpressionStatement[80449-80488]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[80493-80528]:ReturnStatement[80493-80528]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80644-80650]:Modifier[80644-80650]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[80651-80658]:PrimitiveType[80651-80658]"
    }, {
      "left" : "hasCatchHandler",
      "right" : "hasCatchHandler",
      "info" : "SimpleName[80659-80674]:SimpleName[80659-80674]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[80675-80681]:SingleVariableDeclaration[80675-80681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80683-80793]:Block[80683-80793]"
    }, {
      "left" : "Preconditions.checkArgument(n.isBlock());",
      "right" : "Preconditions.checkArgument(n.isBlock());",
      "info" : "ExpressionStatement[80689-80730]:ExpressionStatement[80689-80730]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().isCatch();",
      "right" : "return n.hasChildren() && n.getFirstChild().isCatch();",
      "info" : "ReturnStatement[80735-80789]:ReturnStatement[80735-80789]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[80903-80909]:Modifier[80903-80909]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80910-80916]:Modifier[80910-80916]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[80917-80921]:SimpleType[80917-80921]"
    }, {
      "left" : "getFunctionParameters",
      "right" : "getFunctionParameters",
      "info" : "SimpleName[80922-80943]:SimpleName[80922-80943]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[80944-80955]:SingleVariableDeclaration[80944-80955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80957-81127]:Block[80957-81127]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.isFunction());",
      "right" : "Preconditions.checkArgument(fnNode.isFunction());",
      "info" : "ExpressionStatement[81029-81078]:ExpressionStatement[81029-81078]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[81083-81123]:ReturnStatement[81083-81123]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[81833-81839]:Modifier[81833-81839]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[81840-81847]:PrimitiveType[81840-81847]"
    }, {
      "left" : "isConstantName",
      "right" : "isConstantName",
      "info" : "SimpleName[81848-81862]:SimpleName[81848-81862]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[81863-81872]:SingleVariableDeclaration[81863-81872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81874-81934]:Block[81874-81934]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[81880-81930]:ReturnStatement[81880-81930]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[82004-82010]:Modifier[82004-82010]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[82011-82018]:PrimitiveType[82011-82018]"
    }, {
      "left" : "isConstantByConvention",
      "right" : "isConstantByConvention",
      "info" : "SimpleName[82019-82041]:SimpleName[82019-82041]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[82049-82076]:SingleVariableDeclaration[82049-82076]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[82078-82087]:SingleVariableDeclaration[82078-82087]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[82089-82100]:SingleVariableDeclaration[82089-82100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82102-82412]:Block[82102-82412]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[82108-82139]:VariableDeclarationStatement[82108-82139]"
    }, {
      "left" : "if (parent.isGetProp() &&\n        node == parent.getLastChild())",
      "right" : "if (parent.isGetProp() &&\n        node == parent.getLastChild())",
      "info" : "IfStatement[82144-82408]:IfStatement[82144-82408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82209-82261]:Block[82209-82261]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[82217-82255]:ReturnStatement[82217-82255]"
    }, {
      "left" : "if (isObjectLitKey(node, parent))",
      "right" : "if (isObjectLitKey(node, parent))",
      "info" : "IfStatement[82267-82408]:IfStatement[82267-82408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82301-82353]:Block[82301-82353]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[82309-82347]:ReturnStatement[82309-82347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82359-82408]:Block[82359-82408]"
    }, {
      "left" : "return convention.isConstant(name);",
      "right" : "return convention.isConstant(name);",
      "info" : "ReturnStatement[82367-82402]:ReturnStatement[82367-82402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[82467-82473]:Modifier[82467-82473]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[82474-82480]:Modifier[82474-82480]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[82481-82490]:SimpleType[82481-82490]"
    }, {
      "left" : "getFunctionJSDocInfo",
      "right" : "getFunctionJSDocInfo",
      "info" : "SimpleName[82491-82511]:SimpleName[82491-82511]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[82512-82518]:SingleVariableDeclaration[82512-82518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82520-83011]:Block[82520-83011]"
    }, {
      "left" : "Preconditions.checkState(n.isFunction());",
      "right" : "Preconditions.checkState(n.isFunction());",
      "info" : "ExpressionStatement[82526-82567]:ExpressionStatement[82526-82567]"
    }, {
      "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[82572-82608]:VariableDeclarationStatement[82572-82608]"
    }, {
      "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[82613-82988]:IfStatement[82613-82988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82669-82988]:Block[82669-82988]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[82720-82748]:VariableDeclarationStatement[82720-82748]"
    }, {
      "left" : "if (parent.isAssign())",
      "right" : "if (parent.isAssign())",
      "info" : "IfStatement[82755-82982]:IfStatement[82755-82982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82778-82849]:Block[82778-82849]"
    }, {
      "left" : "fnInfo = parent.getJSDocInfo();",
      "right" : "fnInfo = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[82810-82841]:ExpressionStatement[82810-82841]"
    }, {
      "left" : "if (parent.isName())",
      "right" : "if (parent.isName())",
      "info" : "IfStatement[82855-82982]:IfStatement[82855-82982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82876-82982]:Block[82876-82982]"
    }, {
      "left" : "fnInfo = parent.getParent().getJSDocInfo();",
      "right" : "fnInfo = parent.getParent().getJSDocInfo();",
      "info" : "ExpressionStatement[82931-82974]:ExpressionStatement[82931-82974]"
    }, {
      "left" : "return fnInfo;",
      "right" : "return fnInfo;",
      "info" : "ReturnStatement[82993-83007]:ReturnStatement[82993-83007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[83119-83125]:Modifier[83119-83125]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83126-83132]:Modifier[83126-83132]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[83133-83139]:SimpleType[83133-83139]"
    }, {
      "left" : "getSourceName",
      "right" : "getSourceName",
      "info" : "SimpleName[83140-83153]:SimpleName[83140-83153]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[83154-83160]:SingleVariableDeclaration[83154-83160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83162-83339]:Block[83162-83339]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[83168-83193]:VariableDeclarationStatement[83168-83193]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[83198-83312]:WhileStatement[83198-83312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83238-83312]:Block[83238-83312]"
    }, {
      "left" : "sourceName = n.getSourceFileName();",
      "right" : "sourceName = n.getSourceFileName();",
      "info" : "ExpressionStatement[83246-83281]:ExpressionStatement[83246-83281]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[83288-83306]:ExpressionStatement[83288-83306]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[83317-83335]:ReturnStatement[83317-83335]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[83447-83453]:Modifier[83447-83453]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83454-83460]:Modifier[83454-83460]"
    }, {
      "left" : "StaticSourceFile",
      "right" : "StaticSourceFile",
      "info" : "SimpleType[83461-83477]:SimpleType[83461-83477]"
    }, {
      "left" : "getSourceFile",
      "right" : "getSourceFile",
      "info" : "SimpleName[83478-83491]:SimpleName[83478-83491]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[83492-83498]:SingleVariableDeclaration[83492-83498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83500-83689]:Block[83500-83689]"
    }, {
      "left" : "StaticSourceFile sourceName = null;",
      "right" : "StaticSourceFile sourceName = null;",
      "info" : "VariableDeclarationStatement[83506-83541]:VariableDeclarationStatement[83506-83541]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[83546-83662]:WhileStatement[83546-83662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83586-83662]:Block[83586-83662]"
    }, {
      "left" : "sourceName = n.getStaticSourceFile();",
      "right" : "sourceName = n.getStaticSourceFile();",
      "info" : "ExpressionStatement[83594-83631]:ExpressionStatement[83594-83631]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[83638-83656]:ExpressionStatement[83638-83656]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[83667-83685]:ReturnStatement[83667-83685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[83793-83799]:Modifier[83793-83799]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[83800-83806]:Modifier[83800-83806]"
    }, {
      "left" : "InputId",
      "right" : "InputId",
      "info" : "SimpleType[83807-83814]:SimpleType[83807-83814]"
    }, {
      "left" : "getInputId",
      "right" : "getInputId",
      "info" : "SimpleName[83815-83825]:SimpleName[83815-83825]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[83826-83832]:SingleVariableDeclaration[83826-83832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83834-83976]:Block[83834-83976]"
    }, {
      "left" : "while (n != null && !n.isScript())",
      "right" : "while (n != null && !n.isScript())",
      "info" : "WhileStatement[83840-83907]:WhileStatement[83840-83907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83875-83907]:Block[83875-83907]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[83883-83901]:ExpressionStatement[83883-83901]"
    }, {
      "left" : "return (n != null && n.isScript()) ? n.getInputId() : null;",
      "right" : "return (n != null && n.isScript()) ? n.getInputId() : null;",
      "info" : "ReturnStatement[83913-83972]:ReturnStatement[83913-83972]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84060-84066]:Modifier[84060-84066]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[84067-84071]:SimpleType[84067-84071]"
    }, {
      "left" : "newCallNode",
      "right" : "newCallNode",
      "info" : "SimpleName[84072-84083]:SimpleName[84072-84083]"
    }, {
      "left" : "Node callTarget",
      "right" : "Node callTarget",
      "info" : "SingleVariableDeclaration[84084-84099]:SingleVariableDeclaration[84084-84099]"
    }, {
      "left" : "Node... parameters",
      "right" : "Node... parameters",
      "info" : "SingleVariableDeclaration[84101-84119]:SingleVariableDeclaration[84101-84119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84121-84362]:Block[84121-84362]"
    }, {
      "left" : "boolean isFreeCall = !isGet(callTarget);",
      "right" : "boolean isFreeCall = !isGet(callTarget);",
      "info" : "VariableDeclarationStatement[84127-84167]:VariableDeclarationStatement[84127-84167]"
    }, {
      "left" : "Node call = IR.call(callTarget);",
      "right" : "Node call = IR.call(callTarget);",
      "info" : "VariableDeclarationStatement[84172-84204]:VariableDeclarationStatement[84172-84204]"
    }, {
      "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "info" : "ExpressionStatement[84209-84257]:ExpressionStatement[84209-84257]"
    }, {
      "left" : "for (Node parameter : parameters)",
      "right" : "for (Node parameter : parameters)",
      "info" : "EnhancedForStatement[84262-84341]:EnhancedForStatement[84262-84341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84296-84341]:Block[84296-84341]"
    }, {
      "left" : "call.addChildToBack(parameter);",
      "right" : "call.addChildToBack(parameter);",
      "info" : "ExpressionStatement[84304-84335]:ExpressionStatement[84304-84335]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[84346-84358]:ReturnStatement[84346-84358]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84470-84476]:Modifier[84470-84476]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[84477-84484]:PrimitiveType[84477-84484]"
    }, {
      "left" : "evaluatesToLocalValue",
      "right" : "evaluatesToLocalValue",
      "info" : "SimpleName[84485-84506]:SimpleName[84485-84506]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[84507-84517]:SingleVariableDeclaration[84507-84517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84519-84597]:Block[84519-84597]"
    }, {
      "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "info" : "ReturnStatement[84525-84593]:ReturnStatement[84525-84593]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84794-84800]:Modifier[84794-84800]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[84801-84808]:PrimitiveType[84801-84808]"
    }, {
      "left" : "evaluatesToLocalValue",
      "right" : "evaluatesToLocalValue",
      "info" : "SimpleName[84809-84830]:SimpleName[84809-84830]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[84831-84841]:SingleVariableDeclaration[84831-84841]"
    }, {
      "left" : "Predicate<Node> locals",
      "right" : "Predicate<Node> locals",
      "info" : "SingleVariableDeclaration[84843-84865]:SingleVariableDeclaration[84843-84865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84867-87290]:Block[84867-87290]"
    }, {
      "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "info" : "SwitchStatement[84873-87286]:SwitchStatement[84873-87286]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[84906-84924]:SwitchCase[84906-84924]"
    }, {
      "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "info" : "ReturnStatement[85122-85285]:ReturnStatement[85122-85285]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[85292-85309]:SwitchCase[85292-85309]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[85318-85377]:ReturnStatement[85318-85377]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[85384-85399]:SwitchCase[85384-85399]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[85406-85420]:SwitchCase[85406-85420]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[85429-85555]:ReturnStatement[85429-85555]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[85562-85578]:SwitchCase[85562-85578]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[85587-85723]:ReturnStatement[85587-85723]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[85730-85745]:SwitchCase[85730-85745]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[85752-85767]:SwitchCase[85752-85767]"
    }, {
      "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "info" : "IfStatement[85776-85944]:IfStatement[85776-85944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85822-85904]:Block[85822-85904]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "info" : "ReturnStatement[85834-85894]:ReturnStatement[85834-85894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85910-85944]:Block[85910-85944]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[85922-85934]:ReturnStatement[85922-85934]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[85951-85967]:SwitchCase[85951-85967]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[85976-86003]:ReturnStatement[85976-86003]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[86010-86026]:SwitchCase[86010-86026]"
    }, {
      "left" : "return isImmutableValue(value) || locals.apply(value);",
      "right" : "return isImmutableValue(value) || locals.apply(value);",
      "info" : "ReturnStatement[86035-86089]:ReturnStatement[86035-86089]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[86096-86115]:SwitchCase[86096-86115]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[86122-86141]:SwitchCase[86122-86141]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[86226-86253]:ReturnStatement[86226-86253]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[86260-86276]:SwitchCase[86260-86276]"
    }, {
      "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "info" : "ReturnStatement[86285-86396]:ReturnStatement[86285-86396]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[86403-86418]:SwitchCase[86403-86418]"
    }, {
      "left" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "right" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "info" : "ReturnStatement[86427-86497]:ReturnStatement[86427-86497]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[86504-86524]:SwitchCase[86504-86524]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[86531-86549]:SwitchCase[86531-86549]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[86556-86576]:SwitchCase[86556-86576]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[86583-86604]:SwitchCase[86583-86604]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86680-86692]:ReturnStatement[86680-86692]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[86699-86718]:SwitchCase[86699-86718]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[86725-86739]:SwitchCase[86725-86739]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86828-86840]:ReturnStatement[86828-86840]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[86847-86855]:SwitchCase[86847-86855]"
    }, {
      "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "info" : "IfStatement[87001-87140]:IfStatement[87001-87140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87106-87140]:Block[87106-87140]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[87118-87130]:ReturnStatement[87118-87130]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "info" : "ThrowStatement[87150-87280]:ThrowStatement[87150-87280]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[87484-87491]:Modifier[87484-87491]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[87492-87498]:Modifier[87492-87498]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[87499-87503]:SimpleType[87499-87503]"
    }, {
      "left" : "getNthSibling",
      "right" : "getNthSibling",
      "info" : "SimpleName[87504-87517]:SimpleName[87504-87517]"
    }, {
      "left" : "Node first",
      "right" : "Node first",
      "info" : "SingleVariableDeclaration[87518-87528]:SingleVariableDeclaration[87518-87528]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[87530-87539]:SingleVariableDeclaration[87530-87539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87541-87692]:Block[87541-87692]"
    }, {
      "left" : "Node sibling = first;",
      "right" : "Node sibling = first;",
      "info" : "VariableDeclarationStatement[87547-87568]:VariableDeclarationStatement[87547-87568]"
    }, {
      "left" : "while (index != 0 && sibling != null)",
      "right" : "while (index != 0 && sibling != null)",
      "info" : "WhileStatement[87573-87668]:WhileStatement[87573-87668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87611-87668]:Block[87611-87668]"
    }, {
      "left" : "sibling = sibling.getNext();",
      "right" : "sibling = sibling.getNext();",
      "info" : "ExpressionStatement[87619-87647]:ExpressionStatement[87619-87647]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[87654-87662]:ExpressionStatement[87654-87662]"
    }, {
      "left" : "return sibling;",
      "right" : "return sibling;",
      "info" : "ReturnStatement[87673-87688]:ReturnStatement[87673-87688]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[87805-87811]:Modifier[87805-87811]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[87812-87816]:SimpleType[87812-87816]"
    }, {
      "left" : "getArgumentForFunction",
      "right" : "getArgumentForFunction",
      "info" : "SimpleName[87817-87839]:SimpleName[87817-87839]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[87840-87853]:SingleVariableDeclaration[87840-87853]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[87855-87864]:SingleVariableDeclaration[87855-87864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87866-88018]:Block[87866-88018]"
    }, {
      "left" : "Preconditions.checkState(function.isFunction());",
      "right" : "Preconditions.checkState(function.isFunction());",
      "info" : "ExpressionStatement[87872-87920]:ExpressionStatement[87872-87920]"
    }, {
      "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "info" : "ReturnStatement[87925-88014]:ReturnStatement[87925-88014]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[88145-88151]:Modifier[88145-88151]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[88152-88156]:SimpleType[88152-88156]"
    }, {
      "left" : "getArgumentForCallOrNew",
      "right" : "getArgumentForCallOrNew",
      "info" : "SimpleName[88157-88180]:SimpleName[88157-88180]"
    }, {
      "left" : "Node call",
      "right" : "Node call",
      "info" : "SingleVariableDeclaration[88181-88190]:SingleVariableDeclaration[88181-88190]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[88192-88201]:SingleVariableDeclaration[88192-88201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88203-88329]:Block[88203-88329]"
    }, {
      "left" : "Preconditions.checkState(isCallOrNew(call));",
      "right" : "Preconditions.checkState(isCallOrNew(call));",
      "info" : "ExpressionStatement[88209-88253]:ExpressionStatement[88209-88253]"
    }, {
      "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "info" : "ReturnStatement[88258-88325]:ReturnStatement[88258-88325]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[88333-88340]:Modifier[88333-88340]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[88341-88347]:Modifier[88341-88347]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[88348-88355]:PrimitiveType[88348-88355]"
    }, {
      "left" : "isToStringMethodCall",
      "right" : "isToStringMethodCall",
      "info" : "SimpleName[88356-88376]:SimpleName[88356-88376]"
    }, {
      "left" : "Node call",
      "right" : "Node call",
      "info" : "SingleVariableDeclaration[88377-88386]:SingleVariableDeclaration[88377-88386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88388-88607]:Block[88388-88607]"
    }, {
      "left" : "Node getNode = call.getFirstChild();",
      "right" : "Node getNode = call.getFirstChild();",
      "info" : "VariableDeclarationStatement[88394-88430]:VariableDeclarationStatement[88394-88430]"
    }, {
      "left" : "if (isGet(getNode))",
      "right" : "if (isGet(getNode))",
      "info" : "IfStatement[88435-88585]:IfStatement[88435-88585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88455-88585]:Block[88455-88585]"
    }, {
      "left" : "Node propNode = getNode.getLastChild();",
      "right" : "Node propNode = getNode.getLastChild();",
      "info" : "VariableDeclarationStatement[88463-88502]:VariableDeclarationStatement[88463-88502]"
    }, {
      "left" : "return propNode.isString() && \"toString\".equals(propNode.getString());",
      "right" : "return propNode.isString() && \"toString\".equals(propNode.getString());",
      "info" : "ReturnStatement[88509-88579]:ReturnStatement[88509-88579]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[88590-88603]:ReturnStatement[88590-88603]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[88660-88666]:Modifier[88660-88666]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[88667-88676]:SimpleType[88667-88676]"
    }, {
      "left" : "getBestJSDocInfo",
      "right" : "getBestJSDocInfo",
      "info" : "SimpleName[88677-88693]:SimpleName[88677-88693]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[88694-88700]:SingleVariableDeclaration[88694-88700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88702-89565]:Block[88702-89565]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[88708-88742]:VariableDeclarationStatement[88708-88742]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[88747-89544]:IfStatement[88747-89544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88765-89544]:Block[88765-89544]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[88773-88801]:VariableDeclarationStatement[88773-88801]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[88808-88858]:IfStatement[88808-88858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88828-88858]:Block[88828-88858]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[88838-88850]:ReturnStatement[88838-88850]"
    }, {
      "left" : "if (parent.isName())",
      "right" : "if (parent.isName())",
      "info" : "IfStatement[88866-89538]:IfStatement[88866-89538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88887-88937]:Block[88887-88937]"
    }, {
      "left" : "return getBestJSDocInfo(parent);",
      "right" : "return getBestJSDocInfo(parent);",
      "info" : "ReturnStatement[88897-88929]:ReturnStatement[88897-88929]"
    }, {
      "left" : "if (parent.isAssign())",
      "right" : "if (parent.isAssign())",
      "info" : "IfStatement[88943-89538]:IfStatement[88943-89538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88966-89013]:Block[88966-89013]"
    }, {
      "left" : "return parent.getJSDocInfo();",
      "right" : "return parent.getJSDocInfo();",
      "info" : "ReturnStatement[88976-89005]:ReturnStatement[88976-89005]"
    }, {
      "left" : "if (isObjectLitKey(parent, parent.getParent()))",
      "right" : "if (isObjectLitKey(parent, parent.getParent()))",
      "info" : "IfStatement[89019-89538]:IfStatement[89019-89538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89067-89114]:Block[89067-89114]"
    }, {
      "left" : "return parent.getJSDocInfo();",
      "right" : "return parent.getJSDocInfo();",
      "info" : "ReturnStatement[89077-89106]:ReturnStatement[89077-89106]"
    }, {
      "left" : "if (parent.isFunction())",
      "right" : "if (parent.isFunction())",
      "info" : "IfStatement[89120-89538]:IfStatement[89120-89538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89145-89192]:Block[89145-89192]"
    }, {
      "left" : "return parent.getJSDocInfo();",
      "right" : "return parent.getJSDocInfo();",
      "info" : "ReturnStatement[89155-89184]:ReturnStatement[89155-89184]"
    }, {
      "left" : "if (parent.isVar() && parent.hasOneChild())",
      "right" : "if (parent.isVar() && parent.hasOneChild())",
      "info" : "IfStatement[89198-89538]:IfStatement[89198-89538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89242-89289]:Block[89242-89289]"
    }, {
      "left" : "return parent.getJSDocInfo();",
      "right" : "return parent.getJSDocInfo();",
      "info" : "ReturnStatement[89252-89281]:ReturnStatement[89252-89281]"
    }, {
      "left" : "if ((parent.isHook() && parent.getFirstChild() != n) ||\n                 parent.isOr() ||\n                 parent.isAnd() ||\n                 (parent.isComma() && parent.getFirstChild() != n))",
      "right" : "if ((parent.isHook() && parent.getFirstChild() != n) ||\n                 parent.isOr() ||\n                 parent.isAnd() ||\n                 (parent.isComma() && parent.getFirstChild() != n))",
      "info" : "IfStatement[89295-89538]:IfStatement[89295-89538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89488-89538]:Block[89488-89538]"
    }, {
      "left" : "return getBestJSDocInfo(parent);",
      "right" : "return getBestJSDocInfo(parent);",
      "info" : "ReturnStatement[89498-89530]:ReturnStatement[89498-89530]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[89549-89561]:ReturnStatement[89549-89561]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[89640-89646]:Modifier[89640-89646]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[89647-89651]:SimpleType[89647-89651]"
    }, {
      "left" : "getBestLValue",
      "right" : "getBestLValue",
      "info" : "SimpleName[89652-89665]:SimpleName[89652-89665]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[89666-89672]:SingleVariableDeclaration[89666-89672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89674-90296]:Block[89674-90296]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[89680-89708]:VariableDeclarationStatement[89680-89708]"
    }, {
      "left" : "boolean isFunctionDeclaration = isFunctionDeclaration(n);",
      "right" : "boolean isFunctionDeclaration = isFunctionDeclaration(n);",
      "info" : "VariableDeclarationStatement[89713-89770]:VariableDeclarationStatement[89713-89770]"
    }, {
      "left" : "if (isFunctionDeclaration)",
      "right" : "if (isFunctionDeclaration)",
      "info" : "IfStatement[89775-90275]:IfStatement[89775-90275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89802-89841]:Block[89802-89841]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[89810-89835]:ReturnStatement[89810-89835]"
    }, {
      "left" : "if (parent.isName())",
      "right" : "if (parent.isName())",
      "info" : "IfStatement[89847-90275]:IfStatement[89847-90275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89868-89896]:Block[89868-89896]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[89876-89890]:ReturnStatement[89876-89890]"
    }, {
      "left" : "if (parent.isAssign())",
      "right" : "if (parent.isAssign())",
      "info" : "IfStatement[89902-90275]:IfStatement[89902-90275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89925-89969]:Block[89925-89969]"
    }, {
      "left" : "return parent.getFirstChild();",
      "right" : "return parent.getFirstChild();",
      "info" : "ReturnStatement[89933-89963]:ReturnStatement[89933-89963]"
    }, {
      "left" : "if (isObjectLitKey(parent, parent.getParent()))",
      "right" : "if (isObjectLitKey(parent, parent.getParent()))",
      "info" : "IfStatement[89975-90275]:IfStatement[89975-90275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90023-90051]:Block[90023-90051]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[90031-90045]:ReturnStatement[90031-90045]"
    }, {
      "left" : "if (\n        (parent.isHook() && parent.getFirstChild() != n) ||\n        parent.isOr() ||\n        parent.isAnd() ||\n        (parent.isComma() && parent.getFirstChild() != n))",
      "right" : "if (\n        (parent.isHook() && parent.getFirstChild() != n) ||\n        parent.isOr() ||\n        parent.isAnd() ||\n        (parent.isComma() && parent.getFirstChild() != n))",
      "info" : "IfStatement[90057-90275]:IfStatement[90057-90275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90232-90275]:Block[90232-90275]"
    }, {
      "left" : "return getBestLValue(parent);",
      "right" : "return getBestLValue(parent);",
      "info" : "ReturnStatement[90240-90269]:ReturnStatement[90240-90269]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[90280-90292]:ReturnStatement[90280-90292]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90363-90369]:Modifier[90363-90369]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[90370-90374]:SimpleType[90370-90374]"
    }, {
      "left" : "getRValueOfLValue",
      "right" : "getRValueOfLValue",
      "info" : "SimpleName[90375-90392]:SimpleName[90375-90392]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[90393-90399]:SingleVariableDeclaration[90393-90399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90401-90653]:Block[90401-90653]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[90407-90435]:VariableDeclarationStatement[90407-90435]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.ASSIGN:\n        return n.getNext();\n      case Token.VAR:\n        return n.getFirstChild();\n      case Token.FUNCTION:\n        return parent;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.ASSIGN:\n        return n.getNext();\n      case Token.VAR:\n        return n.getFirstChild();\n      case Token.FUNCTION:\n        return parent;\n    }",
      "info" : "SwitchStatement[90440-90632]:SwitchStatement[90440-90632]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[90474-90492]:SwitchCase[90474-90492]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[90501-90520]:ReturnStatement[90501-90520]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[90527-90542]:SwitchCase[90527-90542]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[90551-90576]:ReturnStatement[90551-90576]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[90583-90603]:SwitchCase[90583-90603]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[90612-90626]:ReturnStatement[90612-90626]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[90637-90649]:ReturnStatement[90637-90649]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90707-90713]:Modifier[90707-90713]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[90714-90718]:SimpleType[90714-90718]"
    }, {
      "left" : "getBestLValueOwner",
      "right" : "getBestLValueOwner",
      "info" : "SimpleName[90719-90737]:SimpleName[90719-90737]"
    }, {
      "left" : "@Nullable Node lValue",
      "right" : "@Nullable Node lValue",
      "info" : "SingleVariableDeclaration[90738-90759]:SingleVariableDeclaration[90738-90759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90761-91042]:Block[90761-91042]"
    }, {
      "left" : "if (lValue == null || lValue.getParent() == null)",
      "right" : "if (lValue == null || lValue.getParent() == null)",
      "info" : "IfStatement[90767-90843]:IfStatement[90767-90843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90817-90843]:Block[90817-90843]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[90825-90837]:ReturnStatement[90825-90837]"
    }, {
      "left" : "if (isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[90848-91020]:IfStatement[90848-91020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90896-90951]:Block[90896-90951]"
    }, {
      "left" : "return getBestLValue(lValue.getParent());",
      "right" : "return getBestLValue(lValue.getParent());",
      "info" : "ReturnStatement[90904-90945]:ReturnStatement[90904-90945]"
    }, {
      "left" : "if (isGet(lValue))",
      "right" : "if (isGet(lValue))",
      "info" : "IfStatement[90957-91020]:IfStatement[90957-91020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90976-91020]:Block[90976-91020]"
    }, {
      "left" : "return lValue.getFirstChild();",
      "right" : "return lValue.getFirstChild();",
      "info" : "ReturnStatement[90984-91014]:ReturnStatement[90984-91014]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[91026-91038]:ReturnStatement[91026-91038]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[91095-91101]:Modifier[91095-91101]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[91102-91108]:SimpleType[91102-91108]"
    }, {
      "left" : "getBestLValueName",
      "right" : "getBestLValueName",
      "info" : "SimpleName[91109-91126]:SimpleName[91109-91126]"
    }, {
      "left" : "@Nullable Node lValue",
      "right" : "@Nullable Node lValue",
      "info" : "SingleVariableDeclaration[91127-91148]:SingleVariableDeclaration[91127-91148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91150-91602]:Block[91150-91602]"
    }, {
      "left" : "if (lValue == null || lValue.getParent() == null)",
      "right" : "if (lValue == null || lValue.getParent() == null)",
      "info" : "IfStatement[91156-91232]:IfStatement[91156-91232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91206-91232]:Block[91206-91232]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[91214-91226]:ReturnStatement[91214-91226]"
    }, {
      "left" : "if (isObjectLitKey(lValue, lValue.getParent()))",
      "right" : "if (isObjectLitKey(lValue, lValue.getParent()))",
      "info" : "IfStatement[91237-91560]:IfStatement[91237-91560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91285-91560]:Block[91285-91560]"
    }, {
      "left" : "Node owner = getBestLValue(lValue.getParent());",
      "right" : "Node owner = getBestLValue(lValue.getParent());",
      "info" : "VariableDeclarationStatement[91293-91340]:VariableDeclarationStatement[91293-91340]"
    }, {
      "left" : "if (owner != null)",
      "right" : "if (owner != null)",
      "info" : "IfStatement[91347-91535]:IfStatement[91347-91535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91366-91535]:Block[91366-91535]"
    }, {
      "left" : "String ownerName = getBestLValueName(owner);",
      "right" : "String ownerName = getBestLValueName(owner);",
      "info" : "VariableDeclarationStatement[91376-91420]:VariableDeclarationStatement[91376-91420]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[91429-91527]:IfStatement[91429-91527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91452-91527]:Block[91452-91527]"
    }, {
      "left" : "return ownerName + \".\" + getObjectLitKeyName(lValue);",
      "right" : "return ownerName + \".\" + getObjectLitKeyName(lValue);",
      "info" : "ReturnStatement[91464-91517]:ReturnStatement[91464-91517]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[91542-91554]:ReturnStatement[91542-91554]"
    }, {
      "left" : "return lValue.getQualifiedName();",
      "right" : "return lValue.getQualifiedName();",
      "info" : "ReturnStatement[91565-91598]:ReturnStatement[91565-91598]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[91688-91694]:Modifier[91688-91694]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[91695-91702]:PrimitiveType[91695-91702]"
    }, {
      "left" : "isExpressionResultUsed",
      "right" : "isExpressionResultUsed",
      "info" : "SimpleName[91703-91725]:SimpleName[91703-91725]"
    }, {
      "left" : "Node expr",
      "right" : "Node expr",
      "info" : "SingleVariableDeclaration[91726-91735]:SingleVariableDeclaration[91726-91735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91737-93185]:Block[91737-93185]"
    }, {
      "left" : "Node parent = expr.getParent();",
      "right" : "Node parent = expr.getParent();",
      "info" : "VariableDeclarationStatement[91821-91852]:VariableDeclarationStatement[91821-91852]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n        return false;\n      case Token.HOOK:\n      case Token.AND:\n      case Token.OR:\n        return (expr == parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);\n      case Token.COMMA:\n        Node gramps = parent.getParent();\n        if (gramps.isCall() &&\n            parent == gramps.getFirstChild()) {\n          // Semantically, a direct call to eval is different from an indirect\n          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first\n          // expression to a comma to be a no-op if it's used to indirect\n          // an eval. This we pretend that this is \"used\".\n          if (expr == parent.getFirstChild() &&\n              parent.getChildCount() == 2 &&\n              expr.getNext().isName() &&\n              \"eval\".equals(expr.getNext().getString())) {\n            return true;\n          }\n        }\n\n        return (expr == parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);\n      case Token.FOR:\n        if (!NodeUtil.isForIn(parent)) {\n          // Only an expression whose result is in the condition part of the\n          // expression is used.\n          return (parent.getChildAtIndex(1) == expr);\n        }\n        break;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n        return false;\n      case Token.HOOK:\n      case Token.AND:\n      case Token.OR:\n        return (expr == parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);\n      case Token.COMMA:\n        Node gramps = parent.getParent();\n        if (gramps.isCall() &&\n            parent == gramps.getFirstChild()) {\n          // Semantically, a direct call to eval is different from an indirect\n          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first\n          // expression to a comma to be a no-op if it's used to indirect\n          // an eval. This we pretend that this is \"used\".\n          if (expr == parent.getFirstChild() &&\n              parent.getChildCount() == 2 &&\n              expr.getNext().isName() &&\n              \"eval\".equals(expr.getNext().getString())) {\n            return true;\n          }\n        }\n\n        return (expr == parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);\n      case Token.FOR:\n        if (!NodeUtil.isForIn(parent)) {\n          // Only an expression whose result is in the condition part of the\n          // expression is used.\n          return (parent.getChildAtIndex(1) == expr);\n        }\n        break;\n    }",
      "info" : "SwitchStatement[91857-93164]:SwitchStatement[91857-93164]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[91891-91908]:SwitchCase[91891-91908]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[91915-91938]:SwitchCase[91915-91938]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[91947-91960]:ReturnStatement[91947-91960]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[91967-91983]:SwitchCase[91967-91983]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[91990-92005]:SwitchCase[91990-92005]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[92012-92026]:SwitchCase[92012-92026]"
    }, {
      "left" : "return (expr == parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);",
      "right" : "return (expr == parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);",
      "info" : "ReturnStatement[92035-92127]:ReturnStatement[92035-92127]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[92134-92151]:SwitchCase[92134-92151]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[92160-92193]:VariableDeclarationStatement[92160-92193]"
    }, {
      "left" : "if (gramps.isCall() &&\n            parent == gramps.getFirstChild())",
      "right" : "if (gramps.isCall() &&\n            parent == gramps.getFirstChild())",
      "info" : "IfStatement[92202-92803]:IfStatement[92202-92803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92271-92803]:Block[92271-92803]"
    }, {
      "left" : "if (expr == parent.getFirstChild() &&\n              parent.getChildCount() == 2 &&\n              expr.getNext().isName() &&\n              \"eval\".equals(expr.getNext().getString()))",
      "right" : "if (expr == parent.getFirstChild() &&\n              parent.getChildCount() == 2 &&\n              expr.getNext().isName() &&\n              \"eval\".equals(expr.getNext().getString()))",
      "info" : "IfStatement[92574-92793]:IfStatement[92574-92793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92755-92793]:Block[92755-92793]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[92769-92781]:ReturnStatement[92769-92781]"
    }, {
      "left" : "return (expr == parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);",
      "right" : "return (expr == parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);",
      "info" : "ReturnStatement[92813-92906]:ReturnStatement[92813-92906]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[92913-92928]:SwitchCase[92913-92928]"
    }, {
      "left" : "if (!NodeUtil.isForIn(parent))",
      "right" : "if (!NodeUtil.isForIn(parent))",
      "info" : "IfStatement[92937-93143]:IfStatement[92937-93143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92968-93143]:Block[92968-93143]"
    }, {
      "left" : "return (parent.getChildAtIndex(1) == expr);",
      "right" : "return (parent.getChildAtIndex(1) == expr);",
      "info" : "ReturnStatement[93090-93133]:ReturnStatement[93090-93133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93152-93158]:BreakStatement[93152-93158]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[93169-93181]:ReturnStatement[93169-93181]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[93358-93364]:Modifier[93358-93364]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[93365-93372]:PrimitiveType[93365-93372]"
    }, {
      "left" : "isExecutedExactlyOnce",
      "right" : "isExecutedExactlyOnce",
      "info" : "SimpleName[93373-93394]:SimpleName[93373-93394]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[93395-93401]:SingleVariableDeclaration[93395-93401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93403-94692]:Block[93403-94692]"
    }, {
      "left" : "inspect: do {\n      Node parent = n.getParent();\n      switch (parent.getType()) {\n        case Token.IF:\n        case Token.HOOK:\n        case Token.AND:\n        case Token.OR:\n          if (parent.getFirstChild() != n) {\n            return false;\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.FOR:\n          if (NodeUtil.isForIn(parent)) {\n            if (parent.getChildAtIndex(1) != n) {\n              return false;\n            }\n          } else {\n            if (parent.getFirstChild() != n) {\n              return false;\n            }\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.WHILE:\n        case Token.DO:\n          return false;\n        case Token.TRY:\n          // Consider all code under a try/catch to be conditionally executed.\n          if (!hasFinally(parent) || parent.getLastChild() != n) {\n            return false;\n          }\n          continue inspect;\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n          return false;\n        case Token.SCRIPT:\n        case Token.FUNCTION:\n          // Done, we've reached the scope root.\n          break inspect;\n      }\n    } while ((n = n.getParent()) != null);",
      "right" : "inspect: do {\n      Node parent = n.getParent();\n      switch (parent.getType()) {\n        case Token.IF:\n        case Token.HOOK:\n        case Token.AND:\n        case Token.OR:\n          if (parent.getFirstChild() != n) {\n            return false;\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.FOR:\n          if (NodeUtil.isForIn(parent)) {\n            if (parent.getChildAtIndex(1) != n) {\n              return false;\n            }\n          } else {\n            if (parent.getFirstChild() != n) {\n              return false;\n            }\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.WHILE:\n        case Token.DO:\n          return false;\n        case Token.TRY:\n          // Consider all code under a try/catch to be conditionally executed.\n          if (!hasFinally(parent) || parent.getLastChild() != n) {\n            return false;\n          }\n          continue inspect;\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n          return false;\n        case Token.SCRIPT:\n        case Token.FUNCTION:\n          // Done, we've reached the scope root.\n          break inspect;\n      }\n    } while ((n = n.getParent()) != null);",
      "info" : "LabeledStatement[93409-94671]:LabeledStatement[93409-94671]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[93418-94671]:DoStatement[93418-94671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93421-94634]:Block[93421-94634]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[93429-93457]:VariableDeclarationStatement[93429-93457]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.IF:\n        case Token.HOOK:\n        case Token.AND:\n        case Token.OR:\n          if (parent.getFirstChild() != n) {\n            return false;\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.FOR:\n          if (NodeUtil.isForIn(parent)) {\n            if (parent.getChildAtIndex(1) != n) {\n              return false;\n            }\n          } else {\n            if (parent.getFirstChild() != n) {\n              return false;\n            }\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.WHILE:\n        case Token.DO:\n          return false;\n        case Token.TRY:\n          // Consider all code under a try/catch to be conditionally executed.\n          if (!hasFinally(parent) || parent.getLastChild() != n) {\n            return false;\n          }\n          continue inspect;\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n          return false;\n        case Token.SCRIPT:\n        case Token.FUNCTION:\n          // Done, we've reached the scope root.\n          break inspect;\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.IF:\n        case Token.HOOK:\n        case Token.AND:\n        case Token.OR:\n          if (parent.getFirstChild() != n) {\n            return false;\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.FOR:\n          if (NodeUtil.isForIn(parent)) {\n            if (parent.getChildAtIndex(1) != n) {\n              return false;\n            }\n          } else {\n            if (parent.getFirstChild() != n) {\n              return false;\n            }\n          }\n          // other ancestors may be conditional\n          continue inspect;\n        case Token.WHILE:\n        case Token.DO:\n          return false;\n        case Token.TRY:\n          // Consider all code under a try/catch to be conditionally executed.\n          if (!hasFinally(parent) || parent.getLastChild() != n) {\n            return false;\n          }\n          continue inspect;\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n          return false;\n        case Token.SCRIPT:\n        case Token.FUNCTION:\n          // Done, we've reached the scope root.\n          break inspect;\n      }",
      "info" : "SwitchStatement[93464-94628]:SwitchStatement[93464-94628]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[93500-93514]:SwitchCase[93500-93514]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[93523-93539]:SwitchCase[93523-93539]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[93548-93563]:SwitchCase[93548-93563]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[93572-93586]:SwitchCase[93572-93586]"
    }, {
      "left" : "if (parent.getFirstChild() != n)",
      "right" : "if (parent.getFirstChild() != n)",
      "info" : "IfStatement[93597-93669]:IfStatement[93597-93669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93630-93669]:Block[93630-93669]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[93644-93657]:ReturnStatement[93644-93657]"
    }, {
      "left" : "continue inspect;",
      "right" : "continue inspect;",
      "info" : "ContinueStatement[93728-93745]:ContinueStatement[93728-93745]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[93754-93769]:SwitchCase[93754-93769]"
    }, {
      "left" : "if (NodeUtil.isForIn(parent))",
      "right" : "if (NodeUtil.isForIn(parent))",
      "info" : "IfStatement[93780-94023]:IfStatement[93780-94023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93810-93915]:Block[93810-93915]"
    }, {
      "left" : "if (parent.getChildAtIndex(1) != n)",
      "right" : "if (parent.getChildAtIndex(1) != n)",
      "info" : "IfStatement[93824-93903]:IfStatement[93824-93903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93860-93903]:Block[93860-93903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[93876-93889]:ReturnStatement[93876-93889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93921-94023]:Block[93921-94023]"
    }, {
      "left" : "if (parent.getFirstChild() != n)",
      "right" : "if (parent.getFirstChild() != n)",
      "info" : "IfStatement[93935-94011]:IfStatement[93935-94011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93968-94011]:Block[93968-94011]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[93984-93997]:ReturnStatement[93984-93997]"
    }, {
      "left" : "continue inspect;",
      "right" : "continue inspect;",
      "info" : "ContinueStatement[94082-94099]:ContinueStatement[94082-94099]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[94108-94125]:SwitchCase[94108-94125]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[94134-94148]:SwitchCase[94134-94148]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[94159-94172]:ReturnStatement[94159-94172]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[94181-94196]:SwitchCase[94181-94196]"
    }, {
      "left" : "if (!hasFinally(parent) || parent.getLastChild() != n)",
      "right" : "if (!hasFinally(parent) || parent.getLastChild() != n)",
      "info" : "IfStatement[94286-94380]:IfStatement[94286-94380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94341-94380]:Block[94341-94380]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[94355-94368]:ReturnStatement[94355-94368]"
    }, {
      "left" : "continue inspect;",
      "right" : "continue inspect;",
      "info" : "ContinueStatement[94391-94408]:ContinueStatement[94391-94408]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[94417-94433]:SwitchCase[94417-94433]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[94442-94466]:SwitchCase[94442-94466]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[94477-94490]:ReturnStatement[94477-94490]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[94499-94517]:SwitchCase[94499-94517]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[94526-94546]:SwitchCase[94526-94546]"
    }, {
      "left" : "break inspect;",
      "right" : "break inspect;",
      "info" : "BreakStatement[94606-94620]:BreakStatement[94606-94620]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[94676-94688]:ReturnStatement[94676-94688]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[94768-94774]:Modifier[94768-94774]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[94775-94779]:SimpleType[94775-94779]"
    }, {
      "left" : "booleanNode",
      "right" : "booleanNode",
      "info" : "SimpleName[94780-94791]:SimpleName[94780-94791]"
    }, {
      "left" : "boolean value",
      "right" : "boolean value",
      "info" : "SingleVariableDeclaration[94792-94805]:SingleVariableDeclaration[94792-94805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94807-94863]:Block[94807-94863]"
    }, {
      "left" : "return value ? IR.trueNode() : IR.falseNode();",
      "right" : "return value ? IR.trueNode() : IR.falseNode();",
      "info" : "ReturnStatement[94813-94859]:ReturnStatement[94813-94859]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[94938-94944]:Modifier[94938-94944]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[94945-94949]:SimpleType[94945-94949]"
    }, {
      "left" : "numberNode",
      "right" : "numberNode",
      "info" : "SimpleName[94950-94960]:SimpleName[94950-94960]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[94961-94973]:SingleVariableDeclaration[94961-94973]"
    }, {
      "left" : "Node srcref",
      "right" : "Node srcref",
      "info" : "SingleVariableDeclaration[94975-94986]:SingleVariableDeclaration[94975-94986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94988-95392]:Block[94988-95392]"
    }, {
      "left" : "Node result;",
      "right" : "Node result;",
      "info" : "VariableDeclarationStatement[94994-95006]:VariableDeclarationStatement[94994-95006]"
    }, {
      "left" : "if (Double.isNaN(value))",
      "right" : "if (Double.isNaN(value))",
      "info" : "IfStatement[95011-95304]:IfStatement[95011-95304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95036-95074]:Block[95036-95074]"
    }, {
      "left" : "result = IR.name(\"NaN\");",
      "right" : "result = IR.name(\"NaN\");",
      "info" : "ExpressionStatement[95044-95068]:ExpressionStatement[95044-95068]"
    }, {
      "left" : "if (value == Double.POSITIVE_INFINITY)",
      "right" : "if (value == Double.POSITIVE_INFINITY)",
      "info" : "IfStatement[95080-95304]:IfStatement[95080-95304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95119-95162]:Block[95119-95162]"
    }, {
      "left" : "result = IR.name(\"Infinity\");",
      "right" : "result = IR.name(\"Infinity\");",
      "info" : "ExpressionStatement[95127-95156]:ExpressionStatement[95127-95156]"
    }, {
      "left" : "if (value == Double.NEGATIVE_INFINITY)",
      "right" : "if (value == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[95168-95304]:IfStatement[95168-95304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95207-95258]:Block[95207-95258]"
    }, {
      "left" : "result = IR.neg(IR.name(\"Infinity\"));",
      "right" : "result = IR.neg(IR.name(\"Infinity\"));",
      "info" : "ExpressionStatement[95215-95252]:ExpressionStatement[95215-95252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95264-95304]:Block[95264-95304]"
    }, {
      "left" : "result = IR.number(value);",
      "right" : "result = IR.number(value);",
      "info" : "ExpressionStatement[95272-95298]:ExpressionStatement[95272-95298]"
    }, {
      "left" : "if (srcref != null)",
      "right" : "if (srcref != null)",
      "info" : "IfStatement[95309-95369]:IfStatement[95309-95369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95329-95369]:Block[95329-95369]"
    }, {
      "left" : "result.srcrefTree(srcref);",
      "right" : "result.srcrefTree(srcref);",
      "info" : "ExpressionStatement[95337-95363]:ExpressionStatement[95337-95363]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[95374-95388]:ReturnStatement[95374-95388]"
    } ]
  },
  "interFileMappings" : { }
}