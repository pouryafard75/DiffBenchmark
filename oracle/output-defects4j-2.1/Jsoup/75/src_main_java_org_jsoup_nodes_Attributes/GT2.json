{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Attributes",
      "right" : "Attributes",
      "info" : "TypeDeclaration[424-13720]:TypeDeclaration[424-13626]"
    }, {
      "left" : "protected static final String dataPrefix = \"data-\";",
      "right" : "protected static final String dataPrefix = \"data-\";",
      "info" : "FieldDeclaration[966-1017]:FieldDeclaration[966-1017]"
    }, {
      "left" : "private static final int InitialCapacity = 4;",
      "right" : "private static final int InitialCapacity = 4;",
      "info" : "FieldDeclaration[1022-1067]:FieldDeclaration[1022-1067]"
    }, {
      "left" : "private static final int GrowthFactor = 2;",
      "right" : "private static final int GrowthFactor = 2;",
      "info" : "FieldDeclaration[1165-1207]:FieldDeclaration[1165-1207]"
    }, {
      "left" : "private static final String[] Empty = {};",
      "right" : "private static final String[] Empty = {};",
      "info" : "FieldDeclaration[1212-1253]:FieldDeclaration[1212-1253]"
    }, {
      "left" : "static final int NotFound = -1;",
      "right" : "static final int NotFound = -1;",
      "info" : "FieldDeclaration[1258-1289]:FieldDeclaration[1258-1289]"
    }, {
      "left" : "private static final String EmptyString = \"\";",
      "right" : "private static final String EmptyString = \"\";",
      "info" : "FieldDeclaration[1294-1339]:FieldDeclaration[1294-1339]"
    }, {
      "left" : "private int size = 0;",
      "right" : "private int size = 0;",
      "info" : "FieldDeclaration[1345-1366]:FieldDeclaration[1345-1366]"
    }, {
      "left" : "String[] keys = Empty;",
      "right" : "String[] keys = Empty;",
      "info" : "FieldDeclaration[1431-1453]:FieldDeclaration[1431-1453]"
    }, {
      "left" : "String[] vals = Empty;",
      "right" : "String[] vals = Empty;",
      "info" : "FieldDeclaration[1458-1480]:FieldDeclaration[1458-1480]"
    }, {
      "left" : "private void checkCapacity(int minNewSize)",
      "right" : "private void checkCapacity(int minNewSize)",
      "info" : "MethodDeclaration[1521-1942]:MethodDeclaration[1521-1942]"
    }, {
      "left" : "private static String[] copyOf(String[] orig, int size)",
      "right" : "private static String[] copyOf(String[] orig, int size)",
      "info" : "MethodDeclaration[2023-2244]:MethodDeclaration[2023-2244]"
    }, {
      "left" : "int indexOfKey(String key)",
      "right" : "int indexOfKey(String key)",
      "info" : "MethodDeclaration[2250-2454]:MethodDeclaration[2250-2454]"
    }, {
      "left" : "private int indexOfKeyIgnoreCase(String key)",
      "right" : "private int indexOfKeyIgnoreCase(String key)",
      "info" : "MethodDeclaration[2460-2692]:MethodDeclaration[2460-2692]"
    }, {
      "left" : "static String checkNotNull(String val)",
      "right" : "static String checkNotNull(String val)",
      "info" : "MethodDeclaration[2803-2897]:MethodDeclaration[2803-2897]"
    }, {
      "left" : "public String get(String key)",
      "right" : "public String get(String key)",
      "info" : "MethodDeclaration[2903-3264]:MethodDeclaration[2903-3264]"
    }, {
      "left" : "public String getIgnoreCase(String key)",
      "right" : "public String getIgnoreCase(String key)",
      "info" : "MethodDeclaration[3270-3647]:MethodDeclaration[3270-3647]"
    }, {
      "left" : "private void add(String key, String value)",
      "right" : "private void add(String key, String value)",
      "info" : "MethodDeclaration[3701-3854]:MethodDeclaration[3701-3854]"
    }, {
      "left" : "public Attributes put(String key, String value)",
      "right" : "public Attributes put(String key, String value)",
      "info" : "MethodDeclaration[3860-4275]:MethodDeclaration[3860-4275]"
    }, {
      "left" : "void putIgnoreCase(String key, String value)",
      "right" : "void putIgnoreCase(String key, String value)",
      "info" : "MethodDeclaration[4281-4579]:MethodDeclaration[4281-4579]"
    }, {
      "left" : "public Attributes put(String key, boolean value)",
      "right" : "public Attributes put(String key, boolean value)",
      "info" : "MethodDeclaration[4585-4983]:MethodDeclaration[4585-4983]"
    }, {
      "left" : "public Attributes put(Attribute attribute)",
      "right" : "public Attributes put(Attribute attribute)",
      "info" : "MethodDeclaration[4989-5362]:MethodDeclaration[4989-5362]"
    }, {
      "left" : "private void remove(int index)",
      "right" : "private void remove(int index)",
      "info" : "MethodDeclaration[5397-5777]:MethodDeclaration[5397-5777]"
    }, {
      "left" : "public void remove(String key)",
      "right" : "public void remove(String key)",
      "info" : "MethodDeclaration[5783-6016]:MethodDeclaration[5783-6016]"
    }, {
      "left" : "public void removeIgnoreCase(String key)",
      "right" : "public void removeIgnoreCase(String key)",
      "info" : "MethodDeclaration[6022-6277]:MethodDeclaration[6022-6277]"
    }, {
      "left" : "public boolean hasKey(String key)",
      "right" : "public boolean hasKey(String key)",
      "info" : "MethodDeclaration[6283-6548]:MethodDeclaration[6283-6548]"
    }, {
      "left" : "public boolean hasKeyIgnoreCase(String key)",
      "right" : "public boolean hasKeyIgnoreCase(String key)",
      "info" : "MethodDeclaration[6554-6824]:MethodDeclaration[6554-6824]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[6830-6957]:MethodDeclaration[6830-6957]"
    }, {
      "left" : "public void addAll(Attributes incoming)",
      "right" : "public void addAll(Attributes incoming)",
      "info" : "MethodDeclaration[6963-7380]:MethodDeclaration[6963-7380]"
    }, {
      "left" : "public Iterator<Attribute> iterator()",
      "right" : "public Iterator<Attribute> iterator()",
      "info" : "MethodDeclaration[7386-7978]:MethodDeclaration[7386-7978]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "FieldDeclaration[7481-7491]:FieldDeclaration[7481-7491]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[7505-7600]:MethodDeclaration[7505-7600]"
    }, {
      "left" : "public Attribute next()",
      "right" : "public Attribute next()",
      "info" : "MethodDeclaration[7614-7814]:MethodDeclaration[7614-7814]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[7828-7961]:MethodDeclaration[7828-7961]"
    }, {
      "left" : "public List<Attribute> asList()",
      "right" : "public List<Attribute> asList()",
      "info" : "MethodDeclaration[7984-8557]:MethodDeclaration[7984-8557]"
    }, {
      "left" : "public Map<String, String> dataset()",
      "right" : "public Map<String, String> dataset()",
      "info" : "MethodDeclaration[8563-8855]:MethodDeclaration[8563-8855]"
    }, {
      "left" : "public String html()",
      "right" : "public String html()",
      "info" : "MethodDeclaration[8861-9416]:MethodDeclaration[8861-9416]"
    }, {
      "left" : "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException",
      "right" : "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException",
      "info" : "MethodDeclaration[9422-10201]:MethodDeclaration[9422-10107]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[10207-10276]:MethodDeclaration[10113-10182]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[10282-10856]:MethodDeclaration[10188-10762]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[10862-11223]:MethodDeclaration[10768-11129]"
    }, {
      "left" : "public Attributes clone()",
      "right" : "public Attributes clone()",
      "info" : "MethodDeclaration[11229-11585]:MethodDeclaration[11135-11491]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[11591-11776]:MethodDeclaration[11497-11682]"
    }, {
      "left" : "Dataset",
      "right" : "Dataset",
      "info" : "TypeDeclaration[11782-13630]:TypeDeclaration[11688-13536]"
    }, {
      "left" : "private final Attributes attributes;",
      "right" : "private final Attributes attributes;",
      "info" : "FieldDeclaration[11857-11893]:FieldDeclaration[11763-11799]"
    }, {
      "left" : "private Dataset(Attributes attributes)",
      "right" : "private Dataset(Attributes attributes)",
      "info" : "MethodDeclaration[11903-11995]:MethodDeclaration[11809-11901]"
    }, {
      "left" : "public Set<Entry<String, String>> entrySet()",
      "right" : "public Set<Entry<String, String>> entrySet()",
      "info" : "MethodDeclaration[12005-12114]:MethodDeclaration[11911-12020]"
    }, {
      "left" : "public String put(String key, String value)",
      "right" : "public String put(String key, String value)",
      "info" : "MethodDeclaration[12124-12404]:MethodDeclaration[12030-12310]"
    }, {
      "left" : "EntrySet",
      "right" : "EntrySet",
      "info" : "TypeDeclaration[12414-12899]:TypeDeclaration[12320-12805]"
    }, {
      "left" : "public Iterator<Map.Entry<String, String>> iterator()",
      "right" : "public Iterator<Map.Entry<String, String>> iterator()",
      "info" : "MethodDeclaration[12499-12636]:MethodDeclaration[12405-12542]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[12650-12889]:MethodDeclaration[12556-12795]"
    }, {
      "left" : "DatasetIterator",
      "right" : "DatasetIterator",
      "info" : "TypeDeclaration[12909-13624]:TypeDeclaration[12815-13530]"
    }, {
      "left" : "private Iterator<Attribute> attrIter = attributes.iterator();",
      "right" : "private Iterator<Attribute> attrIter = attributes.iterator();",
      "info" : "FieldDeclaration[13000-13061]:FieldDeclaration[12906-12967]"
    }, {
      "left" : "private Attribute attr;",
      "right" : "private Attribute attr;",
      "info" : "FieldDeclaration[13074-13097]:FieldDeclaration[12980-13003]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[13110-13348]:MethodDeclaration[13016-13254]"
    }, {
      "left" : "public Entry<String, String> next()",
      "right" : "public Entry<String, String> next()",
      "info" : "MethodDeclaration[13362-13514]:MethodDeclaration[13268-13420]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[13528-13614]:MethodDeclaration[13434-13520]"
    }, {
      "left" : "private static String dataKey(String key)",
      "right" : "private static String dataKey(String key)",
      "info" : "MethodDeclaration[13636-13718]:MethodDeclaration[13542-13624]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1564-1942]:Block[1564-1942]"
    }, {
      "left" : "Validate.isTrue(minNewSize >= size);",
      "right" : "Validate.isTrue(minNewSize >= size);",
      "info" : "ExpressionStatement[1574-1610]:ExpressionStatement[1574-1610]"
    }, {
      "left" : "int curSize = keys.length;",
      "right" : "int curSize = keys.length;",
      "info" : "VariableDeclarationStatement[1619-1645]:VariableDeclarationStatement[1619-1645]"
    }, {
      "left" : "if (curSize >= minNewSize)",
      "right" : "if (curSize >= minNewSize)",
      "info" : "IfStatement[1654-1700]:IfStatement[1654-1700]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[1693-1700]:ReturnStatement[1693-1700]"
    }, {
      "left" : "int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;",
      "right" : "int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity;",
      "info" : "VariableDeclarationStatement[1710-1791]:VariableDeclarationStatement[1710-1791]"
    }, {
      "left" : "if (minNewSize > newSize)",
      "right" : "if (minNewSize > newSize)",
      "info" : "IfStatement[1800-1859]:IfStatement[1800-1859]"
    }, {
      "left" : "newSize = minNewSize;",
      "right" : "newSize = minNewSize;",
      "info" : "ExpressionStatement[1838-1859]:ExpressionStatement[1838-1859]"
    }, {
      "left" : "keys = copyOf(keys, newSize);",
      "right" : "keys = copyOf(keys, newSize);",
      "info" : "ExpressionStatement[1869-1898]:ExpressionStatement[1869-1898]"
    }, {
      "left" : "vals = copyOf(vals, newSize);",
      "right" : "vals = copyOf(vals, newSize);",
      "info" : "ExpressionStatement[1907-1936]:ExpressionStatement[1907-1936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2079-2244]:Block[2079-2244]"
    }, {
      "left" : "final String[] copy = new String[size];",
      "right" : "final String[] copy = new String[size];",
      "info" : "VariableDeclarationStatement[2089-2128]:VariableDeclarationStatement[2089-2128]"
    }, {
      "left" : "System.arraycopy(orig, 0, copy, 0,\n                Math.min(orig.length, size));",
      "right" : "System.arraycopy(orig, 0, copy, 0,\n                Math.min(orig.length, size));",
      "info" : "ExpressionStatement[2137-2217]:ExpressionStatement[2137-2217]"
    }, {
      "left" : "return copy;",
      "right" : "return copy;",
      "info" : "ReturnStatement[2226-2238]:ReturnStatement[2226-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2277-2454]:Block[2277-2454]"
    }, {
      "left" : "Validate.notNull(key);",
      "right" : "Validate.notNull(key);",
      "info" : "ExpressionStatement[2287-2309]:ExpressionStatement[2287-2309]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[2318-2423]:ForStatement[2318-2423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2349-2423]:Block[2349-2423]"
    }, {
      "left" : "if (key.equals(keys[i]))",
      "right" : "if (key.equals(keys[i]))",
      "info" : "IfStatement[2363-2413]:IfStatement[2363-2413]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[2404-2413]:ReturnStatement[2404-2413]"
    }, {
      "left" : "return NotFound;",
      "right" : "return NotFound;",
      "info" : "ReturnStatement[2432-2448]:ReturnStatement[2432-2448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2505-2692]:Block[2505-2692]"
    }, {
      "left" : "Validate.notNull(key);",
      "right" : "Validate.notNull(key);",
      "info" : "ExpressionStatement[2515-2537]:ExpressionStatement[2515-2537]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[2546-2661]:ForStatement[2546-2661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2577-2661]:Block[2577-2661]"
    }, {
      "left" : "if (key.equalsIgnoreCase(keys[i]))",
      "right" : "if (key.equalsIgnoreCase(keys[i]))",
      "info" : "IfStatement[2591-2651]:IfStatement[2591-2651]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[2642-2651]:ReturnStatement[2642-2651]"
    }, {
      "left" : "return NotFound;",
      "right" : "return NotFound;",
      "info" : "ReturnStatement[2670-2686]:ReturnStatement[2670-2686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2842-2897]:Block[2842-2897]"
    }, {
      "left" : "return val == null ? EmptyString : val;",
      "right" : "return val == null ? EmptyString : val;",
      "info" : "ReturnStatement[2852-2891]:ReturnStatement[2852-2891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3156-3264]:Block[3156-3264]"
    }, {
      "left" : "int i = indexOfKey(key);",
      "right" : "int i = indexOfKey(key);",
      "info" : "VariableDeclarationStatement[3166-3190]:VariableDeclarationStatement[3166-3190]"
    }, {
      "left" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "right" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "info" : "ReturnStatement[3199-3258]:ReturnStatement[3199-3258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3529-3647]:Block[3529-3647]"
    }, {
      "left" : "int i = indexOfKeyIgnoreCase(key);",
      "right" : "int i = indexOfKeyIgnoreCase(key);",
      "info" : "VariableDeclarationStatement[3539-3573]:VariableDeclarationStatement[3539-3573]"
    }, {
      "left" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "right" : "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
      "info" : "ReturnStatement[3582-3641]:ReturnStatement[3582-3641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3744-3854]:Block[3744-3854]"
    }, {
      "left" : "checkCapacity(size + 1);",
      "right" : "checkCapacity(size + 1);",
      "info" : "ExpressionStatement[3754-3778]:ExpressionStatement[3754-3778]"
    }, {
      "left" : "keys[size] = key;",
      "right" : "keys[size] = key;",
      "info" : "ExpressionStatement[3787-3804]:ExpressionStatement[3787-3804]"
    }, {
      "left" : "vals[size] = value;",
      "right" : "vals[size] = value;",
      "info" : "ExpressionStatement[3813-3832]:ExpressionStatement[3813-3832]"
    }, {
      "left" : "size++;",
      "right" : "size++;",
      "info" : "ExpressionStatement[3841-3848]:ExpressionStatement[3841-3848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4116-4275]:Block[4116-4275]"
    }, {
      "left" : "int i = indexOfKey(key);",
      "right" : "int i = indexOfKey(key);",
      "info" : "VariableDeclarationStatement[4126-4150]:VariableDeclarationStatement[4126-4150]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[4159-4248]:IfStatement[4159-4248]"
    }, {
      "left" : "vals[i] = value;",
      "right" : "vals[i] = value;",
      "info" : "ExpressionStatement[4190-4206]:ExpressionStatement[4190-4206]"
    }, {
      "left" : "add(key, value);",
      "right" : "add(key, value);",
      "info" : "ExpressionStatement[4232-4248]:ExpressionStatement[4232-4248]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4257-4269]:ReturnStatement[4257-4269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4326-4579]:Block[4326-4579]"
    }, {
      "left" : "int i = indexOfKeyIgnoreCase(key);",
      "right" : "int i = indexOfKeyIgnoreCase(key);",
      "info" : "VariableDeclarationStatement[4336-4370]:VariableDeclarationStatement[4336-4370]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[4379-4573]:IfStatement[4379-4573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4398-4531]:Block[4398-4531]"
    }, {
      "left" : "vals[i] = value;",
      "right" : "vals[i] = value;",
      "info" : "ExpressionStatement[4412-4428]:ExpressionStatement[4412-4428]"
    }, {
      "left" : "if (!keys[i].equals(key))",
      "right" : "if (!keys[i].equals(key))",
      "info" : "IfStatement[4441-4521]:IfStatement[4441-4521]"
    }, {
      "left" : "keys[i] = key;",
      "right" : "keys[i] = key;",
      "info" : "ExpressionStatement[4507-4521]:ExpressionStatement[4507-4521]"
    }, {
      "left" : "add(key, value);",
      "right" : "add(key, value);",
      "info" : "ExpressionStatement[4557-4573]:ExpressionStatement[4557-4573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4860-4983]:Block[4860-4983]"
    }, {
      "left" : "if (value)",
      "right" : "if (value)",
      "info" : "IfStatement[4870-4956]:IfStatement[4870-4956]"
    }, {
      "left" : "putIgnoreCase(key, null);",
      "right" : "putIgnoreCase(key, null);",
      "info" : "ExpressionStatement[4893-4918]:ExpressionStatement[4893-4918]"
    }, {
      "left" : "remove(key);",
      "right" : "remove(key);",
      "info" : "ExpressionStatement[4944-4956]:ExpressionStatement[4944-4956]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4965-4977]:ReturnStatement[4965-4977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5209-5362]:Block[5209-5362]"
    }, {
      "left" : "Validate.notNull(attribute);",
      "right" : "Validate.notNull(attribute);",
      "info" : "ExpressionStatement[5219-5247]:ExpressionStatement[5219-5247]"
    }, {
      "left" : "put(attribute.getKey(), attribute.getValue());",
      "right" : "put(attribute.getKey(), attribute.getValue());",
      "info" : "ExpressionStatement[5256-5302]:ExpressionStatement[5256-5302]"
    }, {
      "left" : "attribute.parent = this;",
      "right" : "attribute.parent = this;",
      "info" : "ExpressionStatement[5311-5335]:ExpressionStatement[5311-5335]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5344-5356]:ReturnStatement[5344-5356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5428-5777]:Block[5428-5777]"
    }, {
      "left" : "Validate.isFalse(index >= size);",
      "right" : "Validate.isFalse(index >= size);",
      "info" : "ExpressionStatement[5438-5470]:ExpressionStatement[5438-5470]"
    }, {
      "left" : "int shifted = size - index - 1;",
      "right" : "int shifted = size - index - 1;",
      "info" : "VariableDeclarationStatement[5479-5510]:VariableDeclarationStatement[5479-5510]"
    }, {
      "left" : "if (shifted > 0)",
      "right" : "if (shifted > 0)",
      "info" : "IfStatement[5519-5685]:IfStatement[5519-5685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5536-5685]:Block[5536-5685]"
    }, {
      "left" : "System.arraycopy(keys, index + 1, keys, index, shifted);",
      "right" : "System.arraycopy(keys, index + 1, keys, index, shifted);",
      "info" : "ExpressionStatement[5550-5606]:ExpressionStatement[5550-5606]"
    }, {
      "left" : "System.arraycopy(vals, index + 1, vals, index, shifted);",
      "right" : "System.arraycopy(vals, index + 1, vals, index, shifted);",
      "info" : "ExpressionStatement[5619-5675]:ExpressionStatement[5619-5675]"
    }, {
      "left" : "size--;",
      "right" : "size--;",
      "info" : "ExpressionStatement[5694-5701]:ExpressionStatement[5694-5701]"
    }, {
      "left" : "keys[size] = null;",
      "right" : "keys[size] = null;",
      "info" : "ExpressionStatement[5710-5728]:ExpressionStatement[5710-5728]"
    }, {
      "left" : "vals[size] = null;",
      "right" : "vals[size] = null;",
      "info" : "ExpressionStatement[5753-5771]:ExpressionStatement[5753-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5926-6016]:Block[5926-6016]"
    }, {
      "left" : "int i = indexOfKey(key);",
      "right" : "int i = indexOfKey(key);",
      "info" : "VariableDeclarationStatement[5936-5960]:VariableDeclarationStatement[5936-5960]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[5969-6010]:IfStatement[5969-6010]"
    }, {
      "left" : "remove(i);",
      "right" : "remove(i);",
      "info" : "ExpressionStatement[6000-6010]:ExpressionStatement[6000-6010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6177-6277]:Block[6177-6277]"
    }, {
      "left" : "int i = indexOfKeyIgnoreCase(key);",
      "right" : "int i = indexOfKeyIgnoreCase(key);",
      "info" : "VariableDeclarationStatement[6187-6221]:VariableDeclarationStatement[6187-6221]"
    }, {
      "left" : "if (i != NotFound)",
      "right" : "if (i != NotFound)",
      "info" : "IfStatement[6230-6271]:IfStatement[6230-6271]"
    }, {
      "left" : "remove(i);",
      "right" : "remove(i);",
      "info" : "ExpressionStatement[6261-6271]:ExpressionStatement[6261-6271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6497-6548]:Block[6497-6548]"
    }, {
      "left" : "return indexOfKey(key) != NotFound;",
      "right" : "return indexOfKey(key) != NotFound;",
      "info" : "ReturnStatement[6507-6542]:ReturnStatement[6507-6542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6763-6824]:Block[6763-6824]"
    }, {
      "left" : "return indexOfKeyIgnoreCase(key) != NotFound;",
      "right" : "return indexOfKeyIgnoreCase(key) != NotFound;",
      "info" : "ReturnStatement[6773-6818]:ReturnStatement[6773-6818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6929-6957]:Block[6929-6957]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[6939-6951]:ReturnStatement[6939-6951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7142-7380]:Block[7142-7380]"
    }, {
      "left" : "if (incoming.size() == 0)",
      "right" : "if (incoming.size() == 0)",
      "info" : "IfStatement[7152-7197]:IfStatement[7152-7197]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7190-7197]:ReturnStatement[7190-7197]"
    }, {
      "left" : "checkCapacity(size + incoming.size);",
      "right" : "checkCapacity(size + incoming.size);",
      "info" : "ExpressionStatement[7206-7242]:ExpressionStatement[7206-7242]"
    }, {
      "left" : "for (Attribute attr : incoming)",
      "right" : "for (Attribute attr : incoming)",
      "info" : "EnhancedForStatement[7252-7373]:EnhancedForStatement[7252-7373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7284-7373]:Block[7284-7373]"
    }, {
      "left" : "put(attr);",
      "right" : "put(attr);",
      "info" : "ExpressionStatement[7353-7363]:ExpressionStatement[7353-7363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7424-7978]:Block[7424-7978]"
    }, {
      "left" : "return new Iterator<Attribute>() {\n            int i = 0;\n\n            @Override\n            public boolean hasNext() {\n                return i < size;\n            }\n\n            @Override\n            public Attribute next() {\n                final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @Override\n            public void remove() {\n                Attributes.this.remove(--i); // next() advanced, so rewind\n            }\n        };",
      "right" : "return new Iterator<Attribute>() {\n            int i = 0;\n\n            @Override\n            public boolean hasNext() {\n                return i < size;\n            }\n\n            @Override\n            public Attribute next() {\n                final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @Override\n            public void remove() {\n                Attributes.this.remove(--i); // next() advanced, so rewind\n            }\n        };",
      "info" : "ReturnStatement[7434-7972]:ReturnStatement[7434-7972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7552-7600]:Block[7552-7600]"
    }, {
      "left" : "return i < size;",
      "right" : "return i < size;",
      "info" : "ReturnStatement[7570-7586]:ReturnStatement[7570-7586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7660-7814]:Block[7660-7814]"
    }, {
      "left" : "final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);",
      "right" : "final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);",
      "info" : "VariableDeclarationStatement[7678-7750]:VariableDeclarationStatement[7678-7750]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[7767-7771]:ExpressionStatement[7767-7771]"
    }, {
      "left" : "return attr;",
      "right" : "return attr;",
      "info" : "ReturnStatement[7788-7800]:ReturnStatement[7788-7800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7871-7961]:Block[7871-7961]"
    }, {
      "left" : "Attributes.this.remove(--i);",
      "right" : "Attributes.this.remove(--i);",
      "info" : "ExpressionStatement[7889-7917]:ExpressionStatement[7889-7917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8146-8557]:Block[8146-8557]"
    }, {
      "left" : "ArrayList<Attribute> list = new ArrayList<>(size);",
      "right" : "ArrayList<Attribute> list = new ArrayList<>(size);",
      "info" : "VariableDeclarationStatement[8156-8206]:VariableDeclarationStatement[8156-8206]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[8215-8500]:ForStatement[8215-8500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8246-8500]:Block[8246-8500]"
    }, {
      "left" : "Attribute attr = vals[i] == null ?\n                new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it\n                new Attribute(keys[i], vals[i], Attributes.this);",
      "right" : "Attribute attr = vals[i] == null ?\n                new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it\n                new Attribute(keys[i], vals[i], Attributes.this);",
      "info" : "VariableDeclarationStatement[8260-8462]:VariableDeclarationStatement[8260-8462]"
    }, {
      "left" : "list.add(attr);",
      "right" : "list.add(attr);",
      "info" : "ExpressionStatement[8475-8490]:ExpressionStatement[8475-8490]"
    }, {
      "left" : "return Collections.unmodifiableList(list);",
      "right" : "return Collections.unmodifiableList(list);",
      "info" : "ReturnStatement[8509-8551]:ReturnStatement[8509-8551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8814-8855]:Block[8814-8855]"
    }, {
      "left" : "return new Dataset(this);",
      "right" : "return new Dataset(this);",
      "info" : "ReturnStatement[8824-8849]:ReturnStatement[8824-8849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9074-9416]:Block[9074-9416]"
    }, {
      "left" : "StringBuilder accum = new StringBuilder();",
      "right" : "StringBuilder accum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[9084-9126]:VariableDeclarationStatement[9084-9126]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9135-9377]:TryStatement[9135-9377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9139-9272]:Block[9139-9272]"
    }, {
      "left" : "html(accum, (new Document(\"\")).outputSettings());",
      "right" : "html(accum, (new Document(\"\")).outputSettings());",
      "info" : "ExpressionStatement[9153-9202]:ExpressionStatement[9153-9202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9295-9377]:Block[9295-9377]"
    }, {
      "left" : "throw new SerializationException(e);",
      "right" : "throw new SerializationException(e);",
      "info" : "ThrowStatement[9331-9367]:ThrowStatement[9331-9367]"
    }, {
      "left" : "return accum.toString();",
      "right" : "return accum.toString();",
      "info" : "ReturnStatement[9386-9410]:ReturnStatement[9386-9410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9516-10201]:Block[9516-10107]"
    }, {
      "left" : "final int sz = size;",
      "right" : "final int sz = size;",
      "info" : "VariableDeclarationStatement[9526-9546]:VariableDeclarationStatement[9526-9546]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[9555-10195]:ForStatement[9555-10101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9584-10195]:Block[9584-10101]"
    }, {
      "left" : "final String key = keys[i];",
      "right" : "final String key = keys[i];",
      "info" : "VariableDeclarationStatement[9643-9670]:VariableDeclarationStatement[9643-9670]"
    }, {
      "left" : "final String val = vals[i];",
      "right" : "final String val = vals[i];",
      "info" : "VariableDeclarationStatement[9683-9710]:VariableDeclarationStatement[9683-9710]"
    }, {
      "left" : "accum.append(' ').append(key);",
      "right" : "accum.append(' ').append(key);",
      "info" : "ExpressionStatement[9723-9753]:ExpressionStatement[9723-9753]"
    }, {
      "left" : "if (!(out.syntax() == Document.OutputSettings.Syntax.html\n                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key))))",
      "right" : "if (!Attribute.shouldCollapseAttribute(key, val, out))",
      "info" : "IfStatement[9851-10185]:IfStatement[9851-10091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10000-10185]:Block[9906-10091]"
    }, {
      "left" : "accum.append(\"=\\\"\");",
      "right" : "accum.append(\"=\\\"\");",
      "info" : "ExpressionStatement[10018-10038]:ExpressionStatement[9924-9944]"
    }, {
      "left" : "Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);",
      "right" : "Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);",
      "info" : "ExpressionStatement[10055-10136]:ExpressionStatement[9961-10042]"
    }, {
      "left" : "accum.append('\"');",
      "right" : "accum.append('\"');",
      "info" : "ExpressionStatement[10153-10171]:ExpressionStatement[10059-10077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10246-10276]:Block[10152-10182]"
    }, {
      "left" : "return html();",
      "right" : "return html();",
      "info" : "ReturnStatement[10256-10270]:ReturnStatement[10162-10176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10551-10856]:Block[10457-10762]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[10561-10588]:IfStatement[10467-10494]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10576-10588]:ReturnStatement[10482-10494]"
    }, {
      "left" : "if (o == null || getClass() != o.getClass())",
      "right" : "if (o == null || getClass() != o.getClass())",
      "info" : "IfStatement[10597-10655]:IfStatement[10503-10561]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10642-10655]:ReturnStatement[10548-10561]"
    }, {
      "left" : "Attributes that = (Attributes) o;",
      "right" : "Attributes that = (Attributes) o;",
      "info" : "VariableDeclarationStatement[10665-10698]:VariableDeclarationStatement[10571-10604]"
    }, {
      "left" : "if (size != that.size)",
      "right" : "if (size != that.size)",
      "info" : "IfStatement[10708-10744]:IfStatement[10614-10650]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10731-10744]:ReturnStatement[10637-10650]"
    }, {
      "left" : "if (!Arrays.equals(keys, that.keys))",
      "right" : "if (!Arrays.equals(keys, that.keys))",
      "info" : "IfStatement[10753-10803]:IfStatement[10659-10709]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10790-10803]:ReturnStatement[10696-10709]"
    }, {
      "left" : "return Arrays.equals(vals, that.vals);",
      "right" : "return Arrays.equals(vals, that.vals);",
      "info" : "ReturnStatement[10812-10850]:ReturnStatement[10718-10756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11058-11223]:Block[10964-11129]"
    }, {
      "left" : "int result = size;",
      "right" : "int result = size;",
      "info" : "VariableDeclarationStatement[11068-11086]:VariableDeclarationStatement[10974-10992]"
    }, {
      "left" : "result = 31 * result + Arrays.hashCode(keys);",
      "right" : "result = 31 * result + Arrays.hashCode(keys);",
      "info" : "ExpressionStatement[11095-11140]:ExpressionStatement[11001-11046]"
    }, {
      "left" : "result = 31 * result + Arrays.hashCode(vals);",
      "right" : "result = 31 * result + Arrays.hashCode(vals);",
      "info" : "ExpressionStatement[11149-11194]:ExpressionStatement[11055-11100]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11203-11217]:ReturnStatement[11109-11123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11269-11585]:Block[11175-11491]"
    }, {
      "left" : "Attributes clone;",
      "right" : "Attributes clone;",
      "info" : "VariableDeclarationStatement[11279-11296]:VariableDeclarationStatement[11185-11202]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11305-11460]:TryStatement[11211-11366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11309-11368]:Block[11215-11274]"
    }, {
      "left" : "clone = (Attributes) super.clone();",
      "right" : "clone = (Attributes) super.clone();",
      "info" : "ExpressionStatement[11323-11358]:ExpressionStatement[11229-11264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11406-11460]:Block[11312-11366]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[11420-11450]:ThrowStatement[11326-11356]"
    }, {
      "left" : "clone.size = size;",
      "right" : "clone.size = size;",
      "info" : "ExpressionStatement[11469-11487]:ExpressionStatement[11375-11393]"
    }, {
      "left" : "keys = copyOf(keys, size);",
      "right" : "keys = copyOf(keys, size);",
      "info" : "ExpressionStatement[11496-11522]:ExpressionStatement[11402-11428]"
    }, {
      "left" : "vals = copyOf(vals, size);",
      "right" : "vals = copyOf(vals, size);",
      "info" : "ExpressionStatement[11531-11557]:ExpressionStatement[11437-11463]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[11566-11579]:ReturnStatement[11472-11485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11676-11776]:Block[11582-11682]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[11686-11770]:ForStatement[11592-11676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-11770]:Block[11623-11676]"
    }, {
      "left" : "keys[i] = lowerCase(keys[i]);",
      "right" : "keys[i] = lowerCase(keys[i]);",
      "info" : "ExpressionStatement[11731-11760]:ExpressionStatement[11637-11666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11942-11995]:Block[11848-11901]"
    }, {
      "left" : "this.attributes = attributes;",
      "right" : "this.attributes = attributes;",
      "info" : "ExpressionStatement[11956-11985]:ExpressionStatement[11862-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12068-12114]:Block[11974-12020]"
    }, {
      "left" : "return new EntrySet();",
      "right" : "return new EntrySet();",
      "info" : "ReturnStatement[12082-12104]:ReturnStatement[11988-12010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12186-12404]:Block[12092-12310]"
    }, {
      "left" : "String dataKey = dataKey(key);",
      "right" : "String dataKey = dataKey(key);",
      "info" : "VariableDeclarationStatement[12200-12230]:VariableDeclarationStatement[12106-12136]"
    }, {
      "left" : "String oldValue = attributes.hasKey(dataKey) ? attributes.get(dataKey) : null;",
      "right" : "String oldValue = attributes.hasKey(dataKey) ? attributes.get(dataKey) : null;",
      "info" : "VariableDeclarationStatement[12243-12321]:VariableDeclarationStatement[12149-12227]"
    }, {
      "left" : "attributes.put(dataKey, value);",
      "right" : "attributes.put(dataKey, value);",
      "info" : "ExpressionStatement[12334-12365]:ExpressionStatement[12240-12271]"
    }, {
      "left" : "return oldValue;",
      "right" : "return oldValue;",
      "info" : "ReturnStatement[12378-12394]:ReturnStatement[12284-12300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12575-12636]:Block[12481-12542]"
    }, {
      "left" : "return new DatasetIterator();",
      "right" : "return new DatasetIterator();",
      "info" : "ReturnStatement[12593-12622]:ReturnStatement[12499-12528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12690-12889]:Block[12596-12795]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[12708-12722]:VariableDeclarationStatement[12614-12628]"
    }, {
      "left" : "Iterator iter = new DatasetIterator();",
      "right" : "Iterator iter = new DatasetIterator();",
      "info" : "VariableDeclarationStatement[12739-12777]:VariableDeclarationStatement[12645-12683]"
    }, {
      "left" : "while (iter.hasNext())\n                    count++;",
      "right" : "while (iter.hasNext())\n                    count++;",
      "info" : "WhileStatement[12794-12845]:WhileStatement[12700-12751]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[12837-12845]:ExpressionStatement[12743-12751]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[12862-12875]:ReturnStatement[12768-12781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13135-13348]:Block[13041-13254]"
    }, {
      "left" : "while (attrIter.hasNext())",
      "right" : "while (attrIter.hasNext())",
      "info" : "WhileStatement[13153-13304]:WhileStatement[13059-13210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13180-13304]:Block[13086-13210]"
    }, {
      "left" : "attr = attrIter.next();",
      "right" : "attr = attrIter.next();",
      "info" : "ExpressionStatement[13202-13225]:ExpressionStatement[13108-13131]"
    }, {
      "left" : "if (attr.isDataAttribute())",
      "right" : "if (attr.isDataAttribute())",
      "info" : "IfStatement[13246-13286]:IfStatement[13152-13192]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13274-13286]:ReturnStatement[13180-13192]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13321-13334]:ReturnStatement[13227-13240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13398-13514]:Block[13304-13420]"
    }, {
      "left" : "return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());",
      "right" : "return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue());",
      "info" : "ReturnStatement[13416-13500]:ReturnStatement[13322-13406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13549-13614]:Block[13455-13520]"
    }, {
      "left" : "attributes.remove(attr.getKey());",
      "right" : "attributes.remove(attr.getKey());",
      "info" : "ExpressionStatement[13567-13600]:ExpressionStatement[13473-13506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13678-13718]:Block[13584-13624]"
    }, {
      "left" : "return dataPrefix + key;",
      "right" : "return dataPrefix + key;",
      "info" : "ReturnStatement[13688-13712]:ReturnStatement[13594-13618]"
    } ]
  },
  "interFileMappings" : { }
}