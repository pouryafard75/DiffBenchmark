{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String LT_ESCAPED = \"\\\\x3c\";",
      "right" : "private static final String LT_ESCAPED = \"\\\\x3c\";",
      "info" : "FieldDeclaration[1231-1280]:FieldDeclaration[1231-1280]"
    }, {
      "left" : "private static final String GT_ESCAPED = \"\\\\x3e\";",
      "right" : "private static final String GT_ESCAPED = \"\\\\x3e\";",
      "info" : "FieldDeclaration[1283-1332]:FieldDeclaration[1283-1332]"
    }, {
      "left" : "private final Map<String, String> escapedJsStrings = Maps.newHashMap();",
      "right" : "private final Map<String, String> escapedJsStrings = Maps.newHashMap();",
      "info" : "FieldDeclaration[1390-1461]:FieldDeclaration[1390-1461]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1465-1604]:FieldDeclaration[1465-1604]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1608-1638]:FieldDeclaration[1608-1638]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1642-1692]:FieldDeclaration[1642-1692]"
    }, {
      "left" : "private final boolean preferSingleQuotes;",
      "right" : "private final boolean preferSingleQuotes;",
      "info" : "FieldDeclaration[1696-1737]:FieldDeclaration[1696-1737]"
    }, {
      "left" : "private final boolean trustedStrings;",
      "right" : "private final boolean trustedStrings;",
      "info" : "FieldDeclaration[1740-1777]:FieldDeclaration[1740-1777]"
    }, {
      "left" : "private final LanguageMode languageMode;",
      "right" : "private final LanguageMode languageMode;",
      "info" : "FieldDeclaration[1780-1820]:FieldDeclaration[1780-1820]"
    }, {
      "left" : "private CodeGenerator(CodeConsumer consumer)",
      "right" : "private CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1824-2030]:MethodDeclaration[1824-2030]"
    }, {
      "left" : "static CodeGenerator forCostEstimation(CodeConsumer consumer)",
      "right" : "static CodeGenerator forCostEstimation(CodeConsumer consumer)",
      "info" : "MethodDeclaration[2034-2141]:MethodDeclaration[2034-2141]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[2145-2928]:MethodDeclaration[2145-2928]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2932-3047]:MethodDeclaration[2932-3047]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[3051-3094]:MethodDeclaration[3051-3094]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[3098-3201]:MethodDeclaration[3098-3201]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[3205-3254]:MethodDeclaration[3205-3254]"
    }, {
      "left" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "right" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "info" : "MethodDeclaration[23003-23840]:MethodDeclaration[23024-23861]"
    }, {
      "left" : "static boolean isSimpleNumber(String s)",
      "right" : "static boolean isSimpleNumber(String s)",
      "info" : "MethodDeclaration[23844-24152]:MethodDeclaration[23865-24173]"
    }, {
      "left" : "static double getSimpleNumber(String s)",
      "right" : "static double getSimpleNumber(String s)",
      "info" : "MethodDeclaration[24156-24509]:MethodDeclaration[24177-24530]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[24513-24722]:MethodDeclaration[24534-24743]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[24726-26823]:MethodDeclaration[24747-26844]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[26827-27683]:MethodDeclaration[26848-27704]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[27687-27986]:MethodDeclaration[27708-28007]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[27990-28073]:MethodDeclaration[28011-28094]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[28077-28216]:MethodDeclaration[28098-28237]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[28220-28680]:MethodDeclaration[28241-28701]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[28684-29370]:MethodDeclaration[28705-29391]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[29374-29476]:MethodDeclaration[29395-29497]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[29480-29584]:MethodDeclaration[29501-29605]"
    }, {
      "left" : "private void addJsString(Node n)",
      "right" : "private void addJsString(Node n)",
      "info" : "MethodDeclaration[29588-30075]:MethodDeclaration[29609-30096]"
    }, {
      "left" : "private String jsString(String s, boolean useSlashV)",
      "right" : "private String jsString(String s, boolean useSlashV)",
      "info" : "MethodDeclaration[30079-30924]:MethodDeclaration[30100-30945]"
    }, {
      "left" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[30928-31118]:MethodDeclaration[30949-31139]"
    }, {
      "left" : "String escapeToDoubleQuotedJsString(String s)",
      "right" : "String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[31122-31334]:MethodDeclaration[31143-31355]"
    }, {
      "left" : "String regexpEscape(String s)",
      "right" : "String regexpEscape(String s)",
      "info" : "MethodDeclaration[31463-31532]:MethodDeclaration[31484-31553]"
    }, {
      "left" : "private String strEscape(\n      String s,\n      char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV,\n      boolean isRegexp)",
      "right" : "private String strEscape(\n      String s,\n      char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV,\n      boolean isRegexp)",
      "info" : "MethodDeclaration[31536-35797]:MethodDeclaration[31557-35818]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[35801-36491]:MethodDeclaration[35822-36512]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[36494-36984]:MethodDeclaration[36515-37005]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[36988-37389]:MethodDeclaration[37009-37410]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[37594-37996]:EnumDeclaration[37615-38017]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[38000-38191]:MethodDeclaration[38021-38212]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[38195-38530]:MethodDeclaration[38216-38551]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[38534-38884]:MethodDeclaration[38555-38905]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[38888-39975]:MethodDeclaration[38909-39996]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1869-2030]:Block[1869-2030]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1875-1889]:ExpressionStatement[1875-1889]"
    }, {
      "left" : "outputCharsetEncoder = null;",
      "right" : "outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1894-1922]:ExpressionStatement[1894-1922]"
    }, {
      "left" : "preferSingleQuotes = false;",
      "right" : "preferSingleQuotes = false;",
      "info" : "ExpressionStatement[1927-1954]:ExpressionStatement[1927-1954]"
    }, {
      "left" : "trustedStrings = true;",
      "right" : "trustedStrings = true;",
      "info" : "ExpressionStatement[1959-1981]:ExpressionStatement[1959-1981]"
    }, {
      "left" : "languageMode = LanguageMode.ECMASCRIPT5;",
      "right" : "languageMode = LanguageMode.ECMASCRIPT5;",
      "info" : "ExpressionStatement[1986-2026]:ExpressionStatement[1986-2026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2096-2141]:Block[2096-2141]"
    }, {
      "left" : "return new CodeGenerator(consumer);",
      "right" : "return new CodeGenerator(consumer);",
      "info" : "ReturnStatement[2102-2137]:ReturnStatement[2102-2137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2220-2928]:Block[2220-2928]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[2226-2240]:ExpressionStatement[2226-2240]"
    }, {
      "left" : "Charset outputCharset = options.getOutputCharset();",
      "right" : "Charset outputCharset = options.getOutputCharset();",
      "info" : "VariableDeclarationStatement[2246-2297]:VariableDeclarationStatement[2246-2297]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[2302-2766]:IfStatement[2302-2766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2367-2691]:Block[2367-2691]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[2652-2685]:ExpressionStatement[2652-2685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2697-2766]:Block[2697-2766]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[2705-2760]:ExpressionStatement[2705-2760]"
    }, {
      "left" : "this.preferSingleQuotes = options.preferSingleQuotes;",
      "right" : "this.preferSingleQuotes = options.preferSingleQuotes;",
      "info" : "ExpressionStatement[2771-2824]:ExpressionStatement[2771-2824]"
    }, {
      "left" : "this.trustedStrings = options.trustedStrings;",
      "right" : "this.trustedStrings = options.trustedStrings;",
      "info" : "ExpressionStatement[2829-2874]:ExpressionStatement[2829-2874]"
    }, {
      "left" : "this.languageMode = options.getLanguageOut();",
      "right" : "this.languageMode = options.getLanguageOut();",
      "info" : "ExpressionStatement[2879-2924]:ExpressionStatement[2879-2924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3016-3047]:Block[3016-3047]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[3022-3043]:ExpressionStatement[3022-3043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3072-3094]:Block[3072-3094]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[3078-3090]:ExpressionStatement[3078-3090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3144-3201]:Block[3144-3201]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[3150-3197]:ExpressionStatement[3150-3197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3222-3254]:Block[3222-3254]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[3228-3250]:ExpressionStatement[3228-3250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23399-23840]:Block[23420-23861]"
    }, {
      "left" : "Node firstNonOperator = n.getFirstChild();",
      "right" : "Node firstNonOperator = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[23405-23447]:VariableDeclarationStatement[23426-23468]"
    }, {
      "left" : "while (firstNonOperator.getType() == op)",
      "right" : "while (firstNonOperator.getType() == op)",
      "info" : "WhileStatement[23452-23559]:WhileStatement[23473-23580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23493-23559]:Block[23514-23580]"
    }, {
      "left" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "right" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "info" : "ExpressionStatement[23501-23553]:ExpressionStatement[23522-23574]"
    }, {
      "left" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "right" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "info" : "ExpressionStatement[23565-23616]:ExpressionStatement[23586-23637]"
    }, {
      "left" : "Node current = firstNonOperator;",
      "right" : "Node current = firstNonOperator;",
      "info" : "VariableDeclarationStatement[23622-23654]:VariableDeclarationStatement[23643-23675]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[23659-23836]:DoStatement[23680-23857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23662-23814]:Block[23683-23835]"
    }, {
      "left" : "current = current.getParent();",
      "right" : "current = current.getParent();",
      "info" : "ExpressionStatement[23670-23700]:ExpressionStatement[23691-23721]"
    }, {
      "left" : "cc.addOp(opStr, true);",
      "right" : "cc.addOp(opStr, true);",
      "info" : "ExpressionStatement[23707-23729]:ExpressionStatement[23728-23750]"
    }, {
      "left" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "right" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "info" : "ExpressionStatement[23736-23808]:ExpressionStatement[23757-23829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23884-24152]:Block[23905-24173]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[23890-23911]:VariableDeclarationStatement[23911-23932]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[23916-23957]:IfStatement[23937-23978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23930-23957]:Block[23951-23978]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23938-23951]:ReturnStatement[23959-23972]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[23962-24105]:ForStatement[23983-24126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24004-24105]:Block[24025-24126]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[24012-24037]:VariableDeclarationStatement[24033-24058]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[24044-24099]:IfStatement[24065-24120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24068-24099]:Block[24089-24120]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24078-24091]:ReturnStatement[24099-24112]"
    }, {
      "left" : "return len == 1 || s.charAt(0) != '0';",
      "right" : "return len == 1 || s.charAt(0) != '0';",
      "info" : "ReturnStatement[24110-24148]:ReturnStatement[24131-24169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24196-24509]:Block[24217-24530]"
    }, {
      "left" : "if (isSimpleNumber(s))",
      "right" : "if (isSimpleNumber(s))",
      "info" : "IfStatement[24202-24482]:IfStatement[24223-24503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24225-24482]:Block[24246-24503]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24233-24476]:TryStatement[24254-24497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24237-24368]:Block[24258-24389]"
    }, {
      "left" : "long l = Long.parseLong(s);",
      "right" : "long l = Long.parseLong(s);",
      "info" : "VariableDeclarationStatement[24247-24274]:VariableDeclarationStatement[24268-24295]"
    }, {
      "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "info" : "IfStatement[24283-24360]:IfStatement[24304-24381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24329-24360]:Block[24350-24381]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[24341-24350]:ReturnStatement[24362-24371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24401-24476]:Block[24422-24497]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[24487-24505]:ReturnStatement[24508-24526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24615-24722]:Block[24636-24743]"
    }, {
      "left" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[24621-24718]:ReturnStatement[24642-24739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25093-26823]:Block[25114-26844]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[25099-25122]:VariableDeclarationStatement[25120-25143]"
    }, {
      "left" : "if (!allowNonBlockChild && !n.isBlock())",
      "right" : "if (!allowNonBlockChild && !n.isBlock())",
      "info" : "IfStatement[25128-25223]:IfStatement[25149-25244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25169-25223]:Block[25190-25244]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[25177-25217]:ThrowStatement[25198-25238]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[25354-26480]:IfStatement[25375-26501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25371-26480]:Block[25392-26501]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[25379-25419]:VariableDeclarationStatement[25400-25440]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[25426-25679]:IfStatement[25447-25700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25442-25679]:Block[25463-25700]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[25452-25655]:IfStatement[25473-25676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25488-25605]:Block[25509-25626]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[25500-25516]:ExpressionStatement[25521-25537]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[25527-25595]:ExpressionStatement[25548-25616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25611-25655]:Block[25632-25676]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[25623-25645]:ExpressionStatement[25644-25666]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25664-25671]:ReturnStatement[25685-25692]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[25687-26400]:IfStatement[25708-26421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25703-26400]:Block[25724-26421]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[25871-25921]:VariableDeclarationStatement[25892-25942]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[25930-25989]:VariableDeclarationStatement[25951-26010]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[25998-26392]:IfStatement[26019-26413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26068-26287]:Block[26089-26308]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[26080-26096]:ExpressionStatement[26101-26117]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[26107-26149]:ExpressionStatement[26128-26170]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[26160-26180]:ExpressionStatement[26181-26201]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[26191-26259]:ExpressionStatement[26212-26280]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[26270-26277]:ReturnStatement[26291-26298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26293-26392]:Block[26314-26413]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[26348-26382]:ExpressionStatement[26369-26403]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[26408-26474]:IfStatement[26429-26495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26423-26474]:Block[26444-26495]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[26433-26466]:ExpressionStatement[26454-26487]"
    }, {
      "left" : "if (nodeToProcess.isEmpty())",
      "right" : "if (nodeToProcess.isEmpty())",
      "info" : "IfStatement[26486-26819]:IfStatement[26507-26840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26515-26551]:Block[26536-26572]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[26523-26545]:ExpressionStatement[26544-26566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26557-26819]:Block[26578-26840]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[26565-26593]:ExpressionStatement[26586-26614]"
    }, {
      "left" : "if (nodeToProcess.isVar())",
      "right" : "if (nodeToProcess.isVar())",
      "info" : "IfStatement[26750-26813]:IfStatement[26771-26834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26777-26813]:Block[26798-26834]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[26787-26805]:ExpressionStatement[26808-26826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26969-27683]:Block[26990-27704]"
    }, {
      "left" : "if (n.isLabel())",
      "right" : "if (n.isLabel())",
      "info" : "IfStatement[26975-27679]:IfStatement[26996-27700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26992-27623]:Block[27013-27644]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[27000-27041]:VariableDeclarationStatement[27021-27062]"
    }, {
      "left" : "if (!labeledStatement.isBlock())",
      "right" : "if (!labeledStatement.isBlock())",
      "info" : "IfStatement[27048-27617]:IfStatement[27069-27638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27081-27149]:Block[27102-27170]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[27091-27141]:ReturnStatement[27112-27162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27155-27617]:Block[27176-27638]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[27330-27609]:IfStatement[27351-27630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27368-27448]:Block[27389-27469]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[27380-27438]:ReturnStatement[27401-27459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27454-27609]:Block[27475-27630]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27586-27599]:ReturnStatement[27607-27620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27629-27679]:Block[27650-27700]"
    }, {
      "left" : "return (n.isFunction() || n.isDo());",
      "right" : "return (n.isFunction() || n.isDo());",
      "info" : "ReturnStatement[27637-27673]:ReturnStatement[27658-27694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27752-27986]:Block[27773-28007]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
      "info" : "IfStatement[27758-27982]:IfStatement[27779-28003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27878-27946]:Block[27899-27967]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[27886-27895]:ExpressionStatement[27907-27916]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[27902-27924]:ExpressionStatement[27923-27945]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[27931-27940]:ExpressionStatement[27952-27961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27952-27982]:Block[27973-28003]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[27960-27976]:ExpressionStatement[27981-27997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28021-28073]:Block[28042-28094]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[28027-28069]:ExpressionStatement[28048-28090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28143-28216]:Block[28164-28237]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[28149-28212]:ExpressionStatement[28170-28233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28321-28680]:Block[28342-28701]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[28327-28676]:ForStatement[28348-28697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28382-28676]:Block[28403-28697]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[28390-28425]:VariableDeclarationStatement[28411-28446]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[28432-28670]:IfStatement[28453-28691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28445-28521]:Block[28466-28542]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[28455-28513]:ExpressionStatement[28476-28534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28527-28670]:Block[28548-28691]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28537-28556]:ExpressionStatement[28558-28577]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0,\n            getContextForNoInOperator(lhsContext));",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0,\n            getContextForNoInOperator(lhsContext));",
      "info" : "ExpressionStatement[28565-28662]:ExpressionStatement[28586-28683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29071-29370]:Block[29092-29391]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[29077-29106]:VariableDeclarationStatement[29098-29127]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[29111-29309]:ForStatement[29132-29330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29166-29309]:Block[29187-29330]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[29174-29233]:IfStatement[29195-29254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29196-29233]:Block[29217-29254]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[29206-29225]:ExpressionStatement[29227-29246]"
    }, {
      "left" : "addExpr(n, 1, Context.OTHER);",
      "right" : "addExpr(n, 1, Context.OTHER);",
      "info" : "ExpressionStatement[29240-29269]:ExpressionStatement[29261-29290]"
    }, {
      "left" : "lastWasEmpty = n.isEmpty();",
      "right" : "lastWasEmpty = n.isEmpty();",
      "info" : "ExpressionStatement[29276-29303]:ExpressionStatement[29297-29324]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[29315-29366]:IfStatement[29336-29387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29333-29366]:Block[29354-29387]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[29341-29360]:ExpressionStatement[29362-29381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29406-29476]:Block[29427-29497]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[29412-29431]:ExpressionStatement[29433-29452]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[29436-29450]:ExpressionStatement[29457-29471]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[29455-29472]:ExpressionStatement[29476-29493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29508-29584]:Block[29529-29605]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[29514-29580]:ForStatement[29535-29601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29559-29580]:Block[29580-29601]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[29567-29574]:ExpressionStatement[29588-29595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29701-30075]:Block[29722-30096]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[29707-29732]:VariableDeclarationStatement[29728-29753]"
    }, {
      "left" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "right" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "info" : "VariableDeclarationStatement[29737-29788]:VariableDeclarationStatement[29758-29809]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[29793-30071]:IfStatement[29814-30092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29808-29862]:Block[29829-29883]"
    }, {
      "left" : "add(jsString(n.getString(), useSlashV));",
      "right" : "add(jsString(n.getString(), useSlashV));",
      "info" : "ExpressionStatement[29816-29856]:ExpressionStatement[29837-29877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29868-30071]:Block[29889-30092]"
    }, {
      "left" : "String cached = escapedJsStrings.get(s);",
      "right" : "String cached = escapedJsStrings.get(s);",
      "info" : "VariableDeclarationStatement[29876-29916]:VariableDeclarationStatement[29897-29937]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[29923-30046]:IfStatement[29944-30067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29943-30046]:Block[29964-30067]"
    }, {
      "left" : "cached = jsString(n.getString(), useSlashV);",
      "right" : "cached = jsString(n.getString(), useSlashV);",
      "info" : "ExpressionStatement[29953-29997]:ExpressionStatement[29974-30018]"
    }, {
      "left" : "escapedJsStrings.put(s, cached);",
      "right" : "escapedJsStrings.put(s, cached);",
      "info" : "ExpressionStatement[30006-30038]:ExpressionStatement[30027-30059]"
    }, {
      "left" : "add(cached);",
      "right" : "add(cached);",
      "info" : "ExpressionStatement[30053-30065]:ExpressionStatement[30074-30086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30132-30924]:Block[30153-30945]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[30138-30167]:VariableDeclarationStatement[30159-30188]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[30240-30394]:ForStatement[30261-30415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30277-30394]:Block[30298-30415]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[30285-30388]:SwitchStatement[30306-30409]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[30316-30325]:SwitchCase[30337-30346]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[30326-30336]:ExpressionStatement[30347-30357]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30337-30343]:BreakStatement[30358-30364]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[30352-30362]:SwitchCase[30373-30383]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[30363-30373]:ExpressionStatement[30384-30394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30374-30380]:BreakStatement[30395-30401]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[30400-30432]:VariableDeclarationStatement[30421-30453]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[30437-30448]:VariableDeclarationStatement[30458-30469]"
    }, {
      "left" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
      "right" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
      "info" : "IfStatement[30453-30805]:IfStatement[30474-30826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30530-30668]:Block[30551-30689]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[30595-30608]:ExpressionStatement[30616-30629]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[30615-30634]:ExpressionStatement[30636-30655]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[30641-30662]:ExpressionStatement[30662-30683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30674-30805]:Block[30695-30826]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[30732-30745]:ExpressionStatement[30753-30766]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[30752-30773]:ExpressionStatement[30773-30794]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[30780-30799]:ExpressionStatement[30801-30820]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
      "info" : "ReturnStatement[30811-30920]:ReturnStatement[30832-30941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31031-31118]:Block[31052-31139]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
      "info" : "ReturnStatement[31037-31114]:ReturnStatement[31058-31135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31256-31334]:Block[31277-31355]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
      "info" : "ReturnStatement[31262-31330]:ReturnStatement[31283-31351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31493-31532]:Block[31514-31553]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[31499-31528]:ReturnStatement[31520-31549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31856-35797]:Block[31877-35818]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[31862-31915]:VariableDeclarationStatement[31883-31936]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[31920-31937]:ExpressionStatement[31941-31958]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[31942-35745]:ForStatement[31963-35766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31979-35745]:Block[32000-35766]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[31987-32008]:VariableDeclarationStatement[32008-32029]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String endScript = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String startComment = \"!--\";\n\n          if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String endScript = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String startComment = \"!--\";\n\n          if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[32015-35739]:SwitchStatement[32036-35760]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[32036-32046]:SwitchCase[32057-32067]"
    }, {
      "left" : "sb.append(\"\\\\x00\");",
      "right" : "sb.append(\"\\\\x00\");",
      "info" : "ExpressionStatement[32047-32066]:ExpressionStatement[32068-32087]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32067-32073]:BreakStatement[32088-32094]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[32082-32096]:SwitchCase[32103-32117]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[32107-32216]:IfStatement[32128-32237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32122-32165]:Block[32143-32186]"
    }, {
      "left" : "sb.append(\"\\\\v\");",
      "right" : "sb.append(\"\\\\v\");",
      "info" : "ExpressionStatement[32136-32153]:ExpressionStatement[32157-32174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32171-32216]:Block[32192-32237]"
    }, {
      "left" : "sb.append(\"\\\\x0B\");",
      "right" : "sb.append(\"\\\\x0B\");",
      "info" : "ExpressionStatement[32185-32204]:ExpressionStatement[32206-32225]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32227-32233]:BreakStatement[32248-32254]"
    }, {
      "left" : "case '\\b':",
      "right" : "case '\\b':",
      "info" : "SwitchCase[32304-32314]:SwitchCase[32325-32335]"
    }, {
      "left" : "sb.append(\"\\\\b\");",
      "right" : "sb.append(\"\\\\b\");",
      "info" : "ExpressionStatement[32315-32332]:ExpressionStatement[32336-32353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32333-32339]:BreakStatement[32354-32360]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[32348-32358]:SwitchCase[32369-32379]"
    }, {
      "left" : "sb.append(\"\\\\f\");",
      "right" : "sb.append(\"\\\\f\");",
      "info" : "ExpressionStatement[32359-32376]:ExpressionStatement[32380-32397]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32377-32383]:BreakStatement[32398-32404]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[32392-32402]:SwitchCase[32413-32423]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[32403-32420]:ExpressionStatement[32424-32441]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32421-32427]:BreakStatement[32442-32448]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[32436-32446]:SwitchCase[32457-32467]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[32447-32464]:ExpressionStatement[32468-32485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32465-32471]:BreakStatement[32486-32492]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[32480-32490]:SwitchCase[32501-32511]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[32491-32508]:ExpressionStatement[32512-32529]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32509-32515]:BreakStatement[32530-32536]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[32524-32534]:SwitchCase[32545-32555]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[32535-32562]:ExpressionStatement[32556-32583]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32563-32569]:BreakStatement[32584-32590]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[32578-32588]:SwitchCase[32599-32609]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[32589-32618]:ExpressionStatement[32610-32639]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32619-32625]:BreakStatement[32640-32646]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[32634-32644]:SwitchCase[32655-32665]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[32645-32674]:ExpressionStatement[32666-32695]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32675-32681]:BreakStatement[32696-32702]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[32750-32764]:SwitchCase[32771-32785]"
    }, {
      "left" : "sb.append(\"\\\\u2028\");",
      "right" : "sb.append(\"\\\\u2028\");",
      "info" : "ExpressionStatement[32765-32786]:ExpressionStatement[32786-32807]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32787-32793]:BreakStatement[32808-32814]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[32802-32816]:SwitchCase[32823-32837]"
    }, {
      "left" : "sb.append(\"\\\\u2029\");",
      "right" : "sb.append(\"\\\\u2029\");",
      "info" : "ExpressionStatement[32817-32838]:ExpressionStatement[32838-32859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32839-32845]:BreakStatement[32860-32866]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[32855-32864]:SwitchCase[32876-32885]"
    }, {
      "left" : "if (trustedStrings || isRegexp)",
      "right" : "if (trustedStrings || isRegexp)",
      "info" : "IfStatement[32940-33062]:IfStatement[32961-33083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32972-33011]:Block[32993-33032]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32986-32999]:ExpressionStatement[33007-33020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33017-33062]:Block[33038-33083]"
    }, {
      "left" : "sb.append(\"\\\\x3d\");",
      "right" : "sb.append(\"\\\\x3d\");",
      "info" : "ExpressionStatement[33031-33050]:ExpressionStatement[33052-33071]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33073-33079]:BreakStatement[33094-33100]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[33089-33098]:SwitchCase[33110-33119]"
    }, {
      "left" : "if (trustedStrings || isRegexp)",
      "right" : "if (trustedStrings || isRegexp)",
      "info" : "IfStatement[33109-33231]:IfStatement[33130-33252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33141-33180]:Block[33162-33201]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33155-33168]:ExpressionStatement[33176-33189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33186-33231]:Block[33207-33252]"
    }, {
      "left" : "sb.append(\"\\\\x26\");",
      "right" : "sb.append(\"\\\\x26\");",
      "info" : "ExpressionStatement[33200-33219]:ExpressionStatement[33221-33240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33242-33248]:BreakStatement[33263-33269]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[33258-33267]:SwitchCase[33279-33288]"
    }, {
      "left" : "if (!trustedStrings && !isRegexp)",
      "right" : "if (!trustedStrings && !isRegexp)",
      "info" : "IfStatement[33278-33379]:IfStatement[33299-33400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33312-33379]:Block[33333-33400]"
    }, {
      "left" : "sb.append(GT_ESCAPED);",
      "right" : "sb.append(GT_ESCAPED);",
      "info" : "ExpressionStatement[33326-33348]:ExpressionStatement[33347-33369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33361-33367]:BreakStatement[33382-33388]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[33651-33895]:IfStatement[33672-33916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33802-33850]:Block[33823-33871]"
    }, {
      "left" : "sb.append(GT_ESCAPED);",
      "right" : "sb.append(GT_ESCAPED);",
      "info" : "ExpressionStatement[33816-33838]:ExpressionStatement[33837-33859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33856-33895]:Block[33877-33916]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33870-33883]:ExpressionStatement[33891-33904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33906-33912]:BreakStatement[33927-33933]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[33921-33930]:SwitchCase[33942-33951]"
    }, {
      "left" : "if (!trustedStrings && !isRegexp)",
      "right" : "if (!trustedStrings && !isRegexp)",
      "info" : "IfStatement[33941-34042]:IfStatement[33962-34063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33975-34042]:Block[33996-34063]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[33989-34011]:ExpressionStatement[34010-34032]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34024-34030]:BreakStatement[34045-34051]"
    }, {
      "left" : "final String endScript = \"/script\";",
      "right" : "final String endScript = \"/script\";",
      "info" : "VariableDeclarationStatement[34198-34233]:VariableDeclarationStatement[34219-34254]"
    }, {
      "left" : "final String startComment = \"!--\";",
      "right" : "final String startComment = \"!--\";",
      "info" : "VariableDeclarationStatement[34280-34314]:VariableDeclarationStatement[34301-34335]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length()))",
      "right" : "if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length()))",
      "info" : "IfStatement[34326-34683]:IfStatement[34347-34704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34424-34472]:Block[34445-34493]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[34438-34460]:ExpressionStatement[34459-34481]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length()))",
      "right" : "if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length()))",
      "info" : "IfStatement[34478-34683]:IfStatement[34499-34704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34590-34638]:Block[34611-34659]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[34604-34626]:ExpressionStatement[34625-34647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34644-34683]:Block[34665-34704]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[34658-34671]:ExpressionStatement[34679-34692]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34694-34700]:BreakStatement[34715-34721]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34709-34717]:SwitchCase[34730-34738]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[34865-35731]:IfStatement[34886-35752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34899-35131]:Block[34920-35152]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[34913-35119]:IfStatement[34934-35140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34952-34995]:Block[34973-35016]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[34968-34981]:ExpressionStatement[34989-35002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35001-35119]:Block[35022-35140]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[35064-35105]:ExpressionStatement[35085-35126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35137-35731]:Block[35158-35752]"
    }, {
      "left" : "if (c > 0x1f && c < 0x7f)",
      "right" : "if (c > 0x1f && c < 0x7f)",
      "info" : "IfStatement[35374-35719]:IfStatement[35395-35740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35400-35443]:Block[35421-35464]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[35416-35429]:ExpressionStatement[35437-35450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35449-35719]:Block[35470-35740]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[35664-35705]:ExpressionStatement[35685-35726]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[35750-35767]:ExpressionStatement[35771-35788]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[35772-35793]:ReturnStatement[35793-35814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35842-36491]:Block[35863-36512]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[35923-35971]:IfStatement[35944-35992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35948-35971]:Block[35969-35992]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[35956-35965]:ReturnStatement[35977-35986]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[36055-36094]:VariableDeclarationStatement[36076-36115]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[36099-36461]:ForStatement[36120-36482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36136-36461]:Block[36157-36482]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[36144-36165]:VariableDeclarationStatement[36165-36186]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[36333-36455]:IfStatement[36354-36476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36359-36390]:Block[36380-36411]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[36369-36382]:ExpressionStatement[36390-36403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36396-36455]:Block[36417-36476]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[36406-36447]:ExpressionStatement[36427-36468]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[36466-36487]:ReturnStatement[36487-36508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36723-36984]:Block[36744-37005]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[36729-36739]:VariableDeclarationStatement[36750-36760]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[36744-36771]:VariableDeclarationStatement[36765-36792]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[36776-36966]:ForStatement[36797-36987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36827-36966]:Block[36848-36987]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[36835-36960]:IfStatement[36856-36981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36852-36914]:Block[36873-36935]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount - i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount - i);",
      "info" : "ExpressionStatement[36862-36906]:ExpressionStatement[36883-36927]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[36920-36960]:IfStatement[36941-36981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36938-36960]:Block[36959-36981]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[36948-36952]:ExpressionStatement[36969-36973]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36971-36980]:ReturnStatement[36992-37001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37097-37389]:Block[37118-37410]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[37103-37368]:ForStatement[37124-37389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37164-37368]:Block[37185-37389]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[37172-37362]:IfStatement[37193-37383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37189-37311]:Block[37210-37332]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[37199-37238]:VariableDeclarationStatement[37220-37259]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[37247-37303]:IfStatement[37268-37324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37267-37303]:Block[37288-37324]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37279-37293]:ReturnStatement[37300-37314]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[37317-37362]:IfStatement[37338-37383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37335-37362]:Block[37356-37383]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[37345-37354]:ReturnStatement[37366-37375]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37373-37385]:ReturnStatement[37394-37406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38072-38191]:Block[38093-38212]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[38078-38187]:ReturnStatement[38099-38208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38420-38530]:Block[38441-38551]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[38426-38526]:ReturnStatement[38447-38547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38695-38884]:Block[38716-38905]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38701-38880]:TryStatement[38722-38901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38705-38760]:Block[38726-38781]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[38713-38754]:ExpressionStatement[38734-38775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38784-38880]:Block[38805-38901]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[38843-38874]:ThrowStatement[38864-38895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39237-39975]:Block[39258-39996]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[39243-39747]:IfStatement[39264-39768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39294-39747]:Block[39315-39768]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[39556-39605]:VariableDeclarationStatement[39577-39626]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[39612-39666]:ExpressionStatement[39633-39687]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[39673-39727]:ExpressionStatement[39694-39748]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39734-39741]:ReturnStatement[39755-39762]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[39752-39971]:ExpressionStatement[39773-39992]"
    } ]
  },
  "interFileMappings" : { }
}