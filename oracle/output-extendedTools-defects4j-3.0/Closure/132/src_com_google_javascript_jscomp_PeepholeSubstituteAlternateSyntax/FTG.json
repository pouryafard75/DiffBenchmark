{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "TypeDeclaration[1095-56077]:TypeDeclaration[1095-56198]"
    }, {
      "left" : "private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
      "right" : "private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
      "info" : "FieldDeclaration[1379-1452]:FieldDeclaration[1379-1452]"
    }, {
      "left" : "private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
      "right" : "private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
      "info" : "FieldDeclaration[1455-1526]:FieldDeclaration[1455-1526]"
    }, {
      "left" : "private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);",
      "right" : "private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);",
      "info" : "FieldDeclaration[1529-1602]:FieldDeclaration[1529-1602]"
    }, {
      "left" : "private static final CodeGenerator REGEXP_ESCAPER =\n      CodeGenerator.forCostEstimation(\n          null );",
      "right" : "private static final CodeGenerator REGEXP_ESCAPER =\n      CodeGenerator.forCostEstimation(\n          null );",
      "info" : "FieldDeclaration[1605-1752]:FieldDeclaration[1605-1752]"
    }, {
      "left" : "private final boolean late;",
      "right" : "private final boolean late;",
      "info" : "FieldDeclaration[1756-1783]:FieldDeclaration[1756-1783]"
    }, {
      "left" : "private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
      "right" : "private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
      "info" : "FieldDeclaration[1787-1852]:FieldDeclaration[1787-1852]"
    }, {
      "left" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.warning(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "right" : "static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.warning(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
      "info" : "FieldDeclaration[1856-2047]:FieldDeclaration[1856-2047]"
    }, {
      "left" : "static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n  };",
      "right" : "static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n  };",
      "info" : "FieldDeclaration[2051-2243]:FieldDeclaration[2051-2243]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[2150-2238]:MethodDeclaration[2150-2238]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax(boolean late)",
      "right" : "PeepholeSubstituteAlternateSyntax(boolean late)",
      "info" : "MethodDeclaration[2247-2684]:MethodDeclaration[2247-2684]"
    }, {
      "left" : "public Node optimizeSubtree(Node node)",
      "right" : "public Node optimizeSubtree(Node node)",
      "info" : "MethodDeclaration[2688-5238]:MethodDeclaration[2688-5238]"
    }, {
      "left" : "private void tryJoinForCondition(Node n)",
      "right" : "private void tryJoinForCondition(Node n)",
      "info" : "MethodDeclaration[5242-6521]:MethodDeclaration[5242-6521]"
    }, {
      "left" : "private Node tryFoldSimpleFunctionCall(Node n)",
      "right" : "private Node tryFoldSimpleFunctionCall(Node n)",
      "info" : "MethodDeclaration[6525-7464]:MethodDeclaration[6525-7464]"
    }, {
      "left" : "private Node tryFoldImmediateCallToBoundFunction(Node n)",
      "right" : "private Node tryFoldImmediateCallToBoundFunction(Node n)",
      "info" : "MethodDeclaration[7468-8642]:MethodDeclaration[7468-8642]"
    }, {
      "left" : "private void addParameterAfter(Node parameterList, Node after)",
      "right" : "private void addParameterAfter(Node parameterList, Node after)",
      "info" : "MethodDeclaration[8646-8947]:MethodDeclaration[8646-8947]"
    }, {
      "left" : "private Node trySplitComma(Node n)",
      "right" : "private Node trySplitComma(Node n)",
      "info" : "MethodDeclaration[8951-9735]:MethodDeclaration[8951-9735]"
    }, {
      "left" : "private Node tryReplaceIf(Node n)",
      "right" : "private Node tryReplaceIf(Node n)",
      "info" : "MethodDeclaration[9739-12523]:MethodDeclaration[9739-12523]"
    }, {
      "left" : "private boolean statementMustExitParent(Node n)",
      "right" : "private boolean statementMustExitParent(Node n)",
      "info" : "MethodDeclaration[12527-12968]:MethodDeclaration[12527-12968]"
    }, {
      "left" : "private Node tryReplaceUndefined(Node n)",
      "right" : "private Node tryReplaceUndefined(Node n)",
      "info" : "MethodDeclaration[12972-13409]:MethodDeclaration[12972-13409]"
    }, {
      "left" : "private Node tryReduceReturn(Node n)",
      "right" : "private Node tryReduceReturn(Node n)",
      "info" : "MethodDeclaration[13413-14140]:MethodDeclaration[13413-14140]"
    }, {
      "left" : "private Node tryReplaceExitWithBreak(Node n)",
      "right" : "private Node tryReplaceExitWithBreak(Node n)",
      "info" : "MethodDeclaration[14144-16339]:MethodDeclaration[14144-16339]"
    }, {
      "left" : "private Node tryRemoveRedundantExit(Node n)",
      "right" : "private Node tryRemoveRedundantExit(Node n)",
      "info" : "MethodDeclaration[16343-17782]:MethodDeclaration[16343-17782]"
    }, {
      "left" : "boolean isPure(Node n)",
      "right" : "boolean isPure(Node n)",
      "info" : "MethodDeclaration[17786-18030]:MethodDeclaration[17786-18030]"
    }, {
      "left" : "Node skipFinallyNodes(Node n)",
      "right" : "Node skipFinallyNodes(Node n)",
      "info" : "MethodDeclaration[18034-18290]:MethodDeclaration[18034-18290]"
    }, {
      "left" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
      "right" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
      "info" : "MethodDeclaration[18294-18779]:MethodDeclaration[18294-18779]"
    }, {
      "left" : "boolean isExceptionPossible(Node n)",
      "right" : "boolean isExceptionPossible(Node n)",
      "info" : "MethodDeclaration[18783-19080]:MethodDeclaration[18783-19080]"
    }, {
      "left" : "Node getExceptionHandler(Node n)",
      "right" : "Node getExceptionHandler(Node n)",
      "info" : "MethodDeclaration[19084-19177]:MethodDeclaration[19084-19177]"
    }, {
      "left" : "private Node tryMinimizeNot(Node n)",
      "right" : "private Node tryMinimizeNot(Node n)",
      "info" : "MethodDeclaration[19181-20166]:MethodDeclaration[19181-20166]"
    }, {
      "left" : "private Node tryMinimizeIf(Node n)",
      "right" : "private Node tryMinimizeIf(Node n)",
      "info" : "MethodDeclaration[20170-28782]:MethodDeclaration[20170-28903]"
    }, {
      "left" : "private void tryRemoveRepeatedStatements(Node n)",
      "right" : "private void tryRemoveRepeatedStatements(Node n)",
      "info" : "MethodDeclaration[28786-30030]:MethodDeclaration[28907-30151]"
    }, {
      "left" : "private boolean isFoldableExpressBlock(Node n)",
      "right" : "private boolean isFoldableExpressBlock(Node n)",
      "info" : "MethodDeclaration[30034-31300]:MethodDeclaration[30155-31421]"
    }, {
      "left" : "private Node getBlockExpression(Node n)",
      "right" : "private Node getBlockExpression(Node n)",
      "info" : "MethodDeclaration[31304-31482]:MethodDeclaration[31425-31603]"
    }, {
      "left" : "private boolean isReturnBlock(Node n)",
      "right" : "private boolean isReturnBlock(Node n)",
      "info" : "MethodDeclaration[31486-31822]:MethodDeclaration[31607-31943]"
    }, {
      "left" : "private boolean isReturnExpressBlock(Node n)",
      "right" : "private boolean isReturnExpressBlock(Node n)",
      "info" : "MethodDeclaration[31826-32186]:MethodDeclaration[31947-32307]"
    }, {
      "left" : "private boolean isReturnExpression(Node n)",
      "right" : "private boolean isReturnExpression(Node n)",
      "info" : "MethodDeclaration[32190-32388]:MethodDeclaration[32311-32509]"
    }, {
      "left" : "private Node getBlockReturnExpression(Node n)",
      "right" : "private Node getBlockReturnExpression(Node n)",
      "info" : "MethodDeclaration[32392-32612]:MethodDeclaration[32513-32733]"
    }, {
      "left" : "private boolean isVarBlock(Node n)",
      "right" : "private boolean isVarBlock(Node n)",
      "info" : "MethodDeclaration[32616-32992]:MethodDeclaration[32737-33113]"
    }, {
      "left" : "private Node getBlockVar(Node n)",
      "right" : "private Node getBlockVar(Node n)",
      "info" : "MethodDeclaration[32996-33148]:MethodDeclaration[33117-33269]"
    }, {
      "left" : "private boolean consumesDanglingElse(Node n)",
      "right" : "private boolean consumesDanglingElse(Node n)",
      "info" : "MethodDeclaration[33152-33845]:MethodDeclaration[33273-33966]"
    }, {
      "left" : "private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence)",
      "right" : "private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence)",
      "info" : "MethodDeclaration[33849-34350]:MethodDeclaration[33970-34471]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[34115-34239]:MethodDeclaration[34236-34360]"
    }, {
      "left" : "private boolean isLowerPrecedence(Node n, final int precedence)",
      "right" : "private boolean isLowerPrecedence(Node n, final int precedence)",
      "info" : "MethodDeclaration[34354-34559]:MethodDeclaration[34475-34680]"
    }, {
      "left" : "private boolean isHigherPrecedence(Node n, final int precedence)",
      "right" : "private boolean isHigherPrecedence(Node n, final int precedence)",
      "info" : "MethodDeclaration[34563-34770]:MethodDeclaration[34684-34891]"
    }, {
      "left" : "private boolean isPropertyAssignmentInExpression(Node n)",
      "right" : "private boolean isPropertyAssignmentInExpression(Node n)",
      "info" : "MethodDeclaration[34773-35266]:MethodDeclaration[34894-35387]"
    }, {
      "left" : "public boolean apply(Node input)",
      "right" : "public boolean apply(Node input)",
      "info" : "MethodDeclaration[35002-35140]:MethodDeclaration[35123-35261]"
    }, {
      "left" : "private Node tryMinimizeCondition(Node n)",
      "right" : "private Node tryMinimizeCondition(Node n)",
      "info" : "MethodDeclaration[35270-42643]:MethodDeclaration[35391-42764]"
    }, {
      "left" : "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num)",
      "right" : "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num)",
      "info" : "MethodDeclaration[42647-43105]:MethodDeclaration[42768-43226]"
    }, {
      "left" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "right" : "private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
      "info" : "FieldDeclaration[43109-43453]:FieldDeclaration[43230-43574]"
    }, {
      "left" : "private Node tryFoldStandardConstructors(Node n)",
      "right" : "private Node tryFoldStandardConstructors(Node n)",
      "info" : "MethodDeclaration[43457-44115]:MethodDeclaration[43578-44236]"
    }, {
      "left" : "private Node tryFoldLiteralConstructor(Node n)",
      "right" : "private Node tryFoldLiteralConstructor(Node n)",
      "info" : "MethodDeclaration[44119-45983]:MethodDeclaration[44240-46104]"
    }, {
      "left" : "enum : FoldArrayAction",
      "right" : "enum : FoldArrayAction",
      "info" : "EnumDeclaration[45987-46097]:EnumDeclaration[46108-46218]"
    }, {
      "left" : "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "right" : "private FoldArrayAction isSafeToFoldArrayConstructor(Node arg)",
      "info" : "MethodDeclaration[46101-47297]:MethodDeclaration[46222-47418]"
    }, {
      "left" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "right" : "private Node tryFoldRegularExpressionConstructor(Node n)",
      "info" : "MethodDeclaration[47301-49302]:MethodDeclaration[47422-49423]"
    }, {
      "left" : "private Node reduceTrueFalse(Node n)",
      "right" : "private Node reduceTrueFalse(Node n)",
      "info" : "MethodDeclaration[49306-49567]:MethodDeclaration[49427-49688]"
    }, {
      "left" : "private Node tryMinimizeArrayLiteral(Node n)",
      "right" : "private Node tryMinimizeArrayLiteral(Node n)",
      "info" : "MethodDeclaration[49571-49903]:MethodDeclaration[49692-50024]"
    }, {
      "left" : "private Node tryMinimizeStringArrayLiteral(Node n)",
      "right" : "private Node tryMinimizeStringArrayLiteral(Node n)",
      "info" : "MethodDeclaration[49907-50946]:MethodDeclaration[50028-51067]"
    }, {
      "left" : "private String pickDelimiter(String[] strings)",
      "right" : "private String pickDelimiter(String[] strings)",
      "info" : "MethodDeclaration[50950-51686]:MethodDeclaration[51071-51807]"
    }, {
      "left" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "right" : "private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
      "info" : "FieldDeclaration[51690-51765]:FieldDeclaration[51811-51886]"
    }, {
      "left" : "private static boolean areValidRegexpFlags(String flags)",
      "right" : "private static boolean areValidRegexpFlags(String flags)",
      "info" : "MethodDeclaration[51769-52254]:MethodDeclaration[51890-52375]"
    }, {
      "left" : "private boolean areSafeFlagsToFold(String flags)",
      "right" : "private boolean areSafeFlagsToFold(String flags)",
      "info" : "MethodDeclaration[52258-53181]:MethodDeclaration[52379-53302]"
    }, {
      "left" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "right" : "private static Node makeForwardSlashBracketSafe(Node n)",
      "info" : "MethodDeclaration[53185-55464]:MethodDeclaration[53306-55585]"
    }, {
      "left" : "static boolean containsUnicodeEscape(String s)",
      "right" : "static boolean containsUnicodeEscape(String s)",
      "info" : "MethodDeclaration[55468-56075]:MethodDeclaration[55589-56196]"
    } ],
    "mappings" : [
 {
      "left" : "AbstractPeepholeOptimization",
      "right" : "AbstractPeepholeOptimization",
      "info" : "SimpleType[1345-1373]:SimpleType[1345-1373]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2150-2159]:MarkerAnnotation[2150-2159]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2164-2170]:Modifier[2164-2170]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2171-2178]:PrimitiveType[2171-2178]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[2179-2184]:SimpleName[2179-2184]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[2185-2195]:SingleVariableDeclaration[2185-2195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2197-2238]:Block[2197-2238]"
    }, {
      "left" : "return !input.isFunction();",
      "right" : "return !input.isFunction();",
      "info" : "ReturnStatement[2205-2232]:ReturnStatement[2205-2232]"
    }, {
      "left" : "PeepholeSubstituteAlternateSyntax",
      "right" : "PeepholeSubstituteAlternateSyntax",
      "info" : "SimpleName[2609-2642]:SimpleName[2609-2642]"
    }, {
      "left" : "boolean late",
      "right" : "boolean late",
      "info" : "SingleVariableDeclaration[2643-2655]:SingleVariableDeclaration[2643-2655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2657-2684]:Block[2657-2684]"
    }, {
      "left" : "this.late = late;",
      "right" : "this.late = late;",
      "info" : "ExpressionStatement[2663-2680]:ExpressionStatement[2663-2680]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2775-2784]:MarkerAnnotation[2775-2784]"
    }, {
      "left" : "@SuppressWarnings(\"fallthrough\")",
      "right" : "@SuppressWarnings(\"fallthrough\")",
      "info" : "SingleMemberAnnotation[2787-2819]:SingleMemberAnnotation[2787-2819]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2822-2828]:Modifier[2822-2828]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[2829-2833]:SimpleType[2829-2833]"
    }, {
      "left" : "optimizeSubtree",
      "right" : "optimizeSubtree",
      "info" : "SimpleName[2834-2849]:SimpleName[2834-2849]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2850-2859]:SingleVariableDeclaration[2850-2859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2861-5238]:Block[2861-5238]"
    }, {
      "left" : "switch(node.getType()) {\n      case Token.RETURN: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        result = tryReplaceExitWithBreak(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReduceReturn(node);\n      }\n\n      case Token.THROW: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReplaceExitWithBreak(node);\n      }\n\n      // TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps\n      // with MinimizeExitPoints.\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryJoinForCondition(node);\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.BLOCK:\n        return tryReplaceIf(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "right" : "switch(node.getType()) {\n      case Token.RETURN: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        result = tryReplaceExitWithBreak(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReduceReturn(node);\n      }\n\n      case Token.THROW: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReplaceExitWithBreak(node);\n      }\n\n      // TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps\n      // with MinimizeExitPoints.\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryJoinForCondition(node);\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.BLOCK:\n        return tryReplaceIf(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      default:\n        return node; //Nothing changed\n    }",
      "info" : "SwitchStatement[2867-5234]:SwitchStatement[2867-5234]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[2898-2916]:SwitchCase[2898-2916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2917-3194]:Block[2917-3194]"
    }, {
      "left" : "Node result = tryRemoveRedundantExit(node);",
      "right" : "Node result = tryRemoveRedundantExit(node);",
      "info" : "VariableDeclarationStatement[2927-2970]:VariableDeclarationStatement[2927-2970]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[2979-3035]:IfStatement[2979-3035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2999-3035]:Block[2999-3035]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[3011-3025]:ReturnStatement[3011-3025]"
    }, {
      "left" : "result = tryReplaceExitWithBreak(node);",
      "right" : "result = tryReplaceExitWithBreak(node);",
      "info" : "ExpressionStatement[3044-3083]:ExpressionStatement[3044-3083]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[3092-3148]:IfStatement[3092-3148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3112-3148]:Block[3112-3148]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[3124-3138]:ReturnStatement[3124-3138]"
    }, {
      "left" : "return tryReduceReturn(node);",
      "right" : "return tryReduceReturn(node);",
      "info" : "ReturnStatement[3157-3186]:ReturnStatement[3157-3186]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[3202-3219]:SwitchCase[3202-3219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3220-3392]:Block[3220-3392]"
    }, {
      "left" : "Node result = tryRemoveRedundantExit(node);",
      "right" : "Node result = tryRemoveRedundantExit(node);",
      "info" : "VariableDeclarationStatement[3230-3273]:VariableDeclarationStatement[3230-3273]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[3282-3338]:IfStatement[3282-3338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3302-3338]:Block[3302-3338]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[3314-3328]:ReturnStatement[3314-3328]"
    }, {
      "left" : "return tryReplaceExitWithBreak(node);",
      "right" : "return tryReplaceExitWithBreak(node);",
      "info" : "ReturnStatement[3347-3384]:ReturnStatement[3347-3384]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[3512-3527]:SwitchCase[3512-3527]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3536-3579]:ExpressionStatement[3536-3579]"
    }, {
      "left" : "return tryMinimizeNot(node);",
      "right" : "return tryMinimizeNot(node);",
      "info" : "ReturnStatement[3588-3616]:ReturnStatement[3588-3616]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[3624-3638]:SwitchCase[3624-3638]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3647-3690]:ExpressionStatement[3647-3690]"
    }, {
      "left" : "return tryMinimizeIf(node);",
      "right" : "return tryMinimizeIf(node);",
      "info" : "ReturnStatement[3699-3726]:ReturnStatement[3699-3726]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[3734-3757]:SwitchCase[3734-3757]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3766-3809]:ExpressionStatement[3766-3809]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3818-3830]:ReturnStatement[3818-3830]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[3838-3854]:SwitchCase[3838-3854]"
    }, {
      "left" : "tryMinimizeCondition(node.getFirstChild());",
      "right" : "tryMinimizeCondition(node.getFirstChild());",
      "info" : "ExpressionStatement[3863-3906]:ExpressionStatement[3863-3906]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[3915-3927]:ReturnStatement[3915-3927]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[3935-3952]:SwitchCase[3935-3952]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[3959-3973]:SwitchCase[3959-3973]"
    }, {
      "left" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "right" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[3982-4042]:ExpressionStatement[3982-4042]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[4051-4063]:ReturnStatement[4051-4063]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[4071-4086]:SwitchCase[4071-4086]"
    }, {
      "left" : "if (!NodeUtil.isForIn(node))",
      "right" : "if (!NodeUtil.isForIn(node))",
      "info" : "IfStatement[4095-4243]:IfStatement[4095-4243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4124-4243]:Block[4124-4243]"
    }, {
      "left" : "tryJoinForCondition(node);",
      "right" : "tryJoinForCondition(node);",
      "info" : "ExpressionStatement[4136-4162]:ExpressionStatement[4136-4162]"
    }, {
      "left" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "right" : "tryMinimizeCondition(NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[4173-4233]:ExpressionStatement[4173-4233]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[4252-4264]:ReturnStatement[4252-4264]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4272-4288]:SwitchCase[4272-4288]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4295-4312]:SwitchCase[4295-4312]"
    }, {
      "left" : "return reduceTrueFalse(node);",
      "right" : "return reduceTrueFalse(node);",
      "info" : "ReturnStatement[4321-4350]:ReturnStatement[4321-4350]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[4358-4373]:SwitchCase[4358-4373]"
    }, {
      "left" : "node = tryFoldStandardConstructors(node);",
      "right" : "node = tryFoldStandardConstructors(node);",
      "info" : "ExpressionStatement[4382-4423]:ExpressionStatement[4382-4423]"
    }, {
      "left" : "if (!node.isCall())",
      "right" : "if (!node.isCall())",
      "info" : "IfStatement[4432-4486]:IfStatement[4432-4486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4452-4486]:Block[4452-4486]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[4464-4476]:ReturnStatement[4464-4476]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[4617-4633]:SwitchCase[4617-4633]"
    }, {
      "left" : "Node result =  tryFoldLiteralConstructor(node);",
      "right" : "Node result =  tryFoldLiteralConstructor(node);",
      "info" : "VariableDeclarationStatement[4642-4689]:VariableDeclarationStatement[4642-4689]"
    }, {
      "left" : "if (result == node)",
      "right" : "if (result == node)",
      "info" : "IfStatement[4698-4889]:IfStatement[4698-4889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4718-4889]:Block[4718-4889]"
    }, {
      "left" : "result = tryFoldSimpleFunctionCall(node);",
      "right" : "result = tryFoldSimpleFunctionCall(node);",
      "info" : "ExpressionStatement[4730-4771]:ExpressionStatement[4730-4771]"
    }, {
      "left" : "if (result == node)",
      "right" : "if (result == node)",
      "info" : "IfStatement[4782-4879]:IfStatement[4782-4879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4802-4879]:Block[4802-4879]"
    }, {
      "left" : "result = tryFoldImmediateCallToBoundFunction(node);",
      "right" : "result = tryFoldImmediateCallToBoundFunction(node);",
      "info" : "ExpressionStatement[4816-4867]:ExpressionStatement[4816-4867]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4898-4912]:ReturnStatement[4898-4912]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[4920-4937]:SwitchCase[4920-4937]"
    }, {
      "left" : "return trySplitComma(node);",
      "right" : "return trySplitComma(node);",
      "info" : "ReturnStatement[4946-4973]:ReturnStatement[4946-4973]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4981-4997]:SwitchCase[4981-4997]"
    }, {
      "left" : "return tryReplaceUndefined(node);",
      "right" : "return tryReplaceUndefined(node);",
      "info" : "ReturnStatement[5006-5039]:ReturnStatement[5006-5039]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[5047-5064]:SwitchCase[5047-5064]"
    }, {
      "left" : "return tryReplaceIf(node);",
      "right" : "return tryReplaceIf(node);",
      "info" : "ReturnStatement[5073-5099]:ReturnStatement[5073-5099]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[5107-5127]:SwitchCase[5107-5127]"
    }, {
      "left" : "return tryMinimizeArrayLiteral(node);",
      "right" : "return tryMinimizeArrayLiteral(node);",
      "info" : "ReturnStatement[5136-5173]:ReturnStatement[5136-5173]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5181-5189]:SwitchCase[5181-5189]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[5198-5210]:ReturnStatement[5198-5210]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5242-5249]:Modifier[5242-5249]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5250-5254]:PrimitiveType[5250-5254]"
    }, {
      "left" : "tryJoinForCondition",
      "right" : "tryJoinForCondition",
      "info" : "SimpleName[5255-5274]:SimpleName[5255-5274]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5275-5281]:SingleVariableDeclaration[5275-5281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5283-6521]:Block[5283-6521]"
    }, {
      "left" : "if (!late)",
      "right" : "if (!late)",
      "info" : "IfStatement[5289-5321]:IfStatement[5289-5321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5300-5321]:Block[5300-5321]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5308-5315]:ReturnStatement[5308-5315]"
    }, {
      "left" : "Node block = n.getLastChild();",
      "right" : "Node block = n.getLastChild();",
      "info" : "VariableDeclarationStatement[5327-5357]:VariableDeclarationStatement[5327-5357]"
    }, {
      "left" : "Node maybeIf = block.getFirstChild();",
      "right" : "Node maybeIf = block.getFirstChild();",
      "info" : "VariableDeclarationStatement[5362-5399]:VariableDeclarationStatement[5362-5399]"
    }, {
      "left" : "if (maybeIf != null && maybeIf.isIf())",
      "right" : "if (maybeIf != null && maybeIf.isIf())",
      "info" : "IfStatement[5404-6517]:IfStatement[5404-6517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5443-6517]:Block[5443-6517]"
    }, {
      "left" : "Node maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();",
      "right" : "Node maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();",
      "info" : "VariableDeclarationStatement[5451-5512]:VariableDeclarationStatement[5451-5512]"
    }, {
      "left" : "if (maybeBreak != null && maybeBreak.isBreak()\n          && !maybeBreak.hasChildren())",
      "right" : "if (maybeBreak != null && maybeBreak.isBreak()\n          && !maybeBreak.hasChildren())",
      "info" : "IfStatement[5519-6511]:IfStatement[5519-6511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5606-6511]:Block[5606-6511]"
    }, {
      "left" : "if (maybeIf.getChildCount() == 3)",
      "right" : "if (maybeIf.getChildCount() == 3)",
      "info" : "IfStatement[5677-5871]:IfStatement[5677-5871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5711-5818]:Block[5711-5818]"
    }, {
      "left" : "block.replaceChild(maybeIf,\n              maybeIf.getLastChild().detachFromParent());",
      "right" : "block.replaceChild(maybeIf,\n              maybeIf.getLastChild().detachFromParent());",
      "info" : "ExpressionStatement[5723-5808]:ExpressionStatement[5723-5808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5871]:Block[5824-5871]"
    }, {
      "left" : "block.removeFirstChild();",
      "right" : "block.removeFirstChild();",
      "info" : "ExpressionStatement[5836-5861]:ExpressionStatement[5836-5861]"
    }, {
      "left" : "Node ifCondition = maybeIf.removeFirstChild();",
      "right" : "Node ifCondition = maybeIf.removeFirstChild();",
      "info" : "VariableDeclarationStatement[5881-5927]:VariableDeclarationStatement[5881-5927]"
    }, {
      "left" : "Node fixedIfCondition = IR.not(ifCondition)\n            .srcref(ifCondition);",
      "right" : "Node fixedIfCondition = IR.not(ifCondition)\n            .srcref(ifCondition);",
      "info" : "VariableDeclarationStatement[5936-6013]:VariableDeclarationStatement[5936-6013]"
    }, {
      "left" : "Node forCondition = NodeUtil.getConditionExpression(n);",
      "right" : "Node forCondition = NodeUtil.getConditionExpression(n);",
      "info" : "VariableDeclarationStatement[6085-6140]:VariableDeclarationStatement[6085-6140]"
    }, {
      "left" : "if (forCondition.isEmpty())",
      "right" : "if (forCondition.isEmpty())",
      "info" : "IfStatement[6149-6474]:IfStatement[6149-6474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6177-6246]:Block[6177-6246]"
    }, {
      "left" : "n.replaceChild(forCondition, fixedIfCondition);",
      "right" : "n.replaceChild(forCondition, fixedIfCondition);",
      "info" : "ExpressionStatement[6189-6236]:ExpressionStatement[6189-6236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6252-6474]:Block[6252-6474]"
    }, {
      "left" : "Node replacement = new Node(Token.AND);",
      "right" : "Node replacement = new Node(Token.AND);",
      "info" : "VariableDeclarationStatement[6264-6303]:VariableDeclarationStatement[6264-6303]"
    }, {
      "left" : "n.replaceChild(forCondition, replacement);",
      "right" : "n.replaceChild(forCondition, replacement);",
      "info" : "ExpressionStatement[6314-6356]:ExpressionStatement[6314-6356]"
    }, {
      "left" : "replacement.addChildToBack(forCondition);",
      "right" : "replacement.addChildToBack(forCondition);",
      "info" : "ExpressionStatement[6367-6408]:ExpressionStatement[6367-6408]"
    }, {
      "left" : "replacement.addChildToBack(fixedIfCondition);",
      "right" : "replacement.addChildToBack(fixedIfCondition);",
      "info" : "ExpressionStatement[6419-6464]:ExpressionStatement[6419-6464]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[6484-6503]:ExpressionStatement[6484-6503]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6525-6532]:Modifier[6525-6532]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[6533-6537]:SimpleType[6533-6537]"
    }, {
      "left" : "tryFoldSimpleFunctionCall",
      "right" : "tryFoldSimpleFunctionCall",
      "info" : "SimpleName[6538-6563]:SimpleName[6538-6563]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6564-6570]:SingleVariableDeclaration[6564-6570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6572-7464]:Block[6572-7464]"
    }, {
      "left" : "Preconditions.checkState(n.isCall());",
      "right" : "Preconditions.checkState(n.isCall());",
      "info" : "ExpressionStatement[6578-6615]:ExpressionStatement[6578-6615]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[6620-6656]:VariableDeclarationStatement[6620-6656]"
    }, {
      "left" : "if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\"))",
      "right" : "if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\"))",
      "info" : "IfStatement[6661-7446]:IfStatement[6661-7446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6761-7446]:Block[6761-7446]"
    }, {
      "left" : "Node value = callTarget.getNext();",
      "right" : "Node value = callTarget.getNext();",
      "info" : "VariableDeclarationStatement[7079-7113]:VariableDeclarationStatement[7079-7113]"
    }, {
      "left" : "if (value != null && value.getNext() == null &&\n          NodeUtil.isImmutableValue(value))",
      "right" : "if (value != null && value.getNext() == null &&\n          NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[7120-7440]:IfStatement[7120-7440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7212-7440]:Block[7212-7440]"
    }, {
      "left" : "Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());",
      "right" : "Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());",
      "info" : "VariableDeclarationStatement[7222-7330]:VariableDeclarationStatement[7222-7330]"
    }, {
      "left" : "n.getParent().replaceChild(n, addition);",
      "right" : "n.getParent().replaceChild(n, addition);",
      "info" : "ExpressionStatement[7339-7379]:ExpressionStatement[7339-7379]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7388-7407]:ExpressionStatement[7388-7407]"
    }, {
      "left" : "return addition;",
      "right" : "return addition;",
      "info" : "ReturnStatement[7416-7432]:ReturnStatement[7416-7432]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[7451-7460]:ReturnStatement[7451-7460]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7468-7475]:Modifier[7468-7475]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7476-7480]:SimpleType[7476-7480]"
    }, {
      "left" : "tryFoldImmediateCallToBoundFunction",
      "right" : "tryFoldImmediateCallToBoundFunction",
      "info" : "SimpleName[7481-7516]:SimpleName[7481-7516]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7517-7523]:SingleVariableDeclaration[7517-7523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7525-8642]:Block[7525-8642]"
    }, {
      "left" : "Preconditions.checkState(n.isCall());",
      "right" : "Preconditions.checkState(n.isCall());",
      "info" : "ExpressionStatement[7604-7641]:ExpressionStatement[7604-7641]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7646-7682]:VariableDeclarationStatement[7646-7682]"
    }, {
      "left" : "Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);",
      "right" : "Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);",
      "info" : "VariableDeclarationStatement[7687-7761]:VariableDeclarationStatement[7687-7761]"
    }, {
      "left" : "if (bind != null)",
      "right" : "if (bind != null)",
      "info" : "IfStatement[7766-8624]:IfStatement[7766-8624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7784-8624]:Block[7784-8624]"
    }, {
      "left" : "bind.target.detachFromParent();",
      "right" : "bind.target.detachFromParent();",
      "info" : "ExpressionStatement[7825-7856]:ExpressionStatement[7825-7856]"
    }, {
      "left" : "n.replaceChild(callTarget, bind.target);",
      "right" : "n.replaceChild(callTarget, bind.target);",
      "info" : "ExpressionStatement[7863-7903]:ExpressionStatement[7863-7903]"
    }, {
      "left" : "callTarget = bind.target;",
      "right" : "callTarget = bind.target;",
      "info" : "ExpressionStatement[7910-7935]:ExpressionStatement[7910-7935]"
    }, {
      "left" : "addParameterAfter(bind.parameters, callTarget);",
      "right" : "addParameterAfter(bind.parameters, callTarget);",
      "info" : "ExpressionStatement[7972-8019]:ExpressionStatement[7972-8019]"
    }, {
      "left" : "if (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue))",
      "right" : "if (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue))",
      "info" : "IfStatement[8090-8592]:IfStatement[8090-8592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8159-8529]:Block[8159-8529]"
    }, {
      "left" : "Node newCallTarget = IR.getprop(\n            callTarget.cloneTree(),\n            IR.string(\"call\").srcref(callTarget));",
      "right" : "Node newCallTarget = IR.getprop(\n            callTarget.cloneTree(),\n            IR.string(\"call\").srcref(callTarget));",
      "info" : "VariableDeclarationStatement[8234-8353]:VariableDeclarationStatement[8234-8353]"
    }, {
      "left" : "n.replaceChild(callTarget, newCallTarget);",
      "right" : "n.replaceChild(callTarget, newCallTarget);",
      "info" : "ExpressionStatement[8362-8404]:ExpressionStatement[8362-8404]"
    }, {
      "left" : "n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);",
      "right" : "n.addChildAfter(bind.thisValue.cloneTree(), newCallTarget);",
      "info" : "ExpressionStatement[8413-8472]:ExpressionStatement[8413-8472]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, false);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, false);",
      "info" : "ExpressionStatement[8481-8521]:ExpressionStatement[8481-8521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8535-8592]:Block[8535-8592]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[8545-8584]:ExpressionStatement[8545-8584]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[8599-8618]:ExpressionStatement[8599-8618]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[8629-8638]:ReturnStatement[8629-8638]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8646-8653]:Modifier[8646-8653]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8654-8658]:PrimitiveType[8654-8658]"
    }, {
      "left" : "addParameterAfter",
      "right" : "addParameterAfter",
      "info" : "SimpleName[8659-8676]:SimpleName[8659-8676]"
    }, {
      "left" : "Node parameterList",
      "right" : "Node parameterList",
      "info" : "SingleVariableDeclaration[8677-8695]:SingleVariableDeclaration[8677-8695]"
    }, {
      "left" : "Node after",
      "right" : "Node after",
      "info" : "SingleVariableDeclaration[8697-8707]:SingleVariableDeclaration[8697-8707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8709-8947]:Block[8709-8947]"
    }, {
      "left" : "if (parameterList != null)",
      "right" : "if (parameterList != null)",
      "info" : "IfStatement[8715-8943]:IfStatement[8715-8943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8742-8943]:Block[8742-8943]"
    }, {
      "left" : "addParameterAfter(parameterList.getNext(), after);",
      "right" : "addParameterAfter(parameterList.getNext(), after);",
      "info" : "ExpressionStatement[8814-8864]:ExpressionStatement[8814-8864]"
    }, {
      "left" : "after.getParent().addChildAfter(parameterList.cloneTree(), after);",
      "right" : "after.getParent().addChildAfter(parameterList.cloneTree(), after);",
      "info" : "ExpressionStatement[8871-8937]:ExpressionStatement[8871-8937]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8951-8958]:Modifier[8951-8958]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8959-8963]:SimpleType[8959-8963]"
    }, {
      "left" : "trySplitComma",
      "right" : "trySplitComma",
      "info" : "SimpleName[8964-8977]:SimpleName[8964-8977]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8978-8984]:SingleVariableDeclaration[8978-8984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8986-9735]:Block[8986-9735]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[8992-9025]:IfStatement[8992-9025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9002-9025]:Block[9002-9025]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9010-9019]:ReturnStatement[9010-9019]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[9030-9058]:VariableDeclarationStatement[9030-9058]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9063-9093]:VariableDeclarationStatement[9063-9093]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[9098-9128]:VariableDeclarationStatement[9098-9128]"
    }, {
      "left" : "if (parent.isExprResult()\n        && !parent.getParent().isLabel())",
      "right" : "if (parent.isExprResult()\n        && !parent.getParent().isLabel())",
      "info" : "IfStatement[9134-9731]:IfStatement[9134-9731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9202-9702]:Block[9202-9702]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[9231-9250]:ExpressionStatement[9231-9250]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[9321-9350]:ExpressionStatement[9321-9350]"
    }, {
      "left" : "Node newStatement = IR.exprResult(right);",
      "right" : "Node newStatement = IR.exprResult(right);",
      "info" : "VariableDeclarationStatement[9402-9443]:VariableDeclarationStatement[9402-9443]"
    }, {
      "left" : "newStatement.copyInformationFrom(n);",
      "right" : "newStatement.copyInformationFrom(n);",
      "info" : "ExpressionStatement[9450-9486]:ExpressionStatement[9450-9486]"
    }, {
      "left" : "parent.getParent().addChildAfter(newStatement, parent);",
      "right" : "parent.getParent().addChildAfter(newStatement, parent);",
      "info" : "ExpressionStatement[9596-9651]:ExpressionStatement[9596-9651]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9658-9677]:ExpressionStatement[9658-9677]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[9684-9696]:ReturnStatement[9684-9696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9708-9731]:Block[9708-9731]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9716-9725]:ReturnStatement[9716-9725]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9814-9821]:Modifier[9814-9821]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9822-9826]:SimpleType[9822-9826]"
    }, {
      "left" : "tryReplaceIf",
      "right" : "tryReplaceIf",
      "info" : "SimpleName[9827-9839]:SimpleName[9827-9839]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9840-9846]:SingleVariableDeclaration[9840-9846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9848-12523]:Block[9848-12523]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n         child != null; child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n         child != null; child = child.getNext())",
      "info" : "ForStatement[9855-12505]:ForStatement[9855-12505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9940-12505]:Block[9940-12505]"
    }, {
      "left" : "if (child.isIf())",
      "right" : "if (child.isIf())",
      "info" : "IfStatement[9948-12499]:IfStatement[9948-12499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9965-12499]:Block[9965-12499]"
    }, {
      "left" : "Node cond = child.getFirstChild();",
      "right" : "Node cond = child.getFirstChild();",
      "info" : "VariableDeclarationStatement[9975-10009]:VariableDeclarationStatement[9975-10009]"
    }, {
      "left" : "Node thenBranch = cond.getNext();",
      "right" : "Node thenBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[10018-10051]:VariableDeclarationStatement[10018-10051]"
    }, {
      "left" : "Node elseBranch = thenBranch.getNext();",
      "right" : "Node elseBranch = thenBranch.getNext();",
      "info" : "VariableDeclarationStatement[10060-10099]:VariableDeclarationStatement[10060-10099]"
    }, {
      "left" : "Node nextNode = child.getNext();",
      "right" : "Node nextNode = child.getNext();",
      "info" : "VariableDeclarationStatement[10108-10140]:VariableDeclarationStatement[10108-10140]"
    }, {
      "left" : "if (nextNode != null && elseBranch == null\n            && isReturnBlock(thenBranch)\n            && nextNode.isIf())",
      "right" : "if (nextNode != null && elseBranch == null\n            && isReturnBlock(thenBranch)\n            && nextNode.isIf())",
      "info" : "IfStatement[10150-12491]:IfStatement[10150-12491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10266-11431]:Block[10266-11431]"
    }, {
      "left" : "Node nextCond = nextNode.getFirstChild();",
      "right" : "Node nextCond = nextNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[10278-10319]:VariableDeclarationStatement[10278-10319]"
    }, {
      "left" : "Node nextThen = nextCond.getNext();",
      "right" : "Node nextThen = nextCond.getNext();",
      "info" : "VariableDeclarationStatement[10330-10365]:VariableDeclarationStatement[10330-10365]"
    }, {
      "left" : "Node nextElse = nextThen.getNext();",
      "right" : "Node nextElse = nextThen.getNext();",
      "info" : "VariableDeclarationStatement[10376-10411]:VariableDeclarationStatement[10376-10411]"
    }, {
      "left" : "if (thenBranch.isEquivalentToTyped(nextThen))",
      "right" : "if (thenBranch.isEquivalentToTyped(nextThen))",
      "info" : "IfStatement[10422-11421]:IfStatement[10422-11421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10468-10871]:Block[10468-10871]"
    }, {
      "left" : "child.detachFromParent();",
      "right" : "child.detachFromParent();",
      "info" : "ExpressionStatement[10613-10638]:ExpressionStatement[10613-10638]"
    }, {
      "left" : "child.detachChildren();",
      "right" : "child.detachChildren();",
      "info" : "ExpressionStatement[10651-10674]:ExpressionStatement[10651-10674]"
    }, {
      "left" : "Node newCond = new Node(Token.OR, cond);",
      "right" : "Node newCond = new Node(Token.OR, cond);",
      "info" : "VariableDeclarationStatement[10687-10727]:VariableDeclarationStatement[10687-10727]"
    }, {
      "left" : "nextNode.replaceChild(nextCond, newCond);",
      "right" : "nextNode.replaceChild(nextCond, newCond);",
      "info" : "ExpressionStatement[10740-10781]:ExpressionStatement[10740-10781]"
    }, {
      "left" : "newCond.addChildToBack(nextCond);",
      "right" : "newCond.addChildToBack(nextCond);",
      "info" : "ExpressionStatement[10794-10827]:ExpressionStatement[10794-10827]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10840-10859]:ExpressionStatement[10840-10859]"
    }, {
      "left" : "if (nextElse != null\n              && thenBranch.isEquivalentToTyped(nextElse))",
      "right" : "if (nextElse != null\n              && thenBranch.isEquivalentToTyped(nextElse))",
      "info" : "IfStatement[10877-11421]:IfStatement[10877-11421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10957-11421]:Block[10957-11421]"
    }, {
      "left" : "child.detachFromParent();",
      "right" : "child.detachFromParent();",
      "info" : "ExpressionStatement[11125-11150]:ExpressionStatement[11125-11150]"
    }, {
      "left" : "child.detachChildren();",
      "right" : "child.detachChildren();",
      "info" : "ExpressionStatement[11163-11186]:ExpressionStatement[11163-11186]"
    }, {
      "left" : "Node newCond = new Node(Token.AND,\n                IR.not(cond).srcref(cond));",
      "right" : "Node newCond = new Node(Token.AND,\n                IR.not(cond).srcref(cond));",
      "info" : "VariableDeclarationStatement[11199-11277]:VariableDeclarationStatement[11199-11277]"
    }, {
      "left" : "nextNode.replaceChild(nextCond, newCond);",
      "right" : "nextNode.replaceChild(nextCond, newCond);",
      "info" : "ExpressionStatement[11290-11331]:ExpressionStatement[11290-11331]"
    }, {
      "left" : "newCond.addChildToBack(nextCond);",
      "right" : "newCond.addChildToBack(nextCond);",
      "info" : "ExpressionStatement[11344-11377]:ExpressionStatement[11344-11377]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11390-11409]:ExpressionStatement[11390-11409]"
    }, {
      "left" : "if (nextNode != null && elseBranch == null &&\n            isReturnBlock(thenBranch) && isReturnExpression(nextNode))",
      "right" : "if (nextNode != null && elseBranch == null &&\n            isReturnBlock(thenBranch) && isReturnExpression(nextNode))",
      "info" : "IfStatement[11437-12491]:IfStatement[11437-12491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11554-12294]:Block[11554-12294]"
    }, {
      "left" : "Node thenExpr = null;",
      "right" : "Node thenExpr = null;",
      "info" : "VariableDeclarationStatement[11566-11587]:VariableDeclarationStatement[11566-11587]"
    }, {
      "left" : "if (isReturnExpressBlock(thenBranch))",
      "right" : "if (isReturnExpressBlock(thenBranch))",
      "info" : "IfStatement[11654-11883]:IfStatement[11654-11883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11692-11807]:Block[11692-11807]"
    }, {
      "left" : "thenExpr = getBlockReturnExpression(thenBranch);",
      "right" : "thenExpr = getBlockReturnExpression(thenBranch);",
      "info" : "ExpressionStatement[11706-11754]:ExpressionStatement[11706-11754]"
    }, {
      "left" : "thenExpr.detachFromParent();",
      "right" : "thenExpr.detachFromParent();",
      "info" : "ExpressionStatement[11767-11795]:ExpressionStatement[11767-11795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11813-11883]:Block[11813-11883]"
    }, {
      "left" : "thenExpr = NodeUtil.newUndefinedNode(child);",
      "right" : "thenExpr = NodeUtil.newUndefinedNode(child);",
      "info" : "ExpressionStatement[11827-11871]:ExpressionStatement[11827-11871]"
    }, {
      "left" : "Node elseExpr = nextNode.getFirstChild();",
      "right" : "Node elseExpr = nextNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[11895-11936]:VariableDeclarationStatement[11895-11936]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[11948-11972]:ExpressionStatement[11948-11972]"
    }, {
      "left" : "elseExpr.detachFromParent();",
      "right" : "elseExpr.detachFromParent();",
      "info" : "ExpressionStatement[11983-12011]:ExpressionStatement[11983-12011]"
    }, {
      "left" : "Node returnNode = IR.returnNode(\n                                IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(child));",
      "right" : "Node returnNode = IR.returnNode(\n                                IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(child));",
      "info" : "VariableDeclarationStatement[12023-12174]:VariableDeclarationStatement[12023-12174]"
    }, {
      "left" : "n.replaceChild(child, returnNode);",
      "right" : "n.replaceChild(child, returnNode);",
      "info" : "ExpressionStatement[12185-12219]:ExpressionStatement[12185-12219]"
    }, {
      "left" : "n.removeChild(nextNode);",
      "right" : "n.removeChild(nextNode);",
      "info" : "ExpressionStatement[12230-12254]:ExpressionStatement[12230-12254]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12265-12284]:ExpressionStatement[12265-12284]"
    }, {
      "left" : "if (elseBranch != null && statementMustExitParent(thenBranch))",
      "right" : "if (elseBranch != null && statementMustExitParent(thenBranch))",
      "info" : "IfStatement[12300-12491]:IfStatement[12300-12491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12363-12491]:Block[12363-12491]"
    }, {
      "left" : "child.removeChild(elseBranch);",
      "right" : "child.removeChild(elseBranch);",
      "info" : "ExpressionStatement[12375-12405]:ExpressionStatement[12375-12405]"
    }, {
      "left" : "n.addChildAfter(elseBranch, child);",
      "right" : "n.addChildAfter(elseBranch, child);",
      "info" : "ExpressionStatement[12416-12451]:ExpressionStatement[12416-12451]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12462-12481]:ExpressionStatement[12462-12481]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12510-12519]:ReturnStatement[12510-12519]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12527-12534]:Modifier[12527-12534]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12535-12542]:PrimitiveType[12535-12542]"
    }, {
      "left" : "statementMustExitParent",
      "right" : "statementMustExitParent",
      "info" : "SimpleName[12543-12566]:SimpleName[12543-12566]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12567-12573]:SingleVariableDeclaration[12567-12573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12575-12968]:Block[12575-12968]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.THROW:\n      case Token.RETURN:\n        return true;\n      case Token.BLOCK:\n        if (n.hasChildren()) {\n          Node child = n.getLastChild();\n          return statementMustExitParent(child);\n        }\n        return false;\n      // TODO(johnlenz): handle TRY/FINALLY\n      case Token.FUNCTION:\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.THROW:\n      case Token.RETURN:\n        return true;\n      case Token.BLOCK:\n        if (n.hasChildren()) {\n          Node child = n.getLastChild();\n          return statementMustExitParent(child);\n        }\n        return false;\n      // TODO(johnlenz): handle TRY/FINALLY\n      case Token.FUNCTION:\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[12581-12964]:SwitchStatement[12581-12964]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[12610-12627]:SwitchCase[12610-12627]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[12634-12652]:SwitchCase[12634-12652]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12661-12673]:ReturnStatement[12661-12673]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[12680-12697]:SwitchCase[12680-12697]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[12706-12828]:IfStatement[12706-12828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12727-12828]:Block[12727-12828]"
    }, {
      "left" : "Node child = n.getLastChild();",
      "right" : "Node child = n.getLastChild();",
      "info" : "VariableDeclarationStatement[12739-12769]:VariableDeclarationStatement[12739-12769]"
    }, {
      "left" : "return statementMustExitParent(child);",
      "right" : "return statementMustExitParent(child);",
      "info" : "ReturnStatement[12780-12818]:ReturnStatement[12780-12818]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12837-12850]:ReturnStatement[12837-12850]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[12901-12921]:SwitchCase[12901-12921]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12928-12936]:SwitchCase[12928-12936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12945-12958]:ReturnStatement[12945-12958]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13026-13033]:Modifier[13026-13033]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13034-13038]:SimpleType[13034-13038]"
    }, {
      "left" : "tryReplaceUndefined",
      "right" : "tryReplaceUndefined",
      "info" : "SimpleName[13039-13058]:SimpleName[13039-13058]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13059-13065]:SingleVariableDeclaration[13059-13065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13067-13409]:Block[13067-13409]"
    }, {
      "left" : "if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n))",
      "right" : "if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n))",
      "info" : "IfStatement[13136-13391]:IfStatement[13136-13391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13227-13391]:Block[13227-13391]"
    }, {
      "left" : "Node replacement = NodeUtil.newUndefinedNode(n);",
      "right" : "Node replacement = NodeUtil.newUndefinedNode(n);",
      "info" : "VariableDeclarationStatement[13235-13283]:VariableDeclarationStatement[13235-13283]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[13290-13333]:ExpressionStatement[13290-13333]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13340-13359]:ExpressionStatement[13340-13359]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[13366-13385]:ReturnStatement[13366-13385]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13396-13405]:ReturnStatement[13396-13405]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13550-13557]:Modifier[13550-13557]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13558-13562]:SimpleType[13558-13562]"
    }, {
      "left" : "tryReduceReturn",
      "right" : "tryReduceReturn",
      "info" : "SimpleName[13563-13578]:SimpleName[13563-13578]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13579-13585]:SingleVariableDeclaration[13579-13585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13587-14140]:Block[13587-14140]"
    }, {
      "left" : "Node result = n.getFirstChild();",
      "right" : "Node result = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13593-13625]:VariableDeclarationStatement[13593-13625]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[13631-14121]:IfStatement[13631-14121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13651-14121]:Block[13651-14121]"
    }, {
      "left" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n      }",
      "right" : "switch (result.getType()) {\n        case Token.VOID:\n          Node operand = result.getFirstChild();\n          if (!mayHaveSideEffects(operand)) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n        case Token.NAME:\n          String name = result.getString();\n          if (name.equals(\"undefined\")) {\n            n.removeFirstChild();\n            reportCodeChange();\n          }\n          break;\n      }",
      "info" : "SwitchStatement[13659-14115]:SwitchStatement[13659-14115]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[13695-13711]:SwitchCase[13695-13711]"
    }, {
      "left" : "Node operand = result.getFirstChild();",
      "right" : "Node operand = result.getFirstChild();",
      "info" : "VariableDeclarationStatement[13722-13760]:VariableDeclarationStatement[13722-13760]"
    }, {
      "left" : "if (!mayHaveSideEffects(operand))",
      "right" : "if (!mayHaveSideEffects(operand))",
      "info" : "IfStatement[13771-13884]:IfStatement[13771-13884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13805-13884]:Block[13805-13884]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[13819-13840]:ExpressionStatement[13819-13840]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[13853-13872]:ExpressionStatement[13853-13872]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13895-13901]:BreakStatement[13895-13901]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[13910-13926]:SwitchCase[13910-13926]"
    }, {
      "left" : "String name = result.getString();",
      "right" : "String name = result.getString();",
      "info" : "VariableDeclarationStatement[13937-13970]:VariableDeclarationStatement[13937-13970]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[13981-14090]:IfStatement[13981-14090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14011-14090]:Block[14011-14090]"
    }, {
      "left" : "n.removeFirstChild();",
      "right" : "n.removeFirstChild();",
      "info" : "ExpressionStatement[14025-14046]:ExpressionStatement[14025-14046]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14059-14078]:ExpressionStatement[14059-14078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14101-14107]:BreakStatement[14101-14107]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14127-14136]:ReturnStatement[14127-14136]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14668-14675]:Modifier[14668-14675]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14676-14680]:SimpleType[14676-14680]"
    }, {
      "left" : "tryReplaceExitWithBreak",
      "right" : "tryReplaceExitWithBreak",
      "info" : "SimpleName[14681-14704]:SimpleName[14681-14704]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14705-14711]:SingleVariableDeclaration[14705-14711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14713-16339]:Block[14713-16339]"
    }, {
      "left" : "Node result = n.getFirstChild();",
      "right" : "Node result = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14719-14751]:VariableDeclarationStatement[14719-14751]"
    }, {
      "left" : "Node breakTarget = n;",
      "right" : "Node breakTarget = n;",
      "info" : "VariableDeclarationStatement[14849-14870]:VariableDeclarationStatement[14849-14870]"
    }, {
      "left" : "for (;!ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);\n        breakTarget = breakTarget.getParent())",
      "right" : "for (;!ControlFlowAnalysis.isBreakTarget(breakTarget, null /* no label */);\n        breakTarget = breakTarget.getParent())",
      "info" : "ForStatement[14875-15123]:ForStatement[14875-15123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14998-15123]:Block[14998-15123]"
    }, {
      "left" : "if (breakTarget.isFunction() || breakTarget.isScript())",
      "right" : "if (breakTarget.isFunction() || breakTarget.isScript())",
      "info" : "IfStatement[15006-15117]:IfStatement[15006-15117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15062-15117]:Block[15062-15117]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15100-15109]:ReturnStatement[15100-15109]"
    }, {
      "left" : "Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);",
      "right" : "Node follow = ControlFlowAnalysis.computeFollowNode(breakTarget);",
      "info" : "VariableDeclarationStatement[15129-15194]:VariableDeclarationStatement[15129-15194]"
    }, {
      "left" : "Node prefinallyFollows = follow;",
      "right" : "Node prefinallyFollows = follow;",
      "info" : "VariableDeclarationStatement[15575-15607]:VariableDeclarationStatement[15575-15607]"
    }, {
      "left" : "follow = skipFinallyNodes(follow);",
      "right" : "follow = skipFinallyNodes(follow);",
      "info" : "ExpressionStatement[15612-15646]:ExpressionStatement[15612-15646]"
    }, {
      "left" : "if (prefinallyFollows != follow)",
      "right" : "if (prefinallyFollows != follow)",
      "info" : "IfStatement[15652-15815]:IfStatement[15652-15815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15685-15815]:Block[15685-15815]"
    }, {
      "left" : "if (!isPure(result))",
      "right" : "if (!isPure(result))",
      "info" : "IfStatement[15729-15809]:IfStatement[15729-15809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15750-15809]:Block[15750-15809]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15792-15801]:ReturnStatement[15792-15801]"
    }, {
      "left" : "if (follow == null && (n.isThrow() || result != null))",
      "right" : "if (follow == null && (n.isThrow() || result != null))",
      "info" : "IfStatement[15821-15970]:IfStatement[15821-15970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15876-15970]:Block[15876-15970]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15955-15964]:ReturnStatement[15955-15964]"
    }, {
      "left" : "if (follow == null || areMatchingExits(n, follow))",
      "right" : "if (follow == null || areMatchingExits(n, follow))",
      "info" : "IfStatement[16114-16320]:IfStatement[16114-16320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16165-16320]:Block[16165-16320]"
    }, {
      "left" : "Node replacement = IR.breakNode();",
      "right" : "Node replacement = IR.breakNode();",
      "info" : "VariableDeclarationStatement[16173-16207]:VariableDeclarationStatement[16173-16207]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[16214-16257]:ExpressionStatement[16214-16257]"
    }, {
      "left" : "this.reportCodeChange();",
      "right" : "this.reportCodeChange();",
      "info" : "ExpressionStatement[16264-16288]:ExpressionStatement[16264-16288]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[16295-16314]:ReturnStatement[16295-16314]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[16326-16335]:ReturnStatement[16326-16335]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16805-16812]:Modifier[16805-16812]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16813-16817]:SimpleType[16813-16817]"
    }, {
      "left" : "tryRemoveRedundantExit",
      "right" : "tryRemoveRedundantExit",
      "info" : "SimpleName[16818-16840]:SimpleName[16818-16840]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16841-16847]:SingleVariableDeclaration[16841-16847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16849-17782]:Block[16849-17782]"
    }, {
      "left" : "Node exitExpr = n.getFirstChild();",
      "right" : "Node exitExpr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[16855-16889]:VariableDeclarationStatement[16855-16889]"
    }, {
      "left" : "Node follow = ControlFlowAnalysis.computeFollowNode(n);",
      "right" : "Node follow = ControlFlowAnalysis.computeFollowNode(n);",
      "info" : "VariableDeclarationStatement[16895-16950]:VariableDeclarationStatement[16895-16950]"
    }, {
      "left" : "Node prefinallyFollows = follow;",
      "right" : "Node prefinallyFollows = follow;",
      "info" : "VariableDeclarationStatement[17086-17118]:VariableDeclarationStatement[17086-17118]"
    }, {
      "left" : "follow = skipFinallyNodes(follow);",
      "right" : "follow = skipFinallyNodes(follow);",
      "info" : "ExpressionStatement[17123-17157]:ExpressionStatement[17123-17157]"
    }, {
      "left" : "if (prefinallyFollows != follow)",
      "right" : "if (prefinallyFollows != follow)",
      "info" : "IfStatement[17162-17331]:IfStatement[17162-17331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17195-17331]:Block[17195-17331]"
    }, {
      "left" : "if (!isPure(exitExpr))",
      "right" : "if (!isPure(exitExpr))",
      "info" : "IfStatement[17239-17325]:IfStatement[17239-17325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17262-17325]:Block[17262-17325]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17308-17317]:ReturnStatement[17308-17317]"
    }, {
      "left" : "if (follow == null && (n.isThrow() || exitExpr != null))",
      "right" : "if (follow == null && (n.isThrow() || exitExpr != null))",
      "info" : "IfStatement[17337-17488]:IfStatement[17337-17488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17394-17488]:Block[17394-17488]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17473-17482]:ReturnStatement[17473-17482]"
    }, {
      "left" : "if (follow == null || areMatchingExits(n, follow))",
      "right" : "if (follow == null || areMatchingExits(n, follow))",
      "info" : "IfStatement[17632-17763]:IfStatement[17632-17763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17683-17763]:Block[17683-17763]"
    }, {
      "left" : "n.detachFromParent();",
      "right" : "n.detachFromParent();",
      "info" : "ExpressionStatement[17691-17712]:ExpressionStatement[17691-17712]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17719-17738]:ExpressionStatement[17719-17738]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17745-17757]:ReturnStatement[17745-17757]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17769-17778]:ReturnStatement[17769-17778]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17898-17905]:PrimitiveType[17898-17905]"
    }, {
      "left" : "isPure",
      "right" : "isPure",
      "info" : "SimpleName[17906-17912]:SimpleName[17906-17912]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17913-17919]:SingleVariableDeclaration[17913-17919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17921-18030]:Block[17921-18030]"
    }, {
      "left" : "return n == null\n        || (!NodeUtil.canBeSideEffected(n)\n            && !mayHaveSideEffects(n));",
      "right" : "return n == null\n        || (!NodeUtil.canBeSideEffected(n)\n            && !mayHaveSideEffects(n));",
      "info" : "ReturnStatement[17927-18026]:ReturnStatement[17927-18026]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18112-18116]:SimpleType[18112-18116]"
    }, {
      "left" : "skipFinallyNodes",
      "right" : "skipFinallyNodes",
      "info" : "SimpleName[18117-18133]:SimpleName[18117-18133]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18134-18140]:SingleVariableDeclaration[18134-18140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18142-18290]:Block[18142-18290]"
    }, {
      "left" : "while (n != null && NodeUtil.isTryFinallyNode(n.getParent(), n))",
      "right" : "while (n != null && NodeUtil.isTryFinallyNode(n.getParent(), n))",
      "info" : "WhileStatement[18148-18272]:WhileStatement[18148-18272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18213-18272]:Block[18213-18272]"
    }, {
      "left" : "n = ControlFlowAnalysis.computeFollowNode(n);",
      "right" : "n = ControlFlowAnalysis.computeFollowNode(n);",
      "info" : "ExpressionStatement[18221-18266]:ExpressionStatement[18221-18266]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18277-18286]:ReturnStatement[18277-18286]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18551-18558]:PrimitiveType[18551-18558]"
    }, {
      "left" : "areMatchingExits",
      "right" : "areMatchingExits",
      "info" : "SimpleName[18559-18575]:SimpleName[18559-18575]"
    }, {
      "left" : "Node nodeThis",
      "right" : "Node nodeThis",
      "info" : "SingleVariableDeclaration[18576-18589]:SingleVariableDeclaration[18576-18589]"
    }, {
      "left" : "Node nodeThat",
      "right" : "Node nodeThat",
      "info" : "SingleVariableDeclaration[18591-18604]:SingleVariableDeclaration[18591-18604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18606-18779]:Block[18606-18779]"
    }, {
      "left" : "return nodeThis.isEquivalentTo(nodeThat)\n        && (!isExceptionPossible(nodeThis)\n            || getExceptionHandler(nodeThis) == getExceptionHandler(nodeThat));",
      "right" : "return nodeThis.isEquivalentTo(nodeThat)\n        && (!isExceptionPossible(nodeThis)\n            || getExceptionHandler(nodeThis) == getExceptionHandler(nodeThat));",
      "info" : "ReturnStatement[18612-18775]:ReturnStatement[18612-18775]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18783-18790]:PrimitiveType[18783-18790]"
    }, {
      "left" : "isExceptionPossible",
      "right" : "isExceptionPossible",
      "info" : "SimpleName[18791-18810]:SimpleName[18791-18810]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18811-18817]:SingleVariableDeclaration[18811-18817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18819-19080]:Block[18819-19080]"
    }, {
      "left" : "Preconditions.checkState(n.isReturn()\n        || n.isThrow());",
      "right" : "Preconditions.checkState(n.isReturn()\n        || n.isThrow());",
      "info" : "ExpressionStatement[18897-18959]:ExpressionStatement[18897-18959]"
    }, {
      "left" : "return n.isThrow()\n        || (n.hasChildren()\n            && !NodeUtil.isLiteralValue(n.getLastChild(), true));",
      "right" : "return n.isThrow()\n        || (n.hasChildren()\n            && !NodeUtil.isLiteralValue(n.getLastChild(), true));",
      "info" : "ReturnStatement[18964-19076]:ReturnStatement[18964-19076]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19084-19088]:SimpleType[19084-19088]"
    }, {
      "left" : "getExceptionHandler",
      "right" : "getExceptionHandler",
      "info" : "SimpleName[19089-19108]:SimpleName[19089-19108]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19109-19115]:SingleVariableDeclaration[19109-19115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19117-19177]:Block[19117-19177]"
    }, {
      "left" : "return ControlFlowAnalysis.getExceptionHandler(n);",
      "right" : "return ControlFlowAnalysis.getExceptionHandler(n);",
      "info" : "ReturnStatement[19123-19173]:ReturnStatement[19123-19173]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19319-19326]:Modifier[19319-19326]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[19327-19331]:SimpleType[19327-19331]"
    }, {
      "left" : "tryMinimizeNot",
      "right" : "tryMinimizeNot",
      "info" : "SimpleName[19332-19346]:SimpleName[19332-19346]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19347-19353]:SingleVariableDeclaration[19347-19353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19355-20166]:Block[19355-20166]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[19361-19389]:VariableDeclarationStatement[19361-19389]"
    }, {
      "left" : "Node notChild = n.getFirstChild();",
      "right" : "Node notChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[19395-19429]:VariableDeclarationStatement[19395-19429]"
    }, {
      "left" : "int complementOperator;",
      "right" : "int complementOperator;",
      "info" : "VariableDeclarationStatement[19503-19526]:VariableDeclarationStatement[19503-19526]"
    }, {
      "left" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return n;\n    }",
      "right" : "switch (notChild.getType()) {\n      case Token.EQ:\n        complementOperator = Token.NE;\n        break;\n      case Token.NE:\n        complementOperator = Token.EQ;\n        break;\n      case Token.SHEQ:\n        complementOperator = Token.SHNE;\n        break;\n      case Token.SHNE:\n        complementOperator = Token.SHEQ;\n        break;\n      // GT, GE, LT, LE are not handled in this because !(x<NaN) != x>=NaN.\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[19531-19983]:SwitchStatement[19531-19983]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19567-19581]:SwitchCase[19567-19581]"
    }, {
      "left" : "complementOperator = Token.NE;",
      "right" : "complementOperator = Token.NE;",
      "info" : "ExpressionStatement[19590-19620]:ExpressionStatement[19590-19620]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19629-19635]:BreakStatement[19629-19635]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19642-19656]:SwitchCase[19642-19656]"
    }, {
      "left" : "complementOperator = Token.EQ;",
      "right" : "complementOperator = Token.EQ;",
      "info" : "ExpressionStatement[19665-19695]:ExpressionStatement[19665-19695]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19704-19710]:BreakStatement[19704-19710]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[19717-19733]:SwitchCase[19717-19733]"
    }, {
      "left" : "complementOperator = Token.SHNE;",
      "right" : "complementOperator = Token.SHNE;",
      "info" : "ExpressionStatement[19742-19774]:ExpressionStatement[19742-19774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19783-19789]:BreakStatement[19783-19789]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[19796-19812]:SwitchCase[19796-19812]"
    }, {
      "left" : "complementOperator = Token.SHEQ;",
      "right" : "complementOperator = Token.SHEQ;",
      "info" : "ExpressionStatement[19821-19853]:ExpressionStatement[19821-19853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19862-19868]:BreakStatement[19862-19868]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19951-19959]:SwitchCase[19951-19959]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19968-19977]:ReturnStatement[19968-19977]"
    }, {
      "left" : "Node newOperator = n.removeFirstChild();",
      "right" : "Node newOperator = n.removeFirstChild();",
      "info" : "VariableDeclarationStatement[19988-20028]:VariableDeclarationStatement[19988-20028]"
    }, {
      "left" : "newOperator.setType(complementOperator);",
      "right" : "newOperator.setType(complementOperator);",
      "info" : "ExpressionStatement[20033-20073]:ExpressionStatement[20033-20073]"
    }, {
      "left" : "parent.replaceChild(n, newOperator);",
      "right" : "parent.replaceChild(n, newOperator);",
      "info" : "ExpressionStatement[20078-20114]:ExpressionStatement[20078-20114]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[20119-20138]:ExpressionStatement[20119-20138]"
    }, {
      "left" : "return newOperator;",
      "right" : "return newOperator;",
      "info" : "ReturnStatement[20143-20162]:ReturnStatement[20143-20162]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20329-20333]:SimpleType[20329-20333]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[20348-20354]:SingleVariableDeclaration[20348-20354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20356-28782]:Block[20356-28903]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[20363-20391]:VariableDeclarationStatement[20363-20391]"
    }, {
      "left" : "Node cond = n.getFirstChild();",
      "right" : "Node cond = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20397-20427]:VariableDeclarationStatement[20397-20427]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(cond, true))",
      "right" : "if (NodeUtil.isLiteralValue(cond, true))",
      "info" : "IfStatement[20544-20608]:IfStatement[20544-20608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20585-20608]:Block[20585-20608]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[20593-20602]:ReturnStatement[20593-20602]"
    }, {
      "left" : "Node thenBranch = cond.getNext();",
      "right" : "Node thenBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[20614-20647]:VariableDeclarationStatement[20614-20647]"
    }, {
      "left" : "Node elseBranch = thenBranch.getNext();",
      "right" : "Node elseBranch = thenBranch.getNext();",
      "info" : "VariableDeclarationStatement[20652-20691]:VariableDeclarationStatement[20652-20691]"
    }, {
      "left" : "if (elseBranch == null)",
      "right" : "if (elseBranch == null)",
      "info" : "IfStatement[20697-23621]:IfStatement[20697-23621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20721-23621]:Block[20721-23621]"
    }, {
      "left" : "if (isFoldableExpressBlock(thenBranch))",
      "right" : "if (isFoldableExpressBlock(thenBranch))",
      "info" : "IfStatement[20729-23598]:IfStatement[20729-23598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20769-22465]:Block[20769-22465]"
    }, {
      "left" : "Node expr = getBlockExpression(thenBranch);",
      "right" : "Node expr = getBlockExpression(thenBranch);",
      "info" : "VariableDeclarationStatement[20779-20822]:VariableDeclarationStatement[20779-20822]"
    }, {
      "left" : "if (!late && isPropertyAssignmentInExpression(expr))",
      "right" : "if (!late && isPropertyAssignmentInExpression(expr))",
      "info" : "IfStatement[20831-21102]:IfStatement[20831-21102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20884-21102]:Block[20884-21102]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21083-21092]:ReturnStatement[21083-21092]"
    }, {
      "left" : "if (cond.isNot())",
      "right" : "if (cond.isNot())",
      "info" : "IfStatement[21112-21709]:IfStatement[21112-21709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21130-21709]:Block[21130-21709]"
    }, {
      "left" : "if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE))",
      "right" : "if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE))",
      "info" : "IfStatement[21181-21435]:IfStatement[21181-21435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21339-21435]:Block[21339-21435]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21414-21423]:ReturnStatement[21414-21423]"
    }, {
      "left" : "Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);",
      "right" : "Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);",
      "info" : "VariableDeclarationStatement[21447-21552]:VariableDeclarationStatement[21447-21552]"
    }, {
      "left" : "Node newExpr = NodeUtil.newExpr(or);",
      "right" : "Node newExpr = NodeUtil.newExpr(or);",
      "info" : "VariableDeclarationStatement[21563-21599]:VariableDeclarationStatement[21563-21599]"
    }, {
      "left" : "parent.replaceChild(n, newExpr);",
      "right" : "parent.replaceChild(n, newExpr);",
      "info" : "ExpressionStatement[21610-21642]:ExpressionStatement[21610-21642]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[21653-21672]:ExpressionStatement[21653-21672]"
    }, {
      "left" : "return newExpr;",
      "right" : "return newExpr;",
      "info" : "ReturnStatement[21684-21699]:ReturnStatement[21684-21699]"
    }, {
      "left" : "if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE))",
      "right" : "if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE))",
      "info" : "IfStatement[21755-22219]:IfStatement[21755-22219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21911-22219]:Block[21911-22219]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[22200-22209]:ReturnStatement[22200-22209]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[22229-22249]:ExpressionStatement[22229-22249]"
    }, {
      "left" : "Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);",
      "right" : "Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);",
      "info" : "VariableDeclarationStatement[22258-22317]:VariableDeclarationStatement[22258-22317]"
    }, {
      "left" : "Node newExpr = NodeUtil.newExpr(and);",
      "right" : "Node newExpr = NodeUtil.newExpr(and);",
      "info" : "VariableDeclarationStatement[22326-22363]:VariableDeclarationStatement[22326-22363]"
    }, {
      "left" : "parent.replaceChild(n, newExpr);",
      "right" : "parent.replaceChild(n, newExpr);",
      "info" : "ExpressionStatement[22372-22404]:ExpressionStatement[22372-22404]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[22413-22432]:ExpressionStatement[22413-22432]"
    }, {
      "left" : "return newExpr;",
      "right" : "return newExpr;",
      "info" : "ReturnStatement[22442-22457]:ReturnStatement[22442-22457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22471-23598]:Block[22471-23598]"
    }, {
      "left" : "if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild())",
      "right" : "if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild())",
      "info" : "IfStatement[22520-23590]:IfStatement[22520-23590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22603-23590]:Block[22603-23590]"
    }, {
      "left" : "Node innerIf = thenBranch.getFirstChild();",
      "right" : "Node innerIf = thenBranch.getFirstChild();",
      "info" : "VariableDeclarationStatement[22615-22657]:VariableDeclarationStatement[22615-22657]"
    }, {
      "left" : "if (innerIf.isIf())",
      "right" : "if (innerIf.isIf())",
      "info" : "IfStatement[22669-23580]:IfStatement[22669-23580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22689-23580]:Block[22689-23580]"
    }, {
      "left" : "Node innerCond = innerIf.getFirstChild();",
      "right" : "Node innerCond = innerIf.getFirstChild();",
      "info" : "VariableDeclarationStatement[22703-22744]:VariableDeclarationStatement[22703-22744]"
    }, {
      "left" : "Node innerThenBranch = innerCond.getNext();",
      "right" : "Node innerThenBranch = innerCond.getNext();",
      "info" : "VariableDeclarationStatement[22757-22800]:VariableDeclarationStatement[22757-22800]"
    }, {
      "left" : "Node innerElseBranch = innerThenBranch.getNext();",
      "right" : "Node innerElseBranch = innerThenBranch.getNext();",
      "info" : "VariableDeclarationStatement[22813-22862]:VariableDeclarationStatement[22813-22862]"
    }, {
      "left" : "if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE)))",
      "right" : "if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE)))",
      "info" : "IfStatement[22876-23568]:IfStatement[22876-23568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23059-23568]:Block[23059-23568]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[23075-23094]:ExpressionStatement[23075-23094]"
    }, {
      "left" : "n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));",
      "right" : "n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));",
      "info" : "ExpressionStatement[23109-23270]:ExpressionStatement[23109-23270]"
    }, {
      "left" : "n.addChildrenToBack(innerThenBranch.detachFromParent());",
      "right" : "n.addChildrenToBack(innerThenBranch.detachFromParent());",
      "info" : "ExpressionStatement[23285-23341]:ExpressionStatement[23285-23341]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23356-23375]:ExpressionStatement[23356-23375]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23545-23554]:ReturnStatement[23545-23554]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23606-23615]:ReturnStatement[23606-23615]"
    }, {
      "left" : "tryRemoveRepeatedStatements(n);",
      "right" : "tryRemoveRepeatedStatements(n);",
      "info" : "ExpressionStatement[23790-23821]:ExpressionStatement[23790-23821]"
    }, {
      "left" : "if (cond.isNot() && !consumesDanglingElse(elseBranch))",
      "right" : "if (cond.isNot() && !consumesDanglingElse(elseBranch))",
      "info" : "IfStatement[23941-24167]:IfStatement[23941-24167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23996-24167]:Block[23996-24167]"
    }, {
      "left" : "n.replaceChild(cond, cond.removeFirstChild());",
      "right" : "n.replaceChild(cond, cond.removeFirstChild());",
      "info" : "ExpressionStatement[24004-24050]:ExpressionStatement[24004-24050]"
    }, {
      "left" : "n.removeChild(thenBranch);",
      "right" : "n.removeChild(thenBranch);",
      "info" : "ExpressionStatement[24057-24083]:ExpressionStatement[24057-24083]"
    }, {
      "left" : "n.addChildToBack(thenBranch);",
      "right" : "n.addChildToBack(thenBranch);",
      "info" : "ExpressionStatement[24090-24119]:ExpressionStatement[24090-24119]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[24126-24145]:ExpressionStatement[24126-24145]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24152-24161]:ReturnStatement[24152-24161]"
    }, {
      "left" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
      "right" : "if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch))",
      "info" : "IfStatement[24226-24942]:IfStatement[24226-24942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24300-24942]:Block[24300-24942]"
    }, {
      "left" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
      "right" : "Node thenExpr = getBlockReturnExpression(thenBranch);",
      "info" : "VariableDeclarationStatement[24308-24361]:VariableDeclarationStatement[24308-24361]"
    }, {
      "left" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
      "right" : "Node elseExpr = getBlockReturnExpression(elseBranch);",
      "info" : "VariableDeclarationStatement[24368-24421]:VariableDeclarationStatement[24368-24421]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[24428-24448]:ExpressionStatement[24428-24448]"
    }, {
      "left" : "thenExpr.detachFromParent();",
      "right" : "thenExpr.detachFromParent();",
      "info" : "ExpressionStatement[24455-24483]:ExpressionStatement[24455-24483]"
    }, {
      "left" : "elseExpr.detachFromParent();",
      "right" : "elseExpr.detachFromParent();",
      "info" : "ExpressionStatement[24490-24518]:ExpressionStatement[24490-24518]"
    }, {
      "left" : "Node returnNode = IR.returnNode(\n                            IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n));",
      "right" : "Node returnNode = IR.returnNode(\n                            IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n));",
      "info" : "VariableDeclarationStatement[24704-24843]:VariableDeclarationStatement[24704-24843]"
    }, {
      "left" : "parent.replaceChild(n, returnNode);",
      "right" : "parent.replaceChild(n, returnNode);",
      "info" : "ExpressionStatement[24850-24885]:ExpressionStatement[24850-24885]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[24892-24911]:ExpressionStatement[24892-24911]"
    }, {
      "left" : "return returnNode;",
      "right" : "return returnNode;",
      "info" : "ReturnStatement[24918-24936]:ReturnStatement[24918-24936]"
    }, {
      "left" : "boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);",
      "right" : "boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);",
      "info" : "VariableDeclarationStatement[24948-25021]:VariableDeclarationStatement[24948-25021]"
    }, {
      "left" : "boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);",
      "right" : "boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);",
      "info" : "VariableDeclarationStatement[25026-25099]:VariableDeclarationStatement[25026-25099]"
    }, {
      "left" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
      "right" : "if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock)",
      "info" : "IfStatement[25105-26784]:IfStatement[25105-26905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25169-26784]:Block[25169-26905]"
    }, {
      "left" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
      "right" : "Node thenOp = getBlockExpression(thenBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[25177-25238]:VariableDeclarationStatement[25177-25238]"
    }, {
      "left" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
      "right" : "Node elseOp = getBlockExpression(elseBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[25245-25306]:VariableDeclarationStatement[25245-25306]"
    }, {
      "left" : "if (thenOp.getType() == elseOp.getType())",
      "right" : "if (thenOp.getType() == elseOp.getType())",
      "info" : "IfStatement[25313-26470]:IfStatement[25313-26591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25355-26470]:Block[25355-26591]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(thenOp))",
      "right" : "if (NodeUtil.isAssignmentOp(thenOp))",
      "info" : "IfStatement[25407-26462]:IfStatement[25407-26583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25444-26462]:Block[25444-26583]"
    }, {
      "left" : "Node lhs = thenOp.getFirstChild();",
      "right" : "Node lhs = thenOp.getFirstChild();",
      "info" : "VariableDeclarationStatement[25456-25490]:VariableDeclarationStatement[25456-25490]"
    }, {
      "left" : "if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs))",
      "right" : "if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs) &&\n              (!mayHaveSideEffects(cond) ||\n                  (thenOp.isAssign() && thenOp.getFirstChild().isName())))",
      "info" : "IfStatement[25501-26452]:IfStatement[25501-26573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25854-26452]:Block[25975-26573]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[25869-25889]:ExpressionStatement[25990-26010]"
    }, {
      "left" : "Node assignName = thenOp.removeFirstChild();",
      "right" : "Node assignName = thenOp.removeFirstChild();",
      "info" : "VariableDeclarationStatement[25902-25946]:VariableDeclarationStatement[26023-26067]"
    }, {
      "left" : "Node thenExpr = thenOp.removeFirstChild();",
      "right" : "Node thenExpr = thenOp.removeFirstChild();",
      "info" : "VariableDeclarationStatement[25959-26001]:VariableDeclarationStatement[26080-26122]"
    }, {
      "left" : "Node elseExpr = elseOp.getLastChild();",
      "right" : "Node elseExpr = elseOp.getLastChild();",
      "info" : "VariableDeclarationStatement[26014-26052]:VariableDeclarationStatement[26135-26173]"
    }, {
      "left" : "elseOp.removeChild(elseExpr);",
      "right" : "elseOp.removeChild(elseExpr);",
      "info" : "ExpressionStatement[26065-26094]:ExpressionStatement[26186-26215]"
    }, {
      "left" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);",
      "right" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);",
      "info" : "VariableDeclarationStatement[26108-26168]:VariableDeclarationStatement[26229-26289]"
    }, {
      "left" : "Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);",
      "right" : "Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);",
      "info" : "VariableDeclarationStatement[26181-26290]:VariableDeclarationStatement[26302-26411]"
    }, {
      "left" : "Node expr = NodeUtil.newExpr(assign);",
      "right" : "Node expr = NodeUtil.newExpr(assign);",
      "info" : "VariableDeclarationStatement[26303-26340]:VariableDeclarationStatement[26424-26461]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[26353-26382]:ExpressionStatement[26474-26503]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26395-26414]:ExpressionStatement[26516-26535]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[26428-26440]:ReturnStatement[26549-26561]"
    }, {
      "left" : "n.removeChild(cond);",
      "right" : "n.removeChild(cond);",
      "info" : "ExpressionStatement[26526-26546]:ExpressionStatement[26647-26667]"
    }, {
      "left" : "thenOp.detachFromParent();",
      "right" : "thenOp.detachFromParent();",
      "info" : "ExpressionStatement[26553-26579]:ExpressionStatement[26674-26700]"
    }, {
      "left" : "elseOp.detachFromParent();",
      "right" : "elseOp.detachFromParent();",
      "info" : "ExpressionStatement[26586-26612]:ExpressionStatement[26707-26733]"
    }, {
      "left" : "Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));",
      "right" : "Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));",
      "info" : "VariableDeclarationStatement[26619-26697]:VariableDeclarationStatement[26740-26818]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[26704-26733]:ExpressionStatement[26825-26854]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26740-26759]:ExpressionStatement[26861-26880]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[26766-26778]:ReturnStatement[26887-26899]"
    }, {
      "left" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
      "right" : "boolean thenBranchIsVar = isVarBlock(thenBranch);",
      "info" : "VariableDeclarationStatement[26790-26839]:VariableDeclarationStatement[26911-26960]"
    }, {
      "left" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
      "right" : "boolean elseBranchIsVar = isVarBlock(elseBranch);",
      "info" : "VariableDeclarationStatement[26844-26893]:VariableDeclarationStatement[26965-27014]"
    }, {
      "left" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign())",
      "right" : "if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign())",
      "info" : "IfStatement[26945-28763]:IfStatement[27066-28884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27066-27874]:Block[27187-27995]"
    }, {
      "left" : "Node var = getBlockVar(thenBranch);",
      "right" : "Node var = getBlockVar(thenBranch);",
      "info" : "VariableDeclarationStatement[27075-27110]:VariableDeclarationStatement[27196-27231]"
    }, {
      "left" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
      "right" : "Node elseAssign = getBlockExpression(elseBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[27117-27182]:VariableDeclarationStatement[27238-27303]"
    }, {
      "left" : "Node name1 = var.getFirstChild();",
      "right" : "Node name1 = var.getFirstChild();",
      "info" : "VariableDeclarationStatement[27190-27223]:VariableDeclarationStatement[27311-27344]"
    }, {
      "left" : "Node maybeName2 = elseAssign.getFirstChild();",
      "right" : "Node maybeName2 = elseAssign.getFirstChild();",
      "info" : "VariableDeclarationStatement[27230-27275]:VariableDeclarationStatement[27351-27396]"
    }, {
      "left" : "if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString()))",
      "right" : "if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString()))",
      "info" : "IfStatement[27283-27821]:IfStatement[27404-27942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27403-27821]:Block[27524-27942]"
    }, {
      "left" : "Node thenExpr = name1.removeChildren();",
      "right" : "Node thenExpr = name1.removeChildren();",
      "info" : "VariableDeclarationStatement[27413-27452]:VariableDeclarationStatement[27534-27573]"
    }, {
      "left" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
      "right" : "Node elseExpr = elseAssign.getLastChild().detachFromParent();",
      "info" : "VariableDeclarationStatement[27461-27522]:VariableDeclarationStatement[27582-27643]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[27531-27555]:ExpressionStatement[27652-27676]"
    }, {
      "left" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "right" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "info" : "VariableDeclarationStatement[27564-27653]:VariableDeclarationStatement[27685-27774]"
    }, {
      "left" : "var.detachFromParent();",
      "right" : "var.detachFromParent();",
      "info" : "ExpressionStatement[27662-27685]:ExpressionStatement[27783-27806]"
    }, {
      "left" : "name1.addChildrenToBack(hookNode);",
      "right" : "name1.addChildrenToBack(hookNode);",
      "info" : "ExpressionStatement[27694-27728]:ExpressionStatement[27815-27849]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[27737-27765]:ExpressionStatement[27858-27886]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[27774-27793]:ExpressionStatement[27895-27914]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[27802-27813]:ReturnStatement[27923-27934]"
    }, {
      "left" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign())",
      "right" : "if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign())",
      "info" : "IfStatement[27880-28763]:IfStatement[28001-28884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28001-28763]:Block[28122-28884]"
    }, {
      "left" : "Node var = getBlockVar(elseBranch);",
      "right" : "Node var = getBlockVar(elseBranch);",
      "info" : "VariableDeclarationStatement[28010-28045]:VariableDeclarationStatement[28131-28166]"
    }, {
      "left" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
      "right" : "Node thenAssign = getBlockExpression(thenBranch).getFirstChild();",
      "info" : "VariableDeclarationStatement[28052-28117]:VariableDeclarationStatement[28173-28238]"
    }, {
      "left" : "Node maybeName1 = thenAssign.getFirstChild();",
      "right" : "Node maybeName1 = thenAssign.getFirstChild();",
      "info" : "VariableDeclarationStatement[28125-28170]:VariableDeclarationStatement[28246-28291]"
    }, {
      "left" : "Node name2 = var.getFirstChild();",
      "right" : "Node name2 = var.getFirstChild();",
      "info" : "VariableDeclarationStatement[28177-28210]:VariableDeclarationStatement[28298-28331]"
    }, {
      "left" : "if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString()))",
      "right" : "if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString()))",
      "info" : "IfStatement[28218-28757]:IfStatement[28339-28878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28338-28757]:Block[28459-28878]"
    }, {
      "left" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
      "right" : "Node thenExpr = thenAssign.getLastChild().detachFromParent();",
      "info" : "VariableDeclarationStatement[28348-28409]:VariableDeclarationStatement[28469-28530]"
    }, {
      "left" : "Node elseExpr = name2.removeChildren();",
      "right" : "Node elseExpr = name2.removeChildren();",
      "info" : "VariableDeclarationStatement[28418-28457]:VariableDeclarationStatement[28539-28578]"
    }, {
      "left" : "cond.detachFromParent();",
      "right" : "cond.detachFromParent();",
      "info" : "ExpressionStatement[28466-28490]:ExpressionStatement[28587-28611]"
    }, {
      "left" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "right" : "Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);",
      "info" : "VariableDeclarationStatement[28499-28588]:VariableDeclarationStatement[28620-28709]"
    }, {
      "left" : "var.detachFromParent();",
      "right" : "var.detachFromParent();",
      "info" : "ExpressionStatement[28597-28620]:ExpressionStatement[28718-28741]"
    }, {
      "left" : "name2.addChildrenToBack(hookNode);",
      "right" : "name2.addChildrenToBack(hookNode);",
      "info" : "ExpressionStatement[28629-28663]:ExpressionStatement[28750-28784]"
    }, {
      "left" : "parent.replaceChild(n, var);",
      "right" : "parent.replaceChild(n, var);",
      "info" : "ExpressionStatement[28672-28700]:ExpressionStatement[28793-28821]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[28709-28728]:ExpressionStatement[28830-28849]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[28738-28749]:ReturnStatement[28859-28870]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28769-28778]:ReturnStatement[28890-28899]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29123-29130]:Modifier[29244-29251]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29131-29135]:PrimitiveType[29252-29256]"
    }, {
      "left" : "tryRemoveRepeatedStatements",
      "right" : "tryRemoveRepeatedStatements",
      "info" : "SimpleName[29136-29163]:SimpleName[29257-29284]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29164-29170]:SingleVariableDeclaration[29285-29291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29172-30030]:Block[29293-30151]"
    }, {
      "left" : "Preconditions.checkState(n.isIf());",
      "right" : "Preconditions.checkState(n.isIf());",
      "info" : "ExpressionStatement[29178-29213]:ExpressionStatement[29299-29334]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[29219-29247]:VariableDeclarationStatement[29340-29368]"
    }, {
      "left" : "if (!NodeUtil.isStatementBlock(parent))",
      "right" : "if (!NodeUtil.isStatementBlock(parent))",
      "info" : "IfStatement[29252-29420]:IfStatement[29373-29541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29292-29420]:Block[29413-29541]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29407-29414]:ReturnStatement[29528-29535]"
    }, {
      "left" : "Node cond = n.getFirstChild();",
      "right" : "Node cond = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[29426-29456]:VariableDeclarationStatement[29547-29577]"
    }, {
      "left" : "Node trueBranch = cond.getNext();",
      "right" : "Node trueBranch = cond.getNext();",
      "info" : "VariableDeclarationStatement[29461-29494]:VariableDeclarationStatement[29582-29615]"
    }, {
      "left" : "Node falseBranch = trueBranch.getNext();",
      "right" : "Node falseBranch = trueBranch.getNext();",
      "info" : "VariableDeclarationStatement[29499-29539]:VariableDeclarationStatement[29620-29660]"
    }, {
      "left" : "Preconditions.checkNotNull(trueBranch);",
      "right" : "Preconditions.checkNotNull(trueBranch);",
      "info" : "ExpressionStatement[29544-29583]:ExpressionStatement[29665-29704]"
    }, {
      "left" : "Preconditions.checkNotNull(falseBranch);",
      "right" : "Preconditions.checkNotNull(falseBranch);",
      "info" : "ExpressionStatement[29588-29628]:ExpressionStatement[29709-29749]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[29634-30026]:WhileStatement[29755-30147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29647-30026]:Block[29768-30147]"
    }, {
      "left" : "Node lastTrue = trueBranch.getLastChild();",
      "right" : "Node lastTrue = trueBranch.getLastChild();",
      "info" : "VariableDeclarationStatement[29655-29697]:VariableDeclarationStatement[29776-29818]"
    }, {
      "left" : "Node lastFalse = falseBranch.getLastChild();",
      "right" : "Node lastFalse = falseBranch.getLastChild();",
      "info" : "VariableDeclarationStatement[29704-29748]:VariableDeclarationStatement[29825-29869]"
    }, {
      "left" : "if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse))",
      "right" : "if (lastTrue == null || lastFalse == null\n          || !areNodesEqualForInlining(lastTrue, lastFalse))",
      "info" : "IfStatement[29755-29882]:IfStatement[29876-30003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29858-29882]:Block[29979-30003]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29868-29874]:BreakStatement[29989-29995]"
    }, {
      "left" : "lastTrue.detachFromParent();",
      "right" : "lastTrue.detachFromParent();",
      "info" : "ExpressionStatement[29889-29917]:ExpressionStatement[30010-30038]"
    }, {
      "left" : "lastFalse.detachFromParent();",
      "right" : "lastFalse.detachFromParent();",
      "info" : "ExpressionStatement[29924-29953]:ExpressionStatement[30045-30074]"
    }, {
      "left" : "parent.addChildAfter(lastTrue, n);",
      "right" : "parent.addChildAfter(lastTrue, n);",
      "info" : "ExpressionStatement[29960-29994]:ExpressionStatement[30081-30115]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[30001-30020]:ExpressionStatement[30122-30141]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30143-30150]:Modifier[30264-30271]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30151-30158]:PrimitiveType[30272-30279]"
    }, {
      "left" : "isFoldableExpressBlock",
      "right" : "isFoldableExpressBlock",
      "info" : "SimpleName[30159-30181]:SimpleName[30280-30302]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30182-30188]:SingleVariableDeclaration[30303-30309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30190-31300]:Block[30311-31421]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[30196-31277]:IfStatement[30317-31398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30213-31277]:Block[30334-31398]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[30221-31271]:IfStatement[30342-31392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30242-31271]:Block[30363-31392]"
    }, {
      "left" : "Node maybeExpr = n.getFirstChild();",
      "right" : "Node maybeExpr = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[30252-30287]:VariableDeclarationStatement[30373-30408]"
    }, {
      "left" : "if (maybeExpr.isExprResult())",
      "right" : "if (maybeExpr.isExprResult())",
      "info" : "IfStatement[30296-31241]:IfStatement[30417-31362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30326-31241]:Block[30447-31362]"
    }, {
      "left" : "if (maybeExpr.getFirstChild().isCall())",
      "right" : "if (maybeExpr.getFirstChild().isCall())",
      "info" : "IfStatement[30725-31207]:IfStatement[30846-31328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30765-31207]:Block[30886-31328]"
    }, {
      "left" : "Node calledFn = maybeExpr.getFirstChild().getFirstChild();",
      "right" : "Node calledFn = maybeExpr.getFirstChild().getFirstChild();",
      "info" : "VariableDeclarationStatement[30779-30837]:VariableDeclarationStatement[30900-30958]"
    }, {
      "left" : "if (calledFn.isGetElem())",
      "right" : "if (calledFn.isGetElem())",
      "info" : "IfStatement[30972-31195]:IfStatement[31093-31316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30998-31041]:Block[31119-31162]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31014-31027]:ReturnStatement[31135-31148]"
    }, {
      "left" : "if (calledFn.isGetProp() &&\n                       calledFn.getLastChild().getString().startsWith(\"on\"))",
      "right" : "if (calledFn.isGetProp() &&\n                       calledFn.getLastChild().getString().startsWith(\"on\"))",
      "info" : "IfStatement[31047-31195]:IfStatement[31168-31316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31152-31195]:Block[31273-31316]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31168-31181]:ReturnStatement[31289-31302]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31219-31231]:ReturnStatement[31340-31352]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31250-31263]:ReturnStatement[31371-31384]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31283-31296]:ReturnStatement[31404-31417]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31350-31357]:Modifier[31471-31478]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31358-31362]:SimpleType[31479-31483]"
    }, {
      "left" : "getBlockExpression",
      "right" : "getBlockExpression",
      "info" : "SimpleName[31363-31381]:SimpleName[31484-31502]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31382-31388]:SingleVariableDeclaration[31503-31509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31390-31482]:Block[31511-31603]"
    }, {
      "left" : "Preconditions.checkState(isFoldableExpressBlock(n));",
      "right" : "Preconditions.checkState(isFoldableExpressBlock(n));",
      "info" : "ExpressionStatement[31396-31448]:ExpressionStatement[31517-31569]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[31453-31478]:ReturnStatement[31574-31599]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31621-31628]:Modifier[31742-31749]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31629-31636]:PrimitiveType[31750-31757]"
    }, {
      "left" : "isReturnBlock",
      "right" : "isReturnBlock",
      "info" : "SimpleName[31637-31650]:SimpleName[31758-31771]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31651-31657]:SingleVariableDeclaration[31772-31778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31659-31822]:Block[31780-31943]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[31665-31799]:IfStatement[31786-31920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31682-31799]:Block[31803-31920]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[31690-31793]:IfStatement[31811-31914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31711-31793]:Block[31832-31914]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[31721-31752]:VariableDeclarationStatement[31842-31873]"
    }, {
      "left" : "return first.isReturn();",
      "right" : "return first.isReturn();",
      "info" : "ReturnStatement[31761-31785]:ReturnStatement[31882-31906]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31805-31818]:ReturnStatement[31926-31939]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31931-31938]:Modifier[32052-32059]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31939-31946]:PrimitiveType[32060-32067]"
    }, {
      "left" : "isReturnExpressBlock",
      "right" : "isReturnExpressBlock",
      "info" : "SimpleName[31947-31967]:SimpleName[32068-32088]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31968-31974]:SingleVariableDeclaration[32089-32095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31976-32186]:Block[32097-32307]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[31982-32163]:IfStatement[32103-32284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31999-32163]:Block[32120-32284]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[32007-32157]:IfStatement[32128-32278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32028-32157]:Block[32149-32278]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[32038-32069]:VariableDeclarationStatement[32159-32190]"
    }, {
      "left" : "if (first.isReturn())",
      "right" : "if (first.isReturn())",
      "info" : "IfStatement[32078-32149]:IfStatement[32199-32270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32100-32149]:Block[32221-32270]"
    }, {
      "left" : "return first.hasOneChild();",
      "right" : "return first.hasOneChild();",
      "info" : "ReturnStatement[32112-32139]:ReturnStatement[32233-32260]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32169-32182]:ReturnStatement[32290-32303]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32262-32269]:Modifier[32383-32390]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32270-32277]:PrimitiveType[32391-32398]"
    }, {
      "left" : "isReturnExpression",
      "right" : "isReturnExpression",
      "info" : "SimpleName[32278-32296]:SimpleName[32399-32417]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32297-32303]:SingleVariableDeclaration[32418-32424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32305-32388]:Block[32426-32509]"
    }, {
      "left" : "if (n.isReturn())",
      "right" : "if (n.isReturn())",
      "info" : "IfStatement[32311-32366]:IfStatement[32432-32487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32329-32366]:Block[32450-32487]"
    }, {
      "left" : "return n.hasOneChild();",
      "right" : "return n.hasOneChild();",
      "info" : "ReturnStatement[32337-32360]:ReturnStatement[32458-32481]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32371-32384]:ReturnStatement[32492-32505]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32460-32467]:Modifier[32581-32588]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32468-32472]:SimpleType[32589-32593]"
    }, {
      "left" : "getBlockReturnExpression",
      "right" : "getBlockReturnExpression",
      "info" : "SimpleName[32473-32497]:SimpleName[32594-32618]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32498-32504]:SingleVariableDeclaration[32619-32625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32506-32612]:Block[32627-32733]"
    }, {
      "left" : "Preconditions.checkState(isReturnExpressBlock(n));",
      "right" : "Preconditions.checkState(isReturnExpressBlock(n));",
      "info" : "ExpressionStatement[32512-32562]:ExpressionStatement[32633-32683]"
    }, {
      "left" : "return n.getFirstChild().getFirstChild();",
      "right" : "return n.getFirstChild().getFirstChild();",
      "info" : "ReturnStatement[32567-32608]:ReturnStatement[32688-32729]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32750-32757]:Modifier[32871-32878]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32758-32765]:PrimitiveType[32879-32886]"
    }, {
      "left" : "isVarBlock",
      "right" : "isVarBlock",
      "info" : "SimpleName[32766-32776]:SimpleName[32887-32897]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32777-32783]:SingleVariableDeclaration[32898-32904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32785-32992]:Block[32906-33113]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[32791-32969]:IfStatement[32912-33090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32808-32969]:Block[32929-33090]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[32816-32963]:IfStatement[32937-33084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32837-32963]:Block[32958-33084]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[32847-32878]:VariableDeclarationStatement[32968-32999]"
    }, {
      "left" : "if (first.isVar())",
      "right" : "if (first.isVar())",
      "info" : "IfStatement[32887-32955]:IfStatement[33008-33076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32906-32955]:Block[33027-33076]"
    }, {
      "left" : "return first.hasOneChild();",
      "right" : "return first.hasOneChild();",
      "info" : "ReturnStatement[32918-32945]:ReturnStatement[33039-33066]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32975-32988]:ReturnStatement[33096-33109]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33035-33042]:Modifier[33156-33163]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33043-33047]:SimpleType[33164-33168]"
    }, {
      "left" : "getBlockVar",
      "right" : "getBlockVar",
      "info" : "SimpleName[33048-33059]:SimpleName[33169-33180]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33060-33066]:SingleVariableDeclaration[33181-33187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33068-33148]:Block[33189-33269]"
    }, {
      "left" : "Preconditions.checkState(isVarBlock(n));",
      "right" : "Preconditions.checkState(isVarBlock(n));",
      "info" : "ExpressionStatement[33074-33114]:ExpressionStatement[33195-33235]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[33119-33144]:ReturnStatement[33240-33265]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33368-33375]:Modifier[33489-33496]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33376-33383]:PrimitiveType[33497-33504]"
    }, {
      "left" : "consumesDanglingElse",
      "right" : "consumesDanglingElse",
      "info" : "SimpleName[33384-33404]:SimpleName[33505-33525]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33405-33411]:SingleVariableDeclaration[33526-33532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33413-33845]:Block[33534-33966]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[33419-33841]:WhileStatement[33540-33962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33432-33841]:Block[33553-33962]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) {\n            return true;\n          }\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.IF:\n          if (n.getChildCount() < 3) {\n            return true;\n          }\n          // This IF node has no else clause.\n          n = n.getLastChild();\n          continue;\n        case Token.WITH:\n        case Token.WHILE:\n        case Token.FOR:\n          n = n.getLastChild();\n          continue;\n        default:\n          return false;\n      }",
      "info" : "SwitchStatement[33440-33835]:SwitchStatement[33561-33956]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[33471-33485]:SwitchCase[33592-33606]"
    }, {
      "left" : "if (n.getChildCount() < 3)",
      "right" : "if (n.getChildCount() < 3)",
      "info" : "IfStatement[33496-33561]:IfStatement[33617-33682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33523-33561]:Block[33644-33682]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33537-33549]:ReturnStatement[33658-33670]"
    }, {
      "left" : "n = n.getLastChild();",
      "right" : "n = n.getLastChild();",
      "info" : "ExpressionStatement[33618-33639]:ExpressionStatement[33739-33760]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33650-33659]:ContinueStatement[33771-33780]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[33668-33684]:SwitchCase[33789-33805]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[33693-33710]:SwitchCase[33814-33831]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[33719-33734]:SwitchCase[33840-33855]"
    }, {
      "left" : "n = n.getLastChild();",
      "right" : "n = n.getLastChild();",
      "info" : "ExpressionStatement[33745-33766]:ExpressionStatement[33866-33887]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33777-33786]:ContinueStatement[33898-33907]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33795-33803]:SwitchCase[33916-33924]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33814-33827]:ReturnStatement[33935-33948]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33952-33959]:Modifier[34073-34080]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33960-33967]:PrimitiveType[34081-34088]"
    }, {
      "left" : "isLowerPrecedenceInExpression",
      "right" : "isLowerPrecedenceInExpression",
      "info" : "SimpleName[33968-33997]:SimpleName[34089-34118]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33998-34004]:SingleVariableDeclaration[34119-34125]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[34012-34032]:SingleVariableDeclaration[34133-34153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34034-34350]:Block[34155-34471]"
    }, {
      "left" : "Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };",
      "right" : "Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };",
      "info" : "VariableDeclarationStatement[34040-34246]:VariableDeclarationStatement[34161-34367]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34115-34124]:MarkerAnnotation[34236-34245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34131-34137]:Modifier[34252-34258]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34138-34145]:PrimitiveType[34259-34266]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[34146-34151]:SimpleName[34267-34272]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[34152-34162]:SingleVariableDeclaration[34273-34283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34164-34239]:Block[34285-34360]"
    }, {
      "left" : "return NodeUtil.precedence(input.getType()) < precedence;",
      "right" : "return NodeUtil.precedence(input.getType()) < precedence;",
      "info" : "ReturnStatement[34174-34231]:ReturnStatement[34295-34352]"
    }, {
      "left" : "return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "right" : "return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "info" : "ReturnStatement[34252-34346]:ReturnStatement[34373-34467]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34432-34439]:Modifier[34553-34560]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34440-34447]:PrimitiveType[34561-34568]"
    }, {
      "left" : "isLowerPrecedence",
      "right" : "isLowerPrecedence",
      "info" : "SimpleName[34448-34465]:SimpleName[34569-34586]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34466-34472]:SingleVariableDeclaration[34587-34593]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[34474-34494]:SingleVariableDeclaration[34595-34615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34496-34559]:Block[34617-34680]"
    }, {
      "left" : "return NodeUtil.precedence(n.getType()) < precedence;",
      "right" : "return NodeUtil.precedence(n.getType()) < precedence;",
      "info" : "ReturnStatement[34502-34555]:ReturnStatement[34623-34676]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34642-34649]:Modifier[34763-34770]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34650-34657]:PrimitiveType[34771-34778]"
    }, {
      "left" : "isHigherPrecedence",
      "right" : "isHigherPrecedence",
      "info" : "SimpleName[34658-34676]:SimpleName[34779-34797]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34677-34683]:SingleVariableDeclaration[34798-34804]"
    }, {
      "left" : "final int precedence",
      "right" : "final int precedence",
      "info" : "SingleVariableDeclaration[34685-34705]:SingleVariableDeclaration[34806-34826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34707-34770]:Block[34828-34891]"
    }, {
      "left" : "return NodeUtil.precedence(n.getType()) > precedence;",
      "right" : "return NodeUtil.precedence(n.getType()) > precedence;",
      "info" : "ReturnStatement[34713-34766]:ReturnStatement[34834-34887]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34841-34848]:Modifier[34962-34969]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34849-34856]:PrimitiveType[34970-34977]"
    }, {
      "left" : "isPropertyAssignmentInExpression",
      "right" : "isPropertyAssignmentInExpression",
      "info" : "SimpleName[34857-34889]:SimpleName[34978-35010]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34890-34896]:SingleVariableDeclaration[35011-35017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34898-35266]:Block[35019-35387]"
    }, {
      "left" : "Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.isGetProp() &&\n            input.getParent().isAssign());\n      }\n    };",
      "right" : "Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.isGetProp() &&\n            input.getParent().isAssign());\n      }\n    };",
      "info" : "VariableDeclarationStatement[34904-35147]:VariableDeclarationStatement[35025-35268]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35002-35011]:MarkerAnnotation[35123-35132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35018-35024]:Modifier[35139-35145]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35025-35032]:PrimitiveType[35146-35153]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[35033-35038]:SimpleName[35154-35159]"
    }, {
      "left" : "Node input",
      "right" : "Node input",
      "info" : "SingleVariableDeclaration[35039-35049]:SingleVariableDeclaration[35160-35170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35051-35140]:Block[35172-35261]"
    }, {
      "left" : "return (input.isGetProp() &&\n            input.getParent().isAssign());",
      "right" : "return (input.isGetProp() &&\n            input.getParent().isAssign());",
      "info" : "ReturnStatement[35061-35132]:ReturnStatement[35182-35253]"
    }, {
      "left" : "return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "right" : "return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);",
      "info" : "ReturnStatement[35153-35262]:ReturnStatement[35274-35383]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35708-35715]:Modifier[35829-35836]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[35716-35720]:SimpleType[35837-35841]"
    }, {
      "left" : "tryMinimizeCondition",
      "right" : "tryMinimizeCondition",
      "info" : "SimpleName[35721-35741]:SimpleName[35842-35862]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35742-35748]:SingleVariableDeclaration[35863-35869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35750-42643]:Block[35871-42764]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[35756-35784]:VariableDeclarationStatement[35877-35905]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);\n        if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);\n        TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);\n        if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = IR.not(condition);\n        } else if (trueNodeVal == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = IR.or(condition, falseNode);\n        } else if (falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = IR.and(condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getPureBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);\n        if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);\n        TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);\n        if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = IR.not(condition);\n        } else if (trueNodeVal == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = IR.or(condition, falseNode);\n        } else if (falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = IR.and(condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getPureBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }",
      "info" : "SwitchStatement[35790-42639]:SwitchStatement[35911-42760]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[35819-35834]:SwitchCase[35940-35955]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[35843-35874]:VariableDeclarationStatement[35964-35995]"
    }, {
      "left" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }",
      "right" : "switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }",
      "info" : "SwitchStatement[35883-38866]:SwitchStatement[36004-38987]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[35920-35935]:SwitchCase[36041-36056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35936-36242]:Block[36057-36363]"
    }, {
      "left" : "Node newRoot = first.removeFirstChild();",
      "right" : "Node newRoot = first.removeFirstChild();",
      "info" : "VariableDeclarationStatement[35952-35992]:VariableDeclarationStatement[36073-36113]"
    }, {
      "left" : "parent.replaceChild(n, newRoot);",
      "right" : "parent.replaceChild(n, newRoot);",
      "info" : "ExpressionStatement[36007-36039]:ExpressionStatement[36128-36160]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[36054-36073]:ExpressionStatement[36175-36194]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[36213-36228]:ReturnStatement[36334-36349]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[36253-36268]:SwitchCase[36374-36389]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[36279-36293]:SwitchCase[36400-36414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36294-38507]:Block[36415-38628]"
    }, {
      "left" : "Node leftParent = first.getFirstChild();",
      "right" : "Node leftParent = first.getFirstChild();",
      "info" : "VariableDeclarationStatement[36630-36670]:VariableDeclarationStatement[36751-36791]"
    }, {
      "left" : "Node rightParent = first.getLastChild();",
      "right" : "Node rightParent = first.getLastChild();",
      "info" : "VariableDeclarationStatement[36685-36725]:VariableDeclarationStatement[36806-36846]"
    }, {
      "left" : "Node left, right;",
      "right" : "Node left, right;",
      "info" : "VariableDeclarationStatement[36740-36757]:VariableDeclarationStatement[36861-36878]"
    }, {
      "left" : "if (!leftParent.isNot()\n                  && !rightParent.isNot())",
      "right" : "if (!leftParent.isNot()\n                  && !rightParent.isNot())",
      "info" : "IfStatement[36966-37644]:IfStatement[37087-37765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37033-37644]:Block[37154-37765]"
    }, {
      "left" : "int op_precedence = NodeUtil.precedence(first.getType());",
      "right" : "int op_precedence = NodeUtil.precedence(first.getType());",
      "info" : "VariableDeclarationStatement[37243-37300]:VariableDeclarationStatement[37364-37421]"
    }, {
      "left" : "if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence)))",
      "right" : "if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence)))",
      "info" : "IfStatement[37317-37628]:IfStatement[37438-37749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37581-37628]:Block[37702-37749]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37601-37610]:ReturnStatement[37722-37731]"
    }, {
      "left" : "if (leftParent.isNot())",
      "right" : "if (leftParent.isNot())",
      "info" : "IfStatement[37660-37887]:IfStatement[37781-38008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37684-37755]:Block[37805-37876]"
    }, {
      "left" : "left = leftParent.removeFirstChild();",
      "right" : "left = leftParent.removeFirstChild();",
      "info" : "ExpressionStatement[37702-37739]:ExpressionStatement[37823-37860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37761-37887]:Block[37882-38008]"
    }, {
      "left" : "leftParent.detachFromParent();",
      "right" : "leftParent.detachFromParent();",
      "info" : "ExpressionStatement[37779-37809]:ExpressionStatement[37900-37930]"
    }, {
      "left" : "left = IR.not(leftParent).srcref(leftParent);",
      "right" : "left = IR.not(leftParent).srcref(leftParent);",
      "info" : "ExpressionStatement[37826-37871]:ExpressionStatement[37947-37992]"
    }, {
      "left" : "if (rightParent.isNot())",
      "right" : "if (rightParent.isNot())",
      "info" : "IfStatement[37902-38136]:IfStatement[38023-38257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37927-38000]:Block[38048-38121]"
    }, {
      "left" : "right = rightParent.removeFirstChild();",
      "right" : "right = rightParent.removeFirstChild();",
      "info" : "ExpressionStatement[37945-37984]:ExpressionStatement[38066-38105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38006-38136]:Block[38127-38257]"
    }, {
      "left" : "rightParent.detachFromParent();",
      "right" : "rightParent.detachFromParent();",
      "info" : "ExpressionStatement[38024-38055]:ExpressionStatement[38145-38176]"
    }, {
      "left" : "right = IR.not(rightParent).srcref(rightParent);",
      "right" : "right = IR.not(rightParent).srcref(rightParent);",
      "info" : "ExpressionStatement[38072-38120]:ExpressionStatement[38193-38241]"
    }, {
      "left" : "int newOp = (first.isAnd()) ? Token.OR : Token.AND;",
      "right" : "int newOp = (first.isAnd()) ? Token.OR : Token.AND;",
      "info" : "VariableDeclarationStatement[38152-38203]:VariableDeclarationStatement[38273-38324]"
    }, {
      "left" : "Node newRoot = new Node(newOp, left, right);",
      "right" : "Node newRoot = new Node(newOp, left, right);",
      "info" : "VariableDeclarationStatement[38218-38262]:VariableDeclarationStatement[38339-38383]"
    }, {
      "left" : "parent.replaceChild(n, newRoot);",
      "right" : "parent.replaceChild(n, newRoot);",
      "info" : "ExpressionStatement[38277-38309]:ExpressionStatement[38398-38430]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[38324-38343]:ExpressionStatement[38445-38464]"
    }, {
      "left" : "return newRoot;",
      "right" : "return newRoot;",
      "info" : "ReturnStatement[38478-38493]:ReturnStatement[38599-38614]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38520-38528]:SwitchCase[38641-38649]"
    }, {
      "left" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(first);",
      "right" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(first);",
      "info" : "VariableDeclarationStatement[38542-38598]:VariableDeclarationStatement[38663-38719]"
    }, {
      "left" : "if (nVal != TernaryValue.UNKNOWN)",
      "right" : "if (nVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[38612-38856]:IfStatement[38733-38977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38646-38856]:Block[38767-38977]"
    }, {
      "left" : "boolean result = nVal.not().toBoolean(true);",
      "right" : "boolean result = nVal.not().toBoolean(true);",
      "info" : "VariableDeclarationStatement[38663-38707]:VariableDeclarationStatement[38784-38828]"
    }, {
      "left" : "int equivalentResult = result ? 1 : 0;",
      "right" : "int equivalentResult = result ? 1 : 0;",
      "info" : "VariableDeclarationStatement[38723-38761]:VariableDeclarationStatement[38844-38882]"
    }, {
      "left" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "right" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "info" : "ReturnStatement[38777-38841]:ReturnStatement[38898-38962]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39023-39032]:ReturnStatement[39144-39153]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[39040-39054]:SwitchCase[39161-39175]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[39061-39076]:SwitchCase[39182-39197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39077-40344]:Block[39198-40465]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[39087-39117]:VariableDeclarationStatement[39208-39238]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[39126-39156]:VariableDeclarationStatement[39247-39277]"
    }, {
      "left" : "left = tryMinimizeCondition(left);",
      "right" : "left = tryMinimizeCondition(left);",
      "info" : "ExpressionStatement[39298-39332]:ExpressionStatement[39419-39453]"
    }, {
      "left" : "right = tryMinimizeCondition(right);",
      "right" : "right = tryMinimizeCondition(right);",
      "info" : "ExpressionStatement[39341-39377]:ExpressionStatement[39462-39498]"
    }, {
      "left" : "TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);",
      "right" : "TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);",
      "info" : "VariableDeclarationStatement[39583-39643]:VariableDeclarationStatement[39704-39764]"
    }, {
      "left" : "if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN)",
      "right" : "if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[39652-40318]:IfStatement[39773-40439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39717-40318]:Block[39838-40439]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[39729-39752]:VariableDeclarationStatement[39850-39873]"
    }, {
      "left" : "Node replacement = null;",
      "right" : "Node replacement = null;",
      "info" : "VariableDeclarationStatement[39763-39787]:VariableDeclarationStatement[39884-39908]"
    }, {
      "left" : "boolean rval = rightVal.toBoolean(true);",
      "right" : "boolean rval = rightVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[39798-39838]:VariableDeclarationStatement[39919-39959]"
    }, {
      "left" : "if (type == Token.OR && !rval ||\n              type == Token.AND && rval)",
      "right" : "if (type == Token.OR && !rval ||\n              type == Token.AND && rval)",
      "info" : "IfStatement[39911-40113]:IfStatement[40032-40234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39985-40030]:Block[40106-40151]"
    }, {
      "left" : "replacement = left;",
      "right" : "replacement = left;",
      "info" : "ExpressionStatement[39999-40018]:ExpressionStatement[40120-40139]"
    }, {
      "left" : "if (!mayHaveSideEffects(left))",
      "right" : "if (!mayHaveSideEffects(left))",
      "info" : "IfStatement[40036-40113]:IfStatement[40157-40234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40067-40113]:Block[40188-40234]"
    }, {
      "left" : "replacement = right;",
      "right" : "replacement = right;",
      "info" : "ExpressionStatement[40081-40101]:ExpressionStatement[40202-40222]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[40125-40308]:IfStatement[40246-40429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40150-40308]:Block[40271-40429]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[40164-40183]:ExpressionStatement[40285-40304]"
    }, {
      "left" : "parent.replaceChild(n, replacement);",
      "right" : "parent.replaceChild(n, replacement);",
      "info" : "ExpressionStatement[40196-40232]:ExpressionStatement[40317-40353]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[40245-40264]:ExpressionStatement[40366-40385]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[40277-40296]:ReturnStatement[40398-40417]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40327-40336]:ReturnStatement[40448-40457]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[40352-40368]:SwitchCase[40473-40489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40369-42227]:Block[40490-42348]"
    }, {
      "left" : "Node condition = n.getFirstChild();",
      "right" : "Node condition = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[40379-40414]:VariableDeclarationStatement[40500-40535]"
    }, {
      "left" : "Node trueNode = n.getFirstChild().getNext();",
      "right" : "Node trueNode = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[40423-40467]:VariableDeclarationStatement[40544-40588]"
    }, {
      "left" : "Node falseNode = n.getLastChild();",
      "right" : "Node falseNode = n.getLastChild();",
      "info" : "VariableDeclarationStatement[40476-40510]:VariableDeclarationStatement[40597-40631]"
    }, {
      "left" : "trueNode = tryMinimizeCondition(trueNode);",
      "right" : "trueNode = tryMinimizeCondition(trueNode);",
      "info" : "ExpressionStatement[40735-40777]:ExpressionStatement[40856-40898]"
    }, {
      "left" : "falseNode = tryMinimizeCondition(falseNode);",
      "right" : "falseNode = tryMinimizeCondition(falseNode);",
      "info" : "ExpressionStatement[40786-40830]:ExpressionStatement[40907-40951]"
    }, {
      "left" : "Node replacement = null;",
      "right" : "Node replacement = null;",
      "info" : "VariableDeclarationStatement[41025-41049]:VariableDeclarationStatement[41146-41170]"
    }, {
      "left" : "TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);",
      "right" : "TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);",
      "info" : "VariableDeclarationStatement[41058-41124]:VariableDeclarationStatement[41179-41245]"
    }, {
      "left" : "TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);",
      "right" : "TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);",
      "info" : "VariableDeclarationStatement[41133-41201]:VariableDeclarationStatement[41254-41322]"
    }, {
      "left" : "if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE)",
      "right" : "if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE)",
      "info" : "IfStatement[41210-42050]:IfStatement[41331-42171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41298-41445]:Block[41419-41566]"
    }, {
      "left" : "condition.detachFromParent();",
      "right" : "condition.detachFromParent();",
      "info" : "ExpressionStatement[41371-41400]:ExpressionStatement[41492-41521]"
    }, {
      "left" : "replacement = condition;",
      "right" : "replacement = condition;",
      "info" : "ExpressionStatement[41411-41435]:ExpressionStatement[41532-41556]"
    }, {
      "left" : "if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE)",
      "right" : "if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE)",
      "info" : "IfStatement[41451-42050]:IfStatement[41572-42171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41539-41694]:Block[41660-41815]"
    }, {
      "left" : "condition.detachFromParent();",
      "right" : "condition.detachFromParent();",
      "info" : "ExpressionStatement[41612-41641]:ExpressionStatement[41733-41762]"
    }, {
      "left" : "replacement = IR.not(condition);",
      "right" : "replacement = IR.not(condition);",
      "info" : "ExpressionStatement[41652-41684]:ExpressionStatement[41773-41805]"
    }, {
      "left" : "if (trueNodeVal == TernaryValue.TRUE)",
      "right" : "if (trueNodeVal == TernaryValue.TRUE)",
      "info" : "IfStatement[41700-42050]:IfStatement[41821-42171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41738-41871]:Block[41859-41992]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[41789-41808]:ExpressionStatement[41910-41929]"
    }, {
      "left" : "replacement = IR.or(condition, falseNode);",
      "right" : "replacement = IR.or(condition, falseNode);",
      "info" : "ExpressionStatement[41819-41861]:ExpressionStatement[41940-41982]"
    }, {
      "left" : "if (falseNodeVal == TernaryValue.FALSE)",
      "right" : "if (falseNodeVal == TernaryValue.FALSE)",
      "info" : "IfStatement[41877-42050]:IfStatement[41998-42171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41917-42050]:Block[42038-42171]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[41968-41987]:ExpressionStatement[42089-42108]"
    }, {
      "left" : "replacement = IR.and(condition, trueNode);",
      "right" : "replacement = IR.and(condition, trueNode);",
      "info" : "ExpressionStatement[41998-42040]:ExpressionStatement[42119-42161]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[42060-42200]:IfStatement[42181-42321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42085-42200]:Block[42206-42321]"
    }, {
      "left" : "parent.replaceChild(n, replacement);",
      "right" : "parent.replaceChild(n, replacement);",
      "info" : "ExpressionStatement[42097-42133]:ExpressionStatement[42218-42254]"
    }, {
      "left" : "n = replacement;",
      "right" : "n = replacement;",
      "info" : "ExpressionStatement[42144-42160]:ExpressionStatement[42265-42281]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[42171-42190]:ExpressionStatement[42292-42311]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42210-42219]:ReturnStatement[42331-42340]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42235-42243]:SwitchCase[42356-42364]"
    }, {
      "left" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(n);",
      "right" : "TernaryValue nVal = NodeUtil.getPureBooleanValue(n);",
      "info" : "VariableDeclarationStatement[42288-42340]:VariableDeclarationStatement[42409-42461]"
    }, {
      "left" : "if (nVal != TernaryValue.UNKNOWN)",
      "right" : "if (nVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[42349-42567]:IfStatement[42470-42688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42383-42567]:Block[42504-42688]"
    }, {
      "left" : "boolean result = nVal.toBoolean(true);",
      "right" : "boolean result = nVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[42395-42433]:VariableDeclarationStatement[42516-42554]"
    }, {
      "left" : "int equivalentResult = result ? 1 : 0;",
      "right" : "int equivalentResult = result ? 1 : 0;",
      "info" : "VariableDeclarationStatement[42444-42482]:VariableDeclarationStatement[42565-42603]"
    }, {
      "left" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "right" : "return maybeReplaceChildWithNumber(n, parent, equivalentResult);",
      "info" : "ReturnStatement[42493-42557]:ReturnStatement[42614-42678]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42624-42633]:ReturnStatement[42745-42754]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42847-42854]:Modifier[42968-42975]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[42855-42859]:SimpleType[42976-42980]"
    }, {
      "left" : "maybeReplaceChildWithNumber",
      "right" : "maybeReplaceChildWithNumber",
      "info" : "SimpleName[42860-42887]:SimpleName[42981-43008]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42888-42894]:SingleVariableDeclaration[43009-43015]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[42896-42907]:SingleVariableDeclaration[43017-43028]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[42909-42916]:SingleVariableDeclaration[43030-43037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42918-43105]:Block[43039-43226]"
    }, {
      "left" : "Node newNode = IR.number(num);",
      "right" : "Node newNode = IR.number(num);",
      "info" : "VariableDeclarationStatement[42924-42954]:VariableDeclarationStatement[43045-43075]"
    }, {
      "left" : "if (!newNode.isEquivalentTo(n))",
      "right" : "if (!newNode.isEquivalentTo(n))",
      "info" : "IfStatement[42959-43086]:IfStatement[43080-43207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42991-43086]:Block[43112-43207]"
    }, {
      "left" : "parent.replaceChild(n, newNode);",
      "right" : "parent.replaceChild(n, newNode);",
      "info" : "ExpressionStatement[42999-43031]:ExpressionStatement[43120-43152]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[43038-43057]:ExpressionStatement[43159-43178]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[43065-43080]:ReturnStatement[43186-43201]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[43092-43101]:ReturnStatement[43213-43222]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43509-43516]:Modifier[43630-43637]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[43517-43521]:SimpleType[43638-43642]"
    }, {
      "left" : "tryFoldStandardConstructors",
      "right" : "tryFoldStandardConstructors",
      "info" : "SimpleName[43522-43549]:SimpleName[43643-43670]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43550-43556]:SingleVariableDeclaration[43671-43677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43558-44115]:Block[43679-44236]"
    }, {
      "left" : "Preconditions.checkState(n.isNew());",
      "right" : "Preconditions.checkState(n.isNew());",
      "info" : "ExpressionStatement[43564-43600]:ExpressionStatement[43685-43721]"
    }, {
      "left" : "if (isASTNormalized())",
      "right" : "if (isASTNormalized())",
      "info" : "IfStatement[43773-44096]:IfStatement[43894-44217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43796-44096]:Block[43917-44217]"
    }, {
      "left" : "if (n.getFirstChild().isName())",
      "right" : "if (n.getFirstChild().isName())",
      "info" : "IfStatement[43804-44090]:IfStatement[43925-44211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43836-44090]:Block[43957-44211]"
    }, {
      "left" : "String className = n.getFirstChild().getString();",
      "right" : "String className = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[43846-43895]:VariableDeclarationStatement[43967-44016]"
    }, {
      "left" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "right" : "if (STANDARD_OBJECT_CONSTRUCTORS.contains(className))",
      "info" : "IfStatement[43904-44082]:IfStatement[44025-44203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43958-44082]:Block[44079-44203]"
    }, {
      "left" : "n.setType(Token.CALL);",
      "right" : "n.setType(Token.CALL);",
      "info" : "ExpressionStatement[43970-43992]:ExpressionStatement[44091-44113]"
    }, {
      "left" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "n.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[44003-44042]:ExpressionStatement[44124-44163]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[44053-44072]:ExpressionStatement[44174-44193]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[44102-44111]:ReturnStatement[44223-44232]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44279-44286]:Modifier[44400-44407]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[44287-44291]:SimpleType[44408-44412]"
    }, {
      "left" : "tryFoldLiteralConstructor",
      "right" : "tryFoldLiteralConstructor",
      "info" : "SimpleName[44292-44317]:SimpleName[44413-44438]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[44318-44324]:SingleVariableDeclaration[44439-44445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44326-45983]:Block[44447-46104]"
    }, {
      "left" : "Preconditions.checkArgument(n.isCall()\n        || n.isNew());",
      "right" : "Preconditions.checkArgument(n.isCall()\n        || n.isNew());",
      "info" : "ExpressionStatement[44332-44393]:ExpressionStatement[44453-44514]"
    }, {
      "left" : "Node constructorNameNode = n.getFirstChild();",
      "right" : "Node constructorNameNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[44399-44444]:VariableDeclarationStatement[44520-44565]"
    }, {
      "left" : "Node newLiteralNode = null;",
      "right" : "Node newLiteralNode = null;",
      "info" : "VariableDeclarationStatement[44450-44477]:VariableDeclarationStatement[44571-44598]"
    }, {
      "left" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "right" : "if (isASTNormalized() && Token.NAME == constructorNameNode.getType())",
      "info" : "IfStatement[44675-45965]:IfStatement[44796-46086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44745-45965]:Block[44866-46086]"
    }, {
      "left" : "String className = constructorNameNode.getString();",
      "right" : "String className = constructorNameNode.getString();",
      "info" : "VariableDeclarationStatement[44754-44805]:VariableDeclarationStatement[44875-44926]"
    }, {
      "left" : "if (\"RegExp\".equals(className))",
      "right" : "if (\"RegExp\".equals(className))",
      "info" : "IfStatement[44813-45959]:IfStatement[44934-46080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44845-44952]:Block[44966-45073]"
    }, {
      "left" : "return tryFoldRegularExpressionConstructor(n);",
      "right" : "return tryFoldRegularExpressionConstructor(n);",
      "info" : "ReturnStatement[44898-44944]:ReturnStatement[45019-45065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44958-45959]:Block[45079-46080]"
    }, {
      "left" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "right" : "boolean constructorHasArgs = constructorNameNode.getNext() != null;",
      "info" : "VariableDeclarationStatement[44968-45035]:VariableDeclarationStatement[45089-45156]"
    }, {
      "left" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "right" : "if (\"Object\".equals(className) && !constructorHasArgs)",
      "info" : "IfStatement[45045-45782]:IfStatement[45166-45903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45100-45187]:Block[45221-45308]"
    }, {
      "left" : "newLiteralNode = IR.objectlit();",
      "right" : "newLiteralNode = IR.objectlit();",
      "info" : "ExpressionStatement[45145-45177]:ExpressionStatement[45266-45298]"
    }, {
      "left" : "if (\"Array\".equals(className))",
      "right" : "if (\"Array\".equals(className))",
      "info" : "IfStatement[45193-45782]:IfStatement[45314-45903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45224-45782]:Block[45345-45903]"
    }, {
      "left" : "Node arg0 = constructorNameNode.getNext();",
      "right" : "Node arg0 = constructorNameNode.getNext();",
      "info" : "VariableDeclarationStatement[45298-45340]:VariableDeclarationStatement[45419-45461]"
    }, {
      "left" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "right" : "FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);",
      "info" : "VariableDeclarationStatement[45351-45411]:VariableDeclarationStatement[45472-45532]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||\n              action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS)",
      "info" : "IfStatement[45423-45772]:IfStatement[45544-45893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45546-45772]:Block[45667-45893]"
    }, {
      "left" : "newLiteralNode = IR.arraylit();",
      "right" : "newLiteralNode = IR.arraylit();",
      "info" : "ExpressionStatement[45560-45591]:ExpressionStatement[45681-45712]"
    }, {
      "left" : "n.removeChildren();",
      "right" : "n.removeChildren();",
      "info" : "ExpressionStatement[45604-45623]:ExpressionStatement[45725-45744]"
    }, {
      "left" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "right" : "if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS)",
      "info" : "IfStatement[45636-45760]:IfStatement[45757-45881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45690-45760]:Block[45811-45881]"
    }, {
      "left" : "newLiteralNode.addChildrenToFront(arg0);",
      "right" : "newLiteralNode.addChildrenToFront(arg0);",
      "info" : "ExpressionStatement[45706-45746]:ExpressionStatement[45827-45867]"
    }, {
      "left" : "if (newLiteralNode != null)",
      "right" : "if (newLiteralNode != null)",
      "info" : "IfStatement[45792-45951]:IfStatement[45913-46072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45820-45951]:Block[45941-46072]"
    }, {
      "left" : "n.getParent().replaceChild(n, newLiteralNode);",
      "right" : "n.getParent().replaceChild(n, newLiteralNode);",
      "info" : "ExpressionStatement[45832-45878]:ExpressionStatement[45953-45999]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[45889-45908]:ExpressionStatement[46010-46029]"
    }, {
      "left" : "return newLiteralNode;",
      "right" : "return newLiteralNode;",
      "info" : "ReturnStatement[45919-45941]:ReturnStatement[46040-46062]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[45970-45979]:ReturnStatement[46091-46100]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46414-46421]:Modifier[46535-46542]"
    }, {
      "left" : "FoldArrayAction",
      "right" : "FoldArrayAction",
      "info" : "SimpleType[46422-46437]:SimpleType[46543-46558]"
    }, {
      "left" : "isSafeToFoldArrayConstructor",
      "right" : "isSafeToFoldArrayConstructor",
      "info" : "SimpleName[46438-46466]:SimpleName[46559-46587]"
    }, {
      "left" : "Node arg",
      "right" : "Node arg",
      "info" : "SingleVariableDeclaration[46467-46475]:SingleVariableDeclaration[46588-46596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46477-47297]:Block[46598-47418]"
    }, {
      "left" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "right" : "FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;",
      "info" : "VariableDeclarationStatement[46483-46541]:VariableDeclarationStatement[46604-46662]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[46547-47274]:IfStatement[46668-47395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46564-46629]:Block[46685-46750]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[46572-46623]:ExpressionStatement[46693-46744]"
    }, {
      "left" : "if (arg.getNext() != null)",
      "right" : "if (arg.getNext() != null)",
      "info" : "IfStatement[46635-47274]:IfStatement[46756-47395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46662-46724]:Block[46783-46845]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[46670-46718]:ExpressionStatement[46791-46839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46730-47274]:Block[46851-47395]"
    }, {
      "left" : "switch (arg.getType()) {\n        case Token.STRING:\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case Token.NUMBER:\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case Token.ARRAYLIT:\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "right" : "switch (arg.getType()) {\n        case Token.STRING:\n          // \"Array('a')\" --> \"['a']\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        case Token.NUMBER:\n          // \"Array(0)\" --> \"[]\"\n          if (arg.getDouble() == 0) {\n            action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;\n          }\n          break;\n        case Token.ARRAYLIT:\n          // \"Array([args])\" --> \"[[args]]\"\n          action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;\n          break;\n        default:\n      }",
      "info" : "SwitchStatement[46738-47268]:SwitchStatement[46859-47389]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[46771-46789]:SwitchCase[46892-46910]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[46838-46886]:ExpressionStatement[46959-47007]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46897-46903]:BreakStatement[47018-47024]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[46912-46930]:SwitchCase[47033-47051]"
    }, {
      "left" : "if (arg.getDouble() == 0)",
      "right" : "if (arg.getDouble() == 0)",
      "info" : "IfStatement[46974-47077]:IfStatement[47095-47198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47000-47077]:Block[47121-47198]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;",
      "info" : "ExpressionStatement[47014-47065]:ExpressionStatement[47135-47186]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47088-47094]:BreakStatement[47209-47215]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[47103-47123]:SwitchCase[47224-47244]"
    }, {
      "left" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "right" : "action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;",
      "info" : "ExpressionStatement[47178-47226]:ExpressionStatement[47299-47347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47237-47243]:BreakStatement[47358-47364]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[47252-47260]:SwitchCase[47373-47381]"
    }, {
      "left" : "return action;",
      "right" : "return action;",
      "info" : "ReturnStatement[47279-47293]:ReturnStatement[47400-47414]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47301-47308]:Modifier[47422-47429]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47309-47313]:SimpleType[47430-47434]"
    }, {
      "left" : "tryFoldRegularExpressionConstructor",
      "right" : "tryFoldRegularExpressionConstructor",
      "info" : "SimpleName[47314-47349]:SimpleName[47435-47470]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[47350-47356]:SingleVariableDeclaration[47471-47477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47358-49302]:Block[47479-49423]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[47364-47392]:VariableDeclarationStatement[47485-47513]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[47397-47434]:VariableDeclarationStatement[47518-47555]"
    }, {
      "left" : "Node pattern = constructor.getNext();",
      "right" : "Node pattern = constructor.getNext();",
      "info" : "VariableDeclarationStatement[47439-47476]:VariableDeclarationStatement[47560-47597]"
    }, {
      "left" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "right" : "Node flags = null != pattern ? pattern.getNext() : null;",
      "info" : "VariableDeclarationStatement[47500-47556]:VariableDeclarationStatement[47621-47677]"
    }, {
      "left" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "right" : "if (null == pattern || (null != flags && null != flags.getNext()))",
      "info" : "IfStatement[47574-47703]:IfStatement[47695-47824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47641-47703]:Block[47762-47824]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[47688-47697]:ReturnStatement[47809-47818]"
    }, {
      "left" : "if (// is pattern folded\n        pattern.isString()\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.isString())\n        // don't escape patterns with Unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with Unicode escapes\n        && (isEcmaScript5OrGreater()\n            || !containsUnicodeEscape(pattern.getString())))",
      "right" : "if (// is pattern folded\n        pattern.isString()\n        // make sure empty pattern doesn't fold to //\n        && !\"\".equals(pattern.getString())\n\n        // NOTE(nicksantos): Make sure that the regexp isn't longer than\n        // 100 chars, or it blows up the regexp parser in Opera 9.2.\n        && pattern.getString().length() < 100\n\n        && (null == flags || flags.isString())\n        // don't escape patterns with Unicode escapes since Safari behaves badly\n        // (read can't parse or crashes) on regex literals with Unicode escapes\n        && (isEcmaScript5OrGreater()\n            || !containsUnicodeEscape(pattern.getString())))",
      "info" : "IfStatement[47709-49283]:IfStatement[47830-49404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48354-49283]:Block[48475-49404]"
    }, {
      "left" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "right" : "pattern = makeForwardSlashBracketSafe(pattern);",
      "info" : "ExpressionStatement[48615-48662]:ExpressionStatement[48736-48783]"
    }, {
      "left" : "Node regexLiteral;",
      "right" : "Node regexLiteral;",
      "info" : "VariableDeclarationStatement[48670-48688]:VariableDeclarationStatement[48791-48809]"
    }, {
      "left" : "if (null == flags || \"\".equals(flags.getString()))",
      "right" : "if (null == flags || \"\".equals(flags.getString()))",
      "info" : "IfStatement[48695-49179]:IfStatement[48816-49300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48746-48826]:Block[48867-48947]"
    }, {
      "left" : "regexLiteral = IR.regexp(pattern);",
      "right" : "regexLiteral = IR.regexp(pattern);",
      "info" : "ExpressionStatement[48784-48818]:ExpressionStatement[48905-48939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48832-49179]:Block[48953-49300]"
    }, {
      "left" : "if (!areValidRegexpFlags(flags.getString()))",
      "right" : "if (!areValidRegexpFlags(flags.getString()))",
      "info" : "IfStatement[48872-49007]:IfStatement[48993-49128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48917-49007]:Block[49038-49128]"
    }, {
      "left" : "report(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "right" : "report(INVALID_REGULAR_EXPRESSION_FLAGS, flags);",
      "info" : "ExpressionStatement[48929-48977]:ExpressionStatement[49050-49098]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[48988-48997]:ReturnStatement[49109-49118]"
    }, {
      "left" : "if (!areSafeFlagsToFold(flags.getString()))",
      "right" : "if (!areSafeFlagsToFold(flags.getString()))",
      "info" : "IfStatement[49016-49091]:IfStatement[49137-49212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49060-49091]:Block[49181-49212]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49072-49081]:ReturnStatement[49193-49202]"
    }, {
      "left" : "n.removeChild(flags);",
      "right" : "n.removeChild(flags);",
      "info" : "ExpressionStatement[49100-49121]:ExpressionStatement[49221-49242]"
    }, {
      "left" : "regexLiteral = IR.regexp(pattern, flags);",
      "right" : "regexLiteral = IR.regexp(pattern, flags);",
      "info" : "ExpressionStatement[49130-49171]:ExpressionStatement[49251-49292]"
    }, {
      "left" : "parent.replaceChild(n, regexLiteral);",
      "right" : "parent.replaceChild(n, regexLiteral);",
      "info" : "ExpressionStatement[49187-49224]:ExpressionStatement[49308-49345]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[49231-49250]:ExpressionStatement[49352-49371]"
    }, {
      "left" : "return regexLiteral;",
      "right" : "return regexLiteral;",
      "info" : "ReturnStatement[49257-49277]:ReturnStatement[49378-49398]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49289-49298]:ReturnStatement[49410-49419]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49306-49313]:Modifier[49427-49434]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49314-49318]:SimpleType[49435-49439]"
    }, {
      "left" : "reduceTrueFalse",
      "right" : "reduceTrueFalse",
      "info" : "SimpleName[49319-49334]:SimpleName[49440-49455]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49335-49341]:SingleVariableDeclaration[49456-49462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49343-49567]:Block[49464-49688]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[49349-49549]:IfStatement[49470-49670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49359-49549]:Block[49480-49670]"
    }, {
      "left" : "Node not = IR.not(IR.number(n.isTrue() ? 0 : 1));",
      "right" : "Node not = IR.not(IR.number(n.isTrue() ? 0 : 1));",
      "info" : "VariableDeclarationStatement[49367-49416]:VariableDeclarationStatement[49488-49537]"
    }, {
      "left" : "not.copyInformationFromForTree(n);",
      "right" : "not.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[49423-49457]:ExpressionStatement[49544-49578]"
    }, {
      "left" : "n.getParent().replaceChild(n, not);",
      "right" : "n.getParent().replaceChild(n, not);",
      "info" : "ExpressionStatement[49464-49499]:ExpressionStatement[49585-49620]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[49506-49525]:ExpressionStatement[49627-49646]"
    }, {
      "left" : "return not;",
      "right" : "return not;",
      "info" : "ReturnStatement[49532-49543]:ReturnStatement[49653-49664]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49554-49563]:ReturnStatement[49675-49684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49571-49578]:Modifier[49692-49699]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49579-49583]:SimpleType[49700-49704]"
    }, {
      "left" : "tryMinimizeArrayLiteral",
      "right" : "tryMinimizeArrayLiteral",
      "info" : "SimpleName[49584-49607]:SimpleName[49705-49728]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49608-49614]:SingleVariableDeclaration[49729-49735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49616-49903]:Block[49737-50024]"
    }, {
      "left" : "boolean allStrings = true;",
      "right" : "boolean allStrings = true;",
      "info" : "VariableDeclarationStatement[49622-49648]:VariableDeclarationStatement[49743-49769]"
    }, {
      "left" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[49653-49794]:ForStatement[49774-49915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49722-49794]:Block[49843-49915]"
    }, {
      "left" : "if (!cur.isString())",
      "right" : "if (!cur.isString())",
      "info" : "IfStatement[49730-49788]:IfStatement[49851-49909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49751-49788]:Block[49872-49909]"
    }, {
      "left" : "allStrings = false;",
      "right" : "allStrings = false;",
      "info" : "ExpressionStatement[49761-49780]:ExpressionStatement[49882-49901]"
    }, {
      "left" : "if (allStrings)",
      "right" : "if (allStrings)",
      "info" : "IfStatement[49800-49899]:IfStatement[49921-50020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49816-49870]:Block[49937-49991]"
    }, {
      "left" : "return tryMinimizeStringArrayLiteral(n);",
      "right" : "return tryMinimizeStringArrayLiteral(n);",
      "info" : "ReturnStatement[49824-49864]:ReturnStatement[49945-49985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49876-49899]:Block[49997-50020]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49884-49893]:ReturnStatement[50005-50014]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49907-49914]:Modifier[50028-50035]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49915-49919]:SimpleType[50036-50040]"
    }, {
      "left" : "tryMinimizeStringArrayLiteral",
      "right" : "tryMinimizeStringArrayLiteral",
      "info" : "SimpleName[49920-49949]:SimpleName[50041-50070]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[49950-49956]:SingleVariableDeclaration[50071-50077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49958-50946]:Block[50079-51067]"
    }, {
      "left" : "if(!late)",
      "right" : "if(!late)",
      "info" : "IfStatement[49964-49997]:IfStatement[50085-50118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49974-49997]:Block[50095-50118]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[49982-49991]:ReturnStatement[50103-50112]"
    }, {
      "left" : "int numElements = n.getChildCount();",
      "right" : "int numElements = n.getChildCount();",
      "info" : "VariableDeclarationStatement[50003-50039]:VariableDeclarationStatement[50124-50160]"
    }, {
      "left" : "int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;",
      "right" : "int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;",
      "info" : "VariableDeclarationStatement[50082-50135]:VariableDeclarationStatement[50203-50256]"
    }, {
      "left" : "if (saving <= 0)",
      "right" : "if (saving <= 0)",
      "info" : "IfStatement[50140-50180]:IfStatement[50261-50301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50157-50180]:Block[50278-50301]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[50165-50174]:ReturnStatement[50286-50295]"
    }, {
      "left" : "String[] strings = new String[n.getChildCount()];",
      "right" : "String[] strings = new String[n.getChildCount()];",
      "info" : "VariableDeclarationStatement[50186-50235]:VariableDeclarationStatement[50307-50356]"
    }, {
      "left" : "int idx = 0;",
      "right" : "int idx = 0;",
      "info" : "VariableDeclarationStatement[50240-50252]:VariableDeclarationStatement[50361-50373]"
    }, {
      "left" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "right" : "for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext())",
      "info" : "ForStatement[50257-50373]:ForStatement[50378-50494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50326-50373]:Block[50447-50494]"
    }, {
      "left" : "strings[idx++] = cur.getString();",
      "right" : "strings[idx++] = cur.getString();",
      "info" : "ExpressionStatement[50334-50367]:ExpressionStatement[50455-50488]"
    }, {
      "left" : "String delimiter = pickDelimiter(strings);",
      "right" : "String delimiter = pickDelimiter(strings);",
      "info" : "VariableDeclarationStatement[50504-50546]:VariableDeclarationStatement[50625-50667]"
    }, {
      "left" : "if (delimiter != null)",
      "right" : "if (delimiter != null)",
      "info" : "IfStatement[50551-50928]:IfStatement[50672-51049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50574-50928]:Block[50695-51049]"
    }, {
      "left" : "String template = Joiner.on(delimiter).join(strings);",
      "right" : "String template = Joiner.on(delimiter).join(strings);",
      "info" : "VariableDeclarationStatement[50582-50635]:VariableDeclarationStatement[50703-50756]"
    }, {
      "left" : "Node call = IR.call(\n          IR.getprop(\n              IR.string(template),\n              IR.string(\"split\")),\n          IR.string(\"\" + delimiter));",
      "right" : "Node call = IR.call(\n          IR.getprop(\n              IR.string(template),\n              IR.string(\"split\")),\n          IR.string(\"\" + delimiter));",
      "info" : "VariableDeclarationStatement[50642-50792]:VariableDeclarationStatement[50763-50913]"
    }, {
      "left" : "call.copyInformationFromForTree(n);",
      "right" : "call.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[50799-50834]:ExpressionStatement[50920-50955]"
    }, {
      "left" : "n.getParent().replaceChild(n, call);",
      "right" : "n.getParent().replaceChild(n, call);",
      "info" : "ExpressionStatement[50841-50877]:ExpressionStatement[50962-50998]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[50884-50903]:ExpressionStatement[51005-51024]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[50910-50922]:ReturnStatement[51031-51043]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[50933-50942]:ReturnStatement[51054-51063]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51121-51128]:Modifier[51242-51249]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[51129-51135]:SimpleType[51250-51256]"
    }, {
      "left" : "pickDelimiter",
      "right" : "pickDelimiter",
      "info" : "SimpleName[51136-51149]:SimpleName[51257-51270]"
    }, {
      "left" : "String[] strings",
      "right" : "String[] strings",
      "info" : "SingleVariableDeclaration[51150-51166]:SingleVariableDeclaration[51271-51287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51168-51686]:Block[51289-51807]"
    }, {
      "left" : "boolean allLength1 = true;",
      "right" : "boolean allLength1 = true;",
      "info" : "VariableDeclarationStatement[51174-51200]:VariableDeclarationStatement[51295-51321]"
    }, {
      "left" : "for (String s : strings)",
      "right" : "for (String s : strings)",
      "info" : "EnhancedForStatement[51205-51317]:EnhancedForStatement[51326-51438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51230-51317]:Block[51351-51438]"
    }, {
      "left" : "if (s.length() != 1)",
      "right" : "if (s.length() != 1)",
      "info" : "IfStatement[51238-51311]:IfStatement[51359-51432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51259-51311]:Block[51380-51432]"
    }, {
      "left" : "allLength1 = false;",
      "right" : "allLength1 = false;",
      "info" : "ExpressionStatement[51269-51288]:ExpressionStatement[51390-51409]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51297-51303]:BreakStatement[51418-51424]"
    }, {
      "left" : "if (allLength1)",
      "right" : "if (allLength1)",
      "info" : "IfStatement[51323-51363]:IfStatement[51444-51484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51339-51363]:Block[51460-51484]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[51347-51357]:ReturnStatement[51468-51478]"
    }, {
      "left" : "String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};",
      "right" : "String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};",
      "info" : "VariableDeclarationStatement[51369-51435]:VariableDeclarationStatement[51490-51556]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[51440-51450]:VariableDeclarationStatement[51561-51571]"
    }, {
      "left" : "NEXT_DELIMITER: for (;delimiters[i] != null; i++) {\n      for (String cur : strings) {\n        if (cur.contains(delimiters[i])) {\n          continue NEXT_DELIMITER;\n        }\n      }\n      break;\n    }",
      "right" : "NEXT_DELIMITER: for (;delimiters[i] != null; i++) {\n      for (String cur : strings) {\n        if (cur.contains(delimiters[i])) {\n          continue NEXT_DELIMITER;\n        }\n      }\n      break;\n    }",
      "info" : "LabeledStatement[51455-51656]:LabeledStatement[51576-51777]"
    }, {
      "left" : "for (;delimiters[i] != null; i++)",
      "right" : "for (;delimiters[i] != null; i++)",
      "info" : "ForStatement[51471-51656]:ForStatement[51592-51777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51505-51656]:Block[51626-51777]"
    }, {
      "left" : "for (String cur : strings)",
      "right" : "for (String cur : strings)",
      "info" : "EnhancedForStatement[51513-51637]:EnhancedForStatement[51634-51758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51540-51637]:Block[51661-51758]"
    }, {
      "left" : "if (cur.contains(delimiters[i]))",
      "right" : "if (cur.contains(delimiters[i]))",
      "info" : "IfStatement[51550-51629]:IfStatement[51671-51750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51583-51629]:Block[51704-51750]"
    }, {
      "left" : "continue NEXT_DELIMITER;",
      "right" : "continue NEXT_DELIMITER;",
      "info" : "ContinueStatement[51595-51619]:ContinueStatement[51716-51740]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51644-51650]:BreakStatement[51765-51771]"
    }, {
      "left" : "return delimiters[i];",
      "right" : "return delimiters[i];",
      "info" : "ReturnStatement[51661-51682]:ReturnStatement[51782-51803]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52139-52146]:Modifier[52260-52267]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52147-52153]:Modifier[52268-52274]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52154-52161]:PrimitiveType[52275-52282]"
    }, {
      "left" : "areValidRegexpFlags",
      "right" : "areValidRegexpFlags",
      "info" : "SimpleName[52162-52181]:SimpleName[52283-52302]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[52182-52194]:SingleVariableDeclaration[52303-52315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52196-52254]:Block[52317-52375]"
    }, {
      "left" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "right" : "return REGEXP_FLAGS_RE.matcher(flags).matches();",
      "info" : "ReturnStatement[52202-52250]:ReturnStatement[52323-52371]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53064-53071]:Modifier[53185-53192]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53072-53079]:PrimitiveType[53193-53200]"
    }, {
      "left" : "areSafeFlagsToFold",
      "right" : "areSafeFlagsToFold",
      "info" : "SimpleName[53080-53098]:SimpleName[53201-53219]"
    }, {
      "left" : "String flags",
      "right" : "String flags",
      "info" : "SingleVariableDeclaration[53099-53111]:SingleVariableDeclaration[53220-53232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53113-53181]:Block[53234-53302]"
    }, {
      "left" : "return isEcmaScript5OrGreater() || flags.indexOf('g') < 0;",
      "right" : "return isEcmaScript5OrGreater() || flags.indexOf('g') < 0;",
      "info" : "ReturnStatement[53119-53177]:ReturnStatement[53240-53298]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53271-53278]:Modifier[53392-53399]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53279-53285]:Modifier[53400-53406]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[53286-53290]:SimpleType[53407-53411]"
    }, {
      "left" : "makeForwardSlashBracketSafe",
      "right" : "makeForwardSlashBracketSafe",
      "info" : "SimpleName[53291-53318]:SimpleName[53412-53439]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[53319-53325]:SingleVariableDeclaration[53440-53446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53327-55464]:Block[53448-55585]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[53333-53358]:VariableDeclarationStatement[53454-53479]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[53405-53429]:VariableDeclarationStatement[53526-53550]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[53434-53446]:VariableDeclarationStatement[53555-53567]"
    }, {
      "left" : "boolean isEscaped = false, inCharset = false;",
      "right" : "boolean isEscaped = false, inCharset = false;",
      "info" : "VariableDeclarationStatement[53451-53496]:VariableDeclarationStatement[53572-53617]"
    }, {
      "left" : "for (int i = 0; i < s.length(); ++i)",
      "right" : "for (int i = 0; i < s.length(); ++i)",
      "info" : "ForStatement[53501-55330]:ForStatement[53622-55451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53538-55330]:Block[53659-55451]"
    }, {
      "left" : "char ch = s.charAt(i);",
      "right" : "char ch = s.charAt(i);",
      "info" : "VariableDeclarationStatement[53546-53568]:VariableDeclarationStatement[53667-53689]"
    }, {
      "left" : "switch (ch) {\n        case '\\\\':\n          isEscaped = !isEscaped;\n          continue;\n        case '/':\n          // Escape a literal forward slash if it is not already escaped and is\n          // not inside a character set.\n          //     new RegExp('/') -> /\\//\n          // but the following do not need extra escaping\n          //     new RegExp('\\\\/') -> /\\//\n          //     new RegExp('[/]') -> /[/]/\n          if (!isEscaped && !inCharset) {\n            if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n            sb.append(s, pos, i).append('\\\\');\n            pos = i;\n          }\n          break;\n        case '[':\n          if (!isEscaped) {\n            inCharset = true;\n          }\n          break;\n        case ']':\n          if (!isEscaped) {\n            inCharset = false;\n          }\n          break;\n        case '\\r': case '\\n': case '\\u2028': case '\\u2029':\n          // LineTerminators cannot appear raw inside a regular\n          // expression literal.\n          // They can't appear legally in a quoted string, but when\n          // the quoted string from\n          //     new RegExp('\\n')\n          // reaches here, the quoting has been removed.\n          // Requote just these code-points.\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          if (isEscaped) {\n            sb.append(s, pos, i - 1);\n          } else {\n            sb.append(s, pos, i);\n          }\n          switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }\n          pos = i + 1;\n          break;\n      }",
      "right" : "switch (ch) {\n        case '\\\\':\n          isEscaped = !isEscaped;\n          continue;\n        case '/':\n          // Escape a literal forward slash if it is not already escaped and is\n          // not inside a character set.\n          //     new RegExp('/') -> /\\//\n          // but the following do not need extra escaping\n          //     new RegExp('\\\\/') -> /\\//\n          //     new RegExp('[/]') -> /[/]/\n          if (!isEscaped && !inCharset) {\n            if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n            sb.append(s, pos, i).append('\\\\');\n            pos = i;\n          }\n          break;\n        case '[':\n          if (!isEscaped) {\n            inCharset = true;\n          }\n          break;\n        case ']':\n          if (!isEscaped) {\n            inCharset = false;\n          }\n          break;\n        case '\\r': case '\\n': case '\\u2028': case '\\u2029':\n          // LineTerminators cannot appear raw inside a regular\n          // expression literal.\n          // They can't appear legally in a quoted string, but when\n          // the quoted string from\n          //     new RegExp('\\n')\n          // reaches here, the quoting has been removed.\n          // Requote just these code-points.\n          if (null == sb) { sb = new StringBuilder(s.length() + 16); }\n          if (isEscaped) {\n            sb.append(s, pos, i - 1);\n          } else {\n            sb.append(s, pos, i);\n          }\n          switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }\n          pos = i + 1;\n          break;\n      }",
      "info" : "SwitchStatement[53575-55299]:SwitchStatement[53696-55420]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[53597-53607]:SwitchCase[53718-53728]"
    }, {
      "left" : "isEscaped = !isEscaped;",
      "right" : "isEscaped = !isEscaped;",
      "info" : "ExpressionStatement[53618-53641]:ExpressionStatement[53739-53762]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53652-53661]:ContinueStatement[53773-53782]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[53670-53679]:SwitchCase[53791-53800]"
    }, {
      "left" : "if (!isEscaped && !inCharset)",
      "right" : "if (!isEscaped && !inCharset)",
      "info" : "IfStatement[53997-54181]:IfStatement[54118-54302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54027-54181]:Block[54148-54302]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[54041-54101]:IfStatement[54162-54222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54057-54101]:Block[54178-54222]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[54059-54099]:ExpressionStatement[54180-54220]"
    }, {
      "left" : "sb.append(s, pos, i).append('\\\\');",
      "right" : "sb.append(s, pos, i).append('\\\\');",
      "info" : "ExpressionStatement[54114-54148]:ExpressionStatement[54235-54269]"
    }, {
      "left" : "pos = i;",
      "right" : "pos = i;",
      "info" : "ExpressionStatement[54161-54169]:ExpressionStatement[54282-54290]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54192-54198]:BreakStatement[54313-54319]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[54207-54216]:SwitchCase[54328-54337]"
    }, {
      "left" : "if (!isEscaped)",
      "right" : "if (!isEscaped)",
      "info" : "IfStatement[54227-54286]:IfStatement[54348-54407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54243-54286]:Block[54364-54407]"
    }, {
      "left" : "inCharset = true;",
      "right" : "inCharset = true;",
      "info" : "ExpressionStatement[54257-54274]:ExpressionStatement[54378-54395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54297-54303]:BreakStatement[54418-54424]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[54312-54321]:SwitchCase[54433-54442]"
    }, {
      "left" : "if (!isEscaped)",
      "right" : "if (!isEscaped)",
      "info" : "IfStatement[54332-54392]:IfStatement[54453-54513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54348-54392]:Block[54469-54513]"
    }, {
      "left" : "inCharset = false;",
      "right" : "inCharset = false;",
      "info" : "ExpressionStatement[54362-54380]:ExpressionStatement[54483-54501]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54403-54409]:BreakStatement[54524-54530]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[54418-54428]:SwitchCase[54539-54549]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[54429-54439]:SwitchCase[54550-54560]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[54440-54454]:SwitchCase[54561-54575]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[54455-54469]:SwitchCase[54576-54590]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[54817-54877]:IfStatement[54938-54998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54833-54877]:Block[54954-54998]"
    }, {
      "left" : "sb = new StringBuilder(s.length() + 16);",
      "right" : "sb = new StringBuilder(s.length() + 16);",
      "info" : "ExpressionStatement[54835-54875]:ExpressionStatement[54956-54996]"
    }, {
      "left" : "if (isEscaped)",
      "right" : "if (isEscaped)",
      "info" : "IfStatement[54888-55007]:IfStatement[55009-55128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54903-54954]:Block[55024-55075]"
    }, {
      "left" : "sb.append(s, pos, i - 1);",
      "right" : "sb.append(s, pos, i - 1);",
      "info" : "ExpressionStatement[54917-54942]:ExpressionStatement[55038-55063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54960-55007]:Block[55081-55128]"
    }, {
      "left" : "sb.append(s, pos, i);",
      "right" : "sb.append(s, pos, i);",
      "info" : "ExpressionStatement[54974-54995]:ExpressionStatement[55095-55116]"
    }, {
      "left" : "switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }",
      "right" : "switch (ch) {\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\u2028': sb.append(\"\\\\u2028\"); break;\n            case '\\u2029': sb.append(\"\\\\u2029\"); break;\n          }",
      "info" : "SwitchStatement[55018-55251]:SwitchStatement[55139-55372]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[55044-55054]:SwitchCase[55165-55175]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[55055-55072]:ExpressionStatement[55176-55193]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55073-55079]:BreakStatement[55194-55200]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[55092-55102]:SwitchCase[55213-55223]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[55103-55120]:ExpressionStatement[55224-55241]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55121-55127]:BreakStatement[55242-55248]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[55140-55154]:SwitchCase[55261-55275]"
    }, {
      "left" : "sb.append(\"\\\\u2028\");",
      "right" : "sb.append(\"\\\\u2028\");",
      "info" : "ExpressionStatement[55155-55176]:ExpressionStatement[55276-55297]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55177-55183]:BreakStatement[55298-55304]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[55196-55210]:SwitchCase[55317-55331]"
    }, {
      "left" : "sb.append(\"\\\\u2029\");",
      "right" : "sb.append(\"\\\\u2029\");",
      "info" : "ExpressionStatement[55211-55232]:ExpressionStatement[55332-55353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55233-55239]:BreakStatement[55354-55360]"
    }, {
      "left" : "pos = i + 1;",
      "right" : "pos = i + 1;",
      "info" : "ExpressionStatement[55262-55274]:ExpressionStatement[55383-55395]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55285-55291]:BreakStatement[55406-55412]"
    }, {
      "left" : "isEscaped = false;",
      "right" : "isEscaped = false;",
      "info" : "ExpressionStatement[55306-55324]:ExpressionStatement[55427-55445]"
    }, {
      "left" : "if (null == sb)",
      "right" : "if (null == sb)",
      "info" : "IfStatement[55336-55377]:IfStatement[55457-55498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55352-55377]:Block[55473-55498]"
    }, {
      "left" : "return n.cloneTree();",
      "right" : "return n.cloneTree();",
      "info" : "ReturnStatement[55354-55375]:ReturnStatement[55475-55496]"
    }, {
      "left" : "sb.append(s, pos, s.length());",
      "right" : "sb.append(s, pos, s.length());",
      "info" : "ExpressionStatement[55383-55413]:ExpressionStatement[55504-55534]"
    }, {
      "left" : "return IR.string(sb.toString()).srcref(n);",
      "right" : "return IR.string(sb.toString()).srcref(n);",
      "info" : "ReturnStatement[55418-55460]:ReturnStatement[55539-55581]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55613-55619]:Modifier[55734-55740]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55620-55627]:PrimitiveType[55741-55748]"
    }, {
      "left" : "containsUnicodeEscape",
      "right" : "containsUnicodeEscape",
      "info" : "SimpleName[55628-55649]:SimpleName[55749-55770]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[55650-55658]:SingleVariableDeclaration[55771-55779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55660-56075]:Block[55781-56196]"
    }, {
      "left" : "String esc = REGEXP_ESCAPER.regexpEscape(s);",
      "right" : "String esc = REGEXP_ESCAPER.regexpEscape(s);",
      "info" : "VariableDeclarationStatement[55666-55710]:VariableDeclarationStatement[55787-55831]"
    }, {
      "left" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "right" : "for (int i = -1; (i = esc.indexOf(\"\\\\u\", i + 1)) >= 0)",
      "info" : "ForStatement[55715-56053]:ForStatement[55836-56174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55771-56053]:Block[55892-56174]"
    }, {
      "left" : "int nSlashes = 0;",
      "right" : "int nSlashes = 0;",
      "info" : "VariableDeclarationStatement[55779-55796]:VariableDeclarationStatement[55900-55917]"
    }, {
      "left" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "right" : "while (i - nSlashes > 0 && '\\\\' == esc.charAt(i - nSlashes - 1))",
      "info" : "WhileStatement[55803-55897]:WhileStatement[55924-56018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55868-55897]:Block[55989-56018]"
    }, {
      "left" : "++nSlashes;",
      "right" : "++nSlashes;",
      "info" : "ExpressionStatement[55878-55889]:ExpressionStatement[55999-56010]"
    }, {
      "left" : "if (0 == (nSlashes & 1))",
      "right" : "if (0 == (nSlashes & 1))",
      "info" : "IfStatement[56006-56047]:IfStatement[56127-56168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56031-56047]:Block[56152-56168]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56033-56045]:ReturnStatement[56154-56166]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56058-56071]:ReturnStatement[56179-56192]"
    } ]
  },
  "interFileMappings" : { }
}