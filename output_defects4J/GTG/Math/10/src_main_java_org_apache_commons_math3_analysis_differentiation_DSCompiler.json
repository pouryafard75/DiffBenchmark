{
  "matchedElements" : [
 {
    "left" : "class : DSCompiler",
    "right" : "class : DSCompiler",
    "info" : "TypeDeclaration[1282-75657]:TypeDeclaration[1282-75728]"
  }, {
    "left" : "compilers",
    "right" : "compilers",
    "info" : "FieldDeclaration[6460-6623]:FieldDeclaration[6460-6623]"
  }, {
    "left" : "parameters",
    "right" : "parameters",
    "info" : "FieldDeclaration[6629-6696]:FieldDeclaration[6629-6696]"
  }, {
    "left" : "order",
    "right" : "order",
    "info" : "FieldDeclaration[6702-6755]:FieldDeclaration[6702-6755]"
  }, {
    "left" : "sizes",
    "right" : "sizes",
    "info" : "FieldDeclaration[6761-6881]:FieldDeclaration[6761-6881]"
  }, {
    "left" : "derivativesIndirection",
    "right" : "derivativesIndirection",
    "info" : "FieldDeclaration[6887-6986]:FieldDeclaration[6887-6986]"
  }, {
    "left" : "lowerIndirection",
    "right" : "lowerIndirection",
    "info" : "FieldDeclaration[6992-7092]:FieldDeclaration[6992-7092]"
  }, {
    "left" : "multIndirection",
    "right" : "multIndirection",
    "info" : "FieldDeclaration[7098-7188]:FieldDeclaration[7098-7188]"
  }, {
    "left" : "compIndirection",
    "right" : "compIndirection",
    "info" : "FieldDeclaration[7194-7290]:FieldDeclaration[7194-7290]"
  }, {
    "left" : "private DSCompiler(parameters int, order int, valueCompiler , derivativeCompiler )",
    "right" : "private DSCompiler(parameters int, order int, valueCompiler , derivativeCompiler )",
    "info" : "MethodDeclaration[7296-8720]:MethodDeclaration[7296-8720]"
  }, {
    "left" : "public getCompiler(parameters int, order int) : ",
    "right" : "public getCompiler(parameters int, order int) : ",
    "info" : "MethodDeclaration[8726-10712]:MethodDeclaration[8726-10712]"
  }, {
    "left" : "private compileSizes(parameters int, order int, valueCompiler ) : ",
    "right" : "private compileSizes(parameters int, order int, valueCompiler ) : ",
    "info" : "MethodDeclaration[10718-11541]:MethodDeclaration[10718-11541]"
  }, {
    "left" : "private compileDerivativesIndirection(parameters int, order int, valueCompiler , derivativeCompiler ) : ",
    "right" : "private compileDerivativesIndirection(parameters int, order int, valueCompiler , derivativeCompiler ) : ",
    "info" : "MethodDeclaration[11547-13322]:MethodDeclaration[11547-13322]"
  }, {
    "left" : "private compileLowerIndirection(parameters int, order int, valueCompiler , derivativeCompiler ) : ",
    "right" : "private compileLowerIndirection(parameters int, order int, valueCompiler , derivativeCompiler ) : ",
    "info" : "MethodDeclaration[13328-14700]:MethodDeclaration[13328-14700]"
  }, {
    "left" : "private compileMultiplicationIndirection(parameters int, order int, valueCompiler , derivativeCompiler , lowerIndirection ) : ",
    "right" : "private compileMultiplicationIndirection(parameters int, order int, valueCompiler , derivativeCompiler , lowerIndirection ) : ",
    "info" : "MethodDeclaration[14706-17627]:MethodDeclaration[14706-17627]"
  }, {
    "left" : "private compileCompositionIndirection(parameters int, order int, valueCompiler , derivativeCompiler , sizes , derivativesIndirection ) : ",
    "right" : "private compileCompositionIndirection(parameters int, order int, valueCompiler , derivativeCompiler , sizes , derivativesIndirection ) : ",
    "info" : "MethodDeclaration[17633-23246]:MethodDeclaration[17633-23246]"
  }, {
    "left" : "public getPartialDerivativeIndex() : int",
    "right" : "public getPartialDerivativeIndex() : int",
    "info" : "MethodDeclaration[23252-25362]:MethodDeclaration[23252-25362]"
  }, {
    "left" : "private getPartialDerivativeIndex(parameters int, order int, sizes , ) : int",
    "right" : "private getPartialDerivativeIndex(parameters int, order int, sizes , ) : int",
    "info" : "MethodDeclaration[25368-27063]:MethodDeclaration[25368-27063]"
  }, {
    "left" : "private convertIndex(index int, srcP int, srcDerivativesIndirection , destP int, destO int, destSizes ...) : int",
    "right" : "private convertIndex(index int, srcP int, srcDerivativesIndirection , destP int, destO int, destSizes ...) : int",
    "info" : "MethodDeclaration[27069-28243]:MethodDeclaration[27069-28243]"
  }, {
    "left" : "public getPartialDerivativeOrders(index int) : ",
    "right" : "public getPartialDerivativeOrders(index int) : ",
    "info" : "MethodDeclaration[28249-28704]:MethodDeclaration[28249-28704]"
  }, {
    "left" : "public getFreeParameters() : int",
    "right" : "public getFreeParameters() : int",
    "info" : "MethodDeclaration[28710-28867]:MethodDeclaration[28710-28867]"
  }, {
    "left" : "public getOrder() : int",
    "right" : "public getOrder() : int",
    "info" : "MethodDeclaration[28873-28998]:MethodDeclaration[28873-28998]"
  }, {
    "left" : "public getSize() : int",
    "right" : "public getSize() : int",
    "info" : "MethodDeclaration[29004-29392]:MethodDeclaration[29004-29392]"
  }, {
    "left" : "public linearCombination(a1 double, c1 , offset1 int, a2 double, c2 , offset2 int, result , resultOffset int) : void",
    "right" : "public linearCombination(a1 double, c1 , offset1 int, a2 double, c2 , offset2 int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[29398-30407]:MethodDeclaration[29398-30407]"
  }, {
    "left" : "public linearCombination(a1 double, c1 , offset1 int, a2 double, c2 , offset2 int, a3 double, c3 , offset3 int, result , resultOffset int) : void",
    "right" : "public linearCombination(a1 double, c1 , offset1 int, a2 double, c2 , offset2 int, a3 double, c3 , offset3 int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[30413-31796]:MethodDeclaration[30413-31796]"
  }, {
    "left" : "public linearCombination(a1 double, c1 , offset1 int, a2 double, c2 , offset2 int, a3 double, c3 , offset3 int, a4 double, c4 , offset4 int, result , resultOffset int) : void",
    "right" : "public linearCombination(a1 double, c1 , offset1 int, a2 double, c2 , offset2 int, a3 double, c3 , offset3 int, a4 double, c4 , offset4 int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[31802-33491]:MethodDeclaration[31802-33491]"
  }, {
    "left" : "public add(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "right" : "public add(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[33497-34291]:MethodDeclaration[33497-34291]"
  }, {
    "left" : "public subtract(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "right" : "public subtract(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[34296-35114]:MethodDeclaration[34296-35114]"
  }, {
    "left" : "public multiply(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "right" : "public multiply(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[35120-36274]:MethodDeclaration[35120-36274]"
  }, {
    "left" : "public divide(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "right" : "public divide(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[36280-37171]:MethodDeclaration[36280-37171]"
  }, {
    "left" : "public remainder(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "right" : "public remainder(lhs , lhsOffset int, rhs , rhsOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[37177-38296]:MethodDeclaration[37177-38296]"
  }, {
    "left" : "public pow(operand , operandOffset int, p double, result , resultOffset int) : void",
    "right" : "public pow(operand , operandOffset int, p double, result , resultOffset int) : void",
    "info" : "MethodDeclaration[38302-39494]:MethodDeclaration[38302-39494]"
  }, {
    "left" : "public pow(operand , operandOffset int, n int, result , resultOffset int) : void",
    "right" : "public pow(operand , operandOffset int, n int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[39500-41368]:MethodDeclaration[39500-41368]"
  }, {
    "left" : "public pow(x , xOffset int, y , yOffset int, result , resultOffset int) : void",
    "right" : "public pow(x , xOffset int, y , yOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[41374-42238]:MethodDeclaration[41374-42238]"
  }, {
    "left" : "public rootN(operand , operandOffset int, n int, result , resultOffset int) : void",
    "right" : "public rootN(operand , operandOffset int, n int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[42244-43836]:MethodDeclaration[42244-43836]"
  }, {
    "left" : "public exp(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public exp(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[43842-44642]:MethodDeclaration[43842-44642]"
  }, {
    "left" : "public expm1(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public expm1(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[44648-45527]:MethodDeclaration[44648-45527]"
  }, {
    "left" : "public log(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public log(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[45533-46575]:MethodDeclaration[45533-46575]"
  }, {
    "left" : "public log1p(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public log1p(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[46581-47639]:MethodDeclaration[46581-47639]"
  }, {
    "left" : "public log10(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public log10(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[47645-48716]:MethodDeclaration[47645-48716]"
  }, {
    "left" : "public cos(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public cos(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[48722-49712]:MethodDeclaration[48722-49712]"
  }, {
    "left" : "public sin(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public sin(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[49718-50703]:MethodDeclaration[49718-50703]"
  }, {
    "left" : "public tan(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public tan(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[50709-52768]:MethodDeclaration[50709-52768]"
  }, {
    "left" : "public acos(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public acos(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[52774-55051]:MethodDeclaration[52774-55051]"
  }, {
    "left" : "public asin(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public asin(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[55057-57326]:MethodDeclaration[55057-57326]"
  }, {
    "left" : "public atan(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public atan(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[57332-59585]:MethodDeclaration[57332-59585]"
  }, {
    "left" : "public atan2(y , yOffset int, x , xOffset int, result , resultOffset int) : void",
    "right" : "public atan2(y , yOffset int, x , xOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[59591-61861]:MethodDeclaration[59591-61932]"
  }, {
    "left" : "public cosh(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public cosh(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[61867-62881]:MethodDeclaration[61938-62952]"
  }, {
    "left" : "public sinh(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public sinh(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[62887-63897]:MethodDeclaration[62958-63968]"
  }, {
    "left" : "public tanh(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public tanh(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[63903-65992]:MethodDeclaration[63974-66063]"
  }, {
    "left" : "public acosh(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public acosh(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[65998-68304]:MethodDeclaration[66069-68375]"
  }, {
    "left" : "public asinh(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public asinh(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[68310-70615]:MethodDeclaration[68381-70686]"
  }, {
    "left" : "public atanh(operand , operandOffset int, result , resultOffset int) : void",
    "right" : "public atanh(operand , operandOffset int, result , resultOffset int) : void",
    "info" : "MethodDeclaration[70621-72901]:MethodDeclaration[70692-72972]"
  }, {
    "left" : "public compose(operand , operandOffset int, f , result , resultOffset int) : void",
    "right" : "public compose(operand , operandOffset int, f , result , resultOffset int) : void",
    "info" : "MethodDeclaration[72907-74154]:MethodDeclaration[72978-74225]"
  }, {
    "left" : "public taylor(ds , dsOffset int, ) : double",
    "right" : "public taylor(ds , dsOffset int, ) : double",
    "info" : "MethodDeclaration[74160-75061]:MethodDeclaration[74231-75132]"
  }, {
    "left" : "public checkCompatibility(compiler ) : void",
    "right" : "public checkCompatibility(compiler ) : void",
    "info" : "MethodDeclaration[75067-75654]:MethodDeclaration[75138-75725]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7607-7614]:Modifier[7607-7614]"
  }, {
    "left" : "DSCompiler",
    "right" : "DSCompiler",
    "info" : "SimpleName[7615-7625]:SimpleName[7615-7625]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[7626-7646]:SingleVariableDeclaration[7626-7646]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[7648-7663]:SingleVariableDeclaration[7648-7663]"
  }, {
    "left" : "final DSCompiler valueCompiler",
    "right" : "final DSCompiler valueCompiler",
    "info" : "SingleVariableDeclaration[7688-7718]:SingleVariableDeclaration[7688-7718]"
  }, {
    "left" : "final DSCompiler derivativeCompiler",
    "right" : "final DSCompiler derivativeCompiler",
    "info" : "SingleVariableDeclaration[7720-7755]:SingleVariableDeclaration[7720-7755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7757-8720]:Block[7757-8720]"
  }, {
    "left" : "this.parameters = parameters;",
    "right" : "this.parameters = parameters;",
    "info" : "ExpressionStatement[7768-7797]:ExpressionStatement[7768-7797]"
  }, {
    "left" : "this.order      = order;",
    "right" : "this.order      = order;",
    "info" : "ExpressionStatement[7806-7830]:ExpressionStatement[7806-7830]"
  }, {
    "left" : "this.sizes      = compileSizes(parameters, order, valueCompiler);",
    "right" : "this.sizes      = compileSizes(parameters, order, valueCompiler);",
    "info" : "ExpressionStatement[7839-7904]:ExpressionStatement[7839-7904]"
  }, {
    "left" : "this.derivativesIndirection =\n                compileDerivativesIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler);",
    "right" : "this.derivativesIndirection =\n                compileDerivativesIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler);",
    "info" : "ExpressionStatement[7913-8089]:ExpressionStatement[7913-8089]"
  }, {
    "left" : "this.lowerIndirection =\n                compileLowerIndirection(parameters, order,\n                                        valueCompiler, derivativeCompiler);",
    "right" : "this.lowerIndirection =\n                compileLowerIndirection(parameters, order,\n                                        valueCompiler, derivativeCompiler);",
    "info" : "ExpressionStatement[8098-8256]:ExpressionStatement[8098-8256]"
  }, {
    "left" : "this.multIndirection =\n                compileMultiplicationIndirection(parameters, order,\n                                                 valueCompiler, derivativeCompiler, lowerIndirection);",
    "right" : "this.multIndirection =\n                compileMultiplicationIndirection(parameters, order,\n                                                 valueCompiler, derivativeCompiler, lowerIndirection);",
    "info" : "ExpressionStatement[8265-8458]:ExpressionStatement[8265-8458]"
  }, {
    "left" : "this.compIndirection =\n                compileCompositionIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler,\n                                              sizes, derivativesIndirection);",
    "right" : "this.compIndirection =\n                compileCompositionIndirection(parameters, order,\n                                              valueCompiler, derivativeCompiler,\n                                              sizes, derivativesIndirection);",
    "info" : "ExpressionStatement[8467-8713]:ExpressionStatement[8467-8713]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8920-8926]:Modifier[8920-8926]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8927-8933]:Modifier[8927-8933]"
  }, {
    "left" : "DSCompiler",
    "right" : "DSCompiler",
    "info" : "SimpleType[8934-8944]:SimpleType[8934-8944]"
  }, {
    "left" : "getCompiler",
    "right" : "getCompiler",
    "info" : "SimpleName[8945-8956]:SimpleName[8945-8956]"
  }, {
    "left" : "int parameters",
    "right" : "int parameters",
    "info" : "SingleVariableDeclaration[8957-8971]:SingleVariableDeclaration[8957-8971]"
  }, {
    "left" : "int order",
    "right" : "int order",
    "info" : "SingleVariableDeclaration[8973-8982]:SingleVariableDeclaration[8973-8982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8984-10712]:Block[8984-10712]"
  }, {
    "left" : "final DSCompiler[][] cache = compilers.get();",
    "right" : "final DSCompiler[][] cache = compilers.get();",
    "info" : "VariableDeclarationStatement[9031-9076]:VariableDeclarationStatement[9031-9076]"
  }, {
    "left" : "if (cache != null && cache.length > parameters && cache[parameters].length > order)",
    "right" : "if (cache != null && cache.length > parameters && cache[parameters].length > order)",
    "info" : "IfStatement[9085-9352]:IfStatement[9085-9352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9169-9352]:Block[9169-9352]"
  }, {
    "left" : "if (cache[parameters][order] != null)",
    "right" : "if (cache[parameters][order] != null)",
    "info" : "IfStatement[9183-9342]:IfStatement[9183-9342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9221-9342]:Block[9221-9342]"
  }, {
    "left" : "return cache[parameters][order];",
    "right" : "return cache[parameters][order];",
    "info" : "ReturnStatement[9296-9328]:ReturnStatement[9296-9328]"
  }, {
    "left" : "final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);",
    "right" : "final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);",
    "info" : "VariableDeclarationStatement[9406-9491]:VariableDeclarationStatement[9406-9491]"
  }, {
    "left" : "final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);",
    "right" : "final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);",
    "info" : "VariableDeclarationStatement[9500-9587]:VariableDeclarationStatement[9500-9587]"
  }, {
    "left" : "final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];",
    "right" : "final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];",
    "info" : "VariableDeclarationStatement[9596-9676]:VariableDeclarationStatement[9596-9676]"
  }, {
    "left" : "if (cache != null)",
    "right" : "if (cache != null)",
    "info" : "IfStatement[9686-9917]:IfStatement[9686-9917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9705-9917]:Block[9705-9917]"
  }, {
    "left" : "for (int i = 0; i < cache.length; ++i)",
    "right" : "for (int i = 0; i < cache.length; ++i)",
    "info" : "ForStatement[9773-9907]:ForStatement[9773-9907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9812-9907]:Block[9812-9907]"
  }, {
    "left" : "System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);",
    "right" : "System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);",
    "info" : "ExpressionStatement[9830-9893]:ExpressionStatement[9830-9893]"
  }, {
    "left" : "for (int diag = 0; diag <= parameters + order; ++diag)",
    "right" : "for (int diag = 0; diag <= parameters + order; ++diag)",
    "info" : "ForStatement[9984-10554]:ForStatement[9984-10554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10039-10554]:Block[10039-10554]"
  }, {
    "left" : "for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o)",
    "right" : "for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o)",
    "info" : "ForStatement[10053-10544]:ForStatement[10053-10544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10139-10544]:Block[10139-10544]"
  }, {
    "left" : "final int p = diag - o;",
    "right" : "final int p = diag - o;",
    "info" : "VariableDeclarationStatement[10157-10180]:VariableDeclarationStatement[10157-10180]"
  }, {
    "left" : "if (newCache[p][o] == null)",
    "right" : "if (newCache[p][o] == null)",
    "info" : "IfStatement[10197-10530]:IfStatement[10197-10530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10225-10530]:Block[10225-10530]"
  }, {
    "left" : "final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];",
    "right" : "final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];",
    "info" : "VariableDeclarationStatement[10247-10322]:VariableDeclarationStatement[10247-10322]"
  }, {
    "left" : "final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];",
    "right" : "final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];",
    "info" : "VariableDeclarationStatement[10343-10418]:VariableDeclarationStatement[10343-10418]"
  }, {
    "left" : "newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);",
    "right" : "newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);",
    "info" : "ExpressionStatement[10439-10512]:ExpressionStatement[10439-10512]"
  }, {
    "left" : "compilers.compareAndSet(cache, newCache);",
    "right" : "compilers.compareAndSet(cache, newCache);",
    "info" : "ExpressionStatement[10619-10660]:ExpressionStatement[10619-10660]"
  }, {
    "left" : "return newCache[parameters][order];",
    "right" : "return newCache[parameters][order];",
    "info" : "ReturnStatement[10670-10705]:ReturnStatement[10670-10705]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10930-10937]:Modifier[10930-10937]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10938-10944]:Modifier[10938-10944]"
  }, {
    "left" : "int[][]",
    "right" : "int[][]",
    "info" : "ArrayType[10945-10952]:ArrayType[10945-10952]"
  }, {
    "left" : "compileSizes",
    "right" : "compileSizes",
    "info" : "SimpleName[10953-10965]:SimpleName[10953-10965]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[10966-10986]:SingleVariableDeclaration[10966-10986]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[10988-11003]:SingleVariableDeclaration[10988-11003]"
  }, {
    "left" : "final DSCompiler valueCompiler",
    "right" : "final DSCompiler valueCompiler",
    "info" : "SingleVariableDeclaration[11045-11075]:SingleVariableDeclaration[11045-11075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11077-11541]:Block[11077-11541]"
  }, {
    "left" : "final int[][] sizes = new int[parameters + 1][order + 1];",
    "right" : "final int[][] sizes = new int[parameters + 1][order + 1];",
    "info" : "VariableDeclarationStatement[11088-11145]:VariableDeclarationStatement[11088-11145]"
  }, {
    "left" : "if (parameters == 0)",
    "right" : "if (parameters == 0)",
    "info" : "IfStatement[11154-11511]:IfStatement[11154-11511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11175-11224]:Block[11175-11224]"
  }, {
    "left" : "Arrays.fill(sizes[0], 1);",
    "right" : "Arrays.fill(sizes[0], 1);",
    "info" : "ExpressionStatement[11189-11214]:ExpressionStatement[11189-11214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11230-11511]:Block[11230-11511]"
  }, {
    "left" : "System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);",
    "right" : "System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);",
    "info" : "ExpressionStatement[11244-11307]:ExpressionStatement[11244-11307]"
  }, {
    "left" : "sizes[parameters][0] = 1;",
    "right" : "sizes[parameters][0] = 1;",
    "info" : "ExpressionStatement[11320-11345]:ExpressionStatement[11320-11345]"
  }, {
    "left" : "for (int i = 0; i < order; ++i)",
    "right" : "for (int i = 0; i < order; ++i)",
    "info" : "ForStatement[11358-11501]:ForStatement[11358-11501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11390-11501]:Block[11390-11501]"
  }, {
    "left" : "sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];",
    "right" : "sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];",
    "info" : "ExpressionStatement[11408-11487]:ExpressionStatement[11408-11487]"
  }, {
    "left" : "return sizes;",
    "right" : "return sizes;",
    "info" : "ReturnStatement[11521-11534]:ReturnStatement[11521-11534]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11861-11868]:Modifier[11861-11868]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11869-11875]:Modifier[11869-11875]"
  }, {
    "left" : "int[][]",
    "right" : "int[][]",
    "info" : "ArrayType[11876-11883]:ArrayType[11876-11883]"
  }, {
    "left" : "compileDerivativesIndirection",
    "right" : "compileDerivativesIndirection",
    "info" : "SimpleName[11884-11913]:SimpleName[11884-11913]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[11914-11934]:SingleVariableDeclaration[11914-11934]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[11936-11951]:SingleVariableDeclaration[11936-11951]"
  }, {
    "left" : "final DSCompiler valueCompiler",
    "right" : "final DSCompiler valueCompiler",
    "info" : "SingleVariableDeclaration[12007-12037]:SingleVariableDeclaration[12007-12037]"
  }, {
    "left" : "final DSCompiler derivativeCompiler",
    "right" : "final DSCompiler derivativeCompiler",
    "info" : "SingleVariableDeclaration[12093-12128]:SingleVariableDeclaration[12093-12128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12130-13322]:Block[12130-13322]"
  }, {
    "left" : "if (parameters == 0 || order == 0)",
    "right" : "if (parameters == 0 || order == 0)",
    "info" : "IfStatement[12141-12230]:IfStatement[12141-12230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12176-12230]:Block[12176-12230]"
  }, {
    "left" : "return new int[1][parameters];",
    "right" : "return new int[1][parameters];",
    "info" : "ReturnStatement[12190-12220]:ReturnStatement[12190-12220]"
  }, {
    "left" : "final int vSize = valueCompiler.derivativesIndirection.length;",
    "right" : "final int vSize = valueCompiler.derivativesIndirection.length;",
    "info" : "VariableDeclarationStatement[12240-12302]:VariableDeclarationStatement[12240-12302]"
  }, {
    "left" : "final int dSize = derivativeCompiler.derivativesIndirection.length;",
    "right" : "final int dSize = derivativeCompiler.derivativesIndirection.length;",
    "info" : "VariableDeclarationStatement[12311-12378]:VariableDeclarationStatement[12311-12378]"
  }, {
    "left" : "final int[][] derivativesIndirection = new int[vSize + dSize][parameters];",
    "right" : "final int[][] derivativesIndirection = new int[vSize + dSize][parameters];",
    "info" : "VariableDeclarationStatement[12387-12461]:VariableDeclarationStatement[12387-12461]"
  }, {
    "left" : "for (int i = 0; i < vSize; ++i)",
    "right" : "for (int i = 0; i < vSize; ++i)",
    "info" : "ForStatement[12520-12812]:ForStatement[12520-12812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12552-12812]:Block[12552-12812]"
  }, {
    "left" : "System.arraycopy(valueCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[i], 0,\n                             parameters - 1);",
    "right" : "System.arraycopy(valueCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[i], 0,\n                             parameters - 1);",
    "info" : "ExpressionStatement[12637-12802]:ExpressionStatement[12637-12802]"
  }, {
    "left" : "for (int i = 0; i < dSize; ++i)",
    "right" : "for (int i = 0; i < dSize; ++i)",
    "info" : "ForStatement[12876-13275]:ForStatement[12876-13275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12908-13275]:Block[12908-13275]"
  }, {
    "left" : "System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[vSize + i], 0,\n                             parameters);",
    "right" : "System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,\n                             derivativesIndirection[vSize + i], 0,\n                             parameters);",
    "info" : "ExpressionStatement[12955-13129]:ExpressionStatement[12955-13129]"
  }, {
    "left" : "derivativesIndirection[vSize + i][parameters - 1]++;",
    "right" : "derivativesIndirection[vSize + i][parameters - 1]++;",
    "info" : "ExpressionStatement[13212-13264]:ExpressionStatement[13212-13264]"
  }, {
    "left" : "return derivativesIndirection;",
    "right" : "return derivativesIndirection;",
    "info" : "ReturnStatement[13285-13315]:ReturnStatement[13285-13315]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13797-13804]:Modifier[13797-13804]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13805-13811]:Modifier[13805-13811]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[13812-13817]:ArrayType[13812-13817]"
  }, {
    "left" : "compileLowerIndirection",
    "right" : "compileLowerIndirection",
    "info" : "SimpleName[13818-13841]:SimpleName[13818-13841]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[13842-13862]:SingleVariableDeclaration[13842-13862]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[13864-13879]:SingleVariableDeclaration[13864-13879]"
  }, {
    "left" : "final DSCompiler valueCompiler",
    "right" : "final DSCompiler valueCompiler",
    "info" : "SingleVariableDeclaration[13927-13957]:SingleVariableDeclaration[13927-13957]"
  }, {
    "left" : "final DSCompiler derivativeCompiler",
    "right" : "final DSCompiler derivativeCompiler",
    "info" : "SingleVariableDeclaration[14005-14040]:SingleVariableDeclaration[14005-14040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14042-14700]:Block[14042-14700]"
  }, {
    "left" : "if (parameters == 0 || order <= 1)",
    "right" : "if (parameters == 0 || order <= 1)",
    "info" : "IfStatement[14053-14135]:IfStatement[14053-14135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14088-14135]:Block[14088-14135]"
  }, {
    "left" : "return new int[] { 0 };",
    "right" : "return new int[] { 0 };",
    "info" : "ReturnStatement[14102-14125]:ReturnStatement[14102-14125]"
  }, {
    "left" : "final int vSize = valueCompiler.lowerIndirection.length;",
    "right" : "final int vSize = valueCompiler.lowerIndirection.length;",
    "info" : "VariableDeclarationStatement[14221-14277]:VariableDeclarationStatement[14221-14277]"
  }, {
    "left" : "final int dSize = derivativeCompiler.lowerIndirection.length;",
    "right" : "final int dSize = derivativeCompiler.lowerIndirection.length;",
    "info" : "VariableDeclarationStatement[14286-14347]:VariableDeclarationStatement[14286-14347]"
  }, {
    "left" : "final int[] lowerIndirection = new int[vSize + dSize];",
    "right" : "final int[] lowerIndirection = new int[vSize + dSize];",
    "info" : "VariableDeclarationStatement[14356-14410]:VariableDeclarationStatement[14356-14410]"
  }, {
    "left" : "System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",
    "right" : "System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",
    "info" : "ExpressionStatement[14419-14499]:ExpressionStatement[14419-14499]"
  }, {
    "left" : "for (int i = 0; i < dSize; ++i)",
    "right" : "for (int i = 0; i < dSize; ++i)",
    "info" : "ForStatement[14508-14659]:ForStatement[14508-14659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14540-14659]:Block[14540-14659]"
  }, {
    "left" : "lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];",
    "right" : "lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];",
    "info" : "ExpressionStatement[14554-14649]:ExpressionStatement[14554-14649]"
  }, {
    "left" : "return lowerIndirection;",
    "right" : "return lowerIndirection;",
    "info" : "ReturnStatement[14669-14693]:ReturnStatement[14669-14693]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15374-15381]:Modifier[15374-15381]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15382-15388]:Modifier[15382-15388]"
  }, {
    "left" : "int[][][]",
    "right" : "int[][][]",
    "info" : "ArrayType[15389-15398]:ArrayType[15389-15398]"
  }, {
    "left" : "compileMultiplicationIndirection",
    "right" : "compileMultiplicationIndirection",
    "info" : "SimpleName[15399-15431]:SimpleName[15399-15431]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[15432-15452]:SingleVariableDeclaration[15432-15452]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[15454-15469]:SingleVariableDeclaration[15454-15469]"
  }, {
    "left" : "final DSCompiler valueCompiler",
    "right" : "final DSCompiler valueCompiler",
    "info" : "SingleVariableDeclaration[15530-15560]:SingleVariableDeclaration[15530-15560]"
  }, {
    "left" : "final DSCompiler derivativeCompiler",
    "right" : "final DSCompiler derivativeCompiler",
    "info" : "SingleVariableDeclaration[15621-15656]:SingleVariableDeclaration[15621-15656]"
  }, {
    "left" : "final int[] lowerIndirection",
    "right" : "final int[] lowerIndirection",
    "info" : "SingleVariableDeclaration[15717-15745]:SingleVariableDeclaration[15717-15745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15747-17627]:Block[15747-17627]"
  }, {
    "left" : "if ((parameters == 0) || (order == 0))",
    "right" : "if ((parameters == 0) || (order == 0))",
    "info" : "IfStatement[15758-15862]:IfStatement[15758-15862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15797-15862]:Block[15797-15862]"
  }, {
    "left" : "return new int[][][] { { { 1, 0, 0 } } };",
    "right" : "return new int[][][] { { { 1, 0, 0 } } };",
    "info" : "ReturnStatement[15811-15852]:ReturnStatement[15811-15852]"
  }, {
    "left" : "final int vSize = valueCompiler.multIndirection.length;",
    "right" : "final int vSize = valueCompiler.multIndirection.length;",
    "info" : "VariableDeclarationStatement[15948-16003]:VariableDeclarationStatement[15948-16003]"
  }, {
    "left" : "final int dSize = derivativeCompiler.multIndirection.length;",
    "right" : "final int dSize = derivativeCompiler.multIndirection.length;",
    "info" : "VariableDeclarationStatement[16012-16072]:VariableDeclarationStatement[16012-16072]"
  }, {
    "left" : "final int[][][] multIndirection = new int[vSize + dSize][][];",
    "right" : "final int[][][] multIndirection = new int[vSize + dSize][][];",
    "info" : "VariableDeclarationStatement[16081-16142]:VariableDeclarationStatement[16081-16142]"
  }, {
    "left" : "System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);",
    "right" : "System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);",
    "info" : "ExpressionStatement[16152-16230]:ExpressionStatement[16152-16230]"
  }, {
    "left" : "for (int i = 0; i < dSize; ++i)",
    "right" : "for (int i = 0; i < dSize; ++i)",
    "info" : "ForStatement[16240-17587]:ForStatement[16240-17587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16272-17587]:Block[16272-17587]"
  }, {
    "left" : "final int[][] dRow = derivativeCompiler.multIndirection[i];",
    "right" : "final int[][] dRow = derivativeCompiler.multIndirection[i];",
    "info" : "VariableDeclarationStatement[16286-16345]:VariableDeclarationStatement[16286-16345]"
  }, {
    "left" : "List<int[]> row = new ArrayList<int[]>();",
    "right" : "List<int[]> row = new ArrayList<int[]>();",
    "info" : "VariableDeclarationStatement[16358-16399]:VariableDeclarationStatement[16358-16399]"
  }, {
    "left" : "for (int j = 0; j < dRow.length; ++j)",
    "right" : "for (int j = 0; j < dRow.length; ++j)",
    "info" : "ForStatement[16412-16667]:ForStatement[16412-16667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16450-16667]:Block[16450-16667]"
  }, {
    "left" : "row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });",
    "right" : "row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });",
    "info" : "ExpressionStatement[16468-16552]:ExpressionStatement[16468-16552]"
  }, {
    "left" : "row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });",
    "right" : "row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });",
    "info" : "ExpressionStatement[16569-16653]:ExpressionStatement[16569-16653]"
  }, {
    "left" : "final List<int[]> combined = new ArrayList<int[]>(row.size());",
    "right" : "final List<int[]> combined = new ArrayList<int[]>(row.size());",
    "info" : "VariableDeclarationStatement[16741-16803]:VariableDeclarationStatement[16741-16803]"
  }, {
    "left" : "for (int j = 0; j < row.size(); ++j)",
    "right" : "for (int j = 0; j < row.size(); ++j)",
    "info" : "ForStatement[16816-17488]:ForStatement[16816-17488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16853-17488]:Block[16853-17488]"
  }, {
    "left" : "final int[] termJ = row.get(j);",
    "right" : "final int[] termJ = row.get(j);",
    "info" : "VariableDeclarationStatement[16871-16902]:VariableDeclarationStatement[16871-16902]"
  }, {
    "left" : "if (termJ[0] > 0)",
    "right" : "if (termJ[0] > 0)",
    "info" : "IfStatement[16919-17474]:IfStatement[16919-17474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16937-17474]:Block[16937-17474]"
  }, {
    "left" : "for (int k = j + 1; k < row.size(); ++k)",
    "right" : "for (int k = j + 1; k < row.size(); ++k)",
    "info" : "ForStatement[16959-17415]:ForStatement[16959-17415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17000-17415]:Block[17000-17415]"
  }, {
    "left" : "final int[] termK = row.get(k);",
    "right" : "final int[] termK = row.get(k);",
    "info" : "VariableDeclarationStatement[17026-17057]:VariableDeclarationStatement[17026-17057]"
  }, {
    "left" : "if (termJ[1] == termK[1] && termJ[2] == termK[2])",
    "right" : "if (termJ[1] == termK[1] && termJ[2] == termK[2])",
    "info" : "IfStatement[17082-17393]:IfStatement[17082-17393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17132-17393]:Block[17132-17393]"
  }, {
    "left" : "termJ[0] += termK[0];",
    "right" : "termJ[0] += termK[0];",
    "info" : "ExpressionStatement[17217-17238]:ExpressionStatement[17217-17238]"
  }, {
    "left" : "termK[0] = 0;",
    "right" : "termK[0] = 0;",
    "info" : "ExpressionStatement[17354-17367]:ExpressionStatement[17354-17367]"
  }, {
    "left" : "combined.add(termJ);",
    "right" : "combined.add(termJ);",
    "info" : "ExpressionStatement[17436-17456]:ExpressionStatement[17436-17456]"
  }, {
    "left" : "multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);",
    "right" : "multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);",
    "info" : "ExpressionStatement[17502-17576]:ExpressionStatement[17502-17576]"
  }, {
    "left" : "return multIndirection;",
    "right" : "return multIndirection;",
    "info" : "ReturnStatement[17597-17620]:ReturnStatement[17597-17620]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18326-18333]:Modifier[18326-18333]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18334-18340]:Modifier[18334-18340]"
  }, {
    "left" : "int[][][]",
    "right" : "int[][][]",
    "info" : "ArrayType[18341-18350]:ArrayType[18341-18350]"
  }, {
    "left" : "compileCompositionIndirection",
    "right" : "compileCompositionIndirection",
    "info" : "SimpleName[18351-18380]:SimpleName[18351-18380]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[18381-18401]:SingleVariableDeclaration[18381-18401]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[18403-18418]:SingleVariableDeclaration[18403-18418]"
  }, {
    "left" : "final DSCompiler valueCompiler",
    "right" : "final DSCompiler valueCompiler",
    "info" : "SingleVariableDeclaration[18476-18506]:SingleVariableDeclaration[18476-18506]"
  }, {
    "left" : "final DSCompiler derivativeCompiler",
    "right" : "final DSCompiler derivativeCompiler",
    "info" : "SingleVariableDeclaration[18564-18599]:SingleVariableDeclaration[18564-18599]"
  }, {
    "left" : "final int[][] sizes",
    "right" : "final int[][] sizes",
    "info" : "SingleVariableDeclaration[18657-18676]:SingleVariableDeclaration[18657-18676]"
  }, {
    "left" : "final int[][] derivativesIndirection",
    "right" : "final int[][] derivativesIndirection",
    "info" : "SingleVariableDeclaration[18734-18770]:SingleVariableDeclaration[18734-18770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18772-23246]:Block[18772-23246]"
  }, {
    "left" : "if ((parameters == 0) || (order == 0))",
    "right" : "if ((parameters == 0) || (order == 0))",
    "info" : "IfStatement[18783-18884]:IfStatement[18783-18884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18822-18884]:Block[18822-18884]"
  }, {
    "left" : "return new int[][][] { { { 1, 0 } } };",
    "right" : "return new int[][][] { { { 1, 0 } } };",
    "info" : "ReturnStatement[18836-18874]:ReturnStatement[18836-18874]"
  }, {
    "left" : "final int vSize = valueCompiler.compIndirection.length;",
    "right" : "final int vSize = valueCompiler.compIndirection.length;",
    "info" : "VariableDeclarationStatement[18894-18949]:VariableDeclarationStatement[18894-18949]"
  }, {
    "left" : "final int dSize = derivativeCompiler.compIndirection.length;",
    "right" : "final int dSize = derivativeCompiler.compIndirection.length;",
    "info" : "VariableDeclarationStatement[18958-19018]:VariableDeclarationStatement[18958-19018]"
  }, {
    "left" : "final int[][][] compIndirection = new int[vSize + dSize][][];",
    "right" : "final int[][][] compIndirection = new int[vSize + dSize][][];",
    "info" : "VariableDeclarationStatement[19027-19088]:VariableDeclarationStatement[19027-19088]"
  }, {
    "left" : "System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);",
    "right" : "System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);",
    "info" : "ExpressionStatement[19171-19249]:ExpressionStatement[19171-19249]"
  }, {
    "left" : "for (int i = 0; i < dSize; ++i)",
    "right" : "for (int i = 0; i < dSize; ++i)",
    "info" : "ForStatement[19514-23206]:ForStatement[19514-23206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19546-23206]:Block[19546-23206]"
  }, {
    "left" : "List<int[]> row = new ArrayList<int[]>();",
    "right" : "List<int[]> row = new ArrayList<int[]>();",
    "info" : "VariableDeclarationStatement[19560-19601]:VariableDeclarationStatement[19560-19601]"
  }, {
    "left" : "for (int[] term : derivativeCompiler.compIndirection[i])",
    "right" : "for (int[] term : derivativeCompiler.compIndirection[i])",
    "info" : "EnhancedForStatement[19614-22092]:EnhancedForStatement[19614-22092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19671-22092]:Block[19671-22092]"
  }, {
    "left" : "int[] derivedTermF = new int[term.length + 1];",
    "right" : "int[] derivedTermF = new int[term.length + 1];",
    "info" : "VariableDeclarationStatement[19862-19908]:VariableDeclarationStatement[19862-19908]"
  }, {
    "left" : "derivedTermF[0] = term[0];",
    "right" : "derivedTermF[0] = term[0];",
    "info" : "ExpressionStatement[19925-19951]:ExpressionStatement[19925-19951]"
  }, {
    "left" : "derivedTermF[1] = term[1] + 1;",
    "right" : "derivedTermF[1] = term[1] + 1;",
    "info" : "ExpressionStatement[19977-20007]:ExpressionStatement[19977-20007]"
  }, {
    "left" : "int[] orders = new int[parameters];",
    "right" : "int[] orders = new int[parameters];",
    "info" : "VariableDeclarationStatement[20035-20070]:VariableDeclarationStatement[20035-20070]"
  }, {
    "left" : "orders[parameters - 1] = 1;",
    "right" : "orders[parameters - 1] = 1;",
    "info" : "ExpressionStatement[20087-20114]:ExpressionStatement[20087-20114]"
  }, {
    "left" : "derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);",
    "right" : "derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);",
    "info" : "ExpressionStatement[20131-20219]:ExpressionStatement[20131-20219]"
  }, {
    "left" : "for (int j = 2; j < term.length; ++j)",
    "right" : "for (int j = 2; j < term.length; ++j)",
    "info" : "ForStatement[20244-20698]:ForStatement[20244-20698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20282-20698]:Block[20282-20698]"
  }, {
    "left" : "derivedTermF[j] = convertIndex(term[j], parameters,\n                                                   derivativeCompiler.derivativesIndirection,\n                                                   parameters, order, sizes);",
    "right" : "derivedTermF[j] = convertIndex(term[j], parameters,\n                                                   derivativeCompiler.derivativesIndirection,\n                                                   parameters, order, sizes);",
    "info" : "ExpressionStatement[20457-20680]:ExpressionStatement[20457-20680]"
  }, {
    "left" : "Arrays.sort(derivedTermF, 2, derivedTermF.length);",
    "right" : "Arrays.sort(derivedTermF, 2, derivedTermF.length);",
    "info" : "ExpressionStatement[20715-20765]:ExpressionStatement[20715-20765]"
  }, {
    "left" : "row.add(derivedTermF);",
    "right" : "row.add(derivedTermF);",
    "info" : "ExpressionStatement[20782-20804]:ExpressionStatement[20782-20804]"
  }, {
    "left" : "for (int l = 2; l < term.length; ++l)",
    "right" : "for (int l = 2; l < term.length; ++l)",
    "info" : "ForStatement[20864-22077]:ForStatement[20864-22077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20902-22077]:Block[20902-22077]"
  }, {
    "left" : "int[] derivedTermG = new int[term.length];",
    "right" : "int[] derivedTermG = new int[term.length];",
    "info" : "VariableDeclarationStatement[20924-20966]:VariableDeclarationStatement[20924-20966]"
  }, {
    "left" : "derivedTermG[0] = term[0];",
    "right" : "derivedTermG[0] = term[0];",
    "info" : "ExpressionStatement[20987-21013]:ExpressionStatement[20987-21013]"
  }, {
    "left" : "derivedTermG[1] = term[1];",
    "right" : "derivedTermG[1] = term[1];",
    "info" : "ExpressionStatement[21034-21060]:ExpressionStatement[21034-21060]"
  }, {
    "left" : "for (int j = 2; j < term.length; ++j)",
    "right" : "for (int j = 2; j < term.length; ++j)",
    "info" : "ForStatement[21081-21945]:ForStatement[21081-21945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21119-21945]:Block[21119-21945]"
  }, {
    "left" : "derivedTermG[j] = convertIndex(term[j], parameters,\n                                                       derivativeCompiler.derivativesIndirection,\n                                                       parameters, order, sizes);",
    "right" : "derivedTermG[j] = convertIndex(term[j], parameters,\n                                                       derivativeCompiler.derivativesIndirection,\n                                                       parameters, order, sizes);",
    "info" : "ExpressionStatement[21306-21537]:ExpressionStatement[21306-21537]"
  }, {
    "left" : "if (j == l)",
    "right" : "if (j == l)",
    "info" : "IfStatement[21562-21923]:IfStatement[21562-21923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21574-21923]:Block[21574-21923]"
  }, {
    "left" : "System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",
    "right" : "System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",
    "info" : "ExpressionStatement[21652-21736]:ExpressionStatement[21652-21736]"
  }, {
    "left" : "orders[parameters - 1]++;",
    "right" : "orders[parameters - 1]++;",
    "info" : "ExpressionStatement[21765-21790]:ExpressionStatement[21765-21790]"
  }, {
    "left" : "derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",
    "right" : "derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",
    "info" : "ExpressionStatement[21819-21897]:ExpressionStatement[21819-21897]"
  }, {
    "left" : "Arrays.sort(derivedTermG, 2, derivedTermG.length);",
    "right" : "Arrays.sort(derivedTermG, 2, derivedTermG.length);",
    "info" : "ExpressionStatement[21966-22016]:ExpressionStatement[21966-22016]"
  }, {
    "left" : "row.add(derivedTermG);",
    "right" : "row.add(derivedTermG);",
    "info" : "ExpressionStatement[22037-22059]:ExpressionStatement[22037-22059]"
  }, {
    "left" : "final List<int[]> combined = new ArrayList<int[]>(row.size());",
    "right" : "final List<int[]> combined = new ArrayList<int[]>(row.size());",
    "info" : "VariableDeclarationStatement[22166-22228]:VariableDeclarationStatement[22166-22228]"
  }, {
    "left" : "for (int j = 0; j < row.size(); ++j)",
    "right" : "for (int j = 0; j < row.size(); ++j)",
    "info" : "ForStatement[22241-23107]:ForStatement[22241-23107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22278-23107]:Block[22278-23107]"
  }, {
    "left" : "final int[] termJ = row.get(j);",
    "right" : "final int[] termJ = row.get(j);",
    "info" : "VariableDeclarationStatement[22296-22327]:VariableDeclarationStatement[22296-22327]"
  }, {
    "left" : "if (termJ[0] > 0)",
    "right" : "if (termJ[0] > 0)",
    "info" : "IfStatement[22344-23093]:IfStatement[22344-23093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22362-23093]:Block[22362-23093]"
  }, {
    "left" : "for (int k = j + 1; k < row.size(); ++k)",
    "right" : "for (int k = j + 1; k < row.size(); ++k)",
    "info" : "ForStatement[22384-23034]:ForStatement[22384-23034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22425-23034]:Block[22425-23034]"
  }, {
    "left" : "final int[] termK = row.get(k);",
    "right" : "final int[] termK = row.get(k);",
    "info" : "VariableDeclarationStatement[22451-22482]:VariableDeclarationStatement[22451-22482]"
  }, {
    "left" : "boolean equals = termJ.length == termK.length;",
    "right" : "boolean equals = termJ.length == termK.length;",
    "info" : "VariableDeclarationStatement[22507-22553]:VariableDeclarationStatement[22507-22553]"
  }, {
    "left" : "for (int l = 1; equals && l < termJ.length; ++l)",
    "right" : "for (int l = 1; equals && l < termJ.length; ++l)",
    "info" : "ForStatement[22578-22714]:ForStatement[22578-22714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22627-22714]:Block[22627-22714]"
  }, {
    "left" : "equals &= termJ[l] == termK[l];",
    "right" : "equals &= termJ[l] == termK[l];",
    "info" : "ExpressionStatement[22657-22688]:ExpressionStatement[22657-22688]"
  }, {
    "left" : "if (equals)",
    "right" : "if (equals)",
    "info" : "IfStatement[22739-23012]:IfStatement[22739-23012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22751-23012]:Block[22751-23012]"
  }, {
    "left" : "termJ[0] += termK[0];",
    "right" : "termJ[0] += termK[0];",
    "info" : "ExpressionStatement[22836-22857]:ExpressionStatement[22836-22857]"
  }, {
    "left" : "termK[0] = 0;",
    "right" : "termK[0] = 0;",
    "info" : "ExpressionStatement[22973-22986]:ExpressionStatement[22973-22986]"
  }, {
    "left" : "combined.add(termJ);",
    "right" : "combined.add(termJ);",
    "info" : "ExpressionStatement[23055-23075]:ExpressionStatement[23055-23075]"
  }, {
    "left" : "compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);",
    "right" : "compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);",
    "info" : "ExpressionStatement[23121-23195]:ExpressionStatement[23121-23195]"
  }, {
    "left" : "return compIndirection;",
    "right" : "return compIndirection;",
    "info" : "ReturnStatement[23216-23239]:ReturnStatement[23216-23239]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24972-24978]:Modifier[24972-24978]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[24979-24982]:PrimitiveType[24979-24982]"
  }, {
    "left" : "getPartialDerivativeIndex",
    "right" : "getPartialDerivativeIndex",
    "info" : "SimpleName[24983-25008]:SimpleName[24983-25008]"
  }, {
    "left" : "final int ... orders",
    "right" : "final int ... orders",
    "info" : "SingleVariableDeclaration[25009-25029]:SingleVariableDeclaration[25009-25029]"
  }, {
    "left" : "DimensionMismatchException",
    "right" : "DimensionMismatchException",
    "info" : "SimpleType[25050-25076]:SimpleType[25050-25076]"
  }, {
    "left" : "NumberIsTooLargeException",
    "right" : "NumberIsTooLargeException",
    "info" : "SimpleType[25078-25103]:SimpleType[25078-25103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25104-25362]:Block[25104-25362]"
  }, {
    "left" : "if (orders.length != getFreeParameters())",
    "right" : "if (orders.length != getFreeParameters())",
    "info" : "IfStatement[25139-25278]:IfStatement[25139-25278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25181-25278]:Block[25181-25278]"
  }, {
    "left" : "throw new DimensionMismatchException(orders.length, getFreeParameters());",
    "right" : "throw new DimensionMismatchException(orders.length, getFreeParameters());",
    "info" : "ThrowStatement[25195-25268]:ThrowStatement[25195-25268]"
  }, {
    "left" : "return getPartialDerivativeIndex(parameters, order, sizes, orders);",
    "right" : "return getPartialDerivativeIndex(parameters, order, sizes, orders);",
    "info" : "ReturnStatement[25288-25355]:ReturnStatement[25288-25355]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25856-25863]:Modifier[25856-25863]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25864-25870]:Modifier[25864-25870]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[25871-25874]:PrimitiveType[25871-25874]"
  }, {
    "left" : "getPartialDerivativeIndex",
    "right" : "getPartialDerivativeIndex",
    "info" : "SimpleName[25875-25900]:SimpleName[25875-25900]"
  }, {
    "left" : "final int parameters",
    "right" : "final int parameters",
    "info" : "SingleVariableDeclaration[25901-25921]:SingleVariableDeclaration[25901-25921]"
  }, {
    "left" : "final int order",
    "right" : "final int order",
    "info" : "SingleVariableDeclaration[25923-25938]:SingleVariableDeclaration[25923-25938]"
  }, {
    "left" : "final int[][] sizes",
    "right" : "final int[][] sizes",
    "info" : "SingleVariableDeclaration[25989-26008]:SingleVariableDeclaration[25989-26008]"
  }, {
    "left" : "final int ... orders",
    "right" : "final int ... orders",
    "info" : "SingleVariableDeclaration[26010-26030]:SingleVariableDeclaration[26010-26030]"
  }, {
    "left" : "NumberIsTooLargeException",
    "right" : "NumberIsTooLargeException",
    "info" : "SimpleType[26047-26072]:SimpleType[26047-26072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26073-27063]:Block[26073-27063]"
  }, {
    "left" : "int index     = 0;",
    "right" : "int index     = 0;",
    "info" : "VariableDeclarationStatement[26249-26267]:VariableDeclarationStatement[26249-26267]"
  }, {
    "left" : "int m         = order;",
    "right" : "int m         = order;",
    "info" : "VariableDeclarationStatement[26276-26298]:VariableDeclarationStatement[26276-26298]"
  }, {
    "left" : "int ordersSum = 0;",
    "right" : "int ordersSum = 0;",
    "info" : "VariableDeclarationStatement[26307-26325]:VariableDeclarationStatement[26307-26325]"
  }, {
    "left" : "for (int i = parameters - 1; i >= 0; --i)",
    "right" : "for (int i = parameters - 1; i >= 0; --i)",
    "info" : "ForStatement[26334-27033]:ForStatement[26334-27033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26376-27033]:Block[26376-27033]"
  }, {
    "left" : "int derivativeOrder = orders[i];",
    "right" : "int derivativeOrder = orders[i];",
    "info" : "VariableDeclarationStatement[26450-26482]:VariableDeclarationStatement[26450-26482]"
  }, {
    "left" : "ordersSum += derivativeOrder;",
    "right" : "ordersSum += derivativeOrder;",
    "info" : "ExpressionStatement[26524-26553]:ExpressionStatement[26524-26553]"
  }, {
    "left" : "if (ordersSum > order)",
    "right" : "if (ordersSum > order)",
    "info" : "IfStatement[26566-26681]:IfStatement[26566-26681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26589-26681]:Block[26589-26681]"
  }, {
    "left" : "throw new NumberIsTooLargeException(ordersSum, order, true);",
    "right" : "throw new NumberIsTooLargeException(ordersSum, order, true);",
    "info" : "ThrowStatement[26607-26667]:ThrowStatement[26607-26667]"
  }, {
    "left" : "while (derivativeOrder-- > 0)",
    "right" : "while (derivativeOrder-- > 0)",
    "info" : "WhileStatement[26695-27022]:WhileStatement[26695-27022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26725-27022]:Block[26725-27022]"
  }, {
    "left" : "index += sizes[i][m--];",
    "right" : "index += sizes[i][m--];",
    "info" : "ExpressionStatement[26985-27008]:ExpressionStatement[26985-27008]"
  }, {
    "left" : "return index;",
    "right" : "return index;",
    "info" : "ReturnStatement[27043-27056]:ReturnStatement[27043-27056]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27784-27791]:Modifier[27784-27791]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27792-27798]:Modifier[27792-27798]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[27799-27802]:PrimitiveType[27799-27802]"
  }, {
    "left" : "convertIndex",
    "right" : "convertIndex",
    "info" : "SimpleName[27803-27815]:SimpleName[27803-27815]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[27816-27831]:SingleVariableDeclaration[27816-27831]"
  }, {
    "left" : "final int srcP",
    "right" : "final int srcP",
    "info" : "SingleVariableDeclaration[27869-27883]:SingleVariableDeclaration[27869-27883]"
  }, {
    "left" : "final int[][] srcDerivativesIndirection",
    "right" : "final int[][] srcDerivativesIndirection",
    "info" : "SingleVariableDeclaration[27885-27924]:SingleVariableDeclaration[27885-27924]"
  }, {
    "left" : "final int destP",
    "right" : "final int destP",
    "info" : "SingleVariableDeclaration[27962-27977]:SingleVariableDeclaration[27962-27977]"
  }, {
    "left" : "final int destO",
    "right" : "final int destO",
    "info" : "SingleVariableDeclaration[27979-27994]:SingleVariableDeclaration[27979-27994]"
  }, {
    "left" : "final int[][] destSizes",
    "right" : "final int[][] destSizes",
    "info" : "SingleVariableDeclaration[27996-28019]:SingleVariableDeclaration[27996-28019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28021-28243]:Block[28021-28243]"
  }, {
    "left" : "int[] orders = new int[destP];",
    "right" : "int[] orders = new int[destP];",
    "info" : "VariableDeclarationStatement[28031-28061]:VariableDeclarationStatement[28031-28061]"
  }, {
    "left" : "System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",
    "right" : "System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",
    "info" : "ExpressionStatement[28070-28162]:ExpressionStatement[28070-28162]"
  }, {
    "left" : "return getPartialDerivativeIndex(destP, destO, destSizes, orders);",
    "right" : "return getPartialDerivativeIndex(destP, destO, destSizes, orders);",
    "info" : "ReturnStatement[28171-28237]:ReturnStatement[28171-28237]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28594-28600]:Modifier[28594-28600]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[28601-28606]:ArrayType[28601-28606]"
  }, {
    "left" : "getPartialDerivativeOrders",
    "right" : "getPartialDerivativeOrders",
    "info" : "SimpleName[28607-28633]:SimpleName[28607-28633]"
  }, {
    "left" : "final int index",
    "right" : "final int index",
    "info" : "SingleVariableDeclaration[28634-28649]:SingleVariableDeclaration[28634-28649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28651-28704]:Block[28651-28704]"
  }, {
    "left" : "return derivativesIndirection[index];",
    "right" : "return derivativesIndirection[index];",
    "info" : "ReturnStatement[28661-28698]:ReturnStatement[28661-28698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28802-28808]:Modifier[28802-28808]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[28809-28812]:PrimitiveType[28809-28812]"
  }, {
    "left" : "getFreeParameters",
    "right" : "getFreeParameters",
    "info" : "SimpleName[28813-28830]:SimpleName[28813-28830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28833-28867]:Block[28833-28867]"
  }, {
    "left" : "return parameters;",
    "right" : "return parameters;",
    "info" : "ReturnStatement[28843-28861]:ReturnStatement[28843-28861]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28947-28953]:Modifier[28947-28953]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[28954-28957]:PrimitiveType[28954-28957]"
  }, {
    "left" : "getOrder",
    "right" : "getOrder",
    "info" : "SimpleName[28958-28966]:SimpleName[28958-28966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28969-28998]:Block[28969-28998]"
  }, {
    "left" : "return order;",
    "right" : "return order;",
    "info" : "ReturnStatement[28979-28992]:ReturnStatement[28979-28992]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29323-29329]:Modifier[29323-29329]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[29330-29333]:PrimitiveType[29330-29333]"
  }, {
    "left" : "getSize",
    "right" : "getSize",
    "info" : "SimpleName[29334-29341]:SimpleName[29334-29341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29344-29392]:Block[29344-29392]"
  }, {
    "left" : "return sizes[parameters][order];",
    "right" : "return sizes[parameters][order];",
    "info" : "ReturnStatement[29354-29386]:ReturnStatement[29354-29386]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29958-29964]:Modifier[29958-29964]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29965-29969]:PrimitiveType[29965-29969]"
  }, {
    "left" : "linearCombination",
    "right" : "linearCombination",
    "info" : "SimpleName[29970-29987]:SimpleName[29970-29987]"
  }, {
    "left" : "final double a1",
    "right" : "final double a1",
    "info" : "SingleVariableDeclaration[29988-30003]:SingleVariableDeclaration[29988-30003]"
  }, {
    "left" : "final double[] c1",
    "right" : "final double[] c1",
    "info" : "SingleVariableDeclaration[30005-30022]:SingleVariableDeclaration[30005-30022]"
  }, {
    "left" : "final int offset1",
    "right" : "final int offset1",
    "info" : "SingleVariableDeclaration[30024-30041]:SingleVariableDeclaration[30024-30041]"
  }, {
    "left" : "final double a2",
    "right" : "final double a2",
    "info" : "SingleVariableDeclaration[30077-30092]:SingleVariableDeclaration[30077-30092]"
  }, {
    "left" : "final double[] c2",
    "right" : "final double[] c2",
    "info" : "SingleVariableDeclaration[30094-30111]:SingleVariableDeclaration[30094-30111]"
  }, {
    "left" : "final int offset2",
    "right" : "final int offset2",
    "info" : "SingleVariableDeclaration[30113-30130]:SingleVariableDeclaration[30113-30130]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[30166-30187]:SingleVariableDeclaration[30166-30187]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[30189-30211]:SingleVariableDeclaration[30189-30211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30213-30407]:Block[30213-30407]"
  }, {
    "left" : "for (int i = 0; i < getSize(); ++i)",
    "right" : "for (int i = 0; i < getSize(); ++i)",
    "info" : "ForStatement[30223-30401]:ForStatement[30223-30401]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30259-30401]:Block[30259-30401]"
  }, {
    "left" : "result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);",
    "right" : "result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i], a2, c2[offset2 + i]);",
    "info" : "ExpressionStatement[30273-30391]:ExpressionStatement[30273-30391]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31139-31145]:Modifier[31139-31145]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31146-31150]:PrimitiveType[31146-31150]"
  }, {
    "left" : "linearCombination",
    "right" : "linearCombination",
    "info" : "SimpleName[31151-31168]:SimpleName[31151-31168]"
  }, {
    "left" : "final double a1",
    "right" : "final double a1",
    "info" : "SingleVariableDeclaration[31169-31184]:SingleVariableDeclaration[31169-31184]"
  }, {
    "left" : "final double[] c1",
    "right" : "final double[] c1",
    "info" : "SingleVariableDeclaration[31186-31203]:SingleVariableDeclaration[31186-31203]"
  }, {
    "left" : "final int offset1",
    "right" : "final int offset1",
    "info" : "SingleVariableDeclaration[31205-31222]:SingleVariableDeclaration[31205-31222]"
  }, {
    "left" : "final double a2",
    "right" : "final double a2",
    "info" : "SingleVariableDeclaration[31258-31273]:SingleVariableDeclaration[31258-31273]"
  }, {
    "left" : "final double[] c2",
    "right" : "final double[] c2",
    "info" : "SingleVariableDeclaration[31275-31292]:SingleVariableDeclaration[31275-31292]"
  }, {
    "left" : "final int offset2",
    "right" : "final int offset2",
    "info" : "SingleVariableDeclaration[31294-31311]:SingleVariableDeclaration[31294-31311]"
  }, {
    "left" : "final double a3",
    "right" : "final double a3",
    "info" : "SingleVariableDeclaration[31347-31362]:SingleVariableDeclaration[31347-31362]"
  }, {
    "left" : "final double[] c3",
    "right" : "final double[] c3",
    "info" : "SingleVariableDeclaration[31364-31381]:SingleVariableDeclaration[31364-31381]"
  }, {
    "left" : "final int offset3",
    "right" : "final int offset3",
    "info" : "SingleVariableDeclaration[31383-31400]:SingleVariableDeclaration[31383-31400]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[31436-31457]:SingleVariableDeclaration[31436-31457]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[31459-31481]:SingleVariableDeclaration[31459-31481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31483-31796]:Block[31483-31796]"
  }, {
    "left" : "for (int i = 0; i < getSize(); ++i)",
    "right" : "for (int i = 0; i < getSize(); ++i)",
    "info" : "ForStatement[31493-31790]:ForStatement[31493-31790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31529-31790]:Block[31529-31790]"
  }, {
    "left" : "result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i]);",
    "right" : "result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i]);",
    "info" : "ExpressionStatement[31543-31780]:ExpressionStatement[31543-31780]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32675-32681]:Modifier[32675-32681]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32682-32686]:PrimitiveType[32682-32686]"
  }, {
    "left" : "linearCombination",
    "right" : "linearCombination",
    "info" : "SimpleName[32687-32704]:SimpleName[32687-32704]"
  }, {
    "left" : "final double a1",
    "right" : "final double a1",
    "info" : "SingleVariableDeclaration[32705-32720]:SingleVariableDeclaration[32705-32720]"
  }, {
    "left" : "final double[] c1",
    "right" : "final double[] c1",
    "info" : "SingleVariableDeclaration[32722-32739]:SingleVariableDeclaration[32722-32739]"
  }, {
    "left" : "final int offset1",
    "right" : "final int offset1",
    "info" : "SingleVariableDeclaration[32741-32758]:SingleVariableDeclaration[32741-32758]"
  }, {
    "left" : "final double a2",
    "right" : "final double a2",
    "info" : "SingleVariableDeclaration[32794-32809]:SingleVariableDeclaration[32794-32809]"
  }, {
    "left" : "final double[] c2",
    "right" : "final double[] c2",
    "info" : "SingleVariableDeclaration[32811-32828]:SingleVariableDeclaration[32811-32828]"
  }, {
    "left" : "final int offset2",
    "right" : "final int offset2",
    "info" : "SingleVariableDeclaration[32830-32847]:SingleVariableDeclaration[32830-32847]"
  }, {
    "left" : "final double a3",
    "right" : "final double a3",
    "info" : "SingleVariableDeclaration[32883-32898]:SingleVariableDeclaration[32883-32898]"
  }, {
    "left" : "final double[] c3",
    "right" : "final double[] c3",
    "info" : "SingleVariableDeclaration[32900-32917]:SingleVariableDeclaration[32900-32917]"
  }, {
    "left" : "final int offset3",
    "right" : "final int offset3",
    "info" : "SingleVariableDeclaration[32919-32936]:SingleVariableDeclaration[32919-32936]"
  }, {
    "left" : "final double a4",
    "right" : "final double a4",
    "info" : "SingleVariableDeclaration[32972-32987]:SingleVariableDeclaration[32972-32987]"
  }, {
    "left" : "final double[] c4",
    "right" : "final double[] c4",
    "info" : "SingleVariableDeclaration[32989-33006]:SingleVariableDeclaration[32989-33006]"
  }, {
    "left" : "final int offset4",
    "right" : "final int offset4",
    "info" : "SingleVariableDeclaration[33008-33025]:SingleVariableDeclaration[33008-33025]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[33061-33082]:SingleVariableDeclaration[33061-33082]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[33084-33106]:SingleVariableDeclaration[33084-33106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33108-33491]:Block[33108-33491]"
  }, {
    "left" : "for (int i = 0; i < getSize(); ++i)",
    "right" : "for (int i = 0; i < getSize(); ++i)",
    "info" : "ForStatement[33118-33485]:ForStatement[33118-33485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33154-33485]:Block[33154-33485]"
  }, {
    "left" : "result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i],\n                                                 a4, c4[offset4 + i]);",
    "right" : "result[resultOffset + i] =\n                    MathArrays.linearCombination(a1, c1[offset1 + i],\n                                                 a2, c2[offset2 + i],\n                                                 a3, c3[offset3 + i],\n                                                 a4, c4[offset4 + i]);",
    "info" : "ExpressionStatement[33168-33475]:ExpressionStatement[33168-33475]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33963-33969]:Modifier[33963-33969]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33970-33974]:PrimitiveType[33970-33974]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[33975-33978]:SimpleName[33975-33978]"
  }, {
    "left" : "final double[] lhs",
    "right" : "final double[] lhs",
    "info" : "SingleVariableDeclaration[33979-33997]:SingleVariableDeclaration[33979-33997]"
  }, {
    "left" : "final int lhsOffset",
    "right" : "final int lhsOffset",
    "info" : "SingleVariableDeclaration[33999-34018]:SingleVariableDeclaration[33999-34018]"
  }, {
    "left" : "final double[] rhs",
    "right" : "final double[] rhs",
    "info" : "SingleVariableDeclaration[34040-34058]:SingleVariableDeclaration[34040-34058]"
  }, {
    "left" : "final int rhsOffset",
    "right" : "final int rhsOffset",
    "info" : "SingleVariableDeclaration[34060-34079]:SingleVariableDeclaration[34060-34079]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[34101-34122]:SingleVariableDeclaration[34101-34122]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[34124-34146]:SingleVariableDeclaration[34124-34146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34148-34291]:Block[34148-34291]"
  }, {
    "left" : "for (int i = 0; i < getSize(); ++i)",
    "right" : "for (int i = 0; i < getSize(); ++i)",
    "info" : "ForStatement[34158-34285]:ForStatement[34158-34285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34194-34285]:Block[34194-34285]"
  }, {
    "left" : "result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];",
    "right" : "result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];",
    "info" : "ExpressionStatement[34208-34275]:ExpressionStatement[34208-34275]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34771-34777]:Modifier[34771-34777]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34778-34782]:PrimitiveType[34778-34782]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[34783-34791]:SimpleName[34783-34791]"
  }, {
    "left" : "final double[] lhs",
    "right" : "final double[] lhs",
    "info" : "SingleVariableDeclaration[34792-34810]:SingleVariableDeclaration[34792-34810]"
  }, {
    "left" : "final int lhsOffset",
    "right" : "final int lhsOffset",
    "info" : "SingleVariableDeclaration[34812-34831]:SingleVariableDeclaration[34812-34831]"
  }, {
    "left" : "final double[] rhs",
    "right" : "final double[] rhs",
    "info" : "SingleVariableDeclaration[34858-34876]:SingleVariableDeclaration[34858-34876]"
  }, {
    "left" : "final int rhsOffset",
    "right" : "final int rhsOffset",
    "info" : "SingleVariableDeclaration[34878-34897]:SingleVariableDeclaration[34878-34897]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[34924-34945]:SingleVariableDeclaration[34924-34945]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[34947-34969]:SingleVariableDeclaration[34947-34969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34971-35114]:Block[34971-35114]"
  }, {
    "left" : "for (int i = 0; i < getSize(); ++i)",
    "right" : "for (int i = 0; i < getSize(); ++i)",
    "info" : "ForStatement[34981-35108]:ForStatement[34981-35108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35017-35108]:Block[35017-35108]"
  }, {
    "left" : "result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];",
    "right" : "result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];",
    "info" : "ExpressionStatement[35031-35098]:ExpressionStatement[35031-35098]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35656-35662]:Modifier[35656-35662]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35663-35667]:PrimitiveType[35663-35667]"
  }, {
    "left" : "multiply",
    "right" : "multiply",
    "info" : "SimpleName[35668-35676]:SimpleName[35668-35676]"
  }, {
    "left" : "final double[] lhs",
    "right" : "final double[] lhs",
    "info" : "SingleVariableDeclaration[35677-35695]:SingleVariableDeclaration[35677-35695]"
  }, {
    "left" : "final int lhsOffset",
    "right" : "final int lhsOffset",
    "info" : "SingleVariableDeclaration[35697-35716]:SingleVariableDeclaration[35697-35716]"
  }, {
    "left" : "final double[] rhs",
    "right" : "final double[] rhs",
    "info" : "SingleVariableDeclaration[35743-35761]:SingleVariableDeclaration[35743-35761]"
  }, {
    "left" : "final int rhsOffset",
    "right" : "final int rhsOffset",
    "info" : "SingleVariableDeclaration[35763-35782]:SingleVariableDeclaration[35763-35782]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[35809-35830]:SingleVariableDeclaration[35809-35830]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[35832-35854]:SingleVariableDeclaration[35832-35854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35856-36274]:Block[35856-36274]"
  }, {
    "left" : "for (int i = 0; i < multIndirection.length; ++i)",
    "right" : "for (int i = 0; i < multIndirection.length; ++i)",
    "info" : "ForStatement[35866-36268]:ForStatement[35866-36268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35915-36268]:Block[35915-36268]"
  }, {
    "left" : "final int[][] mappingI = multIndirection[i];",
    "right" : "final int[][] mappingI = multIndirection[i];",
    "info" : "VariableDeclarationStatement[35929-35973]:VariableDeclarationStatement[35929-35973]"
  }, {
    "left" : "double r = 0;",
    "right" : "double r = 0;",
    "info" : "VariableDeclarationStatement[35986-35999]:VariableDeclarationStatement[35986-35999]"
  }, {
    "left" : "for (int j = 0; j < mappingI.length; ++j)",
    "right" : "for (int j = 0; j < mappingI.length; ++j)",
    "info" : "ForStatement[36012-36216]:ForStatement[36012-36216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36054-36216]:Block[36054-36216]"
  }, {
    "left" : "r += mappingI[j][0] *\n                     lhs[lhsOffset + mappingI[j][1]] *\n                     rhs[rhsOffset + mappingI[j][2]];",
    "right" : "r += mappingI[j][0] *\n                     lhs[lhsOffset + mappingI[j][1]] *\n                     rhs[rhsOffset + mappingI[j][2]];",
    "info" : "ExpressionStatement[36072-36202]:ExpressionStatement[36072-36202]"
  }, {
    "left" : "result[resultOffset + i] = r;",
    "right" : "result[resultOffset + i] = r;",
    "info" : "ExpressionStatement[36229-36258]:ExpressionStatement[36229-36258]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36792-36798]:Modifier[36792-36798]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36799-36803]:PrimitiveType[36799-36803]"
  }, {
    "left" : "divide",
    "right" : "divide",
    "info" : "SimpleName[36804-36810]:SimpleName[36804-36810]"
  }, {
    "left" : "final double[] lhs",
    "right" : "final double[] lhs",
    "info" : "SingleVariableDeclaration[36811-36829]:SingleVariableDeclaration[36811-36829]"
  }, {
    "left" : "final int lhsOffset",
    "right" : "final int lhsOffset",
    "info" : "SingleVariableDeclaration[36831-36850]:SingleVariableDeclaration[36831-36850]"
  }, {
    "left" : "final double[] rhs",
    "right" : "final double[] rhs",
    "info" : "SingleVariableDeclaration[36875-36893]:SingleVariableDeclaration[36875-36893]"
  }, {
    "left" : "final int rhsOffset",
    "right" : "final int rhsOffset",
    "info" : "SingleVariableDeclaration[36895-36914]:SingleVariableDeclaration[36895-36914]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[36939-36960]:SingleVariableDeclaration[36939-36960]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[36962-36984]:SingleVariableDeclaration[36962-36984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36986-37171]:Block[36986-37171]"
  }, {
    "left" : "final double[] reciprocal = new double[getSize()];",
    "right" : "final double[] reciprocal = new double[getSize()];",
    "info" : "VariableDeclarationStatement[36996-37046]:VariableDeclarationStatement[36996-37046]"
  }, {
    "left" : "pow(rhs, lhsOffset, -1, reciprocal, 0);",
    "right" : "pow(rhs, lhsOffset, -1, reciprocal, 0);",
    "info" : "ExpressionStatement[37055-37094]:ExpressionStatement[37055-37094]"
  }, {
    "left" : "multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",
    "right" : "multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",
    "info" : "ExpressionStatement[37103-37165]:ExpressionStatement[37103-37165]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37646-37652]:Modifier[37646-37652]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37653-37657]:PrimitiveType[37653-37657]"
  }, {
    "left" : "remainder",
    "right" : "remainder",
    "info" : "SimpleName[37658-37667]:SimpleName[37658-37667]"
  }, {
    "left" : "final double[] lhs",
    "right" : "final double[] lhs",
    "info" : "SingleVariableDeclaration[37668-37686]:SingleVariableDeclaration[37668-37686]"
  }, {
    "left" : "final int lhsOffset",
    "right" : "final int lhsOffset",
    "info" : "SingleVariableDeclaration[37688-37707]:SingleVariableDeclaration[37688-37707]"
  }, {
    "left" : "final double[] rhs",
    "right" : "final double[] rhs",
    "info" : "SingleVariableDeclaration[37735-37753]:SingleVariableDeclaration[37735-37753]"
  }, {
    "left" : "final int rhsOffset",
    "right" : "final int rhsOffset",
    "info" : "SingleVariableDeclaration[37755-37774]:SingleVariableDeclaration[37755-37774]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[37802-37823]:SingleVariableDeclaration[37802-37823]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[37825-37847]:SingleVariableDeclaration[37825-37847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37849-38296]:Block[37849-38296]"
  }, {
    "left" : "final double rem = lhs[lhsOffset] % rhs[rhsOffset];",
    "right" : "final double rem = lhs[lhsOffset] % rhs[rhsOffset];",
    "info" : "VariableDeclarationStatement[37915-37966]:VariableDeclarationStatement[37915-37966]"
  }, {
    "left" : "final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);",
    "right" : "final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);",
    "info" : "VariableDeclarationStatement[37975-38049]:VariableDeclarationStatement[37975-38049]"
  }, {
    "left" : "result[resultOffset] = rem;",
    "right" : "result[resultOffset] = rem;",
    "info" : "ExpressionStatement[38083-38110]:ExpressionStatement[38083-38110]"
  }, {
    "left" : "for (int i = 1; i < getSize(); ++i)",
    "right" : "for (int i = 1; i < getSize(); ++i)",
    "info" : "ForStatement[38158-38289]:ForStatement[38158-38289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38194-38289]:Block[38194-38289]"
  }, {
    "left" : "result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];",
    "right" : "result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];",
    "info" : "ExpressionStatement[38208-38279]:ExpressionStatement[38208-38279]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38695-38701]:Modifier[38695-38701]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38702-38706]:PrimitiveType[38702-38706]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[38707-38710]:SimpleName[38707-38710]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[38711-38733]:SingleVariableDeclaration[38711-38733]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[38735-38758]:SingleVariableDeclaration[38735-38758]"
  }, {
    "left" : "final double p",
    "right" : "final double p",
    "info" : "SingleVariableDeclaration[38760-38774]:SingleVariableDeclaration[38760-38774]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[38796-38817]:SingleVariableDeclaration[38796-38817]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[38819-38841]:SingleVariableDeclaration[38819-38841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38843-39494]:Block[38843-39494]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[38955-38997]:VariableDeclarationStatement[38955-38997]"
  }, {
    "left" : "double xk = FastMath.pow(operand[operandOffset], p - order);",
    "right" : "double xk = FastMath.pow(operand[operandOffset], p - order);",
    "info" : "VariableDeclarationStatement[39006-39066]:VariableDeclarationStatement[39006-39066]"
  }, {
    "left" : "for (int i = order; i > 0; --i)",
    "right" : "for (int i = order; i > 0; --i)",
    "info" : "ForStatement[39075-39190]:ForStatement[39075-39190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39107-39190]:Block[39107-39190]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[39121-39138]:ExpressionStatement[39121-39138]"
  }, {
    "left" : "xk *= operand[operandOffset];",
    "right" : "xk *= operand[operandOffset];",
    "info" : "ExpressionStatement[39151-39180]:ExpressionStatement[39151-39180]"
  }, {
    "left" : "function[0] = xk;",
    "right" : "function[0] = xk;",
    "info" : "ExpressionStatement[39199-39216]:ExpressionStatement[39199-39216]"
  }, {
    "left" : "double coefficient = p;",
    "right" : "double coefficient = p;",
    "info" : "VariableDeclarationStatement[39225-39248]:VariableDeclarationStatement[39225-39248]"
  }, {
    "left" : "for (int i = 1; i <= order; ++i)",
    "right" : "for (int i = 1; i <= order; ++i)",
    "info" : "ForStatement[39257-39375]:ForStatement[39257-39375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39290-39375]:Block[39290-39375]"
  }, {
    "left" : "function[i] *= coefficient;",
    "right" : "function[i] *= coefficient;",
    "info" : "ExpressionStatement[39304-39331]:ExpressionStatement[39304-39331]"
  }, {
    "left" : "coefficient *= p - i;",
    "right" : "coefficient *= p - i;",
    "info" : "ExpressionStatement[39344-39365]:ExpressionStatement[39344-39365]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[39423-39487]:ExpressionStatement[39423-39487]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39901-39907]:Modifier[39901-39907]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39908-39912]:PrimitiveType[39908-39912]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[39913-39916]:SimpleName[39913-39916]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[39917-39939]:SingleVariableDeclaration[39917-39939]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[39941-39964]:SingleVariableDeclaration[39941-39964]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[39966-39977]:SingleVariableDeclaration[39966-39977]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[39999-40020]:SingleVariableDeclaration[39999-40020]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[40022-40044]:SingleVariableDeclaration[40022-40044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40046-41368]:Block[40046-41368]"
  }, {
    "left" : "if (n == 0)",
    "right" : "if (n == 0)",
    "info" : "IfStatement[40057-40267]:IfStatement[40057-40267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40069-40267]:Block[40069-40267]"
  }, {
    "left" : "result[resultOffset] = 1.0;",
    "right" : "result[resultOffset] = 1.0;",
    "info" : "ExpressionStatement[40130-40157]:ExpressionStatement[40130-40157]"
  }, {
    "left" : "Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);",
    "right" : "Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);",
    "info" : "ExpressionStatement[40170-40237]:ExpressionStatement[40170-40237]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[40250-40257]:ReturnStatement[40250-40257]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[40384-40426]:VariableDeclarationStatement[40384-40426]"
  }, {
    "left" : "if (n > 0)",
    "right" : "if (n > 0)",
    "info" : "IfStatement[40436-41089]:IfStatement[40436-41089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40447-40803]:Block[40447-40803]"
  }, {
    "left" : "final int maxOrder = FastMath.min(order, n);",
    "right" : "final int maxOrder = FastMath.min(order, n);",
    "info" : "VariableDeclarationStatement[40500-40544]:VariableDeclarationStatement[40500-40544]"
  }, {
    "left" : "double xk = FastMath.pow(operand[operandOffset], n - maxOrder);",
    "right" : "double xk = FastMath.pow(operand[operandOffset], n - maxOrder);",
    "info" : "VariableDeclarationStatement[40557-40620]:VariableDeclarationStatement[40557-40620]"
  }, {
    "left" : "for (int i = maxOrder; i > 0; --i)",
    "right" : "for (int i = maxOrder; i > 0; --i)",
    "info" : "ForStatement[40633-40763]:ForStatement[40633-40763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40668-40763]:Block[40668-40763]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[40686-40703]:ExpressionStatement[40686-40703]"
  }, {
    "left" : "xk *= operand[operandOffset];",
    "right" : "xk *= operand[operandOffset];",
    "info" : "ExpressionStatement[40720-40749]:ExpressionStatement[40720-40749]"
  }, {
    "left" : "function[0] = xk;",
    "right" : "function[0] = xk;",
    "info" : "ExpressionStatement[40776-40793]:ExpressionStatement[40776-40793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40809-41089]:Block[40809-41089]"
  }, {
    "left" : "final double inv = 1.0 / operand[operandOffset];",
    "right" : "final double inv = 1.0 / operand[operandOffset];",
    "info" : "VariableDeclarationStatement[40862-40910]:VariableDeclarationStatement[40862-40910]"
  }, {
    "left" : "double xk = FastMath.pow(inv, -n);",
    "right" : "double xk = FastMath.pow(inv, -n);",
    "info" : "VariableDeclarationStatement[40923-40957]:VariableDeclarationStatement[40923-40957]"
  }, {
    "left" : "for (int i = 0; i <= order; ++i)",
    "right" : "for (int i = 0; i <= order; ++i)",
    "info" : "ForStatement[40970-41079]:ForStatement[40970-41079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41003-41079]:Block[41003-41079]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[41021-41038]:ExpressionStatement[41021-41038]"
  }, {
    "left" : "xk *= inv;",
    "right" : "xk *= inv;",
    "info" : "ExpressionStatement[41055-41065]:ExpressionStatement[41055-41065]"
  }, {
    "left" : "double coefficient = n;",
    "right" : "double coefficient = n;",
    "info" : "VariableDeclarationStatement[41099-41122]:VariableDeclarationStatement[41099-41122]"
  }, {
    "left" : "for (int i = 1; i <= order; ++i)",
    "right" : "for (int i = 1; i <= order; ++i)",
    "info" : "ForStatement[41131-41249]:ForStatement[41131-41249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41164-41249]:Block[41164-41249]"
  }, {
    "left" : "function[i] *= coefficient;",
    "right" : "function[i] *= coefficient;",
    "info" : "ExpressionStatement[41178-41205]:ExpressionStatement[41178-41205]"
  }, {
    "left" : "coefficient *= n - i;",
    "right" : "coefficient *= n - i;",
    "info" : "ExpressionStatement[41218-41239]:ExpressionStatement[41218-41239]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[41297-41361]:ExpressionStatement[41297-41361]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41819-41825]:Modifier[41819-41825]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41826-41830]:PrimitiveType[41826-41830]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[41831-41834]:SimpleName[41831-41834]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[41835-41851]:SingleVariableDeclaration[41835-41851]"
  }, {
    "left" : "final int xOffset",
    "right" : "final int xOffset",
    "info" : "SingleVariableDeclaration[41853-41870]:SingleVariableDeclaration[41853-41870]"
  }, {
    "left" : "final double[] y",
    "right" : "final double[] y",
    "info" : "SingleVariableDeclaration[41892-41908]:SingleVariableDeclaration[41892-41908]"
  }, {
    "left" : "final int yOffset",
    "right" : "final int yOffset",
    "info" : "SingleVariableDeclaration[41910-41927]:SingleVariableDeclaration[41910-41927]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[41949-41970]:SingleVariableDeclaration[41949-41970]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[41972-41994]:SingleVariableDeclaration[41972-41994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41996-42238]:Block[41996-42238]"
  }, {
    "left" : "final double[] logX = new double[getSize()];",
    "right" : "final double[] logX = new double[getSize()];",
    "info" : "VariableDeclarationStatement[42006-42050]:VariableDeclarationStatement[42006-42050]"
  }, {
    "left" : "log(x, xOffset, logX, 0);",
    "right" : "log(x, xOffset, logX, 0);",
    "info" : "ExpressionStatement[42059-42084]:ExpressionStatement[42059-42084]"
  }, {
    "left" : "final double[] yLogX = new double[getSize()];",
    "right" : "final double[] yLogX = new double[getSize()];",
    "info" : "VariableDeclarationStatement[42093-42138]:VariableDeclarationStatement[42093-42138]"
  }, {
    "left" : "multiply(logX, 0, y, yOffset, yLogX, 0);",
    "right" : "multiply(logX, 0, y, yOffset, yLogX, 0);",
    "info" : "ExpressionStatement[42147-42187]:ExpressionStatement[42147-42187]"
  }, {
    "left" : "exp(yLogX, 0, result, resultOffset);",
    "right" : "exp(yLogX, 0, result, resultOffset);",
    "info" : "ExpressionStatement[42196-42232]:ExpressionStatement[42196-42232]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42668-42674]:Modifier[42668-42674]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42675-42679]:PrimitiveType[42675-42679]"
  }, {
    "left" : "rootN",
    "right" : "rootN",
    "info" : "SimpleName[42680-42685]:SimpleName[42680-42685]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[42686-42708]:SingleVariableDeclaration[42686-42708]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[42710-42733]:SingleVariableDeclaration[42710-42733]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[42735-42746]:SingleVariableDeclaration[42735-42746]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[42770-42791]:SingleVariableDeclaration[42770-42791]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[42793-42815]:SingleVariableDeclaration[42793-42815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42817-43836]:Block[42817-43836]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[42948-42990]:VariableDeclarationStatement[42948-42990]"
  }, {
    "left" : "double xk;",
    "right" : "double xk;",
    "info" : "VariableDeclarationStatement[42999-43009]:VariableDeclarationStatement[42999-43009]"
  }, {
    "left" : "if (n == 2)",
    "right" : "if (n == 2)",
    "info" : "IfStatement[43018-43474]:IfStatement[43018-43474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43030-43151]:Block[43030-43151]"
  }, {
    "left" : "function[0] = FastMath.sqrt(operand[operandOffset]);",
    "right" : "function[0] = FastMath.sqrt(operand[operandOffset]);",
    "info" : "ExpressionStatement[43044-43096]:ExpressionStatement[43044-43096]"
  }, {
    "left" : "xk          = 0.5 / function[0];",
    "right" : "xk          = 0.5 / function[0];",
    "info" : "ExpressionStatement[43109-43141]:ExpressionStatement[43109-43141]"
  }, {
    "left" : "if (n == 3)",
    "right" : "if (n == 3)",
    "info" : "IfStatement[43157-43474]:IfStatement[43157-43474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43169-43312]:Block[43169-43312]"
  }, {
    "left" : "function[0] = FastMath.cbrt(operand[operandOffset]);",
    "right" : "function[0] = FastMath.cbrt(operand[operandOffset]);",
    "info" : "ExpressionStatement[43183-43235]:ExpressionStatement[43183-43235]"
  }, {
    "left" : "xk          = 1.0 / (3.0 * function[0] * function[0]);",
    "right" : "xk          = 1.0 / (3.0 * function[0] * function[0]);",
    "info" : "ExpressionStatement[43248-43302]:ExpressionStatement[43248-43302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43318-43474]:Block[43318-43474]"
  }, {
    "left" : "function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);",
    "right" : "function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);",
    "info" : "ExpressionStatement[43332-43392]:ExpressionStatement[43332-43392]"
  }, {
    "left" : "xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));",
    "right" : "xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));",
    "info" : "ExpressionStatement[43405-43464]:ExpressionStatement[43405-43464]"
  }, {
    "left" : "final double nReciprocal = 1.0 / n;",
    "right" : "final double nReciprocal = 1.0 / n;",
    "info" : "VariableDeclarationStatement[43483-43518]:VariableDeclarationStatement[43483-43518]"
  }, {
    "left" : "final double xReciprocal = 1.0 / operand[operandOffset];",
    "right" : "final double xReciprocal = 1.0 / operand[operandOffset];",
    "info" : "VariableDeclarationStatement[43527-43583]:VariableDeclarationStatement[43527-43583]"
  }, {
    "left" : "for (int i = 1; i <= order; ++i)",
    "right" : "for (int i = 1; i <= order; ++i)",
    "info" : "ForStatement[43592-43717]:ForStatement[43592-43717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43625-43717]:Block[43625-43717]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[43639-43656]:ExpressionStatement[43639-43656]"
  }, {
    "left" : "xk *= xReciprocal * (nReciprocal - i);",
    "right" : "xk *= xReciprocal * (nReciprocal - i);",
    "info" : "ExpressionStatement[43669-43707]:ExpressionStatement[43669-43707]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[43765-43829]:ExpressionStatement[43765-43829]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44216-44222]:Modifier[44216-44222]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44223-44227]:PrimitiveType[44223-44227]"
  }, {
    "left" : "exp",
    "right" : "exp",
    "info" : "SimpleName[44228-44231]:SimpleName[44228-44231]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[44232-44254]:SingleVariableDeclaration[44232-44254]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[44256-44279]:SingleVariableDeclaration[44256-44279]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[44301-44322]:SingleVariableDeclaration[44301-44322]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[44324-44346]:SingleVariableDeclaration[44324-44346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44348-44642]:Block[44348-44642]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[44412-44454]:VariableDeclarationStatement[44412-44454]"
  }, {
    "left" : "Arrays.fill(function, FastMath.exp(operand[operandOffset]));",
    "right" : "Arrays.fill(function, FastMath.exp(operand[operandOffset]));",
    "info" : "ExpressionStatement[44463-44523]:ExpressionStatement[44463-44523]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[44571-44635]:ExpressionStatement[44571-44635]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45021-45027]:Modifier[45021-45027]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45028-45032]:PrimitiveType[45028-45032]"
  }, {
    "left" : "expm1",
    "right" : "expm1",
    "info" : "SimpleName[45033-45038]:SimpleName[45033-45038]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[45039-45061]:SingleVariableDeclaration[45039-45061]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[45063-45086]:SingleVariableDeclaration[45063-45086]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[45110-45131]:SingleVariableDeclaration[45110-45131]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[45133-45155]:SingleVariableDeclaration[45133-45155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45157-45527]:Block[45157-45527]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[45221-45263]:VariableDeclarationStatement[45221-45263]"
  }, {
    "left" : "function[0] = FastMath.expm1(operand[operandOffset]);",
    "right" : "function[0] = FastMath.expm1(operand[operandOffset]);",
    "info" : "ExpressionStatement[45272-45325]:ExpressionStatement[45272-45325]"
  }, {
    "left" : "Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));",
    "right" : "Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));",
    "info" : "ExpressionStatement[45334-45408]:ExpressionStatement[45334-45408]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[45456-45520]:ExpressionStatement[45456-45520]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45911-45917]:Modifier[45911-45917]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45918-45922]:PrimitiveType[45918-45922]"
  }, {
    "left" : "log",
    "right" : "log",
    "info" : "SimpleName[45923-45926]:SimpleName[45923-45926]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[45927-45949]:SingleVariableDeclaration[45927-45949]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[45951-45974]:SingleVariableDeclaration[45951-45974]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[45996-46017]:SingleVariableDeclaration[45996-46017]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[46019-46041]:SingleVariableDeclaration[46019-46041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46043-46575]:Block[46043-46575]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[46107-46149]:VariableDeclarationStatement[46107-46149]"
  }, {
    "left" : "function[0] = FastMath.log(operand[operandOffset]);",
    "right" : "function[0] = FastMath.log(operand[operandOffset]);",
    "info" : "ExpressionStatement[46158-46209]:ExpressionStatement[46158-46209]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[46218-46456]:IfStatement[46218-46456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46233-46456]:Block[46233-46456]"
  }, {
    "left" : "double inv = 1.0 / operand[operandOffset];",
    "right" : "double inv = 1.0 / operand[operandOffset];",
    "info" : "VariableDeclarationStatement[46247-46289]:VariableDeclarationStatement[46247-46289]"
  }, {
    "left" : "double xk  = inv;",
    "right" : "double xk  = inv;",
    "info" : "VariableDeclarationStatement[46302-46319]:VariableDeclarationStatement[46302-46319]"
  }, {
    "left" : "for (int i = 1; i <= order; ++i)",
    "right" : "for (int i = 1; i <= order; ++i)",
    "info" : "ForStatement[46332-46446]:ForStatement[46332-46446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46365-46446]:Block[46365-46446]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[46383-46400]:ExpressionStatement[46383-46400]"
  }, {
    "left" : "xk *= -i * inv;",
    "right" : "xk *= -i * inv;",
    "info" : "ExpressionStatement[46417-46432]:ExpressionStatement[46417-46432]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[46504-46568]:ExpressionStatement[46504-46568]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46961-46967]:Modifier[46961-46967]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46968-46972]:PrimitiveType[46968-46972]"
  }, {
    "left" : "log1p",
    "right" : "log1p",
    "info" : "SimpleName[46973-46978]:SimpleName[46973-46978]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[46979-47001]:SingleVariableDeclaration[46979-47001]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[47003-47026]:SingleVariableDeclaration[47003-47026]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[47050-47071]:SingleVariableDeclaration[47050-47071]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[47073-47095]:SingleVariableDeclaration[47073-47095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47097-47639]:Block[47097-47639]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[47161-47203]:VariableDeclarationStatement[47161-47203]"
  }, {
    "left" : "function[0] = FastMath.log1p(operand[operandOffset]);",
    "right" : "function[0] = FastMath.log1p(operand[operandOffset]);",
    "info" : "ExpressionStatement[47212-47265]:ExpressionStatement[47212-47265]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[47274-47520]:IfStatement[47274-47520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47289-47520]:Block[47289-47520]"
  }, {
    "left" : "double inv = 1.0 / (1.0 + operand[operandOffset]);",
    "right" : "double inv = 1.0 / (1.0 + operand[operandOffset]);",
    "info" : "VariableDeclarationStatement[47303-47353]:VariableDeclarationStatement[47303-47353]"
  }, {
    "left" : "double xk  = inv;",
    "right" : "double xk  = inv;",
    "info" : "VariableDeclarationStatement[47366-47383]:VariableDeclarationStatement[47366-47383]"
  }, {
    "left" : "for (int i = 1; i <= order; ++i)",
    "right" : "for (int i = 1; i <= order; ++i)",
    "info" : "ForStatement[47396-47510]:ForStatement[47396-47510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47429-47510]:Block[47429-47510]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[47447-47464]:ExpressionStatement[47447-47464]"
  }, {
    "left" : "xk *= -i * inv;",
    "right" : "xk *= -i * inv;",
    "info" : "ExpressionStatement[47481-47496]:ExpressionStatement[47481-47496]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[47568-47632]:ExpressionStatement[47568-47632]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48025-48031]:Modifier[48025-48031]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48032-48036]:PrimitiveType[48032-48036]"
  }, {
    "left" : "log10",
    "right" : "log10",
    "info" : "SimpleName[48037-48042]:SimpleName[48037-48042]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[48043-48065]:SingleVariableDeclaration[48043-48065]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[48067-48090]:SingleVariableDeclaration[48067-48090]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[48114-48135]:SingleVariableDeclaration[48114-48135]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[48137-48159]:SingleVariableDeclaration[48137-48159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48161-48716]:Block[48161-48716]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[48225-48267]:VariableDeclarationStatement[48225-48267]"
  }, {
    "left" : "function[0] = FastMath.log10(operand[operandOffset]);",
    "right" : "function[0] = FastMath.log10(operand[operandOffset]);",
    "info" : "ExpressionStatement[48276-48329]:ExpressionStatement[48276-48329]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[48338-48597]:IfStatement[48338-48597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48353-48597]:Block[48353-48597]"
  }, {
    "left" : "double inv = 1.0 / operand[operandOffset];",
    "right" : "double inv = 1.0 / operand[operandOffset];",
    "info" : "VariableDeclarationStatement[48367-48409]:VariableDeclarationStatement[48367-48409]"
  }, {
    "left" : "double xk  = inv / FastMath.log(10.0);",
    "right" : "double xk  = inv / FastMath.log(10.0);",
    "info" : "VariableDeclarationStatement[48422-48460]:VariableDeclarationStatement[48422-48460]"
  }, {
    "left" : "for (int i = 1; i <= order; ++i)",
    "right" : "for (int i = 1; i <= order; ++i)",
    "info" : "ForStatement[48473-48587]:ForStatement[48473-48587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48506-48587]:Block[48506-48587]"
  }, {
    "left" : "function[i] = xk;",
    "right" : "function[i] = xk;",
    "info" : "ExpressionStatement[48524-48541]:ExpressionStatement[48524-48541]"
  }, {
    "left" : "xk *= -i * inv;",
    "right" : "xk *= -i * inv;",
    "info" : "ExpressionStatement[48558-48573]:ExpressionStatement[48558-48573]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[48645-48709]:ExpressionStatement[48645-48709]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49086-49092]:Modifier[49086-49092]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49093-49097]:PrimitiveType[49093-49097]"
  }, {
    "left" : "cos",
    "right" : "cos",
    "info" : "SimpleName[49098-49101]:SimpleName[49098-49101]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[49102-49124]:SingleVariableDeclaration[49102-49124]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[49126-49149]:SingleVariableDeclaration[49126-49149]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[49171-49192]:SingleVariableDeclaration[49171-49192]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[49194-49216]:SingleVariableDeclaration[49194-49216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49218-49712]:Block[49218-49712]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[49282-49324]:VariableDeclarationStatement[49282-49324]"
  }, {
    "left" : "function[0] = FastMath.cos(operand[operandOffset]);",
    "right" : "function[0] = FastMath.cos(operand[operandOffset]);",
    "info" : "ExpressionStatement[49333-49384]:ExpressionStatement[49333-49384]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[49393-49593]:IfStatement[49393-49593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49408-49593]:Block[49408-49593]"
  }, {
    "left" : "function[1] = -FastMath.sin(operand[operandOffset]);",
    "right" : "function[1] = -FastMath.sin(operand[operandOffset]);",
    "info" : "ExpressionStatement[49422-49474]:ExpressionStatement[49422-49474]"
  }, {
    "left" : "for (int i = 2; i <= order; ++i)",
    "right" : "for (int i = 2; i <= order; ++i)",
    "info" : "ForStatement[49487-49583]:ForStatement[49487-49583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49520-49583]:Block[49520-49583]"
  }, {
    "left" : "function[i] = -function[i - 2];",
    "right" : "function[i] = -function[i - 2];",
    "info" : "ExpressionStatement[49538-49569]:ExpressionStatement[49538-49569]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[49641-49705]:ExpressionStatement[49641-49705]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50078-50084]:Modifier[50078-50084]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50085-50089]:PrimitiveType[50085-50089]"
  }, {
    "left" : "sin",
    "right" : "sin",
    "info" : "SimpleName[50090-50093]:SimpleName[50090-50093]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[50094-50116]:SingleVariableDeclaration[50094-50116]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[50118-50141]:SingleVariableDeclaration[50118-50141]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[50163-50184]:SingleVariableDeclaration[50163-50184]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[50186-50208]:SingleVariableDeclaration[50186-50208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50210-50703]:Block[50210-50703]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[50274-50316]:VariableDeclarationStatement[50274-50316]"
  }, {
    "left" : "function[0] = FastMath.sin(operand[operandOffset]);",
    "right" : "function[0] = FastMath.sin(operand[operandOffset]);",
    "info" : "ExpressionStatement[50325-50376]:ExpressionStatement[50325-50376]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[50385-50584]:IfStatement[50385-50584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50400-50584]:Block[50400-50584]"
  }, {
    "left" : "function[1] = FastMath.cos(operand[operandOffset]);",
    "right" : "function[1] = FastMath.cos(operand[operandOffset]);",
    "info" : "ExpressionStatement[50414-50465]:ExpressionStatement[50414-50465]"
  }, {
    "left" : "for (int i = 2; i <= order; ++i)",
    "right" : "for (int i = 2; i <= order; ++i)",
    "info" : "ForStatement[50478-50574]:ForStatement[50478-50574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50511-50574]:Block[50511-50574]"
  }, {
    "left" : "function[i] = -function[i - 2];",
    "right" : "function[i] = -function[i - 2];",
    "info" : "ExpressionStatement[50529-50560]:ExpressionStatement[50529-50560]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[50632-50696]:ExpressionStatement[50632-50696]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[51075-51081]:Modifier[51075-51081]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51082-51086]:PrimitiveType[51082-51086]"
  }, {
    "left" : "tan",
    "right" : "tan",
    "info" : "SimpleName[51087-51090]:SimpleName[51087-51090]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[51091-51113]:SingleVariableDeclaration[51091-51113]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[51115-51138]:SingleVariableDeclaration[51115-51138]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[51160-51181]:SingleVariableDeclaration[51160-51181]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[51183-51205]:SingleVariableDeclaration[51183-51205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51207-52768]:Block[51207-52768]"
  }, {
    "left" : "final double[] function = new double[1 + order];",
    "right" : "final double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[51271-51319]:VariableDeclarationStatement[51271-51319]"
  }, {
    "left" : "final double t = FastMath.tan(operand[operandOffset]);",
    "right" : "final double t = FastMath.tan(operand[operandOffset]);",
    "info" : "VariableDeclarationStatement[51328-51382]:VariableDeclarationStatement[51328-51382]"
  }, {
    "left" : "function[0] = t;",
    "right" : "function[0] = t;",
    "info" : "ExpressionStatement[51391-51407]:ExpressionStatement[51391-51407]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[51417-52649]:IfStatement[51417-52649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51432-52649]:Block[51432-52649]"
  }, {
    "left" : "final double[] p = new double[order + 2];",
    "right" : "final double[] p = new double[order + 2];",
    "info" : "VariableDeclarationStatement[51914-51955]:VariableDeclarationStatement[51914-51955]"
  }, {
    "left" : "p[1] = 1;",
    "right" : "p[1] = 1;",
    "info" : "ExpressionStatement[51968-51977]:ExpressionStatement[51968-51977]"
  }, {
    "left" : "final double t2 = t * t;",
    "right" : "final double t2 = t * t;",
    "info" : "VariableDeclarationStatement[51990-52014]:VariableDeclarationStatement[51990-52014]"
  }, {
    "left" : "for (int n = 1; n <= order; ++n)",
    "right" : "for (int n = 1; n <= order; ++n)",
    "info" : "ForStatement[52027-52639]:ForStatement[52027-52639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52060-52639]:Block[52060-52639]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[52136-52149]:VariableDeclarationStatement[52136-52149]"
  }, {
    "left" : "p[n + 1] = n * p[n];",
    "right" : "p[n + 1] = n * p[n];",
    "info" : "ExpressionStatement[52166-52186]:ExpressionStatement[52166-52186]"
  }, {
    "left" : "for (int k = n + 1; k >= 0; k -= 2)",
    "right" : "for (int k = n + 1; k >= 0; k -= 2)",
    "info" : "ForStatement[52203-52506]:ForStatement[52203-52506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52239-52506]:Block[52239-52506]"
  }, {
    "left" : "v = v * t2 + p[k];",
    "right" : "v = v * t2 + p[k];",
    "info" : "ExpressionStatement[52261-52279]:ExpressionStatement[52261-52279]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[52300-52488]:IfStatement[52300-52488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52311-52410]:Block[52311-52410]"
  }, {
    "left" : "p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];",
    "right" : "p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];",
    "info" : "ExpressionStatement[52337-52388]:ExpressionStatement[52337-52388]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[52416-52488]:IfStatement[52416-52488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52428-52488]:Block[52428-52488]"
  }, {
    "left" : "p[0] = p[1];",
    "right" : "p[0] = p[1];",
    "info" : "ExpressionStatement[52454-52466]:ExpressionStatement[52454-52466]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[52523-52590]:IfStatement[52523-52590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52543-52590]:Block[52543-52590]"
  }, {
    "left" : "v *= t;",
    "right" : "v *= t;",
    "info" : "ExpressionStatement[52565-52572]:ExpressionStatement[52565-52572]"
  }, {
    "left" : "function[n] = v;",
    "right" : "function[n] = v;",
    "info" : "ExpressionStatement[52608-52624]:ExpressionStatement[52608-52624]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[52697-52761]:ExpressionStatement[52697-52761]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53146-53152]:Modifier[53146-53152]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53153-53157]:PrimitiveType[53153-53157]"
  }, {
    "left" : "acos",
    "right" : "acos",
    "info" : "SimpleName[53158-53162]:SimpleName[53158-53162]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[53163-53185]:SingleVariableDeclaration[53163-53185]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[53187-53210]:SingleVariableDeclaration[53187-53210]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[53232-53253]:SingleVariableDeclaration[53232-53253]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[53255-53277]:SingleVariableDeclaration[53255-53277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53279-55051]:Block[53279-55051]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[53343-53385]:VariableDeclarationStatement[53343-53385]"
  }, {
    "left" : "final double x = operand[operandOffset];",
    "right" : "final double x = operand[operandOffset];",
    "info" : "VariableDeclarationStatement[53394-53434]:VariableDeclarationStatement[53394-53434]"
  }, {
    "left" : "function[0] = FastMath.acos(x);",
    "right" : "function[0] = FastMath.acos(x);",
    "info" : "ExpressionStatement[53443-53474]:ExpressionStatement[53443-53474]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[53483-54932]:IfStatement[53483-54932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53498-54932]:Block[53498-54932]"
  }, {
    "left" : "final double[] p = new double[order];",
    "right" : "final double[] p = new double[order];",
    "info" : "VariableDeclarationStatement[54013-54050]:VariableDeclarationStatement[54013-54050]"
  }, {
    "left" : "p[0] = -1;",
    "right" : "p[0] = -1;",
    "info" : "ExpressionStatement[54063-54073]:ExpressionStatement[54063-54073]"
  }, {
    "left" : "final double x2    = x * x;",
    "right" : "final double x2    = x * x;",
    "info" : "VariableDeclarationStatement[54086-54113]:VariableDeclarationStatement[54086-54113]"
  }, {
    "left" : "final double f     = 1.0 / (1 - x2);",
    "right" : "final double f     = 1.0 / (1 - x2);",
    "info" : "VariableDeclarationStatement[54126-54162]:VariableDeclarationStatement[54126-54162]"
  }, {
    "left" : "double coeff = FastMath.sqrt(f);",
    "right" : "double coeff = FastMath.sqrt(f);",
    "info" : "VariableDeclarationStatement[54175-54207]:VariableDeclarationStatement[54175-54207]"
  }, {
    "left" : "function[1] = coeff * p[0];",
    "right" : "function[1] = coeff * p[0];",
    "info" : "ExpressionStatement[54220-54247]:ExpressionStatement[54220-54247]"
  }, {
    "left" : "for (int n = 2; n <= order; ++n)",
    "right" : "for (int n = 2; n <= order; ++n)",
    "info" : "ForStatement[54260-54922]:ForStatement[54260-54922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54293-54922]:Block[54293-54922]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[54369-54382]:VariableDeclarationStatement[54369-54382]"
  }, {
    "left" : "p[n - 1] = (n - 1) * p[n - 2];",
    "right" : "p[n - 1] = (n - 1) * p[n - 2];",
    "info" : "ExpressionStatement[54399-54429]:ExpressionStatement[54399-54429]"
  }, {
    "left" : "for (int k = n - 1; k >= 0; k -= 2)",
    "right" : "for (int k = n - 1; k >= 0; k -= 2)",
    "info" : "ForStatement[54446-54753]:ForStatement[54446-54753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54482-54753]:Block[54482-54753]"
  }, {
    "left" : "v = v * x2 + p[k];",
    "right" : "v = v * x2 + p[k];",
    "info" : "ExpressionStatement[54504-54522]:ExpressionStatement[54504-54522]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[54543-54735]:IfStatement[54543-54735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54554-54657]:Block[54554-54657]"
  }, {
    "left" : "p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];",
    "right" : "p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];",
    "info" : "ExpressionStatement[54580-54635]:ExpressionStatement[54580-54635]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[54663-54735]:IfStatement[54663-54735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54675-54735]:Block[54675-54735]"
  }, {
    "left" : "p[0] = p[1];",
    "right" : "p[0] = p[1];",
    "info" : "ExpressionStatement[54701-54713]:ExpressionStatement[54701-54713]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[54770-54837]:IfStatement[54770-54837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54790-54837]:Block[54790-54837]"
  }, {
    "left" : "v *= x;",
    "right" : "v *= x;",
    "info" : "ExpressionStatement[54812-54819]:ExpressionStatement[54812-54819]"
  }, {
    "left" : "coeff *= f;",
    "right" : "coeff *= f;",
    "info" : "ExpressionStatement[54855-54866]:ExpressionStatement[54855-54866]"
  }, {
    "left" : "function[n] = coeff * v;",
    "right" : "function[n] = coeff * v;",
    "info" : "ExpressionStatement[54883-54907]:ExpressionStatement[54883-54907]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[54980-55044]:ExpressionStatement[54980-55044]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55425-55431]:Modifier[55425-55431]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55432-55436]:PrimitiveType[55432-55436]"
  }, {
    "left" : "asin",
    "right" : "asin",
    "info" : "SimpleName[55437-55441]:SimpleName[55437-55441]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[55442-55464]:SingleVariableDeclaration[55442-55464]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[55466-55489]:SingleVariableDeclaration[55466-55489]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[55511-55532]:SingleVariableDeclaration[55511-55532]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[55534-55556]:SingleVariableDeclaration[55534-55556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55558-57326]:Block[55558-57326]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[55622-55664]:VariableDeclarationStatement[55622-55664]"
  }, {
    "left" : "final double x = operand[operandOffset];",
    "right" : "final double x = operand[operandOffset];",
    "info" : "VariableDeclarationStatement[55673-55713]:VariableDeclarationStatement[55673-55713]"
  }, {
    "left" : "function[0] = FastMath.asin(x);",
    "right" : "function[0] = FastMath.asin(x);",
    "info" : "ExpressionStatement[55722-55753]:ExpressionStatement[55722-55753]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[55762-57207]:IfStatement[55762-57207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55777-57207]:Block[55777-57207]"
  }, {
    "left" : "final double[] p = new double[order];",
    "right" : "final double[] p = new double[order];",
    "info" : "VariableDeclarationStatement[56289-56326]:VariableDeclarationStatement[56289-56326]"
  }, {
    "left" : "p[0] = 1;",
    "right" : "p[0] = 1;",
    "info" : "ExpressionStatement[56339-56348]:ExpressionStatement[56339-56348]"
  }, {
    "left" : "final double x2    = x * x;",
    "right" : "final double x2    = x * x;",
    "info" : "VariableDeclarationStatement[56361-56388]:VariableDeclarationStatement[56361-56388]"
  }, {
    "left" : "final double f     = 1.0 / (1 - x2);",
    "right" : "final double f     = 1.0 / (1 - x2);",
    "info" : "VariableDeclarationStatement[56401-56437]:VariableDeclarationStatement[56401-56437]"
  }, {
    "left" : "double coeff = FastMath.sqrt(f);",
    "right" : "double coeff = FastMath.sqrt(f);",
    "info" : "VariableDeclarationStatement[56450-56482]:VariableDeclarationStatement[56450-56482]"
  }, {
    "left" : "function[1] = coeff * p[0];",
    "right" : "function[1] = coeff * p[0];",
    "info" : "ExpressionStatement[56495-56522]:ExpressionStatement[56495-56522]"
  }, {
    "left" : "for (int n = 2; n <= order; ++n)",
    "right" : "for (int n = 2; n <= order; ++n)",
    "info" : "ForStatement[56535-57197]:ForStatement[56535-57197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56568-57197]:Block[56568-57197]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[56644-56657]:VariableDeclarationStatement[56644-56657]"
  }, {
    "left" : "p[n - 1] = (n - 1) * p[n - 2];",
    "right" : "p[n - 1] = (n - 1) * p[n - 2];",
    "info" : "ExpressionStatement[56674-56704]:ExpressionStatement[56674-56704]"
  }, {
    "left" : "for (int k = n - 1; k >= 0; k -= 2)",
    "right" : "for (int k = n - 1; k >= 0; k -= 2)",
    "info" : "ForStatement[56721-57028]:ForStatement[56721-57028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56757-57028]:Block[56757-57028]"
  }, {
    "left" : "v = v * x2 + p[k];",
    "right" : "v = v * x2 + p[k];",
    "info" : "ExpressionStatement[56779-56797]:ExpressionStatement[56779-56797]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[56818-57010]:IfStatement[56818-57010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56829-56932]:Block[56829-56932]"
  }, {
    "left" : "p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];",
    "right" : "p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];",
    "info" : "ExpressionStatement[56855-56910]:ExpressionStatement[56855-56910]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[56938-57010]:IfStatement[56938-57010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56950-57010]:Block[56950-57010]"
  }, {
    "left" : "p[0] = p[1];",
    "right" : "p[0] = p[1];",
    "info" : "ExpressionStatement[56976-56988]:ExpressionStatement[56976-56988]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[57045-57112]:IfStatement[57045-57112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57065-57112]:Block[57065-57112]"
  }, {
    "left" : "v *= x;",
    "right" : "v *= x;",
    "info" : "ExpressionStatement[57087-57094]:ExpressionStatement[57087-57094]"
  }, {
    "left" : "coeff *= f;",
    "right" : "coeff *= f;",
    "info" : "ExpressionStatement[57130-57141]:ExpressionStatement[57130-57141]"
  }, {
    "left" : "function[n] = coeff * v;",
    "right" : "function[n] = coeff * v;",
    "info" : "ExpressionStatement[57158-57182]:ExpressionStatement[57158-57182]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[57255-57319]:ExpressionStatement[57255-57319]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[57706-57712]:Modifier[57706-57712]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57713-57717]:PrimitiveType[57713-57717]"
  }, {
    "left" : "atan",
    "right" : "atan",
    "info" : "SimpleName[57718-57722]:SimpleName[57718-57722]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[57723-57745]:SingleVariableDeclaration[57723-57745]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[57747-57770]:SingleVariableDeclaration[57747-57770]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[57793-57814]:SingleVariableDeclaration[57793-57814]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[57816-57838]:SingleVariableDeclaration[57816-57838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57840-59585]:Block[57840-59585]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[57904-57946]:VariableDeclarationStatement[57904-57946]"
  }, {
    "left" : "final double x = operand[operandOffset];",
    "right" : "final double x = operand[operandOffset];",
    "info" : "VariableDeclarationStatement[57955-57995]:VariableDeclarationStatement[57955-57995]"
  }, {
    "left" : "function[0] = FastMath.atan(x);",
    "right" : "function[0] = FastMath.atan(x);",
    "info" : "ExpressionStatement[58004-58035]:ExpressionStatement[58004-58035]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[58044-59466]:IfStatement[58044-59466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58059-59466]:Block[58059-59466]"
  }, {
    "left" : "final double[] q = new double[order];",
    "right" : "final double[] q = new double[order];",
    "info" : "VariableDeclarationStatement[58564-58601]:VariableDeclarationStatement[58564-58601]"
  }, {
    "left" : "q[0] = 1;",
    "right" : "q[0] = 1;",
    "info" : "ExpressionStatement[58614-58623]:ExpressionStatement[58614-58623]"
  }, {
    "left" : "final double x2    = x * x;",
    "right" : "final double x2    = x * x;",
    "info" : "VariableDeclarationStatement[58636-58663]:VariableDeclarationStatement[58636-58663]"
  }, {
    "left" : "final double f     = 1.0 / (1 + x2);",
    "right" : "final double f     = 1.0 / (1 + x2);",
    "info" : "VariableDeclarationStatement[58676-58712]:VariableDeclarationStatement[58676-58712]"
  }, {
    "left" : "double coeff = f;",
    "right" : "double coeff = f;",
    "info" : "VariableDeclarationStatement[58725-58742]:VariableDeclarationStatement[58725-58742]"
  }, {
    "left" : "function[1] = coeff * q[0];",
    "right" : "function[1] = coeff * q[0];",
    "info" : "ExpressionStatement[58755-58782]:ExpressionStatement[58755-58782]"
  }, {
    "left" : "for (int n = 2; n <= order; ++n)",
    "right" : "for (int n = 2; n <= order; ++n)",
    "info" : "ForStatement[58795-59456]:ForStatement[58795-59456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58828-59456]:Block[58828-59456]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[58904-58917]:VariableDeclarationStatement[58904-58917]"
  }, {
    "left" : "q[n - 1] = -n * q[n - 2];",
    "right" : "q[n - 1] = -n * q[n - 2];",
    "info" : "ExpressionStatement[58934-58959]:ExpressionStatement[58934-58959]"
  }, {
    "left" : "for (int k = n - 1; k >= 0; k -= 2)",
    "right" : "for (int k = n - 1; k >= 0; k -= 2)",
    "info" : "ForStatement[58976-59287]:ForStatement[58976-59287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59012-59287]:Block[59012-59287]"
  }, {
    "left" : "v = v * x2 + q[k];",
    "right" : "v = v * x2 + q[k];",
    "info" : "ExpressionStatement[59034-59052]:ExpressionStatement[59034-59052]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[59073-59269]:IfStatement[59073-59269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59084-59191]:Block[59084-59191]"
  }, {
    "left" : "q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];",
    "right" : "q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];",
    "info" : "ExpressionStatement[59110-59169]:ExpressionStatement[59110-59169]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[59197-59269]:IfStatement[59197-59269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59209-59269]:Block[59209-59269]"
  }, {
    "left" : "q[0] = q[1];",
    "right" : "q[0] = q[1];",
    "info" : "ExpressionStatement[59235-59247]:ExpressionStatement[59235-59247]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[59304-59371]:IfStatement[59304-59371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59324-59371]:Block[59324-59371]"
  }, {
    "left" : "v *= x;",
    "right" : "v *= x;",
    "info" : "ExpressionStatement[59346-59353]:ExpressionStatement[59346-59353]"
  }, {
    "left" : "coeff *= f;",
    "right" : "coeff *= f;",
    "info" : "ExpressionStatement[59389-59400]:ExpressionStatement[59389-59400]"
  }, {
    "left" : "function[n] = coeff * v;",
    "right" : "function[n] = coeff * v;",
    "info" : "ExpressionStatement[59417-59441]:ExpressionStatement[59417-59441]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[59514-59578]:ExpressionStatement[59514-59578]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60106-60112]:Modifier[60106-60112]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[60113-60117]:PrimitiveType[60113-60117]"
  }, {
    "left" : "atan2",
    "right" : "atan2",
    "info" : "SimpleName[60118-60123]:SimpleName[60118-60123]"
  }, {
    "left" : "final double[] y",
    "right" : "final double[] y",
    "info" : "SingleVariableDeclaration[60124-60140]:SingleVariableDeclaration[60124-60140]"
  }, {
    "left" : "final int yOffset",
    "right" : "final int yOffset",
    "info" : "SingleVariableDeclaration[60142-60159]:SingleVariableDeclaration[60142-60159]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[60183-60199]:SingleVariableDeclaration[60183-60199]"
  }, {
    "left" : "final int xOffset",
    "right" : "final int xOffset",
    "info" : "SingleVariableDeclaration[60201-60218]:SingleVariableDeclaration[60201-60218]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[60242-60263]:SingleVariableDeclaration[60242-60263]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[60265-60287]:SingleVariableDeclaration[60265-60287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60289-61861]:Block[60289-61932]"
  }, {
    "left" : "double[] tmp1 = new double[getSize()];",
    "right" : "double[] tmp1 = new double[getSize()];",
    "info" : "VariableDeclarationStatement[60337-60375]:VariableDeclarationStatement[60337-60375]"
  }, {
    "left" : "multiply(x, xOffset, x, xOffset, tmp1, 0);",
    "right" : "multiply(x, xOffset, x, xOffset, tmp1, 0);",
    "info" : "ExpressionStatement[60384-60426]:ExpressionStatement[60384-60426]"
  }, {
    "left" : "double[] tmp2 = new double[getSize()];",
    "right" : "double[] tmp2 = new double[getSize()];",
    "info" : "VariableDeclarationStatement[60447-60485]:VariableDeclarationStatement[60447-60485]"
  }, {
    "left" : "multiply(y, yOffset, y, yOffset, tmp2, 0);",
    "right" : "multiply(y, yOffset, y, yOffset, tmp2, 0);",
    "info" : "ExpressionStatement[60494-60536]:ExpressionStatement[60494-60536]"
  }, {
    "left" : "add(tmp1, 0, tmp2, 0, tmp2, 0);",
    "right" : "add(tmp1, 0, tmp2, 0, tmp2, 0);",
    "info" : "ExpressionStatement[60557-60588]:ExpressionStatement[60557-60588]"
  }, {
    "left" : "rootN(tmp2, 0, 2, tmp1, 0);",
    "right" : "rootN(tmp2, 0, 2, tmp1, 0);",
    "info" : "ExpressionStatement[60626-60653]:ExpressionStatement[60626-60653]"
  }, {
    "left" : "if (x[xOffset] >= 0)",
    "right" : "if (x[xOffset] >= 0)",
    "info" : "IfStatement[60706-61758]:IfStatement[60706-61758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60727-61156]:Block[60727-61156]"
  }, {
    "left" : "add(tmp1, 0, x, xOffset, tmp2, 0);",
    "right" : "add(tmp1, 0, x, xOffset, tmp2, 0);",
    "info" : "ExpressionStatement[60799-60833]:ExpressionStatement[60799-60833]"
  }, {
    "left" : "divide(y, yOffset, tmp2, 0, tmp1, 0);",
    "right" : "divide(y, yOffset, tmp2, 0, tmp1, 0);",
    "info" : "ExpressionStatement[60864-60901]:ExpressionStatement[60864-60901]"
  }, {
    "left" : "atan(tmp1, 0, tmp2, 0);",
    "right" : "atan(tmp1, 0, tmp2, 0);",
    "info" : "ExpressionStatement[60934-60957]:ExpressionStatement[60934-60957]"
  }, {
    "left" : "for (int i = 0; i < tmp2.length; ++i)",
    "right" : "for (int i = 0; i < tmp2.length; ++i)",
    "info" : "ForStatement[61011-61145]:ForStatement[61011-61145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61049-61145]:Block[61049-61145]"
  }, {
    "left" : "result[resultOffset + i] = 2 * tmp2[i];",
    "right" : "result[resultOffset + i] = 2 * tmp2[i];",
    "info" : "ExpressionStatement[61067-61106]:ExpressionStatement[61067-61106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61162-61758]:Block[61162-61758]"
  }, {
    "left" : "subtract(tmp1, 0, x, xOffset, tmp2, 0);",
    "right" : "subtract(tmp1, 0, x, xOffset, tmp2, 0);",
    "info" : "ExpressionStatement[61243-61282]:ExpressionStatement[61243-61282]"
  }, {
    "left" : "divide(y, yOffset, tmp2, 0, tmp1, 0);",
    "right" : "divide(y, yOffset, tmp2, 0, tmp1, 0);",
    "info" : "ExpressionStatement[61308-61345]:ExpressionStatement[61308-61345]"
  }, {
    "left" : "atan(tmp1, 0, tmp2, 0);",
    "right" : "atan(tmp1, 0, tmp2, 0);",
    "info" : "ExpressionStatement[61378-61401]:ExpressionStatement[61378-61401]"
  }, {
    "left" : "result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];",
    "right" : "result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];",
    "info" : "ExpressionStatement[61455-61558]:ExpressionStatement[61455-61558]"
  }, {
    "left" : "for (int i = 1; i < tmp2.length; ++i)",
    "right" : "for (int i = 1; i < tmp2.length; ++i)",
    "info" : "ForStatement[61604-61747]:ForStatement[61604-61747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61642-61747]:Block[61642-61747]"
  }, {
    "left" : "result[resultOffset + i] = -2 * tmp2[i];",
    "right" : "result[resultOffset + i] = -2 * tmp2[i];",
    "info" : "ExpressionStatement[61660-61700]:ExpressionStatement[61660-61700]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62253-62259]:Modifier[62324-62330]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62260-62264]:PrimitiveType[62331-62335]"
  }, {
    "left" : "cosh",
    "right" : "cosh",
    "info" : "SimpleName[62265-62269]:SimpleName[62336-62340]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[62270-62292]:SingleVariableDeclaration[62341-62363]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[62294-62317]:SingleVariableDeclaration[62365-62388]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[62340-62361]:SingleVariableDeclaration[62411-62432]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[62363-62385]:SingleVariableDeclaration[62434-62456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62387-62881]:Block[62458-62952]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[62451-62493]:VariableDeclarationStatement[62522-62564]"
  }, {
    "left" : "function[0] = FastMath.cosh(operand[operandOffset]);",
    "right" : "function[0] = FastMath.cosh(operand[operandOffset]);",
    "info" : "ExpressionStatement[62502-62554]:ExpressionStatement[62573-62625]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[62563-62762]:IfStatement[62634-62833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62578-62762]:Block[62649-62833]"
  }, {
    "left" : "function[1] = FastMath.sinh(operand[operandOffset]);",
    "right" : "function[1] = FastMath.sinh(operand[operandOffset]);",
    "info" : "ExpressionStatement[62592-62644]:ExpressionStatement[62663-62715]"
  }, {
    "left" : "for (int i = 2; i <= order; ++i)",
    "right" : "for (int i = 2; i <= order; ++i)",
    "info" : "ForStatement[62657-62752]:ForStatement[62728-62823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62690-62752]:Block[62761-62823]"
  }, {
    "left" : "function[i] = function[i - 2];",
    "right" : "function[i] = function[i - 2];",
    "info" : "ExpressionStatement[62708-62738]:ExpressionStatement[62779-62809]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[62810-62874]:ExpressionStatement[62881-62945]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63269-63275]:Modifier[63340-63346]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[63276-63280]:PrimitiveType[63347-63351]"
  }, {
    "left" : "sinh",
    "right" : "sinh",
    "info" : "SimpleName[63281-63285]:SimpleName[63352-63356]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[63286-63308]:SingleVariableDeclaration[63357-63379]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[63310-63333]:SingleVariableDeclaration[63381-63404]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[63356-63377]:SingleVariableDeclaration[63427-63448]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[63379-63401]:SingleVariableDeclaration[63450-63472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63403-63897]:Block[63474-63968]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[63467-63509]:VariableDeclarationStatement[63538-63580]"
  }, {
    "left" : "function[0] = FastMath.sinh(operand[operandOffset]);",
    "right" : "function[0] = FastMath.sinh(operand[operandOffset]);",
    "info" : "ExpressionStatement[63518-63570]:ExpressionStatement[63589-63641]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[63579-63778]:IfStatement[63650-63849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63594-63778]:Block[63665-63849]"
  }, {
    "left" : "function[1] = FastMath.cosh(operand[operandOffset]);",
    "right" : "function[1] = FastMath.cosh(operand[operandOffset]);",
    "info" : "ExpressionStatement[63608-63660]:ExpressionStatement[63679-63731]"
  }, {
    "left" : "for (int i = 2; i <= order; ++i)",
    "right" : "for (int i = 2; i <= order; ++i)",
    "info" : "ForStatement[63673-63768]:ForStatement[63744-63839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63706-63768]:Block[63777-63839]"
  }, {
    "left" : "function[i] = function[i - 2];",
    "right" : "function[i] = function[i - 2];",
    "info" : "ExpressionStatement[63724-63754]:ExpressionStatement[63795-63825]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[63826-63890]:ExpressionStatement[63897-63961]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64291-64297]:Modifier[64362-64368]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64298-64302]:PrimitiveType[64369-64373]"
  }, {
    "left" : "tanh",
    "right" : "tanh",
    "info" : "SimpleName[64303-64307]:SimpleName[64374-64378]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[64308-64330]:SingleVariableDeclaration[64379-64401]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[64332-64355]:SingleVariableDeclaration[64403-64426]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[64378-64399]:SingleVariableDeclaration[64449-64470]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[64401-64423]:SingleVariableDeclaration[64472-64494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64425-65992]:Block[64496-66063]"
  }, {
    "left" : "final double[] function = new double[1 + order];",
    "right" : "final double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[64489-64537]:VariableDeclarationStatement[64560-64608]"
  }, {
    "left" : "final double t = FastMath.tanh(operand[operandOffset]);",
    "right" : "final double t = FastMath.tanh(operand[operandOffset]);",
    "info" : "VariableDeclarationStatement[64546-64601]:VariableDeclarationStatement[64617-64672]"
  }, {
    "left" : "function[0] = t;",
    "right" : "function[0] = t;",
    "info" : "ExpressionStatement[64610-64626]:ExpressionStatement[64681-64697]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[64636-65873]:IfStatement[64707-65944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64651-65873]:Block[64722-65944]"
  }, {
    "left" : "final double[] p = new double[order + 2];",
    "right" : "final double[] p = new double[order + 2];",
    "info" : "VariableDeclarationStatement[65137-65178]:VariableDeclarationStatement[65208-65249]"
  }, {
    "left" : "p[1] = 1;",
    "right" : "p[1] = 1;",
    "info" : "ExpressionStatement[65191-65200]:ExpressionStatement[65262-65271]"
  }, {
    "left" : "final double t2 = t * t;",
    "right" : "final double t2 = t * t;",
    "info" : "VariableDeclarationStatement[65213-65237]:VariableDeclarationStatement[65284-65308]"
  }, {
    "left" : "for (int n = 1; n <= order; ++n)",
    "right" : "for (int n = 1; n <= order; ++n)",
    "info" : "ForStatement[65250-65863]:ForStatement[65321-65934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65283-65863]:Block[65354-65934]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[65359-65372]:VariableDeclarationStatement[65430-65443]"
  }, {
    "left" : "p[n + 1] = -n * p[n];",
    "right" : "p[n + 1] = -n * p[n];",
    "info" : "ExpressionStatement[65389-65410]:ExpressionStatement[65460-65481]"
  }, {
    "left" : "for (int k = n + 1; k >= 0; k -= 2)",
    "right" : "for (int k = n + 1; k >= 0; k -= 2)",
    "info" : "ForStatement[65427-65730]:ForStatement[65498-65801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65463-65730]:Block[65534-65801]"
  }, {
    "left" : "v = v * t2 + p[k];",
    "right" : "v = v * t2 + p[k];",
    "info" : "ExpressionStatement[65485-65503]:ExpressionStatement[65556-65574]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[65524-65712]:IfStatement[65595-65783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65535-65634]:Block[65606-65705]"
  }, {
    "left" : "p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];",
    "right" : "p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];",
    "info" : "ExpressionStatement[65561-65612]:ExpressionStatement[65632-65683]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[65640-65712]:IfStatement[65711-65783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65652-65712]:Block[65723-65783]"
  }, {
    "left" : "p[0] = p[1];",
    "right" : "p[0] = p[1];",
    "info" : "ExpressionStatement[65678-65690]:ExpressionStatement[65749-65761]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[65747-65814]:IfStatement[65818-65885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65767-65814]:Block[65838-65885]"
  }, {
    "left" : "v *= t;",
    "right" : "v *= t;",
    "info" : "ExpressionStatement[65789-65796]:ExpressionStatement[65860-65867]"
  }, {
    "left" : "function[n] = v;",
    "right" : "function[n] = v;",
    "info" : "ExpressionStatement[65832-65848]:ExpressionStatement[65903-65919]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[65921-65985]:ExpressionStatement[65992-66056]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66400-66406]:Modifier[66471-66477]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66407-66411]:PrimitiveType[66478-66482]"
  }, {
    "left" : "acosh",
    "right" : "acosh",
    "info" : "SimpleName[66412-66417]:SimpleName[66483-66488]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[66418-66440]:SingleVariableDeclaration[66489-66511]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[66442-66465]:SingleVariableDeclaration[66513-66536]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[66488-66509]:SingleVariableDeclaration[66559-66580]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[66511-66533]:SingleVariableDeclaration[66582-66604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66535-68304]:Block[66606-68375]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[66599-66641]:VariableDeclarationStatement[66670-66712]"
  }, {
    "left" : "final double x = operand[operandOffset];",
    "right" : "final double x = operand[operandOffset];",
    "info" : "VariableDeclarationStatement[66650-66690]:VariableDeclarationStatement[66721-66761]"
  }, {
    "left" : "function[0] = FastMath.acosh(x);",
    "right" : "function[0] = FastMath.acosh(x);",
    "info" : "ExpressionStatement[66699-66731]:ExpressionStatement[66770-66802]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[66740-68185]:IfStatement[66811-68256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66755-68185]:Block[66826-68256]"
  }, {
    "left" : "final double[] p = new double[order];",
    "right" : "final double[] p = new double[order];",
    "info" : "VariableDeclarationStatement[67270-67307]:VariableDeclarationStatement[67341-67378]"
  }, {
    "left" : "p[0] = 1;",
    "right" : "p[0] = 1;",
    "info" : "ExpressionStatement[67320-67329]:ExpressionStatement[67391-67400]"
  }, {
    "left" : "final double x2  = x * x;",
    "right" : "final double x2  = x * x;",
    "info" : "VariableDeclarationStatement[67342-67367]:VariableDeclarationStatement[67413-67438]"
  }, {
    "left" : "final double f   = 1.0 / (x2 - 1);",
    "right" : "final double f   = 1.0 / (x2 - 1);",
    "info" : "VariableDeclarationStatement[67380-67414]:VariableDeclarationStatement[67451-67485]"
  }, {
    "left" : "double coeff = FastMath.sqrt(f);",
    "right" : "double coeff = FastMath.sqrt(f);",
    "info" : "VariableDeclarationStatement[67427-67459]:VariableDeclarationStatement[67498-67530]"
  }, {
    "left" : "function[1] = coeff * p[0];",
    "right" : "function[1] = coeff * p[0];",
    "info" : "ExpressionStatement[67472-67499]:ExpressionStatement[67543-67570]"
  }, {
    "left" : "for (int n = 2; n <= order; ++n)",
    "right" : "for (int n = 2; n <= order; ++n)",
    "info" : "ForStatement[67512-68175]:ForStatement[67583-68246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67545-68175]:Block[67616-68246]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[67621-67634]:VariableDeclarationStatement[67692-67705]"
  }, {
    "left" : "p[n - 1] = (1 - n) * p[n - 2];",
    "right" : "p[n - 1] = (1 - n) * p[n - 2];",
    "info" : "ExpressionStatement[67651-67681]:ExpressionStatement[67722-67752]"
  }, {
    "left" : "for (int k = n - 1; k >= 0; k -= 2)",
    "right" : "for (int k = n - 1; k >= 0; k -= 2)",
    "info" : "ForStatement[67698-68006]:ForStatement[67769-68077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67734-68006]:Block[67805-68077]"
  }, {
    "left" : "v = v * x2 + p[k];",
    "right" : "v = v * x2 + p[k];",
    "info" : "ExpressionStatement[67756-67774]:ExpressionStatement[67827-67845]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[67795-67988]:IfStatement[67866-68059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67806-67909]:Block[67877-67980]"
  }, {
    "left" : "p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];",
    "right" : "p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];",
    "info" : "ExpressionStatement[67832-67887]:ExpressionStatement[67903-67958]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[67915-67988]:IfStatement[67986-68059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67927-67988]:Block[67998-68059]"
  }, {
    "left" : "p[0] = -p[1];",
    "right" : "p[0] = -p[1];",
    "info" : "ExpressionStatement[67953-67966]:ExpressionStatement[68024-68037]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[68023-68090]:IfStatement[68094-68161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68043-68090]:Block[68114-68161]"
  }, {
    "left" : "v *= x;",
    "right" : "v *= x;",
    "info" : "ExpressionStatement[68065-68072]:ExpressionStatement[68136-68143]"
  }, {
    "left" : "coeff *= f;",
    "right" : "coeff *= f;",
    "info" : "ExpressionStatement[68108-68119]:ExpressionStatement[68179-68190]"
  }, {
    "left" : "function[n] = coeff * v;",
    "right" : "function[n] = coeff * v;",
    "info" : "ExpressionStatement[68136-68160]:ExpressionStatement[68207-68231]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[68233-68297]:ExpressionStatement[68304-68368]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[68708-68714]:Modifier[68779-68785]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68715-68719]:PrimitiveType[68786-68790]"
  }, {
    "left" : "asinh",
    "right" : "asinh",
    "info" : "SimpleName[68720-68725]:SimpleName[68791-68796]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[68726-68748]:SingleVariableDeclaration[68797-68819]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[68750-68773]:SingleVariableDeclaration[68821-68844]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[68796-68817]:SingleVariableDeclaration[68867-68888]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[68819-68841]:SingleVariableDeclaration[68890-68912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68843-70615]:Block[68914-70686]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[68907-68949]:VariableDeclarationStatement[68978-69020]"
  }, {
    "left" : "final double x = operand[operandOffset];",
    "right" : "final double x = operand[operandOffset];",
    "info" : "VariableDeclarationStatement[68958-68998]:VariableDeclarationStatement[69029-69069]"
  }, {
    "left" : "function[0] = FastMath.asinh(x);",
    "right" : "function[0] = FastMath.asinh(x);",
    "info" : "ExpressionStatement[69007-69039]:ExpressionStatement[69078-69110]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[69048-70496]:IfStatement[69119-70567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69063-70496]:Block[69134-70567]"
  }, {
    "left" : "final double[] p = new double[order];",
    "right" : "final double[] p = new double[order];",
    "info" : "VariableDeclarationStatement[69578-69615]:VariableDeclarationStatement[69649-69686]"
  }, {
    "left" : "p[0] = 1;",
    "right" : "p[0] = 1;",
    "info" : "ExpressionStatement[69628-69637]:ExpressionStatement[69699-69708]"
  }, {
    "left" : "final double x2    = x * x;",
    "right" : "final double x2    = x * x;",
    "info" : "VariableDeclarationStatement[69650-69677]:VariableDeclarationStatement[69721-69748]"
  }, {
    "left" : "final double f     = 1.0 / (1 + x2);",
    "right" : "final double f     = 1.0 / (1 + x2);",
    "info" : "VariableDeclarationStatement[69690-69726]:VariableDeclarationStatement[69761-69797]"
  }, {
    "left" : "double coeff = FastMath.sqrt(f);",
    "right" : "double coeff = FastMath.sqrt(f);",
    "info" : "VariableDeclarationStatement[69739-69771]:VariableDeclarationStatement[69810-69842]"
  }, {
    "left" : "function[1] = coeff * p[0];",
    "right" : "function[1] = coeff * p[0];",
    "info" : "ExpressionStatement[69784-69811]:ExpressionStatement[69855-69882]"
  }, {
    "left" : "for (int n = 2; n <= order; ++n)",
    "right" : "for (int n = 2; n <= order; ++n)",
    "info" : "ForStatement[69824-70486]:ForStatement[69895-70557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69857-70486]:Block[69928-70557]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[69933-69946]:VariableDeclarationStatement[70004-70017]"
  }, {
    "left" : "p[n - 1] = (1 - n) * p[n - 2];",
    "right" : "p[n - 1] = (1 - n) * p[n - 2];",
    "info" : "ExpressionStatement[69963-69993]:ExpressionStatement[70034-70064]"
  }, {
    "left" : "for (int k = n - 1; k >= 0; k -= 2)",
    "right" : "for (int k = n - 1; k >= 0; k -= 2)",
    "info" : "ForStatement[70010-70317]:ForStatement[70081-70388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70046-70317]:Block[70117-70388]"
  }, {
    "left" : "v = v * x2 + p[k];",
    "right" : "v = v * x2 + p[k];",
    "info" : "ExpressionStatement[70068-70086]:ExpressionStatement[70139-70157]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[70107-70299]:IfStatement[70178-70370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70118-70221]:Block[70189-70292]"
  }, {
    "left" : "p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];",
    "right" : "p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];",
    "info" : "ExpressionStatement[70144-70199]:ExpressionStatement[70215-70270]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[70227-70299]:IfStatement[70298-70370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70239-70299]:Block[70310-70370]"
  }, {
    "left" : "p[0] = p[1];",
    "right" : "p[0] = p[1];",
    "info" : "ExpressionStatement[70265-70277]:ExpressionStatement[70336-70348]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[70334-70401]:IfStatement[70405-70472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70354-70401]:Block[70425-70472]"
  }, {
    "left" : "v *= x;",
    "right" : "v *= x;",
    "info" : "ExpressionStatement[70376-70383]:ExpressionStatement[70447-70454]"
  }, {
    "left" : "coeff *= f;",
    "right" : "coeff *= f;",
    "info" : "ExpressionStatement[70419-70430]:ExpressionStatement[70490-70501]"
  }, {
    "left" : "function[n] = coeff * v;",
    "right" : "function[n] = coeff * v;",
    "info" : "ExpressionStatement[70447-70471]:ExpressionStatement[70518-70542]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[70544-70608]:ExpressionStatement[70615-70679]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[71025-71031]:Modifier[71096-71102]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[71032-71036]:PrimitiveType[71103-71107]"
  }, {
    "left" : "atanh",
    "right" : "atanh",
    "info" : "SimpleName[71037-71042]:SimpleName[71108-71113]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[71043-71065]:SingleVariableDeclaration[71114-71136]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[71067-71090]:SingleVariableDeclaration[71138-71161]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[71114-71135]:SingleVariableDeclaration[71185-71206]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[71137-71159]:SingleVariableDeclaration[71208-71230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71161-72901]:Block[71232-72972]"
  }, {
    "left" : "double[] function = new double[1 + order];",
    "right" : "double[] function = new double[1 + order];",
    "info" : "VariableDeclarationStatement[71225-71267]:VariableDeclarationStatement[71296-71338]"
  }, {
    "left" : "final double x = operand[operandOffset];",
    "right" : "final double x = operand[operandOffset];",
    "info" : "VariableDeclarationStatement[71276-71316]:VariableDeclarationStatement[71347-71387]"
  }, {
    "left" : "function[0] = FastMath.atanh(x);",
    "right" : "function[0] = FastMath.atanh(x);",
    "info" : "ExpressionStatement[71325-71357]:ExpressionStatement[71396-71428]"
  }, {
    "left" : "if (order > 0)",
    "right" : "if (order > 0)",
    "info" : "IfStatement[71366-72782]:IfStatement[71437-72853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71381-72782]:Block[71452-72853]"
  }, {
    "left" : "final double[] q = new double[order];",
    "right" : "final double[] q = new double[order];",
    "info" : "VariableDeclarationStatement[71887-71924]:VariableDeclarationStatement[71958-71995]"
  }, {
    "left" : "q[0] = 1;",
    "right" : "q[0] = 1;",
    "info" : "ExpressionStatement[71937-71946]:ExpressionStatement[72008-72017]"
  }, {
    "left" : "final double x2 = x * x;",
    "right" : "final double x2 = x * x;",
    "info" : "VariableDeclarationStatement[71959-71983]:VariableDeclarationStatement[72030-72054]"
  }, {
    "left" : "final double f  = 1.0 / (1 - x2);",
    "right" : "final double f  = 1.0 / (1 - x2);",
    "info" : "VariableDeclarationStatement[71996-72029]:VariableDeclarationStatement[72067-72100]"
  }, {
    "left" : "double coeff = f;",
    "right" : "double coeff = f;",
    "info" : "VariableDeclarationStatement[72042-72059]:VariableDeclarationStatement[72113-72130]"
  }, {
    "left" : "function[1] = coeff * q[0];",
    "right" : "function[1] = coeff * q[0];",
    "info" : "ExpressionStatement[72072-72099]:ExpressionStatement[72143-72170]"
  }, {
    "left" : "for (int n = 2; n <= order; ++n)",
    "right" : "for (int n = 2; n <= order; ++n)",
    "info" : "ForStatement[72112-72772]:ForStatement[72183-72843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72145-72772]:Block[72216-72843]"
  }, {
    "left" : "double v = 0;",
    "right" : "double v = 0;",
    "info" : "VariableDeclarationStatement[72221-72234]:VariableDeclarationStatement[72292-72305]"
  }, {
    "left" : "q[n - 1] = n * q[n - 2];",
    "right" : "q[n - 1] = n * q[n - 2];",
    "info" : "ExpressionStatement[72251-72275]:ExpressionStatement[72322-72346]"
  }, {
    "left" : "for (int k = n - 1; k >= 0; k -= 2)",
    "right" : "for (int k = n - 1; k >= 0; k -= 2)",
    "info" : "ForStatement[72292-72603]:ForStatement[72363-72674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72328-72603]:Block[72399-72674]"
  }, {
    "left" : "v = v * x2 + q[k];",
    "right" : "v = v * x2 + q[k];",
    "info" : "ExpressionStatement[72350-72368]:ExpressionStatement[72421-72439]"
  }, {
    "left" : "if (k > 2)",
    "right" : "if (k > 2)",
    "info" : "IfStatement[72389-72585]:IfStatement[72460-72656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72400-72507]:Block[72471-72578]"
  }, {
    "left" : "q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];",
    "right" : "q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];",
    "info" : "ExpressionStatement[72426-72485]:ExpressionStatement[72497-72556]"
  }, {
    "left" : "if (k == 2)",
    "right" : "if (k == 2)",
    "info" : "IfStatement[72513-72585]:IfStatement[72584-72656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72525-72585]:Block[72596-72656]"
  }, {
    "left" : "q[0] = q[1];",
    "right" : "q[0] = q[1];",
    "info" : "ExpressionStatement[72551-72563]:ExpressionStatement[72622-72634]"
  }, {
    "left" : "if ((n & 0x1) == 0)",
    "right" : "if ((n & 0x1) == 0)",
    "info" : "IfStatement[72620-72687]:IfStatement[72691-72758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72640-72687]:Block[72711-72758]"
  }, {
    "left" : "v *= x;",
    "right" : "v *= x;",
    "info" : "ExpressionStatement[72662-72669]:ExpressionStatement[72733-72740]"
  }, {
    "left" : "coeff *= f;",
    "right" : "coeff *= f;",
    "info" : "ExpressionStatement[72705-72716]:ExpressionStatement[72776-72787]"
  }, {
    "left" : "function[n] = coeff * v;",
    "right" : "function[n] = coeff * v;",
    "info" : "ExpressionStatement[72733-72757]:ExpressionStatement[72804-72828]"
  }, {
    "left" : "compose(operand, operandOffset, function, result, resultOffset);",
    "right" : "compose(operand, operandOffset, function, result, resultOffset);",
    "info" : "ExpressionStatement[72830-72894]:ExpressionStatement[72901-72965]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[73428-73434]:Modifier[73499-73505]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[73435-73439]:PrimitiveType[73506-73510]"
  }, {
    "left" : "compose",
    "right" : "compose",
    "info" : "SimpleName[73440-73447]:SimpleName[73511-73518]"
  }, {
    "left" : "final double[] operand",
    "right" : "final double[] operand",
    "info" : "SingleVariableDeclaration[73448-73470]:SingleVariableDeclaration[73519-73541]"
  }, {
    "left" : "final int operandOffset",
    "right" : "final int operandOffset",
    "info" : "SingleVariableDeclaration[73472-73495]:SingleVariableDeclaration[73543-73566]"
  }, {
    "left" : "final double[] f",
    "right" : "final double[] f",
    "info" : "SingleVariableDeclaration[73497-73513]:SingleVariableDeclaration[73568-73584]"
  }, {
    "left" : "final double[] result",
    "right" : "final double[] result",
    "info" : "SingleVariableDeclaration[73539-73560]:SingleVariableDeclaration[73610-73631]"
  }, {
    "left" : "final int resultOffset",
    "right" : "final int resultOffset",
    "info" : "SingleVariableDeclaration[73562-73584]:SingleVariableDeclaration[73633-73655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73586-74154]:Block[73657-74225]"
  }, {
    "left" : "for (int i = 0; i < compIndirection.length; ++i)",
    "right" : "for (int i = 0; i < compIndirection.length; ++i)",
    "info" : "ForStatement[73596-74148]:ForStatement[73667-74219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73645-74148]:Block[73716-74219]"
  }, {
    "left" : "final int[][] mappingI = compIndirection[i];",
    "right" : "final int[][] mappingI = compIndirection[i];",
    "info" : "VariableDeclarationStatement[73659-73703]:VariableDeclarationStatement[73730-73774]"
  }, {
    "left" : "double r = 0;",
    "right" : "double r = 0;",
    "info" : "VariableDeclarationStatement[73716-73729]:VariableDeclarationStatement[73787-73800]"
  }, {
    "left" : "for (int j = 0; j < mappingI.length; ++j)",
    "right" : "for (int j = 0; j < mappingI.length; ++j)",
    "info" : "ForStatement[73742-74096]:ForStatement[73813-74167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73784-74096]:Block[73855-74167]"
  }, {
    "left" : "final int[] mappingIJ = mappingI[j];",
    "right" : "final int[] mappingIJ = mappingI[j];",
    "info" : "VariableDeclarationStatement[73802-73838]:VariableDeclarationStatement[73873-73909]"
  }, {
    "left" : "double product = mappingIJ[0] * f[mappingIJ[1]];",
    "right" : "double product = mappingIJ[0] * f[mappingIJ[1]];",
    "info" : "VariableDeclarationStatement[73855-73903]:VariableDeclarationStatement[73926-73974]"
  }, {
    "left" : "for (int k = 2; k < mappingIJ.length; ++k)",
    "right" : "for (int k = 2; k < mappingIJ.length; ++k)",
    "info" : "ForStatement[73920-74052]:ForStatement[73991-74123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73963-74052]:Block[74034-74123]"
  }, {
    "left" : "product *= operand[operandOffset + mappingIJ[k]];",
    "right" : "product *= operand[operandOffset + mappingIJ[k]];",
    "info" : "ExpressionStatement[73985-74034]:ExpressionStatement[74056-74105]"
  }, {
    "left" : "r += product;",
    "right" : "r += product;",
    "info" : "ExpressionStatement[74069-74082]:ExpressionStatement[74140-74153]"
  }, {
    "left" : "result[resultOffset + i] = r;",
    "right" : "result[resultOffset + i] = r;",
    "info" : "ExpressionStatement[74109-74138]:ExpressionStatement[74180-74209]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[74501-74507]:Modifier[74572-74578]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[74508-74514]:PrimitiveType[74579-74585]"
  }, {
    "left" : "taylor",
    "right" : "taylor",
    "info" : "SimpleName[74515-74521]:SimpleName[74586-74592]"
  }, {
    "left" : "final double[] ds",
    "right" : "final double[] ds",
    "info" : "SingleVariableDeclaration[74522-74539]:SingleVariableDeclaration[74593-74610]"
  }, {
    "left" : "final int dsOffset",
    "right" : "final int dsOffset",
    "info" : "SingleVariableDeclaration[74541-74559]:SingleVariableDeclaration[74612-74630]"
  }, {
    "left" : "final double ... delta",
    "right" : "final double ... delta",
    "info" : "SingleVariableDeclaration[74561-74583]:SingleVariableDeclaration[74632-74654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74585-75061]:Block[74656-75132]"
  }, {
    "left" : "double value = 0;",
    "right" : "double value = 0;",
    "info" : "VariableDeclarationStatement[74595-74612]:VariableDeclarationStatement[74666-74683]"
  }, {
    "left" : "for (int i = getSize() - 1; i >= 0; --i)",
    "right" : "for (int i = getSize() - 1; i >= 0; --i)",
    "info" : "ForStatement[74621-75033]:ForStatement[74692-75104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74662-75033]:Block[74733-75104]"
  }, {
    "left" : "final int[] orders = getPartialDerivativeOrders(i);",
    "right" : "final int[] orders = getPartialDerivativeOrders(i);",
    "info" : "VariableDeclarationStatement[74676-74727]:VariableDeclarationStatement[74747-74798]"
  }, {
    "left" : "double term = ds[dsOffset + i];",
    "right" : "double term = ds[dsOffset + i];",
    "info" : "VariableDeclarationStatement[74740-74771]:VariableDeclarationStatement[74811-74842]"
  }, {
    "left" : "for (int k = 0; k < orders.length; ++k)",
    "right" : "for (int k = 0; k < orders.length; ++k)",
    "info" : "ForStatement[74784-74996]:ForStatement[74855-75067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74824-74996]:Block[74895-75067]"
  }, {
    "left" : "if (orders[k] > 0)",
    "right" : "if (orders[k] > 0)",
    "info" : "IfStatement[74842-74982]:IfStatement[74913-75053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74861-74982]:Block[74932-75053]"
  }, {
    "left" : "term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);",
    "right" : "term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);",
    "info" : "ExpressionStatement[74883-74964]:ExpressionStatement[74954-75035]"
  }, {
    "left" : "value += term;",
    "right" : "value += term;",
    "info" : "ExpressionStatement[75009-75023]:ExpressionStatement[75080-75094]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[75042-75055]:ReturnStatement[75113-75126]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[75279-75285]:Modifier[75350-75356]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[75286-75290]:PrimitiveType[75357-75361]"
  }, {
    "left" : "checkCompatibility",
    "right" : "checkCompatibility",
    "info" : "SimpleName[75291-75309]:SimpleName[75362-75380]"
  }, {
    "left" : "final DSCompiler compiler",
    "right" : "final DSCompiler compiler",
    "info" : "SingleVariableDeclaration[75310-75335]:SingleVariableDeclaration[75381-75406]"
  }, {
    "left" : "DimensionMismatchException",
    "right" : "DimensionMismatchException",
    "info" : "SimpleType[75356-75382]:SimpleType[75427-75453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75383-75654]:Block[75454-75725]"
  }, {
    "left" : "if (parameters != compiler.parameters)",
    "right" : "if (parameters != compiler.parameters)",
    "info" : "IfStatement[75393-75526]:IfStatement[75464-75597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75432-75526]:Block[75503-75597]"
  }, {
    "left" : "throw new DimensionMismatchException(parameters, compiler.parameters);",
    "right" : "throw new DimensionMismatchException(parameters, compiler.parameters);",
    "info" : "ThrowStatement[75446-75516]:ThrowStatement[75517-75587]"
  }, {
    "left" : "if (order != compiler.order)",
    "right" : "if (order != compiler.order)",
    "info" : "IfStatement[75535-75648]:IfStatement[75606-75719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75564-75648]:Block[75635-75719]"
  }, {
    "left" : "throw new DimensionMismatchException(order, compiler.order);",
    "right" : "throw new DimensionMismatchException(order, compiler.order);",
    "info" : "ThrowStatement[75578-75638]:ThrowStatement[75649-75709]"
  } ]
}