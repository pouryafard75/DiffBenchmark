{
  "matchedElements" : [
 {
    "left" : "class : Base64",
    "right" : "class : Base64",
    "info" : "TypeDeclaration[1073-40878]:TypeDeclaration[1073-40894]"
  }, {
    "left" : "DEFAULT_BUFFER_RESIZE_FACTOR",
    "right" : "DEFAULT_BUFFER_RESIZE_FACTOR",
    "info" : "FieldDeclaration[2206-2264]:FieldDeclaration[2206-2264]"
  }, {
    "left" : "DEFAULT_BUFFER_SIZE",
    "right" : "DEFAULT_BUFFER_SIZE",
    "info" : "FieldDeclaration[2270-2322]:FieldDeclaration[2270-2322]"
  }, {
    "left" : "MIME_CHUNK_SIZE",
    "right" : "MIME_CHUNK_SIZE",
    "info" : "FieldDeclaration[2328-2698]:FieldDeclaration[2328-2698]"
  }, {
    "left" : "PEM_CHUNK_SIZE",
    "right" : "PEM_CHUNK_SIZE",
    "info" : "FieldDeclaration[2704-3078]:FieldDeclaration[2704-3078]"
  }, {
    "left" : "CHUNK_SEPARATOR",
    "right" : "CHUNK_SEPARATOR",
    "info" : "FieldDeclaration[3084-3409]:FieldDeclaration[3084-3409]"
  }, {
    "left" : "STANDARD_ENCODE_TABLE",
    "right" : "STANDARD_ENCODE_TABLE",
    "info" : "FieldDeclaration[3415-4197]:FieldDeclaration[3415-4197]"
  }, {
    "left" : "URL_SAFE_ENCODE_TABLE",
    "right" : "URL_SAFE_ENCODE_TABLE",
    "info" : "FieldDeclaration[4203-4887]:FieldDeclaration[4203-4887]"
  }, {
    "left" : "PAD",
    "right" : "PAD",
    "info" : "FieldDeclaration[4893-4977]:FieldDeclaration[4893-4977]"
  }, {
    "left" : "DECODE_TABLE",
    "right" : "DECODE_TABLE",
    "info" : "FieldDeclaration[4983-6320]:FieldDeclaration[4983-6320]"
  }, {
    "left" : "MASK_6BITS",
    "right" : "MASK_6BITS",
    "info" : "FieldDeclaration[6326-6428]:FieldDeclaration[6326-6428]"
  }, {
    "left" : "MASK_8BITS",
    "right" : "MASK_8BITS",
    "info" : "FieldDeclaration[6434-6547]:FieldDeclaration[6434-6547]"
  }, {
    "left" : "encodeTable",
    "right" : "encodeTable",
    "info" : "FieldDeclaration[6817-7132]:FieldDeclaration[6817-7132]"
  }, {
    "left" : "lineLength",
    "right" : "lineLength",
    "info" : "FieldDeclaration[7138-7319]:FieldDeclaration[7138-7319]"
  }, {
    "left" : "lineSeparator",
    "right" : "lineSeparator",
    "info" : "FieldDeclaration[7325-7465]:FieldDeclaration[7325-7465]"
  }, {
    "left" : "decodeSize",
    "right" : "decodeSize",
    "info" : "FieldDeclaration[7471-7688]:FieldDeclaration[7471-7688]"
  }, {
    "left" : "encodeSize",
    "right" : "encodeSize",
    "info" : "FieldDeclaration[7694-7911]:FieldDeclaration[7694-7911]"
  }, {
    "left" : "buffer",
    "right" : "buffer",
    "info" : "FieldDeclaration[7917-7984]:FieldDeclaration[7917-7984]"
  }, {
    "left" : "pos",
    "right" : "pos",
    "info" : "FieldDeclaration[7990-8092]:FieldDeclaration[7990-8092]"
  }, {
    "left" : "readPos",
    "right" : "readPos",
    "info" : "FieldDeclaration[8098-8203]:FieldDeclaration[8098-8203]"
  }, {
    "left" : "currentLinePos",
    "right" : "currentLinePos",
    "info" : "FieldDeclaration[8209-8457]:FieldDeclaration[8209-8457]"
  }, {
    "left" : "modulus",
    "right" : "modulus",
    "info" : "FieldDeclaration[8463-8644]:FieldDeclaration[8463-8644]"
  }, {
    "left" : "eof",
    "right" : "eof",
    "info" : "FieldDeclaration[8650-8839]:FieldDeclaration[8650-8839]"
  }, {
    "left" : "x",
    "right" : "x",
    "info" : "FieldDeclaration[8845-9048]:FieldDeclaration[8845-9048]"
  }, {
    "left" : "public Base64()",
    "right" : "public Base64()",
    "info" : "MethodDeclaration[9054-9412]:MethodDeclaration[9054-9412]"
  }, {
    "left" : "public Base64(urlSafe boolean)",
    "right" : "public Base64(urlSafe boolean)",
    "info" : "MethodDeclaration[9418-10043]:MethodDeclaration[9418-10043]"
  }, {
    "left" : "public Base64(lineLength int)",
    "right" : "public Base64(lineLength int)",
    "info" : "MethodDeclaration[10049-10915]:MethodDeclaration[10049-10915]"
  }, {
    "left" : "public Base64(lineLength int, lineSeparator )",
    "right" : "public Base64(lineLength int, lineSeparator )",
    "info" : "MethodDeclaration[10921-12047]:MethodDeclaration[10921-12047]"
  }, {
    "left" : "public Base64(lineLength int, lineSeparator , urlSafe boolean)",
    "right" : "public Base64(lineLength int, lineSeparator , urlSafe boolean)",
    "info" : "MethodDeclaration[12053-14285]:MethodDeclaration[12053-14285]"
  }, {
    "left" : "public isUrlSafe() : boolean",
    "right" : "public isUrlSafe() : boolean",
    "info" : "MethodDeclaration[14291-14570]:MethodDeclaration[14291-14570]"
  }, {
    "left" : "package hasData() : boolean",
    "right" : "package hasData() : boolean",
    "info" : "MethodDeclaration[14576-14809]:MethodDeclaration[14576-14809]"
  }, {
    "left" : "package avail() : int",
    "right" : "package avail() : int",
    "info" : "MethodDeclaration[14815-15041]:MethodDeclaration[14815-15041]"
  }, {
    "left" : "private resizeBuffer() : void",
    "right" : "private resizeBuffer() : void",
    "info" : "MethodDeclaration[15047-15433]:MethodDeclaration[15047-15433]"
  }, {
    "left" : "package readResults(b , bPos int, bAvail int) : int",
    "right" : "package readResults(b , bPos int, bAvail int) : int",
    "info" : "MethodDeclaration[15439-16391]:MethodDeclaration[15439-16391]"
  }, {
    "left" : "package encode(in , inPos int, inAvail int) : void",
    "right" : "package encode(in , inPos int, inAvail int) : void",
    "info" : "MethodDeclaration[16397-19998]:MethodDeclaration[16397-19998]"
  }, {
    "left" : "package decode(in , inPos int, inAvail int) : void",
    "right" : "package decode(in , inPos int, inAvail int) : void",
    "info" : "MethodDeclaration[20004-23284]:MethodDeclaration[20004-23284]"
  }, {
    "left" : "public isBase64(octet byte) : boolean",
    "right" : "public isBase64(octet byte) : boolean",
    "info" : "MethodDeclaration[23290-23740]:MethodDeclaration[23290-23740]"
  }, {
    "left" : "public isBase64(base64 ) : boolean",
    "right" : "public isBase64(base64 ) : boolean",
    "info" : "MethodDeclaration[23746-24292]:MethodDeclaration[23746-24292]"
  }, {
    "left" : "public isArrayByteBase64(arrayOctet ) : boolean",
    "right" : "public isArrayByteBase64(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[24298-24866]:MethodDeclaration[24298-24866]"
  }, {
    "left" : "public isBase64(arrayOctet ) : boolean",
    "right" : "public isBase64(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[24876-25572]:MethodDeclaration[24876-25572]"
  }, {
    "left" : "private containsBase64Byte(arrayOctet ) : boolean",
    "right" : "private containsBase64Byte(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[25582-26123]:MethodDeclaration[25582-26123]"
  }, {
    "left" : "public encodeBase64(binaryData ) : ",
    "right" : "public encodeBase64(binaryData ) : ",
    "info" : "MethodDeclaration[26129-26493]:MethodDeclaration[26129-26493]"
  }, {
    "left" : "public encodeBase64String(binaryData ) : ",
    "right" : "public encodeBase64String(binaryData ) : ",
    "info" : "MethodDeclaration[26499-27106]:MethodDeclaration[26499-27106]"
  }, {
    "left" : "public encodeBase64URLSafe(binaryData ) : ",
    "right" : "public encodeBase64URLSafe(binaryData ) : ",
    "info" : "MethodDeclaration[27116-27610]:MethodDeclaration[27116-27610]"
  }, {
    "left" : "public encodeBase64URLSafeString(binaryData ) : ",
    "right" : "public encodeBase64URLSafeString(binaryData ) : ",
    "info" : "MethodDeclaration[27616-28115]:MethodDeclaration[27616-28115]"
  }, {
    "left" : "public encodeBase64Chunked(binaryData ) : ",
    "right" : "public encodeBase64Chunked(binaryData ) : ",
    "info" : "MethodDeclaration[28125-28501]:MethodDeclaration[28125-28501]"
  }, {
    "left" : "public decode(pObject ) : ",
    "right" : "public decode(pObject ) : ",
    "info" : "MethodDeclaration[28507-29434]:MethodDeclaration[28507-29434]"
  }, {
    "left" : "public decode(pArray ) : ",
    "right" : "public decode(pArray ) : ",
    "info" : "MethodDeclaration[29440-29783]:MethodDeclaration[29440-29783]"
  }, {
    "left" : "public decode(pArray ) : ",
    "right" : "public decode(pArray ) : ",
    "info" : "MethodDeclaration[29789-30376]:MethodDeclaration[29789-30376]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean) : ",
    "info" : "MethodDeclaration[30382-31052]:MethodDeclaration[30382-31052]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean) : ",
    "info" : "MethodDeclaration[31058-31917]:MethodDeclaration[31058-31917]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean, maxResultSize int) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean, maxResultSize int) : ",
    "info" : "MethodDeclaration[31923-33389]:MethodDeclaration[31923-33405]"
  }, {
    "left" : "public decodeBase64(base64String ) : ",
    "right" : "public decodeBase64(base64String ) : ",
    "info" : "MethodDeclaration[33395-33712]:MethodDeclaration[33411-33728]"
  }, {
    "left" : "public decodeBase64(base64Data ) : ",
    "right" : "public decodeBase64(base64Data ) : ",
    "info" : "MethodDeclaration[33718-34012]:MethodDeclaration[33734-34028]"
  }, {
    "left" : "package discardWhitespace(data ) : ",
    "right" : "package discardWhitespace(data ) : ",
    "info" : "MethodDeclaration[34018-34911]:MethodDeclaration[34034-34927]"
  }, {
    "left" : "private isWhiteSpace(byteToCheck byte) : boolean",
    "right" : "private isWhiteSpace(byteToCheck byte) : boolean",
    "info" : "MethodDeclaration[34917-35392]:MethodDeclaration[34933-35408]"
  }, {
    "left" : "public encode(pObject ) : ",
    "right" : "public encode(pObject ) : ",
    "info" : "MethodDeclaration[35446-36231]:MethodDeclaration[35462-36247]"
  }, {
    "left" : "public encodeToString(pArray ) : ",
    "right" : "public encodeToString(pArray ) : ",
    "info" : "MethodDeclaration[36237-36636]:MethodDeclaration[36253-36652]"
  }, {
    "left" : "public encode(pArray ) : ",
    "right" : "public encode(pArray ) : ",
    "info" : "MethodDeclaration[36642-37278]:MethodDeclaration[36658-37294]"
  }, {
    "left" : "private getEncodeLength(pArray , chunkSize int, chunkSeparator ) : long",
    "right" : "private getEncodeLength(pArray , chunkSize int, chunkSeparator ) : long",
    "info" : "MethodDeclaration[37284-38457]:MethodDeclaration[37300-38473]"
  }, {
    "left" : "public decodeInteger(pArray ) : ",
    "right" : "public decodeInteger(pArray ) : ",
    "info" : "MethodDeclaration[38521-38891]:MethodDeclaration[38537-38907]"
  }, {
    "left" : "public encodeInteger(bigInt ) : ",
    "right" : "public encodeInteger(bigInt ) : ",
    "info" : "MethodDeclaration[38897-39478]:MethodDeclaration[38913-39494]"
  }, {
    "left" : "package toIntegerBytes(bigInt ) : ",
    "right" : "package toIntegerBytes(bigInt ) : ",
    "info" : "MethodDeclaration[39484-40621]:MethodDeclaration[39500-40637]"
  }, {
    "left" : "private reset() : void",
    "right" : "private reset() : void",
    "info" : "MethodDeclaration[40627-40875]:MethodDeclaration[40643-40891]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2140-2146]:Modifier[2140-2146]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2147-2152]:TYPE_DECLARATION_KIND[2147-2152]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9372-9378]:Modifier[9372-9378]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[9379-9385]:SimpleName[9379-9385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9388-9412]:Block[9388-9412]"
  }, {
    "left" : "this(0);",
    "right" : "this(0);",
    "info" : "ConstructorInvocation[9398-9406]:ConstructorInvocation[9398-9406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9948-9954]:Modifier[9948-9954]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[9955-9961]:SimpleName[9955-9961]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[9962-9977]:SingleVariableDeclaration[9962-9977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9979-10043]:Block[9979-10043]"
  }, {
    "left" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
    "right" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
    "info" : "ConstructorInvocation[9989-10037]:ConstructorInvocation[9989-10037]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10835-10841]:Modifier[10835-10841]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[10842-10848]:SimpleName[10842-10848]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[10849-10863]:SingleVariableDeclaration[10849-10863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10865-10915]:Block[10865-10915]"
  }, {
    "left" : "this(lineLength, CHUNK_SEPARATOR);",
    "right" : "this(lineLength, CHUNK_SEPARATOR);",
    "info" : "ConstructorInvocation[10875-10909]:ConstructorInvocation[10875-10909]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11940-11946]:Modifier[11940-11946]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[11947-11953]:SimpleName[11947-11953]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[11954-11968]:SingleVariableDeclaration[11954-11968]"
  }, {
    "left" : "byte[] lineSeparator",
    "right" : "byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[11970-11990]:SingleVariableDeclaration[11970-11990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11992-12047]:Block[11992-12047]"
  }, {
    "left" : "this(lineLength, lineSeparator, false);",
    "right" : "this(lineLength, lineSeparator, false);",
    "info" : "ConstructorInvocation[12002-12041]:ConstructorInvocation[12002-12041]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13296-13302]:Modifier[13296-13302]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[13303-13309]:SimpleName[13303-13309]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[13310-13324]:SingleVariableDeclaration[13310-13324]"
  }, {
    "left" : "byte[] lineSeparator",
    "right" : "byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[13326-13346]:SingleVariableDeclaration[13326-13346]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[13348-13363]:SingleVariableDeclaration[13348-13363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13365-14285]:Block[13365-14285]"
  }, {
    "left" : "if (lineSeparator == null)",
    "right" : "if (lineSeparator == null)",
    "info" : "IfStatement[13375-13542]:IfStatement[13375-13542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13402-13542]:Block[13402-13542]"
  }, {
    "left" : "lineLength = 0;",
    "right" : "lineLength = 0;",
    "info" : "ExpressionStatement[13416-13431]:ExpressionStatement[13416-13431]"
  }, {
    "left" : "lineSeparator = CHUNK_SEPARATOR;",
    "right" : "lineSeparator = CHUNK_SEPARATOR;",
    "info" : "ExpressionStatement[13473-13505]:ExpressionStatement[13473-13505]"
  }, {
    "left" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
    "right" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
    "info" : "ExpressionStatement[13551-13611]:ExpressionStatement[13551-13611]"
  }, {
    "left" : "this.lineSeparator = new byte[lineSeparator.length];",
    "right" : "this.lineSeparator = new byte[lineSeparator.length];",
    "info" : "ExpressionStatement[13620-13672]:ExpressionStatement[13620-13672]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "info" : "ExpressionStatement[13681-13761]:ExpressionStatement[13681-13761]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0)",
    "info" : "IfStatement[13770-13907]:IfStatement[13770-13907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13790-13857]:Block[13790-13857]"
  }, {
    "left" : "this.encodeSize = 4 + lineSeparator.length;",
    "right" : "this.encodeSize = 4 + lineSeparator.length;",
    "info" : "ExpressionStatement[13804-13847]:ExpressionStatement[13804-13847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13863-13907]:Block[13863-13907]"
  }, {
    "left" : "this.encodeSize = 4;",
    "right" : "this.encodeSize = 4;",
    "info" : "ExpressionStatement[13877-13897]:ExpressionStatement[13877-13897]"
  }, {
    "left" : "this.decodeSize = this.encodeSize - 1;",
    "right" : "this.decodeSize = this.encodeSize - 1;",
    "info" : "ExpressionStatement[13916-13954]:ExpressionStatement[13916-13954]"
  }, {
    "left" : "if (containsBase64Byte(lineSeparator))",
    "right" : "if (containsBase64Byte(lineSeparator))",
    "info" : "IfStatement[13963-14195]:IfStatement[13963-14195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14002-14195]:Block[14002-14195]"
  }, {
    "left" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
    "right" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
    "info" : "VariableDeclarationStatement[14016-14070]:VariableDeclarationStatement[14016-14070]"
  }, {
    "left" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
    "right" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
    "info" : "ThrowStatement[14083-14185]:ThrowStatement[14083-14185]"
  }, {
    "left" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
    "right" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
    "info" : "ExpressionStatement[14204-14279]:ExpressionStatement[14204-14279]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14478-14484]:Modifier[14478-14484]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14485-14492]:PrimitiveType[14485-14492]"
  }, {
    "left" : "isUrlSafe",
    "right" : "isUrlSafe",
    "info" : "SimpleName[14493-14502]:SimpleName[14493-14502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14505-14570]:Block[14505-14570]"
  }, {
    "left" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
    "right" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
    "info" : "ReturnStatement[14515-14564]:ReturnStatement[14515-14564]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14748-14755]:PrimitiveType[14748-14755]"
  }, {
    "left" : "hasData",
    "right" : "hasData",
    "info" : "SimpleName[14756-14763]:SimpleName[14756-14763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14766-14809]:Block[14766-14809]"
  }, {
    "left" : "return this.buffer != null;",
    "right" : "return this.buffer != null;",
    "info" : "ReturnStatement[14776-14803]:ReturnStatement[14776-14803]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14971-14974]:PrimitiveType[14971-14974]"
  }, {
    "left" : "avail",
    "right" : "avail",
    "info" : "SimpleName[14975-14980]:SimpleName[14975-14980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14983-15041]:Block[14983-15041]"
  }, {
    "left" : "return buffer != null ? pos - readPos : 0;",
    "right" : "return buffer != null ? pos - readPos : 0;",
    "info" : "ReturnStatement[14993-15035]:ReturnStatement[14993-15035]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15078-15085]:Modifier[15078-15085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15086-15090]:PrimitiveType[15086-15090]"
  }, {
    "left" : "resizeBuffer",
    "right" : "resizeBuffer",
    "info" : "SimpleName[15091-15103]:SimpleName[15091-15103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15106-15433]:Block[15106-15433]"
  }, {
    "left" : "if (buffer == null)",
    "right" : "if (buffer == null)",
    "info" : "IfStatement[15116-15427]:IfStatement[15116-15427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15136-15245]:Block[15136-15245]"
  }, {
    "left" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
    "right" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
    "info" : "ExpressionStatement[15150-15189]:ExpressionStatement[15150-15189]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[15202-15210]:ExpressionStatement[15202-15210]"
  }, {
    "left" : "readPos = 0;",
    "right" : "readPos = 0;",
    "info" : "ExpressionStatement[15223-15235]:ExpressionStatement[15223-15235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15251-15427]:Block[15251-15427]"
  }, {
    "left" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
    "right" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
    "info" : "VariableDeclarationStatement[15265-15331]:VariableDeclarationStatement[15265-15331]"
  }, {
    "left" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
    "right" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
    "info" : "ExpressionStatement[15344-15393]:ExpressionStatement[15344-15393]"
  }, {
    "left" : "buffer = b;",
    "right" : "buffer = b;",
    "info" : "ExpressionStatement[15406-15417]:ExpressionStatement[15406-15417]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16026-16029]:PrimitiveType[16026-16029]"
  }, {
    "left" : "readResults",
    "right" : "readResults",
    "info" : "SimpleName[16030-16041]:SimpleName[16030-16041]"
  }, {
    "left" : "byte[] b",
    "right" : "byte[] b",
    "info" : "SingleVariableDeclaration[16042-16050]:SingleVariableDeclaration[16042-16050]"
  }, {
    "left" : "int bPos",
    "right" : "int bPos",
    "info" : "SingleVariableDeclaration[16052-16060]:SingleVariableDeclaration[16052-16060]"
  }, {
    "left" : "int bAvail",
    "right" : "int bAvail",
    "info" : "SingleVariableDeclaration[16062-16072]:SingleVariableDeclaration[16062-16072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16074-16391]:Block[16074-16391]"
  }, {
    "left" : "if (buffer != null)",
    "right" : "if (buffer != null)",
    "info" : "IfStatement[16084-16356]:IfStatement[16084-16356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16104-16356]:Block[16104-16356]"
  }, {
    "left" : "int len = Math.min(avail(), bAvail);",
    "right" : "int len = Math.min(avail(), bAvail);",
    "info" : "VariableDeclarationStatement[16118-16154]:VariableDeclarationStatement[16118-16154]"
  }, {
    "left" : "System.arraycopy(buffer, readPos, b, bPos, len);",
    "right" : "System.arraycopy(buffer, readPos, b, bPos, len);",
    "info" : "ExpressionStatement[16167-16215]:ExpressionStatement[16167-16215]"
  }, {
    "left" : "readPos += len;",
    "right" : "readPos += len;",
    "info" : "ExpressionStatement[16228-16243]:ExpressionStatement[16228-16243]"
  }, {
    "left" : "if (readPos >= pos)",
    "right" : "if (readPos >= pos)",
    "info" : "IfStatement[16256-16322]:IfStatement[16256-16322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16276-16322]:Block[16276-16322]"
  }, {
    "left" : "buffer = null;",
    "right" : "buffer = null;",
    "info" : "ExpressionStatement[16294-16308]:ExpressionStatement[16294-16308]"
  }, {
    "left" : "return len;",
    "right" : "return len;",
    "info" : "ReturnStatement[16335-16346]:ReturnStatement[16335-16346]"
  }, {
    "left" : "return eof ? -1 : 0;",
    "right" : "return eof ? -1 : 0;",
    "info" : "ReturnStatement[16365-16385]:ReturnStatement[16365-16385]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17181-17185]:PrimitiveType[17181-17185]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[17186-17192]:SimpleName[17186-17192]"
  }, {
    "left" : "byte[] in",
    "right" : "byte[] in",
    "info" : "SingleVariableDeclaration[17193-17202]:SingleVariableDeclaration[17193-17202]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[17204-17213]:SingleVariableDeclaration[17204-17213]"
  }, {
    "left" : "int inAvail",
    "right" : "int inAvail",
    "info" : "SingleVariableDeclaration[17215-17226]:SingleVariableDeclaration[17215-17226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17228-19998]:Block[17228-19998]"
  }, {
    "left" : "if (eof)",
    "right" : "if (eof)",
    "info" : "IfStatement[17238-17278]:IfStatement[17238-17278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17247-17278]:Block[17247-17278]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17261-17268]:ReturnStatement[17261-17268]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[17389-19992]:IfStatement[17389-19992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17406-18928]:Block[17406-18928]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[17420-17431]:ExpressionStatement[17420-17431]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "info" : "IfStatement[17444-17547]:IfStatement[17444-17547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17500-17547]:Block[17500-17547]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[17518-17533]:ExpressionStatement[17518-17533]"
  }, {
    "left" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
    "right" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
    "info" : "SwitchStatement[17560-18513]:SwitchStatement[17560-18513]"
  }, {
    "left" : "case 1 :",
    "right" : "case 1 :",
    "info" : "SwitchCase[17595-17603]:SwitchCase[17595-17603]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
    "info" : "ExpressionStatement[17624-17675]:ExpressionStatement[17624-17675]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
    "info" : "ExpressionStatement[17696-17747]:ExpressionStatement[17696-17747]"
  }, {
    "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "info" : "IfStatement[17842-17997]:IfStatement[17842-17997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17884-17997]:Block[17884-17997]"
  }, {
    "left" : "buffer[pos++] = PAD;",
    "right" : "buffer[pos++] = PAD;",
    "info" : "ExpressionStatement[17910-17930]:ExpressionStatement[17910-17930]"
  }, {
    "left" : "buffer[pos++] = PAD;",
    "right" : "buffer[pos++] = PAD;",
    "info" : "ExpressionStatement[17955-17975]:ExpressionStatement[17955-17975]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18018-18024]:BreakStatement[18018-18024]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[18042-18050]:SwitchCase[18042-18050]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
    "info" : "ExpressionStatement[18071-18123]:ExpressionStatement[18071-18123]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
    "info" : "ExpressionStatement[18144-18195]:ExpressionStatement[18144-18195]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
    "info" : "ExpressionStatement[18216-18267]:ExpressionStatement[18216-18267]"
  }, {
    "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "info" : "IfStatement[18362-18472]:IfStatement[18362-18472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18404-18472]:Block[18404-18472]"
  }, {
    "left" : "buffer[pos++] = PAD;",
    "right" : "buffer[pos++] = PAD;",
    "info" : "ExpressionStatement[18430-18450]:ExpressionStatement[18430-18450]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18493-18499]:BreakStatement[18493-18499]"
  }, {
    "left" : "byte b = lineSeparator[lineSeparator.length - 1];",
    "right" : "byte b = lineSeparator[lineSeparator.length - 1];",
    "info" : "VariableDeclarationStatement[18656-18705]:VariableDeclarationStatement[18656-18705]"
  }, {
    "left" : "if (lineLength > 0 && pos > 0 && buffer[pos-1] != b)",
    "right" : "if (lineLength > 0 && pos > 0 && buffer[pos-1] != b)",
    "info" : "IfStatement[18718-18918]:IfStatement[18718-18918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18771-18918]:Block[18771-18918]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "info" : "ExpressionStatement[18789-18859]:ExpressionStatement[18789-18859]"
  }, {
    "left" : "pos += lineSeparator.length;",
    "right" : "pos += lineSeparator.length;",
    "info" : "ExpressionStatement[18876-18904]:ExpressionStatement[18876-18904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18934-19992]:Block[18934-19992]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[18948-19982]:ForStatement[18948-19982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18982-19982]:Block[18982-19982]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "info" : "IfStatement[19000-19111]:IfStatement[19000-19111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19056-19111]:Block[19056-19111]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[19078-19093]:ExpressionStatement[19078-19093]"
  }, {
    "left" : "modulus = (++modulus) % 3;",
    "right" : "modulus = (++modulus) % 3;",
    "info" : "ExpressionStatement[19128-19154]:ExpressionStatement[19128-19154]"
  }, {
    "left" : "int b = in[inPos++];",
    "right" : "int b = in[inPos++];",
    "info" : "VariableDeclarationStatement[19171-19191]:VariableDeclarationStatement[19171-19191]"
  }, {
    "left" : "if (b < 0)",
    "right" : "if (b < 0)",
    "info" : "IfStatement[19208-19268]:IfStatement[19208-19268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19219-19268]:Block[19219-19268]"
  }, {
    "left" : "b += 256;",
    "right" : "b += 256;",
    "info" : "ExpressionStatement[19241-19250]:ExpressionStatement[19241-19250]"
  }, {
    "left" : "x = (x << 8) + b;",
    "right" : "x = (x << 8) + b;",
    "info" : "ExpressionStatement[19285-19302]:ExpressionStatement[19285-19302]"
  }, {
    "left" : "if (0 == modulus)",
    "right" : "if (0 == modulus)",
    "info" : "IfStatement[19319-19968]:IfStatement[19319-19968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19337-19968]:Block[19337-19968]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
    "info" : "ExpressionStatement[19359-19411]:ExpressionStatement[19359-19411]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
    "info" : "ExpressionStatement[19432-19484]:ExpressionStatement[19432-19484]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
    "info" : "ExpressionStatement[19505-19556]:ExpressionStatement[19505-19556]"
  }, {
    "left" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
    "info" : "ExpressionStatement[19577-19621]:ExpressionStatement[19577-19621]"
  }, {
    "left" : "currentLinePos += 4;",
    "right" : "currentLinePos += 4;",
    "info" : "ExpressionStatement[19642-19662]:ExpressionStatement[19642-19662]"
  }, {
    "left" : "if (lineLength > 0 && lineLength <= currentLinePos)",
    "right" : "if (lineLength > 0 && lineLength <= currentLinePos)",
    "info" : "IfStatement[19683-19950]:IfStatement[19683-19950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19735-19950]:Block[19735-19950]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "info" : "ExpressionStatement[19761-19831]:ExpressionStatement[19761-19831]"
  }, {
    "left" : "pos += lineSeparator.length;",
    "right" : "pos += lineSeparator.length;",
    "info" : "ExpressionStatement[19856-19884]:ExpressionStatement[19856-19884]"
  }, {
    "left" : "currentLinePos = 0;",
    "right" : "currentLinePos = 0;",
    "info" : "ExpressionStatement[19909-19928]:ExpressionStatement[19909-19928]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21143-21147]:PrimitiveType[21143-21147]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[21148-21154]:SimpleName[21148-21154]"
  }, {
    "left" : "byte[] in",
    "right" : "byte[] in",
    "info" : "SingleVariableDeclaration[21155-21164]:SingleVariableDeclaration[21155-21164]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[21166-21175]:SingleVariableDeclaration[21166-21175]"
  }, {
    "left" : "int inAvail",
    "right" : "int inAvail",
    "info" : "SingleVariableDeclaration[21177-21188]:SingleVariableDeclaration[21177-21188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21190-23284]:Block[21190-23284]"
  }, {
    "left" : "if (eof)",
    "right" : "if (eof)",
    "info" : "IfStatement[21200-21240]:IfStatement[21200-21240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21209-21240]:Block[21209-21240]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[21223-21230]:ReturnStatement[21223-21230]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[21249-21301]:IfStatement[21249-21301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21266-21301]:Block[21266-21301]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[21280-21291]:ExpressionStatement[21280-21291]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[21310-22226]:ForStatement[21310-22226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21344-22226]:Block[21344-22226]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
    "info" : "IfStatement[21358-21461]:IfStatement[21358-21461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21414-21461]:Block[21414-21461]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[21432-21447]:ExpressionStatement[21432-21447]"
  }, {
    "left" : "byte b = in[inPos++];",
    "right" : "byte b = in[inPos++];",
    "info" : "VariableDeclarationStatement[21474-21495]:VariableDeclarationStatement[21474-21495]"
  }, {
    "left" : "if (b == PAD)",
    "right" : "if (b == PAD)",
    "info" : "IfStatement[21508-22216]:IfStatement[21508-22216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21522-21619]:Block[21522-21619]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[21571-21582]:ExpressionStatement[21571-21582]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21599-21605]:BreakStatement[21599-21605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21625-22216]:Block[21625-22216]"
  }, {
    "left" : "if (b >= 0 && b < DECODE_TABLE.length)",
    "right" : "if (b >= 0 && b < DECODE_TABLE.length)",
    "info" : "IfStatement[21643-22202]:IfStatement[21643-22202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21682-22202]:Block[21682-22202]"
  }, {
    "left" : "int result = DECODE_TABLE[b];",
    "right" : "int result = DECODE_TABLE[b];",
    "info" : "VariableDeclarationStatement[21704-21733]:VariableDeclarationStatement[21704-21733]"
  }, {
    "left" : "if (result >= 0)",
    "right" : "if (result >= 0)",
    "info" : "IfStatement[21754-22184]:IfStatement[21754-22184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21771-22184]:Block[21771-22184]"
  }, {
    "left" : "modulus = (++modulus) % 4;",
    "right" : "modulus = (++modulus) % 4;",
    "info" : "ExpressionStatement[21797-21823]:ExpressionStatement[21797-21823]"
  }, {
    "left" : "x = (x << 6) + result;",
    "right" : "x = (x << 6) + result;",
    "info" : "ExpressionStatement[21848-21870]:ExpressionStatement[21848-21870]"
  }, {
    "left" : "if (modulus == 0)",
    "right" : "if (modulus == 0)",
    "info" : "IfStatement[21895-22162]:IfStatement[21895-22162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21913-22162]:Block[21913-22162]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[21943-21991]:ExpressionStatement[21943-21991]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[22020-22067]:ExpressionStatement[22020-22067]"
  }, {
    "left" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
    "info" : "ExpressionStatement[22096-22136]:ExpressionStatement[22096-22136]"
  }, {
    "left" : "if (eof && modulus != 0)",
    "right" : "if (eof && modulus != 0)",
    "info" : "IfStatement[22464-23278]:IfStatement[22464-23278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22489-23278]:Block[22489-23278]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
    "info" : "IfStatement[22503-22606]:IfStatement[22503-22606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22559-22606]:Block[22559-22606]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[22577-22592]:ExpressionStatement[22577-22592]"
  }, {
    "left" : "switch (modulus) {\n           //   case 1: // 6 bits - ignore entirely\n           //       break;\n                case 2 : // 12 bits = 8 + 4\n                    x = x >> 4;\n                    buffer[pos++] = (byte) ((x) & MASK_8BITS);\n                    break;\n                case 3 : // 18 bits = 8 + 8 + 2\n                    x = x >> 2;\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x) & MASK_8BITS);\n                    break;\n            }",
    "right" : "switch (modulus) {\n           //   case 1: // 6 bits - ignore entirely\n           //       break;\n                case 2 : // 12 bits = 8 + 4\n                    x = x >> 4;\n                    buffer[pos++] = (byte) ((x) & MASK_8BITS);\n                    break;\n                case 3 : // 18 bits = 8 + 8 + 2\n                    x = x >> 2;\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x) & MASK_8BITS);\n                    break;\n            }",
    "info" : "SwitchStatement[22753-23268]:SwitchStatement[22753-23268]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[22867-22875]:SwitchCase[22867-22875]"
  }, {
    "left" : "x = x >> 4;",
    "right" : "x = x >> 4;",
    "info" : "ExpressionStatement[22915-22926]:ExpressionStatement[22915-22926]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x) & MASK_8BITS);",
    "info" : "ExpressionStatement[22947-22989]:ExpressionStatement[22947-22989]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23010-23016]:BreakStatement[23010-23016]"
  }, {
    "left" : "case 3 :",
    "right" : "case 3 :",
    "info" : "SwitchCase[23033-23041]:SwitchCase[23033-23041]"
  }, {
    "left" : "x = x >> 2;",
    "right" : "x = x >> 2;",
    "info" : "ExpressionStatement[23085-23096]:ExpressionStatement[23085-23096]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[23117-23164]:ExpressionStatement[23117-23164]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x) & MASK_8BITS);",
    "info" : "ExpressionStatement[23185-23227]:ExpressionStatement[23185-23227]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23248-23254]:BreakStatement[23248-23254]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23585-23591]:Modifier[23585-23591]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23592-23598]:Modifier[23592-23598]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23599-23606]:PrimitiveType[23599-23606]"
  }, {
    "left" : "isBase64",
    "right" : "isBase64",
    "info" : "SimpleName[23607-23615]:SimpleName[23607-23615]"
  }, {
    "left" : "byte octet",
    "right" : "byte octet",
    "info" : "SingleVariableDeclaration[23616-23626]:SingleVariableDeclaration[23616-23626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23628-23740]:Block[23628-23740]"
  }, {
    "left" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
    "right" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
    "info" : "ReturnStatement[23638-23734]:ReturnStatement[23638-23734]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24180-24186]:Modifier[24180-24186]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24187-24193]:Modifier[24187-24193]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24194-24201]:PrimitiveType[24194-24201]"
  }, {
    "left" : "isBase64",
    "right" : "isBase64",
    "info" : "SimpleName[24202-24210]:SimpleName[24202-24210]"
  }, {
    "left" : "String base64",
    "right" : "String base64",
    "info" : "SingleVariableDeclaration[24211-24224]:SingleVariableDeclaration[24211-24224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24226-24292]:Block[24226-24292]"
  }, {
    "left" : "return isBase64(StringUtils.getBytesUtf8(base64));",
    "right" : "return isBase64(StringUtils.getBytesUtf8(base64));",
    "info" : "ReturnStatement[24236-24286]:ReturnStatement[24236-24286]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24763-24769]:Modifier[24763-24769]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24770-24776]:Modifier[24770-24776]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24777-24784]:PrimitiveType[24777-24784]"
  }, {
    "left" : "isArrayByteBase64",
    "right" : "isArrayByteBase64",
    "info" : "SimpleName[24785-24802]:SimpleName[24785-24802]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[24803-24820]:SingleVariableDeclaration[24803-24820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24822-24866]:Block[24822-24866]"
  }, {
    "left" : "return isBase64(arrayOctet);",
    "right" : "return isBase64(arrayOctet);",
    "info" : "ReturnStatement[24832-24860]:ReturnStatement[24832-24860]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25310-25316]:Modifier[25310-25316]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25317-25323]:Modifier[25317-25323]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25324-25331]:PrimitiveType[25324-25331]"
  }, {
    "left" : "isBase64",
    "right" : "isBase64",
    "info" : "SimpleName[25332-25340]:SimpleName[25332-25340]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[25341-25358]:SingleVariableDeclaration[25341-25358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25360-25572]:Block[25360-25572]"
  }, {
    "left" : "for (int i = 0; i < arrayOctet.length; i++)",
    "right" : "for (int i = 0; i < arrayOctet.length; i++)",
    "info" : "ForStatement[25370-25545]:ForStatement[25370-25545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25414-25545]:Block[25414-25545]"
  }, {
    "left" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
    "right" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
    "info" : "IfStatement[25428-25535]:IfStatement[25428-25535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25490-25535]:Block[25490-25535]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25508-25521]:ReturnStatement[25508-25521]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25554-25566]:ReturnStatement[25554-25566]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25883-25890]:Modifier[25883-25890]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25891-25897]:Modifier[25891-25897]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25898-25905]:PrimitiveType[25898-25905]"
  }, {
    "left" : "containsBase64Byte",
    "right" : "containsBase64Byte",
    "info" : "SimpleName[25906-25924]:SimpleName[25906-25924]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[25925-25942]:SingleVariableDeclaration[25925-25942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25944-26123]:Block[25944-26123]"
  }, {
    "left" : "for (int i = 0; i < arrayOctet.length; i++)",
    "right" : "for (int i = 0; i < arrayOctet.length; i++)",
    "info" : "ForStatement[25954-26095]:ForStatement[25954-26095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25998-26095]:Block[25998-26095]"
  }, {
    "left" : "if (isBase64(arrayOctet[i]))",
    "right" : "if (isBase64(arrayOctet[i]))",
    "info" : "IfStatement[26012-26085]:IfStatement[26012-26085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26041-26085]:Block[26041-26085]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26059-26071]:ReturnStatement[26059-26071]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26104-26117]:ReturnStatement[26104-26117]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26385-26391]:Modifier[26385-26391]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26392-26398]:Modifier[26392-26398]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[26399-26405]:ArrayType[26399-26405]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[26406-26418]:SimpleName[26406-26418]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[26419-26436]:SingleVariableDeclaration[26419-26436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26438-26493]:Block[26438-26493]"
  }, {
    "left" : "return encodeBase64(binaryData, false);",
    "right" : "return encodeBase64(binaryData, false);",
    "info" : "ReturnStatement[26448-26487]:ReturnStatement[26448-26487]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26965-26971]:Modifier[26965-26971]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26972-26978]:Modifier[26972-26978]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26979-26985]:SimpleType[26979-26985]"
  }, {
    "left" : "encodeBase64String",
    "right" : "encodeBase64String",
    "info" : "SimpleName[26986-27004]:SimpleName[26986-27004]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[27005-27022]:SingleVariableDeclaration[27005-27022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27024-27106]:Block[27024-27106]"
  }, {
    "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
    "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
    "info" : "ReturnStatement[27034-27100]:ReturnStatement[27034-27100]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27489-27495]:Modifier[27489-27495]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27496-27502]:Modifier[27496-27502]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[27503-27509]:ArrayType[27503-27509]"
  }, {
    "left" : "encodeBase64URLSafe",
    "right" : "encodeBase64URLSafe",
    "info" : "SimpleName[27510-27529]:SimpleName[27510-27529]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[27530-27547]:SingleVariableDeclaration[27530-27547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27549-27610]:Block[27549-27610]"
  }, {
    "left" : "return encodeBase64(binaryData, false, true);",
    "right" : "return encodeBase64(binaryData, false, true);",
    "info" : "ReturnStatement[27559-27604]:ReturnStatement[27559-27604]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27961-27967]:Modifier[27961-27967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27968-27974]:Modifier[27968-27974]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27975-27981]:SimpleType[27975-27981]"
  }, {
    "left" : "encodeBase64URLSafeString",
    "right" : "encodeBase64URLSafeString",
    "info" : "SimpleName[27982-28007]:SimpleName[27982-28007]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[28008-28025]:SingleVariableDeclaration[28008-28025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28027-28115]:Block[28027-28115]"
  }, {
    "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
    "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
    "info" : "ReturnStatement[28037-28109]:ReturnStatement[28037-28109]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28387-28393]:Modifier[28387-28393]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28394-28400]:Modifier[28394-28400]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[28401-28407]:ArrayType[28401-28407]"
  }, {
    "left" : "encodeBase64Chunked",
    "right" : "encodeBase64Chunked",
    "info" : "SimpleName[28408-28427]:SimpleName[28408-28427]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[28428-28445]:SingleVariableDeclaration[28428-28445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28447-28501]:Block[28447-28501]"
  }, {
    "left" : "return encodeBase64(binaryData, true);",
    "right" : "return encodeBase64(binaryData, true);",
    "info" : "ReturnStatement[28457-28495]:ReturnStatement[28457-28495]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29045-29051]:Modifier[29045-29051]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[29052-29058]:SimpleType[29052-29058]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[29059-29065]:SimpleName[29059-29065]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[29066-29080]:SingleVariableDeclaration[29066-29080]"
  }, {
    "left" : "DecoderException",
    "right" : "DecoderException",
    "info" : "SimpleType[29089-29105]:SimpleType[29089-29105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29106-29434]:Block[29106-29434]"
  }, {
    "left" : "if (pObject instanceof byte[])",
    "right" : "if (pObject instanceof byte[])",
    "info" : "IfStatement[29124-29428]:IfStatement[29124-29428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29155-29211]:Block[29155-29211]"
  }, {
    "left" : "return decode((byte[]) pObject);",
    "right" : "return decode((byte[]) pObject);",
    "info" : "ReturnStatement[29169-29201]:ReturnStatement[29169-29201]"
  }, {
    "left" : "if (pObject instanceof String)",
    "right" : "if (pObject instanceof String)",
    "info" : "IfStatement[29217-29428]:IfStatement[29217-29428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29248-29304]:Block[29248-29304]"
  }, {
    "left" : "return decode((String) pObject);",
    "right" : "return decode((String) pObject);",
    "info" : "ReturnStatement[29262-29294]:ReturnStatement[29262-29294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29310-29428]:Block[29310-29428]"
  }, {
    "left" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
    "right" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
    "info" : "ThrowStatement[29324-29418]:ThrowStatement[29324-29418]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29683-29689]:Modifier[29683-29689]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[29690-29696]:ArrayType[29690-29696]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[29697-29703]:SimpleName[29697-29703]"
  }, {
    "left" : "String pArray",
    "right" : "String pArray",
    "info" : "SingleVariableDeclaration[29704-29717]:SingleVariableDeclaration[29704-29717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29719-29783]:Block[29719-29783]"
  }, {
    "left" : "return decode(StringUtils.getBytesUtf8(pArray));",
    "right" : "return decode(StringUtils.getBytesUtf8(pArray));",
    "info" : "ReturnStatement[29729-29777]:ReturnStatement[29729-29777]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30019-30025]:Modifier[30019-30025]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[30026-30032]:ArrayType[30026-30032]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[30033-30039]:SimpleName[30033-30039]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[30040-30053]:SingleVariableDeclaration[30040-30053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30055-30376]:Block[30055-30376]"
  }, {
    "left" : "reset();",
    "right" : "reset();",
    "info" : "ExpressionStatement[30065-30073]:ExpressionStatement[30065-30073]"
  }, {
    "left" : "if (pArray == null || pArray.length == 0)",
    "right" : "if (pArray == null || pArray.length == 0)",
    "info" : "IfStatement[30082-30162]:IfStatement[30082-30162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30124-30162]:Block[30124-30162]"
  }, {
    "left" : "return pArray;",
    "right" : "return pArray;",
    "info" : "ReturnStatement[30138-30152]:ReturnStatement[30138-30152]"
  }, {
    "left" : "decode(pArray, 0, pArray.length);",
    "right" : "decode(pArray, 0, pArray.length);",
    "info" : "ExpressionStatement[30171-30204]:ExpressionStatement[30171-30204]"
  }, {
    "left" : "decode(pArray, 0, -1);",
    "right" : "decode(pArray, 0, -1);",
    "info" : "ExpressionStatement[30213-30235]:ExpressionStatement[30213-30235]"
  }, {
    "left" : "byte[] result = new byte[pos];",
    "right" : "byte[] result = new byte[pos];",
    "info" : "VariableDeclarationStatement[30270-30300]:VariableDeclarationStatement[30270-30300]"
  }, {
    "left" : "readResults(result, 0, result.length);",
    "right" : "readResults(result, 0, result.length);",
    "info" : "ExpressionStatement[30309-30347]:ExpressionStatement[30309-30347]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[30356-30370]:ReturnStatement[30356-30370]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30914-30920]:Modifier[30914-30920]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30921-30927]:Modifier[30921-30927]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[30928-30934]:ArrayType[30928-30934]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[30935-30947]:SimpleName[30935-30947]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[30948-30965]:SingleVariableDeclaration[30948-30965]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[30967-30984]:SingleVariableDeclaration[30967-30984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30986-31052]:Block[30986-31052]"
  }, {
    "left" : "return encodeBase64(binaryData, isChunked, false);",
    "right" : "return encodeBase64(binaryData, isChunked, false);",
    "info" : "ReturnStatement[30996-31046]:ReturnStatement[30996-31046]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31741-31747]:Modifier[31741-31747]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31748-31754]:Modifier[31748-31754]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[31755-31761]:ArrayType[31755-31761]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[31762-31774]:SimpleName[31762-31774]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[31775-31792]:SingleVariableDeclaration[31775-31792]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[31794-31811]:SingleVariableDeclaration[31794-31811]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[31813-31828]:SingleVariableDeclaration[31813-31828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31830-31917]:Block[31830-31917]"
  }, {
    "left" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
    "right" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
    "info" : "ReturnStatement[31840-31911]:ReturnStatement[31840-31911]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32675-32681]:Modifier[32675-32681]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32682-32688]:Modifier[32682-32688]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[32689-32695]:ArrayType[32689-32695]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[32696-32708]:SimpleName[32696-32708]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[32709-32726]:SingleVariableDeclaration[32709-32726]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[32728-32745]:SingleVariableDeclaration[32728-32745]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[32747-32762]:SingleVariableDeclaration[32747-32762]"
  }, {
    "left" : "int maxResultSize",
    "right" : "int maxResultSize",
    "info" : "SingleVariableDeclaration[32764-32781]:SingleVariableDeclaration[32764-32781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32783-33389]:Block[32783-33405]"
  }, {
    "left" : "if (binaryData == null || binaryData.length == 0)",
    "right" : "if (binaryData == null || binaryData.length == 0)",
    "info" : "IfStatement[32793-32885]:IfStatement[32793-32885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32843-32885]:Block[32843-32885]"
  }, {
    "left" : "return binaryData;",
    "right" : "return binaryData;",
    "info" : "ReturnStatement[32857-32875]:ReturnStatement[32857-32875]"
  }, {
    "left" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
    "right" : "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);",
    "info" : "VariableDeclarationStatement[32895-32968]:VariableDeclarationStatement[32895-32984]"
  }, {
    "left" : "MIME_CHUNK_SIZE",
    "right" : "MIME_CHUNK_SIZE",
    "info" : "SimpleName[32934-32949]:SimpleName[32946-32961]"
  }, {
    "left" : "if (len > maxResultSize)",
    "right" : "if (len > maxResultSize)",
    "info" : "IfStatement[32977-33231]:IfStatement[32993-33247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33002-33231]:Block[33018-33247]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
    "right" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
    "info" : "ThrowStatement[33016-33221]:ThrowStatement[33032-33237]"
  }, {
    "left" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
    "right" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
    "info" : "VariableDeclarationStatement[33257-33344]:VariableDeclarationStatement[33273-33360]"
  }, {
    "left" : "return b64.encode(binaryData);",
    "right" : "return b64.encode(binaryData);",
    "info" : "ReturnStatement[33353-33383]:ReturnStatement[33369-33399]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33600-33606]:Modifier[33616-33622]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33607-33613]:Modifier[33623-33629]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33614-33620]:ArrayType[33630-33636]"
  }, {
    "left" : "decodeBase64",
    "right" : "decodeBase64",
    "info" : "SimpleName[33621-33633]:SimpleName[33637-33649]"
  }, {
    "left" : "String base64String",
    "right" : "String base64String",
    "info" : "SingleVariableDeclaration[33634-33653]:SingleVariableDeclaration[33650-33669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33655-33712]:Block[33671-33728]"
  }, {
    "left" : "return new Base64().decode(base64String);",
    "right" : "return new Base64().decode(base64String);",
    "info" : "ReturnStatement[33665-33706]:ReturnStatement[33681-33722]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33904-33910]:Modifier[33920-33926]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33911-33917]:Modifier[33927-33933]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33918-33924]:ArrayType[33934-33940]"
  }, {
    "left" : "decodeBase64",
    "right" : "decodeBase64",
    "info" : "SimpleName[33925-33937]:SimpleName[33941-33953]"
  }, {
    "left" : "byte[] base64Data",
    "right" : "byte[] base64Data",
    "info" : "SingleVariableDeclaration[33938-33955]:SingleVariableDeclaration[33954-33971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33957-34012]:Block[33973-34028]"
  }, {
    "left" : "return new Base64().decode(base64Data);",
    "right" : "return new Base64().decode(base64Data);",
    "info" : "ReturnStatement[33967-34006]:ReturnStatement[33983-34022]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34305-34311]:Modifier[34321-34327]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[34312-34318]:ArrayType[34328-34334]"
  }, {
    "left" : "discardWhitespace",
    "right" : "discardWhitespace",
    "info" : "SimpleName[34319-34336]:SimpleName[34335-34352]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[34337-34348]:SingleVariableDeclaration[34353-34364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34350-34911]:Block[34366-34927]"
  }, {
    "left" : "byte groomedData[] = new byte[data.length];",
    "right" : "byte groomedData[] = new byte[data.length];",
    "info" : "VariableDeclarationStatement[34360-34403]:VariableDeclarationStatement[34376-34419]"
  }, {
    "left" : "int bytesCopied = 0;",
    "right" : "int bytesCopied = 0;",
    "info" : "VariableDeclarationStatement[34412-34432]:VariableDeclarationStatement[34428-34448]"
  }, {
    "left" : "for (int i = 0; i < data.length; i++)",
    "right" : "for (int i = 0; i < data.length; i++)",
    "info" : "ForStatement[34441-34757]:ForStatement[34457-34773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34479-34757]:Block[34495-34773]"
  }, {
    "left" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
    "right" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
    "info" : "SwitchStatement[34493-34747]:SwitchStatement[34509-34763]"
  }, {
    "left" : "case ' ' :",
    "right" : "case ' ' :",
    "info" : "SwitchCase[34528-34538]:SwitchCase[34544-34554]"
  }, {
    "left" : "case '\\n' :",
    "right" : "case '\\n' :",
    "info" : "SwitchCase[34555-34566]:SwitchCase[34571-34582]"
  }, {
    "left" : "case '\\r' :",
    "right" : "case '\\r' :",
    "info" : "SwitchCase[34583-34594]:SwitchCase[34599-34610]"
  }, {
    "left" : "case '\\t' :",
    "right" : "case '\\t' :",
    "info" : "SwitchCase[34611-34622]:SwitchCase[34627-34638]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34643-34649]:BreakStatement[34659-34665]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[34666-34675]:SwitchCase[34682-34691]"
  }, {
    "left" : "groomedData[bytesCopied++] = data[i];",
    "right" : "groomedData[bytesCopied++] = data[i];",
    "info" : "ExpressionStatement[34696-34733]:ExpressionStatement[34712-34749]"
  }, {
    "left" : "byte packedData[] = new byte[bytesCopied];",
    "right" : "byte packedData[] = new byte[bytesCopied];",
    "info" : "VariableDeclarationStatement[34766-34808]:VariableDeclarationStatement[34782-34824]"
  }, {
    "left" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "right" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "info" : "ExpressionStatement[34817-34878]:ExpressionStatement[34833-34894]"
  }, {
    "left" : "return packedData;",
    "right" : "return packedData;",
    "info" : "ReturnStatement[34887-34905]:ReturnStatement[34903-34921]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35114-35121]:Modifier[35130-35137]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35122-35128]:Modifier[35138-35144]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35129-35136]:PrimitiveType[35145-35152]"
  }, {
    "left" : "isWhiteSpace",
    "right" : "isWhiteSpace",
    "info" : "SimpleName[35137-35149]:SimpleName[35153-35165]"
  }, {
    "left" : "byte byteToCheck",
    "right" : "byte byteToCheck",
    "info" : "SingleVariableDeclaration[35150-35166]:SingleVariableDeclaration[35166-35182]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35168-35392]:Block[35184-35408]"
  }, {
    "left" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
    "right" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
    "info" : "SwitchStatement[35178-35386]:SwitchStatement[35194-35402]"
  }, {
    "left" : "case ' ' :",
    "right" : "case ' ' :",
    "info" : "SwitchCase[35213-35223]:SwitchCase[35229-35239]"
  }, {
    "left" : "case '\\n' :",
    "right" : "case '\\n' :",
    "info" : "SwitchCase[35236-35247]:SwitchCase[35252-35263]"
  }, {
    "left" : "case '\\r' :",
    "right" : "case '\\r' :",
    "info" : "SwitchCase[35260-35271]:SwitchCase[35276-35287]"
  }, {
    "left" : "case '\\t' :",
    "right" : "case '\\t' :",
    "info" : "SwitchCase[35284-35295]:SwitchCase[35300-35311]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[35312-35324]:ReturnStatement[35328-35340]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[35337-35346]:SwitchCase[35353-35362]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35363-35376]:ReturnStatement[35379-35392]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35973-35979]:Modifier[35989-35995]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[35980-35986]:SimpleType[35996-36002]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[35987-35993]:SimpleName[36003-36009]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[35994-36008]:SingleVariableDeclaration[36010-36024]"
  }, {
    "left" : "EncoderException",
    "right" : "EncoderException",
    "info" : "SimpleType[36017-36033]:SimpleType[36033-36049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36034-36231]:Block[36050-36247]"
  }, {
    "left" : "if (!(pObject instanceof byte[]))",
    "right" : "if (!(pObject instanceof byte[]))",
    "info" : "IfStatement[36044-36184]:IfStatement[36060-36200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36078-36184]:Block[36094-36200]"
  }, {
    "left" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
    "right" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
    "info" : "ThrowStatement[36092-36174]:ThrowStatement[36108-36190]"
  }, {
    "left" : "return encode((byte[]) pObject);",
    "right" : "return encode((byte[]) pObject);",
    "info" : "ReturnStatement[36193-36225]:ReturnStatement[36209-36241]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36527-36533]:Modifier[36543-36549]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[36534-36540]:SimpleType[36550-36556]"
  }, {
    "left" : "encodeToString",
    "right" : "encodeToString",
    "info" : "SimpleName[36541-36555]:SimpleName[36557-36571]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[36556-36569]:SingleVariableDeclaration[36572-36585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36571-36636]:Block[36587-36652]"
  }, {
    "left" : "return StringUtils.newStringUtf8(encode(pArray));",
    "right" : "return StringUtils.newStringUtf8(encode(pArray));",
    "info" : "ReturnStatement[36581-36630]:ReturnStatement[36597-36646]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36915-36921]:Modifier[36931-36937]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[36922-36928]:ArrayType[36938-36944]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[36929-36935]:SimpleName[36945-36951]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[36936-36949]:SingleVariableDeclaration[36952-36965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36951-37278]:Block[36967-37294]"
  }, {
    "left" : "reset();",
    "right" : "reset();",
    "info" : "ExpressionStatement[36961-36969]:ExpressionStatement[36977-36985]"
  }, {
    "left" : "if (pArray == null || pArray.length == 0)",
    "right" : "if (pArray == null || pArray.length == 0)",
    "info" : "IfStatement[36986-37066]:IfStatement[37002-37082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37028-37066]:Block[37044-37082]"
  }, {
    "left" : "return pArray;",
    "right" : "return pArray;",
    "info" : "ReturnStatement[37042-37056]:ReturnStatement[37058-37072]"
  }, {
    "left" : "encode(pArray, 0, pArray.length);",
    "right" : "encode(pArray, 0, pArray.length);",
    "info" : "ExpressionStatement[37075-37108]:ExpressionStatement[37091-37124]"
  }, {
    "left" : "encode(pArray, 0, -1);",
    "right" : "encode(pArray, 0, -1);",
    "info" : "ExpressionStatement[37117-37139]:ExpressionStatement[37133-37155]"
  }, {
    "left" : "byte[] buf = new byte[pos - readPos];",
    "right" : "byte[] buf = new byte[pos - readPos];",
    "info" : "VariableDeclarationStatement[37174-37211]:VariableDeclarationStatement[37190-37227]"
  }, {
    "left" : "readResults(buf, 0, buf.length);",
    "right" : "readResults(buf, 0, buf.length);",
    "info" : "ExpressionStatement[37220-37252]:ExpressionStatement[37236-37268]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[37261-37272]:ReturnStatement[37277-37288]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37850-37857]:Modifier[37866-37873]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37858-37864]:Modifier[37874-37880]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[37865-37869]:PrimitiveType[37881-37885]"
  }, {
    "left" : "getEncodeLength",
    "right" : "getEncodeLength",
    "info" : "SimpleName[37870-37885]:SimpleName[37886-37901]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[37886-37899]:SingleVariableDeclaration[37902-37915]"
  }, {
    "left" : "int chunkSize",
    "right" : "int chunkSize",
    "info" : "SingleVariableDeclaration[37901-37914]:SingleVariableDeclaration[37917-37930]"
  }, {
    "left" : "byte[] chunkSeparator",
    "right" : "byte[] chunkSeparator",
    "info" : "SingleVariableDeclaration[37916-37937]:SingleVariableDeclaration[37932-37953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37939-38457]:Block[37955-38473]"
  }, {
    "left" : "chunkSize = (chunkSize / 4) * 4;",
    "right" : "chunkSize = (chunkSize / 4) * 4;",
    "info" : "ExpressionStatement[38001-38033]:ExpressionStatement[38017-38049]"
  }, {
    "left" : "long len = (pArray.length * 4) / 3;",
    "right" : "long len = (pArray.length * 4) / 3;",
    "info" : "VariableDeclarationStatement[38043-38078]:VariableDeclarationStatement[38059-38094]"
  }, {
    "left" : "long mod = len % 4;",
    "right" : "long mod = len % 4;",
    "info" : "VariableDeclarationStatement[38087-38106]:VariableDeclarationStatement[38103-38122]"
  }, {
    "left" : "if (mod != 0)",
    "right" : "if (mod != 0)",
    "info" : "IfStatement[38115-38168]:IfStatement[38131-38184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38129-38168]:Block[38145-38184]"
  }, {
    "left" : "len += 4 - mod;",
    "right" : "len += 4 - mod;",
    "info" : "ExpressionStatement[38143-38158]:ExpressionStatement[38159-38174]"
  }, {
    "left" : "if (chunkSize > 0)",
    "right" : "if (chunkSize > 0)",
    "info" : "IfStatement[38177-38431]:IfStatement[38193-38447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38196-38431]:Block[38212-38447]"
  }, {
    "left" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
    "right" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
    "info" : "VariableDeclarationStatement[38210-38260]:VariableDeclarationStatement[38226-38276]"
  }, {
    "left" : "len += (len / chunkSize) * chunkSeparator.length;",
    "right" : "len += (len / chunkSize) * chunkSeparator.length;",
    "info" : "ExpressionStatement[38273-38322]:ExpressionStatement[38289-38338]"
  }, {
    "left" : "if (!lenChunksPerfectly)",
    "right" : "if (!lenChunksPerfectly)",
    "info" : "IfStatement[38335-38421]:IfStatement[38351-38437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38360-38421]:Block[38376-38437]"
  }, {
    "left" : "len += chunkSeparator.length;",
    "right" : "len += chunkSeparator.length;",
    "info" : "ExpressionStatement[38378-38407]:ExpressionStatement[38394-38423]"
  }, {
    "left" : "return len;",
    "right" : "return len;",
    "info" : "ReturnStatement[38440-38451]:ReturnStatement[38456-38467]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38774-38780]:Modifier[38790-38796]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38781-38787]:Modifier[38797-38803]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[38788-38798]:SimpleType[38804-38814]"
  }, {
    "left" : "decodeInteger",
    "right" : "decodeInteger",
    "info" : "SimpleName[38799-38812]:SimpleName[38815-38828]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[38813-38826]:SingleVariableDeclaration[38829-38842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38828-38891]:Block[38844-38907]"
  }, {
    "left" : "return new BigInteger(1, decodeBase64(pArray));",
    "right" : "return new BigInteger(1, decodeBase64(pArray));",
    "info" : "ReturnStatement[38838-38885]:ReturnStatement[38854-38901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39229-39235]:Modifier[39245-39251]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39236-39242]:Modifier[39252-39258]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[39243-39249]:ArrayType[39259-39265]"
  }, {
    "left" : "encodeInteger",
    "right" : "encodeInteger",
    "info" : "SimpleName[39250-39263]:SimpleName[39266-39279]"
  }, {
    "left" : "BigInteger bigInt",
    "right" : "BigInteger bigInt",
    "info" : "SingleVariableDeclaration[39264-39281]:SingleVariableDeclaration[39280-39297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39283-39478]:Block[39299-39494]"
  }, {
    "left" : "if (bigInt == null)",
    "right" : "if (bigInt == null)",
    "info" : "IfStatement[39293-39412]:IfStatement[39309-39428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39313-39412]:Block[39329-39428]"
  }, {
    "left" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
    "right" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
    "info" : "ThrowStatement[39327-39402]:ThrowStatement[39343-39418]"
  }, {
    "left" : "return encodeBase64(toIntegerBytes(bigInt), false);",
    "right" : "return encodeBase64(toIntegerBytes(bigInt), false);",
    "info" : "ReturnStatement[39421-39472]:ReturnStatement[39437-39488]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39748-39754]:Modifier[39764-39770]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[39755-39761]:ArrayType[39771-39777]"
  }, {
    "left" : "toIntegerBytes",
    "right" : "toIntegerBytes",
    "info" : "SimpleName[39762-39776]:SimpleName[39778-39792]"
  }, {
    "left" : "BigInteger bigInt",
    "right" : "BigInteger bigInt",
    "info" : "SingleVariableDeclaration[39777-39794]:SingleVariableDeclaration[39793-39810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39796-40621]:Block[39812-40637]"
  }, {
    "left" : "int bitlen = bigInt.bitLength();",
    "right" : "int bitlen = bigInt.bitLength();",
    "info" : "VariableDeclarationStatement[39806-39838]:VariableDeclarationStatement[39822-39854]"
  }, {
    "left" : "bitlen = ((bitlen + 7) >> 3) << 3;",
    "right" : "bitlen = ((bitlen + 7) >> 3) << 3;",
    "info" : "ExpressionStatement[39871-39905]:ExpressionStatement[39887-39921]"
  }, {
    "left" : "byte[] bigBytes = bigInt.toByteArray();",
    "right" : "byte[] bigBytes = bigInt.toByteArray();",
    "info" : "VariableDeclarationStatement[39914-39953]:VariableDeclarationStatement[39930-39969]"
  }, {
    "left" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
    "right" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
    "info" : "IfStatement[39963-40092]:IfStatement[39979-40108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40052-40092]:Block[40068-40108]"
  }, {
    "left" : "return bigBytes;",
    "right" : "return bigBytes;",
    "info" : "ReturnStatement[40066-40082]:ReturnStatement[40082-40098]"
  }, {
    "left" : "int startSrc = 0;",
    "right" : "int startSrc = 0;",
    "info" : "VariableDeclarationStatement[40162-40179]:VariableDeclarationStatement[40178-40195]"
  }, {
    "left" : "int len = bigBytes.length;",
    "right" : "int len = bigBytes.length;",
    "info" : "VariableDeclarationStatement[40188-40214]:VariableDeclarationStatement[40204-40230]"
  }, {
    "left" : "if ((bigInt.bitLength() % 8) == 0)",
    "right" : "if ((bigInt.bitLength() % 8) == 0)",
    "info" : "IfStatement[40296-40387]:IfStatement[40312-40403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40331-40387]:Block[40347-40403]"
  }, {
    "left" : "startSrc = 1;",
    "right" : "startSrc = 1;",
    "info" : "ExpressionStatement[40345-40358]:ExpressionStatement[40361-40374]"
  }, {
    "left" : "len--;",
    "right" : "len--;",
    "info" : "ExpressionStatement[40371-40377]:ExpressionStatement[40387-40393]"
  }, {
    "left" : "int startDst = bitlen / 8 - len;",
    "right" : "int startDst = bitlen / 8 - len;",
    "info" : "VariableDeclarationStatement[40396-40428]:VariableDeclarationStatement[40412-40444]"
  }, {
    "left" : "byte[] resizedBytes = new byte[bitlen / 8];",
    "right" : "byte[] resizedBytes = new byte[bitlen / 8];",
    "info" : "VariableDeclarationStatement[40468-40511]:VariableDeclarationStatement[40484-40527]"
  }, {
    "left" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
    "right" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
    "info" : "ExpressionStatement[40520-40586]:ExpressionStatement[40536-40602]"
  }, {
    "left" : "return resizedBytes;",
    "right" : "return resizedBytes;",
    "info" : "ReturnStatement[40595-40615]:ReturnStatement[40611-40631]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40716-40723]:Modifier[40732-40739]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40724-40728]:PrimitiveType[40740-40744]"
  }, {
    "left" : "reset",
    "right" : "reset",
    "info" : "SimpleName[40729-40734]:SimpleName[40745-40750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40737-40875]:Block[40753-40891]"
  }, {
    "left" : "buffer = null;",
    "right" : "buffer = null;",
    "info" : "ExpressionStatement[40747-40761]:ExpressionStatement[40763-40777]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[40770-40778]:ExpressionStatement[40786-40794]"
  }, {
    "left" : "readPos = 0;",
    "right" : "readPos = 0;",
    "info" : "ExpressionStatement[40787-40799]:ExpressionStatement[40803-40815]"
  }, {
    "left" : "currentLinePos = 0;",
    "right" : "currentLinePos = 0;",
    "info" : "ExpressionStatement[40808-40827]:ExpressionStatement[40824-40843]"
  }, {
    "left" : "modulus = 0;",
    "right" : "modulus = 0;",
    "info" : "ExpressionStatement[40836-40848]:ExpressionStatement[40852-40864]"
  }, {
    "left" : "eof = false;",
    "right" : "eof = false;",
    "info" : "ExpressionStatement[40857-40869]:ExpressionStatement[40873-40885]"
  } ]
}