{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final static Class<?> CLASS_OBJECT = Object.class;",
      "right" : "private final static Class<?> CLASS_OBJECT = Object.class;",
      "info" : "FieldDeclaration[1550-1608]:FieldDeclaration[1550-1608]"
    }, {
      "left" : "private final static Class<?> CLASS_STRING = String.class;",
      "right" : "private final static Class<?> CLASS_STRING = String.class;",
      "info" : "FieldDeclaration[1613-1671]:FieldDeclaration[1613-1671]"
    }, {
      "left" : "private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class;",
      "right" : "private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class;",
      "info" : "FieldDeclaration[1676-1745]:FieldDeclaration[1676-1745]"
    }, {
      "left" : "private final static Class<?> CLASS_ITERABLE = Iterable.class;",
      "right" : "private final static Class<?> CLASS_ITERABLE = Iterable.class;",
      "info" : "FieldDeclaration[1750-1812]:FieldDeclaration[1750-1812]"
    }, {
      "left" : "private final static Class<?> CLASS_MAP_ENTRY = Map.Entry.class;",
      "right" : "private final static Class<?> CLASS_MAP_ENTRY = Map.Entry.class;",
      "info" : "FieldDeclaration[1817-1881]:FieldDeclaration[1817-1881]"
    }, {
      "left" : "protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\");",
      "right" : "protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\");",
      "info" : "FieldDeclaration[1887-2132]:FieldDeclaration[1887-2132]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Map>> _mapFallbacks =\n        new HashMap<String, Class<? extends Map>>();",
      "right" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Map>> _mapFallbacks =\n        new HashMap<String, Class<? extends Map>>();",
      "info" : "FieldDeclaration[2338-2491]:FieldDeclaration[2338-2491]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Collection>> _collectionFallbacks =\n        new HashMap<String, Class<? extends Collection>>();",
      "right" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Collection>> _collectionFallbacks =\n        new HashMap<String, Class<? extends Collection>>();",
      "info" : "FieldDeclaration[3183-3357]:FieldDeclaration[3183-3357]"
    }, {
      "left" : "protected final DeserializerFactoryConfig _factoryConfig;",
      "right" : "protected final DeserializerFactoryConfig _factoryConfig;",
      "info" : "FieldDeclaration[4343-4572]:FieldDeclaration[4343-4572]"
    }, {
      "left" : "protected BasicDeserializerFactory(DeserializerFactoryConfig config)",
      "right" : "protected BasicDeserializerFactory(DeserializerFactoryConfig config)",
      "info" : "MethodDeclaration[4744-4853]:MethodDeclaration[4744-4853]"
    }, {
      "left" : "public DeserializerFactoryConfig getFactoryConfig()",
      "right" : "public DeserializerFactoryConfig getFactoryConfig()",
      "info" : "MethodDeclaration[4863-5240]:MethodDeclaration[4863-5240]"
    }, {
      "left" : "protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);",
      "right" : "protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);",
      "info" : "MethodDeclaration[5246-5330]:MethodDeclaration[5246-5330]"
    }, {
      "left" : "public final DeserializerFactory withAdditionalDeserializers(Deserializers additional)",
      "right" : "public final DeserializerFactory withAdditionalDeserializers(Deserializers additional)",
      "info" : "MethodDeclaration[5528-5843]:MethodDeclaration[5528-5843]"
    }, {
      "left" : "public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional)",
      "right" : "public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional)",
      "info" : "MethodDeclaration[5849-6176]:MethodDeclaration[5849-6176]"
    }, {
      "left" : "public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier)",
      "right" : "public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier)",
      "info" : "MethodDeclaration[6186-6513]:MethodDeclaration[6186-6513]"
    }, {
      "left" : "public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver)",
      "right" : "public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver)",
      "info" : "MethodDeclaration[6519-6838]:MethodDeclaration[6519-6838]"
    }, {
      "left" : "public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators)",
      "right" : "public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators)",
      "info" : "MethodDeclaration[6844-7165]:MethodDeclaration[6844-7165]"
    }, {
      "left" : "public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException",
      "right" : "public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException",
      "info" : "MethodDeclaration[7372-8264]:MethodDeclaration[7372-8264]"
    }, {
      "left" : "private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)\n        throws JsonMappingException",
      "right" : "private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[8270-9040]:MethodDeclaration[8270-9040]"
    }, {
      "left" : "public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[9260-11681]:MethodDeclaration[9260-11681]"
    }, {
      "left" : "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[11687-11997]:MethodDeclaration[11687-11997]"
    }, {
      "left" : "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[12003-14002]:MethodDeclaration[12003-14002]"
    }, {
      "left" : "protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc) throws JsonMappingException",
      "right" : "protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc) throws JsonMappingException",
      "info" : "MethodDeclaration[14008-15521]:MethodDeclaration[14008-15521]"
    }, {
      "left" : "public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,\n            Annotated annotated, Object instDef)\n        throws JsonMappingException",
      "right" : "public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,\n            Annotated annotated, Object instDef)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[15531-16993]:MethodDeclaration[15531-16993]"
    }, {
      "left" : "protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "right" : "protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[16999-24398]:MethodDeclaration[16999-24398]"
    }, {
      "left" : "protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            List<AnnotatedConstructor> implicitCtors) throws JsonMappingException",
      "right" : "protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            List<AnnotatedConstructor> implicitCtors) throws JsonMappingException",
      "info" : "MethodDeclaration[24404-26927]:MethodDeclaration[24404-26927]"
    }, {
      "left" : "protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n            AnnotatedWithParams creator, BeanPropertyDefinition propDef)",
      "right" : "protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n            AnnotatedWithParams creator, BeanPropertyDefinition propDef)",
      "info" : "MethodDeclaration[26933-28066]:MethodDeclaration[26933-28066]"
    }, {
      "left" : "protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n        throws JsonMappingException",
      "right" : "protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[28076-29808]:MethodDeclaration[28076-29808]"
    }, {
      "left" : "protected void _addDeserializerFactoryMethods\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "right" : "protected void _addDeserializerFactoryMethods\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[29814-35440]:MethodDeclaration[29814-35440]"
    }, {
      "left" : "protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedMethod factory, boolean isCreator)\n        throws JsonMappingException",
      "right" : "protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedMethod factory, boolean isCreator)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[35446-37172]:MethodDeclaration[35446-37172]"
    }, {
      "left" : "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, PropertyName name, int index,\n            AnnotatedParameter param,\n            Object injectableValueId)\n        throws JsonMappingException",
      "right" : "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, PropertyName name, int index,\n            AnnotatedParameter param,\n            Object injectableValueId)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[37178-40024]:MethodDeclaration[37178-40024]"
    }, {
      "left" : "protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[40030-40660]:MethodDeclaration[40030-40660]"
    }, {
      "left" : "protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[40666-40961]:MethodDeclaration[40666-40961]"
    }, {
      "left" : "// in 2.6, remove from 2.7\n    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "// in 2.6, remove from 2.7\n    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[40967-41257]:MethodDeclaration[40967-41257]"
    }, {
      "left" : "// in 2.6, remove from 2.7\n    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "// in 2.6, remove from 2.7\n    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[41263-41611]:MethodDeclaration[41263-41611]"
    }, {
      "left" : "public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[41826-43658]:MethodDeclaration[41826-43658]"
    }, {
      "left" : "public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[43877-47953]:MethodDeclaration[43877-47953]"
    }, {
      "left" : "protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)",
      "right" : "protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)",
      "info" : "MethodDeclaration[47959-48363]:MethodDeclaration[47959-48363]"
    }, {
      "left" : "public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[48472-49891]:MethodDeclaration[48472-49891]"
    }, {
      "left" : "public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[50103-54422]:MethodDeclaration[50103-54422]"
    }, {
      "left" : "public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[54520-56395]:MethodDeclaration[54520-56395]"
    }, {
      "left" : "public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[56605-58788]:MethodDeclaration[56605-58788]"
    }, {
      "left" : "public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n            JavaType nodeType, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n            JavaType nodeType, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[59002-59634]:MethodDeclaration[59002-59634]"
    }, {
      "left" : "public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException",
      "right" : "public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[59854-61349]:MethodDeclaration[59854-61349]"
    }, {
      "left" : "protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[61355-61748]:MethodDeclaration[61355-61748]"
    }, {
      "left" : "public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "right" : "public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[61971-63330]:MethodDeclaration[61971-63330]"
    }, {
      "left" : "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "right" : "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[63336-65866]:MethodDeclaration[63336-65866]"
    }, {
      "left" : "public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,\n            JavaType baseType, AnnotatedMember annotated)\n        throws JsonMappingException",
      "right" : "public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,\n            JavaType baseType, AnnotatedMember annotated)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[66036-67509]:MethodDeclaration[66036-67509]"
    }, {
      "left" : "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,\n            JavaType containerType, AnnotatedMember propertyEntity)\n        throws JsonMappingException",
      "right" : "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,\n            JavaType containerType, AnnotatedMember propertyEntity)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[67519-69034]:MethodDeclaration[67519-69034]"
    }, {
      "left" : "public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[69040-73098]:MethodDeclaration[69040-73098]"
    }, {
      "left" : "protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException",
      "right" : "protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException",
      "info" : "MethodDeclaration[73104-73378]:MethodDeclaration[73104-73378]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[73580-74194]:MethodDeclaration[73580-74194]"
    }, {
      "left" : "protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[74200-74717]:MethodDeclaration[74200-74717]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[74723-75352]:MethodDeclaration[74723-75352]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[75362-76003]:MethodDeclaration[75362-76003]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[76009-76459]:MethodDeclaration[76009-76459]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[76469-77139]:MethodDeclaration[76469-77139]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[77145-77827]:MethodDeclaration[77145-77827]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[77833-78308]:MethodDeclaration[77833-78308]"
    }, {
      "left" : "protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[78526-79097]:MethodDeclaration[78526-79097]"
    }, {
      "left" : "protected JavaType resolveType(DeserializationContext ctxt,\n            BeanDescription beanDesc, JavaType type, AnnotatedMember member)\n        throws JsonMappingException",
      "right" : "protected JavaType resolveType(DeserializationContext ctxt,\n            BeanDescription beanDesc, JavaType type, AnnotatedMember member)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[83310-86037]:MethodDeclaration[83349-86076]"
    }, {
      "left" : "protected EnumResolver constructEnumResolver(Class<?> enumClass,\n            DeserializationConfig config, AnnotatedMethod jsonValueMethod)",
      "right" : "protected EnumResolver constructEnumResolver(Class<?> enumClass,\n            DeserializationConfig config, AnnotatedMethod jsonValueMethod)",
      "info" : "MethodDeclaration[86047-86830]:MethodDeclaration[86086-86869]"
    }, {
      "left" : "protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType)",
      "right" : "protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType)",
      "info" : "MethodDeclaration[86836-87118]:MethodDeclaration[86875-87157]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4813-4853]:Block[4813-4853]"
    }, {
      "left" : "_factoryConfig = config;",
      "right" : "_factoryConfig = config;",
      "info" : "ExpressionStatement[4823-4847]:ExpressionStatement[4823-4847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5202-5240]:Block[5202-5240]"
    }, {
      "left" : "return _factoryConfig;",
      "right" : "return _factoryConfig;",
      "info" : "ReturnStatement[5212-5234]:ReturnStatement[5212-5234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5753-5843]:Block[5753-5843]"
    }, {
      "left" : "return withConfig(_factoryConfig.withAdditionalDeserializers(additional));",
      "right" : "return withConfig(_factoryConfig.withAdditionalDeserializers(additional));",
      "info" : "ReturnStatement[5763-5837]:ReturnStatement[5763-5837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6083-6176]:Block[6083-6176]"
    }, {
      "left" : "return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));",
      "right" : "return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));",
      "info" : "ReturnStatement[6093-6170]:ReturnStatement[6093-6170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6428-6513]:Block[6428-6513]"
    }, {
      "left" : "return withConfig(_factoryConfig.withDeserializerModifier(modifier));",
      "right" : "return withConfig(_factoryConfig.withDeserializerModifier(modifier));",
      "info" : "ReturnStatement[6438-6507]:ReturnStatement[6438-6507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6753-6838]:Block[6753-6838]"
    }, {
      "left" : "return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));",
      "right" : "return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));",
      "info" : "ReturnStatement[6763-6832]:ReturnStatement[6763-6832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7077-7165]:Block[7077-7165]"
    }, {
      "left" : "return withConfig(_factoryConfig.withValueInstantiators(instantiators));",
      "right" : "return withConfig(_factoryConfig.withValueInstantiators(instantiators));",
      "info" : "ReturnStatement[7087-7159]:ReturnStatement[7087-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7495-8264]:Block[7495-8264]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7540-8258]:WhileStatement[7540-8258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7553-8258]:Block[7553-8258]"
    }, {
      "left" : "JavaType next = _mapAbstractType2(config, type);",
      "right" : "JavaType next = _mapAbstractType2(config, type);",
      "info" : "VariableDeclarationStatement[7567-7615]:VariableDeclarationStatement[7567-7615]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[7628-7690]:IfStatement[7628-7690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7646-7690]:Block[7646-7690]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[7664-7676]:ReturnStatement[7664-7676]"
    }, {
      "left" : "Class<?> prevCls = type.getRawClass();",
      "right" : "Class<?> prevCls = type.getRawClass();",
      "info" : "VariableDeclarationStatement[7893-7931]:VariableDeclarationStatement[7893-7931]"
    }, {
      "left" : "Class<?> nextCls = next.getRawClass();",
      "right" : "Class<?> nextCls = next.getRawClass();",
      "info" : "VariableDeclarationStatement[7944-7982]:VariableDeclarationStatement[7944-7982]"
    }, {
      "left" : "if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls))",
      "right" : "if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls))",
      "info" : "IfStatement[7995-8223]:IfStatement[7995-8223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8059-8223]:Block[8059-8223]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\");",
      "right" : "throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\");",
      "info" : "ThrowStatement[8077-8209]:ThrowStatement[8077-8209]"
    }, {
      "left" : "type = next;",
      "right" : "type = next;",
      "info" : "ExpressionStatement[8236-8248]:ExpressionStatement[8236-8248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8581-9040]:Block[8581-9040]"
    }, {
      "left" : "Class<?> currClass = type.getRawClass();",
      "right" : "Class<?> currClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[8591-8631]:VariableDeclarationStatement[8591-8631]"
    }, {
      "left" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "right" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "info" : "IfStatement[8640-9013]:IfStatement[8640-9013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8687-9013]:Block[8687-9013]"
    }, {
      "left" : "for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers())",
      "right" : "for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers())",
      "info" : "EnhancedForStatement[8701-9003]:EnhancedForStatement[8701-9003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8778-9003]:Block[8778-9003]"
    }, {
      "left" : "JavaType concrete = resolver.findTypeMapping(config, type);",
      "right" : "JavaType concrete = resolver.findTypeMapping(config, type);",
      "info" : "VariableDeclarationStatement[8796-8855]:VariableDeclarationStatement[8796-8855]"
    }, {
      "left" : "if (concrete != null && concrete.getRawClass() != currClass)",
      "right" : "if (concrete != null && concrete.getRawClass() != currClass)",
      "info" : "IfStatement[8872-8989]:IfStatement[8872-8989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8933-8989]:Block[8933-8989]"
    }, {
      "left" : "return concrete;",
      "right" : "return concrete;",
      "info" : "ReturnStatement[8955-8971]:ReturnStatement[8955-8971]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9022-9034]:ReturnStatement[9022-9034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9619-11681]:Block[9619-11681]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[9629-9683]:VariableDeclarationStatement[9629-9683]"
    }, {
      "left" : "ValueInstantiator instantiator = null;",
      "right" : "ValueInstantiator instantiator = null;",
      "info" : "VariableDeclarationStatement[9693-9731]:VariableDeclarationStatement[9693-9731]"
    }, {
      "left" : "AnnotatedClass ac = beanDesc.getClassInfo();",
      "right" : "AnnotatedClass ac = beanDesc.getClassInfo();",
      "info" : "VariableDeclarationStatement[9815-9859]:VariableDeclarationStatement[9815-9859]"
    }, {
      "left" : "Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac);",
      "right" : "Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac);",
      "info" : "VariableDeclarationStatement[9868-9944]:VariableDeclarationStatement[9868-9944]"
    }, {
      "left" : "if (instDef != null)",
      "right" : "if (instDef != null)",
      "info" : "IfStatement[9953-10061]:IfStatement[9953-10061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9974-10061]:Block[9974-10061]"
    }, {
      "left" : "instantiator = _valueInstantiatorInstance(config, ac, instDef);",
      "right" : "instantiator = _valueInstantiatorInstance(config, ac, instDef);",
      "info" : "ExpressionStatement[9988-10051]:ExpressionStatement[9988-10051]"
    }, {
      "left" : "if (instantiator == null)",
      "right" : "if (instantiator == null)",
      "info" : "IfStatement[10070-10447]:IfStatement[10070-10447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10096-10447]:Block[10096-10447]"
    }, {
      "left" : "instantiator = _findStdValueInstantiator(config, beanDesc);",
      "right" : "instantiator = _findStdValueInstantiator(config, beanDesc);",
      "info" : "ExpressionStatement[10241-10300]:ExpressionStatement[10241-10300]"
    }, {
      "left" : "if (instantiator == null)",
      "right" : "if (instantiator == null)",
      "info" : "IfStatement[10313-10437]:IfStatement[10313-10437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10339-10437]:Block[10339-10437]"
    }, {
      "left" : "instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);",
      "right" : "instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);",
      "info" : "ExpressionStatement[10357-10423]:ExpressionStatement[10357-10423]"
    }, {
      "left" : "if (_factoryConfig.hasValueInstantiators())",
      "right" : "if (_factoryConfig.hasValueInstantiators())",
      "info" : "IfStatement[10526-11099]:IfStatement[10526-11099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10570-11099]:Block[10570-11099]"
    }, {
      "left" : "for (ValueInstantiators insts : _factoryConfig.valueInstantiators())",
      "right" : "for (ValueInstantiators insts : _factoryConfig.valueInstantiators())",
      "info" : "EnhancedForStatement[10584-11089]:EnhancedForStatement[10584-11089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10653-11089]:Block[10653-11089]"
    }, {
      "left" : "instantiator = insts.findValueInstantiator(config, beanDesc, instantiator);",
      "right" : "instantiator = insts.findValueInstantiator(config, beanDesc, instantiator);",
      "info" : "ExpressionStatement[10671-10746]:ExpressionStatement[10671-10746]"
    }, {
      "left" : "if (instantiator == null)",
      "right" : "if (instantiator == null)",
      "info" : "IfStatement[10835-11075]:IfStatement[10835-11075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10861-11075]:Block[10861-11075]"
    }, {
      "left" : "throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \"\n                            +insts.getClass().getName()+\"): returned null ValueInstantiator\");",
      "right" : "throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \"\n                            +insts.getClass().getName()+\"): returned null ValueInstantiator\");",
      "info" : "ThrowStatement[10883-11057]:ThrowStatement[10883-11057]"
    }, {
      "left" : "if (instantiator.getIncompleteParameter() != null)",
      "right" : "if (instantiator.getIncompleteParameter() != null)",
      "info" : "IfStatement[11189-11645]:IfStatement[11189-11645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11240-11645]:Block[11240-11645]"
    }, {
      "left" : "final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();",
      "right" : "final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();",
      "info" : "VariableDeclarationStatement[11254-11337]:VariableDeclarationStatement[11254-11337]"
    }, {
      "left" : "final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();",
      "right" : "final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();",
      "info" : "VariableDeclarationStatement[11350-11412]:VariableDeclarationStatement[11350-11412]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "right" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "info" : "ThrowStatement[11425-11635]:ThrowStatement[11425-11635]"
    }, {
      "left" : "return instantiator;",
      "right" : "return instantiator;",
      "info" : "ReturnStatement[11655-11675]:ReturnStatement[11655-11675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11847-11997]:Block[11847-11997]"
    }, {
      "left" : "if (beanDesc.getBeanClass() == JsonLocation.class)",
      "right" : "if (beanDesc.getBeanClass() == JsonLocation.class)",
      "info" : "IfStatement[11857-11970]:IfStatement[11857-11970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11908-11970]:Block[11908-11970]"
    }, {
      "left" : "return new JsonLocationInstantiator();",
      "right" : "return new JsonLocationInstantiator();",
      "info" : "ReturnStatement[11922-11960]:ReturnStatement[11922-11960]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11979-11991]:ReturnStatement[11979-11991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12332-14002]:Block[12332-14002]"
    }, {
      "left" : "boolean fixAccess = ctxt.canOverrideAccessModifiers();",
      "right" : "boolean fixAccess = ctxt.canOverrideAccessModifiers();",
      "info" : "VariableDeclarationStatement[12342-12396]:VariableDeclarationStatement[12342-12396]"
    }, {
      "left" : "CreatorCollector creators =  new CreatorCollector(beanDesc, fixAccess);",
      "right" : "CreatorCollector creators =  new CreatorCollector(beanDesc, fixAccess);",
      "info" : "VariableDeclarationStatement[12405-12476]:VariableDeclarationStatement[12405-12476]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[12485-12548]:VariableDeclarationStatement[12485-12548]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[12624-12678]:VariableDeclarationStatement[12624-12678]"
    }, {
      "left" : "VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();",
      "right" : "VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();",
      "info" : "VariableDeclarationStatement[12687-12756]:VariableDeclarationStatement[12687-12756]"
    }, {
      "left" : "vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);",
      "right" : "vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);",
      "info" : "ExpressionStatement[12765-12841]:ExpressionStatement[12765-12841]"
    }, {
      "left" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt,\n                beanDesc);",
      "right" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt,\n                beanDesc);",
      "info" : "VariableDeclarationStatement[13385-13509]:VariableDeclarationStatement[13385-13509]"
    }, {
      "left" : "_addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "right" : "_addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "info" : "ExpressionStatement[13641-13727]:ExpressionStatement[13641-13727]"
    }, {
      "left" : "if (beanDesc.getType().isConcrete())",
      "right" : "if (beanDesc.getType().isConcrete())",
      "info" : "IfStatement[13791-13936]:IfStatement[13791-13936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13828-13936]:Block[13828-13936]"
    }, {
      "left" : "_addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "right" : "_addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "info" : "ExpressionStatement[13842-13926]:ExpressionStatement[13842-13926]"
    }, {
      "left" : "return creators.constructValueInstantiator(config);",
      "right" : "return creators.constructValueInstantiator(config);",
      "info" : "ReturnStatement[13945-13996]:ReturnStatement[13945-13996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14195-15521]:Block[14195-15521]"
    }, {
      "left" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap();",
      "right" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap();",
      "info" : "VariableDeclarationStatement[14205-14287]:VariableDeclarationStatement[14205-14287]"
    }, {
      "left" : "for (BeanPropertyDefinition propDef : beanDesc.findProperties())",
      "right" : "for (BeanPropertyDefinition propDef : beanDesc.findProperties())",
      "info" : "EnhancedForStatement[14296-15492]:EnhancedForStatement[14296-15492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14361-15492]:Block[14361-15492]"
    }, {
      "left" : "Iterator<AnnotatedParameter> it = propDef.getConstructorParameters();",
      "right" : "Iterator<AnnotatedParameter> it = propDef.getConstructorParameters();",
      "info" : "VariableDeclarationStatement[14375-14444]:VariableDeclarationStatement[14375-14444]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[14457-15482]:WhileStatement[14457-15482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14478-15482]:Block[14478-15482]"
    }, {
      "left" : "AnnotatedParameter param = it.next();",
      "right" : "AnnotatedParameter param = it.next();",
      "info" : "VariableDeclarationStatement[14496-14533]:VariableDeclarationStatement[14496-14533]"
    }, {
      "left" : "AnnotatedWithParams owner = param.getOwner();",
      "right" : "AnnotatedWithParams owner = param.getOwner();",
      "info" : "VariableDeclarationStatement[14550-14595]:VariableDeclarationStatement[14550-14595]"
    }, {
      "left" : "BeanPropertyDefinition[] defs = result.get(owner);",
      "right" : "BeanPropertyDefinition[] defs = result.get(owner);",
      "info" : "VariableDeclarationStatement[14612-14662]:VariableDeclarationStatement[14612-14662]"
    }, {
      "left" : "final int index = param.getIndex();",
      "right" : "final int index = param.getIndex();",
      "info" : "VariableDeclarationStatement[14679-14714]:VariableDeclarationStatement[14679-14714]"
    }, {
      "left" : "if (defs == null)",
      "right" : "if (defs == null)",
      "info" : "IfStatement[14748-15429]:IfStatement[14748-15429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14766-15137]:Block[14766-15137]"
    }, {
      "left" : "if (result.isEmpty())",
      "right" : "if (result.isEmpty())",
      "info" : "IfStatement[14788-14992]:IfStatement[14788-14992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14810-14992]:Block[14810-14992]"
    }, {
      "left" : "result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>();",
      "right" : "result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>();",
      "info" : "ExpressionStatement[14895-14970]:ExpressionStatement[14895-14970]"
    }, {
      "left" : "defs = new BeanPropertyDefinition[owner.getParameterCount()];",
      "right" : "defs = new BeanPropertyDefinition[owner.getParameterCount()];",
      "info" : "ExpressionStatement[15013-15074]:ExpressionStatement[15013-15074]"
    }, {
      "left" : "result.put(owner, defs);",
      "right" : "result.put(owner, defs);",
      "info" : "ExpressionStatement[15095-15119]:ExpressionStatement[15095-15119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15143-15429]:Block[15143-15429]"
    }, {
      "left" : "if (defs[index] != null)",
      "right" : "if (defs[index] != null)",
      "info" : "IfStatement[15165-15411]:IfStatement[15165-15411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15190-15411]:Block[15190-15411]"
    }, {
      "left" : "throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner\n                                +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef);",
      "right" : "throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner\n                                +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef);",
      "info" : "ThrowStatement[15216-15389]:ThrowStatement[15216-15389]"
    }, {
      "left" : "defs[index] = propDef;",
      "right" : "defs[index] = propDef;",
      "info" : "ExpressionStatement[15446-15468]:ExpressionStatement[15446-15468]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15501-15515]:ReturnStatement[15501-15515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15702-16993]:Block[15702-16993]"
    }, {
      "left" : "if (instDef == null)",
      "right" : "if (instDef == null)",
      "info" : "IfStatement[15712-15769]:IfStatement[15712-15769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15733-15769]:Block[15733-15769]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15747-15759]:ReturnStatement[15747-15759]"
    }, {
      "left" : "ValueInstantiator inst;",
      "right" : "ValueInstantiator inst;",
      "info" : "VariableDeclarationStatement[15779-15802]:VariableDeclarationStatement[15779-15802]"
    }, {
      "left" : "if (instDef instanceof ValueInstantiator)",
      "right" : "if (instDef instanceof ValueInstantiator)",
      "info" : "IfStatement[15820-15921]:IfStatement[15820-15921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15862-15921]:Block[15862-15921]"
    }, {
      "left" : "return (ValueInstantiator) instDef;",
      "right" : "return (ValueInstantiator) instDef;",
      "info" : "ReturnStatement[15876-15911]:ReturnStatement[15876-15911]"
    }, {
      "left" : "if (!(instDef instanceof Class))",
      "right" : "if (!(instDef instanceof Class))",
      "info" : "IfStatement[15930-16230]:IfStatement[15930-16230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15963-16230]:Block[15963-16230]"
    }, {
      "left" : "throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                    +instDef.getClass().getName()\n                    +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");",
      "right" : "throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                    +instDef.getClass().getName()\n                    +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");",
      "info" : "ThrowStatement[15977-16220]:ThrowStatement[15977-16220]"
    }, {
      "left" : "Class<?> instClass = (Class<?>)instDef;",
      "right" : "Class<?> instClass = (Class<?>)instDef;",
      "info" : "VariableDeclarationStatement[16239-16278]:VariableDeclarationStatement[16239-16278]"
    }, {
      "left" : "if (ClassUtil.isBogusClass(instClass))",
      "right" : "if (ClassUtil.isBogusClass(instClass))",
      "info" : "IfStatement[16287-16362]:IfStatement[16287-16362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16326-16362]:Block[16326-16362]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16340-16352]:ReturnStatement[16340-16352]"
    }, {
      "left" : "if (!ValueInstantiator.class.isAssignableFrom(instClass))",
      "right" : "if (!ValueInstantiator.class.isAssignableFrom(instClass))",
      "info" : "IfStatement[16371-16606]:IfStatement[16371-16606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16429-16606]:Block[16429-16606]"
    }, {
      "left" : "throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName()\n                    +\"; expected Class<ValueInstantiator>\");",
      "right" : "throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName()\n                    +\"; expected Class<ValueInstantiator>\");",
      "info" : "ThrowStatement[16443-16596]:ThrowStatement[16443-16596]"
    }, {
      "left" : "HandlerInstantiator hi = config.getHandlerInstantiator();",
      "right" : "HandlerInstantiator hi = config.getHandlerInstantiator();",
      "info" : "VariableDeclarationStatement[16615-16672]:VariableDeclarationStatement[16615-16672]"
    }, {
      "left" : "if (hi != null)",
      "right" : "if (hi != null)",
      "info" : "IfStatement[16681-16862]:IfStatement[16681-16862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16697-16862]:Block[16697-16862]"
    }, {
      "left" : "inst = hi.valueInstantiatorInstance(config, annotated, instClass);",
      "right" : "inst = hi.valueInstantiatorInstance(config, annotated, instClass);",
      "info" : "ExpressionStatement[16711-16777]:ExpressionStatement[16711-16777]"
    }, {
      "left" : "if (inst != null)",
      "right" : "if (inst != null)",
      "info" : "IfStatement[16790-16852]:IfStatement[16790-16852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16808-16852]:Block[16808-16852]"
    }, {
      "left" : "return inst;",
      "right" : "return inst;",
      "info" : "ReturnStatement[16826-16838]:ReturnStatement[16826-16838]"
    }, {
      "left" : "return (ValueInstantiator) ClassUtil.createInstance(instClass,\n                config.canOverrideAccessModifiers());",
      "right" : "return (ValueInstantiator) ClassUtil.createInstance(instClass,\n                config.canOverrideAccessModifiers());",
      "info" : "ReturnStatement[16871-16987]:ReturnStatement[16871-16987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17317-24398]:Block[17317-24398]"
    }, {
      "left" : "AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();",
      "right" : "AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();",
      "info" : "VariableDeclarationStatement[17535-17604]:VariableDeclarationStatement[17535-17604]"
    }, {
      "left" : "if (defaultCtor != null)",
      "right" : "if (defaultCtor != null)",
      "info" : "IfStatement[17613-17811]:IfStatement[17613-17811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17638-17811]:Block[17638-17811]"
    }, {
      "left" : "if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor))",
      "right" : "if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor))",
      "info" : "IfStatement[17652-17801]:IfStatement[17652-17801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17729-17801]:Block[17729-17801]"
    }, {
      "left" : "creators.setDefaultCreator(defaultCtor);",
      "right" : "creators.setDefaultCreator(defaultCtor);",
      "info" : "ExpressionStatement[17747-17787]:ExpressionStatement[17747-17787]"
    }, {
      "left" : "List<AnnotatedConstructor> implicitCtors = null;",
      "right" : "List<AnnotatedConstructor> implicitCtors = null;",
      "info" : "VariableDeclarationStatement[17866-17914]:VariableDeclarationStatement[17866-17914]"
    }, {
      "left" : "for (AnnotatedConstructor ctor : beanDesc.getConstructors())",
      "right" : "for (AnnotatedConstructor ctor : beanDesc.getConstructors())",
      "info" : "EnhancedForStatement[17923-24009]:EnhancedForStatement[17923-24009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17984-24009]:Block[17984-24009]"
    }, {
      "left" : "final boolean isCreator = intr.hasCreatorAnnotation(ctor);",
      "right" : "final boolean isCreator = intr.hasCreatorAnnotation(ctor);",
      "info" : "VariableDeclarationStatement[17998-18056]:VariableDeclarationStatement[17998-18056]"
    }, {
      "left" : "BeanPropertyDefinition[] propDefs = creatorParams.get(ctor);",
      "right" : "BeanPropertyDefinition[] propDefs = creatorParams.get(ctor);",
      "info" : "VariableDeclarationStatement[18069-18129]:VariableDeclarationStatement[18069-18129]"
    }, {
      "left" : "final int argCount = ctor.getParameterCount();",
      "right" : "final int argCount = ctor.getParameterCount();",
      "info" : "VariableDeclarationStatement[18142-18188]:VariableDeclarationStatement[18142-18188]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[18284-19640]:IfStatement[18284-19640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18303-19640]:Block[18303-19640]"
    }, {
      "left" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "right" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "info" : "VariableDeclarationStatement[18321-18393]:VariableDeclarationStatement[18321-18393]"
    }, {
      "left" : "boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef);",
      "right" : "boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef);",
      "info" : "VariableDeclarationStatement[18410-18478]:VariableDeclarationStatement[18410-18478]"
    }, {
      "left" : "if (useProps)",
      "right" : "if (useProps)",
      "info" : "IfStatement[18496-19555]:IfStatement[18496-19555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18510-19000]:Block[18510-19000]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[1];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[1];",
      "info" : "VariableDeclarationStatement[18532-18596]:VariableDeclarationStatement[18532-18596]"
    }, {
      "left" : "PropertyName name = (argDef == null) ? null : argDef.getFullName();",
      "right" : "PropertyName name = (argDef == null) ? null : argDef.getFullName();",
      "info" : "VariableDeclarationStatement[18617-18684]:VariableDeclarationStatement[18617-18684]"
    }, {
      "left" : "AnnotatedParameter arg = ctor.getParameter(0);",
      "right" : "AnnotatedParameter arg = ctor.getParameter(0);",
      "info" : "VariableDeclarationStatement[18705-18751]:VariableDeclarationStatement[18705-18751]"
    }, {
      "left" : "properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n                            intr.findInjectableValueId(arg));",
      "right" : "properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n                            intr.findInjectableValueId(arg));",
      "info" : "ExpressionStatement[18772-18904]:ExpressionStatement[18772-18904]"
    }, {
      "left" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "right" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "info" : "ExpressionStatement[18925-18982]:ExpressionStatement[18925-18982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19006-19555]:Block[19006-19555]"
    }, {
      "left" : "_handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                            ctor, isCreator,\n                            vchecker.isCreatorVisible(ctor));",
      "right" : "_handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                            ctor, isCreator,\n                            vchecker.isCreatorVisible(ctor));",
      "info" : "ExpressionStatement[19049-19230]:ExpressionStatement[19049-19230]"
    }, {
      "left" : "if (argDef != null)",
      "right" : "if (argDef != null)",
      "info" : "IfStatement[19417-19537]:IfStatement[19417-19537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19437-19537]:Block[19437-19537]"
    }, {
      "left" : "((POJOPropertyBuilder) argDef).removeConstructors();",
      "right" : "((POJOPropertyBuilder) argDef).removeConstructors();",
      "info" : "ExpressionStatement[19463-19515]:ExpressionStatement[19463-19515]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19617-19626]:ContinueStatement[19617-19626]"
    }, {
      "left" : "AnnotatedParameter nonAnnotatedParam = null;",
      "right" : "AnnotatedParameter nonAnnotatedParam = null;",
      "info" : "VariableDeclarationStatement[19903-19947]:VariableDeclarationStatement[19903-19947]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "info" : "VariableDeclarationStatement[19960-20031]:VariableDeclarationStatement[19960-20031]"
    }, {
      "left" : "int explicitNameCount = 0;",
      "right" : "int explicitNameCount = 0;",
      "info" : "VariableDeclarationStatement[20044-20070]:VariableDeclarationStatement[20044-20070]"
    }, {
      "left" : "int implicitWithCreatorCount = 0;",
      "right" : "int implicitWithCreatorCount = 0;",
      "info" : "VariableDeclarationStatement[20083-20116]:VariableDeclarationStatement[20083-20116]"
    }, {
      "left" : "int injectCount = 0;",
      "right" : "int injectCount = 0;",
      "info" : "VariableDeclarationStatement[20129-20149]:VariableDeclarationStatement[20129-20149]"
    }, {
      "left" : "for (int i = 0; i < argCount; ++i)",
      "right" : "for (int i = 0; i < argCount; ++i)",
      "info" : "ForStatement[20163-21840]:ForStatement[20163-21840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20198-21840]:Block[20198-21840]"
    }, {
      "left" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "right" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "info" : "VariableDeclarationStatement[20216-20270]:VariableDeclarationStatement[20216-20270]"
    }, {
      "left" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "right" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "info" : "VariableDeclarationStatement[20287-20360]:VariableDeclarationStatement[20287-20360]"
    }, {
      "left" : "Object injectId = intr.findInjectableValueId(param);",
      "right" : "Object injectId = intr.findInjectableValueId(param);",
      "info" : "VariableDeclarationStatement[20377-20429]:VariableDeclarationStatement[20377-20429]"
    }, {
      "left" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "right" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "info" : "VariableDeclarationStatement[20446-20521]:VariableDeclarationStatement[20446-20521]"
    }, {
      "left" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "right" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "info" : "IfStatement[20539-20785]:IfStatement[20539-20785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20591-20785]:Block[20591-20785]"
    }, {
      "left" : "++explicitNameCount;",
      "right" : "++explicitNameCount;",
      "info" : "ExpressionStatement[20613-20633]:ExpressionStatement[20613-20633]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[20654-20737]:ExpressionStatement[20654-20737]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20758-20767]:ContinueStatement[20758-20767]"
    }, {
      "left" : "if (injectId != null)",
      "right" : "if (injectId != null)",
      "info" : "IfStatement[20802-21012]:IfStatement[20802-21012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20824-21012]:Block[20824-21012]"
    }, {
      "left" : "++injectCount;",
      "right" : "++injectCount;",
      "info" : "ExpressionStatement[20846-20860]:ExpressionStatement[20846-20860]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[20881-20964]:ExpressionStatement[20881-20964]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20985-20994]:ContinueStatement[20985-20994]"
    }, {
      "left" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "right" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "info" : "VariableDeclarationStatement[21029-21099]:VariableDeclarationStatement[21029-21099]"
    }, {
      "left" : "if (unwrapper != null)",
      "right" : "if (unwrapper != null)",
      "info" : "IfStatement[21116-21353]:IfStatement[21116-21353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21139-21353]:Block[21139-21353]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "info" : "ExpressionStatement[21161-21264]:ExpressionStatement[21161-21264]"
    }, {
      "left" : "++explicitNameCount;",
      "right" : "++explicitNameCount;",
      "info" : "ExpressionStatement[21285-21305]:ExpressionStatement[21285-21305]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21326-21335]:ContinueStatement[21326-21335]"
    }, {
      "left" : "if (isCreator && (name != null && !name.isEmpty()))",
      "right" : "if (isCreator && (name != null && !name.isEmpty()))",
      "info" : "IfStatement[21459-21712]:IfStatement[21459-21712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21511-21712]:Block[21511-21712]"
    }, {
      "left" : "++implicitWithCreatorCount;",
      "right" : "++implicitWithCreatorCount;",
      "info" : "ExpressionStatement[21533-21560]:ExpressionStatement[21533-21560]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[21581-21664]:ExpressionStatement[21581-21664]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21685-21694]:ContinueStatement[21685-21694]"
    }, {
      "left" : "if (nonAnnotatedParam == null)",
      "right" : "if (nonAnnotatedParam == null)",
      "info" : "IfStatement[21729-21826]:IfStatement[21729-21826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21760-21826]:Block[21760-21826]"
    }, {
      "left" : "nonAnnotatedParam = param;",
      "right" : "nonAnnotatedParam = param;",
      "info" : "ExpressionStatement[21782-21808]:ExpressionStatement[21782-21808]"
    }, {
      "left" : "final int namedCount = explicitNameCount + implicitWithCreatorCount;",
      "right" : "final int namedCount = explicitNameCount + implicitWithCreatorCount;",
      "info" : "VariableDeclarationStatement[21854-21922]:VariableDeclarationStatement[21854-21922]"
    }, {
      "left" : "if (isCreator || (explicitNameCount > 0) || (injectCount > 0))",
      "right" : "if (isCreator || (explicitNameCount > 0) || (injectCount > 0))",
      "info" : "IfStatement[22002-23682]:IfStatement[22002-23682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22065-23682]:Block[22065-23682]"
    }, {
      "left" : "if ((namedCount + injectCount) == argCount)",
      "right" : "if ((namedCount + injectCount) == argCount)",
      "info" : "IfStatement[22135-22306]:IfStatement[22135-22306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22179-22306]:Block[22179-22306]"
    }, {
      "left" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "right" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "info" : "ExpressionStatement[22201-22258]:ExpressionStatement[22201-22258]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22279-22288]:ContinueStatement[22279-22288]"
    }, {
      "left" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "right" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "info" : "IfStatement[22323-22603]:IfStatement[22323-22603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22388-22603]:Block[22388-22603]"
    }, {
      "left" : "creators.addDelegatingCreator(ctor, isCreator, properties);",
      "right" : "creators.addDelegatingCreator(ctor, isCreator, properties);",
      "info" : "ExpressionStatement[22496-22555]:ExpressionStatement[22496-22555]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22576-22585]:ContinueStatement[22576-22585]"
    }, {
      "left" : "PropertyName impl = _findImplicitParamName(nonAnnotatedParam, intr);",
      "right" : "PropertyName impl = _findImplicitParamName(nonAnnotatedParam, intr);",
      "info" : "VariableDeclarationStatement[22826-22894]:VariableDeclarationStatement[22826-22894]"
    }, {
      "left" : "if (impl == null || impl.isEmpty())",
      "right" : "if (impl == null || impl.isEmpty())",
      "info" : "IfStatement[22911-23668]:IfStatement[22911-23668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22947-23668]:Block[22947-23668]"
    }, {
      "left" : "int ix = nonAnnotatedParam.getIndex();",
      "right" : "int ix = nonAnnotatedParam.getIndex();",
      "info" : "VariableDeclarationStatement[23051-23089]:VariableDeclarationStatement[23051-23089]"
    }, {
      "left" : "if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass()))",
      "right" : "if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass()))",
      "info" : "IfStatement[23110-23416]:IfStatement[23110-23416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23186-23416]:Block[23186-23416]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Non-static inner classes like \"\n                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");",
      "right" : "throw new IllegalArgumentException(\"Non-static inner classes like \"\n                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");",
      "info" : "ThrowStatement[23212-23394]:ThrowStatement[23212-23394]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Argument #\"+ix\n                            +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "right" : "throw new IllegalArgumentException(\"Argument #\"+ix\n                            +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "info" : "ThrowStatement[23437-23650]:ThrowStatement[23437-23650]"
    }, {
      "left" : "if (!creators.hasDefaultCreator())",
      "right" : "if (!creators.hasDefaultCreator())",
      "info" : "IfStatement[23769-23999]:IfStatement[23769-23999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23804-23999]:Block[23804-23999]"
    }, {
      "left" : "if (implicitCtors == null)",
      "right" : "if (implicitCtors == null)",
      "info" : "IfStatement[23822-23944]:IfStatement[23822-23944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23849-23944]:Block[23849-23944]"
    }, {
      "left" : "implicitCtors = new LinkedList<AnnotatedConstructor>();",
      "right" : "implicitCtors = new LinkedList<AnnotatedConstructor>();",
      "info" : "ExpressionStatement[23871-23926]:ExpressionStatement[23871-23926]"
    }, {
      "left" : "implicitCtors.add(ctor);",
      "right" : "implicitCtors.add(ctor);",
      "info" : "ExpressionStatement[23961-23985]:ExpressionStatement[23961-23985]"
    }, {
      "left" : "if ((implicitCtors != null) && !creators.hasDelegatingCreator()\n                && !creators.hasPropertyBasedCreator())",
      "right" : "if ((implicitCtors != null) && !creators.hasDelegatingCreator()\n                && !creators.hasPropertyBasedCreator())",
      "info" : "IfStatement[24137-24392]:IfStatement[24137-24392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24257-24392]:Block[24257-24392]"
    }, {
      "left" : "_checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr,\n                    creators, implicitCtors);",
      "right" : "_checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr,\n                    creators, implicitCtors);",
      "info" : "ExpressionStatement[24271-24382]:ExpressionStatement[24271-24382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24705-26927]:Block[24705-26927]"
    }, {
      "left" : "AnnotatedConstructor found = null;",
      "right" : "AnnotatedConstructor found = null;",
      "info" : "VariableDeclarationStatement[24715-24749]:VariableDeclarationStatement[24715-24749]"
    }, {
      "left" : "SettableBeanProperty[] foundProps = null;",
      "right" : "SettableBeanProperty[] foundProps = null;",
      "info" : "VariableDeclarationStatement[24758-24799]:VariableDeclarationStatement[24758-24799]"
    }, {
      "left" : "main_loop:\n        for (AnnotatedConstructor ctor : implicitCtors) {\n            if (!vchecker.isCreatorVisible(ctor)) {\n                continue;\n            }\n            // as per earlier notes, only end up here if no properties associated with creator\n            final int argCount = ctor.getParameterCount();\n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = ctor.getParameter(i);\n                final PropertyName name = _findParamName(param, intr);\n\n                // must have name (implicit fine)\n                if (name == null || name.isEmpty()) {\n                    continue main_loop;\n                }\n                properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);\n            }\n            if (found != null) { // only one allowed\n                found = null;\n                break;\n            }\n            found = ctor;\n            foundProps = properties;\n        }",
      "right" : "main_loop:\n        for (AnnotatedConstructor ctor : implicitCtors) {\n            if (!vchecker.isCreatorVisible(ctor)) {\n                continue;\n            }\n            // as per earlier notes, only end up here if no properties associated with creator\n            final int argCount = ctor.getParameterCount();\n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = ctor.getParameter(i);\n                final PropertyName name = _findParamName(param, intr);\n\n                // must have name (implicit fine)\n                if (name == null || name.isEmpty()) {\n                    continue main_loop;\n                }\n                properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);\n            }\n            if (found != null) { // only one allowed\n                found = null;\n                break;\n            }\n            found = ctor;\n            foundProps = properties;\n        }",
      "info" : "LabeledStatement[25082-26189]:LabeledStatement[25082-26189]"
    }, {
      "left" : "for (AnnotatedConstructor ctor : implicitCtors)",
      "right" : "for (AnnotatedConstructor ctor : implicitCtors)",
      "info" : "EnhancedForStatement[25101-26189]:EnhancedForStatement[25101-26189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25149-26189]:Block[25149-26189]"
    }, {
      "left" : "if (!vchecker.isCreatorVisible(ctor))",
      "right" : "if (!vchecker.isCreatorVisible(ctor))",
      "info" : "IfStatement[25163-25242]:IfStatement[25163-25242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25201-25242]:Block[25201-25242]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25219-25228]:ContinueStatement[25219-25228]"
    }, {
      "left" : "final int argCount = ctor.getParameterCount();",
      "right" : "final int argCount = ctor.getParameterCount();",
      "info" : "VariableDeclarationStatement[25350-25396]:VariableDeclarationStatement[25350-25396]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "info" : "VariableDeclarationStatement[25409-25480]:VariableDeclarationStatement[25409-25480]"
    }, {
      "left" : "for (int i = 0; i < argCount; ++i)",
      "right" : "for (int i = 0; i < argCount; ++i)",
      "info" : "ForStatement[25493-25996]:ForStatement[25493-25996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25528-25996]:Block[25528-25996]"
    }, {
      "left" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "right" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "info" : "VariableDeclarationStatement[25546-25600]:VariableDeclarationStatement[25546-25600]"
    }, {
      "left" : "final PropertyName name = _findParamName(param, intr);",
      "right" : "final PropertyName name = _findParamName(param, intr);",
      "info" : "VariableDeclarationStatement[25617-25671]:VariableDeclarationStatement[25617-25671]"
    }, {
      "left" : "if (name == null || name.isEmpty())",
      "right" : "if (name == null || name.isEmpty())",
      "info" : "IfStatement[25739-25834]:IfStatement[25739-25834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25775-25834]:Block[25775-25834]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25797-25816]:ContinueStatement[25797-25816]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);",
      "info" : "ExpressionStatement[25851-25982]:ExpressionStatement[25851-25982]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[26009-26116]:IfStatement[26009-26116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26028-26116]:Block[26028-26116]"
    }, {
      "left" : "found = null;",
      "right" : "found = null;",
      "info" : "ExpressionStatement[26066-26079]:ExpressionStatement[26066-26079]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26096-26102]:BreakStatement[26096-26102]"
    }, {
      "left" : "found = ctor;",
      "right" : "found = ctor;",
      "info" : "ExpressionStatement[26129-26142]:ExpressionStatement[26129-26142]"
    }, {
      "left" : "foundProps = properties;",
      "right" : "foundProps = properties;",
      "info" : "ExpressionStatement[26155-26179]:ExpressionStatement[26155-26179]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[26250-26921]:IfStatement[26250-26921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26269-26921]:Block[26269-26921]"
    }, {
      "left" : "creators.addPropertyCreator(found, /*isCreator*/ false, foundProps);",
      "right" : "creators.addPropertyCreator(found, /*isCreator*/ false, foundProps);",
      "info" : "ExpressionStatement[26283-26351]:ExpressionStatement[26283-26351]"
    }, {
      "left" : "BasicBeanDescription bbd = (BasicBeanDescription) beanDesc;",
      "right" : "BasicBeanDescription bbd = (BasicBeanDescription) beanDesc;",
      "info" : "VariableDeclarationStatement[26364-26423]:VariableDeclarationStatement[26364-26423]"
    }, {
      "left" : "for (SettableBeanProperty prop : foundProps)",
      "right" : "for (SettableBeanProperty prop : foundProps)",
      "info" : "EnhancedForStatement[26529-26911]:EnhancedForStatement[26529-26911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26574-26911]:Block[26574-26911]"
    }, {
      "left" : "PropertyName pn = prop.getFullName();",
      "right" : "PropertyName pn = prop.getFullName();",
      "info" : "VariableDeclarationStatement[26592-26629]:VariableDeclarationStatement[26592-26629]"
    }, {
      "left" : "if (!bbd.hasProperty(pn))",
      "right" : "if (!bbd.hasProperty(pn))",
      "info" : "IfStatement[26646-26897]:IfStatement[26646-26897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26672-26897]:Block[26672-26897]"
    }, {
      "left" : "BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct(\n                            ctxt.getConfig(), prop.getMember(), pn);",
      "right" : "BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct(\n                            ctxt.getConfig(), prop.getMember(), pn);",
      "info" : "VariableDeclarationStatement[26694-26834]:VariableDeclarationStatement[26694-26834]"
    }, {
      "left" : "bbd.addProperty(newDef);",
      "right" : "bbd.addProperty(newDef);",
      "info" : "ExpressionStatement[26855-26879]:ExpressionStatement[26855-26879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27086-28066]:Block[27086-28066]"
    }, {
      "left" : "JsonCreator.Mode mode = intr.findCreatorBinding(creator);",
      "right" : "JsonCreator.Mode mode = intr.findCreatorBinding(creator);",
      "info" : "VariableDeclarationStatement[27096-27153]:VariableDeclarationStatement[27096-27153]"
    }, {
      "left" : "if (mode == JsonCreator.Mode.PROPERTIES)",
      "right" : "if (mode == JsonCreator.Mode.PROPERTIES)",
      "info" : "IfStatement[27163-27240]:IfStatement[27163-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27204-27240]:Block[27204-27240]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27218-27230]:ReturnStatement[27218-27230]"
    }, {
      "left" : "if (mode == JsonCreator.Mode.DELEGATING)",
      "right" : "if (mode == JsonCreator.Mode.DELEGATING)",
      "info" : "IfStatement[27249-27327]:IfStatement[27249-27327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27290-27327]:Block[27290-27327]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27304-27317]:ReturnStatement[27304-27317]"
    }, {
      "left" : "if (((propDef != null) && propDef.isExplicitlyNamed())\n                || (intr.findInjectableValueId(creator.getParameter(0)) != null))",
      "right" : "if (((propDef != null) && propDef.isExplicitlyNamed())\n                || (intr.findInjectableValueId(creator.getParameter(0)) != null))",
      "info" : "IfStatement[27394-27567]:IfStatement[27394-27567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27531-27567]:Block[27531-27567]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27545-27557]:ReturnStatement[27545-27557]"
    }, {
      "left" : "if (propDef != null)",
      "right" : "if (propDef != null)",
      "info" : "IfStatement[27576-27974]:IfStatement[27576-27974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27597-27974]:Block[27597-27974]"
    }, {
      "left" : "String implName = propDef.getName();",
      "right" : "String implName = propDef.getName();",
      "info" : "VariableDeclarationStatement[27756-27792]:VariableDeclarationStatement[27756-27792]"
    }, {
      "left" : "if (implName != null && !implName.isEmpty())",
      "right" : "if (implName != null && !implName.isEmpty())",
      "info" : "IfStatement[27805-27964]:IfStatement[27805-27964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27850-27964]:Block[27850-27964]"
    }, {
      "left" : "if (propDef.couldSerialize())",
      "right" : "if (propDef.couldSerialize())",
      "info" : "IfStatement[27868-27950]:IfStatement[27868-27950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27898-27950]:Block[27898-27950]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27920-27932]:ReturnStatement[27920-27932]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28047-28060]:ReturnStatement[28047-28060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28410-29808]:Block[28410-29808]"
    }, {
      "left" : "Class<?> type = ctor.getRawParameterType(0);",
      "right" : "Class<?> type = ctor.getRawParameterType(0);",
      "info" : "VariableDeclarationStatement[28494-28538]:VariableDeclarationStatement[28494-28538]"
    }, {
      "left" : "if (type == String.class || type == CharSequence.class)",
      "right" : "if (type == String.class || type == CharSequence.class)",
      "info" : "IfStatement[28547-28755]:IfStatement[28547-28755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28603-28755]:Block[28603-28755]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[28617-28720]:IfStatement[28617-28720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28645-28720]:Block[28645-28720]"
    }, {
      "left" : "creators.addStringCreator(ctor, isCreator);",
      "right" : "creators.addStringCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[28663-28706]:ExpressionStatement[28663-28706]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28733-28745]:ReturnStatement[28733-28745]"
    }, {
      "left" : "if (type == int.class || type == Integer.class)",
      "right" : "if (type == int.class || type == Integer.class)",
      "info" : "IfStatement[28764-28961]:IfStatement[28764-28961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28812-28961]:Block[28812-28961]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[28826-28926]:IfStatement[28826-28926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28854-28926]:Block[28854-28926]"
    }, {
      "left" : "creators.addIntCreator(ctor, isCreator);",
      "right" : "creators.addIntCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[28872-28912]:ExpressionStatement[28872-28912]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28939-28951]:ReturnStatement[28939-28951]"
    }, {
      "left" : "if (type == long.class || type == Long.class)",
      "right" : "if (type == long.class || type == Long.class)",
      "info" : "IfStatement[28970-29166]:IfStatement[28970-29166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29016-29166]:Block[29016-29166]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[29030-29131]:IfStatement[29030-29131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29058-29131]:Block[29058-29131]"
    }, {
      "left" : "creators.addLongCreator(ctor, isCreator);",
      "right" : "creators.addLongCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[29076-29117]:ExpressionStatement[29076-29117]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29144-29156]:ReturnStatement[29144-29156]"
    }, {
      "left" : "if (type == double.class || type == Double.class)",
      "right" : "if (type == double.class || type == Double.class)",
      "info" : "IfStatement[29175-29377]:IfStatement[29175-29377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29225-29377]:Block[29225-29377]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[29239-29342]:IfStatement[29239-29342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29267-29342]:Block[29267-29342]"
    }, {
      "left" : "creators.addDoubleCreator(ctor, isCreator);",
      "right" : "creators.addDoubleCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[29285-29328]:ExpressionStatement[29285-29328]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29355-29367]:ReturnStatement[29355-29367]"
    }, {
      "left" : "if (type == boolean.class || type == Boolean.class)",
      "right" : "if (type == boolean.class || type == Boolean.class)",
      "info" : "IfStatement[29386-29591]:IfStatement[29386-29591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29438-29591]:Block[29438-29591]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[29452-29556]:IfStatement[29452-29556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29480-29556]:Block[29480-29556]"
    }, {
      "left" : "creators.addBooleanCreator(ctor, isCreator);",
      "right" : "creators.addBooleanCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[29498-29542]:ExpressionStatement[29498-29542]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29569-29581]:ReturnStatement[29569-29581]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[29663-29780]:IfStatement[29663-29780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29678-29780]:Block[29678-29780]"
    }, {
      "left" : "creators.addDelegatingCreator(ctor, isCreator, null);",
      "right" : "creators.addDelegatingCreator(ctor, isCreator, null);",
      "info" : "ExpressionStatement[29692-29745]:ExpressionStatement[29692-29745]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29758-29770]:ReturnStatement[29758-29770]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29789-29802]:ReturnStatement[29789-29802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30134-35440]:Block[30134-35440]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[30144-30198]:VariableDeclarationStatement[30144-30198]"
    }, {
      "left" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "right" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "info" : "EnhancedForStatement[30207-35434]:EnhancedForStatement[30207-35434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30268-35434]:Block[30268-35434]"
    }, {
      "left" : "final boolean isCreator = intr.hasCreatorAnnotation(factory);",
      "right" : "final boolean isCreator = intr.hasCreatorAnnotation(factory);",
      "info" : "VariableDeclarationStatement[30282-30343]:VariableDeclarationStatement[30282-30343]"
    }, {
      "left" : "final int argCount = factory.getParameterCount();",
      "right" : "final int argCount = factory.getParameterCount();",
      "info" : "VariableDeclarationStatement[30356-30405]:VariableDeclarationStatement[30356-30405]"
    }, {
      "left" : "if (argCount == 0)",
      "right" : "if (argCount == 0)",
      "info" : "IfStatement[30513-30681]:IfStatement[30513-30681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30532-30681]:Block[30532-30681]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[30550-30641]:IfStatement[30550-30641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30565-30641]:Block[30565-30641]"
    }, {
      "left" : "creators.setDefaultCreator(factory);",
      "right" : "creators.setDefaultCreator(factory);",
      "info" : "ExpressionStatement[30587-30623]:ExpressionStatement[30587-30623]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30658-30667]:ContinueStatement[30658-30667]"
    }, {
      "left" : "final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);",
      "right" : "final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);",
      "info" : "VariableDeclarationStatement[30695-30764]:VariableDeclarationStatement[30695-30764]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[30859-31606]:IfStatement[30859-31606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30878-31443]:Block[30878-31443]"
    }, {
      "left" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "right" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "info" : "VariableDeclarationStatement[30896-30968]:VariableDeclarationStatement[30896-30968]"
    }, {
      "left" : "boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);",
      "right" : "boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);",
      "info" : "VariableDeclarationStatement[30985-31056]:VariableDeclarationStatement[30985-31056]"
    }, {
      "left" : "if (!useProps)",
      "right" : "if (!useProps)",
      "info" : "IfStatement[31073-31381]:IfStatement[31073-31381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31088-31381]:Block[31088-31381]"
    }, {
      "left" : "_handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                            factory, isCreator);",
      "right" : "_handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                            factory, isCreator);",
      "info" : "ExpressionStatement[31166-31287]:ExpressionStatement[31166-31287]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[31354-31363]:ContinueStatement[31354-31363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31449-31606]:Block[31449-31606]"
    }, {
      "left" : "if (!isCreator)",
      "right" : "if (!isCreator)",
      "info" : "IfStatement[31527-31592]:IfStatement[31527-31592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31543-31592]:Block[31543-31592]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[31565-31574]:ContinueStatement[31565-31574]"
    }, {
      "left" : "AnnotatedParameter nonAnnotatedParam = null;",
      "right" : "AnnotatedParameter nonAnnotatedParam = null;",
      "info" : "VariableDeclarationStatement[31688-31732]:VariableDeclarationStatement[31688-31732]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "info" : "VariableDeclarationStatement[31757-31828]:VariableDeclarationStatement[31757-31828]"
    }, {
      "left" : "int implicitNameCount = 0;",
      "right" : "int implicitNameCount = 0;",
      "info" : "VariableDeclarationStatement[31841-31867]:VariableDeclarationStatement[31841-31867]"
    }, {
      "left" : "int explicitNameCount = 0;",
      "right" : "int explicitNameCount = 0;",
      "info" : "VariableDeclarationStatement[31880-31906]:VariableDeclarationStatement[31880-31906]"
    }, {
      "left" : "int injectCount = 0;",
      "right" : "int injectCount = 0;",
      "info" : "VariableDeclarationStatement[31919-31939]:VariableDeclarationStatement[31919-31939]"
    }, {
      "left" : "for (int i = 0; i < argCount; ++i)",
      "right" : "for (int i = 0; i < argCount; ++i)",
      "info" : "ForStatement[31965-34390]:ForStatement[31965-34390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32000-34390]:Block[32000-34390]"
    }, {
      "left" : "final AnnotatedParameter param = factory.getParameter(i);",
      "right" : "final AnnotatedParameter param = factory.getParameter(i);",
      "info" : "VariableDeclarationStatement[32018-32075]:VariableDeclarationStatement[32018-32075]"
    }, {
      "left" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "right" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "info" : "VariableDeclarationStatement[32092-32165]:VariableDeclarationStatement[32092-32165]"
    }, {
      "left" : "Object injectId = intr.findInjectableValueId(param);",
      "right" : "Object injectId = intr.findInjectableValueId(param);",
      "info" : "VariableDeclarationStatement[32182-32234]:VariableDeclarationStatement[32182-32234]"
    }, {
      "left" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "right" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "info" : "VariableDeclarationStatement[32251-32326]:VariableDeclarationStatement[32251-32326]"
    }, {
      "left" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "right" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "info" : "IfStatement[32344-32590]:IfStatement[32344-32590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32396-32590]:Block[32396-32590]"
    }, {
      "left" : "++explicitNameCount;",
      "right" : "++explicitNameCount;",
      "info" : "ExpressionStatement[32418-32438]:ExpressionStatement[32418-32438]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[32459-32542]:ExpressionStatement[32459-32542]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[32563-32572]:ContinueStatement[32563-32572]"
    }, {
      "left" : "if (injectId != null)",
      "right" : "if (injectId != null)",
      "info" : "IfStatement[32607-32817]:IfStatement[32607-32817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32629-32817]:Block[32629-32817]"
    }, {
      "left" : "++injectCount;",
      "right" : "++injectCount;",
      "info" : "ExpressionStatement[32651-32665]:ExpressionStatement[32651-32665]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[32686-32769]:ExpressionStatement[32686-32769]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[32790-32799]:ContinueStatement[32790-32799]"
    }, {
      "left" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "right" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "info" : "VariableDeclarationStatement[32834-32904]:VariableDeclarationStatement[32834-32904]"
    }, {
      "left" : "if (unwrapper != null)",
      "right" : "if (unwrapper != null)",
      "info" : "IfStatement[32921-33158]:IfStatement[32921-33158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32944-33158]:Block[32944-33158]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "info" : "ExpressionStatement[32966-33069]:ExpressionStatement[32966-33069]"
    }, {
      "left" : "++implicitNameCount;",
      "right" : "++implicitNameCount;",
      "info" : "ExpressionStatement[33090-33110]:ExpressionStatement[33090-33110]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33131-33140]:ContinueStatement[33131-33140]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[33264-33566]:IfStatement[33264-33566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33279-33566]:Block[33279-33566]"
    }, {
      "left" : "if (name != null && !name.isEmpty())",
      "right" : "if (name != null && !name.isEmpty())",
      "info" : "IfStatement[33301-33548]:IfStatement[33301-33548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33338-33548]:Block[33338-33548]"
    }, {
      "left" : "++implicitNameCount;",
      "right" : "++implicitNameCount;",
      "info" : "ExpressionStatement[33364-33384]:ExpressionStatement[33364-33384]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[33409-33492]:ExpressionStatement[33409-33492]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33517-33526]:ContinueStatement[33517-33526]"
    }, {
      "left" : "if (nonAnnotatedParam == null)",
      "right" : "if (nonAnnotatedParam == null)",
      "info" : "IfStatement[34279-34376]:IfStatement[34279-34376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34310-34376]:Block[34310-34376]"
    }, {
      "left" : "nonAnnotatedParam = param;",
      "right" : "nonAnnotatedParam = param;",
      "info" : "ExpressionStatement[34332-34358]:ExpressionStatement[34332-34358]"
    }, {
      "left" : "final int namedCount = explicitNameCount + implicitNameCount;",
      "right" : "final int namedCount = explicitNameCount + implicitNameCount;",
      "info" : "VariableDeclarationStatement[34403-34464]:VariableDeclarationStatement[34403-34464]"
    }, {
      "left" : "if (isCreator || explicitNameCount > 0 || injectCount > 0)",
      "right" : "if (isCreator || explicitNameCount > 0 || injectCount > 0)",
      "info" : "IfStatement[34557-35424]:IfStatement[34557-35424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34616-35424]:Block[34616-35424]"
    }, {
      "left" : "if ((namedCount + injectCount) == argCount)",
      "right" : "if ((namedCount + injectCount) == argCount)",
      "info" : "IfStatement[34686-35410]:IfStatement[34686-35410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34730-34830]:Block[34730-34830]"
    }, {
      "left" : "creators.addPropertyCreator(factory, isCreator, properties);",
      "right" : "creators.addPropertyCreator(factory, isCreator, properties);",
      "info" : "ExpressionStatement[34752-34812]:ExpressionStatement[34752-34812]"
    }, {
      "left" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "right" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "info" : "IfStatement[34836-35410]:IfStatement[34836-35410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34901-35095]:Block[34901-35095]"
    }, {
      "left" : "creators.addDelegatingCreator(factory, isCreator, properties);",
      "right" : "creators.addDelegatingCreator(factory, isCreator, properties);",
      "info" : "ExpressionStatement[35015-35077]:ExpressionStatement[35015-35077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35101-35410]:Block[35101-35410]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "right" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "info" : "ThrowStatement[35147-35392]:ThrowStatement[35147-35392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35756-37172]:Block[35756-37172]"
    }, {
      "left" : "Class<?> type = factory.getRawParameterType(0);",
      "right" : "Class<?> type = factory.getRawParameterType(0);",
      "info" : "VariableDeclarationStatement[35766-35813]:VariableDeclarationStatement[35766-35813]"
    }, {
      "left" : "if (type == String.class || type == CharSequence.class)",
      "right" : "if (type == String.class || type == CharSequence.class)",
      "info" : "IfStatement[35831-36067]:IfStatement[35831-36067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35887-36067]:Block[35887-36067]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[35901-36032]:IfStatement[35901-36032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35954-36032]:Block[35954-36032]"
    }, {
      "left" : "creators.addStringCreator(factory, isCreator);",
      "right" : "creators.addStringCreator(factory, isCreator);",
      "info" : "ExpressionStatement[35972-36018]:ExpressionStatement[35972-36018]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36045-36057]:ReturnStatement[36045-36057]"
    }, {
      "left" : "if (type == int.class || type == Integer.class)",
      "right" : "if (type == int.class || type == Integer.class)",
      "info" : "IfStatement[36076-36301]:IfStatement[36076-36301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36124-36301]:Block[36124-36301]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36138-36266]:IfStatement[36138-36266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36191-36266]:Block[36191-36266]"
    }, {
      "left" : "creators.addIntCreator(factory, isCreator);",
      "right" : "creators.addIntCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36209-36252]:ExpressionStatement[36209-36252]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36279-36291]:ReturnStatement[36279-36291]"
    }, {
      "left" : "if (type == long.class || type == Long.class)",
      "right" : "if (type == long.class || type == Long.class)",
      "info" : "IfStatement[36310-36534]:IfStatement[36310-36534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36356-36534]:Block[36356-36534]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36370-36499]:IfStatement[36370-36499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36423-36499]:Block[36423-36499]"
    }, {
      "left" : "creators.addLongCreator(factory, isCreator);",
      "right" : "creators.addLongCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36441-36485]:ExpressionStatement[36441-36485]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36512-36524]:ReturnStatement[36512-36524]"
    }, {
      "left" : "if (type == double.class || type == Double.class)",
      "right" : "if (type == double.class || type == Double.class)",
      "info" : "IfStatement[36543-36773]:IfStatement[36543-36773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36593-36773]:Block[36593-36773]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36607-36738]:IfStatement[36607-36738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36660-36738]:Block[36660-36738]"
    }, {
      "left" : "creators.addDoubleCreator(factory, isCreator);",
      "right" : "creators.addDoubleCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36678-36724]:ExpressionStatement[36678-36724]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36751-36763]:ReturnStatement[36751-36763]"
    }, {
      "left" : "if (type == boolean.class || type == Boolean.class)",
      "right" : "if (type == boolean.class || type == Boolean.class)",
      "info" : "IfStatement[36782-37015]:IfStatement[36782-37015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36834-37015]:Block[36834-37015]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36848-36980]:IfStatement[36848-36980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36901-36980]:Block[36901-36980]"
    }, {
      "left" : "creators.addBooleanCreator(factory, isCreator);",
      "right" : "creators.addBooleanCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36919-36966]:ExpressionStatement[36919-36966]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36993-37005]:ReturnStatement[36993-37005]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[37024-37144]:IfStatement[37024-37144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37039-37144]:Block[37039-37144]"
    }, {
      "left" : "creators.addDelegatingCreator(factory, isCreator, null);",
      "right" : "creators.addDelegatingCreator(factory, isCreator, null);",
      "info" : "ExpressionStatement[37053-37109]:ExpressionStatement[37053-37109]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37122-37134]:ReturnStatement[37122-37134]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37153-37166]:ReturnStatement[37153-37166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37622-40024]:Block[37622-40024]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[37632-37686]:VariableDeclarationStatement[37632-37686]"
    }, {
      "left" : "final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[37695-37764]:VariableDeclarationStatement[37695-37764]"
    }, {
      "left" : "PropertyMetadata metadata;",
      "right" : "PropertyMetadata metadata;",
      "info" : "VariableDeclarationStatement[37773-37799]:VariableDeclarationStatement[37773-37799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37808-38349]:Block[37808-38349]"
    }, {
      "left" : "if (intr == null)",
      "right" : "if (intr == null)",
      "info" : "IfStatement[37822-38339]:IfStatement[37822-38339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37840-37925]:Block[37840-37925]"
    }, {
      "left" : "metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;",
      "right" : "metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;",
      "info" : "ExpressionStatement[37858-37911]:ExpressionStatement[37858-37911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37931-38339]:Block[37931-38339]"
    }, {
      "left" : "Boolean b = intr.hasRequiredMarker(param);",
      "right" : "Boolean b = intr.hasRequiredMarker(param);",
      "info" : "VariableDeclarationStatement[37949-37991]:VariableDeclarationStatement[37949-37991]"
    }, {
      "left" : "boolean req = (b != null && b.booleanValue());",
      "right" : "boolean req = (b != null && b.booleanValue());",
      "info" : "VariableDeclarationStatement[38008-38054]:VariableDeclarationStatement[38008-38054]"
    }, {
      "left" : "String desc = intr.findPropertyDescription(param);",
      "right" : "String desc = intr.findPropertyDescription(param);",
      "info" : "VariableDeclarationStatement[38071-38121]:VariableDeclarationStatement[38071-38121]"
    }, {
      "left" : "Integer idx = intr.findPropertyIndex(param);",
      "right" : "Integer idx = intr.findPropertyIndex(param);",
      "info" : "VariableDeclarationStatement[38138-38182]:VariableDeclarationStatement[38138-38182]"
    }, {
      "left" : "String def = intr.findPropertyDefaultValue(param);",
      "right" : "String def = intr.findPropertyDefaultValue(param);",
      "info" : "VariableDeclarationStatement[38199-38249]:VariableDeclarationStatement[38199-38249]"
    }, {
      "left" : "metadata = PropertyMetadata.construct(req, desc, idx, def);",
      "right" : "metadata = PropertyMetadata.construct(req, desc, idx, def);",
      "info" : "ExpressionStatement[38266-38325]:ExpressionStatement[38266-38325]"
    }, {
      "left" : "JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());",
      "right" : "JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());",
      "info" : "VariableDeclarationStatement[38371-38481]:VariableDeclarationStatement[38371-38481]"
    }, {
      "left" : "BeanProperty.Std property = new BeanProperty.Std(name, t0,\n                intr.findWrapperName(param),\n                beanDesc.getClassAnnotations(), param, metadata);",
      "right" : "BeanProperty.Std property = new BeanProperty.Std(name, t0,\n                intr.findWrapperName(param),\n                beanDesc.getClassAnnotations(), param, metadata);",
      "info" : "VariableDeclarationStatement[38490-38659]:VariableDeclarationStatement[38490-38659]"
    }, {
      "left" : "JavaType type = resolveType(ctxt, beanDesc, t0, param);",
      "right" : "JavaType type = resolveType(ctxt, beanDesc, t0, param);",
      "info" : "VariableDeclarationStatement[38668-38723]:VariableDeclarationStatement[38668-38723]"
    }, {
      "left" : "if (type != t0)",
      "right" : "if (type != t0)",
      "info" : "IfStatement[38732-38807]:IfStatement[38732-38807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38748-38807]:Block[38748-38807]"
    }, {
      "left" : "property = property.withType(type);",
      "right" : "property = property.withType(type);",
      "info" : "ExpressionStatement[38762-38797]:ExpressionStatement[38762-38797]"
    }, {
      "left" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);",
      "right" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);",
      "info" : "VariableDeclarationStatement[38885-38957]:VariableDeclarationStatement[38885-38957]"
    }, {
      "left" : "type = modifyTypeByAnnotation(ctxt, param, type);",
      "right" : "type = modifyTypeByAnnotation(ctxt, param, type);",
      "info" : "ExpressionStatement[39006-39055]:ExpressionStatement[39006-39055]"
    }, {
      "left" : "TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();",
      "right" : "TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();",
      "info" : "VariableDeclarationStatement[39145-39215]:VariableDeclarationStatement[39145-39215]"
    }, {
      "left" : "if (typeDeser == null)",
      "right" : "if (typeDeser == null)",
      "info" : "IfStatement[39278-39372]:IfStatement[39278-39372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39301-39372]:Block[39301-39372]"
    }, {
      "left" : "typeDeser = findTypeDeserializer(config, type);",
      "right" : "typeDeser = findTypeDeserializer(config, type);",
      "info" : "ExpressionStatement[39315-39362]:ExpressionStatement[39315-39362]"
    }, {
      "left" : "SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),\n                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n                metadata);",
      "right" : "SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),\n                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n                metadata);",
      "info" : "VariableDeclarationStatement[39523-39728]:VariableDeclarationStatement[39523-39728]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[39737-39997]:IfStatement[39737-39997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39756-39997]:Block[39756-39997]"
    }, {
      "left" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "right" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "info" : "ExpressionStatement[39870-39933]:ExpressionStatement[39870-39933]"
    }, {
      "left" : "prop = prop.withValueDeserializer(deser);",
      "right" : "prop = prop.withValueDeserializer(deser);",
      "info" : "ExpressionStatement[39946-39987]:ExpressionStatement[39946-39987]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[40006-40018]:ReturnStatement[40006-40018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40127-40660]:Block[40127-40660]"
    }, {
      "left" : "if (param != null && intr != null)",
      "right" : "if (param != null && intr != null)",
      "info" : "IfStatement[40137-40633]:IfStatement[40137-40633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40172-40633]:Block[40172-40633]"
    }, {
      "left" : "PropertyName name = intr.findNameForDeserialization(param);",
      "right" : "PropertyName name = intr.findNameForDeserialization(param);",
      "info" : "VariableDeclarationStatement[40186-40245]:VariableDeclarationStatement[40186-40245]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[40258-40320]:IfStatement[40258-40320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40276-40320]:Block[40276-40320]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[40294-40306]:ReturnStatement[40294-40306]"
    }, {
      "left" : "String str = intr.findImplicitPropertyName(param);",
      "right" : "String str = intr.findImplicitPropertyName(param);",
      "info" : "VariableDeclarationStatement[40458-40508]:VariableDeclarationStatement[40458-40508]"
    }, {
      "left" : "if (str != null && !str.isEmpty())",
      "right" : "if (str != null && !str.isEmpty())",
      "info" : "IfStatement[40521-40623]:IfStatement[40521-40623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40556-40623]:Block[40556-40623]"
    }, {
      "left" : "return PropertyName.construct(str);",
      "right" : "return PropertyName.construct(str);",
      "info" : "ReturnStatement[40574-40609]:ReturnStatement[40574-40609]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40642-40654]:ReturnStatement[40642-40654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40771-40961]:Block[40771-40961]"
    }, {
      "left" : "String str = intr.findImplicitPropertyName(param);",
      "right" : "String str = intr.findImplicitPropertyName(param);",
      "info" : "VariableDeclarationStatement[40781-40831]:VariableDeclarationStatement[40781-40831]"
    }, {
      "left" : "if (str != null && !str.isEmpty())",
      "right" : "if (str != null && !str.isEmpty())",
      "info" : "IfStatement[40840-40934]:IfStatement[40840-40934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40875-40934]:Block[40875-40934]"
    }, {
      "left" : "return PropertyName.construct(str);",
      "right" : "return PropertyName.construct(str);",
      "info" : "ReturnStatement[40889-40924]:ReturnStatement[40889-40924]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40943-40955]:ReturnStatement[40943-40955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41115-41257]:Block[41115-41257]"
    }, {
      "left" : "if (param != null && intr != null)",
      "right" : "if (param != null && intr != null)",
      "info" : "IfStatement[41125-41230]:IfStatement[41125-41230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41160-41230]:Block[41160-41230]"
    }, {
      "left" : "return intr.findNameForDeserialization(param);",
      "right" : "return intr.findNameForDeserialization(param);",
      "info" : "ReturnStatement[41174-41220]:ReturnStatement[41174-41220]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41239-41251]:ReturnStatement[41239-41251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41405-41611]:Block[41405-41611]"
    }, {
      "left" : "if (param != null && intr != null)",
      "right" : "if (param != null && intr != null)",
      "info" : "IfStatement[41415-41583]:IfStatement[41415-41583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41450-41583]:Block[41450-41583]"
    }, {
      "left" : "PropertyName n = intr.findNameForDeserialization(param);",
      "right" : "PropertyName n = intr.findNameForDeserialization(param);",
      "info" : "VariableDeclarationStatement[41464-41520]:VariableDeclarationStatement[41464-41520]"
    }, {
      "left" : "return (n != null) && n.hasSimpleName();",
      "right" : "return (n != null) && n.hasSimpleName();",
      "info" : "ReturnStatement[41533-41573]:ReturnStatement[41533-41573]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41592-41605]:ReturnStatement[41592-41605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42020-43658]:Block[42020-43658]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[42030-42084]:VariableDeclarationStatement[42030-42084]"
    }, {
      "left" : "JavaType elemType = type.getContentType();",
      "right" : "JavaType elemType = type.getContentType();",
      "info" : "VariableDeclarationStatement[42093-42135]:VariableDeclarationStatement[42093-42135]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = elemType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = elemType.getValueHandler();",
      "info" : "VariableDeclarationStatement[42223-42290]:VariableDeclarationStatement[42223-42290]"
    }, {
      "left" : "TypeDeserializer elemTypeDeser = elemType.getTypeHandler();",
      "right" : "TypeDeserializer elemTypeDeser = elemType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[42401-42460]:VariableDeclarationStatement[42401-42460]"
    }, {
      "left" : "if (elemTypeDeser == null)",
      "right" : "if (elemTypeDeser == null)",
      "info" : "IfStatement[42523-42629]:IfStatement[42523-42629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42550-42629]:Block[42550-42629]"
    }, {
      "left" : "elemTypeDeser = findTypeDeserializer(config, elemType);",
      "right" : "elemTypeDeser = findTypeDeserializer(config, elemType);",
      "info" : "ExpressionStatement[42564-42619]:ExpressionStatement[42564-42619]"
    }, {
      "left" : "JsonDeserializer<?>  deser = _findCustomArrayDeserializer(type,\n                config, beanDesc, elemTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?>  deser = _findCustomArrayDeserializer(type,\n                config, beanDesc, elemTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[42695-42822]:VariableDeclarationStatement[42695-42822]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[42831-43298]:IfStatement[42831-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42850-43298]:Block[42850-43298]"
    }, {
      "left" : "if (contentDeser == null)",
      "right" : "if (contentDeser == null)",
      "info" : "IfStatement[42864-43204]:IfStatement[42864-43204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42890-43204]:Block[42890-43204]"
    }, {
      "left" : "Class<?> raw = elemType.getRawClass();",
      "right" : "Class<?> raw = elemType.getRawClass();",
      "info" : "VariableDeclarationStatement[42908-42946]:VariableDeclarationStatement[42908-42946]"
    }, {
      "left" : "if (elemType.isPrimitive())",
      "right" : "if (elemType.isPrimitive())",
      "info" : "IfStatement[42963-43190]:IfStatement[42963-43190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42991-43079]:Block[42991-43079]"
    }, {
      "left" : "return PrimitiveArrayDeserializers.forType(raw);",
      "right" : "return PrimitiveArrayDeserializers.forType(raw);",
      "info" : "ReturnStatement[43013-43061]:ReturnStatement[43013-43061]"
    }, {
      "left" : "if (raw == String.class)",
      "right" : "if (raw == String.class)",
      "info" : "IfStatement[43085-43190]:IfStatement[43085-43190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43110-43190]:Block[43110-43190]"
    }, {
      "left" : "return StringArrayDeserializer.instance;",
      "right" : "return StringArrayDeserializer.instance;",
      "info" : "ReturnStatement[43132-43172]:ReturnStatement[43132-43172]"
    }, {
      "left" : "deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);",
      "right" : "deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);",
      "info" : "ExpressionStatement[43217-43288]:ExpressionStatement[43217-43288]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[43384-43630]:IfStatement[43384-43630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43431-43630]:Block[43431-43630]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[43445-43620]:EnhancedForStatement[43445-43620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43521-43620]:Block[43521-43620]"
    }, {
      "left" : "deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[43539-43606]:ExpressionStatement[43539-43606]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[43639-43652]:ReturnStatement[43639-43652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44075-47953]:Block[44075-47953]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[44085-44130]:VariableDeclarationStatement[44085-44130]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[44209-44279]:VariableDeclarationStatement[44209-44279]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[44288-44342]:VariableDeclarationStatement[44288-44342]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[44460-44525]:VariableDeclarationStatement[44460-44525]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[44588-44703]:IfStatement[44588-44703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44618-44703]:Block[44618-44703]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[44632-44693]:ExpressionStatement[44632-44693]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type,\n                config, beanDesc, contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type,\n                config, beanDesc, contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[44764-44898]:VariableDeclarationStatement[44764-44898]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[44907-45286]:IfStatement[44907-45286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44926-45286]:Block[44926-45286]"
    }, {
      "left" : "Class<?> collectionClass = type.getRawClass();",
      "right" : "Class<?> collectionClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[44940-44986]:VariableDeclarationStatement[44940-44986]"
    }, {
      "left" : "if (contentDeser == null)",
      "right" : "if (contentDeser == null)",
      "info" : "IfStatement[44999-45276]:IfStatement[44999-45276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45025-45276]:Block[45025-45276]"
    }, {
      "left" : "if (EnumSet.class.isAssignableFrom(collectionClass))",
      "right" : "if (EnumSet.class.isAssignableFrom(collectionClass))",
      "info" : "IfStatement[45118-45262]:IfStatement[45118-45262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45171-45262]:Block[45171-45262]"
    }, {
      "left" : "deser = new EnumSetDeserializer(contentType, null);",
      "right" : "deser = new EnumSetDeserializer(contentType, null);",
      "info" : "ExpressionStatement[45193-45244]:ExpressionStatement[45193-45244]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[45765-47588]:IfStatement[45765-47588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45784-47588]:Block[45784-47588]"
    }, {
      "left" : "if (type.isInterface() || type.isAbstract())",
      "right" : "if (type.isInterface() || type.isAbstract())",
      "info" : "IfStatement[45798-46584]:IfStatement[45798-46584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45843-46584]:Block[45843-46584]"
    }, {
      "left" : "CollectionType implType = _mapAbstractCollectionType(type, config);",
      "right" : "CollectionType implType = _mapAbstractCollectionType(type, config);",
      "info" : "VariableDeclarationStatement[45861-45928]:VariableDeclarationStatement[45861-45928]"
    }, {
      "left" : "if (implType == null)",
      "right" : "if (implType == null)",
      "info" : "IfStatement[45945-46570]:IfStatement[45945-46570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45967-46373]:Block[45967-46373]"
    }, {
      "left" : "if (type.getTypeHandler() == null)",
      "right" : "if (type.getTypeHandler() == null)",
      "info" : "IfStatement[46087-46275]:IfStatement[46087-46275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46122-46275]:Block[46122-46275]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);",
      "right" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);",
      "info" : "ThrowStatement[46148-46253]:ThrowStatement[46148-46253]"
    }, {
      "left" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "right" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "info" : "ExpressionStatement[46296-46355]:ExpressionStatement[46296-46355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46379-46570]:Block[46379-46570]"
    }, {
      "left" : "type = implType;",
      "right" : "type = implType;",
      "info" : "ExpressionStatement[46401-46417]:ExpressionStatement[46401-46417]"
    }, {
      "left" : "beanDesc = config.introspectForCreation(type);",
      "right" : "beanDesc = config.introspectForCreation(type);",
      "info" : "ExpressionStatement[46506-46552]:ExpressionStatement[46506-46552]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[46597-47578]:IfStatement[46597-47578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46616-47578]:Block[46616-47578]"
    }, {
      "left" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "right" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "info" : "VariableDeclarationStatement[46634-46697]:VariableDeclarationStatement[46634-46697]"
    }, {
      "left" : "if (!inst.canCreateUsingDefault())",
      "right" : "if (!inst.canCreateUsingDefault())",
      "info" : "IfStatement[46714-47066]:IfStatement[46714-47066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46749-47066]:Block[46749-47066]"
    }, {
      "left" : "if (type.getRawClass() == ArrayBlockingQueue.class)",
      "right" : "if (type.getRawClass() == ArrayBlockingQueue.class)",
      "info" : "IfStatement[46856-47048]:IfStatement[46856-47048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46908-47048]:Block[46908-47048]"
    }, {
      "left" : "return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst, null);",
      "right" : "return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst, null);",
      "info" : "ReturnStatement[46934-47026]:ReturnStatement[46934-47026]"
    }, {
      "left" : "if (contentType.getRawClass() == String.class)",
      "right" : "if (contentType.getRawClass() == String.class)",
      "info" : "IfStatement[47186-47564]:IfStatement[47186-47564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47233-47439]:Block[47233-47439]"
    }, {
      "left" : "deser = new StringCollectionDeserializer(type, contentDeser, inst);",
      "right" : "deser = new StringCollectionDeserializer(type, contentDeser, inst);",
      "info" : "ExpressionStatement[47354-47421]:ExpressionStatement[47354-47421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47445-47564]:Block[47445-47564]"
    }, {
      "left" : "deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);",
      "right" : "deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);",
      "info" : "ExpressionStatement[47467-47546]:ExpressionStatement[47467-47546]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[47674-47925]:IfStatement[47674-47925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47721-47925]:Block[47721-47925]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[47735-47915]:EnhancedForStatement[47735-47915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47811-47915]:Block[47811-47915]"
    }, {
      "left" : "deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[47829-47901]:ExpressionStatement[47829-47901]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[47934-47947]:ReturnStatement[47934-47947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48060-48363]:Block[48060-48363]"
    }, {
      "left" : "Class<?> collectionClass = type.getRawClass();",
      "right" : "Class<?> collectionClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[48070-48116]:VariableDeclarationStatement[48070-48116]"
    }, {
      "left" : "collectionClass = _collectionFallbacks.get(collectionClass.getName());",
      "right" : "collectionClass = _collectionFallbacks.get(collectionClass.getName());",
      "info" : "ExpressionStatement[48125-48195]:ExpressionStatement[48125-48195]"
    }, {
      "left" : "if (collectionClass == null)",
      "right" : "if (collectionClass == null)",
      "info" : "IfStatement[48204-48269]:IfStatement[48204-48269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48233-48269]:Block[48233-48269]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48247-48259]:ReturnStatement[48247-48259]"
    }, {
      "left" : "return (CollectionType) config.constructSpecializedType(type, collectionClass);",
      "right" : "return (CollectionType) config.constructSpecializedType(type, collectionClass);",
      "info" : "ReturnStatement[48278-48357]:ReturnStatement[48278-48357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48684-49891]:Block[48684-49891]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[48694-48739]:VariableDeclarationStatement[48694-48739]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[48818-48888]:VariableDeclarationStatement[48818-48888]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[48897-48951]:VariableDeclarationStatement[48897-48951]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[49069-49134]:VariableDeclarationStatement[49069-49134]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[49197-49312]:IfStatement[49197-49312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49227-49312]:Block[49227-49312]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[49241-49302]:ExpressionStatement[49241-49302]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[49321-49459]:VariableDeclarationStatement[49321-49459]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[49468-49863]:IfStatement[49468-49863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49487-49863]:Block[49487-49863]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[49582-49853]:IfStatement[49582-49853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49629-49853]:Block[49629-49853]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[49647-49839]:EnhancedForStatement[49647-49839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49723-49839]:Block[49723-49839]"
    }, {
      "left" : "deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[49745-49821]:ExpressionStatement[49745-49821]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[49872-49885]:ReturnStatement[49872-49885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50287-54422]:Block[50287-54422]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[50297-50351]:VariableDeclarationStatement[50297-50351]"
    }, {
      "left" : "JavaType keyType = type.getKeyType();",
      "right" : "JavaType keyType = type.getKeyType();",
      "info" : "VariableDeclarationStatement[50360-50397]:VariableDeclarationStatement[50360-50397]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[50406-50451]:VariableDeclarationStatement[50406-50451]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "right" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[50542-50678]:VariableDeclarationStatement[50542-50678]"
    }, {
      "left" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "right" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "info" : "VariableDeclarationStatement[50767-50836]:VariableDeclarationStatement[50767-50836]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[50936-51001]:VariableDeclarationStatement[50936-51001]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[51064-51179]:IfStatement[51064-51179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51094-51179]:Block[51094-51179]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[51108-51169]:ExpressionStatement[51108-51169]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc,\n                keyDes, contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc,\n                keyDes, contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[51248-51383]:VariableDeclarationStatement[51248-51383]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[51393-54064]:IfStatement[51393-54064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51412-54064]:Block[51412-54064]"
    }, {
      "left" : "Class<?> mapClass = type.getRawClass();",
      "right" : "Class<?> mapClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[51525-51564]:VariableDeclarationStatement[51525-51564]"
    }, {
      "left" : "if (EnumMap.class.isAssignableFrom(mapClass))",
      "right" : "if (EnumMap.class.isAssignableFrom(mapClass))",
      "info" : "IfStatement[51577-51971]:IfStatement[51577-51971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51623-51971]:Block[51623-51971]"
    }, {
      "left" : "Class<?> kt = keyType.getRawClass();",
      "right" : "Class<?> kt = keyType.getRawClass();",
      "info" : "VariableDeclarationStatement[51641-51677]:VariableDeclarationStatement[51641-51677]"
    }, {
      "left" : "if (kt == null || !kt.isEnum())",
      "right" : "if (kt == null || !kt.isEnum())",
      "info" : "IfStatement[51694-51864]:IfStatement[51694-51864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51726-51864]:Block[51726-51864]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");",
      "right" : "throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");",
      "info" : "ThrowStatement[51748-51846]:ThrowStatement[51748-51846]"
    }, {
      "left" : "deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser);",
      "right" : "deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser);",
      "info" : "ExpressionStatement[51881-51957]:ExpressionStatement[51881-51957]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[52550-54054]:IfStatement[52550-54054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52569-54054]:Block[52569-54054]"
    }, {
      "left" : "if (type.isInterface() || type.isAbstract())",
      "right" : "if (type.isInterface() || type.isAbstract())",
      "info" : "IfStatement[52587-53565]:IfStatement[52587-53565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52632-53565]:Block[52632-53565]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n                    Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName());",
      "right" : "@SuppressWarnings(\"rawtypes\")\n                    Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName());",
      "info" : "VariableDeclarationStatement[52654-52774]:VariableDeclarationStatement[52654-52774]"
    }, {
      "left" : "if (fallback != null)",
      "right" : "if (fallback != null)",
      "info" : "IfStatement[52795-53547]:IfStatement[52795-53547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52817-53118]:Block[52817-53118]"
    }, {
      "left" : "mapClass = fallback;",
      "right" : "mapClass = fallback;",
      "info" : "ExpressionStatement[52843-52863]:ExpressionStatement[52843-52863]"
    }, {
      "left" : "type = (MapType) config.constructSpecializedType(type, mapClass);",
      "right" : "type = (MapType) config.constructSpecializedType(type, mapClass);",
      "info" : "ExpressionStatement[52888-52953]:ExpressionStatement[52888-52953]"
    }, {
      "left" : "beanDesc = config.introspectForCreation(type);",
      "right" : "beanDesc = config.introspectForCreation(type);",
      "info" : "ExpressionStatement[53050-53096]:ExpressionStatement[53050-53096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53124-53547]:Block[53124-53547]"
    }, {
      "left" : "if (type.getTypeHandler() == null)",
      "right" : "if (type.getTypeHandler() == null)",
      "info" : "IfStatement[53252-53441]:IfStatement[53252-53441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53287-53441]:Block[53287-53441]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);",
      "right" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);",
      "info" : "ThrowStatement[53317-53415]:ThrowStatement[53317-53415]"
    }, {
      "left" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "right" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "info" : "ExpressionStatement[53466-53525]:ExpressionStatement[53466-53525]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[53582-54040]:IfStatement[53582-54040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53601-54040]:Block[53601-54040]"
    }, {
      "left" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "right" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "info" : "VariableDeclarationStatement[53623-53686]:VariableDeclarationStatement[53623-53686]"
    }, {
      "left" : "MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);",
      "right" : "MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);",
      "info" : "VariableDeclarationStatement[53707-53800]:VariableDeclarationStatement[53707-53800]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[53821-53884]:VariableDeclarationStatement[53821-53884]"
    }, {
      "left" : "md.setIgnorableProperties(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), false));",
      "right" : "md.setIgnorableProperties(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), false));",
      "info" : "ExpressionStatement[53905-53990]:ExpressionStatement[53905-53990]"
    }, {
      "left" : "deser = md;",
      "right" : "deser = md;",
      "info" : "ExpressionStatement[54011-54022]:ExpressionStatement[54011-54022]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[54150-54394]:IfStatement[54150-54394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54197-54394]:Block[54197-54394]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[54211-54384]:EnhancedForStatement[54211-54384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54287-54384]:Block[54287-54384]"
    }, {
      "left" : "deser = mod.modifyMapDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyMapDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[54305-54370]:ExpressionStatement[54305-54370]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[54403-54416]:ReturnStatement[54403-54416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54718-56395]:Block[54718-56395]"
    }, {
      "left" : "JavaType keyType = type.getKeyType();",
      "right" : "JavaType keyType = type.getKeyType();",
      "info" : "VariableDeclarationStatement[54728-54765]:VariableDeclarationStatement[54728-54765]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[54774-54819]:VariableDeclarationStatement[54774-54819]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[54828-54882]:VariableDeclarationStatement[54828-54882]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "right" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[54973-55109]:VariableDeclarationStatement[54973-55109]"
    }, {
      "left" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "right" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "info" : "VariableDeclarationStatement[55198-55267]:VariableDeclarationStatement[55198-55267]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[55579-55644]:VariableDeclarationStatement[55579-55644]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[55707-55822]:IfStatement[55707-55822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55737-55822]:Block[55737-55822]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[55751-55812]:ExpressionStatement[55751-55812]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config,\n                beanDesc, keyDes, contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config,\n                beanDesc, keyDes, contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[55831-55970]:VariableDeclarationStatement[55831-55970]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[55979-56367]:IfStatement[55979-56367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55998-56367]:Block[55998-56367]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[56093-56357]:IfStatement[56093-56357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56140-56357]:Block[56140-56357]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[56158-56343]:EnhancedForStatement[56158-56343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56234-56343]:Block[56234-56343]"
    }, {
      "left" : "deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[56256-56325]:ExpressionStatement[56256-56325]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[56376-56389]:ReturnStatement[56376-56389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56881-58788]:Block[56881-58788]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[56891-56945]:VariableDeclarationStatement[56891-56945]"
    }, {
      "left" : "final Class<?> enumClass = type.getRawClass();",
      "right" : "final Class<?> enumClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[56954-57000]:VariableDeclarationStatement[56954-57000]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "info" : "VariableDeclarationStatement[57060-57145]:VariableDeclarationStatement[57060-57145]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[57154-58428]:IfStatement[57154-58428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57173-58428]:Block[57173-58428]"
    }, {
      "left" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "right" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "info" : "EnhancedForStatement[57265-58174]:EnhancedForStatement[57265-58174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57326-58174]:Block[57326-58174]"
    }, {
      "left" : "if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory))",
      "right" : "if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory))",
      "info" : "IfStatement[57344-58160]:IfStatement[57344-58160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57412-58160]:Block[57412-58160]"
    }, {
      "left" : "int argCount = factory.getParameterCount();",
      "right" : "int argCount = factory.getParameterCount();",
      "info" : "VariableDeclarationStatement[57434-57477]:VariableDeclarationStatement[57434-57477]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[57498-57954]:IfStatement[57498-57954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57517-57954]:Block[57517-57954]"
    }, {
      "left" : "Class<?> returnType = factory.getRawReturnType();",
      "right" : "Class<?> returnType = factory.getRawReturnType();",
      "info" : "VariableDeclarationStatement[57543-57592]:VariableDeclarationStatement[57543-57592]"
    }, {
      "left" : "if (returnType.isAssignableFrom(enumClass))",
      "right" : "if (returnType.isAssignableFrom(enumClass))",
      "info" : "IfStatement[57721-57932]:IfStatement[57721-57932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57765-57932]:Block[57765-57932]"
    }, {
      "left" : "deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory);",
      "right" : "deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory);",
      "info" : "ExpressionStatement[57795-57871]:ExpressionStatement[57795-57871]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57900-57906]:BreakStatement[57900-57906]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                            +enumClass.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                            +enumClass.getName()+\")\");",
      "info" : "ThrowStatement[57975-58142]:ThrowStatement[57975-58142]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[58264-58418]:IfStatement[58264-58418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58283-58418]:Block[58283-58418]"
    }, {
      "left" : "deser = new EnumDeserializer(constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod()));",
      "right" : "deser = new EnumDeserializer(constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod()));",
      "info" : "ExpressionStatement[58301-58404]:ExpressionStatement[58301-58404]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[58515-58760]:IfStatement[58515-58760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58562-58760]:Block[58562-58760]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[58576-58750]:EnhancedForStatement[58576-58750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58652-58750]:Block[58652-58750]"
    }, {
      "left" : "deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[58670-58736]:ExpressionStatement[58670-58736]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[58769-58782]:ReturnStatement[58769-58782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59193-59634]:Block[59193-59634]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();",
      "right" : "@SuppressWarnings(\"unchecked\")\n        Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();",
      "info" : "VariableDeclarationStatement[59203-59331]:VariableDeclarationStatement[59203-59331]"
    }, {
      "left" : "JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n                beanDesc);",
      "right" : "JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n                beanDesc);",
      "info" : "VariableDeclarationStatement[59391-59497]:VariableDeclarationStatement[59391-59497]"
    }, {
      "left" : "if (custom != null)",
      "right" : "if (custom != null)",
      "info" : "IfStatement[59506-59564]:IfStatement[59506-59564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59526-59564]:Block[59526-59564]"
    }, {
      "left" : "return custom;",
      "right" : "return custom;",
      "info" : "ReturnStatement[59540-59554]:ReturnStatement[59540-59554]"
    }, {
      "left" : "return JsonNodeDeserializer.getDeserializer(nodeClass);",
      "right" : "return JsonNodeDeserializer.getDeserializer(nodeClass);",
      "info" : "ReturnStatement[59573-59628]:ReturnStatement[59573-59628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60014-61349]:Block[60014-61349]"
    }, {
      "left" : "BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());",
      "right" : "BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());",
      "info" : "VariableDeclarationStatement[60024-60105]:VariableDeclarationStatement[60024-60105]"
    }, {
      "left" : "AnnotatedClass ac = bean.getClassInfo();",
      "right" : "AnnotatedClass ac = bean.getClassInfo();",
      "info" : "VariableDeclarationStatement[60114-60154]:VariableDeclarationStatement[60114-60154]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[60163-60226]:VariableDeclarationStatement[60163-60226]"
    }, {
      "left" : "TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);",
      "right" : "TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);",
      "info" : "VariableDeclarationStatement[60235-60304]:VariableDeclarationStatement[60235-60304]"
    }, {
      "left" : "Collection<NamedType> subtypes = null;",
      "right" : "Collection<NamedType> subtypes = null;",
      "info" : "VariableDeclarationStatement[60465-60503]:VariableDeclarationStatement[60465-60503]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[60512-60775]:IfStatement[60512-60775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60527-60660]:Block[60527-60660]"
    }, {
      "left" : "b = config.getDefaultTyper(baseType);",
      "right" : "b = config.getDefaultTyper(baseType);",
      "info" : "ExpressionStatement[60541-60578]:ExpressionStatement[60541-60578]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[60591-60650]:IfStatement[60591-60650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60606-60650]:Block[60606-60650]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[60624-60636]:ReturnStatement[60624-60636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60666-60775]:Block[60666-60775]"
    }, {
      "left" : "subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);",
      "right" : "subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);",
      "info" : "ExpressionStatement[60680-60765]:ExpressionStatement[60680-60765]"
    }, {
      "left" : "if ((b.getDefaultImpl() == null) && baseType.isAbstract())",
      "right" : "if ((b.getDefaultImpl() == null) && baseType.isAbstract())",
      "info" : "IfStatement[60965-61275]:IfStatement[60965-61275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61024-61275]:Block[61024-61275]"
    }, {
      "left" : "JavaType defaultType = mapAbstractType(config, baseType);",
      "right" : "JavaType defaultType = mapAbstractType(config, baseType);",
      "info" : "VariableDeclarationStatement[61038-61095]:VariableDeclarationStatement[61038-61095]"
    }, {
      "left" : "if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass())",
      "right" : "if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass())",
      "info" : "IfStatement[61108-61265]:IfStatement[61108-61265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61188-61265]:Block[61188-61265]"
    }, {
      "left" : "b = b.defaultImpl(defaultType.getRawClass());",
      "right" : "b = b.defaultImpl(defaultType.getRawClass());",
      "info" : "ExpressionStatement[61206-61251]:ExpressionStatement[61206-61251]"
    }, {
      "left" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "right" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "info" : "ReturnStatement[61284-61343]:ReturnStatement[61284-61343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61642-61748]:Block[61642-61748]"
    }, {
      "left" : "return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);",
      "right" : "return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);",
      "info" : "ReturnStatement[61652-61742]:ReturnStatement[61652-61742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62126-63330]:Block[62126-63330]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[62136-62190]:VariableDeclarationStatement[62136-62190]"
    }, {
      "left" : "KeyDeserializer deser = null;",
      "right" : "KeyDeserializer deser = null;",
      "info" : "VariableDeclarationStatement[62199-62228]:VariableDeclarationStatement[62199-62228]"
    }, {
      "left" : "if (_factoryConfig.hasKeyDeserializers())",
      "right" : "if (_factoryConfig.hasKeyDeserializers())",
      "info" : "IfStatement[62237-62627]:IfStatement[62237-62627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62279-62627]:Block[62279-62627]"
    }, {
      "left" : "BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());",
      "right" : "BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());",
      "info" : "VariableDeclarationStatement[62293-62374]:VariableDeclarationStatement[62293-62374]"
    }, {
      "left" : "for (KeyDeserializers d  : _factoryConfig.keyDeserializers())",
      "right" : "for (KeyDeserializers d  : _factoryConfig.keyDeserializers())",
      "info" : "EnhancedForStatement[62387-62617]:EnhancedForStatement[62387-62617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62449-62617]:Block[62449-62617]"
    }, {
      "left" : "deser = d.findKeyDeserializer(type, config, beanDesc);",
      "right" : "deser = d.findKeyDeserializer(type, config, beanDesc);",
      "info" : "ExpressionStatement[62467-62521]:ExpressionStatement[62467-62521]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[62538-62603]:IfStatement[62538-62603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62557-62603]:Block[62557-62603]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62579-62585]:BreakStatement[62579-62585]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[62684-62914]:IfStatement[62684-62914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62703-62914]:Block[62703-62914]"
    }, {
      "left" : "if (type.isEnumType())",
      "right" : "if (type.isEnumType())",
      "info" : "IfStatement[62717-62818]:IfStatement[62717-62818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62740-62818]:Block[62740-62818]"
    }, {
      "left" : "return _createEnumKeyDeserializer(ctxt, type);",
      "right" : "return _createEnumKeyDeserializer(ctxt, type);",
      "info" : "ReturnStatement[62758-62804]:ReturnStatement[62758-62804]"
    }, {
      "left" : "deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);",
      "right" : "deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);",
      "info" : "ExpressionStatement[62831-62904]:ExpressionStatement[62831-62904]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[63009-63302]:IfStatement[63009-63302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63028-63302]:Block[63028-63302]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[63042-63292]:IfStatement[63042-63292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63089-63292]:Block[63089-63292]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[63107-63278]:EnhancedForStatement[63107-63278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63183-63278]:Block[63183-63278]"
    }, {
      "left" : "deser = mod.modifyKeyDeserializer(config, type, deser);",
      "right" : "deser = mod.modifyKeyDeserializer(config, type, deser);",
      "info" : "ExpressionStatement[63205-63260]:ExpressionStatement[63205-63260]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[63311-63324]:ReturnStatement[63311-63324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63483-65866]:Block[63483-65866]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[63493-63547]:VariableDeclarationStatement[63493-63547]"
    }, {
      "left" : "BeanDescription beanDesc = config.introspect(type);",
      "right" : "BeanDescription beanDesc = config.introspect(type);",
      "info" : "VariableDeclarationStatement[63556-63607]:VariableDeclarationStatement[63556-63607]"
    }, {
      "left" : "JsonDeserializer<?> des = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());",
      "right" : "JsonDeserializer<?> des = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());",
      "info" : "VariableDeclarationStatement[63616-63704]:VariableDeclarationStatement[63616-63704]"
    }, {
      "left" : "if (des != null)",
      "right" : "if (des != null)",
      "info" : "IfStatement[63713-63835]:IfStatement[63713-63835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63730-63835]:Block[63730-63835]"
    }, {
      "left" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, des);",
      "right" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, des);",
      "info" : "ReturnStatement[63744-63825]:ReturnStatement[63744-63825]"
    }, {
      "left" : "Class<?> enumClass = type.getRawClass();",
      "right" : "Class<?> enumClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[63844-63884]:VariableDeclarationStatement[63844-63884]"
    }, {
      "left" : "JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "right" : "JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "info" : "VariableDeclarationStatement[63944-64030]:VariableDeclarationStatement[63944-64030]"
    }, {
      "left" : "if (custom != null)",
      "right" : "if (custom != null)",
      "info" : "IfStatement[64039-64167]:IfStatement[64039-64167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64059-64167]:Block[64059-64167]"
    }, {
      "left" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom);",
      "right" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom);",
      "info" : "ReturnStatement[64073-64157]:ReturnStatement[64073-64157]"
    }, {
      "left" : "EnumResolver enumRes = constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod());",
      "right" : "EnumResolver enumRes = constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod());",
      "info" : "VariableDeclarationStatement[64177-64273]:VariableDeclarationStatement[64177-64273]"
    }, {
      "left" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "right" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "info" : "EnhancedForStatement[64356-65713]:EnhancedForStatement[64356-65713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64417-65713]:Block[64417-65713]"
    }, {
      "left" : "if (config.getAnnotationIntrospector().hasCreatorAnnotation(factory))",
      "right" : "if (config.getAnnotationIntrospector().hasCreatorAnnotation(factory))",
      "info" : "IfStatement[64431-65703]:IfStatement[64431-65703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64501-65703]:Block[64501-65703]"
    }, {
      "left" : "int argCount = factory.getParameterCount();",
      "right" : "int argCount = factory.getParameterCount();",
      "info" : "VariableDeclarationStatement[64519-64562]:VariableDeclarationStatement[64519-64562]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[64579-65509]:IfStatement[64579-65509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64598-65509]:Block[64598-65509]"
    }, {
      "left" : "Class<?> returnType = factory.getRawReturnType();",
      "right" : "Class<?> returnType = factory.getRawReturnType();",
      "info" : "VariableDeclarationStatement[64620-64669]:VariableDeclarationStatement[64620-64669]"
    }, {
      "left" : "if (returnType.isAssignableFrom(enumClass))",
      "right" : "if (returnType.isAssignableFrom(enumClass))",
      "info" : "IfStatement[64790-65491]:IfStatement[64790-65491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64834-65491]:Block[64834-65491]"
    }, {
      "left" : "if (factory.getGenericParameterType(0) != String.class)",
      "right" : "if (factory.getGenericParameterType(0) != String.class)",
      "info" : "IfStatement[64959-65199]:IfStatement[64959-65199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65015-65199]:Block[65015-65199]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");",
      "right" : "throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");",
      "info" : "ThrowStatement[65045-65173]:ThrowStatement[65045-65173]"
    }, {
      "left" : "if (config.canOverrideAccessModifiers())",
      "right" : "if (config.canOverrideAccessModifiers())",
      "info" : "IfStatement[65224-65370]:IfStatement[65224-65370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65265-65370]:Block[65265-65370]"
    }, {
      "left" : "ClassUtil.checkAndFixAccess(factory.getMember());",
      "right" : "ClassUtil.checkAndFixAccess(factory.getMember());",
      "info" : "ExpressionStatement[65295-65344]:ExpressionStatement[65295-65344]"
    }, {
      "left" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory);",
      "right" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory);",
      "info" : "ReturnStatement[65395-65469]:ReturnStatement[65395-65469]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                        +enumClass.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                        +enumClass.getName()+\")\");",
      "info" : "ThrowStatement[65526-65689]:ThrowStatement[65526-65689]"
    }, {
      "left" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);",
      "right" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);",
      "info" : "ReturnStatement[65795-65860]:ReturnStatement[65795-65860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66880-67509]:Block[66880-67509]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[66890-66953]:VariableDeclarationStatement[66890-66953]"
    }, {
      "left" : "TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType);",
      "right" : "TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType);",
      "info" : "VariableDeclarationStatement[66962-67046]:VariableDeclarationStatement[66962-67046]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[67133-67218]:IfStatement[67133-67218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67148-67218]:Block[67148-67218]"
    }, {
      "left" : "return findTypeDeserializer(config, baseType);",
      "right" : "return findTypeDeserializer(config, baseType);",
      "info" : "ReturnStatement[67162-67208]:ReturnStatement[67162-67208]"
    }, {
      "left" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, annotated, baseType);",
      "right" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, annotated, baseType);",
      "info" : "VariableDeclarationStatement[67294-67435]:VariableDeclarationStatement[67294-67435]"
    }, {
      "left" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "right" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "info" : "ReturnStatement[67444-67503]:ReturnStatement[67444-67503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68317-69034]:Block[68317-69034]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[68327-68390]:VariableDeclarationStatement[68327-68390]"
    }, {
      "left" : "TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, propertyEntity, containerType);",
      "right" : "TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, propertyEntity, containerType);",
      "info" : "VariableDeclarationStatement[68399-68500]:VariableDeclarationStatement[68399-68500]"
    }, {
      "left" : "JavaType contentType = containerType.getContentType();",
      "right" : "JavaType contentType = containerType.getContentType();",
      "info" : "VariableDeclarationStatement[68517-68571]:VariableDeclarationStatement[68517-68571]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[68644-68732]:IfStatement[68644-68732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68659-68732]:Block[68659-68732]"
    }, {
      "left" : "return findTypeDeserializer(config, contentType);",
      "right" : "return findTypeDeserializer(config, contentType);",
      "info" : "ReturnStatement[68673-68722]:ReturnStatement[68673-68722]"
    }, {
      "left" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, propertyEntity, contentType);",
      "right" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, propertyEntity, contentType);",
      "info" : "VariableDeclarationStatement[68808-68957]:VariableDeclarationStatement[68808-68957]"
    }, {
      "left" : "return b.buildTypeDeserializer(config, contentType, subtypes);",
      "right" : "return b.buildTypeDeserializer(config, contentType, subtypes);",
      "info" : "ReturnStatement[68966-69028]:ReturnStatement[68966-69028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69431-73098]:Block[69431-73098]"
    }, {
      "left" : "Class<?> rawType = type.getRawClass();",
      "right" : "Class<?> rawType = type.getRawClass();",
      "info" : "VariableDeclarationStatement[69441-69479]:VariableDeclarationStatement[69441-69479]"
    }, {
      "left" : "if (rawType == CLASS_OBJECT)",
      "right" : "if (rawType == CLASS_OBJECT)",
      "info" : "IfStatement[69539-70089]:IfStatement[69539-70089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69568-70089]:Block[69568-70089]"
    }, {
      "left" : "DeserializationConfig config = ctxt.getConfig();",
      "right" : "DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[69684-69732]:VariableDeclarationStatement[69684-69732]"
    }, {
      "left" : "JavaType lt, mt;",
      "right" : "JavaType lt, mt;",
      "info" : "VariableDeclarationStatement[69745-69761]:VariableDeclarationStatement[69745-69761]"
    }, {
      "left" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "right" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "info" : "IfStatement[69787-70021]:IfStatement[69787-70021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69834-69968]:Block[69834-69968]"
    }, {
      "left" : "lt = _findRemappedType(config, List.class);",
      "right" : "lt = _findRemappedType(config, List.class);",
      "info" : "ExpressionStatement[69852-69895]:ExpressionStatement[69852-69895]"
    }, {
      "left" : "mt = _findRemappedType(config, Map.class);",
      "right" : "mt = _findRemappedType(config, Map.class);",
      "info" : "ExpressionStatement[69912-69954]:ExpressionStatement[69912-69954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69974-70021]:Block[69974-70021]"
    }, {
      "left" : "lt = mt = null;",
      "right" : "lt = mt = null;",
      "info" : "ExpressionStatement[69992-70007]:ExpressionStatement[69992-70007]"
    }, {
      "left" : "return new UntypedObjectDeserializer(lt, mt);",
      "right" : "return new UntypedObjectDeserializer(lt, mt);",
      "info" : "ReturnStatement[70034-70079]:ReturnStatement[70034-70079]"
    }, {
      "left" : "if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER)",
      "right" : "if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER)",
      "info" : "IfStatement[70098-70218]:IfStatement[70098-70218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70159-70218]:Block[70159-70218]"
    }, {
      "left" : "return StringDeserializer.instance;",
      "right" : "return StringDeserializer.instance;",
      "info" : "ReturnStatement[70173-70208]:ReturnStatement[70173-70208]"
    }, {
      "left" : "if (type.isReferenceType())",
      "right" : "if (type.isReferenceType())",
      "info" : "IfStatement[70236-70886]:IfStatement[70236-70886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70264-70886]:Block[70264-70886]"
    }, {
      "left" : "JavaType referencedType = type.getReferencedType();",
      "right" : "JavaType referencedType = type.getReferencedType();",
      "info" : "VariableDeclarationStatement[70278-70329]:VariableDeclarationStatement[70278-70329]"
    }, {
      "left" : "if (AtomicReference.class.isAssignableFrom(rawType))",
      "right" : "if (AtomicReference.class.isAssignableFrom(rawType))",
      "info" : "IfStatement[70342-70800]:IfStatement[70342-70800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70395-70800]:Block[70395-70800]"
    }, {
      "left" : "TypeDeserializer vts = findTypeDeserializer(ctxt.getConfig(), referencedType);",
      "right" : "TypeDeserializer vts = findTypeDeserializer(ctxt.getConfig(), referencedType);",
      "info" : "VariableDeclarationStatement[70413-70491]:VariableDeclarationStatement[70413-70491]"
    }, {
      "left" : "BeanDescription refdDesc = ctxt.getConfig().introspectClassAnnotations(referencedType);",
      "right" : "BeanDescription refdDesc = ctxt.getConfig().introspectClassAnnotations(referencedType);",
      "info" : "VariableDeclarationStatement[70508-70595]:VariableDeclarationStatement[70508-70595]"
    }, {
      "left" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());",
      "right" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());",
      "info" : "VariableDeclarationStatement[70612-70702]:VariableDeclarationStatement[70612-70702]"
    }, {
      "left" : "return new AtomicReferenceDeserializer(referencedType, vts, deser);",
      "right" : "return new AtomicReferenceDeserializer(referencedType, vts, deser);",
      "info" : "ReturnStatement[70719-70786]:ReturnStatement[70719-70786]"
    }, {
      "left" : "if (rawType == CLASS_ITERABLE)",
      "right" : "if (rawType == CLASS_ITERABLE)",
      "info" : "IfStatement[70895-71468]:IfStatement[70895-71468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70926-71468]:Block[70926-71468]"
    }, {
      "left" : "TypeFactory tf = ctxt.getTypeFactory();",
      "right" : "TypeFactory tf = ctxt.getTypeFactory();",
      "info" : "VariableDeclarationStatement[71015-71054]:VariableDeclarationStatement[71015-71054]"
    }, {
      "left" : "JavaType[] tps = tf.findTypeParameters(type, CLASS_ITERABLE);",
      "right" : "JavaType[] tps = tf.findTypeParameters(type, CLASS_ITERABLE);",
      "info" : "VariableDeclarationStatement[71067-71128]:VariableDeclarationStatement[71067-71128]"
    }, {
      "left" : "JavaType elemType = (tps == null || tps.length != 1) ? TypeFactory.unknownType() : tps[0];",
      "right" : "JavaType elemType = (tps == null || tps.length != 1) ? TypeFactory.unknownType() : tps[0];",
      "info" : "VariableDeclarationStatement[71141-71231]:VariableDeclarationStatement[71141-71231]"
    }, {
      "left" : "CollectionType ct = tf.constructCollectionType(Collection.class, elemType);",
      "right" : "CollectionType ct = tf.constructCollectionType(Collection.class, elemType);",
      "info" : "VariableDeclarationStatement[71244-71319]:VariableDeclarationStatement[71244-71319]"
    }, {
      "left" : "return createCollectionDeserializer(ctxt, ct, beanDesc);",
      "right" : "return createCollectionDeserializer(ctxt, ct, beanDesc);",
      "info" : "ReturnStatement[71402-71458]:ReturnStatement[71402-71458]"
    }, {
      "left" : "if (rawType == CLASS_MAP_ENTRY)",
      "right" : "if (rawType == CLASS_MAP_ENTRY)",
      "info" : "IfStatement[71477-72289]:IfStatement[71477-72289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71509-72289]:Block[71509-72289]"
    }, {
      "left" : "JavaType kt = type.containedType(0);",
      "right" : "JavaType kt = type.containedType(0);",
      "info" : "VariableDeclarationStatement[71599-71635]:VariableDeclarationStatement[71599-71635]"
    }, {
      "left" : "if (kt == null)",
      "right" : "if (kt == null)",
      "info" : "IfStatement[71648-71727]:IfStatement[71648-71727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71664-71727]:Block[71664-71727]"
    }, {
      "left" : "kt = TypeFactory.unknownType();",
      "right" : "kt = TypeFactory.unknownType();",
      "info" : "ExpressionStatement[71682-71713]:ExpressionStatement[71682-71713]"
    }, {
      "left" : "JavaType vt = type.containedType(1);",
      "right" : "JavaType vt = type.containedType(1);",
      "info" : "VariableDeclarationStatement[71740-71776]:VariableDeclarationStatement[71740-71776]"
    }, {
      "left" : "if (vt == null)",
      "right" : "if (vt == null)",
      "info" : "IfStatement[71789-71868]:IfStatement[71789-71868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71805-71868]:Block[71805-71868]"
    }, {
      "left" : "vt = TypeFactory.unknownType();",
      "right" : "vt = TypeFactory.unknownType();",
      "info" : "ExpressionStatement[71823-71854]:ExpressionStatement[71823-71854]"
    }, {
      "left" : "TypeDeserializer vts = (TypeDeserializer) vt.getTypeHandler();",
      "right" : "TypeDeserializer vts = (TypeDeserializer) vt.getTypeHandler();",
      "info" : "VariableDeclarationStatement[71881-71943]:VariableDeclarationStatement[71881-71943]"
    }, {
      "left" : "if (vts == null)",
      "right" : "if (vts == null)",
      "info" : "IfStatement[71956-72054]:IfStatement[71956-72054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71973-72054]:Block[71973-72054]"
    }, {
      "left" : "vts = findTypeDeserializer(ctxt.getConfig(), vt);",
      "right" : "vts = findTypeDeserializer(ctxt.getConfig(), vt);",
      "info" : "ExpressionStatement[71991-72040]:ExpressionStatement[71991-72040]"
    }, {
      "left" : "JsonDeserializer<Object> valueDeser = vt.getValueHandler();",
      "right" : "JsonDeserializer<Object> valueDeser = vt.getValueHandler();",
      "info" : "VariableDeclarationStatement[72067-72126]:VariableDeclarationStatement[72067-72126]"
    }, {
      "left" : "KeyDeserializer keyDes = (KeyDeserializer) kt.getValueHandler();",
      "right" : "KeyDeserializer keyDes = (KeyDeserializer) kt.getValueHandler();",
      "info" : "VariableDeclarationStatement[72139-72203]:VariableDeclarationStatement[72139-72203]"
    }, {
      "left" : "return new MapEntryDeserializer(type, keyDes, valueDeser, vts);",
      "right" : "return new MapEntryDeserializer(type, keyDes, valueDeser, vts);",
      "info" : "ReturnStatement[72216-72279]:ReturnStatement[72216-72279]"
    }, {
      "left" : "String clsName = rawType.getName();",
      "right" : "String clsName = rawType.getName();",
      "info" : "VariableDeclarationStatement[72298-72333]:VariableDeclarationStatement[72298-72333]"
    }, {
      "left" : "if (rawType.isPrimitive() || clsName.startsWith(\"java.\"))",
      "right" : "if (rawType.isPrimitive() || clsName.startsWith(\"java.\"))",
      "info" : "IfStatement[72342-72736]:IfStatement[72342-72736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72400-72736]:Block[72400-72736]"
    }, {
      "left" : "JsonDeserializer<?> deser = NumberDeserializers.find(rawType, clsName);",
      "right" : "JsonDeserializer<?> deser = NumberDeserializers.find(rawType, clsName);",
      "info" : "VariableDeclarationStatement[72465-72536]:VariableDeclarationStatement[72465-72536]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[72549-72649]:IfStatement[72549-72649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72568-72649]:Block[72568-72649]"
    }, {
      "left" : "deser = DateDeserializers.find(rawType, clsName);",
      "right" : "deser = DateDeserializers.find(rawType, clsName);",
      "info" : "ExpressionStatement[72586-72635]:ExpressionStatement[72586-72635]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[72662-72726]:IfStatement[72662-72726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72681-72726]:Block[72681-72726]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[72699-72712]:ReturnStatement[72699-72712]"
    }, {
      "left" : "if (rawType == TokenBuffer.class)",
      "right" : "if (rawType == TokenBuffer.class)",
      "info" : "IfStatement[72789-72884]:IfStatement[72789-72884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72823-72884]:Block[72823-72884]"
    }, {
      "left" : "return new TokenBufferDeserializer();",
      "right" : "return new TokenBufferDeserializer();",
      "info" : "ReturnStatement[72837-72874]:ReturnStatement[72837-72874]"
    }, {
      "left" : "JsonDeserializer<?> deser = findOptionalStdDeserializer(ctxt, type, beanDesc);",
      "right" : "JsonDeserializer<?> deser = findOptionalStdDeserializer(ctxt, type, beanDesc);",
      "info" : "VariableDeclarationStatement[72893-72971]:VariableDeclarationStatement[72893-72971]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[72980-73036]:IfStatement[72980-73036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72999-73036]:Block[72999-73036]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[73013-73026]:ReturnStatement[73013-73026]"
    }, {
      "left" : "return JdkDeserializers.find(rawType, clsName);",
      "right" : "return JdkDeserializers.find(rawType, clsName);",
      "info" : "ReturnStatement[73045-73092]:ReturnStatement[73045-73092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73217-73378]:Block[73217-73378]"
    }, {
      "left" : "JavaType type = mapAbstractType(config, config.constructType(rawType));",
      "right" : "JavaType type = mapAbstractType(config, config.constructType(rawType));",
      "info" : "VariableDeclarationStatement[73227-73298]:VariableDeclarationStatement[73227-73298]"
    }, {
      "left" : "return (type == null || type.hasRawClass(rawType)) ? null : type;",
      "right" : "return (type == null || type.hasRawClass(rawType)) ? null : type;",
      "info" : "ReturnStatement[73307-73372]:ReturnStatement[73307-73372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73858-74194]:Block[73858-74194]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[73868-74167]:EnhancedForStatement[73868-74167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73924-74167]:Block[73924-74167]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n                    beanDesc, elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n                    beanDesc, elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[73938-74080]:VariableDeclarationStatement[73938-74080]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[74093-74157]:IfStatement[74093-74157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74112-74157]:Block[74112-74157]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[74130-74143]:ReturnStatement[74130-74143]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74176-74188]:ReturnStatement[74176-74188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74421-74717]:Block[74421-74717]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[74431-74690]:EnhancedForStatement[74431-74690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74487-74690]:Block[74487-74690]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[74501-74576]:VariableDeclarationStatement[74501-74576]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[74589-74680]:IfStatement[74589-74680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74608-74680]:Block[74608-74680]"
    }, {
      "left" : "return (JsonDeserializer<Object>) deser;",
      "right" : "return (JsonDeserializer<Object>) deser;",
      "info" : "ReturnStatement[74626-74666]:ReturnStatement[74626-74666]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[74699-74711]:ReturnStatement[74699-74711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75011-75352]:Block[75011-75352]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[75021-75325]:EnhancedForStatement[75021-75325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75077-75325]:Block[75077-75325]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[75091-75238]:VariableDeclarationStatement[75091-75238]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[75251-75315]:IfStatement[75251-75315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75270-75315]:Block[75270-75315]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[75288-75301]:ReturnStatement[75288-75301]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[75334-75346]:ReturnStatement[75334-75346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75658-76003]:Block[75658-76003]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[75668-75976]:EnhancedForStatement[75668-75976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75724-75976]:Block[75724-75976]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[75738-75889]:VariableDeclarationStatement[75738-75889]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[75902-75966]:IfStatement[75902-75966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75921-75966]:Block[75921-75966]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[75939-75952]:ReturnStatement[75939-75952]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[75985-75997]:ReturnStatement[75985-75997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76190-76459]:Block[76190-76459]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[76200-76432]:EnhancedForStatement[76200-76432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76256-76432]:Block[76256-76432]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[76270-76345]:VariableDeclarationStatement[76270-76345]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[76358-76422]:IfStatement[76358-76422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76377-76422]:Block[76377-76422]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[76395-76408]:ReturnStatement[76395-76408]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[76441-76453]:ReturnStatement[76441-76453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76788-77139]:Block[76788-77139]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[76798-77112]:EnhancedForStatement[76798-77112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76854-77112]:Block[76854-77112]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[76868-77025]:VariableDeclarationStatement[76868-77025]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[77038-77102]:IfStatement[77038-77102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77057-77102]:Block[77057-77102]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[77075-77088]:ReturnStatement[77075-77088]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[77121-77133]:ReturnStatement[77121-77133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77472-77827]:Block[77472-77827]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[77482-77800]:EnhancedForStatement[77482-77800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77538-77800]:Block[77538-77800]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[77552-77713]:VariableDeclarationStatement[77552-77713]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[77726-77790]:IfStatement[77726-77790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77745-77790]:Block[77745-77790]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[77763-77776]:ReturnStatement[77763-77776]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[77809-77821]:ReturnStatement[77809-77821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78035-78308]:Block[78035-78308]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[78045-78281]:EnhancedForStatement[78045-78281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78101-78281]:Block[78101-78281]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[78115-78194]:VariableDeclarationStatement[78115-78194]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[78207-78271]:IfStatement[78207-78271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78226-78271]:Block[78226-78271]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[78244-78257]:ReturnStatement[78244-78257]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[78290-78302]:ReturnStatement[78290-78302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78884-79097]:Block[78884-79097]"
    }, {
      "left" : "Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann);",
      "right" : "Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann);",
      "info" : "VariableDeclarationStatement[78894-78967]:VariableDeclarationStatement[78894-78967]"
    }, {
      "left" : "if (deserDef == null)",
      "right" : "if (deserDef == null)",
      "info" : "IfStatement[78976-79034]:IfStatement[78976-79034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78998-79034]:Block[78998-79034]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[79012-79024]:ReturnStatement[79012-79024]"
    }, {
      "left" : "return ctxt.deserializerInstance(ann, deserDef);",
      "right" : "return ctxt.deserializerInstance(ann, deserDef);",
      "info" : "ReturnStatement[79043-79091]:ReturnStatement[79043-79091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83793-86037]:Block[83832-86076]"
    }, {
      "left" : "if (type.isContainerType())",
      "right" : "if (type.isContainerType())",
      "info" : "IfStatement[83872-85437]:IfStatement[83911-85476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83900-85437]:Block[83939-85476]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[83914-83977]:VariableDeclarationStatement[83953-84016]"
    }, {
      "left" : "JavaType keyType = type.getKeyType();",
      "right" : "JavaType keyType = type.getKeyType();",
      "info" : "VariableDeclarationStatement[83990-84027]:VariableDeclarationStatement[84029-84066]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[84040-84429]:IfStatement[84079-84468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84061-84429]:Block[84100-84468]"
    }, {
      "left" : "Object kdDef = intr.findKeyDeserializer(member);",
      "right" : "Object kdDef = intr.findKeyDeserializer(member);",
      "info" : "VariableDeclarationStatement[84079-84127]:VariableDeclarationStatement[84118-84166]"
    }, {
      "left" : "KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);",
      "right" : "KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);",
      "info" : "VariableDeclarationStatement[84144-84209]:VariableDeclarationStatement[84183-84248]"
    }, {
      "left" : "if (kd != null)",
      "right" : "if (kd != null)",
      "info" : "IfStatement[84226-84415]:IfStatement[84265-84454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84242-84415]:Block[84281-84454]"
    }, {
      "left" : "type = ((MapLikeType) type).withKeyValueHandler(kd);",
      "right" : "type = ((MapLikeType) type).withKeyValueHandler(kd);",
      "info" : "ExpressionStatement[84264-84316]:ExpressionStatement[84303-84355]"
    }, {
      "left" : "keyType = type.getKeyType();",
      "right" : "keyType = type.getKeyType();",
      "info" : "ExpressionStatement[84337-84365]:ExpressionStatement[84376-84404]"
    }, {
      "left" : "Object cdDef = intr.findContentDeserializer(member);",
      "right" : "Object cdDef = intr.findContentDeserializer(member);",
      "info" : "VariableDeclarationStatement[84503-84555]:VariableDeclarationStatement[84542-84594]"
    }, {
      "left" : "JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef);",
      "right" : "JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef);",
      "info" : "VariableDeclarationStatement[84568-84634]:VariableDeclarationStatement[84607-84673]"
    }, {
      "left" : "if (cd != null)",
      "right" : "if (cd != null)",
      "info" : "IfStatement[84647-84735]:IfStatement[84686-84774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84663-84735]:Block[84702-84774]"
    }, {
      "left" : "type = type.withContentValueHandler(cd);",
      "right" : "type = type.withContentValueHandler(cd);",
      "info" : "ExpressionStatement[84681-84721]:ExpressionStatement[84720-84760]"
    }, {
      "left" : "if (member instanceof AnnotatedMember)",
      "right" : "if (member instanceof AnnotatedMember)",
      "info" : "IfStatement[85071-85427]:IfStatement[85110-85466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85110-85427]:Block[85149-85466]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer(\n            \t        ctxt.getConfig(), type, (AnnotatedMember) member);",
      "right" : "TypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer(\n            \t        ctxt.getConfig(), type, (AnnotatedMember) member);",
      "info" : "VariableDeclarationStatement[85125-85269]:VariableDeclarationStatement[85164-85308]"
    }, {
      "left" : "if (contentTypeDeser != null)",
      "right" : "if (contentTypeDeser != null)",
      "info" : "IfStatement[85296-85413]:IfStatement[85335-85452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85326-85413]:Block[85365-85452]"
    }, {
      "left" : "type = type.withContentTypeHandler(contentTypeDeser);",
      "right" : "type = type.withContentTypeHandler(contentTypeDeser);",
      "info" : "ExpressionStatement[85345-85398]:ExpressionStatement[85384-85437]"
    }, {
      "left" : "TypeDeserializer valueTypeDeser;",
      "right" : "TypeDeserializer valueTypeDeser;",
      "info" : "VariableDeclarationStatement[85446-85478]:VariableDeclarationStatement[85485-85517]"
    }, {
      "left" : "if (member instanceof AnnotatedMember)",
      "right" : "if (member instanceof AnnotatedMember)",
      "info" : "IfStatement[85488-85905]:IfStatement[85527-85944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85527-85707]:Block[85566-85746]"
    }, {
      "left" : "valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(),\n                    type, (AnnotatedMember) member);",
      "right" : "valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(),\n                    type, (AnnotatedMember) member);",
      "info" : "ExpressionStatement[85581-85697]:ExpressionStatement[85620-85736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85713-85905]:Block[85752-85944]"
    }, {
      "left" : "valueTypeDeser = findTypeDeserializer(ctxt.getConfig(), type);",
      "right" : "valueTypeDeser = findTypeDeserializer(ctxt.getConfig(), type);",
      "info" : "ExpressionStatement[85833-85895]:ExpressionStatement[85872-85934]"
    }, {
      "left" : "if (valueTypeDeser != null)",
      "right" : "if (valueTypeDeser != null)",
      "info" : "IfStatement[85914-86010]:IfStatement[85953-86049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85942-86010]:Block[85981-86049]"
    }, {
      "left" : "type = type.withTypeHandler(valueTypeDeser);",
      "right" : "type = type.withTypeHandler(valueTypeDeser);",
      "info" : "ExpressionStatement[85956-86000]:ExpressionStatement[85995-86039]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[86019-86031]:ReturnStatement[86058-86070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86191-86830]:Block[86230-86869]"
    }, {
      "left" : "if (jsonValueMethod != null)",
      "right" : "if (jsonValueMethod != null)",
      "info" : "IfStatement[86201-86508]:IfStatement[86240-86547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86230-86508]:Block[86269-86547]"
    }, {
      "left" : "Method accessor = jsonValueMethod.getAnnotated();",
      "right" : "Method accessor = jsonValueMethod.getAnnotated();",
      "info" : "VariableDeclarationStatement[86244-86293]:VariableDeclarationStatement[86283-86332]"
    }, {
      "left" : "if (config.canOverrideAccessModifiers())",
      "right" : "if (config.canOverrideAccessModifiers())",
      "info" : "IfStatement[86306-86417]:IfStatement[86345-86456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86347-86417]:Block[86386-86456]"
    }, {
      "left" : "ClassUtil.checkAndFixAccess(accessor);",
      "right" : "ClassUtil.checkAndFixAccess(accessor);",
      "info" : "ExpressionStatement[86365-86403]:ExpressionStatement[86404-86442]"
    }, {
      "left" : "return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor);",
      "right" : "return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor);",
      "info" : "ReturnStatement[86430-86498]:ReturnStatement[86469-86537]"
    }, {
      "left" : "if (config.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING))",
      "right" : "if (config.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING))",
      "info" : "IfStatement[86575-86732]:IfStatement[86614-86771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86648-86732]:Block[86687-86771]"
    }, {
      "left" : "return EnumResolver.constructUnsafeUsingToString(enumClass);",
      "right" : "return EnumResolver.constructUnsafeUsingToString(enumClass);",
      "info" : "ReturnStatement[86662-86722]:ReturnStatement[86701-86761]"
    }, {
      "left" : "return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());",
      "right" : "return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());",
      "info" : "ReturnStatement[86741-86824]:ReturnStatement[86780-86863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86933-87118]:Block[86972-87157]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[86943-87001]:IfStatement[86982-87040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86965-87001]:Block[87004-87040]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[86979-86991]:ReturnStatement[87018-87030]"
    }, {
      "left" : "BeanDescription beanDesc = config.introspect(enumType);",
      "right" : "BeanDescription beanDesc = config.introspect(enumType);",
      "info" : "VariableDeclarationStatement[87010-87065]:VariableDeclarationStatement[87049-87104]"
    }, {
      "left" : "return beanDesc.findJsonValueMethod();",
      "right" : "return beanDesc.findJsonValueMethod();",
      "info" : "ReturnStatement[87074-87112]:ReturnStatement[87113-87151]"
    } ]
  },
  "interFileMappings" : { }
}