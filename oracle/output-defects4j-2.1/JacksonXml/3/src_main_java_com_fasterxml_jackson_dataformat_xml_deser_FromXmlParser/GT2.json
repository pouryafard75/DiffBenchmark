{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FromXmlParser",
      "right" : "FromXmlParser",
      "info" : "TypeDeclaration[561-32758]:TypeDeclaration[561-32748]"
    }, {
      "left" : "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";",
      "right" : "public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";",
      "info" : "FieldDeclaration[756-921]:FieldDeclaration[756-921]"
    }, {
      "left" : "enum : Feature",
      "right" : "enum : Feature",
      "info" : "EnumDeclaration[927-1990]:EnumDeclaration[927-1990]"
    }, {
      "left" : "final boolean _defaultState;",
      "right" : "final boolean _defaultState;",
      "info" : "FieldDeclaration[1142-1170]:FieldDeclaration[1142-1170]"
    }, {
      "left" : "final int _mask;",
      "right" : "final int _mask;",
      "info" : "FieldDeclaration[1179-1195]:FieldDeclaration[1179-1195]"
    }, {
      "left" : "public static int collectDefaults()",
      "right" : "public static int collectDefaults()",
      "info" : "MethodDeclaration[1213-1610]:MethodDeclaration[1213-1610]"
    }, {
      "left" : "private Feature(boolean defaultState)",
      "right" : "private Feature(boolean defaultState)",
      "info" : "MethodDeclaration[1628-1757]:MethodDeclaration[1628-1757]"
    }, {
      "left" : "public boolean enabledByDefault()",
      "right" : "public boolean enabledByDefault()",
      "info" : "MethodDeclaration[1767-1836]:MethodDeclaration[1767-1836]"
    }, {
      "left" : "public int getMask()",
      "right" : "public int getMask()",
      "info" : "MethodDeclaration[1845-1893]:MethodDeclaration[1845-1893]"
    }, {
      "left" : "public boolean enabledIn(int flags)",
      "right" : "public boolean enabledIn(int flags)",
      "info" : "MethodDeclaration[1902-1984]:MethodDeclaration[1902-1984]"
    }, {
      "left" : "protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;",
      "right" : "protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;",
      "info" : "FieldDeclaration[1996-2554]:FieldDeclaration[1996-2554]"
    }, {
      "left" : "protected int _formatFeatures;",
      "right" : "protected int _formatFeatures;",
      "info" : "FieldDeclaration[2725-2882]:FieldDeclaration[2725-2882]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[2888-2923]:FieldDeclaration[2888-2923]"
    }, {
      "left" : "protected boolean _closed;",
      "right" : "protected boolean _closed;",
      "info" : "FieldDeclaration[3090-3311]:FieldDeclaration[3090-3311]"
    }, {
      "left" : "final protected IOContext _ioContext;",
      "right" : "final protected IOContext _ioContext;",
      "info" : "FieldDeclaration[3317-3354]:FieldDeclaration[3317-3354]"
    }, {
      "left" : "protected XmlReadContext _parsingContext;",
      "right" : "protected XmlReadContext _parsingContext;",
      "info" : "FieldDeclaration[3525-3701]:FieldDeclaration[3525-3701]"
    }, {
      "left" : "protected final XmlTokenStream _xmlTokens;",
      "right" : "protected final XmlTokenStream _xmlTokens;",
      "info" : "FieldDeclaration[3707-3749]:FieldDeclaration[3707-3749]"
    }, {
      "left" : "protected boolean _mayBeLeaf;",
      "right" : "protected boolean _mayBeLeaf;",
      "info" : "FieldDeclaration[3754-3916]:FieldDeclaration[3754-3916]"
    }, {
      "left" : "protected JsonToken _nextToken;",
      "right" : "protected JsonToken _nextToken;",
      "info" : "FieldDeclaration[3922-3953]:FieldDeclaration[3922-3953]"
    }, {
      "left" : "protected String _currText;",
      "right" : "protected String _currText;",
      "info" : "FieldDeclaration[3959-3986]:FieldDeclaration[3959-3986]"
    }, {
      "left" : "protected Set<String> _namesToWrap;",
      "right" : "protected Set<String> _namesToWrap;",
      "info" : "FieldDeclaration[3992-4027]:FieldDeclaration[3992-4027]"
    }, {
      "left" : "protected ByteArrayBuilder _byteArrayBuilder = null;",
      "right" : "protected ByteArrayBuilder _byteArrayBuilder = null;",
      "info" : "FieldDeclaration[4213-4405]:FieldDeclaration[4213-4405]"
    }, {
      "left" : "protected byte[] _binaryValue;",
      "right" : "protected byte[] _binaryValue;",
      "info" : "FieldDeclaration[4411-4651]:FieldDeclaration[4411-4651]"
    }, {
      "left" : "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n            ObjectCodec codec, XMLStreamReader xmlReader)",
      "right" : "public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n            ObjectCodec codec, XMLStreamReader xmlReader)",
      "info" : "MethodDeclaration[4819-5332]:MethodDeclaration[4819-5332]"
    }, {
      "left" : "public Version version()",
      "right" : "public Version version()",
      "info" : "MethodDeclaration[5338-5423]:MethodDeclaration[5338-5423]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[5433-5513]:MethodDeclaration[5433-5513]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[5519-5602]:MethodDeclaration[5519-5602]"
    }, {
      "left" : "public void setXMLTextElementName(String name)",
      "right" : "public void setXMLTextElementName(String name)",
      "info" : "MethodDeclaration[5608-5735]:MethodDeclaration[5608-5735]"
    }, {
      "left" : "public boolean requiresCustomCodec()",
      "right" : "public boolean requiresCustomCodec()",
      "info" : "MethodDeclaration[5745-6054]:MethodDeclaration[5745-6054]"
    }, {
      "left" : "public FromXmlParser enable(Feature f)",
      "right" : "public FromXmlParser enable(Feature f)",
      "info" : "MethodDeclaration[6243-6350]:MethodDeclaration[6243-6350]"
    }, {
      "left" : "public FromXmlParser disable(Feature f)",
      "right" : "public FromXmlParser disable(Feature f)",
      "info" : "MethodDeclaration[6356-6465]:MethodDeclaration[6356-6465]"
    }, {
      "left" : "public final boolean isEnabled(Feature f)",
      "right" : "public final boolean isEnabled(Feature f)",
      "info" : "MethodDeclaration[6471-6573]:MethodDeclaration[6471-6573]"
    }, {
      "left" : "public FromXmlParser configure(Feature f, boolean state)",
      "right" : "public FromXmlParser configure(Feature f, boolean state)",
      "info" : "MethodDeclaration[6579-6759]:MethodDeclaration[6579-6759]"
    }, {
      "left" : "public int getFormatFeatures()",
      "right" : "public int getFormatFeatures()",
      "info" : "MethodDeclaration[7162-7246]:MethodDeclaration[7162-7246]"
    }, {
      "left" : "public JsonParser overrideFormatFeatures(int values, int mask)",
      "right" : "public JsonParser overrideFormatFeatures(int values, int mask)",
      "info" : "MethodDeclaration[7252-7428]:MethodDeclaration[7252-7428]"
    }, {
      "left" : "public XMLStreamReader getStaxReader()",
      "right" : "public XMLStreamReader getStaxReader()",
      "info" : "MethodDeclaration[7634-8158]:MethodDeclaration[7634-8158]"
    }, {
      "left" : "public void addVirtualWrapping(Set<String> namesToWrap)",
      "right" : "public void addVirtualWrapping(Set<String> namesToWrap)",
      "info" : "MethodDeclaration[8328-9588]:MethodDeclaration[8328-9588]"
    }, {
      "left" : "public String getCurrentName() throws IOException",
      "right" : "public String getCurrentName() throws IOException",
      "info" : "MethodDeclaration[9765-10472]:MethodDeclaration[9765-10472]"
    }, {
      "left" : "public void overrideCurrentName(String name)",
      "right" : "public void overrideCurrentName(String name)",
      "info" : "MethodDeclaration[10478-10849]:MethodDeclaration[10478-10849]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[10859-11447]:MethodDeclaration[10859-11447]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[11453-11512]:MethodDeclaration[11453-11512]"
    }, {
      "left" : "public XmlReadContext getParsingContext()",
      "right" : "public XmlReadContext getParsingContext()",
      "info" : "MethodDeclaration[11518-11613]:MethodDeclaration[11518-11613]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[11619-11915]:MethodDeclaration[11619-11915]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[11921-12160]:MethodDeclaration[11921-12160]"
    }, {
      "left" : "public boolean isExpectedStartArrayToken()",
      "right" : "public boolean isExpectedStartArrayToken()",
      "info" : "MethodDeclaration[12166-13515]:MethodDeclaration[12166-13515]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[14176-20777]:MethodDeclaration[14176-20777]"
    }, {
      "left" : "public String nextTextValue() throws IOException",
      "right" : "public String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[20981-24658]:MethodDeclaration[20981-24648]"
    }, {
      "left" : "private void _updateState(JsonToken t)",
      "right" : "private void _updateState(JsonToken t)",
      "info" : "MethodDeclaration[24665-25316]:MethodDeclaration[24655-25306]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[25519-25874]:MethodDeclaration[25509-25864]"
    }, {
      "left" : "public final String getValueAsString() throws IOException",
      "right" : "public final String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[25898-26016]:MethodDeclaration[25888-26006]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException",
      "right" : "public String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[26022-27618]:MethodDeclaration[26012-27608]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[27628-27795]:MethodDeclaration[27618-27785]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[27801-27953]:MethodDeclaration[27791-27943]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[27959-28044]:MethodDeclaration[27949-28034]"
    }, {
      "left" : "public boolean hasTextCharacters()",
      "right" : "public boolean hasTextCharacters()",
      "info" : "MethodDeclaration[28050-28284]:MethodDeclaration[28040-28274]"
    }, {
      "left" : "public Object getEmbeddedObject() throws IOException",
      "right" : "public Object getEmbeddedObject() throws IOException",
      "info" : "MethodDeclaration[28489-28628]:MethodDeclaration[28479-28618]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[28634-29464]:MethodDeclaration[28624-29454]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[29470-29775]:MethodDeclaration[29460-29765]"
    }, {
      "left" : "public BigInteger getBigIntegerValue() throws IOException",
      "right" : "public BigInteger getBigIntegerValue() throws IOException",
      "info" : "MethodDeclaration[29954-30097]:MethodDeclaration[29944-30087]"
    }, {
      "left" : "public BigDecimal getDecimalValue() throws IOException",
      "right" : "public BigDecimal getDecimalValue() throws IOException",
      "info" : "MethodDeclaration[30103-30243]:MethodDeclaration[30093-30233]"
    }, {
      "left" : "public double getDoubleValue() throws IOException",
      "right" : "public double getDoubleValue() throws IOException",
      "info" : "MethodDeclaration[30249-30381]:MethodDeclaration[30239-30371]"
    }, {
      "left" : "public float getFloatValue() throws IOException",
      "right" : "public float getFloatValue() throws IOException",
      "info" : "MethodDeclaration[30387-30517]:MethodDeclaration[30377-30507]"
    }, {
      "left" : "public int getIntValue() throws IOException",
      "right" : "public int getIntValue() throws IOException",
      "info" : "MethodDeclaration[30523-30649]:MethodDeclaration[30513-30639]"
    }, {
      "left" : "public long getLongValue() throws IOException",
      "right" : "public long getLongValue() throws IOException",
      "info" : "MethodDeclaration[30655-30783]:MethodDeclaration[30645-30773]"
    }, {
      "left" : "public NumberType getNumberType() throws IOException",
      "right" : "public NumberType getNumberType() throws IOException",
      "info" : "MethodDeclaration[30789-30927]:MethodDeclaration[30779-30917]"
    }, {
      "left" : "public Number getNumberValue() throws IOException",
      "right" : "public Number getNumberValue() throws IOException",
      "info" : "MethodDeclaration[30933-31068]:MethodDeclaration[30923-31058]"
    }, {
      "left" : "protected void _handleEOF() throws JsonParseException",
      "right" : "protected void _handleEOF() throws JsonParseException",
      "info" : "MethodDeclaration[31273-31753]:MethodDeclaration[31263-31743]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[31931-32177]:MethodDeclaration[31921-32167]"
    }, {
      "left" : "protected ByteArrayBuilder _getByteArrayBuilder()",
      "right" : "protected ByteArrayBuilder _getByteArrayBuilder()",
      "info" : "MethodDeclaration[32183-32441]:MethodDeclaration[32173-32431]"
    }, {
      "left" : "protected boolean _isEmpty(String str)",
      "right" : "protected boolean _isEmpty(String str)",
      "info" : "MethodDeclaration[32447-32756]:MethodDeclaration[32437-32746]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1387-1610]:Block[1387-1610]"
    }, {
      "left" : "int flags = 0;",
      "right" : "int flags = 0;",
      "info" : "VariableDeclarationStatement[1401-1415]:VariableDeclarationStatement[1401-1415]"
    }, {
      "left" : "for (Feature f : values())",
      "right" : "for (Feature f : values())",
      "info" : "EnhancedForStatement[1428-1574]:EnhancedForStatement[1428-1574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1455-1574]:Block[1455-1574]"
    }, {
      "left" : "if (f.enabledByDefault())",
      "right" : "if (f.enabledByDefault())",
      "info" : "IfStatement[1473-1560]:IfStatement[1473-1560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1499-1560]:Block[1499-1560]"
    }, {
      "left" : "flags |= f.getMask();",
      "right" : "flags |= f.getMask();",
      "info" : "ExpressionStatement[1521-1542]:ExpressionStatement[1521-1542]"
    }, {
      "left" : "return flags;",
      "right" : "return flags;",
      "info" : "ReturnStatement[1587-1600]:ReturnStatement[1587-1600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1666-1757]:Block[1666-1757]"
    }, {
      "left" : "_defaultState = defaultState;",
      "right" : "_defaultState = defaultState;",
      "info" : "ExpressionStatement[1680-1709]:ExpressionStatement[1680-1709]"
    }, {
      "left" : "_mask = (1 << ordinal());",
      "right" : "_mask = (1 << ordinal());",
      "info" : "ExpressionStatement[1722-1747]:ExpressionStatement[1722-1747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1811-1836]:Block[1811-1836]"
    }, {
      "left" : "return _defaultState;",
      "right" : "return _defaultState;",
      "info" : "ReturnStatement[1813-1834]:ReturnStatement[1813-1834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1876-1893]:Block[1876-1893]"
    }, {
      "left" : "return _mask;",
      "right" : "return _mask;",
      "info" : "ReturnStatement[1878-1891]:ReturnStatement[1878-1891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1948-1984]:Block[1948-1984]"
    }, {
      "left" : "return (flags & getMask()) != 0;",
      "right" : "return (flags & getMask()) != 0;",
      "info" : "ReturnStatement[1950-1982]:ReturnStatement[1950-1982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4962-5332]:Block[4962-5332]"
    }, {
      "left" : "super(genericParserFeatures);",
      "right" : "super(genericParserFeatures);",
      "info" : "SuperConstructorInvocation[4972-5001]:SuperConstructorInvocation[4972-5001]"
    }, {
      "left" : "_formatFeatures = xmlFeatures;",
      "right" : "_formatFeatures = xmlFeatures;",
      "info" : "ExpressionStatement[5010-5040]:ExpressionStatement[5010-5040]"
    }, {
      "left" : "_ioContext = ctxt;",
      "right" : "_ioContext = ctxt;",
      "info" : "ExpressionStatement[5049-5067]:ExpressionStatement[5049-5067]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[5076-5097]:ExpressionStatement[5076-5097]"
    }, {
      "left" : "_parsingContext = XmlReadContext.createRootContext(-1, -1);",
      "right" : "_parsingContext = XmlReadContext.createRootContext(-1, -1);",
      "info" : "ExpressionStatement[5106-5165]:ExpressionStatement[5106-5165]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[5211-5247]:ExpressionStatement[5211-5247]"
    }, {
      "left" : "_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());",
      "right" : "_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());",
      "info" : "ExpressionStatement[5256-5326]:ExpressionStatement[5256-5326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5377-5423]:Block[5377-5423]"
    }, {
      "left" : "return PackageVersion.VERSION;",
      "right" : "return PackageVersion.VERSION;",
      "info" : "ReturnStatement[5387-5417]:ReturnStatement[5387-5417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5477-5513]:Block[5477-5513]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[5487-5507]:ReturnStatement[5487-5507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-5602]:Block[5569-5602]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[5579-5596]:ExpressionStatement[5579-5596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5689-5735]:Block[5689-5735]"
    }, {
      "left" : "_cfgNameForTextElement = name;",
      "right" : "_cfgNameForTextElement = name;",
      "info" : "ExpressionStatement[5699-5729]:ExpressionStatement[5699-5729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6026-6054]:Block[6026-6054]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6036-6048]:ReturnStatement[6036-6048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6282-6350]:Block[6282-6350]"
    }, {
      "left" : "_formatFeatures |= f.getMask();",
      "right" : "_formatFeatures |= f.getMask();",
      "info" : "ExpressionStatement[6292-6323]:ExpressionStatement[6292-6323]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6332-6344]:ReturnStatement[6332-6344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6396-6465]:Block[6396-6465]"
    }, {
      "left" : "_formatFeatures &= ~f.getMask();",
      "right" : "_formatFeatures &= ~f.getMask();",
      "info" : "ExpressionStatement[6406-6438]:ExpressionStatement[6406-6438]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6447-6459]:ReturnStatement[6447-6459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6513-6573]:Block[6513-6573]"
    }, {
      "left" : "return (_formatFeatures & f.getMask()) != 0;",
      "right" : "return (_formatFeatures & f.getMask()) != 0;",
      "info" : "ReturnStatement[6523-6567]:ReturnStatement[6523-6567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6636-6759]:Block[6636-6759]"
    }, {
      "left" : "if (state)",
      "right" : "if (state)",
      "info" : "IfStatement[6646-6732]:IfStatement[6646-6732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6657-6691]:Block[6657-6691]"
    }, {
      "left" : "enable(f);",
      "right" : "enable(f);",
      "info" : "ExpressionStatement[6671-6681]:ExpressionStatement[6671-6681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-6732]:Block[6697-6732]"
    }, {
      "left" : "disable(f);",
      "right" : "disable(f);",
      "info" : "ExpressionStatement[6711-6722]:ExpressionStatement[6711-6722]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6741-6753]:ReturnStatement[6741-6753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7207-7246]:Block[7207-7246]"
    }, {
      "left" : "return _formatFeatures;",
      "right" : "return _formatFeatures;",
      "info" : "ReturnStatement[7217-7240]:ReturnStatement[7217-7240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7329-7428]:Block[7329-7428]"
    }, {
      "left" : "_formatFeatures = (_formatFeatures & ~mask) | (values & mask);",
      "right" : "_formatFeatures = (_formatFeatures & ~mask) | (values & mask);",
      "info" : "ExpressionStatement[7339-7401]:ExpressionStatement[7339-7401]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7410-7422]:ReturnStatement[7410-7422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8109-8158]:Block[8109-8158]"
    }, {
      "left" : "return _xmlTokens.getXmlReader();",
      "right" : "return _xmlTokens.getXmlReader();",
      "info" : "ReturnStatement[8119-8152]:ReturnStatement[8119-8152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9185-9588]:Block[9185-9588]"
    }, {
      "left" : "String name = _xmlTokens.getLocalName();",
      "right" : "String name = _xmlTokens.getLocalName();",
      "info" : "VariableDeclarationStatement[9340-9380]:VariableDeclarationStatement[9340-9380]"
    }, {
      "left" : "if (name != null && namesToWrap.contains(name))",
      "right" : "if (name != null && namesToWrap.contains(name))",
      "info" : "IfStatement[9389-9493]:IfStatement[9389-9493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9437-9493]:Block[9437-9493]"
    }, {
      "left" : "_xmlTokens.repeatStartElement();",
      "right" : "_xmlTokens.repeatStartElement();",
      "info" : "ExpressionStatement[9451-9483]:ExpressionStatement[9451-9483]"
    }, {
      "left" : "_namesToWrap = namesToWrap;",
      "right" : "_namesToWrap = namesToWrap;",
      "info" : "ExpressionStatement[9502-9529]:ExpressionStatement[9502-9529]"
    }, {
      "left" : "_parsingContext.setNamesToWrap(namesToWrap);",
      "right" : "_parsingContext.setNamesToWrap(namesToWrap);",
      "info" : "ExpressionStatement[9538-9582]:ExpressionStatement[9538-9582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9940-10472]:Block[9940-10472]"
    }, {
      "left" : "String name;",
      "right" : "String name;",
      "info" : "VariableDeclarationStatement[10007-10019]:VariableDeclarationStatement[10007-10019]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[10028-10299]:IfStatement[10028-10299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10109-10229]:Block[10109-10229]"
    }, {
      "left" : "XmlReadContext parent = _parsingContext.getParent();",
      "right" : "XmlReadContext parent = _parsingContext.getParent();",
      "info" : "VariableDeclarationStatement[10123-10175]:VariableDeclarationStatement[10123-10175]"
    }, {
      "left" : "name = parent.getCurrentName();",
      "right" : "name = parent.getCurrentName();",
      "info" : "ExpressionStatement[10188-10219]:ExpressionStatement[10188-10219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10235-10299]:Block[10235-10299]"
    }, {
      "left" : "name = _parsingContext.getCurrentName();",
      "right" : "name = _parsingContext.getCurrentName();",
      "info" : "ExpressionStatement[10249-10289]:ExpressionStatement[10249-10289]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[10332-10445]:IfStatement[10332-10445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10350-10445]:Block[10350-10445]"
    }, {
      "left" : "throw new IllegalStateException(\"Missing name, in state: \"+_currToken);",
      "right" : "throw new IllegalStateException(\"Missing name, in state: \"+_currToken);",
      "info" : "ThrowStatement[10364-10435]:ThrowStatement[10364-10435]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[10454-10466]:ReturnStatement[10454-10466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10541-10849]:Block[10541-10849]"
    }, {
      "left" : "XmlReadContext ctxt = _parsingContext;",
      "right" : "XmlReadContext ctxt = _parsingContext;",
      "info" : "VariableDeclarationStatement[10632-10670]:VariableDeclarationStatement[10632-10670]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[10679-10808]:IfStatement[10679-10808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10760-10808]:Block[10760-10808]"
    }, {
      "left" : "ctxt = ctxt.getParent();",
      "right" : "ctxt = ctxt.getParent();",
      "info" : "ExpressionStatement[10774-10798]:ExpressionStatement[10774-10798]"
    }, {
      "left" : "ctxt.setCurrentName(name);",
      "right" : "ctxt.setCurrentName(name);",
      "info" : "ExpressionStatement[10817-10843]:ExpressionStatement[10817-10843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10916-11447]:Block[10916-11447]"
    }, {
      "left" : "if (!_closed)",
      "right" : "if (!_closed)",
      "info" : "IfStatement[10926-11441]:IfStatement[10926-11441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10940-11441]:Block[10940-11441]"
    }, {
      "left" : "_closed = true;",
      "right" : "_closed = true;",
      "info" : "ExpressionStatement[10954-10969]:ExpressionStatement[10954-10969]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10982-11431]:TryStatement[10982-11431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10986-11239]:Block[10986-11239]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[11004-11225]:IfStatement[11004-11225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11091-11160]:Block[11091-11160]"
    }, {
      "left" : "_xmlTokens.closeCompletely();",
      "right" : "_xmlTokens.closeCompletely();",
      "info" : "ExpressionStatement[11113-11142]:ExpressionStatement[11113-11142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11166-11225]:Block[11166-11225]"
    }, {
      "left" : "_xmlTokens.close();",
      "right" : "_xmlTokens.close();",
      "info" : "ExpressionStatement[11188-11207]:ExpressionStatement[11188-11207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11248-11431]:Block[11248-11431]"
    }, {
      "left" : "_releaseBuffers();",
      "right" : "_releaseBuffers();",
      "info" : "ExpressionStatement[11399-11417]:ExpressionStatement[11399-11417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11493-11512]:Block[11493-11512]"
    }, {
      "left" : "return _closed;",
      "right" : "return _closed;",
      "info" : "ReturnStatement[11495-11510]:ReturnStatement[11495-11510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11574-11613]:Block[11574-11613]"
    }, {
      "left" : "return _parsingContext;",
      "right" : "return _parsingContext;",
      "info" : "ReturnStatement[11584-11607]:ReturnStatement[11584-11607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11862-11915]:Block[11862-11915]"
    }, {
      "left" : "return _xmlTokens.getTokenLocation();",
      "right" : "return _xmlTokens.getTokenLocation();",
      "info" : "ReturnStatement[11872-11909]:ReturnStatement[11872-11909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12105-12160]:Block[12105-12160]"
    }, {
      "left" : "return _xmlTokens.getCurrentLocation();",
      "right" : "return _xmlTokens.getCurrentLocation();",
      "info" : "ReturnStatement[12115-12154]:ReturnStatement[12115-12154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12558-13515]:Block[12558-13515]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[12568-12593]:VariableDeclarationStatement[12568-12593]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[12602-13410]:IfStatement[12602-13410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12635-13410]:Block[12635-13410]"
    }, {
      "left" : "_currToken = JsonToken.START_ARRAY;",
      "right" : "_currToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[12658-12693]:ExpressionStatement[12658-12693]"
    }, {
      "left" : "_parsingContext.convertToArray();",
      "right" : "_parsingContext.convertToArray();",
      "info" : "ExpressionStatement[12773-12806]:ExpressionStatement[12773-12806]"
    }, {
      "left" : "if (_nextToken == JsonToken.END_OBJECT)",
      "right" : "if (_nextToken == JsonToken.END_OBJECT)",
      "info" : "IfStatement[13096-13257]:IfStatement[13096-13257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13136-13201]:Block[13136-13201]"
    }, {
      "left" : "_nextToken = JsonToken.END_ARRAY;",
      "right" : "_nextToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[13154-13187]:ExpressionStatement[13154-13187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13207-13257]:Block[13207-13257]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[13225-13243]:ExpressionStatement[13225-13243]"
    }, {
      "left" : "_xmlTokens.skipAttributes();",
      "right" : "_xmlTokens.skipAttributes();",
      "info" : "ExpressionStatement[13347-13375]:ExpressionStatement[13347-13375]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13388-13400]:ReturnStatement[13388-13400]"
    }, {
      "left" : "return (t == JsonToken.START_ARRAY);",
      "right" : "return (t == JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[13473-13509]:ReturnStatement[13473-13509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14242-20777]:Block[14242-20777]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[14252-14272]:ExpressionStatement[14252-14272]"
    }, {
      "left" : "if (_nextToken != null)",
      "right" : "if (_nextToken != null)",
      "info" : "IfStatement[14281-15173]:IfStatement[14281-15173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14305-15173]:Block[14305-15173]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[14319-14344]:VariableDeclarationStatement[14319-14344]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[14357-14372]:ExpressionStatement[14357-14372]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[14385-14403]:ExpressionStatement[14385-14403]"
    }, {
      "left" : "switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default: // VALUE_STRING, VALUE_NULL\n                // should be fine as is?\n            }",
      "right" : "switch (t) {\n            case START_OBJECT:\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default: // VALUE_STRING, VALUE_NULL\n                // should be fine as is?\n            }",
      "info" : "SwitchStatement[14416-15141]:SwitchStatement[14416-15141]"
    }, {
      "left" : "case START_OBJECT:",
      "right" : "case START_OBJECT:",
      "info" : "SwitchCase[14441-14459]:SwitchCase[14441-14459]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[14476-14543]:ExpressionStatement[14476-14543]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14560-14566]:BreakStatement[14560-14566]"
    }, {
      "left" : "case START_ARRAY:",
      "right" : "case START_ARRAY:",
      "info" : "SwitchCase[14579-14596]:SwitchCase[14579-14596]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "info" : "ExpressionStatement[14613-14679]:ExpressionStatement[14613-14679]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14696-14702]:BreakStatement[14696-14702]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[14715-14731]:SwitchCase[14715-14731]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[14744-14759]:SwitchCase[14744-14759]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[14776-14822]:ExpressionStatement[14776-14822]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[14839-14887]:ExpressionStatement[14839-14887]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14904-14910]:BreakStatement[14904-14910]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[14923-14939]:SwitchCase[14923-14939]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[14956-15014]:ExpressionStatement[14956-15014]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15031-15037]:BreakStatement[15031-15037]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15050-15058]:SwitchCase[15050-15058]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[15154-15163]:ReturnStatement[15154-15163]"
    }, {
      "left" : "int token = _xmlTokens.next();",
      "right" : "int token = _xmlTokens.next();",
      "info" : "VariableDeclarationStatement[15182-15212]:VariableDeclarationStatement[15182-15212]"
    }, {
      "left" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "right" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "info" : "WhileStatement[15353-16749]:WhileStatement[15353-16749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15403-16749]:Block[15403-16749]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[15478-15773]:IfStatement[15478-15773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15494-15773]:Block[15494-15773]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[15579-15613]:ExpressionStatement[15579-15613]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[15630-15697]:ExpressionStatement[15630-15697]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[15714-15759]:ReturnStatement[15714-15759]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[15786-16097]:IfStatement[15786-16097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15817-16097]:Block[15817-16097]"
    }, {
      "left" : "token = _xmlTokens.next();",
      "right" : "token = _xmlTokens.next();",
      "info" : "ExpressionStatement[15996-16022]:ExpressionStatement[15996-16022]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[16039-16057]:ExpressionStatement[16039-16057]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16074-16083]:ContinueStatement[16074-16083]"
    }, {
      "left" : "String name = _xmlTokens.getLocalName();",
      "right" : "String name = _xmlTokens.getLocalName();",
      "info" : "VariableDeclarationStatement[16110-16150]:VariableDeclarationStatement[16110-16150]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[16163-16200]:ExpressionStatement[16163-16200]"
    }, {
      "left" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "right" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "info" : "IfStatement[16396-16517]:IfStatement[16396-16517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16453-16517]:Block[16453-16517]"
    }, {
      "left" : "_xmlTokens.repeatStartElement();",
      "right" : "_xmlTokens.repeatStartElement();",
      "info" : "ExpressionStatement[16471-16503]:ExpressionStatement[16471-16503]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[16531-16549]:ExpressionStatement[16531-16549]"
    }, {
      "left" : "return (_currToken = JsonToken.FIELD_NAME);",
      "right" : "return (_currToken = JsonToken.FIELD_NAME);",
      "info" : "ReturnStatement[16696-16739]:ReturnStatement[16696-16739]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[16812-20771]:WhileStatement[16812-20771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16825-20771]:Block[16825-20771]"
    }, {
      "left" : "switch (token) {\n            case XmlTokenStream.XML_END_ELEMENT:\n                // Simple, except that if this is a leaf, need to suppress end:\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    if (_parsingContext.inArray()) {\n                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                        //    expose as empty Object, not null\n                        _nextToken = JsonToken.END_OBJECT;\n                        _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                        return (_currToken = JsonToken.START_OBJECT);\n                    }\n                    return (_currToken = JsonToken.VALUE_NULL);\n                }\n                _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                return _currToken;\n                \n            case XmlTokenStream.XML_ATTRIBUTE_NAME:\n                // If there was a chance of leaf node, no more...\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    _nextToken = JsonToken.FIELD_NAME;\n                    _currText = _xmlTokens.getText();\n                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                    return (_currToken = JsonToken.START_OBJECT);\n                }\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                return (_currToken = JsonToken.FIELD_NAME);\n            case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n                _currText = _xmlTokens.getText();\n                return (_currToken = JsonToken.VALUE_STRING);\n            case XmlTokenStream.XML_TEXT:\n                _currText = _xmlTokens.getText();\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    // One more refinement (pronunced like \"hack\") is that if\n                    // we had an empty String (or all white space), and we are\n                    // deserializing an array, we better hide the empty text.\n                    // Also: must skip following END_ELEMENT\n                    _xmlTokens.skipEndElement();\n                    if (_parsingContext.inArray()) {\n                        if (_isEmpty(_currText)) {\n                            // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                            //    expose as empty Object, not null (or, worse, as used to\n                            //    be done, by swallowing the token)\n                            _nextToken = JsonToken.END_OBJECT;\n                            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                            return (_currToken = JsonToken.START_OBJECT);\n                        }\n                    }\n                    return (_currToken = JsonToken.VALUE_STRING);\n                } else {\n                    // [dataformat-xml#177]: empty text may also need to be skipped\n                    // but... [dataformat-xml#191]: looks like we can't short-cut, must\n                    // loop over again\n                    if (_parsingContext.inObject()) {\n                        if ((_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                            token = _xmlTokens.next();\n                            continue;\n                        }\n                    }\n                }\n                // If not a leaf (or otherwise ignorable), need to transform into property...\n                _parsingContext.setCurrentName(_cfgNameForTextElement);\n                _nextToken = JsonToken.VALUE_STRING;\n                return (_currToken = JsonToken.FIELD_NAME);\n            case XmlTokenStream.XML_END:\n                return (_currToken = null);\n            }",
      "right" : "switch (token) {\n            case XmlTokenStream.XML_END_ELEMENT:\n                // Simple, except that if this is a leaf, need to suppress end:\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    if (_parsingContext.inArray()) {\n                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                        //    expose as empty Object, not null\n                        _nextToken = JsonToken.END_OBJECT;\n                        _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                        return (_currToken = JsonToken.START_OBJECT);\n                    }\n                    return (_currToken = JsonToken.VALUE_NULL);\n                }\n                _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n                _parsingContext = _parsingContext.getParent();\n                _namesToWrap = _parsingContext.getNamesToWrap();\n                return _currToken;\n                \n            case XmlTokenStream.XML_ATTRIBUTE_NAME:\n                // If there was a chance of leaf node, no more...\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    _nextToken = JsonToken.FIELD_NAME;\n                    _currText = _xmlTokens.getText();\n                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                    return (_currToken = JsonToken.START_OBJECT);\n                }\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                return (_currToken = JsonToken.FIELD_NAME);\n            case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n                _currText = _xmlTokens.getText();\n                return (_currToken = JsonToken.VALUE_STRING);\n            case XmlTokenStream.XML_TEXT:\n                _currText = _xmlTokens.getText();\n                if (_mayBeLeaf) {\n                    _mayBeLeaf = false;\n                    // One more refinement (pronunced like \"hack\") is that if\n                    // we had an empty String (or all white space), and we are\n                    // deserializing an array, we better hide the empty text.\n                    // Also: must skip following END_ELEMENT\n                    _xmlTokens.skipEndElement();\n                    if (_parsingContext.inArray()) {\n                        if (_isEmpty(_currText)) {\n                            // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to\n                            //    expose as empty Object, not null (or, worse, as used to\n                            //    be done, by swallowing the token)\n                            _nextToken = JsonToken.END_OBJECT;\n                            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                            return (_currToken = JsonToken.START_OBJECT);\n                        }\n                    }\n                    return (_currToken = JsonToken.VALUE_STRING);\n                } else {\n                    // [dataformat-xml#177]: empty text may also need to be skipped\n                    // but... [dataformat-xml#191]: looks like we can't short-cut, must\n                    // loop over again\n                    if (_parsingContext.inObject()) {\n                        if ((_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {\n                            token = _xmlTokens.next();\n                            continue;\n                        }\n                    }\n                }\n                // If not a leaf (or otherwise ignorable), need to transform into property...\n                _parsingContext.setCurrentName(_cfgNameForTextElement);\n                _nextToken = JsonToken.VALUE_STRING;\n                return (_currToken = JsonToken.FIELD_NAME);\n            case XmlTokenStream.XML_END:\n                return (_currToken = null);\n            }",
      "info" : "SwitchStatement[16839-20761]:SwitchStatement[16839-20761]"
    }, {
      "left" : "case XmlTokenStream.XML_END_ELEMENT:",
      "right" : "case XmlTokenStream.XML_END_ELEMENT:",
      "info" : "SwitchCase[16868-16904]:SwitchCase[16868-16904]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[17001-17582]:IfStatement[17001-17582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17017-17582]:Block[17017-17582]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[17039-17058]:ExpressionStatement[17039-17058]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[17079-17500]:IfStatement[17079-17500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17110-17500]:Block[17110-17500]"
    }, {
      "left" : "_nextToken = JsonToken.END_OBJECT;",
      "right" : "_nextToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[17282-17316]:ExpressionStatement[17282-17316]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[17341-17408]:ExpressionStatement[17341-17408]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[17433-17478]:ReturnStatement[17433-17478]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[17521-17564]:ReturnStatement[17521-17564]"
    }, {
      "left" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "right" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[17599-17683]:ExpressionStatement[17599-17683]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[17700-17746]:ExpressionStatement[17700-17746]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[17763-17811]:ExpressionStatement[17763-17811]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[17828-17846]:ReturnStatement[17828-17846]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "info" : "SwitchCase[17876-17915]:SwitchCase[17876-17915]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[17998-18336]:IfStatement[17998-18336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18014-18336]:Block[18014-18336]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[18036-18055]:ExpressionStatement[18036-18055]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[18076-18110]:ExpressionStatement[18076-18110]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[18131-18164]:ExpressionStatement[18131-18164]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[18185-18252]:ExpressionStatement[18185-18252]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[18273-18318]:ReturnStatement[18273-18318]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[18353-18411]:ExpressionStatement[18353-18411]"
    }, {
      "left" : "return (_currToken = JsonToken.FIELD_NAME);",
      "right" : "return (_currToken = JsonToken.FIELD_NAME);",
      "info" : "ReturnStatement[18428-18471]:ReturnStatement[18428-18471]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "info" : "SwitchCase[18484-18524]:SwitchCase[18484-18524]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[18541-18574]:ExpressionStatement[18541-18574]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[18591-18636]:ReturnStatement[18591-18636]"
    }, {
      "left" : "case XmlTokenStream.XML_TEXT:",
      "right" : "case XmlTokenStream.XML_TEXT:",
      "info" : "SwitchCase[18649-18678]:SwitchCase[18649-18678]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[18695-18728]:ExpressionStatement[18695-18728]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[18745-20383]:IfStatement[18745-20383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18761-19861]:Block[18761-19861]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[18783-18802]:ExpressionStatement[18783-18802]"
    }, {
      "left" : "_xmlTokens.skipEndElement();",
      "right" : "_xmlTokens.skipEndElement();",
      "info" : "ExpressionStatement[19119-19147]:ExpressionStatement[19119-19147]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[19168-19777]:IfStatement[19168-19777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19199-19777]:Block[19199-19777]"
    }, {
      "left" : "if (_isEmpty(_currText))",
      "right" : "if (_isEmpty(_currText))",
      "info" : "IfStatement[19225-19755]:IfStatement[19225-19755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19250-19755]:Block[19250-19755]"
    }, {
      "left" : "_nextToken = JsonToken.END_OBJECT;",
      "right" : "_nextToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[19525-19559]:ExpressionStatement[19525-19559]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[19588-19655]:ExpressionStatement[19588-19655]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[19684-19729]:ReturnStatement[19684-19729]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[19798-19843]:ReturnStatement[19798-19843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19867-20383]:Block[19867-20383]"
    }, {
      "left" : "if (_parsingContext.inObject())",
      "right" : "if (_parsingContext.inObject())",
      "info" : "IfStatement[20100-20365]:IfStatement[20100-20365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20132-20365]:Block[20132-20365]"
    }, {
      "left" : "if ((_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText))",
      "right" : "if ((_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText))",
      "info" : "IfStatement[20158-20343]:IfStatement[20158-20343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20223-20343]:Block[20223-20343]"
    }, {
      "left" : "token = _xmlTokens.next();",
      "right" : "token = _xmlTokens.next();",
      "info" : "ExpressionStatement[20253-20279]:ExpressionStatement[20253-20279]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20308-20317]:ContinueStatement[20308-20317]"
    }, {
      "left" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "right" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "info" : "ExpressionStatement[20494-20549]:ExpressionStatement[20494-20549]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[20566-20602]:ExpressionStatement[20566-20602]"
    }, {
      "left" : "return (_currToken = JsonToken.FIELD_NAME);",
      "right" : "return (_currToken = JsonToken.FIELD_NAME);",
      "info" : "ReturnStatement[20619-20662]:ReturnStatement[20619-20662]"
    }, {
      "left" : "case XmlTokenStream.XML_END:",
      "right" : "case XmlTokenStream.XML_END:",
      "info" : "SwitchCase[20675-20703]:SwitchCase[20675-20703]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[20720-20747]:ReturnStatement[20720-20747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21160-24658]:Block[21160-24648]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[21170-21190]:ExpressionStatement[21170-21190]"
    }, {
      "left" : "if (_nextToken != null)",
      "right" : "if (_nextToken != null)",
      "info" : "IfStatement[21199-21529]:IfStatement[21199-21529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21223-21529]:Block[21223-21529]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[21237-21262]:VariableDeclarationStatement[21237-21262]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[21275-21290]:ExpressionStatement[21275-21290]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[21303-21321]:ExpressionStatement[21303-21321]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[21383-21465]:IfStatement[21383-21465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21416-21465]:Block[21416-21465]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[21434-21451]:ReturnStatement[21434-21451]"
    }, {
      "left" : "_updateState(t);",
      "right" : "_updateState(t);",
      "info" : "ExpressionStatement[21478-21494]:ExpressionStatement[21478-21494]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21507-21519]:ReturnStatement[21507-21519]"
    }, {
      "left" : "int token = _xmlTokens.next();",
      "right" : "int token = _xmlTokens.next();",
      "info" : "VariableDeclarationStatement[21539-21569]:VariableDeclarationStatement[21539-21569]"
    }, {
      "left" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "right" : "while (token == XmlTokenStream.XML_START_ELEMENT)",
      "info" : "WhileStatement[21623-22448]:WhileStatement[21623-22448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21673-22448]:Block[21673-22448]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[21687-21935]:IfStatement[21687-21935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21703-21935]:Block[21703-21935]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[21721-21755]:ExpressionStatement[21721-21755]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[21772-21839]:ExpressionStatement[21772-21839]"
    }, {
      "left" : "_currToken = JsonToken.START_OBJECT;",
      "right" : "_currToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[21856-21892]:ExpressionStatement[21856-21892]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21909-21921]:ReturnStatement[21909-21921]"
    }, {
      "left" : "if (_parsingContext.inArray())",
      "right" : "if (_parsingContext.inArray())",
      "info" : "IfStatement[21948-22098]:IfStatement[21948-22098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21979-22098]:Block[21979-22098]"
    }, {
      "left" : "token = _xmlTokens.next();",
      "right" : "token = _xmlTokens.next();",
      "info" : "ExpressionStatement[21997-22023]:ExpressionStatement[21997-22023]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[22040-22058]:ExpressionStatement[22040-22058]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22075-22084]:ContinueStatement[22075-22084]"
    }, {
      "left" : "String name = _xmlTokens.getLocalName();",
      "right" : "String name = _xmlTokens.getLocalName();",
      "info" : "VariableDeclarationStatement[22111-22151]:VariableDeclarationStatement[22111-22151]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[22164-22201]:ExpressionStatement[22164-22201]"
    }, {
      "left" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "right" : "if (_namesToWrap != null && _namesToWrap.contains(name))",
      "info" : "IfStatement[22214-22335]:IfStatement[22214-22335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22271-22335]:Block[22271-22335]"
    }, {
      "left" : "_xmlTokens.repeatStartElement();",
      "right" : "_xmlTokens.repeatStartElement();",
      "info" : "ExpressionStatement[22289-22321]:ExpressionStatement[22289-22321]"
    }, {
      "left" : "_mayBeLeaf = true;",
      "right" : "_mayBeLeaf = true;",
      "info" : "ExpressionStatement[22348-22366]:ExpressionStatement[22348-22366]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[22379-22413]:ExpressionStatement[22379-22413]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22426-22438]:ReturnStatement[22426-22438]"
    }, {
      "left" : "switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                // NOTE: this is different from nextToken() -- produce \"\", NOT null\n                _mayBeLeaf = false;\n                _currToken = JsonToken.VALUE_STRING;\n                return (_currText = \"\");\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n            } else {\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                _currToken = JsonToken.FIELD_NAME;\n            }\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            _currToken = JsonToken.VALUE_STRING;\n            break;\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // NOTE: this is different from nextToken() -- NO work-around\n                // for otherwise empty List/array\n                _currToken = JsonToken.VALUE_STRING;\n                return _currText;\n            }\n            // If not a leaf, need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            _currToken = JsonToken.FIELD_NAME;\n            break;\n        case XmlTokenStream.XML_END:\n            _currToken = null;\n        }",
      "right" : "switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                // NOTE: this is different from nextToken() -- produce \"\", NOT null\n                _mayBeLeaf = false;\n                _currToken = JsonToken.VALUE_STRING;\n                return (_currText = \"\");\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n            } else {\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                _currToken = JsonToken.FIELD_NAME;\n            }\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currToken = JsonToken.VALUE_STRING;\n            return (_currText = _xmlTokens.getText());\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // NOTE: this is different from nextToken() -- NO work-around\n                // for otherwise empty List/array\n                _currToken = JsonToken.VALUE_STRING;\n                return _currText;\n            }\n            // If not a leaf, need to transform into property...\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            _currToken = JsonToken.FIELD_NAME;\n            break;\n        case XmlTokenStream.XML_END:\n            _currToken = null;\n        }",
      "info" : "SwitchStatement[22511-24631]:SwitchStatement[22511-24621]"
    }, {
      "left" : "case XmlTokenStream.XML_END_ELEMENT:",
      "right" : "case XmlTokenStream.XML_END_ELEMENT:",
      "info" : "SwitchCase[22536-22572]:SwitchCase[22536-22572]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[22585-22830]:IfStatement[22585-22830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22601-22830]:Block[22601-22830]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[22703-22722]:ExpressionStatement[22703-22722]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[22739-22775]:ExpressionStatement[22739-22775]"
    }, {
      "left" : "return (_currText = \"\");",
      "right" : "return (_currText = \"\");",
      "info" : "ReturnStatement[22792-22816]:ReturnStatement[22792-22816]"
    }, {
      "left" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "right" : "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[22843-22927]:ExpressionStatement[22843-22927]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[22940-22986]:ExpressionStatement[22940-22986]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[22999-23047]:ExpressionStatement[22999-23047]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23060-23066]:BreakStatement[23060-23066]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_NAME:",
      "info" : "SwitchCase[23075-23114]:SwitchCase[23075-23114]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[23189-23641]:IfStatement[23189-23641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23205-23494]:Block[23205-23494]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[23223-23242]:ExpressionStatement[23223-23242]"
    }, {
      "left" : "_nextToken = JsonToken.FIELD_NAME;",
      "right" : "_nextToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[23259-23293]:ExpressionStatement[23259-23293]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[23310-23343]:ExpressionStatement[23310-23343]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[23360-23427]:ExpressionStatement[23360-23427]"
    }, {
      "left" : "_currToken = JsonToken.START_OBJECT;",
      "right" : "_currToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[23444-23480]:ExpressionStatement[23444-23480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23500-23641]:Block[23500-23641]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[23518-23576]:ExpressionStatement[23518-23576]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[23593-23627]:ExpressionStatement[23593-23627]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23654-23660]:BreakStatement[23654-23660]"
    }, {
      "left" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "right" : "case XmlTokenStream.XML_ATTRIBUTE_VALUE:",
      "info" : "SwitchCase[23669-23709]:SwitchCase[23669-23709]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[23768-23804]:ExpressionStatement[23722-23758]"
    }, {
      "left" : "case XmlTokenStream.XML_TEXT:",
      "right" : "case XmlTokenStream.XML_TEXT:",
      "info" : "SwitchCase[23832-23861]:SwitchCase[23822-23851]"
    }, {
      "left" : "_currText = _xmlTokens.getText();",
      "right" : "_currText = _xmlTokens.getText();",
      "info" : "ExpressionStatement[23874-23907]:ExpressionStatement[23864-23897]"
    }, {
      "left" : "if (_mayBeLeaf)",
      "right" : "if (_mayBeLeaf)",
      "info" : "IfStatement[23920-24305]:IfStatement[23910-24295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23936-24305]:Block[23926-24295]"
    }, {
      "left" : "_mayBeLeaf = false;",
      "right" : "_mayBeLeaf = false;",
      "info" : "ExpressionStatement[23954-23973]:ExpressionStatement[23944-23963]"
    }, {
      "left" : "_xmlTokens.skipEndElement();",
      "right" : "_xmlTokens.skipEndElement();",
      "info" : "ExpressionStatement[24047-24075]:ExpressionStatement[24037-24065]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[24221-24257]:ExpressionStatement[24211-24247]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[24274-24291]:ReturnStatement[24264-24281]"
    }, {
      "left" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "right" : "_parsingContext.setCurrentName(_cfgNameForTextElement);",
      "info" : "ExpressionStatement[24383-24438]:ExpressionStatement[24373-24428]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[24451-24487]:ExpressionStatement[24441-24477]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[24500-24534]:ExpressionStatement[24490-24524]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24547-24553]:BreakStatement[24537-24543]"
    }, {
      "left" : "case XmlTokenStream.XML_END:",
      "right" : "case XmlTokenStream.XML_END:",
      "info" : "SwitchCase[24562-24590]:SwitchCase[24552-24580]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[24603-24621]:ExpressionStatement[24593-24611]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24640-24652]:ReturnStatement[24630-24642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24708-25316]:Block[24698-25306]"
    }, {
      "left" : "switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default:\n        }",
      "right" : "switch (t) {\n        case START_OBJECT:\n            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            break;\n        case START_ARRAY:\n            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            break;\n        case END_OBJECT:\n        case END_ARRAY:\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case FIELD_NAME:\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            break;\n        default:\n        }",
      "info" : "SwitchStatement[24718-25310]:SwitchStatement[24708-25300]"
    }, {
      "left" : "case START_OBJECT:",
      "right" : "case START_OBJECT:",
      "info" : "SwitchCase[24739-24757]:SwitchCase[24729-24747]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(-1, -1);",
      "info" : "ExpressionStatement[24770-24837]:ExpressionStatement[24760-24827]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24850-24856]:BreakStatement[24840-24846]"
    }, {
      "left" : "case START_ARRAY:",
      "right" : "case START_ARRAY:",
      "info" : "SwitchCase[24865-24882]:SwitchCase[24855-24872]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(-1, -1);",
      "info" : "ExpressionStatement[24895-24961]:ExpressionStatement[24885-24951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24974-24980]:BreakStatement[24964-24970]"
    }, {
      "left" : "case END_OBJECT:",
      "right" : "case END_OBJECT:",
      "info" : "SwitchCase[24989-25005]:SwitchCase[24979-24995]"
    }, {
      "left" : "case END_ARRAY:",
      "right" : "case END_ARRAY:",
      "info" : "SwitchCase[25014-25029]:SwitchCase[25004-25019]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[25042-25088]:ExpressionStatement[25032-25078]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[25101-25149]:ExpressionStatement[25091-25139]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25162-25168]:BreakStatement[25152-25158]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[25177-25193]:SwitchCase[25167-25183]"
    }, {
      "left" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "right" : "_parsingContext.setCurrentName(_xmlTokens.getLocalName());",
      "info" : "ExpressionStatement[25206-25264]:ExpressionStatement[25196-25254]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25277-25283]:BreakStatement[25267-25273]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25292-25300]:SwitchCase[25282-25290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25580-25874]:Block[25570-25864]"
    }, {
      "left" : "if (_currToken == null)",
      "right" : "if (_currToken == null)",
      "info" : "IfStatement[25590-25650]:IfStatement[25580-25640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25614-25650]:Block[25604-25640]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25628-25640]:ReturnStatement[25618-25630]"
    }, {
      "left" : "switch (_currToken) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        default:\n            return _currToken.asString();\n        }",
      "right" : "switch (_currToken) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        default:\n            return _currToken.asString();\n        }",
      "info" : "SwitchStatement[25659-25868]:SwitchStatement[25649-25858]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[25689-25705]:SwitchCase[25679-25695]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[25718-25742]:ReturnStatement[25708-25732]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[25751-25769]:SwitchCase[25741-25759]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[25782-25799]:ReturnStatement[25772-25789]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25808-25816]:SwitchCase[25798-25806]"
    }, {
      "left" : "return _currToken.asString();",
      "right" : "return _currToken.asString();",
      "info" : "ReturnStatement[25829-25858]:ReturnStatement[25819-25848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25970-26016]:Block[25960-26006]"
    }, {
      "left" : "return getValueAsString(null);",
      "right" : "return getValueAsString(null);",
      "info" : "ReturnStatement[25980-26010]:ReturnStatement[25970-26000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26107-27618]:Block[26097-27608]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[26117-26142]:VariableDeclarationStatement[26107-26132]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[26151-26202]:IfStatement[26141-26192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26166-26202]:Block[26156-26192]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26180-26192]:ReturnStatement[26170-26182]"
    }, {
      "left" : "switch (t) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        case START_OBJECT:\n            // the interesting case; may be able to convert certain kinds of\n            // elements (specifically, ones with attributes, CDATA only content)\n            // into VALUE_STRING\n            {\n                String str = _xmlTokens.convertToString();\n                if (str != null) {\n                    // need to convert token, as well as \"undo\" START_OBJECT\n                    // note: Should NOT update context, because we will still be getting\n                    // matching END_OBJECT, which will undo contexts properly\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    _currToken = JsonToken.VALUE_STRING;\n                    _nextToken = null;\n                    /* One more thing: must explicitly skip the END_OBJECT that\n                     * would follow.\n                     */\n                    _xmlTokens.skipEndElement();\n                    return (_currText = str);\n                }\n                \n            }\n            return null;\n        default:\n            if (_currToken.isScalarValue()) {\n                return _currToken.asString();\n            }\n        }",
      "right" : "switch (t) {\n        case FIELD_NAME:\n            return getCurrentName();\n        case VALUE_STRING:\n            return _currText;\n        case START_OBJECT:\n            // the interesting case; may be able to convert certain kinds of\n            // elements (specifically, ones with attributes, CDATA only content)\n            // into VALUE_STRING\n            {\n                String str = _xmlTokens.convertToString();\n                if (str != null) {\n                    // need to convert token, as well as \"undo\" START_OBJECT\n                    // note: Should NOT update context, because we will still be getting\n                    // matching END_OBJECT, which will undo contexts properly\n                    _parsingContext = _parsingContext.getParent();\n                    _namesToWrap = _parsingContext.getNamesToWrap();\n                    _currToken = JsonToken.VALUE_STRING;\n                    _nextToken = null;\n                    /* One more thing: must explicitly skip the END_OBJECT that\n                     * would follow.\n                     */\n                    _xmlTokens.skipEndElement();\n                    return (_currText = str);\n                }\n                \n            }\n            return null;\n        default:\n            if (_currToken.isScalarValue()) {\n                return _currToken.asString();\n            }\n        }",
      "info" : "SwitchStatement[26211-27587]:SwitchStatement[26201-27577]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[26232-26248]:SwitchCase[26222-26238]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[26261-26285]:ReturnStatement[26251-26275]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[26294-26312]:SwitchCase[26284-26302]"
    }, {
      "left" : "return _currText;",
      "right" : "return _currText;",
      "info" : "ReturnStatement[26325-26342]:ReturnStatement[26315-26332]"
    }, {
      "left" : "case START_OBJECT:",
      "right" : "case START_OBJECT:",
      "info" : "SwitchCase[26351-26369]:SwitchCase[26341-26359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26573-27429]:Block[26563-27419]"
    }, {
      "left" : "String str = _xmlTokens.convertToString();",
      "right" : "String str = _xmlTokens.convertToString();",
      "info" : "VariableDeclarationStatement[26591-26633]:VariableDeclarationStatement[26581-26623]"
    }, {
      "left" : "if (str != null)",
      "right" : "if (str != null)",
      "info" : "IfStatement[26650-27398]:IfStatement[26640-27388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26667-27398]:Block[26657-27388]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[26933-26979]:ExpressionStatement[26923-26969]"
    }, {
      "left" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "right" : "_namesToWrap = _parsingContext.getNamesToWrap();",
      "info" : "ExpressionStatement[27000-27048]:ExpressionStatement[26990-27038]"
    }, {
      "left" : "_currToken = JsonToken.VALUE_STRING;",
      "right" : "_currToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[27069-27105]:ExpressionStatement[27059-27095]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[27126-27144]:ExpressionStatement[27116-27134]"
    }, {
      "left" : "_xmlTokens.skipEndElement();",
      "right" : "_xmlTokens.skipEndElement();",
      "info" : "ExpressionStatement[27306-27334]:ExpressionStatement[27296-27324]"
    }, {
      "left" : "return (_currText = str);",
      "right" : "return (_currText = str);",
      "info" : "ReturnStatement[27355-27380]:ReturnStatement[27345-27370]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27442-27454]:ReturnStatement[27432-27444]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27463-27471]:SwitchCase[27453-27461]"
    }, {
      "left" : "if (_currToken.isScalarValue())",
      "right" : "if (_currToken.isScalarValue())",
      "info" : "IfStatement[27484-27577]:IfStatement[27474-27567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27516-27577]:Block[27506-27567]"
    }, {
      "left" : "return _currToken.asString();",
      "right" : "return _currToken.asString();",
      "info" : "ReturnStatement[27534-27563]:ReturnStatement[27524-27553]"
    }, {
      "left" : "return defValue;",
      "right" : "return defValue;",
      "info" : "ReturnStatement[27596-27612]:ReturnStatement[27586-27602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27695-27795]:Block[27685-27785]"
    }, {
      "left" : "String text = getText();",
      "right" : "String text = getText();",
      "info" : "VariableDeclarationStatement[27705-27729]:VariableDeclarationStatement[27695-27719]"
    }, {
      "left" : "return (text == null)  ? null : text.toCharArray();",
      "right" : "return (text == null)  ? null : text.toCharArray();",
      "info" : "ReturnStatement[27738-27789]:ReturnStatement[27728-27779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27861-27953]:Block[27851-27943]"
    }, {
      "left" : "String text = getText();",
      "right" : "String text = getText();",
      "info" : "VariableDeclarationStatement[27871-27895]:VariableDeclarationStatement[27861-27885]"
    }, {
      "left" : "return (text == null)  ? 0 : text.length();",
      "right" : "return (text == null)  ? 0 : text.length();",
      "info" : "ReturnStatement[27904-27947]:ReturnStatement[27894-27937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28019-28044]:Block[28009-28034]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[28029-28038]:ReturnStatement[28019-28028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28255-28284]:Block[28245-28274]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28265-28278]:ReturnStatement[28255-28268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28556-28628]:Block[28546-28618]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28610-28622]:ReturnStatement[28600-28612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28726-29464]:Block[28716-29454]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[28736-29008]:IfStatement[28726-28998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28869-29008]:Block[28859-28998]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[28883-28998]:ExpressionStatement[28873-28988]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[29123-29421]:IfStatement[29113-29411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29149-29421]:Block[29139-29411]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29163-29411]:TryStatement[29153-29401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29167-29240]:Block[29157-29230]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[29185-29226]:ExpressionStatement[29175-29216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29278-29411]:Block[29268-29401]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[29296-29397]:ThrowStatement[29286-29387]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[29438-29458]:ReturnStatement[29428-29448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29584-29775]:Block[29574-29765]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[29594-29644]:VariableDeclarationStatement[29584-29634]"
    }, {
      "left" : "final String str = getText();",
      "right" : "final String str = getText();",
      "info" : "VariableDeclarationStatement[29653-29682]:VariableDeclarationStatement[29643-29672]"
    }, {
      "left" : "_decodeBase64(str, builder, b64variant);",
      "right" : "_decodeBase64(str, builder, b64variant);",
      "info" : "ExpressionStatement[29691-29731]:ExpressionStatement[29681-29721]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[29740-29769]:ReturnStatement[29730-29759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30026-30097]:Block[30016-30087]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30079-30091]:ReturnStatement[30069-30081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30172-30243]:Block[30162-30233]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30225-30237]:ReturnStatement[30215-30227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30313-30381]:Block[30303-30371]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[30366-30375]:ReturnStatement[30356-30365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30449-30517]:Block[30439-30507]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[30502-30511]:ReturnStatement[30492-30501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30581-30649]:Block[30571-30639]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[30634-30643]:ReturnStatement[30624-30633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30715-30783]:Block[30705-30773]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[30768-30777]:ReturnStatement[30758-30767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30856-30927]:Block[30846-30917]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30909-30921]:ReturnStatement[30899-30911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30997-31068]:Block[30987-31058]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31050-31062]:ReturnStatement[31040-31052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31522-31753]:Block[31512-31743]"
    }, {
      "left" : "if (!_parsingContext.inRoot())",
      "right" : "if (!_parsingContext.inRoot())",
      "info" : "IfStatement[31532-31747]:IfStatement[31522-31737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31563-31747]:Block[31553-31737]"
    }, {
      "left" : "_reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\");",
      "right" : "_reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\");",
      "info" : "ExpressionStatement[31577-31737]:ExpressionStatement[31567-31727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32081-32177]:Block[32071-32167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32237-32441]:Block[32227-32431]"
    }, {
      "left" : "if (_byteArrayBuilder == null)",
      "right" : "if (_byteArrayBuilder == null)",
      "info" : "IfStatement[32247-32401]:IfStatement[32237-32391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32278-32345]:Block[32268-32335]"
    }, {
      "left" : "_byteArrayBuilder = new ByteArrayBuilder();",
      "right" : "_byteArrayBuilder = new ByteArrayBuilder();",
      "info" : "ExpressionStatement[32292-32335]:ExpressionStatement[32282-32325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32351-32401]:Block[32341-32391]"
    }, {
      "left" : "_byteArrayBuilder.reset();",
      "right" : "_byteArrayBuilder.reset();",
      "info" : "ExpressionStatement[32365-32391]:ExpressionStatement[32355-32381]"
    }, {
      "left" : "return _byteArrayBuilder;",
      "right" : "return _byteArrayBuilder;",
      "info" : "ReturnStatement[32410-32435]:ReturnStatement[32400-32425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32490-32756]:Block[32480-32746]"
    }, {
      "left" : "int len = (str == null) ? 0 : str.length();",
      "right" : "int len = (str == null) ? 0 : str.length();",
      "info" : "VariableDeclarationStatement[32500-32543]:VariableDeclarationStatement[32490-32533]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[32552-32729]:IfStatement[32542-32719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32565-32729]:Block[32555-32719]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[32579-32719]:ForStatement[32569-32709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32609-32719]:Block[32599-32709]"
    }, {
      "left" : "if (str.charAt(i) > ' ')",
      "right" : "if (str.charAt(i) > ' ')",
      "info" : "IfStatement[32627-32705]:IfStatement[32617-32695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32652-32705]:Block[32642-32695]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32674-32687]:ReturnStatement[32664-32677]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32738-32750]:ReturnStatement[32728-32740]"
    } ]
  },
  "interFileMappings" : { }
}