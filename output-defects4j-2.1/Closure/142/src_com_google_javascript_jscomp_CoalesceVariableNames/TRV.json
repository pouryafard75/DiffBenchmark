{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2633-2673]:FieldDeclaration[2633-2673]"
    }, {
      "left" : "private final Deque<GraphColoring<Var, Void>> colorings;",
      "right" : "private final Deque<GraphColoring<Var, Void>> colorings;",
      "info" : "FieldDeclaration[2676-2732]:FieldDeclaration[2676-2732]"
    }, {
      "left" : "private final boolean usePseudoNames;",
      "right" : "private final boolean usePseudoNames;",
      "info" : "FieldDeclaration[2735-2772]:FieldDeclaration[2735-2772]"
    }, {
      "left" : "private static final Comparator<Var> coloringTieBreaker =\n      new Comparator<Var>() {\n    public int compare(Var v1, Var v2) {\n      return v1.index - v2.index;\n    }\n  };",
      "right" : "private static final Comparator<Var> coloringTieBreaker =\n      new Comparator<Var>() {\n    public int compare(Var v1, Var v2) {\n      return v1.index - v2.index;\n    }\n  };",
      "info" : "FieldDeclaration[2776-2949]:FieldDeclaration[2776-2949]"
    }, {
      "left" : "public int compare(Var v1, Var v2)",
      "right" : "public int compare(Var v1, Var v2)",
      "info" : "MethodDeclaration[2868-2944]:MethodDeclaration[2868-2944]"
    }, {
      "left" : "CoalesceVariableNames(AbstractCompiler compiler, boolean usePseudoNames)",
      "right" : "CoalesceVariableNames(AbstractCompiler compiler, boolean usePseudoNames)",
      "info" : "MethodDeclaration[2953-3281]:MethodDeclaration[2953-3281]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[3285-3397]:MethodDeclaration[3285-3397]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[4591-4717]:MethodDeclaration[4718-4844]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4721-6699]:MethodDeclaration[4848-6826]"
    }, {
      "left" : "private UndiGraph<Var, Void> computeVariableNamesInterferenceGraph(\n      NodeTraversal t, ControlFlowGraph<Node> cfg, Set<Var> escaped)",
      "right" : "private UndiGraph<Var, Void> computeVariableNamesInterferenceGraph(\n      NodeTraversal t, ControlFlowGraph<Node> cfg, Set<Var> escaped)",
      "info" : "MethodDeclaration[6703-9874]:MethodDeclaration[6830-10001]"
    }, {
      "left" : "private void checkRanges(\n      ArrayList<CombinedLiveRangeChecker> rangesToCheck, Node root)",
      "right" : "private void checkRanges(\n      ArrayList<CombinedLiveRangeChecker> rangesToCheck, Node root)",
      "info" : "MethodDeclaration[9878-10622]:MethodDeclaration[10005-10749]"
    }, {
      "left" : "CombinedCfgNodeLiveRangeChecker",
      "right" : "CombinedCfgNodeLiveRangeChecker",
      "info" : "TypeDeclaration[10626-11388]:TypeDeclaration[10753-11515]"
    }, {
      "left" : "private final ArrayList<CombinedLiveRangeChecker> callbacks;",
      "right" : "private final ArrayList<CombinedLiveRangeChecker> callbacks;",
      "info" : "FieldDeclaration[10933-10993]:FieldDeclaration[11060-11120]"
    }, {
      "left" : "CombinedCfgNodeLiveRangeChecker(\n        ArrayList<CombinedLiveRangeChecker> callbacks)",
      "right" : "CombinedCfgNodeLiveRangeChecker(\n        ArrayList<CombinedLiveRangeChecker> callbacks)",
      "info" : "MethodDeclaration[10999-11128]:MethodDeclaration[11126-11255]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[11134-11384]:MethodDeclaration[11261-11511]"
    }, {
      "left" : "CombinedLiveRangeChecker",
      "right" : "CombinedLiveRangeChecker",
      "info" : "TypeDeclaration[11392-12592]:TypeDeclaration[11519-12719]"
    }, {
      "left" : "private final LiveRangeChecker callback1;",
      "right" : "private final LiveRangeChecker callback1;",
      "info" : "FieldDeclaration[11688-11729]:FieldDeclaration[11815-11856]"
    }, {
      "left" : "private final LiveRangeChecker callback2;",
      "right" : "private final LiveRangeChecker callback2;",
      "info" : "FieldDeclaration[11734-11775]:FieldDeclaration[11861-11902]"
    }, {
      "left" : "CombinedLiveRangeChecker(\n        LiveRangeChecker callback1,\n        LiveRangeChecker callback2)",
      "right" : "CombinedLiveRangeChecker(\n        LiveRangeChecker callback1,\n        LiveRangeChecker callback2)",
      "info" : "MethodDeclaration[11781-11954]:MethodDeclaration[11908-12081]"
    }, {
      "left" : "public static boolean shouldVisit(Node n)",
      "right" : "public static boolean shouldVisit(Node n)",
      "info" : "MethodDeclaration[11960-12163]:MethodDeclaration[12087-12290]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[12169-12320]:MethodDeclaration[12296-12447]"
    }, {
      "left" : "void connectIfCrossed(UndiGraph<Var, Void> interferenceGraph)",
      "right" : "void connectIfCrossed(UndiGraph<Var, Void> interferenceGraph)",
      "info" : "MethodDeclaration[12326-12588]:MethodDeclaration[12453-12715]"
    }, {
      "left" : "private void removeVarDeclaration(Node name)",
      "right" : "private void removeVarDeclaration(Node name)",
      "info" : "MethodDeclaration[12596-13857]:MethodDeclaration[12723-13984]"
    }, {
      "left" : "LiveRangeChecker",
      "right" : "LiveRangeChecker",
      "info" : "TypeDeclaration[13861-15776]:TypeDeclaration[13988-15903]"
    }, {
      "left" : "boolean defFound = false;",
      "right" : "boolean defFound = false;",
      "info" : "FieldDeclaration[13952-13977]:FieldDeclaration[14079-14104]"
    }, {
      "left" : "boolean crossed = false;",
      "right" : "boolean crossed = false;",
      "info" : "FieldDeclaration[13982-14006]:FieldDeclaration[14109-14133]"
    }, {
      "left" : "private final Var def;",
      "right" : "private final Var def;",
      "info" : "FieldDeclaration[14011-14033]:FieldDeclaration[14138-14160]"
    }, {
      "left" : "private final Var use;",
      "right" : "private final Var use;",
      "info" : "FieldDeclaration[14038-14060]:FieldDeclaration[14165-14187]"
    }, {
      "left" : "public LiveRangeChecker(Var def, Var use)",
      "right" : "public LiveRangeChecker(Var def, Var use)",
      "info" : "MethodDeclaration[14066-14159]:MethodDeclaration[14193-14286]"
    }, {
      "left" : "Var getDef()",
      "right" : "Var getDef()",
      "info" : "MethodDeclaration[14165-14203]:MethodDeclaration[14292-14330]"
    }, {
      "left" : "public static boolean shouldVisit(Node n)",
      "right" : "public static boolean shouldVisit(Node n)",
      "info" : "MethodDeclaration[14209-14453]:MethodDeclaration[14336-14580]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14459-14716]:MethodDeclaration[14586-14843]"
    }, {
      "left" : "private static boolean isAssignTo(Var var, Node n, Node parent)",
      "right" : "private static boolean isAssignTo(Var var, Node n, Node parent)",
      "info" : "MethodDeclaration[14722-15548]:MethodDeclaration[14849-15675]"
    }, {
      "left" : "private static boolean isReadFrom(Var var, Node name)",
      "right" : "private static boolean isReadFrom(Var var, Node name)",
      "info" : "MethodDeclaration[15554-15772]:MethodDeclaration[15681-15899]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2903-2944]:Block[2903-2944]"
    }, {
      "left" : "return v1.index - v2.index;",
      "right" : "return v1.index - v2.index;",
      "info" : "ReturnStatement[2911-2938]:ReturnStatement[2911-2938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3165-3281]:Block[3165-3281]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[3171-3196]:ExpressionStatement[3171-3196]"
    }, {
      "left" : "colorings = Lists.newLinkedList();",
      "right" : "colorings = Lists.newLinkedList();",
      "info" : "ExpressionStatement[3201-3235]:ExpressionStatement[3201-3235]"
    }, {
      "left" : "this.usePseudoNames = usePseudoNames;",
      "right" : "this.usePseudoNames = usePseudoNames;",
      "info" : "ExpressionStatement[3240-3277]:ExpressionStatement[3240-3277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3342-3397]:Block[3342-3397]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[3348-3393]:ExpressionStatement[3348-3393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4642-4717]:Block[4769-4844]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[4648-4692]:IfStatement[4775-4819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4671-4692]:Block[4798-4819]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4679-4686]:ReturnStatement[4806-4813]"
    }, {
      "left" : "colorings.pop();",
      "right" : "colorings.pop();",
      "info" : "ExpressionStatement[4697-4713]:ExpressionStatement[4824-4840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4789-6699]:Block[4916-6826]"
    }, {
      "left" : "if (colorings.isEmpty() || !NodeUtil.isName(n) ||\n        NodeUtil.isFunction(parent))",
      "right" : "if (colorings.isEmpty() || !NodeUtil.isName(n) ||\n        NodeUtil.isFunction(parent))",
      "info" : "IfStatement[4795-4942]:IfStatement[4922-5069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4882-4942]:Block[5009-5069]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4929-4936]:ReturnStatement[5056-5063]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[4947-4992]:VariableDeclarationStatement[5074-5119]"
    }, {
      "left" : "GraphNode<Var, ?> vNode = colorings.peek().getGraph().getNode(var);",
      "right" : "GraphNode<Var, ?> vNode = colorings.peek().getGraph().getNode(var);",
      "info" : "VariableDeclarationStatement[4997-5064]:VariableDeclarationStatement[5124-5191]"
    }, {
      "left" : "if (vNode == null)",
      "right" : "if (vNode == null)",
      "info" : "IfStatement[5069-5139]:IfStatement[5196-5266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5088-5139]:Block[5215-5266]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5126-5133]:ReturnStatement[5253-5260]"
    }, {
      "left" : "Var coalescedVar = colorings.peek().getPartitionSuperNode(var);",
      "right" : "Var coalescedVar = colorings.peek().getPartitionSuperNode(var);",
      "info" : "VariableDeclarationStatement[5144-5207]:VariableDeclarationStatement[5271-5334]"
    }, {
      "left" : "if (!usePseudoNames)",
      "right" : "if (!usePseudoNames)",
      "info" : "IfStatement[5213-6695]:IfStatement[5340-6822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5234-5541]:Block[5361-5668]"
    }, {
      "left" : "if (vNode.getValue().equals(coalescedVar))",
      "right" : "if (vNode.getValue().equals(coalescedVar))",
      "info" : "IfStatement[5242-5366]:IfStatement[5369-5493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5285-5366]:Block[5412-5493]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5351-5358]:ReturnStatement[5478-5485]"
    }, {
      "left" : "n.setString(coalescedVar.name);",
      "right" : "n.setString(coalescedVar.name);",
      "info" : "ExpressionStatement[5391-5422]:ExpressionStatement[5518-5549]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[5429-5457]:ExpressionStatement[5556-5584]"
    }, {
      "left" : "if (NodeUtil.isVar(parent))",
      "right" : "if (NodeUtil.isVar(parent))",
      "info" : "IfStatement[5465-5535]:IfStatement[5592-5662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5493-5535]:Block[5620-5662]"
    }, {
      "left" : "removeVarDeclaration(n);",
      "right" : "removeVarDeclaration(n);",
      "info" : "ExpressionStatement[5503-5527]:ExpressionStatement[5630-5654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5547-6695]:Block[5674-6822]"
    }, {
      "left" : "String pseudoName = null;",
      "right" : "String pseudoName = null;",
      "info" : "VariableDeclarationStatement[5733-5758]:VariableDeclarationStatement[5860-5885]"
    }, {
      "left" : "Set<String> allMergedNames = Sets.newTreeSet();",
      "right" : "Set<String> allMergedNames = Sets.newTreeSet();",
      "info" : "VariableDeclarationStatement[5765-5812]:VariableDeclarationStatement[5892-5939]"
    }, {
      "left" : "for (Iterator<Var> i = t.getScope().getVars(); i.hasNext())",
      "right" : "for (Iterator<Var> i = t.getScope().getVars(); i.hasNext())",
      "info" : "ForStatement[5819-6253]:ForStatement[5946-6380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5880-6253]:Block[6007-6380]"
    }, {
      "left" : "Var iVar = i.next();",
      "right" : "Var iVar = i.next();",
      "info" : "VariableDeclarationStatement[5890-5910]:VariableDeclarationStatement[6017-6037]"
    }, {
      "left" : "if (colorings.peek().getGraph().getNode(iVar) != null &&\n            coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar)))",
      "right" : "if (colorings.peek().getGraph().getNode(iVar) != null &&\n            coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar)))",
      "info" : "IfStatement[6057-6245]:IfStatement[6184-6372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6193-6245]:Block[6320-6372]"
    }, {
      "left" : "allMergedNames.add(iVar.name);",
      "right" : "allMergedNames.add(iVar.name);",
      "info" : "ExpressionStatement[6205-6235]:ExpressionStatement[6332-6362]"
    }, {
      "left" : "if (allMergedNames.size() == 1)",
      "right" : "if (allMergedNames.size() == 1)",
      "info" : "IfStatement[6294-6351]:IfStatement[6421-6478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6326-6351]:Block[6453-6478]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6336-6343]:ReturnStatement[6463-6470]"
    }, {
      "left" : "pseudoName = Joiner.on(\"_\").join(allMergedNames);",
      "right" : "pseudoName = Joiner.on(\"_\").join(allMergedNames);",
      "info" : "ExpressionStatement[6359-6408]:ExpressionStatement[6486-6535]"
    }, {
      "left" : "while (t.getScope().isDeclared(pseudoName, true))",
      "right" : "while (t.getScope().isDeclared(pseudoName, true))",
      "info" : "WhileStatement[6416-6502]:WhileStatement[6543-6629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6466-6502]:Block[6593-6629]"
    }, {
      "left" : "pseudoName += \"$\";",
      "right" : "pseudoName += \"$\";",
      "info" : "ExpressionStatement[6476-6494]:ExpressionStatement[6603-6621]"
    }, {
      "left" : "n.setString(pseudoName);",
      "right" : "n.setString(pseudoName);",
      "info" : "ExpressionStatement[6510-6534]:ExpressionStatement[6637-6661]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[6541-6569]:ExpressionStatement[6668-6696]"
    }, {
      "left" : "if (!vNode.getValue().equals(coalescedVar) && NodeUtil.isVar(parent))",
      "right" : "if (!vNode.getValue().equals(coalescedVar) && NodeUtil.isVar(parent))",
      "info" : "IfStatement[6577-6689]:IfStatement[6704-6816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6689]:Block[6774-6816]"
    }, {
      "left" : "removeVarDeclaration(n);",
      "right" : "removeVarDeclaration(n);",
      "info" : "ExpressionStatement[6657-6681]:ExpressionStatement[6784-6808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6840-9874]:Block[6967-10001]"
    }, {
      "left" : "UndiGraph<Var, Void> interferenceGraph =\n        new LinkedUndirectedGraph<Var, Void>();",
      "right" : "UndiGraph<Var, Void> interferenceGraph =\n        new LinkedUndirectedGraph<Var, Void>();",
      "info" : "VariableDeclarationStatement[6846-6934]:VariableDeclarationStatement[6973-7061]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[6939-6966]:VariableDeclarationStatement[7066-7093]"
    }, {
      "left" : "for (Iterator<Var> i = scope.getVars(); i.hasNext())",
      "right" : "for (Iterator<Var> i = scope.getVars(); i.hasNext())",
      "info" : "ForStatement[7030-7680]:ForStatement[7157-7807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7084-7680]:Block[7211-7807]"
    }, {
      "left" : "Var v = i.next();",
      "right" : "Var v = i.next();",
      "info" : "VariableDeclarationStatement[7092-7109]:VariableDeclarationStatement[7219-7236]"
    }, {
      "left" : "if (!escaped.contains(v))",
      "right" : "if (!escaped.contains(v))",
      "info" : "IfStatement[7116-7674]:IfStatement[7243-7801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7142-7674]:Block[7269-7801]"
    }, {
      "left" : "if (!NodeUtil.isFunction(v.getParentNode()))",
      "right" : "if (!NodeUtil.isFunction(v.getParentNode()))",
      "info" : "IfStatement[7567-7666]:IfStatement[7694-7793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7612-7666]:Block[7739-7793]"
    }, {
      "left" : "interferenceGraph.createNode(v);",
      "right" : "interferenceGraph.createNode(v);",
      "info" : "ExpressionStatement[7624-7656]:ExpressionStatement[7751-7783]"
    }, {
      "left" : "for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes())",
      "right" : "for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes())",
      "info" : "EnhancedForStatement[7843-9840]:EnhancedForStatement[7970-9967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7913-9840]:Block[8040-9967]"
    }, {
      "left" : "FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();",
      "right" : "FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();",
      "info" : "VariableDeclarationStatement[7921-7984]:VariableDeclarationStatement[8048-8111]"
    }, {
      "left" : "if (cfg.isImplicitReturn(cfgNode))",
      "right" : "if (cfg.isImplicitReturn(cfgNode))",
      "info" : "IfStatement[7991-8053]:IfStatement[8118-8180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8026-8053]:Block[8153-8180]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8036-8045]:ContinueStatement[8163-8172]"
    }, {
      "left" : "int varsInScope = scope.getVarCount();",
      "right" : "int varsInScope = scope.getVarCount();",
      "info" : "VariableDeclarationStatement[8061-8099]:VariableDeclarationStatement[8188-8226]"
    }, {
      "left" : "ArrayList<CombinedLiveRangeChecker> rangesToCheck =\n          new ArrayList<CombinedLiveRangeChecker>(\n              varsInScope * varsInScope);",
      "right" : "ArrayList<CombinedLiveRangeChecker> rangesToCheck =\n          new ArrayList<CombinedLiveRangeChecker>(\n              varsInScope * varsInScope);",
      "info" : "VariableDeclarationStatement[8106-8250]:VariableDeclarationStatement[8233-8377]"
    }, {
      "left" : "for (Iterator<Var> i1 = scope.getVars(); i1.hasNext())",
      "right" : "for (Iterator<Var> i1 = scope.getVars(); i1.hasNext())",
      "info" : "ForStatement[8258-9614]:ForStatement[8385-9741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8314-9614]:Block[8441-9741]"
    }, {
      "left" : "Var v1 = i1.next();",
      "right" : "Var v1 = i1.next();",
      "info" : "VariableDeclarationStatement[8324-8343]:VariableDeclarationStatement[8451-8470]"
    }, {
      "left" : "for (Iterator<Var> i2 = scope.getVars(); i2.hasNext())",
      "right" : "for (Iterator<Var> i2 = scope.getVars(); i2.hasNext())",
      "info" : "ForStatement[8352-9606]:ForStatement[8479-9733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8408-9606]:Block[8535-9733]"
    }, {
      "left" : "Var v2 = i2.next();",
      "right" : "Var v2 = i2.next();",
      "info" : "VariableDeclarationStatement[8420-8439]:VariableDeclarationStatement[8547-8566]"
    }, {
      "left" : "if (v1 == v2 || !interferenceGraph.hasNode(v1) ||\n              !interferenceGraph.hasNode(v2))",
      "right" : "if (v1 == v2 || !interferenceGraph.hasNode(v1) ||\n              !interferenceGraph.hasNode(v2))",
      "info" : "IfStatement[8451-8724]:IfStatement[8578-8851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8724]:Block[8674-8851]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8703-8712]:ContinueStatement[8830-8839]"
    }, {
      "left" : "boolean v1OutLive = state.getOut().isLive(v1);",
      "right" : "boolean v1OutLive = state.getOut().isLive(v1);",
      "info" : "VariableDeclarationStatement[8736-8782]:VariableDeclarationStatement[8863-8909]"
    }, {
      "left" : "boolean v2OutLive = state.getOut().isLive(v2);",
      "right" : "boolean v2OutLive = state.getOut().isLive(v2);",
      "info" : "VariableDeclarationStatement[8793-8839]:VariableDeclarationStatement[8920-8966]"
    }, {
      "left" : "if (v1.getParentNode().getType() == Token.LP &&\n              v2.getParentNode().getType() == Token.LP)",
      "right" : "if (v1.getParentNode().getType() == Token.LP &&\n              v2.getParentNode().getType() == Token.LP)",
      "info" : "IfStatement[8922-9596]:IfStatement[9049-9723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9026-9102]:Block[9153-9229]"
    }, {
      "left" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
      "right" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
      "info" : "ExpressionStatement[9040-9090]:ExpressionStatement[9167-9217]"
    }, {
      "left" : "if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) ||\n              (v1OutLive && v2OutLive))",
      "right" : "if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) ||\n              (v1OutLive && v2OutLive))",
      "info" : "IfStatement[9108-9596]:IfStatement[9235-9723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9210-9286]:Block[9337-9413]"
    }, {
      "left" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
      "right" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
      "info" : "ExpressionStatement[9224-9274]:ExpressionStatement[9351-9401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9292-9596]:Block[9419-9723]"
    }, {
      "left" : "LiveRangeChecker checker1 =\n                new LiveRangeChecker(v1, v2OutLive ? null : v2);",
      "right" : "LiveRangeChecker checker1 =\n                new LiveRangeChecker(v1, v2OutLive ? null : v2);",
      "info" : "VariableDeclarationStatement[9306-9398]:VariableDeclarationStatement[9433-9525]"
    }, {
      "left" : "LiveRangeChecker checker2 =\n                new LiveRangeChecker(v2, v1OutLive ? null : v1);",
      "right" : "LiveRangeChecker checker2 =\n                new LiveRangeChecker(v2, v1OutLive ? null : v1);",
      "info" : "VariableDeclarationStatement[9411-9503]:VariableDeclarationStatement[9538-9630]"
    }, {
      "left" : "rangesToCheck.add(new CombinedLiveRangeChecker(checker1, checker2));",
      "right" : "rangesToCheck.add(new CombinedLiveRangeChecker(checker1, checker2));",
      "info" : "ExpressionStatement[9516-9584]:ExpressionStatement[9643-9711]"
    }, {
      "left" : "checkRanges(rangesToCheck, cfgNode.getValue());",
      "right" : "checkRanges(rangesToCheck, cfgNode.getValue());",
      "info" : "ExpressionStatement[9667-9714]:ExpressionStatement[9794-9841]"
    }, {
      "left" : "for (CombinedLiveRangeChecker range : rangesToCheck)",
      "right" : "for (CombinedLiveRangeChecker range : rangesToCheck)",
      "info" : "EnhancedForStatement[9721-9834]:EnhancedForStatement[9848-9961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9774-9834]:Block[9901-9961]"
    }, {
      "left" : "range.connectIfCrossed(interferenceGraph);",
      "right" : "range.connectIfCrossed(interferenceGraph);",
      "info" : "ExpressionStatement[9784-9826]:ExpressionStatement[9911-9953]"
    }, {
      "left" : "return interferenceGraph;",
      "right" : "return interferenceGraph;",
      "info" : "ReturnStatement[9845-9870]:ReturnStatement[9972-9997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10456-10622]:Block[10583-10749]"
    }, {
      "left" : "CombinedCfgNodeLiveRangeChecker callbacks =\n      new CombinedCfgNodeLiveRangeChecker(rangesToCheck);",
      "right" : "CombinedCfgNodeLiveRangeChecker callbacks =\n      new CombinedCfgNodeLiveRangeChecker(rangesToCheck);",
      "info" : "VariableDeclarationStatement[10462-10563]:VariableDeclarationStatement[10589-10690]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, callbacks);",
      "right" : "NodeTraversal.traverse(compiler, root, callbacks);",
      "info" : "ExpressionStatement[10568-10618]:ExpressionStatement[10695-10745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11087-11128]:Block[11214-11255]"
    }, {
      "left" : "this.callbacks = callbacks;",
      "right" : "this.callbacks = callbacks;",
      "info" : "ExpressionStatement[11095-11122]:ExpressionStatement[11222-11249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11204-11384]:Block[11331-11511]"
    }, {
      "left" : "if (CombinedLiveRangeChecker.shouldVisit(n))",
      "right" : "if (CombinedLiveRangeChecker.shouldVisit(n))",
      "info" : "IfStatement[11212-11378]:IfStatement[11339-11505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11257-11378]:Block[11384-11505]"
    }, {
      "left" : "for (CombinedLiveRangeChecker callback : callbacks)",
      "right" : "for (CombinedLiveRangeChecker callback : callbacks)",
      "info" : "EnhancedForStatement[11267-11370]:EnhancedForStatement[11394-11497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11319-11370]:Block[11446-11497]"
    }, {
      "left" : "callback.visit(t, n, parent);",
      "right" : "callback.visit(t, n, parent);",
      "info" : "ExpressionStatement[11331-11360]:ExpressionStatement[11458-11487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11879-11954]:Block[12006-12081]"
    }, {
      "left" : "this.callback1 = callback1;",
      "right" : "this.callback1 = callback1;",
      "info" : "ExpressionStatement[11887-11914]:ExpressionStatement[12014-12041]"
    }, {
      "left" : "this.callback2 = callback2;",
      "right" : "this.callback2 = callback2;",
      "info" : "ExpressionStatement[11921-11948]:ExpressionStatement[12048-12075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12110-12163]:Block[12237-12290]"
    }, {
      "left" : "return LiveRangeChecker.shouldVisit(n);",
      "right" : "return LiveRangeChecker.shouldVisit(n);",
      "info" : "ReturnStatement[12118-12157]:ReturnStatement[12245-12284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12239-12320]:Block[12366-12447]"
    }, {
      "left" : "callback1.visit(t, n, parent);",
      "right" : "callback1.visit(t, n, parent);",
      "info" : "ExpressionStatement[12247-12277]:ExpressionStatement[12374-12404]"
    }, {
      "left" : "callback2.visit(t, n, parent);",
      "right" : "callback2.visit(t, n, parent);",
      "info" : "ExpressionStatement[12284-12314]:ExpressionStatement[12411-12441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12388-12588]:Block[12515-12715]"
    }, {
      "left" : "if (callback1.crossed || callback2.crossed)",
      "right" : "if (callback1.crossed || callback2.crossed)",
      "info" : "IfStatement[12396-12582]:IfStatement[12523-12709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12440-12582]:Block[12567-12709]"
    }, {
      "left" : "Var v1 = callback1.getDef();",
      "right" : "Var v1 = callback1.getDef();",
      "info" : "VariableDeclarationStatement[12450-12478]:VariableDeclarationStatement[12577-12605]"
    }, {
      "left" : "Var v2 = callback2.getDef();",
      "right" : "Var v2 = callback2.getDef();",
      "info" : "VariableDeclarationStatement[12487-12515]:VariableDeclarationStatement[12614-12642]"
    }, {
      "left" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
      "right" : "interferenceGraph.connectIfNotFound(v1, null, v2);",
      "info" : "ExpressionStatement[12524-12574]:ExpressionStatement[12651-12701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12789-13857]:Block[12916-13984]"
    }, {
      "left" : "Node var = name.getParent();",
      "right" : "Node var = name.getParent();",
      "info" : "VariableDeclarationStatement[12795-12823]:VariableDeclarationStatement[12922-12950]"
    }, {
      "left" : "Node parent = var.getParent();",
      "right" : "Node parent = var.getParent();",
      "info" : "VariableDeclarationStatement[12828-12858]:VariableDeclarationStatement[12955-12985]"
    }, {
      "left" : "if (NodeUtil.isForIn(parent))",
      "right" : "if (NodeUtil.isForIn(parent))",
      "info" : "IfStatement[12912-13853]:IfStatement[13039-13980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12942-13016]:Block[13069-13143]"
    }, {
      "left" : "var.removeChild(name);",
      "right" : "var.removeChild(name);",
      "info" : "ExpressionStatement[12950-12972]:ExpressionStatement[13077-13099]"
    }, {
      "left" : "parent.replaceChild(var, name);",
      "right" : "parent.replaceChild(var, name);",
      "info" : "ExpressionStatement[12979-13010]:ExpressionStatement[13106-13137]"
    }, {
      "left" : "if (var.getChildCount() == 1)",
      "right" : "if (var.getChildCount() == 1)",
      "info" : "IfStatement[13022-13853]:IfStatement[13149-13980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13052-13703]:Block[13179-13830]"
    }, {
      "left" : "if (name.hasChildren())",
      "right" : "if (name.hasChildren())",
      "info" : "IfStatement[13138-13697]:IfStatement[13265-13824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13162-13528]:Block[13289-13655]"
    }, {
      "left" : "Node value = name.removeFirstChild();",
      "right" : "Node value = name.removeFirstChild();",
      "info" : "VariableDeclarationStatement[13172-13209]:VariableDeclarationStatement[13299-13336]"
    }, {
      "left" : "var.removeChild(name);",
      "right" : "var.removeChild(name);",
      "info" : "ExpressionStatement[13218-13240]:ExpressionStatement[13345-13367]"
    }, {
      "left" : "Node assign = new Node(Token.ASSIGN, name, value);",
      "right" : "Node assign = new Node(Token.ASSIGN, name, value);",
      "info" : "VariableDeclarationStatement[13249-13299]:VariableDeclarationStatement[13376-13426]"
    }, {
      "left" : "if (parent.getType() != Token.FOR)",
      "right" : "if (parent.getType() != Token.FOR)",
      "info" : "IfStatement[13386-13477]:IfStatement[13513-13604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13421-13477]:Block[13548-13604]"
    }, {
      "left" : "assign = NodeUtil.newExpr(assign);",
      "right" : "assign = NodeUtil.newExpr(assign);",
      "info" : "ExpressionStatement[13433-13467]:ExpressionStatement[13560-13594]"
    }, {
      "left" : "parent.replaceChild(var, assign);",
      "right" : "parent.replaceChild(var, assign);",
      "info" : "ExpressionStatement[13486-13519]:ExpressionStatement[13613-13646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13534-13697]:Block[13661-13824]"
    }, {
      "left" : "NodeUtil.removeChild(parent, var);",
      "right" : "NodeUtil.removeChild(parent, var);",
      "info" : "ExpressionStatement[13655-13689]:ExpressionStatement[13782-13816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13709-13853]:Block[13836-13980]"
    }, {
      "left" : "if (!name.hasChildren())",
      "right" : "if (!name.hasChildren())",
      "info" : "IfStatement[13717-13782]:IfStatement[13844-13909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13742-13782]:Block[13869-13909]"
    }, {
      "left" : "var.removeChild(name);",
      "right" : "var.removeChild(name);",
      "info" : "ExpressionStatement[13752-13774]:ExpressionStatement[13879-13901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14108-14159]:Block[14235-14286]"
    }, {
      "left" : "this.def = def;",
      "right" : "this.def = def;",
      "info" : "ExpressionStatement[14116-14131]:ExpressionStatement[14243-14258]"
    }, {
      "left" : "this.use = use;",
      "right" : "this.use = use;",
      "info" : "ExpressionStatement[14138-14153]:ExpressionStatement[14265-14280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14178-14203]:Block[14305-14330]"
    }, {
      "left" : "return def;",
      "right" : "return def;",
      "info" : "ReturnStatement[14186-14197]:ReturnStatement[14313-14324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14344-14453]:Block[14471-14580]"
    }, {
      "left" : "return (NodeUtil.isName(n)\n        || (n.hasChildren() && NodeUtil.isName(n.getFirstChild())));",
      "right" : "return (NodeUtil.isName(n)\n        || (n.hasChildren() && NodeUtil.isName(n.getFirstChild())));",
      "info" : "ReturnStatement[14352-14447]:ReturnStatement[14479-14574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14529-14716]:Block[14656-14843]"
    }, {
      "left" : "if (!defFound && isAssignTo(def, n, parent))",
      "right" : "if (!defFound && isAssignTo(def, n, parent))",
      "info" : "IfStatement[14537-14616]:IfStatement[14664-14743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14582-14616]:Block[14709-14743]"
    }, {
      "left" : "defFound = true;",
      "right" : "defFound = true;",
      "info" : "ExpressionStatement[14592-14608]:ExpressionStatement[14719-14735]"
    }, {
      "left" : "if (defFound && (use == null || isReadFrom(use, n)))",
      "right" : "if (defFound && (use == null || isReadFrom(use, n)))",
      "info" : "IfStatement[14624-14710]:IfStatement[14751-14837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14677-14710]:Block[14804-14837]"
    }, {
      "left" : "crossed = true;",
      "right" : "crossed = true;",
      "info" : "ExpressionStatement[14687-14702]:ExpressionStatement[14814-14829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14786-15548]:Block[14913-15675]"
    }, {
      "left" : "if (NodeUtil.isName(n) && var.getName().equals(n.getString()) &&\n          parent != null)",
      "right" : "if (NodeUtil.isName(n) && var.getName().equals(n.getString()) &&\n          parent != null)",
      "info" : "IfStatement[14794-15542]:IfStatement[14921-15669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14885-15287]:Block[15012-15414]"
    }, {
      "left" : "if (parent.getType() == Token.LP)",
      "right" : "if (parent.getType() == Token.LP)",
      "info" : "IfStatement[14895-15235]:IfStatement[15022-15362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14929-15039]:Block[15056-15166]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15017-15029]:ReturnStatement[15144-15156]"
    }, {
      "left" : "if (NodeUtil.isVar(parent))",
      "right" : "if (NodeUtil.isVar(parent))",
      "info" : "IfStatement[15045-15235]:IfStatement[15172-15362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15073-15235]:Block[15200-15362]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[15202-15225]:ReturnStatement[15329-15352]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15244-15257]:ReturnStatement[15371-15384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15293-15542]:Block[15420-15669]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15358-15388]:VariableDeclarationStatement[15485-15515]"
    }, {
      "left" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          NodeUtil.isAssignmentOp(n);",
      "right" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          NodeUtil.isAssignmentOp(n);",
      "info" : "ReturnStatement[15397-15534]:ReturnStatement[15524-15661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15608-15772]:Block[15735-15899]"
    }, {
      "left" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          !NodeUtil.isLhs(name, name.getParent());",
      "right" : "return name != null && NodeUtil.isName(name) &&\n          var.getName().equals(name.getString()) &&\n          !NodeUtil.isLhs(name, name.getParent());",
      "info" : "ReturnStatement[15616-15766]:ReturnStatement[15743-15893]"
    } ]
  },
  "interFileMappings" : { }
}