{
  "matchedElements" : [
 {
    "left" : "class : HarmonicFitter",
    "right" : "class : HarmonicFitter",
    "info" : "TypeDeclaration[1326-15402]:TypeDeclaration[1326-15543]"
  }, {
    "left" : "public HarmonicFitter(optimizer )",
    "right" : "public HarmonicFitter(optimizer )",
    "info" : "MethodDeclaration[1832-2047]:MethodDeclaration[1832-2047]"
  }, {
    "left" : "public fit(initialGuess ) : ",
    "right" : "public fit(initialGuess ) : ",
    "info" : "MethodDeclaration[2053-2560]:MethodDeclaration[2053-2560]"
  }, {
    "left" : "public fit() : ",
    "right" : "public fit() : ",
    "info" : "MethodDeclaration[2566-3173]:MethodDeclaration[2566-3173]"
  }, {
    "left" : "class : ParameterGuesser",
    "right" : "class : ParameterGuesser",
    "info" : "TypeDeclaration[3179-15400]:TypeDeclaration[3179-15541]"
  }, {
    "left" : "observations",
    "right" : "observations",
    "info" : "FieldDeclaration[8289-8377]:FieldDeclaration[8289-8377]"
  }, {
    "left" : "a",
    "right" : "a",
    "info" : "FieldDeclaration[8386-8429]:FieldDeclaration[8386-8429]"
  }, {
    "left" : "omega",
    "right" : "omega",
    "info" : "FieldDeclaration[8438-8493]:FieldDeclaration[8438-8493]"
  }, {
    "left" : "phi",
    "right" : "phi",
    "info" : "FieldDeclaration[8502-8543]:FieldDeclaration[8502-8543]"
  }, {
    "left" : "public ParameterGuesser(observations ...)",
    "right" : "public ParameterGuesser(observations ...)",
    "info" : "MethodDeclaration[8553-9162]:MethodDeclaration[8553-9162]"
  }, {
    "left" : "public guess() : ",
    "right" : "public guess() : ",
    "info" : "MethodDeclaration[9172-9630]:MethodDeclaration[9172-9630]"
  }, {
    "left" : "private sortObservations() : void",
    "right" : "private sortObservations() : void",
    "info" : "MethodDeclaration[9640-10822]:MethodDeclaration[9640-10822]"
  }, {
    "left" : "private guessAOmega() : void",
    "right" : "private guessAOmega() : void",
    "info" : "MethodDeclaration[10832-14301]:MethodDeclaration[10832-14442]"
  }, {
    "left" : "private guessPhi() : void",
    "right" : "private guessPhi() : void",
    "info" : "MethodDeclaration[14311-15394]:MethodDeclaration[14452-15535]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1933-1939]:Modifier[1933-1939]"
  }, {
    "left" : "HarmonicFitter",
    "right" : "HarmonicFitter",
    "info" : "SimpleName[1940-1954]:SimpleName[1940-1954]"
  }, {
    "left" : "final DifferentiableMultivariateVectorOptimizer optimizer",
    "right" : "final DifferentiableMultivariateVectorOptimizer optimizer",
    "info" : "SingleVariableDeclaration[1955-2012]:SingleVariableDeclaration[1955-2012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2014-2047]:Block[2014-2047]"
  }, {
    "left" : "super(optimizer);",
    "right" : "super(optimizer);",
    "info" : "SuperConstructorInvocation[2024-2041]:SuperConstructorInvocation[2024-2041]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2439-2445]:Modifier[2439-2445]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[2446-2454]:ArrayType[2446-2454]"
  }, {
    "left" : "fit",
    "right" : "fit",
    "info" : "SimpleName[2455-2458]:SimpleName[2455-2458]"
  }, {
    "left" : "double[] initialGuess",
    "right" : "double[] initialGuess",
    "info" : "SingleVariableDeclaration[2459-2480]:SingleVariableDeclaration[2459-2480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2482-2560]:Block[2482-2560]"
  }, {
    "left" : "return fit(new HarmonicOscillator.Parametric(), initialGuess);",
    "right" : "return fit(new HarmonicOscillator.Parametric(), initialGuess);",
    "info" : "ReturnStatement[2492-2554]:ReturnStatement[2492-2554]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3073-3079]:Modifier[3073-3079]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[3080-3088]:ArrayType[3080-3088]"
  }, {
    "left" : "fit",
    "right" : "fit",
    "info" : "SimpleName[3089-3092]:SimpleName[3089-3092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3095-3173]:Block[3095-3173]"
  }, {
    "left" : "return fit((new ParameterGuesser(getObservations())).guess());",
    "right" : "return fit((new ParameterGuesser(getObservations())).guess());",
    "info" : "ReturnStatement[3105-3167]:ReturnStatement[3105-3167]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8242-8248]:Modifier[8242-8248]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8249-8255]:Modifier[8249-8255]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[8256-8261]:TYPE_DECLARATION_KIND[8256-8261]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8785-8791]:Modifier[8785-8791]"
  }, {
    "left" : "ParameterGuesser",
    "right" : "ParameterGuesser",
    "info" : "SimpleName[8792-8808]:SimpleName[8792-8808]"
  }, {
    "left" : "WeightedObservedPoint[] observations",
    "right" : "WeightedObservedPoint[] observations",
    "info" : "SingleVariableDeclaration[8809-8845]:SingleVariableDeclaration[8809-8845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8847-9162]:Block[8847-9162]"
  }, {
    "left" : "if (observations.length < 4)",
    "right" : "if (observations.length < 4)",
    "info" : "IfStatement[8861-9097]:IfStatement[8861-9097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8890-9097]:Block[8890-9097]"
  }, {
    "left" : "throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);",
    "right" : "throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);",
    "info" : "ThrowStatement[8908-9083]:ThrowStatement[8908-9083]"
  }, {
    "left" : "this.observations = observations.clone();",
    "right" : "this.observations = observations.clone();",
    "info" : "ExpressionStatement[9111-9152]:ExpressionStatement[9111-9152]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9461-9467]:Modifier[9461-9467]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[9468-9476]:ArrayType[9468-9476]"
  }, {
    "left" : "guess",
    "right" : "guess",
    "info" : "SimpleName[9477-9482]:SimpleName[9477-9482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9485-9630]:Block[9485-9630]"
  }, {
    "left" : "sortObservations();",
    "right" : "sortObservations();",
    "info" : "ExpressionStatement[9499-9518]:ExpressionStatement[9499-9518]"
  }, {
    "left" : "guessAOmega();",
    "right" : "guessAOmega();",
    "info" : "ExpressionStatement[9531-9545]:ExpressionStatement[9531-9545]"
  }, {
    "left" : "guessPhi();",
    "right" : "guessPhi();",
    "info" : "ExpressionStatement[9558-9569]:ExpressionStatement[9558-9569]"
  }, {
    "left" : "return new double[] { a, omega, phi };",
    "right" : "return new double[] { a, omega, phi };",
    "info" : "ReturnStatement[9582-9620]:ReturnStatement[9582-9620]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9727-9734]:Modifier[9727-9734]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9735-9739]:PrimitiveType[9735-9739]"
  }, {
    "left" : "sortObservations",
    "right" : "sortObservations",
    "info" : "SimpleName[9740-9756]:SimpleName[9740-9756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9759-10822]:Block[9759-10822]"
  }, {
    "left" : "WeightedObservedPoint curr = observations[0];",
    "right" : "WeightedObservedPoint curr = observations[0];",
    "info" : "VariableDeclarationStatement[10002-10047]:VariableDeclarationStatement[10002-10047]"
  }, {
    "left" : "for (int j = 1; j < observations.length; ++j)",
    "right" : "for (int j = 1; j < observations.length; ++j)",
    "info" : "ForStatement[10060-10812]:ForStatement[10060-10812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10106-10812]:Block[10106-10812]"
  }, {
    "left" : "WeightedObservedPoint prec = curr;",
    "right" : "WeightedObservedPoint prec = curr;",
    "info" : "VariableDeclarationStatement[10124-10158]:VariableDeclarationStatement[10124-10158]"
  }, {
    "left" : "curr = observations[j];",
    "right" : "curr = observations[j];",
    "info" : "ExpressionStatement[10175-10198]:ExpressionStatement[10175-10198]"
  }, {
    "left" : "if (curr.getX() < prec.getX())",
    "right" : "if (curr.getX() < prec.getX())",
    "info" : "IfStatement[10215-10798]:IfStatement[10215-10798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10246-10798]:Block[10246-10798]"
  }, {
    "left" : "int i = j - 1;",
    "right" : "int i = j - 1;",
    "info" : "VariableDeclarationStatement[10354-10368]:VariableDeclarationStatement[10354-10368]"
  }, {
    "left" : "WeightedObservedPoint mI = observations[i];",
    "right" : "WeightedObservedPoint mI = observations[i];",
    "info" : "VariableDeclarationStatement[10389-10432]:VariableDeclarationStatement[10389-10432]"
  }, {
    "left" : "while ((i >= 0) && (curr.getX() < mI.getX()))",
    "right" : "while ((i >= 0) && (curr.getX() < mI.getX()))",
    "info" : "WhileStatement[10453-10688]:WhileStatement[10453-10688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10499-10688]:Block[10499-10688]"
  }, {
    "left" : "observations[i + 1] = mI;",
    "right" : "observations[i + 1] = mI;",
    "info" : "ExpressionStatement[10525-10550]:ExpressionStatement[10525-10550]"
  }, {
    "left" : "if (i-- != 0)",
    "right" : "if (i-- != 0)",
    "info" : "IfStatement[10575-10666]:IfStatement[10575-10666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10589-10666]:Block[10589-10666]"
  }, {
    "left" : "mI = observations[i];",
    "right" : "mI = observations[i];",
    "info" : "ExpressionStatement[10619-10640]:ExpressionStatement[10619-10640]"
  }, {
    "left" : "observations[i + 1] = curr;",
    "right" : "observations[i + 1] = curr;",
    "info" : "ExpressionStatement[10709-10736]:ExpressionStatement[10709-10736]"
  }, {
    "left" : "curr = observations[j];",
    "right" : "curr = observations[j];",
    "info" : "ExpressionStatement[10757-10780]:ExpressionStatement[10757-10780]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11236-11243]:Modifier[11236-11243]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11244-11248]:PrimitiveType[11244-11248]"
  }, {
    "left" : "guessAOmega",
    "right" : "guessAOmega",
    "info" : "SimpleName[11249-11260]:SimpleName[11249-11260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11263-14301]:Block[11263-14442]"
  }, {
    "left" : "double sx2 = 0;",
    "right" : "double sx2 = 0;",
    "info" : "VariableDeclarationStatement[11359-11374]:VariableDeclarationStatement[11359-11374]"
  }, {
    "left" : "double sy2 = 0;",
    "right" : "double sy2 = 0;",
    "info" : "VariableDeclarationStatement[11387-11402]:VariableDeclarationStatement[11387-11402]"
  }, {
    "left" : "double sxy = 0;",
    "right" : "double sxy = 0;",
    "info" : "VariableDeclarationStatement[11415-11430]:VariableDeclarationStatement[11415-11430]"
  }, {
    "left" : "double sxz = 0;",
    "right" : "double sxz = 0;",
    "info" : "VariableDeclarationStatement[11443-11458]:VariableDeclarationStatement[11443-11458]"
  }, {
    "left" : "double syz = 0;",
    "right" : "double syz = 0;",
    "info" : "VariableDeclarationStatement[11471-11486]:VariableDeclarationStatement[11471-11486]"
  }, {
    "left" : "double currentX = observations[0].getX();",
    "right" : "double currentX = observations[0].getX();",
    "info" : "VariableDeclarationStatement[11500-11541]:VariableDeclarationStatement[11500-11541]"
  }, {
    "left" : "double currentY = observations[0].getY();",
    "right" : "double currentY = observations[0].getY();",
    "info" : "VariableDeclarationStatement[11554-11595]:VariableDeclarationStatement[11554-11595]"
  }, {
    "left" : "double f2Integral = 0;",
    "right" : "double f2Integral = 0;",
    "info" : "VariableDeclarationStatement[11608-11630]:VariableDeclarationStatement[11608-11630]"
  }, {
    "left" : "double fPrime2Integral = 0;",
    "right" : "double fPrime2Integral = 0;",
    "info" : "VariableDeclarationStatement[11643-11670]:VariableDeclarationStatement[11643-11670]"
  }, {
    "left" : "final double startX = currentX;",
    "right" : "final double startX = currentX;",
    "info" : "VariableDeclarationStatement[11683-11714]:VariableDeclarationStatement[11683-11714]"
  }, {
    "left" : "for (int i = 1; i < observations.length; ++i)",
    "right" : "for (int i = 1; i < observations.length; ++i)",
    "info" : "ForStatement[11727-12877]:ForStatement[11727-12877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11773-12877]:Block[11773-12877]"
  }, {
    "left" : "final double previousX = currentX;",
    "right" : "final double previousX = currentX;",
    "info" : "VariableDeclarationStatement[11827-11861]:VariableDeclarationStatement[11827-11861]"
  }, {
    "left" : "final double previousY = currentY;",
    "right" : "final double previousY = currentY;",
    "info" : "VariableDeclarationStatement[11878-11912]:VariableDeclarationStatement[11878-11912]"
  }, {
    "left" : "currentX = observations[i].getX();",
    "right" : "currentX = observations[i].getX();",
    "info" : "ExpressionStatement[11929-11963]:ExpressionStatement[11929-11963]"
  }, {
    "left" : "currentY = observations[i].getY();",
    "right" : "currentY = observations[i].getY();",
    "info" : "ExpressionStatement[11980-12014]:ExpressionStatement[11980-12014]"
  }, {
    "left" : "final double dx = currentX - previousX;",
    "right" : "final double dx = currentX - previousX;",
    "info" : "VariableDeclarationStatement[12188-12227]:VariableDeclarationStatement[12188-12227]"
  }, {
    "left" : "final double dy = currentY - previousY;",
    "right" : "final double dy = currentY - previousY;",
    "info" : "VariableDeclarationStatement[12244-12283]:VariableDeclarationStatement[12244-12283]"
  }, {
    "left" : "final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;",
    "right" : "final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;",
    "info" : "VariableDeclarationStatement[12300-12428]:VariableDeclarationStatement[12300-12428]"
  }, {
    "left" : "final double fPrime2StepIntegral = dy * dy / dx;",
    "right" : "final double fPrime2StepIntegral = dy * dy / dx;",
    "info" : "VariableDeclarationStatement[12445-12493]:VariableDeclarationStatement[12445-12493]"
  }, {
    "left" : "final double x = currentX - startX;",
    "right" : "final double x = currentX - startX;",
    "info" : "VariableDeclarationStatement[12511-12546]:VariableDeclarationStatement[12511-12546]"
  }, {
    "left" : "f2Integral += f2StepIntegral;",
    "right" : "f2Integral += f2StepIntegral;",
    "info" : "ExpressionStatement[12563-12592]:ExpressionStatement[12563-12592]"
  }, {
    "left" : "fPrime2Integral += fPrime2StepIntegral;",
    "right" : "fPrime2Integral += fPrime2StepIntegral;",
    "info" : "ExpressionStatement[12609-12648]:ExpressionStatement[12609-12648]"
  }, {
    "left" : "sx2 += x * x;",
    "right" : "sx2 += x * x;",
    "info" : "ExpressionStatement[12666-12679]:ExpressionStatement[12666-12679]"
  }, {
    "left" : "sy2 += f2Integral * f2Integral;",
    "right" : "sy2 += f2Integral * f2Integral;",
    "info" : "ExpressionStatement[12696-12727]:ExpressionStatement[12696-12727]"
  }, {
    "left" : "sxy += x * f2Integral;",
    "right" : "sxy += x * f2Integral;",
    "info" : "ExpressionStatement[12744-12766]:ExpressionStatement[12744-12766]"
  }, {
    "left" : "sxz += x * fPrime2Integral;",
    "right" : "sxz += x * fPrime2Integral;",
    "info" : "ExpressionStatement[12783-12810]:ExpressionStatement[12783-12810]"
  }, {
    "left" : "syz += f2Integral * fPrime2Integral;",
    "right" : "syz += f2Integral * fPrime2Integral;",
    "info" : "ExpressionStatement[12827-12863]:ExpressionStatement[12827-12863]"
  }, {
    "left" : "double c1 = sy2 * sxz - sxy * syz;",
    "right" : "double c1 = sy2 * sxz - sxy * syz;",
    "info" : "VariableDeclarationStatement[12955-12989]:VariableDeclarationStatement[12955-12989]"
  }, {
    "left" : "double c2 = sxy * sxz - sx2 * syz;",
    "right" : "double c2 = sxy * sxz - sx2 * syz;",
    "info" : "VariableDeclarationStatement[13002-13036]:VariableDeclarationStatement[13002-13036]"
  }, {
    "left" : "double c3 = sx2 * sy2 - sxy * sxy;",
    "right" : "double c3 = sx2 * sy2 - sxy * sxy;",
    "info" : "VariableDeclarationStatement[13049-13083]:VariableDeclarationStatement[13049-13083]"
  }, {
    "left" : "if ((c1 / c2 < 0) || (c2 / c3 < 0))",
    "right" : "if ((c1 / c2 < 0) || (c2 / c3 < 0))",
    "info" : "IfStatement[13096-14291]:IfStatement[13096-14432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13132-14030]:Block[13132-14030]"
  }, {
    "left" : "final int last = observations.length - 1;",
    "right" : "final int last = observations.length - 1;",
    "info" : "VariableDeclarationStatement[13150-13191]:VariableDeclarationStatement[13150-13191]"
  }, {
    "left" : "final double xRange = observations[last].getX() - observations[0].getX();",
    "right" : "final double xRange = observations[last].getX() - observations[0].getX();",
    "info" : "VariableDeclarationStatement[13316-13389]:VariableDeclarationStatement[13316-13389]"
  }, {
    "left" : "if (xRange == 0)",
    "right" : "if (xRange == 0)",
    "info" : "IfStatement[13406-13489]:IfStatement[13406-13489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13423-13489]:Block[13423-13489]"
  }, {
    "left" : "throw new ZeroException();",
    "right" : "throw new ZeroException();",
    "info" : "ThrowStatement[13445-13471]:ThrowStatement[13445-13471]"
  }, {
    "left" : "omega = 2 * Math.PI / xRange;",
    "right" : "omega = 2 * Math.PI / xRange;",
    "info" : "ExpressionStatement[13506-13535]:ExpressionStatement[13506-13535]"
  }, {
    "left" : "double yMin = Double.POSITIVE_INFINITY;",
    "right" : "double yMin = Double.POSITIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[13553-13592]:VariableDeclarationStatement[13553-13592]"
  }, {
    "left" : "double yMax = Double.NEGATIVE_INFINITY;",
    "right" : "double yMax = Double.NEGATIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[13609-13648]:VariableDeclarationStatement[13609-13648]"
  }, {
    "left" : "for (int i = 1; i < observations.length; ++i)",
    "right" : "for (int i = 1; i < observations.length; ++i)",
    "info" : "ForStatement[13665-13975]:ForStatement[13665-13975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13711-13975]:Block[13711-13975]"
  }, {
    "left" : "final double y = observations[i].getY();",
    "right" : "final double y = observations[i].getY();",
    "info" : "VariableDeclarationStatement[13733-13773]:VariableDeclarationStatement[13733-13773]"
  }, {
    "left" : "if (y < yMin)",
    "right" : "if (y < yMin)",
    "info" : "IfStatement[13794-13865]:IfStatement[13794-13865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13808-13865]:Block[13808-13865]"
  }, {
    "left" : "yMin = y;",
    "right" : "yMin = y;",
    "info" : "ExpressionStatement[13834-13843]:ExpressionStatement[13834-13843]"
  }, {
    "left" : "if (y > yMax)",
    "right" : "if (y > yMax)",
    "info" : "IfStatement[13886-13957]:IfStatement[13886-13957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13900-13957]:Block[13900-13957]"
  }, {
    "left" : "yMax = y;",
    "right" : "yMax = y;",
    "info" : "ExpressionStatement[13926-13935]:ExpressionStatement[13926-13935]"
  }, {
    "left" : "a = 0.5 * (yMax - yMin);",
    "right" : "a = 0.5 * (yMax - yMin);",
    "info" : "ExpressionStatement[13992-14016]:ExpressionStatement[13992-14016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14036-14291]:Block[14036-14432]"
  }, {
    "left" : "a = FastMath.sqrt(c1 / c2);",
    "right" : "a = FastMath.sqrt(c1 / c2);",
    "info" : "ExpressionStatement[14202-14229]:ExpressionStatement[14343-14370]"
  }, {
    "left" : "omega = FastMath.sqrt(c2 / c3);",
    "right" : "omega = FastMath.sqrt(c2 / c3);",
    "info" : "ExpressionStatement[14246-14277]:ExpressionStatement[14387-14418]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14383-14390]:Modifier[14524-14531]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14391-14395]:PrimitiveType[14532-14536]"
  }, {
    "left" : "guessPhi",
    "right" : "guessPhi",
    "info" : "SimpleName[14396-14404]:SimpleName[14537-14545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14407-15394]:Block[14548-15535]"
  }, {
    "left" : "double fcMean = 0;",
    "right" : "double fcMean = 0;",
    "info" : "VariableDeclarationStatement[14457-14475]:VariableDeclarationStatement[14598-14616]"
  }, {
    "left" : "double fsMean = 0;",
    "right" : "double fsMean = 0;",
    "info" : "VariableDeclarationStatement[14488-14506]:VariableDeclarationStatement[14629-14647]"
  }, {
    "left" : "double currentX = observations[0].getX();",
    "right" : "double currentX = observations[0].getX();",
    "info" : "VariableDeclarationStatement[14520-14561]:VariableDeclarationStatement[14661-14702]"
  }, {
    "left" : "double currentY = observations[0].getY();",
    "right" : "double currentY = observations[0].getY();",
    "info" : "VariableDeclarationStatement[14574-14615]:VariableDeclarationStatement[14715-14756]"
  }, {
    "left" : "for (int i = 1; i < observations.length; ++i)",
    "right" : "for (int i = 1; i < observations.length; ++i)",
    "info" : "ForStatement[14628-15332]:ForStatement[14769-15473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14674-15332]:Block[14815-15473]"
  }, {
    "left" : "final double previousX = currentX;",
    "right" : "final double previousX = currentX;",
    "info" : "VariableDeclarationStatement[14728-14762]:VariableDeclarationStatement[14869-14903]"
  }, {
    "left" : "final double previousY = currentY;",
    "right" : "final double previousY = currentY;",
    "info" : "VariableDeclarationStatement[14779-14813]:VariableDeclarationStatement[14920-14954]"
  }, {
    "left" : "currentX = observations[i].getX();",
    "right" : "currentX = observations[i].getX();",
    "info" : "ExpressionStatement[14830-14864]:ExpressionStatement[14971-15005]"
  }, {
    "left" : "currentY = observations[i].getY();",
    "right" : "currentY = observations[i].getY();",
    "info" : "ExpressionStatement[14881-14915]:ExpressionStatement[15022-15056]"
  }, {
    "left" : "final double currentYPrime = (currentY - previousY) / (currentX - previousX);",
    "right" : "final double currentYPrime = (currentY - previousY) / (currentX - previousX);",
    "info" : "VariableDeclarationStatement[14932-15009]:VariableDeclarationStatement[15073-15150]"
  }, {
    "left" : "double omegaX = omega * currentX;",
    "right" : "double omegaX = omega * currentX;",
    "info" : "VariableDeclarationStatement[15027-15060]:VariableDeclarationStatement[15168-15201]"
  }, {
    "left" : "double cosine = FastMath.cos(omegaX);",
    "right" : "double cosine = FastMath.cos(omegaX);",
    "info" : "VariableDeclarationStatement[15077-15114]:VariableDeclarationStatement[15218-15255]"
  }, {
    "left" : "double sine = FastMath.sin(omegaX);",
    "right" : "double sine = FastMath.sin(omegaX);",
    "info" : "VariableDeclarationStatement[15131-15166]:VariableDeclarationStatement[15272-15307]"
  }, {
    "left" : "fcMean += omega * currentY * cosine - currentYPrime * sine;",
    "right" : "fcMean += omega * currentY * cosine - currentYPrime * sine;",
    "info" : "ExpressionStatement[15183-15242]:ExpressionStatement[15324-15383]"
  }, {
    "left" : "fsMean += omega * currentY * sine + currentYPrime * cosine;",
    "right" : "fsMean += omega * currentY * sine + currentYPrime * cosine;",
    "info" : "ExpressionStatement[15259-15318]:ExpressionStatement[15400-15459]"
  }, {
    "left" : "phi = FastMath.atan2(-fsMean, fcMean);",
    "right" : "phi = FastMath.atan2(-fsMean, fcMean);",
    "info" : "ExpressionStatement[15346-15384]:ExpressionStatement[15487-15525]"
  } ]
}