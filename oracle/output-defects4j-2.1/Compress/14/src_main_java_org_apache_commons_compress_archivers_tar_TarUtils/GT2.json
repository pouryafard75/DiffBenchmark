{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarUtils",
      "right" : "TarUtils",
      "info" : "TypeDeclaration[858-14470]:TypeDeclaration[858-14296]"
    }, {
      "left" : "private static final int BYTE_MASK = 255;",
      "right" : "private static final int BYTE_MASK = 255;",
      "info" : "FieldDeclaration[1041-1082]:FieldDeclaration[1041-1082]"
    }, {
      "left" : "private TarUtils(",
      "right" : "private TarUtils(",
      "info" : "MethodDeclaration[1088-1196]:MethodDeclaration[1088-1196]"
    }, {
      "left" : "public static long parseOctal(final byte[] buffer, final int offset, final int length)",
      "right" : "public static long parseOctal(final byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[1202-3856]:MethodDeclaration[1202-3682]"
    }, {
      "left" : "public static long parseOctalOrBinary(final byte[] buffer, final int offset,\n                                          final int length)",
      "right" : "public static long parseOctalOrBinary(final byte[] buffer, final int offset,\n                                          final int length)",
      "info" : "MethodDeclaration[3862-5405]:MethodDeclaration[3688-5231]"
    }, {
      "left" : "public static boolean parseBoolean(final byte[] buffer, final int offset)",
      "right" : "public static boolean parseBoolean(final byte[] buffer, final int offset)",
      "info" : "MethodDeclaration[5411-5933]:MethodDeclaration[5237-5759]"
    }, {
      "left" : "private static String exceptionMessage(byte[] buffer, final int offset,\n            final int length, int current, final byte currentByte)",
      "right" : "private static String exceptionMessage(byte[] buffer, final int offset,\n            final int length, int current, final byte currentByte)",
      "info" : "MethodDeclaration[5994-6429]:MethodDeclaration[5820-6255]"
    }, {
      "left" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "right" : "public static String parseName(byte[] buffer, final int offset, final int length)",
      "info" : "MethodDeclaration[6435-7259]:MethodDeclaration[6261-7085]"
    }, {
      "left" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatNameBytes(String name, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[7265-8375]:MethodDeclaration[7091-8201]"
    }, {
      "left" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "right" : "public static void formatUnsignedOctalString(final long value, byte[] buffer,\n            final int offset, final int length)",
      "info" : "MethodDeclaration[8381-9703]:MethodDeclaration[8207-9529]"
    }, {
      "left" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[9709-10670]:MethodDeclaration[9535-10496]"
    }, {
      "left" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[10676-11556]:MethodDeclaration[10502-11382]"
    }, {
      "left" : "public static int formatLongOctalOrBinaryBytes(\n        final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatLongOctalOrBinaryBytes(\n        final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[11562-13130]:MethodDeclaration[11388-12956]"
    }, {
      "left" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "right" : "public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length)",
      "info" : "MethodDeclaration[13136-14101]:MethodDeclaration[12962-13927]"
    }, {
      "left" : "public static long computeCheckSum(final byte[] buf)",
      "right" : "public static long computeCheckSum(final byte[] buf)",
      "info" : "MethodDeclaration[14107-14468]:MethodDeclaration[13933-14294]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1185-1196]:Block[1185-1196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2224-3856]:Block[2224-3682]"
    }, {
      "left" : "long    result = 0;",
      "right" : "long    result = 0;",
      "info" : "VariableDeclarationStatement[2234-2253]:VariableDeclarationStatement[2234-2253]"
    }, {
      "left" : "int     end = offset + length;",
      "right" : "int     end = offset + length;",
      "info" : "VariableDeclarationStatement[2262-2292]:VariableDeclarationStatement[2262-2292]"
    }, {
      "left" : "int     start = offset;",
      "right" : "int     start = offset;",
      "info" : "VariableDeclarationStatement[2301-2324]:VariableDeclarationStatement[2301-2324]"
    }, {
      "left" : "if (length < 2)",
      "right" : "if (length < 2)",
      "info" : "IfStatement[2334-2448]:IfStatement[2334-2448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2349-2448]:Block[2349-2448]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");",
      "right" : "throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");",
      "info" : "ThrowStatement[2363-2438]:ThrowStatement[2363-2438]"
    }, {
      "left" : "if (allNUL)",
      "right" : "if (buffer[start] == 0)",
      "info" : "IfStatement[2644-2690]:IfStatement[2458-2516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2656-2690]:Block[2482-2516]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[2670-2680]:ReturnStatement[2496-2506]"
    }, {
      "left" : "while (start < end)",
      "right" : "while (start < end)",
      "info" : "WhileStatement[2731-2883]:WhileStatement[2557-2709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2750-2883]:Block[2576-2709]"
    }, {
      "left" : "if (buffer[start] == ' ')",
      "right" : "if (buffer[start] == ' ')",
      "info" : "IfStatement[2764-2873]:IfStatement[2590-2699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2789-2829]:Block[2615-2655]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[2807-2815]:ExpressionStatement[2633-2641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2835-2873]:Block[2661-2699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2853-2859]:BreakStatement[2679-2685]"
    }, {
      "left" : "byte trailer;",
      "right" : "byte trailer;",
      "info" : "VariableDeclarationStatement[2936-2949]:VariableDeclarationStatement[2762-2775]"
    }, {
      "left" : "trailer = buffer[end-1];",
      "right" : "trailer = buffer[end-1];",
      "info" : "ExpressionStatement[2958-2982]:ExpressionStatement[3079-3103]"
    }, {
      "left" : "if (trailer == 0 || trailer == ' ')",
      "right" : "if (trailer == 0 || trailer == ' ')",
      "info" : "IfStatement[2991-3200]:IfStatement[2817-3026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3026-3056]:Block[2852-2882]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[3040-3046]:ExpressionStatement[2866-2872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3062-3200]:Block[2888-3026]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, trailer));",
      "right" : "throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, trailer));",
      "info" : "ThrowStatement[3076-3190]:ThrowStatement[2902-3016]"
    }, {
      "left" : "trailer = buffer[end-1];",
      "right" : "trailer = buffer[end-1];",
      "info" : "ExpressionStatement[3253-3277]:ExpressionStatement[2784-2808]"
    }, {
      "left" : "if (trailer == 0 || trailer == ' ')",
      "right" : "if (trailer == 0 || trailer == ' ')",
      "info" : "IfStatement[3286-3351]:IfStatement[3112-3177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3321-3351]:Block[3147-3177]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[3335-3341]:ExpressionStatement[3161-3167]"
    }, {
      "left" : "for ( ;start < end; start++)",
      "right" : "for ( ;start < end; start++)",
      "info" : "ForStatement[3361-3826]:ForStatement[3187-3652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3390-3826]:Block[3216-3652]"
    }, {
      "left" : "final byte currentByte = buffer[start];",
      "right" : "final byte currentByte = buffer[start];",
      "info" : "VariableDeclarationStatement[3404-3443]:VariableDeclarationStatement[3230-3269]"
    }, {
      "left" : "if (currentByte < '0' || currentByte > '7')",
      "right" : "if (currentByte < '0' || currentByte > '7')",
      "info" : "IfStatement[3498-3695]:IfStatement[3324-3521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3541-3695]:Block[3367-3521]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));",
      "right" : "throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));",
      "info" : "ThrowStatement[3559-3681]:ThrowStatement[3385-3507]"
    }, {
      "left" : "result = (result << 3) + (currentByte - '0');",
      "right" : "result = (result << 3) + (currentByte - '0');",
      "info" : "ExpressionStatement[3708-3753]:ExpressionStatement[3534-3579]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[3836-3850]:ReturnStatement[3662-3676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4860-5405]:Block[4686-5231]"
    }, {
      "left" : "if ((buffer[offset] & 0x80) == 0)",
      "right" : "if ((buffer[offset] & 0x80) == 0)",
      "info" : "IfStatement[4871-4971]:IfStatement[4697-4797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4905-4971]:Block[4731-4797]"
    }, {
      "left" : "return parseOctal(buffer, offset, length);",
      "right" : "return parseOctal(buffer, offset, length);",
      "info" : "ReturnStatement[4919-4961]:ReturnStatement[4745-4787]"
    }, {
      "left" : "long val = buffer[offset] & 0x7f;",
      "right" : "long val = buffer[offset] & 0x7f;",
      "info" : "VariableDeclarationStatement[4981-5014]:VariableDeclarationStatement[4807-4840]"
    }, {
      "left" : "for (int i = 1; i < length; i++)",
      "right" : "for (int i = 1; i < length; i++)",
      "info" : "ForStatement[5023-5379]:ForStatement[4849-5205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5056-5379]:Block[4882-5205]"
    }, {
      "left" : "if (val >= (1L << (63 - 8)))",
      "right" : "if (val >= (1L << (63 - 8)))",
      "info" : "IfStatement[5070-5309]:IfStatement[4896-5135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5099-5309]:Block[4925-5135]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"At offset \" + offset + \", \" + length + \" byte \" +\n                    \"binary number exceeds maximum signed long value\");",
      "right" : "throw new IllegalArgumentException(\n                    \"At offset \" + offset + \", \" + length + \" byte \" +\n                    \"binary number exceeds maximum signed long value\");",
      "info" : "ThrowStatement[5117-5295]:ThrowStatement[4943-5121]"
    }, {
      "left" : "val = (val << 8) + (buffer[offset + i] & 0xff);",
      "right" : "val = (val << 8) + (buffer[offset + i] & 0xff);",
      "info" : "ExpressionStatement[5322-5369]:ExpressionStatement[5148-5195]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[5388-5399]:ReturnStatement[5214-5225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5890-5933]:Block[5716-5759]"
    }, {
      "left" : "return buffer[offset] == 1;",
      "right" : "return buffer[offset] == 1;",
      "info" : "ReturnStatement[5900-5927]:ReturnStatement[5726-5753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6133-6429]:Block[5959-6255]"
    }, {
      "left" : "String string = new String(buffer, offset, length);",
      "right" : "String string = new String(buffer, offset, length);",
      "info" : "VariableDeclarationStatement[6143-6194]:VariableDeclarationStatement[5969-6020]"
    }, {
      "left" : "string=string.replaceAll(\"\\0\", \"{NUL}\");",
      "right" : "string=string.replaceAll(\"\\0\", \"{NUL}\");",
      "info" : "ExpressionStatement[6203-6243]:ExpressionStatement[6029-6069]"
    }, {
      "left" : "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;",
      "right" : "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;",
      "info" : "VariableDeclarationStatement[6298-6405]:VariableDeclarationStatement[6124-6231]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[6414-6423]:ReturnStatement[6240-6249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6875-7259]:Block[6701-7085]"
    }, {
      "left" : "StringBuffer result = new StringBuffer(length);",
      "right" : "StringBuffer result = new StringBuffer(length);",
      "info" : "VariableDeclarationStatement[6885-6932]:VariableDeclarationStatement[6711-6758]"
    }, {
      "left" : "int          end = offset + length;",
      "right" : "int          end = offset + length;",
      "info" : "VariableDeclarationStatement[6941-6976]:VariableDeclarationStatement[6767-6802]"
    }, {
      "left" : "for (int i = offset; i < end; ++i)",
      "right" : "for (int i = offset; i < end; ++i)",
      "info" : "ForStatement[6986-7218]:ForStatement[6812-7044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7021-7218]:Block[6847-7044]"
    }, {
      "left" : "byte b = buffer[i];",
      "right" : "byte b = buffer[i];",
      "info" : "VariableDeclarationStatement[7035-7054]:VariableDeclarationStatement[6861-6880]"
    }, {
      "left" : "if (b == 0)",
      "right" : "if (b == 0)",
      "info" : "IfStatement[7067-7134]:IfStatement[6893-6960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7079-7134]:Block[6905-6960]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7114-7120]:BreakStatement[6940-6946]"
    }, {
      "left" : "result.append((char) (b & 0xFF));",
      "right" : "result.append((char) (b & 0xFF));",
      "info" : "ExpressionStatement[7147-7180]:ExpressionStatement[6973-7006]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[7228-7253]:ReturnStatement[7054-7079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8010-8375]:Block[7836-8201]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[8020-8026]:VariableDeclarationStatement[7846-7852]"
    }, {
      "left" : "for (i = 0; i < length && i < name.length(); ++i)",
      "right" : "for (i = 0; i < length && i < name.length(); ++i)",
      "info" : "ForStatement[8093-8207]:ForStatement[7919-8033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8143-8207]:Block[7969-8033]"
    }, {
      "left" : "buf[offset + i] = (byte) name.charAt(i);",
      "right" : "buf[offset + i] = (byte) name.charAt(i);",
      "info" : "ExpressionStatement[8157-8197]:ExpressionStatement[7983-8023]"
    }, {
      "left" : "for (; i < length; ++i)",
      "right" : "for (; i < length; ++i)",
      "info" : "ForStatement[8268-8336]:ForStatement[8094-8162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8292-8336]:Block[8118-8162]"
    }, {
      "left" : "buf[offset + i] = 0;",
      "right" : "buf[offset + i] = 0;",
      "info" : "ExpressionStatement[8306-8326]:ExpressionStatement[8132-8152]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[8346-8369]:ReturnStatement[8172-8195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8888-9703]:Block[8714-9529]"
    }, {
      "left" : "int remaining = length;",
      "right" : "int remaining = length;",
      "info" : "VariableDeclarationStatement[8898-8921]:VariableDeclarationStatement[8724-8747]"
    }, {
      "left" : "remaining--;",
      "right" : "remaining--;",
      "info" : "ExpressionStatement[8930-8942]:ExpressionStatement[8756-8768]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[8951-9570]:IfStatement[8777-9396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8967-9033]:Block[8793-8859]"
    }, {
      "left" : "buffer[offset + remaining--] = (byte) '0';",
      "right" : "buffer[offset + remaining--] = (byte) '0';",
      "info" : "ExpressionStatement[8981-9023]:ExpressionStatement[8807-8849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9039-9570]:Block[8865-9396]"
    }, {
      "left" : "long val = value;",
      "right" : "long val = value;",
      "info" : "VariableDeclarationStatement[9053-9070]:VariableDeclarationStatement[8879-8896]"
    }, {
      "left" : "for (; remaining >= 0 && val != 0; --remaining)",
      "right" : "for (; remaining >= 0 && val != 0; --remaining)",
      "info" : "ForStatement[9083-9355]:ForStatement[8909-9181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9131-9355]:Block[8957-9181]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "right" : "buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));",
      "info" : "ExpressionStatement[9195-9263]:ExpressionStatement[9021-9089]"
    }, {
      "left" : "val = val >>> 3;",
      "right" : "val = val >>> 3;",
      "info" : "ExpressionStatement[9280-9296]:ExpressionStatement[9106-9122]"
    }, {
      "left" : "if (val != 0)",
      "right" : "if (val != 0)",
      "info" : "IfStatement[9368-9560]:IfStatement[9194-9386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9381-9560]:Block[9207-9386]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "right" : "throw new IllegalArgumentException\n                (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);",
      "info" : "ThrowStatement[9399-9546]:ThrowStatement[9225-9372]"
    }, {
      "left" : "for (; remaining >= 0; --remaining)",
      "right" : "for (; remaining >= 0; --remaining)",
      "info" : "ForStatement[9580-9697]:ForStatement[9406-9523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9616-9697]:Block[9442-9523]"
    }, {
      "left" : "buffer[offset + remaining] = (byte) '0';",
      "right" : "buffer[offset + remaining] = (byte) '0';",
      "info" : "ExpressionStatement[9647-9687]:ExpressionStatement[9473-9513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10401-10670]:Block[10227-10496]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[10412-10429]:VariableDeclarationStatement[10238-10255]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[10469-10520]:ExpressionStatement[10295-10346]"
    }, {
      "left" : "buf[offset + idx++] = (byte) ' ';",
      "right" : "buf[offset + idx++] = (byte) ' ';",
      "info" : "ExpressionStatement[10530-10563]:ExpressionStatement[10356-10389]"
    }, {
      "left" : "buf[offset + idx]   = 0;",
      "right" : "buf[offset + idx]   = 0;",
      "info" : "ExpressionStatement[10590-10614]:ExpressionStatement[10416-10440]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[10641-10664]:ReturnStatement[10467-10490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11349-11556]:Block[11175-11382]"
    }, {
      "left" : "int idx=length-1;",
      "right" : "int idx=length-1;",
      "info" : "VariableDeclarationStatement[11360-11377]:VariableDeclarationStatement[11186-11203]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[11408-11459]:ExpressionStatement[11234-11285]"
    }, {
      "left" : "buf[offset + idx] = (byte) ' ';",
      "right" : "buf[offset + idx] = (byte) ' ';",
      "info" : "ExpressionStatement[11468-11499]:ExpressionStatement[11294-11325]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[11527-11550]:ReturnStatement[11353-11376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12383-13130]:Block[12209-12956]"
    }, {
      "left" : "final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;",
      "right" : "final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;",
      "info" : "VariableDeclarationStatement[12461-12563]:VariableDeclarationStatement[12287-12389]"
    }, {
      "left" : "if (value <= maxAsOctalChar)",
      "right" : "if (value <= maxAsOctalChar)",
      "info" : "IfStatement[12573-12712]:IfStatement[12399-12538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12602-12712]:Block[12428-12538]"
    }, {
      "left" : "return formatLongOctalBytes(value, buf, offset, length);",
      "right" : "return formatLongOctalBytes(value, buf, offset, length);",
      "info" : "ReturnStatement[12646-12702]:ReturnStatement[12472-12528]"
    }, {
      "left" : "long val = value;",
      "right" : "long val = value;",
      "info" : "VariableDeclarationStatement[12722-12739]:VariableDeclarationStatement[12548-12565]"
    }, {
      "left" : "for (int i = offset + length - 1; i >= offset; i--)",
      "right" : "for (int i = offset + length - 1; i >= offset; i--)",
      "info" : "ForStatement[12748-12867]:ForStatement[12574-12693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12800-12867]:Block[12626-12693]"
    }, {
      "left" : "buf[i] = (byte) val;",
      "right" : "buf[i] = (byte) val;",
      "info" : "ExpressionStatement[12814-12834]:ExpressionStatement[12640-12660]"
    }, {
      "left" : "val >>= 8;",
      "right" : "val >>= 8;",
      "info" : "ExpressionStatement[12847-12857]:ExpressionStatement[12673-12683]"
    }, {
      "left" : "if (val != 0 || (buf[offset] & 0x80) != 0)",
      "right" : "if (val != 0 || (buf[offset] & 0x80) != 0)",
      "info" : "IfStatement[12877-13062]:IfStatement[12703-12888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12920-13062]:Block[12746-12888]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Value \" + value +\n                \" is too large for \" + length + \" byte field.\");",
      "right" : "throw new IllegalArgumentException(\"Value \" + value +\n                \" is too large for \" + length + \" byte field.\");",
      "info" : "ThrowStatement[12934-13052]:ThrowStatement[12760-12878]"
    }, {
      "left" : "buf[offset] |= 0x80;",
      "right" : "buf[offset] |= 0x80;",
      "info" : "ExpressionStatement[13072-13092]:ExpressionStatement[12898-12918]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[13101-13124]:ReturnStatement[12927-12950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13838-14101]:Block[13664-13927]"
    }, {
      "left" : "int idx=length-2;",
      "right" : "int idx=length-2;",
      "info" : "VariableDeclarationStatement[13849-13866]:VariableDeclarationStatement[13675-13692]"
    }, {
      "left" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "right" : "formatUnsignedOctalString(value, buf, offset, idx);",
      "info" : "ExpressionStatement[13896-13947]:ExpressionStatement[13722-13773]"
    }, {
      "left" : "buf[offset + idx++]   = 0;",
      "right" : "buf[offset + idx++]   = 0;",
      "info" : "ExpressionStatement[13957-13983]:ExpressionStatement[13783-13809]"
    }, {
      "left" : "buf[offset + idx]     = (byte) ' ';",
      "right" : "buf[offset + idx]     = (byte) ' ';",
      "info" : "ExpressionStatement[14009-14044]:ExpressionStatement[13835-13870]"
    }, {
      "left" : "return offset + length;",
      "right" : "return offset + length;",
      "info" : "ReturnStatement[14072-14095]:ReturnStatement[13898-13921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14321-14468]:Block[14147-14294]"
    }, {
      "left" : "long sum = 0;",
      "right" : "long sum = 0;",
      "info" : "VariableDeclarationStatement[14331-14344]:VariableDeclarationStatement[14157-14170]"
    }, {
      "left" : "for (int i = 0; i < buf.length; ++i)",
      "right" : "for (int i = 0; i < buf.length; ++i)",
      "info" : "ForStatement[14354-14441]:ForStatement[14180-14267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14391-14441]:Block[14217-14267]"
    }, {
      "left" : "sum += BYTE_MASK & buf[i];",
      "right" : "sum += BYTE_MASK & buf[i];",
      "info" : "ExpressionStatement[14405-14431]:ExpressionStatement[14231-14257]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[14451-14462]:ReturnStatement[14277-14288]"
    } ]
  },
  "interFileMappings" : { }
}