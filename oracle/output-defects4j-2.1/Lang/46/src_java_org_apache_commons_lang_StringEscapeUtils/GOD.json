{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StringEscapeUtils",
      "right" : "StringEscapeUtils",
      "info" : "TypeDeclaration[988-33313]:TypeDeclaration[988-33503]"
    }, {
      "left" : "private static final char CSV_DELIMITER = ',';",
      "right" : "private static final char CSV_DELIMITER = ',';",
      "info" : "FieldDeclaration[1520-1566]:FieldDeclaration[1520-1566]"
    }, {
      "left" : "private static final char CSV_QUOTE = '\"';",
      "right" : "private static final char CSV_QUOTE = '\"';",
      "info" : "FieldDeclaration[1571-1613]:FieldDeclaration[1571-1613]"
    }, {
      "left" : "private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);",
      "right" : "private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);",
      "info" : "FieldDeclaration[1618-1688]:FieldDeclaration[1618-1688]"
    }, {
      "left" : "private static final char[] CSV_SEARCH_CHARS = new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};",
      "right" : "private static final char[] CSV_SEARCH_CHARS = new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};",
      "info" : "FieldDeclaration[1693-1806]:FieldDeclaration[1693-1806]"
    }, {
      "left" : "public StringEscapeUtils()",
      "right" : "public StringEscapeUtils()",
      "info" : "MethodDeclaration[1812-2220]:MethodDeclaration[1812-2220]"
    }, {
      "left" : "public static String escapeJava(String str)",
      "right" : "public static String escapeJava(String str)",
      "info" : "MethodDeclaration[2334-3188]:MethodDeclaration[2334-3195]"
    }, {
      "left" : "public static void escapeJava(Writer out, String str) throws IOException",
      "right" : "public static void escapeJava(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[3194-3830]:MethodDeclaration[3201-3844]"
    }, {
      "left" : "public static String escapeJavaScript(String str)",
      "right" : "public static String escapeJavaScript(String str)",
      "info" : "MethodDeclaration[3836-4765]:MethodDeclaration[3850-4785]"
    }, {
      "left" : "public static void escapeJavaScript(Writer out, String str) throws IOException",
      "right" : "public static void escapeJavaScript(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[4771-5425]:MethodDeclaration[4791-5451]"
    }, {
      "left" : "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes)",
      "right" : "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash)",
      "info" : "MethodDeclaration[5431-6265]:MethodDeclaration[5457-6339]"
    }, {
      "left" : "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException",
      "right" : "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n            boolean escapeForwardSlash) throws IOException",
      "info" : "MethodDeclaration[6271-9261]:MethodDeclaration[6345-9451]"
    }, {
      "left" : "private static String hex(char ch)",
      "right" : "private static String hex(char ch)",
      "info" : "MethodDeclaration[9267-9591]:MethodDeclaration[9457-9781]"
    }, {
      "left" : "public static String unescapeJava(String str)",
      "right" : "public static String unescapeJava(String str)",
      "info" : "MethodDeclaration[9597-10505]:MethodDeclaration[9787-10695]"
    }, {
      "left" : "public static void unescapeJava(Writer out, String str) throws IOException",
      "right" : "public static void unescapeJava(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[10511-14209]:MethodDeclaration[10701-14399]"
    }, {
      "left" : "public static String unescapeJavaScript(String str)",
      "right" : "public static String unescapeJavaScript(String str)",
      "info" : "MethodDeclaration[14215-14814]:MethodDeclaration[14405-15004]"
    }, {
      "left" : "public static void unescapeJavaScript(Writer out, String str) throws IOException",
      "right" : "public static void unescapeJavaScript(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[14820-15682]:MethodDeclaration[15010-15872]"
    }, {
      "left" : "public static String escapeHtml(String str)",
      "right" : "public static String escapeHtml(String str)",
      "info" : "MethodDeclaration[15789-17515]:MethodDeclaration[15979-17705]"
    }, {
      "left" : "public static void escapeHtml(Writer writer, String string) throws IOException",
      "right" : "public static void escapeHtml(Writer writer, String string) throws IOException",
      "info" : "MethodDeclaration[17521-19399]:MethodDeclaration[17711-19589]"
    }, {
      "left" : "public static String unescapeHtml(String str)",
      "right" : "public static String unescapeHtml(String str)",
      "info" : "MethodDeclaration[19483-20655]:MethodDeclaration[19673-20845]"
    }, {
      "left" : "public static void unescapeHtml(Writer writer, String string) throws IOException",
      "right" : "public static void unescapeHtml(Writer writer, String string) throws IOException",
      "info" : "MethodDeclaration[20661-21794]:MethodDeclaration[20851-21984]"
    }, {
      "left" : "public static void escapeXml(Writer writer, String str) throws IOException",
      "right" : "public static void escapeXml(Writer writer, String str) throws IOException",
      "info" : "MethodDeclaration[21878-23055]:MethodDeclaration[22068-23245]"
    }, {
      "left" : "public static String escapeXml(String str)",
      "right" : "public static String escapeXml(String str)",
      "info" : "MethodDeclaration[23061-23984]:MethodDeclaration[23251-24174]"
    }, {
      "left" : "public static void unescapeXml(Writer writer, String str) throws IOException",
      "right" : "public static void unescapeXml(Writer writer, String str) throws IOException",
      "info" : "MethodDeclaration[24068-25152]:MethodDeclaration[24258-25342]"
    }, {
      "left" : "public static String unescapeXml(String str)",
      "right" : "public static String unescapeXml(String str)",
      "info" : "MethodDeclaration[25158-25990]:MethodDeclaration[25348-26180]"
    }, {
      "left" : "public static String escapeSql(String str)",
      "right" : "public static String escapeSql(String str)",
      "info" : "MethodDeclaration[26074-27020]:MethodDeclaration[26264-27210]"
    }, {
      "left" : "public static String escapeCsv(String str)",
      "right" : "public static String escapeCsv(String str)",
      "info" : "MethodDeclaration[27105-28529]:MethodDeclaration[27295-28719]"
    }, {
      "left" : "public static void escapeCsv(Writer out, String str) throws IOException",
      "right" : "public static void escapeCsv(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[28535-30084]:MethodDeclaration[28725-30274]"
    }, {
      "left" : "public static String unescapeCsv(String str)",
      "right" : "public static String unescapeCsv(String str)",
      "info" : "MethodDeclaration[30090-31518]:MethodDeclaration[30280-31708]"
    }, {
      "left" : "public static void unescapeCsv(Writer out, String str) throws IOException",
      "right" : "public static void unescapeCsv(Writer out, String str) throws IOException",
      "info" : "MethodDeclaration[31524-33310]:MethodDeclaration[31714-33500]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2198-2220]:Block[2198-2220]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2206-2214]:SuperConstructorInvocation[2206-2214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3131-3188]:Block[3131-3195]"
    }, {
      "left" : "return escapeJavaStyleString(str, false);",
      "right" : "return escapeJavaStyleString(str, false, false);",
      "info" : "ReturnStatement[3141-3182]:ReturnStatement[3141-3189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3775-3830]:Block[3782-3844]"
    }, {
      "left" : "escapeJavaStyleString(out, str, false);",
      "right" : "escapeJavaStyleString(out, str, false, false);",
      "info" : "ExpressionStatement[3785-3824]:ExpressionStatement[3792-3838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4709-4765]:Block[4723-4785]"
    }, {
      "left" : "return escapeJavaStyleString(str, true);",
      "right" : "return escapeJavaStyleString(str, true, true);",
      "info" : "ReturnStatement[4719-4759]:ReturnStatement[4733-4779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5371-5425]:Block[5391-5451]"
    }, {
      "left" : "escapeJavaStyleString(out, str, true);",
      "right" : "escapeJavaStyleString(out, str, true, true);",
      "info" : "ExpressionStatement[5381-5419]:ExpressionStatement[5401-5445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5823-6265]:Block[5877-6339]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[5833-5886]:IfStatement[5887-5940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5850-5886]:Block[5904-5940]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5864-5876]:ReturnStatement[5918-5930]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5895-6259]:TryStatement[5949-6333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5899-6086]:Block[5953-6160]"
    }, {
      "left" : "StringWriter writer = new StringWriter(str.length() * 2);",
      "right" : "StringWriter writer = new StringWriter(str.length() * 2);",
      "info" : "VariableDeclarationStatement[5913-5970]:VariableDeclarationStatement[5967-6024]"
    }, {
      "left" : "escapeJavaStyleString(writer, str, escapeSingleQuotes);",
      "right" : "escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);",
      "info" : "ExpressionStatement[5983-6038]:ExpressionStatement[6037-6112]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[6051-6076]:ReturnStatement[6125-6150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6111-6259]:Block[6185-6333]"
    }, {
      "left" : "ioe.printStackTrace();",
      "right" : "ioe.printStackTrace();",
      "info" : "ExpressionStatement[6202-6224]:ExpressionStatement[6276-6298]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6237-6249]:ReturnStatement[6311-6323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6763-9261]:Block[6877-9451]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[6773-6880]:IfStatement[6887-6994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6790-6880]:Block[6904-6994]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "info" : "ThrowStatement[6804-6870]:ThrowStatement[6918-6984]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6889-6937]:IfStatement[7003-7051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6906-6937]:Block[7020-7051]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6920-6927]:ReturnStatement[7034-7041]"
    }, {
      "left" : "int sz;",
      "right" : "int sz;",
      "info" : "VariableDeclarationStatement[6946-6953]:VariableDeclarationStatement[7060-7067]"
    }, {
      "left" : "sz = str.length();",
      "right" : "sz = str.length();",
      "info" : "ExpressionStatement[6962-6980]:ExpressionStatement[7076-7094]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[6989-9255]:ForStatement[7103-9445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7018-9255]:Block[7132-9445]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[7032-7056]:VariableDeclarationStatement[7146-7170]"
    }, {
      "left" : "if (ch > 0xfff)",
      "right" : "if (ch > 0xfff)",
      "info" : "IfStatement[7100-9245]:IfStatement[7214-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7116-7175]:Block[7230-7289]"
    }, {
      "left" : "out.write(\"\\\\u\" + hex(ch));",
      "right" : "out.write(\"\\\\u\" + hex(ch));",
      "info" : "ExpressionStatement[7134-7161]:ExpressionStatement[7248-7275]"
    }, {
      "left" : "if (ch > 0xff)",
      "right" : "if (ch > 0xff)",
      "info" : "IfStatement[7181-9245]:IfStatement[7295-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7196-7256]:Block[7310-7370]"
    }, {
      "left" : "out.write(\"\\\\u0\" + hex(ch));",
      "right" : "out.write(\"\\\\u0\" + hex(ch));",
      "info" : "ExpressionStatement[7214-7242]:ExpressionStatement[7328-7356]"
    }, {
      "left" : "if (ch > 0x7f)",
      "right" : "if (ch > 0x7f)",
      "info" : "IfStatement[7262-9245]:IfStatement[7376-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7277-7338]:Block[7391-7452]"
    }, {
      "left" : "out.write(\"\\\\u00\" + hex(ch));",
      "right" : "out.write(\"\\\\u00\" + hex(ch));",
      "info" : "ExpressionStatement[7295-7324]:ExpressionStatement[7409-7438]"
    }, {
      "left" : "if (ch < 32)",
      "right" : "if (ch < 32)",
      "info" : "IfStatement[7344-9245]:IfStatement[7458-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7357-8417]:Block[7471-8531]"
    }, {
      "left" : "switch (ch) {\n                    case '\\b' :\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n' :\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t' :\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f' :\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r' :\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }",
      "right" : "switch (ch) {\n                    case '\\b' :\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n' :\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t' :\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f' :\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r' :\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }",
      "info" : "SwitchStatement[7375-8403]:SwitchStatement[7489-8517]"
    }, {
      "left" : "case '\\b' :",
      "right" : "case '\\b' :",
      "info" : "SwitchCase[7409-7420]:SwitchCase[7523-7534]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7445-7461]:ExpressionStatement[7559-7575]"
    }, {
      "left" : "out.write('b');",
      "right" : "out.write('b');",
      "info" : "ExpressionStatement[7486-7501]:ExpressionStatement[7600-7615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7526-7532]:BreakStatement[7640-7646]"
    }, {
      "left" : "case '\\n' :",
      "right" : "case '\\n' :",
      "info" : "SwitchCase[7553-7564]:SwitchCase[7667-7678]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7589-7605]:ExpressionStatement[7703-7719]"
    }, {
      "left" : "out.write('n');",
      "right" : "out.write('n');",
      "info" : "ExpressionStatement[7630-7645]:ExpressionStatement[7744-7759]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7670-7676]:BreakStatement[7784-7790]"
    }, {
      "left" : "case '\\t' :",
      "right" : "case '\\t' :",
      "info" : "SwitchCase[7697-7708]:SwitchCase[7811-7822]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7733-7749]:ExpressionStatement[7847-7863]"
    }, {
      "left" : "out.write('t');",
      "right" : "out.write('t');",
      "info" : "ExpressionStatement[7774-7789]:ExpressionStatement[7888-7903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7814-7820]:BreakStatement[7928-7934]"
    }, {
      "left" : "case '\\f' :",
      "right" : "case '\\f' :",
      "info" : "SwitchCase[7841-7852]:SwitchCase[7955-7966]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[7877-7893]:ExpressionStatement[7991-8007]"
    }, {
      "left" : "out.write('f');",
      "right" : "out.write('f');",
      "info" : "ExpressionStatement[7918-7933]:ExpressionStatement[8032-8047]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7958-7964]:BreakStatement[8072-8078]"
    }, {
      "left" : "case '\\r' :",
      "right" : "case '\\r' :",
      "info" : "SwitchCase[7985-7996]:SwitchCase[8099-8110]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8021-8037]:ExpressionStatement[8135-8151]"
    }, {
      "left" : "out.write('r');",
      "right" : "out.write('r');",
      "info" : "ExpressionStatement[8062-8077]:ExpressionStatement[8176-8191]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8102-8108]:BreakStatement[8216-8222]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[8129-8138]:SwitchCase[8243-8252]"
    }, {
      "left" : "if (ch > 0xf)",
      "right" : "if (ch > 0xf)",
      "info" : "IfStatement[8163-8354]:IfStatement[8277-8468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8177-8262]:Block[8291-8376]"
    }, {
      "left" : "out.write(\"\\\\u00\" + hex(ch));",
      "right" : "out.write(\"\\\\u00\" + hex(ch));",
      "info" : "ExpressionStatement[8207-8236]:ExpressionStatement[8321-8350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8268-8354]:Block[8382-8468]"
    }, {
      "left" : "out.write(\"\\\\u000\" + hex(ch));",
      "right" : "out.write(\"\\\\u000\" + hex(ch));",
      "info" : "ExpressionStatement[8298-8328]:ExpressionStatement[8412-8442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8379-8385]:BreakStatement[8493-8499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8423-9245]:Block[8537-9435]"
    }, {
      "left" : "switch (ch) {\n                    case '\\'' :\n                        if (escapeSingleQuote) {\n                            out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"' :\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\' :\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    case '/' :\n                            out.write('\\\\');\n                        out.write('/');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "right" : "switch (ch) {\n                    case '\\'' :\n                        if (escapeSingleQuote) {\n                            out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"' :\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\' :\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    case '/' :\n                        if (escapeForwardSlash) {\n                            out.write('\\\\');\n                        }\n                        out.write('/');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "info" : "SwitchStatement[8441-9231]:SwitchStatement[8555-9421]"
    }, {
      "left" : "case '\\'' :",
      "right" : "case '\\'' :",
      "info" : "SwitchCase[8475-8486]:SwitchCase[8589-8600]"
    }, {
      "left" : "if (escapeSingleQuote)",
      "right" : "if (escapeSingleQuote)",
      "info" : "IfStatement[8511-8606]:IfStatement[8625-8720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8534-8606]:Block[8648-8720]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8564-8580]:ExpressionStatement[8678-8694]"
    }, {
      "left" : "out.write('\\'');",
      "right" : "out.write('\\'');",
      "info" : "ExpressionStatement[8631-8647]:ExpressionStatement[8745-8761]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8672-8678]:BreakStatement[8786-8792]"
    }, {
      "left" : "case '\"' :",
      "right" : "case '\"' :",
      "info" : "SwitchCase[8699-8709]:SwitchCase[8813-8823]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8734-8750]:ExpressionStatement[8848-8864]"
    }, {
      "left" : "out.write('\"');",
      "right" : "out.write('\"');",
      "info" : "ExpressionStatement[8775-8790]:ExpressionStatement[8889-8904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8815-8821]:BreakStatement[8929-8935]"
    }, {
      "left" : "case '\\\\' :",
      "right" : "case '\\\\' :",
      "info" : "SwitchCase[8842-8853]:SwitchCase[8956-8967]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8878-8894]:ExpressionStatement[8992-9008]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[8919-8935]:ExpressionStatement[9033-9049]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8960-8966]:BreakStatement[9074-9080]"
    }, {
      "left" : "case '/' :",
      "right" : "case '/' :",
      "info" : "SwitchCase[8987-8997]:SwitchCase[9101-9111]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[9026-9042]:ExpressionStatement[9190-9206]"
    }, {
      "left" : "out.write('/');",
      "right" : "out.write('/');",
      "info" : "ExpressionStatement[9067-9082]:ExpressionStatement[9257-9272]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9107-9113]:BreakStatement[9297-9303]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[9134-9143]:SwitchCase[9324-9333]"
    }, {
      "left" : "out.write(ch);",
      "right" : "out.write(ch);",
      "info" : "ExpressionStatement[9168-9182]:ExpressionStatement[9358-9372]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9207-9213]:BreakStatement[9397-9403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9530-9591]:Block[9720-9781]"
    }, {
      "left" : "return Integer.toHexString(ch).toUpperCase();",
      "right" : "return Integer.toHexString(ch).toUpperCase();",
      "info" : "ReturnStatement[9540-9585]:ReturnStatement[9730-9775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10096-10505]:Block[10286-10695]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[10106-10159]:IfStatement[10296-10349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10123-10159]:Block[10313-10349]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10137-10149]:ReturnStatement[10327-10339]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10168-10499]:TryStatement[10358-10689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10172-10326]:Block[10362-10516]"
    }, {
      "left" : "StringWriter writer = new StringWriter(str.length());",
      "right" : "StringWriter writer = new StringWriter(str.length());",
      "info" : "VariableDeclarationStatement[10186-10239]:VariableDeclarationStatement[10376-10429]"
    }, {
      "left" : "unescapeJava(writer, str);",
      "right" : "unescapeJava(writer, str);",
      "info" : "ExpressionStatement[10252-10278]:ExpressionStatement[10442-10468]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[10291-10316]:ReturnStatement[10481-10506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10351-10499]:Block[10541-10689]"
    }, {
      "left" : "ioe.printStackTrace();",
      "right" : "ioe.printStackTrace();",
      "info" : "ExpressionStatement[10442-10464]:ExpressionStatement[10632-10654]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10477-10489]:ReturnStatement[10667-10679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11282-14209]:Block[11472-14399]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[11292-11399]:IfStatement[11482-11589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11309-11399]:Block[11499-11589]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Writer must not be null\");",
      "info" : "ThrowStatement[11323-11389]:ThrowStatement[11513-11579]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[11408-11456]:IfStatement[11598-11646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11425-11456]:Block[11615-11646]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11439-11446]:ReturnStatement[11629-11636]"
    }, {
      "left" : "int sz = str.length();",
      "right" : "int sz = str.length();",
      "info" : "VariableDeclarationStatement[11465-11487]:VariableDeclarationStatement[11655-11677]"
    }, {
      "left" : "StringBuffer unicode = new StringBuffer(4);",
      "right" : "StringBuffer unicode = new StringBuffer(4);",
      "info" : "VariableDeclarationStatement[11496-11539]:VariableDeclarationStatement[11686-11729]"
    }, {
      "left" : "boolean hadSlash = false;",
      "right" : "boolean hadSlash = false;",
      "info" : "VariableDeclarationStatement[11548-11573]:VariableDeclarationStatement[11738-11763]"
    }, {
      "left" : "boolean inUnicode = false;",
      "right" : "boolean inUnicode = false;",
      "info" : "VariableDeclarationStatement[11582-11608]:VariableDeclarationStatement[11772-11798]"
    }, {
      "left" : "for (int i = 0; i < sz; i++)",
      "right" : "for (int i = 0; i < sz; i++)",
      "info" : "ForStatement[11617-14024]:ForStatement[11807-14214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11646-14024]:Block[11836-14214]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[11660-11684]:VariableDeclarationStatement[11850-11874]"
    }, {
      "left" : "if (inUnicode)",
      "right" : "if (inUnicode)",
      "info" : "IfStatement[11697-12550]:IfStatement[11887-12740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11712-12550]:Block[11902-12740]"
    }, {
      "left" : "unicode.append(ch);",
      "right" : "unicode.append(ch);",
      "info" : "ExpressionStatement[11828-11847]:ExpressionStatement[12018-12037]"
    }, {
      "left" : "if (unicode.length() == 4)",
      "right" : "if (unicode.length() == 4)",
      "info" : "IfStatement[11864-12510]:IfStatement[12054-12700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11891-12510]:Block[12081-12700]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12039-12492]:TryStatement[12229-12682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12043-12324]:Block[12233-12514]"
    }, {
      "left" : "int value = Integer.parseInt(unicode.toString(), 16);",
      "right" : "int value = Integer.parseInt(unicode.toString(), 16);",
      "info" : "VariableDeclarationStatement[12069-12122]:VariableDeclarationStatement[12259-12312]"
    }, {
      "left" : "out.write((char) value);",
      "right" : "out.write((char) value);",
      "info" : "ExpressionStatement[12147-12171]:ExpressionStatement[12337-12361]"
    }, {
      "left" : "unicode.setLength(0);",
      "right" : "unicode.setLength(0);",
      "info" : "ExpressionStatement[12196-12217]:ExpressionStatement[12386-12407]"
    }, {
      "left" : "inUnicode = false;",
      "right" : "inUnicode = false;",
      "info" : "ExpressionStatement[12242-12260]:ExpressionStatement[12432-12450]"
    }, {
      "left" : "hadSlash = false;",
      "right" : "hadSlash = false;",
      "info" : "ExpressionStatement[12285-12302]:ExpressionStatement[12475-12492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12359-12492]:Block[12549-12682]"
    }, {
      "left" : "throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);",
      "right" : "throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);",
      "info" : "ThrowStatement[12385-12470]:ThrowStatement[12575-12660]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12527-12536]:ContinueStatement[12717-12726]"
    }, {
      "left" : "if (hadSlash)",
      "right" : "if (hadSlash)",
      "info" : "IfStatement[12563-13987]:IfStatement[12753-14177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12577-13891]:Block[12767-14081]"
    }, {
      "left" : "hadSlash = false;",
      "right" : "hadSlash = false;",
      "info" : "ExpressionStatement[12638-12655]:ExpressionStatement[12828-12845]"
    }, {
      "left" : "switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            // uh-oh, we're in unicode country....\n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "right" : "switch (ch) {\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\"':\n                        out.write('\"');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'u':\n                        {\n                            // uh-oh, we're in unicode country....\n                            inUnicode = true;\n                            break;\n                        }\n                    default :\n                        out.write(ch);\n                        break;\n                }",
      "info" : "SwitchStatement[12672-13851]:SwitchStatement[12862-14041]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[12706-12716]:SwitchCase[12896-12906]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[12741-12757]:ExpressionStatement[12931-12947]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12782-12788]:BreakStatement[12972-12978]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[12809-12819]:SwitchCase[12999-13009]"
    }, {
      "left" : "out.write('\\'');",
      "right" : "out.write('\\'');",
      "info" : "ExpressionStatement[12844-12860]:ExpressionStatement[13034-13050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12885-12891]:BreakStatement[13075-13081]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[12912-12922]:SwitchCase[13102-13112]"
    }, {
      "left" : "out.write('\"');",
      "right" : "out.write('\"');",
      "info" : "ExpressionStatement[12947-12962]:ExpressionStatement[13137-13152]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12987-12993]:BreakStatement[13177-13183]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[13014-13023]:SwitchCase[13204-13213]"
    }, {
      "left" : "out.write('\\r');",
      "right" : "out.write('\\r');",
      "info" : "ExpressionStatement[13048-13064]:ExpressionStatement[13238-13254]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13089-13095]:BreakStatement[13279-13285]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[13116-13125]:SwitchCase[13306-13315]"
    }, {
      "left" : "out.write('\\f');",
      "right" : "out.write('\\f');",
      "info" : "ExpressionStatement[13150-13166]:ExpressionStatement[13340-13356]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13191-13197]:BreakStatement[13381-13387]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[13218-13227]:SwitchCase[13408-13417]"
    }, {
      "left" : "out.write('\\t');",
      "right" : "out.write('\\t');",
      "info" : "ExpressionStatement[13252-13268]:ExpressionStatement[13442-13458]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13293-13299]:BreakStatement[13483-13489]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[13320-13329]:SwitchCase[13510-13519]"
    }, {
      "left" : "out.write('\\n');",
      "right" : "out.write('\\n');",
      "info" : "ExpressionStatement[13354-13370]:ExpressionStatement[13544-13560]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13395-13401]:BreakStatement[13585-13591]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[13422-13431]:SwitchCase[13612-13621]"
    }, {
      "left" : "out.write('\\b');",
      "right" : "out.write('\\b');",
      "info" : "ExpressionStatement[13456-13472]:ExpressionStatement[13646-13662]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13497-13503]:BreakStatement[13687-13693]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[13524-13533]:SwitchCase[13714-13723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13558-13733]:Block[13748-13923]"
    }, {
      "left" : "inUnicode = true;",
      "right" : "inUnicode = true;",
      "info" : "ExpressionStatement[13655-13672]:ExpressionStatement[13845-13862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13701-13707]:BreakStatement[13891-13897]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[13754-13763]:SwitchCase[13944-13953]"
    }, {
      "left" : "out.write(ch);",
      "right" : "out.write(ch);",
      "info" : "ExpressionStatement[13788-13802]:ExpressionStatement[13978-13992]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13827-13833]:BreakStatement[14017-14023]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[13868-13877]:ContinueStatement[14058-14067]"
    }, {
      "left" : "if (ch == '\\\\')",
      "right" : "if (ch == '\\\\')",
      "info" : "IfStatement[13897-13987]:IfStatement[14087-14177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13913-13987]:Block[14103-14177]"
    }, {
      "left" : "hadSlash = true;",
      "right" : "hadSlash = true;",
      "info" : "ExpressionStatement[13931-13947]:ExpressionStatement[14121-14137]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[13964-13973]:ContinueStatement[14154-14163]"
    }, {
      "left" : "out.write(ch);",
      "right" : "out.write(ch);",
      "info" : "ExpressionStatement[14000-14014]:ExpressionStatement[14190-14204]"
    }, {
      "left" : "if (hadSlash)",
      "right" : "if (hadSlash)",
      "info" : "IfStatement[14033-14203]:IfStatement[14223-14393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14047-14203]:Block[14237-14393]"
    }, {
      "left" : "out.write('\\\\');",
      "right" : "out.write('\\\\');",
      "info" : "ExpressionStatement[14177-14193]:ExpressionStatement[14367-14383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14773-14814]:Block[14963-15004]"
    }, {
      "left" : "return unescapeJava(str);",
      "right" : "return unescapeJava(str);",
      "info" : "ReturnStatement[14783-14808]:ReturnStatement[14973-14998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15643-15682]:Block[15833-15872]"
    }, {
      "left" : "unescapeJava(out, str);",
      "right" : "unescapeJava(out, str);",
      "info" : "ExpressionStatement[15653-15676]:ExpressionStatement[15843-15866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17112-17515]:Block[17302-17705]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[17122-17175]:IfStatement[17312-17365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17139-17175]:Block[17329-17365]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17153-17165]:ReturnStatement[17343-17355]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17184-17509]:TryStatement[17374-17699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17188-17354]:Block[17378-17544]"
    }, {
      "left" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "right" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "info" : "VariableDeclarationStatement[17202-17269]:VariableDeclarationStatement[17392-17459]"
    }, {
      "left" : "escapeHtml(writer, str);",
      "right" : "escapeHtml(writer, str);",
      "info" : "ExpressionStatement[17282-17306]:ExpressionStatement[17472-17496]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[17319-17344]:ReturnStatement[17509-17534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17377-17509]:Block[17567-17699]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[17454-17474]:ExpressionStatement[17644-17664]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17487-17499]:ReturnStatement[17677-17689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19162-19399]:Block[19352-19589]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[19172-19285]:IfStatement[19362-19475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19193-19285]:Block[19383-19475]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[19207-19275]:ThrowStatement[19397-19465]"
    }, {
      "left" : "if (string == null)",
      "right" : "if (string == null)",
      "info" : "IfStatement[19294-19345]:IfStatement[19484-19535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19314-19345]:Block[19504-19535]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19328-19335]:ReturnStatement[19518-19525]"
    }, {
      "left" : "Entities.HTML40.escape(writer, string);",
      "right" : "Entities.HTML40.escape(writer, string);",
      "info" : "ExpressionStatement[19354-19393]:ExpressionStatement[19544-19583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20250-20655]:Block[20440-20845]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[20260-20313]:IfStatement[20450-20503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20277-20313]:Block[20467-20503]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20291-20303]:ReturnStatement[20481-20493]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20322-20649]:TryStatement[20512-20839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20326-20494]:Block[20516-20684]"
    }, {
      "left" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "right" : "StringWriter writer = new StringWriter ((int)(str.length() * 1.5));",
      "info" : "VariableDeclarationStatement[20340-20407]:VariableDeclarationStatement[20530-20597]"
    }, {
      "left" : "unescapeHtml(writer, str);",
      "right" : "unescapeHtml(writer, str);",
      "info" : "ExpressionStatement[20420-20446]:ExpressionStatement[20610-20636]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[20459-20484]:ReturnStatement[20649-20674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20517-20649]:Block[20707-20839]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[20594-20614]:ExpressionStatement[20784-20804]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20627-20639]:ReturnStatement[20817-20829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21555-21794]:Block[21745-21984]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[21565-21678]:IfStatement[21755-21868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21586-21678]:Block[21776-21868]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[21600-21668]:ThrowStatement[21790-21858]"
    }, {
      "left" : "if (string == null)",
      "right" : "if (string == null)",
      "info" : "IfStatement[21687-21738]:IfStatement[21877-21928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21707-21738]:Block[21897-21928]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21721-21728]:ReturnStatement[21911-21918]"
    }, {
      "left" : "Entities.HTML40.unescape(writer, string);",
      "right" : "Entities.HTML40.unescape(writer, string);",
      "info" : "ExpressionStatement[21747-21788]:ExpressionStatement[21937-21978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22827-23055]:Block[23017-23245]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[22837-22950]:IfStatement[23027-23140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22858-22950]:Block[23048-23140]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[22872-22940]:ThrowStatement[23062-23130]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22959-23007]:IfStatement[23149-23197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22976-23007]:Block[23166-23197]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22990-22997]:ReturnStatement[23180-23187]"
    }, {
      "left" : "Entities.XML.escape(writer, str);",
      "right" : "Entities.XML.escape(writer, str);",
      "info" : "ExpressionStatement[23016-23049]:ExpressionStatement[23206-23239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23874-23984]:Block[24064-24174]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23884-23937]:IfStatement[24074-24127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23901-23937]:Block[24091-24127]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23915-23927]:ReturnStatement[24105-24117]"
    }, {
      "left" : "return Entities.XML.escape(str);",
      "right" : "return Entities.XML.escape(str);",
      "info" : "ReturnStatement[23946-23978]:ReturnStatement[24136-24168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24922-25152]:Block[25112-25342]"
    }, {
      "left" : "if (writer == null)",
      "right" : "if (writer == null)",
      "info" : "IfStatement[24932-25045]:IfStatement[25122-25235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24953-25045]:Block[25143-25235]"
    }, {
      "left" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "right" : "throw new IllegalArgumentException (\"The Writer must not be null.\");",
      "info" : "ThrowStatement[24967-25035]:ThrowStatement[25157-25225]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25054-25102]:IfStatement[25244-25292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25071-25102]:Block[25261-25292]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25085-25092]:ReturnStatement[25275-25282]"
    }, {
      "left" : "Entities.XML.unescape(writer, str);",
      "right" : "Entities.XML.unescape(writer, str);",
      "info" : "ExpressionStatement[25111-25146]:ExpressionStatement[25301-25336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25878-25990]:Block[26068-26180]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25888-25941]:IfStatement[26078-26131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25905-25941]:Block[26095-26131]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25919-25931]:ReturnStatement[26109-26121]"
    }, {
      "left" : "return Entities.XML.unescape(str);",
      "right" : "return Entities.XML.unescape(str);",
      "info" : "ReturnStatement[25950-25984]:ReturnStatement[26140-26174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26899-27020]:Block[27089-27210]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[26909-26962]:IfStatement[27099-27152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26926-26962]:Block[27116-27152]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26940-26952]:ReturnStatement[27130-27142]"
    }, {
      "left" : "return StringUtils.replace(str, \"'\", \"''\");",
      "right" : "return StringUtils.replace(str, \"'\", \"''\");",
      "info" : "ReturnStatement[26971-27014]:ReturnStatement[27161-27204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28100-28529]:Block[28290-28719]"
    }, {
      "left" : "if (StringUtils.containsNone(str, CSV_SEARCH_CHARS))",
      "right" : "if (StringUtils.containsNone(str, CSV_SEARCH_CHARS))",
      "info" : "IfStatement[28110-28198]:IfStatement[28300-28388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28163-28198]:Block[28353-28388]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[28177-28188]:ReturnStatement[28367-28378]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28207-28523]:TryStatement[28397-28713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28211-28350]:Block[28401-28540]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[28225-28266]:VariableDeclarationStatement[28415-28456]"
    }, {
      "left" : "escapeCsv(writer, str);",
      "right" : "escapeCsv(writer, str);",
      "info" : "ExpressionStatement[28279-28302]:ExpressionStatement[28469-28492]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[28315-28340]:ReturnStatement[28505-28530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28375-28523]:Block[28565-28713]"
    }, {
      "left" : "ioe.printStackTrace();",
      "right" : "ioe.printStackTrace();",
      "info" : "ExpressionStatement[28466-28488]:ExpressionStatement[28656-28678]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28501-28513]:ReturnStatement[28691-28703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29617-30084]:Block[29807-30274]"
    }, {
      "left" : "if (StringUtils.containsNone(str, CSV_SEARCH_CHARS))",
      "right" : "if (StringUtils.containsNone(str, CSV_SEARCH_CHARS))",
      "info" : "IfStatement[29627-29788]:IfStatement[29817-29978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29680-29788]:Block[29870-29978]"
    }, {
      "left" : "if (str != null)",
      "right" : "if (str != null)",
      "info" : "IfStatement[29694-29758]:IfStatement[29884-29948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29711-29758]:Block[29901-29948]"
    }, {
      "left" : "out.write(str);",
      "right" : "out.write(str);",
      "info" : "ExpressionStatement[29729-29744]:ExpressionStatement[29919-29934]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29771-29778]:ReturnStatement[29961-29968]"
    }, {
      "left" : "out.write(CSV_QUOTE);",
      "right" : "out.write(CSV_QUOTE);",
      "info" : "ExpressionStatement[29797-29818]:ExpressionStatement[29987-30008]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[29827-30048]:ForStatement[30017-30238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29866-30048]:Block[30056-30238]"
    }, {
      "left" : "char c = str.charAt(i);",
      "right" : "char c = str.charAt(i);",
      "info" : "VariableDeclarationStatement[29880-29903]:VariableDeclarationStatement[30070-30093]"
    }, {
      "left" : "if (c == CSV_QUOTE)",
      "right" : "if (c == CSV_QUOTE)",
      "info" : "IfStatement[29916-30012]:IfStatement[30106-30202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29936-30012]:Block[30126-30202]"
    }, {
      "left" : "out.write(CSV_QUOTE);",
      "right" : "out.write(CSV_QUOTE);",
      "info" : "ExpressionStatement[29954-29975]:ExpressionStatement[30144-30165]"
    }, {
      "left" : "out.write(c);",
      "right" : "out.write(c);",
      "info" : "ExpressionStatement[30025-30038]:ExpressionStatement[30215-30228]"
    }, {
      "left" : "out.write(CSV_QUOTE);",
      "right" : "out.write(CSV_QUOTE);",
      "info" : "ExpressionStatement[30057-30078]:ExpressionStatement[30247-30268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31122-31518]:Block[31312-31708]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[31132-31185]:IfStatement[31322-31375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31149-31185]:Block[31339-31375]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31163-31175]:ReturnStatement[31353-31365]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31194-31512]:TryStatement[31384-31702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31198-31339]:Block[31388-31529]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[31212-31253]:VariableDeclarationStatement[31402-31443]"
    }, {
      "left" : "unescapeCsv(writer, str);",
      "right" : "unescapeCsv(writer, str);",
      "info" : "ExpressionStatement[31266-31291]:ExpressionStatement[31456-31481]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[31304-31329]:ReturnStatement[31494-31519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31364-31512]:Block[31554-31702]"
    }, {
      "left" : "ioe.printStackTrace();",
      "right" : "ioe.printStackTrace();",
      "info" : "ExpressionStatement[31455-31477]:ExpressionStatement[31645-31667]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31490-31502]:ReturnStatement[31680-31692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32671-33310]:Block[32861-33500]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[32681-32729]:IfStatement[32871-32919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32698-32729]:Block[32888-32919]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32712-32719]:ReturnStatement[32902-32909]"
    }, {
      "left" : "if (str.length() < 2)",
      "right" : "if (str.length() < 2)",
      "info" : "IfStatement[32738-32819]:IfStatement[32928-33009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32760-32819]:Block[32950-33009]"
    }, {
      "left" : "out.write(str);",
      "right" : "out.write(str);",
      "info" : "ExpressionStatement[32774-32789]:ExpressionStatement[32964-32979]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32802-32809]:ReturnStatement[32992-32999]"
    }, {
      "left" : "if ( str.charAt(0) != CSV_QUOTE || str.charAt(str.length() - 1) != CSV_QUOTE)",
      "right" : "if ( str.charAt(0) != CSV_QUOTE || str.charAt(str.length() - 1) != CSV_QUOTE)",
      "info" : "IfStatement[32828-32966]:IfStatement[33018-33156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32907-32966]:Block[33097-33156]"
    }, {
      "left" : "out.write(str);",
      "right" : "out.write(str);",
      "info" : "ExpressionStatement[32921-32936]:ExpressionStatement[33111-33126]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32949-32956]:ReturnStatement[33139-33146]"
    }, {
      "left" : "String quoteless = str.substring(1, str.length() - 1);",
      "right" : "String quoteless = str.substring(1, str.length() - 1);",
      "info" : "VariableDeclarationStatement[33000-33054]:VariableDeclarationStatement[33190-33244]"
    }, {
      "left" : "if ( StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS))",
      "right" : "if ( StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS))",
      "info" : "IfStatement[33064-33279]:IfStatement[33254-33469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33124-33279]:Block[33314-33469]"
    }, {
      "left" : "str = StringUtils.replace(quoteless, CSV_QUOTE_STR + CSV_QUOTE_STR, CSV_QUOTE_STR);",
      "right" : "str = StringUtils.replace(quoteless, CSV_QUOTE_STR + CSV_QUOTE_STR, CSV_QUOTE_STR);",
      "info" : "ExpressionStatement[33186-33269]:ExpressionStatement[33376-33459]"
    }, {
      "left" : "out.write(str);",
      "right" : "out.write(str);",
      "info" : "ExpressionStatement[33289-33304]:ExpressionStatement[33479-33494]"
    } ]
  },
  "interFileMappings" : { }
}