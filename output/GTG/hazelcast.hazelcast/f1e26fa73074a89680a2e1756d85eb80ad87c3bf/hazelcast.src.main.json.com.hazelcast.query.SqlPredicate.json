{
  "matchedElements" : [
 {
    "left" : "class : SqlPredicate",
    "right" : "class : SqlPredicate",
    "info" : "TypeDeclaration[1738-13743]:TypeDeclaration[1736-13741]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[1917-1964]:FieldDeclaration[1915-1962]"
  }, {
    "left" : "predicate",
    "right" : "predicate",
    "info" : "FieldDeclaration[1970-2008]:FieldDeclaration[1968-2006]"
  }, {
    "left" : "sql",
    "right" : "sql",
    "info" : "FieldDeclaration[2013-2032]:FieldDeclaration[2011-2030]"
  }, {
    "left" : "public SqlPredicate(sql )",
    "right" : "public SqlPredicate(sql )",
    "info" : "MethodDeclaration[2038-2143]:MethodDeclaration[2036-2141]"
  }, {
    "left" : "public SqlPredicate()",
    "right" : "public SqlPredicate()",
    "info" : "MethodDeclaration[2149-2178]:MethodDeclaration[2147-2176]"
  }, {
    "left" : "public apply(mapEntry ) : boolean",
    "right" : "public apply(mapEntry ) : boolean",
    "info" : "MethodDeclaration[2184-2288]:MethodDeclaration[2182-2286]"
  }, {
    "left" : "public isIndexed(queryContext ) : boolean",
    "right" : "public isIndexed(queryContext ) : boolean",
    "info" : "MethodDeclaration[2294-2533]:MethodDeclaration[2292-2531]"
  }, {
    "left" : "public filter(queryContext ) : ",
    "right" : "public filter(queryContext ) : ",
    "info" : "MethodDeclaration[2539-2692]:MethodDeclaration[2537-2690]"
  }, {
    "left" : "public writeData(out ) : void",
    "right" : "public writeData(out ) : void",
    "info" : "MethodDeclaration[2698-2809]:MethodDeclaration[2696-2807]"
  }, {
    "left" : "public readData(in ) : void",
    "right" : "public readData(in ) : void",
    "info" : "MethodDeclaration[2815-2966]:MethodDeclaration[2813-2964]"
  }, {
    "left" : "private getApostropheIndex(str , start int) : int",
    "right" : "private getApostropheIndex(str , start int) : int",
    "info" : "MethodDeclaration[2972-3074]:MethodDeclaration[2970-3072]"
  }, {
    "left" : "private getApostropheIndexIgnoringDoubles(str , start int) : int",
    "right" : "private getApostropheIndexIgnoringDoubles(str , start int) : int",
    "info" : "MethodDeclaration[3080-3406]:MethodDeclaration[3078-3404]"
  }, {
    "left" : "private removeEscapes(phrase ) : ",
    "right" : "private removeEscapes(phrase ) : ",
    "info" : "MethodDeclaration[3412-3538]:MethodDeclaration[3410-3536]"
  }, {
    "left" : "private createPredicate(sql ) : ",
    "right" : "private createPredicate(sql ) : ",
    "info" : "MethodDeclaration[3544-11846]:MethodDeclaration[3542-11844]"
  }, {
    "left" : "private validateOperandPosition(pos int) : void",
    "right" : "private validateOperandPosition(pos int) : void",
    "info" : "MethodDeclaration[11852-12008]:MethodDeclaration[11850-12006]"
  }, {
    "left" : "private toValue(key , phrases ...) : ",
    "right" : "private toValue(key , phrases ...) : ",
    "info" : "MethodDeclaration[12014-12372]:MethodDeclaration[12012-12370]"
  }, {
    "left" : "private toValue(keys , phrases ...) : ",
    "right" : "private toValue(keys , phrases ...) : ",
    "info" : "MethodDeclaration[12378-12680]:MethodDeclaration[12376-12678]"
  }, {
    "left" : "private setOrAdd(tokens , position int, predicate ) : void",
    "right" : "private setOrAdd(tokens , position int, predicate ) : void",
    "info" : "MethodDeclaration[12686-12904]:MethodDeclaration[12684-12902]"
  }, {
    "left" : "private eval(statement ) : ",
    "right" : "private eval(statement ) : ",
    "info" : "MethodDeclaration[12910-13124]:MethodDeclaration[12908-13122]"
  }, {
    "left" : "private readObject(in ) : void",
    "right" : "private readObject(in ) : void",
    "info" : "MethodDeclaration[13130-13288]:MethodDeclaration[13128-13286]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[13294-13377]:MethodDeclaration[13292-13375]"
  }, {
    "left" : "public equals(o ) : boolean",
    "right" : "public equals(o ) : boolean",
    "info" : "MethodDeclaration[13383-13661]:MethodDeclaration[13381-13659]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[13667-13741]:MethodDeclaration[13665-13739]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1827-1833]:Modifier[1825-1831]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1834-1839]:TYPE_DECLARATION_KIND[1832-1837]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2038-2044]:Modifier[2036-2042]"
  }, {
    "left" : "SqlPredicate",
    "right" : "SqlPredicate",
    "info" : "SimpleName[2045-2057]:SimpleName[2043-2055]"
  }, {
    "left" : "String sql",
    "right" : "String sql",
    "info" : "SingleVariableDeclaration[2058-2068]:SingleVariableDeclaration[2056-2066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2070-2143]:Block[2068-2141]"
  }, {
    "left" : "this.sql = sql;",
    "right" : "this.sql = sql;",
    "info" : "ExpressionStatement[2080-2095]:ExpressionStatement[2078-2093]"
  }, {
    "left" : "predicate = createPredicate(sql);",
    "right" : "predicate = createPredicate(sql);",
    "info" : "ExpressionStatement[2104-2137]:ExpressionStatement[2102-2135]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2149-2155]:Modifier[2147-2153]"
  }, {
    "left" : "SqlPredicate",
    "right" : "SqlPredicate",
    "info" : "SimpleName[2156-2168]:SimpleName[2154-2166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2171-2178]:Block[2169-2176]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2184-2193]:MarkerAnnotation[2182-2191]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2198-2204]:Modifier[2196-2202]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2205-2212]:PrimitiveType[2203-2210]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[2213-2218]:SimpleName[2211-2216]"
  }, {
    "left" : "Map.Entry mapEntry",
    "right" : "Map.Entry mapEntry",
    "info" : "SingleVariableDeclaration[2219-2237]:SingleVariableDeclaration[2217-2235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2239-2288]:Block[2237-2286]"
  }, {
    "left" : "return predicate.apply(mapEntry);",
    "right" : "return predicate.apply(mapEntry);",
    "info" : "ReturnStatement[2249-2282]:ReturnStatement[2247-2280]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2294-2303]:MarkerAnnotation[2292-2301]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2308-2314]:Modifier[2306-2312]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2315-2322]:PrimitiveType[2313-2320]"
  }, {
    "left" : "isIndexed",
    "right" : "isIndexed",
    "info" : "SimpleName[2323-2332]:SimpleName[2321-2330]"
  }, {
    "left" : "QueryContext queryContext",
    "right" : "QueryContext queryContext",
    "info" : "SingleVariableDeclaration[2333-2358]:SingleVariableDeclaration[2331-2356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2360-2533]:Block[2358-2531]"
  }, {
    "left" : "if (predicate instanceof IndexAwarePredicate)",
    "right" : "if (predicate instanceof IndexAwarePredicate)",
    "info" : "IfStatement[2370-2505]:IfStatement[2368-2503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2416-2505]:Block[2414-2503]"
  }, {
    "left" : "return ((IndexAwarePredicate) predicate).isIndexed(queryContext);",
    "right" : "return ((IndexAwarePredicate) predicate).isIndexed(queryContext);",
    "info" : "ReturnStatement[2430-2495]:ReturnStatement[2428-2493]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2514-2527]:ReturnStatement[2512-2525]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2539-2548]:MarkerAnnotation[2537-2546]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2553-2559]:Modifier[2551-2557]"
  }, {
    "left" : "Set<QueryableEntry>",
    "right" : "Set<QueryableEntry>",
    "info" : "ParameterizedType[2560-2579]:ParameterizedType[2558-2577]"
  }, {
    "left" : "filter",
    "right" : "filter",
    "info" : "SimpleName[2580-2586]:SimpleName[2578-2584]"
  }, {
    "left" : "QueryContext queryContext",
    "right" : "QueryContext queryContext",
    "info" : "SingleVariableDeclaration[2587-2612]:SingleVariableDeclaration[2585-2610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2614-2692]:Block[2612-2690]"
  }, {
    "left" : "return ((IndexAwarePredicate) predicate).filter(queryContext);",
    "right" : "return ((IndexAwarePredicate) predicate).filter(queryContext);",
    "info" : "ReturnStatement[2624-2686]:ReturnStatement[2622-2684]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2698-2707]:MarkerAnnotation[2696-2705]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2712-2718]:Modifier[2710-2716]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2719-2723]:PrimitiveType[2717-2721]"
  }, {
    "left" : "writeData",
    "right" : "writeData",
    "info" : "SimpleName[2724-2733]:SimpleName[2722-2731]"
  }, {
    "left" : "ObjectDataOutput out",
    "right" : "ObjectDataOutput out",
    "info" : "SingleVariableDeclaration[2734-2754]:SingleVariableDeclaration[2732-2752]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[2763-2774]:SimpleType[2761-2772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2775-2809]:Block[2773-2807]"
  }, {
    "left" : "out.writeUTF(sql);",
    "right" : "out.writeUTF(sql);",
    "info" : "ExpressionStatement[2785-2803]:ExpressionStatement[2783-2801]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2815-2824]:MarkerAnnotation[2813-2822]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2829-2835]:Modifier[2827-2833]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2836-2840]:PrimitiveType[2834-2838]"
  }, {
    "left" : "readData",
    "right" : "readData",
    "info" : "SimpleName[2841-2849]:SimpleName[2839-2847]"
  }, {
    "left" : "ObjectDataInput in",
    "right" : "ObjectDataInput in",
    "info" : "SingleVariableDeclaration[2850-2868]:SingleVariableDeclaration[2848-2866]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[2877-2888]:SimpleType[2875-2886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2889-2966]:Block[2887-2964]"
  }, {
    "left" : "sql = in.readUTF();",
    "right" : "sql = in.readUTF();",
    "info" : "ExpressionStatement[2899-2918]:ExpressionStatement[2897-2916]"
  }, {
    "left" : "predicate = createPredicate(sql);",
    "right" : "predicate = createPredicate(sql);",
    "info" : "ExpressionStatement[2927-2960]:ExpressionStatement[2925-2958]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2972-2979]:Modifier[2970-2977]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[2980-2983]:PrimitiveType[2978-2981]"
  }, {
    "left" : "getApostropheIndex",
    "right" : "getApostropheIndex",
    "info" : "SimpleName[2984-3002]:SimpleName[2982-3000]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[3003-3013]:SingleVariableDeclaration[3001-3011]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[3015-3024]:SingleVariableDeclaration[3013-3022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3026-3074]:Block[3024-3072]"
  }, {
    "left" : "return str.indexOf('\\'', start);",
    "right" : "return str.indexOf('\\'', start);",
    "info" : "ReturnStatement[3036-3068]:ReturnStatement[3034-3066]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3080-3087]:Modifier[3078-3085]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[3088-3091]:PrimitiveType[3086-3089]"
  }, {
    "left" : "getApostropheIndexIgnoringDoubles",
    "right" : "getApostropheIndexIgnoringDoubles",
    "info" : "SimpleName[3092-3125]:SimpleName[3090-3123]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[3126-3136]:SingleVariableDeclaration[3124-3134]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[3138-3147]:SingleVariableDeclaration[3136-3145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3149-3406]:Block[3147-3404]"
  }, {
    "left" : "int i = str.indexOf('\\'', start);",
    "right" : "int i = str.indexOf('\\'', start);",
    "info" : "VariableDeclarationStatement[3159-3192]:VariableDeclarationStatement[3157-3190]"
  }, {
    "left" : "int j = str.indexOf('\\'', i + 1);",
    "right" : "int j = str.indexOf('\\'', i + 1);",
    "info" : "VariableDeclarationStatement[3201-3234]:VariableDeclarationStatement[3199-3232]"
  }, {
    "left" : "while (i == j - 1)",
    "right" : "while (i == j - 1)",
    "info" : "WhileStatement[3268-3382]:WhileStatement[3266-3380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3287-3382]:Block[3285-3380]"
  }, {
    "left" : "i = str.indexOf('\\'', j + 1);",
    "right" : "i = str.indexOf('\\'', j + 1);",
    "info" : "ExpressionStatement[3301-3330]:ExpressionStatement[3299-3328]"
  }, {
    "left" : "j = str.indexOf('\\'', i + 1);",
    "right" : "j = str.indexOf('\\'', i + 1);",
    "info" : "ExpressionStatement[3343-3372]:ExpressionStatement[3341-3370]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[3391-3400]:ReturnStatement[3389-3398]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3412-3419]:Modifier[3410-3417]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3420-3426]:SimpleType[3418-3424]"
  }, {
    "left" : "removeEscapes",
    "right" : "removeEscapes",
    "info" : "SimpleName[3427-3440]:SimpleName[3425-3438]"
  }, {
    "left" : "String phrase",
    "right" : "String phrase",
    "info" : "SingleVariableDeclaration[3441-3454]:SingleVariableDeclaration[3439-3452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3456-3538]:Block[3454-3536]"
  }, {
    "left" : "return (phrase.length() > 2) ? phrase.replace(\"''\", \"'\") : phrase;",
    "right" : "return (phrase.length() > 2) ? phrase.replace(\"''\", \"'\") : phrase;",
    "info" : "ReturnStatement[3466-3532]:ReturnStatement[3464-3530]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3544-3551]:Modifier[3542-3549]"
  }, {
    "left" : "Predicate",
    "right" : "Predicate",
    "info" : "SimpleType[3552-3561]:SimpleType[3550-3559]"
  }, {
    "left" : "createPredicate",
    "right" : "createPredicate",
    "info" : "SimpleName[3562-3577]:SimpleName[3560-3575]"
  }, {
    "left" : "String sql",
    "right" : "String sql",
    "info" : "SingleVariableDeclaration[3578-3588]:SingleVariableDeclaration[3576-3586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3590-11846]:Block[3588-11844]"
  }, {
    "left" : "String paramSql = sql;",
    "right" : "String paramSql = sql;",
    "info" : "VariableDeclarationStatement[3600-3622]:VariableDeclarationStatement[3598-3620]"
  }, {
    "left" : "Map<String, String> mapPhrases = new HashMap<String, String>(1);",
    "right" : "Map<String, String> mapPhrases = new HashMap<String, String>(1);",
    "info" : "VariableDeclarationStatement[3631-3695]:VariableDeclarationStatement[3629-3693]"
  }, {
    "left" : "int apoIndex = getApostropheIndex(paramSql, 0);",
    "right" : "int apoIndex = getApostropheIndex(paramSql, 0);",
    "info" : "VariableDeclarationStatement[3704-3751]:VariableDeclarationStatement[3702-3749]"
  }, {
    "left" : "if (apoIndex != -1)",
    "right" : "if (apoIndex != -1)",
    "info" : "IfStatement[3760-4707]:IfStatement[3758-4705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3780-4707]:Block[3778-4705]"
  }, {
    "left" : "int phraseId = 0;",
    "right" : "int phraseId = 0;",
    "info" : "VariableDeclarationStatement[3794-3811]:VariableDeclarationStatement[3792-3809]"
  }, {
    "left" : "StringBuilder newSql = new StringBuilder();",
    "right" : "StringBuilder newSql = new StringBuilder();",
    "info" : "VariableDeclarationStatement[3824-3867]:VariableDeclarationStatement[3822-3865]"
  }, {
    "left" : "while (apoIndex != -1)",
    "right" : "while (apoIndex != -1)",
    "info" : "WhileStatement[3880-4618]:WhileStatement[3878-4616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3903-4618]:Block[3901-4616]"
  }, {
    "left" : "phraseId++;",
    "right" : "phraseId++;",
    "info" : "ExpressionStatement[3921-3932]:ExpressionStatement[3919-3930]"
  }, {
    "left" : "int start = apoIndex + 1;",
    "right" : "int start = apoIndex + 1;",
    "info" : "VariableDeclarationStatement[3949-3974]:VariableDeclarationStatement[3947-3972]"
  }, {
    "left" : "int end = getApostropheIndexIgnoringDoubles(paramSql, apoIndex + 1);",
    "right" : "int end = getApostropheIndexIgnoringDoubles(paramSql, apoIndex + 1);",
    "info" : "VariableDeclarationStatement[3991-4059]:VariableDeclarationStatement[3989-4057]"
  }, {
    "left" : "if (end == -1)",
    "right" : "if (end == -1)",
    "info" : "IfStatement[4076-4178]:IfStatement[4074-4176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4091-4178]:Block[4089-4176]"
  }, {
    "left" : "throw new RuntimeException(\"Missing ' in sql\");",
    "right" : "throw new RuntimeException(\"Missing ' in sql\");",
    "info" : "ThrowStatement[4113-4160]:ThrowStatement[4111-4158]"
  }, {
    "left" : "String phrase = removeEscapes(paramSql.substring(start, end));",
    "right" : "String phrase = removeEscapes(paramSql.substring(start, end));",
    "info" : "VariableDeclarationStatement[4195-4257]:VariableDeclarationStatement[4193-4255]"
  }, {
    "left" : "String key = \"$\" + phraseId;",
    "right" : "String key = \"$\" + phraseId;",
    "info" : "VariableDeclarationStatement[4275-4303]:VariableDeclarationStatement[4273-4301]"
  }, {
    "left" : "mapPhrases.put(key, phrase);",
    "right" : "mapPhrases.put(key, phrase);",
    "info" : "ExpressionStatement[4320-4348]:ExpressionStatement[4318-4346]"
  }, {
    "left" : "String before = paramSql.substring(0, apoIndex);",
    "right" : "String before = paramSql.substring(0, apoIndex);",
    "info" : "VariableDeclarationStatement[4365-4413]:VariableDeclarationStatement[4363-4411]"
  }, {
    "left" : "paramSql = paramSql.substring(end + 1);",
    "right" : "paramSql = paramSql.substring(end + 1);",
    "info" : "ExpressionStatement[4430-4469]:ExpressionStatement[4428-4467]"
  }, {
    "left" : "newSql.append(before);",
    "right" : "newSql.append(before);",
    "info" : "ExpressionStatement[4486-4508]:ExpressionStatement[4484-4506]"
  }, {
    "left" : "newSql.append(key);",
    "right" : "newSql.append(key);",
    "info" : "ExpressionStatement[4525-4544]:ExpressionStatement[4523-4542]"
  }, {
    "left" : "apoIndex = getApostropheIndex(paramSql, 0);",
    "right" : "apoIndex = getApostropheIndex(paramSql, 0);",
    "info" : "ExpressionStatement[4561-4604]:ExpressionStatement[4559-4602]"
  }, {
    "left" : "newSql.append(paramSql);",
    "right" : "newSql.append(paramSql);",
    "info" : "ExpressionStatement[4631-4655]:ExpressionStatement[4629-4653]"
  }, {
    "left" : "paramSql = newSql.toString();",
    "right" : "paramSql = newSql.toString();",
    "info" : "ExpressionStatement[4668-4697]:ExpressionStatement[4666-4695]"
  }, {
    "left" : "Parser parser = new Parser();",
    "right" : "Parser parser = new Parser();",
    "info" : "VariableDeclarationStatement[4716-4745]:VariableDeclarationStatement[4714-4743]"
  }, {
    "left" : "List<String> sqlTokens = parser.toPrefix(paramSql);",
    "right" : "List<String> sqlTokens = parser.toPrefix(paramSql);",
    "info" : "VariableDeclarationStatement[4754-4805]:VariableDeclarationStatement[4752-4803]"
  }, {
    "left" : "List<Object> tokens = new ArrayList<Object>(sqlTokens);",
    "right" : "List<Object> tokens = new ArrayList<Object>(sqlTokens);",
    "info" : "VariableDeclarationStatement[4814-4869]:VariableDeclarationStatement[4812-4867]"
  }, {
    "left" : "if (tokens.size() == 0)",
    "right" : "if (tokens.size() == 0)",
    "info" : "IfStatement[4878-4988]:IfStatement[4876-4986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4902-4988]:Block[4900-4986]"
  }, {
    "left" : "throw new RuntimeException(\"Invalid SQL: [
\" + paramSql + \"]\");",
    "right" : "throw new RuntimeException(\"Invalid SQL: [
\" + paramSql + \"]\");",
    "info" : "ThrowStatement[4916-4978]:ThrowStatement[4914-4976]"
  }, {
    "left" : "if (tokens.size() == 1)",
    "right" : "if (tokens.size() == 1)",
    "info" : "IfStatement[4997-5072]:IfStatement[4995-5070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5021-5072]:Block[5019-5070]"
  }, {
    "left" : "return eval(tokens.get(0));",
    "right" : "return eval(tokens.get(0));",
    "info" : "ReturnStatement[5035-5062]:ReturnStatement[5033-5060]"
  }, {
    "left" : "root:\n        while (tokens.size() > 1) {\n            boolean foundOperand = false;\n            for (int i = 0; i < tokens.size(); i++) {\n                Object tokenObj = tokens.get(i);\n                if (tokenObj instanceof String && parser.isOperand((String) tokenObj)) {\n                    String token = (String) tokenObj;\n                    if (\"=\".equals(token) || \"==\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, equal((String) first, (Comparable) second));\n                    } else if (\"!=\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, notEqual((String) first, (Comparable) second));\n                    } else if (\">\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, greaterThan((String) first, (Comparable) second));\n                    } else if (\">=\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, greaterEqual((String) first, (Comparable) second));\n                    } else if (\"<=\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, lessEqual((String) first, (Comparable) second));\n                    } else if (\"<\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, lessThan((String) first, (Comparable) second));\n                    } else if (\"LIKE\".equalsIgnoreCase(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, like((String) first, (String) second));\n                    } else if (\"ILIKE\".equalsIgnoreCase(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, ilike((String) first, (String) second));\n                    } else if (\"REGEX\".equalsIgnoreCase(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, regex((String) first, (String) second));\n                    } else if (\"IN\".equalsIgnoreCase(token)) {\n                        int position = i - 2;\n                        validateOperandPosition(position);\n                        Object exp = toValue(tokens.remove(position), mapPhrases);\n                        String[] values = toValue(((String) tokens.remove(position)).split(\",\"), mapPhrases);\n                        setOrAdd(tokens, position, Predicates.in((String) exp, values));\n                    } else if (\"NOT\".equalsIgnoreCase(token)) {\n                        int position = i - 1;\n                        validateOperandPosition(position);\n                        Object exp = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, Predicates.not(eval(exp)));\n                    } else if (\"BETWEEN\".equalsIgnoreCase(token)) {\n                        int position = i - 3;\n                        validateOperandPosition(position);\n                        Object expression = tokens.remove(position);\n                        Object from = toValue(tokens.remove(position), mapPhrases);\n                        Object to = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, between((String) expression, (Comparable) from, (Comparable) to));\n                    } else if (\"AND\".equalsIgnoreCase(token)) {\n                        int position = i - 2;\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, and(eval(first), eval(second)));\n                    } else if (\"OR\".equalsIgnoreCase(token)) {\n                        int position = i - 2;\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, or(eval(first), eval(second)));\n                    } else {\n                        throw new RuntimeException(\"Unknown token \" + token);\n                    }\n                    continue root;\n                }\n            }\n            if (!foundOperand) {\n                throw new RuntimeException(\"Invalid SQL: [
\" + paramSql + \"]\");\n            }\n        }",
    "right" : "root:\n        while (tokens.size() > 1) {\n            boolean foundOperand = false;\n            for (int i = 0; i < tokens.size(); i++) {\n                Object tokenObj = tokens.get(i);\n                if (tokenObj instanceof String && parser.isOperand((String) tokenObj)) {\n                    String token = (String) tokenObj;\n                    if (\"=\".equals(token) || \"==\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, equal((String) first, (Comparable) second));\n                    } else if (\"!=\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, notEqual((String) first, (Comparable) second));\n                    } else if (\">\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, greaterThan((String) first, (Comparable) second));\n                    } else if (\">=\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, greaterEqual((String) first, (Comparable) second));\n                    } else if (\"<=\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, lessEqual((String) first, (Comparable) second));\n                    } else if (\"<\".equals(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, lessThan((String) first, (Comparable) second));\n                    } else if (\"LIKE\".equalsIgnoreCase(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, like((String) first, (String) second));\n                    } else if (\"ILIKE\".equalsIgnoreCase(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, ilike((String) first, (String) second));\n                    } else if (\"REGEX\".equalsIgnoreCase(token)) {\n                        int position = (i - 2);\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, regex((String) first, (String) second));\n                    } else if (\"IN\".equalsIgnoreCase(token)) {\n                        int position = i - 2;\n                        validateOperandPosition(position);\n                        Object exp = toValue(tokens.remove(position), mapPhrases);\n                        String[] values = toValue(((String) tokens.remove(position)).split(\",\"), mapPhrases);\n                        setOrAdd(tokens, position, Predicates.in((String) exp, values));\n                    } else if (\"NOT\".equalsIgnoreCase(token)) {\n                        int position = i - 1;\n                        validateOperandPosition(position);\n                        Object exp = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, Predicates.not(eval(exp)));\n                    } else if (\"BETWEEN\".equalsIgnoreCase(token)) {\n                        int position = i - 3;\n                        validateOperandPosition(position);\n                        Object expression = tokens.remove(position);\n                        Object from = toValue(tokens.remove(position), mapPhrases);\n                        Object to = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, between((String) expression, (Comparable) from, (Comparable) to));\n                    } else if (\"AND\".equalsIgnoreCase(token)) {\n                        int position = i - 2;\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, and(eval(first), eval(second)));\n                    } else if (\"OR\".equalsIgnoreCase(token)) {\n                        int position = i - 2;\n                        validateOperandPosition(position);\n                        Object first = toValue(tokens.remove(position), mapPhrases);\n                        Object second = toValue(tokens.remove(position), mapPhrases);\n                        setOrAdd(tokens, position, or(eval(first), eval(second)));\n                    } else {\n                        throw new RuntimeException(\"Unknown token \" + token);\n                    }\n                    continue root;\n                }\n            }\n            if (!foundOperand) {\n                throw new RuntimeException(\"Invalid SQL: [
\" + paramSql + \"]\");\n            }\n        }",
    "info" : "LabeledStatement[5081-11798]:LabeledStatement[5079-11796]"
  }, {
    "left" : "while (tokens.size() > 1)",
    "right" : "while (tokens.size() > 1)",
    "info" : "WhileStatement[5095-11798]:WhileStatement[5093-11796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5121-11798]:Block[5119-11796]"
  }, {
    "left" : "boolean foundOperand = false;",
    "right" : "boolean foundOperand = false;",
    "info" : "VariableDeclarationStatement[5135-5164]:VariableDeclarationStatement[5133-5162]"
  }, {
    "left" : "for (int i = 0; i < tokens.size(); i++)",
    "right" : "for (int i = 0; i < tokens.size(); i++)",
    "info" : "ForStatement[5177-11662]:ForStatement[5175-11660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5217-11662]:Block[5215-11660]"
  }, {
    "left" : "Object tokenObj = tokens.get(i);",
    "right" : "Object tokenObj = tokens.get(i);",
    "info" : "VariableDeclarationStatement[5235-5267]:VariableDeclarationStatement[5233-5265]"
  }, {
    "left" : "if (tokenObj instanceof String && parser.isOperand((String) tokenObj))",
    "right" : "if (tokenObj instanceof String && parser.isOperand((String) tokenObj))",
    "info" : "IfStatement[5284-11648]:IfStatement[5282-11646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5355-11648]:Block[5353-11646]"
  }, {
    "left" : "String token = (String) tokenObj;",
    "right" : "String token = (String) tokenObj;",
    "info" : "VariableDeclarationStatement[5377-5410]:VariableDeclarationStatement[5375-5408]"
  }, {
    "left" : "if (\"=\".equals(token) || \"==\".equals(token))",
    "right" : "if (\"=\".equals(token) || \"==\".equals(token))",
    "info" : "IfStatement[5431-11595]:IfStatement[5429-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5476-5873]:Block[5474-5871]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[5502-5525]:VariableDeclarationStatement[5500-5523]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[5550-5584]:ExpressionStatement[5548-5582]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[5609-5669]:VariableDeclarationStatement[5607-5667]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[5694-5755]:VariableDeclarationStatement[5692-5753]"
  }, {
    "left" : "setOrAdd(tokens, position, equal((String) first, (Comparable) second));",
    "right" : "setOrAdd(tokens, position, equal((String) first, (Comparable) second));",
    "info" : "ExpressionStatement[5780-5851]:ExpressionStatement[5778-5849]"
  }, {
    "left" : "if (\"!=\".equals(token))",
    "right" : "if (\"!=\".equals(token))",
    "info" : "IfStatement[5879-11595]:IfStatement[5877-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5903-6303]:Block[5901-6301]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[5929-5952]:VariableDeclarationStatement[5927-5950]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[5977-6011]:ExpressionStatement[5975-6009]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[6036-6096]:VariableDeclarationStatement[6034-6094]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[6121-6182]:VariableDeclarationStatement[6119-6180]"
  }, {
    "left" : "setOrAdd(tokens, position, notEqual((String) first, (Comparable) second));",
    "right" : "setOrAdd(tokens, position, notEqual((String) first, (Comparable) second));",
    "info" : "ExpressionStatement[6207-6281]:ExpressionStatement[6205-6279]"
  }, {
    "left" : "if (\">\".equals(token))",
    "right" : "if (\">\".equals(token))",
    "info" : "IfStatement[6309-11595]:IfStatement[6307-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6332-6735]:Block[6330-6733]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[6358-6381]:VariableDeclarationStatement[6356-6379]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[6406-6440]:ExpressionStatement[6404-6438]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[6465-6525]:VariableDeclarationStatement[6463-6523]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[6550-6611]:VariableDeclarationStatement[6548-6609]"
  }, {
    "left" : "setOrAdd(tokens, position, greaterThan((String) first, (Comparable) second));",
    "right" : "setOrAdd(tokens, position, greaterThan((String) first, (Comparable) second));",
    "info" : "ExpressionStatement[6636-6713]:ExpressionStatement[6634-6711]"
  }, {
    "left" : "if (\">=\".equals(token))",
    "right" : "if (\">=\".equals(token))",
    "info" : "IfStatement[6741-11595]:IfStatement[6739-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6765-7169]:Block[6763-7167]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[6791-6814]:VariableDeclarationStatement[6789-6812]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[6839-6873]:ExpressionStatement[6837-6871]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[6898-6958]:VariableDeclarationStatement[6896-6956]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[6983-7044]:VariableDeclarationStatement[6981-7042]"
  }, {
    "left" : "setOrAdd(tokens, position, greaterEqual((String) first, (Comparable) second));",
    "right" : "setOrAdd(tokens, position, greaterEqual((String) first, (Comparable) second));",
    "info" : "ExpressionStatement[7069-7147]:ExpressionStatement[7067-7145]"
  }, {
    "left" : "if (\"<=\".equals(token))",
    "right" : "if (\"<=\".equals(token))",
    "info" : "IfStatement[7175-11595]:IfStatement[7173-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7199-7600]:Block[7197-7598]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[7225-7248]:VariableDeclarationStatement[7223-7246]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[7273-7307]:ExpressionStatement[7271-7305]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[7332-7392]:VariableDeclarationStatement[7330-7390]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[7417-7478]:VariableDeclarationStatement[7415-7476]"
  }, {
    "left" : "setOrAdd(tokens, position, lessEqual((String) first, (Comparable) second));",
    "right" : "setOrAdd(tokens, position, lessEqual((String) first, (Comparable) second));",
    "info" : "ExpressionStatement[7503-7578]:ExpressionStatement[7501-7576]"
  }, {
    "left" : "if (\"<\".equals(token))",
    "right" : "if (\"<\".equals(token))",
    "info" : "IfStatement[7606-11595]:IfStatement[7604-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7629-8029]:Block[7627-8027]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[7655-7678]:VariableDeclarationStatement[7653-7676]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[7703-7737]:ExpressionStatement[7701-7735]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[7762-7822]:VariableDeclarationStatement[7760-7820]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[7847-7908]:VariableDeclarationStatement[7845-7906]"
  }, {
    "left" : "setOrAdd(tokens, position, lessThan((String) first, (Comparable) second));",
    "right" : "setOrAdd(tokens, position, lessThan((String) first, (Comparable) second));",
    "info" : "ExpressionStatement[7933-8007]:ExpressionStatement[7931-8005]"
  }, {
    "left" : "if (\"LIKE\".equalsIgnoreCase(token))",
    "right" : "if (\"LIKE\".equalsIgnoreCase(token))",
    "info" : "IfStatement[8035-11595]:IfStatement[8033-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8071-8463]:Block[8069-8461]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[8097-8120]:VariableDeclarationStatement[8095-8118]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[8145-8179]:ExpressionStatement[8143-8177]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[8204-8264]:VariableDeclarationStatement[8202-8262]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[8289-8350]:VariableDeclarationStatement[8287-8348]"
  }, {
    "left" : "setOrAdd(tokens, position, like((String) first, (String) second));",
    "right" : "setOrAdd(tokens, position, like((String) first, (String) second));",
    "info" : "ExpressionStatement[8375-8441]:ExpressionStatement[8373-8439]"
  }, {
    "left" : "if (\"ILIKE\".equalsIgnoreCase(token))",
    "right" : "if (\"ILIKE\".equalsIgnoreCase(token))",
    "info" : "IfStatement[8469-11595]:IfStatement[8467-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8506-8899]:Block[8504-8897]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[8532-8555]:VariableDeclarationStatement[8530-8553]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[8580-8614]:ExpressionStatement[8578-8612]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[8639-8699]:VariableDeclarationStatement[8637-8697]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[8724-8785]:VariableDeclarationStatement[8722-8783]"
  }, {
    "left" : "setOrAdd(tokens, position, ilike((String) first, (String) second));",
    "right" : "setOrAdd(tokens, position, ilike((String) first, (String) second));",
    "info" : "ExpressionStatement[8810-8877]:ExpressionStatement[8808-8875]"
  }, {
    "left" : "if (\"REGEX\".equalsIgnoreCase(token))",
    "right" : "if (\"REGEX\".equalsIgnoreCase(token))",
    "info" : "IfStatement[8905-11595]:IfStatement[8903-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8942-9335]:Block[8940-9333]"
  }, {
    "left" : "int position = (i - 2);",
    "right" : "int position = (i - 2);",
    "info" : "VariableDeclarationStatement[8968-8991]:VariableDeclarationStatement[8966-8989]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[9016-9050]:ExpressionStatement[9014-9048]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[9075-9135]:VariableDeclarationStatement[9073-9133]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[9160-9221]:VariableDeclarationStatement[9158-9219]"
  }, {
    "left" : "setOrAdd(tokens, position, regex((String) first, (String) second));",
    "right" : "setOrAdd(tokens, position, regex((String) first, (String) second));",
    "info" : "ExpressionStatement[9246-9313]:ExpressionStatement[9244-9311]"
  }, {
    "left" : "if (\"IN\".equalsIgnoreCase(token))",
    "right" : "if (\"IN\".equalsIgnoreCase(token))",
    "info" : "IfStatement[9341-11595]:IfStatement[9339-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9375-9785]:Block[9373-9783]"
  }, {
    "left" : "int position = i - 2;",
    "right" : "int position = i - 2;",
    "info" : "VariableDeclarationStatement[9401-9422]:VariableDeclarationStatement[9399-9420]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[9447-9481]:ExpressionStatement[9445-9479]"
  }, {
    "left" : "Object exp = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object exp = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[9506-9564]:VariableDeclarationStatement[9504-9562]"
  }, {
    "left" : "String[] values = toValue(((String) tokens.remove(position)).split(\",\"), mapPhrases);",
    "right" : "String[] values = toValue(((String) tokens.remove(position)).split(\",\"), mapPhrases);",
    "info" : "VariableDeclarationStatement[9589-9674]:VariableDeclarationStatement[9587-9672]"
  }, {
    "left" : "setOrAdd(tokens, position, Predicates.in((String) exp, values));",
    "right" : "setOrAdd(tokens, position, Predicates.in((String) exp, values));",
    "info" : "ExpressionStatement[9699-9763]:ExpressionStatement[9697-9761]"
  }, {
    "left" : "if (\"NOT\".equalsIgnoreCase(token))",
    "right" : "if (\"NOT\".equalsIgnoreCase(token))",
    "info" : "IfStatement[9791-11595]:IfStatement[9789-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9826-10116]:Block[9824-10114]"
  }, {
    "left" : "int position = i - 1;",
    "right" : "int position = i - 1;",
    "info" : "VariableDeclarationStatement[9852-9873]:VariableDeclarationStatement[9850-9871]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[9898-9932]:ExpressionStatement[9896-9930]"
  }, {
    "left" : "Object exp = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object exp = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[9957-10015]:VariableDeclarationStatement[9955-10013]"
  }, {
    "left" : "setOrAdd(tokens, position, Predicates.not(eval(exp)));",
    "right" : "setOrAdd(tokens, position, Predicates.not(eval(exp)));",
    "info" : "ExpressionStatement[10040-10094]:ExpressionStatement[10038-10092]"
  }, {
    "left" : "if (\"BETWEEN\".equalsIgnoreCase(token))",
    "right" : "if (\"BETWEEN\".equalsIgnoreCase(token))",
    "info" : "IfStatement[10122-11595]:IfStatement[10120-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10161-10642]:Block[10159-10640]"
  }, {
    "left" : "int position = i - 3;",
    "right" : "int position = i - 3;",
    "info" : "VariableDeclarationStatement[10187-10208]:VariableDeclarationStatement[10185-10206]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[10233-10267]:ExpressionStatement[10231-10265]"
  }, {
    "left" : "Object expression = tokens.remove(position);",
    "right" : "Object expression = tokens.remove(position);",
    "info" : "VariableDeclarationStatement[10292-10336]:VariableDeclarationStatement[10290-10334]"
  }, {
    "left" : "Object from = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object from = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[10361-10420]:VariableDeclarationStatement[10359-10418]"
  }, {
    "left" : "Object to = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object to = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[10445-10502]:VariableDeclarationStatement[10443-10500]"
  }, {
    "left" : "setOrAdd(tokens, position, between((String) expression, (Comparable) from, (Comparable) to));",
    "right" : "setOrAdd(tokens, position, between((String) expression, (Comparable) from, (Comparable) to));",
    "info" : "ExpressionStatement[10527-10620]:ExpressionStatement[10525-10618]"
  }, {
    "left" : "if (\"AND\".equalsIgnoreCase(token))",
    "right" : "if (\"AND\".equalsIgnoreCase(token))",
    "info" : "IfStatement[10648-11595]:IfStatement[10646-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10683-11066]:Block[10681-11064]"
  }, {
    "left" : "int position = i - 2;",
    "right" : "int position = i - 2;",
    "info" : "VariableDeclarationStatement[10709-10730]:VariableDeclarationStatement[10707-10728]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[10755-10789]:ExpressionStatement[10753-10787]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[10814-10874]:VariableDeclarationStatement[10812-10872]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[10899-10960]:VariableDeclarationStatement[10897-10958]"
  }, {
    "left" : "setOrAdd(tokens, position, and(eval(first), eval(second)));",
    "right" : "setOrAdd(tokens, position, and(eval(first), eval(second)));",
    "info" : "ExpressionStatement[10985-11044]:ExpressionStatement[10983-11042]"
  }, {
    "left" : "if (\"OR\".equalsIgnoreCase(token))",
    "right" : "if (\"OR\".equalsIgnoreCase(token))",
    "info" : "IfStatement[11072-11595]:IfStatement[11070-11593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11106-11488]:Block[11104-11486]"
  }, {
    "left" : "int position = i - 2;",
    "right" : "int position = i - 2;",
    "info" : "VariableDeclarationStatement[11132-11153]:VariableDeclarationStatement[11130-11151]"
  }, {
    "left" : "validateOperandPosition(position);",
    "right" : "validateOperandPosition(position);",
    "info" : "ExpressionStatement[11178-11212]:ExpressionStatement[11176-11210]"
  }, {
    "left" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object first = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[11237-11297]:VariableDeclarationStatement[11235-11295]"
  }, {
    "left" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "right" : "Object second = toValue(tokens.remove(position), mapPhrases);",
    "info" : "VariableDeclarationStatement[11322-11383]:VariableDeclarationStatement[11320-11381]"
  }, {
    "left" : "setOrAdd(tokens, position, or(eval(first), eval(second)));",
    "right" : "setOrAdd(tokens, position, or(eval(first), eval(second)));",
    "info" : "ExpressionStatement[11408-11466]:ExpressionStatement[11406-11464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11494-11595]:Block[11492-11593]"
  }, {
    "left" : "throw new RuntimeException(\"Unknown token \" + token);",
    "right" : "throw new RuntimeException(\"Unknown token \" + token);",
    "info" : "ThrowStatement[11520-11573]:ThrowStatement[11518-11571]"
  }, {
    "left" : "continue root;",
    "right" : "continue root;",
    "info" : "ContinueStatement[11616-11630]:ContinueStatement[11614-11628]"
  }, {
    "left" : "if (!foundOperand)",
    "right" : "if (!foundOperand)",
    "info" : "IfStatement[11675-11788]:IfStatement[11673-11786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11694-11788]:Block[11692-11786]"
  }, {
    "left" : "throw new RuntimeException(\"Invalid SQL: [
\" + paramSql + \"]\");",
    "right" : "throw new RuntimeException(\"Invalid SQL: [
\" + paramSql + \"]\");",
    "info" : "ThrowStatement[11712-11774]:ThrowStatement[11710-11772]"
  }, {
    "left" : "return (Predicate) tokens.get(0);",
    "right" : "return (Predicate) tokens.get(0);",
    "info" : "ReturnStatement[11807-11840]:ReturnStatement[11805-11838]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11852-11859]:Modifier[11850-11857]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11860-11864]:PrimitiveType[11858-11862]"
  }, {
    "left" : "validateOperandPosition",
    "right" : "validateOperandPosition",
    "info" : "SimpleName[11865-11888]:SimpleName[11863-11886]"
  }, {
    "left" : "int pos",
    "right" : "int pos",
    "info" : "SingleVariableDeclaration[11889-11896]:SingleVariableDeclaration[11887-11894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11898-12008]:Block[11896-12006]"
  }, {
    "left" : "if (pos < 0)",
    "right" : "if (pos < 0)",
    "info" : "IfStatement[11908-12002]:IfStatement[11906-12000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11921-12002]:Block[11919-12000]"
  }, {
    "left" : "throw new RuntimeException(\"Invalid SQL: [
\" + sql + \"]\");",
    "right" : "throw new RuntimeException(\"Invalid SQL: [
\" + sql + \"]\");",
    "info" : "ThrowStatement[11935-11992]:ThrowStatement[11933-11990]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12014-12021]:Modifier[12012-12019]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[12022-12028]:SimpleType[12020-12026]"
  }, {
    "left" : "toValue",
    "right" : "toValue",
    "info" : "SimpleName[12029-12036]:SimpleName[12027-12034]"
  }, {
    "left" : "final Object key",
    "right" : "final Object key",
    "info" : "SingleVariableDeclaration[12037-12053]:SingleVariableDeclaration[12035-12051]"
  }, {
    "left" : "final Map<String, String> phrases",
    "right" : "final Map<String, String> phrases",
    "info" : "SingleVariableDeclaration[12055-12088]:SingleVariableDeclaration[12053-12086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12090-12372]:Block[12088-12370]"
  }, {
    "left" : "final String value = phrases.get(key);",
    "right" : "final String value = phrases.get(key);",
    "info" : "VariableDeclarationStatement[12100-12138]:VariableDeclarationStatement[12098-12136]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[12147-12366]:IfStatement[12145-12364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12166-12203]:Block[12164-12201]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[12180-12193]:ReturnStatement[12178-12191]"
  }, {
    "left" : "if (key instanceof String && (\"null\".equalsIgnoreCase((String) key)))",
    "right" : "if (key instanceof String && (\"null\".equalsIgnoreCase((String) key)))",
    "info" : "IfStatement[12209-12366]:IfStatement[12207-12364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12279-12325]:Block[12277-12323]"
  }, {
    "left" : "return IndexImpl.NULL;",
    "right" : "return IndexImpl.NULL;",
    "info" : "ReturnStatement[12293-12315]:ReturnStatement[12291-12313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12331-12366]:Block[12329-12364]"
  }, {
    "left" : "return key;",
    "right" : "return key;",
    "info" : "ReturnStatement[12345-12356]:ReturnStatement[12343-12354]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12378-12385]:Modifier[12376-12383]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[12386-12394]:ArrayType[12384-12392]"
  }, {
    "left" : "toValue",
    "right" : "toValue",
    "info" : "SimpleName[12395-12402]:SimpleName[12393-12400]"
  }, {
    "left" : "final String[] keys",
    "right" : "final String[] keys",
    "info" : "SingleVariableDeclaration[12403-12422]:SingleVariableDeclaration[12401-12420]"
  }, {
    "left" : "final Map<String, String> phrases",
    "right" : "final Map<String, String> phrases",
    "info" : "SingleVariableDeclaration[12424-12457]:SingleVariableDeclaration[12422-12455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12459-12680]:Block[12457-12678]"
  }, {
    "left" : "for (int i = 0; i < keys.length; i++)",
    "right" : "for (int i = 0; i < keys.length; i++)",
    "info" : "ForStatement[12469-12653]:ForStatement[12467-12651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12507-12653]:Block[12505-12651]"
  }, {
    "left" : "final String value = phrases.get(keys[i]);",
    "right" : "final String value = phrases.get(keys[i]);",
    "info" : "VariableDeclarationStatement[12521-12563]:VariableDeclarationStatement[12519-12561]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[12576-12643]:IfStatement[12574-12641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12595-12643]:Block[12593-12641]"
  }, {
    "left" : "keys[i] = value;",
    "right" : "keys[i] = value;",
    "info" : "ExpressionStatement[12613-12629]:ExpressionStatement[12611-12627]"
  }, {
    "left" : "return keys;",
    "right" : "return keys;",
    "info" : "ReturnStatement[12662-12674]:ReturnStatement[12660-12672]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12686-12693]:Modifier[12684-12691]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12694-12698]:PrimitiveType[12692-12696]"
  }, {
    "left" : "setOrAdd",
    "right" : "setOrAdd",
    "info" : "SimpleName[12699-12707]:SimpleName[12697-12705]"
  }, {
    "left" : "List tokens",
    "right" : "List tokens",
    "info" : "SingleVariableDeclaration[12708-12719]:SingleVariableDeclaration[12706-12717]"
  }, {
    "left" : "int position",
    "right" : "int position",
    "info" : "SingleVariableDeclaration[12721-12733]:SingleVariableDeclaration[12719-12731]"
  }, {
    "left" : "Predicate predicate",
    "right" : "Predicate predicate",
    "info" : "SingleVariableDeclaration[12735-12754]:SingleVariableDeclaration[12733-12752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12756-12904]:Block[12754-12902]"
  }, {
    "left" : "if (tokens.size() == 0)",
    "right" : "if (tokens.size() == 0)",
    "info" : "IfStatement[12766-12898]:IfStatement[12764-12896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12790-12836]:Block[12788-12834]"
  }, {
    "left" : "tokens.add(predicate);",
    "right" : "tokens.add(predicate);",
    "info" : "ExpressionStatement[12804-12826]:ExpressionStatement[12802-12824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12842-12898]:Block[12840-12896]"
  }, {
    "left" : "tokens.set(position, predicate);",
    "right" : "tokens.set(position, predicate);",
    "info" : "ExpressionStatement[12856-12888]:ExpressionStatement[12854-12886]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12910-12917]:Modifier[12908-12915]"
  }, {
    "left" : "Predicate",
    "right" : "Predicate",
    "info" : "SimpleType[12918-12927]:SimpleType[12916-12925]"
  }, {
    "left" : "eval",
    "right" : "eval",
    "info" : "SimpleName[12928-12932]:SimpleName[12926-12930]"
  }, {
    "left" : "Object statement",
    "right" : "Object statement",
    "info" : "SingleVariableDeclaration[12933-12949]:SingleVariableDeclaration[12931-12947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12951-13124]:Block[12949-13122]"
  }, {
    "left" : "if (statement instanceof String)",
    "right" : "if (statement instanceof String)",
    "info" : "IfStatement[12961-13118]:IfStatement[12959-13116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12994-13059]:Block[12992-13057]"
  }, {
    "left" : "return equal((String) statement, \"true\");",
    "right" : "return equal((String) statement, \"true\");",
    "info" : "ReturnStatement[13008-13049]:ReturnStatement[13006-13047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13065-13118]:Block[13063-13116]"
  }, {
    "left" : "return (Predicate) statement;",
    "right" : "return (Predicate) statement;",
    "info" : "ReturnStatement[13079-13108]:ReturnStatement[13077-13106]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13130-13137]:Modifier[13128-13135]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13138-13142]:PrimitiveType[13136-13140]"
  }, {
    "left" : "readObject",
    "right" : "readObject",
    "info" : "SimpleName[13143-13153]:SimpleName[13141-13151]"
  }, {
    "left" : "java.io.ObjectInputStream in",
    "right" : "java.io.ObjectInputStream in",
    "info" : "SingleVariableDeclaration[13154-13182]:SingleVariableDeclaration[13152-13180]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13203-13214]:SimpleType[13201-13212]"
  }, {
    "left" : "ClassNotFoundException",
    "right" : "ClassNotFoundException",
    "info" : "SimpleType[13216-13238]:SimpleType[13214-13236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13239-13288]:Block[13237-13286]"
  }, {
    "left" : "predicate = createPredicate(sql);",
    "right" : "predicate = createPredicate(sql);",
    "info" : "ExpressionStatement[13249-13282]:ExpressionStatement[13247-13280]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13294-13303]:MarkerAnnotation[13292-13301]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13308-13314]:Modifier[13306-13312]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13315-13321]:SimpleType[13313-13319]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[13322-13330]:SimpleName[13320-13328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13333-13377]:Block[13331-13375]"
  }, {
    "left" : "return predicate.toString();",
    "right" : "return predicate.toString();",
    "info" : "ReturnStatement[13343-13371]:ReturnStatement[13341-13369]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13383-13392]:MarkerAnnotation[13381-13390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13397-13403]:Modifier[13395-13401]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13404-13411]:PrimitiveType[13402-13409]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[13412-13418]:SimpleName[13410-13416]"
  }, {
    "left" : "Object o",
    "right" : "Object o",
    "info" : "SingleVariableDeclaration[13419-13427]:SingleVariableDeclaration[13417-13425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13429-13661]:Block[13427-13659]"
  }, {
    "left" : "if (this == o)",
    "right" : "if (this == o)",
    "info" : "IfStatement[13439-13490]:IfStatement[13437-13488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13454-13490]:Block[13452-13488]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13468-13480]:ReturnStatement[13466-13478]"
  }, {
    "left" : "if (!(o instanceof SqlPredicate))",
    "right" : "if (!(o instanceof SqlPredicate))",
    "info" : "IfStatement[13499-13570]:IfStatement[13497-13568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13533-13570]:Block[13531-13568]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13547-13560]:ReturnStatement[13545-13558]"
  }, {
    "left" : "SqlPredicate that = (SqlPredicate) o;",
    "right" : "SqlPredicate that = (SqlPredicate) o;",
    "info" : "VariableDeclarationStatement[13580-13617]:VariableDeclarationStatement[13578-13615]"
  }, {
    "left" : "return sql.equals(that.sql);",
    "right" : "return sql.equals(that.sql);",
    "info" : "ReturnStatement[13627-13655]:ReturnStatement[13625-13653]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13667-13676]:MarkerAnnotation[13665-13674]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13681-13687]:Modifier[13679-13685]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13688-13691]:PrimitiveType[13686-13689]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[13692-13700]:SimpleName[13690-13698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13703-13741]:Block[13701-13739]"
  }, {
    "left" : "return sql.hashCode();",
    "right" : "return sql.hashCode();",
    "info" : "ReturnStatement[13713-13735]:ReturnStatement[13711-13733]"
  } ]
}