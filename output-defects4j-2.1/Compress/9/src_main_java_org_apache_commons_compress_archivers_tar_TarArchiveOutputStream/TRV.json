{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final int LONGFILE_ERROR = 0;",
      "right" : "public static final int LONGFILE_ERROR = 0;",
      "info" : "FieldDeclaration[1459-1566]:FieldDeclaration[1459-1566]"
    }, {
      "left" : "public static final int LONGFILE_TRUNCATE = 1;",
      "right" : "public static final int LONGFILE_TRUNCATE = 1;",
      "info" : "FieldDeclaration[1572-1674]:FieldDeclaration[1572-1674]"
    }, {
      "left" : "public static final int LONGFILE_GNU = 2;",
      "right" : "public static final int LONGFILE_GNU = 2;",
      "info" : "FieldDeclaration[1680-1801]:FieldDeclaration[1680-1801]"
    }, {
      "left" : "private long      currSize;",
      "right" : "private long      currSize;",
      "info" : "FieldDeclaration[1807-1834]:FieldDeclaration[1807-1834]"
    }, {
      "left" : "private String    currName;",
      "right" : "private String    currName;",
      "info" : "FieldDeclaration[1839-1866]:FieldDeclaration[1839-1866]"
    }, {
      "left" : "private long      currBytes;",
      "right" : "private long      currBytes;",
      "info" : "FieldDeclaration[1871-1899]:FieldDeclaration[1871-1899]"
    }, {
      "left" : "private final byte[]    recordBuf;",
      "right" : "private final byte[]    recordBuf;",
      "info" : "FieldDeclaration[1904-1938]:FieldDeclaration[1904-1938]"
    }, {
      "left" : "private int       assemLen;",
      "right" : "private int       assemLen;",
      "info" : "FieldDeclaration[1943-1970]:FieldDeclaration[1943-1970]"
    }, {
      "left" : "private final byte[]    assemBuf;",
      "right" : "private final byte[]    assemBuf;",
      "info" : "FieldDeclaration[1975-2008]:FieldDeclaration[1975-2008]"
    }, {
      "left" : "protected final TarBuffer buffer;",
      "right" : "protected final TarBuffer buffer;",
      "info" : "FieldDeclaration[2013-2046]:FieldDeclaration[2013-2046]"
    }, {
      "left" : "private int       longFileMode = LONGFILE_ERROR;",
      "right" : "private int       longFileMode = LONGFILE_ERROR;",
      "info" : "FieldDeclaration[2051-2099]:FieldDeclaration[2051-2099]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2105-2136]:FieldDeclaration[2105-2136]"
    }, {
      "left" : "private boolean haveUnclosedEntry = false;",
      "right" : "private boolean haveUnclosedEntry = false;",
      "info" : "FieldDeclaration[2142-2266]:FieldDeclaration[2142-2266]"
    }, {
      "left" : "private boolean finished = false;",
      "right" : "private boolean finished = false;",
      "info" : "FieldDeclaration[2276-2358]:FieldDeclaration[2276-2358]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[2368-2399]:FieldDeclaration[2368-2399]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os)",
      "right" : "public TarArchiveOutputStream(OutputStream os)",
      "info" : "MethodDeclaration[2405-2628]:MethodDeclaration[2405-2628]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "info" : "MethodDeclaration[2634-2902]:MethodDeclaration[2634-2902]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[2908-3414]:MethodDeclaration[2908-3414]"
    }, {
      "left" : "public void setLongFileMode(int longFileMode)",
      "right" : "public void setLongFileMode(int longFileMode)",
      "info" : "MethodDeclaration[3420-3806]:MethodDeclaration[3420-3806]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[3815-4588]:MethodDeclaration[4038-4811]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[4594-4927]:MethodDeclaration[4817-5150]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[4933-5137]:MethodDeclaration[5156-5360]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "info" : "MethodDeclaration[5143-7429]:MethodDeclaration[5366-7652]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[7435-8774]:MethodDeclaration[7658-8997]"
    }, {
      "left" : "private void writeEOFRecord() throws IOException",
      "right" : "private void writeEOFRecord() throws IOException",
      "info" : "MethodDeclaration[11732-12057]:MethodDeclaration[11928-12253]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[12063-12144]:MethodDeclaration[12259-12340]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[12150-12462]:MethodDeclaration[12346-12658]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2549-2628]:Block[2549-2628]"
    }, {
      "left" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2559-2622]:ConstructorInvocation[2559-2622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2839-2902]:Block[2839-2902]"
    }, {
      "left" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2849-2896]:ConstructorInvocation[2849-2896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3177-3414]:Block[3177-3414]"
    }, {
      "left" : "out = new CountingOutputStream(os);",
      "right" : "out = new CountingOutputStream(os);",
      "info" : "ExpressionStatement[3187-3222]:ExpressionStatement[3187-3222]"
    }, {
      "left" : "this.buffer = new TarBuffer(out, blockSize, recordSize);",
      "right" : "this.buffer = new TarBuffer(out, blockSize, recordSize);",
      "info" : "ExpressionStatement[3232-3288]:ExpressionStatement[3232-3288]"
    }, {
      "left" : "this.assemLen = 0;",
      "right" : "this.assemLen = 0;",
      "info" : "ExpressionStatement[3297-3315]:ExpressionStatement[3297-3315]"
    }, {
      "left" : "this.assemBuf = new byte[recordSize];",
      "right" : "this.assemBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[3324-3361]:ExpressionStatement[3324-3361]"
    }, {
      "left" : "this.recordBuf = new byte[recordSize];",
      "right" : "this.recordBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[3370-3408]:ExpressionStatement[3370-3408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3757-3806]:Block[3757-3806]"
    }, {
      "left" : "this.longFileMode = longFileMode;",
      "right" : "this.longFileMode = longFileMode;",
      "info" : "ExpressionStatement[3767-3800]:ExpressionStatement[3767-3800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4234-4588]:Block[4457-4811]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[4244-4346]:IfStatement[4467-4569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4258-4346]:Block[4481-4569]"
    }, {
      "left" : "throw new IOException(\"This archive has already been finished\");",
      "right" : "throw new IOException(\"This archive has already been finished\");",
      "info" : "ThrowStatement[4272-4336]:ThrowStatement[4495-4559]"
    }, {
      "left" : "if(haveUnclosedEntry)",
      "right" : "if(haveUnclosedEntry)",
      "info" : "IfStatement[4364-4476]:IfStatement[4587-4699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4386-4476]:Block[4609-4699]"
    }, {
      "left" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "info" : "ThrowStatement[4400-4466]:ThrowStatement[4623-4689]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[4485-4502]:ExpressionStatement[4708-4725]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[4511-4528]:ExpressionStatement[4734-4751]"
    }, {
      "left" : "buffer.flushBlock();",
      "right" : "buffer.flushBlock();",
      "info" : "ExpressionStatement[4537-4557]:ExpressionStatement[4760-4780]"
    }, {
      "left" : "finished = true;",
      "right" : "finished = true;",
      "info" : "ExpressionStatement[4566-4582]:ExpressionStatement[4789-4805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4742-4927]:Block[4965-5150]"
    }, {
      "left" : "if(!finished)",
      "right" : "if(!finished)",
      "info" : "IfStatement[4752-4799]:IfStatement[4975-5022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4766-4799]:Block[4989-5022]"
    }, {
      "left" : "finish();",
      "right" : "finish();",
      "info" : "ExpressionStatement[4780-4789]:ExpressionStatement[5003-5012]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[4817-4921]:IfStatement[5040-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4830-4921]:Block[5053-5144]"
    }, {
      "left" : "buffer.close();",
      "right" : "buffer.close();",
      "info" : "ExpressionStatement[4844-4859]:ExpressionStatement[5067-5082]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[4872-4884]:ExpressionStatement[5095-5107]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[4897-4911]:ExpressionStatement[5120-5134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5091-5137]:Block[5314-5360]"
    }, {
      "left" : "return buffer.getRecordSize();",
      "right" : "return buffer.getRecordSize();",
      "info" : "ReturnStatement[5101-5131]:ReturnStatement[5324-5354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5891-7429]:Block[6114-7652]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[5901-5996]:IfStatement[6124-6219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5914-5996]:Block[6137-6219]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[5928-5986]:ThrowStatement[6151-6209]"
    }, {
      "left" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "right" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "info" : "VariableDeclarationStatement[6005-6060]:VariableDeclarationStatement[6228-6283]"
    }, {
      "left" : "if (entry.getName().length() >= TarConstants.NAMELEN)",
      "right" : "if (entry.getName().length() >= TarConstants.NAMELEN)",
      "info" : "IfStatement[6069-7117]:IfStatement[6292-7340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6123-7117]:Block[6346-7340]"
    }, {
      "left" : "if (longFileMode == LONGFILE_GNU)",
      "right" : "if (longFileMode == LONGFILE_GNU)",
      "info" : "IfStatement[6138-7107]:IfStatement[6361-7330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6172-6826]:Block[6395-7049]"
    }, {
      "left" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                    TarConstants.LF_GNUTYPE_LONGNAME);",
      "right" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                    TarConstants.LF_GNUTYPE_LONGNAME);",
      "info" : "VariableDeclarationStatement[6307-6488]:VariableDeclarationStatement[6530-6711]"
    }, {
      "left" : "final byte[] nameBytes = ArchiveUtils.toAsciiBytes(entry.getName());",
      "right" : "final byte[] nameBytes = ArchiveUtils.toAsciiBytes(entry.getName());",
      "info" : "VariableDeclarationStatement[6506-6574]:VariableDeclarationStatement[6729-6797]"
    }, {
      "left" : "longLinkEntry.setSize(nameBytes.length + 1);",
      "right" : "longLinkEntry.setSize(nameBytes.length + 1);",
      "info" : "ExpressionStatement[6591-6635]:ExpressionStatement[6814-6858]"
    }, {
      "left" : "putArchiveEntry(longLinkEntry);",
      "right" : "putArchiveEntry(longLinkEntry);",
      "info" : "ExpressionStatement[6666-6697]:ExpressionStatement[6889-6920]"
    }, {
      "left" : "write(nameBytes);",
      "right" : "write(nameBytes);",
      "info" : "ExpressionStatement[6714-6731]:ExpressionStatement[6937-6954]"
    }, {
      "left" : "write(0);",
      "right" : "write(0);",
      "info" : "ExpressionStatement[6748-6757]:ExpressionStatement[6971-6980]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[6792-6812]:ExpressionStatement[7015-7035]"
    }, {
      "left" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "right" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "info" : "IfStatement[6832-7107]:IfStatement[7055-7330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6871-7107]:Block[7094-7330]"
    }, {
      "left" : "throw new RuntimeException(\"file name '\" + entry.getName()\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "right" : "throw new RuntimeException(\"file name '\" + entry.getName()\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "info" : "ThrowStatement[6889-7093]:ThrowStatement[7112-7316]"
    }, {
      "left" : "entry.writeEntryHeader(recordBuf);",
      "right" : "entry.writeEntryHeader(recordBuf);",
      "info" : "ExpressionStatement[7127-7161]:ExpressionStatement[7350-7384]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[7170-7200]:ExpressionStatement[7393-7423]"
    }, {
      "left" : "currBytes = 0;",
      "right" : "currBytes = 0;",
      "info" : "ExpressionStatement[7210-7224]:ExpressionStatement[7433-7447]"
    }, {
      "left" : "if (entry.isDirectory())",
      "right" : "if (entry.isDirectory())",
      "info" : "IfStatement[7234-7353]:IfStatement[7457-7576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7259-7296]:Block[7482-7519]"
    }, {
      "left" : "currSize = 0;",
      "right" : "currSize = 0;",
      "info" : "ExpressionStatement[7273-7286]:ExpressionStatement[7496-7509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7302-7353]:Block[7525-7576]"
    }, {
      "left" : "currSize = entry.getSize();",
      "right" : "currSize = entry.getSize();",
      "info" : "ExpressionStatement[7316-7343]:ExpressionStatement[7539-7566]"
    }, {
      "left" : "currName = entry.getName();",
      "right" : "currName = entry.getName();",
      "info" : "ExpressionStatement[7362-7389]:ExpressionStatement[7585-7612]"
    }, {
      "left" : "haveUnclosedEntry = true;",
      "right" : "haveUnclosedEntry = true;",
      "info" : "ExpressionStatement[7398-7423]:ExpressionStatement[7621-7646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7953-8774]:Block[8176-8997]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[7963-8058]:IfStatement[8186-8281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7976-8058]:Block[8199-8281]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[7990-8048]:ThrowStatement[8213-8271]"
    }, {
      "left" : "if (!haveUnclosedEntry)",
      "right" : "if (!haveUnclosedEntry)",
      "info" : "IfStatement[8067-8165]:IfStatement[8290-8388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8090-8165]:Block[8313-8388]"
    }, {
      "left" : "throw new IOException(\"No current entry to close\");",
      "right" : "throw new IOException(\"No current entry to close\");",
      "info" : "ThrowStatement[8104-8155]:ThrowStatement[8327-8378]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[8174-8418]:IfStatement[8397-8641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8192-8418]:Block[8415-8641]"
    }, {
      "left" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "right" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "info" : "ForStatement[8206-8303]:ForStatement[8429-8526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8255-8303]:Block[8478-8526]"
    }, {
      "left" : "assemBuf[i] = 0;",
      "right" : "assemBuf[i] = 0;",
      "info" : "ExpressionStatement[8273-8289]:ExpressionStatement[8496-8512]"
    }, {
      "left" : "buffer.writeRecord(assemBuf);",
      "right" : "buffer.writeRecord(assemBuf);",
      "info" : "ExpressionStatement[8317-8346]:ExpressionStatement[8540-8569]"
    }, {
      "left" : "currBytes += assemLen;",
      "right" : "currBytes += assemLen;",
      "info" : "ExpressionStatement[8360-8382]:ExpressionStatement[8583-8605]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[8395-8408]:ExpressionStatement[8618-8631]"
    }, {
      "left" : "if (currBytes < currSize)",
      "right" : "if (currBytes < currSize)",
      "info" : "IfStatement[8428-8733]:IfStatement[8651-8956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8454-8733]:Block[8677-8956]"
    }, {
      "left" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "right" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "info" : "ThrowStatement[8468-8723]:ThrowStatement[8691-8946]"
    }, {
      "left" : "haveUnclosedEntry = false;",
      "right" : "haveUnclosedEntry = false;",
      "info" : "ExpressionStatement[8742-8768]:ExpressionStatement[8965-8991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11917-12057]:Block[12113-12253]"
    }, {
      "left" : "for (int i = 0; i < recordBuf.length; ++i)",
      "right" : "for (int i = 0; i < recordBuf.length; ++i)",
      "info" : "ForStatement[11927-12011]:ForStatement[12123-12207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11970-12011]:Block[12166-12207]"
    }, {
      "left" : "recordBuf[i] = 0;",
      "right" : "recordBuf[i] = 0;",
      "info" : "ExpressionStatement[11984-12001]:ExpressionStatement[12180-12197]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[12021-12051]:ExpressionStatement[12217-12247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12116-12144]:Block[12312-12340]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[12126-12138]:ExpressionStatement[12322-12334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12293-12462]:Block[12489-12658]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[12303-12398]:IfStatement[12499-12594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12316-12398]:Block[12512-12594]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[12330-12388]:ThrowStatement[12526-12584]"
    }, {
      "left" : "return new TarArchiveEntry(inputFile, entryName);",
      "right" : "return new TarArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[12407-12456]:ReturnStatement[12603-12652]"
    } ]
  },
  "interFileMappings" : { }
}