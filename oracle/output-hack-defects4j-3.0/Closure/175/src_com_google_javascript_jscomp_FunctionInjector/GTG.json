{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FunctionInjector",
      "right" : "FunctionInjector",
      "info" : "TypeDeclaration[1093-32250]:TypeDeclaration[1093-32333]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1319-1359]:FieldDeclaration[1319-1359]"
    }, {
      "left" : "private final boolean allowDecomposition;",
      "right" : "private final boolean allowDecomposition;",
      "info" : "FieldDeclaration[1362-1403]:FieldDeclaration[1362-1403]"
    }, {
      "left" : "private Set<String> knownConstants = Sets.newHashSet();",
      "right" : "private Set<String> knownConstants = Sets.newHashSet();",
      "info" : "FieldDeclaration[1406-1461]:FieldDeclaration[1406-1461]"
    }, {
      "left" : "private final boolean assumeStrictThis;",
      "right" : "private final boolean assumeStrictThis;",
      "info" : "FieldDeclaration[1464-1503]:FieldDeclaration[1464-1503]"
    }, {
      "left" : "private final boolean assumeMinimumCapture;",
      "right" : "private final boolean assumeMinimumCapture;",
      "info" : "FieldDeclaration[1506-1549]:FieldDeclaration[1506-1549]"
    }, {
      "left" : "private final Supplier<String> safeNameIdSupplier;",
      "right" : "private final Supplier<String> safeNameIdSupplier;",
      "info" : "FieldDeclaration[1552-1602]:FieldDeclaration[1552-1602]"
    }, {
      "left" : "public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture)",
      "right" : "public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture)",
      "info" : "MethodDeclaration[1606-2351]:MethodDeclaration[1812-2557]"
    }, {
      "left" : "enum : InliningMode",
      "right" : "enum : InliningMode",
      "info" : "EnumDeclaration[2355-2739]:EnumDeclaration[2561-2945]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "TypeDeclaration[2743-3072]:TypeDeclaration[2949-3278]"
    }, {
      "left" : "final Node callNode;",
      "right" : "final Node callNode;",
      "info" : "FieldDeclaration[2835-2855]:FieldDeclaration[3041-3061]"
    }, {
      "left" : "final JSModule module;",
      "right" : "final JSModule module;",
      "info" : "FieldDeclaration[2860-2882]:FieldDeclaration[3066-3088]"
    }, {
      "left" : "final InliningMode mode;",
      "right" : "final InliningMode mode;",
      "info" : "FieldDeclaration[2887-2911]:FieldDeclaration[3093-3117]"
    }, {
      "left" : "Reference(Node callNode, JSModule module, InliningMode mode",
      "right" : "Reference(Node callNode, JSModule module, InliningMode mode",
      "info" : "MethodDeclaration[2917-3068]:MethodDeclaration[3123-3274]"
    }, {
      "left" : "private static final int NAME_COST_ESTIMATE =\n      InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;",
      "right" : "private static final int NAME_COST_ESTIMATE =\n      InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;",
      "info" : "FieldDeclaration[3076-3481]:FieldDeclaration[3282-3687]"
    }, {
      "left" : "private static final int COMMA_COST = 1;",
      "right" : "private static final int COMMA_COST = 1;",
      "info" : "FieldDeclaration[3485-3578]:FieldDeclaration[3691-3784]"
    }, {
      "left" : "private static final int PAREN_COST = 2;",
      "right" : "private static final int PAREN_COST = 2;",
      "info" : "FieldDeclaration[3582-3681]:FieldDeclaration[3788-3887]"
    }, {
      "left" : "boolean doesFunctionMeetMinimumRequirements(\n      final String fnName, Node fnNode)",
      "right" : "boolean doesFunctionMeetMinimumRequirements(\n      final String fnName, Node fnNode)",
      "info" : "MethodDeclaration[3686-5508]:MethodDeclaration[3892-5714]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[5054-5397]:MethodDeclaration[5260-5603]"
    }, {
      "left" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t,\n      Node callNode, Node fnNode, Set<String> needAliases,\n      InliningMode mode, boolean referencesThis, boolean containsFunctions)",
      "right" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t,\n      Node callNode, Node fnNode, Set<String> needAliases,\n      InliningMode mode, boolean referencesThis, boolean containsFunctions)",
      "info" : "MethodDeclaration[5512-7768]:MethodDeclaration[5718-7987]"
    }, {
      "left" : "private boolean isSupportedCallType(Node callNode)",
      "right" : "private boolean isSupportedCallType(Node callNode)",
      "info" : "MethodDeclaration[7772-8427]:MethodDeclaration[7991-8646]"
    }, {
      "left" : "Node inline(\n      Node callNode, String fnName, Node fnNode, InliningMode mode)",
      "right" : "Node inline(\n      Node callNode, String fnName, Node fnNode, InliningMode mode)",
      "info" : "MethodDeclaration[8431-8811]:MethodDeclaration[8650-9030]"
    }, {
      "left" : "private Node inlineReturnValue(Node callNode, Node fnNode)",
      "right" : "private Node inlineReturnValue(Node callNode, Node fnNode)",
      "info" : "MethodDeclaration[8815-10202]:MethodDeclaration[9034-10421]"
    }, {
      "left" : "enum : CallSiteType",
      "right" : "enum : CallSiteType",
      "info" : "EnumDeclaration[10206-13023]:EnumDeclaration[10425-13242]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[10410-10552]:MethodDeclaration[10629-10771]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[10693-10806]:MethodDeclaration[10912-11025]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[11050-11163]:MethodDeclaration[11269-11382]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[11451-11564]:MethodDeclaration[11670-11783]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[11965-12324]:MethodDeclaration[12184-12543]"
    }, {
      "left" : "public void prepare(FunctionInjector injector, Node callNode)",
      "right" : "public void prepare(FunctionInjector injector, Node callNode)",
      "info" : "MethodDeclaration[12560-12935]:MethodDeclaration[12779-13154]"
    }, {
      "left" : "public abstract void prepare(FunctionInjector injector, Node callNode);",
      "right" : "public abstract void prepare(FunctionInjector injector, Node callNode);",
      "info" : "MethodDeclaration[12948-13019]:MethodDeclaration[13167-13238]"
    }, {
      "left" : "private CallSiteType classifyCallSite(Node callNode)",
      "right" : "private CallSiteType classifyCallSite(Node callNode)",
      "info" : "MethodDeclaration[13027-14849]:MethodDeclaration[13246-15068]"
    }, {
      "left" : "private ExpressionDecomposer getDecomposer()",
      "right" : "private ExpressionDecomposer getDecomposer()",
      "info" : "MethodDeclaration[14853-14995]:MethodDeclaration[15072-15214]"
    }, {
      "left" : "void maybePrepareCall(Node callNode)",
      "right" : "void maybePrepareCall(Node callNode)",
      "info" : "MethodDeclaration[14999-15278]:MethodDeclaration[15218-15497]"
    }, {
      "left" : "private Node inlineFunction(\n      Node callNode, Node fnNode, String fnName)",
      "right" : "private Node inlineFunction(\n      Node callNode, Node fnNode, String fnName)",
      "info" : "MethodDeclaration[15282-18312]:MethodDeclaration[15501-18531]"
    }, {
      "left" : "boolean isDirectCallNodeReplacementPossible(Node fnNode)",
      "right" : "boolean isDirectCallNodeReplacementPossible(Node fnNode)",
      "info" : "MethodDeclaration[18316-19128]:MethodDeclaration[18535-19347]"
    }, {
      "left" : "enum : CanInlineResult",
      "right" : "enum : CanInlineResult",
      "info" : "EnumDeclaration[19132-19197]:EnumDeclaration[19351-19416]"
    }, {
      "left" : "private CanInlineResult canInlineReferenceAsStatementBlock(\n      NodeTraversal t, Node callNode, Node fnNode, Set<String> namesToAlias)",
      "right" : "private CanInlineResult canInlineReferenceAsStatementBlock(\n      NodeTraversal t, Node callNode, Node fnNode, Set<String> namesToAlias)",
      "info" : "MethodDeclaration[19201-20397]:MethodDeclaration[19420-20616]"
    }, {
      "left" : "private boolean callMeetsBlockInliningRequirements(\n      NodeTraversal t, Node callNode, final Node fnNode,\n      Set<String> namesToAlias)",
      "right" : "private boolean callMeetsBlockInliningRequirements(\n      NodeTraversal t, Node callNode, final Node fnNode,\n      Set<String> namesToAlias)",
      "info" : "MethodDeclaration[20401-22997]:MethodDeclaration[20620-23216]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[21817-22089]:MethodDeclaration[22036-22308]"
    }, {
      "left" : "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode)",
      "right" : "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode, Set<String> namesToAlias)",
      "info" : "MethodDeclaration[23001-25093]:MethodDeclaration[23220-25176]"
    }, {
      "left" : "boolean inliningLowersCost(\n      JSModule fnModule, Node fnNode, Collection<? extends Reference> refs,\n      Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
      "right" : "boolean inliningLowersCost(\n      JSModule fnModule, Node fnNode, Collection<? extends Reference> refs,\n      Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
      "info" : "MethodDeclaration[25097-27314]:MethodDeclaration[25180-27397]"
    }, {
      "left" : "private boolean doesLowerCost(\n      Node fnNode, int callCost,\n      int directInlines, int costDeltaDirect,\n      int blockInlines, int costDeltaBlock,\n      boolean removable)",
      "right" : "private boolean doesLowerCost(\n      Node fnNode, int callCost,\n      int directInlines, int costDeltaDirect,\n      int blockInlines, int costDeltaBlock,\n      boolean removable)",
      "info" : "MethodDeclaration[27318-28462]:MethodDeclaration[27401-28545]"
    }, {
      "left" : "private static int estimateCallCost(Node fnNode, boolean referencesThis)",
      "right" : "private static int estimateCallCost(Node fnNode, boolean referencesThis)",
      "info" : "MethodDeclaration[28466-29343]:MethodDeclaration[28549-29426]"
    }, {
      "left" : "private static int inlineCostDelta(\n      Node fnNode, Set<String> namesToAlias, InliningMode mode)",
      "right" : "private static int inlineCostDelta(\n      Node fnNode, Set<String> namesToAlias, InliningMode mode)",
      "info" : "MethodDeclaration[29347-31839]:MethodDeclaration[29430-31922]"
    }, {
      "left" : "public void setKnownConstants(Set<String> knownConstants)",
      "right" : "public void setKnownConstants(Set<String> knownConstants)",
      "info" : "MethodDeclaration[31843-32248]:MethodDeclaration[31926-32331]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1819-1825]:Modifier[2025-2031]"
    }, {
      "left" : "FunctionInjector",
      "right" : "FunctionInjector",
      "info" : "SimpleName[1826-1842]:SimpleName[2032-2048]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1850-1875]:SingleVariableDeclaration[2056-2081]"
    }, {
      "left" : "Supplier<String> safeNameIdSupplier",
      "right" : "Supplier<String> safeNameIdSupplier",
      "info" : "SingleVariableDeclaration[1883-1918]:SingleVariableDeclaration[2089-2124]"
    }, {
      "left" : "boolean allowDecomposition",
      "right" : "boolean allowDecomposition",
      "info" : "SingleVariableDeclaration[1926-1952]:SingleVariableDeclaration[2132-2158]"
    }, {
      "left" : "boolean assumeStrictThis",
      "right" : "boolean assumeStrictThis",
      "info" : "SingleVariableDeclaration[1960-1984]:SingleVariableDeclaration[2166-2190]"
    }, {
      "left" : "boolean assumeMinimumCapture",
      "right" : "boolean assumeMinimumCapture",
      "info" : "SingleVariableDeclaration[1992-2020]:SingleVariableDeclaration[2198-2226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2022-2351]:Block[2228-2557]"
    }, {
      "left" : "Preconditions.checkNotNull(compiler);",
      "right" : "Preconditions.checkNotNull(compiler);",
      "info" : "ExpressionStatement[2028-2065]:ExpressionStatement[2234-2271]"
    }, {
      "left" : "Preconditions.checkNotNull(safeNameIdSupplier);",
      "right" : "Preconditions.checkNotNull(safeNameIdSupplier);",
      "info" : "ExpressionStatement[2070-2117]:ExpressionStatement[2276-2323]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2122-2147]:ExpressionStatement[2328-2353]"
    }, {
      "left" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "right" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "info" : "ExpressionStatement[2152-2197]:ExpressionStatement[2358-2403]"
    }, {
      "left" : "this.allowDecomposition = allowDecomposition;",
      "right" : "this.allowDecomposition = allowDecomposition;",
      "info" : "ExpressionStatement[2202-2247]:ExpressionStatement[2408-2453]"
    }, {
      "left" : "this.assumeStrictThis = assumeStrictThis;",
      "right" : "this.assumeStrictThis = assumeStrictThis;",
      "info" : "ExpressionStatement[2252-2293]:ExpressionStatement[2458-2499]"
    }, {
      "left" : "this.assumeMinimumCapture = assumeMinimumCapture;",
      "right" : "this.assumeMinimumCapture = assumeMinimumCapture;",
      "info" : "ExpressionStatement[2298-2347]:ExpressionStatement[2504-2553]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2806-2812]:Modifier[3012-3018]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2813-2818]:TYPE_DECLARATION_KIND[3019-3024]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[2819-2828]:SimpleName[3025-3034]"
    }, {
      "left" : "Reference",
      "right" : "Reference",
      "info" : "SimpleName[2917-2926]:SimpleName[3123-3132]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[2927-2940]:SingleVariableDeclaration[3133-3146]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[2942-2957]:SingleVariableDeclaration[3148-3163]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[2959-2976]:SingleVariableDeclaration[3165-3182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2977-3068]:Block[3183-3274]"
    }, {
      "left" : "this.callNode = callNode;",
      "right" : "this.callNode = callNode;",
      "info" : "ExpressionStatement[2985-3010]:ExpressionStatement[3191-3216]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[3017-3038]:ExpressionStatement[3223-3244]"
    }, {
      "left" : "this.mode = mode;",
      "right" : "this.mode = mode;",
      "info" : "ExpressionStatement[3045-3062]:ExpressionStatement[3251-3268]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4017-4024]:PrimitiveType[4223-4230]"
    }, {
      "left" : "doesFunctionMeetMinimumRequirements",
      "right" : "doesFunctionMeetMinimumRequirements",
      "info" : "SimpleName[4025-4060]:SimpleName[4231-4266]"
    }, {
      "left" : "final String fnName",
      "right" : "final String fnName",
      "info" : "SingleVariableDeclaration[4068-4087]:SingleVariableDeclaration[4274-4293]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[4089-4100]:SingleVariableDeclaration[4295-4306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4102-5508]:Block[4308-5714]"
    }, {
      "left" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "right" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "info" : "VariableDeclarationStatement[4108-4154]:VariableDeclarationStatement[4314-4360]"
    }, {
      "left" : "if (!compiler.getCodingConvention().isInlinableFunction(fnNode))",
      "right" : "if (!compiler.getCodingConvention().isInlinableFunction(fnNode))",
      "info" : "IfStatement[4528-4620]:IfStatement[4734-4826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4593-4620]:Block[4799-4826]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4601-4614]:ReturnStatement[4807-4820]"
    }, {
      "left" : "final String fnRecursionName = fnNode.getFirstChild().getString();",
      "right" : "final String fnRecursionName = fnNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[4626-4692]:VariableDeclarationStatement[4832-4898]"
    }, {
      "left" : "Preconditions.checkState(fnRecursionName != null);",
      "right" : "Preconditions.checkState(fnRecursionName != null);",
      "info" : "ExpressionStatement[4697-4747]:ExpressionStatement[4903-4953]"
    }, {
      "left" : "boolean referencesArguments = NodeUtil.isNameReferenced(\n        block, \"arguments\", NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "boolean referencesArguments = NodeUtil.isNameReferenced(\n        block, \"arguments\", NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "VariableDeclarationStatement[4824-4938]:VariableDeclarationStatement[5030-5144]"
    }, {
      "left" : "Predicate<Node> p = new Predicate<Node>(){\n      @Override\n      public boolean apply(Node n) {\n        if (n.isName()) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n    };",
      "right" : "Predicate<Node> p = new Predicate<Node>(){\n      @Override\n      public boolean apply(Node n) {\n        if (n.isName()) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n    };",
      "info" : "VariableDeclarationStatement[5005-5404]:VariableDeclarationStatement[5211-5610]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5054-5063]:MarkerAnnotation[5260-5269]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5070-5076]:Modifier[5276-5282]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5077-5084]:PrimitiveType[5283-5290]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[5085-5090]:SimpleName[5291-5296]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5091-5097]:SingleVariableDeclaration[5297-5303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5099-5397]:Block[5305-5603]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[5109-5367]:IfStatement[5315-5573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5125-5367]:Block[5331-5573]"
    }, {
      "left" : "return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));",
      "right" : "return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));",
      "info" : "ReturnStatement[5137-5357]:ReturnStatement[5343-5563]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5376-5389]:ReturnStatement[5582-5595]"
    }, {
      "left" : "return !referencesArguments\n        && !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());",
      "right" : "return !referencesArguments\n        && !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[5410-5504]:ReturnStatement[5616-5710]"
    }, {
      "left" : "CanInlineResult",
      "right" : "CanInlineResult",
      "info" : "SimpleType[6070-6085]:SimpleType[6276-6291]"
    }, {
      "left" : "canInlineReferenceToFunction",
      "right" : "canInlineReferenceToFunction",
      "info" : "SimpleName[6086-6114]:SimpleName[6292-6320]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6115-6130]:SingleVariableDeclaration[6321-6336]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[6138-6151]:SingleVariableDeclaration[6344-6357]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[6153-6164]:SingleVariableDeclaration[6359-6370]"
    }, {
      "left" : "Set<String> needAliases",
      "right" : "Set<String> needAliases",
      "info" : "SingleVariableDeclaration[6166-6189]:SingleVariableDeclaration[6372-6395]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[6197-6214]:SingleVariableDeclaration[6403-6420]"
    }, {
      "left" : "boolean referencesThis",
      "right" : "boolean referencesThis",
      "info" : "SingleVariableDeclaration[6216-6238]:SingleVariableDeclaration[6422-6444]"
    }, {
      "left" : "boolean containsFunctions",
      "right" : "boolean containsFunctions",
      "info" : "SingleVariableDeclaration[6240-6265]:SingleVariableDeclaration[6446-6471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6267-7768]:Block[6473-7987]"
    }, {
      "left" : "if (!isSupportedCallType(callNode))",
      "right" : "if (!isSupportedCallType(callNode))",
      "info" : "IfStatement[6483-6559]:IfStatement[6689-6765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6519-6559]:Block[6725-6765]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[6527-6553]:ReturnStatement[6733-6759]"
    }, {
      "left" : "if (containsFunctions)",
      "right" : "if (containsFunctions)",
      "info" : "IfStatement[6843-7293]:IfStatement[7049-7499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6866-7293]:Block[7072-7499]"
    }, {
      "left" : "if (!assumeMinimumCapture && !t.inGlobalScope())",
      "right" : "if (!assumeMinimumCapture && !t.inGlobalScope())",
      "info" : "IfStatement[6874-7287]:IfStatement[7080-7493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6923-7075]:Block[7129-7281]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[7041-7067]:ReturnStatement[7247-7273]"
    }, {
      "left" : "if (NodeUtil.isWithinLoop(callNode))",
      "right" : "if (NodeUtil.isWithinLoop(callNode))",
      "info" : "IfStatement[7081-7287]:IfStatement[7287-7493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7118-7287]:Block[7324-7493]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[7253-7279]:ReturnStatement[7459-7485]"
    }, {
      "left" : "if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode))",
      "right" : "if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode))",
      "info" : "IfStatement[7346-7552]:IfStatement[7552-7758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7410-7552]:Block[7616-7758]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[7520-7546]:ReturnStatement[7726-7752]"
    }, {
      "left" : "if (mode == InliningMode.DIRECT)",
      "right" : "if (mode == InliningMode.DIRECT)",
      "info" : "IfStatement[7558-7764]:IfStatement[7764-7983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7591-7657]:Block[7797-7876]"
    }, {
      "left" : "return canInlineReferenceDirectly(callNode, fnNode);",
      "right" : "return canInlineReferenceDirectly(callNode, fnNode, needAliases);",
      "info" : "ReturnStatement[7599-7651]:ReturnStatement[7805-7870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7663-7764]:Block[7882-7983]"
    }, {
      "left" : "return canInlineReferenceAsStatementBlock(\n          t, callNode, fnNode, needAliases);",
      "right" : "return canInlineReferenceAsStatementBlock(\n          t, callNode, fnNode, needAliases);",
      "info" : "ReturnStatement[7671-7758]:ReturnStatement[7890-7977]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7955-7962]:Modifier[8174-8181]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7963-7970]:PrimitiveType[8182-8189]"
    }, {
      "left" : "isSupportedCallType",
      "right" : "isSupportedCallType",
      "info" : "SimpleName[7971-7990]:SimpleName[8190-8209]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[7991-8004]:SingleVariableDeclaration[8210-8223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8006-8427]:Block[8225-8646]"
    }, {
      "left" : "if (!callNode.getFirstChild().isName())",
      "right" : "if (!callNode.getFirstChild().isName())",
      "info" : "IfStatement[8012-8405]:IfStatement[8231-8624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8052-8405]:Block[8271-8624]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "right" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "info" : "IfStatement[8060-8399]:IfStatement[8279-8618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8105-8316]:Block[8324-8535]"
    }, {
      "left" : "if (!assumeStrictThis)",
      "right" : "if (!assumeStrictThis)",
      "info" : "IfStatement[8115-8308]:IfStatement[8334-8527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8138-8308]:Block[8357-8527]"
    }, {
      "left" : "Node thisValue = callNode.getFirstChild().getNext();",
      "right" : "Node thisValue = callNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[8150-8202]:VariableDeclarationStatement[8369-8421]"
    }, {
      "left" : "if (thisValue == null || !thisValue.isThis())",
      "right" : "if (thisValue == null || !thisValue.isThis())",
      "info" : "IfStatement[8213-8298]:IfStatement[8432-8517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8259-8298]:Block[8478-8517]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8273-8286]:ReturnStatement[8492-8505]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectApply(callNode))",
      "right" : "if (NodeUtil.isFunctionObjectApply(callNode))",
      "info" : "IfStatement[8322-8399]:IfStatement[8541-8618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8368-8399]:Block[8587-8618]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8378-8391]:ReturnStatement[8597-8610]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8411-8423]:ReturnStatement[8630-8642]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8486-8490]:SimpleType[8705-8709]"
    }, {
      "left" : "inline",
      "right" : "inline",
      "info" : "SimpleName[8491-8497]:SimpleName[8710-8716]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[8505-8518]:SingleVariableDeclaration[8724-8737]"
    }, {
      "left" : "String fnName",
      "right" : "String fnName",
      "info" : "SingleVariableDeclaration[8520-8533]:SingleVariableDeclaration[8739-8752]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[8535-8546]:SingleVariableDeclaration[8754-8765]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[8548-8565]:SingleVariableDeclaration[8767-8784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8567-8811]:Block[8786-9030]"
    }, {
      "left" : "Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());",
      "right" : "Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());",
      "info" : "ExpressionStatement[8573-8643]:ExpressionStatement[8792-8862]"
    }, {
      "left" : "if (mode == InliningMode.DIRECT)",
      "right" : "if (mode == InliningMode.DIRECT)",
      "info" : "IfStatement[8649-8807]:IfStatement[8868-9026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8682-8739]:Block[8901-8958]"
    }, {
      "left" : "return inlineReturnValue(callNode, fnNode);",
      "right" : "return inlineReturnValue(callNode, fnNode);",
      "info" : "ReturnStatement[8690-8733]:ReturnStatement[8909-8952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8745-8807]:Block[8964-9026]"
    }, {
      "left" : "return inlineFunction(callNode, fnNode, fnName);",
      "right" : "return inlineFunction(callNode, fnNode, fnName);",
      "info" : "ReturnStatement[8753-8801]:ReturnStatement[8972-9020]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8971-8978]:Modifier[9190-9197]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8979-8983]:SimpleType[9198-9202]"
    }, {
      "left" : "inlineReturnValue",
      "right" : "inlineReturnValue",
      "info" : "SimpleName[8984-9001]:SimpleName[9203-9220]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[9002-9015]:SingleVariableDeclaration[9221-9234]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[9017-9028]:SingleVariableDeclaration[9236-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9030-10202]:Block[9249-10421]"
    }, {
      "left" : "Node block = fnNode.getLastChild();",
      "right" : "Node block = fnNode.getLastChild();",
      "info" : "VariableDeclarationStatement[9036-9071]:VariableDeclarationStatement[9255-9290]"
    }, {
      "left" : "Node callParentNode = callNode.getParent();",
      "right" : "Node callParentNode = callNode.getParent();",
      "info" : "VariableDeclarationStatement[9076-9119]:VariableDeclarationStatement[9295-9338]"
    }, {
      "left" : "Map<String, Node> argMap =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.safeNameIdSupplier);",
      "right" : "Map<String, Node> argMap =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[9373-9517]:VariableDeclarationStatement[9592-9736]"
    }, {
      "left" : "Node newExpression;",
      "right" : "Node newExpression;",
      "info" : "VariableDeclarationStatement[9523-9542]:VariableDeclarationStatement[9742-9761]"
    }, {
      "left" : "if (!block.hasChildren())",
      "right" : "if (!block.hasChildren())",
      "info" : "IfStatement[9547-10113]:IfStatement[9766-10332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9573-9674]:Block[9792-9893]"
    }, {
      "left" : "Node srcLocation = block;",
      "right" : "Node srcLocation = block;",
      "info" : "VariableDeclarationStatement[9581-9606]:VariableDeclarationStatement[9800-9825]"
    }, {
      "left" : "newExpression = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "newExpression = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "ExpressionStatement[9613-9668]:ExpressionStatement[9832-9887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9680-10113]:Block[9899-10332]"
    }, {
      "left" : "Node returnNode = block.getFirstChild();",
      "right" : "Node returnNode = block.getFirstChild();",
      "info" : "VariableDeclarationStatement[9688-9728]:VariableDeclarationStatement[9907-9947]"
    }, {
      "left" : "Preconditions.checkArgument(returnNode.isReturn());",
      "right" : "Preconditions.checkArgument(returnNode.isReturn());",
      "info" : "ExpressionStatement[9735-9786]:ExpressionStatement[9954-10005]"
    }, {
      "left" : "Node safeReturnNode = returnNode.cloneTree();",
      "right" : "Node safeReturnNode = returnNode.cloneTree();",
      "info" : "VariableDeclarationStatement[9832-9877]:VariableDeclarationStatement[10051-10096]"
    }, {
      "left" : "Node inlineResult = FunctionArgumentInjector.inject(\n          null, safeReturnNode, null, argMap);",
      "right" : "Node inlineResult = FunctionArgumentInjector.inject(\n          null, safeReturnNode, null, argMap);",
      "info" : "VariableDeclarationStatement[9884-9983]:VariableDeclarationStatement[10103-10202]"
    }, {
      "left" : "Preconditions.checkArgument(safeReturnNode == inlineResult);",
      "right" : "Preconditions.checkArgument(safeReturnNode == inlineResult);",
      "info" : "ExpressionStatement[9990-10050]:ExpressionStatement[10209-10269]"
    }, {
      "left" : "newExpression = safeReturnNode.removeFirstChild();",
      "right" : "newExpression = safeReturnNode.removeFirstChild();",
      "info" : "ExpressionStatement[10057-10107]:ExpressionStatement[10276-10326]"
    }, {
      "left" : "callParentNode.replaceChild(callNode, newExpression);",
      "right" : "callParentNode.replaceChild(callNode, newExpression);",
      "info" : "ExpressionStatement[10119-10172]:ExpressionStatement[10338-10391]"
    }, {
      "left" : "return newExpression;",
      "right" : "return newExpression;",
      "info" : "ReturnStatement[10177-10198]:ReturnStatement[10396-10417]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10410-10419]:MarkerAnnotation[10629-10638]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10426-10432]:Modifier[10645-10651]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10433-10437]:PrimitiveType[10652-10656]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[10438-10445]:SimpleName[10657-10664]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[10446-10471]:SingleVariableDeclaration[10665-10690]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[10473-10486]:SingleVariableDeclaration[10692-10705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10488-10552]:Block[10707-10771]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected\");",
      "right" : "throw new IllegalStateException(\"unexpected\");",
      "info" : "ThrowStatement[10498-10544]:ThrowStatement[10717-10763]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10693-10702]:MarkerAnnotation[10912-10921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10709-10715]:Modifier[10928-10934]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10716-10720]:PrimitiveType[10935-10939]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[10721-10728]:SimpleName[10940-10947]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[10729-10754]:SingleVariableDeclaration[10948-10973]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[10756-10769]:SingleVariableDeclaration[10975-10988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10771-10806]:Block[10990-11025]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11050-11059]:MarkerAnnotation[11269-11278]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11066-11072]:Modifier[11285-11291]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11073-11077]:PrimitiveType[11292-11296]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[11078-11085]:SimpleName[11297-11304]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[11086-11111]:SingleVariableDeclaration[11305-11330]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[11113-11126]:SingleVariableDeclaration[11332-11345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11128-11163]:Block[11347-11382]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11451-11460]:MarkerAnnotation[11670-11679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11467-11473]:Modifier[11686-11692]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11474-11478]:PrimitiveType[11693-11697]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[11479-11486]:SimpleName[11698-11705]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[11487-11512]:SingleVariableDeclaration[11706-11731]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[11514-11527]:SingleVariableDeclaration[11733-11746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11529-11564]:Block[11748-11783]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11965-11974]:MarkerAnnotation[12184-12193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11981-11987]:Modifier[12200-12206]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11988-11992]:PrimitiveType[12207-12211]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[11993-12000]:SimpleName[12212-12219]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[12001-12026]:SingleVariableDeclaration[12220-12245]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[12028-12041]:SingleVariableDeclaration[12247-12260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12043-12324]:Block[12262-12543]"
    }, {
      "left" : "injector.getDecomposer().moveExpression(callNode);",
      "right" : "injector.getDecomposer().moveExpression(callNode);",
      "info" : "ExpressionStatement[12053-12103]:ExpressionStatement[12272-12322]"
    }, {
      "left" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[12146-12210]:VariableDeclarationStatement[12365-12429]"
    }, {
      "left" : "Preconditions.checkState(this != callSiteType);",
      "right" : "Preconditions.checkState(this != callSiteType);",
      "info" : "ExpressionStatement[12219-12266]:ExpressionStatement[12438-12485]"
    }, {
      "left" : "callSiteType.prepare(injector, callNode);",
      "right" : "callSiteType.prepare(injector, callNode);",
      "info" : "ExpressionStatement[12275-12316]:ExpressionStatement[12494-12535]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12560-12569]:MarkerAnnotation[12779-12788]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12576-12582]:Modifier[12795-12801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12583-12587]:PrimitiveType[12802-12806]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[12588-12595]:SimpleName[12807-12814]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[12596-12621]:SingleVariableDeclaration[12815-12840]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[12623-12636]:SingleVariableDeclaration[12842-12855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12638-12935]:Block[12857-13154]"
    }, {
      "left" : "injector.getDecomposer().maybeExposeExpression(callNode);",
      "right" : "injector.getDecomposer().maybeExposeExpression(callNode);",
      "info" : "ExpressionStatement[12648-12705]:ExpressionStatement[12867-12924]"
    }, {
      "left" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = injector.classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[12757-12821]:VariableDeclarationStatement[12976-13040]"
    }, {
      "left" : "Preconditions.checkState(this != callSiteType);",
      "right" : "Preconditions.checkState(this != callSiteType);",
      "info" : "ExpressionStatement[12830-12877]:ExpressionStatement[13049-13096]"
    }, {
      "left" : "callSiteType.prepare(injector, callNode);",
      "right" : "callSiteType.prepare(injector, callNode);",
      "info" : "ExpressionStatement[12886-12927]:ExpressionStatement[13105-13146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12948-12954]:Modifier[13167-13173]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[12955-12963]:Modifier[13174-13182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12964-12968]:PrimitiveType[13183-13187]"
    }, {
      "left" : "prepare",
      "right" : "prepare",
      "info" : "SimpleName[12969-12976]:SimpleName[13188-13195]"
    }, {
      "left" : "FunctionInjector injector",
      "right" : "FunctionInjector injector",
      "info" : "SingleVariableDeclaration[12977-13002]:SingleVariableDeclaration[13196-13221]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[13004-13017]:SingleVariableDeclaration[13223-13236]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13110-13117]:Modifier[13329-13336]"
    }, {
      "left" : "CallSiteType",
      "right" : "CallSiteType",
      "info" : "SimpleType[13118-13130]:SimpleType[13337-13349]"
    }, {
      "left" : "classifyCallSite",
      "right" : "classifyCallSite",
      "info" : "SimpleName[13131-13147]:SimpleName[13350-13366]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[13148-13161]:SingleVariableDeclaration[13367-13380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13163-14849]:Block[13382-15068]"
    }, {
      "left" : "Node parent = callNode.getParent();",
      "right" : "Node parent = callNode.getParent();",
      "info" : "VariableDeclarationStatement[13169-13204]:VariableDeclarationStatement[13388-13423]"
    }, {
      "left" : "Node grandParent = parent.getParent();",
      "right" : "Node grandParent = parent.getParent();",
      "info" : "VariableDeclarationStatement[13209-13247]:VariableDeclarationStatement[13428-13466]"
    }, {
      "left" : "if (NodeUtil.isExprCall(parent))",
      "right" : "if (NodeUtil.isExprCall(parent))",
      "info" : "IfStatement[13282-14807]:IfStatement[13501-15026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13315-13413]:Block[13534-13632]"
    }, {
      "left" : "return CallSiteType.SIMPLE_CALL;",
      "right" : "return CallSiteType.SIMPLE_CALL;",
      "info" : "ReturnStatement[13375-13407]:ReturnStatement[13594-13626]"
    }, {
      "left" : "if (NodeUtil.isExprAssign(grandParent)\n        && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)\n        && parent.getFirstChild().isName()\n        && !NodeUtil.isConstantName(parent.getFirstChild()))",
      "right" : "if (NodeUtil.isExprAssign(grandParent)\n        && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)\n        && parent.getFirstChild().isName()\n        && !NodeUtil.isConstantName(parent.getFirstChild()))",
      "info" : "IfStatement[13419-14807]:IfStatement[13638-15026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13624-13737]:Block[13843-13956]"
    }, {
      "left" : "return CallSiteType.SIMPLE_ASSIGNMENT;",
      "right" : "return CallSiteType.SIMPLE_ASSIGNMENT;",
      "info" : "ReturnStatement[13693-13731]:ReturnStatement[13912-13950]"
    }, {
      "left" : "if (parent.isName()\n        && !NodeUtil.isConstantName(parent)\n        && grandParent.isVar()\n        && grandParent.hasOneChild())",
      "right" : "if (parent.isName()\n        && !NodeUtil.isConstantName(parent)\n        && grandParent.isVar()\n        && grandParent.hasOneChild())",
      "info" : "IfStatement[13743-14807]:IfStatement[13962-15026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13876-14144]:Block[14095-14363]"
    }, {
      "left" : "return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;",
      "right" : "return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;",
      "info" : "ReturnStatement[14091-14138]:ReturnStatement[14310-14357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14150-14807]:Block[14369-15026]"
    }, {
      "left" : "Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);",
      "right" : "Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);",
      "info" : "VariableDeclarationStatement[14158-14230]:VariableDeclarationStatement[14377-14449]"
    }, {
      "left" : "if (expressionRoot != null)",
      "right" : "if (expressionRoot != null)",
      "info" : "IfStatement[14237-14801]:IfStatement[14456-15020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14265-14801]:Block[14484-15020]"
    }, {
      "left" : "ExpressionDecomposer decomposer = new ExpressionDecomposer(\n            compiler, safeNameIdSupplier, knownConstants);",
      "right" : "ExpressionDecomposer decomposer = new ExpressionDecomposer(\n            compiler, safeNameIdSupplier, knownConstants);",
      "info" : "VariableDeclarationStatement[14275-14393]:VariableDeclarationStatement[14494-14612]"
    }, {
      "left" : "DecompositionType type = decomposer.canExposeExpression(\n            callNode);",
      "right" : "DecompositionType type = decomposer.canExposeExpression(\n            callNode);",
      "info" : "VariableDeclarationStatement[14402-14481]:VariableDeclarationStatement[14621-14700]"
    }, {
      "left" : "if (type == DecompositionType.MOVABLE)",
      "right" : "if (type == DecompositionType.MOVABLE)",
      "info" : "IfStatement[14490-14793]:IfStatement[14709-15012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14529-14582]:Block[14748-14801]"
    }, {
      "left" : "return CallSiteType.EXPRESSION;",
      "right" : "return CallSiteType.EXPRESSION;",
      "info" : "ReturnStatement[14541-14572]:ReturnStatement[14760-14791]"
    }, {
      "left" : "if (type == DecompositionType.DECOMPOSABLE)",
      "right" : "if (type == DecompositionType.DECOMPOSABLE)",
      "info" : "IfStatement[14588-14793]:IfStatement[14807-15012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14632-14698]:Block[14851-14917]"
    }, {
      "left" : "return CallSiteType.DECOMPOSABLE_EXPRESSION;",
      "right" : "return CallSiteType.DECOMPOSABLE_EXPRESSION;",
      "info" : "ReturnStatement[14644-14688]:ReturnStatement[14863-14907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14704-14793]:Block[14923-15012]"
    }, {
      "left" : "Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);",
      "right" : "Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);",
      "info" : "ExpressionStatement[14716-14783]:ExpressionStatement[14935-15002]"
    }, {
      "left" : "return CallSiteType.UNSUPPORTED;",
      "right" : "return CallSiteType.UNSUPPORTED;",
      "info" : "ReturnStatement[14813-14845]:ReturnStatement[15032-15064]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14853-14860]:Modifier[15072-15079]"
    }, {
      "left" : "ExpressionDecomposer",
      "right" : "ExpressionDecomposer",
      "info" : "SimpleType[14861-14881]:SimpleType[15080-15100]"
    }, {
      "left" : "getDecomposer",
      "right" : "getDecomposer",
      "info" : "SimpleName[14882-14895]:SimpleName[15101-15114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14898-14995]:Block[15117-15214]"
    }, {
      "left" : "return new ExpressionDecomposer(\n        compiler, safeNameIdSupplier, knownConstants);",
      "right" : "return new ExpressionDecomposer(\n        compiler, safeNameIdSupplier, knownConstants);",
      "info" : "ReturnStatement[14904-14991]:ReturnStatement[15123-15210]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15134-15138]:PrimitiveType[15353-15357]"
    }, {
      "left" : "maybePrepareCall",
      "right" : "maybePrepareCall",
      "info" : "SimpleName[15139-15155]:SimpleName[15358-15374]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[15156-15169]:SingleVariableDeclaration[15375-15388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15171-15278]:Block[15390-15497]"
    }, {
      "left" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[15177-15232]:VariableDeclarationStatement[15396-15451]"
    }, {
      "left" : "callSiteType.prepare(this, callNode);",
      "right" : "callSiteType.prepare(this, callNode);",
      "info" : "ExpressionStatement[15237-15274]:ExpressionStatement[15456-15493]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15450-15457]:Modifier[15669-15676]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15458-15462]:SimpleType[15677-15681]"
    }, {
      "left" : "inlineFunction",
      "right" : "inlineFunction",
      "info" : "SimpleName[15463-15477]:SimpleName[15682-15696]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[15485-15498]:SingleVariableDeclaration[15704-15717]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[15500-15511]:SingleVariableDeclaration[15719-15730]"
    }, {
      "left" : "String fnName",
      "right" : "String fnName",
      "info" : "SingleVariableDeclaration[15513-15526]:SingleVariableDeclaration[15732-15745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15528-18312]:Block[15747-18531]"
    }, {
      "left" : "Node parent = callNode.getParent();",
      "right" : "Node parent = callNode.getParent();",
      "info" : "VariableDeclarationStatement[15534-15569]:VariableDeclarationStatement[15753-15788]"
    }, {
      "left" : "Node grandParent = parent.getParent();",
      "right" : "Node grandParent = parent.getParent();",
      "info" : "VariableDeclarationStatement[15574-15612]:VariableDeclarationStatement[15793-15831]"
    }, {
      "left" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[15741-15796]:VariableDeclarationStatement[15960-16015]"
    }, {
      "left" : "Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);",
      "right" : "Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);",
      "info" : "ExpressionStatement[15801-15871]:ExpressionStatement[16020-16090]"
    }, {
      "left" : "boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);",
      "right" : "boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);",
      "info" : "VariableDeclarationStatement[15877-15932]:VariableDeclarationStatement[16096-16151]"
    }, {
      "left" : "String resultName = null;",
      "right" : "String resultName = null;",
      "info" : "VariableDeclarationStatement[16080-16105]:VariableDeclarationStatement[16299-16324]"
    }, {
      "left" : "boolean needsDefaultReturnResult = true;",
      "right" : "boolean needsDefaultReturnResult = true;",
      "info" : "VariableDeclarationStatement[16110-16150]:VariableDeclarationStatement[16329-16369]"
    }, {
      "left" : "switch (callSiteType) {\n      case SIMPLE_ASSIGNMENT:\n        resultName = parent.getFirstChild().getString();\n        break;\n\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        resultName = parent.getString();\n        break;\n\n      case SIMPLE_CALL:\n        resultName = null;  // \"foo()\" doesn't need a result.\n        needsDefaultReturnResult = false;\n        break;\n\n      case EXPRESSION:\n        throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");\n\n      case DECOMPOSABLE_EXPRESSION:\n        throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "right" : "switch (callSiteType) {\n      case SIMPLE_ASSIGNMENT:\n        resultName = parent.getFirstChild().getString();\n        break;\n\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        resultName = parent.getString();\n        break;\n\n      case SIMPLE_CALL:\n        resultName = null;  // \"foo()\" doesn't need a result.\n        needsDefaultReturnResult = false;\n        break;\n\n      case EXPRESSION:\n        throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");\n\n      case DECOMPOSABLE_EXPRESSION:\n        throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "info" : "SwitchStatement[16155-16900]:SwitchStatement[16374-17119]"
    }, {
      "left" : "case SIMPLE_ASSIGNMENT:",
      "right" : "case SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[16185-16208]:SwitchCase[16404-16427]"
    }, {
      "left" : "resultName = parent.getFirstChild().getString();",
      "right" : "resultName = parent.getFirstChild().getString();",
      "info" : "ExpressionStatement[16217-16265]:ExpressionStatement[16436-16484]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16274-16280]:BreakStatement[16493-16499]"
    }, {
      "left" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "right" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[16288-16320]:SwitchCase[16507-16539]"
    }, {
      "left" : "resultName = parent.getString();",
      "right" : "resultName = parent.getString();",
      "info" : "ExpressionStatement[16329-16361]:ExpressionStatement[16548-16580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16370-16376]:BreakStatement[16589-16595]"
    }, {
      "left" : "case SIMPLE_CALL:",
      "right" : "case SIMPLE_CALL:",
      "info" : "SwitchCase[16384-16401]:SwitchCase[16603-16620]"
    }, {
      "left" : "resultName = null;",
      "right" : "resultName = null;",
      "info" : "ExpressionStatement[16410-16428]:ExpressionStatement[16629-16647]"
    }, {
      "left" : "needsDefaultReturnResult = false;",
      "right" : "needsDefaultReturnResult = false;",
      "info" : "ExpressionStatement[16472-16505]:ExpressionStatement[16691-16724]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16514-16520]:BreakStatement[16733-16739]"
    }, {
      "left" : "case EXPRESSION:",
      "right" : "case EXPRESSION:",
      "info" : "SwitchCase[16528-16544]:SwitchCase[16747-16763]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");",
      "right" : "throw new IllegalStateException(\n            \"Movable expressions must be moved before inlining.\");",
      "info" : "ThrowStatement[16553-16652]:ThrowStatement[16772-16871]"
    }, {
      "left" : "case DECOMPOSABLE_EXPRESSION:",
      "right" : "case DECOMPOSABLE_EXPRESSION:",
      "info" : "SwitchCase[16660-16689]:SwitchCase[16879-16908]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");",
      "right" : "throw new IllegalStateException(\n            \"Decomposable expressions must be decomposed before inlining.\");",
      "info" : "ThrowStatement[16698-16807]:ThrowStatement[16917-17026]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16815-16823]:SwitchCase[17034-17042]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "right" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "info" : "ThrowStatement[16832-16894]:ThrowStatement[17051-17113]"
    }, {
      "left" : "FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n        compiler, this.safeNameIdSupplier);",
      "right" : "FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n        compiler, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[16906-17010]:VariableDeclarationStatement[17125-17229]"
    }, {
      "left" : "Node newBlock = mutator.mutate(\n        fnName, fnNode, callNode, resultName,\n        needsDefaultReturnResult, isCallInLoop);",
      "right" : "Node newBlock = mutator.mutate(\n        fnName, fnNode, callNode, resultName,\n        needsDefaultReturnResult, isCallInLoop);",
      "info" : "VariableDeclarationStatement[17016-17142]:VariableDeclarationStatement[17235-17361]"
    }, {
      "left" : "Node greatGrandParent = grandParent.getParent();",
      "right" : "Node greatGrandParent = grandParent.getParent();",
      "info" : "VariableDeclarationStatement[17308-17356]:VariableDeclarationStatement[17527-17575]"
    }, {
      "left" : "switch (callSiteType) {\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        // Remove the call from the name node.\n        parent.removeChild(parent.getFirstChild());\n        Preconditions.checkState(parent.getFirstChild() == null);\n        // Add the call, after the VAR.\n        greatGrandParent.addChildAfter(newBlock, grandParent);\n        break;\n\n      case SIMPLE_ASSIGNMENT:\n        // The assignment is now part of the inline function so\n        // replace it completely.\n        Preconditions.checkState(grandParent.isExprResult());\n        greatGrandParent.replaceChild(grandParent, newBlock);\n        break;\n\n      case SIMPLE_CALL:\n        // If nothing is looking at the result just replace the call.\n        Preconditions.checkState(parent.isExprResult());\n        grandParent.replaceChild(parent, newBlock);\n        break;\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "right" : "switch (callSiteType) {\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        // Remove the call from the name node.\n        parent.removeChild(parent.getFirstChild());\n        Preconditions.checkState(parent.getFirstChild() == null);\n        // Add the call, after the VAR.\n        greatGrandParent.addChildAfter(newBlock, grandParent);\n        break;\n\n      case SIMPLE_ASSIGNMENT:\n        // The assignment is now part of the inline function so\n        // replace it completely.\n        Preconditions.checkState(grandParent.isExprResult());\n        greatGrandParent.replaceChild(grandParent, newBlock);\n        break;\n\n      case SIMPLE_CALL:\n        // If nothing is looking at the result just replace the call.\n        Preconditions.checkState(parent.isExprResult());\n        grandParent.replaceChild(parent, newBlock);\n        break;\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }",
      "info" : "SwitchStatement[17361-18286]:SwitchStatement[17580-18505]"
    }, {
      "left" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "right" : "case VAR_DECL_SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[17391-17423]:SwitchCase[17610-17642]"
    }, {
      "left" : "parent.removeChild(parent.getFirstChild());",
      "right" : "parent.removeChild(parent.getFirstChild());",
      "info" : "ExpressionStatement[17479-17522]:ExpressionStatement[17698-17741]"
    }, {
      "left" : "Preconditions.checkState(parent.getFirstChild() == null);",
      "right" : "Preconditions.checkState(parent.getFirstChild() == null);",
      "info" : "ExpressionStatement[17531-17588]:ExpressionStatement[17750-17807]"
    }, {
      "left" : "greatGrandParent.addChildAfter(newBlock, grandParent);",
      "right" : "greatGrandParent.addChildAfter(newBlock, grandParent);",
      "info" : "ExpressionStatement[17637-17691]:ExpressionStatement[17856-17910]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17700-17706]:BreakStatement[17919-17925]"
    }, {
      "left" : "case SIMPLE_ASSIGNMENT:",
      "right" : "case SIMPLE_ASSIGNMENT:",
      "info" : "SwitchCase[17714-17737]:SwitchCase[17933-17956]"
    }, {
      "left" : "Preconditions.checkState(grandParent.isExprResult());",
      "right" : "Preconditions.checkState(grandParent.isExprResult());",
      "info" : "ExpressionStatement[17844-17897]:ExpressionStatement[18063-18116]"
    }, {
      "left" : "greatGrandParent.replaceChild(grandParent, newBlock);",
      "right" : "greatGrandParent.replaceChild(grandParent, newBlock);",
      "info" : "ExpressionStatement[17906-17959]:ExpressionStatement[18125-18178]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17968-17974]:BreakStatement[18187-18193]"
    }, {
      "left" : "case SIMPLE_CALL:",
      "right" : "case SIMPLE_CALL:",
      "info" : "SwitchCase[17982-17999]:SwitchCase[18201-18218]"
    }, {
      "left" : "Preconditions.checkState(parent.isExprResult());",
      "right" : "Preconditions.checkState(parent.isExprResult());",
      "info" : "ExpressionStatement[18078-18126]:ExpressionStatement[18297-18345]"
    }, {
      "left" : "grandParent.replaceChild(parent, newBlock);",
      "right" : "grandParent.replaceChild(parent, newBlock);",
      "info" : "ExpressionStatement[18135-18178]:ExpressionStatement[18354-18397]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18187-18193]:BreakStatement[18406-18412]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18201-18209]:SwitchCase[18420-18428]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "right" : "throw new IllegalStateException(\"Unexpected call site type.\");",
      "info" : "ThrowStatement[18218-18280]:ThrowStatement[18437-18499]"
    }, {
      "left" : "return newBlock;",
      "right" : "return newBlock;",
      "info" : "ReturnStatement[18292-18308]:ReturnStatement[18511-18527]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18469-18476]:PrimitiveType[18688-18695]"
    }, {
      "left" : "isDirectCallNodeReplacementPossible",
      "right" : "isDirectCallNodeReplacementPossible",
      "info" : "SimpleName[18477-18512]:SimpleName[18696-18731]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[18513-18524]:SingleVariableDeclaration[18732-18743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18526-19128]:Block[18745-19347]"
    }, {
      "left" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "right" : "Node block = NodeUtil.getFunctionBody(fnNode);",
      "info" : "VariableDeclarationStatement[18578-18624]:VariableDeclarationStatement[18797-18843]"
    }, {
      "left" : "if (!block.hasChildren())",
      "right" : "if (!block.hasChildren())",
      "info" : "IfStatement[18788-19105]:IfStatement[19007-19324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18814-18879]:Block[19033-19098]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18861-18873]:ReturnStatement[19080-19092]"
    }, {
      "left" : "if (block.hasOneChild())",
      "right" : "if (block.hasOneChild())",
      "info" : "IfStatement[18885-19105]:IfStatement[19104-19324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18910-19105]:Block[19129-19324]"
    }, {
      "left" : "if (block.getFirstChild().isReturn()\n          && block.getFirstChild().getFirstChild() != null)",
      "right" : "if (block.getFirstChild().isReturn()\n          && block.getFirstChild().getFirstChild() != null)",
      "info" : "IfStatement[18972-19099]:IfStatement[19191-19318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19069-19099]:Block[19288-19318]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19079-19091]:ReturnStatement[19298-19310]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19111-19124]:ReturnStatement[19330-19343]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19560-19567]:Modifier[19779-19786]"
    }, {
      "left" : "CanInlineResult",
      "right" : "CanInlineResult",
      "info" : "SimpleType[19568-19583]:SimpleType[19787-19802]"
    }, {
      "left" : "canInlineReferenceAsStatementBlock",
      "right" : "canInlineReferenceAsStatementBlock",
      "info" : "SimpleName[19584-19618]:SimpleName[19803-19837]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19626-19641]:SingleVariableDeclaration[19845-19860]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[19643-19656]:SingleVariableDeclaration[19862-19875]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[19658-19669]:SingleVariableDeclaration[19877-19888]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[19671-19695]:SingleVariableDeclaration[19890-19914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19697-20397]:Block[19916-20616]"
    }, {
      "left" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "right" : "CallSiteType callSiteType = classifyCallSite(callNode);",
      "info" : "VariableDeclarationStatement[19703-19758]:VariableDeclarationStatement[19922-19977]"
    }, {
      "left" : "if (callSiteType == CallSiteType.UNSUPPORTED)",
      "right" : "if (callSiteType == CallSiteType.UNSUPPORTED)",
      "info" : "IfStatement[19763-19849]:IfStatement[19982-20068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19809-19849]:Block[20028-20068]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[19817-19843]:ReturnStatement[20036-20062]"
    }, {
      "left" : "if (!allowDecomposition\n        && (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n            || callSiteType == CallSiteType.EXPRESSION))",
      "right" : "if (!allowDecomposition\n        && (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n            || callSiteType == CallSiteType.EXPRESSION))",
      "info" : "IfStatement[19855-20041]:IfStatement[20074-20260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20001-20041]:Block[20220-20260]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[20009-20035]:ReturnStatement[20228-20254]"
    }, {
      "left" : "if (!callMeetsBlockInliningRequirements(\n            t, callNode, fnNode, namesToAlias))",
      "right" : "if (!callMeetsBlockInliningRequirements(\n            t, callNode, fnNode, namesToAlias))",
      "info" : "IfStatement[20047-20176]:IfStatement[20266-20395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20136-20176]:Block[20355-20395]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[20144-20170]:ReturnStatement[20363-20389]"
    }, {
      "left" : "if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n        || callSiteType == CallSiteType.EXPRESSION)",
      "right" : "if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION\n        || callSiteType == CallSiteType.EXPRESSION)",
      "info" : "IfStatement[20182-20393]:IfStatement[20401-20612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20291-20346]:Block[20510-20565]"
    }, {
      "left" : "return CanInlineResult.AFTER_PREPARATION;",
      "right" : "return CanInlineResult.AFTER_PREPARATION;",
      "info" : "ReturnStatement[20299-20340]:ReturnStatement[20518-20559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20352-20393]:Block[20571-20612]"
    }, {
      "left" : "return CanInlineResult.YES;",
      "right" : "return CanInlineResult.YES;",
      "info" : "ReturnStatement[20360-20387]:ReturnStatement[20579-20606]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20608-20615]:Modifier[20827-20834]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20616-20623]:PrimitiveType[20835-20842]"
    }, {
      "left" : "callMeetsBlockInliningRequirements",
      "right" : "callMeetsBlockInliningRequirements",
      "info" : "SimpleName[20624-20658]:SimpleName[20843-20877]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[20666-20681]:SingleVariableDeclaration[20885-20900]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[20683-20696]:SingleVariableDeclaration[20902-20915]"
    }, {
      "left" : "final Node fnNode",
      "right" : "final Node fnNode",
      "info" : "SingleVariableDeclaration[20698-20715]:SingleVariableDeclaration[20917-20934]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[20723-20747]:SingleVariableDeclaration[20942-20966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20749-22997]:Block[20968-23216]"
    }, {
      "left" : "final boolean assumeMinimumCapture = this.assumeMinimumCapture;",
      "right" : "final boolean assumeMinimumCapture = this.assumeMinimumCapture;",
      "info" : "VariableDeclarationStatement[20755-20818]:VariableDeclarationStatement[20974-21037]"
    }, {
      "left" : "boolean fnContainsVars = NodeUtil.has(\n        NodeUtil.getFunctionBody(fnNode),\n        new NodeUtil.MatchDeclaration(),\n        new NodeUtil.MatchShallowStatement());",
      "right" : "boolean fnContainsVars = NodeUtil.has(\n        NodeUtil.getFunctionBody(fnNode),\n        new NodeUtil.MatchDeclaration(),\n        new NodeUtil.MatchShallowStatement());",
      "info" : "VariableDeclarationStatement[21286-21454]:VariableDeclarationStatement[21505-21673]"
    }, {
      "left" : "boolean forbidTemps = false;",
      "right" : "boolean forbidTemps = false;",
      "info" : "VariableDeclarationStatement[21459-21487]:VariableDeclarationStatement[21678-21706]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[21492-22198]:IfStatement[21711-22417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21516-22198]:Block[21735-22417]"
    }, {
      "left" : "Node fnCaller = t.getScopeRoot();",
      "right" : "Node fnCaller = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[21524-21557]:VariableDeclarationStatement[21743-21776]"
    }, {
      "left" : "Node fnCallerBody = fnCaller.getLastChild();",
      "right" : "Node fnCallerBody = fnCaller.getLastChild();",
      "info" : "VariableDeclarationStatement[21564-21608]:VariableDeclarationStatement[21783-21827]"
    }, {
      "left" : "Predicate<Node> match = new Predicate<Node>(){\n        @Override\n        public boolean apply(Node n) {\n          if (n.isName()) {\n            return n.getString().equals(\"eval\");\n          }\n          if (!assumeMinimumCapture && n.isFunction()) {\n            return n != fnNode;\n          }\n          return false;\n        }\n      };",
      "right" : "Predicate<Node> match = new Predicate<Node>(){\n        @Override\n        public boolean apply(Node n) {\n          if (n.isName()) {\n            return n.getString().equals(\"eval\");\n          }\n          if (!assumeMinimumCapture && n.isFunction()) {\n            return n != fnNode;\n          }\n          return false;\n        }\n      };",
      "info" : "VariableDeclarationStatement[21762-22098]:VariableDeclarationStatement[21981-22317]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21817-21826]:MarkerAnnotation[22036-22045]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21835-21841]:Modifier[22054-22060]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21842-21849]:PrimitiveType[22061-22068]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[21850-21855]:SimpleName[22069-22074]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21856-21862]:SingleVariableDeclaration[22075-22081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21864-22089]:Block[22083-22308]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[21876-21954]:IfStatement[22095-22173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21892-21954]:Block[22111-22173]"
    }, {
      "left" : "return n.getString().equals(\"eval\");",
      "right" : "return n.getString().equals(\"eval\");",
      "info" : "ReturnStatement[21906-21942]:ReturnStatement[22125-22161]"
    }, {
      "left" : "if (!assumeMinimumCapture && n.isFunction())",
      "right" : "if (!assumeMinimumCapture && n.isFunction())",
      "info" : "IfStatement[21965-22055]:IfStatement[22184-22274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22010-22055]:Block[22229-22274]"
    }, {
      "left" : "return n != fnNode;",
      "right" : "return n != fnNode;",
      "info" : "ReturnStatement[22024-22043]:ReturnStatement[22243-22262]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22066-22079]:ReturnStatement[22285-22298]"
    }, {
      "left" : "forbidTemps = NodeUtil.has(fnCallerBody,\n          match, NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "forbidTemps = NodeUtil.has(fnCallerBody,\n          match, NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[22105-22192]:ExpressionStatement[22324-22411]"
    }, {
      "left" : "if (fnContainsVars && forbidTemps)",
      "right" : "if (fnContainsVars && forbidTemps)",
      "info" : "IfStatement[22204-22266]:IfStatement[22423-22485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22239-22266]:Block[22458-22485]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22247-22260]:ReturnStatement[22466-22479]"
    }, {
      "left" : "if (forbidTemps)",
      "right" : "if (forbidTemps)",
      "info" : "IfStatement[22413-22975]:IfStatement[22632-23194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22430-22975]:Block[22649-23194]"
    }, {
      "left" : "Map<String, Node> args =\n          FunctionArgumentInjector.getFunctionCallParameterMap(\n              fnNode, callNode, this.safeNameIdSupplier);",
      "right" : "Map<String, Node> args =\n          FunctionArgumentInjector.getFunctionCallParameterMap(\n              fnNode, callNode, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[22438-22584]:VariableDeclarationStatement[22657-22803]"
    }, {
      "left" : "boolean hasArgs = !args.isEmpty();",
      "right" : "boolean hasArgs = !args.isEmpty();",
      "info" : "VariableDeclarationStatement[22591-22625]:VariableDeclarationStatement[22810-22844]"
    }, {
      "left" : "if (hasArgs)",
      "right" : "if (hasArgs)",
      "info" : "IfStatement[22632-22969]:IfStatement[22851-23188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22645-22969]:Block[22864-23188]"
    }, {
      "left" : "Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);",
      "right" : "Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);",
      "info" : "VariableDeclarationStatement[22685-22745]:VariableDeclarationStatement[22904-22964]"
    }, {
      "left" : "FunctionArgumentInjector.maybeAddTempsForCallArguments(\n            fnNode, args, allNamesToAlias, compiler.getCodingConvention());",
      "right" : "FunctionArgumentInjector.maybeAddTempsForCallArguments(\n            fnNode, args, allNamesToAlias, compiler.getCodingConvention());",
      "info" : "ExpressionStatement[22754-22885]:ExpressionStatement[22973-23104]"
    }, {
      "left" : "if (!allNamesToAlias.isEmpty())",
      "right" : "if (!allNamesToAlias.isEmpty())",
      "info" : "IfStatement[22894-22961]:IfStatement[23113-23180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22926-22961]:Block[23145-23180]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22938-22951]:ReturnStatement[23157-23170]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22981-22993]:ReturnStatement[23200-23212]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23471-23478]:Modifier[23690-23697]"
    }, {
      "left" : "CanInlineResult",
      "right" : "CanInlineResult",
      "info" : "SimpleType[23479-23494]:SimpleType[23698-23713]"
    }, {
      "left" : "canInlineReferenceDirectly",
      "right" : "canInlineReferenceDirectly",
      "info" : "SimpleName[23495-23521]:SimpleName[23714-23740]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[23529-23542]:SingleVariableDeclaration[23748-23761]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[23544-23555]:SingleVariableDeclaration[23763-23774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23557-25093]:Block[23802-25176]"
    }, {
      "left" : "if (!isDirectCallNodeReplacementPossible(fnNode))",
      "right" : "if (!isDirectCallNodeReplacementPossible(fnNode))",
      "info" : "IfStatement[23563-23653]:IfStatement[23808-23898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23613-23653]:Block[23858-23898]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[23621-23647]:ReturnStatement[23866-23892]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23659-23663]:SimpleType[24628-24632]"
    }, {
      "left" : "Node cArg = callNode.getFirstChild().getNext();",
      "right" : "Node cArg = callNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[23743-23790]:VariableDeclarationStatement[23948-23995]"
    }, {
      "left" : "if (!callNode.getFirstChild().isName())",
      "right" : "if (!callNode.getFirstChild().isName())",
      "info" : "IfStatement[23962-24405]:IfStatement[24167-24610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24002-24405]:Block[24207-24610]"
    }, {
      "left" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "right" : "if (NodeUtil.isFunctionObjectCall(callNode))",
      "info" : "IfStatement[24010-24399]:IfStatement[24215-24604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24055-24250]:Block[24260-24455]"
    }, {
      "left" : "if (cArg == null || !cArg.isThis())",
      "right" : "if (cArg == null || !cArg.isThis())",
      "info" : "IfStatement[24127-24211]:IfStatement[24332-24416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24163-24211]:Block[24368-24416]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[24175-24201]:ReturnStatement[24380-24406]"
    }, {
      "left" : "cArg = cArg.getNext();",
      "right" : "cArg = cArg.getNext();",
      "info" : "ExpressionStatement[24220-24242]:ExpressionStatement[24425-24447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24256-24399]:Block[24461-24604]"
    }, {
      "left" : "Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));",
      "right" : "Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));",
      "info" : "ExpressionStatement[24323-24391]:ExpressionStatement[24528-24596]"
    }, {
      "left" : "Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();",
      "right" : "Map<String, Node> args =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.throwawayNameSupplier);",
      "info" : "VariableDeclarationStatement[24411-24481]:VariableDeclarationStatement[24616-24761]"
    }, {
      "left" : "fnParam",
      "right" : "args",
      "info" : "SimpleName[24416-24423]:SimpleName[24634-24638]"
    }, {
      "left" : "NodeUtil",
      "right" : "FunctionArgumentInjector",
      "info" : "SimpleName[24426-24434]:SimpleName[24649-24673]"
    }, {
      "left" : "NodeUtil.getFunctionParameters(fnNode)",
      "right" : "FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.throwawayNameSupplier)",
      "info" : "MethodInvocation[24426-24464]:MethodInvocation[24649-24760]"
    }, {
      "left" : "getFunctionParameters",
      "right" : "getFunctionCallParameterMap",
      "info" : "SimpleName[24435-24456]:SimpleName[24674-24701]"
    }, {
      "left" : "cArg",
      "right" : "hasArgs",
      "info" : "SimpleName[24493-24497]:SimpleName[24774-24781]"
    }, {
      "left" : "fnParam",
      "right" : "args",
      "info" : "SimpleName[24509-24516]:SimpleName[24785-24789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24526-25056]:Block[24818-25139]"
    }, {
      "left" : "fnParam",
      "right" : "Set",
      "info" : "SimpleName[24538-24545]:SimpleName[24854-24857]"
    }, {
      "left" : "cArg",
      "right" : "String",
      "info" : "SimpleName[24569-24573]:SimpleName[24858-24864]"
    }, {
      "left" : "NodeUtil",
      "right" : "Sets",
      "info" : "SimpleName[24599-24607]:SimpleName[24884-24888]"
    }, {
      "left" : "NodeUtil.mayEffectMutableState(cArg, compiler)",
      "right" : "Sets.newHashSet(namesToAlias)",
      "info" : "MethodInvocation[24599-24645]:MethodInvocation[24884-24913]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "newHashSet",
      "info" : "SimpleName[24608-24629]:SimpleName[24889-24899]"
    }, {
      "left" : "cArg",
      "right" : "namesToAlias",
      "info" : "SimpleName[24630-24634]:SimpleName[24900-24912]"
    }, {
      "left" : "NodeUtil",
      "right" : "FunctionArgumentInjector",
      "info" : "METHOD_INVOCATION_RECEIVER[24663-24671]:METHOD_INVOCATION_RECEIVER[24921-24945]"
    }, {
      "left" : "getNameReferenceCount",
      "right" : "maybeAddTempsForCallArguments",
      "info" : "SimpleName[24672-24693]:SimpleName[24946-24975]"
    }, {
      "left" : "fnParam",
      "right" : "fnNode",
      "info" : "SimpleName[24720-24727]:SimpleName[24987-24993]"
    }, {
      "left" : "getString",
      "right" : "args",
      "info" : "SimpleName[24728-24737]:SimpleName[24995-24999]"
    }, {
      "left" : "fnParam",
      "right" : "allNamesToAlias",
      "info" : "SimpleName[24817-24824]:SimpleName[25001-25016]"
    }, {
      "left" : "fnParam",
      "right" : "compiler",
      "info" : "SimpleName[24827-24834]:SimpleName[25018-25026]"
    }, {
      "left" : "fnParam.getNext()",
      "right" : "compiler.getCodingConvention()",
      "info" : "MethodInvocation[24827-24844]:MethodInvocation[25018-25048]"
    }, {
      "left" : "getNext",
      "right" : "getCodingConvention",
      "info" : "SimpleName[24835-24842]:SimpleName[25027-25046]"
    }, {
      "left" : "if (NodeUtil.mayHaveSideEffects(cArg, compiler))",
      "right" : "if (!allNamesToAlias.isEmpty())",
      "info" : "IfStatement[24916-25011]:IfStatement[25057-25133]"
    }, {
      "left" : "NodeUtil",
      "right" : "allNamesToAlias",
      "info" : "SimpleName[24920-24928]:SimpleName[25062-25077]"
    }, {
      "left" : "NodeUtil.mayHaveSideEffects(cArg, compiler)",
      "right" : "allNamesToAlias.isEmpty()",
      "info" : "MethodInvocation[24920-24963]:MethodInvocation[25062-25087]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "isEmpty",
      "info" : "SimpleName[24929-24947]:SimpleName[25078-25085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24965-25011]:Block[25089-25133]"
    }, {
      "left" : "return CanInlineResult.NO;",
      "right" : "return CanInlineResult.NO;",
      "info" : "ReturnStatement[24975-25001]:ReturnStatement[25099-25125]"
    }, {
      "left" : "return CanInlineResult.YES;",
      "right" : "return CanInlineResult.YES;",
      "info" : "ReturnStatement[25062-25089]:ReturnStatement[25145-25172]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25209-25216]:PrimitiveType[25292-25299]"
    }, {
      "left" : "inliningLowersCost",
      "right" : "inliningLowersCost",
      "info" : "SimpleName[25217-25235]:SimpleName[25300-25318]"
    }, {
      "left" : "JSModule fnModule",
      "right" : "JSModule fnModule",
      "info" : "SingleVariableDeclaration[25243-25260]:SingleVariableDeclaration[25326-25343]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[25262-25273]:SingleVariableDeclaration[25345-25356]"
    }, {
      "left" : "Collection<? extends Reference> refs",
      "right" : "Collection<? extends Reference> refs",
      "info" : "SingleVariableDeclaration[25275-25311]:SingleVariableDeclaration[25358-25394]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[25319-25343]:SingleVariableDeclaration[25402-25426]"
    }, {
      "left" : "boolean isRemovable",
      "right" : "boolean isRemovable",
      "info" : "SingleVariableDeclaration[25345-25364]:SingleVariableDeclaration[25428-25447]"
    }, {
      "left" : "boolean referencesThis",
      "right" : "boolean referencesThis",
      "info" : "SingleVariableDeclaration[25366-25388]:SingleVariableDeclaration[25449-25471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25390-27314]:Block[25473-27397]"
    }, {
      "left" : "int referenceCount = refs.size();",
      "right" : "int referenceCount = refs.size();",
      "info" : "VariableDeclarationStatement[25396-25429]:VariableDeclarationStatement[25479-25512]"
    }, {
      "left" : "if (referenceCount == 0)",
      "right" : "if (referenceCount == 0)",
      "info" : "IfStatement[25434-25485]:IfStatement[25517-25568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25459-25485]:Block[25542-25568]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25467-25479]:ReturnStatement[25550-25562]"
    }, {
      "left" : "int referencesUsingBlockInlining = 0;",
      "right" : "int referencesUsingBlockInlining = 0;",
      "info" : "VariableDeclarationStatement[25491-25528]:VariableDeclarationStatement[25574-25611]"
    }, {
      "left" : "boolean checkModules = isRemovable && fnModule != null;",
      "right" : "boolean checkModules = isRemovable && fnModule != null;",
      "info" : "VariableDeclarationStatement[25534-25589]:VariableDeclarationStatement[25617-25672]"
    }, {
      "left" : "JSModuleGraph moduleGraph = compiler.getModuleGraph();",
      "right" : "JSModuleGraph moduleGraph = compiler.getModuleGraph();",
      "info" : "VariableDeclarationStatement[25594-25648]:VariableDeclarationStatement[25677-25731]"
    }, {
      "left" : "for (Reference ref : refs)",
      "right" : "for (Reference ref : refs)",
      "info" : "EnhancedForStatement[25654-26241]:EnhancedForStatement[25737-26324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25681-26241]:Block[25764-26324]"
    }, {
      "left" : "if (ref.mode == InliningMode.BLOCK)",
      "right" : "if (ref.mode == InliningMode.BLOCK)",
      "info" : "IfStatement[25689-25774]:IfStatement[25772-25857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25725-25774]:Block[25808-25857]"
    }, {
      "left" : "referencesUsingBlockInlining++;",
      "right" : "referencesUsingBlockInlining++;",
      "info" : "ExpressionStatement[25735-25766]:ExpressionStatement[25818-25849]"
    }, {
      "left" : "if (checkModules && ref.module != null)",
      "right" : "if (checkModules && ref.module != null)",
      "info" : "IfStatement[25851-26235]:IfStatement[25934-26318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25891-26235]:Block[25974-26318]"
    }, {
      "left" : "if (ref.module != fnModule &&\n            !moduleGraph.dependsOn(ref.module, fnModule))",
      "right" : "if (ref.module != fnModule &&\n            !moduleGraph.dependsOn(ref.module, fnModule))",
      "info" : "IfStatement[25901-26227]:IfStatement[25984-26310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25989-26227]:Block[26072-26310]"
    }, {
      "left" : "isRemovable = false;",
      "right" : "isRemovable = false;",
      "info" : "ExpressionStatement[26124-26144]:ExpressionStatement[26207-26227]"
    }, {
      "left" : "checkModules = false;",
      "right" : "checkModules = false;",
      "info" : "ExpressionStatement[26155-26176]:ExpressionStatement[26238-26259]"
    }, {
      "left" : "int referencesUsingDirectInlining = referenceCount -\n        referencesUsingBlockInlining;",
      "right" : "int referencesUsingDirectInlining = referenceCount -\n        referencesUsingBlockInlining;",
      "info" : "VariableDeclarationStatement[26247-26337]:VariableDeclarationStatement[26330-26420]"
    }, {
      "left" : "if (referenceCount == 1 && isRemovable &&\n        referencesUsingDirectInlining == 1)",
      "right" : "if (referenceCount == 1 && isRemovable &&\n        referencesUsingDirectInlining == 1)",
      "info" : "IfStatement[26711-26823]:IfStatement[26794-26906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26797-26823]:Block[26880-26906]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26805-26817]:ReturnStatement[26888-26900]"
    }, {
      "left" : "int callCost = estimateCallCost(fnNode, referencesThis);",
      "right" : "int callCost = estimateCallCost(fnNode, referencesThis);",
      "info" : "VariableDeclarationStatement[26829-26885]:VariableDeclarationStatement[26912-26968]"
    }, {
      "left" : "int overallCallCost = callCost * referenceCount;",
      "right" : "int overallCallCost = callCost * referenceCount;",
      "info" : "VariableDeclarationStatement[26890-26938]:VariableDeclarationStatement[26973-27021]"
    }, {
      "left" : "int costDeltaDirect = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.DIRECT);",
      "right" : "int costDeltaDirect = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.DIRECT);",
      "info" : "VariableDeclarationStatement[26944-27034]:VariableDeclarationStatement[27027-27117]"
    }, {
      "left" : "int costDeltaBlock = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.BLOCK);",
      "right" : "int costDeltaBlock = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.BLOCK);",
      "info" : "VariableDeclarationStatement[27039-27127]:VariableDeclarationStatement[27122-27210]"
    }, {
      "left" : "return doesLowerCost(fnNode, overallCallCost,\n        referencesUsingDirectInlining, costDeltaDirect,\n        referencesUsingBlockInlining, costDeltaBlock,\n        isRemovable);",
      "right" : "return doesLowerCost(fnNode, overallCallCost,\n        referencesUsingDirectInlining, costDeltaDirect,\n        referencesUsingBlockInlining, costDeltaBlock,\n        isRemovable);",
      "info" : "ReturnStatement[27133-27310]:ReturnStatement[27216-27393]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27377-27384]:Modifier[27460-27467]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27385-27392]:PrimitiveType[27468-27475]"
    }, {
      "left" : "doesLowerCost",
      "right" : "doesLowerCost",
      "info" : "SimpleName[27393-27406]:SimpleName[27476-27489]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[27414-27425]:SingleVariableDeclaration[27497-27508]"
    }, {
      "left" : "int callCost",
      "right" : "int callCost",
      "info" : "SingleVariableDeclaration[27427-27439]:SingleVariableDeclaration[27510-27522]"
    }, {
      "left" : "int directInlines",
      "right" : "int directInlines",
      "info" : "SingleVariableDeclaration[27447-27464]:SingleVariableDeclaration[27530-27547]"
    }, {
      "left" : "int costDeltaDirect",
      "right" : "int costDeltaDirect",
      "info" : "SingleVariableDeclaration[27466-27485]:SingleVariableDeclaration[27549-27568]"
    }, {
      "left" : "int blockInlines",
      "right" : "int blockInlines",
      "info" : "SingleVariableDeclaration[27493-27509]:SingleVariableDeclaration[27576-27592]"
    }, {
      "left" : "int costDeltaBlock",
      "right" : "int costDeltaBlock",
      "info" : "SingleVariableDeclaration[27511-27529]:SingleVariableDeclaration[27594-27612]"
    }, {
      "left" : "boolean removable",
      "right" : "boolean removable",
      "info" : "SingleVariableDeclaration[27537-27554]:SingleVariableDeclaration[27620-27637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27556-28462]:Block[27639-28545]"
    }, {
      "left" : "int fnInstanceCount = directInlines + blockInlines - (removable ? 1 : 0);",
      "right" : "int fnInstanceCount = directInlines + blockInlines - (removable ? 1 : 0);",
      "info" : "VariableDeclarationStatement[27794-27867]:VariableDeclarationStatement[27877-27950]"
    }, {
      "left" : "if (fnInstanceCount == 0)",
      "right" : "if (fnInstanceCount == 0)",
      "info" : "IfStatement[27905-28221]:IfStatement[27988-28304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27931-28221]:Block[28014-28304]"
    }, {
      "left" : "if (blockInlines > 0 && costDeltaBlock > 0)",
      "right" : "if (blockInlines > 0 && costDeltaBlock > 0)",
      "info" : "IfStatement[28121-28196]:IfStatement[28204-28279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28165-28196]:Block[28248-28279]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28175-28188]:ReturnStatement[28258-28271]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28203-28215]:ReturnStatement[28286-28298]"
    }, {
      "left" : "int costDelta = (directInlines * costDeltaDirect) +\n        (blockInlines * costDeltaBlock);",
      "right" : "int costDelta = (directInlines * costDeltaDirect) +\n        (blockInlines * costDeltaBlock);",
      "info" : "VariableDeclarationStatement[28227-28319]:VariableDeclarationStatement[28310-28402]"
    }, {
      "left" : "int threshold = (callCost - costDelta) / fnInstanceCount;",
      "right" : "int threshold = (callCost - costDelta) / fnInstanceCount;",
      "info" : "VariableDeclarationStatement[28324-28381]:VariableDeclarationStatement[28407-28464]"
    }, {
      "left" : "return InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;",
      "right" : "return InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;",
      "info" : "ReturnStatement[28387-28458]:ReturnStatement[28470-28541]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28634-28641]:Modifier[28717-28724]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28642-28648]:Modifier[28725-28731]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28649-28652]:PrimitiveType[28732-28735]"
    }, {
      "left" : "estimateCallCost",
      "right" : "estimateCallCost",
      "info" : "SimpleName[28653-28669]:SimpleName[28736-28752]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[28670-28681]:SingleVariableDeclaration[28753-28764]"
    }, {
      "left" : "boolean referencesThis",
      "right" : "boolean referencesThis",
      "info" : "SingleVariableDeclaration[28683-28705]:SingleVariableDeclaration[28766-28788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28707-29343]:Block[28790-29426]"
    }, {
      "left" : "Node argsNode = NodeUtil.getFunctionParameters(fnNode);",
      "right" : "Node argsNode = NodeUtil.getFunctionParameters(fnNode);",
      "info" : "VariableDeclarationStatement[28713-28768]:VariableDeclarationStatement[28796-28851]"
    }, {
      "left" : "int numArgs = argsNode.getChildCount();",
      "right" : "int numArgs = argsNode.getChildCount();",
      "info" : "VariableDeclarationStatement[28773-28812]:VariableDeclarationStatement[28856-28895]"
    }, {
      "left" : "int callCost = NAME_COST_ESTIMATE + PAREN_COST;",
      "right" : "int callCost = NAME_COST_ESTIMATE + PAREN_COST;",
      "info" : "VariableDeclarationStatement[28818-28865]:VariableDeclarationStatement[28901-28948]"
    }, {
      "left" : "if (numArgs > 0)",
      "right" : "if (numArgs > 0)",
      "info" : "IfStatement[28870-28975]:IfStatement[28953-29058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28887-28975]:Block[28970-29058]"
    }, {
      "left" : "callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);",
      "right" : "callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);",
      "info" : "ExpressionStatement[28895-28969]:ExpressionStatement[28978-29052]"
    }, {
      "left" : "if (referencesThis)",
      "right" : "if (referencesThis)",
      "info" : "IfStatement[28981-29317]:IfStatement[29064-29400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29001-29317]:Block[29084-29400]"
    }, {
      "left" : "callCost += 5 + 5;",
      "right" : "callCost += 5 + 5;",
      "info" : "ExpressionStatement[29271-29289]:ExpressionStatement[29354-29372]"
    }, {
      "left" : "return callCost;",
      "right" : "return callCost;",
      "info" : "ReturnStatement[29323-29339]:ReturnStatement[29406-29422]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29450-29457]:Modifier[29533-29540]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29458-29464]:Modifier[29541-29547]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29465-29468]:PrimitiveType[29548-29551]"
    }, {
      "left" : "inlineCostDelta",
      "right" : "inlineCostDelta",
      "info" : "SimpleName[29469-29484]:SimpleName[29552-29567]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[29492-29503]:SingleVariableDeclaration[29575-29586]"
    }, {
      "left" : "Set<String> namesToAlias",
      "right" : "Set<String> namesToAlias",
      "info" : "SingleVariableDeclaration[29505-29529]:SingleVariableDeclaration[29588-29612]"
    }, {
      "left" : "InliningMode mode",
      "right" : "InliningMode mode",
      "info" : "SingleVariableDeclaration[29531-29548]:SingleVariableDeclaration[29614-29631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29550-31839]:Block[29633-31922]"
    }, {
      "left" : "int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();",
      "right" : "int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();",
      "info" : "VariableDeclarationStatement[29672-29744]:VariableDeclarationStatement[29755-29827]"
    }, {
      "left" : "int commaCount = (paramCount > 1) ? paramCount - 1 : 0;",
      "right" : "int commaCount = (paramCount > 1) ? paramCount - 1 : 0;",
      "info" : "VariableDeclarationStatement[29749-29804]:VariableDeclarationStatement[29832-29887]"
    }, {
      "left" : "int costDeltaFunctionOverhead = 15 + commaCount +\n        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);",
      "right" : "int costDeltaFunctionOverhead = 15 + commaCount +\n        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);",
      "info" : "VariableDeclarationStatement[29809-29928]:VariableDeclarationStatement[29892-30011]"
    }, {
      "left" : "Node block = fnNode.getLastChild();",
      "right" : "Node block = fnNode.getLastChild();",
      "info" : "VariableDeclarationStatement[29934-29969]:VariableDeclarationStatement[30017-30052]"
    }, {
      "left" : "if (!block.hasChildren())",
      "right" : "if (!block.hasChildren())",
      "info" : "IfStatement[29974-30109]:IfStatement[30057-30192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30000-30109]:Block[30083-30192]"
    }, {
      "left" : "return -costDeltaFunctionOverhead;",
      "right" : "return -costDeltaFunctionOverhead;",
      "info" : "ReturnStatement[30069-30103]:ReturnStatement[30152-30186]"
    }, {
      "left" : "if (mode == InliningMode.DIRECT)",
      "right" : "if (mode == InliningMode.DIRECT)",
      "info" : "IfStatement[30115-31835]:IfStatement[30198-31918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30148-30301]:Block[30231-30384]"
    }, {
      "left" : "return -(costDeltaFunctionOverhead + 7);",
      "right" : "return -(costDeltaFunctionOverhead + 7);",
      "info" : "ReturnStatement[30255-30295]:ReturnStatement[30338-30378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30307-31835]:Block[30390-31918]"
    }, {
      "left" : "int aliasCount = namesToAlias.size();",
      "right" : "int aliasCount = namesToAlias.size();",
      "info" : "VariableDeclarationStatement[30315-30352]:VariableDeclarationStatement[30398-30435]"
    }, {
      "left" : "final int inlineBlockOverhead = 4;",
      "right" : "final int inlineBlockOverhead = 4;",
      "info" : "VariableDeclarationStatement[30952-30986]:VariableDeclarationStatement[31035-31069]"
    }, {
      "left" : "final int perReturnOverhead = 2;",
      "right" : "final int perReturnOverhead = 2;",
      "info" : "VariableDeclarationStatement[31003-31035]:VariableDeclarationStatement[31086-31118]"
    }, {
      "left" : "final int perReturnResultOverhead = 3;",
      "right" : "final int perReturnResultOverhead = 3;",
      "info" : "VariableDeclarationStatement[31070-31108]:VariableDeclarationStatement[31153-31191]"
    }, {
      "left" : "final int perAliasOverhead = 3;",
      "right" : "final int perAliasOverhead = 3;",
      "info" : "VariableDeclarationStatement[31124-31155]:VariableDeclarationStatement[31207-31238]"
    }, {
      "left" : "int returnCount = NodeUtil.getNodeTypeReferenceCount(\n          block, Token.RETURN, new NodeUtil.MatchShallowStatement());",
      "right" : "int returnCount = NodeUtil.getNodeTypeReferenceCount(\n          block, Token.RETURN, new NodeUtil.MatchShallowStatement());",
      "info" : "VariableDeclarationStatement[31345-31468]:VariableDeclarationStatement[31428-31551]"
    }, {
      "left" : "int resultCount = (returnCount > 0) ? returnCount - 1 : 0;",
      "right" : "int resultCount = (returnCount > 0) ? returnCount - 1 : 0;",
      "info" : "VariableDeclarationStatement[31475-31533]:VariableDeclarationStatement[31558-31616]"
    }, {
      "left" : "int baseOverhead = (returnCount > 0) ? inlineBlockOverhead : 0;",
      "right" : "int baseOverhead = (returnCount > 0) ? inlineBlockOverhead : 0;",
      "info" : "VariableDeclarationStatement[31540-31603]:VariableDeclarationStatement[31623-31686]"
    }, {
      "left" : "int overhead = baseOverhead\n          + returnCount * perReturnOverhead\n          + resultCount * perReturnResultOverhead\n          + aliasCount * perAliasOverhead;",
      "right" : "int overhead = baseOverhead\n          + returnCount * perReturnOverhead\n          + resultCount * perReturnResultOverhead\n          + aliasCount * perAliasOverhead;",
      "info" : "VariableDeclarationStatement[31611-31775]:VariableDeclarationStatement[31694-31858]"
    }, {
      "left" : "return (overhead - costDeltaFunctionOverhead);",
      "right" : "return (overhead - costDeltaFunctionOverhead);",
      "info" : "ReturnStatement[31783-31829]:ReturnStatement[31866-31912]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31955-31961]:Modifier[32038-32044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31962-31966]:PrimitiveType[32045-32049]"
    }, {
      "left" : "setKnownConstants",
      "right" : "setKnownConstants",
      "info" : "SimpleName[31967-31984]:SimpleName[32050-32067]"
    }, {
      "left" : "Set<String> knownConstants",
      "right" : "Set<String> knownConstants",
      "info" : "SingleVariableDeclaration[31985-32011]:SingleVariableDeclaration[32068-32094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32013-32248]:Block[32096-32331]"
    }, {
      "left" : "Preconditions.checkState(this.knownConstants.isEmpty());",
      "right" : "Preconditions.checkState(this.knownConstants.isEmpty());",
      "info" : "ExpressionStatement[32146-32202]:ExpressionStatement[32229-32285]"
    }, {
      "left" : "this.knownConstants = knownConstants;",
      "right" : "this.knownConstants = knownConstants;",
      "info" : "ExpressionStatement[32207-32244]:ExpressionStatement[32290-32327]"
    } ]
  },
  "interFileMappings" : { }
}