{
  "matchedElements" : [
 {
    "left" : "class : RuntimeTypeCheck",
    "right" : "class : RuntimeTypeCheck",
    "info" : "TypeDeclaration[1382-12956]:TypeDeclaration[1382-13142]"
  }, {
    "left" : "ALPHA",
    "right" : "ALPHA",
    "info" : "FieldDeclaration[1843-2501]:FieldDeclaration[1843-2501]"
  }, {
    "left" : "public compare(t1 , t2 ) : int",
    "right" : "public compare(t1 , t2 ) : int",
    "info" : "MethodDeclaration[1922-2019]:MethodDeclaration[1922-2019]"
  }, {
    "left" : "private getName(type ) : ",
    "right" : "private getName(type ) : ",
    "info" : "MethodDeclaration[2025-2496]:MethodDeclaration[2025-2496]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[2505-2545]:FieldDeclaration[2505-2545]"
  }, {
    "left" : "logFunction",
    "right" : "logFunction",
    "info" : "FieldDeclaration[2548-2581]:FieldDeclaration[2548-2581]"
  }, {
    "left" : "package RuntimeTypeCheck(compiler , logFunction )",
    "right" : "package RuntimeTypeCheck(compiler , logFunction )",
    "info" : "MethodDeclaration[2585-2730]:MethodDeclaration[2585-2730]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[2734-2961]:MethodDeclaration[2734-2961]"
  }, {
    "left" : "class : AddMarkers",
    "right" : "class : AddMarkers",
    "info" : "TypeDeclaration[2965-6805]:TypeDeclaration[2965-6805]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[3641-3681]:FieldDeclaration[3641-3681]"
  }, {
    "left" : "private AddMarkers(compiler )",
    "right" : "private AddMarkers(compiler )",
    "info" : "MethodDeclaration[3687-3772]:MethodDeclaration[3687-3772]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[3778-3928]:MethodDeclaration[3778-3928]"
  }, {
    "left" : "private visitFunction(t , n ) : void",
    "right" : "private visitFunction(t , n ) : void",
    "info" : "MethodDeclaration[3934-4522]:MethodDeclaration[3934-4522]"
  }, {
    "left" : "private addMarker(funType , nodeToInsertAfter , interfaceType ) : ",
    "right" : "private addMarker(funType , nodeToInsertAfter , interfaceType ) : ",
    "info" : "MethodDeclaration[4528-5709]:MethodDeclaration[4528-5709]"
  }, {
    "left" : "private findNodeToInsertAfter(n ) : ",
    "right" : "private findNodeToInsertAfter(n ) : ",
    "info" : "MethodDeclaration[5715-6359]:MethodDeclaration[5715-6359]"
  }, {
    "left" : "private findEnclosingConstructorDeclaration(n ) : ",
    "right" : "private findEnclosingConstructorDeclaration(n ) : ",
    "info" : "MethodDeclaration[6365-6588]:MethodDeclaration[6365-6588]"
  }, {
    "left" : "private isClassDefiningCall(next ) : boolean",
    "right" : "private isClassDefiningCall(next ) : boolean",
    "info" : "MethodDeclaration[6594-6801]:MethodDeclaration[6594-6801]"
  }, {
    "left" : "class : AddChecks",
    "right" : "class : AddChecks",
    "info" : "TypeDeclaration[6809-11935]:TypeDeclaration[6809-12121]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[7261-7301]:FieldDeclaration[7261-7301]"
  }, {
    "left" : "private AddChecks(compiler )",
    "right" : "private AddChecks(compiler )",
    "info" : "MethodDeclaration[7307-7391]:MethodDeclaration[7307-7391]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[7397-7622]:MethodDeclaration[7397-7622]"
  }, {
    "left" : "private visitFunction(t , n ) : void",
    "right" : "private visitFunction(t , n ) : void",
    "info" : "MethodDeclaration[7628-8865]:MethodDeclaration[7628-9051]"
  }, {
    "left" : "private visitReturn(t , n ) : void",
    "right" : "private visitReturn(t , n ) : void",
    "info" : "MethodDeclaration[8871-9380]:MethodDeclaration[9057-9566]"
  }, {
    "left" : "private createCheckTypeCallNode(type , expr ) : ",
    "right" : "private createCheckTypeCallNode(type , expr ) : ",
    "info" : "MethodDeclaration[9386-10434]:MethodDeclaration[9572-10620]"
  }, {
    "left" : "private createCheckerNode(type ) : ",
    "right" : "private createCheckerNode(type ) : ",
    "info" : "MethodDeclaration[10440-11931]:MethodDeclaration[10626-12117]"
  }, {
    "left" : "private addBoilerplateCode() : void",
    "right" : "private addBoilerplateCode() : void",
    "info" : "MethodDeclaration[11939-12161]:MethodDeclaration[12125-12347]"
  }, {
    "left" : "private jsCode(prop ) : ",
    "right" : "private jsCode(prop ) : ",
    "info" : "MethodDeclaration[12165-12288]:MethodDeclaration[12351-12474]"
  }, {
    "left" : "package getBoilerplateCode(compiler , logFunction ) : ",
    "right" : "package getBoilerplateCode(compiler , logFunction ) : ",
    "info" : "MethodDeclaration[12292-12954]:MethodDeclaration[12478-13140]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1922-1928]:Modifier[1922-1928]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[1929-1932]:PrimitiveType[1929-1932]"
  }, {
    "left" : "compare",
    "right" : "compare",
    "info" : "SimpleName[1933-1940]:SimpleName[1933-1940]"
  }, {
    "left" : "JSType t1",
    "right" : "JSType t1",
    "info" : "SingleVariableDeclaration[1941-1950]:SingleVariableDeclaration[1941-1950]"
  }, {
    "left" : "JSType t2",
    "right" : "JSType t2",
    "info" : "SingleVariableDeclaration[1952-1961]:SingleVariableDeclaration[1952-1961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1963-2019]:Block[1963-2019]"
  }, {
    "left" : "return getName(t1).compareTo(getName(t2));",
    "right" : "return getName(t1).compareTo(getName(t2));",
    "info" : "ReturnStatement[1971-2013]:ReturnStatement[1971-2013]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2025-2032]:Modifier[2025-2032]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2033-2039]:SimpleType[2033-2039]"
  }, {
    "left" : "getName",
    "right" : "getName",
    "info" : "SimpleName[2040-2047]:SimpleName[2040-2047]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[2048-2059]:SingleVariableDeclaration[2048-2059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2061-2496]:Block[2061-2496]"
  }, {
    "left" : "if (type.isInstanceType())",
    "right" : "if (type.isInstanceType())",
    "info" : "IfStatement[2069-2490]:IfStatement[2069-2490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2096-2160]:Block[2096-2160]"
  }, {
    "left" : "return ((ObjectType) type).getReferenceName();",
    "right" : "return ((ObjectType) type).getReferenceName();",
    "info" : "ReturnStatement[2106-2152]:ReturnStatement[2106-2152]"
  }, {
    "left" : "if (type.isNullType()\n          || type.isBooleanValueType()\n          || type.isNumberValueType()\n          || type.isStringValueType()\n          || type.isVoidType())",
    "right" : "if (type.isNullType()\n          || type.isBooleanValueType()\n          || type.isNumberValueType()\n          || type.isStringValueType()\n          || type.isVoidType())",
    "info" : "IfStatement[2166-2490]:IfStatement[2166-2490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2335-2376]:Block[2335-2376]"
  }, {
    "left" : "return type.toString();",
    "right" : "return type.toString();",
    "info" : "ReturnStatement[2345-2368]:ReturnStatement[2345-2368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2382-2490]:Block[2382-2490]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[2472-2482]:ReturnStatement[2472-2482]"
  }, {
    "left" : "RuntimeTypeCheck",
    "right" : "RuntimeTypeCheck",
    "info" : "SimpleName[2585-2601]:SimpleName[2585-2601]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[2602-2627]:SingleVariableDeclaration[2602-2627]"
  }, {
    "left" : "@Nullable String logFunction",
    "right" : "@Nullable String logFunction",
    "info" : "SingleVariableDeclaration[2629-2657]:SingleVariableDeclaration[2629-2657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2659-2730]:Block[2659-2730]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[2665-2690]:ExpressionStatement[2665-2690]"
  }, {
    "left" : "this.logFunction = logFunction;",
    "right" : "this.logFunction = logFunction;",
    "info" : "ExpressionStatement[2695-2726]:ExpressionStatement[2695-2726]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2734-2743]:MarkerAnnotation[2734-2743]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2746-2752]:Modifier[2746-2752]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2753-2757]:PrimitiveType[2753-2757]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2758-2765]:SimpleName[2758-2765]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[2766-2778]:SingleVariableDeclaration[2766-2778]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[2780-2789]:SingleVariableDeclaration[2780-2789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2791-2961]:Block[2791-2961]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, new AddMarkers(compiler));",
    "right" : "NodeTraversal.traverse(compiler, root, new AddMarkers(compiler));",
    "info" : "ExpressionStatement[2797-2862]:ExpressionStatement[2797-2862]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, new AddChecks(compiler));",
    "right" : "NodeTraversal.traverse(compiler, root, new AddChecks(compiler));",
    "info" : "ExpressionStatement[2867-2931]:ExpressionStatement[2867-2931]"
  }, {
    "left" : "addBoilerplateCode();",
    "right" : "addBoilerplateCode();",
    "info" : "ExpressionStatement[2936-2957]:ExpressionStatement[2936-2957]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3548-3555]:Modifier[3548-3555]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3556-3562]:Modifier[3556-3562]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[3563-3568]:TYPE_DECLARATION_KIND[3563-3568]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3687-3694]:Modifier[3687-3694]"
  }, {
    "left" : "AddMarkers",
    "right" : "AddMarkers",
    "info" : "SimpleName[3695-3705]:SimpleName[3695-3705]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[3706-3731]:SingleVariableDeclaration[3706-3731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3733-3772]:Block[3733-3772]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[3741-3766]:ExpressionStatement[3741-3766]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3778-3787]:MarkerAnnotation[3778-3787]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3792-3798]:Modifier[3792-3798]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3799-3803]:PrimitiveType[3799-3803]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[3804-3809]:SimpleName[3804-3809]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3810-3825]:SingleVariableDeclaration[3810-3825]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3827-3833]:SingleVariableDeclaration[3827-3833]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[3835-3846]:SingleVariableDeclaration[3835-3846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3848-3928]:Block[3848-3928]"
  }, {
    "left" : "if (NodeUtil.isFunction(n))",
    "right" : "if (NodeUtil.isFunction(n))",
    "info" : "IfStatement[3856-3922]:IfStatement[3856-3922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3884-3922]:Block[3884-3922]"
  }, {
    "left" : "visitFunction(t, n);",
    "right" : "visitFunction(t, n);",
    "info" : "ExpressionStatement[3894-3914]:ExpressionStatement[3894-3914]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3934-3941]:Modifier[3934-3941]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3942-3946]:PrimitiveType[3942-3946]"
  }, {
    "left" : "visitFunction",
    "right" : "visitFunction",
    "info" : "SimpleName[3947-3960]:SimpleName[3947-3960]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3961-3976]:SingleVariableDeclaration[3961-3976]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3978-3984]:SingleVariableDeclaration[3978-3984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3986-4522]:Block[3986-4522]"
  }, {
    "left" : "FunctionType funType = (FunctionType) n.getJSType();",
    "right" : "FunctionType funType = (FunctionType) n.getJSType();",
    "info" : "VariableDeclarationStatement[3994-4046]:VariableDeclarationStatement[3994-4046]"
  }, {
    "left" : "if (!funType.isConstructor())",
    "right" : "if (!funType.isConstructor())",
    "info" : "IfStatement[4053-4108]:IfStatement[4053-4108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4083-4108]:Block[4083-4108]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4093-4100]:ReturnStatement[4093-4100]"
  }, {
    "left" : "Node nodeToInsertAfter = findNodeToInsertAfter(n);",
    "right" : "Node nodeToInsertAfter = findNodeToInsertAfter(n);",
    "info" : "VariableDeclarationStatement[4116-4166]:VariableDeclarationStatement[4116-4166]"
  }, {
    "left" : "nodeToInsertAfter = addMarker(funType, nodeToInsertAfter, null);",
    "right" : "nodeToInsertAfter = addMarker(funType, nodeToInsertAfter, null);",
    "info" : "ExpressionStatement[4174-4238]:ExpressionStatement[4174-4238]"
  }, {
    "left" : "TreeSet<ObjectType> stuff = Sets.newTreeSet(ALPHA);",
    "right" : "TreeSet<ObjectType> stuff = Sets.newTreeSet(ALPHA);",
    "info" : "VariableDeclarationStatement[4246-4297]:VariableDeclarationStatement[4246-4297]"
  }, {
    "left" : "Iterables.addAll(stuff, funType.getAllImplementedInterfaces());",
    "right" : "Iterables.addAll(stuff, funType.getAllImplementedInterfaces());",
    "info" : "ExpressionStatement[4304-4367]:ExpressionStatement[4304-4367]"
  }, {
    "left" : "for (ObjectType interfaceType : stuff)",
    "right" : "for (ObjectType interfaceType : stuff)",
    "info" : "EnhancedForStatement[4374-4516]:EnhancedForStatement[4374-4516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4413-4516]:Block[4413-4516]"
  }, {
    "left" : "nodeToInsertAfter =\n            addMarker(funType, nodeToInsertAfter, interfaceType);",
    "right" : "nodeToInsertAfter =\n            addMarker(funType, nodeToInsertAfter, interfaceType);",
    "info" : "ExpressionStatement[4423-4508]:ExpressionStatement[4423-4508]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4528-4535]:Modifier[4528-4535]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[4536-4540]:SimpleType[4536-4540]"
  }, {
    "left" : "addMarker",
    "right" : "addMarker",
    "info" : "SimpleName[4541-4550]:SimpleName[4541-4550]"
  }, {
    "left" : "FunctionType funType",
    "right" : "FunctionType funType",
    "info" : "SingleVariableDeclaration[4564-4584]:SingleVariableDeclaration[4564-4584]"
  }, {
    "left" : "Node nodeToInsertAfter",
    "right" : "Node nodeToInsertAfter",
    "info" : "SingleVariableDeclaration[4598-4620]:SingleVariableDeclaration[4598-4620]"
  }, {
    "left" : "@Nullable ObjectType interfaceType",
    "right" : "@Nullable ObjectType interfaceType",
    "info" : "SingleVariableDeclaration[4634-4668]:SingleVariableDeclaration[4634-4668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4670-5709]:Block[4670-5709]"
  }, {
    "left" : "if (funType.getSource() == null)",
    "right" : "if (funType.getSource() == null)",
    "info" : "IfStatement[4679-4755]:IfStatement[4679-4755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4712-4755]:Block[4712-4755]"
  }, {
    "left" : "return nodeToInsertAfter;",
    "right" : "return nodeToInsertAfter;",
    "info" : "ReturnStatement[4722-4747]:ReturnStatement[4722-4747]"
  }, {
    "left" : "String className = NodeUtil.getFunctionName(funType.getSource());",
    "right" : "String className = NodeUtil.getFunctionName(funType.getSource());",
    "info" : "VariableDeclarationStatement[4763-4828]:VariableDeclarationStatement[4763-4828]"
  }, {
    "left" : "if (className == null)",
    "right" : "if (className == null)",
    "info" : "IfStatement[4934-5000]:IfStatement[4934-5000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4957-5000]:Block[4957-5000]"
  }, {
    "left" : "return nodeToInsertAfter;",
    "right" : "return nodeToInsertAfter;",
    "info" : "ReturnStatement[4967-4992]:ReturnStatement[4967-4992]"
  }, {
    "left" : "Node classNode = NodeUtil.newQualifiedNameNode(className, -1, -1);",
    "right" : "Node classNode = NodeUtil.newQualifiedNameNode(className, -1, -1);",
    "info" : "VariableDeclarationStatement[5008-5074]:VariableDeclarationStatement[5008-5074]"
  }, {
    "left" : "Node marker = Node.newString(\n              interfaceType == null ?\n              \"instance_of__\" + className :\n              \"implements__\" + interfaceType.getReferenceName());",
    "right" : "Node marker = Node.newString(\n              interfaceType == null ?\n              \"instance_of__\" + className :\n              \"implements__\" + interfaceType.getReferenceName());",
    "info" : "VariableDeclarationStatement[5082-5259]:VariableDeclarationStatement[5082-5259]"
  }, {
    "left" : "Node assign = new Node(Token.EXPR_RESULT, new Node(Token.ASSIGN,\n          new Node(Token.GETELEM,\n              new Node(Token.GETPROP,\n                  classNode,\n                  Node.newString(\"prototype\")), marker),\n          new Node(Token.TRUE)));",
    "right" : "Node assign = new Node(Token.EXPR_RESULT, new Node(Token.ASSIGN,\n          new Node(Token.GETELEM,\n              new Node(Token.GETPROP,\n                  classNode,\n                  Node.newString(\"prototype\")), marker),\n          new Node(Token.TRUE)));",
    "info" : "VariableDeclarationStatement[5267-5523]:VariableDeclarationStatement[5267-5523]"
  }, {
    "left" : "nodeToInsertAfter.getParent().addChildAfter(assign, nodeToInsertAfter);",
    "right" : "nodeToInsertAfter.getParent().addChildAfter(assign, nodeToInsertAfter);",
    "info" : "ExpressionStatement[5531-5602]:ExpressionStatement[5531-5602]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[5609-5637]:ExpressionStatement[5609-5637]"
  }, {
    "left" : "nodeToInsertAfter = assign;",
    "right" : "nodeToInsertAfter = assign;",
    "info" : "ExpressionStatement[5644-5671]:ExpressionStatement[5644-5671]"
  }, {
    "left" : "return nodeToInsertAfter;",
    "right" : "return nodeToInsertAfter;",
    "info" : "ReturnStatement[5678-5703]:ReturnStatement[5678-5703]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6013-6020]:Modifier[6013-6020]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[6021-6025]:SimpleType[6021-6025]"
  }, {
    "left" : "findNodeToInsertAfter",
    "right" : "findNodeToInsertAfter",
    "info" : "SimpleName[6026-6047]:SimpleName[6026-6047]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6048-6054]:SingleVariableDeclaration[6048-6054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6056-6359]:Block[6056-6359]"
  }, {
    "left" : "Node nodeToInsertAfter = findEnclosingConstructorDeclaration(n);",
    "right" : "Node nodeToInsertAfter = findEnclosingConstructorDeclaration(n);",
    "info" : "VariableDeclarationStatement[6064-6128]:VariableDeclarationStatement[6064-6128]"
  }, {
    "left" : "Node next = nodeToInsertAfter.getNext();",
    "right" : "Node next = nodeToInsertAfter.getNext();",
    "info" : "VariableDeclarationStatement[6136-6176]:VariableDeclarationStatement[6136-6176]"
  }, {
    "left" : "while (next != null && isClassDefiningCall(next))",
    "right" : "while (next != null && isClassDefiningCall(next))",
    "info" : "WhileStatement[6183-6320]:WhileStatement[6183-6320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6233-6320]:Block[6233-6320]"
  }, {
    "left" : "nodeToInsertAfter = next;",
    "right" : "nodeToInsertAfter = next;",
    "info" : "ExpressionStatement[6243-6268]:ExpressionStatement[6243-6268]"
  }, {
    "left" : "next = nodeToInsertAfter.getNext();",
    "right" : "next = nodeToInsertAfter.getNext();",
    "info" : "ExpressionStatement[6277-6312]:ExpressionStatement[6277-6312]"
  }, {
    "left" : "return nodeToInsertAfter;",
    "right" : "return nodeToInsertAfter;",
    "info" : "ReturnStatement[6328-6353]:ReturnStatement[6328-6353]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6365-6372]:Modifier[6365-6372]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[6373-6377]:SimpleType[6373-6377]"
  }, {
    "left" : "findEnclosingConstructorDeclaration",
    "right" : "findEnclosingConstructorDeclaration",
    "info" : "SimpleName[6378-6413]:SimpleName[6378-6413]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6414-6420]:SingleVariableDeclaration[6414-6420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6422-6588]:Block[6422-6588]"
  }, {
    "left" : "while (n.getParent().getType() != Token.SCRIPT &&\n          n.getParent().getType() != Token.BLOCK)",
    "right" : "while (n.getParent().getType() != Token.SCRIPT &&\n          n.getParent().getType() != Token.BLOCK)",
    "info" : "WhileStatement[6430-6566]:WhileStatement[6430-6566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6530-6566]:Block[6530-6566]"
  }, {
    "left" : "n = n.getParent();",
    "right" : "n = n.getParent();",
    "info" : "ExpressionStatement[6540-6558]:ExpressionStatement[6540-6558]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[6573-6582]:ReturnStatement[6573-6582]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6594-6601]:Modifier[6594-6601]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6602-6609]:PrimitiveType[6602-6609]"
  }, {
    "left" : "isClassDefiningCall",
    "right" : "isClassDefiningCall",
    "info" : "SimpleName[6610-6629]:SimpleName[6610-6629]"
  }, {
    "left" : "Node next",
    "right" : "Node next",
    "info" : "SingleVariableDeclaration[6630-6639]:SingleVariableDeclaration[6630-6639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6641-6801]:Block[6641-6801]"
  }, {
    "left" : "return NodeUtil.isExprCall(next) &&\n          compiler.getCodingConvention().getClassesDefinedByCall(\n              next.getFirstChild()) != null;",
    "right" : "return NodeUtil.isExprCall(next) &&\n          compiler.getCodingConvention().getClassesDefinedByCall(\n              next.getFirstChild()) != null;",
    "info" : "ReturnStatement[6649-6795]:ReturnStatement[6649-6795]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7169-7176]:Modifier[7169-7176]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7177-7183]:Modifier[7177-7183]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7184-7189]:TYPE_DECLARATION_KIND[7184-7189]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7307-7314]:Modifier[7307-7314]"
  }, {
    "left" : "AddChecks",
    "right" : "AddChecks",
    "info" : "SimpleName[7315-7324]:SimpleName[7315-7324]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[7325-7350]:SingleVariableDeclaration[7325-7350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7352-7391]:Block[7352-7391]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[7360-7385]:ExpressionStatement[7360-7385]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7397-7406]:MarkerAnnotation[7397-7406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7411-7417]:Modifier[7411-7417]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7418-7422]:PrimitiveType[7418-7422]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[7423-7428]:SimpleName[7423-7428]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[7429-7444]:SingleVariableDeclaration[7429-7444]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7446-7452]:SingleVariableDeclaration[7446-7452]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[7454-7465]:SingleVariableDeclaration[7454-7465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7467-7622]:Block[7467-7622]"
  }, {
    "left" : "if (NodeUtil.isFunction(n))",
    "right" : "if (NodeUtil.isFunction(n))",
    "info" : "IfStatement[7475-7616]:IfStatement[7475-7616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7503-7541]:Block[7503-7541]"
  }, {
    "left" : "visitFunction(t, n);",
    "right" : "visitFunction(t, n);",
    "info" : "ExpressionStatement[7513-7533]:ExpressionStatement[7513-7533]"
  }, {
    "left" : "if (n.getType() == Token.RETURN)",
    "right" : "if (n.getType() == Token.RETURN)",
    "info" : "IfStatement[7547-7616]:IfStatement[7547-7616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7580-7616]:Block[7580-7616]"
  }, {
    "left" : "visitReturn(t, n);",
    "right" : "visitReturn(t, n);",
    "info" : "ExpressionStatement[7590-7608]:ExpressionStatement[7590-7608]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7701-7708]:Modifier[7701-7708]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7709-7713]:PrimitiveType[7709-7713]"
  }, {
    "left" : "visitFunction",
    "right" : "visitFunction",
    "info" : "SimpleName[7714-7727]:SimpleName[7714-7727]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[7728-7743]:SingleVariableDeclaration[7728-7743]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7745-7751]:SingleVariableDeclaration[7745-7751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7753-8865]:Block[7753-9051]"
  }, {
    "left" : "FunctionType funType = (FunctionType) n.getJSType();",
    "right" : "FunctionType funType = (FunctionType) n.getJSType();",
    "info" : "VariableDeclarationStatement[7761-7813]:VariableDeclarationStatement[7761-7813]"
  }, {
    "left" : "Node block = n.getLastChild();",
    "right" : "Node block = n.getLastChild();",
    "info" : "VariableDeclarationStatement[7820-7850]:VariableDeclarationStatement[7820-7850]"
  }, {
    "left" : "Node paramName = NodeUtil.getFnParameters(n).getFirstChild();",
    "right" : "Node paramName = NodeUtil.getFnParameters(n).getFirstChild();",
    "info" : "VariableDeclarationStatement[7857-7918]:VariableDeclarationStatement[7857-7918]"
  }, {
    "left" : "Node insertionPoint = null;",
    "right" : "Node insertionPoint = null;",
    "info" : "VariableDeclarationStatement[7925-7952]:VariableDeclarationStatement[7925-7952]"
  }, {
    "left" : "for (Node paramType : funType.getParameters())",
    "right" : "for (Node paramType : funType.getParameters())",
    "info" : "EnhancedForStatement[8088-8859]:EnhancedForStatement[8274-9045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8135-8859]:Block[8321-9045]"
  }, {
    "left" : "if (paramName == null)",
    "right" : "if (paramName == null)",
    "info" : "IfStatement[8178-8230]:IfStatement[8364-8416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8201-8230]:Block[8387-8416]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8213-8220]:ReturnStatement[8399-8406]"
  }, {
    "left" : "Node checkNode = createCheckTypeCallNode(\n            paramType.getJSType(), paramName.cloneTree());",
    "right" : "Node checkNode = createCheckTypeCallNode(\n            paramType.getJSType(), paramName.cloneTree());",
    "info" : "VariableDeclarationStatement[8240-8340]:VariableDeclarationStatement[8426-8526]"
  }, {
    "left" : "if (checkNode == null)",
    "right" : "if (checkNode == null)",
    "info" : "IfStatement[8350-8508]:IfStatement[8536-8694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8373-8508]:Block[8559-8694]"
  }, {
    "left" : "paramName = paramName.getNext();",
    "right" : "paramName = paramName.getNext();",
    "info" : "ExpressionStatement[8446-8478]:ExpressionStatement[8632-8664]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[8489-8498]:ContinueStatement[8675-8684]"
  }, {
    "left" : "checkNode = new Node(Token.EXPR_RESULT, checkNode);",
    "right" : "checkNode = new Node(Token.EXPR_RESULT, checkNode);",
    "info" : "ExpressionStatement[8518-8569]:ExpressionStatement[8704-8755]"
  }, {
    "left" : "if (insertionPoint == null)",
    "right" : "if (insertionPoint == null)",
    "info" : "IfStatement[8578-8736]:IfStatement[8764-8922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8606-8661]:Block[8792-8847]"
  }, {
    "left" : "block.addChildToFront(checkNode);",
    "right" : "block.addChildToFront(checkNode);",
    "info" : "ExpressionStatement[8618-8651]:ExpressionStatement[8804-8837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8667-8736]:Block[8853-8922]"
  }, {
    "left" : "block.addChildAfter(checkNode, insertionPoint);",
    "right" : "block.addChildAfter(checkNode, insertionPoint);",
    "info" : "ExpressionStatement[8679-8726]:ExpressionStatement[8865-8912]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[8746-8774]:ExpressionStatement[8932-8960]"
  }, {
    "left" : "paramName = paramName.getNext();",
    "right" : "paramName = paramName.getNext();",
    "info" : "ExpressionStatement[8783-8815]:ExpressionStatement[8969-9001]"
  }, {
    "left" : "insertionPoint = checkNode;",
    "right" : "insertionPoint = checkNode;",
    "info" : "ExpressionStatement[8824-8851]:ExpressionStatement[9010-9037]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8871-8878]:Modifier[9057-9064]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8879-8883]:PrimitiveType[9065-9069]"
  }, {
    "left" : "visitReturn",
    "right" : "visitReturn",
    "info" : "SimpleName[8884-8895]:SimpleName[9070-9081]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[8896-8911]:SingleVariableDeclaration[9082-9097]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8913-8919]:SingleVariableDeclaration[9099-9105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8921-9380]:Block[9107-9566]"
  }, {
    "left" : "Node function = t.getEnclosingFunction();",
    "right" : "Node function = t.getEnclosingFunction();",
    "info" : "VariableDeclarationStatement[8929-8970]:VariableDeclarationStatement[9115-9156]"
  }, {
    "left" : "FunctionType funType = (FunctionType) function.getJSType();",
    "right" : "FunctionType funType = (FunctionType) function.getJSType();",
    "info" : "VariableDeclarationStatement[8977-9036]:VariableDeclarationStatement[9163-9222]"
  }, {
    "left" : "Node retValue = n.getFirstChild();",
    "right" : "Node retValue = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[9044-9078]:VariableDeclarationStatement[9230-9264]"
  }, {
    "left" : "if (retValue == null)",
    "right" : "if (retValue == null)",
    "info" : "IfStatement[9085-9132]:IfStatement[9271-9318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9107-9132]:Block[9293-9318]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9117-9124]:ReturnStatement[9303-9310]"
  }, {
    "left" : "Node checkNode = createCheckTypeCallNode(\n          funType.getReturnType(), retValue.cloneTree());",
    "right" : "Node checkNode = createCheckTypeCallNode(\n          funType.getReturnType(), retValue.cloneTree());",
    "info" : "VariableDeclarationStatement[9140-9239]:VariableDeclarationStatement[9326-9425]"
  }, {
    "left" : "if (checkNode == null)",
    "right" : "if (checkNode == null)",
    "info" : "IfStatement[9247-9295]:IfStatement[9433-9481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9270-9295]:Block[9456-9481]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9280-9287]:ReturnStatement[9466-9473]"
  }, {
    "left" : "n.replaceChild(retValue, checkNode);",
    "right" : "n.replaceChild(retValue, checkNode);",
    "info" : "ExpressionStatement[9303-9339]:ExpressionStatement[9489-9525]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[9346-9374]:ExpressionStatement[9532-9560]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9765-9772]:Modifier[9951-9958]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[9773-9777]:SimpleType[9959-9963]"
  }, {
    "left" : "createCheckTypeCallNode",
    "right" : "createCheckTypeCallNode",
    "info" : "SimpleName[9778-9801]:SimpleName[9964-9987]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[9802-9813]:SingleVariableDeclaration[9988-9999]"
  }, {
    "left" : "Node expr",
    "right" : "Node expr",
    "info" : "SingleVariableDeclaration[9815-9824]:SingleVariableDeclaration[10001-10010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9826-10434]:Block[10012-10620]"
  }, {
    "left" : "Node arrayNode = new Node(Token.ARRAYLIT);",
    "right" : "Node arrayNode = new Node(Token.ARRAYLIT);",
    "info" : "VariableDeclarationStatement[9834-9876]:VariableDeclarationStatement[10020-10062]"
  }, {
    "left" : "Collection<JSType> alternates;",
    "right" : "Collection<JSType> alternates;",
    "info" : "VariableDeclarationStatement[9883-9913]:VariableDeclarationStatement[10069-10099]"
  }, {
    "left" : "if (type.isUnionType())",
    "right" : "if (type.isUnionType())",
    "info" : "IfStatement[9920-10131]:IfStatement[10106-10317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9944-10071]:Block[10130-10257]"
  }, {
    "left" : "alternates = Sets.newTreeSet(ALPHA);",
    "right" : "alternates = Sets.newTreeSet(ALPHA);",
    "info" : "ExpressionStatement[9954-9990]:ExpressionStatement[10140-10176]"
  }, {
    "left" : "Iterables.addAll(alternates, ((UnionType)type).getAlternates());",
    "right" : "Iterables.addAll(alternates, ((UnionType)type).getAlternates());",
    "info" : "ExpressionStatement[9999-10063]:ExpressionStatement[10185-10249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10077-10131]:Block[10263-10317]"
  }, {
    "left" : "alternates = ImmutableList.of(type);",
    "right" : "alternates = ImmutableList.of(type);",
    "info" : "ExpressionStatement[10087-10123]:ExpressionStatement[10273-10309]"
  }, {
    "left" : "for (JSType alternate : alternates)",
    "right" : "for (JSType alternate : alternates)",
    "info" : "EnhancedForStatement[10138-10355]:EnhancedForStatement[10324-10541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10174-10355]:Block[10360-10541]"
  }, {
    "left" : "Node checkerNode = createCheckerNode(alternate);",
    "right" : "Node checkerNode = createCheckerNode(alternate);",
    "info" : "VariableDeclarationStatement[10184-10232]:VariableDeclarationStatement[10370-10418]"
  }, {
    "left" : "if (checkerNode == null)",
    "right" : "if (checkerNode == null)",
    "info" : "IfStatement[10241-10300]:IfStatement[10427-10486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10266-10300]:Block[10452-10486]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[10278-10290]:ReturnStatement[10464-10476]"
  }, {
    "left" : "arrayNode.addChildToBack(checkerNode);",
    "right" : "arrayNode.addChildToBack(checkerNode);",
    "info" : "ExpressionStatement[10309-10347]:ExpressionStatement[10495-10533]"
  }, {
    "left" : "return new Node(Token.CALL, jsCode(\"checkType\"), expr, arrayNode);",
    "right" : "return new Node(Token.CALL, jsCode(\"checkType\"), expr, arrayNode);",
    "info" : "ReturnStatement[10362-10428]:ReturnStatement[10548-10614]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10709-10716]:Modifier[10895-10902]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[10717-10721]:SimpleType[10903-10907]"
  }, {
    "left" : "createCheckerNode",
    "right" : "createCheckerNode",
    "info" : "SimpleName[10722-10739]:SimpleName[10908-10925]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[10740-10751]:SingleVariableDeclaration[10926-10937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10753-11931]:Block[10939-12117]"
  }, {
    "left" : "if (type.isNullType())",
    "right" : "if (type.isNullType())",
    "info" : "IfStatement[10761-11925]:IfStatement[10947-12111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10784-10832]:Block[10970-11018]"
  }, {
    "left" : "return jsCode(\"nullChecker\");",
    "right" : "return jsCode(\"nullChecker\");",
    "info" : "ReturnStatement[10794-10823]:ReturnStatement[10980-11009]"
  }, {
    "left" : "if (type.isBooleanValueType()\n          || type.isNumberValueType()\n          || type.isStringValueType()\n          || type.isVoidType())",
    "right" : "if (type.isBooleanValueType()\n          || type.isNumberValueType()\n          || type.isStringValueType()\n          || type.isVoidType())",
    "info" : "IfStatement[10838-11925]:IfStatement[11024-12111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10976-11104]:Block[11162-11290]"
  }, {
    "left" : "return new Node(Token.CALL,\n            jsCode(\"valueChecker\"),\n            Node.newString(type.toString()));",
    "right" : "return new Node(Token.CALL,\n            jsCode(\"valueChecker\"),\n            Node.newString(type.toString()));",
    "info" : "ReturnStatement[10986-11095]:ReturnStatement[11172-11281]"
  }, {
    "left" : "if (type.isInstanceType())",
    "right" : "if (type.isInstanceType())",
    "info" : "IfStatement[11110-11925]:IfStatement[11296-12111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11137-11825]:Block[11323-12011]"
  }, {
    "left" : "ObjectType objType = (ObjectType) type;",
    "right" : "ObjectType objType = (ObjectType) type;",
    "info" : "VariableDeclarationStatement[11147-11186]:VariableDeclarationStatement[11333-11372]"
  }, {
    "left" : "String refName = objType.getReferenceName();",
    "right" : "String refName = objType.getReferenceName();",
    "info" : "VariableDeclarationStatement[11196-11240]:VariableDeclarationStatement[11382-11426]"
  }, {
    "left" : "String sourceName =\n            NodeUtil.getSourceName(objType.getConstructor().getSource());",
    "right" : "String sourceName =\n            NodeUtil.getSourceName(objType.getConstructor().getSource());",
    "info" : "VariableDeclarationStatement[11250-11343]:VariableDeclarationStatement[11436-11529]"
  }, {
    "left" : "CompilerInput sourceInput = compiler.getInput(sourceName);",
    "right" : "CompilerInput sourceInput = compiler.getInput(sourceName);",
    "info" : "VariableDeclarationStatement[11352-11410]:VariableDeclarationStatement[11538-11596]"
  }, {
    "left" : "if (sourceInput == null || sourceInput.isExtern())",
    "right" : "if (sourceInput == null || sourceInput.isExtern())",
    "info" : "IfStatement[11419-11611]:IfStatement[11605-11797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11470-11611]:Block[11656-11797]"
  }, {
    "left" : "return new Node(Token.CALL,\n                  jsCode(\"externClassChecker\"),\n                  Node.newString(refName));",
    "right" : "return new Node(Token.CALL,\n                  jsCode(\"externClassChecker\"),\n                  Node.newString(refName));",
    "info" : "ReturnStatement[11482-11601]:ReturnStatement[11668-11787]"
  }, {
    "left" : "return new Node(Token.CALL,\n                jsCode(objType.getConstructor().isInterface() ?\n                        \"interfaceChecker\" : \"classChecker\"),\n                Node.newString(refName));",
    "right" : "return new Node(Token.CALL,\n                jsCode(objType.getConstructor().isInterface() ?\n                        \"interfaceChecker\" : \"classChecker\"),\n                Node.newString(refName));",
    "info" : "ReturnStatement[11621-11816]:ReturnStatement[11807-12002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11831-11925]:Block[12017-12111]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[11905-11917]:ReturnStatement[12091-12103]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11939-11946]:Modifier[12125-12132]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11947-11951]:PrimitiveType[12133-12137]"
  }, {
    "left" : "addBoilerplateCode",
    "right" : "addBoilerplateCode",
    "info" : "SimpleName[11952-11970]:SimpleName[12138-12156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11973-12161]:Block[12159-12347]"
  }, {
    "left" : "Node js = getBoilerplateCode(compiler, logFunction);",
    "right" : "Node js = getBoilerplateCode(compiler, logFunction);",
    "info" : "VariableDeclarationStatement[11979-12031]:VariableDeclarationStatement[12165-12217]"
  }, {
    "left" : "compiler.getNodeForCodeInsertion(null).addChildrenToFront(\n        js.removeChildren());",
    "right" : "compiler.getNodeForCodeInsertion(null).addChildrenToFront(\n        js.removeChildren());",
    "info" : "ExpressionStatement[12036-12124]:ExpressionStatement[12222-12310]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[12129-12157]:ExpressionStatement[12315-12343]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12165-12172]:Modifier[12351-12358]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12173-12179]:Modifier[12359-12365]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12180-12184]:SimpleType[12366-12370]"
  }, {
    "left" : "jsCode",
    "right" : "jsCode",
    "info" : "SimpleName[12185-12191]:SimpleName[12371-12377]"
  }, {
    "left" : "String prop",
    "right" : "String prop",
    "info" : "SingleVariableDeclaration[12192-12203]:SingleVariableDeclaration[12378-12389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12205-12288]:Block[12391-12474]"
  }, {
    "left" : "return NodeUtil.newQualifiedNameNode(\"jscomp.typecheck.\" + prop, -1, -1);",
    "right" : "return NodeUtil.newQualifiedNameNode(\"jscomp.typecheck.\" + prop, -1, -1);",
    "info" : "ReturnStatement[12211-12284]:ReturnStatement[12397-12470]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[12292-12310]:MarkerAnnotation[12478-12496]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12313-12319]:Modifier[12499-12505]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12320-12324]:SimpleType[12506-12510]"
  }, {
    "left" : "getBoilerplateCode",
    "right" : "getBoilerplateCode",
    "info" : "SimpleName[12325-12343]:SimpleName[12511-12529]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[12351-12376]:SingleVariableDeclaration[12537-12562]"
  }, {
    "left" : "@Nullable String logFunction",
    "right" : "@Nullable String logFunction",
    "info" : "SingleVariableDeclaration[12378-12406]:SingleVariableDeclaration[12564-12592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12408-12954]:Block[12594-13140]"
  }, {
    "left" : "String boilerplateCode;",
    "right" : "String boilerplateCode;",
    "info" : "VariableDeclarationStatement[12414-12437]:VariableDeclarationStatement[12600-12623]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[12442-12699]:TryStatement[12628-12885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12446-12632]:Block[12632-12818]"
  }, {
    "left" : "boilerplateCode = CharStreams.toString(new InputStreamReader(\n          RuntimeTypeCheck.class.getResourceAsStream(\n          \"js/runtime_type_check.js\"), Charsets.UTF_8));",
    "right" : "boilerplateCode = CharStreams.toString(new InputStreamReader(\n          RuntimeTypeCheck.class.getResourceAsStream(\n          \"js/runtime_type_check.js\"), Charsets.UTF_8));",
    "info" : "ExpressionStatement[12454-12626]:ExpressionStatement[12640-12812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12655-12699]:Block[12841-12885]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[12663-12693]:ThrowStatement[12849-12879]"
  }, {
    "left" : "boilerplateCode = boilerplateCode.replace(\"%%LOG%%\",\n        logFunction == null ? \"function(warning, expr) {}\" : logFunction);",
    "right" : "boilerplateCode = boilerplateCode.replace(\"%%LOG%%\",\n        logFunction == null ? \"function(warning, expr) {}\" : logFunction);",
    "info" : "ExpressionStatement[12705-12832]:ExpressionStatement[12891-13018]"
  }, {
    "left" : "return Normalize.parseAndNormalizeSyntheticCode(\n        compiler, boilerplateCode, \"jscomp_runtimeTypeCheck_\");",
    "right" : "return Normalize.parseAndNormalizeSyntheticCode(\n        compiler, boilerplateCode, \"jscomp_runtimeTypeCheck_\");",
    "info" : "ReturnStatement[12838-12950]:ReturnStatement[13024-13136]"
  } ]
}