{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SimplexTableau",
      "right" : "SimplexTableau",
      "info" : "TypeDeclaration[1484-19975]:TypeDeclaration[1484-19989]"
    }, {
      "left" : "private static final long serialVersionUID = -1369660067587938365L;",
      "right" : "private static final long serialVersionUID = -1369660067587938365L;",
      "info" : "FieldDeclaration[2458-2569]:FieldDeclaration[2458-2569]"
    }, {
      "left" : "private final LinearObjectiveFunction f;",
      "right" : "private final LinearObjectiveFunction f;",
      "info" : "FieldDeclaration[2575-2653]:FieldDeclaration[2575-2653]"
    }, {
      "left" : "private final Collection<LinearConstraint> constraints;",
      "right" : "private final Collection<LinearConstraint> constraints;",
      "info" : "FieldDeclaration[2659-2745]:FieldDeclaration[2659-2745]"
    }, {
      "left" : "private final boolean restrictToNonNegative;",
      "right" : "private final boolean restrictToNonNegative;",
      "info" : "FieldDeclaration[2751-2864]:FieldDeclaration[2751-2864]"
    }, {
      "left" : "protected transient RealMatrix tableau;",
      "right" : "protected transient RealMatrix tableau;",
      "info" : "FieldDeclaration[2870-2936]:FieldDeclaration[2870-2936]"
    }, {
      "left" : "protected final int numDecisionVariables;",
      "right" : "protected final int numDecisionVariables;",
      "info" : "FieldDeclaration[2942-3024]:FieldDeclaration[2942-3024]"
    }, {
      "left" : "protected final int numSlackVariables;",
      "right" : "protected final int numSlackVariables;",
      "info" : "FieldDeclaration[3030-3106]:FieldDeclaration[3030-3106]"
    }, {
      "left" : "protected int numArtificialVariables;",
      "right" : "protected int numArtificialVariables;",
      "info" : "FieldDeclaration[3112-3192]:FieldDeclaration[3112-3192]"
    }, {
      "left" : "protected final double epsilon;",
      "right" : "protected final double epsilon;",
      "info" : "FieldDeclaration[3198-3298]:FieldDeclaration[3198-3298]"
    }, {
      "left" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "right" : "SimplexTableau(final LinearObjectiveFunction f,\n                   final Collection<LinearConstraint> constraints,\n                   final GoalType goalType, final boolean restrictToNonNegative,\n                   final double epsilon)",
      "info" : "MethodDeclaration[3308-4717]:MethodDeclaration[3308-4717]"
    }, {
      "left" : "protected double[][] createTableau(final boolean maximize)",
      "right" : "protected double[][] createTableau(final boolean maximize)",
      "info" : "MethodDeclaration[4723-7804]:MethodDeclaration[4723-7804]"
    }, {
      "left" : "public int getNumVariables()",
      "right" : "public int getNumVariables()",
      "info" : "MethodDeclaration[7810-7977]:MethodDeclaration[7810-7977]"
    }, {
      "left" : "public List<LinearConstraint> getNormalizedConstraints()",
      "right" : "public List<LinearConstraint> getNormalizedConstraints()",
      "info" : "MethodDeclaration[7983-8416]:MethodDeclaration[7983-8416]"
    }, {
      "left" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "right" : "private LinearConstraint normalize(final LinearConstraint constraint)",
      "info" : "MethodDeclaration[8422-9127]:MethodDeclaration[8422-9127]"
    }, {
      "left" : "protected final int getNumObjectiveFunctions()",
      "right" : "protected final int getNumObjectiveFunctions()",
      "info" : "MethodDeclaration[9133-9367]:MethodDeclaration[9133-9367]"
    }, {
      "left" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "right" : "private int getConstraintTypeCounts(final Relationship relationship)",
      "info" : "MethodDeclaration[9373-9881]:MethodDeclaration[9373-9881]"
    }, {
      "left" : "private void initialize()",
      "right" : "private void initialize()",
      "info" : "MethodDeclaration[9887-10304]:MethodDeclaration[9887-10304]"
    }, {
      "left" : "protected static double getInvertedCoeffiecientSum(final RealVector coefficients)",
      "right" : "protected static double getInvertedCoeffiecientSum(final RealVector coefficients)",
      "info" : "MethodDeclaration[10310-10756]:MethodDeclaration[10310-10756]"
    }, {
      "left" : "private Integer getBasicRow(final int col)",
      "right" : "private Integer getBasicRow(final int col)",
      "info" : "MethodDeclaration[10762-11357]:MethodDeclaration[10762-11371]"
    }, {
      "left" : "protected void discardArtificialVariables()",
      "right" : "protected void discardArtificialVariables()",
      "info" : "MethodDeclaration[11363-12079]:MethodDeclaration[11377-12093]"
    }, {
      "left" : "private void copyArray(final double[] src, final double[] dest,\n                           final int destPos)",
      "right" : "private void copyArray(final double[] src, final double[] dest,\n                           final int destPos)",
      "info" : "MethodDeclaration[12086-12423]:MethodDeclaration[12100-12437]"
    }, {
      "left" : "protected RealPointValuePair getSolution()",
      "right" : "protected RealPointValuePair getSolution()",
      "info" : "MethodDeclaration[12429-13697]:MethodDeclaration[12443-13711]"
    }, {
      "left" : "protected void divideRow(final int dividendRow, final double divisor)",
      "right" : "protected void divideRow(final int dividendRow, final double divisor)",
      "info" : "MethodDeclaration[13703-14234]:MethodDeclaration[13717-14248]"
    }, {
      "left" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "right" : "protected void subtractRow(final int minuendRow, final int subtrahendRow,\n                               final double multiple)",
      "info" : "MethodDeclaration[14240-14926]:MethodDeclaration[14254-14940]"
    }, {
      "left" : "protected final int getWidth()",
      "right" : "protected final int getWidth()",
      "info" : "MethodDeclaration[14932-15104]:MethodDeclaration[14946-15118]"
    }, {
      "left" : "protected final int getHeight()",
      "right" : "protected final int getHeight()",
      "info" : "MethodDeclaration[15110-15282]:MethodDeclaration[15124-15296]"
    }, {
      "left" : "protected final double getEntry(final int row, final int column)",
      "right" : "protected final double getEntry(final int row, final int column)",
      "info" : "MethodDeclaration[15288-15551]:MethodDeclaration[15302-15565]"
    }, {
      "left" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "right" : "protected final void setEntry(final int row, final int column,\n                                  final double value)",
      "info" : "MethodDeclaration[15557-15868]:MethodDeclaration[15571-15882]"
    }, {
      "left" : "protected final int getSlackVariableOffset()",
      "right" : "protected final int getSlackVariableOffset()",
      "info" : "MethodDeclaration[15874-16109]:MethodDeclaration[15888-16123]"
    }, {
      "left" : "protected final int getArtificialVariableOffset()",
      "right" : "protected final int getArtificialVariableOffset()",
      "info" : "MethodDeclaration[16115-16385]:MethodDeclaration[16129-16399]"
    }, {
      "left" : "protected final int getRhsOffset()",
      "right" : "protected final int getRhsOffset()",
      "info" : "MethodDeclaration[16391-16571]:MethodDeclaration[16405-16585]"
    }, {
      "left" : "protected final int getNumDecisionVariables()",
      "right" : "protected final int getNumDecisionVariables()",
      "info" : "MethodDeclaration[16577-17022]:MethodDeclaration[16591-17036]"
    }, {
      "left" : "protected final int getOriginalNumDecisionVariables()",
      "right" : "protected final int getOriginalNumDecisionVariables()",
      "info" : "MethodDeclaration[17028-17339]:MethodDeclaration[17042-17353]"
    }, {
      "left" : "protected final int getNumSlackVariables()",
      "right" : "protected final int getNumSlackVariables()",
      "info" : "MethodDeclaration[17345-17528]:MethodDeclaration[17359-17542]"
    }, {
      "left" : "protected final int getNumArtificialVariables()",
      "right" : "protected final int getNumArtificialVariables()",
      "info" : "MethodDeclaration[17534-17737]:MethodDeclaration[17548-17751]"
    }, {
      "left" : "protected final double[][] getData()",
      "right" : "protected final double[][] getData()",
      "info" : "MethodDeclaration[17743-17894]:MethodDeclaration[17757-17908]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[17900-18761]:MethodDeclaration[17914-18775]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[18771-19176]:MethodDeclaration[18785-19190]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "right" : "private void writeObject(ObjectOutputStream oos)\n        throws IOException",
      "info" : "MethodDeclaration[19182-19515]:MethodDeclaration[19196-19529]"
    }, {
      "left" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "right" : "private void readObject(ObjectInputStream ois)\n      throws ClassNotFoundException, IOException",
      "info" : "MethodDeclaration[19521-19973]:MethodDeclaration[19535-19987]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3983-4717]:Block[3983-4717]"
    }, {
      "left" : "this.f                      = f;",
      "right" : "this.f                      = f;",
      "info" : "ExpressionStatement[3993-4025]:ExpressionStatement[3993-4025]"
    }, {
      "left" : "this.constraints            = constraints;",
      "right" : "this.constraints            = constraints;",
      "info" : "ExpressionStatement[4034-4076]:ExpressionStatement[4034-4076]"
    }, {
      "left" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "right" : "this.restrictToNonNegative  = restrictToNonNegative;",
      "info" : "ExpressionStatement[4085-4137]:ExpressionStatement[4085-4137]"
    }, {
      "left" : "this.epsilon                = epsilon;",
      "right" : "this.epsilon                = epsilon;",
      "info" : "ExpressionStatement[4146-4184]:ExpressionStatement[4146-4184]"
    }, {
      "left" : "this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);",
      "right" : "this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);",
      "info" : "ExpressionStatement[4193-4275]:ExpressionStatement[4193-4275]"
    }, {
      "left" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[4284-4438]:ExpressionStatement[4284-4438]"
    }, {
      "left" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "right" : "this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +\n                                      getConstraintTypeCounts(Relationship.GEQ);",
      "info" : "ExpressionStatement[4447-4600]:ExpressionStatement[4447-4600]"
    }, {
      "left" : "this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));",
      "right" : "this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));",
      "info" : "ExpressionStatement[4609-4689]:ExpressionStatement[4609-4689]"
    }, {
      "left" : "initialize();",
      "right" : "initialize();",
      "info" : "ExpressionStatement[4698-4711]:ExpressionStatement[4698-4711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-7804]:Block[4941-7804]"
    }, {
      "left" : "List<LinearConstraint> constraints = getNormalizedConstraints();",
      "right" : "List<LinearConstraint> constraints = getNormalizedConstraints();",
      "info" : "VariableDeclarationStatement[4999-5063]:VariableDeclarationStatement[4999-5063]"
    }, {
      "left" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "right" : "int width = numDecisionVariables + numSlackVariables +\n        numArtificialVariables + getNumObjectiveFunctions() + 1;",
      "info" : "VariableDeclarationStatement[5072-5191]:VariableDeclarationStatement[5072-5191]"
    }, {
      "left" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "right" : "int height = constraints.size() + getNumObjectiveFunctions();",
      "info" : "VariableDeclarationStatement[5218-5279]:VariableDeclarationStatement[5218-5279]"
    }, {
      "left" : "double[][] matrix = new double[height][width];",
      "right" : "double[][] matrix = new double[height][width];",
      "info" : "VariableDeclarationStatement[5288-5334]:VariableDeclarationStatement[5288-5334]"
    }, {
      "left" : "if (getNumObjectiveFunctions() == 2)",
      "right" : "if (getNumObjectiveFunctions() == 2)",
      "info" : "IfStatement[5394-5473]:IfStatement[5394-5473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5431-5473]:Block[5431-5473]"
    }, {
      "left" : "matrix[0][0] = -1;",
      "right" : "matrix[0][0] = -1;",
      "info" : "ExpressionStatement[5445-5463]:ExpressionStatement[5445-5463]"
    }, {
      "left" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "right" : "int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;",
      "info" : "VariableDeclarationStatement[5482-5537]:VariableDeclarationStatement[5482-5537]"
    }, {
      "left" : "matrix[zIndex][zIndex] = maximize ? 1 : -1;",
      "right" : "matrix[zIndex][zIndex] = maximize ? 1 : -1;",
      "info" : "ExpressionStatement[5546-5589]:ExpressionStatement[5546-5589]"
    }, {
      "left" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "right" : "RealVector objectiveCoefficients =\n            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();",
      "info" : "VariableDeclarationStatement[5598-5714]:VariableDeclarationStatement[5598-5714]"
    }, {
      "left" : "copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",
      "right" : "copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",
      "info" : "ExpressionStatement[5727-5814]:ExpressionStatement[5727-5814]"
    }, {
      "left" : "matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();",
      "right" : "matrix[zIndex][width - 1] =\n                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();",
      "info" : "ExpressionStatement[5827-5929]:ExpressionStatement[5827-5929]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[5947-6136]:IfStatement[5947-6136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5975-6136]:Block[5975-6136]"
    }, {
      "left" : "matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);",
      "right" : "matrix[zIndex][getSlackVariableOffset() - 1] =\n                        getInvertedCoeffiecientSum(objectiveCoefficients);",
      "info" : "ExpressionStatement[5997-6118]:ExpressionStatement[5997-6118]"
    }, {
      "left" : "int slackVar = 0;",
      "right" : "int slackVar = 0;",
      "info" : "VariableDeclarationStatement[6204-6221]:VariableDeclarationStatement[6204-6221]"
    }, {
      "left" : "int artificialVar = 0;",
      "right" : "int artificialVar = 0;",
      "info" : "VariableDeclarationStatement[6238-6260]:VariableDeclarationStatement[6238-6260]"
    }, {
      "left" : "for (int i = 0; i < constraints.size(); i++)",
      "right" : "for (int i = 0; i < constraints.size(); i++)",
      "info" : "ForStatement[6277-7766]:ForStatement[6277-7766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6322-7766]:Block[6322-7766]"
    }, {
      "left" : "LinearConstraint constraint = constraints.get(i);",
      "right" : "LinearConstraint constraint = constraints.get(i);",
      "info" : "VariableDeclarationStatement[6344-6393]:VariableDeclarationStatement[6344-6393]"
    }, {
      "left" : "int row = getNumObjectiveFunctions() + i;",
      "right" : "int row = getNumObjectiveFunctions() + i;",
      "info" : "VariableDeclarationStatement[6414-6455]:VariableDeclarationStatement[6414-6455]"
    }, {
      "left" : "copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",
      "right" : "copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",
      "info" : "ExpressionStatement[6531-6597]:ExpressionStatement[6531-6597]"
    }, {
      "left" : "if (!restrictToNonNegative)",
      "right" : "if (!restrictToNonNegative)",
      "info" : "IfStatement[6645-6850]:IfStatement[6645-6850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6673-6850]:Block[6673-6850]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());",
      "right" : "matrix[row][getSlackVariableOffset() - 1] =\n                            getInvertedCoeffiecientSum(constraint.getCoefficients());",
      "info" : "ExpressionStatement[6699-6828]:ExpressionStatement[6699-6828]"
    }, {
      "left" : "matrix[row][width - 1] = constraint.getValue();",
      "right" : "matrix[row][width - 1] = constraint.getValue();",
      "info" : "ExpressionStatement[6899-6946]:ExpressionStatement[6899-6946]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.LEQ)",
      "info" : "IfStatement[7007-7348]:IfStatement[7007-7348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7061-7174]:Block[7061-7174]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() + slackVar++] = 1;",
      "right" : "matrix[row][getSlackVariableOffset() + slackVar++] = 1;",
      "info" : "ExpressionStatement[7087-7142]:ExpressionStatement[7087-7142]"
    }, {
      "left" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "right" : "if (constraint.getRelationship() == Relationship.GEQ)",
      "info" : "IfStatement[7180-7348]:IfStatement[7180-7348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7234-7348]:Block[7234-7348]"
    }, {
      "left" : "matrix[row][getSlackVariableOffset() + slackVar++] = -1;",
      "right" : "matrix[row][getSlackVariableOffset() + slackVar++] = -1;",
      "info" : "ExpressionStatement[7260-7316]:ExpressionStatement[7260-7316]"
    }, {
      "left" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ))",
      "right" : "if ((constraint.getRelationship() == Relationship.EQ) ||\n                        (constraint.getRelationship() == Relationship.GEQ))",
      "info" : "IfStatement[7414-7748]:IfStatement[7414-7748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7547-7748]:Block[7547-7748]"
    }, {
      "left" : "matrix[0][getArtificialVariableOffset() + artificialVar] = 1;",
      "right" : "matrix[0][getArtificialVariableOffset() + artificialVar] = 1;",
      "info" : "ExpressionStatement[7573-7634]:ExpressionStatement[7573-7634]"
    }, {
      "left" : "matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;",
      "right" : "matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;",
      "info" : "ExpressionStatement[7660-7725]:ExpressionStatement[7660-7725]"
    }, {
      "left" : "return matrix;",
      "right" : "return matrix;",
      "info" : "ReturnStatement[7784-7798]:ReturnStatement[7784-7798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7919-7977]:Block[7919-7977]"
    }, {
      "left" : "return f.getCoefficients().getDimension();",
      "right" : "return f.getCoefficients().getDimension();",
      "info" : "ReturnStatement[7929-7971]:ReturnStatement[7929-7971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8184-8416]:Block[8184-8416]"
    }, {
      "left" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "right" : "List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();",
      "info" : "VariableDeclarationStatement[8194-8264]:VariableDeclarationStatement[8194-8264]"
    }, {
      "left" : "for (LinearConstraint constraint : constraints)",
      "right" : "for (LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[8273-8383]:EnhancedForStatement[8273-8383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8321-8383]:Block[8321-8383]"
    }, {
      "left" : "normalized.add(normalize(constraint));",
      "right" : "normalized.add(normalize(constraint));",
      "info" : "ExpressionStatement[8335-8373]:ExpressionStatement[8335-8373]"
    }, {
      "left" : "return normalized;",
      "right" : "return normalized;",
      "info" : "ReturnStatement[8392-8410]:ReturnStatement[8392-8410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8664-9127]:Block[8664-9127]"
    }, {
      "left" : "if (constraint.getValue() < 0)",
      "right" : "if (constraint.getValue() < 0)",
      "info" : "IfStatement[8674-8964]:IfStatement[8674-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8705-8964]:Block[8705-8964]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),\n                                        constraint.getRelationship().oppositeRelationship(),\n                                        -1 * constraint.getValue());",
      "info" : "ReturnStatement[8719-8954]:ReturnStatement[8719-8954]"
    }, {
      "left" : "return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());",
      "right" : "return new LinearConstraint(constraint.getCoefficients(), \n                                    constraint.getRelationship(), constraint.getValue());",
      "info" : "ReturnStatement[8973-9121]:ReturnStatement[8973-9121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9304-9367]:Block[9304-9367]"
    }, {
      "left" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "right" : "return this.numArtificialVariables > 0 ? 2 : 1;",
      "info" : "ReturnStatement[9314-9361]:ReturnStatement[9314-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9652-9881]:Block[9652-9881]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[9662-9676]:VariableDeclarationStatement[9662-9676]"
    }, {
      "left" : "for (final LinearConstraint constraint : constraints)",
      "right" : "for (final LinearConstraint constraint : constraints)",
      "info" : "EnhancedForStatement[9685-9853]:EnhancedForStatement[9685-9853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9739-9853]:Block[9739-9853]"
    }, {
      "left" : "if (constraint.getRelationship() == relationship)",
      "right" : "if (constraint.getRelationship() == relationship)",
      "info" : "IfStatement[9753-9843]:IfStatement[9753-9843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-9843]:Block[9803-9843]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[9821-9829]:ExpressionStatement[9821-9829]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[9862-9875]:ReturnStatement[9862-9875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10072-10304]:Block[10072-10304]"
    }, {
      "left" : "for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++)",
      "right" : "for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++)",
      "info" : "ForStatement[10082-10298]:ForStatement[10082-10298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10167-10298]:Block[10167-10298]"
    }, {
      "left" : "int row = getBasicRow(getArtificialVariableOffset() + artificialVar);",
      "right" : "int row = getBasicRow(getArtificialVariableOffset() + artificialVar);",
      "info" : "VariableDeclarationStatement[10181-10250]:VariableDeclarationStatement[10181-10250]"
    }, {
      "left" : "subtractRow(0, row, 1.0);",
      "right" : "subtractRow(0, row, 1.0);",
      "info" : "ExpressionStatement[10263-10288]:ExpressionStatement[10263-10288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10603-10756]:Block[10603-10756]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[10613-10628]:VariableDeclarationStatement[10613-10628]"
    }, {
      "left" : "for (double coefficient : coefficients.getData())",
      "right" : "for (double coefficient : coefficients.getData())",
      "info" : "EnhancedForStatement[10637-10730]:EnhancedForStatement[10637-10730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10687-10730]:Block[10687-10730]"
    }, {
      "left" : "sum -= coefficient;",
      "right" : "sum -= coefficient;",
      "info" : "ExpressionStatement[10701-10720]:ExpressionStatement[10701-10720]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[10739-10750]:ReturnStatement[10739-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11004-11357]:Block[11004-11371]"
    }, {
      "left" : "Integer row = null;",
      "right" : "Integer row = null;",
      "info" : "VariableDeclarationStatement[11014-11033]:VariableDeclarationStatement[11014-11033]"
    }, {
      "left" : "for (int i = getNumObjectiveFunctions(); i < getHeight(); i++)",
      "right" : "for (int i = getNumObjectiveFunctions(); i < getHeight(); i++)",
      "info" : "ForStatement[11042-11331]:ForStatement[11042-11345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11105-11331]:Block[11105-11345]"
    }, {
      "left" : "if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon))",
      "right" : "if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null))",
      "info" : "IfStatement[11119-11321]:IfStatement[11119-11335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11209-11253]:Block[11190-11230]"
    }, {
      "left" : "row = i;",
      "right" : "row = i;",
      "info" : "ExpressionStatement[11227-11235]:ExpressionStatement[11208-11216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11259-11307]:Block[11291-11335]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11277-11289]:ReturnStatement[11309-11321]"
    }, {
      "left" : "return row;",
      "right" : "return row;",
      "info" : "ReturnStatement[11340-11351]:ReturnStatement[11354-11365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11513-12079]:Block[11527-12093]"
    }, {
      "left" : "if (numArtificialVariables == 0)",
      "right" : "if (numArtificialVariables == 0)",
      "info" : "IfStatement[11523-11587]:IfStatement[11537-11601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11556-11587]:Block[11570-11601]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11570-11577]:ReturnStatement[11584-11591]"
    }, {
      "left" : "int width = getWidth() - numArtificialVariables - 1;",
      "right" : "int width = getWidth() - numArtificialVariables - 1;",
      "info" : "VariableDeclarationStatement[11596-11648]:VariableDeclarationStatement[11610-11662]"
    }, {
      "left" : "int height = getHeight() - 1;",
      "right" : "int height = getHeight() - 1;",
      "info" : "VariableDeclarationStatement[11657-11686]:VariableDeclarationStatement[11671-11700]"
    }, {
      "left" : "double[][] matrix = new double[height][width];",
      "right" : "double[][] matrix = new double[height][width];",
      "info" : "VariableDeclarationStatement[11695-11741]:VariableDeclarationStatement[11709-11755]"
    }, {
      "left" : "for (int i = 0; i < height; i++)",
      "right" : "for (int i = 0; i < height; i++)",
      "info" : "ForStatement[11750-11981]:ForStatement[11764-11995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11783-11981]:Block[11797-11995]"
    }, {
      "left" : "for (int j = 0; j < width - 1; j++)",
      "right" : "for (int j = 0; j < width - 1; j++)",
      "info" : "ForStatement[11797-11903]:ForStatement[11811-11917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11833-11903]:Block[11847-11917]"
    }, {
      "left" : "matrix[i][j] = getEntry(i + 1, j + 1);",
      "right" : "matrix[i][j] = getEntry(i + 1, j + 1);",
      "info" : "ExpressionStatement[11851-11889]:ExpressionStatement[11865-11903]"
    }, {
      "left" : "matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",
      "right" : "matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",
      "info" : "ExpressionStatement[11916-11971]:ExpressionStatement[11930-11985]"
    }, {
      "left" : "this.tableau = new RealMatrixImpl(matrix);",
      "right" : "this.tableau = new RealMatrixImpl(matrix);",
      "info" : "ExpressionStatement[11990-12032]:ExpressionStatement[12004-12046]"
    }, {
      "left" : "this.numArtificialVariables = 0;",
      "right" : "this.numArtificialVariables = 0;",
      "info" : "ExpressionStatement[12041-12073]:ExpressionStatement[12055-12087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12335-12423]:Block[12349-12437]"
    }, {
      "left" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "right" : "System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",
      "info" : "ExpressionStatement[12345-12416]:ExpressionStatement[12359-12430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12658-13697]:Block[12672-13711]"
    }, {
      "left" : "double[] coefficients = new double[getOriginalNumDecisionVariables()];",
      "right" : "double[] coefficients = new double[getOriginalNumDecisionVariables()];",
      "info" : "VariableDeclarationStatement[12668-12738]:VariableDeclarationStatement[12682-12752]"
    }, {
      "left" : "Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());",
      "right" : "Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());",
      "info" : "VariableDeclarationStatement[12747-12854]:VariableDeclarationStatement[12761-12868]"
    }, {
      "left" : "double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",
      "right" : "double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",
      "info" : "VariableDeclarationStatement[12863-12943]:VariableDeclarationStatement[12877-12957]"
    }, {
      "left" : "Set<Integer> basicRows = new HashSet<Integer>();",
      "right" : "Set<Integer> basicRows = new HashSet<Integer>();",
      "info" : "VariableDeclarationStatement[12952-13000]:VariableDeclarationStatement[12966-13014]"
    }, {
      "left" : "for (int i = 0; i < coefficients.length; i++)",
      "right" : "for (int i = 0; i < coefficients.length; i++)",
      "info" : "ForStatement[13009-13612]:ForStatement[13023-13626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13055-13612]:Block[13069-13626]"
    }, {
      "left" : "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
      "right" : "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
      "info" : "ExpressionStatement[13069-13124]:ExpressionStatement[13083-13138]"
    }, {
      "left" : "if (basicRows.contains(basicRow))",
      "right" : "if (basicRows.contains(basicRow))",
      "info" : "IfStatement[13137-13602]:IfStatement[13151-13616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13171-13360]:Block[13185-13374]"
    }, {
      "left" : "coefficients[i] = 0;",
      "right" : "coefficients[i] = 0;",
      "info" : "ExpressionStatement[13326-13346]:ExpressionStatement[13340-13360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13366-13602]:Block[13380-13616]"
    }, {
      "left" : "basicRows.add(basicRow);",
      "right" : "basicRows.add(basicRow);",
      "info" : "ExpressionStatement[13384-13408]:ExpressionStatement[13398-13422]"
    }, {
      "left" : "coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);",
      "right" : "coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);",
      "info" : "ExpressionStatement[13425-13588]:ExpressionStatement[13439-13602]"
    }, {
      "left" : "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
      "right" : "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
      "info" : "ReturnStatement[13621-13691]:ReturnStatement[13635-13705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14080-14234]:Block[14094-14248]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14090-14228]:ForStatement[14104-14242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14127-14228]:Block[14141-14242]"
    }, {
      "left" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "right" : "tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",
      "info" : "ExpressionStatement[14141-14218]:ExpressionStatement[14155-14232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14707-14926]:Block[14721-14940]"
    }, {
      "left" : "for (int j = 0; j < getWidth(); j++)",
      "right" : "for (int j = 0; j < getWidth(); j++)",
      "info" : "ForStatement[14717-14920]:ForStatement[14731-14934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14754-14920]:Block[14768-14934]"
    }, {
      "left" : "tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));",
      "right" : "tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -\n                             multiple * tableau.getEntry(subtrahendRow, j));",
      "info" : "ExpressionStatement[14768-14910]:ExpressionStatement[14782-14924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15052-15104]:Block[15066-15118]"
    }, {
      "left" : "return tableau.getColumnDimension();",
      "right" : "return tableau.getColumnDimension();",
      "info" : "ReturnStatement[15062-15098]:ReturnStatement[15076-15112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15233-15282]:Block[15247-15296]"
    }, {
      "left" : "return tableau.getRowDimension();",
      "right" : "return tableau.getRowDimension();",
      "info" : "ReturnStatement[15243-15276]:ReturnStatement[15257-15290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15498-15551]:Block[15512-15565]"
    }, {
      "left" : "return tableau.getEntry(row, column);",
      "right" : "return tableau.getEntry(row, column);",
      "info" : "ReturnStatement[15508-15545]:ReturnStatement[15522-15559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15815-15868]:Block[15829-15882]"
    }, {
      "left" : "tableau.setEntry(row, column, value);",
      "right" : "tableau.setEntry(row, column, value);",
      "info" : "ExpressionStatement[15825-15862]:ExpressionStatement[15839-15876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16036-16109]:Block[16050-16123]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables;",
      "info" : "ReturnStatement[16046-16103]:ReturnStatement[16060-16117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16292-16385]:Block[16306-16399]"
    }, {
      "left" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "right" : "return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;",
      "info" : "ReturnStatement[16302-16379]:ReturnStatement[16316-16393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16533-16571]:Block[16547-16585]"
    }, {
      "left" : "return getWidth() - 1;",
      "right" : "return getWidth() - 1;",
      "info" : "ReturnStatement[16543-16565]:ReturnStatement[16557-16579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16978-17022]:Block[16992-17036]"
    }, {
      "left" : "return numDecisionVariables;",
      "right" : "return numDecisionVariables;",
      "info" : "ReturnStatement[16988-17016]:ReturnStatement[17002-17030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17244-17339]:Block[17258-17353]"
    }, {
      "left" : "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;",
      "right" : "return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;",
      "info" : "ReturnStatement[17254-17333]:ReturnStatement[17268-17347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17487-17528]:Block[17501-17542]"
    }, {
      "left" : "return numSlackVariables;",
      "right" : "return numSlackVariables;",
      "info" : "ReturnStatement[17497-17522]:ReturnStatement[17511-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17691-17737]:Block[17705-17751]"
    }, {
      "left" : "return numArtificialVariables;",
      "right" : "return numArtificialVariables;",
      "info" : "ReturnStatement[17701-17731]:ReturnStatement[17715-17745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17853-17894]:Block[17867-17908]"
    }, {
      "left" : "return tableau.getData();",
      "right" : "return tableau.getData();",
      "info" : "ReturnStatement[17863-17888]:ReturnStatement[17877-17902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17975-18761]:Block[17989-18775]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[17984-18034]:IfStatement[17998-18048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18003-18034]:Block[18017-18048]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18014-18026]:ReturnStatement[18028-18040]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[18042-18092]:IfStatement[18056-18106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18061-18092]:Block[18075-18106]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18071-18084]:ReturnStatement[18085-18098]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18100-18754]:TryStatement[18114-18768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18104-18660]:Block[18118-18674]"
    }, {
      "left" : "SimplexTableau rhs = (SimplexTableau) other;",
      "right" : "SimplexTableau rhs = (SimplexTableau) other;",
      "info" : "VariableDeclarationStatement[18117-18161]:VariableDeclarationStatement[18131-18175]"
    }, {
      "left" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "right" : "return (restrictToNonNegative  == rhs.restrictToNonNegative) &&\n                 (numDecisionVariables   == rhs.numDecisionVariables) &&\n                 (numSlackVariables      == rhs.numSlackVariables) &&\n                 (numArtificialVariables == rhs.numArtificialVariables) &&\n                 (epsilon                == rhs.epsilon) &&\n                 f.equals(rhs.f) &&\n                 constraints.equals(rhs.constraints) &&\n                 tableau.equals(rhs.tableau);",
      "info" : "ReturnStatement[18172-18651]:ReturnStatement[18186-18665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18691-18754]:Block[18705-18768]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18733-18746]:ReturnStatement[18747-18760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18832-19176]:Block[18846-19190]"
    }, {
      "left" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "right" : "return Boolean.valueOf(restrictToNonNegative).hashCode() ^\n               numDecisionVariables ^\n               numSlackVariables ^\n               numArtificialVariables ^\n               Double.valueOf(epsilon).hashCode() ^\n               f.hashCode() ^\n               constraints.hashCode() ^\n               tableau.hashCode();",
      "info" : "ReturnStatement[18842-19170]:ReturnStatement[18856-19184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19419-19515]:Block[19433-19529]"
    }, {
      "left" : "oos.defaultWriteObject();",
      "right" : "oos.defaultWriteObject();",
      "info" : "ExpressionStatement[19429-19454]:ExpressionStatement[19443-19468]"
    }, {
      "left" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "right" : "MatrixUtils.serializeRealMatrix(tableau, oos);",
      "info" : "ExpressionStatement[19463-19509]:ExpressionStatement[19477-19523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19868-19973]:Block[19882-19987]"
    }, {
      "left" : "ois.defaultReadObject();",
      "right" : "ois.defaultReadObject();",
      "info" : "ExpressionStatement[19878-19902]:ExpressionStatement[19892-19916]"
    }, {
      "left" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "right" : "MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois);",
      "info" : "ExpressionStatement[19911-19967]:ExpressionStatement[19925-19981]"
    } ]
  },
  "interFileMappings" : { }
}