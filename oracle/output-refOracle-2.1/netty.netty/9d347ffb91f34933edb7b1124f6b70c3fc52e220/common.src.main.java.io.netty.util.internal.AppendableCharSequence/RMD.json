{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AppendableCharSequence",
      "right" : "AppendableCharSequence",
      "info" : "TypeDeclaration[695-4073]:TypeDeclaration[695-5029]"
    }, {
      "left" : "private char[] chars;",
      "right" : "private char[] chars;",
      "info" : "FieldDeclaration[779-800]:FieldDeclaration[779-800]"
    }, {
      "left" : "private int pos;",
      "right" : "private int pos;",
      "info" : "FieldDeclaration[805-821]:FieldDeclaration[805-821]"
    }, {
      "left" : "public AppendableCharSequence(int length)",
      "right" : "public AppendableCharSequence(int length)",
      "info" : "MethodDeclaration[827-1035]:MethodDeclaration[827-1035]"
    }, {
      "left" : "private AppendableCharSequence(char[] chars)",
      "right" : "private AppendableCharSequence(char[] chars)",
      "info" : "MethodDeclaration[1041-1149]:MethodDeclaration[1041-1286]"
    }, {
      "left" : "public int length()",
      "right" : "public int length()",
      "info" : "MethodDeclaration[1155-1216]:MethodDeclaration[1292-1353]"
    }, {
      "left" : "public char charAt(int index)",
      "right" : "public char charAt(int index)",
      "info" : "MethodDeclaration[1222-1390]:MethodDeclaration[1359-1527]"
    }, {
      "left" : "public AppendableCharSequence subSequence(int start, int end)",
      "right" : "public AppendableCharSequence subSequence(int start, int end)",
      "info" : "MethodDeclaration[1396-1561]:MethodDeclaration[1927-2092]"
    }, {
      "left" : "public AppendableCharSequence append(char c)",
      "right" : "public AppendableCharSequence append(char c)",
      "info" : "MethodDeclaration[1567-2008]:MethodDeclaration[2098-2341]"
    }, {
      "left" : "public AppendableCharSequence append(CharSequence csq)",
      "right" : "public AppendableCharSequence append(CharSequence csq)",
      "info" : "MethodDeclaration[2014-2135]:MethodDeclaration[2347-2468]"
    }, {
      "left" : "public AppendableCharSequence append(CharSequence csq, int start, int end)",
      "right" : "public AppendableCharSequence append(CharSequence csq, int start, int end)",
      "info" : "MethodDeclaration[2141-2932]:MethodDeclaration[2474-3265]"
    }, {
      "left" : "public void reset()",
      "right" : "public void reset()",
      "info" : "MethodDeclaration[2938-3154]:MethodDeclaration[3271-3487]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[3160-3248]:MethodDeclaration[3493-3581]"
    }, {
      "left" : "public String substring(int start, int end)",
      "right" : "public String substring(int start, int end)",
      "info" : "MethodDeclaration[3254-3572]:MethodDeclaration[3587-3905]"
    }, {
      "left" : "private static char[] expand(char[] array, int neededSpace, int size)",
      "right" : "private static char[] expand(char[] array, int neededSpace, int size)",
      "info" : "MethodDeclaration[3578-4071]:MethodDeclaration[4534-5027]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[869-1035]:Block[869-1035]"
    }, {
      "left" : "if (length < 1)",
      "right" : "if (length < 1)",
      "info" : "IfStatement[879-995]:IfStatement[879-995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[895-995]:Block[895-995]"
    }, {
      "left" : "throw new IllegalArgumentException(\"length: \" + length + \" (length: >= 1)\");",
      "right" : "throw new IllegalArgumentException(\"length: \" + length + \" (length: >= 1)\");",
      "info" : "ThrowStatement[909-985]:ThrowStatement[909-985]"
    }, {
      "left" : "chars = new char[length];",
      "right" : "chars = new char[length];",
      "info" : "ExpressionStatement[1004-1029]:ExpressionStatement[1004-1029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1086-1149]:Block[1086-1286]"
    }, {
      "left" : "this.chars = chars;",
      "right" : "this.chars = chars;",
      "info" : "ExpressionStatement[1096-1115]:ExpressionStatement[1233-1252]"
    }, {
      "left" : "pos = chars.length;",
      "right" : "pos = chars.length;",
      "info" : "ExpressionStatement[1124-1143]:ExpressionStatement[1261-1280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1189-1216]:Block[1326-1353]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[1199-1210]:ReturnStatement[1336-1347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1266-1390]:Block[1403-1527]"
    }, {
      "left" : "if (index > pos)",
      "right" : "if (index > pos)",
      "info" : "IfStatement[1276-1355]:IfStatement[1413-1492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1293-1355]:Block[1430-1492]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[1307-1345]:ThrowStatement[1444-1482]"
    }, {
      "left" : "return chars[index];",
      "right" : "return chars[index];",
      "info" : "ReturnStatement[1364-1384]:ReturnStatement[1501-1521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1472-1561]:Block[2003-2092]"
    }, {
      "left" : "return new AppendableCharSequence(Arrays.copyOfRange(chars, start, end));",
      "right" : "return new AppendableCharSequence(Arrays.copyOfRange(chars, start, end));",
      "info" : "ReturnStatement[1482-1555]:ReturnStatement[2013-2086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1626-2008]:Block[2157-2341]"
    }, {
      "left" : "char[] old = chars;",
      "right" : "char[] old = chars;",
      "info" : "VariableDeclarationStatement[1675-1694]:VariableDeclarationStatement[4280-4299]"
    }, {
      "left" : "int len = old.length << 1;",
      "right" : "int len = old.length << 1;",
      "info" : "VariableDeclarationStatement[1732-1758]:VariableDeclarationStatement[4329-4355]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[1771-1850]:IfStatement[4364-4435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1784-1850]:Block[4377-4435]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[1802-1836]:ThrowStatement[4391-4425]"
    }, {
      "left" : "chars = new char[len];",
      "right" : "chars = new char[len];",
      "info" : "ExpressionStatement[1863-1885]:ExpressionStatement[4444-4466]"
    }, {
      "left" : "System.arraycopy(old, 0, chars, 0, old.length);",
      "right" : "System.arraycopy(old, 0, chars, 0, old.length);",
      "info" : "ExpressionStatement[1898-1945]:ExpressionStatement[4475-4522]"
    }, {
      "left" : "chars[pos++] = c;",
      "right" : "chars[pos++] = c;",
      "info" : "ExpressionStatement[1964-1981]:ExpressionStatement[2185-2202]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[1990-2002]:ReturnStatement[2323-2335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2083-2135]:Block[2416-2468]"
    }, {
      "left" : "return append(csq, 0, csq.length());",
      "right" : "return append(csq, 0, csq.length());",
      "info" : "ReturnStatement[2093-2129]:ReturnStatement[2426-2462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2230-2932]:Block[2563-3265]"
    }, {
      "left" : "if (csq.length() < end)",
      "right" : "if (csq.length() < end)",
      "info" : "IfStatement[2240-2326]:IfStatement[2573-2659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2264-2326]:Block[2597-2659]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[2278-2316]:ThrowStatement[2611-2649]"
    }, {
      "left" : "int length = end - start;",
      "right" : "int length = end - start;",
      "info" : "VariableDeclarationStatement[2335-2360]:VariableDeclarationStatement[2668-2693]"
    }, {
      "left" : "if (length > chars.length - pos)",
      "right" : "if (length > chars.length - pos)",
      "info" : "IfStatement[2369-2467]:IfStatement[2702-2800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2402-2467]:Block[2735-2800]"
    }, {
      "left" : "chars = expand(chars, pos + length, pos);",
      "right" : "chars = expand(chars, pos + length, pos);",
      "info" : "ExpressionStatement[2416-2457]:ExpressionStatement[2749-2790]"
    }, {
      "left" : "if (csq instanceof AppendableCharSequence)",
      "right" : "if (csq instanceof AppendableCharSequence)",
      "info" : "IfStatement[2476-2808]:IfStatement[2809-3141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2519-2808]:Block[2852-3141]"
    }, {
      "left" : "AppendableCharSequence seq = (AppendableCharSequence) csq;",
      "right" : "AppendableCharSequence seq = (AppendableCharSequence) csq;",
      "info" : "VariableDeclarationStatement[2590-2648]:VariableDeclarationStatement[2923-2981]"
    }, {
      "left" : "char[] src = seq.chars;",
      "right" : "char[] src = seq.chars;",
      "info" : "VariableDeclarationStatement[2661-2684]:VariableDeclarationStatement[2994-3017]"
    }, {
      "left" : "System.arraycopy(src, start, chars, pos, length);",
      "right" : "System.arraycopy(src, start, chars, pos, length);",
      "info" : "ExpressionStatement[2697-2746]:ExpressionStatement[3030-3079]"
    }, {
      "left" : "pos += length;",
      "right" : "pos += length;",
      "info" : "ExpressionStatement[2759-2773]:ExpressionStatement[3092-3106]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2786-2798]:ReturnStatement[3119-3131]"
    }, {
      "left" : "for (int i = start; i < end; i++)",
      "right" : "for (int i = start; i < end; i++)",
      "info" : "ForStatement[2817-2904]:ForStatement[3150-3237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2851-2904]:Block[3184-3237]"
    }, {
      "left" : "chars[pos++] = csq.charAt(i);",
      "right" : "chars[pos++] = csq.charAt(i);",
      "info" : "ExpressionStatement[2865-2894]:ExpressionStatement[3198-3227]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2914-2926]:ReturnStatement[3247-3259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3130-3154]:Block[3463-3487]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[3140-3148]:ExpressionStatement[3473-3481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3199-3248]:Block[3532-3581]"
    }, {
      "left" : "return new String(chars, 0, pos);",
      "right" : "return new String(chars, 0, pos);",
      "info" : "ReturnStatement[3209-3242]:ReturnStatement[3542-3575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3378-3572]:Block[3711-3905]"
    }, {
      "left" : "int length = end - start;",
      "right" : "int length = end - start;",
      "info" : "VariableDeclarationStatement[3388-3413]:VariableDeclarationStatement[3721-3746]"
    }, {
      "left" : "if (start > pos || length > pos)",
      "right" : "if (start > pos || length > pos)",
      "info" : "IfStatement[3422-3517]:IfStatement[3755-3850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3455-3517]:Block[3788-3850]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[3469-3507]:ThrowStatement[3802-3840]"
    }, {
      "left" : "return new String(chars, start, length);",
      "right" : "return new String(chars, start, length);",
      "info" : "ReturnStatement[3526-3566]:ReturnStatement[3859-3899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3648-4071]:Block[4604-5027]"
    }, {
      "left" : "int newCapacity = array.length;",
      "right" : "int newCapacity = array.length;",
      "info" : "VariableDeclarationStatement[3658-3689]:VariableDeclarationStatement[4614-4645]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[3698-3934]:DoStatement[4654-4890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3701-3899]:Block[4657-4855]"
    }, {
      "left" : "newCapacity <<= 1;",
      "right" : "newCapacity <<= 1;",
      "info" : "ExpressionStatement[3769-3787]:ExpressionStatement[4725-4743]"
    }, {
      "left" : "if (newCapacity < 0)",
      "right" : "if (newCapacity < 0)",
      "info" : "IfStatement[3801-3888]:IfStatement[4757-4844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3822-3888]:Block[4778-4844]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3840-3874]:ThrowStatement[4796-4830]"
    }, {
      "left" : "char[] newArray = new char[newCapacity];",
      "right" : "char[] newArray = new char[newCapacity];",
      "info" : "VariableDeclarationStatement[3944-3984]:VariableDeclarationStatement[4900-4940]"
    }, {
      "left" : "System.arraycopy(array, 0, newArray, 0, size);",
      "right" : "System.arraycopy(array, 0, newArray, 0, size);",
      "info" : "ExpressionStatement[3993-4039]:ExpressionStatement[4949-4995]"
    }, {
      "left" : "return newArray;",
      "right" : "return newArray;",
      "info" : "ReturnStatement[4049-4065]:ReturnStatement[5005-5021]"
    } ]
  },
  "interFileMappings" : { }
}