{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PhoneticEngine",
      "right" : "PhoneticEngine",
      "info" : "TypeDeclaration[1290-20069]:TypeDeclaration[1290-20568]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "TypeDeclaration[2003-5898]:TypeDeclaration[2003-5898]"
    }, {
      "left" : "public static PhonemeBuilder empty(final Languages.LanguageSet languages)",
      "right" : "public static PhonemeBuilder empty(final Languages.LanguageSet languages)",
      "info" : "MethodDeclaration[2276-2824]:MethodDeclaration[2276-2824]"
    }, {
      "left" : "private final Set<Rule.Phoneme> phonemes;",
      "right" : "private final Set<Rule.Phoneme> phonemes;",
      "info" : "FieldDeclaration[2834-2875]:FieldDeclaration[2834-2875]"
    }, {
      "left" : "private PhonemeBuilder(final Rule.Phoneme phoneme)",
      "right" : "private PhonemeBuilder(final Rule.Phoneme phoneme)",
      "info" : "MethodDeclaration[2885-3050]:MethodDeclaration[2885-3050]"
    }, {
      "left" : "private PhonemeBuilder(final Set<Rule.Phoneme> phonemes)",
      "right" : "private PhonemeBuilder(final Set<Rule.Phoneme> phonemes)",
      "info" : "MethodDeclaration[3060-3166]:MethodDeclaration[3060-3166]"
    }, {
      "left" : "public void append(final CharSequence str)",
      "right" : "public void append(final CharSequence str)",
      "info" : "MethodDeclaration[3176-3541]:MethodDeclaration[3176-3541]"
    }, {
      "left" : "public void apply(final Rule.PhonemeExpr phonemeExpr, final int maxPhonemes)",
      "right" : "public void apply(final Rule.PhonemeExpr phonemeExpr, final int maxPhonemes)",
      "info" : "MethodDeclaration[3551-4951]:MethodDeclaration[3551-4951]"
    }, {
      "left" : "public Set<Rule.Phoneme> getPhonemes()",
      "right" : "public Set<Rule.Phoneme> getPhonemes()",
      "info" : "MethodDeclaration[4961-5177]:MethodDeclaration[4961-5177]"
    }, {
      "left" : "public String makeString()",
      "right" : "public String makeString()",
      "info" : "MethodDeclaration[5187-5892]:MethodDeclaration[5187-5892]"
    }, {
      "left" : "RulesApplication",
      "right" : "RulesApplication",
      "info" : "TypeDeclaration[5904-9096]:TypeDeclaration[5904-9096]"
    }, {
      "left" : "private final Map<String, List<Rule>> finalRules;",
      "right" : "private final Map<String, List<Rule>> finalRules;",
      "info" : "FieldDeclaration[6798-6847]:FieldDeclaration[6798-6847]"
    }, {
      "left" : "private final CharSequence input;",
      "right" : "private final CharSequence input;",
      "info" : "FieldDeclaration[6856-6889]:FieldDeclaration[6856-6889]"
    }, {
      "left" : "private PhonemeBuilder phonemeBuilder;",
      "right" : "private PhonemeBuilder phonemeBuilder;",
      "info" : "FieldDeclaration[6899-6937]:FieldDeclaration[6899-6937]"
    }, {
      "left" : "private int i;",
      "right" : "private int i;",
      "info" : "FieldDeclaration[6946-6960]:FieldDeclaration[6946-6960]"
    }, {
      "left" : "private final int maxPhonemes;",
      "right" : "private final int maxPhonemes;",
      "info" : "FieldDeclaration[6969-6999]:FieldDeclaration[6969-6999]"
    }, {
      "left" : "private boolean found;",
      "right" : "private boolean found;",
      "info" : "FieldDeclaration[7008-7030]:FieldDeclaration[7008-7030]"
    }, {
      "left" : "public RulesApplication(final Map<String, List<Rule>> finalRules, final CharSequence input,\n                                final PhonemeBuilder phonemeBuilder, final int i, final int maxPhonemes)",
      "right" : "public RulesApplication(final Map<String, List<Rule>> finalRules, final CharSequence input,\n                                final PhonemeBuilder phonemeBuilder, final int i, final int maxPhonemes)",
      "info" : "MethodDeclaration[7040-7584]:MethodDeclaration[7040-7584]"
    }, {
      "left" : "public int getI()",
      "right" : "public int getI()",
      "info" : "MethodDeclaration[7594-7650]:MethodDeclaration[7594-7650]"
    }, {
      "left" : "public PhonemeBuilder getPhonemeBuilder()",
      "right" : "public PhonemeBuilder getPhonemeBuilder()",
      "info" : "MethodDeclaration[7660-7753]:MethodDeclaration[7660-7753]"
    }, {
      "left" : "public RulesApplication invoke()",
      "right" : "public RulesApplication invoke()",
      "info" : "MethodDeclaration[7763-9013]:MethodDeclaration[7763-9013]"
    }, {
      "left" : "public boolean isFound()",
      "right" : "public boolean isFound()",
      "info" : "MethodDeclaration[9023-9090]:MethodDeclaration[9023-9090]"
    }, {
      "left" : "private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class);",
      "right" : "private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class);",
      "info" : "FieldDeclaration[9102-9217]:FieldDeclaration[9102-9217]"
    }, {
      "left" : "private static String join(final Iterable<String> strings, final String sep)",
      "right" : "private static String join(final Iterable<String> strings, final String sep)",
      "info" : "MethodDeclaration[10064-10725]:MethodDeclaration[10064-10725]"
    }, {
      "left" : "private static final int DEFAULT_MAX_PHONEMES = 20;",
      "right" : "private static final int DEFAULT_MAX_PHONEMES = 20;",
      "info" : "FieldDeclaration[10731-10782]:FieldDeclaration[10731-10782]"
    }, {
      "left" : "private final Lang lang;",
      "right" : "private final Lang lang;",
      "info" : "FieldDeclaration[10788-10812]:FieldDeclaration[10788-10812]"
    }, {
      "left" : "private final NameType nameType;",
      "right" : "private final NameType nameType;",
      "info" : "FieldDeclaration[10818-10850]:FieldDeclaration[10818-10850]"
    }, {
      "left" : "private final RuleType ruleType;",
      "right" : "private final RuleType ruleType;",
      "info" : "FieldDeclaration[10856-10888]:FieldDeclaration[10856-10888]"
    }, {
      "left" : "private final boolean concat;",
      "right" : "private final boolean concat;",
      "info" : "FieldDeclaration[10894-10923]:FieldDeclaration[10894-10923]"
    }, {
      "left" : "private final int maxPhonemes;",
      "right" : "private final int maxPhonemes;",
      "info" : "FieldDeclaration[10929-10959]:FieldDeclaration[10929-10959]"
    }, {
      "left" : "public PhoneticEngine(final NameType nameType, final RuleType ruleType, final boolean concat)",
      "right" : "public PhoneticEngine(final NameType nameType, final RuleType ruleType, final boolean concat)",
      "info" : "MethodDeclaration[10965-11436]:MethodDeclaration[10965-11436]"
    }, {
      "left" : "public PhoneticEngine(final NameType nameType, final RuleType ruleType, final boolean concat,\n                          final int maxPhonemes)",
      "right" : "public PhoneticEngine(final NameType nameType, final RuleType ruleType, final boolean concat,\n                          final int maxPhonemes)",
      "info" : "MethodDeclaration[11442-12337]:MethodDeclaration[11442-12337]"
    }, {
      "left" : "private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder,\n                                           final Map<String, List<Rule>> finalRules)",
      "right" : "private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder,\n                                           final Map<String, List<Rule>> finalRules)",
      "info" : "MethodDeclaration[12343-14338]:MethodDeclaration[12343-14837]"
    }, {
      "left" : "public String encode(final String input)",
      "right" : "public String encode(final String input)",
      "info" : "MethodDeclaration[14344-14697]:MethodDeclaration[14843-15196]"
    }, {
      "left" : "public String encode(String input, final Languages.LanguageSet languageSet)",
      "right" : "public String encode(String input, final Languages.LanguageSet languageSet)",
      "info" : "MethodDeclaration[14703-19034]:MethodDeclaration[15202-19533]"
    }, {
      "left" : "public Lang getLang()",
      "right" : "public Lang getLang()",
      "info" : "MethodDeclaration[19040-19206]:MethodDeclaration[19539-19705]"
    }, {
      "left" : "public NameType getNameType()",
      "right" : "public NameType getNameType()",
      "info" : "MethodDeclaration[19212-19374]:MethodDeclaration[19711-19873]"
    }, {
      "left" : "public RuleType getRuleType()",
      "right" : "public RuleType getRuleType()",
      "info" : "MethodDeclaration[19380-19542]:MethodDeclaration[19879-20041]"
    }, {
      "left" : "public boolean isConcat()",
      "right" : "public boolean isConcat()",
      "info" : "MethodDeclaration[19548-19818]:MethodDeclaration[20047-20317]"
    }, {
      "left" : "public int getMaxPhonemes()",
      "right" : "public int getMaxPhonemes()",
      "info" : "MethodDeclaration[19824-20067]:MethodDeclaration[20323-20566]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1968-1974]:Modifier[1968-1974]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1975-1980]:TYPE_DECLARATION_KIND[1975-1980]"
    }, {
      "left" : "PhoneticEngine",
      "right" : "PhoneticEngine",
      "info" : "SimpleName[1981-1995]:SimpleName[1981-1995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2231-2237]:Modifier[2231-2237]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2238-2243]:Modifier[2238-2243]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2244-2249]:TYPE_DECLARATION_KIND[2244-2249]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "SimpleName[2250-2264]:SimpleName[2250-2264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2667-2673]:Modifier[2667-2673]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2674-2680]:Modifier[2674-2680]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "SimpleType[2681-2695]:SimpleType[2681-2695]"
    }, {
      "left" : "empty",
      "right" : "empty",
      "info" : "SimpleName[2696-2701]:SimpleName[2696-2701]"
    }, {
      "left" : "final Languages.LanguageSet languages",
      "right" : "final Languages.LanguageSet languages",
      "info" : "SingleVariableDeclaration[2702-2739]:SingleVariableDeclaration[2702-2739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2741-2824]:Block[2741-2824]"
    }, {
      "left" : "return new PhonemeBuilder(new Rule.Phoneme(\"\", languages));",
      "right" : "return new PhonemeBuilder(new Rule.Phoneme(\"\", languages));",
      "info" : "ReturnStatement[2755-2814]:ReturnStatement[2755-2814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2885-2892]:Modifier[2885-2892]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "SimpleName[2893-2907]:SimpleName[2893-2907]"
    }, {
      "left" : "final Rule.Phoneme phoneme",
      "right" : "final Rule.Phoneme phoneme",
      "info" : "SingleVariableDeclaration[2908-2934]:SingleVariableDeclaration[2908-2934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2936-3050]:Block[2936-3050]"
    }, {
      "left" : "this.phonemes = new LinkedHashSet<Rule.Phoneme>();",
      "right" : "this.phonemes = new LinkedHashSet<Rule.Phoneme>();",
      "info" : "ExpressionStatement[2950-3000]:ExpressionStatement[2950-3000]"
    }, {
      "left" : "this.phonemes.add(phoneme);",
      "right" : "this.phonemes.add(phoneme);",
      "info" : "ExpressionStatement[3013-3040]:ExpressionStatement[3013-3040]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3060-3067]:Modifier[3060-3067]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "SimpleName[3068-3082]:SimpleName[3068-3082]"
    }, {
      "left" : "final Set<Rule.Phoneme> phonemes",
      "right" : "final Set<Rule.Phoneme> phonemes",
      "info" : "SingleVariableDeclaration[3083-3115]:SingleVariableDeclaration[3083-3115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3117-3166]:Block[3117-3166]"
    }, {
      "left" : "this.phonemes = phonemes;",
      "right" : "this.phonemes = phonemes;",
      "info" : "ExpressionStatement[3131-3156]:ExpressionStatement[3131-3156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3383-3389]:Modifier[3383-3389]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3390-3394]:PrimitiveType[3390-3394]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[3395-3401]:SimpleName[3395-3401]"
    }, {
      "left" : "final CharSequence str",
      "right" : "final CharSequence str",
      "info" : "SingleVariableDeclaration[3402-3424]:SingleVariableDeclaration[3402-3424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3426-3541]:Block[3426-3541]"
    }, {
      "left" : "for (final Rule.Phoneme ph : this.phonemes)",
      "right" : "for (final Rule.Phoneme ph : this.phonemes)",
      "info" : "EnhancedForStatement[3440-3531]:EnhancedForStatement[3440-3531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3484-3531]:Block[3484-3531]"
    }, {
      "left" : "ph.append(str);",
      "right" : "ph.append(str);",
      "info" : "ExpressionStatement[3502-3517]:ExpressionStatement[3502-3517]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3963-3969]:Modifier[3963-3969]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3970-3974]:PrimitiveType[3970-3974]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[3975-3980]:SimpleName[3975-3980]"
    }, {
      "left" : "final Rule.PhonemeExpr phonemeExpr",
      "right" : "final Rule.PhonemeExpr phonemeExpr",
      "info" : "SingleVariableDeclaration[3981-4015]:SingleVariableDeclaration[3981-4015]"
    }, {
      "left" : "final int maxPhonemes",
      "right" : "final int maxPhonemes",
      "info" : "SingleVariableDeclaration[4017-4038]:SingleVariableDeclaration[4017-4038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4040-4951]:Block[4040-4951]"
    }, {
      "left" : "final Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<Rule.Phoneme>(maxPhonemes);",
      "right" : "final Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<Rule.Phoneme>(maxPhonemes);",
      "info" : "VariableDeclarationStatement[4054-4137]:VariableDeclarationStatement[4054-4137]"
    }, {
      "left" : "EXPR: for (final Rule.Phoneme left : this.phonemes) {\n                for (final Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n                    final LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n                    if (!languages.isEmpty()) {\n                        final Rule.Phoneme join = new Phoneme(left, right, languages);\n                        if (newPhonemes.size() < maxPhonemes) {\n                            newPhonemes.add(join);\n                            if (newPhonemes.size() >= maxPhonemes) {\n                                break EXPR;\n                            }\n                        }\n                    }\n                }\n            }",
      "right" : "EXPR: for (final Rule.Phoneme left : this.phonemes) {\n                for (final Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n                    final LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n                    if (!languages.isEmpty()) {\n                        final Rule.Phoneme join = new Phoneme(left, right, languages);\n                        if (newPhonemes.size() < maxPhonemes) {\n                            newPhonemes.add(join);\n                            if (newPhonemes.size() >= maxPhonemes) {\n                                break EXPR;\n                            }\n                        }\n                    }\n                }\n            }",
      "info" : "LabeledStatement[4151-4858]:LabeledStatement[4151-4858]"
    }, {
      "left" : "for (final Rule.Phoneme left : this.phonemes)",
      "right" : "for (final Rule.Phoneme left : this.phonemes)",
      "info" : "EnhancedForStatement[4157-4858]:EnhancedForStatement[4157-4858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4203-4858]:Block[4203-4858]"
    }, {
      "left" : "for (final Rule.Phoneme right : phonemeExpr.getPhonemes())",
      "right" : "for (final Rule.Phoneme right : phonemeExpr.getPhonemes())",
      "info" : "EnhancedForStatement[4221-4844]:EnhancedForStatement[4221-4844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4280-4844]:Block[4280-4844]"
    }, {
      "left" : "final LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());",
      "right" : "final LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());",
      "info" : "VariableDeclarationStatement[4302-4385]:VariableDeclarationStatement[4302-4385]"
    }, {
      "left" : "if (!languages.isEmpty())",
      "right" : "if (!languages.isEmpty())",
      "info" : "IfStatement[4406-4826]:IfStatement[4406-4826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4432-4826]:Block[4432-4826]"
    }, {
      "left" : "final Rule.Phoneme join = new Phoneme(left, right, languages);",
      "right" : "final Rule.Phoneme join = new Phoneme(left, right, languages);",
      "info" : "VariableDeclarationStatement[4458-4520]:VariableDeclarationStatement[4458-4520]"
    }, {
      "left" : "if (newPhonemes.size() < maxPhonemes)",
      "right" : "if (newPhonemes.size() < maxPhonemes)",
      "info" : "IfStatement[4545-4804]:IfStatement[4545-4804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4583-4804]:Block[4583-4804]"
    }, {
      "left" : "newPhonemes.add(join);",
      "right" : "newPhonemes.add(join);",
      "info" : "ExpressionStatement[4613-4635]:ExpressionStatement[4613-4635]"
    }, {
      "left" : "if (newPhonemes.size() >= maxPhonemes)",
      "right" : "if (newPhonemes.size() >= maxPhonemes)",
      "info" : "IfStatement[4664-4778]:IfStatement[4664-4778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4703-4778]:Block[4703-4778]"
    }, {
      "left" : "break EXPR;",
      "right" : "break EXPR;",
      "info" : "BreakStatement[4737-4748]:BreakStatement[4737-4748]"
    }, {
      "left" : "this.phonemes.clear();",
      "right" : "this.phonemes.clear();",
      "info" : "ExpressionStatement[4872-4894]:ExpressionStatement[4872-4894]"
    }, {
      "left" : "this.phonemes.addAll(newPhonemes);",
      "right" : "this.phonemes.addAll(newPhonemes);",
      "info" : "ExpressionStatement[4907-4941]:ExpressionStatement[4907-4941]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5093-5099]:Modifier[5093-5099]"
    }, {
      "left" : "Set<Rule.Phoneme>",
      "right" : "Set<Rule.Phoneme>",
      "info" : "ParameterizedType[5100-5117]:ParameterizedType[5100-5117]"
    }, {
      "left" : "getPhonemes",
      "right" : "getPhonemes",
      "info" : "SimpleName[5118-5129]:SimpleName[5118-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5132-5177]:Block[5132-5177]"
    }, {
      "left" : "return this.phonemes;",
      "right" : "return this.phonemes;",
      "info" : "ReturnStatement[5146-5167]:ReturnStatement[5146-5167]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5547-5553]:Modifier[5547-5553]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5554-5560]:SimpleType[5554-5560]"
    }, {
      "left" : "makeString",
      "right" : "makeString",
      "info" : "SimpleName[5561-5571]:SimpleName[5561-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5574-5892]:Block[5574-5892]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[5588-5633]:VariableDeclarationStatement[5588-5633]"
    }, {
      "left" : "for (final Rule.Phoneme ph : this.phonemes)",
      "right" : "for (final Rule.Phoneme ph : this.phonemes)",
      "info" : "EnhancedForStatement[5647-5847]:EnhancedForStatement[5647-5847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5691-5847]:Block[5691-5847]"
    }, {
      "left" : "if (sb.length() > 0)",
      "right" : "if (sb.length() > 0)",
      "info" : "IfStatement[5709-5785]:IfStatement[5709-5785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5730-5785]:Block[5730-5785]"
    }, {
      "left" : "sb.append(\"|\");",
      "right" : "sb.append(\"|\");",
      "info" : "ExpressionStatement[5752-5767]:ExpressionStatement[5752-5767]"
    }, {
      "left" : "sb.append(ph.getPhonemeText());",
      "right" : "sb.append(ph.getPhonemeText());",
      "info" : "ExpressionStatement[5802-5833]:ExpressionStatement[5802-5833]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[5861-5882]:ReturnStatement[5861-5882]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6744-6751]:Modifier[6744-6751]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6752-6758]:Modifier[6752-6758]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6759-6764]:Modifier[6759-6764]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6765-6770]:TYPE_DECLARATION_KIND[6765-6770]"
    }, {
      "left" : "RulesApplication",
      "right" : "RulesApplication",
      "info" : "SimpleName[6771-6787]:SimpleName[6771-6787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7040-7046]:Modifier[7040-7046]"
    }, {
      "left" : "RulesApplication",
      "right" : "RulesApplication",
      "info" : "SimpleName[7047-7063]:SimpleName[7047-7063]"
    }, {
      "left" : "final Map<String, List<Rule>> finalRules",
      "right" : "final Map<String, List<Rule>> finalRules",
      "info" : "SingleVariableDeclaration[7064-7104]:SingleVariableDeclaration[7064-7104]"
    }, {
      "left" : "final CharSequence input",
      "right" : "final CharSequence input",
      "info" : "SingleVariableDeclaration[7106-7130]:SingleVariableDeclaration[7106-7130]"
    }, {
      "left" : "final PhonemeBuilder phonemeBuilder",
      "right" : "final PhonemeBuilder phonemeBuilder",
      "info" : "SingleVariableDeclaration[7164-7199]:SingleVariableDeclaration[7164-7199]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[7201-7212]:SingleVariableDeclaration[7201-7212]"
    }, {
      "left" : "final int maxPhonemes",
      "right" : "final int maxPhonemes",
      "info" : "SingleVariableDeclaration[7214-7235]:SingleVariableDeclaration[7214-7235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7237-7584]:Block[7237-7584]"
    }, {
      "left" : "if (finalRules == null)",
      "right" : "if (finalRules == null)",
      "info" : "IfStatement[7251-7382]:IfStatement[7251-7382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7275-7382]:Block[7275-7382]"
    }, {
      "left" : "throw new NullPointerException(\"The finalRules argument must not be null\");",
      "right" : "throw new NullPointerException(\"The finalRules argument must not be null\");",
      "info" : "ThrowStatement[7293-7368]:ThrowStatement[7293-7368]"
    }, {
      "left" : "this.finalRules = finalRules;",
      "right" : "this.finalRules = finalRules;",
      "info" : "ExpressionStatement[7395-7424]:ExpressionStatement[7395-7424]"
    }, {
      "left" : "this.phonemeBuilder = phonemeBuilder;",
      "right" : "this.phonemeBuilder = phonemeBuilder;",
      "info" : "ExpressionStatement[7437-7474]:ExpressionStatement[7437-7474]"
    }, {
      "left" : "this.input = input;",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[7487-7506]:ExpressionStatement[7487-7506]"
    }, {
      "left" : "this.i = i;",
      "right" : "this.i = i;",
      "info" : "ExpressionStatement[7519-7530]:ExpressionStatement[7519-7530]"
    }, {
      "left" : "this.maxPhonemes = maxPhonemes;",
      "right" : "this.maxPhonemes = maxPhonemes;",
      "info" : "ExpressionStatement[7543-7574]:ExpressionStatement[7543-7574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7594-7600]:Modifier[7594-7600]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7601-7604]:PrimitiveType[7601-7604]"
    }, {
      "left" : "getI",
      "right" : "getI",
      "info" : "SimpleName[7605-7609]:SimpleName[7605-7609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7612-7650]:Block[7612-7650]"
    }, {
      "left" : "return this.i;",
      "right" : "return this.i;",
      "info" : "ReturnStatement[7626-7640]:ReturnStatement[7626-7640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7660-7666]:Modifier[7660-7666]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "SimpleType[7667-7681]:SimpleType[7667-7681]"
    }, {
      "left" : "getPhonemeBuilder",
      "right" : "getPhonemeBuilder",
      "info" : "SimpleName[7682-7699]:SimpleName[7682-7699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7702-7753]:Block[7702-7753]"
    }, {
      "left" : "return this.phonemeBuilder;",
      "right" : "return this.phonemeBuilder;",
      "info" : "ReturnStatement[7716-7743]:ReturnStatement[7716-7743]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8176-8182]:Modifier[8176-8182]"
    }, {
      "left" : "RulesApplication",
      "right" : "RulesApplication",
      "info" : "SimpleType[8183-8199]:SimpleType[8183-8199]"
    }, {
      "left" : "invoke",
      "right" : "invoke",
      "info" : "SimpleName[8200-8206]:SimpleName[8200-8206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8209-9013]:Block[8209-9013]"
    }, {
      "left" : "this.found = false;",
      "right" : "this.found = false;",
      "info" : "ExpressionStatement[8223-8242]:ExpressionStatement[8223-8242]"
    }, {
      "left" : "int patternLength = 1;",
      "right" : "int patternLength = 1;",
      "info" : "VariableDeclarationStatement[8255-8277]:VariableDeclarationStatement[8255-8277]"
    }, {
      "left" : "final List<Rule> rules = this.finalRules.get(input.subSequence(i, i+patternLength));",
      "right" : "final List<Rule> rules = this.finalRules.get(input.subSequence(i, i+patternLength));",
      "info" : "VariableDeclarationStatement[8290-8374]:VariableDeclarationStatement[8290-8374]"
    }, {
      "left" : "if (rules != null)",
      "right" : "if (rules != null)",
      "info" : "IfStatement[8387-8859]:IfStatement[8387-8859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8406-8859]:Block[8406-8859]"
    }, {
      "left" : "for (final Rule rule : rules)",
      "right" : "for (final Rule rule : rules)",
      "info" : "EnhancedForStatement[8424-8845]:EnhancedForStatement[8424-8845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8454-8845]:Block[8454-8845]"
    }, {
      "left" : "final String pattern = rule.getPattern();",
      "right" : "final String pattern = rule.getPattern();",
      "info" : "VariableDeclarationStatement[8476-8517]:VariableDeclarationStatement[8476-8517]"
    }, {
      "left" : "patternLength = pattern.length();",
      "right" : "patternLength = pattern.length();",
      "info" : "ExpressionStatement[8538-8571]:ExpressionStatement[8538-8571]"
    }, {
      "left" : "if (rule.patternAndContextMatches(this.input, this.i))",
      "right" : "if (rule.patternAndContextMatches(this.input, this.i))",
      "info" : "IfStatement[8592-8827]:IfStatement[8592-8827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8647-8827]:Block[8647-8827]"
    }, {
      "left" : "this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);",
      "right" : "this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);",
      "info" : "ExpressionStatement[8673-8731]:ExpressionStatement[8673-8731]"
    }, {
      "left" : "this.found = true;",
      "right" : "this.found = true;",
      "info" : "ExpressionStatement[8756-8774]:ExpressionStatement[8756-8774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8799-8805]:BreakStatement[8799-8805]"
    }, {
      "left" : "if (!this.found)",
      "right" : "if (!this.found)",
      "info" : "IfStatement[8873-8940]:IfStatement[8873-8940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8890-8940]:Block[8890-8940]"
    }, {
      "left" : "patternLength = 1;",
      "right" : "patternLength = 1;",
      "info" : "ExpressionStatement[8908-8926]:ExpressionStatement[8908-8926]"
    }, {
      "left" : "this.i += patternLength;",
      "right" : "this.i += patternLength;",
      "info" : "ExpressionStatement[8954-8978]:ExpressionStatement[8954-8978]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8991-9003]:ReturnStatement[8991-9003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9023-9029]:Modifier[9023-9029]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9030-9037]:PrimitiveType[9030-9037]"
    }, {
      "left" : "isFound",
      "right" : "isFound",
      "info" : "SimpleName[9038-9045]:SimpleName[9038-9045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9048-9090]:Block[9048-9090]"
    }, {
      "left" : "return this.found;",
      "right" : "return this.found;",
      "info" : "ReturnStatement[9062-9080]:ReturnStatement[9062-9080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9230-10058]:Block[9230-10058]"
    }, {
      "left" : "NAME_PREFIXES.put(NameType.ASHKENAZI,\n                Collections.unmodifiableSet(\n                        new HashSet<String>(Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))));",
      "right" : "NAME_PREFIXES.put(NameType.ASHKENAZI,\n                Collections.unmodifiableSet(\n                        new HashSet<String>(Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))));",
      "info" : "ExpressionStatement[9240-9424]:ExpressionStatement[9240-9424]"
    }, {
      "left" : "NAME_PREFIXES.put(NameType.SEPHARDIC,\n                Collections.unmodifiableSet(\n                        new HashSet<String>(Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\",\n                                                          \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));",
      "right" : "NAME_PREFIXES.put(NameType.SEPHARDIC,\n                Collections.unmodifiableSet(\n                        new HashSet<String>(Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\",\n                                                          \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));",
      "info" : "ExpressionStatement[9433-9745]:ExpressionStatement[9433-9745]"
    }, {
      "left" : "NAME_PREFIXES.put(NameType.GENERIC,\n                Collections.unmodifiableSet(\n                        new HashSet<String>(Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\",\n                                                          \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));",
      "right" : "NAME_PREFIXES.put(NameType.GENERIC,\n                Collections.unmodifiableSet(\n                        new HashSet<String>(Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\",\n                                                          \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));",
      "info" : "ExpressionStatement[9754-10052]:ExpressionStatement[9754-10052]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10341-10348]:Modifier[10341-10348]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10349-10355]:Modifier[10349-10355]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10356-10362]:SimpleType[10356-10362]"
    }, {
      "left" : "join",
      "right" : "join",
      "info" : "SimpleName[10363-10367]:SimpleName[10363-10367]"
    }, {
      "left" : "final Iterable<String> strings",
      "right" : "final Iterable<String> strings",
      "info" : "SingleVariableDeclaration[10368-10398]:SingleVariableDeclaration[10368-10398]"
    }, {
      "left" : "final String sep",
      "right" : "final String sep",
      "info" : "SingleVariableDeclaration[10400-10416]:SingleVariableDeclaration[10400-10416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10418-10725]:Block[10418-10725]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[10428-10473]:VariableDeclarationStatement[10428-10473]"
    }, {
      "left" : "final Iterator<String> si = strings.iterator();",
      "right" : "final Iterator<String> si = strings.iterator();",
      "info" : "VariableDeclarationStatement[10482-10529]:VariableDeclarationStatement[10482-10529]"
    }, {
      "left" : "if (si.hasNext())",
      "right" : "if (si.hasNext())",
      "info" : "IfStatement[10538-10601]:IfStatement[10538-10601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10556-10601]:Block[10556-10601]"
    }, {
      "left" : "sb.append(si.next());",
      "right" : "sb.append(si.next());",
      "info" : "ExpressionStatement[10570-10591]:ExpressionStatement[10570-10591]"
    }, {
      "left" : "while (si.hasNext())",
      "right" : "while (si.hasNext())",
      "info" : "WhileStatement[10610-10688]:WhileStatement[10610-10688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10631-10688]:Block[10631-10688]"
    }, {
      "left" : "sb.append(sep).append(si.next());",
      "right" : "sb.append(sep).append(si.next());",
      "info" : "ExpressionStatement[10645-10678]:ExpressionStatement[10645-10678]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[10698-10719]:ReturnStatement[10698-10719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11271-11277]:Modifier[11271-11277]"
    }, {
      "left" : "PhoneticEngine",
      "right" : "PhoneticEngine",
      "info" : "SimpleName[11278-11292]:SimpleName[11278-11292]"
    }, {
      "left" : "final NameType nameType",
      "right" : "final NameType nameType",
      "info" : "SingleVariableDeclaration[11293-11316]:SingleVariableDeclaration[11293-11316]"
    }, {
      "left" : "final RuleType ruleType",
      "right" : "final RuleType ruleType",
      "info" : "SingleVariableDeclaration[11318-11341]:SingleVariableDeclaration[11318-11341]"
    }, {
      "left" : "final boolean concat",
      "right" : "final boolean concat",
      "info" : "SingleVariableDeclaration[11343-11363]:SingleVariableDeclaration[11343-11363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11365-11436]:Block[11365-11436]"
    }, {
      "left" : "this(nameType, ruleType, concat, DEFAULT_MAX_PHONEMES);",
      "right" : "this(nameType, ruleType, concat, DEFAULT_MAX_PHONEMES);",
      "info" : "ConstructorInvocation[11375-11430]:ConstructorInvocation[11375-11430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11862-11868]:Modifier[11862-11868]"
    }, {
      "left" : "PhoneticEngine",
      "right" : "PhoneticEngine",
      "info" : "SimpleName[11869-11883]:SimpleName[11869-11883]"
    }, {
      "left" : "final NameType nameType",
      "right" : "final NameType nameType",
      "info" : "SingleVariableDeclaration[11884-11907]:SingleVariableDeclaration[11884-11907]"
    }, {
      "left" : "final RuleType ruleType",
      "right" : "final RuleType ruleType",
      "info" : "SingleVariableDeclaration[11909-11932]:SingleVariableDeclaration[11909-11932]"
    }, {
      "left" : "final boolean concat",
      "right" : "final boolean concat",
      "info" : "SingleVariableDeclaration[11934-11954]:SingleVariableDeclaration[11934-11954]"
    }, {
      "left" : "final int maxPhonemes",
      "right" : "final int maxPhonemes",
      "info" : "SingleVariableDeclaration[11982-12003]:SingleVariableDeclaration[11982-12003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12005-12337]:Block[12005-12337]"
    }, {
      "left" : "if (ruleType == RuleType.RULES)",
      "right" : "if (ruleType == RuleType.RULES)",
      "info" : "IfStatement[12015-12148]:IfStatement[12015-12148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12047-12148]:Block[12047-12148]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ruleType must not be \" + RuleType.RULES);",
      "right" : "throw new IllegalArgumentException(\"ruleType must not be \" + RuleType.RULES);",
      "info" : "ThrowStatement[12061-12138]:ThrowStatement[12061-12138]"
    }, {
      "left" : "this.nameType = nameType;",
      "right" : "this.nameType = nameType;",
      "info" : "ExpressionStatement[12157-12182]:ExpressionStatement[12157-12182]"
    }, {
      "left" : "this.ruleType = ruleType;",
      "right" : "this.ruleType = ruleType;",
      "info" : "ExpressionStatement[12191-12216]:ExpressionStatement[12191-12216]"
    }, {
      "left" : "this.concat = concat;",
      "right" : "this.concat = concat;",
      "info" : "ExpressionStatement[12225-12246]:ExpressionStatement[12225-12246]"
    }, {
      "left" : "this.lang = Lang.instance(nameType);",
      "right" : "this.lang = Lang.instance(nameType);",
      "info" : "ExpressionStatement[12255-12291]:ExpressionStatement[12255-12291]"
    }, {
      "left" : "this.maxPhonemes = maxPhonemes;",
      "right" : "this.maxPhonemes = maxPhonemes;",
      "info" : "ExpressionStatement[12300-12331]:ExpressionStatement[12300-12331]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12644-12651]:Modifier[12644-12651]"
    }, {
      "left" : "PhonemeBuilder",
      "right" : "PhonemeBuilder",
      "info" : "SimpleType[12652-12666]:SimpleType[12652-12666]"
    }, {
      "left" : "applyFinalRules",
      "right" : "applyFinalRules",
      "info" : "SimpleName[12667-12682]:SimpleName[12667-12682]"
    }, {
      "left" : "final PhonemeBuilder phonemeBuilder",
      "right" : "final PhonemeBuilder phonemeBuilder",
      "info" : "SingleVariableDeclaration[12683-12718]:SingleVariableDeclaration[12683-12718]"
    }, {
      "left" : "final Map<String, List<Rule>> finalRules",
      "right" : "final Map<String, List<Rule>> finalRules",
      "info" : "SingleVariableDeclaration[12763-12803]:SingleVariableDeclaration[12763-12803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12805-14338]:Block[12805-14837]"
    }, {
      "left" : "if (finalRules == null)",
      "right" : "if (finalRules == null)",
      "info" : "IfStatement[12815-12924]:IfStatement[12815-12924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12839-12924]:Block[12839-12924]"
    }, {
      "left" : "throw new NullPointerException(\"finalRules can not be null\");",
      "right" : "throw new NullPointerException(\"finalRules can not be null\");",
      "info" : "ThrowStatement[12853-12914]:ThrowStatement[12853-12914]"
    }, {
      "left" : "if (finalRules.isEmpty())",
      "right" : "if (finalRules.isEmpty())",
      "info" : "IfStatement[12933-13005]:IfStatement[12933-13005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12959-13005]:Block[12959-13005]"
    }, {
      "left" : "return phonemeBuilder;",
      "right" : "return phonemeBuilder;",
      "info" : "ReturnStatement[12973-12995]:ReturnStatement[12973-12995]"
    }, {
      "left" : "final Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>(Rule.Phoneme.COMPARATOR);",
      "right" : "final Map<Rule.Phoneme, Rule.Phoneme> phonemes =\n            new TreeMap<Rule.Phoneme, Rule.Phoneme>(Rule.Phoneme.COMPARATOR);",
      "info" : "VariableDeclarationStatement[13015-13101]:VariableDeclarationStatement[13015-13141]"
    }, {
      "left" : "for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes())",
      "right" : "for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes())",
      "info" : "EnhancedForStatement[13111-14286]:EnhancedForStatement[13151-14776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13175-14286]:Block[13215-14776]"
    }, {
      "left" : "PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());",
      "right" : "PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());",
      "info" : "VariableDeclarationStatement[13189-13262]:VariableDeclarationStatement[13229-13302]"
    }, {
      "left" : "final String phonemeText = phoneme.getPhonemeText().toString();",
      "right" : "final String phonemeText = phoneme.getPhonemeText().toString();",
      "info" : "VariableDeclarationStatement[13275-13338]:VariableDeclarationStatement[13315-13378]"
    }, {
      "left" : "for (int i = 0; i < phonemeText.length())",
      "right" : "for (int i = 0; i < phonemeText.length())",
      "info" : "ForStatement[13352-13928]:ForStatement[13392-13968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13395-13928]:Block[13435-13968]"
    }, {
      "left" : "final RulesApplication rulesApplication =\n                        new RulesApplication(finalRules, phonemeText, subBuilder, i, maxPhonemes).invoke();",
      "right" : "final RulesApplication rulesApplication =\n                        new RulesApplication(finalRules, phonemeText, subBuilder, i, maxPhonemes).invoke();",
      "info" : "VariableDeclarationStatement[13413-13562]:VariableDeclarationStatement[13453-13602]"
    }, {
      "left" : "final boolean found = rulesApplication.isFound();",
      "right" : "final boolean found = rulesApplication.isFound();",
      "info" : "VariableDeclarationStatement[13579-13628]:VariableDeclarationStatement[13619-13668]"
    }, {
      "left" : "subBuilder = rulesApplication.getPhonemeBuilder();",
      "right" : "subBuilder = rulesApplication.getPhonemeBuilder();",
      "info" : "ExpressionStatement[13645-13695]:ExpressionStatement[13685-13735]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[13713-13868]:IfStatement[13753-13908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13725-13868]:Block[13765-13908]"
    }, {
      "left" : "subBuilder.append(phonemeText.subSequence(i, i + 1));",
      "right" : "subBuilder.append(phonemeText.subSequence(i, i + 1));",
      "info" : "ExpressionStatement[13797-13850]:ExpressionStatement[13837-13890]"
    }, {
      "left" : "i = rulesApplication.getI();",
      "right" : "i = rulesApplication.getI();",
      "info" : "ExpressionStatement[13886-13914]:ExpressionStatement[13926-13954]"
    }, {
      "left" : "subBuilder.getPhonemes()",
      "right" : "subBuilder.getPhonemes()",
      "info" : "MethodInvocation[14250-14274]:MethodInvocation[14311-14335]"
    }, {
      "left" : "return new PhonemeBuilder(phonemes);",
      "right" : "return new PhonemeBuilder(phonemes.keySet());",
      "info" : "ReturnStatement[14296-14332]:ReturnStatement[14786-14831]"
    }, {
      "left" : "phonemes",
      "right" : "phonemes",
      "info" : "SimpleName[14322-14330]:SimpleName[14812-14820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14523-14529]:Modifier[15022-15028]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14530-14536]:SimpleType[15029-15035]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[14537-14543]:SimpleName[15036-15042]"
    }, {
      "left" : "final String input",
      "right" : "final String input",
      "info" : "SingleVariableDeclaration[14544-14562]:SingleVariableDeclaration[15043-15061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14564-14697]:Block[15063-15196]"
    }, {
      "left" : "final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);",
      "right" : "final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);",
      "info" : "VariableDeclarationStatement[14574-14648]:VariableDeclarationStatement[15073-15147]"
    }, {
      "left" : "return encode(input, languageSet);",
      "right" : "return encode(input, languageSet);",
      "info" : "ReturnStatement[14657-14691]:ReturnStatement[15156-15190]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15114-15120]:Modifier[15613-15619]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15121-15127]:SimpleType[15620-15626]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[15128-15134]:SimpleName[15627-15633]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[15135-15147]:SingleVariableDeclaration[15634-15646]"
    }, {
      "left" : "final Languages.LanguageSet languageSet",
      "right" : "final Languages.LanguageSet languageSet",
      "info" : "SingleVariableDeclaration[15149-15188]:SingleVariableDeclaration[15648-15687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15190-19034]:Block[15689-19533]"
    }, {
      "left" : "final Map<String, List<Rule>> rules = Rule.getInstanceMap(this.nameType, RuleType.RULES, languageSet);",
      "right" : "final Map<String, List<Rule>> rules = Rule.getInstanceMap(this.nameType, RuleType.RULES, languageSet);",
      "info" : "VariableDeclarationStatement[15200-15302]:VariableDeclarationStatement[15699-15801]"
    }, {
      "left" : "final Map<String, List<Rule>> finalRules1 = Rule.getInstanceMap(this.nameType, this.ruleType, \"common\");",
      "right" : "final Map<String, List<Rule>> finalRules1 = Rule.getInstanceMap(this.nameType, this.ruleType, \"common\");",
      "info" : "VariableDeclarationStatement[15363-15467]:VariableDeclarationStatement[15862-15966]"
    }, {
      "left" : "final Map<String, List<Rule>> finalRules2 = Rule.getInstanceMap(this.nameType, this.ruleType, languageSet);",
      "right" : "final Map<String, List<Rule>> finalRules2 = Rule.getInstanceMap(this.nameType, this.ruleType, languageSet);",
      "info" : "VariableDeclarationStatement[15588-15695]:VariableDeclarationStatement[16087-16194]"
    }, {
      "left" : "input = input.toLowerCase(Locale.ENGLISH).replace('-', ' ').trim();",
      "right" : "input = input.toLowerCase(Locale.ENGLISH).replace('-', ' ').trim();",
      "info" : "ExpressionStatement[15785-15852]:ExpressionStatement[16284-16351]"
    }, {
      "left" : "if (this.nameType == NameType.GENERIC)",
      "right" : "if (this.nameType == NameType.GENERIC)",
      "info" : "IfStatement[15862-16759]:IfStatement[16361-17258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15901-16759]:Block[16400-17258]"
    }, {
      "left" : "if (input.length() >= 2 && input.substring(0, 2).equals(\"d'\"))",
      "right" : "if (input.length() >= 2 && input.substring(0, 2).equals(\"d'\"))",
      "info" : "IfStatement[15915-16208]:IfStatement[16414-16707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15978-16208]:Block[16477-16707]"
    }, {
      "left" : "final String remainder = input.substring(2);",
      "right" : "final String remainder = input.substring(2);",
      "info" : "VariableDeclarationStatement[16012-16056]:VariableDeclarationStatement[16511-16555]"
    }, {
      "left" : "final String combined = \"d\" + remainder;",
      "right" : "final String combined = \"d\" + remainder;",
      "info" : "VariableDeclarationStatement[16073-16113]:VariableDeclarationStatement[16572-16612]"
    }, {
      "left" : "return \"(\" + encode(remainder) + \")-(\" + encode(combined) + \")\";",
      "right" : "return \"(\" + encode(remainder) + \")-(\" + encode(combined) + \")\";",
      "info" : "ReturnStatement[16130-16194]:ReturnStatement[16629-16693]"
    }, {
      "left" : "for (final String l : NAME_PREFIXES.get(this.nameType))",
      "right" : "for (final String l : NAME_PREFIXES.get(this.nameType))",
      "info" : "EnhancedForStatement[16221-16749]:EnhancedForStatement[16720-17248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16277-16749]:Block[16776-17248]"
    }, {
      "left" : "if (input.startsWith(l + \" \"))",
      "right" : "if (input.startsWith(l + \" \"))",
      "info" : "IfStatement[16338-16735]:IfStatement[16837-17234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16369-16735]:Block[16868-17234]"
    }, {
      "left" : "final String remainder = input.substring(l.length() + 1);",
      "right" : "final String remainder = input.substring(l.length() + 1);",
      "info" : "VariableDeclarationStatement[16453-16510]:VariableDeclarationStatement[16952-17009]"
    }, {
      "left" : "final String combined = l + remainder;",
      "right" : "final String combined = l + remainder;",
      "info" : "VariableDeclarationStatement[16559-16597]:VariableDeclarationStatement[17058-17096]"
    }, {
      "left" : "return \"(\" + encode(remainder) + \")-(\" + encode(combined) + \")\";",
      "right" : "return \"(\" + encode(remainder) + \")-(\" + encode(combined) + \")\";",
      "info" : "ReturnStatement[16653-16717]:ReturnStatement[17152-17216]"
    }, {
      "left" : "final List<String> words = Arrays.asList(input.split(\"\\\\s+\"));",
      "right" : "final List<String> words = Arrays.asList(input.split(\"\\\\s+\"));",
      "info" : "VariableDeclarationStatement[16769-16831]:VariableDeclarationStatement[17268-17330]"
    }, {
      "left" : "final List<String> words2 = new ArrayList<String>();",
      "right" : "final List<String> words2 = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[16840-16892]:VariableDeclarationStatement[17339-17391]"
    }, {
      "left" : "switch (this.nameType) {\n        case SEPHARDIC:\n            for (final String aWord : words) {\n                final String[] parts = aWord.split(\"'\");\n                final String lastPart = parts[parts.length - 1];\n                words2.add(lastPart);\n            }\n            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n            break;\n        case ASHKENAZI:\n            words2.addAll(words);\n            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n            break;\n        case GENERIC:\n            words2.addAll(words);\n            break;\n        default:\n            throw new IllegalStateException(\"Unreachable case: \" + this.nameType);\n        }",
      "right" : "switch (this.nameType) {\n        case SEPHARDIC:\n            for (final String aWord : words) {\n                final String[] parts = aWord.split(\"'\");\n                final String lastPart = parts[parts.length - 1];\n                words2.add(lastPart);\n            }\n            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n            break;\n        case ASHKENAZI:\n            words2.addAll(words);\n            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n            break;\n        case GENERIC:\n            words2.addAll(words);\n            break;\n        default:\n            throw new IllegalStateException(\"Unreachable case: \" + this.nameType);\n        }",
      "info" : "SwitchStatement[16977-17655]:SwitchStatement[17476-18154]"
    }, {
      "left" : "case SEPHARDIC:",
      "right" : "case SEPHARDIC:",
      "info" : "SwitchCase[17010-17025]:SwitchCase[17509-17524]"
    }, {
      "left" : "for (final String aWord : words)",
      "right" : "for (final String aWord : words)",
      "info" : "EnhancedForStatement[17038-17246]:EnhancedForStatement[17537-17745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17071-17246]:Block[17570-17745]"
    }, {
      "left" : "final String[] parts = aWord.split(\"'\");",
      "right" : "final String[] parts = aWord.split(\"'\");",
      "info" : "VariableDeclarationStatement[17089-17129]:VariableDeclarationStatement[17588-17628]"
    }, {
      "left" : "final String lastPart = parts[parts.length - 1];",
      "right" : "final String lastPart = parts[parts.length - 1];",
      "info" : "VariableDeclarationStatement[17146-17194]:VariableDeclarationStatement[17645-17693]"
    }, {
      "left" : "words2.add(lastPart);",
      "right" : "words2.add(lastPart);",
      "info" : "ExpressionStatement[17211-17232]:ExpressionStatement[17710-17731]"
    }, {
      "left" : "words2.removeAll(NAME_PREFIXES.get(this.nameType));",
      "right" : "words2.removeAll(NAME_PREFIXES.get(this.nameType));",
      "info" : "ExpressionStatement[17259-17310]:ExpressionStatement[17758-17809]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17323-17329]:BreakStatement[17822-17828]"
    }, {
      "left" : "case ASHKENAZI:",
      "right" : "case ASHKENAZI:",
      "info" : "SwitchCase[17338-17353]:SwitchCase[17837-17852]"
    }, {
      "left" : "words2.addAll(words);",
      "right" : "words2.addAll(words);",
      "info" : "ExpressionStatement[17366-17387]:ExpressionStatement[17865-17886]"
    }, {
      "left" : "words2.removeAll(NAME_PREFIXES.get(this.nameType));",
      "right" : "words2.removeAll(NAME_PREFIXES.get(this.nameType));",
      "info" : "ExpressionStatement[17400-17451]:ExpressionStatement[17899-17950]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17464-17470]:BreakStatement[17963-17969]"
    }, {
      "left" : "case GENERIC:",
      "right" : "case GENERIC:",
      "info" : "SwitchCase[17479-17492]:SwitchCase[17978-17991]"
    }, {
      "left" : "words2.addAll(words);",
      "right" : "words2.addAll(words);",
      "info" : "ExpressionStatement[17505-17526]:ExpressionStatement[18004-18025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17539-17545]:BreakStatement[18038-18044]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17554-17562]:SwitchCase[18053-18061]"
    }, {
      "left" : "throw new IllegalStateException(\"Unreachable case: \" + this.nameType);",
      "right" : "throw new IllegalStateException(\"Unreachable case: \" + this.nameType);",
      "info" : "ThrowStatement[17575-17645]:ThrowStatement[18074-18144]"
    }, {
      "left" : "if (this.concat)",
      "right" : "if (this.concat)",
      "info" : "IfStatement[17665-18283]:IfStatement[18164-18782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17682-17767]:Block[18181-18266]"
    }, {
      "left" : "input = join(words2, \" \");",
      "right" : "input = join(words2, \" \");",
      "info" : "ExpressionStatement[17731-17757]:ExpressionStatement[18230-18256]"
    }, {
      "left" : "if (words2.size() == 1)",
      "right" : "if (words2.size() == 1)",
      "info" : "IfStatement[17773-18283]:IfStatement[18272-18782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17797-17890]:Block[18296-18389]"
    }, {
      "left" : "input = words.iterator().next();",
      "right" : "input = words.iterator().next();",
      "info" : "ExpressionStatement[17848-17880]:ExpressionStatement[18347-18379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17896-18283]:Block[18395-18782]"
    }, {
      "left" : "final StringBuilder result = new StringBuilder();",
      "right" : "final StringBuilder result = new StringBuilder();",
      "info" : "VariableDeclarationStatement[18009-18058]:VariableDeclarationStatement[18508-18557]"
    }, {
      "left" : "for (final String word : words2)",
      "right" : "for (final String word : words2)",
      "info" : "EnhancedForStatement[18071-18176]:EnhancedForStatement[18570-18675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18104-18176]:Block[18603-18675]"
    }, {
      "left" : "result.append(\"-\").append(encode(word));",
      "right" : "result.append(\"-\").append(encode(word));",
      "info" : "ExpressionStatement[18122-18162]:ExpressionStatement[18621-18661]"
    }, {
      "left" : "return result.substring(1);",
      "right" : "return result.substring(1);",
      "info" : "ReturnStatement[18246-18273]:ReturnStatement[18745-18772]"
    }, {
      "left" : "PhonemeBuilder phonemeBuilder = PhonemeBuilder.empty(languageSet);",
      "right" : "PhonemeBuilder phonemeBuilder = PhonemeBuilder.empty(languageSet);",
      "info" : "VariableDeclarationStatement[18293-18359]:VariableDeclarationStatement[18792-18858]"
    }, {
      "left" : "for (int i = 0; i < input.length())",
      "right" : "for (int i = 0; i < input.length())",
      "info" : "ForStatement[18453-18760]:ForStatement[18952-19259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18490-18760]:Block[18989-19259]"
    }, {
      "left" : "final RulesApplication rulesApplication =\n                    new RulesApplication(rules, input, phonemeBuilder, i, maxPhonemes).invoke();",
      "right" : "final RulesApplication rulesApplication =\n                    new RulesApplication(rules, input, phonemeBuilder, i, maxPhonemes).invoke();",
      "info" : "VariableDeclarationStatement[18504-18642]:VariableDeclarationStatement[19003-19141]"
    }, {
      "left" : "i = rulesApplication.getI();",
      "right" : "i = rulesApplication.getI();",
      "info" : "ExpressionStatement[18655-18683]:ExpressionStatement[19154-19182]"
    }, {
      "left" : "phonemeBuilder = rulesApplication.getPhonemeBuilder();",
      "right" : "phonemeBuilder = rulesApplication.getPhonemeBuilder();",
      "info" : "ExpressionStatement[18696-18750]:ExpressionStatement[19195-19249]"
    }, {
      "left" : "phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);",
      "right" : "phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);",
      "info" : "ExpressionStatement[18805-18867]:ExpressionStatement[19304-19366]"
    }, {
      "left" : "phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);",
      "right" : "phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);",
      "info" : "ExpressionStatement[18921-18983]:ExpressionStatement[19420-19482]"
    }, {
      "left" : "return phonemeBuilder.makeString();",
      "right" : "return phonemeBuilder.makeString();",
      "info" : "ReturnStatement[18993-19028]:ReturnStatement[19492-19527]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19151-19157]:Modifier[19650-19656]"
    }, {
      "left" : "Lang",
      "right" : "Lang",
      "info" : "SimpleType[19158-19162]:SimpleType[19657-19661]"
    }, {
      "left" : "getLang",
      "right" : "getLang",
      "info" : "SimpleName[19163-19170]:SimpleName[19662-19669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19173-19206]:Block[19672-19705]"
    }, {
      "left" : "return this.lang;",
      "right" : "return this.lang;",
      "info" : "ReturnStatement[19183-19200]:ReturnStatement[19682-19699]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19307-19313]:Modifier[19806-19812]"
    }, {
      "left" : "NameType",
      "right" : "NameType",
      "info" : "SimpleType[19314-19322]:SimpleType[19813-19821]"
    }, {
      "left" : "getNameType",
      "right" : "getNameType",
      "info" : "SimpleName[19323-19334]:SimpleName[19822-19833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19337-19374]:Block[19836-19873]"
    }, {
      "left" : "return this.nameType;",
      "right" : "return this.nameType;",
      "info" : "ReturnStatement[19347-19368]:ReturnStatement[19846-19867]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19475-19481]:Modifier[19974-19980]"
    }, {
      "left" : "RuleType",
      "right" : "RuleType",
      "info" : "SimpleType[19482-19490]:SimpleType[19981-19989]"
    }, {
      "left" : "getRuleType",
      "right" : "getRuleType",
      "info" : "SimpleName[19491-19502]:SimpleName[19990-20001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19505-19542]:Block[20004-20041]"
    }, {
      "left" : "return this.ruleType;",
      "right" : "return this.ruleType;",
      "info" : "ReturnStatement[19515-19536]:ReturnStatement[20014-20035]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19757-19763]:Modifier[20256-20262]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19764-19771]:PrimitiveType[20263-20270]"
    }, {
      "left" : "isConcat",
      "right" : "isConcat",
      "info" : "SimpleName[19772-19780]:SimpleName[20271-20279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19783-19818]:Block[20282-20317]"
    }, {
      "left" : "return this.concat;",
      "right" : "return this.concat;",
      "info" : "ReturnStatement[19793-19812]:ReturnStatement[20292-20311]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19999-20005]:Modifier[20498-20504]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20006-20009]:PrimitiveType[20505-20508]"
    }, {
      "left" : "getMaxPhonemes",
      "right" : "getMaxPhonemes",
      "info" : "SimpleName[20010-20024]:SimpleName[20509-20523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20027-20067]:Block[20526-20566]"
    }, {
      "left" : "return this.maxPhonemes;",
      "right" : "return this.maxPhonemes;",
      "info" : "ReturnStatement[20037-20061]:ReturnStatement[20536-20560]"
    } ]
  },
  "interFileMappings" : { }
}