{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "TypeDeclaration[898-24209]:TypeDeclaration[898-24367]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[1403-1766]:MethodDeclaration[1403-1766]"
    }, {
      "left" : "public static int stringToInt(String str)",
      "right" : "public static int stringToInt(String str)",
      "info" : "MethodDeclaration[1852-2229]:MethodDeclaration[1852-2229]"
    }, {
      "left" : "public static int stringToInt(String str, int defaultValue)",
      "right" : "public static int stringToInt(String str, int defaultValue)",
      "info" : "MethodDeclaration[2235-2769]:MethodDeclaration[2235-2769]"
    }, {
      "left" : "public static Number createNumber(String val) throws NumberFormatException",
      "right" : "public static Number createNumber(String val) throws NumberFormatException",
      "info" : "MethodDeclaration[4016-10696]:MethodDeclaration[4016-10854]"
    }, {
      "left" : "private static boolean isAllZeros(String s)",
      "right" : "private static boolean isAllZeros(String s)",
      "info" : "MethodDeclaration[10702-11251]:MethodDeclaration[10860-11409]"
    }, {
      "left" : "public static Float createFloat(String val)",
      "right" : "public static Float createFloat(String val)",
      "info" : "MethodDeclaration[11337-11682]:MethodDeclaration[11495-11840]"
    }, {
      "left" : "public static Double createDouble(String val)",
      "right" : "public static Double createDouble(String val)",
      "info" : "MethodDeclaration[11688-12038]:MethodDeclaration[11846-12196]"
    }, {
      "left" : "public static Integer createInteger(String val)",
      "right" : "public static Integer createInteger(String val)",
      "info" : "MethodDeclaration[12044-12508]:MethodDeclaration[12202-12666]"
    }, {
      "left" : "public static Long createLong(String val)",
      "right" : "public static Long createLong(String val)",
      "info" : "MethodDeclaration[12514-12854]:MethodDeclaration[12672-13012]"
    }, {
      "left" : "public static BigInteger createBigInteger(String val)",
      "right" : "public static BigInteger createBigInteger(String val)",
      "info" : "MethodDeclaration[12860-13254]:MethodDeclaration[13018-13412]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(String val)",
      "right" : "public static BigDecimal createBigDecimal(String val)",
      "info" : "MethodDeclaration[13260-13654]:MethodDeclaration[13418-13812]"
    }, {
      "left" : "public static long minimum(long a, long b, long c)",
      "right" : "public static long minimum(long a, long b, long c)",
      "info" : "MethodDeclaration[13740-14124]:MethodDeclaration[13898-14282]"
    }, {
      "left" : "public static int minimum(int a, int b, int c)",
      "right" : "public static int minimum(int a, int b, int c)",
      "info" : "MethodDeclaration[14130-14509]:MethodDeclaration[14288-14667]"
    }, {
      "left" : "public static long maximum(long a, long b, long c)",
      "right" : "public static long maximum(long a, long b, long c)",
      "info" : "MethodDeclaration[14515-14898]:MethodDeclaration[14673-15056]"
    }, {
      "left" : "public static int maximum(int a, int b, int c)",
      "right" : "public static int maximum(int a, int b, int c)",
      "info" : "MethodDeclaration[14904-15282]:MethodDeclaration[15062-15440]"
    }, {
      "left" : "public static int compare(double lhs, double rhs)",
      "right" : "public static int compare(double lhs, double rhs)",
      "info" : "MethodDeclaration[15368-17449]:MethodDeclaration[15526-17607]"
    }, {
      "left" : "public static int compare(float lhs, float rhs)",
      "right" : "public static int compare(float lhs, float rhs)",
      "info" : "MethodDeclaration[17459-19448]:MethodDeclaration[17617-19606]"
    }, {
      "left" : "public static boolean isDigits(String str)",
      "right" : "public static boolean isDigits(String str)",
      "info" : "MethodDeclaration[19538-20185]:MethodDeclaration[19696-20343]"
    }, {
      "left" : "public static boolean isNumber(String str)",
      "right" : "public static boolean isNumber(String str)",
      "info" : "MethodDeclaration[20191-24207]:MethodDeclaration[20349-24365]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1744-1766]:Block[1744-1766]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1752-1760]:SuperConstructorInvocation[1752-1760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2186-2229]:Block[2186-2229]"
    }, {
      "left" : "return stringToInt(str, 0);",
      "right" : "return stringToInt(str, 0);",
      "info" : "ReturnStatement[2196-2223]:ReturnStatement[2196-2223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2617-2769]:Block[2617-2769]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2627-2763]:TryStatement[2627-2763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2631-2684]:Block[2631-2684]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[2645-2674]:ReturnStatement[2645-2674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2719-2763]:Block[2719-2763]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[2733-2753]:ReturnStatement[2733-2753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5094-10696]:Block[5094-10854]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[5104-5157]:IfStatement[5104-5157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5121-5157]:Block[5121-5157]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5135-5147]:ReturnStatement[5135-5147]"
    }, {
      "left" : "if (val.length() == 0)",
      "right" : "if (val.length() == 0)",
      "info" : "IfStatement[5166-5276]:IfStatement[5166-5276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5189-5276]:Block[5189-5276]"
    }, {
      "left" : "throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");",
      "right" : "throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");",
      "info" : "ThrowStatement[5203-5266]:ThrowStatement[5203-5266]"
    }, {
      "left" : "if (val.startsWith(\"--\"))",
      "right" : "if (val.startsWith(\"--\"))",
      "info" : "IfStatement[5285-5594]:IfStatement[5443-5752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5311-5594]:Block[5469-5752]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5572-5584]:ReturnStatement[5730-5742]"
    }, {
      "left" : "if (val.startsWith(\"0x\") || val.startsWith(\"-0x\"))",
      "right" : "if (val.startsWith(\"0x\") || val.startsWith(\"-0x\"))",
      "info" : "IfStatement[5603-5704]:IfStatement[5761-5862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5654-5704]:Block[5812-5862]"
    }, {
      "left" : "return createInteger(val);",
      "right" : "return createInteger(val);",
      "info" : "ReturnStatement[5668-5694]:ReturnStatement[5826-5852]"
    }, {
      "left" : "char lastChar = val.charAt(val.length() - 1);",
      "right" : "char lastChar = val.charAt(val.length() - 1);",
      "info" : "VariableDeclarationStatement[5716-5761]:VariableDeclarationStatement[5874-5919]"
    }, {
      "left" : "String mant;",
      "right" : "String mant;",
      "info" : "VariableDeclarationStatement[5770-5782]:VariableDeclarationStatement[5928-5940]"
    }, {
      "left" : "String dec;",
      "right" : "String dec;",
      "info" : "VariableDeclarationStatement[5791-5802]:VariableDeclarationStatement[5949-5960]"
    }, {
      "left" : "String exp;",
      "right" : "String exp;",
      "info" : "VariableDeclarationStatement[5811-5822]:VariableDeclarationStatement[5969-5980]"
    }, {
      "left" : "int decPos = val.indexOf('.');",
      "right" : "int decPos = val.indexOf('.');",
      "info" : "VariableDeclarationStatement[5831-5861]:VariableDeclarationStatement[5989-6019]"
    }, {
      "left" : "int expPos = val.indexOf('e') + val.indexOf('E') + 1;",
      "right" : "int expPos = val.indexOf('e') + val.indexOf('E') + 1;",
      "info" : "VariableDeclarationStatement[5870-5923]:VariableDeclarationStatement[6028-6081]"
    }, {
      "left" : "if (decPos > -1)",
      "right" : "if (decPos > -1)",
      "info" : "IfStatement[5933-6506]:IfStatement[6091-6664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5950-6322]:Block[6108-6480]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[5965-6267]:IfStatement[6123-6425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5982-6197]:Block[6140-6355]"
    }, {
      "left" : "if (expPos < decPos)",
      "right" : "if (expPos < decPos)",
      "info" : "IfStatement[6000-6126]:IfStatement[6158-6284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6021-6126]:Block[6179-6284]"
    }, {
      "left" : "throw new NumberFormatException(val + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(val + \" is not a valid number.\");",
      "info" : "ThrowStatement[6043-6108]:ThrowStatement[6201-6266]"
    }, {
      "left" : "dec = val.substring(decPos + 1, expPos);",
      "right" : "dec = val.substring(decPos + 1, expPos);",
      "info" : "ExpressionStatement[6143-6183]:ExpressionStatement[6301-6341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6203-6267]:Block[6361-6425]"
    }, {
      "left" : "dec = val.substring(decPos + 1);",
      "right" : "dec = val.substring(decPos + 1);",
      "info" : "ExpressionStatement[6221-6253]:ExpressionStatement[6379-6411]"
    }, {
      "left" : "mant = val.substring(0, decPos);",
      "right" : "mant = val.substring(0, decPos);",
      "info" : "ExpressionStatement[6280-6312]:ExpressionStatement[6438-6470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6328-6506]:Block[6486-6664]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[6342-6472]:IfStatement[6500-6630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6359-6423]:Block[6517-6581]"
    }, {
      "left" : "mant = val.substring(0, expPos);",
      "right" : "mant = val.substring(0, expPos);",
      "info" : "ExpressionStatement[6377-6409]:ExpressionStatement[6535-6567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6429-6472]:Block[6587-6630]"
    }, {
      "left" : "mant = val;",
      "right" : "mant = val;",
      "info" : "ExpressionStatement[6447-6458]:ExpressionStatement[6605-6616]"
    }, {
      "left" : "dec = null;",
      "right" : "dec = null;",
      "info" : "ExpressionStatement[6485-6496]:ExpressionStatement[6643-6654]"
    }, {
      "left" : "if (!Character.isDigit(lastChar))",
      "right" : "if (!Character.isDigit(lastChar))",
      "info" : "IfStatement[6515-10690]:IfStatement[6673-10848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6549-9034]:Block[6707-9192]"
    }, {
      "left" : "if (expPos > -1 && expPos < val.length() - 1)",
      "right" : "if (expPos > -1 && expPos < val.length() - 1)",
      "info" : "IfStatement[6563-6740]:IfStatement[6721-6898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6609-6691]:Block[6767-6849]"
    }, {
      "left" : "exp = val.substring(expPos + 1, val.length() - 1);",
      "right" : "exp = val.substring(expPos + 1, val.length() - 1);",
      "info" : "ExpressionStatement[6627-6677]:ExpressionStatement[6785-6835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-6740]:Block[6855-6898]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[6715-6726]:ExpressionStatement[6873-6884]"
    }, {
      "left" : "String numeric = val.substring(0, val.length() - 1);",
      "right" : "String numeric = val.substring(0, val.length() - 1);",
      "info" : "VariableDeclarationStatement[6796-6848]:VariableDeclarationStatement[6954-7006]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[6861-6916]:VariableDeclarationStatement[7019-7074]"
    }, {
      "left" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // empty catch\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // empty catch\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }",
      "right" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // empty catch\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // empty catch\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }",
      "info" : "SwitchStatement[6929-9024]:SwitchStatement[7087-9182]"
    }, {
      "left" : "case 'l' :",
      "right" : "case 'l' :",
      "info" : "SwitchCase[6965-6975]:SwitchCase[7123-7133]"
    }, {
      "left" : "case 'L' :",
      "right" : "case 'L' :",
      "info" : "SwitchCase[6992-7002]:SwitchCase[7150-7160]"
    }, {
      "left" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "right" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "info" : "IfStatement[7023-7493]:IfStatement[7181-7651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7188-7493]:Block[7346-7651]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7214-7412]:TryStatement[7372-7570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7218-7301]:Block[7376-7459]"
    }, {
      "left" : "return createLong(numeric);",
      "right" : "return createLong(numeric);",
      "info" : "ReturnStatement[7248-7275]:ReturnStatement[7406-7433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7336-7412]:Block[7494-7570]"
    }, {
      "left" : "return createBigInteger(numeric);",
      "right" : "return createBigInteger(numeric);",
      "info" : "ReturnStatement[7437-7470]:ReturnStatement[7595-7628]"
    }, {
      "left" : "throw new NumberFormatException(val + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(val + \" is not a valid number.\");",
      "info" : "ThrowStatement[7514-7579]:ThrowStatement[7672-7737]"
    }, {
      "left" : "case 'f' :",
      "right" : "case 'f' :",
      "info" : "SwitchCase[7596-7606]:SwitchCase[7754-7764]"
    }, {
      "left" : "case 'F' :",
      "right" : "case 'F' :",
      "info" : "SwitchCase[7623-7633]:SwitchCase[7781-7791]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7654-8203]:TryStatement[7812-8361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7658-8098]:Block[7816-8256]"
    }, {
      "left" : "Float f = NumberUtils.createFloat(numeric);",
      "right" : "Float f = NumberUtils.createFloat(numeric);",
      "info" : "VariableDeclarationStatement[7684-7727]:VariableDeclarationStatement[7842-7885]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[7752-8075]:IfStatement[7910-8233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7816-8075]:Block[7974-8233]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[8040-8049]:ReturnStatement[8198-8207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8131-8203]:Block[8289-8361]"
    }, {
      "left" : "case 'd' :",
      "right" : "case 'd' :",
      "info" : "SwitchCase[8255-8265]:SwitchCase[8413-8423]"
    }, {
      "left" : "case 'D' :",
      "right" : "case 'D' :",
      "info" : "SwitchCase[8282-8292]:SwitchCase[8440-8450]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8313-8661]:TryStatement[8471-8819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8317-8564]:Block[8475-8722]"
    }, {
      "left" : "Double d = NumberUtils.createDouble(numeric);",
      "right" : "Double d = NumberUtils.createDouble(numeric);",
      "info" : "VariableDeclarationStatement[8343-8388]:VariableDeclarationStatement[8501-8546]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[8413-8542]:IfStatement[8571-8700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8477-8542]:Block[8635-8700]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[8507-8516]:ReturnStatement[8665-8674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8599-8661]:Block[8757-8819]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8682-8862]:TryStatement[8840-9020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8686-8767]:Block[8844-8925]"
    }, {
      "left" : "return createBigDecimal(numeric);",
      "right" : "return createBigDecimal(numeric);",
      "info" : "ReturnStatement[8712-8745]:ReturnStatement[8870-8903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8800-8862]:Block[8958-9020]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[8914-8923]:SwitchCase[9072-9081]"
    }, {
      "left" : "throw new NumberFormatException(val + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(val + \" is not a valid number.\");",
      "info" : "ThrowStatement[8944-9009]:ThrowStatement[9102-9167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9040-10690]:Block[9198-10848]"
    }, {
      "left" : "if (expPos > -1 && expPos < val.length() - 1)",
      "right" : "if (expPos > -1 && expPos < val.length() - 1)",
      "info" : "IfStatement[9175-9348]:IfStatement[9333-9506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9221-9299]:Block[9379-9457]"
    }, {
      "left" : "exp = val.substring(expPos + 1, val.length());",
      "right" : "exp = val.substring(expPos + 1, val.length());",
      "info" : "ExpressionStatement[9239-9285]:ExpressionStatement[9397-9443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9305-9348]:Block[9463-9506]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[9323-9334]:ExpressionStatement[9481-9492]"
    }, {
      "left" : "if (dec == null && exp == null)",
      "right" : "if (dec == null && exp == null)",
      "info" : "IfStatement[9361-10679]:IfStatement[9519-10837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9393-9849]:Block[9551-10007]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9456-9615]:TryStatement[9614-9773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9460-9526]:Block[9618-9684]"
    }, {
      "left" : "return createInteger(val);",
      "right" : "return createInteger(val);",
      "info" : "ReturnStatement[9482-9508]:ReturnStatement[9640-9666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9561-9615]:Block[9719-9773]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9632-9788]:TryStatement[9790-9946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9636-9699]:Block[9794-9857]"
    }, {
      "left" : "return createLong(val);",
      "right" : "return createLong(val);",
      "info" : "ReturnStatement[9658-9681]:ReturnStatement[9816-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9734-9788]:Block[9892-9946]"
    }, {
      "left" : "return createBigInteger(val);",
      "right" : "return createBigInteger(val);",
      "info" : "ReturnStatement[9805-9834]:ReturnStatement[9963-9992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9855-10679]:Block[10013-10837]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[9921-9976]:VariableDeclarationStatement[10079-10134]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9993-10295]:TryStatement[10151-10453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9997-10206]:Block[10155-10364]"
    }, {
      "left" : "Float f = createFloat(val);",
      "right" : "Float f = createFloat(val);",
      "info" : "VariableDeclarationStatement[10019-10046]:VariableDeclarationStatement[10177-10204]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[10067-10188]:IfStatement[10225-10346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10131-10188]:Block[10289-10346]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[10157-10166]:ReturnStatement[10315-10324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10241-10295]:Block[10399-10453]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10312-10617]:TryStatement[10470-10775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10316-10528]:Block[10474-10686]"
    }, {
      "left" : "Double d = createDouble(val);",
      "right" : "Double d = createDouble(val);",
      "info" : "VariableDeclarationStatement[10338-10367]:VariableDeclarationStatement[10496-10525]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[10388-10510]:IfStatement[10546-10668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10453-10510]:Block[10611-10668]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[10479-10488]:ReturnStatement[10637-10646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10563-10617]:Block[10721-10775]"
    }, {
      "left" : "return createBigDecimal(val);",
      "right" : "return createBigDecimal(val);",
      "info" : "ReturnStatement[10635-10664]:ReturnStatement[10793-10822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11009-11251]:Block[11167-11409]"
    }, {
      "left" : "if (s == null)",
      "right" : "if (s == null)",
      "info" : "IfStatement[11019-11070]:IfStatement[11177-11228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11034-11070]:Block[11192-11228]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11048-11060]:ReturnStatement[11206-11218]"
    }, {
      "left" : "for (int i = s.length() - 1; i >= 0; i--)",
      "right" : "for (int i = s.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[11079-11214]:ForStatement[11237-11372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11121-11214]:Block[11279-11372]"
    }, {
      "left" : "if (s.charAt(i) != '0')",
      "right" : "if (s.charAt(i) != '0')",
      "info" : "IfStatement[11135-11204]:IfStatement[11293-11362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11159-11204]:Block[11317-11362]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11177-11190]:ReturnStatement[11335-11348]"
    }, {
      "left" : "return s.length() > 0;",
      "right" : "return s.length() > 0;",
      "info" : "ReturnStatement[11223-11245]:ReturnStatement[11381-11403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11640-11682]:Block[11798-11840]"
    }, {
      "left" : "return Float.valueOf(val);",
      "right" : "return Float.valueOf(val);",
      "info" : "ReturnStatement[11650-11676]:ReturnStatement[11808-11834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11995-12038]:Block[12153-12196]"
    }, {
      "left" : "return Double.valueOf(val);",
      "right" : "return Double.valueOf(val);",
      "info" : "ReturnStatement[12005-12032]:ReturnStatement[12163-12190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12396-12508]:Block[12554-12666]"
    }, {
      "left" : "return Integer.decode(val);",
      "right" : "return Integer.decode(val);",
      "info" : "ReturnStatement[12475-12502]:ReturnStatement[12633-12660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12813-12854]:Block[12971-13012]"
    }, {
      "left" : "return Long.valueOf(val);",
      "right" : "return Long.valueOf(val);",
      "info" : "ReturnStatement[12823-12848]:ReturnStatement[12981-13006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13183-13254]:Block[13341-13412]"
    }, {
      "left" : "BigInteger bi = new BigInteger(val);",
      "right" : "BigInteger bi = new BigInteger(val);",
      "info" : "VariableDeclarationStatement[13193-13229]:VariableDeclarationStatement[13351-13387]"
    }, {
      "left" : "return bi;",
      "right" : "return bi;",
      "info" : "ReturnStatement[13238-13248]:ReturnStatement[13396-13406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13583-13654]:Block[13741-13812]"
    }, {
      "left" : "BigDecimal bd = new BigDecimal(val);",
      "right" : "BigDecimal bd = new BigDecimal(val);",
      "info" : "VariableDeclarationStatement[13593-13629]:VariableDeclarationStatement[13751-13787]"
    }, {
      "left" : "return bd;",
      "right" : "return bd;",
      "info" : "ReturnStatement[13638-13648]:ReturnStatement[13796-13806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13999-14124]:Block[14157-14282]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[14009-14050]:IfStatement[14167-14208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14020-14050]:Block[14178-14208]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[14034-14040]:ExpressionStatement[14192-14198]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[14059-14100]:IfStatement[14217-14258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14070-14100]:Block[14228-14258]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[14084-14090]:ExpressionStatement[14242-14248]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[14109-14118]:ReturnStatement[14267-14276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14384-14509]:Block[14542-14667]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[14394-14435]:IfStatement[14552-14593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14405-14435]:Block[14563-14593]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[14419-14425]:ExpressionStatement[14577-14583]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[14444-14485]:IfStatement[14602-14643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14455-14485]:Block[14613-14643]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[14469-14475]:ExpressionStatement[14627-14633]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[14494-14503]:ReturnStatement[14652-14661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14773-14898]:Block[14931-15056]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[14783-14824]:IfStatement[14941-14982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14794-14824]:Block[14952-14982]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[14808-14814]:ExpressionStatement[14966-14972]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[14833-14874]:IfStatement[14991-15032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14844-14874]:Block[15002-15032]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[14858-14864]:ExpressionStatement[15016-15022]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[14883-14892]:ReturnStatement[15041-15050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15157-15282]:Block[15315-15440]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[15167-15208]:IfStatement[15325-15366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15178-15208]:Block[15336-15366]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[15192-15198]:ExpressionStatement[15350-15356]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[15217-15258]:IfStatement[15375-15416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15228-15258]:Block[15386-15416]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[15242-15248]:ExpressionStatement[15400-15406]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[15267-15276]:ReturnStatement[15425-15434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16574-17449]:Block[16732-17607]"
    }, {
      "left" : "if (lhs < rhs)",
      "right" : "if (lhs < rhs)",
      "info" : "IfStatement[16584-16633]:IfStatement[16742-16791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16599-16633]:Block[16757-16791]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[16613-16623]:ReturnStatement[16771-16781]"
    }, {
      "left" : "if (lhs > rhs)",
      "right" : "if (lhs > rhs)",
      "info" : "IfStatement[16642-16691]:IfStatement[16800-16849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16657-16691]:Block[16815-16849]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[16671-16681]:ReturnStatement[16829-16839]"
    }, {
      "left" : "long lhsBits = Double.doubleToLongBits(lhs);",
      "right" : "long lhsBits = Double.doubleToLongBits(lhs);",
      "info" : "VariableDeclarationStatement[16897-16941]:VariableDeclarationStatement[17055-17099]"
    }, {
      "left" : "long rhsBits = Double.doubleToLongBits(rhs);",
      "right" : "long rhsBits = Double.doubleToLongBits(rhs);",
      "info" : "VariableDeclarationStatement[16950-16994]:VariableDeclarationStatement[17108-17152]"
    }, {
      "left" : "if (lhsBits == rhsBits)",
      "right" : "if (lhsBits == rhsBits)",
      "info" : "IfStatement[17003-17060]:IfStatement[17161-17218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17027-17060]:Block[17185-17218]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17041-17050]:ReturnStatement[17199-17208]"
    }, {
      "left" : "if (lhsBits < rhsBits)",
      "right" : "if (lhsBits < rhsBits)",
      "info" : "IfStatement[17346-17443]:IfStatement[17504-17601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17369-17403]:Block[17527-17561]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[17383-17393]:ReturnStatement[17541-17551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17409-17443]:Block[17567-17601]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[17423-17433]:ReturnStatement[17581-17591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18616-19448]:Block[18774-19606]"
    }, {
      "left" : "if (lhs < rhs)",
      "right" : "if (lhs < rhs)",
      "info" : "IfStatement[18626-18675]:IfStatement[18784-18833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18641-18675]:Block[18799-18833]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[18655-18665]:ReturnStatement[18813-18823]"
    }, {
      "left" : "if (lhs > rhs)",
      "right" : "if (lhs > rhs)",
      "info" : "IfStatement[18684-18733]:IfStatement[18842-18891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18699-18733]:Block[18857-18891]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[18713-18723]:ReturnStatement[18871-18881]"
    }, {
      "left" : "int lhsBits = Float.floatToIntBits(lhs);",
      "right" : "int lhsBits = Float.floatToIntBits(lhs);",
      "info" : "VariableDeclarationStatement[18938-18978]:VariableDeclarationStatement[19096-19136]"
    }, {
      "left" : "int rhsBits = Float.floatToIntBits(rhs);",
      "right" : "int rhsBits = Float.floatToIntBits(rhs);",
      "info" : "VariableDeclarationStatement[18987-19027]:VariableDeclarationStatement[19145-19185]"
    }, {
      "left" : "if (lhsBits == rhsBits)",
      "right" : "if (lhsBits == rhsBits)",
      "info" : "IfStatement[19036-19093]:IfStatement[19194-19251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19060-19093]:Block[19218-19251]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[19074-19083]:ReturnStatement[19232-19241]"
    }, {
      "left" : "if (lhsBits < rhsBits)",
      "right" : "if (lhsBits < rhsBits)",
      "info" : "IfStatement[19345-19442]:IfStatement[19503-19600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19368-19402]:Block[19526-19560]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[19382-19392]:ReturnStatement[19540-19550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19408-19442]:Block[19566-19600]"
    }, {
      "left" : "return +1;",
      "right" : "return +1;",
      "info" : "ReturnStatement[19422-19432]:ReturnStatement[19580-19590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19913-20185]:Block[20071-20343]"
    }, {
      "left" : "if ((str == null) || (str.length() == 0))",
      "right" : "if ((str == null) || (str.length() == 0))",
      "info" : "IfStatement[19923-20002]:IfStatement[20081-20160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19965-20002]:Block[20123-20160]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19979-19992]:ReturnStatement[20137-20150]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[20011-20158]:ForStatement[20169-20316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20050-20158]:Block[20208-20316]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[20064-20148]:IfStatement[20222-20306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20103-20148]:Block[20261-20306]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20121-20134]:ReturnStatement[20279-20292]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20167-20179]:ReturnStatement[20325-20337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20730-24207]:Block[20888-24365]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[20740-20807]:IfStatement[20898-20965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20770-20807]:Block[20928-20965]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20784-20797]:ReturnStatement[20942-20955]"
    }, {
      "left" : "char[] chars = str.toCharArray();",
      "right" : "char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[20816-20849]:VariableDeclarationStatement[20974-21007]"
    }, {
      "left" : "int sz = chars.length;",
      "right" : "int sz = chars.length;",
      "info" : "VariableDeclarationStatement[20858-20880]:VariableDeclarationStatement[21016-21038]"
    }, {
      "left" : "boolean hasExp = false;",
      "right" : "boolean hasExp = false;",
      "info" : "VariableDeclarationStatement[20889-20912]:VariableDeclarationStatement[21047-21070]"
    }, {
      "left" : "boolean hasDecPoint = false;",
      "right" : "boolean hasDecPoint = false;",
      "info" : "VariableDeclarationStatement[20921-20949]:VariableDeclarationStatement[21079-21107]"
    }, {
      "left" : "boolean allowSigns = false;",
      "right" : "boolean allowSigns = false;",
      "info" : "VariableDeclarationStatement[20958-20985]:VariableDeclarationStatement[21116-21143]"
    }, {
      "left" : "boolean foundDigit = false;",
      "right" : "boolean foundDigit = false;",
      "info" : "VariableDeclarationStatement[20994-21021]:VariableDeclarationStatement[21152-21179]"
    }, {
      "left" : "int start = (chars[0] == '-') ? 1 : 0;",
      "right" : "int start = (chars[0] == '-') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[21078-21116]:VariableDeclarationStatement[21236-21274]"
    }, {
      "left" : "if (sz > start + 1)",
      "right" : "if (sz > start + 1)",
      "info" : "IfStatement[21125-21770]:IfStatement[21283-21928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21145-21770]:Block[21303-21928]"
    }, {
      "left" : "if (chars[start] == '0' && chars[start + 1] == 'x')",
      "right" : "if (chars[start] == '0' && chars[start + 1] == 'x')",
      "info" : "IfStatement[21159-21760]:IfStatement[21317-21918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21211-21760]:Block[21369-21918]"
    }, {
      "left" : "int i = start + 2;",
      "right" : "int i = start + 2;",
      "info" : "VariableDeclarationStatement[21229-21247]:VariableDeclarationStatement[21387-21405]"
    }, {
      "left" : "if (i == sz)",
      "right" : "if (i == sz)",
      "info" : "IfStatement[21264-21345]:IfStatement[21422-21503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21277-21345]:Block[21435-21503]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21299-21312]:ReturnStatement[21457-21470]"
    }, {
      "left" : "for (; i < chars.length; i++)",
      "right" : "for (; i < chars.length; i++)",
      "info" : "ForStatement[21422-21717]:ForStatement[21580-21875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21452-21717]:Block[21610-21875]"
    }, {
      "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F'))",
      "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F'))",
      "info" : "IfStatement[21474-21699]:IfStatement[21632-21857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21638-21699]:Block[21796-21857]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21664-21677]:ReturnStatement[21822-21835]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21734-21746]:ReturnStatement[21892-21904]"
    }, {
      "left" : "sz--;",
      "right" : "sz--;",
      "info" : "ExpressionStatement[21779-21784]:ExpressionStatement[21937-21942]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[21890-21904]:VariableDeclarationStatement[22048-22062]"
    }, {
      "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "info" : "WhileStatement[22062-23210]:WhileStatement[22220-23368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22122-23210]:Block[22280-23368]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[22136-23183]:IfStatement[22294-23341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22176-22263]:Block[22334-22421]"
    }, {
      "left" : "foundDigit = true;",
      "right" : "foundDigit = true;",
      "info" : "ExpressionStatement[22194-22212]:ExpressionStatement[22352-22370]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[22229-22248]:ExpressionStatement[22387-22406]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[22269-23183]:IfStatement[22427-23341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22290-22502]:Block[22448-22660]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[22308-22452]:IfStatement[22466-22610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22335-22452]:Block[22493-22610]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22421-22434]:ReturnStatement[22579-22592]"
    }, {
      "left" : "hasDecPoint = true;",
      "right" : "hasDecPoint = true;",
      "info" : "ExpressionStatement[22469-22488]:ExpressionStatement[22627-22646]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[22508-23183]:IfStatement[22666-23341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22548-22881]:Block[22706-23039]"
    }, {
      "left" : "if (hasExp)",
      "right" : "if (hasExp)",
      "info" : "IfStatement[22618-22714]:IfStatement[22776-22872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22630-22714]:Block[22788-22872]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22683-22696]:ReturnStatement[22841-22854]"
    }, {
      "left" : "if (!foundDigit)",
      "right" : "if (!foundDigit)",
      "info" : "IfStatement[22731-22801]:IfStatement[22889-22959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22748-22801]:Block[22906-22959]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22770-22783]:ReturnStatement[22928-22941]"
    }, {
      "left" : "hasExp = true;",
      "right" : "hasExp = true;",
      "info" : "ExpressionStatement[22818-22832]:ExpressionStatement[22976-22990]"
    }, {
      "left" : "allowSigns = true;",
      "right" : "allowSigns = true;",
      "info" : "ExpressionStatement[22849-22867]:ExpressionStatement[23007-23025]"
    }, {
      "left" : "if (chars[i] == '+' || chars[i] == '-')",
      "right" : "if (chars[i] == '+' || chars[i] == '-')",
      "info" : "IfStatement[22887-23183]:IfStatement[23045-23341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22927-23132]:Block[23085-23290]"
    }, {
      "left" : "if (!allowSigns)",
      "right" : "if (!allowSigns)",
      "info" : "IfStatement[22945-23015]:IfStatement[23103-23173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22962-23015]:Block[23120-23173]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22984-22997]:ReturnStatement[23142-23155]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[23032-23051]:ExpressionStatement[23190-23209]"
    }, {
      "left" : "foundDigit = false;",
      "right" : "foundDigit = false;",
      "info" : "ExpressionStatement[23068-23087]:ExpressionStatement[23226-23245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23138-23183]:Block[23296-23341]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23156-23169]:ReturnStatement[23314-23327]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[23196-23200]:ExpressionStatement[23354-23358]"
    }, {
      "left" : "if (i < chars.length)",
      "right" : "if (i < chars.length)",
      "info" : "IfStatement[23219-24022]:IfStatement[23377-24180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23241-24022]:Block[23399-24180]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[23255-23380]:IfStatement[23413-23538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23295-23380]:Block[23453-23538]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23354-23366]:ReturnStatement[23512-23524]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[23393-23530]:IfStatement[23551-23688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23433-23530]:Block[23591-23688]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23503-23516]:ReturnStatement[23661-23674]"
    }, {
      "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "info" : "IfStatement[23543-23764]:IfStatement[23701-23922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23714-23764]:Block[23872-23922]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[23732-23750]:ReturnStatement[23890-23908]"
    }, {
      "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "info" : "IfStatement[23777-23945]:IfStatement[23935-24103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23833-23945]:Block[23991-24103]"
    }, {
      "left" : "return foundDigit && !hasExp;",
      "right" : "return foundDigit && !hasExp;",
      "info" : "ReturnStatement[23902-23931]:ReturnStatement[24060-24089]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23999-24012]:ReturnStatement[24157-24170]"
    }, {
      "left" : "return !allowSigns && foundDigit;",
      "right" : "return !allowSigns && foundDigit;",
      "info" : "ReturnStatement[24168-24201]:ReturnStatement[24326-24359]"
    } ]
  },
  "interFileMappings" : { }
}