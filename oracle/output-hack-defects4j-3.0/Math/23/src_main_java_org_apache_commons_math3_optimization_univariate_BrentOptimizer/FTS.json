{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "TypeDeclaration[1219-10736]:TypeDeclaration[1219-11011]"
    }, {
      "left" : "private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));",
      "right" : "private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));",
      "info" : "FieldDeclaration[1980-2093]:FieldDeclaration[1980-2093]"
    }, {
      "left" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "right" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "info" : "FieldDeclaration[2098-2223]:FieldDeclaration[2098-2223]"
    }, {
      "left" : "private final double relativeThreshold;",
      "right" : "private final double relativeThreshold;",
      "info" : "FieldDeclaration[2228-2310]:FieldDeclaration[2228-2310]"
    }, {
      "left" : "private final double absoluteThreshold;",
      "right" : "private final double absoluteThreshold;",
      "info" : "FieldDeclaration[2315-2397]:FieldDeclaration[2315-2397]"
    }, {
      "left" : "public BrentOptimizer(double rel,\n                          double abs,\n                          ConvergenceChecker<UnivariatePointValuePair> checker)",
      "right" : "public BrentOptimizer(double rel,\n                          double abs,\n                          ConvergenceChecker<UnivariatePointValuePair> checker)",
      "info" : "MethodDeclaration[2403-3625]:MethodDeclaration[2403-3625]"
    }, {
      "left" : "public BrentOptimizer(double rel,\n                          double abs)",
      "right" : "public BrentOptimizer(double rel,\n                          double abs)",
      "info" : "MethodDeclaration[3631-4402]:MethodDeclaration[3631-4402]"
    }, {
      "left" : "protected UnivariatePointValuePair doOptimize()",
      "right" : "protected UnivariatePointValuePair doOptimize()",
      "info" : "MethodDeclaration[4408-9823]:MethodDeclaration[4408-10098]"
    }, {
      "left" : "private UnivariatePointValuePair best(UnivariatePointValuePair a,\n                                          UnivariatePointValuePair b,\n                                          boolean isMinim)",
      "right" : "private UnivariatePointValuePair best(UnivariatePointValuePair a,\n                                          UnivariatePointValuePair b,\n                                          boolean isMinim)",
      "info" : "MethodDeclaration[9829-10734]:MethodDeclaration[10104-11009]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1906-1912]:Modifier[1906-1912]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1913-1918]:TYPE_DECLARATION_KIND[1913-1918]"
    }, {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "SimpleName[1919-1933]:SimpleName[1919-1933]"
    }, {
      "left" : "BaseAbstractUnivariateOptimizer",
      "right" : "BaseAbstractUnivariateOptimizer",
      "info" : "SimpleType[1942-1973]:SimpleType[1942-1973]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3145-3151]:Modifier[3145-3151]"
    }, {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "SimpleName[3152-3166]:SimpleName[3152-3166]"
    }, {
      "left" : "double rel",
      "right" : "double rel",
      "info" : "SingleVariableDeclaration[3167-3177]:SingleVariableDeclaration[3167-3177]"
    }, {
      "left" : "double abs",
      "right" : "double abs",
      "info" : "SingleVariableDeclaration[3205-3215]:SingleVariableDeclaration[3205-3215]"
    }, {
      "left" : "ConvergenceChecker<UnivariatePointValuePair> checker",
      "right" : "ConvergenceChecker<UnivariatePointValuePair> checker",
      "info" : "SingleVariableDeclaration[3243-3295]:SingleVariableDeclaration[3243-3295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3297-3625]:Block[3297-3625]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[3307-3322]:SuperConstructorInvocation[3307-3322]"
    }, {
      "left" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "right" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "info" : "IfStatement[3332-3461]:IfStatement[3332-3461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3366-3461]:Block[3366-3461]"
    }, {
      "left" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "right" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "info" : "ThrowStatement[3380-3451]:ThrowStatement[3380-3451]"
    }, {
      "left" : "if (abs <= 0)",
      "right" : "if (abs <= 0)",
      "info" : "IfStatement[3470-3552]:IfStatement[3470-3552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3484-3552]:Block[3484-3552]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(abs);",
      "right" : "throw new NotStrictlyPositiveException(abs);",
      "info" : "ThrowStatement[3498-3542]:ThrowStatement[3498-3542]"
    }, {
      "left" : "relativeThreshold = rel;",
      "right" : "relativeThreshold = rel;",
      "info" : "ExpressionStatement[3562-3586]:ExpressionStatement[3562-3586]"
    }, {
      "left" : "absoluteThreshold = abs;",
      "right" : "absoluteThreshold = abs;",
      "info" : "ExpressionStatement[3595-3619]:ExpressionStatement[3595-3619]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4293-4299]:Modifier[4293-4299]"
    }, {
      "left" : "BrentOptimizer",
      "right" : "BrentOptimizer",
      "info" : "SimpleName[4300-4314]:SimpleName[4300-4314]"
    }, {
      "left" : "double rel",
      "right" : "double rel",
      "info" : "SingleVariableDeclaration[4315-4325]:SingleVariableDeclaration[4315-4325]"
    }, {
      "left" : "double abs",
      "right" : "double abs",
      "info" : "SingleVariableDeclaration[4353-4363]:SingleVariableDeclaration[4353-4363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4365-4402]:Block[4365-4402]"
    }, {
      "left" : "this(rel, abs, null);",
      "right" : "this(rel, abs, null);",
      "info" : "ConstructorInvocation[4375-4396]:ConstructorInvocation[4375-4396]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4433-4442]:MarkerAnnotation[4433-4442]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4447-4456]:Modifier[4447-4456]"
    }, {
      "left" : "UnivariatePointValuePair",
      "right" : "UnivariatePointValuePair",
      "info" : "SimpleType[4457-4481]:SimpleType[4457-4481]"
    }, {
      "left" : "doOptimize",
      "right" : "doOptimize",
      "info" : "SimpleName[4482-4492]:SimpleName[4482-4492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4495-9823]:Block[4495-10098]"
    }, {
      "left" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
      "right" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
      "info" : "VariableDeclarationStatement[4505-4564]:VariableDeclarationStatement[4505-4564]"
    }, {
      "left" : "final double lo = getMin();",
      "right" : "final double lo = getMin();",
      "info" : "VariableDeclarationStatement[4573-4600]:VariableDeclarationStatement[4573-4600]"
    }, {
      "left" : "final double mid = getStartValue();",
      "right" : "final double mid = getStartValue();",
      "info" : "VariableDeclarationStatement[4609-4644]:VariableDeclarationStatement[4609-4644]"
    }, {
      "left" : "final double hi = getMax();",
      "right" : "final double hi = getMax();",
      "info" : "VariableDeclarationStatement[4653-4680]:VariableDeclarationStatement[4653-4680]"
    }, {
      "left" : "final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();",
      "right" : "final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();",
      "info" : "VariableDeclarationStatement[4743-4840]:VariableDeclarationStatement[4743-4840]"
    }, {
      "left" : "double a;",
      "right" : "double a;",
      "info" : "VariableDeclarationStatement[4850-4859]:VariableDeclarationStatement[4850-4859]"
    }, {
      "left" : "double b;",
      "right" : "double b;",
      "info" : "VariableDeclarationStatement[4868-4877]:VariableDeclarationStatement[4868-4877]"
    }, {
      "left" : "if (lo < hi)",
      "right" : "if (lo < hi)",
      "info" : "IfStatement[4886-5007]:IfStatement[4886-5007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4899-4950]:Block[4899-4950]"
    }, {
      "left" : "a = lo;",
      "right" : "a = lo;",
      "info" : "ExpressionStatement[4913-4920]:ExpressionStatement[4913-4920]"
    }, {
      "left" : "b = hi;",
      "right" : "b = hi;",
      "info" : "ExpressionStatement[4933-4940]:ExpressionStatement[4933-4940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4956-5007]:Block[4956-5007]"
    }, {
      "left" : "a = hi;",
      "right" : "a = hi;",
      "info" : "ExpressionStatement[4970-4977]:ExpressionStatement[4970-4977]"
    }, {
      "left" : "b = lo;",
      "right" : "b = lo;",
      "info" : "ExpressionStatement[4990-4997]:ExpressionStatement[4990-4997]"
    }, {
      "left" : "double x = mid;",
      "right" : "double x = mid;",
      "info" : "VariableDeclarationStatement[5017-5032]:VariableDeclarationStatement[5017-5032]"
    }, {
      "left" : "double v = x;",
      "right" : "double v = x;",
      "info" : "VariableDeclarationStatement[5041-5054]:VariableDeclarationStatement[5041-5054]"
    }, {
      "left" : "double w = x;",
      "right" : "double w = x;",
      "info" : "VariableDeclarationStatement[5063-5076]:VariableDeclarationStatement[5063-5076]"
    }, {
      "left" : "double d = 0;",
      "right" : "double d = 0;",
      "info" : "VariableDeclarationStatement[5085-5098]:VariableDeclarationStatement[5085-5098]"
    }, {
      "left" : "double e = 0;",
      "right" : "double e = 0;",
      "info" : "VariableDeclarationStatement[5107-5120]:VariableDeclarationStatement[5107-5120]"
    }, {
      "left" : "double fx = computeObjectiveValue(x);",
      "right" : "double fx = computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[5129-5166]:VariableDeclarationStatement[5129-5166]"
    }, {
      "left" : "if (!isMinim)",
      "right" : "if (!isMinim)",
      "info" : "IfStatement[5175-5222]:IfStatement[5175-5222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5189-5222]:Block[5189-5222]"
    }, {
      "left" : "fx = -fx;",
      "right" : "fx = -fx;",
      "info" : "ExpressionStatement[5203-5212]:ExpressionStatement[5203-5212]"
    }, {
      "left" : "double fv = fx;",
      "right" : "double fv = fx;",
      "info" : "VariableDeclarationStatement[5231-5246]:VariableDeclarationStatement[5231-5246]"
    }, {
      "left" : "double fw = fx;",
      "right" : "double fw = fx;",
      "info" : "VariableDeclarationStatement[5255-5270]:VariableDeclarationStatement[5255-5270]"
    }, {
      "left" : "UnivariatePointValuePair previous = null;",
      "right" : "UnivariatePointValuePair previous = null;",
      "info" : "VariableDeclarationStatement[5280-5321]:VariableDeclarationStatement[5280-5321]"
    }, {
      "left" : "UnivariatePointValuePair current\n            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);",
      "right" : "UnivariatePointValuePair current\n            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);",
      "info" : "VariableDeclarationStatement[5330-5429]:VariableDeclarationStatement[5330-5429]"
    }, {
      "left" : "int iter = 0;",
      "right" : "int iter = 0;",
      "info" : "VariableDeclarationStatement[5510-5523]:VariableDeclarationStatement[5559-5572]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[5532-9817]:WhileStatement[5581-10092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5545-9817]:Block[5594-10092]"
    }, {
      "left" : "final double m = 0.5 * (a + b);",
      "right" : "final double m = 0.5 * (a + b);",
      "info" : "VariableDeclarationStatement[5559-5590]:VariableDeclarationStatement[5608-5639]"
    }, {
      "left" : "final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;",
      "right" : "final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;",
      "info" : "VariableDeclarationStatement[5603-5679]:VariableDeclarationStatement[5652-5728]"
    }, {
      "left" : "final double tol2 = 2 * tol1;",
      "right" : "final double tol2 = 2 * tol1;",
      "info" : "VariableDeclarationStatement[5692-5721]:VariableDeclarationStatement[5741-5770]"
    }, {
      "left" : "final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);",
      "right" : "final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);",
      "info" : "VariableDeclarationStatement[5778-5843]:VariableDeclarationStatement[5827-5892]"
    }, {
      "left" : "if (!stop)",
      "right" : "if (!stop)",
      "info" : "IfStatement[5856-9787]:IfStatement[5905-10062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5867-9576]:Block[5916-9797]"
    }, {
      "left" : "double p = 0;",
      "right" : "double p = 0;",
      "info" : "VariableDeclarationStatement[5885-5898]:VariableDeclarationStatement[5934-5947]"
    }, {
      "left" : "double q = 0;",
      "right" : "double q = 0;",
      "info" : "VariableDeclarationStatement[5915-5928]:VariableDeclarationStatement[5964-5977]"
    }, {
      "left" : "double r = 0;",
      "right" : "double r = 0;",
      "info" : "VariableDeclarationStatement[5945-5958]:VariableDeclarationStatement[5994-6007]"
    }, {
      "left" : "double u = 0;",
      "right" : "double u = 0;",
      "info" : "VariableDeclarationStatement[5975-5988]:VariableDeclarationStatement[6024-6037]"
    }, {
      "left" : "if (FastMath.abs(e) > tol1)",
      "right" : "if (FastMath.abs(e) > tol1)",
      "info" : "IfStatement[6006-7678]:IfStatement[6055-7727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6034-7411]:Block[6083-7460]"
    }, {
      "left" : "r = (x - w) * (fx - fv);",
      "right" : "r = (x - w) * (fx - fv);",
      "info" : "ExpressionStatement[6073-6097]:ExpressionStatement[6122-6146]"
    }, {
      "left" : "q = (x - v) * (fx - fw);",
      "right" : "q = (x - v) * (fx - fw);",
      "info" : "ExpressionStatement[6118-6142]:ExpressionStatement[6167-6191]"
    }, {
      "left" : "p = (x - v) * q - (x - w) * r;",
      "right" : "p = (x - v) * q - (x - w) * r;",
      "info" : "ExpressionStatement[6163-6193]:ExpressionStatement[6212-6242]"
    }, {
      "left" : "q = 2 * (q - r);",
      "right" : "q = 2 * (q - r);",
      "info" : "ExpressionStatement[6214-6230]:ExpressionStatement[6263-6279]"
    }, {
      "left" : "if (q > 0)",
      "right" : "if (q > 0)",
      "info" : "IfStatement[6252-6379]:IfStatement[6301-6428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6263-6318]:Block[6312-6367]"
    }, {
      "left" : "p = -p;",
      "right" : "p = -p;",
      "info" : "ExpressionStatement[6289-6296]:ExpressionStatement[6338-6345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6324-6379]:Block[6373-6428]"
    }, {
      "left" : "q = -q;",
      "right" : "q = -q;",
      "info" : "ExpressionStatement[6350-6357]:ExpressionStatement[6399-6406]"
    }, {
      "left" : "r = e;",
      "right" : "r = e;",
      "info" : "ExpressionStatement[6401-6407]:ExpressionStatement[6450-6456]"
    }, {
      "left" : "e = d;",
      "right" : "e = d;",
      "info" : "ExpressionStatement[6428-6434]:ExpressionStatement[6477-6483]"
    }, {
      "left" : "if (p > q * (a - x) &&\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r))",
      "right" : "if (p > q * (a - x) &&\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r))",
      "info" : "IfStatement[6456-7393]:IfStatement[6505-7442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6591-7094]:Block[6640-7143]"
    }, {
      "left" : "d = p / q;",
      "right" : "d = p / q;",
      "info" : "ExpressionStatement[6674-6684]:ExpressionStatement[6723-6733]"
    }, {
      "left" : "u = x + d;",
      "right" : "u = x + d;",
      "info" : "ExpressionStatement[6709-6719]:ExpressionStatement[6758-6768]"
    }, {
      "left" : "if (u - a < tol2 || b - u < tol2)",
      "right" : "if (u - a < tol2 || b - u < tol2)",
      "info" : "IfStatement[6817-7072]:IfStatement[6866-7121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6851-7072]:Block[6900-7121]"
    }, {
      "left" : "if (x <= m)",
      "right" : "if (x <= m)",
      "info" : "IfStatement[6881-7046]:IfStatement[6930-7095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6893-6966]:Block[6942-7015]"
    }, {
      "left" : "d = tol1;",
      "right" : "d = tol1;",
      "info" : "ExpressionStatement[6927-6936]:ExpressionStatement[6976-6985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6972-7046]:Block[7021-7095]"
    }, {
      "left" : "d = -tol1;",
      "right" : "d = -tol1;",
      "info" : "ExpressionStatement[7006-7016]:ExpressionStatement[7055-7065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7100-7393]:Block[7149-7442]"
    }, {
      "left" : "if (x < m)",
      "right" : "if (x < m)",
      "info" : "IfStatement[7174-7323]:IfStatement[7223-7372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7185-7251]:Block[7234-7300]"
    }, {
      "left" : "e = b - x;",
      "right" : "e = b - x;",
      "info" : "ExpressionStatement[7215-7225]:ExpressionStatement[7264-7274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7257-7323]:Block[7306-7372]"
    }, {
      "left" : "e = a - x;",
      "right" : "e = a - x;",
      "info" : "ExpressionStatement[7287-7297]:ExpressionStatement[7336-7346]"
    }, {
      "left" : "d = GOLDEN_SECTION * e;",
      "right" : "d = GOLDEN_SECTION * e;",
      "info" : "ExpressionStatement[7348-7371]:ExpressionStatement[7397-7420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7417-7678]:Block[7466-7727]"
    }, {
      "left" : "if (x < m)",
      "right" : "if (x < m)",
      "info" : "IfStatement[7483-7616]:IfStatement[7532-7665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7494-7552]:Block[7543-7601]"
    }, {
      "left" : "e = b - x;",
      "right" : "e = b - x;",
      "info" : "ExpressionStatement[7520-7530]:ExpressionStatement[7569-7579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7558-7616]:Block[7607-7665]"
    }, {
      "left" : "e = a - x;",
      "right" : "e = a - x;",
      "info" : "ExpressionStatement[7584-7594]:ExpressionStatement[7633-7643]"
    }, {
      "left" : "d = GOLDEN_SECTION * e;",
      "right" : "d = GOLDEN_SECTION * e;",
      "info" : "ExpressionStatement[7637-7660]:ExpressionStatement[7686-7709]"
    }, {
      "left" : "if (FastMath.abs(d) < tol1)",
      "right" : "if (FastMath.abs(d) < tol1)",
      "info" : "IfStatement[7742-8006]:IfStatement[7791-8055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7770-7950]:Block[7819-7999]"
    }, {
      "left" : "if (d >= 0)",
      "right" : "if (d >= 0)",
      "info" : "IfStatement[7792-7932]:IfStatement[7841-7981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7804-7865]:Block[7853-7914]"
    }, {
      "left" : "u = x + tol1;",
      "right" : "u = x + tol1;",
      "info" : "ExpressionStatement[7830-7843]:ExpressionStatement[7879-7892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7871-7932]:Block[7920-7981]"
    }, {
      "left" : "u = x - tol1;",
      "right" : "u = x - tol1;",
      "info" : "ExpressionStatement[7897-7910]:ExpressionStatement[7946-7959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7956-8006]:Block[8005-8055]"
    }, {
      "left" : "u = x + d;",
      "right" : "u = x + d;",
      "info" : "ExpressionStatement[7978-7988]:ExpressionStatement[8027-8037]"
    }, {
      "left" : "double fu = computeObjectiveValue(u);",
      "right" : "double fu = computeObjectiveValue(u);",
      "info" : "VariableDeclarationStatement[8024-8061]:VariableDeclarationStatement[8073-8110]"
    }, {
      "left" : "if (!isMinim)",
      "right" : "if (!isMinim)",
      "info" : "IfStatement[8078-8141]:IfStatement[8127-8190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8092-8141]:Block[8141-8190]"
    }, {
      "left" : "fu = -fu;",
      "right" : "fu = -fu;",
      "info" : "ExpressionStatement[8114-8123]:ExpressionStatement[8163-8172]"
    }, {
      "left" : "previous = current;",
      "right" : "previous = current;",
      "info" : "ExpressionStatement[8212-8231]:ExpressionStatement[8261-8280]"
    }, {
      "left" : "current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",
      "right" : "current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",
      "info" : "ExpressionStatement[8248-8310]:ExpressionStatement[8297-8359]"
    }, {
      "left" : "if (checker != null)",
      "right" : "if (checker != null)",
      "info" : "IfStatement[8328-8525]:IfStatement[8577-8746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8349-8525]:Block[8598-8746]"
    }, {
      "left" : "if (checker.converged(iter, previous, current))",
      "right" : "if (checker.converged(iter, previous, current))",
      "info" : "IfStatement[8371-8507]:IfStatement[8620-8728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8419-8507]:Block[8668-8728]"
    }, {
      "left" : "best(current, previous, isMinim)",
      "right" : "best(current,\n                                 previous,\n                                 isMinim)",
      "info" : "MethodInvocation[8452-8484]:MethodInvocation[8422-8520]"
    }, {
      "left" : "if (fu <= fx)",
      "right" : "if (fu <= fx)",
      "info" : "IfStatement[8587-9562]:IfStatement[8808-9783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8601-8934]:Block[8822-9155]"
    }, {
      "left" : "if (u < x)",
      "right" : "if (u < x)",
      "info" : "IfStatement[8623-8748]:IfStatement[8844-8969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8634-8688]:Block[8855-8909]"
    }, {
      "left" : "b = x;",
      "right" : "b = x;",
      "info" : "ExpressionStatement[8660-8666]:ExpressionStatement[8881-8887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8694-8748]:Block[8915-8969]"
    }, {
      "left" : "a = x;",
      "right" : "a = x;",
      "info" : "ExpressionStatement[8720-8726]:ExpressionStatement[8941-8947]"
    }, {
      "left" : "v = w;",
      "right" : "v = w;",
      "info" : "ExpressionStatement[8769-8775]:ExpressionStatement[8990-8996]"
    }, {
      "left" : "fv = fw;",
      "right" : "fv = fw;",
      "info" : "ExpressionStatement[8796-8804]:ExpressionStatement[9017-9025]"
    }, {
      "left" : "w = x;",
      "right" : "w = x;",
      "info" : "ExpressionStatement[8825-8831]:ExpressionStatement[9046-9052]"
    }, {
      "left" : "fw = fx;",
      "right" : "fw = fx;",
      "info" : "ExpressionStatement[8852-8860]:ExpressionStatement[9073-9081]"
    }, {
      "left" : "x = u;",
      "right" : "x = u;",
      "info" : "ExpressionStatement[8881-8887]:ExpressionStatement[9102-9108]"
    }, {
      "left" : "fx = fu;",
      "right" : "fx = fu;",
      "info" : "ExpressionStatement[8908-8916]:ExpressionStatement[9129-9137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8940-9562]:Block[9161-9783]"
    }, {
      "left" : "if (u < x)",
      "right" : "if (u < x)",
      "info" : "IfStatement[8962-9087]:IfStatement[9183-9308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8973-9027]:Block[9194-9248]"
    }, {
      "left" : "a = u;",
      "right" : "a = u;",
      "info" : "ExpressionStatement[8999-9005]:ExpressionStatement[9220-9226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9033-9087]:Block[9254-9308]"
    }, {
      "left" : "b = u;",
      "right" : "b = u;",
      "info" : "ExpressionStatement[9059-9065]:ExpressionStatement[9280-9286]"
    }, {
      "left" : "if (fu <= fw ||\n                        Precision.equals(w, x))",
      "right" : "if (fu <= fw ||\n                        Precision.equals(w, x))",
      "info" : "IfStatement[9108-9544]:IfStatement[9329-9765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9172-9323]:Block[9393-9544]"
    }, {
      "left" : "v = w;",
      "right" : "v = w;",
      "info" : "ExpressionStatement[9198-9204]:ExpressionStatement[9419-9425]"
    }, {
      "left" : "fv = fw;",
      "right" : "fv = fw;",
      "info" : "ExpressionStatement[9229-9237]:ExpressionStatement[9450-9458]"
    }, {
      "left" : "w = u;",
      "right" : "w = u;",
      "info" : "ExpressionStatement[9262-9268]:ExpressionStatement[9483-9489]"
    }, {
      "left" : "fw = fu;",
      "right" : "fw = fu;",
      "info" : "ExpressionStatement[9293-9301]:ExpressionStatement[9514-9522]"
    }, {
      "left" : "if (fu <= fv ||\n                               Precision.equals(v, x) ||\n                               Precision.equals(v, w))",
      "right" : "if (fu <= fv ||\n                               Precision.equals(v, x) ||\n                               Precision.equals(v, w))",
      "info" : "IfStatement[9329-9544]:IfStatement[9550-9765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9457-9544]:Block[9678-9765]"
    }, {
      "left" : "v = u;",
      "right" : "v = u;",
      "info" : "ExpressionStatement[9483-9489]:ExpressionStatement[9704-9710]"
    }, {
      "left" : "fv = fu;",
      "right" : "fv = fu;",
      "info" : "ExpressionStatement[9514-9522]:ExpressionStatement[9735-9743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9582-9787]:Block[9803-10062]"
    }, {
      "left" : "return\n                            best(current,\n                                 previous,\n                            isMinim);",
      "right" : "return best(best,\n                            best(current,\n                                 previous,\n                                 isMinim),\n                            isMinim);",
      "info" : "ReturnStatement[9644-9773]:ReturnStatement[9865-10048]"
    }, {
      "left" : "best(current,\n                                 previous,\n                            isMinim)",
      "right" : "best(current,\n                                 previous,\n                                 isMinim)",
      "info" : "MethodInvocation[9679-9772]:MethodInvocation[9911-10009]"
    }, {
      "left" : "++iter;",
      "right" : "++iter;",
      "info" : "ExpressionStatement[9800-9807]:ExpressionStatement[10075-10082]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10253-10260]:Modifier[10528-10535]"
    }, {
      "left" : "UnivariatePointValuePair",
      "right" : "UnivariatePointValuePair",
      "info" : "SimpleType[10261-10285]:SimpleType[10536-10560]"
    }, {
      "left" : "best",
      "right" : "best",
      "info" : "SimpleName[10286-10290]:SimpleName[10561-10565]"
    }, {
      "left" : "UnivariatePointValuePair a",
      "right" : "UnivariatePointValuePair a",
      "info" : "SingleVariableDeclaration[10291-10317]:SingleVariableDeclaration[10566-10592]"
    }, {
      "left" : "UnivariatePointValuePair b",
      "right" : "UnivariatePointValuePair b",
      "info" : "SingleVariableDeclaration[10361-10387]:SingleVariableDeclaration[10636-10662]"
    }, {
      "left" : "boolean isMinim",
      "right" : "boolean isMinim",
      "info" : "SingleVariableDeclaration[10431-10446]:SingleVariableDeclaration[10706-10721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10448-10734]:Block[10723-11009]"
    }, {
      "left" : "if (a == null)",
      "right" : "if (a == null)",
      "info" : "IfStatement[10458-10506]:IfStatement[10733-10781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10473-10506]:Block[10748-10781]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[10487-10496]:ReturnStatement[10762-10771]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[10515-10563]:IfStatement[10790-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10530-10563]:Block[10805-10838]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[10544-10553]:ReturnStatement[10819-10828]"
    }, {
      "left" : "if (isMinim)",
      "right" : "if (isMinim)",
      "info" : "IfStatement[10573-10728]:IfStatement[10848-11003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10586-10654]:Block[10861-10929]"
    }, {
      "left" : "return a.getValue() <= b.getValue() ? a : b;",
      "right" : "return a.getValue() <= b.getValue() ? a : b;",
      "info" : "ReturnStatement[10600-10644]:ReturnStatement[10875-10919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10660-10728]:Block[10935-11003]"
    }, {
      "left" : "return a.getValue() >= b.getValue() ? a : b;",
      "right" : "return a.getValue() >= b.getValue() ? a : b;",
      "info" : "ReturnStatement[10674-10718]:ReturnStatement[10949-10993]"
    } ]
  },
  "interFileMappings" : { }
}