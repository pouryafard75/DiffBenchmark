{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "TypeDeclaration[1808-20763]:TypeDeclaration[1808-21944]"
    }, {
      "left" : "private final String fnName;",
      "right" : "private final String fnName;",
      "info" : "FieldDeclaration[2570-2598]:FieldDeclaration[2570-2598]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2601-2641]:FieldDeclaration[2601-2641]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[2644-2692]:FieldDeclaration[2644-2692]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[2695-2737]:FieldDeclaration[2695-2737]"
    }, {
      "left" : "private final Node errorRoot;",
      "right" : "private final Node errorRoot;",
      "info" : "FieldDeclaration[2740-2769]:FieldDeclaration[2740-2769]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[2772-2804]:FieldDeclaration[2772-2804]"
    }, {
      "left" : "private final Scope scope;",
      "right" : "private final Scope scope;",
      "info" : "FieldDeclaration[2807-2833]:FieldDeclaration[2807-2833]"
    }, {
      "left" : "private JSType returnType = null;",
      "right" : "private JSType returnType = null;",
      "info" : "FieldDeclaration[2837-2870]:FieldDeclaration[2837-2870]"
    }, {
      "left" : "private List<ObjectType> implementedInterfaces = null;",
      "right" : "private List<ObjectType> implementedInterfaces = null;",
      "info" : "FieldDeclaration[2873-2927]:FieldDeclaration[2919-2973]"
    }, {
      "left" : "private ObjectType baseType = null;",
      "right" : "private ObjectType baseType = null;",
      "info" : "FieldDeclaration[2930-2965]:FieldDeclaration[2976-3011]"
    }, {
      "left" : "private ObjectType thisType = null;",
      "right" : "private ObjectType thisType = null;",
      "info" : "FieldDeclaration[2968-3003]:FieldDeclaration[3014-3049]"
    }, {
      "left" : "private boolean isConstructor = false;",
      "right" : "private boolean isConstructor = false;",
      "info" : "FieldDeclaration[3006-3044]:FieldDeclaration[3052-3090]"
    }, {
      "left" : "private boolean isInterface = false;",
      "right" : "private boolean isInterface = false;",
      "info" : "FieldDeclaration[3047-3083]:FieldDeclaration[3093-3129]"
    }, {
      "left" : "private Node parametersNode = null;",
      "right" : "private Node parametersNode = null;",
      "info" : "FieldDeclaration[3086-3121]:FieldDeclaration[3132-3167]"
    }, {
      "left" : "private Node sourceNode = null;",
      "right" : "private Node sourceNode = null;",
      "info" : "FieldDeclaration[3124-3155]:FieldDeclaration[3170-3201]"
    }, {
      "left" : "private String templateTypeName = null;",
      "right" : "private String templateTypeName = null;",
      "info" : "FieldDeclaration[3158-3197]:FieldDeclaration[3204-3243]"
    }, {
      "left" : "static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n      \"JSC_EXTENDS_WITHOUT_TYPEDEF\",\n      \"@extends used without @constructor or @interface for {0}\");",
      "right" : "static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n      \"JSC_EXTENDS_WITHOUT_TYPEDEF\",\n      \"@extends used without @constructor or @interface for {0}\");",
      "info" : "FieldDeclaration[3201-3382]:FieldDeclaration[3247-3428]"
    }, {
      "left" : "static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning(\n      \"JSC_EXTENDS_NON_OBJECT\",\n      \"{0} @extends non-object type {1}\");",
      "right" : "static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning(\n      \"JSC_EXTENDS_NON_OBJECT\",\n      \"{0} @extends non-object type {1}\");",
      "info" : "FieldDeclaration[3386-3533]:FieldDeclaration[3432-3579]"
    }, {
      "left" : "static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\",\n          \"@implements used without @constructor or @interface for {0}\");",
      "right" : "static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\",\n          \"@implements used without @constructor or @interface for {0}\");",
      "info" : "FieldDeclaration[3537-3749]:FieldDeclaration[3583-3795]"
    }, {
      "left" : "static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n      \"JSC_VAR_ARGS_MUST_BE_LAST\",\n      \"variable length argument must be last\");",
      "right" : "static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n      \"JSC_VAR_ARGS_MUST_BE_LAST\",\n      \"variable length argument must be last\");",
      "info" : "FieldDeclaration[3753-3911]:FieldDeclaration[3799-3957]"
    }, {
      "left" : "static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning(\n      \"JSC_OPTIONAL_ARG_AT_END\",\n      \"optional arguments must be at the end\");",
      "right" : "static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning(\n      \"JSC_OPTIONAL_ARG_AT_END\",\n      \"optional arguments must be at the end\");",
      "info" : "FieldDeclaration[3915-4069]:FieldDeclaration[3961-4115]"
    }, {
      "left" : "static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning(\n      \"JSC_INEXISTANT_PARAM\",\n      \"parameter {0} does not appear in {1}''s parameter list\");",
      "right" : "static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning(\n      \"JSC_INEXISTANT_PARAM\",\n      \"parameter {0} does not appear in {1}''s parameter list\");",
      "info" : "FieldDeclaration[4073-4238]:FieldDeclaration[4119-4284]"
    }, {
      "left" : "static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning(\n      \"JSC_TYPE_REDEFINITION\",\n      \"attempted re-definition of type {0}\\n\"\n      + \"found   : {1}\\n\"\n      + \"expected: {2}\");",
      "right" : "static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning(\n      \"JSC_TYPE_REDEFINITION\",\n      \"attempted re-definition of type {0}\\n\"\n      + \"found   : {1}\\n\"\n      + \"expected: {2}\");",
      "info" : "FieldDeclaration[4242-4442]:FieldDeclaration[4288-4488]"
    }, {
      "left" : "static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.error(\n      \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n      \"Only one parameter type must be the template type\");",
      "right" : "static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.error(\n      \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n      \"Only one parameter type must be the template type\");",
      "info" : "FieldDeclaration[4446-4620]:FieldDeclaration[4492-4666]"
    }, {
      "left" : "static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.error(\n      \"JSC_TEMPLATE_TYPE_EXPECTED\",\n      \"The template type must be a parameter type\");",
      "right" : "static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.error(\n      \"JSC_TEMPLATE_TYPE_EXPECTED\",\n      \"The template type must be a parameter type\");",
      "info" : "FieldDeclaration[4624-4787]:FieldDeclaration[4670-4833]"
    }, {
      "left" : "FunctionTypeBuilder(String fnName, AbstractCompiler compiler,\n      Node errorRoot, String sourceName, Scope scope)",
      "right" : "FunctionTypeBuilder(String fnName, AbstractCompiler compiler,\n      Node errorRoot, String sourceName, Scope scope)",
      "info" : "MethodDeclaration[4791-5554]:MethodDeclaration[4837-5600]"
    }, {
      "left" : "FunctionTypeBuilder setSourceNode(@Nullable Node sourceNode)",
      "right" : "FunctionTypeBuilder setSourceNode(@Nullable Node sourceNode)",
      "info" : "MethodDeclaration[5558-5733]:MethodDeclaration[5604-5779]"
    }, {
      "left" : "FunctionTypeBuilder inferFromOverriddenFunction(\n      FunctionType oldType, @Nullable Node paramsParent)",
      "right" : "FunctionTypeBuilder inferFromOverriddenFunction(\n      FunctionType oldType, @Nullable Node paramsParent)",
      "info" : "MethodDeclaration[5737-7460]:MethodDeclaration[5783-7506]"
    }, {
      "left" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[7464-7933]:MethodDeclaration[7510-7965]"
    }, {
      "left" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[8057-9755]:MethodDeclaration[9218-10916]"
    }, {
      "left" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
      "right" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
      "info" : "MethodDeclaration[9759-10073]:MethodDeclaration[10920-11234]"
    }, {
      "left" : "FunctionTypeBuilder inferThisType(JSDocInfo info,\n      @Nullable Node owner)",
      "right" : "FunctionTypeBuilder inferThisType(JSDocInfo info,\n      @Nullable Node owner)",
      "info" : "MethodDeclaration[10077-11828]:MethodDeclaration[11238-12989]"
    }, {
      "left" : "FunctionTypeBuilder inferParameterTypes(JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferParameterTypes(JSDocInfo info)",
      "info" : "MethodDeclaration[11832-12188]:MethodDeclaration[12993-13349]"
    }, {
      "left" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[12192-13971]:MethodDeclaration[13353-15132]"
    }, {
      "left" : "private boolean isOptionalParameter(\n      Node param, @Nullable JSDocInfo info)",
      "right" : "private boolean isOptionalParameter(\n      Node param, @Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[13975-14376]:MethodDeclaration[15136-15537]"
    }, {
      "left" : "private boolean isVarArgsParameter(\n      Node param, @Nullable JSDocInfo info)",
      "right" : "private boolean isVarArgsParameter(\n      Node param, @Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[14380-14827]:MethodDeclaration[15541-15988]"
    }, {
      "left" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
      "right" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
      "info" : "MethodDeclaration[14831-15122]:MethodDeclaration[15992-16283]"
    }, {
      "left" : "private boolean addParameter(FunctionParamBuilder builder,\n      JSType paramType, boolean warnedAboutArgList,\n      boolean isOptional, boolean isVarArgs)",
      "right" : "private boolean addParameter(FunctionParamBuilder builder,\n      JSType paramType, boolean warnedAboutArgList,\n      boolean isOptional, boolean isVarArgs)",
      "info" : "MethodDeclaration[15126-16712]:MethodDeclaration[16287-17873]"
    }, {
      "left" : "FunctionType buildAndRegister()",
      "right" : "FunctionType buildAndRegister()",
      "info" : "MethodDeclaration[16716-17941]:MethodDeclaration[17877-19122]"
    }, {
      "left" : "private void maybeSetBaseType(FunctionType fnType)",
      "right" : "private void maybeSetBaseType(FunctionType fnType)",
      "info" : "MethodDeclaration[17945-18079]:MethodDeclaration[19126-19260]"
    }, {
      "left" : "private FunctionType getOrCreateConstructor()",
      "right" : "private FunctionType getOrCreateConstructor()",
      "info" : "MethodDeclaration[18083-20153]:MethodDeclaration[19264-21334]"
    }, {
      "left" : "private void reportWarning(DiagnosticType warning, String ... args)",
      "right" : "private void reportWarning(DiagnosticType warning, String ... args)",
      "info" : "MethodDeclaration[20157-20303]:MethodDeclaration[21338-21484]"
    }, {
      "left" : "private void reportError(DiagnosticType error, String ... args)",
      "right" : "private void reportError(DiagnosticType error, String ... args)",
      "info" : "MethodDeclaration[20307-20447]:MethodDeclaration[21488-21628]"
    }, {
      "left" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
      "right" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
      "info" : "MethodDeclaration[20451-20761]:MethodDeclaration[21632-21942]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2539-2544]:TYPE_DECLARATION_KIND[2539-2544]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleName[2545-2564]:SimpleName[2545-2564]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleName[5109-5128]:SimpleName[5155-5174]"
    }, {
      "left" : "String fnName",
      "right" : "String fnName",
      "info" : "SingleVariableDeclaration[5129-5142]:SingleVariableDeclaration[5175-5188]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5144-5169]:SingleVariableDeclaration[5190-5215]"
    }, {
      "left" : "Node errorRoot",
      "right" : "Node errorRoot",
      "info" : "SingleVariableDeclaration[5177-5191]:SingleVariableDeclaration[5223-5237]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[5193-5210]:SingleVariableDeclaration[5239-5256]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[5212-5223]:SingleVariableDeclaration[5258-5269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5225-5554]:Block[5271-5600]"
    }, {
      "left" : "Preconditions.checkNotNull(errorRoot);",
      "right" : "Preconditions.checkNotNull(errorRoot);",
      "info" : "ExpressionStatement[5231-5269]:ExpressionStatement[5277-5315]"
    }, {
      "left" : "this.fnName = fnName == null ? \"\" : fnName;",
      "right" : "this.fnName = fnName == null ? \"\" : fnName;",
      "info" : "ExpressionStatement[5275-5318]:ExpressionStatement[5321-5364]"
    }, {
      "left" : "this.codingConvention = compiler.getCodingConvention();",
      "right" : "this.codingConvention = compiler.getCodingConvention();",
      "info" : "ExpressionStatement[5323-5378]:ExpressionStatement[5369-5424]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[5383-5430]:ExpressionStatement[5429-5476]"
    }, {
      "left" : "this.errorRoot = errorRoot;",
      "right" : "this.errorRoot = errorRoot;",
      "info" : "ExpressionStatement[5435-5462]:ExpressionStatement[5481-5508]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[5467-5496]:ExpressionStatement[5513-5542]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[5501-5526]:ExpressionStatement[5547-5572]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[5531-5550]:ExpressionStatement[5577-5596]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[5616-5635]:SimpleType[5662-5681]"
    }, {
      "left" : "setSourceNode",
      "right" : "setSourceNode",
      "info" : "SimpleName[5636-5649]:SimpleName[5682-5695]"
    }, {
      "left" : "@Nullable Node sourceNode",
      "right" : "@Nullable Node sourceNode",
      "info" : "SingleVariableDeclaration[5650-5675]:SingleVariableDeclaration[5696-5721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5677-5733]:Block[5723-5779]"
    }, {
      "left" : "this.sourceNode = sourceNode;",
      "right" : "this.sourceNode = sourceNode;",
      "info" : "ExpressionStatement[5683-5712]:ExpressionStatement[5729-5758]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5717-5729]:ReturnStatement[5763-5775]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[6108-6127]:SimpleType[6154-6173]"
    }, {
      "left" : "inferFromOverriddenFunction",
      "right" : "inferFromOverriddenFunction",
      "info" : "SimpleName[6128-6155]:SimpleName[6174-6201]"
    }, {
      "left" : "FunctionType oldType",
      "right" : "FunctionType oldType",
      "info" : "SingleVariableDeclaration[6163-6183]:SingleVariableDeclaration[6209-6229]"
    }, {
      "left" : "@Nullable Node paramsParent",
      "right" : "@Nullable Node paramsParent",
      "info" : "SingleVariableDeclaration[6185-6212]:SingleVariableDeclaration[6231-6258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6214-7460]:Block[6260-7506]"
    }, {
      "left" : "returnType = oldType.getReturnType();",
      "right" : "returnType = oldType.getReturnType();",
      "info" : "ExpressionStatement[6220-6257]:ExpressionStatement[6266-6303]"
    }, {
      "left" : "if (paramsParent == null)",
      "right" : "if (paramsParent == null)",
      "info" : "IfStatement[6262-7439]:IfStatement[6308-7485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6288-6497]:Block[6334-6543]"
    }, {
      "left" : "parametersNode = oldType.getParametersNode();",
      "right" : "parametersNode = oldType.getParametersNode();",
      "info" : "ExpressionStatement[6329-6374]:ExpressionStatement[6375-6420]"
    }, {
      "left" : "if (parametersNode == null)",
      "right" : "if (parametersNode == null)",
      "info" : "IfStatement[6381-6491]:IfStatement[6427-6537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6409-6491]:Block[6455-6537]"
    }, {
      "left" : "parametersNode = new FunctionParamBuilder(typeRegistry).build();",
      "right" : "parametersNode = new FunctionParamBuilder(typeRegistry).build();",
      "info" : "ExpressionStatement[6419-6483]:ExpressionStatement[6465-6529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6503-7439]:Block[6549-7485]"
    }, {
      "left" : "FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[6628-6713]:VariableDeclarationStatement[6674-6759]"
    }, {
      "left" : "Iterator<Node> oldParams = oldType.getParameters().iterator();",
      "right" : "Iterator<Node> oldParams = oldType.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[6720-6782]:VariableDeclarationStatement[6766-6828]"
    }, {
      "left" : "boolean warnedAboutArgList = false;",
      "right" : "boolean warnedAboutArgList = false;",
      "info" : "VariableDeclarationStatement[6789-6824]:VariableDeclarationStatement[6835-6870]"
    }, {
      "left" : "for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext())",
      "right" : "for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext())",
      "info" : "ForStatement[6831-7388]:ForStatement[6877-7434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6958-7388]:Block[7004-7434]"
    }, {
      "left" : "if (oldParams.hasNext())",
      "right" : "if (oldParams.hasNext())",
      "info" : "IfStatement[6968-7380]:IfStatement[7014-7426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6993-7067]:Block[7039-7113]"
    }, {
      "left" : "paramBuilder.newParameterFromNode(oldParams.next());",
      "right" : "paramBuilder.newParameterFromNode(oldParams.next());",
      "info" : "ExpressionStatement[7005-7057]:ExpressionStatement[7051-7103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7073-7380]:Block[7119-7426]"
    }, {
      "left" : "warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam),\n              codingConvention.isVarArgsParameter(currentParam));",
      "right" : "warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam),\n              codingConvention.isVarArgsParameter(currentParam));",
      "info" : "ExpressionStatement[7085-7370]:ExpressionStatement[7131-7416]"
    }, {
      "left" : "parametersNode = paramBuilder.build();",
      "right" : "parametersNode = paramBuilder.build();",
      "info" : "ExpressionStatement[7395-7433]:ExpressionStatement[7441-7479]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7444-7456]:ReturnStatement[7490-7502]"
    }, {
      "left" : "inferReturnType",
      "right" : "inferReturnType",
      "info" : "SimpleName[7539-7554]:SimpleName[7585-7600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7581-7933]:Block[7627-7965]"
    }, {
      "left" : "returnType = info != null && info.hasReturnType() ?\n        info.getReturnType().evaluate(scope, typeRegistry) :\n        typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "returnType = info != null && info.hasReturnType() ?\n        info.getReturnType().evaluate(scope, typeRegistry) : null;",
      "info" : "ExpressionStatement[7587-7749]:ExpressionStatement[7633-7751]"
    }, {
      "left" : "if (templateTypeName != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType())",
      "right" : "if (templateTypeName != null &&\n        returnType != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType())",
      "info" : "IfStatement[7754-7912]:IfStatement[7756-7944]"
    }, {
      "left" : "templateTypeName != null",
      "right" : "templateTypeName != null",
      "info" : "InfixExpression[7758-7782]:InfixExpression[7760-7784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7854-7912]:Block[7886-7944]"
    }, {
      "left" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "right" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "info" : "ExpressionStatement[7862-7906]:ExpressionStatement[7894-7938]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7917-7929]:ReturnStatement[7949-7961]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[8192-8211]:SimpleType[9353-9372]"
    }, {
      "left" : "inferInheritance",
      "right" : "inferInheritance",
      "info" : "SimpleName[8212-8228]:SimpleName[9373-9389]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[8229-8253]:SingleVariableDeclaration[9390-9414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8255-9755]:Block[9416-10916]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[8261-9733]:IfStatement[9422-10894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8279-9733]:Block[9440-10894]"
    }, {
      "left" : "isConstructor = info.isConstructor();",
      "right" : "isConstructor = info.isConstructor();",
      "info" : "ExpressionStatement[8287-8324]:ExpressionStatement[9448-9485]"
    }, {
      "left" : "isInterface = info.isInterface();",
      "right" : "isInterface = info.isInterface();",
      "info" : "ExpressionStatement[8331-8364]:ExpressionStatement[9492-9525]"
    }, {
      "left" : "if (info.hasBaseType())",
      "right" : "if (info.hasBaseType())",
      "info" : "IfStatement[8391-8763]:IfStatement[9552-9924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8415-8763]:Block[9576-9924]"
    }, {
      "left" : "if (isConstructor || isInterface)",
      "right" : "if (isConstructor || isInterface)",
      "info" : "IfStatement[8425-8755]:IfStatement[9586-9916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8459-8680]:Block[9620-9841]"
    }, {
      "left" : "baseType = ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));",
      "right" : "baseType = ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));",
      "info" : "ExpressionStatement[8471-8548]:ExpressionStatement[9632-9709]"
    }, {
      "left" : "if (baseType == null)",
      "right" : "if (baseType == null)",
      "info" : "IfStatement[8559-8670]:IfStatement[9720-9831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8581-8670]:Block[9742-9831]"
    }, {
      "left" : "reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());",
      "right" : "reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());",
      "info" : "ExpressionStatement[8595-8658]:ExpressionStatement[9756-9819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8686-8755]:Block[9847-9916]"
    }, {
      "left" : "reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);",
      "right" : "reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);",
      "info" : "ExpressionStatement[8698-8745]:ExpressionStatement[9859-9906]"
    }, {
      "left" : "if (isConstructor || isInterface)",
      "right" : "if (isConstructor || isInterface)",
      "info" : "IfStatement[8803-9727]:IfStatement[9964-10888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8837-9604]:Block[9998-10765]"
    }, {
      "left" : "implementedInterfaces = Lists.newArrayList();",
      "right" : "implementedInterfaces = Lists.newArrayList();",
      "info" : "ExpressionStatement[8847-8892]:ExpressionStatement[10008-10053]"
    }, {
      "left" : "for (JSTypeExpression t : info.getImplementedInterfaces())",
      "right" : "for (JSTypeExpression t : info.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[8901-9225]:EnhancedForStatement[10062-10386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8960-9225]:Block[10121-10386]"
    }, {
      "left" : "ObjectType interType = ObjectType.cast(t.evaluate(scope, typeRegistry));",
      "right" : "ObjectType interType = ObjectType.cast(t.evaluate(scope, typeRegistry));",
      "info" : "VariableDeclarationStatement[8972-9044]:VariableDeclarationStatement[10133-10205]"
    }, {
      "left" : "if (interType != null)",
      "right" : "if (interType != null)",
      "info" : "IfStatement[9055-9215]:IfStatement[10216-10376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9078-9141]:Block[10239-10302]"
    }, {
      "left" : "implementedInterfaces.add(interType);",
      "right" : "implementedInterfaces.add(interType);",
      "info" : "ExpressionStatement[9092-9129]:ExpressionStatement[10253-10290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-9215]:Block[10308-10376]"
    }, {
      "left" : "reportError(BAD_IMPLEMENTED_TYPE, fnName);",
      "right" : "reportError(BAD_IMPLEMENTED_TYPE, fnName);",
      "info" : "ExpressionStatement[9161-9203]:ExpressionStatement[10322-10364]"
    }, {
      "left" : "if (baseType != null)",
      "right" : "if (baseType != null)",
      "info" : "IfStatement[9234-9596]:IfStatement[10395-10757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9256-9596]:Block[10417-10757]"
    }, {
      "left" : "JSType maybeFunctionType = baseType.getConstructor();",
      "right" : "JSType maybeFunctionType = baseType.getConstructor();",
      "info" : "VariableDeclarationStatement[9268-9321]:VariableDeclarationStatement[10429-10482]"
    }, {
      "left" : "if (maybeFunctionType instanceof FunctionType)",
      "right" : "if (maybeFunctionType instanceof FunctionType)",
      "info" : "IfStatement[9332-9586]:IfStatement[10493-10747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9379-9586]:Block[10540-10747]"
    }, {
      "left" : "FunctionType functionType = baseType.getConstructor();",
      "right" : "FunctionType functionType = baseType.getConstructor();",
      "info" : "VariableDeclarationStatement[9393-9447]:VariableDeclarationStatement[10554-10608]"
    }, {
      "left" : "Iterables.addAll(\n                implementedInterfaces,\n                functionType.getImplementedInterfaces());",
      "right" : "Iterables.addAll(\n                implementedInterfaces,\n                functionType.getImplementedInterfaces());",
      "info" : "ExpressionStatement[9460-9574]:ExpressionStatement[10621-10735]"
    }, {
      "left" : "if (info.getImplementedInterfaceCount() > 0)",
      "right" : "if (info.getImplementedInterfaceCount() > 0)",
      "info" : "IfStatement[9610-9727]:IfStatement[10771-10888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9655-9727]:Block[10816-10888]"
    }, {
      "left" : "reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);",
      "right" : "reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);",
      "info" : "ExpressionStatement[9665-9719]:ExpressionStatement[10826-10880]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9739-9751]:ReturnStatement[10900-10912]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[9844-9863]:SimpleType[11005-11024]"
    }, {
      "left" : "inferThisType",
      "right" : "inferThisType",
      "info" : "SimpleName[9864-9877]:SimpleName[11025-11038]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[9878-9892]:SingleVariableDeclaration[11039-11053]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[9894-9905]:SingleVariableDeclaration[11055-11066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9907-10073]:Block[11068-11234]"
    }, {
      "left" : "ObjectType objType = ObjectType.cast(type);",
      "right" : "ObjectType objType = ObjectType.cast(type);",
      "info" : "VariableDeclarationStatement[9913-9956]:VariableDeclarationStatement[11074-11117]"
    }, {
      "left" : "if (objType != null && (info == null || !info.hasType()))",
      "right" : "if (objType != null && (info == null || !info.hasType()))",
      "info" : "IfStatement[9961-10052]:IfStatement[11122-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10019-10052]:Block[11180-11213]"
    }, {
      "left" : "thisType = objType;",
      "right" : "thisType = objType;",
      "info" : "ExpressionStatement[10027-10046]:ExpressionStatement[11188-11207]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10057-10069]:ReturnStatement[11218-11230]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[10404-10423]:SimpleType[11565-11584]"
    }, {
      "left" : "inferThisType",
      "right" : "inferThisType",
      "info" : "SimpleName[10424-10437]:SimpleName[11585-11598]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[10438-10452]:SingleVariableDeclaration[11599-11613]"
    }, {
      "left" : "@Nullable Node owner",
      "right" : "@Nullable Node owner",
      "info" : "SingleVariableDeclaration[10460-10480]:SingleVariableDeclaration[11621-11641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10482-11828]:Block[11643-12989]"
    }, {
      "left" : "ObjectType maybeThisType = null;",
      "right" : "ObjectType maybeThisType = null;",
      "info" : "VariableDeclarationStatement[10488-10520]:VariableDeclarationStatement[11649-11681]"
    }, {
      "left" : "if (info != null && info.hasThisType())",
      "right" : "if (info != null && info.hasThisType())",
      "info" : "IfStatement[10525-10672]:IfStatement[11686-11833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10565-10672]:Block[11726-11833]"
    }, {
      "left" : "maybeThisType = ObjectType.cast(\n          info.getThisType().evaluate(scope, typeRegistry));",
      "right" : "maybeThisType = ObjectType.cast(\n          info.getThisType().evaluate(scope, typeRegistry));",
      "info" : "ExpressionStatement[10573-10666]:ExpressionStatement[11734-11827]"
    }, {
      "left" : "if (maybeThisType != null)",
      "right" : "if (maybeThisType != null)",
      "info" : "IfStatement[10677-11806]:IfStatement[11838-12967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10704-11140]:Block[11865-12301]"
    }, {
      "left" : "thisType = maybeThisType;",
      "right" : "thisType = maybeThisType;",
      "info" : "ExpressionStatement[11109-11134]:ExpressionStatement[12270-12295]"
    }, {
      "left" : "if (owner != null &&\n               (info == null || !info.hasType()))",
      "right" : "if (owner != null &&\n               (info == null || !info.hasType()))",
      "info" : "IfStatement[11146-11806]:IfStatement[12307-12967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11217-11806]:Block[12378-12967]"
    }, {
      "left" : "String ownerTypeName = owner.getQualifiedName();",
      "right" : "String ownerTypeName = owner.getQualifiedName();",
      "info" : "VariableDeclarationStatement[11503-11551]:VariableDeclarationStatement[12664-12712]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(\n          typeRegistry.getType(\n              scope, ownerTypeName, sourceName,\n              owner.getLineno(), owner.getCharno()));",
      "right" : "ObjectType ownerType = ObjectType.cast(\n          typeRegistry.getType(\n              scope, ownerTypeName, sourceName,\n              owner.getLineno(), owner.getCharno()));",
      "info" : "VariableDeclarationStatement[11558-11731]:VariableDeclarationStatement[12719-12892]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[11738-11800]:IfStatement[12899-12961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11761-11800]:Block[12922-12961]"
    }, {
      "left" : "thisType = ownerType;",
      "right" : "thisType = ownerType;",
      "info" : "ExpressionStatement[11771-11792]:ExpressionStatement[12932-12953]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11812-11824]:ReturnStatement[12973-12985]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[11900-11919]:SimpleType[13061-13080]"
    }, {
      "left" : "inferParameterTypes",
      "right" : "inferParameterTypes",
      "info" : "SimpleName[11920-11939]:SimpleName[13081-13100]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[11940-11954]:SingleVariableDeclaration[13101-13115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11956-12188]:Block[13117-13349]"
    }, {
      "left" : "Node lp = new Node(Token.LP);",
      "right" : "Node lp = new Node(Token.LP);",
      "info" : "VariableDeclarationStatement[11996-12025]:VariableDeclarationStatement[13157-13186]"
    }, {
      "left" : "for (String name : info.getParameterNames())",
      "right" : "for (String name : info.getParameterNames())",
      "info" : "EnhancedForStatement[12030-12141]:EnhancedForStatement[13191-13302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12075-12141]:Block[13236-13302]"
    }, {
      "left" : "lp.addChildToBack(Node.newString(Token.NAME, name));",
      "right" : "lp.addChildToBack(Node.newString(Token.NAME, name));",
      "info" : "ExpressionStatement[12083-12135]:ExpressionStatement[13244-13296]"
    }, {
      "left" : "return inferParameterTypes(lp, info);",
      "right" : "return inferParameterTypes(lp, info);",
      "info" : "ReturnStatement[12147-12184]:ReturnStatement[13308-13345]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[12290-12309]:SimpleType[13451-13470]"
    }, {
      "left" : "inferParameterTypes",
      "right" : "inferParameterTypes",
      "info" : "SimpleName[12310-12329]:SimpleName[13471-13490]"
    }, {
      "left" : "@Nullable Node argsParent",
      "right" : "@Nullable Node argsParent",
      "info" : "SingleVariableDeclaration[12330-12355]:SingleVariableDeclaration[13491-13516]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[12363-12387]:SingleVariableDeclaration[13524-13548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12389-13971]:Block[13550-15132]"
    }, {
      "left" : "if (argsParent == null)",
      "right" : "if (argsParent == null)",
      "info" : "IfStatement[12395-12538]:IfStatement[13556-13699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12419-12538]:Block[13580-13699]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[12427-12532]:IfStatement[13588-13693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12445-12475]:Block[13606-13636]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12455-12467]:ReturnStatement[13616-13628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12481-12532]:Block[13642-13693]"
    }, {
      "left" : "return inferParameterTypes(info);",
      "right" : "return inferParameterTypes(info);",
      "info" : "ReturnStatement[12491-12524]:ReturnStatement[13652-13685]"
    }, {
      "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[12561-12631]:VariableDeclarationStatement[13722-13792]"
    }, {
      "left" : "boolean warnedAboutArgList = false;",
      "right" : "boolean warnedAboutArgList = false;",
      "info" : "VariableDeclarationStatement[12636-12671]:VariableDeclarationStatement[13797-13832]"
    }, {
      "left" : "Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());",
      "right" : "Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());",
      "info" : "VariableDeclarationStatement[12676-12808]:VariableDeclarationStatement[13837-13969]"
    }, {
      "left" : "boolean foundTemplateType = false;",
      "right" : "boolean foundTemplateType = false;",
      "info" : "VariableDeclarationStatement[12813-12847]:VariableDeclarationStatement[13974-14008]"
    }, {
      "left" : "for (Node arg : argsParent.children())",
      "right" : "for (Node arg : argsParent.children())",
      "info" : "EnhancedForStatement[12852-13674]:EnhancedForStatement[14013-14835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12891-13674]:Block[14052-14835]"
    }, {
      "left" : "String argumentName = arg.getString();",
      "right" : "String argumentName = arg.getString();",
      "info" : "VariableDeclarationStatement[12899-12937]:VariableDeclarationStatement[14060-14098]"
    }, {
      "left" : "allJsDocParams.remove(argumentName);",
      "right" : "allJsDocParams.remove(argumentName);",
      "info" : "ExpressionStatement[12944-12980]:ExpressionStatement[14105-14141]"
    }, {
      "left" : "JSType parameterType =\n          info != null && info.hasParameterType(argumentName) ?\n          info.getParameterType(argumentName).evaluate(scope, typeRegistry) :\n          typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "JSType parameterType =\n          info != null && info.hasParameterType(argumentName) ?\n          info.getParameterType(argumentName).evaluate(scope, typeRegistry) :\n          typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[13017-13233]:VariableDeclarationStatement[14178-14394]"
    }, {
      "left" : "if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType())",
      "right" : "if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType())",
      "info" : "IfStatement[13240-13488]:IfStatement[14401-14649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13345-13488]:Block[14506-14649]"
    }, {
      "left" : "if (foundTemplateType)",
      "right" : "if (foundTemplateType)",
      "info" : "IfStatement[13355-13446]:IfStatement[14516-14607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13378-13446]:Block[14539-14607]"
    }, {
      "left" : "reportError(TEMPLATE_TYPE_DUPLICATED, fnName);",
      "right" : "reportError(TEMPLATE_TYPE_DUPLICATED, fnName);",
      "info" : "ExpressionStatement[13390-13436]:ExpressionStatement[14551-14597]"
    }, {
      "left" : "foundTemplateType = true;",
      "right" : "foundTemplateType = true;",
      "info" : "ExpressionStatement[13455-13480]:ExpressionStatement[14616-14641]"
    }, {
      "left" : "warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParameter(arg, info),\n          isVarArgsParameter(arg, info));",
      "right" : "warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParameter(arg, info),\n          isVarArgsParameter(arg, info));",
      "info" : "ExpressionStatement[13495-13668]:ExpressionStatement[14656-14829]"
    }, {
      "left" : "if (templateTypeName != null && !foundTemplateType)",
      "right" : "if (templateTypeName != null && !foundTemplateType)",
      "info" : "IfStatement[13680-13790]:IfStatement[14841-14951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-13790]:Block[14893-14951]"
    }, {
      "left" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "right" : "reportError(TEMPLATE_TYPE_EXPECTED, fnName);",
      "info" : "ExpressionStatement[13740-13784]:ExpressionStatement[14901-14945]"
    }, {
      "left" : "for (String inexistentName : allJsDocParams)",
      "right" : "for (String inexistentName : allJsDocParams)",
      "info" : "EnhancedForStatement[13796-13911]:EnhancedForStatement[14957-15072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13841-13911]:Block[15002-15072]"
    }, {
      "left" : "reportWarning(INEXISTANT_PARAM, inexistentName, fnName);",
      "right" : "reportWarning(INEXISTANT_PARAM, inexistentName, fnName);",
      "info" : "ExpressionStatement[13849-13905]:ExpressionStatement[15010-15066]"
    }, {
      "left" : "parametersNode = builder.build();",
      "right" : "parametersNode = builder.build();",
      "info" : "ExpressionStatement[13917-13950]:ExpressionStatement[15078-15111]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13955-13967]:ReturnStatement[15116-15128]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14046-14053]:Modifier[15207-15214]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14054-14061]:PrimitiveType[15215-15222]"
    }, {
      "left" : "isOptionalParameter",
      "right" : "isOptionalParameter",
      "info" : "SimpleName[14062-14081]:SimpleName[15223-15242]"
    }, {
      "left" : "Node param",
      "right" : "Node param",
      "info" : "SingleVariableDeclaration[14089-14099]:SingleVariableDeclaration[15250-15260]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[14101-14125]:SingleVariableDeclaration[15262-15286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14127-14376]:Block[15288-15537]"
    }, {
      "left" : "if (codingConvention.isOptionalParameter(param))",
      "right" : "if (codingConvention.isOptionalParameter(param))",
      "info" : "IfStatement[14133-14208]:IfStatement[15294-15369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14182-14208]:Block[15343-15369]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14190-14202]:ReturnStatement[15351-15363]"
    }, {
      "left" : "String paramName = param.getString();",
      "right" : "String paramName = param.getString();",
      "info" : "VariableDeclarationStatement[14214-14251]:VariableDeclarationStatement[15375-15412]"
    }, {
      "left" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();",
      "right" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();",
      "info" : "ReturnStatement[14256-14372]:ReturnStatement[15417-15533]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14503-14510]:Modifier[15664-15671]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14511-14518]:PrimitiveType[15672-15679]"
    }, {
      "left" : "isVarArgsParameter",
      "right" : "isVarArgsParameter",
      "info" : "SimpleName[14519-14537]:SimpleName[15680-15698]"
    }, {
      "left" : "Node param",
      "right" : "Node param",
      "info" : "SingleVariableDeclaration[14545-14555]:SingleVariableDeclaration[15706-15716]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[14557-14581]:SingleVariableDeclaration[15718-15742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14583-14827]:Block[15744-15988]"
    }, {
      "left" : "if (codingConvention.isVarArgsParameter(param))",
      "right" : "if (codingConvention.isVarArgsParameter(param))",
      "info" : "IfStatement[14589-14663]:IfStatement[15750-15824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14637-14663]:Block[15798-15824]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14645-14657]:ReturnStatement[15806-15818]"
    }, {
      "left" : "String paramName = param.getString();",
      "right" : "String paramName = param.getString();",
      "info" : "VariableDeclarationStatement[14669-14706]:VariableDeclarationStatement[15830-15867]"
    }, {
      "left" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();",
      "right" : "return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();",
      "info" : "ReturnStatement[14711-14823]:ReturnStatement[15872-15984]"
    }, {
      "left" : "FunctionTypeBuilder",
      "right" : "FunctionTypeBuilder",
      "info" : "SimpleType[14891-14910]:SimpleType[16052-16071]"
    }, {
      "left" : "inferTemplateTypeName",
      "right" : "inferTemplateTypeName",
      "info" : "SimpleName[14911-14932]:SimpleName[16072-16093]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[14933-14957]:SingleVariableDeclaration[16094-16118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14959-15122]:Block[16120-16283]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[14965-15101]:IfStatement[16126-16262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14983-15101]:Block[16144-16262]"
    }, {
      "left" : "templateTypeName = info.getTemplateTypeName();",
      "right" : "templateTypeName = info.getTemplateTypeName();",
      "info" : "ExpressionStatement[14991-15037]:ExpressionStatement[16152-16198]"
    }, {
      "left" : "typeRegistry.setTemplateTypeName(templateTypeName);",
      "right" : "typeRegistry.setTemplateTypeName(templateTypeName);",
      "info" : "ExpressionStatement[15044-15095]:ExpressionStatement[16205-16256]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15106-15118]:ReturnStatement[16267-16279]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15551-15558]:Modifier[16712-16719]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15559-15566]:PrimitiveType[16720-16727]"
    }, {
      "left" : "addParameter",
      "right" : "addParameter",
      "info" : "SimpleName[15567-15579]:SimpleName[16728-16740]"
    }, {
      "left" : "FunctionParamBuilder builder",
      "right" : "FunctionParamBuilder builder",
      "info" : "SingleVariableDeclaration[15580-15608]:SingleVariableDeclaration[16741-16769]"
    }, {
      "left" : "JSType paramType",
      "right" : "JSType paramType",
      "info" : "SingleVariableDeclaration[15616-15632]:SingleVariableDeclaration[16777-16793]"
    }, {
      "left" : "boolean warnedAboutArgList",
      "right" : "boolean warnedAboutArgList",
      "info" : "SingleVariableDeclaration[15634-15660]:SingleVariableDeclaration[16795-16821]"
    }, {
      "left" : "boolean isOptional",
      "right" : "boolean isOptional",
      "info" : "SingleVariableDeclaration[15668-15686]:SingleVariableDeclaration[16829-16847]"
    }, {
      "left" : "boolean isVarArgs",
      "right" : "boolean isVarArgs",
      "info" : "SingleVariableDeclaration[15688-15705]:SingleVariableDeclaration[16849-16866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15707-16712]:Block[16868-17873]"
    }, {
      "left" : "boolean emittedWarning = false;",
      "right" : "boolean emittedWarning = false;",
      "info" : "VariableDeclarationStatement[15713-15744]:VariableDeclarationStatement[16874-16905]"
    }, {
      "left" : "if (isOptional)",
      "right" : "if (isOptional)",
      "info" : "IfStatement[15749-16681]:IfStatement[16910-17842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15765-16098]:Block[16926-17259]"
    }, {
      "left" : "if (!builder.addOptionalParams(paramType) && !warnedAboutArgList)",
      "right" : "if (!builder.addOptionalParams(paramType) && !warnedAboutArgList)",
      "info" : "IfStatement[15940-16092]:IfStatement[17101-17253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16006-16092]:Block[17167-17253]"
    }, {
      "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "info" : "ExpressionStatement[16016-16053]:ExpressionStatement[17177-17214]"
    }, {
      "left" : "emittedWarning = true;",
      "right" : "emittedWarning = true;",
      "info" : "ExpressionStatement[16062-16084]:ExpressionStatement[17223-17245]"
    }, {
      "left" : "if (isVarArgs)",
      "right" : "if (isVarArgs)",
      "info" : "IfStatement[16104-16681]:IfStatement[17265-17842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16119-16278]:Block[17280-17439]"
    }, {
      "left" : "if (!builder.addVarArgs(paramType) && !warnedAboutArgList)",
      "right" : "if (!builder.addVarArgs(paramType) && !warnedAboutArgList)",
      "info" : "IfStatement[16127-16272]:IfStatement[17288-17433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16186-16272]:Block[17347-17433]"
    }, {
      "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "info" : "ExpressionStatement[16196-16233]:ExpressionStatement[17357-17394]"
    }, {
      "left" : "emittedWarning = true;",
      "right" : "emittedWarning = true;",
      "info" : "ExpressionStatement[16242-16264]:ExpressionStatement[17403-17425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16284-16681]:Block[17445-17842]"
    }, {
      "left" : "if (!builder.addRequiredParams(paramType) && !warnedAboutArgList)",
      "right" : "if (!builder.addRequiredParams(paramType) && !warnedAboutArgList)",
      "info" : "IfStatement[16292-16675]:IfStatement[17453-17836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16358-16675]:Block[17519-17836]"
    }, {
      "left" : "if (builder.hasVarArgs())",
      "right" : "if (builder.hasVarArgs())",
      "info" : "IfStatement[16488-16636]:IfStatement[17649-17797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16514-16573]:Block[17675-17734]"
    }, {
      "left" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "right" : "reportWarning(VAR_ARGS_MUST_BE_LAST);",
      "info" : "ExpressionStatement[16526-16563]:ExpressionStatement[17687-17724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16579-16636]:Block[17740-17797]"
    }, {
      "left" : "reportWarning(OPTIONAL_ARG_AT_END);",
      "right" : "reportWarning(OPTIONAL_ARG_AT_END);",
      "info" : "ExpressionStatement[16591-16626]:ExpressionStatement[17752-17787]"
    }, {
      "left" : "emittedWarning = true;",
      "right" : "emittedWarning = true;",
      "info" : "ExpressionStatement[16645-16667]:ExpressionStatement[17806-17828]"
    }, {
      "left" : "return emittedWarning;",
      "right" : "return emittedWarning;",
      "info" : "ReturnStatement[16686-16708]:ReturnStatement[17847-17869]"
    }, {
      "left" : "buildAndRegister",
      "right" : "buildAndRegister",
      "info" : "SimpleName[16801-16817]:SimpleName[17962-17978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16820-17941]:Block[17981-19122]"
    }, {
      "left" : "if (returnType == null)",
      "right" : "if (returnType == null)",
      "info" : "IfStatement[16826-16918]:IfStatement[17987-18079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16850-16918]:Block[18011-18079]"
    }, {
      "left" : "returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "right" : "returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[16858-16912]:ExpressionStatement[18019-18073]"
    }, {
      "left" : "if (parametersNode == null)",
      "right" : "if (parametersNode == null)",
      "info" : "IfStatement[16924-17066]:IfStatement[18085-18227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16952-17066]:Block[18113-18227]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"All Function types must have params and a return type\");",
      "right" : "throw new IllegalStateException(\n          \"All Function types must have params and a return type\");",
      "info" : "ThrowStatement[16960-17060]:ThrowStatement[18121-18221]"
    }, {
      "left" : "FunctionType fnType;",
      "right" : "FunctionType fnType;",
      "info" : "VariableDeclarationStatement[17072-17092]:VariableDeclarationStatement[18233-18253]"
    }, {
      "left" : "if (isConstructor)",
      "right" : "if (isConstructor)",
      "info" : "IfStatement[17097-17764]:IfStatement[18258-18945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17116-17164]:Block[18277-18325]"
    }, {
      "left" : "fnType = getOrCreateConstructor();",
      "right" : "fnType = getOrCreateConstructor();",
      "info" : "ExpressionStatement[17124-17158]:ExpressionStatement[18285-18319]"
    }, {
      "left" : "if (isInterface)",
      "right" : "if (isInterface)",
      "info" : "IfStatement[17170-17764]:IfStatement[18331-18945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17187-17422]:Block[18348-18583]"
    }, {
      "left" : "fnType = typeRegistry.createInterfaceType(fnName, sourceNode);",
      "right" : "fnType = typeRegistry.createInterfaceType(fnName, sourceNode);",
      "info" : "ExpressionStatement[17195-17257]:ExpressionStatement[18356-18418]"
    }, {
      "left" : "if (scope.isGlobal() && !fnName.isEmpty())",
      "right" : "if (scope.isGlobal() && !fnName.isEmpty())",
      "info" : "IfStatement[17264-17384]:IfStatement[18425-18545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17307-17384]:Block[18468-18545]"
    }, {
      "left" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "right" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "info" : "ExpressionStatement[17317-17376]:ExpressionStatement[18478-18537]"
    }, {
      "left" : "maybeSetBaseType(fnType);",
      "right" : "maybeSetBaseType(fnType);",
      "info" : "ExpressionStatement[17391-17416]:ExpressionStatement[18552-18577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17428-17764]:Block[18589-18945]"
    }, {
      "left" : "fnType = new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(sourceNode)\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType)\n          .withTypeOfThis(thisType)\n          .withTemplateName(templateTypeName)\n          .build();",
      "right" : "fnType = new FunctionBuilder(typeRegistry)\n          .withName(fnName)\n          .withSourceNode(sourceNode)\n          .withParamsNode(parametersNode)\n          .withReturnType(returnType, returnTypeInferred)\n          .withTypeOfThis(thisType)\n          .withTemplateName(templateTypeName)\n          .build();",
      "info" : "ExpressionStatement[17436-17726]:ExpressionStatement[18597-18907]"
    }, {
      "left" : "maybeSetBaseType(fnType);",
      "right" : "maybeSetBaseType(fnType);",
      "info" : "ExpressionStatement[17733-17758]:ExpressionStatement[18914-18939]"
    }, {
      "left" : "if (implementedInterfaces != null)",
      "right" : "if (implementedInterfaces != null)",
      "info" : "IfStatement[17770-17874]:IfStatement[18951-19055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17805-17874]:Block[18986-19055]"
    }, {
      "left" : "fnType.setImplementedInterfaces(implementedInterfaces);",
      "right" : "fnType.setImplementedInterfaces(implementedInterfaces);",
      "info" : "ExpressionStatement[17813-17868]:ExpressionStatement[18994-19049]"
    }, {
      "left" : "typeRegistry.clearTemplateTypeName();",
      "right" : "typeRegistry.clearTemplateTypeName();",
      "info" : "ExpressionStatement[17880-17917]:ExpressionStatement[19061-19098]"
    }, {
      "left" : "return fnType;",
      "right" : "return fnType;",
      "info" : "ReturnStatement[17923-17937]:ReturnStatement[19104-19118]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17945-17952]:Modifier[19126-19133]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17953-17957]:PrimitiveType[19134-19138]"
    }, {
      "left" : "maybeSetBaseType",
      "right" : "maybeSetBaseType",
      "info" : "SimpleName[17958-17974]:SimpleName[19139-19155]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[17975-17994]:SingleVariableDeclaration[19156-19175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17996-18079]:Block[19177-19260]"
    }, {
      "left" : "if (baseType != null)",
      "right" : "if (baseType != null)",
      "info" : "IfStatement[18002-18075]:IfStatement[19183-19256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18024-18075]:Block[19205-19256]"
    }, {
      "left" : "fnType.setPrototypeBasedOn(baseType);",
      "right" : "fnType.setPrototypeBasedOn(baseType);",
      "info" : "ExpressionStatement[18032-18069]:ExpressionStatement[19213-19250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18823-18830]:Modifier[20004-20011]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[18831-18843]:SimpleType[20012-20024]"
    }, {
      "left" : "getOrCreateConstructor",
      "right" : "getOrCreateConstructor",
      "info" : "SimpleName[18844-18866]:SimpleName[20025-20047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18869-20153]:Block[20050-21334]"
    }, {
      "left" : "FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, sourceNode, parametersNode, returnType);",
      "right" : "FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, sourceNode, parametersNode, returnType);",
      "info" : "VariableDeclarationStatement[18875-18989]:VariableDeclarationStatement[20056-20170]"
    }, {
      "left" : "JSType existingType = typeRegistry.getType(fnName);",
      "right" : "JSType existingType = typeRegistry.getType(fnName);",
      "info" : "VariableDeclarationStatement[18994-19045]:VariableDeclarationStatement[20175-20226]"
    }, {
      "left" : "if (existingType != null)",
      "right" : "if (existingType != null)",
      "info" : "IfStatement[19051-19977]:IfStatement[20232-21158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19077-19977]:Block[20258-21158]"
    }, {
      "left" : "boolean isInstanceObject = existingType instanceof InstanceObjectType;",
      "right" : "boolean isInstanceObject = existingType instanceof InstanceObjectType;",
      "info" : "VariableDeclarationStatement[19085-19155]:VariableDeclarationStatement[20266-20336]"
    }, {
      "left" : "if (isInstanceObject || fnName.equals(\"Function\"))",
      "right" : "if (isInstanceObject || fnName.equals(\"Function\"))",
      "info" : "IfStatement[19162-19971]:IfStatement[20343-21152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19213-19726]:Block[20394-20907]"
    }, {
      "left" : "FunctionType existingFn =\n            isInstanceObject ?\n            ((InstanceObjectType) existingType).getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);",
      "right" : "FunctionType existingFn =\n            isInstanceObject ?\n            ((InstanceObjectType) existingType).getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);",
      "info" : "VariableDeclarationStatement[19223-19418]:VariableDeclarationStatement[20404-20599]"
    }, {
      "left" : "if (existingFn.getSource() == null)",
      "right" : "if (existingFn.getSource() == null)",
      "info" : "IfStatement[19428-19519]:IfStatement[20609-20700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19464-19519]:Block[20645-20700]"
    }, {
      "left" : "existingFn.setSource(sourceNode);",
      "right" : "existingFn.setSource(sourceNode);",
      "info" : "ExpressionStatement[19476-19509]:ExpressionStatement[20657-20690]"
    }, {
      "left" : "if (!existingFn.hasEqualCallType(fnType))",
      "right" : "if (!existingFn.hasEqualCallType(fnType))",
      "info" : "IfStatement[19529-19690]:IfStatement[20710-20871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19571-19690]:Block[20752-20871]"
    }, {
      "left" : "reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());",
      "right" : "reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());",
      "info" : "ExpressionStatement[19583-19680]:ExpressionStatement[20764-20861]"
    }, {
      "left" : "return existingFn;",
      "right" : "return existingFn;",
      "info" : "ReturnStatement[19700-19718]:ReturnStatement[20881-20899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19732-19971]:Block[20913-21152]"
    }, {
      "left" : "maybeSetBaseType(fnType);",
      "right" : "maybeSetBaseType(fnType);",
      "info" : "ExpressionStatement[19983-20008]:ExpressionStatement[21164-21189]"
    }, {
      "left" : "if (scope.isGlobal() && !fnName.isEmpty())",
      "right" : "if (scope.isGlobal() && !fnName.isEmpty())",
      "info" : "IfStatement[20014-20130]:IfStatement[21195-21311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20057-20130]:Block[21238-21311]"
    }, {
      "left" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "right" : "typeRegistry.declareType(fnName, fnType.getInstanceType());",
      "info" : "ExpressionStatement[20065-20124]:ExpressionStatement[21246-21305]"
    }, {
      "left" : "return fnType;",
      "right" : "return fnType;",
      "info" : "ReturnStatement[20135-20149]:ReturnStatement[21316-21330]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20157-20164]:Modifier[21338-21345]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20165-20169]:PrimitiveType[21346-21350]"
    }, {
      "left" : "reportWarning",
      "right" : "reportWarning",
      "info" : "SimpleName[20170-20183]:SimpleName[21351-21364]"
    }, {
      "left" : "DiagnosticType warning",
      "right" : "DiagnosticType warning",
      "info" : "SingleVariableDeclaration[20184-20206]:SingleVariableDeclaration[21365-21387]"
    }, {
      "left" : "String ... args",
      "right" : "String ... args",
      "info" : "SingleVariableDeclaration[20208-20223]:SingleVariableDeclaration[21389-21404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20225-20303]:Block[21406-21484]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, errorRoot, warning, args));",
      "right" : "compiler.report(JSError.make(sourceName, errorRoot, warning, args));",
      "info" : "ExpressionStatement[20231-20299]:ExpressionStatement[21412-21480]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20307-20314]:Modifier[21488-21495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20315-20319]:PrimitiveType[21496-21500]"
    }, {
      "left" : "reportError",
      "right" : "reportError",
      "info" : "SimpleName[20320-20331]:SimpleName[21501-21512]"
    }, {
      "left" : "DiagnosticType error",
      "right" : "DiagnosticType error",
      "info" : "SingleVariableDeclaration[20332-20352]:SingleVariableDeclaration[21513-21533]"
    }, {
      "left" : "String ... args",
      "right" : "String ... args",
      "info" : "SingleVariableDeclaration[20354-20369]:SingleVariableDeclaration[21535-21550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20371-20447]:Block[21552-21628]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, errorRoot, error, args));",
      "right" : "compiler.report(JSError.make(sourceName, errorRoot, error, args));",
      "info" : "ExpressionStatement[20377-20443]:ExpressionStatement[21558-21624]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20534-20540]:Modifier[21715-21721]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20541-20548]:PrimitiveType[21722-21729]"
    }, {
      "left" : "isFunctionTypeDeclaration",
      "right" : "isFunctionTypeDeclaration",
      "info" : "SimpleName[20549-20574]:SimpleName[21730-21755]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[20575-20589]:SingleVariableDeclaration[21756-21770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20591-20761]:Block[21772-21942]"
    }, {
      "left" : "return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();",
      "right" : "return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();",
      "info" : "ReturnStatement[20597-20757]:ReturnStatement[21778-21938]"
    } ]
  },
  "interFileMappings" : { }
}