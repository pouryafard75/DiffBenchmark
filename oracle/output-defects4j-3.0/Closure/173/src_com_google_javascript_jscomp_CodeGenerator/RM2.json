{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "TypeDeclaration[1099-39876]:TypeDeclaration[1099-39686]"
    }, {
      "left" : "private static final String LT_ESCAPED = \"\\\\x3c\";",
      "right" : "private static final String LT_ESCAPED = \"\\\\x3c\";",
      "info" : "FieldDeclaration[1231-1280]:FieldDeclaration[1231-1280]"
    }, {
      "left" : "private static final String GT_ESCAPED = \"\\\\x3e\";",
      "right" : "private static final String GT_ESCAPED = \"\\\\x3e\";",
      "info" : "FieldDeclaration[1283-1332]:FieldDeclaration[1283-1332]"
    }, {
      "left" : "private final Map<String, String> escapedJsStrings = Maps.newHashMap();",
      "right" : "private final Map<String, String> escapedJsStrings = Maps.newHashMap();",
      "info" : "FieldDeclaration[1390-1461]:FieldDeclaration[1390-1461]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1465-1604]:FieldDeclaration[1465-1604]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1608-1638]:FieldDeclaration[1608-1638]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1642-1692]:FieldDeclaration[1642-1692]"
    }, {
      "left" : "private final boolean preferSingleQuotes;",
      "right" : "private final boolean preferSingleQuotes;",
      "info" : "FieldDeclaration[1696-1737]:FieldDeclaration[1696-1737]"
    }, {
      "left" : "private final boolean trustedStrings;",
      "right" : "private final boolean trustedStrings;",
      "info" : "FieldDeclaration[1740-1777]:FieldDeclaration[1740-1777]"
    }, {
      "left" : "private final LanguageMode languageMode;",
      "right" : "private final LanguageMode languageMode;",
      "info" : "FieldDeclaration[1780-1820]:FieldDeclaration[1780-1820]"
    }, {
      "left" : "private CodeGenerator(CodeConsumer consumer)",
      "right" : "private CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1824-2030]:MethodDeclaration[1824-2030]"
    }, {
      "left" : "static CodeGenerator forCostEstimation(CodeConsumer consumer)",
      "right" : "static CodeGenerator forCostEstimation(CodeConsumer consumer)",
      "info" : "MethodDeclaration[2034-2141]:MethodDeclaration[2034-2141]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[2145-2928]:MethodDeclaration[2145-2928]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2932-3047]:MethodDeclaration[2932-3047]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[3051-3094]:MethodDeclaration[3051-3094]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[3098-3201]:MethodDeclaration[3098-3201]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[3205-3254]:MethodDeclaration[3205-3254]"
    }, {
      "left" : "void add(Node n, Context context)",
      "right" : "void add(Node n, Context context)",
      "info" : "MethodDeclaration[3258-22898]:MethodDeclaration[3258-22708]"
    }, {
      "left" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "right" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "info" : "MethodDeclaration[22902-23739]:MethodDeclaration[22712-23549]"
    }, {
      "left" : "static boolean isSimpleNumber(String s)",
      "right" : "static boolean isSimpleNumber(String s)",
      "info" : "MethodDeclaration[23743-24051]:MethodDeclaration[23553-23861]"
    }, {
      "left" : "static double getSimpleNumber(String s)",
      "right" : "static double getSimpleNumber(String s)",
      "info" : "MethodDeclaration[24055-24408]:MethodDeclaration[23865-24218]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[24412-24621]:MethodDeclaration[24222-24431]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[24625-26722]:MethodDeclaration[24435-26532]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[26726-27582]:MethodDeclaration[26536-27392]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[27586-27885]:MethodDeclaration[27396-27695]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[27889-27972]:MethodDeclaration[27699-27782]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[27976-28115]:MethodDeclaration[27786-27925]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[28119-28579]:MethodDeclaration[27929-28389]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[28583-29269]:MethodDeclaration[28393-29079]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[29273-29375]:MethodDeclaration[29083-29185]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[29379-29483]:MethodDeclaration[29189-29293]"
    }, {
      "left" : "private void addJsString(Node n)",
      "right" : "private void addJsString(Node n)",
      "info" : "MethodDeclaration[29487-29974]:MethodDeclaration[29297-29784]"
    }, {
      "left" : "private String jsString(String s, boolean useSlashV)",
      "right" : "private String jsString(String s, boolean useSlashV)",
      "info" : "MethodDeclaration[29978-30823]:MethodDeclaration[29788-30633]"
    }, {
      "left" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[30827-31017]:MethodDeclaration[30637-30827]"
    }, {
      "left" : "String escapeToDoubleQuotedJsString(String s)",
      "right" : "String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[31021-31233]:MethodDeclaration[30831-31043]"
    }, {
      "left" : "String regexpEscape(String s)",
      "right" : "String regexpEscape(String s)",
      "info" : "MethodDeclaration[31362-31431]:MethodDeclaration[31172-31241]"
    }, {
      "left" : "private String strEscape(\n      String s,\n      char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV,\n      boolean isRegexp)",
      "right" : "private String strEscape(\n      String s,\n      char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV,\n      boolean isRegexp)",
      "info" : "MethodDeclaration[31435-35696]:MethodDeclaration[31245-35506]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[35700-36390]:MethodDeclaration[35510-36200]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[36393-36883]:MethodDeclaration[36203-36693]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[36887-37288]:MethodDeclaration[36697-37098]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[37493-37895]:EnumDeclaration[37303-37705]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[37899-38090]:MethodDeclaration[37709-37900]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[38094-38429]:MethodDeclaration[37904-38239]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[38433-38783]:MethodDeclaration[38243-38593]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[38787-39874]:MethodDeclaration[38597-39684]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1207-1212]:TYPE_DECLARATION_KIND[1207-1212]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1213-1226]:SimpleName[1213-1226]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1824-1831]:Modifier[1824-1831]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1832-1845]:SimpleName[1832-1845]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1846-1867]:SingleVariableDeclaration[1846-1867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1869-2030]:Block[1869-2030]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1875-1889]:ExpressionStatement[1875-1889]"
    }, {
      "left" : "outputCharsetEncoder = null;",
      "right" : "outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1894-1922]:ExpressionStatement[1894-1922]"
    }, {
      "left" : "preferSingleQuotes = false;",
      "right" : "preferSingleQuotes = false;",
      "info" : "ExpressionStatement[1927-1954]:ExpressionStatement[1927-1954]"
    }, {
      "left" : "trustedStrings = true;",
      "right" : "trustedStrings = true;",
      "info" : "ExpressionStatement[1959-1981]:ExpressionStatement[1959-1981]"
    }, {
      "left" : "languageMode = LanguageMode.ECMASCRIPT5;",
      "right" : "languageMode = LanguageMode.ECMASCRIPT5;",
      "info" : "ExpressionStatement[1986-2026]:ExpressionStatement[1986-2026]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2034-2040]:Modifier[2034-2040]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleType[2041-2054]:SimpleType[2041-2054]"
    }, {
      "left" : "forCostEstimation",
      "right" : "forCostEstimation",
      "info" : "SimpleName[2055-2072]:SimpleName[2055-2072]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[2073-2094]:SingleVariableDeclaration[2073-2094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2096-2141]:Block[2096-2141]"
    }, {
      "left" : "return new CodeGenerator(consumer);",
      "right" : "return new CodeGenerator(consumer);",
      "info" : "ReturnStatement[2102-2137]:ReturnStatement[2102-2137]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[2145-2158]:SimpleName[2145-2158]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[2166-2187]:SingleVariableDeclaration[2166-2187]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[2195-2218]:SingleVariableDeclaration[2195-2218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2220-2928]:Block[2220-2928]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[2226-2240]:ExpressionStatement[2226-2240]"
    }, {
      "left" : "Charset outputCharset = options.getOutputCharset();",
      "right" : "Charset outputCharset = options.getOutputCharset();",
      "info" : "VariableDeclarationStatement[2246-2297]:VariableDeclarationStatement[2246-2297]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[2302-2766]:IfStatement[2302-2766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2367-2691]:Block[2367-2691]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[2652-2685]:ExpressionStatement[2652-2685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2697-2766]:Block[2697-2766]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[2705-2760]:ExpressionStatement[2705-2760]"
    }, {
      "left" : "this.preferSingleQuotes = options.preferSingleQuotes;",
      "right" : "this.preferSingleQuotes = options.preferSingleQuotes;",
      "info" : "ExpressionStatement[2771-2824]:ExpressionStatement[2771-2824]"
    }, {
      "left" : "this.trustedStrings = options.trustedStrings;",
      "right" : "this.trustedStrings = options.trustedStrings;",
      "info" : "ExpressionStatement[2829-2874]:ExpressionStatement[2829-2874]"
    }, {
      "left" : "this.languageMode = options.getLanguageOut();",
      "right" : "this.languageMode = options.getLanguageOut();",
      "info" : "ExpressionStatement[2879-2924]:ExpressionStatement[2879-2924]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2990-2996]:Modifier[2990-2996]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2997-3001]:PrimitiveType[2997-3001]"
    }, {
      "left" : "tagAsStrict",
      "right" : "tagAsStrict",
      "info" : "SimpleName[3002-3013]:SimpleName[3002-3013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3016-3047]:Block[3016-3047]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[3022-3043]:ExpressionStatement[3022-3043]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3051-3055]:PrimitiveType[3051-3055]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[3056-3059]:SimpleName[3056-3059]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[3060-3070]:SingleVariableDeclaration[3060-3070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3072-3094]:Block[3072-3094]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[3078-3090]:ExpressionStatement[3078-3090]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3098-3105]:Modifier[3098-3105]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3106-3110]:PrimitiveType[3106-3110]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[3111-3124]:SimpleName[3111-3124]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[3125-3142]:SingleVariableDeclaration[3125-3142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3144-3201]:Block[3144-3201]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[3150-3197]:ExpressionStatement[3150-3197]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3205-3209]:PrimitiveType[3205-3209]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[3210-3213]:SimpleName[3210-3213]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3214-3220]:SingleVariableDeclaration[3214-3220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3222-3254]:Block[3222-3254]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[3228-3250]:ExpressionStatement[3228-3250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3258-3262]:PrimitiveType[3258-3262]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[3263-3266]:SimpleName[3263-3266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3292-22898]:Block[3292-22708]"
    }, {
      "left" : "if (!cc.continueProcessing())",
      "right" : "if (!cc.continueProcessing())",
      "info" : "IfStatement[3298-3349]:IfStatement[3298-3349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3328-3349]:Block[3328-3349]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3336-3343]:ReturnStatement[3336-3343]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[3355-3378]:VariableDeclarationStatement[3355-3378]"
    }, {
      "left" : "String opstr = NodeUtil.opToStr(type);",
      "right" : "String opstr = NodeUtil.opToStr(type);",
      "info" : "VariableDeclarationStatement[3383-3421]:VariableDeclarationStatement[3383-3421]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[3426-3461]:VariableDeclarationStatement[3426-3461]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[3466-3497]:VariableDeclarationStatement[3466-3497]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[3502-3531]:VariableDeclarationStatement[3502-3531]"
    }, {
      "left" : "if (opstr != null && first != last)",
      "right" : "if (opstr != null && first != last)",
      "info" : "IfStatement[3572-4543]:IfStatement[3572-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3608-4543]:Block[3608-4353]"
    }, {
      "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "info" : "ExpressionStatement[3616-3771]:ExpressionStatement[3616-3771]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[3778-3812]:VariableDeclarationStatement[3778-3812]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[3927-3983]:VariableDeclarationStatement[3927-3983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4061-4175]:Block[4056-4241]"
    }, {
      "left" : "addExpr(first, p, context);",
      "right" : "addExpr(first, p, context);",
      "info" : "ExpressionStatement[4071-4098]:ExpressionStatement[4137-4164]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[4107-4129]:ExpressionStatement[4173-4195]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[4138-4167]:ExpressionStatement[4204-4233]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "info" : "IfStatement[4181-4523]:IfStatement[3991-4333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4437-4523]:Block[4247-4333]"
    }, {
      "left" : "unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);",
      "right" : "unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);",
      "info" : "ExpressionStatement[4447-4515]:ExpressionStatement[4257-4325]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4530-4537]:ReturnStatement[4340-4347]"
    }, {
      "left" : "cc.startSourceMapping(n);",
      "right" : "cc.startSourceMapping(n);",
      "info" : "ExpressionStatement[4549-4574]:ExpressionStatement[4359-4384]"
    }, {
      "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = getContextForNoInOperator(context);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, rhsContext);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, rhsContext);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString())) {\n          // Check for ECMASCRIPT3 keywords.\n          add(\"[\");\n          add(last);\n          add(\"]\");\n        } else {\n          add(\".\");\n          addIdentifier(last.getString());\n        }\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = getContextForNoInOperator(context);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, rhsContext);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, rhsContext);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString())) {\n          // Check for ECMASCRIPT3 keywords.\n          add(\"[\");\n          add(last);\n          add(\"]\");\n        } else {\n          add(\".\");\n          addIdentifier(last.getString());\n        }\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "info" : "SwitchStatement[4580-22865]:SwitchStatement[4390-22675]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[4602-4617]:SwitchCase[4412-4427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4618-5241]:Block[4428-5051]"
    }, {
      "left" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
      "right" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
      "info" : "ExpressionStatement[4628-4738]:ExpressionStatement[4438-4548]"
    }, {
      "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "info" : "ExpressionStatement[4747-4808]:ExpressionStatement[4557-4618]"
    }, {
      "left" : "add(\"try\");",
      "right" : "add(\"try\");",
      "info" : "ExpressionStatement[4818-4829]:ExpressionStatement[4628-4639]"
    }, {
      "left" : "add(first, Context.PRESERVE_BLOCK);",
      "right" : "add(first, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4838-4873]:ExpressionStatement[4648-4683]"
    }, {
      "left" : "Node catchblock = first.getNext().getFirstChild();",
      "right" : "Node catchblock = first.getNext().getFirstChild();",
      "info" : "VariableDeclarationStatement[4984-5034]:VariableDeclarationStatement[4794-4844]"
    }, {
      "left" : "if (catchblock != null)",
      "right" : "if (catchblock != null)",
      "info" : "IfStatement[5043-5105]:IfStatement[4853-4915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5067-5105]:Block[4877-4915]"
    }, {
      "left" : "add(catchblock);",
      "right" : "add(catchblock);",
      "info" : "ExpressionStatement[5079-5095]:ExpressionStatement[4889-4905]"
    }, {
      "left" : "if (childCount == 3)",
      "right" : "if (childCount == 3)",
      "info" : "IfStatement[5115-5218]:IfStatement[4925-5028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5136-5218]:Block[4946-5028]"
    }, {
      "left" : "add(\"finally\");",
      "right" : "add(\"finally\");",
      "info" : "ExpressionStatement[5148-5163]:ExpressionStatement[4958-4973]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[5174-5208]:ExpressionStatement[4984-5018]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5227-5233]:BreakStatement[5037-5043]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[5249-5266]:SwitchCase[5059-5076]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[5275-5317]:ExpressionStatement[5085-5127]"
    }, {
      "left" : "add(\"catch(\");",
      "right" : "add(\"catch(\");",
      "info" : "ExpressionStatement[5326-5340]:ExpressionStatement[5136-5150]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5349-5360]:ExpressionStatement[5159-5170]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[5369-5378]:ExpressionStatement[5179-5188]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[5387-5421]:ExpressionStatement[5197-5231]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5430-5436]:BreakStatement[5240-5246]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[5444-5461]:SwitchCase[5254-5271]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[5470-5512]:ExpressionStatement[5280-5322]"
    }, {
      "left" : "add(\"throw\");",
      "right" : "add(\"throw\");",
      "info" : "ExpressionStatement[5521-5534]:ExpressionStatement[5331-5344]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5543-5554]:ExpressionStatement[5353-5364]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[5662-5684]:ExpressionStatement[5472-5494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5693-5699]:BreakStatement[5503-5509]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[5707-5725]:SwitchCase[5517-5535]"
    }, {
      "left" : "add(\"return\");",
      "right" : "add(\"return\");",
      "info" : "ExpressionStatement[5734-5748]:ExpressionStatement[5544-5558]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[5757-5881]:IfStatement[5567-5691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5778-5811]:Block[5588-5621]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5790-5801]:ExpressionStatement[5600-5611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5817-5881]:Block[5627-5691]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[5829-5871]:ExpressionStatement[5639-5681]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[5890-5908]:ExpressionStatement[5700-5718]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5917-5923]:BreakStatement[5727-5733]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[5931-5946]:SwitchCase[5741-5756]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[5955-6077]:IfStatement[5765-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5974-6077]:Block[5784-5887]"
    }, {
      "left" : "add(\"var \");",
      "right" : "add(\"var \");",
      "info" : "ExpressionStatement[5986-5998]:ExpressionStatement[5796-5808]"
    }, {
      "left" : "addList(first, false, getContextForNoInOperator(context));",
      "right" : "addList(first, false, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[6009-6067]:ExpressionStatement[5819-5877]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6086-6092]:BreakStatement[5896-5902]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[6100-6122]:SwitchCase[5910-5932]"
    }, {
      "left" : "Preconditions.checkState(!n.getString().isEmpty());",
      "right" : "Preconditions.checkState(!n.getString().isEmpty());",
      "info" : "ExpressionStatement[6131-6182]:ExpressionStatement[5941-5992]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[6191-6220]:ExpressionStatement[6001-6030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6229-6235]:BreakStatement[6039-6045]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6243-6259]:SwitchCase[6053-6069]"
    }, {
      "left" : "if (first == null || first.isEmpty())",
      "right" : "if (first == null || first.isEmpty())",
      "info" : "IfStatement[6268-6805]:IfStatement[6078-6615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6306-6357]:Block[6116-6167]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[6318-6347]:ExpressionStatement[6128-6157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6363-6805]:Block[6173-6615]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6375-6417]:ExpressionStatement[6185-6227]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[6428-6457]:ExpressionStatement[6238-6267]"
    }, {
      "left" : "cc.addOp(\"=\", true);",
      "right" : "cc.addOp(\"=\", true);",
      "info" : "ExpressionStatement[6468-6488]:ExpressionStatement[6278-6298]"
    }, {
      "left" : "if (first.isComma())",
      "right" : "if (first.isComma())",
      "info" : "IfStatement[6499-6795]:IfStatement[6309-6605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6520-6611]:Block[6330-6421]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
      "info" : "ExpressionStatement[6534-6599]:ExpressionStatement[6344-6409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6617-6795]:Block[6427-6605]"
    }, {
      "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[6729-6783]:ExpressionStatement[6539-6593]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6814-6820]:BreakStatement[6624-6630]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6828-6848]:SwitchCase[6638-6658]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[6857-6866]:ExpressionStatement[6667-6676]"
    }, {
      "left" : "addArrayList(first);",
      "right" : "addArrayList(first);",
      "info" : "ExpressionStatement[6875-6895]:ExpressionStatement[6685-6705]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[6904-6913]:ExpressionStatement[6714-6723]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6922-6928]:BreakStatement[6732-6738]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[6936-6958]:SwitchCase[6746-6768]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[6967-6976]:ExpressionStatement[6777-6786]"
    }, {
      "left" : "addList(first);",
      "right" : "addList(first);",
      "info" : "ExpressionStatement[6985-7000]:ExpressionStatement[6795-6810]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[7009-7018]:ExpressionStatement[6819-6828]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7027-7033]:BreakStatement[6837-6843]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[7041-7058]:SwitchCase[6851-6868]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[7067-7109]:ExpressionStatement[6877-6919]"
    }, {
      "left" : "unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);",
      "right" : "unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);",
      "info" : "ExpressionStatement[7118-7223]:ExpressionStatement[6928-7033]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7232-7238]:BreakStatement[7042-7048]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[7246-7264]:SwitchCase[7056-7074]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[7273-7315]:ExpressionStatement[7083-7125]"
    }, {
      "left" : "cc.addNumber(n.getDouble());",
      "right" : "cc.addNumber(n.getDouble());",
      "info" : "ExpressionStatement[7324-7352]:ExpressionStatement[7134-7162]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7361-7367]:BreakStatement[7171-7177]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[7375-7393]:SwitchCase[7185-7203]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[7400-7416]:SwitchCase[7210-7226]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[7423-7438]:SwitchCase[7233-7248]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[7445-7463]:SwitchCase[7255-7273]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[7470-7485]:SwitchCase[7280-7295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7486-7744]:Block[7296-7554]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7558-7600]:ExpressionStatement[7368-7410]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[7609-7655]:ExpressionStatement[7419-7465]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "info" : "ExpressionStatement[7664-7721]:ExpressionStatement[7474-7531]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7730-7736]:BreakStatement[7540-7546]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[7752-7767]:SwitchCase[7562-7577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7768-8295]:Block[7578-8105]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7778-7820]:ExpressionStatement[7588-7630]"
    }, {
      "left" : "if (n.getFirstChild().isNumber())",
      "right" : "if (n.getFirstChild().isNumber())",
      "info" : "IfStatement[8028-8271]:IfStatement[7838-8081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8062-8129]:Block[7872-7939]"
    }, {
      "left" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "right" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "info" : "ExpressionStatement[8074-8119]:ExpressionStatement[7884-7929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8135-8271]:Block[7945-8081]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[8147-8193]:ExpressionStatement[7957-8003]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "info" : "ExpressionStatement[8204-8261]:ExpressionStatement[8014-8071]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8281-8287]:BreakStatement[8091-8097]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[8303-8319]:SwitchCase[8113-8129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8320-8688]:Block[8130-8498]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[8330-8372]:ExpressionStatement[8140-8182]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[8381-8415]:VariableDeclarationStatement[8191-8225]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[8424-8480]:VariableDeclarationStatement[8234-8290]"
    }, {
      "left" : "addExpr(first, p + 1, context);",
      "right" : "addExpr(first, p + 1, context);",
      "info" : "ExpressionStatement[8489-8520]:ExpressionStatement[8299-8330]"
    }, {
      "left" : "cc.addOp(\"?\", true);",
      "right" : "cc.addOp(\"?\", true);",
      "info" : "ExpressionStatement[8529-8549]:ExpressionStatement[8339-8359]"
    }, {
      "left" : "addExpr(first.getNext(), 1, rhsContext);",
      "right" : "addExpr(first.getNext(), 1, rhsContext);",
      "info" : "ExpressionStatement[8558-8598]:ExpressionStatement[8368-8408]"
    }, {
      "left" : "cc.addOp(\":\", true);",
      "right" : "cc.addOp(\":\", true);",
      "info" : "ExpressionStatement[8607-8627]:ExpressionStatement[8417-8437]"
    }, {
      "left" : "addExpr(last, 1, rhsContext);",
      "right" : "addExpr(last, 1, rhsContext);",
      "info" : "ExpressionStatement[8636-8665]:ExpressionStatement[8446-8475]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8674-8680]:BreakStatement[8484-8490]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[8696-8714]:SwitchCase[8506-8524]"
    }, {
      "left" : "if (!first.isString() ||\n            !last.isString())",
      "right" : "if (!first.isString() ||\n            !last.isString())",
      "info" : "IfStatement[8723-8851]:IfStatement[8533-8661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8778-8851]:Block[8588-8661]"
    }, {
      "left" : "throw new Error(\"Expected children to be strings\");",
      "right" : "throw new Error(\"Expected children to be strings\");",
      "info" : "ThrowStatement[8790-8841]:ThrowStatement[8600-8651]"
    }, {
      "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "info" : "VariableDeclarationStatement[8861-8931]:VariableDeclarationStatement[8671-8741]"
    }, {
      "left" : "if (childCount == 2)",
      "right" : "if (childCount == 2)",
      "info" : "IfStatement[8999-9166]:IfStatement[8809-8976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9020-9073]:Block[8830-8883]"
    }, {
      "left" : "add(regexp + last.getString());",
      "right" : "add(regexp + last.getString());",
      "info" : "ExpressionStatement[9032-9063]:ExpressionStatement[8842-8873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9079-9166]:Block[8889-8976]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[9091-9133]:ExpressionStatement[8901-8943]"
    }, {
      "left" : "add(regexp);",
      "right" : "add(regexp);",
      "info" : "ExpressionStatement[9144-9156]:ExpressionStatement[8954-8966]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9175-9181]:BreakStatement[8985-8991]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[9189-9209]:SwitchCase[8999-9019]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[9218-9317]:IfStatement[9028-9127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9250-9317]:Block[9060-9127]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[9262-9307]:ThrowStatement[9072-9117]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[9326-9368]:ExpressionStatement[9136-9178]"
    }, {
      "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[9377-9438]:VariableDeclarationStatement[9187-9248]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[9447-9499]:IfStatement[9257-9309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9468-9499]:Block[9278-9309]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[9480-9489]:ExpressionStatement[9290-9299]"
    }, {
      "left" : "add(\"function\");",
      "right" : "add(\"function\");",
      "info" : "ExpressionStatement[9509-9525]:ExpressionStatement[9319-9335]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[9534-9545]:ExpressionStatement[9344-9355]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[9555-9576]:ExpressionStatement[9365-9386]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[9585-9619]:ExpressionStatement[9395-9429]"
    }, {
      "left" : "cc.endFunction(context == Context.STATEMENT);",
      "right" : "cc.endFunction(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[9628-9673]:ExpressionStatement[9438-9483]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[9683-9735]:IfStatement[9493-9545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9704-9735]:Block[9514-9545]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[9716-9725]:ExpressionStatement[9526-9535]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9744-9750]:BreakStatement[9554-9560]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[9758-9780]:SwitchCase[9568-9590]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[9787-9809]:SwitchCase[9597-9619]"
    }, {
      "left" : "Preconditions.checkState(n.getParent().isObjectLit());",
      "right" : "Preconditions.checkState(n.getParent().isObjectLit());",
      "info" : "ExpressionStatement[9818-9872]:ExpressionStatement[9628-9682]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[9881-9923]:ExpressionStatement[9691-9733]"
    }, {
      "left" : "Preconditions.checkState(first.isFunction());",
      "right" : "Preconditions.checkState(first.isFunction());",
      "info" : "ExpressionStatement[9932-9977]:ExpressionStatement[9742-9787]"
    }, {
      "left" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "right" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "info" : "ExpressionStatement[10022-10092]:ExpressionStatement[9832-9902]"
    }, {
      "left" : "if (type == Token.GETTER_DEF)",
      "right" : "if (type == Token.GETTER_DEF)",
      "info" : "IfStatement[10101-10448]:IfStatement[9911-10258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10131-10287]:Block[9941-10097]"
    }, {
      "left" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "right" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "info" : "ExpressionStatement[10188-10254]:ExpressionStatement[9998-10064]"
    }, {
      "left" : "add(\"get \");",
      "right" : "add(\"get \");",
      "info" : "ExpressionStatement[10265-10277]:ExpressionStatement[10075-10087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10293-10448]:Block[10103-10258]"
    }, {
      "left" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "right" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "info" : "ExpressionStatement[10350-10415]:ExpressionStatement[10160-10225]"
    }, {
      "left" : "add(\"set \");",
      "right" : "add(\"set \");",
      "info" : "ExpressionStatement[10426-10438]:ExpressionStatement[10236-10248]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[10505-10533]:VariableDeclarationStatement[10315-10343]"
    }, {
      "left" : "Node fn = first;",
      "right" : "Node fn = first;",
      "info" : "VariableDeclarationStatement[10542-10558]:VariableDeclarationStatement[10352-10368]"
    }, {
      "left" : "Node parameters = fn.getChildAtIndex(1);",
      "right" : "Node parameters = fn.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[10567-10607]:VariableDeclarationStatement[10377-10417]"
    }, {
      "left" : "Node body = fn.getLastChild();",
      "right" : "Node body = fn.getLastChild();",
      "info" : "VariableDeclarationStatement[10616-10646]:VariableDeclarationStatement[10426-10456]"
    }, {
      "left" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name))",
      "right" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name))",
      "info" : "IfStatement[10690-11181]:IfStatement[10500-10991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10909-10941]:Block[10719-10751]"
    }, {
      "left" : "add(name);",
      "right" : "add(name);",
      "info" : "ExpressionStatement[10921-10931]:ExpressionStatement[10731-10741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10947-11181]:Block[10757-10991]"
    }, {
      "left" : "double d = getSimpleNumber(name);",
      "right" : "double d = getSimpleNumber(name);",
      "info" : "VariableDeclarationStatement[11016-11049]:VariableDeclarationStatement[10826-10859]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[11060-11171]:IfStatement[10870-10981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11082-11124]:Block[10892-10934]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[11096-11112]:ExpressionStatement[10906-10922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11130-11171]:Block[10940-10981]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[11144-11159]:ExpressionStatement[10954-10969]"
    }, {
      "left" : "add(parameters);",
      "right" : "add(parameters);",
      "info" : "ExpressionStatement[11191-11207]:ExpressionStatement[11001-11017]"
    }, {
      "left" : "add(body, Context.PRESERVE_BLOCK);",
      "right" : "add(body, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[11216-11250]:ExpressionStatement[11026-11060]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11259-11265]:BreakStatement[11069-11075]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[11273-11291]:SwitchCase[11083-11101]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[11298-11315]:SwitchCase[11108-11125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11316-12470]:Block[11126-12280]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[11326-11425]:IfStatement[11136-11235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11358-11425]:Block[11168-11235]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[11370-11415]:ThrowStatement[11180-11225]"
    }, {
      "left" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "right" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "info" : "VariableDeclarationStatement[11434-11492]:VariableDeclarationStatement[11244-11302]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[11501-11558]:IfStatement[11311-11368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11520-11558]:Block[11330-11368]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[11532-11548]:ExpressionStatement[11342-11358]"
    }, {
      "left" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
      "right" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
      "info" : "VariableDeclarationStatement[11568-11784]:VariableDeclarationStatement[11378-11594]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[11793-12329]:ForStatement[11603-12139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11842-12329]:Block[11652-12139]"
    }, {
      "left" : "add(c, Context.STATEMENT);",
      "right" : "add(c, Context.STATEMENT);",
      "info" : "ExpressionStatement[11854-11880]:ExpressionStatement[11664-11690]"
    }, {
      "left" : "if (c.isVar())",
      "right" : "if (c.isVar())",
      "info" : "IfStatement[11963-12022]:IfStatement[11773-11832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11978-12022]:Block[11788-11832]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[11992-12010]:ExpressionStatement[11802-11820]"
    }, {
      "left" : "if (c.isFunction())",
      "right" : "if (c.isFunction())",
      "info" : "IfStatement[12034-12100]:IfStatement[11844-11910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12054-12100]:Block[11864-11910]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[12068-12088]:ExpressionStatement[11878-11898]"
    }, {
      "left" : "if (preferLineBreaks)",
      "right" : "if (preferLineBreaks)",
      "info" : "IfStatement[12243-12319]:IfStatement[12053-12129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12265-12319]:Block[12075-12129]"
    }, {
      "left" : "cc.notePreferredLineBreak();",
      "right" : "cc.notePreferredLineBreak();",
      "info" : "ExpressionStatement[12279-12307]:ExpressionStatement[12089-12117]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[12338-12447]:IfStatement[12148-12257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12357-12447]:Block[12167-12257]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[12369-12437]:ExpressionStatement[12179-12247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12456-12462]:BreakStatement[12266-12272]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[12478-12493]:SwitchCase[12288-12303]"
    }, {
      "left" : "if (childCount == 4)",
      "right" : "if (childCount == 4)",
      "info" : "IfStatement[12502-13256]:IfStatement[12312-13066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12523-12966]:Block[12333-12776]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12535-12547]:ExpressionStatement[12345-12357]"
    }, {
      "left" : "if (first.isVar())",
      "right" : "if (first.isVar())",
      "info" : "IfStatement[12558-12720]:IfStatement[12368-12530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12577-12642]:Block[12387-12452]"
    }, {
      "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[12591-12630]:ExpressionStatement[12401-12440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12648-12720]:Block[12458-12530]"
    }, {
      "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[12662-12708]:ExpressionStatement[12472-12518]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12731-12740]:ExpressionStatement[12541-12550]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12751-12772]:ExpressionStatement[12561-12582]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12783-12792]:ExpressionStatement[12593-12602]"
    }, {
      "left" : "add(first.getNext().getNext());",
      "right" : "add(first.getNext().getNext());",
      "info" : "ExpressionStatement[12803-12834]:ExpressionStatement[12613-12644]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12845-12854]:ExpressionStatement[12655-12664]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12865-12956]:ExpressionStatement[12675-12766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12972-13256]:Block[12782-13066]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[12984-13026]:ExpressionStatement[12794-12836]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[13037-13049]:ExpressionStatement[12847-12859]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[13060-13071]:ExpressionStatement[12870-12881]"
    }, {
      "left" : "add(\"in\");",
      "right" : "add(\"in\");",
      "info" : "ExpressionStatement[13082-13092]:ExpressionStatement[12892-12902]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[13103-13124]:ExpressionStatement[12913-12934]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13135-13144]:ExpressionStatement[12945-12954]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[13155-13246]:ExpressionStatement[12965-13056]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13265-13271]:BreakStatement[13075-13081]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[13279-13293]:SwitchCase[13089-13103]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[13302-13344]:ExpressionStatement[13112-13154]"
    }, {
      "left" : "add(\"do\");",
      "right" : "add(\"do\");",
      "info" : "ExpressionStatement[13353-13363]:ExpressionStatement[13163-13173]"
    }, {
      "left" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "info" : "ExpressionStatement[13372-13422]:ExpressionStatement[13182-13232]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[13431-13445]:ExpressionStatement[13241-13255]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[13454-13464]:ExpressionStatement[13264-13274]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13473-13482]:ExpressionStatement[13283-13292]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[13491-13509]:ExpressionStatement[13301-13319]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13518-13524]:BreakStatement[13328-13334]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[13532-13549]:SwitchCase[13342-13359]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[13558-13600]:ExpressionStatement[13368-13410]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[13609-13623]:ExpressionStatement[13419-13433]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[13632-13643]:ExpressionStatement[13442-13453]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13652-13661]:ExpressionStatement[13462-13471]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[13670-13759]:ExpressionStatement[13480-13569]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13768-13774]:BreakStatement[13578-13584]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[13782-13799]:SwitchCase[13592-13609]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[13808-13850]:ExpressionStatement[13618-13660]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13859-13865]:BreakStatement[13669-13675]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[13873-13892]:SwitchCase[13683-13702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13893-14702]:Block[13703-14512]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "info" : "ExpressionStatement[13903-14030]:ExpressionStatement[13713-13840]"
    }, {
      "left" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
      "right" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
      "info" : "ExpressionStatement[14039-14143]:ExpressionStatement[13849-13953]"
    }, {
      "left" : "boolean needsParens = (first.isNumber());",
      "right" : "boolean needsParens = (first.isNumber());",
      "info" : "VariableDeclarationStatement[14152-14193]:VariableDeclarationStatement[13962-14003]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[14202-14250]:IfStatement[14012-14060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14219-14250]:Block[14029-14060]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[14231-14240]:ExpressionStatement[14041-14050]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14259-14310]:ExpressionStatement[14069-14120]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[14319-14367]:IfStatement[14129-14177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14336-14367]:Block[14146-14177]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[14348-14357]:ExpressionStatement[14158-14167]"
    }, {
      "left" : "if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString()))",
      "right" : "if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString()))",
      "info" : "IfStatement[14376-14679]:IfStatement[14186-14489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14482-14599]:Block[14292-14409]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[14539-14548]:ExpressionStatement[14349-14358]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[14559-14569]:ExpressionStatement[14369-14379]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[14580-14589]:ExpressionStatement[14390-14399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14605-14679]:Block[14415-14489]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[14617-14626]:ExpressionStatement[14427-14436]"
    }, {
      "left" : "addIdentifier(last.getString());",
      "right" : "addIdentifier(last.getString());",
      "info" : "ExpressionStatement[14637-14669]:ExpressionStatement[14447-14479]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14688-14694]:BreakStatement[14498-14504]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[14710-14729]:SwitchCase[14520-14539]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "info" : "ExpressionStatement[14738-14864]:ExpressionStatement[14548-14674]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14873-14924]:ExpressionStatement[14683-14734]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[14933-14942]:ExpressionStatement[14743-14752]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[14951-14972]:ExpressionStatement[14761-14782]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[14981-14990]:ExpressionStatement[14791-14800]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14999-15005]:BreakStatement[14809-14815]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[15013-15029]:SwitchCase[14823-14839]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[15038-15080]:ExpressionStatement[14848-14890]"
    }, {
      "left" : "add(\"with(\");",
      "right" : "add(\"with(\");",
      "info" : "ExpressionStatement[15089-15102]:ExpressionStatement[14899-14912]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[15111-15122]:ExpressionStatement[14921-14932]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[15131-15140]:ExpressionStatement[14941-14950]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[15149-15238]:ExpressionStatement[14959-15048]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15247-15253]:BreakStatement[15057-15063]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[15261-15276]:SwitchCase[15071-15086]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[15283-15298]:SwitchCase[15093-15108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15299-15792]:Block[15109-15602]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[15309-15351]:ExpressionStatement[15119-15161]"
    }, {
      "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "info" : "VariableDeclarationStatement[15360-15403]:VariableDeclarationStatement[15170-15213]"
    }, {
      "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "info" : "VariableDeclarationStatement[15412-15460]:VariableDeclarationStatement[15222-15270]"
    }, {
      "left" : "if (postProp != 0)",
      "right" : "if (postProp != 0)",
      "info" : "IfStatement[15578-15769]:IfStatement[15388-15579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15597-15700]:Block[15407-15510]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[15609-15660]:ExpressionStatement[15419-15470]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[15671-15690]:ExpressionStatement[15481-15500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15706-15769]:Block[15516-15579]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[15718-15737]:ExpressionStatement[15528-15547]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[15748-15759]:ExpressionStatement[15558-15569]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15778-15784]:BreakStatement[15588-15594]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15800-15816]:SwitchCase[15610-15626]"
    }, {
      "left" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "right" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "info" : "IfStatement[16401-16708]:IfStatement[16211-16518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16501-16629]:Block[16311-16439]"
    }, {
      "left" : "add(\"(0,\");",
      "right" : "add(\"(0,\");",
      "info" : "ExpressionStatement[16513-16524]:ExpressionStatement[16323-16334]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
      "info" : "ExpressionStatement[16535-16599]:ExpressionStatement[16345-16409]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16610-16619]:ExpressionStatement[16420-16429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16635-16708]:Block[16445-16518]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[16647-16698]:ExpressionStatement[16457-16508]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[16717-16726]:ExpressionStatement[16527-16536]"
    }, {
      "left" : "addList(first.getNext());",
      "right" : "addList(first.getNext());",
      "info" : "ExpressionStatement[16735-16760]:ExpressionStatement[16545-16570]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16769-16778]:ExpressionStatement[16579-16588]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16787-16793]:BreakStatement[16597-16603]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[16801-16815]:SwitchCase[16611-16625]"
    }, {
      "left" : "boolean hasElse = childCount == 3;",
      "right" : "boolean hasElse = childCount == 3;",
      "info" : "VariableDeclarationStatement[16824-16858]:VariableDeclarationStatement[16634-16668]"
    }, {
      "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "info" : "VariableDeclarationStatement[16867-16961]:VariableDeclarationStatement[16677-16771]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16970-17033]:IfStatement[16780-16843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16995-17033]:Block[16805-16843]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[17007-17023]:ExpressionStatement[16817-16833]"
    }, {
      "left" : "add(\"if(\");",
      "right" : "add(\"if(\");",
      "info" : "ExpressionStatement[17043-17054]:ExpressionStatement[16853-16864]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17063-17074]:ExpressionStatement[16873-16884]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[17083-17092]:ExpressionStatement[16893-16902]"
    }, {
      "left" : "if (hasElse)",
      "right" : "if (hasElse)",
      "info" : "IfStatement[17102-17493]:IfStatement[16912-17303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17115-17352]:Block[16925-17162]"
    }, {
      "left" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "right" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "info" : "ExpressionStatement[17127-17217]:ExpressionStatement[16937-17027]"
    }, {
      "left" : "add(\"else\");",
      "right" : "add(\"else\");",
      "info" : "ExpressionStatement[17228-17240]:ExpressionStatement[17038-17050]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[17251-17342]:ExpressionStatement[17061-17152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17358-17493]:Block[17168-17303]"
    }, {
      "left" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "info" : "ExpressionStatement[17370-17430]:ExpressionStatement[17180-17240]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[17441-17483]:ExpressionStatement[17251-17293]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[17503-17564]:IfStatement[17313-17374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17528-17564]:Block[17338-17374]"
    }, {
      "left" : "cc.endBlock();",
      "right" : "cc.endBlock();",
      "info" : "ExpressionStatement[17540-17554]:ExpressionStatement[17350-17364]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17573-17579]:BreakStatement[17383-17389]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[17587-17603]:SwitchCase[17397-17413]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17612-17654]:ExpressionStatement[17422-17464]"
    }, {
      "left" : "cc.addConstant(\"null\");",
      "right" : "cc.addConstant(\"null\");",
      "info" : "ExpressionStatement[17663-17686]:ExpressionStatement[17473-17496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17695-17701]:BreakStatement[17505-17511]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[17709-17725]:SwitchCase[17519-17535]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17734-17776]:ExpressionStatement[17544-17586]"
    }, {
      "left" : "add(\"this\");",
      "right" : "add(\"this\");",
      "info" : "ExpressionStatement[17785-17797]:ExpressionStatement[17595-17607]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17806-17812]:BreakStatement[17616-17622]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[17820-17837]:SwitchCase[17630-17647]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17846-17888]:ExpressionStatement[17656-17698]"
    }, {
      "left" : "cc.addConstant(\"false\");",
      "right" : "cc.addConstant(\"false\");",
      "info" : "ExpressionStatement[17897-17921]:ExpressionStatement[17707-17731]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17930-17936]:BreakStatement[17740-17746]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[17944-17960]:SwitchCase[17754-17770]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17969-18011]:ExpressionStatement[17779-17821]"
    }, {
      "left" : "cc.addConstant(\"true\");",
      "right" : "cc.addConstant(\"true\");",
      "info" : "ExpressionStatement[18020-18043]:ExpressionStatement[17830-17853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18052-18058]:BreakStatement[17862-17868]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[18066-18086]:SwitchCase[17876-17896]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[18095-18137]:ExpressionStatement[17905-17947]"
    }, {
      "left" : "add(\"continue\");",
      "right" : "add(\"continue\");",
      "info" : "ExpressionStatement[18146-18162]:ExpressionStatement[17956-17972]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[18171-18372]:IfStatement[17981-18182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18192-18372]:Block[18002-18182]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[18204-18320]:IfStatement[18014-18130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18230-18320]:Block[18040-18130]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[18244-18308]:ThrowStatement[18054-18118]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[18331-18340]:ExpressionStatement[18141-18150]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[18351-18362]:ExpressionStatement[18161-18172]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18381-18399]:ExpressionStatement[18191-18209]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18408-18414]:BreakStatement[18218-18224]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[18422-18442]:SwitchCase[18232-18252]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[18451-18493]:ExpressionStatement[18261-18303]"
    }, {
      "left" : "add(\"debugger\");",
      "right" : "add(\"debugger\");",
      "info" : "ExpressionStatement[18502-18518]:ExpressionStatement[18312-18328]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18527-18545]:ExpressionStatement[18337-18355]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18554-18560]:BreakStatement[18364-18370]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[18568-18585]:SwitchCase[18378-18395]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[18594-18636]:ExpressionStatement[18404-18446]"
    }, {
      "left" : "add(\"break\");",
      "right" : "add(\"break\");",
      "info" : "ExpressionStatement[18645-18658]:ExpressionStatement[18455-18468]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[18667-18868]:IfStatement[18477-18678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18688-18868]:Block[18498-18678]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[18700-18816]:IfStatement[18510-18626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18726-18816]:Block[18536-18626]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[18740-18804]:ThrowStatement[18550-18614]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[18827-18836]:ExpressionStatement[18637-18646]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[18847-18858]:ExpressionStatement[18657-18668]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18877-18895]:ExpressionStatement[18687-18705]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18904-18910]:BreakStatement[18714-18720]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[18918-18941]:SwitchCase[18728-18751]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[18950-18992]:ExpressionStatement[18760-18802]"
    }, {
      "left" : "add(first, Context.START_OF_EXPR);",
      "right" : "add(first, Context.START_OF_EXPR);",
      "info" : "ExpressionStatement[19001-19035]:ExpressionStatement[18811-18845]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[19044-19062]:ExpressionStatement[18854-18872]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19071-19077]:BreakStatement[18881-18887]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[19085-19100]:SwitchCase[18895-18910]"
    }, {
      "left" : "add(\"new \");",
      "right" : "add(\"new \");",
      "info" : "ExpressionStatement[19109-19121]:ExpressionStatement[18919-18931]"
    }, {
      "left" : "int precedence = NodeUtil.precedence(type);",
      "right" : "int precedence = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[19130-19173]:VariableDeclarationStatement[18940-18983]"
    }, {
      "left" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
      "right" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
      "info" : "IfStatement[19406-19570]:IfStatement[19216-19380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19494-19570]:Block[19304-19380]"
    }, {
      "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "info" : "ExpressionStatement[19506-19560]:ExpressionStatement[19316-19370]"
    }, {
      "left" : "addExpr(first, precedence, Context.OTHER);",
      "right" : "addExpr(first, precedence, Context.OTHER);",
      "info" : "ExpressionStatement[19579-19621]:ExpressionStatement[19389-19431]"
    }, {
      "left" : "Node next = first.getNext();",
      "right" : "Node next = first.getNext();",
      "info" : "VariableDeclarationStatement[19689-19717]:VariableDeclarationStatement[19499-19527]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[19726-19820]:IfStatement[19536-19630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19744-19820]:Block[19554-19630]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[19756-19765]:ExpressionStatement[19566-19575]"
    }, {
      "left" : "addList(next);",
      "right" : "addList(next);",
      "info" : "ExpressionStatement[19776-19790]:ExpressionStatement[19586-19600]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[19801-19810]:ExpressionStatement[19611-19620]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19829-19835]:BreakStatement[19639-19645]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[19843-19865]:SwitchCase[19653-19675]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");",
      "right" : "Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");",
      "info" : "ExpressionStatement[19874-19965]:ExpressionStatement[19684-19775]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[19974-19989]:ExpressionStatement[19784-19799]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19998-20004]:BreakStatement[19808-19814]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[20012-20030]:SwitchCase[19822-19840]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");",
      "right" : "Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");",
      "info" : "ExpressionStatement[20039-20128]:ExpressionStatement[19849-19938]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[20137-20152]:ExpressionStatement[19947-19962]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20161-20167]:BreakStatement[19971-19977]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[20175-20194]:SwitchCase[19985-20004]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[20203-20245]:ExpressionStatement[20013-20055]"
    }, {
      "left" : "add(\"delete \");",
      "right" : "add(\"delete \");",
      "info" : "ExpressionStatement[20254-20269]:ExpressionStatement[20064-20079]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[20278-20289]:ExpressionStatement[20088-20099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20298-20304]:BreakStatement[20108-20114]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[20312-20333]:SwitchCase[20122-20143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20334-21797]:Block[20144-21607]"
    }, {
      "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[20344-20401]:VariableDeclarationStatement[20154-20211]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[20410-20458]:IfStatement[20220-20268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20427-20458]:Block[20237-20268]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[20439-20448]:ExpressionStatement[20249-20258]"
    }, {
      "left" : "add(\"{\");",
      "right" : "add(\"{\");",
      "info" : "ExpressionStatement[20467-20476]:ExpressionStatement[20277-20286]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[20485-21699]:ForStatement[20295-21509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20534-21699]:Block[20344-21509]"
    }, {
      "left" : "if (c != first)",
      "right" : "if (c != first)",
      "info" : "IfStatement[20546-20607]:IfStatement[20356-20417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20562-20607]:Block[20372-20417]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[20576-20595]:ExpressionStatement[20386-20405]"
    }, {
      "left" : "if (c.isGetterDef() || c.isSetterDef())",
      "right" : "if (c.isGetterDef() || c.isSetterDef())",
      "info" : "IfStatement[20619-21689]:IfStatement[20429-21499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20659-20692]:Block[20469-20502]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[20673-20680]:ExpressionStatement[20483-20490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20698-21689]:Block[20508-21499]"
    }, {
      "left" : "Preconditions.checkState(c.isStringKey());",
      "right" : "Preconditions.checkState(c.isStringKey());",
      "info" : "ExpressionStatement[20712-20754]:ExpressionStatement[20522-20564]"
    }, {
      "left" : "String key = c.getString();",
      "right" : "String key = c.getString();",
      "info" : "VariableDeclarationStatement[20767-20794]:VariableDeclarationStatement[20577-20604]"
    }, {
      "left" : "if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key))",
      "right" : "if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key))",
      "info" : "IfStatement[20927-21597]:IfStatement[20737-21407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21273-21312]:Block[21083-21122]"
    }, {
      "left" : "add(key);",
      "right" : "add(key);",
      "info" : "ExpressionStatement[21289-21298]:ExpressionStatement[21099-21108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21318-21597]:Block[21128-21407]"
    }, {
      "left" : "double d = getSimpleNumber(key);",
      "right" : "double d = getSimpleNumber(key);",
      "info" : "VariableDeclarationStatement[21395-21427]:VariableDeclarationStatement[21205-21237]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[21442-21583]:IfStatement[21252-21393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21464-21514]:Block[21274-21324]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[21482-21498]:ExpressionStatement[21292-21308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21520-21583]:Block[21330-21393]"
    }, {
      "left" : "addExpr(c, 1, Context.OTHER);",
      "right" : "addExpr(c, 1, Context.OTHER);",
      "info" : "ExpressionStatement[21538-21567]:ExpressionStatement[21348-21377]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[21610-21619]:ExpressionStatement[21420-21429]"
    }, {
      "left" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
      "right" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
      "info" : "ExpressionStatement[21632-21677]:ExpressionStatement[21442-21487]"
    }, {
      "left" : "add(\"}\");",
      "right" : "add(\"}\");",
      "info" : "ExpressionStatement[21708-21717]:ExpressionStatement[21518-21527]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[21726-21774]:IfStatement[21536-21584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21743-21774]:Block[21553-21584]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[21755-21764]:ExpressionStatement[21565-21574]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21783-21789]:BreakStatement[21593-21599]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[21805-21823]:SwitchCase[21615-21633]"
    }, {
      "left" : "add(\"switch(\");",
      "right" : "add(\"switch(\");",
      "info" : "ExpressionStatement[21832-21847]:ExpressionStatement[21642-21657]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21856-21867]:ExpressionStatement[21666-21677]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[21876-21885]:ExpressionStatement[21686-21695]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[21894-21910]:ExpressionStatement[21704-21720]"
    }, {
      "left" : "addAllSiblings(first.getNext());",
      "right" : "addAllSiblings(first.getNext());",
      "info" : "ExpressionStatement[21919-21951]:ExpressionStatement[21729-21761]"
    }, {
      "left" : "cc.endBlock(context == Context.STATEMENT);",
      "right" : "cc.endBlock(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[21960-22002]:ExpressionStatement[21770-21812]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22011-22017]:BreakStatement[21821-21827]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[22025-22041]:SwitchCase[21835-21851]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[22050-22092]:ExpressionStatement[21860-21902]"
    }, {
      "left" : "add(\"case \");",
      "right" : "add(\"case \");",
      "info" : "ExpressionStatement[22101-22114]:ExpressionStatement[21911-21924]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[22123-22134]:ExpressionStatement[21933-21944]"
    }, {
      "left" : "addCaseBody(last);",
      "right" : "addCaseBody(last);",
      "info" : "ExpressionStatement[22143-22161]:ExpressionStatement[21953-21971]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22170-22176]:BreakStatement[21980-21986]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[22184-22208]:SwitchCase[21994-22018]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[22217-22259]:ExpressionStatement[22027-22069]"
    }, {
      "left" : "add(\"default\");",
      "right" : "add(\"default\");",
      "info" : "ExpressionStatement[22268-22283]:ExpressionStatement[22078-22093]"
    }, {
      "left" : "addCaseBody(first);",
      "right" : "addCaseBody(first);",
      "info" : "ExpressionStatement[22292-22311]:ExpressionStatement[22102-22121]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22320-22326]:BreakStatement[22130-22136]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[22334-22351]:SwitchCase[22144-22161]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[22360-22402]:ExpressionStatement[22170-22212]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[22411-22523]:IfStatement[22221-22333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22437-22523]:Block[22247-22333]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[22449-22513]:ThrowStatement[22259-22323]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[22532-22543]:ExpressionStatement[22342-22353]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[22552-22561]:ExpressionStatement[22362-22371]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "info" : "ExpressionStatement[22570-22658]:ExpressionStatement[22380-22468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22667-22673]:BreakStatement[22477-22483]"
    }, {
      "left" : "case Token.CAST:",
      "right" : "case Token.CAST:",
      "info" : "SwitchCase[22681-22697]:SwitchCase[22491-22507]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[22706-22715]:ExpressionStatement[22516-22525]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[22724-22735]:ExpressionStatement[22534-22545]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[22744-22753]:ExpressionStatement[22554-22563]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22762-22768]:BreakStatement[22572-22578]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22776-22784]:SwitchCase[22586-22594]"
    }, {
      "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "info" : "ThrowStatement[22793-22859]:ThrowStatement[22603-22669]"
    }, {
      "left" : "cc.endSourceMapping(n);",
      "right" : "cc.endSourceMapping(n);",
      "info" : "ExpressionStatement[22871-22894]:ExpressionStatement[22681-22704]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23143-23150]:Modifier[22953-22960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23151-23155]:PrimitiveType[22961-22965]"
    }, {
      "left" : "unrollBinaryOperator",
      "right" : "unrollBinaryOperator",
      "info" : "SimpleName[23156-23176]:SimpleName[22966-22986]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23184-23190]:SingleVariableDeclaration[22994-23000]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[23192-23198]:SingleVariableDeclaration[23002-23008]"
    }, {
      "left" : "String opStr",
      "right" : "String opStr",
      "info" : "SingleVariableDeclaration[23200-23212]:SingleVariableDeclaration[23010-23022]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[23214-23229]:SingleVariableDeclaration[23024-23039]"
    }, {
      "left" : "Context rhsContext",
      "right" : "Context rhsContext",
      "info" : "SingleVariableDeclaration[23237-23255]:SingleVariableDeclaration[23047-23065]"
    }, {
      "left" : "int leftPrecedence",
      "right" : "int leftPrecedence",
      "info" : "SingleVariableDeclaration[23257-23275]:SingleVariableDeclaration[23067-23085]"
    }, {
      "left" : "int rightPrecedence",
      "right" : "int rightPrecedence",
      "info" : "SingleVariableDeclaration[23277-23296]:SingleVariableDeclaration[23087-23106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23298-23739]:Block[23108-23549]"
    }, {
      "left" : "Node firstNonOperator = n.getFirstChild();",
      "right" : "Node firstNonOperator = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[23304-23346]:VariableDeclarationStatement[23114-23156]"
    }, {
      "left" : "while (firstNonOperator.getType() == op)",
      "right" : "while (firstNonOperator.getType() == op)",
      "info" : "WhileStatement[23351-23458]:WhileStatement[23161-23268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23392-23458]:Block[23202-23268]"
    }, {
      "left" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "right" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "info" : "ExpressionStatement[23400-23452]:ExpressionStatement[23210-23262]"
    }, {
      "left" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "right" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "info" : "ExpressionStatement[23464-23515]:ExpressionStatement[23274-23325]"
    }, {
      "left" : "Node current = firstNonOperator;",
      "right" : "Node current = firstNonOperator;",
      "info" : "VariableDeclarationStatement[23521-23553]:VariableDeclarationStatement[23331-23363]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[23558-23735]:DoStatement[23368-23545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23561-23713]:Block[23371-23523]"
    }, {
      "left" : "current = current.getParent();",
      "right" : "current = current.getParent();",
      "info" : "ExpressionStatement[23569-23599]:ExpressionStatement[23379-23409]"
    }, {
      "left" : "cc.addOp(opStr, true);",
      "right" : "cc.addOp(opStr, true);",
      "info" : "ExpressionStatement[23606-23628]:ExpressionStatement[23416-23438]"
    }, {
      "left" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "right" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "info" : "ExpressionStatement[23635-23707]:ExpressionStatement[23445-23517]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23743-23749]:Modifier[23553-23559]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23750-23757]:PrimitiveType[23560-23567]"
    }, {
      "left" : "isSimpleNumber",
      "right" : "isSimpleNumber",
      "info" : "SimpleName[23758-23772]:SimpleName[23568-23582]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[23773-23781]:SingleVariableDeclaration[23583-23591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23783-24051]:Block[23593-23861]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[23789-23810]:VariableDeclarationStatement[23599-23620]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[23815-23856]:IfStatement[23625-23666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23829-23856]:Block[23639-23666]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23837-23850]:ReturnStatement[23647-23660]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[23861-24004]:ForStatement[23671-23814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23903-24004]:Block[23713-23814]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[23911-23936]:VariableDeclarationStatement[23721-23746]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[23943-23998]:IfStatement[23753-23808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23967-23998]:Block[23777-23808]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23977-23990]:ReturnStatement[23787-23800]"
    }, {
      "left" : "return len == 1 || s.charAt(0) != '0';",
      "right" : "return len == 1 || s.charAt(0) != '0';",
      "info" : "ReturnStatement[24009-24047]:ReturnStatement[23819-23857]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24055-24061]:Modifier[23865-23871]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[24062-24068]:PrimitiveType[23872-23878]"
    }, {
      "left" : "getSimpleNumber",
      "right" : "getSimpleNumber",
      "info" : "SimpleName[24069-24084]:SimpleName[23879-23894]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[24085-24093]:SingleVariableDeclaration[23895-23903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24095-24408]:Block[23905-24218]"
    }, {
      "left" : "if (isSimpleNumber(s))",
      "right" : "if (isSimpleNumber(s))",
      "info" : "IfStatement[24101-24381]:IfStatement[23911-24191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24124-24381]:Block[23934-24191]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24132-24375]:TryStatement[23942-24185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24136-24267]:Block[23946-24077]"
    }, {
      "left" : "long l = Long.parseLong(s);",
      "right" : "long l = Long.parseLong(s);",
      "info" : "VariableDeclarationStatement[24146-24173]:VariableDeclarationStatement[23956-23983]"
    }, {
      "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "info" : "IfStatement[24182-24259]:IfStatement[23992-24069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24228-24259]:Block[24038-24069]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[24240-24249]:ReturnStatement[24050-24059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24300-24375]:Block[24110-24185]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[24386-24404]:ReturnStatement[24196-24214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24475-24482]:Modifier[24285-24292]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24483-24490]:PrimitiveType[24293-24300]"
    }, {
      "left" : "isIndirectEval",
      "right" : "isIndirectEval",
      "info" : "SimpleName[24491-24505]:SimpleName[24301-24315]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24506-24512]:SingleVariableDeclaration[24316-24322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24514-24621]:Block[24324-24431]"
    }, {
      "left" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[24520-24617]:ReturnStatement[24330-24427]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24898-24905]:Modifier[24708-24715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24906-24910]:PrimitiveType[24716-24720]"
    }, {
      "left" : "addNonEmptyStatement",
      "right" : "addNonEmptyStatement",
      "info" : "SimpleName[24911-24931]:SimpleName[24721-24741]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24939-24945]:SingleVariableDeclaration[24749-24755]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[24947-24962]:SingleVariableDeclaration[24757-24772]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[24964-24990]:SingleVariableDeclaration[24774-24800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24992-26722]:Block[24802-26532]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[24998-25021]:VariableDeclarationStatement[24808-24831]"
    }, {
      "left" : "if (!allowNonBlockChild && !n.isBlock())",
      "right" : "if (!allowNonBlockChild && !n.isBlock())",
      "info" : "IfStatement[25027-25122]:IfStatement[24837-24932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25068-25122]:Block[24878-24932]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[25076-25116]:ThrowStatement[24886-24926]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[25253-26379]:IfStatement[25063-26189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25270-26379]:Block[25080-26189]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[25278-25318]:VariableDeclarationStatement[25088-25128]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[25325-25578]:IfStatement[25135-25388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25341-25578]:Block[25151-25388]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[25351-25554]:IfStatement[25161-25364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25387-25504]:Block[25197-25314]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[25399-25415]:ExpressionStatement[25209-25225]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[25426-25494]:ExpressionStatement[25236-25304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25510-25554]:Block[25320-25364]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[25522-25544]:ExpressionStatement[25332-25354]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25563-25570]:ReturnStatement[25373-25380]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[25586-26299]:IfStatement[25396-26109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25602-26299]:Block[25412-26109]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[25770-25820]:VariableDeclarationStatement[25580-25630]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[25829-25888]:VariableDeclarationStatement[25639-25698]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[25897-26291]:IfStatement[25707-26101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25967-26186]:Block[25777-25996]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[25979-25995]:ExpressionStatement[25789-25805]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[26006-26048]:ExpressionStatement[25816-25858]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[26059-26079]:ExpressionStatement[25869-25889]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[26090-26158]:ExpressionStatement[25900-25968]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[26169-26176]:ReturnStatement[25979-25986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26192-26291]:Block[26002-26101]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[26247-26281]:ExpressionStatement[26057-26091]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[26307-26373]:IfStatement[26117-26183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26322-26373]:Block[26132-26183]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[26332-26365]:ExpressionStatement[26142-26175]"
    }, {
      "left" : "if (nodeToProcess.isEmpty())",
      "right" : "if (nodeToProcess.isEmpty())",
      "info" : "IfStatement[26385-26718]:IfStatement[26195-26528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26414-26450]:Block[26224-26260]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[26422-26444]:ExpressionStatement[26232-26254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26456-26718]:Block[26266-26528]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[26464-26492]:ExpressionStatement[26274-26302]"
    }, {
      "left" : "if (nodeToProcess.isVar())",
      "right" : "if (nodeToProcess.isVar())",
      "info" : "IfStatement[26649-26712]:IfStatement[26459-26522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26676-26712]:Block[26486-26522]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[26686-26704]:ExpressionStatement[26496-26514]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26819-26826]:Modifier[26629-26636]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26827-26834]:PrimitiveType[26637-26644]"
    }, {
      "left" : "isOneExactlyFunctionOrDo",
      "right" : "isOneExactlyFunctionOrDo",
      "info" : "SimpleName[26835-26859]:SimpleName[26645-26669]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26860-26866]:SingleVariableDeclaration[26670-26676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26868-27582]:Block[26678-27392]"
    }, {
      "left" : "if (n.isLabel())",
      "right" : "if (n.isLabel())",
      "info" : "IfStatement[26874-27578]:IfStatement[26684-27388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26891-27522]:Block[26701-27332]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[26899-26940]:VariableDeclarationStatement[26709-26750]"
    }, {
      "left" : "if (!labeledStatement.isBlock())",
      "right" : "if (!labeledStatement.isBlock())",
      "info" : "IfStatement[26947-27516]:IfStatement[26757-27326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26980-27048]:Block[26790-26858]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[26990-27040]:ReturnStatement[26800-26850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27054-27516]:Block[26864-27326]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[27229-27508]:IfStatement[27039-27318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27267-27347]:Block[27077-27157]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[27279-27337]:ReturnStatement[27089-27147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27353-27508]:Block[27163-27318]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27485-27498]:ReturnStatement[27295-27308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27528-27578]:Block[27338-27388]"
    }, {
      "left" : "return (n.isFunction() || n.isDo());",
      "right" : "return (n.isFunction() || n.isDo());",
      "info" : "ReturnStatement[27536-27572]:ReturnStatement[27346-27382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27586-27593]:Modifier[27396-27403]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27594-27598]:PrimitiveType[27404-27408]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[27599-27606]:SimpleName[27409-27416]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27607-27613]:SingleVariableDeclaration[27417-27423]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[27615-27632]:SingleVariableDeclaration[27425-27442]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[27634-27649]:SingleVariableDeclaration[27444-27459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27651-27885]:Block[27461-27695]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
      "info" : "IfStatement[27657-27881]:IfStatement[27467-27691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27777-27845]:Block[27587-27655]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[27785-27794]:ExpressionStatement[27595-27604]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[27801-27823]:ExpressionStatement[27611-27633]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[27830-27839]:ExpressionStatement[27640-27649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27851-27881]:Block[27661-27691]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[27859-27875]:ExpressionStatement[27669-27685]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27889-27893]:PrimitiveType[27699-27703]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27894-27901]:SimpleName[27704-27711]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27902-27918]:SingleVariableDeclaration[27712-27728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27920-27972]:Block[27730-27782]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[27926-27968]:ExpressionStatement[27736-27778]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27976-27980]:PrimitiveType[27786-27790]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27981-27988]:SimpleName[27791-27798]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27989-28005]:SingleVariableDeclaration[27799-27815]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[28007-28040]:SingleVariableDeclaration[27817-27850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28042-28115]:Block[27852-27925]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[28048-28111]:ExpressionStatement[27858-27921]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28119-28123]:PrimitiveType[27929-27933]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[28124-28131]:SimpleName[27934-27941]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[28132-28148]:SingleVariableDeclaration[27942-27958]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[28150-28183]:SingleVariableDeclaration[27960-27993]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[28200-28218]:SingleVariableDeclaration[28010-28028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28220-28579]:Block[28030-28389]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[28226-28575]:ForStatement[28036-28385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28281-28575]:Block[28091-28385]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[28289-28324]:VariableDeclarationStatement[28099-28134]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[28331-28569]:IfStatement[28141-28379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28344-28420]:Block[28154-28230]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[28354-28412]:ExpressionStatement[28164-28222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28426-28569]:Block[28236-28379]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28436-28455]:ExpressionStatement[28246-28265]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0,\n            getContextForNoInOperator(lhsContext));",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0,\n            getContextForNoInOperator(lhsContext));",
      "info" : "ExpressionStatement[28464-28561]:ExpressionStatement[28274-28371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28934-28938]:PrimitiveType[28744-28748]"
    }, {
      "left" : "addArrayList",
      "right" : "addArrayList",
      "info" : "SimpleName[28939-28951]:SimpleName[28749-28761]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[28952-28968]:SingleVariableDeclaration[28762-28778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28970-29269]:Block[28780-29079]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[28976-29005]:VariableDeclarationStatement[28786-28815]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[29010-29208]:ForStatement[28820-29018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29065-29208]:Block[28875-29018]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[29073-29132]:IfStatement[28883-28942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29095-29132]:Block[28905-28942]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[29105-29124]:ExpressionStatement[28915-28934]"
    }, {
      "left" : "addExpr(n, 1, Context.OTHER);",
      "right" : "addExpr(n, 1, Context.OTHER);",
      "info" : "ExpressionStatement[29139-29168]:ExpressionStatement[28949-28978]"
    }, {
      "left" : "lastWasEmpty = n.isEmpty();",
      "right" : "lastWasEmpty = n.isEmpty();",
      "info" : "ExpressionStatement[29175-29202]:ExpressionStatement[28985-29012]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[29214-29265]:IfStatement[29024-29075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29232-29265]:Block[29042-29075]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[29240-29259]:ExpressionStatement[29050-29069]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29273-29277]:PrimitiveType[29083-29087]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[29278-29289]:SimpleName[29088-29099]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[29290-29303]:SingleVariableDeclaration[29100-29113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29305-29375]:Block[29115-29185]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[29311-29330]:ExpressionStatement[29121-29140]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[29335-29349]:ExpressionStatement[29145-29159]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[29354-29371]:ExpressionStatement[29164-29181]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29379-29383]:PrimitiveType[29189-29193]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[29384-29398]:SimpleName[29194-29208]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29399-29405]:SingleVariableDeclaration[29209-29215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29407-29483]:Block[29217-29293]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[29413-29479]:ForStatement[29223-29289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29458-29479]:Block[29268-29289]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[29466-29473]:ExpressionStatement[29276-29283]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29567-29574]:Modifier[29377-29384]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29575-29579]:PrimitiveType[29385-29389]"
    }, {
      "left" : "addJsString",
      "right" : "addJsString",
      "info" : "SimpleName[29580-29591]:SimpleName[29390-29401]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29592-29598]:SingleVariableDeclaration[29402-29408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29600-29974]:Block[29410-29784]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[29606-29631]:VariableDeclarationStatement[29416-29441]"
    }, {
      "left" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "right" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "info" : "VariableDeclarationStatement[29636-29687]:VariableDeclarationStatement[29446-29497]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[29692-29970]:IfStatement[29502-29780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29707-29761]:Block[29517-29571]"
    }, {
      "left" : "add(jsString(n.getString(), useSlashV));",
      "right" : "add(jsString(n.getString(), useSlashV));",
      "info" : "ExpressionStatement[29715-29755]:ExpressionStatement[29525-29565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29767-29970]:Block[29577-29780]"
    }, {
      "left" : "String cached = escapedJsStrings.get(s);",
      "right" : "String cached = escapedJsStrings.get(s);",
      "info" : "VariableDeclarationStatement[29775-29815]:VariableDeclarationStatement[29585-29625]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[29822-29945]:IfStatement[29632-29755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29842-29945]:Block[29652-29755]"
    }, {
      "left" : "cached = jsString(n.getString(), useSlashV);",
      "right" : "cached = jsString(n.getString(), useSlashV);",
      "info" : "ExpressionStatement[29852-29896]:ExpressionStatement[29662-29706]"
    }, {
      "left" : "escapedJsStrings.put(s, cached);",
      "right" : "escapedJsStrings.put(s, cached);",
      "info" : "ExpressionStatement[29905-29937]:ExpressionStatement[29715-29747]"
    }, {
      "left" : "add(cached);",
      "right" : "add(cached);",
      "info" : "ExpressionStatement[29952-29964]:ExpressionStatement[29762-29774]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29978-29985]:Modifier[29788-29795]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29986-29992]:SimpleType[29796-29802]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[29993-30001]:SimpleName[29803-29811]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30002-30010]:SingleVariableDeclaration[29812-29820]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[30012-30029]:SingleVariableDeclaration[29822-29839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30031-30823]:Block[29841-30633]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[30037-30066]:VariableDeclarationStatement[29847-29876]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[30139-30293]:ForStatement[29949-30103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30176-30293]:Block[29986-30103]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[30184-30287]:SwitchStatement[29994-30097]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[30215-30224]:SwitchCase[30025-30034]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[30225-30235]:ExpressionStatement[30035-30045]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30236-30242]:BreakStatement[30046-30052]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[30251-30261]:SwitchCase[30061-30071]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[30262-30272]:ExpressionStatement[30072-30082]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30273-30279]:BreakStatement[30083-30089]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[30299-30331]:VariableDeclarationStatement[30109-30141]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[30336-30347]:VariableDeclarationStatement[30146-30157]"
    }, {
      "left" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
      "right" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
      "info" : "IfStatement[30352-30704]:IfStatement[30162-30514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30429-30567]:Block[30239-30377]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[30494-30507]:ExpressionStatement[30304-30317]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[30514-30533]:ExpressionStatement[30324-30343]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[30540-30561]:ExpressionStatement[30350-30371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30573-30704]:Block[30383-30514]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[30631-30644]:ExpressionStatement[30441-30454]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[30651-30672]:ExpressionStatement[30461-30482]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[30679-30698]:ExpressionStatement[30489-30508]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
      "info" : "ReturnStatement[30710-30819]:ReturnStatement[30520-30629]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30863-30869]:SimpleType[30673-30679]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[30870-30882]:SimpleName[30680-30692]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30883-30891]:SingleVariableDeclaration[30693-30701]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[30893-30928]:SingleVariableDeclaration[30703-30738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30930-31017]:Block[30740-30827]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
      "info" : "ReturnStatement[30936-31013]:ReturnStatement[30746-30823]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31109-31115]:SimpleType[30919-30925]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[31116-31144]:SimpleName[30926-30954]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[31145-31153]:SingleVariableDeclaration[30955-30963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31155-31233]:Block[30965-31043]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
      "info" : "ReturnStatement[31161-31229]:ReturnStatement[30971-31039]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31362-31368]:SimpleType[31172-31178]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[31369-31381]:SimpleName[31179-31191]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[31382-31390]:SingleVariableDeclaration[31192-31200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31392-31431]:Block[31202-31241]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[31398-31427]:ReturnStatement[31208-31237]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31509-31516]:Modifier[31319-31326]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31517-31523]:SimpleType[31327-31333]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[31524-31533]:SimpleName[31334-31343]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[31541-31549]:SingleVariableDeclaration[31351-31359]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[31557-31567]:SingleVariableDeclaration[31367-31377]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[31575-31599]:SingleVariableDeclaration[31385-31409]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[31607-31631]:SingleVariableDeclaration[31417-31441]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[31639-31661]:SingleVariableDeclaration[31449-31471]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[31669-31704]:SingleVariableDeclaration[31479-31514]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[31712-31729]:SingleVariableDeclaration[31522-31539]"
    }, {
      "left" : "boolean isRegexp",
      "right" : "boolean isRegexp",
      "info" : "SingleVariableDeclaration[31737-31753]:SingleVariableDeclaration[31547-31563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31755-35696]:Block[31565-35506]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[31761-31814]:VariableDeclarationStatement[31571-31624]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[31819-31836]:ExpressionStatement[31629-31646]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[31841-35644]:ForStatement[31651-35454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31878-35644]:Block[31688-35454]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[31886-31907]:VariableDeclarationStatement[31696-31717]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String endScript = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String startComment = \"!--\";\n\n          if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String endScript = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String startComment = \"!--\";\n\n          if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[31914-35638]:SwitchStatement[31724-35448]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[31935-31945]:SwitchCase[31745-31755]"
    }, {
      "left" : "sb.append(\"\\\\x00\");",
      "right" : "sb.append(\"\\\\x00\");",
      "info" : "ExpressionStatement[31946-31965]:ExpressionStatement[31756-31775]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31966-31972]:BreakStatement[31776-31782]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[31981-31995]:SwitchCase[31791-31805]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[32006-32115]:IfStatement[31816-31925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32021-32064]:Block[31831-31874]"
    }, {
      "left" : "sb.append(\"\\\\v\");",
      "right" : "sb.append(\"\\\\v\");",
      "info" : "ExpressionStatement[32035-32052]:ExpressionStatement[31845-31862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32070-32115]:Block[31880-31925]"
    }, {
      "left" : "sb.append(\"\\\\x0B\");",
      "right" : "sb.append(\"\\\\x0B\");",
      "info" : "ExpressionStatement[32084-32103]:ExpressionStatement[31894-31913]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32126-32132]:BreakStatement[31936-31942]"
    }, {
      "left" : "case '\\b':",
      "right" : "case '\\b':",
      "info" : "SwitchCase[32203-32213]:SwitchCase[32013-32023]"
    }, {
      "left" : "sb.append(\"\\\\b\");",
      "right" : "sb.append(\"\\\\b\");",
      "info" : "ExpressionStatement[32214-32231]:ExpressionStatement[32024-32041]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32232-32238]:BreakStatement[32042-32048]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[32247-32257]:SwitchCase[32057-32067]"
    }, {
      "left" : "sb.append(\"\\\\f\");",
      "right" : "sb.append(\"\\\\f\");",
      "info" : "ExpressionStatement[32258-32275]:ExpressionStatement[32068-32085]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32276-32282]:BreakStatement[32086-32092]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[32291-32301]:SwitchCase[32101-32111]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[32302-32319]:ExpressionStatement[32112-32129]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32320-32326]:BreakStatement[32130-32136]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[32335-32345]:SwitchCase[32145-32155]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[32346-32363]:ExpressionStatement[32156-32173]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32364-32370]:BreakStatement[32174-32180]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[32379-32389]:SwitchCase[32189-32199]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[32390-32407]:ExpressionStatement[32200-32217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32408-32414]:BreakStatement[32218-32224]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[32423-32433]:SwitchCase[32233-32243]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[32434-32461]:ExpressionStatement[32244-32271]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32462-32468]:BreakStatement[32272-32278]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[32477-32487]:SwitchCase[32287-32297]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[32488-32517]:ExpressionStatement[32298-32327]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32518-32524]:BreakStatement[32328-32334]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[32533-32543]:SwitchCase[32343-32353]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[32544-32573]:ExpressionStatement[32354-32383]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32574-32580]:BreakStatement[32384-32390]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[32649-32663]:SwitchCase[32459-32473]"
    }, {
      "left" : "sb.append(\"\\\\u2028\");",
      "right" : "sb.append(\"\\\\u2028\");",
      "info" : "ExpressionStatement[32664-32685]:ExpressionStatement[32474-32495]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32686-32692]:BreakStatement[32496-32502]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[32701-32715]:SwitchCase[32511-32525]"
    }, {
      "left" : "sb.append(\"\\\\u2029\");",
      "right" : "sb.append(\"\\\\u2029\");",
      "info" : "ExpressionStatement[32716-32737]:ExpressionStatement[32526-32547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32738-32744]:BreakStatement[32548-32554]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[32754-32763]:SwitchCase[32564-32573]"
    }, {
      "left" : "if (trustedStrings || isRegexp)",
      "right" : "if (trustedStrings || isRegexp)",
      "info" : "IfStatement[32839-32961]:IfStatement[32649-32771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32871-32910]:Block[32681-32720]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32885-32898]:ExpressionStatement[32695-32708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32916-32961]:Block[32726-32771]"
    }, {
      "left" : "sb.append(\"\\\\x3d\");",
      "right" : "sb.append(\"\\\\x3d\");",
      "info" : "ExpressionStatement[32930-32949]:ExpressionStatement[32740-32759]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32972-32978]:BreakStatement[32782-32788]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[32988-32997]:SwitchCase[32798-32807]"
    }, {
      "left" : "if (trustedStrings || isRegexp)",
      "right" : "if (trustedStrings || isRegexp)",
      "info" : "IfStatement[33008-33130]:IfStatement[32818-32940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33040-33079]:Block[32850-32889]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33054-33067]:ExpressionStatement[32864-32877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33085-33130]:Block[32895-32940]"
    }, {
      "left" : "sb.append(\"\\\\x26\");",
      "right" : "sb.append(\"\\\\x26\");",
      "info" : "ExpressionStatement[33099-33118]:ExpressionStatement[32909-32928]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33141-33147]:BreakStatement[32951-32957]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[33157-33166]:SwitchCase[32967-32976]"
    }, {
      "left" : "if (!trustedStrings && !isRegexp)",
      "right" : "if (!trustedStrings && !isRegexp)",
      "info" : "IfStatement[33177-33278]:IfStatement[32987-33088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33211-33278]:Block[33021-33088]"
    }, {
      "left" : "sb.append(GT_ESCAPED);",
      "right" : "sb.append(GT_ESCAPED);",
      "info" : "ExpressionStatement[33225-33247]:ExpressionStatement[33035-33057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33260-33266]:BreakStatement[33070-33076]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[33550-33794]:IfStatement[33360-33604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33701-33749]:Block[33511-33559]"
    }, {
      "left" : "sb.append(GT_ESCAPED);",
      "right" : "sb.append(GT_ESCAPED);",
      "info" : "ExpressionStatement[33715-33737]:ExpressionStatement[33525-33547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33755-33794]:Block[33565-33604]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33769-33782]:ExpressionStatement[33579-33592]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33805-33811]:BreakStatement[33615-33621]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[33820-33829]:SwitchCase[33630-33639]"
    }, {
      "left" : "if (!trustedStrings && !isRegexp)",
      "right" : "if (!trustedStrings && !isRegexp)",
      "info" : "IfStatement[33840-33941]:IfStatement[33650-33751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33874-33941]:Block[33684-33751]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[33888-33910]:ExpressionStatement[33698-33720]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33923-33929]:BreakStatement[33733-33739]"
    }, {
      "left" : "final String endScript = \"/script\";",
      "right" : "final String endScript = \"/script\";",
      "info" : "VariableDeclarationStatement[34097-34132]:VariableDeclarationStatement[33907-33942]"
    }, {
      "left" : "final String startComment = \"!--\";",
      "right" : "final String startComment = \"!--\";",
      "info" : "VariableDeclarationStatement[34179-34213]:VariableDeclarationStatement[33989-34023]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length()))",
      "right" : "if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length()))",
      "info" : "IfStatement[34225-34582]:IfStatement[34035-34392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34323-34371]:Block[34133-34181]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[34337-34359]:ExpressionStatement[34147-34169]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length()))",
      "right" : "if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length()))",
      "info" : "IfStatement[34377-34582]:IfStatement[34187-34392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34489-34537]:Block[34299-34347]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[34503-34525]:ExpressionStatement[34313-34335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34543-34582]:Block[34353-34392]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[34557-34570]:ExpressionStatement[34367-34380]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34593-34599]:BreakStatement[34403-34409]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34608-34616]:SwitchCase[34418-34426]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[34764-35630]:IfStatement[34574-35440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34798-35030]:Block[34608-34840]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[34812-35018]:IfStatement[34622-34828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34851-34894]:Block[34661-34704]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[34867-34880]:ExpressionStatement[34677-34690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34900-35018]:Block[34710-34828]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[34963-35004]:ExpressionStatement[34773-34814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35036-35630]:Block[34846-35440]"
    }, {
      "left" : "if (c > 0x1f && c < 0x7f)",
      "right" : "if (c > 0x1f && c < 0x7f)",
      "info" : "IfStatement[35273-35618]:IfStatement[35083-35428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35299-35342]:Block[35109-35152]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[35315-35328]:ExpressionStatement[35125-35138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35348-35618]:Block[35158-35428]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[35563-35604]:ExpressionStatement[35373-35414]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[35649-35666]:ExpressionStatement[35459-35476]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[35671-35692]:ReturnStatement[35481-35502]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35700-35706]:Modifier[35510-35516]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35707-35713]:SimpleType[35517-35523]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[35714-35730]:SimpleName[35524-35540]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[35731-35739]:SingleVariableDeclaration[35541-35549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35741-36390]:Block[35551-36200]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[35822-35870]:IfStatement[35632-35680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35847-35870]:Block[35657-35680]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[35855-35864]:ReturnStatement[35665-35674]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[35954-35993]:VariableDeclarationStatement[35764-35803]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[35998-36360]:ForStatement[35808-36170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36035-36360]:Block[35845-36170]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[36043-36064]:VariableDeclarationStatement[35853-35874]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[36232-36354]:IfStatement[36042-36164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36258-36289]:Block[36068-36099]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[36268-36281]:ExpressionStatement[36078-36091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36295-36354]:Block[36105-36164]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[36305-36346]:ExpressionStatement[36115-36156]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[36365-36386]:ReturnStatement[36175-36196]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36559-36566]:Modifier[36369-36376]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36567-36573]:Modifier[36377-36383]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36574-36577]:PrimitiveType[36384-36387]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[36578-36599]:SimpleName[36388-36409]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36600-36606]:SingleVariableDeclaration[36410-36416]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[36608-36620]:SingleVariableDeclaration[36418-36430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36622-36883]:Block[36432-36693]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[36628-36638]:VariableDeclarationStatement[36438-36448]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[36643-36670]:VariableDeclarationStatement[36453-36480]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[36675-36865]:ForStatement[36485-36675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36726-36865]:Block[36536-36675]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[36734-36859]:IfStatement[36544-36669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36751-36813]:Block[36561-36623]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount - i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount - i);",
      "info" : "ExpressionStatement[36761-36805]:ExpressionStatement[36571-36615]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[36819-36859]:IfStatement[36629-36669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36837-36859]:Block[36647-36669]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[36847-36851]:ExpressionStatement[36657-36661]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36870-36879]:ReturnStatement[36680-36689]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36946-36953]:Modifier[36756-36763]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36954-36960]:Modifier[36764-36770]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[36961-36965]:SimpleType[36771-36775]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[36966-36987]:SimpleName[36776-36797]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36988-36994]:SingleVariableDeclaration[36798-36804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36996-37288]:Block[36806-37098]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[37002-37267]:ForStatement[36812-37077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37063-37267]:Block[36873-37077]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[37071-37261]:IfStatement[36881-37071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37088-37210]:Block[36898-37020]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[37098-37137]:VariableDeclarationStatement[36908-36947]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[37146-37202]:IfStatement[36956-37012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37166-37202]:Block[36976-37012]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37178-37192]:ReturnStatement[36988-37002]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[37216-37261]:IfStatement[37026-37071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37234-37261]:Block[37044-37071]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[37244-37253]:ReturnStatement[37054-37063]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37272-37284]:ReturnStatement[37082-37094]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37899-37906]:Modifier[37709-37716]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[37907-37914]:SimpleType[37717-37724]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[37915-37946]:SimpleName[37725-37756]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[37947-37969]:SingleVariableDeclaration[37757-37779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37971-38090]:Block[37781-37900]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[37977-38086]:ReturnStatement[37787-37896]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38259-38266]:Modifier[38069-38076]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[38268-38275]:SimpleType[38078-38085]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[38276-38301]:SimpleName[38086-38111]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[38302-38317]:SingleVariableDeclaration[38112-38127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38319-38429]:Block[38129-38239]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[38325-38425]:ReturnStatement[38135-38235]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38507-38514]:Modifier[38317-38324]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38515-38521]:Modifier[38325-38331]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38522-38526]:PrimitiveType[38332-38336]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[38527-38560]:SimpleName[38337-38370]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[38568-38584]:SingleVariableDeclaration[38378-38394]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[38586-38592]:SingleVariableDeclaration[38396-38402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38594-38783]:Block[38404-38593]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38600-38779]:TryStatement[38410-38589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38604-38659]:Block[38414-38469]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[38612-38653]:ExpressionStatement[38422-38463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38683-38779]:Block[38493-38589]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[38742-38773]:ThrowStatement[38552-38583]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39019-39026]:Modifier[38829-38836]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39027-39033]:Modifier[38837-38843]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39034-39038]:PrimitiveType[38844-38848]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[39039-39072]:SimpleName[38849-38882]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[39080-39093]:SingleVariableDeclaration[38890-38903]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[39095-39109]:SingleVariableDeclaration[38905-38919]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[39124-39135]:SimpleType[38934-38945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39136-39874]:Block[38946-39684]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[39142-39646]:IfStatement[38952-39456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39193-39646]:Block[39003-39456]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[39455-39504]:VariableDeclarationStatement[39265-39314]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[39511-39565]:ExpressionStatement[39321-39375]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[39572-39626]:ExpressionStatement[39382-39436]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39633-39640]:ReturnStatement[39443-39450]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[39651-39870]:ExpressionStatement[39461-39680]"
    } ]
  },
  "interFileMappings" : { }
}