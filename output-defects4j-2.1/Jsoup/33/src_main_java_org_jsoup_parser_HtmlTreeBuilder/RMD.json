{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "TypeDeclaration[313-24414]:TypeDeclaration[313-24540]"
    }, {
      "left" : "private HtmlTreeBuilderState state;",
      "right" : "private HtmlTreeBuilderState state;",
      "info" : "FieldDeclaration[419-454]:FieldDeclaration[419-454]"
    }, {
      "left" : "private HtmlTreeBuilderState originalState;",
      "right" : "private HtmlTreeBuilderState originalState;",
      "info" : "FieldDeclaration[480-523]:FieldDeclaration[480-523]"
    }, {
      "left" : "private boolean baseUriSetFromDoc = false;",
      "right" : "private boolean baseUriSetFromDoc = false;",
      "info" : "FieldDeclaration[556-598]:FieldDeclaration[556-598]"
    }, {
      "left" : "private Element headElement;",
      "right" : "private Element headElement;",
      "info" : "FieldDeclaration[603-631]:FieldDeclaration[603-631]"
    }, {
      "left" : "private FormElement formElement;",
      "right" : "private FormElement formElement;",
      "info" : "FieldDeclaration[664-696]:FieldDeclaration[664-696]"
    }, {
      "left" : "private Element contextElement;",
      "right" : "private Element contextElement;",
      "info" : "FieldDeclaration[729-760]:FieldDeclaration[729-760]"
    }, {
      "left" : "private DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>();",
      "right" : "private DescendableLinkedList<Element> formattingElements = new DescendableLinkedList<Element>();",
      "info" : "FieldDeclaration[833-930]:FieldDeclaration[833-930]"
    }, {
      "left" : "private List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>();",
      "right" : "private List<Token.Character> pendingTableCharacters = new ArrayList<Token.Character>();",
      "info" : "FieldDeclaration[972-1060]:FieldDeclaration[972-1060]"
    }, {
      "left" : "private boolean framesetOk = true;",
      "right" : "private boolean framesetOk = true;",
      "info" : "FieldDeclaration[1102-1136]:FieldDeclaration[1102-1136]"
    }, {
      "left" : "private boolean fosterInserts = false;",
      "right" : "private boolean fosterInserts = false;",
      "info" : "FieldDeclaration[1170-1208]:FieldDeclaration[1170-1208]"
    }, {
      "left" : "private boolean fragmentParsing = false;",
      "right" : "private boolean fragmentParsing = false;",
      "info" : "FieldDeclaration[1251-1291]:FieldDeclaration[1251-1291]"
    }, {
      "left" : "HtmlTreeBuilder()",
      "right" : "HtmlTreeBuilder()",
      "info" : "MethodDeclaration[1330-1350]:MethodDeclaration[1330-1350]"
    }, {
      "left" : "Document parse(String input, String baseUri, ParseErrorList errors)",
      "right" : "Document parse(String input, String baseUri, ParseErrorList errors)",
      "info" : "MethodDeclaration[1356-1543]:MethodDeclaration[1356-1543]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors)",
      "right" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors)",
      "info" : "MethodDeclaration[1549-3679]:MethodDeclaration[1549-3679]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[3685-3823]:MethodDeclaration[3685-3823]"
    }, {
      "left" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "right" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[3829-3966]:MethodDeclaration[3829-3966]"
    }, {
      "left" : "void transition(HtmlTreeBuilderState state)",
      "right" : "void transition(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[3972-4051]:MethodDeclaration[3972-4051]"
    }, {
      "left" : "HtmlTreeBuilderState state()",
      "right" : "HtmlTreeBuilderState state()",
      "info" : "MethodDeclaration[4057-4115]:MethodDeclaration[4057-4115]"
    }, {
      "left" : "void markInsertionMode()",
      "right" : "void markInsertionMode()",
      "info" : "MethodDeclaration[4121-4184]:MethodDeclaration[4121-4184]"
    }, {
      "left" : "HtmlTreeBuilderState originalState()",
      "right" : "HtmlTreeBuilderState originalState()",
      "info" : "MethodDeclaration[4190-4264]:MethodDeclaration[4190-4264]"
    }, {
      "left" : "void framesetOk(boolean framesetOk)",
      "right" : "void framesetOk(boolean framesetOk)",
      "info" : "MethodDeclaration[4270-4351]:MethodDeclaration[4270-4351]"
    }, {
      "left" : "boolean framesetOk()",
      "right" : "boolean framesetOk()",
      "info" : "MethodDeclaration[4357-4412]:MethodDeclaration[4357-4412]"
    }, {
      "left" : "Document getDocument()",
      "right" : "Document getDocument()",
      "info" : "MethodDeclaration[4418-4468]:MethodDeclaration[4418-4468]"
    }, {
      "left" : "String getBaseUri()",
      "right" : "String getBaseUri()",
      "info" : "MethodDeclaration[4474-4525]:MethodDeclaration[4474-4525]"
    }, {
      "left" : "void maybeSetBaseUri(Element base)",
      "right" : "void maybeSetBaseUri(Element base)",
      "info" : "MethodDeclaration[4531-4986]:MethodDeclaration[4531-4986]"
    }, {
      "left" : "boolean isFragmentParsing()",
      "right" : "boolean isFragmentParsing()",
      "info" : "MethodDeclaration[4992-5059]:MethodDeclaration[4992-5059]"
    }, {
      "left" : "void error(HtmlTreeBuilderState state)",
      "right" : "void error(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[5065-5276]:MethodDeclaration[5065-5276]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[5282-5913]:MethodDeclaration[5282-6039]"
    }, {
      "left" : "Element insert(String startTagName)",
      "right" : "Element insert(String startTagName)",
      "info" : "MethodDeclaration[5919-6071]:MethodDeclaration[6045-6197]"
    }, {
      "left" : "void insert(Element el)",
      "right" : "void insert(Element el)",
      "info" : "MethodDeclaration[6077-6155]:MethodDeclaration[6203-6281]"
    }, {
      "left" : "Element insertEmpty(Token.StartTag startTag)",
      "right" : "Element insertEmpty(Token.StartTag startTag)",
      "info" : "MethodDeclaration[6161-6803]:MethodDeclaration[6287-6929]"
    }, {
      "left" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "right" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "info" : "MethodDeclaration[6809-7125]:MethodDeclaration[6935-7251]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[7131-7279]:MethodDeclaration[7257-7405]"
    }, {
      "left" : "void insert(Token.Character characterToken)",
      "right" : "void insert(Token.Character characterToken)",
      "info" : "MethodDeclaration[7285-7787]:MethodDeclaration[7411-7913]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[7793-8370]:MethodDeclaration[7919-8496]"
    }, {
      "left" : "Element pop()",
      "right" : "Element pop()",
      "info" : "MethodDeclaration[8376-8732]:MethodDeclaration[8502-8858]"
    }, {
      "left" : "void push(Element element)",
      "right" : "void push(Element element)",
      "info" : "MethodDeclaration[8738-8800]:MethodDeclaration[8864-8926]"
    }, {
      "left" : "DescendableLinkedList<Element> getStack()",
      "right" : "DescendableLinkedList<Element> getStack()",
      "info" : "MethodDeclaration[8806-8877]:MethodDeclaration[8932-9003]"
    }, {
      "left" : "boolean onStack(Element el)",
      "right" : "boolean onStack(Element el)",
      "info" : "MethodDeclaration[8883-8962]:MethodDeclaration[9009-9088]"
    }, {
      "left" : "private boolean isElementInQueue(DescendableLinkedList<Element> queue, Element element)",
      "right" : "private boolean isElementInQueue(DescendableLinkedList<Element> queue, Element element)",
      "info" : "MethodDeclaration[8968-9301]:MethodDeclaration[9094-9427]"
    }, {
      "left" : "Element getFromStack(String elName)",
      "right" : "Element getFromStack(String elName)",
      "info" : "MethodDeclaration[9307-9602]:MethodDeclaration[9433-9728]"
    }, {
      "left" : "boolean removeFromStack(Element el)",
      "right" : "boolean removeFromStack(Element el)",
      "info" : "MethodDeclaration[9608-9913]:MethodDeclaration[9734-10039]"
    }, {
      "left" : "void popStackToClose(String elName)",
      "right" : "void popStackToClose(String elName)",
      "info" : "MethodDeclaration[9919-10266]:MethodDeclaration[10045-10392]"
    }, {
      "left" : "void popStackToClose(String... elNames)",
      "right" : "void popStackToClose(String... elNames)",
      "info" : "MethodDeclaration[10272-10632]:MethodDeclaration[10398-10758]"
    }, {
      "left" : "void popStackToBefore(String elName)",
      "right" : "void popStackToBefore(String elName)",
      "info" : "MethodDeclaration[10638-10957]:MethodDeclaration[10764-11083]"
    }, {
      "left" : "void clearStackToTableContext()",
      "right" : "void clearStackToTableContext()",
      "info" : "MethodDeclaration[10963-11040]:MethodDeclaration[11089-11166]"
    }, {
      "left" : "void clearStackToTableBodyContext()",
      "right" : "void clearStackToTableBodyContext()",
      "info" : "MethodDeclaration[11046-11145]:MethodDeclaration[11172-11271]"
    }, {
      "left" : "void clearStackToTableRowContext()",
      "right" : "void clearStackToTableRowContext()",
      "info" : "MethodDeclaration[11151-11228]:MethodDeclaration[11277-11354]"
    }, {
      "left" : "private void clearStackToContext(String... nodeNames)",
      "right" : "private void clearStackToContext(String... nodeNames)",
      "info" : "MethodDeclaration[11234-11595]:MethodDeclaration[11360-11721]"
    }, {
      "left" : "Element aboveOnStack(Element el)",
      "right" : "Element aboveOnStack(Element el)",
      "info" : "MethodDeclaration[11601-11906]:MethodDeclaration[11727-12032]"
    }, {
      "left" : "void insertOnStackAfter(Element after, Element in)",
      "right" : "void insertOnStackAfter(Element after, Element in)",
      "info" : "MethodDeclaration[11912-12074]:MethodDeclaration[12038-12200]"
    }, {
      "left" : "void replaceOnStack(Element out, Element in)",
      "right" : "void replaceOnStack(Element out, Element in)",
      "info" : "MethodDeclaration[12080-12172]:MethodDeclaration[12206-12298]"
    }, {
      "left" : "private void replaceInQueue(LinkedList<Element> queue, Element out, Element in)",
      "right" : "private void replaceInQueue(LinkedList<Element> queue, Element out, Element in)",
      "info" : "MethodDeclaration[12178-12390]:MethodDeclaration[12304-12516]"
    }, {
      "left" : "void resetInsertionMode()",
      "right" : "void resetInsertionMode()",
      "info" : "MethodDeclaration[12396-14423]:MethodDeclaration[12522-14549]"
    }, {
      "left" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[14476-14656]:MethodDeclaration[14602-14782]"
    }, {
      "left" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[14662-15279]:MethodDeclaration[14788-15405]"
    }, {
      "left" : "boolean inScope(String[] targetNames)",
      "right" : "boolean inScope(String[] targetNames)",
      "info" : "MethodDeclaration[15285-15466]:MethodDeclaration[15411-15592]"
    }, {
      "left" : "boolean inScope(String targetName)",
      "right" : "boolean inScope(String targetName)",
      "info" : "MethodDeclaration[15472-15556]:MethodDeclaration[15598-15682]"
    }, {
      "left" : "boolean inScope(String targetName, String[] extras)",
      "right" : "boolean inScope(String targetName, String[] extras)",
      "info" : "MethodDeclaration[15562-15894]:MethodDeclaration[15688-16020]"
    }, {
      "left" : "boolean inListItemScope(String targetName)",
      "right" : "boolean inListItemScope(String targetName)",
      "info" : "MethodDeclaration[15900-16012]:MethodDeclaration[16026-16138]"
    }, {
      "left" : "boolean inButtonScope(String targetName)",
      "right" : "boolean inButtonScope(String targetName)",
      "info" : "MethodDeclaration[16018-16126]:MethodDeclaration[16144-16252]"
    }, {
      "left" : "boolean inTableScope(String targetName)",
      "right" : "boolean inTableScope(String targetName)",
      "info" : "MethodDeclaration[16132-16260]:MethodDeclaration[16258-16386]"
    }, {
      "left" : "boolean inSelectScope(String targetName)",
      "right" : "boolean inSelectScope(String targetName)",
      "info" : "MethodDeclaration[16266-16752]:MethodDeclaration[16392-16878]"
    }, {
      "left" : "void setHeadElement(Element headElement)",
      "right" : "void setHeadElement(Element headElement)",
      "info" : "MethodDeclaration[16758-16846]:MethodDeclaration[16884-16972]"
    }, {
      "left" : "Element getHeadElement()",
      "right" : "Element getHeadElement()",
      "info" : "MethodDeclaration[16852-16912]:MethodDeclaration[16978-17038]"
    }, {
      "left" : "boolean isFosterInserts()",
      "right" : "boolean isFosterInserts()",
      "info" : "MethodDeclaration[16918-16981]:MethodDeclaration[17044-17107]"
    }, {
      "left" : "void setFosterInserts(boolean fosterInserts)",
      "right" : "void setFosterInserts(boolean fosterInserts)",
      "info" : "MethodDeclaration[16987-17083]:MethodDeclaration[17113-17209]"
    }, {
      "left" : "FormElement getFormElement()",
      "right" : "FormElement getFormElement()",
      "info" : "MethodDeclaration[17089-17153]:MethodDeclaration[17215-17279]"
    }, {
      "left" : "void setFormElement(FormElement formElement)",
      "right" : "void setFormElement(FormElement formElement)",
      "info" : "MethodDeclaration[17159-17251]:MethodDeclaration[17285-17377]"
    }, {
      "left" : "void newPendingTableCharacters()",
      "right" : "void newPendingTableCharacters()",
      "info" : "MethodDeclaration[17257-17364]:MethodDeclaration[17383-17490]"
    }, {
      "left" : "List<Token.Character> getPendingTableCharacters()",
      "right" : "List<Token.Character> getPendingTableCharacters()",
      "info" : "MethodDeclaration[17370-17466]:MethodDeclaration[17496-17592]"
    }, {
      "left" : "void setPendingTableCharacters(List<Token.Character> pendingTableCharacters)",
      "right" : "void setPendingTableCharacters(List<Token.Character> pendingTableCharacters)",
      "info" : "MethodDeclaration[17472-17618]:MethodDeclaration[17598-17744]"
    }, {
      "left" : "void generateImpliedEndTags(String excludeTag)",
      "right" : "void generateImpliedEndTags(String excludeTag)",
      "info" : "MethodDeclaration[17624-18510]:MethodDeclaration[17750-18636]"
    }, {
      "left" : "void generateImpliedEndTags()",
      "right" : "void generateImpliedEndTags()",
      "info" : "MethodDeclaration[18516-18591]:MethodDeclaration[18642-18717]"
    }, {
      "left" : "boolean isSpecial(Element el)",
      "right" : "boolean isSpecial(Element el)",
      "info" : "MethodDeclaration[18597-19606]:MethodDeclaration[18723-19732]"
    }, {
      "left" : "void pushActiveFormattingElements(Element in)",
      "right" : "void pushActiveFormattingElements(Element in)",
      "info" : "MethodDeclaration[19646-20155]:MethodDeclaration[19772-20281]"
    }, {
      "left" : "private boolean isSameFormattingElement(Element a, Element b)",
      "right" : "private boolean isSameFormattingElement(Element a, Element b)",
      "info" : "MethodDeclaration[20161-20543]:MethodDeclaration[20287-20669]"
    }, {
      "left" : "void reconstructFormattingElements()",
      "right" : "void reconstructFormattingElements()",
      "info" : "MethodDeclaration[20549-22127]:MethodDeclaration[20675-22253]"
    }, {
      "left" : "void clearFormattingElementsToLastMarker()",
      "right" : "void clearFormattingElementsToLastMarker()",
      "info" : "MethodDeclaration[22133-22393]:MethodDeclaration[22259-22519]"
    }, {
      "left" : "void removeFromActiveFormattingElements(Element el)",
      "right" : "void removeFromActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[22399-22705]:MethodDeclaration[22525-22831]"
    }, {
      "left" : "boolean isInActiveFormattingElements(Element el)",
      "right" : "boolean isInActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[22711-22824]:MethodDeclaration[22837-22950]"
    }, {
      "left" : "Element getActiveFormattingElement(String nodeName)",
      "right" : "Element getActiveFormattingElement(String nodeName)",
      "info" : "MethodDeclaration[22830-23214]:MethodDeclaration[22956-23340]"
    }, {
      "left" : "void replaceActiveFormattingElement(Element out, Element in)",
      "right" : "void replaceActiveFormattingElement(Element out, Element in)",
      "info" : "MethodDeclaration[23220-23341]:MethodDeclaration[23346-23467]"
    }, {
      "left" : "void insertMarkerToFormattingElements()",
      "right" : "void insertMarkerToFormattingElements()",
      "info" : "MethodDeclaration[23347-23432]:MethodDeclaration[23473-23558]"
    }, {
      "left" : "void insertInFosterParent(Node in)",
      "right" : "void insertInFosterParent(Node in)",
      "info" : "MethodDeclaration[23438-24164]:MethodDeclaration[23564-24290]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24170-24412]:MethodDeclaration[24296-24538]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1348-1350]:Block[1348-1350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1438-1543]:Block[1438-1543]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[1448-1485]:ExpressionStatement[1448-1485]"
    }, {
      "left" : "return super.parse(input, baseUri, errors);",
      "right" : "return super.parse(input, baseUri, errors);",
      "info" : "ReturnStatement[1494-1537]:ReturnStatement[1494-1537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1652-3679]:Block[1652-3679]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[1693-1730]:ExpressionStatement[1693-1730]"
    }, {
      "left" : "initialiseParse(inputFragment, baseUri, errors);",
      "right" : "initialiseParse(inputFragment, baseUri, errors);",
      "info" : "ExpressionStatement[1739-1787]:ExpressionStatement[1739-1787]"
    }, {
      "left" : "contextElement = context;",
      "right" : "contextElement = context;",
      "info" : "ExpressionStatement[1796-1821]:ExpressionStatement[1796-1821]"
    }, {
      "left" : "fragmentParsing = true;",
      "right" : "fragmentParsing = true;",
      "info" : "ExpressionStatement[1830-1853]:ExpressionStatement[1830-1853]"
    }, {
      "left" : "Element root = null;",
      "right" : "Element root = null;",
      "info" : "VariableDeclarationStatement[1862-1882]:VariableDeclarationStatement[1862-1882]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[1892-3534]:IfStatement[1892-3534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1913-3534]:Block[1913-3534]"
    }, {
      "left" : "if (context.ownerDocument() != null)",
      "right" : "if (context.ownerDocument() != null)",
      "info" : "IfStatement[1927-2050]:IfStatement[1927-2050]"
    }, {
      "left" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "right" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "info" : "ExpressionStatement[1997-2050]:ExpressionStatement[1997-2050]"
    }, {
      "left" : "String contextTag = context.tagName();",
      "right" : "String contextTag = context.tagName();",
      "info" : "VariableDeclarationStatement[2111-2149]:VariableDeclarationStatement[2111-2149]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "right" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "info" : "IfStatement[2162-2882]:IfStatement[2162-2882]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[2230-2274]:ExpressionStatement[2230-2274]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "right" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "info" : "IfStatement[2292-2882]:IfStatement[2292-2882]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[2388-2433]:ExpressionStatement[2388-2433]"
    }, {
      "left" : "if (contextTag.equals(\"script\"))",
      "right" : "if (contextTag.equals(\"script\"))",
      "info" : "IfStatement[2451-2882]:IfStatement[2451-2882]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[2500-2548]:ExpressionStatement[2500-2548]"
    }, {
      "left" : "if (contextTag.equals((\"noscript\")))",
      "right" : "if (contextTag.equals((\"noscript\")))",
      "info" : "IfStatement[2566-2882]:IfStatement[2566-2882]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[2619-2661]:ExpressionStatement[2619-2661]"
    }, {
      "left" : "if (contextTag.equals(\"plaintext\"))",
      "right" : "if (contextTag.equals(\"plaintext\"))",
      "info" : "IfStatement[2712-2882]:IfStatement[2712-2882]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[2764-2806]:ExpressionStatement[2764-2806]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[2840-2882]:ExpressionStatement[2840-2882]"
    }, {
      "left" : "root = new Element(Tag.valueOf(\"html\"), baseUri);",
      "right" : "root = new Element(Tag.valueOf(\"html\"), baseUri);",
      "info" : "ExpressionStatement[2907-2956]:ExpressionStatement[2907-2956]"
    }, {
      "left" : "doc.appendChild(root);",
      "right" : "doc.appendChild(root);",
      "info" : "ExpressionStatement[2969-2991]:ExpressionStatement[2969-2991]"
    }, {
      "left" : "stack.push(root);",
      "right" : "stack.push(root);",
      "info" : "ExpressionStatement[3004-3021]:ExpressionStatement[3004-3021]"
    }, {
      "left" : "resetInsertionMode();",
      "right" : "resetInsertionMode();",
      "info" : "ExpressionStatement[3034-3055]:ExpressionStatement[3034-3055]"
    }, {
      "left" : "Elements contextChain = context.parents();",
      "right" : "Elements contextChain = context.parents();",
      "info" : "VariableDeclarationStatement[3223-3265]:VariableDeclarationStatement[3223-3265]"
    }, {
      "left" : "contextChain.add(0, context);",
      "right" : "contextChain.add(0, context);",
      "info" : "ExpressionStatement[3278-3307]:ExpressionStatement[3278-3307]"
    }, {
      "left" : "for (Element parent: contextChain)",
      "right" : "for (Element parent: contextChain)",
      "info" : "EnhancedForStatement[3320-3524]:EnhancedForStatement[3320-3524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3355-3524]:Block[3355-3524]"
    }, {
      "left" : "if (parent instanceof FormElement)",
      "right" : "if (parent instanceof FormElement)",
      "info" : "IfStatement[3373-3510]:IfStatement[3373-3510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3408-3510]:Block[3408-3510]"
    }, {
      "left" : "formElement = (FormElement) parent;",
      "right" : "formElement = (FormElement) parent;",
      "info" : "ExpressionStatement[3430-3465]:ExpressionStatement[3430-3465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3486-3492]:BreakStatement[3486-3492]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[3544-3556]:ExpressionStatement[3544-3556]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[3565-3673]:IfStatement[3565-3673]"
    }, {
      "left" : "return root.childNodes();",
      "right" : "return root.childNodes();",
      "info" : "ReturnStatement[3598-3623]:ReturnStatement[3598-3623]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[3649-3673]:ReturnStatement[3649-3673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3738-3823]:Block[3738-3823]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[3748-3769]:ExpressionStatement[3748-3769]"
    }, {
      "left" : "return this.state.process(token, this);",
      "right" : "return this.state.process(token, this);",
      "info" : "ReturnStatement[3778-3817]:ReturnStatement[3778-3817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3886-3966]:Block[3886-3966]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[3896-3917]:ExpressionStatement[3896-3917]"
    }, {
      "left" : "return state.process(token, this);",
      "right" : "return state.process(token, this);",
      "info" : "ReturnStatement[3926-3960]:ReturnStatement[3926-3960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4016-4051]:Block[4016-4051]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[4026-4045]:ExpressionStatement[4026-4045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4086-4115]:Block[4086-4115]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[4096-4109]:ReturnStatement[4096-4109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4146-4184]:Block[4146-4184]"
    }, {
      "left" : "originalState = state;",
      "right" : "originalState = state;",
      "info" : "ExpressionStatement[4156-4178]:ExpressionStatement[4156-4178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4227-4264]:Block[4227-4264]"
    }, {
      "left" : "return originalState;",
      "right" : "return originalState;",
      "info" : "ReturnStatement[4237-4258]:ReturnStatement[4237-4258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4306-4351]:Block[4306-4351]"
    }, {
      "left" : "this.framesetOk = framesetOk;",
      "right" : "this.framesetOk = framesetOk;",
      "info" : "ExpressionStatement[4316-4345]:ExpressionStatement[4316-4345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4378-4412]:Block[4378-4412]"
    }, {
      "left" : "return framesetOk;",
      "right" : "return framesetOk;",
      "info" : "ReturnStatement[4388-4406]:ReturnStatement[4388-4406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4441-4468]:Block[4441-4468]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[4451-4462]:ReturnStatement[4451-4462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4494-4525]:Block[4494-4525]"
    }, {
      "left" : "return baseUri;",
      "right" : "return baseUri;",
      "info" : "ReturnStatement[4504-4519]:ReturnStatement[4504-4519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4566-4986]:Block[4566-4986]"
    }, {
      "left" : "if (baseUriSetFromDoc)",
      "right" : "if (baseUriSetFromDoc)",
      "info" : "IfStatement[4576-4667]:IfStatement[4576-4667]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4660-4667]:ReturnStatement[4660-4667]"
    }, {
      "left" : "String href = base.absUrl(\"href\");",
      "right" : "String href = base.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[4677-4711]:VariableDeclarationStatement[4677-4711]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[4720-4980]:IfStatement[4720-4980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4744-4980]:Block[4744-4980]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[4786-4801]:ExpressionStatement[4786-4801]"
    }, {
      "left" : "baseUriSetFromDoc = true;",
      "right" : "baseUriSetFromDoc = true;",
      "info" : "ExpressionStatement[4814-4839]:ExpressionStatement[4814-4839]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[4852-4873]:ExpressionStatement[4852-4873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5020-5059]:Block[5020-5059]"
    }, {
      "left" : "return fragmentParsing;",
      "right" : "return fragmentParsing;",
      "info" : "ReturnStatement[5030-5053]:ReturnStatement[5030-5053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5104-5276]:Block[5104-5276]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[5114-5270]:IfStatement[5114-5270]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "info" : "ExpressionStatement[5152-5270]:ExpressionStatement[5152-5270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5322-5913]:Block[5322-6039]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[5484-5765]:IfStatement[5484-5891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5514-5765]:Block[5514-5891]"
    }, {
      "left" : "Element el = insertEmpty(startTag);",
      "right" : "Element el = insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[5528-5563]:VariableDeclarationStatement[5528-5563]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[5576-5590]:ExpressionStatement[5576-5590]"
    }, {
      "left" : "tokeniser.emit(new Token.EndTag(el.tagName()));",
      "right" : "tokeniser.emit(new Token.EndTag(el.tagName()));",
      "info" : "ExpressionStatement[5603-5650]:ExpressionStatement[5729-5776]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[5745-5755]:ReturnStatement[5871-5881]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);",
      "right" : "Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[5783-5868]:VariableDeclarationStatement[5909-5994]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[5877-5888]:ExpressionStatement[6003-6014]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[5897-5907]:ReturnStatement[6023-6033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5955-6071]:Block[6081-6197]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTagName), baseUri);",
      "right" : "Element el = new Element(Tag.valueOf(startTagName), baseUri);",
      "info" : "VariableDeclarationStatement[5965-6026]:VariableDeclarationStatement[6091-6152]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[6035-6046]:ExpressionStatement[6161-6172]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[6055-6065]:ReturnStatement[6181-6191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6101-6155]:Block[6227-6281]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[6111-6126]:ExpressionStatement[6237-6252]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[6135-6149]:ExpressionStatement[6261-6275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-6803]:Block[6332-6929]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name());",
      "right" : "Tag tag = Tag.valueOf(startTag.name());",
      "info" : "VariableDeclarationStatement[6216-6255]:VariableDeclarationStatement[6342-6381]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "right" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[6264-6324]:VariableDeclarationStatement[6390-6450]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[6333-6348]:ExpressionStatement[6459-6474]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[6357-6778]:IfStatement[6483-6904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6387-6778]:Block[6513-6904]"
    }, {
      "left" : "if (tag.isKnownTag())",
      "right" : "if (tag.isKnownTag())",
      "info" : "IfStatement[6401-6768]:IfStatement[6527-6894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6423-6555]:Block[6549-6681]"
    }, {
      "left" : "if (tag.isSelfClosing())",
      "right" : "if (tag.isSelfClosing())",
      "info" : "IfStatement[6441-6505]:IfStatement[6567-6631]"
    }, {
      "left" : "tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[6466-6505]:ExpressionStatement[6592-6631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6561-6768]:Block[6687-6894]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[6652-6673]:ExpressionStatement[6778-6799]"
    }, {
      "left" : "tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[6690-6729]:ExpressionStatement[6816-6855]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[6787-6797]:ReturnStatement[6913-6923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-7125]:Block[7000-7251]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name());",
      "right" : "Tag tag = Tag.valueOf(startTag.name());",
      "info" : "VariableDeclarationStatement[6884-6923]:VariableDeclarationStatement[7010-7049]"
    }, {
      "left" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "right" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[6932-7000]:VariableDeclarationStatement[7058-7126]"
    }, {
      "left" : "setFormElement(el);",
      "right" : "setFormElement(el);",
      "info" : "ExpressionStatement[7009-7028]:ExpressionStatement[7135-7154]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[7037-7052]:ExpressionStatement[7163-7178]"
    }, {
      "left" : "if (onStack)",
      "right" : "if (onStack)",
      "info" : "IfStatement[7061-7100]:IfStatement[7187-7226]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[7086-7100]:ExpressionStatement[7212-7226]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[7109-7119]:ReturnStatement[7235-7245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7171-7279]:Block[7297-7405]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "right" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "info" : "VariableDeclarationStatement[7181-7244]:VariableDeclarationStatement[7307-7370]"
    }, {
      "left" : "insertNode(comment);",
      "right" : "insertNode(comment);",
      "info" : "ExpressionStatement[7253-7273]:ExpressionStatement[7379-7399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7329-7787]:Block[7455-7913]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[7339-7349]:VariableDeclarationStatement[7465-7475]"
    }, {
      "left" : "if (StringUtil.in(currentElement().tagName(), \"script\", \"style\"))",
      "right" : "if (StringUtil.in(currentElement().tagName(), \"script\", \"style\"))",
      "info" : "IfStatement[7435-7649]:IfStatement[7561-7775]"
    }, {
      "left" : "node = new DataNode(characterToken.getData(), baseUri);",
      "right" : "node = new DataNode(characterToken.getData(), baseUri);",
      "info" : "ExpressionStatement[7513-7568]:ExpressionStatement[7639-7694]"
    }, {
      "left" : "node = new TextNode(characterToken.getData(), baseUri);",
      "right" : "node = new TextNode(characterToken.getData(), baseUri);",
      "info" : "ExpressionStatement[7594-7649]:ExpressionStatement[7720-7775]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[7658-7693]:ExpressionStatement[7784-7819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7828-8370]:Block[7954-8496]"
    }, {
      "left" : "if (stack.size() == 0)",
      "right" : "if (stack.size() == 0)",
      "info" : "IfStatement[7931-8125]:IfStatement[8057-8251]"
    }, {
      "left" : "doc.appendChild(node);",
      "right" : "doc.appendChild(node);",
      "info" : "ExpressionStatement[7966-7988]:ExpressionStatement[8092-8114]"
    }, {
      "left" : "if (isFosterInserts())",
      "right" : "if (isFosterInserts())",
      "info" : "IfStatement[8002-8125]:IfStatement[8128-8251]"
    }, {
      "left" : "insertInFosterParent(node);",
      "right" : "insertInFosterParent(node);",
      "info" : "ExpressionStatement[8037-8064]:ExpressionStatement[8163-8190]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[8090-8125]:ExpressionStatement[8216-8251]"
    }, {
      "left" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "right" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "info" : "IfStatement[8190-8364]:IfStatement[8316-8490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8260-8364]:Block[8386-8490]"
    }, {
      "left" : "if (formElement != null)",
      "right" : "if (formElement != null)",
      "info" : "IfStatement[8274-8354]:IfStatement[8400-8480]"
    }, {
      "left" : "formElement.addElement((Element) node);",
      "right" : "formElement.addElement((Element) node);",
      "info" : "ExpressionStatement[8315-8354]:ExpressionStatement[8441-8480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8390-8732]:Block[8516-8858]"
    }, {
      "left" : "if (stack.peekLast().nodeName().equals(\"td\") && !state.name().equals(\"InCell\"))",
      "right" : "if (stack.peekLast().nodeName().equals(\"td\") && !state.name().equals(\"InCell\"))",
      "info" : "IfStatement[8447-8584]:IfStatement[8573-8710]"
    }, {
      "left" : "Validate.isFalse(true, \"pop td not in cell\");",
      "right" : "Validate.isFalse(true, \"pop td not in cell\");",
      "info" : "ExpressionStatement[8539-8584]:ExpressionStatement[8665-8710]"
    }, {
      "left" : "if (stack.peekLast().nodeName().equals(\"html\"))",
      "right" : "if (stack.peekLast().nodeName().equals(\"html\"))",
      "info" : "IfStatement[8593-8693]:IfStatement[8719-8819]"
    }, {
      "left" : "Validate.isFalse(true, \"popping html!\");",
      "right" : "Validate.isFalse(true, \"popping html!\");",
      "info" : "ExpressionStatement[8653-8693]:ExpressionStatement[8779-8819]"
    }, {
      "left" : "return stack.pollLast();",
      "right" : "return stack.pollLast();",
      "info" : "ReturnStatement[8702-8726]:ReturnStatement[8828-8852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8765-8800]:Block[8891-8926]"
    }, {
      "left" : "stack.add(element);",
      "right" : "stack.add(element);",
      "info" : "ExpressionStatement[8775-8794]:ExpressionStatement[8901-8920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8848-8877]:Block[8974-9003]"
    }, {
      "left" : "return stack;",
      "right" : "return stack;",
      "info" : "ReturnStatement[8858-8871]:ReturnStatement[8984-8997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8911-8962]:Block[9037-9088]"
    }, {
      "left" : "return isElementInQueue(stack, el);",
      "right" : "return isElementInQueue(stack, el);",
      "info" : "ReturnStatement[8921-8956]:ReturnStatement[9047-9082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9056-9301]:Block[9182-9427]"
    }, {
      "left" : "Iterator<Element> it = queue.descendingIterator();",
      "right" : "Iterator<Element> it = queue.descendingIterator();",
      "info" : "VariableDeclarationStatement[9066-9116]:VariableDeclarationStatement[9192-9242]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[9125-9273]:WhileStatement[9251-9399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9146-9273]:Block[9272-9399]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[9160-9185]:VariableDeclarationStatement[9286-9311]"
    }, {
      "left" : "if (next == element)",
      "right" : "if (next == element)",
      "info" : "IfStatement[9198-9263]:IfStatement[9324-9389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9219-9263]:Block[9345-9389]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9237-9249]:ReturnStatement[9363-9375]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9282-9295]:ReturnStatement[9408-9421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9343-9602]:Block[9469-9728]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[9353-9403]:VariableDeclarationStatement[9479-9529]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[9412-9575]:WhileStatement[9538-9701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9433-9575]:Block[9559-9701]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[9447-9472]:VariableDeclarationStatement[9573-9598]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[9485-9565]:IfStatement[9611-9691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9521-9565]:Block[9647-9691]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[9539-9551]:ReturnStatement[9665-9677]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9584-9596]:ReturnStatement[9710-9722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9644-9913]:Block[9770-10039]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[9654-9704]:VariableDeclarationStatement[9780-9830]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[9713-9885]:WhileStatement[9839-10011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9734-9885]:Block[9860-10011]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[9748-9773]:VariableDeclarationStatement[9874-9899]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[9786-9875]:IfStatement[9912-10001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9802-9875]:Block[9928-10001]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[9820-9832]:ExpressionStatement[9946-9958]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9849-9861]:ReturnStatement[9975-9987]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9894-9907]:ReturnStatement[10020-10033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9955-10266]:Block[10081-10392]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[9965-10015]:VariableDeclarationStatement[10091-10141]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[10024-10260]:WhileStatement[10150-10386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10045-10260]:Block[10171-10386]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[10059-10084]:VariableDeclarationStatement[10185-10210]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[10097-10250]:IfStatement[10223-10376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10133-10200]:Block[10259-10326]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[10151-10163]:ExpressionStatement[10277-10289]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10180-10186]:BreakStatement[10306-10312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10206-10250]:Block[10332-10376]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[10224-10236]:ExpressionStatement[10350-10362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10312-10632]:Block[10438-10758]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[10322-10372]:VariableDeclarationStatement[10448-10498]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[10381-10626]:WhileStatement[10507-10752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10402-10626]:Block[10528-10752]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[10416-10441]:VariableDeclarationStatement[10542-10567]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), elNames))",
      "right" : "if (StringUtil.in(next.nodeName(), elNames))",
      "info" : "IfStatement[10454-10616]:IfStatement[10580-10742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10499-10566]:Block[10625-10692]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[10517-10529]:ExpressionStatement[10643-10655]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10546-10552]:BreakStatement[10672-10678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10572-10616]:Block[10698-10742]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[10590-10602]:ExpressionStatement[10716-10728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10675-10957]:Block[10801-11083]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[10685-10735]:VariableDeclarationStatement[10811-10861]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[10744-10951]:WhileStatement[10870-11077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10765-10951]:Block[10891-11077]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[10779-10804]:VariableDeclarationStatement[10905-10930]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[10817-10941]:IfStatement[10943-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10853-10891]:Block[10979-11017]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10871-10877]:BreakStatement[10997-11003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10897-10941]:Block[11023-11067]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[10915-10927]:ExpressionStatement[11041-11053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10995-11040]:Block[11121-11166]"
    }, {
      "left" : "clearStackToContext(\"table\");",
      "right" : "clearStackToContext(\"table\");",
      "info" : "ExpressionStatement[11005-11034]:ExpressionStatement[11131-11160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11082-11145]:Block[11208-11271]"
    }, {
      "left" : "clearStackToContext(\"tbody\", \"tfoot\", \"thead\");",
      "right" : "clearStackToContext(\"tbody\", \"tfoot\", \"thead\");",
      "info" : "ExpressionStatement[11092-11139]:ExpressionStatement[11218-11265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11186-11228]:Block[11312-11354]"
    }, {
      "left" : "clearStackToContext(\"tr\");",
      "right" : "clearStackToContext(\"tr\");",
      "info" : "ExpressionStatement[11196-11222]:ExpressionStatement[11322-11348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11288-11595]:Block[11414-11721]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[11298-11348]:VariableDeclarationStatement[11424-11474]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[11357-11589]:WhileStatement[11483-11715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11378-11589]:Block[11504-11715]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[11392-11417]:VariableDeclarationStatement[11518-11543]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "right" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "info" : "IfStatement[11430-11579]:IfStatement[11556-11705]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11527-11533]:BreakStatement[11653-11659]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[11567-11579]:ExpressionStatement[11693-11705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11634-11906]:Block[11760-12032]"
    }, {
      "left" : "assert onStack(el);",
      "right" : "assert onStack(el);",
      "info" : "AssertStatement[11644-11663]:AssertStatement[11770-11789]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[11672-11722]:VariableDeclarationStatement[11798-11848]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[11731-11879]:WhileStatement[11857-12005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11752-11879]:Block[11878-12005]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[11766-11791]:VariableDeclarationStatement[11892-11917]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[11804-11869]:IfStatement[11930-11995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11820-11869]:Block[11946-11995]"
    }, {
      "left" : "return it.next();",
      "right" : "return it.next();",
      "info" : "ReturnStatement[11838-11855]:ReturnStatement[11964-11981]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11888-11900]:ReturnStatement[12014-12026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11963-12074]:Block[12089-12200]"
    }, {
      "left" : "int i = stack.lastIndexOf(after);",
      "right" : "int i = stack.lastIndexOf(after);",
      "info" : "VariableDeclarationStatement[11973-12006]:VariableDeclarationStatement[12099-12132]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[12015-12040]:ExpressionStatement[12141-12166]"
    }, {
      "left" : "stack.add(i+1, in);",
      "right" : "stack.add(i+1, in);",
      "info" : "ExpressionStatement[12049-12068]:ExpressionStatement[12175-12194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12125-12172]:Block[12251-12298]"
    }, {
      "left" : "replaceInQueue(stack, out, in);",
      "right" : "replaceInQueue(stack, out, in);",
      "info" : "ExpressionStatement[12135-12166]:ExpressionStatement[12261-12292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12258-12390]:Block[12384-12516]"
    }, {
      "left" : "int i = queue.lastIndexOf(out);",
      "right" : "int i = queue.lastIndexOf(out);",
      "info" : "VariableDeclarationStatement[12268-12299]:VariableDeclarationStatement[12394-12425]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[12308-12333]:ExpressionStatement[12434-12459]"
    }, {
      "left" : "queue.remove(i);",
      "right" : "queue.remove(i);",
      "info" : "ExpressionStatement[12342-12358]:ExpressionStatement[12468-12484]"
    }, {
      "left" : "queue.add(i, in);",
      "right" : "queue.add(i, in);",
      "info" : "ExpressionStatement[12367-12384]:ExpressionStatement[12493-12510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12422-14423]:Block[12548-14549]"
    }, {
      "left" : "boolean last = false;",
      "right" : "boolean last = false;",
      "info" : "VariableDeclarationStatement[12432-12453]:VariableDeclarationStatement[12558-12579]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[12462-12512]:VariableDeclarationStatement[12588-12638]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[12521-14417]:WhileStatement[12647-14543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12542-14417]:Block[12668-14543]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[12556-12581]:VariableDeclarationStatement[12682-12707]"
    }, {
      "left" : "if (!it.hasNext())",
      "right" : "if (!it.hasNext())",
      "info" : "IfStatement[12594-12696]:IfStatement[12720-12822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12613-12696]:Block[12739-12822]"
    }, {
      "left" : "last = true;",
      "right" : "last = true;",
      "info" : "ExpressionStatement[12631-12643]:ExpressionStatement[12757-12769]"
    }, {
      "left" : "node = contextElement;",
      "right" : "node = contextElement;",
      "info" : "ExpressionStatement[12660-12682]:ExpressionStatement[12786-12808]"
    }, {
      "left" : "String name = node.nodeName();",
      "right" : "String name = node.nodeName();",
      "info" : "VariableDeclarationStatement[12709-12739]:VariableDeclarationStatement[12835-12865]"
    }, {
      "left" : "if (\"select\".equals(name))",
      "right" : "if (\"select\".equals(name))",
      "info" : "IfStatement[12752-14407]:IfStatement[12878-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12779-12884]:Block[12905-13010]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InSelect);",
      "right" : "transition(HtmlTreeBuilderState.InSelect);",
      "info" : "ExpressionStatement[12797-12839]:ExpressionStatement[12923-12965]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12856-12862]:BreakStatement[12982-12988]"
    }, {
      "left" : "if ((\"td\".equals(name) || \"td\".equals(name) && !last))",
      "right" : "if ((\"td\".equals(name) || \"td\".equals(name) && !last))",
      "info" : "IfStatement[12890-14407]:IfStatement[13016-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12945-13040]:Block[13071-13166]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCell);",
      "right" : "transition(HtmlTreeBuilderState.InCell);",
      "info" : "ExpressionStatement[12963-13003]:ExpressionStatement[13089-13129]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13020-13026]:BreakStatement[13146-13152]"
    }, {
      "left" : "if (\"tr\".equals(name))",
      "right" : "if (\"tr\".equals(name))",
      "info" : "IfStatement[13046-14407]:IfStatement[13172-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13069-13163]:Block[13195-13289]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InRow);",
      "right" : "transition(HtmlTreeBuilderState.InRow);",
      "info" : "ExpressionStatement[13087-13126]:ExpressionStatement[13213-13252]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13143-13149]:BreakStatement[13269-13275]"
    }, {
      "left" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "right" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "info" : "IfStatement[13169-14407]:IfStatement[13295-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13243-13343]:Block[13369-13469]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTableBody);",
      "right" : "transition(HtmlTreeBuilderState.InTableBody);",
      "info" : "ExpressionStatement[13261-13306]:ExpressionStatement[13387-13432]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13323-13329]:BreakStatement[13449-13455]"
    }, {
      "left" : "if (\"caption\".equals(name))",
      "right" : "if (\"caption\".equals(name))",
      "info" : "IfStatement[13349-14407]:IfStatement[13475-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13377-13475]:Block[13503-13601]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCaption);",
      "right" : "transition(HtmlTreeBuilderState.InCaption);",
      "info" : "ExpressionStatement[13395-13438]:ExpressionStatement[13521-13564]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13455-13461]:BreakStatement[13581-13587]"
    }, {
      "left" : "if (\"colgroup\".equals(name))",
      "right" : "if (\"colgroup\".equals(name))",
      "info" : "IfStatement[13481-14407]:IfStatement[13607-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13510-13620]:Block[13636-13746]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "right" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "info" : "ExpressionStatement[13528-13575]:ExpressionStatement[13654-13701]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13592-13598]:BreakStatement[13718-13724]"
    }, {
      "left" : "if (\"table\".equals(name))",
      "right" : "if (\"table\".equals(name))",
      "info" : "IfStatement[13626-14407]:IfStatement[13752-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13652-13748]:Block[13778-13874]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTable);",
      "right" : "transition(HtmlTreeBuilderState.InTable);",
      "info" : "ExpressionStatement[13670-13711]:ExpressionStatement[13796-13837]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13728-13734]:BreakStatement[13854-13860]"
    }, {
      "left" : "if (\"head\".equals(name))",
      "right" : "if (\"head\".equals(name))",
      "info" : "IfStatement[13754-14407]:IfStatement[13880-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13779-13882]:Block[13905-14008]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[13797-13837]:ExpressionStatement[13923-13963]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13854-13860]:BreakStatement[13980-13986]"
    }, {
      "left" : "if (\"body\".equals(name))",
      "right" : "if (\"body\".equals(name))",
      "info" : "IfStatement[13888-14407]:IfStatement[14014-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13913-14008]:Block[14039-14134]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[13931-13971]:ExpressionStatement[14057-14097]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13988-13994]:BreakStatement[14114-14120]"
    }, {
      "left" : "if (\"frameset\".equals(name))",
      "right" : "if (\"frameset\".equals(name))",
      "info" : "IfStatement[14014-14407]:IfStatement[14140-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14043-14150]:Block[14169-14276]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InFrameset);",
      "right" : "transition(HtmlTreeBuilderState.InFrameset);",
      "info" : "ExpressionStatement[14061-14105]:ExpressionStatement[14187-14231]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14122-14128]:BreakStatement[14248-14254]"
    }, {
      "left" : "if (\"html\".equals(name))",
      "right" : "if (\"html\".equals(name))",
      "info" : "IfStatement[14156-14407]:IfStatement[14282-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14181-14288]:Block[14307-14414]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "right" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "info" : "ExpressionStatement[14199-14243]:ExpressionStatement[14325-14369]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14260-14266]:BreakStatement[14386-14392]"
    }, {
      "left" : "if (last)",
      "right" : "if (last)",
      "info" : "IfStatement[14294-14407]:IfStatement[14420-14533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14304-14407]:Block[14430-14533]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[14322-14362]:ExpressionStatement[14448-14488]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14379-14385]:BreakStatement[14505-14511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14568-14656]:Block[14694-14782]"
    }, {
      "left" : "return inSpecificScope(new String[]{targetName}, baseTypes, extraTypes);",
      "right" : "return inSpecificScope(new String[]{targetName}, baseTypes, extraTypes);",
      "info" : "ReturnStatement[14578-14650]:ReturnStatement[14704-14776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14757-15279]:Block[14883-15405]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[14767-14817]:VariableDeclarationStatement[14893-14943]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[14826-15201]:WhileStatement[14952-15327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14847-15201]:Block[14973-15327]"
    }, {
      "left" : "Element el = it.next();",
      "right" : "Element el = it.next();",
      "info" : "VariableDeclarationStatement[14861-14884]:VariableDeclarationStatement[14987-15010]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[14897-14927]:VariableDeclarationStatement[15023-15053]"
    }, {
      "left" : "if (StringUtil.in(elName, targetNames))",
      "right" : "if (StringUtil.in(elName, targetNames))",
      "info" : "IfStatement[14940-15008]:IfStatement[15066-15134]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14996-15008]:ReturnStatement[15122-15134]"
    }, {
      "left" : "if (StringUtil.in(elName, baseTypes))",
      "right" : "if (StringUtil.in(elName, baseTypes))",
      "info" : "IfStatement[15021-15088]:IfStatement[15147-15214]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15075-15088]:ReturnStatement[15201-15214]"
    }, {
      "left" : "if (extraTypes != null && StringUtil.in(elName, extraTypes))",
      "right" : "if (extraTypes != null && StringUtil.in(elName, extraTypes))",
      "info" : "IfStatement[15101-15191]:IfStatement[15227-15317]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15178-15191]:ReturnStatement[15304-15317]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[15210-15251]:ExpressionStatement[15336-15377]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15260-15273]:ReturnStatement[15386-15399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15323-15466]:Block[15449-15592]"
    }, {
      "left" : "return inSpecificScope(targetNames, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, null);",
      "right" : "return inSpecificScope(targetNames, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, null);",
      "info" : "ReturnStatement[15333-15460]:ReturnStatement[15459-15586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15507-15556]:Block[15633-15682]"
    }, {
      "left" : "return inScope(targetName, null);",
      "right" : "return inScope(targetName, null);",
      "info" : "ReturnStatement[15517-15550]:ReturnStatement[15643-15676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15614-15894]:Block[15740-16020]"
    }, {
      "left" : "return inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);",
      "right" : "return inSpecificScope(targetName, new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}, extras);",
      "info" : "ReturnStatement[15624-15752]:ReturnStatement[15750-15878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15943-16012]:Block[16069-16138]"
    }, {
      "left" : "return inScope(targetName, new String[]{\"ol\", \"ul\"});",
      "right" : "return inScope(targetName, new String[]{\"ol\", \"ul\"});",
      "info" : "ReturnStatement[15953-16006]:ReturnStatement[16079-16132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16059-16126]:Block[16185-16252]"
    }, {
      "left" : "return inScope(targetName, new String[]{\"button\"});",
      "right" : "return inScope(targetName, new String[]{\"button\"});",
      "info" : "ReturnStatement[16069-16120]:ReturnStatement[16195-16246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16172-16260]:Block[16298-16386]"
    }, {
      "left" : "return inSpecificScope(targetName, new String[]{\"html\", \"table\"}, null);",
      "right" : "return inSpecificScope(targetName, new String[]{\"html\", \"table\"}, null);",
      "info" : "ReturnStatement[16182-16254]:ReturnStatement[16308-16380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16307-16752]:Block[16433-16878]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[16317-16367]:VariableDeclarationStatement[16443-16493]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[16376-16674]:WhileStatement[16502-16800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16397-16674]:Block[16523-16800]"
    }, {
      "left" : "Element el = it.next();",
      "right" : "Element el = it.next();",
      "info" : "VariableDeclarationStatement[16411-16434]:VariableDeclarationStatement[16537-16560]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[16447-16477]:VariableDeclarationStatement[16573-16603]"
    }, {
      "left" : "if (elName.equals(targetName))",
      "right" : "if (elName.equals(targetName))",
      "info" : "IfStatement[16490-16549]:IfStatement[16616-16675]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16537-16549]:ReturnStatement[16663-16675]"
    }, {
      "left" : "if (!StringUtil.in(elName, \"optgroup\", \"option\"))",
      "right" : "if (!StringUtil.in(elName, \"optgroup\", \"option\"))",
      "info" : "IfStatement[16562-16664]:IfStatement[16688-16790]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16651-16664]:ReturnStatement[16777-16790]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[16683-16724]:ExpressionStatement[16809-16850]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16733-16746]:ReturnStatement[16859-16872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16799-16846]:Block[16925-16972]"
    }, {
      "left" : "this.headElement = headElement;",
      "right" : "this.headElement = headElement;",
      "info" : "ExpressionStatement[16809-16840]:ExpressionStatement[16935-16966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16877-16912]:Block[17003-17038]"
    }, {
      "left" : "return headElement;",
      "right" : "return headElement;",
      "info" : "ReturnStatement[16887-16906]:ReturnStatement[17013-17032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16944-16981]:Block[17070-17107]"
    }, {
      "left" : "return fosterInserts;",
      "right" : "return fosterInserts;",
      "info" : "ReturnStatement[16954-16975]:ReturnStatement[17080-17101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17032-17083]:Block[17158-17209]"
    }, {
      "left" : "this.fosterInserts = fosterInserts;",
      "right" : "this.fosterInserts = fosterInserts;",
      "info" : "ExpressionStatement[17042-17077]:ExpressionStatement[17168-17203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17118-17153]:Block[17244-17279]"
    }, {
      "left" : "return formElement;",
      "right" : "return formElement;",
      "info" : "ReturnStatement[17128-17147]:ReturnStatement[17254-17273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17204-17251]:Block[17330-17377]"
    }, {
      "left" : "this.formElement = formElement;",
      "right" : "this.formElement = formElement;",
      "info" : "ExpressionStatement[17214-17245]:ExpressionStatement[17340-17371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17290-17364]:Block[17416-17490]"
    }, {
      "left" : "pendingTableCharacters = new ArrayList<Token.Character>();",
      "right" : "pendingTableCharacters = new ArrayList<Token.Character>();",
      "info" : "ExpressionStatement[17300-17358]:ExpressionStatement[17426-17484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17420-17466]:Block[17546-17592]"
    }, {
      "left" : "return pendingTableCharacters;",
      "right" : "return pendingTableCharacters;",
      "info" : "ReturnStatement[17430-17460]:ReturnStatement[17556-17586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17549-17618]:Block[17675-17744]"
    }, {
      "left" : "this.pendingTableCharacters = pendingTableCharacters;",
      "right" : "this.pendingTableCharacters = pendingTableCharacters;",
      "info" : "ExpressionStatement[17559-17612]:ExpressionStatement[17685-17738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18277-18510]:Block[18403-18636]"
    }, {
      "left" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"))\n            pop();",
      "right" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"))\n            pop();",
      "info" : "WhileStatement[18287-18504]:WhileStatement[18413-18630]"
    }, {
      "left" : "pop();",
      "right" : "pop();",
      "info" : "ExpressionStatement[18498-18504]:ExpressionStatement[18624-18630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18546-18591]:Block[18672-18717]"
    }, {
      "left" : "generateImpliedEndTags(null);",
      "right" : "generateImpliedEndTags(null);",
      "info" : "ExpressionStatement[18556-18585]:ExpressionStatement[18682-18711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18627-19606]:Block[18753-19732]"
    }, {
      "left" : "String name = el.nodeName();",
      "right" : "String name = el.nodeName();",
      "info" : "VariableDeclarationStatement[18723-18751]:VariableDeclarationStatement[18849-18877]"
    }, {
      "left" : "return StringUtil.in(name, \"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n                \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n                \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n                \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n                \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n                \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n                \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n                \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\");",
      "right" : "return StringUtil.in(name, \"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n                \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n                \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n                \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n                \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n                \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n                \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n                \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\");",
      "info" : "ReturnStatement[18760-19600]:ReturnStatement[18886-19726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19692-20155]:Block[19818-20281]"
    }, {
      "left" : "int numSeen = 0;",
      "right" : "int numSeen = 0;",
      "info" : "VariableDeclarationStatement[19702-19718]:VariableDeclarationStatement[19828-19844]"
    }, {
      "left" : "Iterator<Element> iter = formattingElements.descendingIterator();",
      "right" : "Iterator<Element> iter = formattingElements.descendingIterator();",
      "info" : "VariableDeclarationStatement[19727-19792]:VariableDeclarationStatement[19853-19918]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[19801-20113]:WhileStatement[19927-20239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19824-20113]:Block[19950-20239]"
    }, {
      "left" : "Element el =  iter.next();",
      "right" : "Element el =  iter.next();",
      "info" : "VariableDeclarationStatement[19838-19864]:VariableDeclarationStatement[19964-19990]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[19877-19925]:IfStatement[20003-20051]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19919-19925]:BreakStatement[20045-20051]"
    }, {
      "left" : "if (isSameFormattingElement(in, el))",
      "right" : "if (isSameFormattingElement(in, el))",
      "info" : "IfStatement[19939-20002]:IfStatement[20065-20128]"
    }, {
      "left" : "numSeen++;",
      "right" : "numSeen++;",
      "info" : "ExpressionStatement[19992-20002]:ExpressionStatement[20118-20128]"
    }, {
      "left" : "if (numSeen == 3)",
      "right" : "if (numSeen == 3)",
      "info" : "IfStatement[20016-20103]:IfStatement[20142-20229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20034-20103]:Block[20160-20229]"
    }, {
      "left" : "iter.remove();",
      "right" : "iter.remove();",
      "info" : "ExpressionStatement[20052-20066]:ExpressionStatement[20178-20192]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20083-20089]:BreakStatement[20209-20215]"
    }, {
      "left" : "formattingElements.add(in);",
      "right" : "formattingElements.add(in);",
      "info" : "ExpressionStatement[20122-20149]:ExpressionStatement[20248-20275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20223-20543]:Block[20349-20669]"
    }, {
      "left" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "right" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "info" : "ReturnStatement[20353-20509]:ReturnStatement[20479-20635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20586-22127]:Block[20712-22253]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[20596-20633]:VariableDeclarationStatement[20722-20759]"
    }, {
      "left" : "if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))",
      "right" : "if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))",
      "info" : "IfStatement[20642-20757]:IfStatement[20768-20883]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20750-20757]:ReturnStatement[20876-20883]"
    }, {
      "left" : "Element entry = formattingElements.getLast();",
      "right" : "Element entry = formattingElements.getLast();",
      "info" : "VariableDeclarationStatement[20767-20812]:VariableDeclarationStatement[20893-20938]"
    }, {
      "left" : "int pos = size - 1;",
      "right" : "int pos = size - 1;",
      "info" : "VariableDeclarationStatement[20821-20840]:VariableDeclarationStatement[20947-20966]"
    }, {
      "left" : "boolean skip = false;",
      "right" : "boolean skip = false;",
      "info" : "VariableDeclarationStatement[20849-20870]:VariableDeclarationStatement[20975-20996]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[20879-21269]:WhileStatement[21005-21395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20892-21269]:Block[21018-21395]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[20906-21024]:IfStatement[21032-21150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20920-21024]:Block[21046-21150]"
    }, {
      "left" : "skip = true;",
      "right" : "skip = true;",
      "info" : "ExpressionStatement[20975-20987]:ExpressionStatement[21101-21113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21004-21010]:BreakStatement[21130-21136]"
    }, {
      "left" : "entry = formattingElements.get(--pos);",
      "right" : "entry = formattingElements.get(--pos);",
      "info" : "ExpressionStatement[21037-21075]:ExpressionStatement[21163-21201]"
    }, {
      "left" : "if (entry == null || onStack(entry))",
      "right" : "if (entry == null || onStack(entry))",
      "info" : "IfStatement[21122-21221]:IfStatement[21248-21347]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21215-21221]:BreakStatement[21341-21347]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[21278-22121]:WhileStatement[21404-22247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21290-22121]:Block[21416-22247]"
    }, {
      "left" : "if (!skip)",
      "right" : "if (!skip)",
      "info" : "IfStatement[21304-21400]:IfStatement[21430-21526]"
    }, {
      "left" : "entry = formattingElements.get(++pos);",
      "right" : "entry = formattingElements.get(++pos);",
      "info" : "ExpressionStatement[21362-21400]:ExpressionStatement[21488-21526]"
    }, {
      "left" : "Validate.notNull(entry);",
      "right" : "Validate.notNull(entry);",
      "info" : "ExpressionStatement[21413-21437]:ExpressionStatement[21539-21563]"
    }, {
      "left" : "skip = false;",
      "right" : "skip = false;",
      "info" : "ExpressionStatement[21590-21603]:ExpressionStatement[21716-21729]"
    }, {
      "left" : "Element newEl = insert(entry.nodeName());",
      "right" : "Element newEl = insert(entry.nodeName());",
      "info" : "VariableDeclarationStatement[21651-21692]:VariableDeclarationStatement[21777-21818]"
    }, {
      "left" : "newEl.attributes().addAll(entry.attributes());",
      "right" : "newEl.attributes().addAll(entry.attributes());",
      "info" : "ExpressionStatement[21807-21853]:ExpressionStatement[21933-21979]"
    }, {
      "left" : "formattingElements.add(pos, newEl);",
      "right" : "formattingElements.add(pos, newEl);",
      "info" : "ExpressionStatement[21915-21950]:ExpressionStatement[22041-22076]"
    }, {
      "left" : "formattingElements.remove(pos + 1);",
      "right" : "formattingElements.remove(pos + 1);",
      "info" : "ExpressionStatement[21963-21998]:ExpressionStatement[22089-22124]"
    }, {
      "left" : "if (pos == size-1)",
      "right" : "if (pos == size-1)",
      "info" : "IfStatement[22030-22111]:IfStatement[22156-22237]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22105-22111]:BreakStatement[22231-22237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22176-22393]:Block[22302-22519]"
    }, {
      "left" : "while (!formattingElements.isEmpty())",
      "right" : "while (!formattingElements.isEmpty())",
      "info" : "WhileStatement[22186-22387]:WhileStatement[22312-22513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22224-22387]:Block[22350-22513]"
    }, {
      "left" : "Element el = formattingElements.peekLast();",
      "right" : "Element el = formattingElements.peekLast();",
      "info" : "VariableDeclarationStatement[22238-22281]:VariableDeclarationStatement[22364-22407]"
    }, {
      "left" : "formattingElements.removeLast();",
      "right" : "formattingElements.removeLast();",
      "info" : "ExpressionStatement[22294-22326]:ExpressionStatement[22420-22452]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[22339-22377]:IfStatement[22465-22503]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22371-22377]:BreakStatement[22497-22503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22451-22705]:Block[22577-22831]"
    }, {
      "left" : "Iterator<Element> it = formattingElements.descendingIterator();",
      "right" : "Iterator<Element> it = formattingElements.descendingIterator();",
      "info" : "VariableDeclarationStatement[22461-22524]:VariableDeclarationStatement[22587-22650]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[22533-22699]:WhileStatement[22659-22825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22554-22699]:Block[22680-22825]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[22568-22593]:VariableDeclarationStatement[22694-22719]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[22606-22689]:IfStatement[22732-22815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22622-22689]:Block[22748-22815]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[22640-22652]:ExpressionStatement[22766-22778]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22669-22675]:BreakStatement[22795-22801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22760-22824]:Block[22886-22950]"
    }, {
      "left" : "return isElementInQueue(formattingElements, el);",
      "right" : "return isElementInQueue(formattingElements, el);",
      "info" : "ReturnStatement[22770-22818]:ReturnStatement[22896-22944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22882-23214]:Block[23008-23340]"
    }, {
      "left" : "Iterator<Element> it = formattingElements.descendingIterator();",
      "right" : "Iterator<Element> it = formattingElements.descendingIterator();",
      "info" : "VariableDeclarationStatement[22892-22955]:VariableDeclarationStatement[23018-23081]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[22964-23187]:WhileStatement[23090-23313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22985-23187]:Block[23111-23313]"
    }, {
      "left" : "Element next = it.next();",
      "right" : "Element next = it.next();",
      "info" : "VariableDeclarationStatement[22999-23024]:VariableDeclarationStatement[23125-23150]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[23037-23177]:IfStatement[23163-23303]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23087-23093]:BreakStatement[23213-23219]"
    }, {
      "left" : "if (next.nodeName().equals(nodeName))",
      "right" : "if (next.nodeName().equals(nodeName))",
      "info" : "IfStatement[23111-23177]:IfStatement[23237-23303]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[23165-23177]:ReturnStatement[23291-23303]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23196-23208]:ReturnStatement[23322-23334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23281-23341]:Block[23407-23467]"
    }, {
      "left" : "replaceInQueue(formattingElements, out, in);",
      "right" : "replaceInQueue(formattingElements, out, in);",
      "info" : "ExpressionStatement[23291-23335]:ExpressionStatement[23417-23461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23387-23432]:Block[23513-23558]"
    }, {
      "left" : "formattingElements.add(null);",
      "right" : "formattingElements.add(null);",
      "info" : "ExpressionStatement[23397-23426]:ExpressionStatement[23523-23552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23473-24164]:Block[23599-24290]"
    }, {
      "left" : "Element fosterParent = null;",
      "right" : "Element fosterParent = null;",
      "info" : "VariableDeclarationStatement[23483-23511]:VariableDeclarationStatement[23609-23637]"
    }, {
      "left" : "Element lastTable = getFromStack(\"table\");",
      "right" : "Element lastTable = getFromStack(\"table\");",
      "info" : "VariableDeclarationStatement[23520-23562]:VariableDeclarationStatement[23646-23688]"
    }, {
      "left" : "boolean isLastTableParent = false;",
      "right" : "boolean isLastTableParent = false;",
      "info" : "VariableDeclarationStatement[23571-23605]:VariableDeclarationStatement[23697-23731]"
    }, {
      "left" : "if (lastTable != null)",
      "right" : "if (lastTable != null)",
      "info" : "IfStatement[23614-23940]:IfStatement[23740-24066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23637-23862]:Block[23763-23988]"
    }, {
      "left" : "if (lastTable.parent() != null)",
      "right" : "if (lastTable.parent() != null)",
      "info" : "IfStatement[23651-23852]:IfStatement[23777-23978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23683-23791]:Block[23809-23917]"
    }, {
      "left" : "fosterParent = lastTable.parent();",
      "right" : "fosterParent = lastTable.parent();",
      "info" : "ExpressionStatement[23701-23735]:ExpressionStatement[23827-23861]"
    }, {
      "left" : "isLastTableParent = true;",
      "right" : "isLastTableParent = true;",
      "info" : "ExpressionStatement[23752-23777]:ExpressionStatement[23878-23903]"
    }, {
      "left" : "fosterParent = aboveOnStack(lastTable);",
      "right" : "fosterParent = aboveOnStack(lastTable);",
      "info" : "ExpressionStatement[23813-23852]:ExpressionStatement[23939-23978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23868-23940]:Block[23994-24066]"
    }, {
      "left" : "fosterParent = stack.get(0);",
      "right" : "fosterParent = stack.get(0);",
      "info" : "ExpressionStatement[23902-23930]:ExpressionStatement[24028-24056]"
    }, {
      "left" : "if (isLastTableParent)",
      "right" : "if (isLastTableParent)",
      "info" : "IfStatement[23950-24158]:IfStatement[24076-24284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23973-24103]:Block[24099-24229]"
    }, {
      "left" : "Validate.notNull(lastTable);",
      "right" : "Validate.notNull(lastTable);",
      "info" : "ExpressionStatement[23987-24015]:ExpressionStatement[24113-24141]"
    }, {
      "left" : "lastTable.before(in);",
      "right" : "lastTable.before(in);",
      "info" : "ExpressionStatement[24072-24093]:ExpressionStatement[24198-24219]"
    }, {
      "left" : "fosterParent.appendChild(in);",
      "right" : "fosterParent.appendChild(in);",
      "info" : "ExpressionStatement[24129-24158]:ExpressionStatement[24255-24284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24209-24412]:Block[24335-24538]"
    }, {
      "left" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "right" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "info" : "ReturnStatement[24219-24406]:ReturnStatement[24345-24532]"
    } ]
  },
  "interFileMappings" : { }
}