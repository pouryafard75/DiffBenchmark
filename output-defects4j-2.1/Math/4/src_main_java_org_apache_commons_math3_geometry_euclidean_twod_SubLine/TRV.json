{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public SubLine(final Hyperplane<Euclidean2D> hyperplane,\n                   final Region<Euclidean1D> remainingRegion)",
      "right" : "public SubLine(final Hyperplane<Euclidean2D> hyperplane,\n                   final Region<Euclidean1D> remainingRegion)",
      "info" : "MethodDeclaration[1952-2270]:MethodDeclaration[1952-2270]"
    }, {
      "left" : "public SubLine(final Vector2D start, final Vector2D end)",
      "right" : "public SubLine(final Vector2D start, final Vector2D end)",
      "info" : "MethodDeclaration[2276-2521]:MethodDeclaration[2276-2521]"
    }, {
      "left" : "public SubLine(final Segment segment)",
      "right" : "public SubLine(final Segment segment)",
      "info" : "MethodDeclaration[2527-2770]:MethodDeclaration[2527-2770]"
    }, {
      "left" : "public List<Segment> getSegments()",
      "right" : "public List<Segment> getSegments()",
      "info" : "MethodDeclaration[2776-4212]:MethodDeclaration[2776-4212]"
    }, {
      "left" : "private static IntervalsSet buildIntervalSet(final Vector2D start, final Vector2D end)",
      "right" : "private static IntervalsSet buildIntervalSet(final Vector2D start, final Vector2D end)",
      "info" : "MethodDeclaration[5930-6343]:MethodDeclaration[5992-6405]"
    }, {
      "left" : "protected AbstractSubHyperplane<Euclidean2D, Euclidean1D> buildNew(final Hyperplane<Euclidean2D> hyperplane,\n                                                                       final Region<Euclidean1D> remainingRegion)",
      "right" : "protected AbstractSubHyperplane<Euclidean2D, Euclidean1D> buildNew(final Hyperplane<Euclidean2D> hyperplane,\n                                                                       final Region<Euclidean1D> remainingRegion)",
      "info" : "MethodDeclaration[6349-6675]:MethodDeclaration[6411-6737]"
    }, {
      "left" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
      "right" : "public Side side(final Hyperplane<Euclidean2D> hyperplane)",
      "info" : "MethodDeclaration[6681-7474]:MethodDeclaration[6743-7536]"
    }, {
      "left" : "public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane)",
      "right" : "public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane)",
      "info" : "MethodDeclaration[7480-9665]:MethodDeclaration[7542-9727]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2219-2270]:Block[2219-2270]"
    }, {
      "left" : "super(hyperplane, remainingRegion);",
      "right" : "super(hyperplane, remainingRegion);",
      "info" : "SuperConstructorInvocation[2229-2264]:SuperConstructorInvocation[2229-2264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2447-2521]:Block[2447-2521]"
    }, {
      "left" : "super(new Line(start, end), buildIntervalSet(start, end));",
      "right" : "super(new Line(start, end), buildIntervalSet(start, end));",
      "info" : "SuperConstructorInvocation[2457-2515]:SuperConstructorInvocation[2457-2515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2673-2770]:Block[2673-2770]"
    }, {
      "left" : "super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));",
      "right" : "super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));",
      "info" : "SuperConstructorInvocation[2683-2764]:SuperConstructorInvocation[2683-2764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3699-4212]:Block[3699-4212]"
    }, {
      "left" : "final Line line = (Line) getHyperplane();",
      "right" : "final Line line = (Line) getHyperplane();",
      "info" : "VariableDeclarationStatement[3710-3751]:VariableDeclarationStatement[3710-3751]"
    }, {
      "left" : "final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();",
      "right" : "final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();",
      "info" : "VariableDeclarationStatement[3760-3835]:VariableDeclarationStatement[3760-3835]"
    }, {
      "left" : "final List<Segment> segments = new ArrayList<Segment>();",
      "right" : "final List<Segment> segments = new ArrayList<Segment>();",
      "info" : "VariableDeclarationStatement[3844-3900]:VariableDeclarationStatement[3844-3900]"
    }, {
      "left" : "for (final Interval interval : list)",
      "right" : "for (final Interval interval : list)",
      "info" : "EnhancedForStatement[3910-4179]:EnhancedForStatement[3910-4179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3947-4179]:Block[3947-4179]"
    }, {
      "left" : "final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));",
      "right" : "final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));",
      "info" : "VariableDeclarationStatement[3961-4030]:VariableDeclarationStatement[3961-4030]"
    }, {
      "left" : "final Vector2D end   = line.toSpace(new Vector1D(interval.getSup()));",
      "right" : "final Vector2D end   = line.toSpace(new Vector1D(interval.getSup()));",
      "info" : "VariableDeclarationStatement[4043-4112]:VariableDeclarationStatement[4043-4112]"
    }, {
      "left" : "segments.add(new Segment(start, end, line));",
      "right" : "segments.add(new Segment(start, end, line));",
      "info" : "ExpressionStatement[4125-4169]:ExpressionStatement[4125-4169]"
    }, {
      "left" : "return segments;",
      "right" : "return segments;",
      "info" : "ReturnStatement[4189-4205]:ReturnStatement[4189-4205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6163-6343]:Block[6225-6405]"
    }, {
      "left" : "final Line line = new Line(start, end);",
      "right" : "final Line line = new Line(start, end);",
      "info" : "VariableDeclarationStatement[6173-6212]:VariableDeclarationStatement[6235-6274]"
    }, {
      "left" : "return new IntervalsSet(line.toSubSpace(start).getX(),\n                                line.toSubSpace(end).getX());",
      "right" : "return new IntervalsSet(line.toSubSpace(start).getX(),\n                                line.toSubSpace(end).getX());",
      "info" : "ReturnStatement[6221-6337]:ReturnStatement[6283-6399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6611-6675]:Block[6673-6737]"
    }, {
      "left" : "return new SubLine(hyperplane, remainingRegion);",
      "right" : "return new SubLine(hyperplane, remainingRegion);",
      "info" : "ReturnStatement[6621-6669]:ReturnStatement[6683-6731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6779-7474]:Block[6841-7536]"
    }, {
      "left" : "final Line    thisLine  = (Line) getHyperplane();",
      "right" : "final Line    thisLine  = (Line) getHyperplane();",
      "info" : "VariableDeclarationStatement[6790-6839]:VariableDeclarationStatement[6852-6901]"
    }, {
      "left" : "final Line    otherLine = (Line) hyperplane;",
      "right" : "final Line    otherLine = (Line) hyperplane;",
      "info" : "VariableDeclarationStatement[6848-6892]:VariableDeclarationStatement[6910-6954]"
    }, {
      "left" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
      "right" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
      "info" : "VariableDeclarationStatement[6901-6961]:VariableDeclarationStatement[6963-7023]"
    }, {
      "left" : "if (crossing == null)",
      "right" : "if (crossing == null)",
      "info" : "IfStatement[6971-7209]:IfStatement[7033-7271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6993-7209]:Block[7055-7271]"
    }, {
      "left" : "final double global = otherLine.getOffset(thisLine);",
      "right" : "final double global = otherLine.getOffset(thisLine);",
      "info" : "VariableDeclarationStatement[7046-7098]:VariableDeclarationStatement[7108-7160]"
    }, {
      "left" : "return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);",
      "right" : "return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);",
      "info" : "ReturnStatement[7111-7199]:ReturnStatement[7173-7261]"
    }, {
      "left" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
      "right" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
      "info" : "VariableDeclarationStatement[7253-7337]:VariableDeclarationStatement[7315-7399]"
    }, {
      "left" : "final Vector1D x = thisLine.toSubSpace(crossing);",
      "right" : "final Vector1D x = thisLine.toSubSpace(crossing);",
      "info" : "VariableDeclarationStatement[7346-7395]:VariableDeclarationStatement[7408-7457]"
    }, {
      "left" : "return getRemainingRegion().side(new OrientedPoint(x, direct));",
      "right" : "return getRemainingRegion().side(new OrientedPoint(x, direct));",
      "info" : "ReturnStatement[7404-7467]:ReturnStatement[7466-7529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7606-9665]:Block[7668-9727]"
    }, {
      "left" : "final Line    thisLine  = (Line) getHyperplane();",
      "right" : "final Line    thisLine  = (Line) getHyperplane();",
      "info" : "VariableDeclarationStatement[7617-7666]:VariableDeclarationStatement[7679-7728]"
    }, {
      "left" : "final Line    otherLine = (Line) hyperplane;",
      "right" : "final Line    otherLine = (Line) hyperplane;",
      "info" : "VariableDeclarationStatement[7675-7719]:VariableDeclarationStatement[7737-7781]"
    }, {
      "left" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
      "right" : "final Vector2D crossing  = thisLine.intersection(otherLine);",
      "info" : "VariableDeclarationStatement[7728-7788]:VariableDeclarationStatement[7790-7850]"
    }, {
      "left" : "if (crossing == null)",
      "right" : "if (crossing == null)",
      "info" : "IfStatement[7798-8112]:IfStatement[7860-8174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7820-8112]:Block[7882-8174]"
    }, {
      "left" : "final double global = otherLine.getOffset(thisLine);",
      "right" : "final double global = otherLine.getOffset(thisLine);",
      "info" : "VariableDeclarationStatement[7872-7924]:VariableDeclarationStatement[7934-7986]"
    }, {
      "left" : "return (global < -1.0e-10) ?\n                   new SplitSubHyperplane<Euclidean2D>(null, this) :\n                   new SplitSubHyperplane<Euclidean2D>(this, null);",
      "right" : "return (global < -1.0e-10) ?\n                   new SplitSubHyperplane<Euclidean2D>(null, this) :\n                   new SplitSubHyperplane<Euclidean2D>(this, null);",
      "info" : "ReturnStatement[7937-8102]:ReturnStatement[7999-8164]"
    }, {
      "left" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
      "right" : "final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;",
      "info" : "VariableDeclarationStatement[8156-8240]:VariableDeclarationStatement[8218-8302]"
    }, {
      "left" : "final Vector1D x      = thisLine.toSubSpace(crossing);",
      "right" : "final Vector1D x      = thisLine.toSubSpace(crossing);",
      "info" : "VariableDeclarationStatement[8249-8303]:VariableDeclarationStatement[8311-8365]"
    }, {
      "left" : "final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();",
      "right" : "final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();",
      "info" : "VariableDeclarationStatement[8312-8404]:VariableDeclarationStatement[8374-8466]"
    }, {
      "left" : "final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();",
      "right" : "final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();",
      "info" : "VariableDeclarationStatement[8413-8505]:VariableDeclarationStatement[8475-8567]"
    }, {
      "left" : "final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);",
      "right" : "final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);",
      "info" : "VariableDeclarationStatement[8515-8606]:VariableDeclarationStatement[8577-8668]"
    }, {
      "left" : "final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subPlus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getPlus(), null);",
      "right" : "final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subPlus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getPlus(), null);",
      "info" : "VariableDeclarationStatement[8615-9016]:VariableDeclarationStatement[8677-9078]"
    }, {
      "left" : "final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subMinus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getMinus(), null);",
      "right" : "final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?\n                                               new BSPTree<Euclidean1D>(Boolean.FALSE) :\n                                               new BSPTree<Euclidean1D>(subMinus, new BSPTree<Euclidean1D>(Boolean.FALSE),\n                                                                        splitTree.getMinus(), null);",
      "info" : "VariableDeclarationStatement[9025-9429]:VariableDeclarationStatement[9087-9491]"
    }, {
      "left" : "return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),\n                                                   new SubLine(thisLine.copySelf(), new IntervalsSet(minusTree)));",
      "right" : "return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),\n                                                   new SubLine(thisLine.copySelf(), new IntervalsSet(minusTree)));",
      "info" : "ReturnStatement[9439-9658]:ReturnStatement[9501-9720]"
    } ]
  },
  "interFileMappings" : { }
}