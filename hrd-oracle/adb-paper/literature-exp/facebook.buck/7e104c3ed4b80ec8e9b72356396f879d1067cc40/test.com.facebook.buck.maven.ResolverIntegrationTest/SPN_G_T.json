{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ResolverIntegrationTest",
      "right" : "ResolverIntegrationTest",
      "info" : "TypeDeclaration[2487-9378]:TypeDeclaration[2459-8926]"
    }, {
      "left" : "@Rule\n  public TemporaryFolder temp = new TemporaryFolder();",
      "right" : "@Rule\n  public TemporaryFolder temp = new TemporaryFolder();",
      "info" : "FieldDeclaration[2529-2589]:FieldDeclaration[2501-2561]"
    }, {
      "left" : "private static HttpdForTests httpd;",
      "right" : "private static HttpdForTests httpd;",
      "info" : "FieldDeclaration[2593-2628]:FieldDeclaration[2565-2600]"
    }, {
      "left" : "private static ProjectBuildFileParser buildFileParser;",
      "right" : "private static ProjectBuildFileParser buildFileParser;",
      "info" : "FieldDeclaration[2631-2685]:FieldDeclaration[2603-2657]"
    }, {
      "left" : "private static Path repo;",
      "right" : "private static Path repo;",
      "info" : "FieldDeclaration[2688-2713]:FieldDeclaration[2660-2685]"
    }, {
      "left" : "private Path buckRepoRoot;",
      "right" : "private Path buckRepoRoot;",
      "info" : "FieldDeclaration[2716-2742]:FieldDeclaration[2688-2714]"
    }, {
      "left" : "private Path thirdParty;",
      "right" : "private Path thirdParty;",
      "info" : "FieldDeclaration[2745-2769]:FieldDeclaration[2717-2741]"
    }, {
      "left" : "private Path thirdPartyRelative;",
      "right" : "private Path thirdPartyRelative;",
      "info" : "FieldDeclaration[2772-2804]:FieldDeclaration[2744-2776]"
    }, {
      "left" : "private Path localRepo;",
      "right" : "private Path localRepo;",
      "info" : "FieldDeclaration[2807-2830]:FieldDeclaration[2779-2802]"
    }, {
      "left" : "public static void setUpFakeMavenRepo() throws Exception",
      "right" : "public static void setUpFakeMavenRepo() throws Exception",
      "info" : "MethodDeclaration[2834-3620]:MethodDeclaration[2835-3621]"
    }, {
      "left" : "public static void shutDownHttpd() throws Exception",
      "right" : "public static void shutDownHttpd() throws Exception",
      "info" : "MethodDeclaration[3624-3714]:MethodDeclaration[3625-3715]"
    }, {
      "left" : "public static void createParser()",
      "right" : "public static void createParser()",
      "info" : "MethodDeclaration[3718-4731]:MethodDeclaration[3719-4732]"
    }, {
      "left" : "public static void closeParser() throws BuildFileParseException, InterruptedException",
      "right" : "public static void closeParser() throws BuildFileParseException, InterruptedException",
      "info" : "MethodDeclaration[4735-4869]:MethodDeclaration[4736-4870]"
    }, {
      "left" : "public void setUpRepos() throws IOException",
      "right" : "public void setUpRepos() throws Exception",
      "info" : "MethodDeclaration[4873-5147]:MethodDeclaration[4874-5283]"
    }, {
      "left" : "public void shouldSetUpAPrivateLibraryIfGivenAMavenCoordWithoutDeps() throws Exception",
      "right" : "public void shouldSetUpAPrivateLibraryIfGivenAMavenCoordWithoutDeps() throws Exception",
      "info" : "MethodDeclaration[5151-6572]:MethodDeclaration[5287-6561]"
    }, {
      "left" : "public void shouldIncludeSourceJarIfOneIsPresent() throws Exception",
      "right" : "public void shouldIncludeSourceJarIfOneIsPresent() throws Exception",
      "info" : "MethodDeclaration[6576-7121]:MethodDeclaration[6565-6963]"
    }, {
      "left" : "public void shouldSetVisibilityOfTargetToGiveDependenciesAccess() throws Exception",
      "right" : "public void shouldSetVisibilityOfTargetToGiveDependenciesAccess() throws Exception",
      "info" : "MethodDeclaration[7125-8368]:MethodDeclaration[6967-8063]"
    }, {
      "left" : "public void shouldOmitTargetsInTheSameBuildFileInVisibilityArguments() throws Exception",
      "right" : "public void shouldOmitTargetsInTheSameBuildFileInVisibilityArguments() throws Exception",
      "info" : "MethodDeclaration[8372-9376]:MethodDeclaration[8067-8924]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2487-2493]:Modifier[2459-2465]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2494-2499]:TYPE_DECLARATION_KIND[2466-2471]"
    }, {
      "left" : "ResolverIntegrationTest",
      "right" : "ResolverIntegrationTest",
      "info" : "SimpleName[2500-2523]:SimpleName[2472-2495]"
    }, {
      "left" : "@BeforeClass",
      "right" : "@BeforeClass",
      "info" : "MarkerAnnotation[2834-2846]:MarkerAnnotation[2835-2847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2849-2855]:Modifier[2850-2856]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2856-2862]:Modifier[2857-2863]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2863-2867]:PrimitiveType[2864-2868]"
    }, {
      "left" : "setUpFakeMavenRepo",
      "right" : "setUpFakeMavenRepo",
      "info" : "SimpleName[2868-2886]:SimpleName[2869-2887]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[2896-2905]:SimpleType[2897-2906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2906-3620]:Block[2907-3621]"
    }, {
      "left" : "repo = TestDataHelper.getTestDataDirectory(new ResolverIntegrationTest());",
      "right" : "repo = TestDataHelper.getTestDataDirectory(new ResolverIntegrationTest());",
      "info" : "ExpressionStatement[2912-2986]:ExpressionStatement[2913-2987]"
    }, {
      "left" : "if (!Files.exists(repo))",
      "right" : "if (!Files.exists(repo))",
      "info" : "IfStatement[3089-3186]:IfStatement[3090-3187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3114-3186]:Block[3115-3187]"
    }, {
      "left" : "repo = Paths.get(\"test/com/facebook/buck/maven/testdata\");",
      "right" : "repo = Paths.get(\"test/com/facebook/buck/maven/testdata\");",
      "info" : "ExpressionStatement[3122-3180]:ExpressionStatement[3123-3181]"
    }, {
      "left" : "httpd = new HttpdForTests();",
      "right" : "httpd = new HttpdForTests();",
      "info" : "ExpressionStatement[3192-3220]:ExpressionStatement[3193-3221]"
    }, {
      "left" : "ResourceHandler resourceHandler = new ResourceHandler();",
      "right" : "ResourceHandler resourceHandler = new ResourceHandler();",
      "info" : "VariableDeclarationStatement[3226-3282]:VariableDeclarationStatement[3227-3283]"
    }, {
      "left" : "resourceHandler.setDirectoriesListed(true);",
      "right" : "resourceHandler.setDirectoriesListed(true);",
      "info" : "ExpressionStatement[3287-3330]:ExpressionStatement[3288-3331]"
    }, {
      "left" : "resourceHandler.setResourceBase(repo.toAbsolutePath().toString());",
      "right" : "resourceHandler.setResourceBase(repo.toAbsolutePath().toString());",
      "info" : "ExpressionStatement[3335-3401]:ExpressionStatement[3336-3402]"
    }, {
      "left" : "ContextHandler contextHandler = new ContextHandler(\"/\");",
      "right" : "ContextHandler contextHandler = new ContextHandler(\"/\");",
      "info" : "VariableDeclarationStatement[3407-3463]:VariableDeclarationStatement[3408-3464]"
    }, {
      "left" : "contextHandler.setHandler(resourceHandler);",
      "right" : "contextHandler.setHandler(resourceHandler);",
      "info" : "ExpressionStatement[3468-3511]:ExpressionStatement[3469-3512]"
    }, {
      "left" : "contextHandler.setLogger(new StdErrLog());",
      "right" : "contextHandler.setLogger(new StdErrLog());",
      "info" : "ExpressionStatement[3516-3558]:ExpressionStatement[3517-3559]"
    }, {
      "left" : "httpd.addHandler(contextHandler);",
      "right" : "httpd.addHandler(contextHandler);",
      "info" : "ExpressionStatement[3564-3597]:ExpressionStatement[3565-3598]"
    }, {
      "left" : "httpd.start();",
      "right" : "httpd.start();",
      "info" : "ExpressionStatement[3602-3616]:ExpressionStatement[3603-3617]"
    }, {
      "left" : "@AfterClass",
      "right" : "@AfterClass",
      "info" : "MarkerAnnotation[3624-3635]:MarkerAnnotation[3625-3636]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3638-3644]:Modifier[3639-3645]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3645-3651]:Modifier[3646-3652]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3652-3656]:PrimitiveType[3653-3657]"
    }, {
      "left" : "shutDownHttpd",
      "right" : "shutDownHttpd",
      "info" : "SimpleName[3657-3670]:SimpleName[3658-3671]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3680-3689]:SimpleType[3681-3690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3690-3714]:Block[3691-3715]"
    }, {
      "left" : "httpd.close();",
      "right" : "httpd.close();",
      "info" : "ExpressionStatement[3696-3710]:ExpressionStatement[3697-3711]"
    }, {
      "left" : "@BeforeClass",
      "right" : "@BeforeClass",
      "info" : "MarkerAnnotation[3718-3730]:MarkerAnnotation[3719-3731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3733-3739]:Modifier[3734-3740]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3740-3746]:Modifier[3741-3747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3747-3751]:PrimitiveType[3748-3752]"
    }, {
      "left" : "createParser",
      "right" : "createParser",
      "info" : "SimpleName[3752-3764]:SimpleName[3753-3765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3767-4731]:Block[3768-4732]"
    }, {
      "left" : "ProjectFilesystem filesystem = new FakeProjectFilesystem();",
      "right" : "ProjectFilesystem filesystem = new FakeProjectFilesystem();",
      "info" : "VariableDeclarationStatement[3773-3832]:VariableDeclarationStatement[3774-3833]"
    }, {
      "left" : "FakeBuckConfig buckConfig = new FakeBuckConfig();",
      "right" : "FakeBuckConfig buckConfig = new FakeBuckConfig();",
      "info" : "VariableDeclarationStatement[3837-3886]:VariableDeclarationStatement[3838-3887]"
    }, {
      "left" : "ParserConfig parserConfig = new ParserConfig(buckConfig);",
      "right" : "ParserConfig parserConfig = new ParserConfig(buckConfig);",
      "info" : "VariableDeclarationStatement[3891-3948]:VariableDeclarationStatement[3892-3949]"
    }, {
      "left" : "PythonBuckConfig pythonBuckConfig = new PythonBuckConfig(\n        buckConfig,\n        new ExecutableFinder());",
      "right" : "PythonBuckConfig pythonBuckConfig = new PythonBuckConfig(\n        buckConfig,\n        new ExecutableFinder());",
      "info" : "VariableDeclarationStatement[3953-4063]:VariableDeclarationStatement[3954-4064]"
    }, {
      "left" : "ImmutableSet<Description<?>> descriptions = ImmutableSet.of(\n        new RemoteFileDescription(new ExplodingDownloader()),\n        new PrebuiltJarDescription());",
      "right" : "ImmutableSet<Description<?>> descriptions = ImmutableSet.of(\n        new RemoteFileDescription(new ExplodingDownloader()),\n        new PrebuiltJarDescription());",
      "info" : "VariableDeclarationStatement[4069-4230]:VariableDeclarationStatement[4070-4231]"
    }, {
      "left" : "DefaultProjectBuildFileParserFactory parserFactory = new DefaultProjectBuildFileParserFactory(\n        filesystem.getRootPath(),\n        pythonBuckConfig.getPythonInterpreter(),\n        parserConfig.getAllowEmptyGlobs(),\n        parserConfig.getBuildFileName(),\n        parserConfig.getDefaultIncludes(),\n        descriptions);",
      "right" : "DefaultProjectBuildFileParserFactory parserFactory = new DefaultProjectBuildFileParserFactory(\n        filesystem.getRootPath(),\n        pythonBuckConfig.getPythonInterpreter(),\n        parserConfig.getAllowEmptyGlobs(),\n        parserConfig.getBuildFileName(),\n        parserConfig.getDefaultIncludes(),\n        descriptions);",
      "info" : "VariableDeclarationStatement[4236-4563]:VariableDeclarationStatement[4237-4564]"
    }, {
      "left" : "buildFileParser = parserFactory.createParser(\n        new TestConsole(),\n        ImmutableMap.<String, String>of(),\n        BuckEventBusFactory.newInstance());",
      "right" : "buildFileParser = parserFactory.createParser(\n        new TestConsole(),\n        ImmutableMap.<String, String>of(),\n        BuckEventBusFactory.newInstance());",
      "info" : "ExpressionStatement[4568-4727]:ExpressionStatement[4569-4728]"
    }, {
      "left" : "@AfterClass",
      "right" : "@AfterClass",
      "info" : "MarkerAnnotation[4735-4746]:MarkerAnnotation[4736-4747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4749-4755]:Modifier[4750-4756]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4756-4762]:Modifier[4757-4763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4763-4767]:PrimitiveType[4764-4768]"
    }, {
      "left" : "closeParser",
      "right" : "closeParser",
      "info" : "SimpleName[4768-4779]:SimpleName[4769-4780]"
    }, {
      "left" : "BuildFileParseException",
      "right" : "BuildFileParseException",
      "info" : "SimpleType[4789-4812]:SimpleType[4790-4813]"
    }, {
      "left" : "InterruptedException",
      "right" : "InterruptedException",
      "info" : "SimpleType[4814-4834]:SimpleType[4815-4835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4835-4869]:Block[4836-4870]"
    }, {
      "left" : "buildFileParser.close();",
      "right" : "buildFileParser.close();",
      "info" : "ExpressionStatement[4841-4865]:ExpressionStatement[4842-4866]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[4873-4880]:MarkerAnnotation[4874-4881]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4883-4889]:Modifier[4884-4890]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4890-4894]:PrimitiveType[4891-4895]"
    }, {
      "left" : "setUpRepos",
      "right" : "setUpRepos",
      "info" : "SimpleName[4895-4905]:SimpleName[4896-4906]"
    }, {
      "left" : "IOException",
      "right" : "Exception",
      "info" : "SimpleType[4915-4926]:SimpleType[4916-4925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4927-5147]:Block[4926-5283]"
    }, {
      "left" : "buckRepoRoot = temp.newFolder().toPath();",
      "right" : "buckRepoRoot = temp.newFolder().toPath();",
      "info" : "ExpressionStatement[4933-4974]:ExpressionStatement[4932-4973]"
    }, {
      "left" : "thirdPartyRelative = Paths.get(\"third-party\").resolve(\"java\");",
      "right" : "thirdPartyRelative = Paths.get(\"third-party\").resolve(\"java\");",
      "info" : "ExpressionStatement[4979-5041]:ExpressionStatement[4978-5040]"
    }, {
      "left" : "thirdParty = buckRepoRoot.resolve(thirdPartyRelative);",
      "right" : "thirdParty = buckRepoRoot.resolve(thirdPartyRelative);",
      "info" : "ExpressionStatement[5046-5100]:ExpressionStatement[5045-5099]"
    }, {
      "left" : "localRepo = temp.newFolder().toPath();",
      "right" : "localRepo = temp.newFolder().toPath();",
      "info" : "ExpressionStatement[5105-5143]:ExpressionStatement[5104-5142]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5151-5156]:MarkerAnnotation[5287-5292]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5159-5165]:Modifier[5295-5301]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5166-5170]:PrimitiveType[5302-5306]"
    }, {
      "left" : "shouldSetUpAPrivateLibraryIfGivenAMavenCoordWithoutDeps",
      "right" : "shouldSetUpAPrivateLibraryIfGivenAMavenCoordWithoutDeps",
      "info" : "SimpleName[5171-5226]:SimpleName[5307-5362]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[5236-5245]:SimpleType[5372-5381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5246-6572]:Block[5382-6561]"
    }, {
      "left" : "new Resolver(\n        buckRepoRoot,\n        thirdPartyRelative,\n        localRepo,\n        httpd.getUri(\"/\").toString())",
      "right" : "new Resolver(\n        buckRepoRoot,\n        thirdPartyRelative,\n        localRepo,\n        httpd.getUri(\"/\").toString())",
      "info" : "ClassInstanceCreation[5272-5392]:ClassInstanceCreation[5158-5278]"
    }, {
      "left" : "resolver.resolve(\"com.example:no-deps:jar:1.0\");",
      "right" : "resolver.resolve(\"com.example:no-deps:jar:1.0\");",
      "info" : "ExpressionStatement[5399-5447]:ExpressionStatement[5388-5436]"
    }, {
      "left" : "Path groupDir = thirdParty.resolve(\"example\");",
      "right" : "Path groupDir = thirdParty.resolve(\"example\");",
      "info" : "VariableDeclarationStatement[5453-5499]:VariableDeclarationStatement[5442-5488]"
    }, {
      "left" : "assertTrue(Files.exists(groupDir));",
      "right" : "assertTrue(Files.exists(groupDir));",
      "info" : "ExpressionStatement[5504-5539]:ExpressionStatement[5493-5528]"
    }, {
      "left" : "Path original = repo.resolve(\"com/example/no-deps/1.0/no-deps-1.0.jar\");",
      "right" : "Path original = repo.resolve(\"com/example/no-deps/1.0/no-deps-1.0.jar\");",
      "info" : "VariableDeclarationStatement[5545-5617]:VariableDeclarationStatement[5534-5606]"
    }, {
      "left" : "HashCode expected = MorePaths.asByteSource(original).hash(Hashing.sha1());",
      "right" : "HashCode expected = MorePaths.asByteSource(original).hash(Hashing.sha1());",
      "info" : "VariableDeclarationStatement[5622-5696]:VariableDeclarationStatement[5611-5685]"
    }, {
      "left" : "Path jarFile = groupDir.resolve(\"no-deps-1.0.jar\");",
      "right" : "Path jarFile = groupDir.resolve(\"no-deps-1.0.jar\");",
      "info" : "VariableDeclarationStatement[5701-5752]:VariableDeclarationStatement[5690-5741]"
    }, {
      "left" : "HashCode seen = MorePaths.asByteSource(jarFile).hash(Hashing.sha1());",
      "right" : "HashCode seen = MorePaths.asByteSource(jarFile).hash(Hashing.sha1());",
      "info" : "VariableDeclarationStatement[5757-5826]:VariableDeclarationStatement[5746-5815]"
    }, {
      "left" : "assertEquals(expected, seen);",
      "right" : "assertEquals(expected, seen);",
      "info" : "ExpressionStatement[5831-5860]:ExpressionStatement[5820-5849]"
    }, {
      "left" : "List<Map<String, Object>> rules = buildFileParser.getAll(groupDir.resolve(\"BUCK\"));",
      "right" : "List<Map<String, Object>> rules = buildFileParser.getAll(groupDir.resolve(\"BUCK\"));",
      "info" : "VariableDeclarationStatement[5866-5949]:VariableDeclarationStatement[5855-5938]"
    }, {
      "left" : "assertEquals(1, rules.size());",
      "right" : "assertEquals(1, rules.size());",
      "info" : "ExpressionStatement[5955-5985]:ExpressionStatement[5944-5974]"
    }, {
      "left" : "Map<String, Object> rule = rules.get(0);",
      "right" : "Map<String, Object> rule = rules.get(0);",
      "info" : "VariableDeclarationStatement[5990-6030]:VariableDeclarationStatement[5979-6019]"
    }, {
      "left" : "assertEquals(\"no-deps\", rule.get(\"name\"));",
      "right" : "assertEquals(\"no-deps\", rule.get(\"name\"));",
      "info" : "ExpressionStatement[6086-6128]:ExpressionStatement[6075-6117]"
    }, {
      "left" : "assertEquals(\"no-deps-1.0.jar\", rule.get(\"binaryJar\"));",
      "right" : "assertEquals(\"no-deps-1.0.jar\", rule.get(\"binaryJar\"));",
      "info" : "ExpressionStatement[6170-6225]:ExpressionStatement[6159-6214]"
    }, {
      "left" : "assertTrue(rule.containsKey(\"sourceJar\"));",
      "right" : "assertTrue(rule.containsKey(\"sourceJar\"));",
      "info" : "ExpressionStatement[6274-6316]:ExpressionStatement[6263-6305]"
    }, {
      "left" : "assertNull(rule.get(\"sourceJar\"));",
      "right" : "assertNull(rule.get(\"sourceJar\"));",
      "info" : "ExpressionStatement[6321-6355]:ExpressionStatement[6310-6344]"
    }, {
      "left" : "assertEquals(ImmutableList.of(), rule.get(\"visibility\"));",
      "right" : "assertEquals(ImmutableList.of(), rule.get(\"visibility\"));",
      "info" : "ExpressionStatement[6413-6470]:ExpressionStatement[6402-6459]"
    }, {
      "left" : "assertEquals(ImmutableList.of(), rule.get(\"deps\"));",
      "right" : "assertEquals(ImmutableList.of(), rule.get(\"deps\"));",
      "info" : "ExpressionStatement[6517-6568]:ExpressionStatement[6506-6557]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6576-6581]:MarkerAnnotation[6565-6570]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6584-6590]:Modifier[6573-6579]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6591-6595]:PrimitiveType[6580-6584]"
    }, {
      "left" : "shouldIncludeSourceJarIfOneIsPresent",
      "right" : "shouldIncludeSourceJarIfOneIsPresent",
      "info" : "SimpleName[6596-6632]:SimpleName[6585-6621]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6642-6651]:SimpleType[6631-6640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6652-7121]:Block[6641-6963]"
    }, {
      "left" : "httpd",
      "right" : "resolver",
      "info" : "METHOD_INVOCATION_RECEIVER[6769-6774]:METHOD_INVOCATION_RECEIVER[6647-6655]"
    }, {
      "left" : "\"/\"",
      "right" : "\"com.example:with-sources:jar:1.0\"",
      "info" : "METHOD_INVOCATION_ARGUMENTS[6782-6785]:METHOD_INVOCATION_ARGUMENTS[6664-6698]"
    }, {
      "left" : "Path groupDir = thirdParty.resolve(\"example\");",
      "right" : "Path groupDir = thirdParty.resolve(\"example\");",
      "info" : "VariableDeclarationStatement[6864-6910]:VariableDeclarationStatement[6706-6752]"
    }, {
      "left" : "List<Map<String, Object>> rules = buildFileParser.getAll(groupDir.resolve(\"BUCK\"));",
      "right" : "List<Map<String, Object>> rules = buildFileParser.getAll(groupDir.resolve(\"BUCK\"));",
      "info" : "VariableDeclarationStatement[6915-6998]:VariableDeclarationStatement[6757-6840]"
    }, {
      "left" : "Map<String, Object> rule = rules.get(0);",
      "right" : "Map<String, Object> rule = rules.get(0);",
      "info" : "VariableDeclarationStatement[7004-7044]:VariableDeclarationStatement[6846-6886]"
    }, {
      "left" : "assertEquals(\"with-sources-1.0-sources.jar\", rule.get(\"sourceJar\"));",
      "right" : "assertEquals(\"with-sources-1.0-sources.jar\", rule.get(\"sourceJar\"));",
      "info" : "ExpressionStatement[7049-7117]:ExpressionStatement[6891-6959]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7125-7130]:MarkerAnnotation[6967-6972]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7133-7139]:Modifier[6975-6981]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7140-7144]:PrimitiveType[6982-6986]"
    }, {
      "left" : "shouldSetVisibilityOfTargetToGiveDependenciesAccess",
      "right" : "shouldSetVisibilityOfTargetToGiveDependenciesAccess",
      "info" : "SimpleName[7145-7196]:SimpleName[6987-7038]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7206-7215]:SimpleType[7048-7057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7216-8368]:Block[7058-8063]"
    }, {
      "left" : "httpd",
      "right" : "resolver",
      "info" : "SimpleName[7333-7338]:SimpleName[7064-7072]"
    }, {
      "left" : "\"/\"",
      "right" : "\"com.example:with-deps:jar:1.0\"",
      "info" : "StringLiteral[7346-7349]:StringLiteral[7081-7112]"
    }, {
      "left" : "Path exampleDir = thirdPartyRelative.resolve(\"example\");",
      "right" : "Path exampleDir = thirdPartyRelative.resolve(\"example\");",
      "info" : "VariableDeclarationStatement[7425-7481]:VariableDeclarationStatement[7120-7176]"
    }, {
      "left" : "Map<String, Object> withDeps =\n        buildFileParser.getAll(buckRepoRoot.resolve(exampleDir).resolve(\"BUCK\")).get(0);",
      "right" : "Map<String, Object> withDeps =\n        buildFileParser.getAll(buckRepoRoot.resolve(exampleDir).resolve(\"BUCK\")).get(0);",
      "info" : "VariableDeclarationStatement[7486-7605]:VariableDeclarationStatement[7181-7300]"
    }, {
      "left" : "Path otherDir = thirdPartyRelative.resolve(\"othercorp\");",
      "right" : "Path otherDir = thirdPartyRelative.resolve(\"othercorp\");",
      "info" : "VariableDeclarationStatement[7610-7666]:VariableDeclarationStatement[7305-7361]"
    }, {
      "left" : "Map<String, Object> noDeps =\n        buildFileParser.getAll(buckRepoRoot.resolve(otherDir).resolve(\"BUCK\")).get(0);",
      "right" : "Map<String, Object> noDeps =\n        buildFileParser.getAll(buckRepoRoot.resolve(otherDir).resolve(\"BUCK\")).get(0);",
      "info" : "VariableDeclarationStatement[7671-7786]:VariableDeclarationStatement[7366-7481]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n    List<String> visibility = (List<String>) noDeps.get(\"visibility\");",
      "right" : "@SuppressWarnings(\"unchecked\")\n    List<String> visibility = (List<String>) noDeps.get(\"visibility\");",
      "info" : "VariableDeclarationStatement[7792-7893]:VariableDeclarationStatement[7487-7588]"
    }, {
      "left" : "assertEquals(1, visibility.size());",
      "right" : "assertEquals(1, visibility.size());",
      "info" : "ExpressionStatement[7898-7933]:ExpressionStatement[7593-7628]"
    }, {
      "left" : "assertEquals(ImmutableList.of(String.format(\"//%s:with-deps\", exampleDir)), visibility);",
      "right" : "assertEquals(ImmutableList.of(String.format(\"//%s:with-deps\", exampleDir)), visibility);",
      "info" : "ExpressionStatement[7938-8026]:ExpressionStatement[7633-7721]"
    }, {
      "left" : "assertEquals(ImmutableList.of(), noDeps.get(\"deps\"));",
      "right" : "assertEquals(ImmutableList.of(), noDeps.get(\"deps\"));",
      "info" : "ExpressionStatement[8031-8084]:ExpressionStatement[7726-7779]"
    }, {
      "left" : "assertEquals(ImmutableList.of(), withDeps.get(\"visibility\"));",
      "right" : "assertEquals(ImmutableList.of(), withDeps.get(\"visibility\"));",
      "info" : "ExpressionStatement[8090-8151]:ExpressionStatement[7785-7846]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n    List<String> deps = (List<String>) withDeps.get(\"deps\");",
      "right" : "@SuppressWarnings(\"unchecked\")\n    List<String> deps = (List<String>) withDeps.get(\"deps\");",
      "info" : "VariableDeclarationStatement[8156-8247]:VariableDeclarationStatement[7851-7942]"
    }, {
      "left" : "assertEquals(1, deps.size());",
      "right" : "assertEquals(1, deps.size());",
      "info" : "ExpressionStatement[8252-8281]:ExpressionStatement[7947-7976]"
    }, {
      "left" : "assertEquals(ImmutableList.of(String.format(\"//%s:no-deps\", otherDir)), deps);",
      "right" : "assertEquals(ImmutableList.of(String.format(\"//%s:no-deps\", otherDir)), deps);",
      "info" : "ExpressionStatement[8286-8364]:ExpressionStatement[7981-8059]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8372-8377]:MarkerAnnotation[8067-8072]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8380-8386]:Modifier[8075-8081]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8387-8391]:PrimitiveType[8082-8086]"
    }, {
      "left" : "shouldOmitTargetsInTheSameBuildFileInVisibilityArguments",
      "right" : "shouldOmitTargetsInTheSameBuildFileInVisibilityArguments",
      "info" : "SimpleName[8392-8448]:SimpleName[8087-8143]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8458-8467]:SimpleType[8153-8162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8468-9376]:Block[8163-8924]"
    }, {
      "left" : "httpd",
      "right" : "resolver",
      "info" : "SimpleName[8585-8590]:SimpleName[8169-8177]"
    }, {
      "left" : "\"/\"",
      "right" : "\"com.example:deps-in-same-project:jar:1.0\"",
      "info" : "METHOD_INVOCATION_ARGUMENTS[8598-8601]:METHOD_INVOCATION_ARGUMENTS[8186-8228]"
    }, {
      "left" : "Path exampleDir = thirdPartyRelative.resolve(\"example\");",
      "right" : "Path exampleDir = thirdPartyRelative.resolve(\"example\");",
      "info" : "VariableDeclarationStatement[8688-8744]:VariableDeclarationStatement[8236-8292]"
    }, {
      "left" : "List<Map<String, Object>> allTargets = buildFileParser.getAll(\n        buckRepoRoot.resolve(exampleDir).resolve(\n            \"BUCK\"));",
      "right" : "List<Map<String, Object>> allTargets = buildFileParser.getAll(\n        buckRepoRoot.resolve(exampleDir).resolve(\n            \"BUCK\"));",
      "info" : "VariableDeclarationStatement[8749-8883]:VariableDeclarationStatement[8297-8431]"
    }, {
      "left" : "assertEquals(2, allTargets.size());",
      "right" : "assertEquals(2, allTargets.size());",
      "info" : "ExpressionStatement[8889-8924]:ExpressionStatement[8437-8472]"
    }, {
      "left" : "Map<String, Object> noDeps = null;",
      "right" : "Map<String, Object> noDeps = null;",
      "info" : "VariableDeclarationStatement[8930-8964]:VariableDeclarationStatement[8478-8512]"
    }, {
      "left" : "for (Map<String, Object> target : allTargets)",
      "right" : "for (Map<String, Object> target : allTargets)",
      "info" : "EnhancedForStatement[8969-9120]:EnhancedForStatement[8517-8668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9015-9120]:Block[8563-8668]"
    }, {
      "left" : "if (\"no-deps\".equals(target.get(\"name\")))",
      "right" : "if (\"no-deps\".equals(target.get(\"name\")))",
      "info" : "IfStatement[9023-9114]:IfStatement[8571-8662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9065-9114]:Block[8613-8662]"
    }, {
      "left" : "noDeps = target;",
      "right" : "noDeps = target;",
      "info" : "ExpressionStatement[9075-9091]:ExpressionStatement[8623-8639]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9100-9106]:BreakStatement[8648-8654]"
    }, {
      "left" : "assertNotNull(noDeps);",
      "right" : "assertNotNull(noDeps);",
      "info" : "ExpressionStatement[9125-9147]:ExpressionStatement[8673-8695]"
    }, {
      "left" : "assertEquals(0, ((Collection<?>) noDeps.get(\"visibility\")).size());",
      "right" : "assertEquals(0, ((Collection<?>) noDeps.get(\"visibility\")).size());",
      "info" : "ExpressionStatement[9305-9372]:ExpressionStatement[8853-8920]"
    } ]
  },
  "interFileMappings" : { }
}