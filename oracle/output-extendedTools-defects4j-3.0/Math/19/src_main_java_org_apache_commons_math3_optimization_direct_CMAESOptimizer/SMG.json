{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CMAESOptimizer",
      "right" : "CMAESOptimizer",
      "info" : "TypeDeclaration[2177-54296]:TypeDeclaration[2177-55010]"
    }, {
      "left" : "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;",
      "right" : "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;",
      "info" : "FieldDeclaration[4809-4932]:FieldDeclaration[4809-4932]"
    }, {
      "left" : "public static final double DEFAULT_STOPFITNESS = 0;",
      "right" : "public static final double DEFAULT_STOPFITNESS = 0;",
      "info" : "FieldDeclaration[4937-5049]:FieldDeclaration[4937-5049]"
    }, {
      "left" : "public static final boolean DEFAULT_ISACTIVECMA = true;",
      "right" : "public static final boolean DEFAULT_ISACTIVECMA = true;",
      "info" : "FieldDeclaration[5054-5170]:FieldDeclaration[5054-5170]"
    }, {
      "left" : "public static final int DEFAULT_MAXITERATIONS = 30000;",
      "right" : "public static final int DEFAULT_MAXITERATIONS = 30000;",
      "info" : "FieldDeclaration[5175-5292]:FieldDeclaration[5175-5292]"
    }, {
      "left" : "public static final int DEFAULT_DIAGONALONLY = 0;",
      "right" : "public static final int DEFAULT_DIAGONALONLY = 0;",
      "info" : "FieldDeclaration[5297-5408]:FieldDeclaration[5297-5408]"
    }, {
      "left" : "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();",
      "right" : "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();",
      "info" : "FieldDeclaration[5413-5543]:FieldDeclaration[5413-5543]"
    }, {
      "left" : "private int lambda;",
      "right" : "private int lambda;",
      "info" : "FieldDeclaration[5581-6008]:FieldDeclaration[5581-6008]"
    }, {
      "left" : "private boolean isActiveCMA;",
      "right" : "private boolean isActiveCMA;",
      "info" : "FieldDeclaration[6032-6411]:FieldDeclaration[6032-6411]"
    }, {
      "left" : "private int checkFeasableCount;",
      "right" : "private int checkFeasableCount;",
      "info" : "FieldDeclaration[6416-6648]:FieldDeclaration[6416-6648]"
    }, {
      "left" : "private double[][] boundaries;",
      "right" : "private double[][] boundaries;",
      "info" : "FieldDeclaration[6653-6808]:FieldDeclaration[6653-6808]"
    }, {
      "left" : "private double[] inputSigma;",
      "right" : "private double[] inputSigma;",
      "info" : "FieldDeclaration[6813-7082]:FieldDeclaration[6813-7082]"
    }, {
      "left" : "private int dimension;",
      "right" : "private int dimension;",
      "info" : "FieldDeclaration[7087-7168]:FieldDeclaration[7087-7168]"
    }, {
      "left" : "private int diagonalOnly = 0;",
      "right" : "private int diagonalOnly = 0;",
      "info" : "FieldDeclaration[7173-7683]:FieldDeclaration[7173-7683]"
    }, {
      "left" : "private boolean isMinimize = true;",
      "right" : "private boolean isMinimize = true;",
      "info" : "FieldDeclaration[7688-7781]:FieldDeclaration[7688-7781]"
    }, {
      "left" : "private boolean generateStatistics = false;",
      "right" : "private boolean generateStatistics = false;",
      "info" : "FieldDeclaration[7786-7887]:FieldDeclaration[7786-7887]"
    }, {
      "left" : "private int maxIterations;",
      "right" : "private int maxIterations;",
      "info" : "FieldDeclaration[7921-7996]:FieldDeclaration[7921-7996]"
    }, {
      "left" : "private double stopFitness;",
      "right" : "private double stopFitness;",
      "info" : "FieldDeclaration[8001-8064]:FieldDeclaration[8001-8064]"
    }, {
      "left" : "private double stopTolUpX;",
      "right" : "private double stopTolUpX;",
      "info" : "FieldDeclaration[8069-8143]:FieldDeclaration[8069-8143]"
    }, {
      "left" : "private double stopTolX;",
      "right" : "private double stopTolX;",
      "info" : "FieldDeclaration[8148-8218]:FieldDeclaration[8148-8218]"
    }, {
      "left" : "private double stopTolFun;",
      "right" : "private double stopTolFun;",
      "info" : "FieldDeclaration[8223-8300]:FieldDeclaration[8223-8300]"
    }, {
      "left" : "private double stopTolHistFun;",
      "right" : "private double stopTolHistFun;",
      "info" : "FieldDeclaration[8305-8395]:FieldDeclaration[8305-8395]"
    }, {
      "left" : "private int mu;",
      "right" : "private int mu;",
      "info" : "FieldDeclaration[8438-8508]:FieldDeclaration[8438-8508]"
    }, {
      "left" : "private double logMu2;",
      "right" : "private double logMu2;",
      "info" : "FieldDeclaration[8516-8587]:FieldDeclaration[8516-8587]"
    }, {
      "left" : "private RealMatrix weights;",
      "right" : "private RealMatrix weights;",
      "info" : "FieldDeclaration[8592-8664]:FieldDeclaration[8592-8664]"
    }, {
      "left" : "private double mueff;",
      "right" : "private double mueff;",
      "info" : "FieldDeclaration[8669-8740]:FieldDeclaration[8669-8740]"
    }, {
      "left" : "private double sigma;",
      "right" : "private double sigma;",
      "info" : "FieldDeclaration[8798-8874]:FieldDeclaration[8798-8874]"
    }, {
      "left" : "private double cc;",
      "right" : "private double cc;",
      "info" : "FieldDeclaration[8879-8929]:FieldDeclaration[8879-8929]"
    }, {
      "left" : "private double cs;",
      "right" : "private double cs;",
      "info" : "FieldDeclaration[8934-8998]:FieldDeclaration[8934-8998]"
    }, {
      "left" : "private double damps;",
      "right" : "private double damps;",
      "info" : "FieldDeclaration[9003-9058]:FieldDeclaration[9003-9058]"
    }, {
      "left" : "private double ccov1;",
      "right" : "private double ccov1;",
      "info" : "FieldDeclaration[9063-9130]:FieldDeclaration[9063-9130]"
    }, {
      "left" : "private double ccovmu;",
      "right" : "private double ccovmu;",
      "info" : "FieldDeclaration[9135-9202]:FieldDeclaration[9135-9202]"
    }, {
      "left" : "private double chiN;",
      "right" : "private double chiN;",
      "info" : "FieldDeclaration[9207-9285]:FieldDeclaration[9207-9285]"
    }, {
      "left" : "private double ccov1Sep;",
      "right" : "private double ccov1Sep;",
      "info" : "FieldDeclaration[9290-9374]:FieldDeclaration[9290-9374]"
    }, {
      "left" : "private double ccovmuSep;",
      "right" : "private double ccovmuSep;",
      "info" : "FieldDeclaration[9379-9463]:FieldDeclaration[9379-9463]"
    }, {
      "left" : "private RealMatrix xmean;",
      "right" : "private RealMatrix xmean;",
      "info" : "FieldDeclaration[9522-9579]:FieldDeclaration[9522-9579]"
    }, {
      "left" : "private RealMatrix pc;",
      "right" : "private RealMatrix pc;",
      "info" : "FieldDeclaration[9584-9633]:FieldDeclaration[9584-9633]"
    }, {
      "left" : "private RealMatrix ps;",
      "right" : "private RealMatrix ps;",
      "info" : "FieldDeclaration[9638-9697]:FieldDeclaration[9638-9697]"
    }, {
      "left" : "private double normps;",
      "right" : "private double normps;",
      "info" : "FieldDeclaration[9702-9770]:FieldDeclaration[9702-9770]"
    }, {
      "left" : "private RealMatrix B;",
      "right" : "private RealMatrix B;",
      "info" : "FieldDeclaration[9775-9826]:FieldDeclaration[9775-9826]"
    }, {
      "left" : "private RealMatrix D;",
      "right" : "private RealMatrix D;",
      "info" : "FieldDeclaration[9831-9872]:FieldDeclaration[9831-9872]"
    }, {
      "left" : "private RealMatrix BD;",
      "right" : "private RealMatrix BD;",
      "info" : "FieldDeclaration[9877-9938]:FieldDeclaration[9877-9938]"
    }, {
      "left" : "private RealMatrix diagD;",
      "right" : "private RealMatrix diagD;",
      "info" : "FieldDeclaration[9943-10023]:FieldDeclaration[9943-10023]"
    }, {
      "left" : "private RealMatrix C;",
      "right" : "private RealMatrix C;",
      "info" : "FieldDeclaration[10028-10079]:FieldDeclaration[10028-10079]"
    }, {
      "left" : "private RealMatrix diagC;",
      "right" : "private RealMatrix diagC;",
      "info" : "FieldDeclaration[10084-10158]:FieldDeclaration[10084-10158]"
    }, {
      "left" : "private int iterations;",
      "right" : "private int iterations;",
      "info" : "FieldDeclaration[10163-10237]:FieldDeclaration[10163-10237]"
    }, {
      "left" : "private double[] fitnessHistory;",
      "right" : "private double[] fitnessHistory;",
      "info" : "FieldDeclaration[10243-10316]:FieldDeclaration[10243-10316]"
    }, {
      "left" : "private int historySize;",
      "right" : "private int historySize;",
      "info" : "FieldDeclaration[10321-10394]:FieldDeclaration[10321-10394]"
    }, {
      "left" : "private RandomGenerator random;",
      "right" : "private RandomGenerator random;",
      "info" : "FieldDeclaration[10400-10460]:FieldDeclaration[10400-10460]"
    }, {
      "left" : "private List<Double> statisticsSigmaHistory = new ArrayList<Double>();",
      "right" : "private List<Double> statisticsSigmaHistory = new ArrayList<Double>();",
      "info" : "FieldDeclaration[10466-10572]:FieldDeclaration[10466-10572]"
    }, {
      "left" : "private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();",
      "right" : "private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();",
      "info" : "FieldDeclaration[10577-10689]:FieldDeclaration[10577-10689]"
    }, {
      "left" : "private List<Double> statisticsFitnessHistory = new ArrayList<Double>();",
      "right" : "private List<Double> statisticsFitnessHistory = new ArrayList<Double>();",
      "info" : "FieldDeclaration[10694-10804]:FieldDeclaration[10694-10804]"
    }, {
      "left" : "private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();",
      "right" : "private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();",
      "info" : "FieldDeclaration[10809-10915]:FieldDeclaration[10809-10915]"
    }, {
      "left" : "public CMAESOptimizer()",
      "right" : "public CMAESOptimizer()",
      "info" : "MethodDeclaration[10921-11037]:MethodDeclaration[10921-11037]"
    }, {
      "left" : "public CMAESOptimizer(int lambda)",
      "right" : "public CMAESOptimizer(int lambda)",
      "info" : "MethodDeclaration[11043-11339]:MethodDeclaration[11043-11339]"
    }, {
      "left" : "public CMAESOptimizer(int lambda, double[] inputSigma)",
      "right" : "public CMAESOptimizer(int lambda, double[] inputSigma)",
      "info" : "MethodDeclaration[11345-11756]:MethodDeclaration[11345-11756]"
    }, {
      "left" : "public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics)",
      "right" : "public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics)",
      "info" : "MethodDeclaration[11762-13074]:MethodDeclaration[11762-13074]"
    }, {
      "left" : "public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker)",
      "right" : "public CMAESOptimizer(int lambda, double[] inputSigma,\n                          int maxIterations, double stopFitness,\n                          boolean isActiveCMA, int diagonalOnly, int checkFeasableCount,\n                          RandomGenerator random, boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[13080-14672]:MethodDeclaration[13080-14672]"
    }, {
      "left" : "public List<Double> getStatisticsSigmaHistory()",
      "right" : "public List<Double> getStatisticsSigmaHistory()",
      "info" : "MethodDeclaration[14678-14828]:MethodDeclaration[14678-14828]"
    }, {
      "left" : "public List<RealMatrix> getStatisticsMeanHistory()",
      "right" : "public List<RealMatrix> getStatisticsMeanHistory()",
      "info" : "MethodDeclaration[14834-14985]:MethodDeclaration[14834-14985]"
    }, {
      "left" : "public List<Double> getStatisticsFitnessHistory()",
      "right" : "public List<Double> getStatisticsFitnessHistory()",
      "info" : "MethodDeclaration[14991-15147]:MethodDeclaration[14991-15147]"
    }, {
      "left" : "public List<RealMatrix> getStatisticsDHistory()",
      "right" : "public List<RealMatrix> getStatisticsDHistory()",
      "info" : "MethodDeclaration[15153-15295]:MethodDeclaration[15153-15295]"
    }, {
      "left" : "protected PointValuePair doOptimize()",
      "right" : "protected PointValuePair doOptimize()",
      "info" : "MethodDeclaration[15301-22695]:MethodDeclaration[15301-22695]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[22701-25047]:MethodDeclaration[22701-25761]"
    }, {
      "left" : "private void initializeCMA(double[] guess)",
      "right" : "private void initializeCMA(double[] guess)",
      "info" : "MethodDeclaration[25053-28533]:MethodDeclaration[25767-29247]"
    }, {
      "left" : "private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold)",
      "right" : "private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold)",
      "info" : "MethodDeclaration[28539-29480]:MethodDeclaration[29253-30194]"
    }, {
      "left" : "private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz,\n                                              final RealMatrix xold)",
      "right" : "private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz,\n                                              final RealMatrix xold)",
      "info" : "MethodDeclaration[29486-30775]:MethodDeclaration[30200-31489]"
    }, {
      "left" : "private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n            final RealMatrix arz, final int[] arindex, final RealMatrix xold)",
      "right" : "private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n            final RealMatrix arz, final int[] arindex, final RealMatrix xold)",
      "info" : "MethodDeclaration[30781-34924]:MethodDeclaration[31495-35638]"
    }, {
      "left" : "private void updateBD(double negccov)",
      "right" : "private void updateBD(double negccov)",
      "info" : "MethodDeclaration[34930-36469]:MethodDeclaration[35644-37183]"
    }, {
      "left" : "private static void push(double[] vals, double val)",
      "right" : "private static void push(double[] vals, double val)",
      "info" : "MethodDeclaration[36475-36818]:MethodDeclaration[37189-37532]"
    }, {
      "left" : "private int[] sortedIndices(final double[] doubles)",
      "right" : "private int[] sortedIndices(final double[] doubles)",
      "info" : "MethodDeclaration[36824-37425]:MethodDeclaration[37538-38139]"
    }, {
      "left" : "DoubleIndex",
      "right" : "DoubleIndex",
      "info" : "TypeDeclaration[37431-38688]:TypeDeclaration[38145-39402]"
    }, {
      "left" : "private double value;",
      "right" : "private double value;",
      "info" : "FieldDeclaration[37614-37668]:FieldDeclaration[38328-38382]"
    }, {
      "left" : "private int index;",
      "right" : "private int index;",
      "info" : "FieldDeclaration[37677-37735]:FieldDeclaration[38391-38449]"
    }, {
      "left" : "DoubleIndex(double value, int index)",
      "right" : "DoubleIndex(double value, int index)",
      "info" : "MethodDeclaration[37745-37972]:MethodDeclaration[38459-38686]"
    }, {
      "left" : "public int compareTo(DoubleIndex o)",
      "right" : "public int compareTo(DoubleIndex o)",
      "info" : "MethodDeclaration[37982-38109]:MethodDeclaration[38696-38823]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[38119-38461]:MethodDeclaration[38833-39175]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[38471-38681]:MethodDeclaration[39185-39395]"
    }, {
      "left" : "FitnessFunction",
      "right" : "FitnessFunction",
      "info" : "TypeDeclaration[38694-43288]:TypeDeclaration[39408-44002]"
    }, {
      "left" : "private double valueRange;",
      "right" : "private double valueRange;",
      "info" : "FieldDeclaration[38922-39010]:FieldDeclaration[39636-39724]"
    }, {
      "left" : "private boolean isRepairMode;",
      "right" : "private boolean isRepairMode;",
      "info" : "FieldDeclaration[39019-39182]:FieldDeclaration[39733-39896]"
    }, {
      "left" : "public FitnessFunction()",
      "right" : "public FitnessFunction()",
      "info" : "MethodDeclaration[39192-39335]:MethodDeclaration[39906-40049]"
    }, {
      "left" : "public double[] encode(final double[] x)",
      "right" : "public double[] encode(final double[] x)",
      "info" : "MethodDeclaration[39345-39866]:MethodDeclaration[40059-40580]"
    }, {
      "left" : "public double[] repairAndDecode(final double[] x)",
      "right" : "public double[] repairAndDecode(final double[] x)",
      "info" : "MethodDeclaration[39876-40204]:MethodDeclaration[40590-40918]"
    }, {
      "left" : "public double[] decode(final double[] x)",
      "right" : "public double[] decode(final double[] x)",
      "info" : "MethodDeclaration[40214-40733]:MethodDeclaration[40928-41447]"
    }, {
      "left" : "public double value(final double[] point)",
      "right" : "public double value(final double[] point)",
      "info" : "MethodDeclaration[40743-41428]:MethodDeclaration[41457-42142]"
    }, {
      "left" : "public boolean isFeasible(final double[] x)",
      "right" : "public boolean isFeasible(final double[] x)",
      "info" : "MethodDeclaration[41438-41954]:MethodDeclaration[42152-42668]"
    }, {
      "left" : "public void setValueRange(double valueRange)",
      "right" : "public void setValueRange(double valueRange)",
      "info" : "MethodDeclaration[41964-42148]:MethodDeclaration[42678-42862]"
    }, {
      "left" : "private double[] repair(final double[] x)",
      "right" : "private double[] repair(final double[] x)",
      "info" : "MethodDeclaration[42158-42734]:MethodDeclaration[42872-43448]"
    }, {
      "left" : "private double penalty(final double[] x, final double[] repaired)",
      "right" : "private double penalty(final double[] x, final double[] repaired)",
      "info" : "MethodDeclaration[42744-43282]:MethodDeclaration[43458-43996]"
    }, {
      "left" : "private static RealMatrix log(final RealMatrix m)",
      "right" : "private static RealMatrix log(final RealMatrix m)",
      "info" : "MethodDeclaration[43379-43877]:MethodDeclaration[44093-44591]"
    }, {
      "left" : "private static RealMatrix sqrt(final RealMatrix m)",
      "right" : "private static RealMatrix sqrt(final RealMatrix m)",
      "info" : "MethodDeclaration[43883-44403]:MethodDeclaration[44597-45117]"
    }, {
      "left" : "private static RealMatrix square(final RealMatrix m)",
      "right" : "private static RealMatrix square(final RealMatrix m)",
      "info" : "MethodDeclaration[44409-44936]:MethodDeclaration[45123-45650]"
    }, {
      "left" : "private static RealMatrix times(final RealMatrix m, final RealMatrix n)",
      "right" : "private static RealMatrix times(final RealMatrix m, final RealMatrix n)",
      "info" : "MethodDeclaration[44942-45523]:MethodDeclaration[45656-46237]"
    }, {
      "left" : "private static RealMatrix divide(final RealMatrix m, final RealMatrix n)",
      "right" : "private static RealMatrix divide(final RealMatrix m, final RealMatrix n)",
      "info" : "MethodDeclaration[45529-46104]:MethodDeclaration[46243-46818]"
    }, {
      "left" : "private static RealMatrix selectColumns(final RealMatrix m, final int[] cols)",
      "right" : "private static RealMatrix selectColumns(final RealMatrix m, final int[] cols)",
      "info" : "MethodDeclaration[46110-46638]:MethodDeclaration[46824-47352]"
    }, {
      "left" : "private static RealMatrix triu(final RealMatrix m, int k)",
      "right" : "private static RealMatrix triu(final RealMatrix m, int k)",
      "info" : "MethodDeclaration[46644-47173]:MethodDeclaration[47358-47887]"
    }, {
      "left" : "private static RealMatrix sumRows(final RealMatrix m)",
      "right" : "private static RealMatrix sumRows(final RealMatrix m)",
      "info" : "MethodDeclaration[47179-47699]:MethodDeclaration[47893-48413]"
    }, {
      "left" : "private static RealMatrix diag(final RealMatrix m)",
      "right" : "private static RealMatrix diag(final RealMatrix m)",
      "info" : "MethodDeclaration[47705-48517]:MethodDeclaration[48419-49231]"
    }, {
      "left" : "private static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2)",
      "right" : "private static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2)",
      "info" : "MethodDeclaration[48523-48935]:MethodDeclaration[49237-49649]"
    }, {
      "left" : "private static RealMatrix ones(int n, int m)",
      "right" : "private static RealMatrix ones(int n, int m)",
      "info" : "MethodDeclaration[48941-49296]:MethodDeclaration[49655-50010]"
    }, {
      "left" : "private static RealMatrix eye(int n, int m)",
      "right" : "private static RealMatrix eye(int n, int m)",
      "info" : "MethodDeclaration[49302-49713]:MethodDeclaration[50016-50427]"
    }, {
      "left" : "private static RealMatrix zeros(int n, int m)",
      "right" : "private static RealMatrix zeros(int n, int m)",
      "info" : "MethodDeclaration[49719-49946]:MethodDeclaration[50433-50660]"
    }, {
      "left" : "private static RealMatrix repmat(final RealMatrix mat, int n, int m)",
      "right" : "private static RealMatrix repmat(final RealMatrix mat, int n, int m)",
      "info" : "MethodDeclaration[49952-50596]:MethodDeclaration[50666-51310]"
    }, {
      "left" : "private static RealMatrix sequence(double start, double end, double step)",
      "right" : "private static RealMatrix sequence(double start, double end, double step)",
      "info" : "MethodDeclaration[50602-51120]:MethodDeclaration[51316-51834]"
    }, {
      "left" : "private static double max(final RealMatrix m)",
      "right" : "private static double max(final RealMatrix m)",
      "info" : "MethodDeclaration[51126-51608]:MethodDeclaration[51840-52322]"
    }, {
      "left" : "private static double min(final RealMatrix m)",
      "right" : "private static double min(final RealMatrix m)",
      "info" : "MethodDeclaration[51614-52095]:MethodDeclaration[52328-52809]"
    }, {
      "left" : "private static double max(final double[] m)",
      "right" : "private static double max(final double[] m)",
      "info" : "MethodDeclaration[52101-52432]:MethodDeclaration[52815-53146]"
    }, {
      "left" : "private static double min(final double[] m)",
      "right" : "private static double min(final double[] m)",
      "info" : "MethodDeclaration[52438-52768]:MethodDeclaration[53152-53482]"
    }, {
      "left" : "private static int[] inverse(final int[] indices)",
      "right" : "private static int[] inverse(final int[] indices)",
      "info" : "MethodDeclaration[52774-53121]:MethodDeclaration[53488-53835]"
    }, {
      "left" : "private static int[] reverse(final int[] indices)",
      "right" : "private static int[] reverse(final int[] indices)",
      "info" : "MethodDeclaration[53127-53494]:MethodDeclaration[53841-54208]"
    }, {
      "left" : "private double[] randn(int size)",
      "right" : "private double[] randn(int size)",
      "info" : "MethodDeclaration[53500-53813]:MethodDeclaration[54214-54527]"
    }, {
      "left" : "private RealMatrix randn1(int size, int popSize)",
      "right" : "private RealMatrix randn1(int size, int popSize)",
      "info" : "MethodDeclaration[53819-54294]:MethodDeclaration[54533-55008]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10989-10995]:Modifier[10989-10995]"
    }, {
      "left" : "CMAESOptimizer",
      "right" : "CMAESOptimizer",
      "info" : "SimpleName[10996-11010]:SimpleName[10996-11010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11013-11037]:Block[11013-11037]"
    }, {
      "left" : "this(0);",
      "right" : "this(0);",
      "info" : "ConstructorInvocation[11023-11031]:ConstructorInvocation[11023-11031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11097-11103]:Modifier[11097-11103]"
    }, {
      "left" : "CMAESOptimizer",
      "right" : "CMAESOptimizer",
      "info" : "SimpleName[11104-11118]:SimpleName[11104-11118]"
    }, {
      "left" : "int lambda",
      "right" : "int lambda",
      "info" : "SingleVariableDeclaration[11119-11129]:SingleVariableDeclaration[11119-11129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11131-11339]:Block[11131-11339]"
    }, {
      "left" : "this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
      "right" : "this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
      "info" : "ConstructorInvocation[11141-11333]:ConstructorInvocation[11141-11333]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11487-11493]:Modifier[11487-11493]"
    }, {
      "left" : "CMAESOptimizer",
      "right" : "CMAESOptimizer",
      "info" : "SimpleName[11494-11508]:SimpleName[11494-11508]"
    }, {
      "left" : "int lambda",
      "right" : "int lambda",
      "info" : "SingleVariableDeclaration[11509-11519]:SingleVariableDeclaration[11509-11519]"
    }, {
      "left" : "double[] inputSigma",
      "right" : "double[] inputSigma",
      "info" : "SingleVariableDeclaration[11521-11540]:SingleVariableDeclaration[11521-11540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11542-11756]:Block[11542-11756]"
    }, {
      "left" : "this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
      "right" : "this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
      "info" : "ConstructorInvocation[11552-11750]:ConstructorInvocation[11552-11750]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[12575-12586]:MarkerAnnotation[12575-12586]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12591-12597]:Modifier[12591-12597]"
    }, {
      "left" : "CMAESOptimizer",
      "right" : "CMAESOptimizer",
      "info" : "SimpleName[12598-12612]:SimpleName[12598-12612]"
    }, {
      "left" : "int lambda",
      "right" : "int lambda",
      "info" : "SingleVariableDeclaration[12613-12623]:SingleVariableDeclaration[12613-12623]"
    }, {
      "left" : "double[] inputSigma",
      "right" : "double[] inputSigma",
      "info" : "SingleVariableDeclaration[12625-12644]:SingleVariableDeclaration[12625-12644]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[12672-12689]:SingleVariableDeclaration[12672-12689]"
    }, {
      "left" : "double stopFitness",
      "right" : "double stopFitness",
      "info" : "SingleVariableDeclaration[12691-12709]:SingleVariableDeclaration[12691-12709]"
    }, {
      "left" : "boolean isActiveCMA",
      "right" : "boolean isActiveCMA",
      "info" : "SingleVariableDeclaration[12737-12756]:SingleVariableDeclaration[12737-12756]"
    }, {
      "left" : "int diagonalOnly",
      "right" : "int diagonalOnly",
      "info" : "SingleVariableDeclaration[12758-12774]:SingleVariableDeclaration[12758-12774]"
    }, {
      "left" : "int checkFeasableCount",
      "right" : "int checkFeasableCount",
      "info" : "SingleVariableDeclaration[12776-12798]:SingleVariableDeclaration[12776-12798]"
    }, {
      "left" : "RandomGenerator random",
      "right" : "RandomGenerator random",
      "info" : "SingleVariableDeclaration[12826-12848]:SingleVariableDeclaration[12826-12848]"
    }, {
      "left" : "boolean generateStatistics",
      "right" : "boolean generateStatistics",
      "info" : "SingleVariableDeclaration[12850-12876]:SingleVariableDeclaration[12850-12876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12878-13074]:Block[12878-13074]"
    }, {
      "left" : "this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,\n             diagonalOnly, checkFeasableCount, random, generateStatistics,\n             new SimpleValueChecker());",
      "right" : "this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,\n             diagonalOnly, checkFeasableCount, random, generateStatistics,\n             new SimpleValueChecker());",
      "info" : "ConstructorInvocation[12888-13068]:ConstructorInvocation[12888-13068]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13865-13871]:Modifier[13865-13871]"
    }, {
      "left" : "CMAESOptimizer",
      "right" : "CMAESOptimizer",
      "info" : "SimpleName[13872-13886]:SimpleName[13872-13886]"
    }, {
      "left" : "int lambda",
      "right" : "int lambda",
      "info" : "SingleVariableDeclaration[13887-13897]:SingleVariableDeclaration[13887-13897]"
    }, {
      "left" : "double[] inputSigma",
      "right" : "double[] inputSigma",
      "info" : "SingleVariableDeclaration[13899-13918]:SingleVariableDeclaration[13899-13918]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[13946-13963]:SingleVariableDeclaration[13946-13963]"
    }, {
      "left" : "double stopFitness",
      "right" : "double stopFitness",
      "info" : "SingleVariableDeclaration[13965-13983]:SingleVariableDeclaration[13965-13983]"
    }, {
      "left" : "boolean isActiveCMA",
      "right" : "boolean isActiveCMA",
      "info" : "SingleVariableDeclaration[14011-14030]:SingleVariableDeclaration[14011-14030]"
    }, {
      "left" : "int diagonalOnly",
      "right" : "int diagonalOnly",
      "info" : "SingleVariableDeclaration[14032-14048]:SingleVariableDeclaration[14032-14048]"
    }, {
      "left" : "int checkFeasableCount",
      "right" : "int checkFeasableCount",
      "info" : "SingleVariableDeclaration[14050-14072]:SingleVariableDeclaration[14050-14072]"
    }, {
      "left" : "RandomGenerator random",
      "right" : "RandomGenerator random",
      "info" : "SingleVariableDeclaration[14100-14122]:SingleVariableDeclaration[14100-14122]"
    }, {
      "left" : "boolean generateStatistics",
      "right" : "boolean generateStatistics",
      "info" : "SingleVariableDeclaration[14124-14150]:SingleVariableDeclaration[14124-14150]"
    }, {
      "left" : "ConvergenceChecker<PointValuePair> checker",
      "right" : "ConvergenceChecker<PointValuePair> checker",
      "info" : "SingleVariableDeclaration[14178-14220]:SingleVariableDeclaration[14178-14220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14222-14672]:Block[14222-14672]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[14232-14247]:SuperConstructorInvocation[14232-14247]"
    }, {
      "left" : "this.lambda = lambda;",
      "right" : "this.lambda = lambda;",
      "info" : "ExpressionStatement[14256-14277]:ExpressionStatement[14256-14277]"
    }, {
      "left" : "this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();",
      "right" : "this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();",
      "info" : "ExpressionStatement[14286-14362]:ExpressionStatement[14286-14362]"
    }, {
      "left" : "this.maxIterations = maxIterations;",
      "right" : "this.maxIterations = maxIterations;",
      "info" : "ExpressionStatement[14371-14406]:ExpressionStatement[14371-14406]"
    }, {
      "left" : "this.stopFitness = stopFitness;",
      "right" : "this.stopFitness = stopFitness;",
      "info" : "ExpressionStatement[14415-14446]:ExpressionStatement[14415-14446]"
    }, {
      "left" : "this.isActiveCMA = isActiveCMA;",
      "right" : "this.isActiveCMA = isActiveCMA;",
      "info" : "ExpressionStatement[14455-14486]:ExpressionStatement[14455-14486]"
    }, {
      "left" : "this.diagonalOnly = diagonalOnly;",
      "right" : "this.diagonalOnly = diagonalOnly;",
      "info" : "ExpressionStatement[14495-14528]:ExpressionStatement[14495-14528]"
    }, {
      "left" : "this.checkFeasableCount = checkFeasableCount;",
      "right" : "this.checkFeasableCount = checkFeasableCount;",
      "info" : "ExpressionStatement[14537-14582]:ExpressionStatement[14537-14582]"
    }, {
      "left" : "this.random = random;",
      "right" : "this.random = random;",
      "info" : "ExpressionStatement[14591-14612]:ExpressionStatement[14591-14612]"
    }, {
      "left" : "this.generateStatistics = generateStatistics;",
      "right" : "this.generateStatistics = generateStatistics;",
      "info" : "ExpressionStatement[14621-14666]:ExpressionStatement[14621-14666]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14734-14740]:Modifier[14734-14740]"
    }, {
      "left" : "List<Double>",
      "right" : "List<Double>",
      "info" : "ParameterizedType[14741-14753]:ParameterizedType[14741-14753]"
    }, {
      "left" : "getStatisticsSigmaHistory",
      "right" : "getStatisticsSigmaHistory",
      "info" : "SimpleName[14754-14779]:SimpleName[14754-14779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14782-14828]:Block[14782-14828]"
    }, {
      "left" : "return statisticsSigmaHistory;",
      "right" : "return statisticsSigmaHistory;",
      "info" : "ReturnStatement[14792-14822]:ReturnStatement[14792-14822]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14889-14895]:Modifier[14889-14895]"
    }, {
      "left" : "List<RealMatrix>",
      "right" : "List<RealMatrix>",
      "info" : "ParameterizedType[14896-14912]:ParameterizedType[14896-14912]"
    }, {
      "left" : "getStatisticsMeanHistory",
      "right" : "getStatisticsMeanHistory",
      "info" : "SimpleName[14913-14937]:SimpleName[14913-14937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14940-14985]:Block[14940-14985]"
    }, {
      "left" : "return statisticsMeanHistory;",
      "right" : "return statisticsMeanHistory;",
      "info" : "ReturnStatement[14950-14979]:ReturnStatement[14950-14979]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15049-15055]:Modifier[15049-15055]"
    }, {
      "left" : "List<Double>",
      "right" : "List<Double>",
      "info" : "ParameterizedType[15056-15068]:ParameterizedType[15056-15068]"
    }, {
      "left" : "getStatisticsFitnessHistory",
      "right" : "getStatisticsFitnessHistory",
      "info" : "SimpleName[15069-15096]:SimpleName[15069-15096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15099-15147]:Block[15099-15147]"
    }, {
      "left" : "return statisticsFitnessHistory;",
      "right" : "return statisticsFitnessHistory;",
      "info" : "ReturnStatement[15109-15141]:ReturnStatement[15109-15141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15205-15211]:Modifier[15205-15211]"
    }, {
      "left" : "List<RealMatrix>",
      "right" : "List<RealMatrix>",
      "info" : "ParameterizedType[15212-15228]:ParameterizedType[15212-15228]"
    }, {
      "left" : "getStatisticsDHistory",
      "right" : "getStatisticsDHistory",
      "info" : "SimpleName[15229-15250]:SimpleName[15229-15250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15253-15295]:Block[15253-15295]"
    }, {
      "left" : "return statisticsDHistory;",
      "right" : "return statisticsDHistory;",
      "info" : "ReturnStatement[15263-15289]:ReturnStatement[15263-15289]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15326-15335]:MarkerAnnotation[15326-15335]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15340-15349]:Modifier[15340-15349]"
    }, {
      "left" : "PointValuePair",
      "right" : "PointValuePair",
      "info" : "SimpleType[15350-15364]:SimpleType[15350-15364]"
    }, {
      "left" : "doOptimize",
      "right" : "doOptimize",
      "info" : "SimpleName[15365-15375]:SimpleName[15365-15375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15378-22695]:Block[15378-22695]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[15388-15406]:ExpressionStatement[15388-15406]"
    }, {
      "left" : "isMinimize = getGoalType().equals(GoalType.MINIMIZE);",
      "right" : "isMinimize = getGoalType().equals(GoalType.MINIMIZE);",
      "info" : "ExpressionStatement[15496-15549]:ExpressionStatement[15496-15549]"
    }, {
      "left" : "final FitnessFunction fitfun = new FitnessFunction();",
      "right" : "final FitnessFunction fitfun = new FitnessFunction();",
      "info" : "VariableDeclarationStatement[15558-15611]:VariableDeclarationStatement[15558-15611]"
    }, {
      "left" : "final double[] guess = fitfun.encode(getStartPoint());",
      "right" : "final double[] guess = fitfun.encode(getStartPoint());",
      "info" : "VariableDeclarationStatement[15620-15674]:VariableDeclarationStatement[15620-15674]"
    }, {
      "left" : "dimension = guess.length;",
      "right" : "dimension = guess.length;",
      "info" : "ExpressionStatement[15742-15767]:ExpressionStatement[15742-15767]"
    }, {
      "left" : "initializeCMA(guess);",
      "right" : "initializeCMA(guess);",
      "info" : "ExpressionStatement[15776-15797]:ExpressionStatement[15776-15797]"
    }, {
      "left" : "iterations = 0;",
      "right" : "iterations = 0;",
      "info" : "ExpressionStatement[15806-15821]:ExpressionStatement[15806-15821]"
    }, {
      "left" : "double bestValue = fitfun.value(guess);",
      "right" : "double bestValue = fitfun.value(guess);",
      "info" : "VariableDeclarationStatement[15830-15869]:VariableDeclarationStatement[15830-15869]"
    }, {
      "left" : "push(fitnessHistory, bestValue);",
      "right" : "push(fitnessHistory, bestValue);",
      "info" : "ExpressionStatement[15878-15910]:ExpressionStatement[15878-15910]"
    }, {
      "left" : "PointValuePair optimum = new PointValuePair(getStartPoint(),\n                isMinimize ? bestValue : -bestValue);",
      "right" : "PointValuePair optimum = new PointValuePair(getStartPoint(),\n                isMinimize ? bestValue : -bestValue);",
      "info" : "VariableDeclarationStatement[15919-16033]:VariableDeclarationStatement[15919-16033]"
    }, {
      "left" : "PointValuePair lastResult = null;",
      "right" : "PointValuePair lastResult = null;",
      "info" : "VariableDeclarationStatement[16042-16075]:VariableDeclarationStatement[16042-16075]"
    }, {
      "left" : "generationLoop:\n            for (iterations = 1; iterations <= maxIterations; iterations++) {\n                // Generate and evaluate lambda offspring\n                RealMatrix arz = randn1(dimension, lambda);\n                RealMatrix arx = zeros(dimension, lambda);\n                double[] fitness = new double[lambda];\n                // generate random offspring\n                for (int k = 0; k < lambda; k++) {\n                    RealMatrix arxk = null;\n                    for (int i = 0; i < checkFeasableCount+1; i++) {\n                        if (diagonalOnly <= 0) {\n                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                        } else {\n                            arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));\n                        }\n                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {\n                            break;\n                        }\n                        // regenerate random arguments for row\n                        arz.setColumn(k, randn(dimension));\n                    }\n                    copyColumn(arxk, 0, arx, k);\n                    try {\n                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                    } catch (TooManyEvaluationsException e) {\n                        break generationLoop;\n                    }\n                }\n                // Sort by fitness and compute weighted mean into xmean\n                int[] arindex = sortedIndices(fitness);\n                // Calculate new xmean, this is selection and recombination\n                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n                xmean = bestArx.multiply(weights);\n                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n                RealMatrix zmean = bestArz.multiply(weights);\n                boolean hsig = updateEvolutionPaths(zmean, xold);\n                if (diagonalOnly <= 0) {\n                    updateCovariance(hsig, bestArx, arz, arindex, xold);\n                } else {\n                    updateCovarianceDiagonalOnly(hsig, bestArz, xold);\n                }\n                // Adapt step size sigma - Eq. (5)\n                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));\n                double bestFitness = fitness[arindex[0]];\n                double worstFitness = fitness[arindex[arindex.length-1]];\n                if (bestValue > bestFitness) {\n                    bestValue = bestFitness;\n                    lastResult = optimum;\n                    optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);\n                    if (getConvergenceChecker() != null && lastResult != null) {\n                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                            break generationLoop;\n                        }\n                    }\n                }\n                // handle termination criteria\n                // Break, if fitness is good enough\n                if (stopFitness != 0) { // only if stopFitness is defined\n                    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                        break generationLoop;\n                    }\n                }\n                double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n                double[] pcCol = pc.getColumn(0);\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {\n                        break;\n                    }\n                    if (i >= dimension-1) {\n                        break generationLoop;\n                    }\n                }\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*sqrtDiagC[i] > stopTolUpX) {\n                        break generationLoop;\n                    }\n                }\n                double historyBest = min(fitnessHistory);\n                double historyWorst = max(fitnessHistory);\n                if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun) {\n                    break generationLoop;\n                }\n                if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun) {\n                    break generationLoop;\n                }\n                // condition number of the covariance matrix exceeds 1e14\n                if (max(diagD)/min(diagD) > 1e7) {\n                    break generationLoop;\n                }\n                // user defined termination\n                if (getConvergenceChecker() != null) {\n                    PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);\n                    if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult)) {\n                        break generationLoop;\n                    }\n                    lastResult = current;\n                }\n                // Adjust step size in case of equal function values (flat fitness)\n                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                // store best in history\n                push(fitnessHistory,bestFitness);\n                fitfun.setValueRange(worstFitness-bestFitness);\n                if (generateStatistics) {\n                    statisticsSigmaHistory.add(sigma);\n                    statisticsFitnessHistory.add(bestFitness);\n                    statisticsMeanHistory.add(xmean.transpose());\n                    statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n                }\n            }",
      "right" : "generationLoop:\n            for (iterations = 1; iterations <= maxIterations; iterations++) {\n                // Generate and evaluate lambda offspring\n                RealMatrix arz = randn1(dimension, lambda);\n                RealMatrix arx = zeros(dimension, lambda);\n                double[] fitness = new double[lambda];\n                // generate random offspring\n                for (int k = 0; k < lambda; k++) {\n                    RealMatrix arxk = null;\n                    for (int i = 0; i < checkFeasableCount+1; i++) {\n                        if (diagonalOnly <= 0) {\n                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                        } else {\n                            arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));\n                        }\n                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {\n                            break;\n                        }\n                        // regenerate random arguments for row\n                        arz.setColumn(k, randn(dimension));\n                    }\n                    copyColumn(arxk, 0, arx, k);\n                    try {\n                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                    } catch (TooManyEvaluationsException e) {\n                        break generationLoop;\n                    }\n                }\n                // Sort by fitness and compute weighted mean into xmean\n                int[] arindex = sortedIndices(fitness);\n                // Calculate new xmean, this is selection and recombination\n                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n                xmean = bestArx.multiply(weights);\n                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n                RealMatrix zmean = bestArz.multiply(weights);\n                boolean hsig = updateEvolutionPaths(zmean, xold);\n                if (diagonalOnly <= 0) {\n                    updateCovariance(hsig, bestArx, arz, arindex, xold);\n                } else {\n                    updateCovarianceDiagonalOnly(hsig, bestArz, xold);\n                }\n                // Adapt step size sigma - Eq. (5)\n                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));\n                double bestFitness = fitness[arindex[0]];\n                double worstFitness = fitness[arindex[arindex.length-1]];\n                if (bestValue > bestFitness) {\n                    bestValue = bestFitness;\n                    lastResult = optimum;\n                    optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);\n                    if (getConvergenceChecker() != null && lastResult != null) {\n                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                            break generationLoop;\n                        }\n                    }\n                }\n                // handle termination criteria\n                // Break, if fitness is good enough\n                if (stopFitness != 0) { // only if stopFitness is defined\n                    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                        break generationLoop;\n                    }\n                }\n                double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n                double[] pcCol = pc.getColumn(0);\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {\n                        break;\n                    }\n                    if (i >= dimension-1) {\n                        break generationLoop;\n                    }\n                }\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*sqrtDiagC[i] > stopTolUpX) {\n                        break generationLoop;\n                    }\n                }\n                double historyBest = min(fitnessHistory);\n                double historyWorst = max(fitnessHistory);\n                if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun) {\n                    break generationLoop;\n                }\n                if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun) {\n                    break generationLoop;\n                }\n                // condition number of the covariance matrix exceeds 1e14\n                if (max(diagD)/min(diagD) > 1e7) {\n                    break generationLoop;\n                }\n                // user defined termination\n                if (getConvergenceChecker() != null) {\n                    PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);\n                    if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult)) {\n                        break generationLoop;\n                    }\n                    lastResult = current;\n                }\n                // Adjust step size in case of equal function values (flat fitness)\n                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                // store best in history\n                push(fitnessHistory,bestFitness);\n                fitfun.setValueRange(worstFitness-bestFitness);\n                if (generateStatistics) {\n                    statisticsSigmaHistory.add(sigma);\n                    statisticsFitnessHistory.add(bestFitness);\n                    statisticsMeanHistory.add(xmean.transpose());\n                    statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n                }\n            }",
      "info" : "LabeledStatement[16167-22665]:LabeledStatement[16167-22665]"
    }, {
      "left" : "for (iterations = 1; iterations <= maxIterations; iterations++)",
      "right" : "for (iterations = 1; iterations <= maxIterations; iterations++)",
      "info" : "ForStatement[16195-22665]:ForStatement[16195-22665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16259-22665]:Block[16259-22665]"
    }, {
      "left" : "RealMatrix arz = randn1(dimension, lambda);",
      "right" : "RealMatrix arz = randn1(dimension, lambda);",
      "info" : "VariableDeclarationStatement[16335-16378]:VariableDeclarationStatement[16335-16378]"
    }, {
      "left" : "RealMatrix arx = zeros(dimension, lambda);",
      "right" : "RealMatrix arx = zeros(dimension, lambda);",
      "info" : "VariableDeclarationStatement[16395-16437]:VariableDeclarationStatement[16395-16437]"
    }, {
      "left" : "double[] fitness = new double[lambda];",
      "right" : "double[] fitness = new double[lambda];",
      "info" : "VariableDeclarationStatement[16454-16492]:VariableDeclarationStatement[16454-16492]"
    }, {
      "left" : "for (int k = 0; k < lambda; k++)",
      "right" : "for (int k = 0; k < lambda; k++)",
      "info" : "ForStatement[16554-17730]:ForStatement[16554-17730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16587-17730]:Block[16587-17730]"
    }, {
      "left" : "RealMatrix arxk = null;",
      "right" : "RealMatrix arxk = null;",
      "info" : "VariableDeclarationStatement[16609-16632]:VariableDeclarationStatement[16609-16632]"
    }, {
      "left" : "for (int i = 0; i < checkFeasableCount+1; i++)",
      "right" : "for (int i = 0; i < checkFeasableCount+1; i++)",
      "info" : "ForStatement[16653-17419]:ForStatement[16653-17419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16700-17419]:Block[16700-17419]"
    }, {
      "left" : "if (diagonalOnly <= 0)",
      "right" : "if (diagonalOnly <= 0)",
      "info" : "IfStatement[16726-17118]:IfStatement[16726-17118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16749-16943]:Block[16749-16943]"
    }, {
      "left" : "arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
      "right" : "arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
      "info" : "ExpressionStatement[16779-16892]:ExpressionStatement[16779-16892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16949-17118]:Block[16949-17118]"
    }, {
      "left" : "arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
      "right" : "arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
      "info" : "ExpressionStatement[16979-17092]:ExpressionStatement[16979-17092]"
    }, {
      "left" : "if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0)))",
      "right" : "if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0)))",
      "info" : "IfStatement[17143-17274]:IfStatement[17143-17274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17212-17274]:Block[17212-17274]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17242-17248]:BreakStatement[17242-17248]"
    }, {
      "left" : "arz.setColumn(k, randn(dimension));",
      "right" : "arz.setColumn(k, randn(dimension));",
      "info" : "ExpressionStatement[17362-17397]:ExpressionStatement[17362-17397]"
    }, {
      "left" : "copyColumn(arxk, 0, arx, k);",
      "right" : "copyColumn(arxk, 0, arx, k);",
      "info" : "ExpressionStatement[17440-17468]:ExpressionStatement[17440-17468]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17489-17712]:TryStatement[17489-17712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17493-17604]:Block[17493-17604]"
    }, {
      "left" : "fitness[k] = fitfun.value(arx.getColumn(k));",
      "right" : "fitness[k] = fitfun.value(arx.getColumn(k));",
      "info" : "ExpressionStatement[17519-17563]:ExpressionStatement[17519-17563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17643-17712]:Block[17643-17712]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[17669-17690]:BreakStatement[17669-17690]"
    }, {
      "left" : "int[] arindex = sortedIndices(fitness);",
      "right" : "int[] arindex = sortedIndices(fitness);",
      "info" : "VariableDeclarationStatement[17819-17858]:VariableDeclarationStatement[17819-17858]"
    }, {
      "left" : "RealMatrix xold = xmean;",
      "right" : "RealMatrix xold = xmean;",
      "info" : "VariableDeclarationStatement[17951-17975]:VariableDeclarationStatement[17951-17975]"
    }, {
      "left" : "RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",
      "right" : "RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",
      "info" : "VariableDeclarationStatement[18027-18099]:VariableDeclarationStatement[18027-18099]"
    }, {
      "left" : "xmean = bestArx.multiply(weights);",
      "right" : "xmean = bestArx.multiply(weights);",
      "info" : "ExpressionStatement[18116-18150]:ExpressionStatement[18116-18150]"
    }, {
      "left" : "RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",
      "right" : "RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",
      "info" : "VariableDeclarationStatement[18167-18239]:VariableDeclarationStatement[18167-18239]"
    }, {
      "left" : "RealMatrix zmean = bestArz.multiply(weights);",
      "right" : "RealMatrix zmean = bestArz.multiply(weights);",
      "info" : "VariableDeclarationStatement[18256-18301]:VariableDeclarationStatement[18256-18301]"
    }, {
      "left" : "boolean hsig = updateEvolutionPaths(zmean, xold);",
      "right" : "boolean hsig = updateEvolutionPaths(zmean, xold);",
      "info" : "VariableDeclarationStatement[18318-18367]:VariableDeclarationStatement[18318-18367]"
    }, {
      "left" : "if (diagonalOnly <= 0)",
      "right" : "if (diagonalOnly <= 0)",
      "info" : "IfStatement[18384-18595]:IfStatement[18384-18595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18407-18499]:Block[18407-18499]"
    }, {
      "left" : "updateCovariance(hsig, bestArx, arz, arindex, xold);",
      "right" : "updateCovariance(hsig, bestArx, arz, arindex, xold);",
      "info" : "ExpressionStatement[18429-18481]:ExpressionStatement[18429-18481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18505-18595]:Block[18505-18595]"
    }, {
      "left" : "updateCovarianceDiagonalOnly(hsig, bestArz, xold);",
      "right" : "updateCovarianceDiagonalOnly(hsig, bestArz, xold);",
      "info" : "ExpressionStatement[18527-18577]:ExpressionStatement[18527-18577]"
    }, {
      "left" : "sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",
      "right" : "sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",
      "info" : "ExpressionStatement[18663-18724]:ExpressionStatement[18663-18724]"
    }, {
      "left" : "double bestFitness = fitness[arindex[0]];",
      "right" : "double bestFitness = fitness[arindex[0]];",
      "info" : "VariableDeclarationStatement[18741-18782]:VariableDeclarationStatement[18741-18782]"
    }, {
      "left" : "double worstFitness = fitness[arindex[arindex.length-1]];",
      "right" : "double worstFitness = fitness[arindex[arindex.length-1]];",
      "info" : "VariableDeclarationStatement[18799-18856]:VariableDeclarationStatement[18799-18856]"
    }, {
      "left" : "if (bestValue > bestFitness)",
      "right" : "if (bestValue > bestFitness)",
      "info" : "IfStatement[18873-19479]:IfStatement[18873-19479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18902-19479]:Block[18902-19479]"
    }, {
      "left" : "bestValue = bestFitness;",
      "right" : "bestValue = bestFitness;",
      "info" : "ExpressionStatement[18924-18948]:ExpressionStatement[18924-18948]"
    }, {
      "left" : "lastResult = optimum;",
      "right" : "lastResult = optimum;",
      "info" : "ExpressionStatement[18969-18990]:ExpressionStatement[18969-18990]"
    }, {
      "left" : "optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);",
      "right" : "optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);",
      "info" : "ExpressionStatement[19011-19184]:ExpressionStatement[19011-19184]"
    }, {
      "left" : "if (getConvergenceChecker() != null && lastResult != null)",
      "right" : "if (getConvergenceChecker() != null && lastResult != null)",
      "info" : "IfStatement[19205-19461]:IfStatement[19205-19461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19264-19461]:Block[19264-19461]"
    }, {
      "left" : "if (getConvergenceChecker().converged(iterations, optimum, lastResult))",
      "right" : "if (getConvergenceChecker().converged(iterations, optimum, lastResult))",
      "info" : "IfStatement[19290-19439]:IfStatement[19290-19439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19362-19439]:Block[19362-19439]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[19392-19413]:BreakStatement[19392-19413]"
    }, {
      "left" : "if (stopFitness != 0)",
      "right" : "if (stopFitness != 0)",
      "info" : "IfStatement[19595-19821]:IfStatement[19595-19821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19617-19821]:Block[19617-19821]"
    }, {
      "left" : "if (bestFitness < (isMinimize ? stopFitness : -stopFitness))",
      "right" : "if (bestFitness < (isMinimize ? stopFitness : -stopFitness))",
      "info" : "IfStatement[19673-19803]:IfStatement[19673-19803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19734-19803]:Block[19734-19803]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[19760-19781]:BreakStatement[19760-19781]"
    }, {
      "left" : "double[] sqrtDiagC = sqrt(diagC).getColumn(0);",
      "right" : "double[] sqrtDiagC = sqrt(diagC).getColumn(0);",
      "info" : "VariableDeclarationStatement[19838-19884]:VariableDeclarationStatement[19838-19884]"
    }, {
      "left" : "double[] pcCol = pc.getColumn(0);",
      "right" : "double[] pcCol = pc.getColumn(0);",
      "info" : "VariableDeclarationStatement[19901-19934]:VariableDeclarationStatement[19901-19934]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[19951-20260]:ForStatement[19951-20260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19987-20260]:Block[19987-20260]"
    }, {
      "left" : "if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX)",
      "right" : "if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX)",
      "info" : "IfStatement[20009-20130]:IfStatement[20009-20130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20076-20130]:Block[20076-20130]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20102-20108]:BreakStatement[20102-20108]"
    }, {
      "left" : "if (i >= dimension-1)",
      "right" : "if (i >= dimension-1)",
      "info" : "IfStatement[20151-20242]:IfStatement[20151-20242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20173-20242]:Block[20173-20242]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[20199-20220]:BreakStatement[20199-20220]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[20277-20459]:ForStatement[20277-20459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20313-20459]:Block[20313-20459]"
    }, {
      "left" : "if (sigma*sqrtDiagC[i] > stopTolUpX)",
      "right" : "if (sigma*sqrtDiagC[i] > stopTolUpX)",
      "info" : "IfStatement[20335-20441]:IfStatement[20335-20441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20372-20441]:Block[20372-20441]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[20398-20419]:BreakStatement[20398-20419]"
    }, {
      "left" : "double historyBest = min(fitnessHistory);",
      "right" : "double historyBest = min(fitnessHistory);",
      "info" : "VariableDeclarationStatement[20476-20517]:VariableDeclarationStatement[20476-20517]"
    }, {
      "left" : "double historyWorst = max(fitnessHistory);",
      "right" : "double historyWorst = max(fitnessHistory);",
      "info" : "VariableDeclarationStatement[20534-20576]:VariableDeclarationStatement[20534-20576]"
    }, {
      "left" : "if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun)",
      "right" : "if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun)",
      "info" : "IfStatement[20593-20788]:IfStatement[20593-20788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20727-20788]:Block[20727-20788]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[20749-20770]:BreakStatement[20749-20770]"
    }, {
      "left" : "if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun)",
      "right" : "if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun)",
      "info" : "IfStatement[20805-20975]:IfStatement[20805-20975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20914-20975]:Block[20914-20975]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[20936-20957]:BreakStatement[20936-20957]"
    }, {
      "left" : "if (max(diagD)/min(diagD) > 1e7)",
      "right" : "if (max(diagD)/min(diagD) > 1e7)",
      "info" : "IfStatement[21066-21160]:IfStatement[21066-21160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21099-21160]:Block[21099-21160]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[21121-21142]:BreakStatement[21121-21142]"
    }, {
      "left" : "if (getConvergenceChecker() != null)",
      "right" : "if (getConvergenceChecker() != null)",
      "info" : "IfStatement[21221-21711]:IfStatement[21221-21711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21258-21711]:Block[21258-21711]"
    }, {
      "left" : "PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);",
      "right" : "PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);",
      "info" : "VariableDeclarationStatement[21280-21443]:VariableDeclarationStatement[21280-21443]"
    }, {
      "left" : "if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult))",
      "right" : "if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult))",
      "info" : "IfStatement[21464-21651]:IfStatement[21464-21651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21582-21651]:Block[21582-21651]"
    }, {
      "left" : "break generationLoop;",
      "right" : "break generationLoop;",
      "info" : "BreakStatement[21608-21629]:BreakStatement[21608-21629]"
    }, {
      "left" : "lastResult = current;",
      "right" : "lastResult = current;",
      "info" : "ExpressionStatement[21672-21693]:ExpressionStatement[21672-21693]"
    }, {
      "left" : "if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]])",
      "right" : "if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]])",
      "info" : "IfStatement[21812-21948]:IfStatement[21812-21948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21869-21948]:Block[21869-21948]"
    }, {
      "left" : "sigma = sigma * Math.exp(0.2+cs/damps);",
      "right" : "sigma = sigma * Math.exp(0.2+cs/damps);",
      "info" : "ExpressionStatement[21891-21930]:ExpressionStatement[21891-21930]"
    }, {
      "left" : "if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0)",
      "right" : "if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0)",
      "info" : "IfStatement[21965-22169]:IfStatement[21965-22169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22090-22169]:Block[22090-22169]"
    }, {
      "left" : "sigma = sigma * Math.exp(0.2+cs/damps);",
      "right" : "sigma = sigma * Math.exp(0.2+cs/damps);",
      "info" : "ExpressionStatement[22112-22151]:ExpressionStatement[22112-22151]"
    }, {
      "left" : "push(fitnessHistory,bestFitness);",
      "right" : "push(fitnessHistory,bestFitness);",
      "info" : "ExpressionStatement[22227-22260]:ExpressionStatement[22227-22260]"
    }, {
      "left" : "fitfun.setValueRange(worstFitness-bestFitness);",
      "right" : "fitfun.setValueRange(worstFitness-bestFitness);",
      "info" : "ExpressionStatement[22277-22324]:ExpressionStatement[22277-22324]"
    }, {
      "left" : "if (generateStatistics)",
      "right" : "if (generateStatistics)",
      "info" : "IfStatement[22341-22651]:IfStatement[22341-22651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22365-22651]:Block[22365-22651]"
    }, {
      "left" : "statisticsSigmaHistory.add(sigma);",
      "right" : "statisticsSigmaHistory.add(sigma);",
      "info" : "ExpressionStatement[22387-22421]:ExpressionStatement[22387-22421]"
    }, {
      "left" : "statisticsFitnessHistory.add(bestFitness);",
      "right" : "statisticsFitnessHistory.add(bestFitness);",
      "info" : "ExpressionStatement[22442-22484]:ExpressionStatement[22442-22484]"
    }, {
      "left" : "statisticsMeanHistory.add(xmean.transpose());",
      "right" : "statisticsMeanHistory.add(xmean.transpose());",
      "info" : "ExpressionStatement[22505-22550]:ExpressionStatement[22505-22550]"
    }, {
      "left" : "statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));",
      "right" : "statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));",
      "info" : "ExpressionStatement[22571-22633]:ExpressionStatement[22571-22633]"
    }, {
      "left" : "return optimum;",
      "right" : "return optimum;",
      "info" : "ReturnStatement[22674-22689]:ReturnStatement[22674-22689]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22794-22801]:Modifier[22794-22801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22802-22806]:PrimitiveType[22802-22806]"
    }, {
      "left" : "checkParameters",
      "right" : "checkParameters",
      "info" : "SimpleName[22807-22822]:SimpleName[22807-22822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22825-25047]:Block[22825-25761]"
    }, {
      "left" : "final double[] init = getStartPoint();",
      "right" : "final double[] init = getStartPoint();",
      "info" : "VariableDeclarationStatement[22835-22873]:VariableDeclarationStatement[22835-22873]"
    }, {
      "left" : "final double[] lB = getLowerBound();",
      "right" : "final double[] lB = getLowerBound();",
      "info" : "VariableDeclarationStatement[22882-22918]:VariableDeclarationStatement[22882-22918]"
    }, {
      "left" : "final double[] uB = getUpperBound();",
      "right" : "final double[] uB = getUpperBound();",
      "info" : "VariableDeclarationStatement[22927-22963]:VariableDeclarationStatement[22927-22963]"
    }, {
      "left" : "boolean hasFiniteBounds = false;",
      "right" : "boolean hasFiniteBounds = false;",
      "info" : "VariableDeclarationStatement[23041-23073]:VariableDeclarationStatement[23041-23073]"
    }, {
      "left" : "for (int i = 0; i < lB.length; i++)",
      "right" : "for (int i = 0; i < lB.length; i++)",
      "info" : "ForStatement[23082-23296]:ForStatement[23082-23296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23118-23296]:Block[23118-23296]"
    }, {
      "left" : "if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i]))",
      "right" : "if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i]))",
      "info" : "IfStatement[23132-23286]:IfStatement[23132-23286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23208-23286]:Block[23208-23286]"
    }, {
      "left" : "hasFiniteBounds = true;",
      "right" : "hasFiniteBounds = true;",
      "info" : "ExpressionStatement[23226-23249]:ExpressionStatement[23226-23249]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23266-23272]:BreakStatement[23266-23272]"
    }, {
      "left" : "boolean hasInfiniteBounds = false;",
      "right" : "boolean hasInfiniteBounds = false;",
      "info" : "VariableDeclarationStatement[23375-23409]:VariableDeclarationStatement[23375-23409]"
    }, {
      "left" : "if (hasFiniteBounds)",
      "right" : "if (hasFiniteBounds)",
      "info" : "IfStatement[23418-24381]:IfStatement[23418-25095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23439-24270]:Block[23439-24984]"
    }, {
      "left" : "for (int i = 0; i < lB.length; i++)",
      "right" : "for (int i = 0; i < lB.length; i++)",
      "info" : "ForStatement[23453-23691]:ForStatement[23453-23691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23489-23691]:Block[23489-23691]"
    }, {
      "left" : "if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i]))",
      "right" : "if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i]))",
      "info" : "IfStatement[23507-23677]:IfStatement[23507-23677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23585-23677]:Block[23585-23677]"
    }, {
      "left" : "hasInfiniteBounds = true;",
      "right" : "hasInfiniteBounds = true;",
      "info" : "ExpressionStatement[23607-23632]:ExpressionStatement[23607-23632]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23653-23659]:BreakStatement[23653-23659]"
    }, {
      "left" : "if (hasInfiniteBounds)",
      "right" : "if (hasInfiniteBounds)",
      "info" : "IfStatement[23705-24260]:IfStatement[23705-24974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23728-23964]:Block[23728-23964]"
    }, {
      "left" : "throw new MathUnsupportedOperationException();",
      "right" : "throw new MathUnsupportedOperationException();",
      "info" : "ThrowStatement[23904-23950]:ThrowStatement[23904-23950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23970-24260]:Block[23970-24974]"
    }, {
      "left" : "boundaries = new double[2][];",
      "right" : "boundaries = new double[2][];",
      "info" : "ExpressionStatement[24055-24084]:ExpressionStatement[24055-24084]"
    }, {
      "left" : "boundaries[0] = lB;",
      "right" : "boundaries[0] = lB;",
      "info" : "ExpressionStatement[24101-24120]:ExpressionStatement[24101-24120]"
    }, {
      "left" : "boundaries[1] = uB;",
      "right" : "boundaries[1] = uB;",
      "info" : "ExpressionStatement[24137-24156]:ExpressionStatement[24137-24156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24276-24381]:Block[24990-25095]"
    }, {
      "left" : "boundaries = null;",
      "right" : "boundaries = null;",
      "info" : "ExpressionStatement[24353-24371]:ExpressionStatement[25067-25085]"
    }, {
      "left" : "if (inputSigma != null)",
      "right" : "if (inputSigma != null)",
      "info" : "IfStatement[24391-25041]:IfStatement[25105-25755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24415-25041]:Block[25129-25755]"
    }, {
      "left" : "if (inputSigma.length != init.length)",
      "right" : "if (inputSigma.length != init.length)",
      "info" : "IfStatement[24429-24568]:IfStatement[25143-25282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24467-24568]:Block[25181-25282]"
    }, {
      "left" : "throw new DimensionMismatchException(inputSigma.length, init.length);",
      "right" : "throw new DimensionMismatchException(inputSigma.length, init.length);",
      "info" : "ThrowStatement[24485-24554]:ThrowStatement[25199-25268]"
    }, {
      "left" : "for (int i = 0; i < init.length; i++)",
      "right" : "for (int i = 0; i < init.length; i++)",
      "info" : "ForStatement[24581-25031]:ForStatement[25295-25745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24619-25031]:Block[25333-25745]"
    }, {
      "left" : "if (inputSigma[i] < 0)",
      "right" : "if (inputSigma[i] < 0)",
      "info" : "IfStatement[24637-24746]:IfStatement[25351-25460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24660-24746]:Block[25374-25460]"
    }, {
      "left" : "throw new NotPositiveException(inputSigma[i]);",
      "right" : "throw new NotPositiveException(inputSigma[i]);",
      "info" : "ThrowStatement[24682-24728]:ThrowStatement[25396-25442]"
    }, {
      "left" : "if (boundaries != null)",
      "right" : "if (boundaries != null)",
      "info" : "IfStatement[24763-25017]:IfStatement[25477-25731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24787-25017]:Block[25501-25731]"
    }, {
      "left" : "if (inputSigma[i] > boundaries[1][i] - boundaries[0][i])",
      "right" : "if (inputSigma[i] > boundaries[1][i] - boundaries[0][i])",
      "info" : "IfStatement[24809-24999]:IfStatement[25523-25713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24866-24999]:Block[25580-25713]"
    }, {
      "left" : "throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);",
      "right" : "throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);",
      "info" : "ThrowStatement[24892-24977]:ThrowStatement[25606-25691]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25208-25215]:Modifier[25922-25929]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25216-25220]:PrimitiveType[25930-25934]"
    }, {
      "left" : "initializeCMA",
      "right" : "initializeCMA",
      "info" : "SimpleName[25221-25234]:SimpleName[25935-25948]"
    }, {
      "left" : "double[] guess",
      "right" : "double[] guess",
      "info" : "SingleVariableDeclaration[25235-25249]:SingleVariableDeclaration[25949-25963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25251-28533]:Block[25965-29247]"
    }, {
      "left" : "if (lambda <= 0)",
      "right" : "if (lambda <= 0)",
      "info" : "IfStatement[25261-25348]:IfStatement[25975-26062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25278-25348]:Block[25992-26062]"
    }, {
      "left" : "lambda = 4 + (int) (3. * Math.log(dimension));",
      "right" : "lambda = 4 + (int) (3. * Math.log(dimension));",
      "info" : "ExpressionStatement[25292-25338]:ExpressionStatement[26006-26052]"
    }, {
      "left" : "double[][] sigmaArray = new double[guess.length][1];",
      "right" : "double[][] sigmaArray = new double[guess.length][1];",
      "info" : "VariableDeclarationStatement[25385-25437]:VariableDeclarationStatement[26099-26151]"
    }, {
      "left" : "for (int i = 0; i < guess.length; i++)",
      "right" : "for (int i = 0; i < guess.length; i++)",
      "info" : "ForStatement[25446-25683]:ForStatement[26160-26397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25485-25683]:Block[26199-26397]"
    }, {
      "left" : "final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];",
      "right" : "final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];",
      "info" : "VariableDeclarationStatement[25499-25586]:VariableDeclarationStatement[26213-26300]"
    }, {
      "left" : "sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;",
      "right" : "sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;",
      "info" : "ExpressionStatement[25599-25673]:ExpressionStatement[26313-26387]"
    }, {
      "left" : "RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",
      "right" : "RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",
      "info" : "VariableDeclarationStatement[25692-25757]:VariableDeclarationStatement[26406-26471]"
    }, {
      "left" : "sigma = max(insigma);",
      "right" : "sigma = max(insigma);",
      "info" : "ExpressionStatement[25766-25787]:ExpressionStatement[26480-26501]"
    }, {
      "left" : "stopTolUpX = 1e3 * max(insigma);",
      "right" : "stopTolUpX = 1e3 * max(insigma);",
      "info" : "ExpressionStatement[25870-25902]:ExpressionStatement[26584-26616]"
    }, {
      "left" : "stopTolX = 1e-11 * max(insigma);",
      "right" : "stopTolX = 1e-11 * max(insigma);",
      "info" : "ExpressionStatement[25911-25943]:ExpressionStatement[26625-26657]"
    }, {
      "left" : "stopTolFun = 1e-12;",
      "right" : "stopTolFun = 1e-12;",
      "info" : "ExpressionStatement[25952-25971]:ExpressionStatement[26666-26685]"
    }, {
      "left" : "stopTolHistFun = 1e-13;",
      "right" : "stopTolHistFun = 1e-13;",
      "info" : "ExpressionStatement[25980-26003]:ExpressionStatement[26694-26717]"
    }, {
      "left" : "mu = lambda / 2;",
      "right" : "mu = lambda / 2;",
      "info" : "ExpressionStatement[26065-26081]:ExpressionStatement[26779-26795]"
    }, {
      "left" : "logMu2 = Math.log(mu + 0.5);",
      "right" : "logMu2 = Math.log(mu + 0.5);",
      "info" : "ExpressionStatement[26136-26164]:ExpressionStatement[26850-26878]"
    }, {
      "left" : "weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",
      "right" : "weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",
      "info" : "ExpressionStatement[26173-26245]:ExpressionStatement[26887-26959]"
    }, {
      "left" : "double sumw = 0;",
      "right" : "double sumw = 0;",
      "info" : "VariableDeclarationStatement[26254-26270]:VariableDeclarationStatement[26968-26984]"
    }, {
      "left" : "double sumwq = 0;",
      "right" : "double sumwq = 0;",
      "info" : "VariableDeclarationStatement[26279-26296]:VariableDeclarationStatement[26993-27010]"
    }, {
      "left" : "for (int i = 0; i < mu; i++)",
      "right" : "for (int i = 0; i < mu; i++)",
      "info" : "ForStatement[26305-26443]:ForStatement[27019-27157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26334-26443]:Block[27048-27157]"
    }, {
      "left" : "double w = weights.getEntry(i, 0);",
      "right" : "double w = weights.getEntry(i, 0);",
      "info" : "VariableDeclarationStatement[26348-26382]:VariableDeclarationStatement[27062-27096]"
    }, {
      "left" : "sumw += w;",
      "right" : "sumw += w;",
      "info" : "ExpressionStatement[26395-26405]:ExpressionStatement[27109-27119]"
    }, {
      "left" : "sumwq += w * w;",
      "right" : "sumwq += w * w;",
      "info" : "ExpressionStatement[26418-26433]:ExpressionStatement[27132-27147]"
    }, {
      "left" : "weights = weights.scalarMultiply(1. / sumw);",
      "right" : "weights = weights.scalarMultiply(1. / sumw);",
      "info" : "ExpressionStatement[26452-26496]:ExpressionStatement[27166-27210]"
    }, {
      "left" : "mueff = sumw * sumw / sumwq;",
      "right" : "mueff = sumw * sumw / sumwq;",
      "info" : "ExpressionStatement[26505-26533]:ExpressionStatement[27219-27247]"
    }, {
      "left" : "cc = (4. + mueff / dimension) /\n                (dimension + 4. + 2. * mueff / dimension);",
      "right" : "cc = (4. + mueff / dimension) /\n                (dimension + 4. + 2. * mueff / dimension);",
      "info" : "ExpressionStatement[26648-26738]:ExpressionStatement[27362-27452]"
    }, {
      "left" : "cs = (mueff + 2.) / (dimension + mueff + 3.);",
      "right" : "cs = (mueff + 2.) / (dimension + mueff + 3.);",
      "info" : "ExpressionStatement[26747-26792]:ExpressionStatement[27461-27506]"
    }, {
      "left" : "damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /\n                (dimension + 1.)) - 1.)) *\n                Math.max(0.3, 1. - dimension /\n                        (1e-6 + Math.min(maxIterations, getMaxEvaluations() /\n                                lambda))) + cs;",
      "right" : "damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /\n                (dimension + 1.)) - 1.)) *\n                Math.max(0.3, 1. - dimension /\n                        (1e-6 + Math.min(maxIterations, getMaxEvaluations() /\n                                lambda))) + cs;",
      "info" : "ExpressionStatement[26801-27072]:ExpressionStatement[27515-27786]"
    }, {
      "left" : "ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);",
      "right" : "ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);",
      "info" : "ExpressionStatement[27100-27161]:ExpressionStatement[27814-27875]"
    }, {
      "left" : "ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /\n                ((dimension + 2.) * (dimension + 2.) + mueff));",
      "right" : "ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /\n                ((dimension + 2.) * (dimension + 2.) + mueff));",
      "info" : "ExpressionStatement[27170-27295]:ExpressionStatement[27884-28009]"
    }, {
      "left" : "ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",
      "right" : "ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",
      "info" : "ExpressionStatement[27304-27359]:ExpressionStatement[28018-28073]"
    }, {
      "left" : "ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",
      "right" : "ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",
      "info" : "ExpressionStatement[27368-27433]:ExpressionStatement[28082-28147]"
    }, {
      "left" : "chiN = Math.sqrt(dimension) *\n                (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));",
      "right" : "chiN = Math.sqrt(dimension) *\n                (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));",
      "info" : "ExpressionStatement[27442-27553]:ExpressionStatement[28156-28267]"
    }, {
      "left" : "xmean = MatrixUtils.createColumnRealMatrix(guess);",
      "right" : "xmean = MatrixUtils.createColumnRealMatrix(guess);",
      "info" : "ExpressionStatement[27629-27679]:ExpressionStatement[28343-28393]"
    }, {
      "left" : "diagD = insigma.scalarMultiply(1. / sigma);",
      "right" : "diagD = insigma.scalarMultiply(1. / sigma);",
      "info" : "ExpressionStatement[27773-27816]:ExpressionStatement[28487-28530]"
    }, {
      "left" : "diagC = square(diagD);",
      "right" : "diagC = square(diagD);",
      "info" : "ExpressionStatement[27825-27847]:ExpressionStatement[28539-28561]"
    }, {
      "left" : "pc = zeros(dimension, 1);",
      "right" : "pc = zeros(dimension, 1);",
      "info" : "ExpressionStatement[27856-27881]:ExpressionStatement[28570-28595]"
    }, {
      "left" : "ps = zeros(dimension, 1);",
      "right" : "ps = zeros(dimension, 1);",
      "info" : "ExpressionStatement[27925-27950]:ExpressionStatement[28639-28664]"
    }, {
      "left" : "normps = ps.getFrobeniusNorm();",
      "right" : "normps = ps.getFrobeniusNorm();",
      "info" : "ExpressionStatement[27994-28025]:ExpressionStatement[28708-28739]"
    }, {
      "left" : "B = eye(dimension, dimension);",
      "right" : "B = eye(dimension, dimension);",
      "info" : "ExpressionStatement[28035-28065]:ExpressionStatement[28749-28779]"
    }, {
      "left" : "D = ones(dimension, 1);",
      "right" : "D = ones(dimension, 1);",
      "info" : "ExpressionStatement[28074-28097]:ExpressionStatement[28788-28811]"
    }, {
      "left" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "right" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "info" : "ExpressionStatement[28140-28195]:ExpressionStatement[28854-28909]"
    }, {
      "left" : "C = B.multiply(diag(square(D)).multiply(B.transpose()));",
      "right" : "C = B.multiply(diag(square(D)).multiply(B.transpose()));",
      "info" : "ExpressionStatement[28204-28260]:ExpressionStatement[28918-28974]"
    }, {
      "left" : "historySize = 10 + (int) (3. * 10. * dimension / lambda);",
      "right" : "historySize = 10 + (int) (3. * 10. * dimension / lambda);",
      "info" : "ExpressionStatement[28283-28340]:ExpressionStatement[28997-29054]"
    }, {
      "left" : "fitnessHistory = new double[historySize];",
      "right" : "fitnessHistory = new double[historySize];",
      "info" : "ExpressionStatement[28349-28390]:ExpressionStatement[29063-29104]"
    }, {
      "left" : "for (int i = 0; i < historySize; i++)",
      "right" : "for (int i = 0; i < historySize; i++)",
      "info" : "ForStatement[28428-28527]:ForStatement[29142-29241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28466-28527]:Block[29180-29241]"
    }, {
      "left" : "fitnessHistory[i] = Double.MAX_VALUE;",
      "right" : "fitnessHistory[i] = Double.MAX_VALUE;",
      "info" : "ExpressionStatement[28480-28517]:ExpressionStatement[29194-29231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28838-28845]:Modifier[29552-29559]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28846-28853]:PrimitiveType[29560-29567]"
    }, {
      "left" : "updateEvolutionPaths",
      "right" : "updateEvolutionPaths",
      "info" : "SimpleName[28854-28874]:SimpleName[29568-29588]"
    }, {
      "left" : "RealMatrix zmean",
      "right" : "RealMatrix zmean",
      "info" : "SingleVariableDeclaration[28875-28891]:SingleVariableDeclaration[29589-29605]"
    }, {
      "left" : "RealMatrix xold",
      "right" : "RealMatrix xold",
      "info" : "SingleVariableDeclaration[28893-28908]:SingleVariableDeclaration[29607-29622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28910-29480]:Block[29624-30194]"
    }, {
      "left" : "ps = ps.scalarMultiply(1. - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        Math.sqrt(cs * (2. - cs) * mueff)));",
      "right" : "ps = ps.scalarMultiply(1. - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        Math.sqrt(cs * (2. - cs) * mueff)));",
      "info" : "ExpressionStatement[28920-29067]:ExpressionStatement[29634-29781]"
    }, {
      "left" : "normps = ps.getFrobeniusNorm();",
      "right" : "normps = ps.getFrobeniusNorm();",
      "info" : "ExpressionStatement[29076-29107]:ExpressionStatement[29790-29821]"
    }, {
      "left" : "boolean hsig = normps /\n            Math.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /\n                chiN < 1.4 + 2. / (dimension + 1.);",
      "right" : "boolean hsig = normps /\n            Math.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /\n                chiN < 1.4 + 2. / (dimension + 1.);",
      "info" : "VariableDeclarationStatement[29116-29256]:VariableDeclarationStatement[29830-29970]"
    }, {
      "left" : "pc = pc.scalarMultiply(1. - cc);",
      "right" : "pc = pc.scalarMultiply(1. - cc);",
      "info" : "ExpressionStatement[29265-29297]:ExpressionStatement[29979-30011]"
    }, {
      "left" : "if (hsig)",
      "right" : "if (hsig)",
      "info" : "IfStatement[29306-29453]:IfStatement[30020-30167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29316-29453]:Block[30030-30167]"
    }, {
      "left" : "pc = pc.add(xmean.subtract(xold).scalarMultiply(\n                    Math.sqrt(cc * (2. - cc) * mueff) / sigma));",
      "right" : "pc = pc.add(xmean.subtract(xold).scalarMultiply(\n                    Math.sqrt(cc * (2. - cc) * mueff) / sigma));",
      "info" : "ExpressionStatement[29330-29443]:ExpressionStatement[30044-30157]"
    }, {
      "left" : "return hsig;",
      "right" : "return hsig;",
      "info" : "ReturnStatement[29462-29474]:ReturnStatement[30176-30188]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29793-29800]:Modifier[30507-30514]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29801-29805]:PrimitiveType[30515-30519]"
    }, {
      "left" : "updateCovarianceDiagonalOnly",
      "right" : "updateCovarianceDiagonalOnly",
      "info" : "SimpleName[29806-29834]:SimpleName[30520-30548]"
    }, {
      "left" : "boolean hsig",
      "right" : "boolean hsig",
      "info" : "SingleVariableDeclaration[29835-29847]:SingleVariableDeclaration[30549-30561]"
    }, {
      "left" : "final RealMatrix bestArz",
      "right" : "final RealMatrix bestArz",
      "info" : "SingleVariableDeclaration[29895-29919]:SingleVariableDeclaration[30609-30633]"
    }, {
      "left" : "final RealMatrix xold",
      "right" : "final RealMatrix xold",
      "info" : "SingleVariableDeclaration[29967-29988]:SingleVariableDeclaration[30681-30702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29990-30775]:Block[30704-31489]"
    }, {
      "left" : "double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);",
      "right" : "double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);",
      "info" : "VariableDeclarationStatement[30043-30096]:VariableDeclarationStatement[30757-30810]"
    }, {
      "left" : "oldFac += 1. - ccov1Sep - ccovmuSep;",
      "right" : "oldFac += 1. - ccov1Sep - ccovmuSep;",
      "info" : "ExpressionStatement[30105-30141]:ExpressionStatement[30819-30855]"
    }, {
      "left" : "diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n                // plus rank one update\n                .add(square(pc).scalarMultiply(ccov1Sep))\n                // plus rank mu update\n                .add((times(diagC, square(bestArz).multiply(weights)))\n                        .scalarMultiply(ccovmuSep));",
      "right" : "diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n                // plus rank one update\n                .add(square(pc).scalarMultiply(ccov1Sep))\n                // plus rank mu update\n                .add((times(diagC, square(bestArz).multiply(weights)))\n                        .scalarMultiply(ccovmuSep));",
      "info" : "ExpressionStatement[30150-30468]:ExpressionStatement[30864-31182]"
    }, {
      "left" : "diagD = sqrt(diagC);",
      "right" : "diagD = sqrt(diagC);",
      "info" : "ExpressionStatement[30477-30497]:ExpressionStatement[31191-31211]"
    }, {
      "left" : "if (diagonalOnly > 1 && iterations > diagonalOnly)",
      "right" : "if (diagonalOnly > 1 && iterations > diagonalOnly)",
      "info" : "IfStatement[30525-30769]:IfStatement[31239-31483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30576-30769]:Block[31290-31483]"
    }, {
      "left" : "diagonalOnly = 0;",
      "right" : "diagonalOnly = 0;",
      "info" : "ExpressionStatement[30640-30657]:ExpressionStatement[31354-31371]"
    }, {
      "left" : "B = eye(dimension, dimension);",
      "right" : "B = eye(dimension, dimension);",
      "info" : "ExpressionStatement[30670-30700]:ExpressionStatement[31384-31414]"
    }, {
      "left" : "BD = diag(diagD);",
      "right" : "BD = diag(diagD);",
      "info" : "ExpressionStatement[30713-30730]:ExpressionStatement[31427-31444]"
    }, {
      "left" : "C = diag(diagC);",
      "right" : "C = diag(diagC);",
      "info" : "ExpressionStatement[30743-30759]:ExpressionStatement[31457-31473]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31259-31266]:Modifier[31973-31980]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31267-31271]:PrimitiveType[31981-31985]"
    }, {
      "left" : "updateCovariance",
      "right" : "updateCovariance",
      "info" : "SimpleName[31272-31288]:SimpleName[31986-32002]"
    }, {
      "left" : "boolean hsig",
      "right" : "boolean hsig",
      "info" : "SingleVariableDeclaration[31289-31301]:SingleVariableDeclaration[32003-32015]"
    }, {
      "left" : "final RealMatrix bestArx",
      "right" : "final RealMatrix bestArx",
      "info" : "SingleVariableDeclaration[31303-31327]:SingleVariableDeclaration[32017-32041]"
    }, {
      "left" : "final RealMatrix arz",
      "right" : "final RealMatrix arz",
      "info" : "SingleVariableDeclaration[31341-31361]:SingleVariableDeclaration[32055-32075]"
    }, {
      "left" : "final int[] arindex",
      "right" : "final int[] arindex",
      "info" : "SingleVariableDeclaration[31363-31382]:SingleVariableDeclaration[32077-32096]"
    }, {
      "left" : "final RealMatrix xold",
      "right" : "final RealMatrix xold",
      "info" : "SingleVariableDeclaration[31384-31405]:SingleVariableDeclaration[32098-32119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31407-34924]:Block[32121-35638]"
    }, {
      "left" : "double negccov = 0;",
      "right" : "double negccov = 0;",
      "info" : "VariableDeclarationStatement[31417-31436]:VariableDeclarationStatement[32131-32150]"
    }, {
      "left" : "if (ccov1 + ccovmu > 0)",
      "right" : "if (ccov1 + ccovmu > 0)",
      "info" : "IfStatement[31445-34891]:IfStatement[32159-35605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31469-34891]:Block[32183-35605]"
    }, {
      "left" : "RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                    .scalarMultiply(1. / sigma);",
      "right" : "RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                    .scalarMultiply(1. / sigma);",
      "info" : "VariableDeclarationStatement[31483-31588]:VariableDeclarationStatement[32197-32302]"
    }, {
      "left" : "RealMatrix roneu = pc.multiply(pc.transpose())\n                    .scalarMultiply(ccov1);",
      "right" : "RealMatrix roneu = pc.multiply(pc.transpose())\n                    .scalarMultiply(ccov1);",
      "info" : "VariableDeclarationStatement[31626-31716]:VariableDeclarationStatement[32340-32430]"
    }, {
      "left" : "double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);",
      "right" : "double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);",
      "info" : "VariableDeclarationStatement[31795-31845]:VariableDeclarationStatement[32509-32559]"
    }, {
      "left" : "oldFac += 1. - ccov1 - ccovmu;",
      "right" : "oldFac += 1. - ccov1 - ccovmu;",
      "info" : "ExpressionStatement[31858-31888]:ExpressionStatement[32572-32602]"
    }, {
      "left" : "if (isActiveCMA)",
      "right" : "if (isActiveCMA)",
      "info" : "IfStatement[31901-34881]:IfStatement[32615-35595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31918-34382]:Block[32632-35096]"
    }, {
      "left" : "negccov = (1. - ccovmu) * 0.25 * mueff /\n                (Math.pow(dimension + 2., 1.5) + 2. * mueff);",
      "right" : "negccov = (1. - ccovmu) * 0.25 * mueff /\n                (Math.pow(dimension + 2., 1.5) + 2. * mueff);",
      "info" : "ExpressionStatement[31992-32094]:ExpressionStatement[32706-32808]"
    }, {
      "left" : "double negminresidualvariance = 0.66;",
      "right" : "double negminresidualvariance = 0.66;",
      "info" : "VariableDeclarationStatement[32111-32148]:VariableDeclarationStatement[32825-32862]"
    }, {
      "left" : "double negalphaold = 0.5;",
      "right" : "double negalphaold = 0.5;",
      "info" : "VariableDeclarationStatement[32273-32298]:VariableDeclarationStatement[32987-33012]"
    }, {
      "left" : "int[] arReverseIndex = reverse(arindex);",
      "right" : "int[] arReverseIndex = reverse(arindex);",
      "info" : "VariableDeclarationStatement[32477-32517]:VariableDeclarationStatement[33191-33231]"
    }, {
      "left" : "RealMatrix arzneg\n                    = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",
      "right" : "RealMatrix arzneg\n                    = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",
      "info" : "VariableDeclarationStatement[32534-32632]:VariableDeclarationStatement[33248-33346]"
    }, {
      "left" : "RealMatrix arnorms = sqrt(sumRows(square(arzneg)));",
      "right" : "RealMatrix arnorms = sqrt(sumRows(square(arzneg)));",
      "info" : "VariableDeclarationStatement[32649-32700]:VariableDeclarationStatement[33363-33414]"
    }, {
      "left" : "int[] idxnorms = sortedIndices(arnorms.getRow(0));",
      "right" : "int[] idxnorms = sortedIndices(arnorms.getRow(0));",
      "info" : "VariableDeclarationStatement[32717-32767]:VariableDeclarationStatement[33431-33481]"
    }, {
      "left" : "RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",
      "right" : "RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",
      "info" : "VariableDeclarationStatement[32784-32844]:VariableDeclarationStatement[33498-33558]"
    }, {
      "left" : "int[] idxReverse = reverse(idxnorms);",
      "right" : "int[] idxReverse = reverse(idxnorms);",
      "info" : "VariableDeclarationStatement[32861-32898]:VariableDeclarationStatement[33575-33612]"
    }, {
      "left" : "RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",
      "right" : "RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",
      "info" : "VariableDeclarationStatement[32915-32978]:VariableDeclarationStatement[33629-33692]"
    }, {
      "left" : "arnorms = divide(arnormsReverse, arnormsSorted);",
      "right" : "arnorms = divide(arnormsReverse, arnormsSorted);",
      "info" : "ExpressionStatement[32995-33043]:ExpressionStatement[33709-33757]"
    }, {
      "left" : "int[] idxInv = inverse(idxnorms);",
      "right" : "int[] idxInv = inverse(idxnorms);",
      "info" : "VariableDeclarationStatement[33060-33093]:VariableDeclarationStatement[33774-33807]"
    }, {
      "left" : "RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",
      "right" : "RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",
      "info" : "VariableDeclarationStatement[33110-33165]:VariableDeclarationStatement[33824-33879]"
    }, {
      "left" : "double negcovMax = (1. - negminresidualvariance) /\n                        square(arnormsInv).multiply(weights).getEntry(0, 0);",
      "right" : "double negcovMax = (1. - negminresidualvariance) /\n                        square(arnormsInv).multiply(weights).getEntry(0, 0);",
      "info" : "VariableDeclarationStatement[33237-33364]:VariableDeclarationStatement[33951-34078]"
    }, {
      "left" : "if (negccov > negcovMax)",
      "right" : "if (negccov > negcovMax)",
      "info" : "IfStatement[33381-33466]:IfStatement[34095-34180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33406-33466]:Block[34120-34180]"
    }, {
      "left" : "negccov = negcovMax;",
      "right" : "negccov = negcovMax;",
      "info" : "ExpressionStatement[33428-33448]:ExpressionStatement[34142-34162]"
    }, {
      "left" : "arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",
      "right" : "arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",
      "info" : "ExpressionStatement[33483-33540]:ExpressionStatement[34197-34254]"
    }, {
      "left" : "RealMatrix artmp = BD.multiply(arzneg);",
      "right" : "RealMatrix artmp = BD.multiply(arzneg);",
      "info" : "VariableDeclarationStatement[33557-33596]:VariableDeclarationStatement[34271-34310]"
    }, {
      "left" : "RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(\n                        artmp.transpose());",
      "right" : "RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(\n                        artmp.transpose());",
      "info" : "VariableDeclarationStatement[33613-33714]:VariableDeclarationStatement[34327-34428]"
    }, {
      "left" : "oldFac += negalphaold * negccov;",
      "right" : "oldFac += negalphaold * negccov;",
      "info" : "ExpressionStatement[33731-33763]:ExpressionStatement[34445-34477]"
    }, {
      "left" : "C = C.scalarMultiply(oldFac)\n                        // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(\n                                // plus rank mu update\n                                ccovmu + (1. - negalphaold) * negccov)\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())))\n                        .subtract(Cneg.scalarMultiply(negccov));",
      "right" : "C = C.scalarMultiply(oldFac)\n                        // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(\n                                // plus rank mu update\n                                ccovmu + (1. - negalphaold) * negccov)\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())))\n                        .subtract(Cneg.scalarMultiply(negccov));",
      "info" : "ExpressionStatement[33780-34368]:ExpressionStatement[34494-35082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34388-34881]:Block[35102-35595]"
    }, {
      "left" : "C = C.scalarMultiply(oldFac) // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())));",
      "right" : "C = C.scalarMultiply(oldFac) // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())));",
      "info" : "ExpressionStatement[34463-34867]:ExpressionStatement[35177-35581]"
    }, {
      "left" : "updateBD(negccov);",
      "right" : "updateBD(negccov);",
      "info" : "ExpressionStatement[34900-34918]:ExpressionStatement[35614-35632]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35033-35040]:Modifier[35747-35754]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35041-35045]:PrimitiveType[35755-35759]"
    }, {
      "left" : "updateBD",
      "right" : "updateBD",
      "info" : "SimpleName[35046-35054]:SimpleName[35760-35768]"
    }, {
      "left" : "double negccov",
      "right" : "double negccov",
      "info" : "SingleVariableDeclaration[35055-35069]:SingleVariableDeclaration[35769-35783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35071-36469]:Block[35785-37183]"
    }, {
      "left" : "if (ccov1 + ccovmu + negccov > 0 &&\n                (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.)",
      "right" : "if (ccov1 + ccovmu + negccov > 0 &&\n                (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.)",
      "info" : "IfStatement[35081-36463]:IfStatement[35795-37177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35204-36463]:Block[35918-37177]"
    }, {
      "left" : "C = triu(C, 0).add(triu(C, 1).transpose());",
      "right" : "C = triu(C, 0).add(triu(C, 1).transpose());",
      "info" : "ExpressionStatement[35251-35294]:ExpressionStatement[35965-36008]"
    }, {
      "left" : "EigenDecomposition eig = new EigenDecomposition(C);",
      "right" : "EigenDecomposition eig = new EigenDecomposition(C);",
      "info" : "VariableDeclarationStatement[35366-35417]:VariableDeclarationStatement[36080-36131]"
    }, {
      "left" : "B = eig.getV();",
      "right" : "B = eig.getV();",
      "info" : "ExpressionStatement[35430-35445]:ExpressionStatement[36144-36159]"
    }, {
      "left" : "D = eig.getD();",
      "right" : "D = eig.getD();",
      "info" : "ExpressionStatement[35509-35524]:ExpressionStatement[36223-36238]"
    }, {
      "left" : "diagD = diag(D);",
      "right" : "diagD = diag(D);",
      "info" : "ExpressionStatement[35537-35553]:ExpressionStatement[36251-36267]"
    }, {
      "left" : "if (min(diagD) <= 0)",
      "right" : "if (min(diagD) <= 0)",
      "info" : "IfStatement[35566-35998]:IfStatement[36280-36712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35587-35998]:Block[36301-36712]"
    }, {
      "left" : "for (int i = 0; i < dimension; i++)",
      "right" : "for (int i = 0; i < dimension; i++)",
      "info" : "ForStatement[35605-35784]:ForStatement[36319-36498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35641-35784]:Block[36355-36498]"
    }, {
      "left" : "if (diagD.getEntry(i, 0) < 0)",
      "right" : "if (diagD.getEntry(i, 0) < 0)",
      "info" : "IfStatement[35663-35766]:IfStatement[36377-36480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35693-35766]:Block[36407-36480]"
    }, {
      "left" : "diagD.setEntry(i, 0, 0.);",
      "right" : "diagD.setEntry(i, 0, 0.);",
      "info" : "ExpressionStatement[35719-35744]:ExpressionStatement[36433-36458]"
    }, {
      "left" : "double tfac = max(diagD) / 1e14;",
      "right" : "double tfac = max(diagD) / 1e14;",
      "info" : "VariableDeclarationStatement[35801-35833]:VariableDeclarationStatement[36515-36547]"
    }, {
      "left" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "right" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[35850-35908]:ExpressionStatement[36564-36622]"
    }, {
      "left" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "right" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[35925-35984]:ExpressionStatement[36639-36698]"
    }, {
      "left" : "if (max(diagD) > 1e14 * min(diagD))",
      "right" : "if (max(diagD) > 1e14 * min(diagD))",
      "info" : "IfStatement[36011-36275]:IfStatement[36725-36989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36047-36275]:Block[36761-36989]"
    }, {
      "left" : "double tfac = max(diagD) / 1e14 - min(diagD);",
      "right" : "double tfac = max(diagD) / 1e14 - min(diagD);",
      "info" : "VariableDeclarationStatement[36065-36110]:VariableDeclarationStatement[36779-36824]"
    }, {
      "left" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "right" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[36127-36185]:ExpressionStatement[36841-36899]"
    }, {
      "left" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "right" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
      "info" : "ExpressionStatement[36202-36261]:ExpressionStatement[36916-36975]"
    }, {
      "left" : "diagC = diag(C);",
      "right" : "diagC = diag(C);",
      "info" : "ExpressionStatement[36288-36304]:ExpressionStatement[37002-37018]"
    }, {
      "left" : "diagD = sqrt(diagD);",
      "right" : "diagD = sqrt(diagD);",
      "info" : "ExpressionStatement[36317-36337]:ExpressionStatement[37031-37051]"
    }, {
      "left" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "right" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
      "info" : "ExpressionStatement[36388-36443]:ExpressionStatement[37102-37157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36643-36650]:Modifier[37357-37364]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36651-36657]:Modifier[37365-37371]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36658-36662]:PrimitiveType[37372-37376]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[36663-36667]:SimpleName[37377-37381]"
    }, {
      "left" : "double[] vals",
      "right" : "double[] vals",
      "info" : "SingleVariableDeclaration[36668-36681]:SingleVariableDeclaration[37382-37395]"
    }, {
      "left" : "double val",
      "right" : "double val",
      "info" : "SingleVariableDeclaration[36683-36693]:SingleVariableDeclaration[37397-37407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36695-36818]:Block[37409-37532]"
    }, {
      "left" : "for (int i = vals.length-1; i > 0; i--)",
      "right" : "for (int i = vals.length-1; i > 0; i--)",
      "info" : "ForStatement[36705-36789]:ForStatement[37419-37503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36745-36789]:Block[37459-37503]"
    }, {
      "left" : "vals[i] = vals[i-1];",
      "right" : "vals[i] = vals[i-1];",
      "info" : "ExpressionStatement[36759-36779]:ExpressionStatement[37473-37493]"
    }, {
      "left" : "vals[0] = val;",
      "right" : "vals[0] = val;",
      "info" : "ExpressionStatement[36798-36812]:ExpressionStatement[37512-37526]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36992-36999]:Modifier[37706-37713]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[37000-37005]:ArrayType[37714-37719]"
    }, {
      "left" : "sortedIndices",
      "right" : "sortedIndices",
      "info" : "SimpleName[37006-37019]:SimpleName[37720-37733]"
    }, {
      "left" : "final double[] doubles",
      "right" : "final double[] doubles",
      "info" : "SingleVariableDeclaration[37020-37042]:SingleVariableDeclaration[37734-37756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37044-37425]:Block[37758-38139]"
    }, {
      "left" : "DoubleIndex[] dis = new DoubleIndex[doubles.length];",
      "right" : "DoubleIndex[] dis = new DoubleIndex[doubles.length];",
      "info" : "VariableDeclarationStatement[37054-37106]:VariableDeclarationStatement[37768-37820]"
    }, {
      "left" : "for (int i = 0; i < doubles.length; i++)",
      "right" : "for (int i = 0; i < doubles.length; i++)",
      "info" : "ForStatement[37115-37220]:ForStatement[37829-37934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37156-37220]:Block[37870-37934]"
    }, {
      "left" : "dis[i] = new DoubleIndex(doubles[i], i);",
      "right" : "dis[i] = new DoubleIndex(doubles[i], i);",
      "info" : "ExpressionStatement[37170-37210]:ExpressionStatement[37884-37924]"
    }, {
      "left" : "Arrays.sort(dis);",
      "right" : "Arrays.sort(dis);",
      "info" : "ExpressionStatement[37229-37246]:ExpressionStatement[37943-37960]"
    }, {
      "left" : "int[] indices = new int[doubles.length];",
      "right" : "int[] indices = new int[doubles.length];",
      "info" : "VariableDeclarationStatement[37255-37295]:VariableDeclarationStatement[37969-38009]"
    }, {
      "left" : "for (int i = 0; i < doubles.length; i++)",
      "right" : "for (int i = 0; i < doubles.length; i++)",
      "info" : "ForStatement[37304-37395]:ForStatement[38018-38109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37345-37395]:Block[38059-38109]"
    }, {
      "left" : "indices[i] = dis[i].index;",
      "right" : "indices[i] = dis[i].index;",
      "info" : "ExpressionStatement[37359-37385]:ExpressionStatement[38073-38099]"
    }, {
      "left" : "return indices;",
      "right" : "return indices;",
      "info" : "ReturnStatement[37404-37419]:ReturnStatement[38118-38133]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37536-37543]:Modifier[38250-38257]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37544-37550]:Modifier[38258-38264]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[37551-37556]:TYPE_DECLARATION_KIND[38265-38270]"
    }, {
      "left" : "DoubleIndex",
      "right" : "DoubleIndex",
      "info" : "SimpleName[37557-37568]:SimpleName[38271-38282]"
    }, {
      "left" : "DoubleIndex",
      "right" : "DoubleIndex",
      "info" : "SimpleName[37860-37871]:SimpleName[38574-38585]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[37872-37884]:SingleVariableDeclaration[38586-38598]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[37886-37895]:SingleVariableDeclaration[38600-38609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37897-37972]:Block[38611-38686]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[37911-37930]:ExpressionStatement[38625-38644]"
    }, {
      "left" : "this.index = index;",
      "right" : "this.index = index;",
      "info" : "ExpressionStatement[37943-37962]:ExpressionStatement[38657-38676]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38011-38017]:Modifier[38725-38731]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38018-38021]:PrimitiveType[38732-38735]"
    }, {
      "left" : "compareTo",
      "right" : "compareTo",
      "info" : "SimpleName[38022-38031]:SimpleName[38736-38745]"
    }, {
      "left" : "DoubleIndex o",
      "right" : "DoubleIndex o",
      "info" : "SingleVariableDeclaration[38032-38045]:SingleVariableDeclaration[38746-38759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38047-38109]:Block[38761-38823]"
    }, {
      "left" : "return Double.compare(value, o.value);",
      "right" : "return Double.compare(value, o.value);",
      "info" : "ReturnStatement[38061-38099]:ReturnStatement[38775-38813]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38148-38157]:MarkerAnnotation[38862-38871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38166-38172]:Modifier[38880-38886]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38173-38180]:PrimitiveType[38887-38894]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[38181-38187]:SimpleName[38895-38901]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[38188-38200]:SingleVariableDeclaration[38902-38914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38202-38461]:Block[38916-39175]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[38217-38280]:IfStatement[38931-38994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38236-38280]:Block[38950-38994]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38254-38266]:ReturnStatement[38968-38980]"
    }, {
      "left" : "if (other instanceof DoubleIndex)",
      "right" : "if (other instanceof DoubleIndex)",
      "info" : "IfStatement[38294-38423]:IfStatement[39008-39137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38328-38423]:Block[39042-39137]"
    }, {
      "left" : "return Double.compare(value, ((DoubleIndex) other).value) == 0;",
      "right" : "return Double.compare(value, ((DoubleIndex) other).value) == 0;",
      "info" : "ReturnStatement[38346-38409]:ReturnStatement[39060-39123]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38437-38450]:ReturnStatement[39151-39164]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38500-38509]:MarkerAnnotation[39214-39223]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38518-38524]:Modifier[39232-39238]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38525-38528]:PrimitiveType[39239-39242]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[38529-38537]:SimpleName[39243-39251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38540-38681]:Block[39254-39395]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(value);",
      "right" : "long bits = Double.doubleToLongBits(value);",
      "info" : "VariableDeclarationStatement[38554-38597]:VariableDeclarationStatement[39268-39311]"
    }, {
      "left" : "return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);",
      "right" : "return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);",
      "info" : "ReturnStatement[38610-38671]:ReturnStatement[39324-39385]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38882-38889]:Modifier[39596-39603]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[38890-38895]:TYPE_DECLARATION_KIND[39604-39609]"
    }, {
      "left" : "FitnessFunction",
      "right" : "FitnessFunction",
      "info" : "SimpleName[38896-38911]:SimpleName[39610-39625]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39236-39242]:Modifier[39950-39956]"
    }, {
      "left" : "FitnessFunction",
      "right" : "FitnessFunction",
      "info" : "SimpleName[39243-39258]:SimpleName[39957-39972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39261-39335]:Block[39975-40049]"
    }, {
      "left" : "valueRange = 1.0;",
      "right" : "valueRange = 1.0;",
      "info" : "ExpressionStatement[39275-39292]:ExpressionStatement[39989-40006]"
    }, {
      "left" : "isRepairMode = true;",
      "right" : "isRepairMode = true;",
      "info" : "ExpressionStatement[39305-39325]:ExpressionStatement[40019-40039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39474-39480]:Modifier[40188-40194]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[39481-39489]:ArrayType[40195-40203]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[39490-39496]:SimpleName[40204-40210]"
    }, {
      "left" : "final double[] x",
      "right" : "final double[] x",
      "info" : "SingleVariableDeclaration[39497-39513]:SingleVariableDeclaration[40211-40227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39515-39866]:Block[40229-40580]"
    }, {
      "left" : "if (boundaries == null)",
      "right" : "if (boundaries == null)",
      "info" : "IfStatement[39529-39594]:IfStatement[40243-40308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39553-39594]:Block[40267-40308]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[39571-39580]:ReturnStatement[40285-40294]"
    }, {
      "left" : "double[] res = new double[x.length];",
      "right" : "double[] res = new double[x.length];",
      "info" : "VariableDeclarationStatement[39607-39643]:VariableDeclarationStatement[40321-40357]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[39656-39832]:ForStatement[40370-40546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39691-39832]:Block[40405-40546]"
    }, {
      "left" : "double diff = boundaries[1][i] - boundaries[0][i];",
      "right" : "double diff = boundaries[1][i] - boundaries[0][i];",
      "info" : "VariableDeclarationStatement[39709-39759]:VariableDeclarationStatement[40423-40473]"
    }, {
      "left" : "res[i] = (x[i] - boundaries[0][i]) / diff;",
      "right" : "res[i] = (x[i] - boundaries[0][i]) / diff;",
      "info" : "ExpressionStatement[39776-39818]:ExpressionStatement[40490-40532]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[39845-39856]:ReturnStatement[40559-40570]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40024-40030]:Modifier[40738-40744]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[40031-40039]:ArrayType[40745-40753]"
    }, {
      "left" : "repairAndDecode",
      "right" : "repairAndDecode",
      "info" : "SimpleName[40040-40055]:SimpleName[40754-40769]"
    }, {
      "left" : "final double[] x",
      "right" : "final double[] x",
      "info" : "SingleVariableDeclaration[40056-40072]:SingleVariableDeclaration[40770-40786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40074-40204]:Block[40788-40918]"
    }, {
      "left" : "return boundaries != null && isRepairMode ?\n                decode(repair(x)) :\n                decode(x);",
      "right" : "return boundaries != null && isRepairMode ?\n                decode(repair(x)) :\n                decode(x);",
      "info" : "ReturnStatement[40088-40194]:ReturnStatement[40802-40908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40343-40349]:Modifier[41057-41063]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[40350-40358]:ArrayType[41064-41072]"
    }, {
      "left" : "decode",
      "right" : "decode",
      "info" : "SimpleName[40359-40365]:SimpleName[41073-41079]"
    }, {
      "left" : "final double[] x",
      "right" : "final double[] x",
      "info" : "SingleVariableDeclaration[40366-40382]:SingleVariableDeclaration[41080-41096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40384-40733]:Block[41098-41447]"
    }, {
      "left" : "if (boundaries == null)",
      "right" : "if (boundaries == null)",
      "info" : "IfStatement[40398-40463]:IfStatement[41112-41177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40422-40463]:Block[41136-41177]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[40440-40449]:ReturnStatement[41154-41163]"
    }, {
      "left" : "double[] res = new double[x.length];",
      "right" : "double[] res = new double[x.length];",
      "info" : "VariableDeclarationStatement[40476-40512]:VariableDeclarationStatement[41190-41226]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[40525-40699]:ForStatement[41239-41413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40560-40699]:Block[41274-41413]"
    }, {
      "left" : "double diff = boundaries[1][i] - boundaries[0][i];",
      "right" : "double diff = boundaries[1][i] - boundaries[0][i];",
      "info" : "VariableDeclarationStatement[40578-40628]:VariableDeclarationStatement[41292-41342]"
    }, {
      "left" : "res[i] = diff * x[i] + boundaries[0][i];",
      "right" : "res[i] = diff * x[i] + boundaries[0][i];",
      "info" : "ExpressionStatement[40645-40685]:ExpressionStatement[41359-41399]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[40712-40723]:ReturnStatement[41426-41437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40893-40899]:Modifier[41607-41613]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[40900-40906]:PrimitiveType[41614-41620]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[40907-40912]:SimpleName[41621-41626]"
    }, {
      "left" : "final double[] point",
      "right" : "final double[] point",
      "info" : "SingleVariableDeclaration[40913-40933]:SingleVariableDeclaration[41627-41647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40935-41428]:Block[41649-42142]"
    }, {
      "left" : "double value;",
      "right" : "double value;",
      "info" : "VariableDeclarationStatement[40949-40962]:VariableDeclarationStatement[41663-41676]"
    }, {
      "left" : "if (boundaries != null && isRepairMode)",
      "right" : "if (boundaries != null && isRepairMode)",
      "info" : "IfStatement[40975-41370]:IfStatement[41689-42084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41015-41242]:Block[41729-41956]"
    }, {
      "left" : "double[] repaired = repair(point);",
      "right" : "double[] repaired = repair(point);",
      "info" : "VariableDeclarationStatement[41033-41067]:VariableDeclarationStatement[41747-41781]"
    }, {
      "left" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(repaired)) +\n                        penalty(point, repaired);",
      "right" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(repaired)) +\n                        penalty(point, repaired);",
      "info" : "ExpressionStatement[41084-41228]:ExpressionStatement[41798-41942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41248-41370]:Block[41962-42084]"
    }, {
      "left" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(point));",
      "right" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(point));",
      "info" : "ExpressionStatement[41266-41356]:ExpressionStatement[41980-42070]"
    }, {
      "left" : "return isMinimize ? value : -value;",
      "right" : "return isMinimize ? value : -value;",
      "info" : "ReturnStatement[41383-41418]:ReturnStatement[42097-42132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41560-41566]:Modifier[42274-42280]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41567-41574]:PrimitiveType[42281-42288]"
    }, {
      "left" : "isFeasible",
      "right" : "isFeasible",
      "info" : "SimpleName[41575-41585]:SimpleName[42289-42299]"
    }, {
      "left" : "final double[] x",
      "right" : "final double[] x",
      "info" : "SingleVariableDeclaration[41586-41602]:SingleVariableDeclaration[42300-42316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41604-41954]:Block[42318-42668]"
    }, {
      "left" : "if (boundaries == null)",
      "right" : "if (boundaries == null)",
      "info" : "IfStatement[41618-41686]:IfStatement[42332-42400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41642-41686]:Block[42356-42400]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41660-41672]:ReturnStatement[42374-42386]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[41699-41919]:ForStatement[42413-42633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41734-41919]:Block[42448-42633]"
    }, {
      "left" : "if (x[i] < 0)",
      "right" : "if (x[i] < 0)",
      "info" : "IfStatement[41752-41819]:IfStatement[42466-42533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41766-41819]:Block[42480-42533]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41788-41801]:ReturnStatement[42502-42515]"
    }, {
      "left" : "if (x[i] > 1.0)",
      "right" : "if (x[i] > 1.0)",
      "info" : "IfStatement[41836-41905]:IfStatement[42550-42619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41852-41905]:Block[42566-42619]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41874-41887]:ReturnStatement[42588-42601]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41932-41944]:ReturnStatement[42646-42658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42050-42056]:Modifier[42764-42770]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42057-42061]:PrimitiveType[42771-42775]"
    }, {
      "left" : "setValueRange",
      "right" : "setValueRange",
      "info" : "SimpleName[42062-42075]:SimpleName[42776-42789]"
    }, {
      "left" : "double valueRange",
      "right" : "double valueRange",
      "info" : "SingleVariableDeclaration[42076-42093]:SingleVariableDeclaration[42790-42807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42095-42148]:Block[42809-42862]"
    }, {
      "left" : "this.valueRange = valueRange;",
      "right" : "this.valueRange = valueRange;",
      "info" : "ExpressionStatement[42109-42138]:ExpressionStatement[42823-42852]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42303-42310]:Modifier[43017-43024]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[42311-42319]:ArrayType[43025-43033]"
    }, {
      "left" : "repair",
      "right" : "repair",
      "info" : "SimpleName[42320-42326]:SimpleName[43034-43040]"
    }, {
      "left" : "final double[] x",
      "right" : "final double[] x",
      "info" : "SingleVariableDeclaration[42327-42343]:SingleVariableDeclaration[43041-43057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42345-42734]:Block[43059-43448]"
    }, {
      "left" : "double[] repaired = new double[x.length];",
      "right" : "double[] repaired = new double[x.length];",
      "info" : "VariableDeclarationStatement[42359-42400]:VariableDeclarationStatement[43073-43114]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[42413-42695]:ForStatement[43127-43409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42448-42695]:Block[43162-43409]"
    }, {
      "left" : "if (x[i] < 0)",
      "right" : "if (x[i] < 0)",
      "info" : "IfStatement[42466-42681]:IfStatement[43180-43395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42480-42536]:Block[43194-43250]"
    }, {
      "left" : "repaired[i] = 0;",
      "right" : "repaired[i] = 0;",
      "info" : "ExpressionStatement[42502-42518]:ExpressionStatement[43216-43232]"
    }, {
      "left" : "if (x[i] > 1.0)",
      "right" : "if (x[i] > 1.0)",
      "info" : "IfStatement[42542-42681]:IfStatement[43256-43395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42558-42616]:Block[43272-43330]"
    }, {
      "left" : "repaired[i] = 1.0;",
      "right" : "repaired[i] = 1.0;",
      "info" : "ExpressionStatement[42580-42598]:ExpressionStatement[43294-43312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42622-42681]:Block[43336-43395]"
    }, {
      "left" : "repaired[i] = x[i];",
      "right" : "repaired[i] = x[i];",
      "info" : "ExpressionStatement[42644-42663]:ExpressionStatement[43358-43377]"
    }, {
      "left" : "return repaired;",
      "right" : "return repaired;",
      "info" : "ReturnStatement[42708-42724]:ReturnStatement[43422-43438]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42952-42959]:Modifier[43666-43673]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[42960-42966]:PrimitiveType[43674-43680]"
    }, {
      "left" : "penalty",
      "right" : "penalty",
      "info" : "SimpleName[42967-42974]:SimpleName[43681-43688]"
    }, {
      "left" : "final double[] x",
      "right" : "final double[] x",
      "info" : "SingleVariableDeclaration[42975-42991]:SingleVariableDeclaration[43689-43705]"
    }, {
      "left" : "final double[] repaired",
      "right" : "final double[] repaired",
      "info" : "SingleVariableDeclaration[42993-43016]:SingleVariableDeclaration[43707-43730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43018-43282]:Block[43732-43996]"
    }, {
      "left" : "double penalty = 0;",
      "right" : "double penalty = 0;",
      "info" : "VariableDeclarationStatement[43032-43051]:VariableDeclarationStatement[43746-43765]"
    }, {
      "left" : "for (int i = 0; i < x.length; i++)",
      "right" : "for (int i = 0; i < x.length; i++)",
      "info" : "ForStatement[43064-43220]:ForStatement[43778-43934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43099-43220]:Block[43813-43934]"
    }, {
      "left" : "double diff = Math.abs(x[i] - repaired[i]);",
      "right" : "double diff = Math.abs(x[i] - repaired[i]);",
      "info" : "VariableDeclarationStatement[43117-43160]:VariableDeclarationStatement[43831-43874]"
    }, {
      "left" : "penalty += diff * valueRange;",
      "right" : "penalty += diff * valueRange;",
      "info" : "ExpressionStatement[43177-43206]:ExpressionStatement[43891-43920]"
    }, {
      "left" : "return isMinimize ? penalty : -penalty;",
      "right" : "return isMinimize ? penalty : -penalty;",
      "info" : "ReturnStatement[43233-43272]:ReturnStatement[43947-43986]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43492-43499]:Modifier[44206-44213]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43500-43506]:Modifier[44214-44220]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[43507-43517]:SimpleType[44221-44231]"
    }, {
      "left" : "log",
      "right" : "log",
      "info" : "SimpleName[43518-43521]:SimpleName[44232-44235]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[43522-43540]:SingleVariableDeclaration[44236-44254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43542-43877]:Block[44256-44591]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[43552-43623]:VariableDeclarationStatement[44266-44337]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[43632-43820]:ForStatement[44346-44534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43678-43820]:Block[44392-44534]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[43692-43810]:ForStatement[44406-44524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43741-43810]:Block[44455-44524]"
    }, {
      "left" : "d[r][c] = Math.log(m.getEntry(r, c));",
      "right" : "d[r][c] = Math.log(m.getEntry(r, c));",
      "info" : "ExpressionStatement[43759-43796]:ExpressionStatement[44473-44510]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[43829-43871]:ReturnStatement[44543-44585]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44016-44023]:Modifier[44730-44737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44024-44030]:Modifier[44738-44744]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[44031-44041]:SimpleType[44745-44755]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[44042-44046]:SimpleName[44756-44760]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[44047-44065]:SingleVariableDeclaration[44761-44779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44067-44403]:Block[44781-45117]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[44077-44148]:VariableDeclarationStatement[44791-44862]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[44157-44346]:ForStatement[44871-45060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44203-44346]:Block[44917-45060]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[44217-44336]:ForStatement[44931-45050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44266-44336]:Block[44980-45050]"
    }, {
      "left" : "d[r][c] = Math.sqrt(m.getEntry(r, c));",
      "right" : "d[r][c] = Math.sqrt(m.getEntry(r, c));",
      "info" : "ExpressionStatement[44284-44322]:ExpressionStatement[44998-45036]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[44355-44397]:ReturnStatement[45069-45111]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44524-44531]:Modifier[45238-45245]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44532-44538]:Modifier[45246-45252]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[44539-44549]:SimpleType[45253-45263]"
    }, {
      "left" : "square",
      "right" : "square",
      "info" : "SimpleName[44550-44556]:SimpleName[45264-45270]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[44557-44575]:SingleVariableDeclaration[45271-45289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44577-44936]:Block[45291-45650]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[44587-44658]:VariableDeclarationStatement[45301-45372]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[44667-44879]:ForStatement[45381-45593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44713-44879]:Block[45427-45593]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[44727-44869]:ForStatement[45441-45583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44776-44869]:Block[45490-45583]"
    }, {
      "left" : "double e = m.getEntry(r, c);",
      "right" : "double e = m.getEntry(r, c);",
      "info" : "VariableDeclarationStatement[44794-44822]:VariableDeclarationStatement[45508-45536]"
    }, {
      "left" : "d[r][c] = e * e;",
      "right" : "d[r][c] = e * e;",
      "info" : "ExpressionStatement[44839-44855]:ExpressionStatement[45553-45569]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[44888-44930]:ReturnStatement[45602-45644]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45107-45114]:Modifier[45821-45828]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45115-45121]:Modifier[45829-45835]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[45122-45132]:SimpleType[45836-45846]"
    }, {
      "left" : "times",
      "right" : "times",
      "info" : "SimpleName[45133-45138]:SimpleName[45847-45852]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[45139-45157]:SingleVariableDeclaration[45853-45871]"
    }, {
      "left" : "final RealMatrix n",
      "right" : "final RealMatrix n",
      "info" : "SingleVariableDeclaration[45159-45177]:SingleVariableDeclaration[45873-45891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45179-45523]:Block[45893-46237]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[45189-45260]:VariableDeclarationStatement[45903-45974]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[45269-45466]:ForStatement[45983-46180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45315-45466]:Block[46029-46180]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[45329-45456]:ForStatement[46043-46170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45378-45456]:Block[46092-46170]"
    }, {
      "left" : "d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",
      "right" : "d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",
      "info" : "ExpressionStatement[45396-45442]:ExpressionStatement[46110-46156]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[45475-45517]:ReturnStatement[46189-46231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45687-45694]:Modifier[46401-46408]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45695-45701]:Modifier[46409-46415]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[45702-45712]:SimpleType[46416-46426]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[45713-45719]:SimpleName[46427-46433]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[45720-45738]:SingleVariableDeclaration[46434-46452]"
    }, {
      "left" : "final RealMatrix n",
      "right" : "final RealMatrix n",
      "info" : "SingleVariableDeclaration[45740-45758]:SingleVariableDeclaration[46454-46472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45760-46104]:Block[46474-46818]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[45770-45841]:VariableDeclarationStatement[46484-46555]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[45850-46047]:ForStatement[46564-46761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45896-46047]:Block[46610-46761]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[45910-46037]:ForStatement[46624-46751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45959-46037]:Block[46673-46751]"
    }, {
      "left" : "d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",
      "right" : "d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",
      "info" : "ExpressionStatement[45977-46023]:ExpressionStatement[46691-46737]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[46056-46098]:ReturnStatement[46770-46812]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46251-46258]:Modifier[46965-46972]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46259-46265]:Modifier[46973-46979]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[46266-46276]:SimpleType[46980-46990]"
    }, {
      "left" : "selectColumns",
      "right" : "selectColumns",
      "info" : "SimpleName[46277-46290]:SimpleName[46991-47004]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[46291-46309]:SingleVariableDeclaration[47005-47023]"
    }, {
      "left" : "final int[] cols",
      "right" : "final int[] cols",
      "info" : "SingleVariableDeclaration[46311-46327]:SingleVariableDeclaration[47025-47041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46329-46638]:Block[47043-47352]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][cols.length];",
      "right" : "double[][] d = new double[m.getRowDimension()][cols.length];",
      "info" : "VariableDeclarationStatement[46339-46399]:VariableDeclarationStatement[47053-47113]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[46408-46581]:ForStatement[47122-47295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46454-46581]:Block[47168-47295]"
    }, {
      "left" : "for (int c = 0; c < cols.length; c++)",
      "right" : "for (int c = 0; c < cols.length; c++)",
      "info" : "ForStatement[46468-46571]:ForStatement[47182-47285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46506-46571]:Block[47220-47285]"
    }, {
      "left" : "d[r][c] = m.getEntry(r, cols[c]);",
      "right" : "d[r][c] = m.getEntry(r, cols[c]);",
      "info" : "ExpressionStatement[46524-46557]:ExpressionStatement[47238-47271]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[46590-46632]:ReturnStatement[47304-47346]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46773-46780]:Modifier[47487-47494]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46781-46787]:Modifier[47495-47501]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[46788-46798]:SimpleType[47502-47512]"
    }, {
      "left" : "triu",
      "right" : "triu",
      "info" : "SimpleName[46799-46803]:SimpleName[47513-47517]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[46804-46822]:SingleVariableDeclaration[47518-47536]"
    }, {
      "left" : "int k",
      "right" : "int k",
      "info" : "SingleVariableDeclaration[46824-46829]:SingleVariableDeclaration[47538-47543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46831-47173]:Block[47545-47887]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[46841-46912]:VariableDeclarationStatement[47555-47626]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[46921-47116]:ForStatement[47635-47830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46967-47116]:Block[47681-47830]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[46981-47106]:ForStatement[47695-47820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47030-47106]:Block[47744-47820]"
    }, {
      "left" : "d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",
      "right" : "d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",
      "info" : "ExpressionStatement[47048-47092]:ExpressionStatement[47762-47806]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[47125-47167]:ReturnStatement[47839-47881]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47286-47293]:Modifier[48000-48007]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47294-47300]:Modifier[48008-48014]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[47301-47311]:SimpleType[48015-48025]"
    }, {
      "left" : "sumRows",
      "right" : "sumRows",
      "info" : "SimpleName[47312-47319]:SimpleName[48026-48033]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[47320-47338]:SingleVariableDeclaration[48034-48052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47340-47699]:Block[48054-48413]"
    }, {
      "left" : "double[][] d = new double[1][m.getColumnDimension()];",
      "right" : "double[][] d = new double[1][m.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[47350-47403]:VariableDeclarationStatement[48064-48117]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[47412-47642]:ForStatement[48126-48356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47461-47642]:Block[48175-48356]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[47475-47490]:VariableDeclarationStatement[48189-48204]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[47503-47605]:ForStatement[48217-48319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47549-47605]:Block[48263-48319]"
    }, {
      "left" : "sum += m.getEntry(r, c);",
      "right" : "sum += m.getEntry(r, c);",
      "info" : "ExpressionStatement[47567-47591]:ExpressionStatement[48281-48305]"
    }, {
      "left" : "d[0][c] = sum;",
      "right" : "d[0][c] = sum;",
      "info" : "ExpressionStatement[47618-47632]:ExpressionStatement[48332-48346]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[47651-47693]:ReturnStatement[48365-48407]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47896-47903]:Modifier[48610-48617]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47904-47910]:Modifier[48618-48624]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[47911-47921]:SimpleType[48625-48635]"
    }, {
      "left" : "diag",
      "right" : "diag",
      "info" : "SimpleName[47922-47926]:SimpleName[48636-48640]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[47927-47945]:SingleVariableDeclaration[48641-48659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47947-48517]:Block[48661-49231]"
    }, {
      "left" : "if (m.getColumnDimension() == 1)",
      "right" : "if (m.getColumnDimension() == 1)",
      "info" : "IfStatement[47957-48511]:IfStatement[48671-49225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47990-48255]:Block[48704-48969]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][m.getRowDimension()];",
      "right" : "double[][] d = new double[m.getRowDimension()][m.getRowDimension()];",
      "info" : "VariableDeclarationStatement[48004-48072]:VariableDeclarationStatement[48718-48786]"
    }, {
      "left" : "for (int i = 0; i < m.getRowDimension(); i++)",
      "right" : "for (int i = 0; i < m.getRowDimension(); i++)",
      "info" : "ForStatement[48085-48190]:ForStatement[48799-48904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48131-48190]:Block[48845-48904]"
    }, {
      "left" : "d[i][i] = m.getEntry(i, 0);",
      "right" : "d[i][i] = m.getEntry(i, 0);",
      "info" : "ExpressionStatement[48149-48176]:ExpressionStatement[48863-48890]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[48203-48245]:ReturnStatement[48917-48959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48261-48511]:Block[48975-49225]"
    }, {
      "left" : "double[][] d = new double[m.getRowDimension()][1];",
      "right" : "double[][] d = new double[m.getRowDimension()][1];",
      "info" : "VariableDeclarationStatement[48275-48325]:VariableDeclarationStatement[48989-49039]"
    }, {
      "left" : "for (int i = 0; i < m.getColumnDimension(); i++)",
      "right" : "for (int i = 0; i < m.getColumnDimension(); i++)",
      "info" : "ForStatement[48338-48446]:ForStatement[49052-49160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48387-48446]:Block[49101-49160]"
    }, {
      "left" : "d[i][0] = m.getEntry(i, i);",
      "right" : "d[i][0] = m.getEntry(i, i);",
      "info" : "ExpressionStatement[48405-48432]:ExpressionStatement[49119-49146]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[48459-48501]:ReturnStatement[49173-49215]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48718-48725]:Modifier[49432-49439]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48726-48732]:Modifier[49440-49446]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48733-48737]:PrimitiveType[49447-49451]"
    }, {
      "left" : "copyColumn",
      "right" : "copyColumn",
      "info" : "SimpleName[48738-48748]:SimpleName[49452-49462]"
    }, {
      "left" : "final RealMatrix m1",
      "right" : "final RealMatrix m1",
      "info" : "SingleVariableDeclaration[48749-48768]:SingleVariableDeclaration[49463-49482]"
    }, {
      "left" : "int col1",
      "right" : "int col1",
      "info" : "SingleVariableDeclaration[48770-48778]:SingleVariableDeclaration[49484-49492]"
    }, {
      "left" : "RealMatrix m2",
      "right" : "RealMatrix m2",
      "info" : "SingleVariableDeclaration[48780-48793]:SingleVariableDeclaration[49494-49507]"
    }, {
      "left" : "int col2",
      "right" : "int col2",
      "info" : "SingleVariableDeclaration[48795-48803]:SingleVariableDeclaration[49509-49517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48805-48935]:Block[49519-49649]"
    }, {
      "left" : "for (int i = 0; i < m1.getRowDimension(); i++)",
      "right" : "for (int i = 0; i < m1.getRowDimension(); i++)",
      "info" : "ForStatement[48815-48929]:ForStatement[49529-49643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48862-48929]:Block[49576-49643]"
    }, {
      "left" : "m2.setEntry(i, col2, m1.getEntry(i, col1));",
      "right" : "m2.setEntry(i, col2, m1.getEntry(i, col1));",
      "info" : "ExpressionStatement[48876-48919]:ExpressionStatement[49590-49633]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49068-49075]:Modifier[49782-49789]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49076-49082]:Modifier[49790-49796]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[49083-49093]:SimpleType[49797-49807]"
    }, {
      "left" : "ones",
      "right" : "ones",
      "info" : "SimpleName[49094-49098]:SimpleName[49808-49812]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[49099-49104]:SingleVariableDeclaration[49813-49818]"
    }, {
      "left" : "int m",
      "right" : "int m",
      "info" : "SingleVariableDeclaration[49106-49111]:SingleVariableDeclaration[49820-49825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49113-49296]:Block[49827-50010]"
    }, {
      "left" : "double[][] d = new double[n][m];",
      "right" : "double[][] d = new double[n][m];",
      "info" : "VariableDeclarationStatement[49123-49155]:VariableDeclarationStatement[49837-49869]"
    }, {
      "left" : "for (int r = 0; r < n; r++)",
      "right" : "for (int r = 0; r < n; r++)",
      "info" : "ForStatement[49164-49239]:ForStatement[49878-49953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49192-49239]:Block[49906-49953]"
    }, {
      "left" : "Arrays.fill(d[r], 1.0);",
      "right" : "Arrays.fill(d[r], 1.0);",
      "info" : "ExpressionStatement[49206-49229]:ExpressionStatement[49920-49943]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[49248-49290]:ReturnStatement[49962-50004]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49454-49461]:Modifier[50168-50175]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49462-49468]:Modifier[50176-50182]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[49469-49479]:SimpleType[50183-50193]"
    }, {
      "left" : "eye",
      "right" : "eye",
      "info" : "SimpleName[49480-49483]:SimpleName[50194-50197]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[49484-49489]:SingleVariableDeclaration[50198-50203]"
    }, {
      "left" : "int m",
      "right" : "int m",
      "info" : "SingleVariableDeclaration[49491-49496]:SingleVariableDeclaration[50205-50210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49498-49713]:Block[50212-50427]"
    }, {
      "left" : "double[][] d = new double[n][m];",
      "right" : "double[][] d = new double[n][m];",
      "info" : "VariableDeclarationStatement[49508-49540]:VariableDeclarationStatement[50222-50254]"
    }, {
      "left" : "for (int r = 0; r < n; r++)",
      "right" : "for (int r = 0; r < n; r++)",
      "info" : "ForStatement[49549-49656]:ForStatement[50263-50370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49577-49656]:Block[50291-50370]"
    }, {
      "left" : "if (r < m)",
      "right" : "if (r < m)",
      "info" : "IfStatement[49591-49646]:IfStatement[50305-50360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49602-49646]:Block[50316-50360]"
    }, {
      "left" : "d[r][r] = 1;",
      "right" : "d[r][r] = 1;",
      "info" : "ExpressionStatement[49620-49632]:ExpressionStatement[50334-50346]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[49665-49707]:ReturnStatement[50379-50421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49846-49853]:Modifier[50560-50567]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49854-49860]:Modifier[50568-50574]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[49861-49871]:SimpleType[50575-50585]"
    }, {
      "left" : "zeros",
      "right" : "zeros",
      "info" : "SimpleName[49872-49877]:SimpleName[50586-50591]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[49878-49883]:SingleVariableDeclaration[50592-50597]"
    }, {
      "left" : "int m",
      "right" : "int m",
      "info" : "SingleVariableDeclaration[49885-49890]:SingleVariableDeclaration[50599-50604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49892-49946]:Block[50606-50660]"
    }, {
      "left" : "return new Array2DRowRealMatrix(n, m);",
      "right" : "return new Array2DRowRealMatrix(n, m);",
      "info" : "ReturnStatement[49902-49940]:ReturnStatement[50616-50654]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50165-50172]:Modifier[50879-50886]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50173-50179]:Modifier[50887-50893]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[50180-50190]:SimpleType[50894-50904]"
    }, {
      "left" : "repmat",
      "right" : "repmat",
      "info" : "SimpleName[50191-50197]:SimpleName[50905-50911]"
    }, {
      "left" : "final RealMatrix mat",
      "right" : "final RealMatrix mat",
      "info" : "SingleVariableDeclaration[50198-50218]:SingleVariableDeclaration[50912-50932]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[50220-50225]:SingleVariableDeclaration[50934-50939]"
    }, {
      "left" : "int m",
      "right" : "int m",
      "info" : "SingleVariableDeclaration[50227-50232]:SingleVariableDeclaration[50941-50946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50234-50596]:Block[50948-51310]"
    }, {
      "left" : "int rd = mat.getRowDimension();",
      "right" : "int rd = mat.getRowDimension();",
      "info" : "VariableDeclarationStatement[50244-50275]:VariableDeclarationStatement[50958-50989]"
    }, {
      "left" : "int cd = mat.getColumnDimension();",
      "right" : "int cd = mat.getColumnDimension();",
      "info" : "VariableDeclarationStatement[50284-50318]:VariableDeclarationStatement[50998-51032]"
    }, {
      "left" : "double[][] d = new double[n * rd][m * cd];",
      "right" : "double[][] d = new double[n * rd][m * cd];",
      "info" : "VariableDeclarationStatement[50327-50369]:VariableDeclarationStatement[51041-51083]"
    }, {
      "left" : "for (int r = 0; r < n * rd; r++)",
      "right" : "for (int r = 0; r < n * rd; r++)",
      "info" : "ForStatement[50378-50539]:ForStatement[51092-51253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50411-50539]:Block[51125-51253]"
    }, {
      "left" : "for (int c = 0; c < m * cd; c++)",
      "right" : "for (int c = 0; c < m * cd; c++)",
      "info" : "ForStatement[50425-50529]:ForStatement[51139-51243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50458-50529]:Block[51172-51243]"
    }, {
      "left" : "d[r][c] = mat.getEntry(r % rd, c % cd);",
      "right" : "d[r][c] = mat.getEntry(r % rd, c % cd);",
      "info" : "ExpressionStatement[50476-50515]:ExpressionStatement[51190-51229]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[50548-50590]:ReturnStatement[51262-51304]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50754-50761]:Modifier[51468-51475]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[50762-50768]:Modifier[51476-51482]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[50769-50779]:SimpleType[51483-51493]"
    }, {
      "left" : "sequence",
      "right" : "sequence",
      "info" : "SimpleName[50780-50788]:SimpleName[51494-51502]"
    }, {
      "left" : "double start",
      "right" : "double start",
      "info" : "SingleVariableDeclaration[50789-50801]:SingleVariableDeclaration[51503-51515]"
    }, {
      "left" : "double end",
      "right" : "double end",
      "info" : "SingleVariableDeclaration[50803-50813]:SingleVariableDeclaration[51517-51527]"
    }, {
      "left" : "double step",
      "right" : "double step",
      "info" : "SingleVariableDeclaration[50815-50826]:SingleVariableDeclaration[51529-51540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50828-51120]:Block[51542-51834]"
    }, {
      "left" : "int size = (int) ((end - start) / step + 1);",
      "right" : "int size = (int) ((end - start) / step + 1);",
      "info" : "VariableDeclarationStatement[50838-50882]:VariableDeclarationStatement[51552-51596]"
    }, {
      "left" : "double[][] d = new double[size][1];",
      "right" : "double[][] d = new double[size][1];",
      "info" : "VariableDeclarationStatement[50891-50926]:VariableDeclarationStatement[51605-51640]"
    }, {
      "left" : "double value = start;",
      "right" : "double value = start;",
      "info" : "VariableDeclarationStatement[50935-50956]:VariableDeclarationStatement[51649-51670]"
    }, {
      "left" : "for (int r = 0; r < size; r++)",
      "right" : "for (int r = 0; r < size; r++)",
      "info" : "ForStatement[50965-51063]:ForStatement[51679-51777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50996-51063]:Block[51710-51777]"
    }, {
      "left" : "d[r][0] = value;",
      "right" : "d[r][0] = value;",
      "info" : "ExpressionStatement[51010-51026]:ExpressionStatement[51724-51740]"
    }, {
      "left" : "value += step;",
      "right" : "value += step;",
      "info" : "ExpressionStatement[51039-51053]:ExpressionStatement[51753-51767]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[51072-51114]:ReturnStatement[51786-51828]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51229-51236]:Modifier[51943-51950]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51237-51243]:Modifier[51951-51957]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[51244-51250]:PrimitiveType[51958-51964]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[51251-51254]:SimpleName[51965-51968]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[51255-51273]:SingleVariableDeclaration[51969-51987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51275-51608]:Block[51989-52322]"
    }, {
      "left" : "double max = -Double.MAX_VALUE;",
      "right" : "double max = -Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[51285-51316]:VariableDeclarationStatement[51999-52030]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[51325-51582]:ForStatement[52039-52296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51371-51582]:Block[52085-52296]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[51385-51572]:ForStatement[52099-52286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51434-51572]:Block[52148-52286]"
    }, {
      "left" : "double e = m.getEntry(r, c);",
      "right" : "double e = m.getEntry(r, c);",
      "info" : "VariableDeclarationStatement[51452-51480]:VariableDeclarationStatement[52166-52194]"
    }, {
      "left" : "if (max < e)",
      "right" : "if (max < e)",
      "info" : "IfStatement[51497-51558]:IfStatement[52211-52272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51510-51558]:Block[52224-52272]"
    }, {
      "left" : "max = e;",
      "right" : "max = e;",
      "info" : "ExpressionStatement[51532-51540]:ExpressionStatement[52246-52254]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[51591-51602]:ReturnStatement[52305-52316]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51717-51724]:Modifier[52431-52438]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51725-51731]:Modifier[52439-52445]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[51732-51738]:PrimitiveType[52446-52452]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[51739-51742]:SimpleName[52453-52456]"
    }, {
      "left" : "final RealMatrix m",
      "right" : "final RealMatrix m",
      "info" : "SingleVariableDeclaration[51743-51761]:SingleVariableDeclaration[52457-52475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51763-52095]:Block[52477-52809]"
    }, {
      "left" : "double min = Double.MAX_VALUE;",
      "right" : "double min = Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[51773-51803]:VariableDeclarationStatement[52487-52517]"
    }, {
      "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
      "info" : "ForStatement[51812-52069]:ForStatement[52526-52783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51858-52069]:Block[52572-52783]"
    }, {
      "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
      "info" : "ForStatement[51872-52059]:ForStatement[52586-52773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51921-52059]:Block[52635-52773]"
    }, {
      "left" : "double e = m.getEntry(r, c);",
      "right" : "double e = m.getEntry(r, c);",
      "info" : "VariableDeclarationStatement[51939-51967]:VariableDeclarationStatement[52653-52681]"
    }, {
      "left" : "if (min > e)",
      "right" : "if (min > e)",
      "info" : "IfStatement[51984-52045]:IfStatement[52698-52759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51997-52045]:Block[52711-52759]"
    }, {
      "left" : "min = e;",
      "right" : "min = e;",
      "info" : "ExpressionStatement[52019-52027]:ExpressionStatement[52733-52741]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[52078-52089]:ReturnStatement[52792-52803]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52194-52201]:Modifier[52908-52915]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52202-52208]:Modifier[52916-52922]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[52209-52215]:PrimitiveType[52923-52929]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[52216-52219]:SimpleName[52930-52933]"
    }, {
      "left" : "final double[] m",
      "right" : "final double[] m",
      "info" : "SingleVariableDeclaration[52220-52236]:SingleVariableDeclaration[52934-52950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52238-52432]:Block[52952-53146]"
    }, {
      "left" : "double max = -Double.MAX_VALUE;",
      "right" : "double max = -Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[52248-52279]:VariableDeclarationStatement[52962-52993]"
    }, {
      "left" : "for (int r = 0; r < m.length; r++)",
      "right" : "for (int r = 0; r < m.length; r++)",
      "info" : "ForStatement[52288-52406]:ForStatement[53002-53120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52323-52406]:Block[53037-53120]"
    }, {
      "left" : "if (max < m[r])",
      "right" : "if (max < m[r])",
      "info" : "IfStatement[52337-52396]:IfStatement[53051-53110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52353-52396]:Block[53067-53110]"
    }, {
      "left" : "max = m[r];",
      "right" : "max = m[r];",
      "info" : "ExpressionStatement[52371-52382]:ExpressionStatement[53085-53096]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[52415-52426]:ReturnStatement[53129-53140]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52531-52538]:Modifier[53245-53252]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52539-52545]:Modifier[53253-53259]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[52546-52552]:PrimitiveType[53260-53266]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[52553-52556]:SimpleName[53267-53270]"
    }, {
      "left" : "final double[] m",
      "right" : "final double[] m",
      "info" : "SingleVariableDeclaration[52557-52573]:SingleVariableDeclaration[53271-53287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52575-52768]:Block[53289-53482]"
    }, {
      "left" : "double min = Double.MAX_VALUE;",
      "right" : "double min = Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[52585-52615]:VariableDeclarationStatement[53299-53329]"
    }, {
      "left" : "for (int r = 0; r < m.length; r++)",
      "right" : "for (int r = 0; r < m.length; r++)",
      "info" : "ForStatement[52624-52742]:ForStatement[53338-53456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52659-52742]:Block[53373-53456]"
    }, {
      "left" : "if (min > m[r])",
      "right" : "if (min > m[r])",
      "info" : "IfStatement[52673-52732]:IfStatement[53387-53446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52689-52732]:Block[53403-53446]"
    }, {
      "left" : "min = m[r];",
      "right" : "min = m[r];",
      "info" : "ExpressionStatement[52707-52718]:ExpressionStatement[53421-53432]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[52751-52762]:ReturnStatement[53465-53476]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52893-52900]:Modifier[53607-53614]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52901-52907]:Modifier[53615-53621]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[52908-52913]:ArrayType[53622-53627]"
    }, {
      "left" : "inverse",
      "right" : "inverse",
      "info" : "SimpleName[52914-52921]:SimpleName[53628-53635]"
    }, {
      "left" : "final int[] indices",
      "right" : "final int[] indices",
      "info" : "SingleVariableDeclaration[52922-52941]:SingleVariableDeclaration[53636-53655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52943-53121]:Block[53657-53835]"
    }, {
      "left" : "int[] inverse = new int[indices.length];",
      "right" : "int[] inverse = new int[indices.length];",
      "info" : "VariableDeclarationStatement[52953-52993]:VariableDeclarationStatement[53667-53707]"
    }, {
      "left" : "for (int i = 0; i < indices.length; i++)",
      "right" : "for (int i = 0; i < indices.length; i++)",
      "info" : "ForStatement[53002-53091]:ForStatement[53716-53805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53043-53091]:Block[53757-53805]"
    }, {
      "left" : "inverse[indices[i]] = i;",
      "right" : "inverse[indices[i]] = i;",
      "info" : "ExpressionStatement[53057-53081]:ExpressionStatement[53771-53795]"
    }, {
      "left" : "return inverse;",
      "right" : "return inverse;",
      "info" : "ReturnStatement[53100-53115]:ReturnStatement[53814-53829]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53245-53252]:Modifier[53959-53966]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53253-53259]:Modifier[53967-53973]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[53260-53265]:ArrayType[53974-53979]"
    }, {
      "left" : "reverse",
      "right" : "reverse",
      "info" : "SimpleName[53266-53273]:SimpleName[53980-53987]"
    }, {
      "left" : "final int[] indices",
      "right" : "final int[] indices",
      "info" : "SingleVariableDeclaration[53274-53293]:SingleVariableDeclaration[53988-54007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53295-53494]:Block[54009-54208]"
    }, {
      "left" : "int[] reverse = new int[indices.length];",
      "right" : "int[] reverse = new int[indices.length];",
      "info" : "VariableDeclarationStatement[53305-53345]:VariableDeclarationStatement[54019-54059]"
    }, {
      "left" : "for (int i = 0; i < indices.length; i++)",
      "right" : "for (int i = 0; i < indices.length; i++)",
      "info" : "ForStatement[53354-53464]:ForStatement[54068-54178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53395-53464]:Block[54109-54178]"
    }, {
      "left" : "reverse[i] = indices[indices.length - i - 1];",
      "right" : "reverse[i] = indices[indices.length - i - 1];",
      "info" : "ExpressionStatement[53409-53454]:ExpressionStatement[54123-54168]"
    }, {
      "left" : "return reverse;",
      "right" : "return reverse;",
      "info" : "ReturnStatement[53473-53488]:ReturnStatement[54187-54202]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53611-53618]:Modifier[54325-54332]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[53619-53627]:ArrayType[54333-54341]"
    }, {
      "left" : "randn",
      "right" : "randn",
      "info" : "SimpleName[53628-53633]:SimpleName[54342-54347]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[53634-53642]:SingleVariableDeclaration[54348-54356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53644-53813]:Block[54358-54527]"
    }, {
      "left" : "double[] randn = new double[size];",
      "right" : "double[] randn = new double[size];",
      "info" : "VariableDeclarationStatement[53654-53688]:VariableDeclarationStatement[54368-54402]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[53697-53785]:ForStatement[54411-54499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53728-53785]:Block[54442-54499]"
    }, {
      "left" : "randn[i] = random.nextGaussian();",
      "right" : "randn[i] = random.nextGaussian();",
      "info" : "ExpressionStatement[53742-53775]:ExpressionStatement[54456-54489]"
    }, {
      "left" : "return randn;",
      "right" : "return randn;",
      "info" : "ReturnStatement[53794-53807]:ReturnStatement[54508-54521]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53975-53982]:Modifier[54689-54696]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[53983-53993]:SimpleType[54697-54707]"
    }, {
      "left" : "randn1",
      "right" : "randn1",
      "info" : "SimpleName[53994-54000]:SimpleName[54708-54714]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[54001-54009]:SingleVariableDeclaration[54715-54723]"
    }, {
      "left" : "int popSize",
      "right" : "int popSize",
      "info" : "SingleVariableDeclaration[54011-54022]:SingleVariableDeclaration[54725-54736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54024-54294]:Block[54738-55008]"
    }, {
      "left" : "double[][] d = new double[size][popSize];",
      "right" : "double[][] d = new double[size][popSize];",
      "info" : "VariableDeclarationStatement[54034-54075]:VariableDeclarationStatement[54748-54789]"
    }, {
      "left" : "for (int r = 0; r < size; r++)",
      "right" : "for (int r = 0; r < size; r++)",
      "info" : "ForStatement[54084-54237]:ForStatement[54798-54951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54115-54237]:Block[54829-54951]"
    }, {
      "left" : "for (int c = 0; c < popSize; c++)",
      "right" : "for (int c = 0; c < popSize; c++)",
      "info" : "ForStatement[54129-54227]:ForStatement[54843-54941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54163-54227]:Block[54877-54941]"
    }, {
      "left" : "d[r][c] = random.nextGaussian();",
      "right" : "d[r][c] = random.nextGaussian();",
      "info" : "ExpressionStatement[54181-54213]:ExpressionStatement[54895-54927]"
    }, {
      "left" : "return new Array2DRowRealMatrix(d, false);",
      "right" : "return new Array2DRowRealMatrix(d, false);",
      "info" : "ReturnStatement[54246-54288]:ReturnStatement[54960-55002]"
    } ]
  },
  "interFileMappings" : { }
}