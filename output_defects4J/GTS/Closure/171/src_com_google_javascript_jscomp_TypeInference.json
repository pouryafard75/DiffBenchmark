{
  "matchedElements" : [
 {
    "left" : "class : TypeInference",
    "right" : "class : TypeInference",
    "info" : "TypeDeclaration[2846-55728]:TypeDeclaration[2846-55583]"
  }, {
    "left" : "FUNCTION_LITERAL_UNDEFINED_THIS",
    "right" : "FUNCTION_LITERAL_UNDEFINED_THIS",
    "info" : "FieldDeclaration[3128-3336]:FieldDeclaration[3128-3336]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[3340-3380]:FieldDeclaration[3340-3380]"
  }, {
    "left" : "registry",
    "right" : "registry",
    "info" : "FieldDeclaration[3383-3421]:FieldDeclaration[3383-3421]"
  }, {
    "left" : "reverseInterpreter",
    "right" : "reverseInterpreter",
    "info" : "FieldDeclaration[3424-3484]:FieldDeclaration[3424-3484]"
  }, {
    "left" : "syntacticScope",
    "right" : "syntacticScope",
    "info" : "FieldDeclaration[3487-3522]:FieldDeclaration[3487-3522]"
  }, {
    "left" : "functionScope",
    "right" : "functionScope",
    "info" : "FieldDeclaration[3525-3563]:FieldDeclaration[3525-3563]"
  }, {
    "left" : "bottomScope",
    "right" : "bottomScope",
    "info" : "FieldDeclaration[3566-3602]:FieldDeclaration[3566-3602]"
  }, {
    "left" : "assertionFunctionsMap",
    "right" : "assertionFunctionsMap",
    "info" : "FieldDeclaration[3605-3676]:FieldDeclaration[3605-3676]"
  }, {
    "left" : "unknownType",
    "right" : "unknownType",
    "info" : "FieldDeclaration[3701-3738]:FieldDeclaration[3701-3738]"
  }, {
    "left" : "package TypeInference(compiler , cfg , reverseInterpreter , functionScope , assertionFunctionsMap )",
    "right" : "package TypeInference(compiler , cfg , reverseInterpreter , functionScope , assertionFunctionsMap )",
    "info" : "MethodDeclaration[3742-4976]:MethodDeclaration[3742-4976]"
  }, {
    "left" : "private inferArguments(functionScope ) : void",
    "right" : "private inferArguments(functionScope ) : void",
    "info" : "MethodDeclaration[4980-6580]:MethodDeclaration[4980-6580]"
  }, {
    "left" : "package createInitialEstimateLattice() : ",
    "right" : "package createInitialEstimateLattice() : ",
    "info" : "MethodDeclaration[6584-6666]:MethodDeclaration[6584-6666]"
  }, {
    "left" : "package createEntryLattice() : ",
    "right" : "package createEntryLattice() : ",
    "info" : "MethodDeclaration[6670-6744]:MethodDeclaration[6670-6744]"
  }, {
    "left" : "package flowThrough(n , input ) : ",
    "right" : "package flowThrough(n , input ) : ",
    "info" : "MethodDeclaration[6748-7096]:MethodDeclaration[6748-7096]"
  }, {
    "left" : "package branchedFlowThrough(source , input ) : ",
    "right" : "package branchedFlowThrough(source , input ) : ",
    "info" : "MethodDeclaration[7100-11855]:MethodDeclaration[7100-11855]"
  }, {
    "left" : "private traverse(n , scope ) : ",
    "right" : "private traverse(n , scope ) : ",
    "info" : "MethodDeclaration[11859-15669]:MethodDeclaration[11859-15669]"
  }, {
    "left" : "private traverseReturn(n , scope ) : ",
    "right" : "private traverseReturn(n , scope ) : ",
    "info" : "MethodDeclaration[15673-16211]:MethodDeclaration[15673-16211]"
  }, {
    "left" : "private traverseCatch(catchNode , scope ) : ",
    "right" : "private traverseCatch(catchNode , scope ) : ",
    "info" : "MethodDeclaration[16215-16906]:MethodDeclaration[16215-16906]"
  }, {
    "left" : "private traverseAssign(n , scope ) : ",
    "right" : "private traverseAssign(n , scope ) : ",
    "info" : "MethodDeclaration[16910-17276]:MethodDeclaration[16910-17276]"
  }, {
    "left" : "private updateScopeForTypeChange(scope , left , leftType , resultType ) : void",
    "right" : "private updateScopeForTypeChange(scope , left , leftType , resultType ) : void",
    "info" : "MethodDeclaration[17280-19175]:MethodDeclaration[17280-19175]"
  }, {
    "left" : "private ensurePropertyDefined(getprop , rightType ) : void",
    "right" : "private ensurePropertyDefined(getprop , rightType ) : void",
    "info" : "MethodDeclaration[19179-21386]:MethodDeclaration[19179-21386]"
  }, {
    "left" : "private ensurePropertyDeclared(getprop ) : void",
    "right" : "private ensurePropertyDeclared(getprop ) : void",
    "info" : "MethodDeclaration[21390-21923]:MethodDeclaration[21390-21923]"
  }, {
    "left" : "private ensurePropertyDeclaredHelper(getprop , objectType ) : boolean",
    "right" : "private ensurePropertyDeclaredHelper(getprop , objectType ) : boolean",
    "info" : "MethodDeclaration[21927-22872]:MethodDeclaration[21927-22872]"
  }, {
    "left" : "private traverseName(n , scope ) : ",
    "right" : "private traverseName(n , scope ) : ",
    "info" : "MethodDeclaration[22876-24878]:MethodDeclaration[22876-24878]"
  }, {
    "left" : "private traverseArrayLiteral(n , scope ) : ",
    "right" : "private traverseArrayLiteral(n , scope ) : ",
    "info" : "MethodDeclaration[24882-25098]:MethodDeclaration[24882-25098]"
  }, {
    "left" : "private traverseObjectLiteral(n , scope ) : ",
    "right" : "private traverseObjectLiteral(n , scope ) : ",
    "info" : "MethodDeclaration[25102-27135]:MethodDeclaration[25102-26990]"
  }, {
    "left" : "private traverseAdd(n , scope ) : ",
    "right" : "private traverseAdd(n , scope ) : ",
    "info" : "MethodDeclaration[27139-28255]:MethodDeclaration[26994-28110]"
  }, {
    "left" : "private isAddedAsNumber(type ) : boolean",
    "right" : "private isAddedAsNumber(type ) : boolean",
    "info" : "MethodDeclaration[28259-28456]:MethodDeclaration[28114-28311]"
  }, {
    "left" : "private traverseHook(n , scope ) : ",
    "right" : "private traverseHook(n , scope ) : ",
    "info" : "MethodDeclaration[28460-29606]:MethodDeclaration[28315-29461]"
  }, {
    "left" : "private traverseCall(n , scope ) : ",
    "right" : "private traverseCall(n , scope ) : ",
    "info" : "MethodDeclaration[29610-30242]:MethodDeclaration[29465-30097]"
  }, {
    "left" : "private tightenTypesAfterAssertions(scope , callNode ) : ",
    "right" : "private tightenTypesAfterAssertions(scope , callNode ) : ",
    "info" : "MethodDeclaration[30246-31703]:MethodDeclaration[30101-31558]"
  }, {
    "left" : "private narrowScope(scope , node , narrowed ) : ",
    "right" : "private narrowScope(scope , node , narrowed ) : ",
    "info" : "MethodDeclaration[31707-32175]:MethodDeclaration[31562-32030]"
  }, {
    "left" : "private backwardsInferenceFromCallSite(n , fnType ) : void",
    "right" : "private backwardsInferenceFromCallSite(n , fnType ) : void",
    "info" : "MethodDeclaration[32179-33403]:MethodDeclaration[32034-33258]"
  }, {
    "left" : "private updateBind(n ) : void",
    "right" : "private updateBind(n ) : void",
    "info" : "MethodDeclaration[33407-34113]:MethodDeclaration[33262-33968]"
  }, {
    "left" : "private updateTypeOfParameters(n , fnType ) : void",
    "right" : "private updateTypeOfParameters(n , fnType ) : void",
    "info" : "MethodDeclaration[34117-35338]:MethodDeclaration[33972-35193]"
  }, {
    "left" : "private inferTemplateTypesFromParameters(fnType , call ) : ",
    "right" : "private inferTemplateTypesFromParameters(fnType , call ) : ",
    "info" : "MethodDeclaration[35342-36108]:MethodDeclaration[35197-35963]"
  }, {
    "left" : "private maybeResolveTemplatedType(paramType , argType , resolvedTypes ...) : void",
    "right" : "private maybeResolveTemplatedType(paramType , argType , resolvedTypes ...) : void",
    "info" : "MethodDeclaration[36112-38557]:MethodDeclaration[35967-38412]"
  }, {
    "left" : "private maybeResolveTemplateTypeFromNodes(declParams , callParams , resolvedTypes ...) : void",
    "right" : "private maybeResolveTemplateTypeFromNodes(declParams , callParams , resolvedTypes ...) : void",
    "info" : "MethodDeclaration[38561-38836]:MethodDeclaration[38416-38691]"
  }, {
    "left" : "private maybeResolveTemplateTypeFromNodes(declParams , callParams , resolvedTypes ...) : void",
    "right" : "private maybeResolveTemplateTypeFromNodes(declParams , callParams , resolvedTypes ...) : void",
    "info" : "MethodDeclaration[38840-39483]:MethodDeclaration[38695-39338]"
  }, {
    "left" : "private resolvedTemplateType(map , template , resolved ) : void",
    "right" : "private resolvedTemplateType(map , template , resolved ) : void",
    "info" : "MethodDeclaration[39487-39871]:MethodDeclaration[39342-39726]"
  }, {
    "left" : "class : TemplateTypeReplacer",
    "right" : "class : TemplateTypeReplacer",
    "info" : "TypeDeclaration[39875-40538]:TypeDeclaration[39730-40393]"
  }, {
    "left" : "replacements",
    "right" : "replacements",
    "info" : "FieldDeclaration[39951-40004]:FieldDeclaration[39806-39859]"
  }, {
    "left" : "registry",
    "right" : "registry",
    "info" : "FieldDeclaration[40009-40047]:FieldDeclaration[39864-39902]"
  }, {
    "left" : "madeChanges",
    "right" : "madeChanges",
    "info" : "FieldDeclaration[40052-40080]:FieldDeclaration[39907-39935]"
  }, {
    "left" : "package TemplateTypeReplacer(registry , replacements ...)",
    "right" : "package TemplateTypeReplacer(registry , replacements ...)",
    "info" : "MethodDeclaration[40086-40283]:MethodDeclaration[39941-40138]"
  }, {
    "left" : "public caseTemplateType(type ) : ",
    "right" : "public caseTemplateType(type ) : ",
    "info" : "MethodDeclaration[40289-40534]:MethodDeclaration[40144-40389]"
  }, {
    "left" : "private inferTemplatedTypesForCall(n , fnType ) : boolean",
    "right" : "private inferTemplatedTypesForCall(n , fnType ) : boolean",
    "info" : "MethodDeclaration[40542-41559]:MethodDeclaration[40397-41414]"
  }, {
    "left" : "private traverseNew(n , scope ) : ",
    "right" : "private traverseNew(n , scope ) : ",
    "info" : "MethodDeclaration[41563-43060]:MethodDeclaration[41418-42915]"
  }, {
    "left" : "private traverseAnd(n , scope ) : ",
    "right" : "private traverseAnd(n , scope ) : ",
    "info" : "MethodDeclaration[43064-43190]:MethodDeclaration[42919-43045]"
  }, {
    "left" : "private traverseChildren(n , scope ) : ",
    "right" : "private traverseChildren(n , scope ) : ",
    "info" : "MethodDeclaration[43194-43389]:MethodDeclaration[43049-43244]"
  }, {
    "left" : "private traverseGetElem(n , scope ) : ",
    "right" : "private traverseGetElem(n , scope ) : ",
    "info" : "MethodDeclaration[43393-43839]:MethodDeclaration[43248-43694]"
  }, {
    "left" : "private traverseGetProp(n , scope ) : ",
    "right" : "private traverseGetProp(n , scope ) : ",
    "info" : "MethodDeclaration[43843-44190]:MethodDeclaration[43698-44045]"
  }, {
    "left" : "private inferPropertyTypesToMatchConstraint(type , constraint ) : void",
    "right" : "private inferPropertyTypesToMatchConstraint(type , constraint ) : void",
    "info" : "MethodDeclaration[44194-44922]:MethodDeclaration[44049-44777]"
  }, {
    "left" : "private dereferencePointer(n , scope ) : ",
    "right" : "private dereferencePointer(n , scope ) : ",
    "info" : "MethodDeclaration[44926-45332]:MethodDeclaration[44781-45187]"
  }, {
    "left" : "private getPropertyType(objType , propName , n , scope ) : ",
    "right" : "private getPropertyType(objType , propName , n , scope ) : ",
    "info" : "MethodDeclaration[45336-47752]:MethodDeclaration[45191-47607]"
  }, {
    "left" : "private traverseOr(n , scope ) : ",
    "right" : "private traverseOr(n , scope ) : ",
    "info" : "MethodDeclaration[47756-47882]:MethodDeclaration[47611-47737]"
  }, {
    "left" : "private traverseShortCircuitingBinOp(n , scope , condition boolean) : ",
    "right" : "private traverseShortCircuitingBinOp(n , scope , condition boolean) : ",
    "info" : "MethodDeclaration[47886-50245]:MethodDeclaration[47741-50100]"
  }, {
    "left" : "private traverseWithinShortCircuitingBinOp(n , scope ) : ",
    "right" : "private traverseWithinShortCircuitingBinOp(n , scope ) : ",
    "info" : "MethodDeclaration[50249-50611]:MethodDeclaration[50104-50466]"
  }, {
    "left" : "package getBooleanOutcomePair(left , right , condition boolean) : ",
    "right" : "package getBooleanOutcomePair(left , right , condition boolean) : ",
    "info" : "MethodDeclaration[50615-51247]:MethodDeclaration[50470-51102]"
  }, {
    "left" : "package getBooleanOutcomes(left , right , condition boolean) : ",
    "right" : "package getBooleanOutcomes(left , right , condition boolean) : ",
    "info" : "MethodDeclaration[51251-52109]:MethodDeclaration[51106-51964]"
  }, {
    "left" : "class : BooleanOutcomePair",
    "right" : "class : BooleanOutcomePair",
    "info" : "TypeDeclaration[52113-53971]:TypeDeclaration[51968-53826]"
  }, {
    "left" : "toBooleanOutcomes",
    "right" : "toBooleanOutcomes",
    "info" : "FieldDeclaration[52441-52483]:FieldDeclaration[52296-52338]"
  }, {
    "left" : "booleanValues",
    "right" : "booleanValues",
    "info" : "FieldDeclaration[52488-52526]:FieldDeclaration[52343-52381]"
  }, {
    "left" : "leftScope",
    "right" : "leftScope",
    "info" : "FieldDeclaration[52607-52633]:FieldDeclaration[52462-52488]"
  }, {
    "left" : "rightScope",
    "right" : "rightScope",
    "info" : "FieldDeclaration[52692-52719]:FieldDeclaration[52547-52574]"
  }, {
    "left" : "joinedScope",
    "right" : "joinedScope",
    "info" : "FieldDeclaration[52801-52830]:FieldDeclaration[52656-52685]"
  }, {
    "left" : "package BooleanOutcomePair(toBooleanOutcomes , booleanValues , leftScope , rightScope )",
    "right" : "package BooleanOutcomePair(toBooleanOutcomes , booleanValues , leftScope , rightScope )",
    "info" : "MethodDeclaration[52836-53154]:MethodDeclaration[52691-53009]"
  }, {
    "left" : "package getJoinedFlowScope() : ",
    "right" : "package getJoinedFlowScope() : ",
    "info" : "MethodDeclaration[53160-53544]:MethodDeclaration[53015-53399]"
  }, {
    "left" : "package getOutcomeFlowScope(nodeType int, outcome boolean) : ",
    "right" : "package getOutcomeFlowScope(nodeType int, outcome boolean) : ",
    "info" : "MethodDeclaration[53550-53967]:MethodDeclaration[53405-53822]"
  }, {
    "left" : "private newBooleanOutcomePair(jsType , flowScope ) : ",
    "right" : "private newBooleanOutcomePair(jsType , flowScope ) : ",
    "info" : "MethodDeclaration[53975-54453]:MethodDeclaration[53830-54308]"
  }, {
    "left" : "private redeclareSimpleVar(scope , nameNode , varType ) : void",
    "right" : "private redeclareSimpleVar(scope , nameNode , varType ) : void",
    "info" : "MethodDeclaration[54457-54851]:MethodDeclaration[54312-54706]"
  }, {
    "left" : "private isUnflowable(v ) : boolean",
    "right" : "private isUnflowable(v ) : boolean",
    "info" : "MethodDeclaration[54855-55069]:MethodDeclaration[54710-54924]"
  }, {
    "left" : "private getJSType(n ) : ",
    "right" : "private getJSType(n ) : ",
    "info" : "MethodDeclaration[55073-55624]:MethodDeclaration[54928-55479]"
  }, {
    "left" : "private getNativeType(typeId ) : ",
    "right" : "private getNativeType(typeId ) : ",
    "info" : "MethodDeclaration[55628-55726]:MethodDeclaration[55483-55581]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2959-2964]:TYPE_DECLARATION_KIND[2959-2964]"
  }, {
    "left" : "TypeInference",
    "right" : "TypeInference",
    "info" : "SimpleName[3742-3755]:SimpleName[3742-3755]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[3756-3781]:SingleVariableDeclaration[3756-3781]"
  }, {
    "left" : "ControlFlowGraph<Node> cfg",
    "right" : "ControlFlowGraph<Node> cfg",
    "info" : "SingleVariableDeclaration[3783-3809]:SingleVariableDeclaration[3783-3809]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[3827-3872]:SingleVariableDeclaration[3827-3872]"
  }, {
    "left" : "Scope functionScope",
    "right" : "Scope functionScope",
    "info" : "SingleVariableDeclaration[3890-3909]:SingleVariableDeclaration[3890-3909]"
  }, {
    "left" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
    "right" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
    "info" : "SingleVariableDeclaration[3927-3983]:SingleVariableDeclaration[3927-3983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3985-4976]:Block[3985-4976]"
  }, {
    "left" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
    "right" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
    "info" : "SuperConstructorInvocation[3991-4041]:SuperConstructorInvocation[3991-4041]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[4046-4071]:ExpressionStatement[4046-4071]"
  }, {
    "left" : "this.registry = compiler.getTypeRegistry();",
    "right" : "this.registry = compiler.getTypeRegistry();",
    "info" : "ExpressionStatement[4076-4119]:ExpressionStatement[4076-4119]"
  }, {
    "left" : "this.reverseInterpreter = reverseInterpreter;",
    "right" : "this.reverseInterpreter = reverseInterpreter;",
    "info" : "ExpressionStatement[4124-4169]:ExpressionStatement[4124-4169]"
  }, {
    "left" : "this.unknownType = registry.getNativeObjectType(UNKNOWN_TYPE);",
    "right" : "this.unknownType = registry.getNativeObjectType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[4174-4236]:ExpressionStatement[4174-4236]"
  }, {
    "left" : "this.syntacticScope = functionScope;",
    "right" : "this.syntacticScope = functionScope;",
    "info" : "ExpressionStatement[4242-4278]:ExpressionStatement[4242-4278]"
  }, {
    "left" : "inferArguments(functionScope);",
    "right" : "inferArguments(functionScope);",
    "info" : "ExpressionStatement[4283-4313]:ExpressionStatement[4283-4313]"
  }, {
    "left" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
    "right" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
    "info" : "ExpressionStatement[4319-4390]:ExpressionStatement[4319-4390]"
  }, {
    "left" : "this.assertionFunctionsMap = assertionFunctionsMap;",
    "right" : "this.assertionFunctionsMap = assertionFunctionsMap;",
    "info" : "ExpressionStatement[4395-4446]:ExpressionStatement[4395-4446]"
  }, {
    "left" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
    "right" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
    "info" : "VariableDeclarationStatement[4545-4631]:VariableDeclarationStatement[4545-4631]"
  }, {
    "left" : "while (varIt.hasNext())",
    "right" : "while (varIt.hasNext())",
    "info" : "WhileStatement[4636-4847]:WhileStatement[4636-4847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4660-4847]:Block[4660-4847]"
  }, {
    "left" : "Var var = varIt.next();",
    "right" : "Var var = varIt.next();",
    "info" : "VariableDeclarationStatement[4668-4691]:VariableDeclarationStatement[4668-4691]"
  }, {
    "left" : "if (isUnflowable(var))",
    "right" : "if (isUnflowable(var))",
    "info" : "IfStatement[4698-4748]:IfStatement[4698-4748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4721-4748]:Block[4721-4748]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[4731-4740]:ContinueStatement[4731-4740]"
  }, {
    "left" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
    "right" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
    "info" : "ExpressionStatement[4756-4841]:ExpressionStatement[4756-4841]"
  }, {
    "left" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        Scope.createLatticeBottom(functionScope.getRootNode()));",
    "right" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        Scope.createLatticeBottom(functionScope.getRootNode()));",
    "info" : "ExpressionStatement[4853-4972]:ExpressionStatement[4853-4972]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5066-5073]:Modifier[5066-5073]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5074-5078]:PrimitiveType[5074-5078]"
  }, {
    "left" : "inferArguments",
    "right" : "inferArguments",
    "info" : "SimpleName[5079-5093]:SimpleName[5079-5093]"
  }, {
    "left" : "Scope functionScope",
    "right" : "Scope functionScope",
    "info" : "SingleVariableDeclaration[5094-5113]:SingleVariableDeclaration[5094-5113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5115-6580]:Block[5115-6580]"
  }, {
    "left" : "Node functionNode = functionScope.getRootNode();",
    "right" : "Node functionNode = functionScope.getRootNode();",
    "info" : "VariableDeclarationStatement[5121-5169]:VariableDeclarationStatement[5121-5169]"
  }, {
    "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
    "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[5174-5234]:VariableDeclarationStatement[5174-5234]"
  }, {
    "left" : "Node iifeArgumentNode = null;",
    "right" : "Node iifeArgumentNode = null;",
    "info" : "VariableDeclarationStatement[5239-5268]:VariableDeclarationStatement[5239-5268]"
  }, {
    "left" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
    "right" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
    "info" : "IfStatement[5274-5376]:IfStatement[5274-5376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5320-5376]:Block[5320-5376]"
  }, {
    "left" : "iifeArgumentNode = functionNode.getNext();",
    "right" : "iifeArgumentNode = functionNode.getNext();",
    "info" : "ExpressionStatement[5328-5370]:ExpressionStatement[5328-5370]"
  }, {
    "left" : "FunctionType functionType =\n        JSType.toMaybeFunctionType(functionNode.getJSType());",
    "right" : "FunctionType functionType =\n        JSType.toMaybeFunctionType(functionNode.getJSType());",
    "info" : "VariableDeclarationStatement[5382-5471]:VariableDeclarationStatement[5382-5471]"
  }, {
    "left" : "if (functionType != null)",
    "right" : "if (functionType != null)",
    "info" : "IfStatement[5476-6576]:IfStatement[5476-6576]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5502-6576]:Block[5502-6576]"
  }, {
    "left" : "Node parameterTypes = functionType.getParametersNode();",
    "right" : "Node parameterTypes = functionType.getParametersNode();",
    "info" : "VariableDeclarationStatement[5510-5565]:VariableDeclarationStatement[5510-5565]"
  }, {
    "left" : "if (parameterTypes != null)",
    "right" : "if (parameterTypes != null)",
    "info" : "IfStatement[5572-6570]:IfStatement[5572-6570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5600-6570]:Block[5600-6570]"
  }, {
    "left" : "Node parameterTypeNode = parameterTypes.getFirstChild();",
    "right" : "Node parameterTypeNode = parameterTypes.getFirstChild();",
    "info" : "VariableDeclarationStatement[5610-5666]:VariableDeclarationStatement[5610-5666]"
  }, {
    "left" : "for (Node astParameter : astParameters.children())",
    "right" : "for (Node astParameter : astParameters.children())",
    "info" : "EnhancedForStatement[5675-6562]:EnhancedForStatement[5675-6562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5726-6562]:Block[5726-6562]"
  }, {
    "left" : "Var var = functionScope.getVar(astParameter.getString());",
    "right" : "Var var = functionScope.getVar(astParameter.getString());",
    "info" : "VariableDeclarationStatement[5738-5795]:VariableDeclarationStatement[5738-5795]"
  }, {
    "left" : "Preconditions.checkNotNull(var);",
    "right" : "Preconditions.checkNotNull(var);",
    "info" : "ExpressionStatement[5806-5838]:ExpressionStatement[5806-5838]"
  }, {
    "left" : "if (var.isTypeInferred() &&\n              var.getType() == unknownType)",
    "right" : "if (var.isTypeInferred() &&\n              var.getType() == unknownType)",
    "info" : "IfStatement[5849-6322]:IfStatement[5849-6322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5921-6322]:Block[5921-6322]"
  }, {
    "left" : "JSType newType = null;",
    "right" : "JSType newType = null;",
    "info" : "VariableDeclarationStatement[5935-5957]:VariableDeclarationStatement[5935-5957]"
  }, {
    "left" : "if (iifeArgumentNode != null)",
    "right" : "if (iifeArgumentNode != null)",
    "info" : "IfStatement[5971-6177]:IfStatement[5971-6177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6001-6070]:Block[6001-6070]"
  }, {
    "left" : "newType = iifeArgumentNode.getJSType();",
    "right" : "newType = iifeArgumentNode.getJSType();",
    "info" : "ExpressionStatement[6017-6056]:ExpressionStatement[6017-6056]"
  }, {
    "left" : "if (parameterTypeNode != null)",
    "right" : "if (parameterTypeNode != null)",
    "info" : "IfStatement[6076-6177]:IfStatement[6076-6177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6107-6177]:Block[6107-6177]"
  }, {
    "left" : "newType = parameterTypeNode.getJSType();",
    "right" : "newType = parameterTypeNode.getJSType();",
    "info" : "ExpressionStatement[6123-6163]:ExpressionStatement[6123-6163]"
  }, {
    "left" : "if (newType != null)",
    "right" : "if (newType != null)",
    "info" : "IfStatement[6191-6310]:IfStatement[6191-6310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6212-6310]:Block[6212-6310]"
  }, {
    "left" : "var.setType(newType);",
    "right" : "var.setType(newType);",
    "info" : "ExpressionStatement[6228-6249]:ExpressionStatement[6228-6249]"
  }, {
    "left" : "astParameter.setJSType(newType);",
    "right" : "astParameter.setJSType(newType);",
    "info" : "ExpressionStatement[6264-6296]:ExpressionStatement[6264-6296]"
  }, {
    "left" : "if (parameterTypeNode != null)",
    "right" : "if (parameterTypeNode != null)",
    "info" : "IfStatement[6334-6439]:IfStatement[6334-6439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6365-6439]:Block[6365-6439]"
  }, {
    "left" : "parameterTypeNode = parameterTypeNode.getNext();",
    "right" : "parameterTypeNode = parameterTypeNode.getNext();",
    "info" : "ExpressionStatement[6379-6427]:ExpressionStatement[6379-6427]"
  }, {
    "left" : "if (iifeArgumentNode != null)",
    "right" : "if (iifeArgumentNode != null)",
    "info" : "IfStatement[6450-6552]:IfStatement[6450-6552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6480-6552]:Block[6480-6552]"
  }, {
    "left" : "iifeArgumentNode = iifeArgumentNode.getNext();",
    "right" : "iifeArgumentNode = iifeArgumentNode.getNext();",
    "info" : "ExpressionStatement[6494-6540]:ExpressionStatement[6494-6540]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6584-6593]:MarkerAnnotation[6584-6593]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[6596-6605]:SimpleType[6596-6605]"
  }, {
    "left" : "createInitialEstimateLattice",
    "right" : "createInitialEstimateLattice",
    "info" : "SimpleName[6606-6634]:SimpleName[6606-6634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6637-6666]:Block[6637-6666]"
  }, {
    "left" : "return bottomScope;",
    "right" : "return bottomScope;",
    "info" : "ReturnStatement[6643-6662]:ReturnStatement[6643-6662]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6670-6679]:MarkerAnnotation[6670-6679]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[6682-6691]:SimpleType[6682-6691]"
  }, {
    "left" : "createEntryLattice",
    "right" : "createEntryLattice",
    "info" : "SimpleName[6692-6710]:SimpleName[6692-6710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6713-6744]:Block[6713-6744]"
  }, {
    "left" : "return functionScope;",
    "right" : "return functionScope;",
    "info" : "ReturnStatement[6719-6740]:ReturnStatement[6719-6740]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6748-6757]:MarkerAnnotation[6748-6757]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[6760-6769]:SimpleType[6760-6769]"
  }, {
    "left" : "flowThrough",
    "right" : "flowThrough",
    "info" : "SimpleName[6770-6781]:SimpleName[6770-6781]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6782-6788]:SingleVariableDeclaration[6782-6788]"
  }, {
    "left" : "FlowScope input",
    "right" : "FlowScope input",
    "info" : "SingleVariableDeclaration[6790-6805]:SingleVariableDeclaration[6790-6805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6807-7096]:Block[6807-7096]"
  }, {
    "left" : "if (input == bottomScope)",
    "right" : "if (input == bottomScope)",
    "info" : "IfStatement[6932-6985]:IfStatement[6932-6985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6958-6985]:Block[6958-6985]"
  }, {
    "left" : "return input;",
    "right" : "return input;",
    "info" : "ReturnStatement[6966-6979]:ReturnStatement[6966-6979]"
  }, {
    "left" : "FlowScope output = input.createChildFlowScope();",
    "right" : "FlowScope output = input.createChildFlowScope();",
    "info" : "VariableDeclarationStatement[6991-7039]:VariableDeclarationStatement[6991-7039]"
  }, {
    "left" : "output = traverse(n, output);",
    "right" : "output = traverse(n, output);",
    "info" : "ExpressionStatement[7044-7073]:ExpressionStatement[7044-7073]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[7078-7092]:ReturnStatement[7078-7092]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7100-7109]:MarkerAnnotation[7100-7109]"
  }, {
    "left" : "@SuppressWarnings({\"fallthrough\", \"incomplete-switch\"})",
    "right" : "@SuppressWarnings({\"fallthrough\", \"incomplete-switch\"})",
    "info" : "SingleMemberAnnotation[7112-7167]:SingleMemberAnnotation[7112-7167]"
  }, {
    "left" : "List<FlowScope>",
    "right" : "List<FlowScope>",
    "info" : "ParameterizedType[7170-7185]:ParameterizedType[7170-7185]"
  }, {
    "left" : "branchedFlowThrough",
    "right" : "branchedFlowThrough",
    "info" : "SimpleName[7186-7205]:SimpleName[7186-7205]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[7206-7217]:SingleVariableDeclaration[7206-7217]"
  }, {
    "left" : "FlowScope input",
    "right" : "FlowScope input",
    "info" : "SingleVariableDeclaration[7219-7234]:SingleVariableDeclaration[7219-7234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7236-11855]:Block[7236-11855]"
  }, {
    "left" : "FlowScope output = flowThrough(source, input);",
    "right" : "FlowScope output = flowThrough(source, input);",
    "info" : "VariableDeclarationStatement[7558-7604]:VariableDeclarationStatement[7558-7604]"
  }, {
    "left" : "Node condition = null;",
    "right" : "Node condition = null;",
    "info" : "VariableDeclarationStatement[7609-7631]:VariableDeclarationStatement[7609-7631]"
  }, {
    "left" : "FlowScope conditionFlowScope = null;",
    "right" : "FlowScope conditionFlowScope = null;",
    "info" : "VariableDeclarationStatement[7636-7672]:VariableDeclarationStatement[7636-7672]"
  }, {
    "left" : "BooleanOutcomePair conditionOutcomes = null;",
    "right" : "BooleanOutcomePair conditionOutcomes = null;",
    "info" : "VariableDeclarationStatement[7677-7721]:VariableDeclarationStatement[7677-7721]"
  }, {
    "left" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
    "right" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
    "info" : "VariableDeclarationStatement[7727-7802]:VariableDeclarationStatement[7727-7802]"
  }, {
    "left" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
    "right" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
    "info" : "VariableDeclarationStatement[7807-7883]:VariableDeclarationStatement[7807-7883]"
  }, {
    "left" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
    "right" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
    "info" : "EnhancedForStatement[7888-11832]:EnhancedForStatement[7888-11832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7945-11832]:Block[7945-11832]"
  }, {
    "left" : "Branch branch = branchEdge.getValue();",
    "right" : "Branch branch = branchEdge.getValue();",
    "info" : "VariableDeclarationStatement[7953-7991]:VariableDeclarationStatement[7953-7991]"
  }, {
    "left" : "FlowScope newScope = output;",
    "right" : "FlowScope newScope = output;",
    "info" : "VariableDeclarationStatement[7998-8026]:VariableDeclarationStatement[7998-8026]"
  }, {
    "left" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
    "right" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
    "info" : "SwitchStatement[8034-11786]:SwitchStatement[8034-11786]"
  }, {
    "left" : "case ON_TRUE:",
    "right" : "case ON_TRUE:",
    "info" : "SwitchCase[8060-8073]:SwitchCase[8060-8073]"
  }, {
    "left" : "if (NodeUtil.isForIn(source))",
    "right" : "if (NodeUtil.isForIn(source))",
    "info" : "IfStatement[8084-9250]:IfStatement[8084-9250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8114-9250]:Block[8114-9250]"
  }, {
    "left" : "Node item = source.getFirstChild();",
    "right" : "Node item = source.getFirstChild();",
    "info" : "VariableDeclarationStatement[8207-8242]:VariableDeclarationStatement[8207-8242]"
  }, {
    "left" : "Node obj = item.getNext();",
    "right" : "Node obj = item.getNext();",
    "info" : "VariableDeclarationStatement[8255-8281]:VariableDeclarationStatement[8255-8281]"
  }, {
    "left" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
    "right" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
    "info" : "VariableDeclarationStatement[8295-8361]:VariableDeclarationStatement[8295-8361]"
  }, {
    "left" : "if (item.isVar())",
    "right" : "if (item.isVar())",
    "info" : "IfStatement[8375-8451]:IfStatement[8375-8451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8393-8451]:Block[8393-8451]"
  }, {
    "left" : "item = item.getFirstChild();",
    "right" : "item = item.getFirstChild();",
    "info" : "ExpressionStatement[8409-8437]:ExpressionStatement[8409-8437]"
  }, {
    "left" : "if (item.isName())",
    "right" : "if (item.isName())",
    "info" : "IfStatement[8464-9186]:IfStatement[8464-9186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8483-9186]:Block[8483-9186]"
  }, {
    "left" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
    "right" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
    "info" : "VariableDeclarationStatement[8499-8547]:VariableDeclarationStatement[8499-8547]"
  }, {
    "left" : "ObjectType objType = getJSType(obj).dereference();",
    "right" : "ObjectType objType = getJSType(obj).dereference();",
    "info" : "VariableDeclarationStatement[8562-8612]:VariableDeclarationStatement[8562-8612]"
  }, {
    "left" : "JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());",
    "right" : "JSType objIndexType = objType == null ?\n                  null : objType.getTemplateTypeMap().getTemplateType(\n                      registry.getObjectIndexKey());",
    "info" : "VariableDeclarationStatement[8627-8790]:VariableDeclarationStatement[8627-8790]"
  }, {
    "left" : "if (objIndexType != null && !objIndexType.isUnknownType())",
    "right" : "if (objIndexType != null && !objIndexType.isUnknownType())",
    "info" : "IfStatement[8805-9109]:IfStatement[8805-9109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8864-9109]:Block[8864-9109]"
  }, {
    "left" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
    "right" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
    "info" : "VariableDeclarationStatement[8882-8972]:VariableDeclarationStatement[8882-8972]"
  }, {
    "left" : "if (!narrowedKeyType.isEmptyType())",
    "right" : "if (!narrowedKeyType.isEmptyType())",
    "info" : "IfStatement[8989-9093]:IfStatement[8989-9093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9025-9093]:Block[9025-9093]"
  }, {
    "left" : "iterKeyType = narrowedKeyType;",
    "right" : "iterKeyType = narrowedKeyType;",
    "info" : "ExpressionStatement[9045-9075]:ExpressionStatement[9045-9075]"
  }, {
    "left" : "redeclareSimpleVar(informed, item, iterKeyType);",
    "right" : "redeclareSimpleVar(informed, item, iterKeyType);",
    "info" : "ExpressionStatement[9124-9172]:ExpressionStatement[9124-9172]"
  }, {
    "left" : "newScope = informed;",
    "right" : "newScope = informed;",
    "info" : "ExpressionStatement[9199-9219]:ExpressionStatement[9199-9219]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9232-9238]:BreakStatement[9232-9238]"
  }, {
    "left" : "case ON_FALSE:",
    "right" : "case ON_FALSE:",
    "info" : "SwitchCase[9287-9301]:SwitchCase[9287-9301]"
  }, {
    "left" : "if (condition == null)",
    "right" : "if (condition == null)",
    "info" : "IfStatement[9312-9809]:IfStatement[9312-9809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9335-9809]:Block[9335-9809]"
  }, {
    "left" : "condition = NodeUtil.getConditionExpression(source);",
    "right" : "condition = NodeUtil.getConditionExpression(source);",
    "info" : "ExpressionStatement[9349-9401]:ExpressionStatement[9349-9401]"
  }, {
    "left" : "if (condition == null && source.isCase())",
    "right" : "if (condition == null && source.isCase())",
    "info" : "IfStatement[9414-9797]:IfStatement[9414-9797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9456-9797]:Block[9456-9797]"
  }, {
    "left" : "condition = source;",
    "right" : "condition = source;",
    "info" : "ExpressionStatement[9472-9491]:ExpressionStatement[9472-9491]"
  }, {
    "left" : "if (conditionFlowScope == null)",
    "right" : "if (conditionFlowScope == null)",
    "info" : "IfStatement[9608-9783]:IfStatement[9608-9783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9640-9783]:Block[9640-9783]"
  }, {
    "left" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
    "right" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
    "info" : "ExpressionStatement[9658-9767]:ExpressionStatement[9658-9767]"
  }, {
    "left" : "if (condition != null)",
    "right" : "if (condition != null)",
    "info" : "IfStatement[9821-11761]:IfStatement[9821-11761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9844-11761]:Block[9844-11761]"
  }, {
    "left" : "if (condition.isAnd() ||\n                condition.isOr())",
    "right" : "if (condition.isAnd() ||\n                condition.isOr())",
    "info" : "IfStatement[9858-11749]:IfStatement[9858-11749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9917-11271]:Block[9917-11271]"
  }, {
    "left" : "if (conditionOutcomes == null)",
    "right" : "if (conditionOutcomes == null)",
    "info" : "IfStatement[10683-10937]:IfStatement[10683-10937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10714-10937]:Block[10714-10937]"
  }, {
    "left" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
    "right" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
    "info" : "ExpressionStatement[10732-10921]:ExpressionStatement[10732-10921]"
  }, {
    "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
    "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
    "info" : "ExpressionStatement[10952-11257]:ExpressionStatement[10952-11257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11277-11749]:Block[11277-11749]"
  }, {
    "left" : "if (conditionFlowScope == null)",
    "right" : "if (conditionFlowScope == null)",
    "info" : "IfStatement[11394-11552]:IfStatement[11394-11552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11426-11552]:Block[11426-11552]"
  }, {
    "left" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
    "right" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
    "info" : "ExpressionStatement[11444-11536]:ExpressionStatement[11444-11536]"
  }, {
    "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
    "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
    "info" : "ExpressionStatement[11567-11735]:ExpressionStatement[11567-11735]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11772-11778]:BreakStatement[11772-11778]"
  }, {
    "left" : "result.add(newScope.optimize());",
    "right" : "result.add(newScope.optimize());",
    "info" : "ExpressionStatement[11794-11826]:ExpressionStatement[11794-11826]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[11837-11851]:ReturnStatement[11837-11851]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11859-11866]:Modifier[11859-11866]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[11867-11876]:SimpleType[11867-11876]"
  }, {
    "left" : "traverse",
    "right" : "traverse",
    "info" : "SimpleName[11877-11885]:SimpleName[11877-11885]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11886-11892]:SingleVariableDeclaration[11886-11892]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[11894-11909]:SingleVariableDeclaration[11894-11909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11911-15669]:Block[11911-15669]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n\n      case Token.CAST:\n        scope = traverseChildren(n, scope);\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.hasType()) {\n          n.setJSType(info.getType().evaluate(syntacticScope, registry));\n        }\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n\n      case Token.CAST:\n        scope = traverseChildren(n, scope);\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.hasType()) {\n          n.setJSType(info.getType().evaluate(syntacticScope, registry));\n        }\n        break;\n    }",
    "info" : "SwitchStatement[11917-15646]:SwitchStatement[11917-15646]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[11946-11964]:SwitchCase[11946-11964]"
  }, {
    "left" : "scope = traverseAssign(n, scope);",
    "right" : "scope = traverseAssign(n, scope);",
    "info" : "ExpressionStatement[11973-12006]:ExpressionStatement[11973-12006]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12015-12021]:BreakStatement[12015-12021]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[12029-12045]:SwitchCase[12029-12045]"
  }, {
    "left" : "scope = traverseName(n, scope);",
    "right" : "scope = traverseName(n, scope);",
    "info" : "ExpressionStatement[12054-12085]:ExpressionStatement[12054-12085]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12094-12100]:BreakStatement[12094-12100]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[12108-12127]:SwitchCase[12108-12127]"
  }, {
    "left" : "scope = traverseGetProp(n, scope);",
    "right" : "scope = traverseGetProp(n, scope);",
    "info" : "ExpressionStatement[12136-12170]:ExpressionStatement[12136-12170]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12179-12185]:BreakStatement[12179-12185]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[12193-12208]:SwitchCase[12193-12208]"
  }, {
    "left" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "right" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "info" : "ExpressionStatement[12217-12304]:ExpressionStatement[12217-12304]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12313-12319]:BreakStatement[12313-12319]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[12327-12341]:SwitchCase[12327-12341]"
  }, {
    "left" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "right" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "info" : "ExpressionStatement[12350-12436]:ExpressionStatement[12350-12436]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12445-12451]:BreakStatement[12445-12451]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[12459-12475]:SwitchCase[12459-12475]"
  }, {
    "left" : "scope = traverseHook(n, scope);",
    "right" : "scope = traverseHook(n, scope);",
    "info" : "ExpressionStatement[12484-12515]:ExpressionStatement[12484-12515]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12524-12530]:BreakStatement[12524-12530]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[12538-12559]:SwitchCase[12538-12559]"
  }, {
    "left" : "scope = traverseObjectLiteral(n, scope);",
    "right" : "scope = traverseObjectLiteral(n, scope);",
    "info" : "ExpressionStatement[12568-12608]:ExpressionStatement[12568-12608]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12617-12623]:BreakStatement[12617-12623]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[12631-12647]:SwitchCase[12631-12647]"
  }, {
    "left" : "scope = traverseCall(n, scope);",
    "right" : "scope = traverseCall(n, scope);",
    "info" : "ExpressionStatement[12656-12687]:ExpressionStatement[12656-12687]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12696-12702]:BreakStatement[12696-12702]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[12710-12725]:SwitchCase[12710-12725]"
  }, {
    "left" : "scope = traverseNew(n, scope);",
    "right" : "scope = traverseNew(n, scope);",
    "info" : "ExpressionStatement[12734-12764]:ExpressionStatement[12734-12764]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12773-12779]:BreakStatement[12773-12779]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[12787-12809]:SwitchCase[12787-12809]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[12816-12831]:SwitchCase[12816-12831]"
  }, {
    "left" : "scope = traverseAdd(n, scope);",
    "right" : "scope = traverseAdd(n, scope);",
    "info" : "ExpressionStatement[12840-12870]:ExpressionStatement[12840-12870]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12879-12885]:BreakStatement[12879-12885]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[12893-12908]:SwitchCase[12893-12908]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[12915-12930]:SwitchCase[12915-12930]"
  }, {
    "left" : "scope = traverse(n.getFirstChild(), scope);",
    "right" : "scope = traverse(n.getFirstChild(), scope);",
    "info" : "ExpressionStatement[12939-12982]:ExpressionStatement[12939-12982]"
  }, {
    "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "info" : "ExpressionStatement[13007-13047]:ExpressionStatement[13007-13047]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13056-13062]:BreakStatement[13056-13062]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[13070-13090]:SwitchCase[13070-13090]"
  }, {
    "left" : "scope = traverseArrayLiteral(n, scope);",
    "right" : "scope = traverseArrayLiteral(n, scope);",
    "info" : "ExpressionStatement[13099-13138]:ExpressionStatement[13099-13138]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13147-13153]:BreakStatement[13147-13153]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[13161-13177]:SwitchCase[13161-13177]"
  }, {
    "left" : "n.setJSType(scope.getTypeOfThis());",
    "right" : "n.setJSType(scope.getTypeOfThis());",
    "info" : "ExpressionStatement[13186-13221]:ExpressionStatement[13186-13221]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13230-13236]:BreakStatement[13230-13236]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[13244-13266]:SwitchCase[13244-13266]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[13273-13295]:SwitchCase[13273-13295]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[13302-13317]:SwitchCase[13302-13317]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[13324-13339]:SwitchCase[13324-13339]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[13346-13369]:SwitchCase[13346-13369]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[13376-13392]:SwitchCase[13376-13392]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[13399-13421]:SwitchCase[13399-13421]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[13428-13450]:SwitchCase[13428-13450]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[13457-13482]:SwitchCase[13457-13482]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[13489-13514]:SwitchCase[13489-13514]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[13521-13545]:SwitchCase[13521-13545]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[13552-13574]:SwitchCase[13552-13574]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[13581-13603]:SwitchCase[13581-13603]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[13610-13625]:SwitchCase[13610-13625]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[13632-13647]:SwitchCase[13632-13647]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[13654-13672]:SwitchCase[13654-13672]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[13679-13697]:SwitchCase[13679-13697]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[13704-13721]:SwitchCase[13704-13721]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[13728-13743]:SwitchCase[13728-13743]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[13750-13765]:SwitchCase[13750-13765]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[13772-13787]:SwitchCase[13772-13787]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[13794-13809]:SwitchCase[13794-13809]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[13816-13834]:SwitchCase[13816-13834]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[13843-13878]:ExpressionStatement[13843-13878]"
  }, {
    "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "info" : "ExpressionStatement[13887-13927]:ExpressionStatement[13887-13927]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13936-13942]:BreakStatement[13936-13942]"
  }, {
    "left" : "case Token.PARAM_LIST:",
    "right" : "case Token.PARAM_LIST:",
    "info" : "SwitchCase[13950-13972]:SwitchCase[13950-13972]"
  }, {
    "left" : "scope = traverse(n.getFirstChild(), scope);",
    "right" : "scope = traverse(n.getFirstChild(), scope);",
    "info" : "ExpressionStatement[13981-14024]:ExpressionStatement[13981-14024]"
  }, {
    "left" : "n.setJSType(getJSType(n.getFirstChild()));",
    "right" : "n.setJSType(getJSType(n.getFirstChild()));",
    "info" : "ExpressionStatement[14033-14075]:ExpressionStatement[14033-14075]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14084-14090]:BreakStatement[14084-14090]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[14098-14115]:SwitchCase[14098-14115]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[14124-14159]:ExpressionStatement[14124-14159]"
  }, {
    "left" : "n.setJSType(getJSType(n.getLastChild()));",
    "right" : "n.setJSType(getJSType(n.getLastChild()));",
    "info" : "ExpressionStatement[14168-14209]:ExpressionStatement[14168-14209]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14218-14224]:BreakStatement[14218-14224]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[14232-14250]:SwitchCase[14232-14250]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[14259-14294]:ExpressionStatement[14259-14294]"
  }, {
    "left" : "n.setJSType(getNativeType(STRING_TYPE));",
    "right" : "n.setJSType(getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[14303-14343]:ExpressionStatement[14303-14343]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14352-14358]:BreakStatement[14352-14358]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[14366-14385]:SwitchCase[14366-14385]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[14392-14406]:SwitchCase[14392-14406]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[14413-14427]:SwitchCase[14413-14427]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[14434-14448]:SwitchCase[14434-14448]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[14455-14469]:SwitchCase[14455-14469]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[14476-14491]:SwitchCase[14476-14491]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[14498-14512]:SwitchCase[14498-14512]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[14519-14533]:SwitchCase[14519-14533]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[14540-14556]:SwitchCase[14540-14556]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[14563-14579]:SwitchCase[14563-14579]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[14586-14608]:SwitchCase[14586-14608]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[14615-14629]:SwitchCase[14615-14629]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[14638-14673]:ExpressionStatement[14638-14673]"
  }, {
    "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "info" : "ExpressionStatement[14682-14723]:ExpressionStatement[14682-14723]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14732-14738]:BreakStatement[14732-14738]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[14746-14765]:SwitchCase[14746-14765]"
  }, {
    "left" : "scope = traverseGetElem(n, scope);",
    "right" : "scope = traverseGetElem(n, scope);",
    "info" : "ExpressionStatement[14774-14808]:ExpressionStatement[14774-14808]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14817-14823]:BreakStatement[14817-14823]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[14831-14854]:SwitchCase[14831-14854]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[14863-14898]:ExpressionStatement[14863-14898]"
  }, {
    "left" : "if (n.getFirstChild().isGetProp())",
    "right" : "if (n.getFirstChild().isGetProp())",
    "info" : "IfStatement[14907-15006]:IfStatement[14907-15006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14942-15006]:Block[14942-15006]"
  }, {
    "left" : "ensurePropertyDeclared(n.getFirstChild());",
    "right" : "ensurePropertyDeclared(n.getFirstChild());",
    "info" : "ExpressionStatement[14954-14996]:ExpressionStatement[14954-14996]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15015-15021]:BreakStatement[15015-15021]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[15029-15047]:SwitchCase[15029-15047]"
  }, {
    "left" : "scope = traverse(n.getFirstChild(), scope);",
    "right" : "scope = traverse(n.getFirstChild(), scope);",
    "info" : "ExpressionStatement[15056-15099]:ExpressionStatement[15056-15099]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15108-15114]:BreakStatement[15108-15114]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[15122-15140]:SwitchCase[15122-15140]"
  }, {
    "left" : "scope = traverseReturn(n, scope);",
    "right" : "scope = traverseReturn(n, scope);",
    "info" : "ExpressionStatement[15149-15182]:ExpressionStatement[15149-15182]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15191-15197]:BreakStatement[15191-15197]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[15205-15220]:SwitchCase[15205-15220]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[15227-15244]:SwitchCase[15227-15244]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[15253-15288]:ExpressionStatement[15253-15288]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15297-15303]:BreakStatement[15297-15303]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[15311-15328]:SwitchCase[15311-15328]"
  }, {
    "left" : "scope = traverseCatch(n, scope);",
    "right" : "scope = traverseCatch(n, scope);",
    "info" : "ExpressionStatement[15337-15369]:ExpressionStatement[15337-15369]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15378-15384]:BreakStatement[15378-15384]"
  }, {
    "left" : "case Token.CAST:",
    "right" : "case Token.CAST:",
    "info" : "SwitchCase[15392-15408]:SwitchCase[15392-15408]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[15417-15452]:ExpressionStatement[15417-15452]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[15461-15495]:VariableDeclarationStatement[15461-15495]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[15504-15625]:IfStatement[15504-15625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15540-15625]:Block[15540-15625]"
  }, {
    "left" : "n.setJSType(info.getType().evaluate(syntacticScope, registry));",
    "right" : "n.setJSType(info.getType().evaluate(syntacticScope, registry));",
    "info" : "ExpressionStatement[15552-15615]:ExpressionStatement[15552-15615]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15634-15640]:BreakStatement[15634-15640]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[15652-15665]:ReturnStatement[15652-15665]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15715-15722]:Modifier[15715-15722]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[15723-15732]:SimpleType[15723-15732]"
  }, {
    "left" : "traverseReturn",
    "right" : "traverseReturn",
    "info" : "SimpleName[15733-15747]:SimpleName[15733-15747]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15748-15754]:SingleVariableDeclaration[15748-15754]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[15756-15771]:SingleVariableDeclaration[15756-15771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15773-16211]:Block[15773-16211]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[15779-15814]:ExpressionStatement[15779-15814]"
  }, {
    "left" : "Node retValue = n.getFirstChild();",
    "right" : "Node retValue = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[15820-15854]:VariableDeclarationStatement[15820-15854]"
  }, {
    "left" : "if (retValue != null)",
    "right" : "if (retValue != null)",
    "info" : "IfStatement[15859-16189]:IfStatement[15859-16189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15881-16189]:Block[15881-16189]"
  }, {
    "left" : "JSType type = functionScope.getRootNode().getJSType();",
    "right" : "JSType type = functionScope.getRootNode().getJSType();",
    "info" : "VariableDeclarationStatement[15889-15943]:VariableDeclarationStatement[15889-15943]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[15950-16183]:IfStatement[15950-16183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15968-16183]:Block[15968-16183]"
  }, {
    "left" : "FunctionType fnType = type.toMaybeFunctionType();",
    "right" : "FunctionType fnType = type.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[15978-16027]:VariableDeclarationStatement[15978-16027]"
  }, {
    "left" : "if (fnType != null)",
    "right" : "if (fnType != null)",
    "info" : "IfStatement[16036-16175]:IfStatement[16036-16175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16056-16175]:Block[16056-16175]"
  }, {
    "left" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
    "right" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
    "info" : "ExpressionStatement[16068-16165]:ExpressionStatement[16068-16165]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[16194-16207]:ReturnStatement[16194-16207]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16358-16365]:Modifier[16358-16365]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[16366-16375]:SimpleType[16366-16375]"
  }, {
    "left" : "traverseCatch",
    "right" : "traverseCatch",
    "info" : "SimpleName[16376-16389]:SimpleName[16376-16389]"
  }, {
    "left" : "Node catchNode",
    "right" : "Node catchNode",
    "info" : "SingleVariableDeclaration[16390-16404]:SingleVariableDeclaration[16390-16404]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[16406-16421]:SingleVariableDeclaration[16406-16421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16423-16906]:Block[16423-16906]"
  }, {
    "left" : "Node name = catchNode.getFirstChild();",
    "right" : "Node name = catchNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[16429-16467]:VariableDeclarationStatement[16429-16467]"
  }, {
    "left" : "JSType type;",
    "right" : "JSType type;",
    "info" : "VariableDeclarationStatement[16472-16484]:VariableDeclarationStatement[16472-16484]"
  }, {
    "left" : "JSDocInfo info = name.getJSDocInfo();",
    "right" : "JSDocInfo info = name.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[16598-16635]:VariableDeclarationStatement[16598-16635]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[16640-16815]:IfStatement[16640-16815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16676-16747]:Block[16676-16747]"
  }, {
    "left" : "type = info.getType().evaluate(syntacticScope, registry);",
    "right" : "type = info.getType().evaluate(syntacticScope, registry);",
    "info" : "ExpressionStatement[16684-16741]:ExpressionStatement[16684-16741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16753-16815]:Block[16753-16815]"
  }, {
    "left" : "type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[16761-16809]:ExpressionStatement[16761-16809]"
  }, {
    "left" : "redeclareSimpleVar(scope, name, type);",
    "right" : "redeclareSimpleVar(scope, name, type);",
    "info" : "ExpressionStatement[16820-16858]:ExpressionStatement[16820-16858]"
  }, {
    "left" : "name.setJSType(type);",
    "right" : "name.setJSType(type);",
    "info" : "ExpressionStatement[16863-16884]:ExpressionStatement[16863-16884]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[16889-16902]:ReturnStatement[16889-16902]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16910-16917]:Modifier[16910-16917]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[16918-16927]:SimpleType[16918-16927]"
  }, {
    "left" : "traverseAssign",
    "right" : "traverseAssign",
    "info" : "SimpleName[16928-16942]:SimpleName[16928-16942]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16943-16949]:SingleVariableDeclaration[16943-16949]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[16951-16966]:SingleVariableDeclaration[16951-16966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16968-17276]:Block[16968-17276]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[16974-17004]:VariableDeclarationStatement[16974-17004]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[17009-17039]:VariableDeclarationStatement[17009-17039]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[17044-17079]:ExpressionStatement[17044-17079]"
  }, {
    "left" : "JSType leftType = left.getJSType();",
    "right" : "JSType leftType = left.getJSType();",
    "info" : "VariableDeclarationStatement[17085-17120]:VariableDeclarationStatement[17085-17120]"
  }, {
    "left" : "JSType rightType = getJSType(right);",
    "right" : "JSType rightType = getJSType(right);",
    "info" : "VariableDeclarationStatement[17125-17161]:VariableDeclarationStatement[17125-17161]"
  }, {
    "left" : "n.setJSType(rightType);",
    "right" : "n.setJSType(rightType);",
    "info" : "ExpressionStatement[17166-17189]:ExpressionStatement[17166-17189]"
  }, {
    "left" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
    "right" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
    "info" : "ExpressionStatement[17195-17254]:ExpressionStatement[17195-17254]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[17259-17272]:ReturnStatement[17259-17272]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17397-17404]:Modifier[17397-17404]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17405-17409]:PrimitiveType[17405-17409]"
  }, {
    "left" : "updateScopeForTypeChange",
    "right" : "updateScopeForTypeChange",
    "info" : "SimpleName[17410-17434]:SimpleName[17410-17434]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[17442-17457]:SingleVariableDeclaration[17442-17457]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[17459-17468]:SingleVariableDeclaration[17459-17468]"
  }, {
    "left" : "JSType leftType",
    "right" : "JSType leftType",
    "info" : "SingleVariableDeclaration[17470-17485]:SingleVariableDeclaration[17470-17485]"
  }, {
    "left" : "JSType resultType",
    "right" : "JSType resultType",
    "info" : "SingleVariableDeclaration[17487-17504]:SingleVariableDeclaration[17487-17504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17506-19175]:Block[17506-19175]"
  }, {
    "left" : "Preconditions.checkNotNull(resultType);",
    "right" : "Preconditions.checkNotNull(resultType);",
    "info" : "ExpressionStatement[17512-17551]:ExpressionStatement[17512-17551]"
  }, {
    "left" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
    "right" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
    "info" : "SwitchStatement[17556-19171]:SwitchStatement[17556-19171]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[17588-17604]:SwitchCase[17588-17604]"
  }, {
    "left" : "String varName = left.getString();",
    "right" : "String varName = left.getString();",
    "info" : "VariableDeclarationStatement[17613-17647]:VariableDeclarationStatement[17613-17647]"
  }, {
    "left" : "Var var = syntacticScope.getVar(varName);",
    "right" : "Var var = syntacticScope.getVar(varName);",
    "info" : "VariableDeclarationStatement[17656-17697]:VariableDeclarationStatement[17656-17697]"
  }, {
    "left" : "boolean isVarDeclaration = left.hasChildren();",
    "right" : "boolean isVarDeclaration = left.hasChildren();",
    "info" : "VariableDeclarationStatement[18292-18338]:VariableDeclarationStatement[18292-18338]"
  }, {
    "left" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
    "right" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
    "info" : "IfStatement[18347-18475]:IfStatement[18347-18475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18409-18475]:Block[18409-18475]"
  }, {
    "left" : "redeclareSimpleVar(scope, left, resultType);",
    "right" : "redeclareSimpleVar(scope, left, resultType);",
    "info" : "ExpressionStatement[18421-18465]:ExpressionStatement[18421-18465]"
  }, {
    "left" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
    "right" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
    "info" : "ExpressionStatement[18484-18569]:ExpressionStatement[18484-18569]"
  }, {
    "left" : "if (var != null && var.isTypeInferred())",
    "right" : "if (var != null && var.isTypeInferred())",
    "info" : "IfStatement[18579-18780]:IfStatement[18579-18780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18620-18780]:Block[18620-18780]"
  }, {
    "left" : "JSType oldType = var.getType();",
    "right" : "JSType oldType = var.getType();",
    "info" : "VariableDeclarationStatement[18632-18663]:VariableDeclarationStatement[18632-18663]"
  }, {
    "left" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
    "right" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
    "info" : "ExpressionStatement[18674-18770]:ExpressionStatement[18674-18770]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18789-18795]:BreakStatement[18789-18795]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[18802-18821]:SwitchCase[18802-18821]"
  }, {
    "left" : "String qualifiedName = left.getQualifiedName();",
    "right" : "String qualifiedName = left.getQualifiedName();",
    "info" : "VariableDeclarationStatement[18830-18877]:VariableDeclarationStatement[18830-18877]"
  }, {
    "left" : "if (qualifiedName != null)",
    "right" : "if (qualifiedName != null)",
    "info" : "IfStatement[18886-19064]:IfStatement[18886-19064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18913-19064]:Block[18913-19064]"
  }, {
    "left" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);",
    "right" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? unknownType : leftType,\n              resultType);",
    "info" : "ExpressionStatement[18925-19054]:ExpressionStatement[18925-19054]"
  }, {
    "left" : "left.setJSType(resultType);",
    "right" : "left.setJSType(resultType);",
    "info" : "ExpressionStatement[19074-19101]:ExpressionStatement[19074-19101]"
  }, {
    "left" : "ensurePropertyDefined(left, resultType);",
    "right" : "ensurePropertyDefined(left, resultType);",
    "info" : "ExpressionStatement[19110-19150]:ExpressionStatement[19110-19150]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19159-19165]:BreakStatement[19159-19165]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19257-19264]:Modifier[19257-19264]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19265-19269]:PrimitiveType[19265-19269]"
  }, {
    "left" : "ensurePropertyDefined",
    "right" : "ensurePropertyDefined",
    "info" : "SimpleName[19270-19291]:SimpleName[19270-19291]"
  }, {
    "left" : "Node getprop",
    "right" : "Node getprop",
    "info" : "SingleVariableDeclaration[19292-19304]:SingleVariableDeclaration[19292-19304]"
  }, {
    "left" : "JSType rightType",
    "right" : "JSType rightType",
    "info" : "SingleVariableDeclaration[19306-19322]:SingleVariableDeclaration[19306-19322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19324-21386]:Block[19324-21386]"
  }, {
    "left" : "String propName = getprop.getLastChild().getString();",
    "right" : "String propName = getprop.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[19330-19383]:VariableDeclarationStatement[19330-19383]"
  }, {
    "left" : "Node obj = getprop.getFirstChild();",
    "right" : "Node obj = getprop.getFirstChild();",
    "info" : "VariableDeclarationStatement[19388-19423]:VariableDeclarationStatement[19388-19423]"
  }, {
    "left" : "JSType nodeType = getJSType(obj);",
    "right" : "JSType nodeType = getJSType(obj);",
    "info" : "VariableDeclarationStatement[19428-19461]:VariableDeclarationStatement[19428-19461]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[19466-19556]:VariableDeclarationStatement[19466-19556]"
  }, {
    "left" : "if (objectType == null)",
    "right" : "if (objectType == null)",
    "info" : "IfStatement[19561-21382]:IfStatement[19561-21382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19585-19651]:Block[19585-19651]"
  }, {
    "left" : "registry.registerPropertyOnType(propName, nodeType);",
    "right" : "registry.registerPropertyOnType(propName, nodeType);",
    "info" : "ExpressionStatement[19593-19645]:ExpressionStatement[19593-19645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19657-21382]:Block[19657-21382]"
  }, {
    "left" : "if (nodeType.isStruct() && !objectType.hasProperty(propName))",
    "right" : "if (nodeType.isStruct() && !objectType.hasProperty(propName))",
    "info" : "IfStatement[19738-19941]:IfStatement[19738-19941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19800-19941]:Block[19800-19941]"
  }, {
    "left" : "if (!(obj.isThis() &&\n              getJSType(syntacticScope.getRootNode()).isConstructor()))",
    "right" : "if (!(obj.isThis() &&\n              getJSType(syntacticScope.getRootNode()).isConstructor()))",
    "info" : "IfStatement[19810-19933]:IfStatement[19810-19933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19904-19933]:Block[19904-19933]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[19916-19923]:ReturnStatement[19916-19923]"
  }, {
    "left" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
    "right" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
    "info" : "IfStatement[19949-20029]:IfStatement[19949-20029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20004-20029]:Block[20004-20029]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[20014-20021]:ReturnStatement[20014-20021]"
  }, {
    "left" : "if (!objectType.isPropertyTypeDeclared(propName))",
    "right" : "if (!objectType.isPropertyTypeDeclared(propName))",
    "info" : "IfStatement[20037-21376]:IfStatement[20037-21376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20087-21376]:Block[20087-21376]"
  }, {
    "left" : "if (objectType.hasProperty(propName) || !objectType.isInstanceType())",
    "right" : "if (objectType.hasProperty(propName) || !objectType.isInstanceType())",
    "info" : "IfStatement[20786-21368]:IfStatement[20786-21368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20856-21098]:Block[20856-21098]"
  }, {
    "left" : "if (\"prototype\".equals(propName))",
    "right" : "if (\"prototype\".equals(propName))",
    "info" : "IfStatement[20868-21088]:IfStatement[20868-21088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20902-20992]:Block[20902-20992]"
  }, {
    "left" : "objectType.defineDeclaredProperty(propName, rightType, getprop);",
    "right" : "objectType.defineDeclaredProperty(propName, rightType, getprop);",
    "info" : "ExpressionStatement[20916-20980]:ExpressionStatement[20916-20980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20998-21088]:Block[20998-21088]"
  }, {
    "left" : "objectType.defineInferredProperty(propName, rightType, getprop);",
    "right" : "objectType.defineInferredProperty(propName, rightType, getprop);",
    "info" : "ExpressionStatement[21012-21076]:ExpressionStatement[21012-21076]"
  }, {
    "left" : "if (obj.isThis() &&\n                   getJSType(syntacticScope.getRootNode()).isConstructor())",
    "right" : "if (obj.isThis() &&\n                   getJSType(syntacticScope.getRootNode()).isConstructor())",
    "info" : "IfStatement[21104-21368]:IfStatement[21104-21368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21200-21286]:Block[21200-21286]"
  }, {
    "left" : "objectType.defineInferredProperty(propName, rightType, getprop);",
    "right" : "objectType.defineInferredProperty(propName, rightType, getprop);",
    "info" : "ExpressionStatement[21212-21276]:ExpressionStatement[21212-21276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21292-21368]:Block[21292-21368]"
  }, {
    "left" : "registry.registerPropertyOnType(propName, objectType);",
    "right" : "registry.registerPropertyOnType(propName, objectType);",
    "info" : "ExpressionStatement[21304-21358]:ExpressionStatement[21304-21358]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21657-21664]:Modifier[21657-21664]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21665-21669]:PrimitiveType[21665-21669]"
  }, {
    "left" : "ensurePropertyDeclared",
    "right" : "ensurePropertyDeclared",
    "info" : "SimpleName[21670-21692]:SimpleName[21670-21692]"
  }, {
    "left" : "Node getprop",
    "right" : "Node getprop",
    "info" : "SingleVariableDeclaration[21693-21705]:SingleVariableDeclaration[21693-21705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21707-21923]:Block[21707-21923]"
  }, {
    "left" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
    "right" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[21713-21828]:VariableDeclarationStatement[21713-21828]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[21833-21919]:IfStatement[21833-21919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21856-21919]:Block[21856-21919]"
  }, {
    "left" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
    "right" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
    "info" : "ExpressionStatement[21864-21913]:ExpressionStatement[21864-21913]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22038-22045]:Modifier[22038-22045]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[22046-22053]:PrimitiveType[22046-22053]"
  }, {
    "left" : "ensurePropertyDeclaredHelper",
    "right" : "ensurePropertyDeclaredHelper",
    "info" : "SimpleName[22054-22082]:SimpleName[22054-22082]"
  }, {
    "left" : "Node getprop",
    "right" : "Node getprop",
    "info" : "SingleVariableDeclaration[22090-22102]:SingleVariableDeclaration[22090-22102]"
  }, {
    "left" : "ObjectType objectType",
    "right" : "ObjectType objectType",
    "info" : "SingleVariableDeclaration[22104-22125]:SingleVariableDeclaration[22104-22125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22127-22872]:Block[22127-22872]"
  }, {
    "left" : "String propName = getprop.getLastChild().getString();",
    "right" : "String propName = getprop.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[22133-22186]:VariableDeclarationStatement[22133-22186]"
  }, {
    "left" : "String qName = getprop.getQualifiedName();",
    "right" : "String qName = getprop.getQualifiedName();",
    "info" : "VariableDeclarationStatement[22191-22233]:VariableDeclarationStatement[22191-22233]"
  }, {
    "left" : "if (qName != null)",
    "right" : "if (qName != null)",
    "info" : "IfStatement[22238-22850]:IfStatement[22238-22850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22257-22850]:Block[22257-22850]"
  }, {
    "left" : "Var var = syntacticScope.getVar(qName);",
    "right" : "Var var = syntacticScope.getVar(qName);",
    "info" : "VariableDeclarationStatement[22265-22304]:VariableDeclarationStatement[22265-22304]"
  }, {
    "left" : "if (var != null && !var.isTypeInferred())",
    "right" : "if (var != null && !var.isTypeInferred())",
    "info" : "IfStatement[22311-22844]:IfStatement[22311-22844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22353-22844]:Block[22353-22844]"
  }, {
    "left" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
    "right" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
    "info" : "IfStatement[22438-22836]:IfStatement[22438-22836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22724-22836]:Block[22724-22836]"
  }, {
    "left" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
    "right" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
    "info" : "ReturnStatement[22736-22826]:ReturnStatement[22736-22826]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22855-22868]:ReturnStatement[22855-22868]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22876-22883]:Modifier[22876-22883]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[22884-22893]:SimpleType[22884-22893]"
  }, {
    "left" : "traverseName",
    "right" : "traverseName",
    "info" : "SimpleName[22894-22906]:SimpleName[22894-22906]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22907-22913]:SingleVariableDeclaration[22907-22913]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[22915-22930]:SingleVariableDeclaration[22915-22930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22932-24878]:Block[22932-24878]"
  }, {
    "left" : "String varName = n.getString();",
    "right" : "String varName = n.getString();",
    "info" : "VariableDeclarationStatement[22938-22969]:VariableDeclarationStatement[22938-22969]"
  }, {
    "left" : "Node value = n.getFirstChild();",
    "right" : "Node value = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[22974-23005]:VariableDeclarationStatement[22974-23005]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[23010-23038]:VariableDeclarationStatement[23010-23038]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[23043-24833]:IfStatement[23043-24833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23062-23232]:Block[23062-23232]"
  }, {
    "left" : "scope = traverse(value, scope);",
    "right" : "scope = traverse(value, scope);",
    "info" : "ExpressionStatement[23070-23101]:ExpressionStatement[23070-23101]"
  }, {
    "left" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
    "right" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
    "info" : "ExpressionStatement[23108-23206]:ExpressionStatement[23108-23206]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[23213-23226]:ReturnStatement[23213-23226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23238-24833]:Block[23238-24833]"
  }, {
    "left" : "StaticSlot<JSType> var = scope.getSlot(varName);",
    "right" : "StaticSlot<JSType> var = scope.getSlot(varName);",
    "info" : "VariableDeclarationStatement[23246-23294]:VariableDeclarationStatement[23246-23294]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[23301-24827]:IfStatement[23301-24827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23318-24827]:Block[23318-24827]"
  }, {
    "left" : "boolean isInferred = var.isTypeInferred();",
    "right" : "boolean isInferred = var.isTypeInferred();",
    "info" : "VariableDeclarationStatement[23597-23639]:VariableDeclarationStatement[23597-23639]"
  }, {
    "left" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
    "right" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
    "info" : "VariableDeclarationStatement[23648-23740]:VariableDeclarationStatement[23648-23740]"
  }, {
    "left" : "boolean nonLocalInferredSlot = false;",
    "right" : "boolean nonLocalInferredSlot = false;",
    "info" : "VariableDeclarationStatement[24322-24359]:VariableDeclarationStatement[24322-24359]"
  }, {
    "left" : "if (isInferred && syntacticScope.isLocal())",
    "right" : "if (isInferred && syntacticScope.isLocal())",
    "info" : "IfStatement[24368-24650]:IfStatement[24368-24650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24412-24650]:Block[24412-24650]"
  }, {
    "left" : "Var maybeOuterVar = syntacticScope.getParent().getVar(varName);",
    "right" : "Var maybeOuterVar = syntacticScope.getParent().getVar(varName);",
    "info" : "VariableDeclarationStatement[24424-24487]:VariableDeclarationStatement[24424-24487]"
  }, {
    "left" : "if (var == maybeOuterVar &&\n              !maybeOuterVar.isMarkedAssignedExactlyOnce())",
    "right" : "if (var == maybeOuterVar &&\n              !maybeOuterVar.isMarkedAssignedExactlyOnce())",
    "info" : "IfStatement[24498-24640]:IfStatement[24498-24640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24586-24640]:Block[24586-24640]"
  }, {
    "left" : "nonLocalInferredSlot = true;",
    "right" : "nonLocalInferredSlot = true;",
    "info" : "ExpressionStatement[24600-24628]:ExpressionStatement[24600-24628]"
  }, {
    "left" : "if (!unflowable && !nonLocalInferredSlot)",
    "right" : "if (!unflowable && !nonLocalInferredSlot)",
    "info" : "IfStatement[24660-24819]:IfStatement[24660-24819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24702-24819]:Block[24702-24819]"
  }, {
    "left" : "type = var.getType();",
    "right" : "type = var.getType();",
    "info" : "ExpressionStatement[24714-24735]:ExpressionStatement[24714-24735]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[24746-24809]:IfStatement[24746-24809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24764-24809]:Block[24764-24809]"
  }, {
    "left" : "type = unknownType;",
    "right" : "type = unknownType;",
    "info" : "ExpressionStatement[24778-24797]:ExpressionStatement[24778-24797]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[24838-24856]:ExpressionStatement[24838-24856]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[24861-24874]:ReturnStatement[24861-24874]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24927-24934]:Modifier[24927-24934]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[24935-24944]:SimpleType[24935-24944]"
  }, {
    "left" : "traverseArrayLiteral",
    "right" : "traverseArrayLiteral",
    "info" : "SimpleName[24945-24965]:SimpleName[24945-24965]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24966-24972]:SingleVariableDeclaration[24966-24972]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[24974-24989]:SingleVariableDeclaration[24974-24989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24991-25098]:Block[24991-25098]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[24997-25032]:ExpressionStatement[24997-25032]"
  }, {
    "left" : "n.setJSType(getNativeType(ARRAY_TYPE));",
    "right" : "n.setJSType(getNativeType(ARRAY_TYPE));",
    "info" : "ExpressionStatement[25037-25076]:ExpressionStatement[25037-25076]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[25081-25094]:ReturnStatement[25081-25094]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25102-25109]:Modifier[25102-25109]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[25110-25119]:SimpleType[25110-25119]"
  }, {
    "left" : "traverseObjectLiteral",
    "right" : "traverseObjectLiteral",
    "info" : "SimpleName[25120-25141]:SimpleName[25120-25141]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25142-25148]:SingleVariableDeclaration[25142-25148]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[25150-25165]:SingleVariableDeclaration[25150-25165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25167-27135]:Block[25167-26990]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[25173-25201]:VariableDeclarationStatement[25173-25201]"
  }, {
    "left" : "Preconditions.checkNotNull(type);",
    "right" : "Preconditions.checkNotNull(type);",
    "info" : "ExpressionStatement[25206-25239]:ExpressionStatement[25206-25239]"
  }, {
    "left" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
    "right" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
    "info" : "ForStatement[25245-25378]:ForStatement[25245-25378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25318-25378]:Block[25318-25378]"
  }, {
    "left" : "scope = traverse(name.getFirstChild(), scope);",
    "right" : "scope = traverse(name.getFirstChild(), scope);",
    "info" : "ExpressionStatement[25326-25372]:ExpressionStatement[25326-25372]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(type);",
    "right" : "ObjectType objectType = ObjectType.cast(type);",
    "info" : "VariableDeclarationStatement[25553-25599]:VariableDeclarationStatement[25553-25599]"
  }, {
    "left" : "if (objectType == null)",
    "right" : "if (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT))",
    "info" : "IfStatement[25604-25655]:IfStatement[25604-25698]"
  }, {
    "left" : "objectType == null",
    "right" : "objectType == null",
    "info" : "InfixExpression[25608-25626]:InfixExpression[25608-25626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25628-25655]:Block[25671-25698]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[25636-25649]:ReturnStatement[25679-25692]"
  }, {
    "left" : "n.getJSDocInfo() != null",
    "right" : "objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)",
    "info" : "InfixExpression[25683-25707]:InfixExpression[25608-25669]"
  }, {
    "left" : "getJSDocInfo",
    "right" : "getBooleanProp",
    "info" : "SimpleName[25685-25697]:SimpleName[25632-25646]"
  }, {
    "left" : "!=",
    "right" : "||",
    "info" : "INFIX_EXPRESSION_OPERATOR[25700-25702]:INFIX_EXPRESSION_OPERATOR[25627-25629]"
  }, {
    "left" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
    "right" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
    "info" : "VariableDeclarationStatement[25849-25930]:VariableDeclarationStatement[25704-25785]"
  }, {
    "left" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
    "right" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
    "info" : "ForStatement[25935-27113]:ForStatement[25790-26968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26017-27113]:Block[25872-26968]"
  }, {
    "left" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
    "right" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
    "info" : "VariableDeclarationStatement[26025-26080]:VariableDeclarationStatement[25880-25935]"
  }, {
    "left" : "if (memberName != null)",
    "right" : "if (memberName != null)",
    "info" : "IfStatement[26087-27107]:IfStatement[25942-26962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26111-27058]:Block[25966-26913]"
  }, {
    "left" : "JSType rawValueType =  name.getFirstChild().getJSType();",
    "right" : "JSType rawValueType =  name.getFirstChild().getJSType();",
    "info" : "VariableDeclarationStatement[26121-26177]:VariableDeclarationStatement[25976-26032]"
  }, {
    "left" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
    "right" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
    "info" : "VariableDeclarationStatement[26186-26280]:VariableDeclarationStatement[26041-26135]"
  }, {
    "left" : "if (valueType == null)",
    "right" : "if (valueType == null)",
    "info" : "IfStatement[26289-26358]:IfStatement[26144-26213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26312-26358]:Block[26167-26213]"
  }, {
    "left" : "valueType = unknownType;",
    "right" : "valueType = unknownType;",
    "info" : "ExpressionStatement[26324-26348]:ExpressionStatement[26179-26203]"
  }, {
    "left" : "objectType.defineInferredProperty(memberName, valueType, name);",
    "right" : "objectType.defineInferredProperty(memberName, valueType, name);",
    "info" : "ExpressionStatement[26367-26430]:ExpressionStatement[26222-26285]"
  }, {
    "left" : "if (qObjName != null && name.isStringKey())",
    "right" : "if (qObjName != null && name.isStringKey())",
    "info" : "IfStatement[26517-27050]:IfStatement[26372-26905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26561-27050]:Block[26416-26905]"
  }, {
    "left" : "String qKeyName = qObjName + \".\" + memberName;",
    "right" : "String qKeyName = qObjName + \".\" + memberName;",
    "info" : "VariableDeclarationStatement[26573-26619]:VariableDeclarationStatement[26428-26474]"
  }, {
    "left" : "Var var = syntacticScope.getVar(qKeyName);",
    "right" : "Var var = syntacticScope.getVar(qKeyName);",
    "info" : "VariableDeclarationStatement[26630-26672]:VariableDeclarationStatement[26485-26527]"
  }, {
    "left" : "JSType oldType = var == null ? null : var.getType();",
    "right" : "JSType oldType = var == null ? null : var.getType();",
    "info" : "VariableDeclarationStatement[26683-26735]:VariableDeclarationStatement[26538-26590]"
  }, {
    "left" : "if (var != null && var.isTypeInferred())",
    "right" : "if (var != null && var.isTypeInferred())",
    "info" : "IfStatement[26746-26907]:IfStatement[26601-26762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26787-26907]:Block[26642-26762]"
  }, {
    "left" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
    "right" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
    "info" : "ExpressionStatement[26801-26895]:ExpressionStatement[26656-26750]"
  }, {
    "left" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? unknownType : oldType,\n              valueType);",
    "right" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? unknownType : oldType,\n              valueType);",
    "info" : "ExpressionStatement[26919-27040]:ExpressionStatement[26774-26895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27064-27107]:Block[26919-26962]"
  }, {
    "left" : "n.setJSType(unknownType);",
    "right" : "n.setJSType(unknownType);",
    "info" : "ExpressionStatement[27074-27099]:ExpressionStatement[26929-26954]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[27118-27131]:ReturnStatement[26973-26986]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27139-27146]:Modifier[26994-27001]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[27147-27156]:SimpleType[27002-27011]"
  }, {
    "left" : "traverseAdd",
    "right" : "traverseAdd",
    "info" : "SimpleName[27157-27168]:SimpleName[27012-27023]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27169-27175]:SingleVariableDeclaration[27024-27030]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[27177-27192]:SingleVariableDeclaration[27032-27047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27194-28255]:Block[27049-28110]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[27200-27230]:VariableDeclarationStatement[27055-27085]"
  }, {
    "left" : "Node right = left.getNext();",
    "right" : "Node right = left.getNext();",
    "info" : "VariableDeclarationStatement[27235-27263]:VariableDeclarationStatement[27090-27118]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[27268-27303]:ExpressionStatement[27123-27158]"
  }, {
    "left" : "JSType leftType = left.getJSType();",
    "right" : "JSType leftType = left.getJSType();",
    "info" : "VariableDeclarationStatement[27309-27344]:VariableDeclarationStatement[27164-27199]"
  }, {
    "left" : "JSType rightType = right.getJSType();",
    "right" : "JSType rightType = right.getJSType();",
    "info" : "VariableDeclarationStatement[27349-27386]:VariableDeclarationStatement[27204-27241]"
  }, {
    "left" : "JSType type = unknownType;",
    "right" : "JSType type = unknownType;",
    "info" : "VariableDeclarationStatement[27392-27418]:VariableDeclarationStatement[27247-27273]"
  }, {
    "left" : "if (leftType != null && rightType != null)",
    "right" : "if (leftType != null && rightType != null)",
    "info" : "IfStatement[27423-28114]:IfStatement[27278-27969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27466-28114]:Block[27321-27969]"
  }, {
    "left" : "boolean leftIsUnknown = leftType.isUnknownType();",
    "right" : "boolean leftIsUnknown = leftType.isUnknownType();",
    "info" : "VariableDeclarationStatement[27474-27523]:VariableDeclarationStatement[27329-27378]"
  }, {
    "left" : "boolean rightIsUnknown = rightType.isUnknownType();",
    "right" : "boolean rightIsUnknown = rightType.isUnknownType();",
    "info" : "VariableDeclarationStatement[27530-27581]:VariableDeclarationStatement[27385-27436]"
  }, {
    "left" : "if (leftIsUnknown && rightIsUnknown)",
    "right" : "if (leftIsUnknown && rightIsUnknown)",
    "info" : "IfStatement[27588-28108]:IfStatement[27443-27963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27625-27662]:Block[27480-27517]"
  }, {
    "left" : "type = unknownType;",
    "right" : "type = unknownType;",
    "info" : "ExpressionStatement[27635-27654]:ExpressionStatement[27490-27509]"
  }, {
    "left" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
    "right" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
    "info" : "IfStatement[27668-28108]:IfStatement[27523-27963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27775-27827]:Block[27630-27682]"
  }, {
    "left" : "type = getNativeType(STRING_TYPE);",
    "right" : "type = getNativeType(STRING_TYPE);",
    "info" : "ExpressionStatement[27785-27819]:ExpressionStatement[27640-27674]"
  }, {
    "left" : "if (leftIsUnknown || rightIsUnknown)",
    "right" : "if (leftIsUnknown || rightIsUnknown)",
    "info" : "IfStatement[27833-28108]:IfStatement[27688-27963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27870-27907]:Block[27725-27762]"
  }, {
    "left" : "type = unknownType;",
    "right" : "type = unknownType;",
    "info" : "ExpressionStatement[27880-27899]:ExpressionStatement[27735-27754]"
  }, {
    "left" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
    "right" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
    "info" : "IfStatement[27913-28108]:IfStatement[27768-27963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27974-28026]:Block[27829-27881]"
  }, {
    "left" : "type = getNativeType(NUMBER_TYPE);",
    "right" : "type = getNativeType(NUMBER_TYPE);",
    "info" : "ExpressionStatement[27984-28018]:ExpressionStatement[27839-27873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28032-28108]:Block[27887-27963]"
  }, {
    "left" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
    "right" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
    "info" : "ExpressionStatement[28042-28100]:ExpressionStatement[27897-27955]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[28119-28137]:ExpressionStatement[27974-27992]"
  }, {
    "left" : "if (n.isAssignAdd())",
    "right" : "if (n.isAssignAdd())",
    "info" : "IfStatement[28143-28232]:IfStatement[27998-28087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28164-28232]:Block[28019-28087]"
  }, {
    "left" : "updateScopeForTypeChange(scope, left, leftType, type);",
    "right" : "updateScopeForTypeChange(scope, left, leftType, type);",
    "info" : "ExpressionStatement[28172-28226]:ExpressionStatement[28027-28081]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[28238-28251]:ReturnStatement[28093-28106]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28259-28266]:Modifier[28114-28121]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[28267-28274]:PrimitiveType[28122-28129]"
  }, {
    "left" : "isAddedAsNumber",
    "right" : "isAddedAsNumber",
    "info" : "SimpleName[28275-28290]:SimpleName[28130-28145]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[28291-28302]:SingleVariableDeclaration[28146-28157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28304-28456]:Block[28159-28311]"
  }, {
    "left" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
    "right" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
    "info" : "ReturnStatement[28310-28452]:ReturnStatement[28165-28307]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[28460-28467]:Modifier[28315-28322]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[28468-28477]:SimpleType[28323-28332]"
  }, {
    "left" : "traverseHook",
    "right" : "traverseHook",
    "info" : "SimpleName[28478-28490]:SimpleName[28333-28345]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28491-28497]:SingleVariableDeclaration[28346-28352]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[28499-28514]:SingleVariableDeclaration[28354-28369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28516-29606]:Block[28371-29461]"
  }, {
    "left" : "Node condition = n.getFirstChild();",
    "right" : "Node condition = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[28522-28557]:VariableDeclarationStatement[28377-28412]"
  }, {
    "left" : "Node trueNode = condition.getNext();",
    "right" : "Node trueNode = condition.getNext();",
    "info" : "VariableDeclarationStatement[28562-28598]:VariableDeclarationStatement[28417-28453]"
  }, {
    "left" : "Node falseNode = n.getLastChild();",
    "right" : "Node falseNode = n.getLastChild();",
    "info" : "VariableDeclarationStatement[28603-28637]:VariableDeclarationStatement[28458-28492]"
  }, {
    "left" : "scope = traverse(condition, scope);",
    "right" : "scope = traverse(condition, scope);",
    "info" : "ExpressionStatement[28671-28706]:ExpressionStatement[28526-28561]"
  }, {
    "left" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
    "right" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
    "info" : "VariableDeclarationStatement[28786-28913]:VariableDeclarationStatement[28641-28768]"
  }, {
    "left" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
    "right" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
    "info" : "VariableDeclarationStatement[28918-29047]:VariableDeclarationStatement[28773-28902]"
  }, {
    "left" : "traverse(trueNode, trueScope.createChildFlowScope());",
    "right" : "traverse(trueNode, trueScope.createChildFlowScope());",
    "info" : "ExpressionStatement[29102-29155]:ExpressionStatement[28957-29010]"
  }, {
    "left" : "traverse(falseNode, falseScope.createChildFlowScope());",
    "right" : "traverse(falseNode, falseScope.createChildFlowScope());",
    "info" : "ExpressionStatement[29212-29267]:ExpressionStatement[29067-29122]"
  }, {
    "left" : "JSType trueType = trueNode.getJSType();",
    "right" : "JSType trueType = trueNode.getJSType();",
    "info" : "VariableDeclarationStatement[29324-29363]:VariableDeclarationStatement[29179-29218]"
  }, {
    "left" : "JSType falseType = falseNode.getJSType();",
    "right" : "JSType falseType = falseNode.getJSType();",
    "info" : "VariableDeclarationStatement[29368-29409]:VariableDeclarationStatement[29223-29264]"
  }, {
    "left" : "if (trueType != null && falseType != null)",
    "right" : "if (trueType != null && falseType != null)",
    "info" : "IfStatement[29414-29560]:IfStatement[29269-29415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29457-29522]:Block[29312-29377]"
  }, {
    "left" : "n.setJSType(trueType.getLeastSupertype(falseType));",
    "right" : "n.setJSType(trueType.getLeastSupertype(falseType));",
    "info" : "ExpressionStatement[29465-29516]:ExpressionStatement[29320-29371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29528-29560]:Block[29383-29415]"
  }, {
    "left" : "n.setJSType(null);",
    "right" : "n.setJSType(null);",
    "info" : "ExpressionStatement[29536-29554]:ExpressionStatement[29391-29409]"
  }, {
    "left" : "return scope.createChildFlowScope();",
    "right" : "return scope.createChildFlowScope();",
    "info" : "ReturnStatement[29566-29602]:ReturnStatement[29421-29457]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29610-29617]:Modifier[29465-29472]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[29618-29627]:SimpleType[29473-29482]"
  }, {
    "left" : "traverseCall",
    "right" : "traverseCall",
    "info" : "SimpleName[29628-29640]:SimpleName[29483-29495]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29641-29647]:SingleVariableDeclaration[29496-29502]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[29649-29664]:SingleVariableDeclaration[29504-29519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29666-30242]:Block[29521-30097]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[29672-29707]:ExpressionStatement[29527-29562]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[29713-29743]:VariableDeclarationStatement[29568-29598]"
  }, {
    "left" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
    "right" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[29748-29817]:VariableDeclarationStatement[29603-29672]"
  }, {
    "left" : "if (functionType.isFunctionType())",
    "right" : "if (functionType.isFunctionType())",
    "info" : "IfStatement[29822-30168]:IfStatement[29677-30023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29857-30020]:Block[29712-29875]"
  }, {
    "left" : "FunctionType fnType = functionType.toMaybeFunctionType();",
    "right" : "FunctionType fnType = functionType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[29865-29922]:VariableDeclarationStatement[29720-29777]"
  }, {
    "left" : "n.setJSType(fnType.getReturnType());",
    "right" : "n.setJSType(fnType.getReturnType());",
    "info" : "ExpressionStatement[29929-29965]:ExpressionStatement[29784-29820]"
  }, {
    "left" : "backwardsInferenceFromCallSite(n, fnType);",
    "right" : "backwardsInferenceFromCallSite(n, fnType);",
    "info" : "ExpressionStatement[29972-30014]:ExpressionStatement[29827-29869]"
  }, {
    "left" : "if (functionType.isEquivalentTo(\n        getNativeType(CHECKED_UNKNOWN_TYPE)))",
    "right" : "if (functionType.isEquivalentTo(\n        getNativeType(CHECKED_UNKNOWN_TYPE)))",
    "info" : "IfStatement[30026-30168]:IfStatement[29881-30023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30105-30168]:Block[29960-30023]"
  }, {
    "left" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
    "right" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[30113-30162]:ExpressionStatement[29968-30017]"
  }, {
    "left" : "scope = tightenTypesAfterAssertions(scope, n);",
    "right" : "scope = tightenTypesAfterAssertions(scope, n);",
    "info" : "ExpressionStatement[30174-30220]:ExpressionStatement[30029-30075]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[30225-30238]:ReturnStatement[30080-30093]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30246-30253]:Modifier[30101-30108]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[30254-30263]:SimpleType[30109-30118]"
  }, {
    "left" : "tightenTypesAfterAssertions",
    "right" : "tightenTypesAfterAssertions",
    "info" : "SimpleName[30264-30291]:SimpleName[30119-30146]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[30292-30307]:SingleVariableDeclaration[30147-30162]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[30315-30328]:SingleVariableDeclaration[30170-30183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30330-31703]:Block[30185-31558]"
  }, {
    "left" : "Node left = callNode.getFirstChild();",
    "right" : "Node left = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[30336-30373]:VariableDeclarationStatement[30191-30228]"
  }, {
    "left" : "Node firstParam = left.getNext();",
    "right" : "Node firstParam = left.getNext();",
    "info" : "VariableDeclarationStatement[30378-30411]:VariableDeclarationStatement[30233-30266]"
  }, {
    "left" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
    "right" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
    "info" : "VariableDeclarationStatement[30416-30521]:VariableDeclarationStatement[30271-30376]"
  }, {
    "left" : "if (assertionFunctionSpec == null || firstParam == null)",
    "right" : "if (assertionFunctionSpec == null || firstParam == null)",
    "info" : "IfStatement[30526-30610]:IfStatement[30381-30465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30583-30610]:Block[30438-30465]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[30591-30604]:ReturnStatement[30446-30459]"
  }, {
    "left" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
    "right" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
    "info" : "VariableDeclarationStatement[30615-30686]:VariableDeclarationStatement[30470-30541]"
  }, {
    "left" : "if (assertedNode == null)",
    "right" : "if (assertedNode == null)",
    "info" : "IfStatement[30691-30744]:IfStatement[30546-30599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30717-30744]:Block[30572-30599]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[30725-30738]:ReturnStatement[30580-30593]"
  }, {
    "left" : "JSType assertedType = assertionFunctionSpec.getAssertedType(\n        callNode, registry);",
    "right" : "JSType assertedType = assertionFunctionSpec.getAssertedType(\n        callNode, registry);",
    "info" : "VariableDeclarationStatement[30749-30838]:VariableDeclarationStatement[30604-30693]"
  }, {
    "left" : "String assertedNodeName = assertedNode.getQualifiedName();",
    "right" : "String assertedNodeName = assertedNode.getQualifiedName();",
    "info" : "VariableDeclarationStatement[30843-30901]:VariableDeclarationStatement[30698-30756]"
  }, {
    "left" : "JSType narrowed;",
    "right" : "JSType narrowed;",
    "info" : "VariableDeclarationStatement[30907-30923]:VariableDeclarationStatement[30762-30778]"
  }, {
    "left" : "if (assertedType == null)",
    "right" : "if (assertedType == null)",
    "info" : "IfStatement[30996-31646]:IfStatement[30851-31501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31022-31321]:Block[30877-31176]"
  }, {
    "left" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);",
    "right" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n          assertedNode, scope, true);",
    "info" : "ExpressionStatement[31087-31192]:ExpressionStatement[30942-31047]"
  }, {
    "left" : "narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();",
    "right" : "narrowed = getJSType(assertedNode).restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[31249-31315]:ExpressionStatement[31104-31170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31327-31646]:Block[31182-31501]"
  }, {
    "left" : "JSType type = getJSType(assertedNode);",
    "right" : "JSType type = getJSType(assertedNode);",
    "info" : "VariableDeclarationStatement[31410-31448]:VariableDeclarationStatement[31265-31303]"
  }, {
    "left" : "narrowed = type.getGreatestSubtype(assertedType);",
    "right" : "narrowed = type.getGreatestSubtype(assertedType);",
    "info" : "ExpressionStatement[31455-31504]:ExpressionStatement[31310-31359]"
  }, {
    "left" : "if (assertedNodeName != null && type.differsFrom(narrowed))",
    "right" : "if (assertedNodeName != null && type.differsFrom(narrowed))",
    "info" : "IfStatement[31511-31640]:IfStatement[31366-31495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31571-31640]:Block[31426-31495]"
  }, {
    "left" : "scope = narrowScope(scope, assertedNode, narrowed);",
    "right" : "scope = narrowScope(scope, assertedNode, narrowed);",
    "info" : "ExpressionStatement[31581-31632]:ExpressionStatement[31436-31487]"
  }, {
    "left" : "callNode.setJSType(narrowed);",
    "right" : "callNode.setJSType(narrowed);",
    "info" : "ExpressionStatement[31652-31681]:ExpressionStatement[31507-31536]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[31686-31699]:ReturnStatement[31541-31554]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31707-31714]:Modifier[31562-31569]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[31715-31724]:SimpleType[31570-31579]"
  }, {
    "left" : "narrowScope",
    "right" : "narrowScope",
    "info" : "SimpleName[31725-31736]:SimpleName[31580-31591]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[31737-31752]:SingleVariableDeclaration[31592-31607]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[31754-31763]:SingleVariableDeclaration[31609-31618]"
  }, {
    "left" : "JSType narrowed",
    "right" : "JSType narrowed",
    "info" : "SingleVariableDeclaration[31765-31780]:SingleVariableDeclaration[31620-31635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31782-32175]:Block[31637-32030]"
  }, {
    "left" : "if (node.isThis())",
    "right" : "if (node.isThis())",
    "info" : "IfStatement[31788-31913]:IfStatement[31643-31768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31807-31913]:Block[31662-31768]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[31894-31907]:ReturnStatement[31749-31762]"
  }, {
    "left" : "scope = scope.createChildFlowScope();",
    "right" : "scope = scope.createChildFlowScope();",
    "info" : "ExpressionStatement[31919-31956]:ExpressionStatement[31774-31811]"
  }, {
    "left" : "if (node.isGetProp())",
    "right" : "if (node.isGetProp())",
    "info" : "IfStatement[31961-32153]:IfStatement[31816-32008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31983-32091]:Block[31838-31946]"
  }, {
    "left" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
    "right" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
    "info" : "ExpressionStatement[31991-32085]:ExpressionStatement[31846-31940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32097-32153]:Block[31952-32008]"
  }, {
    "left" : "redeclareSimpleVar(scope, node, narrowed);",
    "right" : "redeclareSimpleVar(scope, node, narrowed);",
    "info" : "ExpressionStatement[32105-32147]:ExpressionStatement[31960-32002]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[32158-32171]:ReturnStatement[32013-32026]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33101-33108]:Modifier[32956-32963]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33109-33113]:PrimitiveType[32964-32968]"
  }, {
    "left" : "backwardsInferenceFromCallSite",
    "right" : "backwardsInferenceFromCallSite",
    "info" : "SimpleName[33114-33144]:SimpleName[32969-32999]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33145-33151]:SingleVariableDeclaration[33000-33006]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[33153-33172]:SingleVariableDeclaration[33008-33027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33174-33403]:Block[33029-33258]"
  }, {
    "left" : "boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);",
    "right" : "boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);",
    "info" : "VariableDeclarationStatement[33180-33242]:VariableDeclarationStatement[33035-33097]"
  }, {
    "left" : "if (updatedFnType)",
    "right" : "if (updatedFnType)",
    "info" : "IfStatement[33247-33341]:IfStatement[33102-33196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33266-33341]:Block[33121-33196]"
  }, {
    "left" : "fnType = n.getFirstChild().getJSType().toMaybeFunctionType();",
    "right" : "fnType = n.getFirstChild().getJSType().toMaybeFunctionType();",
    "info" : "ExpressionStatement[33274-33335]:ExpressionStatement[33129-33190]"
  }, {
    "left" : "updateTypeOfParameters(n, fnType);",
    "right" : "updateTypeOfParameters(n, fnType);",
    "info" : "ExpressionStatement[33346-33380]:ExpressionStatement[33201-33235]"
  }, {
    "left" : "updateBind(n);",
    "right" : "updateBind(n);",
    "info" : "ExpressionStatement[33385-33399]:ExpressionStatement[33240-33254]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33574-33581]:Modifier[33429-33436]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33582-33586]:PrimitiveType[33437-33441]"
  }, {
    "left" : "updateBind",
    "right" : "updateBind",
    "info" : "SimpleName[33587-33597]:SimpleName[33442-33452]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33598-33604]:SingleVariableDeclaration[33453-33459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33606-34113]:Block[33461-33968]"
  }, {
    "left" : "CodingConvention.Bind bind =\n        compiler.getCodingConvention().describeFunctionBind(n, true);",
    "right" : "CodingConvention.Bind bind =\n        compiler.getCodingConvention().describeFunctionBind(n, true);",
    "info" : "VariableDeclarationStatement[33612-33710]:VariableDeclarationStatement[33467-33565]"
  }, {
    "left" : "if (bind == null)",
    "right" : "if (bind == null)",
    "info" : "IfStatement[33715-33754]:IfStatement[33570-33609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33733-33754]:Block[33588-33609]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33741-33748]:ReturnStatement[33596-33603]"
  }, {
    "left" : "FunctionType callTargetFn = getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
    "right" : "FunctionType callTargetFn = getJSType(bind.target)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[33760-33873]:VariableDeclarationStatement[33615-33728]"
  }, {
    "left" : "if (callTargetFn == null)",
    "right" : "if (callTargetFn == null)",
    "info" : "IfStatement[33878-33925]:IfStatement[33733-33780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33904-33925]:Block[33759-33780]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33912-33919]:ReturnStatement[33767-33774]"
  }, {
    "left" : "n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the 'this' argument to be included.\n            bind.getBoundParameterCount() + 1));",
    "right" : "n.setJSType(\n        callTargetFn.getBindReturnType(\n            // getBindReturnType expects the 'this' argument to be included.\n            bind.getBoundParameterCount() + 1));",
    "info" : "ExpressionStatement[33931-34109]:ExpressionStatement[33786-33964]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34277-34284]:Modifier[34132-34139]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34285-34289]:PrimitiveType[34140-34144]"
  }, {
    "left" : "updateTypeOfParameters",
    "right" : "updateTypeOfParameters",
    "info" : "SimpleName[34290-34312]:SimpleName[34145-34167]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34313-34319]:SingleVariableDeclaration[34168-34174]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[34321-34340]:SingleVariableDeclaration[34176-34195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34342-35338]:Block[34197-35193]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[34348-34358]:VariableDeclarationStatement[34203-34213]"
  }, {
    "left" : "int childCount = n.getChildCount();",
    "right" : "int childCount = n.getChildCount();",
    "info" : "VariableDeclarationStatement[34363-34398]:VariableDeclarationStatement[34218-34253]"
  }, {
    "left" : "for (Node iParameter : fnType.getParameters())",
    "right" : "for (Node iParameter : fnType.getParameters())",
    "info" : "EnhancedForStatement[34403-35334]:EnhancedForStatement[34258-35189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34450-35334]:Block[34305-35189]"
  }, {
    "left" : "if (i + 1 >= childCount)",
    "right" : "if (i + 1 >= childCount)",
    "info" : "IfStatement[34458-34571]:IfStatement[34313-34426]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34483-34571]:Block[34338-34426]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34556-34563]:ReturnStatement[34411-34418]"
  }, {
    "left" : "JSType iParameterType = getJSType(iParameter);",
    "right" : "JSType iParameterType = getJSType(iParameter);",
    "info" : "VariableDeclarationStatement[34579-34625]:VariableDeclarationStatement[34434-34480]"
  }, {
    "left" : "Node iArgument = n.getChildAtIndex(i + 1);",
    "right" : "Node iArgument = n.getChildAtIndex(i + 1);",
    "info" : "VariableDeclarationStatement[34632-34674]:VariableDeclarationStatement[34487-34529]"
  }, {
    "left" : "JSType iArgumentType = getJSType(iArgument);",
    "right" : "JSType iArgumentType = getJSType(iArgument);",
    "info" : "VariableDeclarationStatement[34681-34725]:VariableDeclarationStatement[34536-34580]"
  }, {
    "left" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
    "right" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
    "info" : "ExpressionStatement[34732-34799]:ExpressionStatement[34587-34654]"
  }, {
    "left" : "JSType restrictedParameter = iParameterType\n          .restrictByNotNullOrUndefined()\n          .toMaybeFunctionType();",
    "right" : "JSType restrictedParameter = iParameterType\n          .restrictByNotNullOrUndefined()\n          .toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[34955-35074]:VariableDeclarationStatement[34810-34929]"
  }, {
    "left" : "if (restrictedParameter != null)",
    "right" : "if (restrictedParameter != null)",
    "info" : "IfStatement[35081-35317]:IfStatement[34936-35172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35114-35317]:Block[34969-35172]"
  }, {
    "left" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
    "right" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
    "info" : "IfStatement[35124-35309]:IfStatement[34979-35164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35246-35309]:Block[35101-35164]"
  }, {
    "left" : "iArgument.setJSType(restrictedParameter);",
    "right" : "iArgument.setJSType(restrictedParameter);",
    "info" : "ExpressionStatement[35258-35299]:ExpressionStatement[35113-35154]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[35324-35328]:ExpressionStatement[35179-35183]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35342-35349]:Modifier[35197-35204]"
  }, {
    "left" : "Map<TemplateType, JSType>",
    "right" : "Map<TemplateType, JSType>",
    "info" : "ParameterizedType[35350-35375]:ParameterizedType[35205-35230]"
  }, {
    "left" : "inferTemplateTypesFromParameters",
    "right" : "inferTemplateTypesFromParameters",
    "info" : "SimpleName[35376-35408]:SimpleName[35231-35263]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[35416-35435]:SingleVariableDeclaration[35271-35290]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[35437-35446]:SingleVariableDeclaration[35292-35301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35448-36108]:Block[35303-35963]"
  }, {
    "left" : "if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty())",
    "right" : "if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty())",
    "info" : "IfStatement[35454-35559]:IfStatement[35309-35414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35515-35559]:Block[35370-35414]"
  }, {
    "left" : "return Collections.emptyMap();",
    "right" : "return Collections.emptyMap();",
    "info" : "ReturnStatement[35523-35553]:ReturnStatement[35378-35408]"
  }, {
    "left" : "Map<TemplateType, JSType> resolvedTypes = Maps.newIdentityHashMap();",
    "right" : "Map<TemplateType, JSType> resolvedTypes = Maps.newIdentityHashMap();",
    "info" : "VariableDeclarationStatement[35565-35633]:VariableDeclarationStatement[35420-35488]"
  }, {
    "left" : "Node callTarget = call.getFirstChild();",
    "right" : "Node callTarget = call.getFirstChild();",
    "info" : "VariableDeclarationStatement[35639-35678]:VariableDeclarationStatement[35494-35533]"
  }, {
    "left" : "if (NodeUtil.isGet(callTarget))",
    "right" : "if (NodeUtil.isGet(callTarget))",
    "info" : "IfStatement[35683-35886]:IfStatement[35538-35741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35715-35886]:Block[35570-35741]"
  }, {
    "left" : "Node obj = callTarget.getFirstChild();",
    "right" : "Node obj = callTarget.getFirstChild();",
    "info" : "VariableDeclarationStatement[35723-35761]:VariableDeclarationStatement[35578-35616]"
  }, {
    "left" : "maybeResolveTemplatedType(\n          fnType.getTypeOfThis(),\n          getJSType(obj),\n          resolvedTypes);",
    "right" : "maybeResolveTemplatedType(\n          fnType.getTypeOfThis(),\n          getJSType(obj),\n          resolvedTypes);",
    "info" : "ExpressionStatement[35768-35880]:ExpressionStatement[35623-35735]"
  }, {
    "left" : "if (call.hasMoreThanOneChild())",
    "right" : "if (call.hasMoreThanOneChild())",
    "info" : "IfStatement[35892-36078]:IfStatement[35747-35933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35924-36078]:Block[35779-35933]"
  }, {
    "left" : "maybeResolveTemplateTypeFromNodes(\n          fnType.getParameters(),\n          call.getChildAtIndex(1).siblings(),\n          resolvedTypes);",
    "right" : "maybeResolveTemplateTypeFromNodes(\n          fnType.getParameters(),\n          call.getChildAtIndex(1).siblings(),\n          resolvedTypes);",
    "info" : "ExpressionStatement[35932-36072]:ExpressionStatement[35787-35927]"
  }, {
    "left" : "return resolvedTypes;",
    "right" : "return resolvedTypes;",
    "info" : "ReturnStatement[36083-36104]:ReturnStatement[35938-35959]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36112-36119]:Modifier[35967-35974]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36120-36124]:PrimitiveType[35975-35979]"
  }, {
    "left" : "maybeResolveTemplatedType",
    "right" : "maybeResolveTemplatedType",
    "info" : "SimpleName[36125-36150]:SimpleName[35980-36005]"
  }, {
    "left" : "JSType paramType",
    "right" : "JSType paramType",
    "info" : "SingleVariableDeclaration[36158-36174]:SingleVariableDeclaration[36013-36029]"
  }, {
    "left" : "JSType argType",
    "right" : "JSType argType",
    "info" : "SingleVariableDeclaration[36182-36196]:SingleVariableDeclaration[36037-36051]"
  }, {
    "left" : "Map<TemplateType, JSType> resolvedTypes",
    "right" : "Map<TemplateType, JSType> resolvedTypes",
    "info" : "SingleVariableDeclaration[36204-36243]:SingleVariableDeclaration[36059-36098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36245-38557]:Block[36100-38412]"
  }, {
    "left" : "if (paramType.isTemplateType())",
    "right" : "if (paramType.isTemplateType())",
    "info" : "IfStatement[36251-38553]:IfStatement[36106-38408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36283-36406]:Block[36138-36261]"
  }, {
    "left" : "resolvedTemplateType(\n          resolvedTypes, paramType.toMaybeTemplateType(), argType);",
    "right" : "resolvedTemplateType(\n          resolvedTypes, paramType.toMaybeTemplateType(), argType);",
    "info" : "ExpressionStatement[36311-36400]:ExpressionStatement[36166-36255]"
  }, {
    "left" : "if (paramType.isUnionType())",
    "right" : "if (paramType.isUnionType())",
    "info" : "IfStatement[36412-38553]:IfStatement[36267-38408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36441-36708]:Block[36296-36563]"
  }, {
    "left" : "UnionType unionType = paramType.toMaybeUnionType();",
    "right" : "UnionType unionType = paramType.toMaybeUnionType();",
    "info" : "VariableDeclarationStatement[36512-36563]:VariableDeclarationStatement[36367-36418]"
  }, {
    "left" : "for (JSType alernative : unionType.getAlternates())",
    "right" : "for (JSType alernative : unionType.getAlternates())",
    "info" : "EnhancedForStatement[36570-36702]:EnhancedForStatement[36425-36557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36622-36702]:Block[36477-36557]"
  }, {
    "left" : "maybeResolveTemplatedType(alernative, argType, resolvedTypes);",
    "right" : "maybeResolveTemplatedType(alernative, argType, resolvedTypes);",
    "info" : "ExpressionStatement[36632-36694]:ExpressionStatement[36487-36549]"
  }, {
    "left" : "if (paramType.isFunctionType())",
    "right" : "if (paramType.isFunctionType())",
    "info" : "IfStatement[36714-38553]:IfStatement[36569-38408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36746-37664]:Block[36601-37519]"
  }, {
    "left" : "FunctionType paramFunctionType = paramType.toMaybeFunctionType();",
    "right" : "FunctionType paramFunctionType = paramType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[36754-36819]:VariableDeclarationStatement[36609-36674]"
  }, {
    "left" : "FunctionType argFunctionType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion()\n          .toMaybeFunctionType();",
    "right" : "FunctionType argFunctionType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion()\n          .toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[36826-36967]:VariableDeclarationStatement[36681-36822]"
  }, {
    "left" : "if (argFunctionType != null && argFunctionType.isSubtype(paramType))",
    "right" : "if (argFunctionType != null && argFunctionType.isSubtype(paramType))",
    "info" : "IfStatement[36974-37658]:IfStatement[36829-37513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37043-37658]:Block[36898-37513]"
  }, {
    "left" : "maybeResolveTemplatedType(\n            paramFunctionType.getTypeOfThis(),\n            argFunctionType.getTypeOfThis(), resolvedTypes);",
    "right" : "maybeResolveTemplatedType(\n            paramFunctionType.getTypeOfThis(),\n            argFunctionType.getTypeOfThis(), resolvedTypes);",
    "info" : "ExpressionStatement[37108-37242]:ExpressionStatement[36963-37097]"
  }, {
    "left" : "maybeResolveTemplatedType(\n            paramFunctionType.getReturnType(),\n            argFunctionType.getReturnType(), resolvedTypes);",
    "right" : "maybeResolveTemplatedType(\n            paramFunctionType.getReturnType(),\n            argFunctionType.getReturnType(), resolvedTypes);",
    "info" : "ExpressionStatement[37306-37440]:ExpressionStatement[37161-37295]"
  }, {
    "left" : "maybeResolveTemplateTypeFromNodes(\n            paramFunctionType.getParameters(),\n            argFunctionType.getParameters(), resolvedTypes);",
    "right" : "maybeResolveTemplateTypeFromNodes(\n            paramFunctionType.getParameters(),\n            argFunctionType.getParameters(), resolvedTypes);",
    "info" : "ExpressionStatement[37508-37650]:ExpressionStatement[37363-37505]"
  }, {
    "left" : "if (paramType.isTemplatizedType())",
    "right" : "if (paramType.isTemplatizedType())",
    "info" : "IfStatement[37670-38553]:IfStatement[37525-38408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37705-38553]:Block[37560-38408]"
  }, {
    "left" : "ObjectType referencedParamType = paramType\n          .toMaybeTemplatizedType()\n          .getReferencedType();",
    "right" : "ObjectType referencedParamType = paramType\n          .toMaybeTemplatizedType()\n          .getReferencedType();",
    "info" : "VariableDeclarationStatement[37741-37851]:VariableDeclarationStatement[37596-37706]"
  }, {
    "left" : "JSType argObjectType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion();",
    "right" : "JSType argObjectType = argType\n          .restrictByNotNullOrUndefined()\n          .collapseUnion();",
    "info" : "VariableDeclarationStatement[37858-37958]:VariableDeclarationStatement[37713-37813]"
  }, {
    "left" : "if (argObjectType.isSubtype(referencedParamType))",
    "right" : "if (argObjectType.isSubtype(referencedParamType))",
    "info" : "IfStatement[37966-38547]:IfStatement[37821-38402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38016-38547]:Block[37871-38402]"
  }, {
    "left" : "TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();",
    "right" : "TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();",
    "info" : "VariableDeclarationStatement[38165-38227]:VariableDeclarationStatement[38020-38082]"
  }, {
    "left" : "TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();",
    "right" : "TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();",
    "info" : "VariableDeclarationStatement[38236-38300]:VariableDeclarationStatement[38091-38155]"
  }, {
    "left" : "for (TemplateType key : paramTypeMap.getTemplateKeys())",
    "right" : "for (TemplateType key : paramTypeMap.getTemplateKeys())",
    "info" : "EnhancedForStatement[38309-38539]:EnhancedForStatement[38164-38394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38365-38539]:Block[38220-38394]"
  }, {
    "left" : "maybeResolveTemplatedType(\n              paramTypeMap.getTemplateType(key),\n              argTypeMap.getTemplateType(key),\n              resolvedTypes);",
    "right" : "maybeResolveTemplatedType(\n              paramTypeMap.getTemplateType(key),\n              argTypeMap.getTemplateType(key),\n              resolvedTypes);",
    "info" : "ExpressionStatement[38377-38529]:ExpressionStatement[38232-38384]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38561-38568]:Modifier[38416-38423]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38569-38573]:PrimitiveType[38424-38428]"
  }, {
    "left" : "maybeResolveTemplateTypeFromNodes",
    "right" : "maybeResolveTemplateTypeFromNodes",
    "info" : "SimpleName[38574-38607]:SimpleName[38429-38462]"
  }, {
    "left" : "Iterable<Node> declParams",
    "right" : "Iterable<Node> declParams",
    "info" : "SingleVariableDeclaration[38615-38640]:SingleVariableDeclaration[38470-38495]"
  }, {
    "left" : "Iterable<Node> callParams",
    "right" : "Iterable<Node> callParams",
    "info" : "SingleVariableDeclaration[38648-38673]:SingleVariableDeclaration[38503-38528]"
  }, {
    "left" : "Map<TemplateType, JSType> resolvedTypes",
    "right" : "Map<TemplateType, JSType> resolvedTypes",
    "info" : "SingleVariableDeclaration[38681-38720]:SingleVariableDeclaration[38536-38575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38722-38836]:Block[38577-38691]"
  }, {
    "left" : "maybeResolveTemplateTypeFromNodes(\n        declParams.iterator(), callParams.iterator(), resolvedTypes);",
    "right" : "maybeResolveTemplateTypeFromNodes(\n        declParams.iterator(), callParams.iterator(), resolvedTypes);",
    "info" : "ExpressionStatement[38728-38832]:ExpressionStatement[38583-38687]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38840-38847]:Modifier[38695-38702]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38848-38852]:PrimitiveType[38703-38707]"
  }, {
    "left" : "maybeResolveTemplateTypeFromNodes",
    "right" : "maybeResolveTemplateTypeFromNodes",
    "info" : "SimpleName[38853-38886]:SimpleName[38708-38741]"
  }, {
    "left" : "Iterator<Node> declParams",
    "right" : "Iterator<Node> declParams",
    "info" : "SingleVariableDeclaration[38894-38919]:SingleVariableDeclaration[38749-38774]"
  }, {
    "left" : "Iterator<Node> callParams",
    "right" : "Iterator<Node> callParams",
    "info" : "SingleVariableDeclaration[38927-38952]:SingleVariableDeclaration[38782-38807]"
  }, {
    "left" : "Map<TemplateType, JSType> resolvedTypes",
    "right" : "Map<TemplateType, JSType> resolvedTypes",
    "info" : "SingleVariableDeclaration[38960-38999]:SingleVariableDeclaration[38815-38854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39001-39483]:Block[38856-39338]"
  }, {
    "left" : "while (declParams.hasNext() && callParams.hasNext())",
    "right" : "while (declParams.hasNext() && callParams.hasNext())",
    "info" : "WhileStatement[39007-39479]:WhileStatement[38862-39334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39060-39479]:Block[38915-39334]"
  }, {
    "left" : "Node declParam = declParams.next();",
    "right" : "Node declParam = declParams.next();",
    "info" : "VariableDeclarationStatement[39068-39103]:VariableDeclarationStatement[38923-38958]"
  }, {
    "left" : "maybeResolveTemplatedType(\n          getJSType(declParam),\n          getJSType(callParams.next()),\n          resolvedTypes);",
    "right" : "maybeResolveTemplatedType(\n          getJSType(declParam),\n          getJSType(callParams.next()),\n          resolvedTypes);",
    "info" : "ExpressionStatement[39110-39234]:ExpressionStatement[38965-39089]"
  }, {
    "left" : "if (declParam.isVarArgs())",
    "right" : "if (declParam.isVarArgs())",
    "info" : "IfStatement[39241-39473]:IfStatement[39096-39328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39268-39473]:Block[39123-39328]"
  }, {
    "left" : "while (callParams.hasNext())",
    "right" : "while (callParams.hasNext())",
    "info" : "WhileStatement[39278-39465]:WhileStatement[39133-39320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39307-39465]:Block[39162-39320]"
  }, {
    "left" : "maybeResolveTemplatedType(\n              getJSType(declParam),\n              getJSType(callParams.next()),\n              resolvedTypes);",
    "right" : "maybeResolveTemplatedType(\n              getJSType(declParam),\n              getJSType(callParams.next()),\n              resolvedTypes);",
    "info" : "ExpressionStatement[39319-39455]:ExpressionStatement[39174-39310]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39487-39494]:Modifier[39342-39349]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39495-39499]:PrimitiveType[39350-39354]"
  }, {
    "left" : "resolvedTemplateType",
    "right" : "resolvedTemplateType",
    "info" : "SimpleName[39500-39520]:SimpleName[39355-39375]"
  }, {
    "left" : "Map<TemplateType, JSType> map",
    "right" : "Map<TemplateType, JSType> map",
    "info" : "SingleVariableDeclaration[39528-39557]:SingleVariableDeclaration[39383-39412]"
  }, {
    "left" : "TemplateType template",
    "right" : "TemplateType template",
    "info" : "SingleVariableDeclaration[39559-39580]:SingleVariableDeclaration[39414-39435]"
  }, {
    "left" : "JSType resolved",
    "right" : "JSType resolved",
    "info" : "SingleVariableDeclaration[39582-39597]:SingleVariableDeclaration[39437-39452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39599-39871]:Block[39454-39726]"
  }, {
    "left" : "JSType previous = map.get(template);",
    "right" : "JSType previous = map.get(template);",
    "info" : "VariableDeclarationStatement[39605-39641]:VariableDeclarationStatement[39460-39496]"
  }, {
    "left" : "if (!resolved.isUnknownType())",
    "right" : "if (!resolved.isUnknownType())",
    "info" : "IfStatement[39646-39867]:IfStatement[39501-39722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39677-39867]:Block[39532-39722]"
  }, {
    "left" : "if (previous == null)",
    "right" : "if (previous == null)",
    "info" : "IfStatement[39685-39861]:IfStatement[39540-39716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39707-39753]:Block[39562-39608]"
  }, {
    "left" : "map.put(template, resolved);",
    "right" : "map.put(template, resolved);",
    "info" : "ExpressionStatement[39717-39745]:ExpressionStatement[39572-39600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39759-39861]:Block[39614-39716]"
  }, {
    "left" : "JSType join = previous.getLeastSupertype(resolved);",
    "right" : "JSType join = previous.getLeastSupertype(resolved);",
    "info" : "VariableDeclarationStatement[39769-39820]:VariableDeclarationStatement[39624-39675]"
  }, {
    "left" : "map.put(template, join);",
    "right" : "map.put(template, join);",
    "info" : "ExpressionStatement[39829-39853]:ExpressionStatement[39684-39708]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39875-39882]:Modifier[39730-39737]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39883-39889]:Modifier[39738-39744]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[39890-39895]:TYPE_DECLARATION_KIND[39745-39750]"
  }, {
    "left" : "TemplateTypeReplacer",
    "right" : "TemplateTypeReplacer",
    "info" : "SimpleName[40086-40106]:SimpleName[39941-39961]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[40116-40139]:SingleVariableDeclaration[39971-39994]"
  }, {
    "left" : "Map<TemplateType, JSType> replacements",
    "right" : "Map<TemplateType, JSType> replacements",
    "info" : "SingleVariableDeclaration[40141-40179]:SingleVariableDeclaration[39996-40034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40181-40283]:Block[40036-40138]"
  }, {
    "left" : "super(registry);",
    "right" : "super(registry);",
    "info" : "SuperConstructorInvocation[40189-40205]:SuperConstructorInvocation[40044-40060]"
  }, {
    "left" : "this.registry = registry;",
    "right" : "this.registry = registry;",
    "info" : "ExpressionStatement[40212-40237]:ExpressionStatement[40067-40092]"
  }, {
    "left" : "this.replacements = replacements;",
    "right" : "this.replacements = replacements;",
    "info" : "ExpressionStatement[40244-40277]:ExpressionStatement[40099-40132]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[40289-40298]:MarkerAnnotation[40144-40153]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40303-40309]:Modifier[40158-40164]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[40310-40316]:SimpleType[40165-40171]"
  }, {
    "left" : "caseTemplateType",
    "right" : "caseTemplateType",
    "info" : "SimpleName[40317-40333]:SimpleName[40172-40188]"
  }, {
    "left" : "TemplateType type",
    "right" : "TemplateType type",
    "info" : "SingleVariableDeclaration[40334-40351]:SingleVariableDeclaration[40189-40206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40353-40534]:Block[40208-40389]"
  }, {
    "left" : "madeChanges = true;",
    "right" : "madeChanges = true;",
    "info" : "ExpressionStatement[40361-40380]:ExpressionStatement[40216-40235]"
  }, {
    "left" : "JSType replacement = replacements.get(type);",
    "right" : "JSType replacement = replacements.get(type);",
    "info" : "VariableDeclarationStatement[40387-40431]:VariableDeclarationStatement[40242-40286]"
  }, {
    "left" : "return replacement != null ?\n          replacement : registry.getNativeType(UNKNOWN_TYPE);",
    "right" : "return replacement != null ?\n          replacement : registry.getNativeType(UNKNOWN_TYPE);",
    "info" : "ReturnStatement[40438-40528]:ReturnStatement[40293-40383]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40733-40740]:Modifier[40588-40595]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[40741-40748]:PrimitiveType[40596-40603]"
  }, {
    "left" : "inferTemplatedTypesForCall",
    "right" : "inferTemplatedTypesForCall",
    "info" : "SimpleName[40749-40775]:SimpleName[40604-40630]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40783-40789]:SingleVariableDeclaration[40638-40644]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[40791-40810]:SingleVariableDeclaration[40646-40665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40812-41559]:Block[40667-41414]"
  }, {
    "left" : "if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty())",
    "right" : "if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty())",
    "info" : "IfStatement[40818-40906]:IfStatement[40673-40761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40879-40906]:Block[40734-40761]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[40887-40900]:ReturnStatement[40742-40755]"
  }, {
    "left" : "Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(\n        fnType, n);",
    "right" : "Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(\n        fnType, n);",
    "info" : "VariableDeclarationStatement[40951-41041]:VariableDeclarationStatement[40806-40896]"
  }, {
    "left" : "TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);",
    "right" : "TemplateTypeReplacer replacer = new TemplateTypeReplacer(\n        registry, inferred);",
    "info" : "VariableDeclarationStatement[41152-41238]:VariableDeclarationStatement[41007-41093]"
  }, {
    "left" : "Node callTarget = n.getFirstChild();",
    "right" : "Node callTarget = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[41243-41279]:VariableDeclarationStatement[41098-41134]"
  }, {
    "left" : "FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();",
    "right" : "FunctionType replacementFnType = fnType.visit(replacer)\n        .toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[41285-41372]:VariableDeclarationStatement[41140-41227]"
  }, {
    "left" : "Preconditions.checkNotNull(replacementFnType);",
    "right" : "Preconditions.checkNotNull(replacementFnType);",
    "info" : "ExpressionStatement[41377-41423]:ExpressionStatement[41232-41278]"
  }, {
    "left" : "callTarget.setJSType(replacementFnType);",
    "right" : "callTarget.setJSType(replacementFnType);",
    "info" : "ExpressionStatement[41429-41469]:ExpressionStatement[41284-41324]"
  }, {
    "left" : "n.setJSType(replacementFnType.getReturnType());",
    "right" : "n.setJSType(replacementFnType.getReturnType());",
    "info" : "ExpressionStatement[41474-41521]:ExpressionStatement[41329-41376]"
  }, {
    "left" : "return replacer.madeChanges;",
    "right" : "return replacer.madeChanges;",
    "info" : "ReturnStatement[41527-41555]:ReturnStatement[41382-41410]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41563-41570]:Modifier[41418-41425]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[41571-41580]:SimpleType[41426-41435]"
  }, {
    "left" : "traverseNew",
    "right" : "traverseNew",
    "info" : "SimpleName[41581-41592]:SimpleName[41436-41447]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41593-41599]:SingleVariableDeclaration[41448-41454]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[41601-41616]:SingleVariableDeclaration[41456-41471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41618-43060]:Block[41473-42915]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[41624-41659]:ExpressionStatement[41479-41514]"
  }, {
    "left" : "Node constructor = n.getFirstChild();",
    "right" : "Node constructor = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[41665-41702]:VariableDeclarationStatement[41520-41557]"
  }, {
    "left" : "JSType constructorType = constructor.getJSType();",
    "right" : "JSType constructorType = constructor.getJSType();",
    "info" : "VariableDeclarationStatement[41707-41756]:VariableDeclarationStatement[41562-41611]"
  }, {
    "left" : "JSType type = null;",
    "right" : "JSType type = null;",
    "info" : "VariableDeclarationStatement[41761-41780]:VariableDeclarationStatement[41616-41635]"
  }, {
    "left" : "if (constructorType != null)",
    "right" : "if (constructorType != null)",
    "info" : "IfStatement[41785-43015]:IfStatement[41640-42870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41814-43015]:Block[41669-42870]"
  }, {
    "left" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
    "right" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[41822-41887]:ExpressionStatement[41677-41742]"
  }, {
    "left" : "if (constructorType.isUnknownType())",
    "right" : "if (constructorType.isUnknownType())",
    "info" : "IfStatement[41894-43009]:IfStatement[41749-42864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41931-41968]:Block[41786-41823]"
  }, {
    "left" : "type = unknownType;",
    "right" : "type = unknownType;",
    "info" : "ExpressionStatement[41941-41960]:ExpressionStatement[41796-41815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41974-43009]:Block[41829-42864]"
  }, {
    "left" : "FunctionType ct = constructorType.toMaybeFunctionType();",
    "right" : "FunctionType ct = constructorType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[41984-42040]:VariableDeclarationStatement[41839-41895]"
  }, {
    "left" : "if (ct == null && constructorType instanceof FunctionType)",
    "right" : "if (ct == null && constructorType instanceof FunctionType)",
    "info" : "IfStatement[42049-42394]:IfStatement[41904-42249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42108-42394]:Block[41963-42249]"
  }, {
    "left" : "ct = (FunctionType) constructorType;",
    "right" : "ct = (FunctionType) constructorType;",
    "info" : "ExpressionStatement[42348-42384]:ExpressionStatement[42203-42239]"
  }, {
    "left" : "if (ct != null && ct.isConstructor())",
    "right" : "if (ct != null && ct.isConstructor())",
    "info" : "IfStatement[42403-43001]:IfStatement[42258-42856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42441-43001]:Block[42296-42856]"
  }, {
    "left" : "backwardsInferenceFromCallSite(n, ct);",
    "right" : "backwardsInferenceFromCallSite(n, ct);",
    "info" : "ExpressionStatement[42453-42491]:ExpressionStatement[42308-42346]"
  }, {
    "left" : "ObjectType instanceType = ct.getInstanceType();",
    "right" : "ObjectType instanceType = ct.getInstanceType();",
    "info" : "VariableDeclarationStatement[42652-42699]:VariableDeclarationStatement[42507-42554]"
  }, {
    "left" : "Map<TemplateType, JSType> inferredTypes =\n              inferTemplateTypesFromParameters(ct, n);",
    "right" : "Map<TemplateType, JSType> inferredTypes =\n              inferTemplateTypesFromParameters(ct, n);",
    "info" : "VariableDeclarationStatement[42710-42806]:VariableDeclarationStatement[42565-42661]"
  }, {
    "left" : "if (inferredTypes.isEmpty())",
    "right" : "if (inferredTypes.isEmpty())",
    "info" : "IfStatement[42817-42991]:IfStatement[42672-42846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42846-42892]:Block[42701-42747]"
  }, {
    "left" : "type = instanceType;",
    "right" : "type = instanceType;",
    "info" : "ExpressionStatement[42860-42880]:ExpressionStatement[42715-42735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42898-42991]:Block[42753-42846]"
  }, {
    "left" : "type = registry.createTemplatizedType(instanceType, inferredTypes);",
    "right" : "type = registry.createTemplatizedType(instanceType, inferredTypes);",
    "info" : "ExpressionStatement[42912-42979]:ExpressionStatement[42767-42834]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[43020-43038]:ExpressionStatement[42875-42893]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[43043-43056]:ReturnStatement[42898-42911]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43064-43071]:Modifier[42919-42926]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[43072-43090]:SimpleType[42927-42945]"
  }, {
    "left" : "traverseAnd",
    "right" : "traverseAnd",
    "info" : "SimpleName[43091-43102]:SimpleName[42946-42957]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43103-43109]:SingleVariableDeclaration[42958-42964]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[43111-43126]:SingleVariableDeclaration[42966-42981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43128-43190]:Block[42983-43045]"
  }, {
    "left" : "return traverseShortCircuitingBinOp(n, scope, true);",
    "right" : "return traverseShortCircuitingBinOp(n, scope, true);",
    "info" : "ReturnStatement[43134-43186]:ReturnStatement[42989-43041]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43194-43201]:Modifier[43049-43056]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[43202-43211]:SimpleType[43057-43066]"
  }, {
    "left" : "traverseChildren",
    "right" : "traverseChildren",
    "info" : "SimpleName[43212-43228]:SimpleName[43067-43083]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43229-43235]:SingleVariableDeclaration[43084-43090]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[43237-43252]:SingleVariableDeclaration[43092-43107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43254-43389]:Block[43109-43244]"
  }, {
    "left" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
    "right" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
    "info" : "ForStatement[43260-43367]:ForStatement[43115-43222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43325-43367]:Block[43180-43222]"
  }, {
    "left" : "scope = traverse(el, scope);",
    "right" : "scope = traverse(el, scope);",
    "info" : "ExpressionStatement[43333-43361]:ExpressionStatement[43188-43216]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[43372-43385]:ReturnStatement[43227-43240]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43393-43400]:Modifier[43248-43255]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[43401-43410]:SimpleType[43256-43265]"
  }, {
    "left" : "traverseGetElem",
    "right" : "traverseGetElem",
    "info" : "SimpleName[43411-43426]:SimpleName[43266-43281]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43427-43433]:SingleVariableDeclaration[43282-43288]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[43435-43450]:SingleVariableDeclaration[43290-43305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43452-43839]:Block[43307-43694]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[43458-43493]:ExpressionStatement[43313-43348]"
  }, {
    "left" : "JSType type = getJSType(n.getFirstChild()).restrictByNotNullOrUndefined();",
    "right" : "JSType type = getJSType(n.getFirstChild()).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[43498-43572]:VariableDeclarationStatement[43353-43427]"
  }, {
    "left" : "TemplateTypeMap typeMap = type.getTemplateTypeMap();",
    "right" : "TemplateTypeMap typeMap = type.getTemplateTypeMap();",
    "info" : "VariableDeclarationStatement[43577-43629]:VariableDeclarationStatement[43432-43484]"
  }, {
    "left" : "if (typeMap.hasTemplateType(registry.getObjectElementKey()))",
    "right" : "if (typeMap.hasTemplateType(registry.getObjectElementKey()))",
    "info" : "IfStatement[43634-43778]:IfStatement[43489-43633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43695-43778]:Block[43550-43633]"
  }, {
    "left" : "n.setJSType(typeMap.getTemplateType(registry.getObjectElementKey()));",
    "right" : "n.setJSType(typeMap.getTemplateType(registry.getObjectElementKey()));",
    "info" : "ExpressionStatement[43703-43772]:ExpressionStatement[43558-43627]"
  }, {
    "left" : "return dereferencePointer(n.getFirstChild(), scope);",
    "right" : "return dereferencePointer(n.getFirstChild(), scope);",
    "info" : "ReturnStatement[43783-43835]:ReturnStatement[43638-43690]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43843-43850]:Modifier[43698-43705]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[43851-43860]:SimpleType[43706-43715]"
  }, {
    "left" : "traverseGetProp",
    "right" : "traverseGetProp",
    "info" : "SimpleName[43861-43876]:SimpleName[43716-43731]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43877-43883]:SingleVariableDeclaration[43732-43738]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[43885-43900]:SingleVariableDeclaration[43740-43755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43902-44190]:Block[43757-44045]"
  }, {
    "left" : "Node objNode = n.getFirstChild();",
    "right" : "Node objNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[43908-43941]:VariableDeclarationStatement[43763-43796]"
  }, {
    "left" : "Node property = n.getLastChild();",
    "right" : "Node property = n.getLastChild();",
    "info" : "VariableDeclarationStatement[43946-43979]:VariableDeclarationStatement[43801-43834]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[43984-44019]:ExpressionStatement[43839-43874]"
  }, {
    "left" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
    "right" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
    "info" : "ExpressionStatement[44025-44129]:ExpressionStatement[43880-43984]"
  }, {
    "left" : "return dereferencePointer(n.getFirstChild(), scope);",
    "right" : "return dereferencePointer(n.getFirstChild(), scope);",
    "info" : "ReturnStatement[44134-44186]:ReturnStatement[43989-44041]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44724-44731]:Modifier[44579-44586]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44732-44736]:PrimitiveType[44587-44591]"
  }, {
    "left" : "inferPropertyTypesToMatchConstraint",
    "right" : "inferPropertyTypesToMatchConstraint",
    "info" : "SimpleName[44737-44772]:SimpleName[44592-44627]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[44780-44791]:SingleVariableDeclaration[44635-44646]"
  }, {
    "left" : "JSType constraint",
    "right" : "JSType constraint",
    "info" : "SingleVariableDeclaration[44793-44810]:SingleVariableDeclaration[44648-44665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44812-44922]:Block[44667-44777]"
  }, {
    "left" : "if (type == null || constraint == null)",
    "right" : "if (type == null || constraint == null)",
    "info" : "IfStatement[44818-44879]:IfStatement[44673-44734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44858-44879]:Block[44713-44734]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[44866-44873]:ReturnStatement[44721-44728]"
  }, {
    "left" : "type.matchConstraint(constraint);",
    "right" : "type.matchConstraint(constraint);",
    "info" : "ExpressionStatement[44885-44918]:ExpressionStatement[44740-44773]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45028-45035]:Modifier[44883-44890]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[45036-45045]:SimpleType[44891-44900]"
  }, {
    "left" : "dereferencePointer",
    "right" : "dereferencePointer",
    "info" : "SimpleName[45046-45064]:SimpleName[44901-44919]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45065-45071]:SingleVariableDeclaration[44920-44926]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[45073-45088]:SingleVariableDeclaration[44928-44943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45090-45332]:Block[44945-45187]"
  }, {
    "left" : "if (n.isQualifiedName())",
    "right" : "if (n.isQualifiedName())",
    "info" : "IfStatement[45096-45310]:IfStatement[44951-45165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45121-45310]:Block[44976-45165]"
  }, {
    "left" : "JSType type = getJSType(n);",
    "right" : "JSType type = getJSType(n);",
    "info" : "VariableDeclarationStatement[45129-45156]:VariableDeclarationStatement[44984-45011]"
  }, {
    "left" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
    "right" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[45163-45217]:VariableDeclarationStatement[45018-45072]"
  }, {
    "left" : "if (type != narrowed)",
    "right" : "if (type != narrowed)",
    "info" : "IfStatement[45224-45304]:IfStatement[45079-45159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45246-45304]:Block[45101-45159]"
  }, {
    "left" : "scope = narrowScope(scope, n, narrowed);",
    "right" : "scope = narrowScope(scope, n, narrowed);",
    "info" : "ExpressionStatement[45256-45296]:ExpressionStatement[45111-45151]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[45315-45328]:ReturnStatement[45170-45183]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45336-45343]:Modifier[45191-45198]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[45344-45350]:SimpleType[45199-45205]"
  }, {
    "left" : "getPropertyType",
    "right" : "getPropertyType",
    "info" : "SimpleName[45351-45366]:SimpleName[45206-45221]"
  }, {
    "left" : "JSType objType",
    "right" : "JSType objType",
    "info" : "SingleVariableDeclaration[45367-45381]:SingleVariableDeclaration[45222-45236]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[45383-45398]:SingleVariableDeclaration[45238-45253]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[45406-45412]:SingleVariableDeclaration[45261-45267]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[45414-45429]:SingleVariableDeclaration[45269-45284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45431-47752]:Block[45286-47607]"
  }, {
    "left" : "JSType propertyType = null;",
    "right" : "JSType propertyType = null;",
    "info" : "VariableDeclarationStatement[45818-45845]:VariableDeclarationStatement[45673-45700]"
  }, {
    "left" : "boolean isLocallyInferred = false;",
    "right" : "boolean isLocallyInferred = false;",
    "info" : "VariableDeclarationStatement[45850-45884]:VariableDeclarationStatement[45705-45739]"
  }, {
    "left" : "String qualifiedName = n.getQualifiedName();",
    "right" : "String qualifiedName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[45964-46008]:VariableDeclarationStatement[45819-45863]"
  }, {
    "left" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
    "right" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
    "info" : "VariableDeclarationStatement[46013-46067]:VariableDeclarationStatement[45868-45922]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[46072-46390]:IfStatement[45927-46245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46089-46390]:Block[45944-46245]"
  }, {
    "left" : "JSType varType = var.getType();",
    "right" : "JSType varType = var.getType();",
    "info" : "VariableDeclarationStatement[46097-46128]:VariableDeclarationStatement[45952-45983]"
  }, {
    "left" : "if (varType != null)",
    "right" : "if (varType != null)",
    "info" : "IfStatement[46135-46384]:IfStatement[45990-46239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46156-46384]:Block[46011-46239]"
  }, {
    "left" : "boolean isDeclared = !var.isTypeInferred();",
    "right" : "boolean isDeclared = !var.isTypeInferred();",
    "info" : "VariableDeclarationStatement[46166-46209]:VariableDeclarationStatement[46021-46064]"
  }, {
    "left" : "isLocallyInferred = (var != syntacticScope.getSlot(qualifiedName));",
    "right" : "isLocallyInferred = (var != syntacticScope.getSlot(qualifiedName));",
    "info" : "ExpressionStatement[46218-46285]:ExpressionStatement[46073-46140]"
  }, {
    "left" : "if (isDeclared || isLocallyInferred)",
    "right" : "if (isDeclared || isLocallyInferred)",
    "info" : "IfStatement[46294-46376]:IfStatement[46149-46231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46331-46376]:Block[46186-46231]"
  }, {
    "left" : "propertyType = varType;",
    "right" : "propertyType = varType;",
    "info" : "ExpressionStatement[46343-46366]:ExpressionStatement[46198-46221]"
  }, {
    "left" : "if (propertyType == null && objType != null)",
    "right" : "if (propertyType == null && objType != null)",
    "info" : "IfStatement[46396-46582]:IfStatement[46251-46437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46441-46582]:Block[46296-46437]"
  }, {
    "left" : "JSType foundType = objType.findPropertyType(propName);",
    "right" : "JSType foundType = objType.findPropertyType(propName);",
    "info" : "VariableDeclarationStatement[46449-46503]:VariableDeclarationStatement[46304-46358]"
  }, {
    "left" : "if (foundType != null)",
    "right" : "if (foundType != null)",
    "info" : "IfStatement[46510-46576]:IfStatement[46365-46431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46533-46576]:Block[46388-46431]"
  }, {
    "left" : "propertyType = foundType;",
    "right" : "propertyType = foundType;",
    "info" : "ExpressionStatement[46543-46568]:ExpressionStatement[46398-46423]"
  }, {
    "left" : "if (propertyType != null && objType != null)",
    "right" : "if (propertyType != null && objType != null)",
    "info" : "IfStatement[46588-47051]:IfStatement[46443-46906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46633-47051]:Block[46488-46906]"
  }, {
    "left" : "JSType restrictedObjType = objType.restrictByNotNullOrUndefined();",
    "right" : "JSType restrictedObjType = objType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[46641-46707]:VariableDeclarationStatement[46496-46562]"
  }, {
    "left" : "if (restrictedObjType.isTemplatizedType()\n          && propertyType.hasAnyTemplateTypes())",
    "right" : "if (restrictedObjType.isTemplatizedType()\n          && propertyType.hasAnyTemplateTypes())",
    "info" : "IfStatement[46714-47045]:IfStatement[46569-46900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46805-47045]:Block[46660-46900]"
  }, {
    "left" : "TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();",
    "right" : "TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();",
    "info" : "VariableDeclarationStatement[46815-46880]:VariableDeclarationStatement[46670-46735]"
  }, {
    "left" : "TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(\n            registry, typeMap);",
    "right" : "TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(\n            registry, typeMap);",
    "info" : "VariableDeclarationStatement[46889-46984]:VariableDeclarationStatement[46744-46839]"
  }, {
    "left" : "propertyType = propertyType.visit(replacer);",
    "right" : "propertyType = propertyType.visit(replacer);",
    "info" : "ExpressionStatement[46993-47037]:ExpressionStatement[46848-46892]"
  }, {
    "left" : "if ((propertyType == null || propertyType.isUnknownType())\n        && qualifiedName != null)",
    "right" : "if ((propertyType == null || propertyType.isUnknownType())\n        && qualifiedName != null)",
    "info" : "IfStatement[47057-47395]:IfStatement[46912-47250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47150-47395]:Block[47005-47250]"
  }, {
    "left" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
    "right" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
    "info" : "VariableDeclarationStatement[47233-47303]:VariableDeclarationStatement[47088-47158]"
  }, {
    "left" : "if (regType != null)",
    "right" : "if (regType != null)",
    "info" : "IfStatement[47310-47389]:IfStatement[47165-47244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47331-47389]:Block[47186-47244]"
  }, {
    "left" : "propertyType = regType.getConstructor();",
    "right" : "propertyType = regType.getConstructor();",
    "info" : "ExpressionStatement[47341-47381]:ExpressionStatement[47196-47236]"
  }, {
    "left" : "if (propertyType == null)",
    "right" : "if (propertyType == null)",
    "info" : "IfStatement[47401-47748]:IfStatement[47256-47603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47427-47460]:Block[47282-47315]"
  }, {
    "left" : "return unknownType;",
    "right" : "return unknownType;",
    "info" : "ReturnStatement[47435-47454]:ReturnStatement[47290-47309]"
  }, {
    "left" : "if (propertyType.isEquivalentTo(unknownType) && isLocallyInferred)",
    "right" : "if (propertyType.isEquivalentTo(unknownType) && isLocallyInferred)",
    "info" : "IfStatement[47466-47748]:IfStatement[47321-47603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47533-47708]:Block[47388-47563]"
  }, {
    "left" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
    "right" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
    "info" : "ReturnStatement[47659-47702]:ReturnStatement[47514-47557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47714-47748]:Block[47569-47603]"
  }, {
    "left" : "return propertyType;",
    "right" : "return propertyType;",
    "info" : "ReturnStatement[47722-47742]:ReturnStatement[47577-47597]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47756-47763]:Modifier[47611-47618]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[47764-47782]:SimpleType[47619-47637]"
  }, {
    "left" : "traverseOr",
    "right" : "traverseOr",
    "info" : "SimpleName[47783-47793]:SimpleName[47638-47648]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47794-47800]:SingleVariableDeclaration[47649-47655]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[47802-47817]:SingleVariableDeclaration[47657-47672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47819-47882]:Block[47674-47737]"
  }, {
    "left" : "return traverseShortCircuitingBinOp(n, scope, false);",
    "right" : "return traverseShortCircuitingBinOp(n, scope, false);",
    "info" : "ReturnStatement[47825-47878]:ReturnStatement[47680-47733]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47886-47893]:Modifier[47741-47748]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[47894-47912]:SimpleType[47749-47767]"
  }, {
    "left" : "traverseShortCircuitingBinOp",
    "right" : "traverseShortCircuitingBinOp",
    "info" : "SimpleName[47913-47941]:SimpleName[47768-47796]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47949-47955]:SingleVariableDeclaration[47804-47810]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[47957-47972]:SingleVariableDeclaration[47812-47827]"
  }, {
    "left" : "boolean condition",
    "right" : "boolean condition",
    "info" : "SingleVariableDeclaration[47974-47991]:SingleVariableDeclaration[47829-47846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47993-50245]:Block[47848-50100]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[47999-48029]:VariableDeclarationStatement[47854-47884]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[48034-48064]:VariableDeclarationStatement[47889-47919]"
  }, {
    "left" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
    "right" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
    "info" : "VariableDeclarationStatement[48096-48221]:VariableDeclarationStatement[47951-48076]"
  }, {
    "left" : "JSType leftType = left.getJSType();",
    "right" : "JSType leftType = left.getJSType();",
    "info" : "VariableDeclarationStatement[48226-48261]:VariableDeclarationStatement[48081-48116]"
  }, {
    "left" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
    "right" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
    "info" : "VariableDeclarationStatement[48385-48579]:VariableDeclarationStatement[48240-48434]"
  }, {
    "left" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
    "right" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
    "info" : "VariableDeclarationStatement[48612-48745]:VariableDeclarationStatement[48467-48600]"
  }, {
    "left" : "JSType rightType = right.getJSType();",
    "right" : "JSType rightType = right.getJSType();",
    "info" : "VariableDeclarationStatement[48750-48787]:VariableDeclarationStatement[48605-48642]"
  }, {
    "left" : "JSType type;",
    "right" : "JSType type;",
    "info" : "VariableDeclarationStatement[48793-48805]:VariableDeclarationStatement[48648-48660]"
  }, {
    "left" : "BooleanOutcomePair literals;",
    "right" : "BooleanOutcomePair literals;",
    "info" : "VariableDeclarationStatement[48810-48838]:VariableDeclarationStatement[48665-48693]"
  }, {
    "left" : "if (leftType != null && rightType != null)",
    "right" : "if (leftType != null && rightType != null)",
    "info" : "IfStatement[48843-50196]:IfStatement[48698-50051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48886-49973]:Block[48741-49828]"
  }, {
    "left" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
    "right" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
    "info" : "ExpressionStatement[48894-48965]:ExpressionStatement[48749-48820]"
  }, {
    "left" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
    "right" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
    "info" : "IfStatement[48972-49513]:IfStatement[48827-49368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49055-49217]:Block[48910-49072]"
  }, {
    "left" : "type = leftType;",
    "right" : "type = leftType;",
    "info" : "ExpressionStatement[49160-49176]:ExpressionStatement[49015-49031]"
  }, {
    "left" : "literals = leftLiterals;",
    "right" : "literals = leftLiterals;",
    "info" : "ExpressionStatement[49185-49209]:ExpressionStatement[49040-49064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49223-49513]:Block[49078-49368]"
  }, {
    "left" : "type = leftType.getLeastSupertype(rightType);",
    "right" : "type = leftType.getLeastSupertype(rightType);",
    "info" : "ExpressionStatement[49366-49411]:ExpressionStatement[49221-49266]"
  }, {
    "left" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
    "right" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
    "info" : "ExpressionStatement[49420-49505]:ExpressionStatement[49275-49360]"
  }, {
    "left" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
    "right" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
    "info" : "IfStatement[49642-49967]:IfStatement[49497-49822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49754-49967]:Block[49609-49822]"
  }, {
    "left" : "if (type.isUnionType())",
    "right" : "if (type.isUnionType())",
    "info" : "IfStatement[49819-49959]:IfStatement[49674-49814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49843-49959]:Block[49698-49814]"
  }, {
    "left" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
    "right" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
    "info" : "ExpressionStatement[49855-49949]:ExpressionStatement[49710-49804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49979-50196]:Block[49834-50051]"
  }, {
    "left" : "type = null;",
    "right" : "type = null;",
    "info" : "ExpressionStatement[49987-49999]:ExpressionStatement[49842-49854]"
  }, {
    "left" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
    "right" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
    "info" : "ExpressionStatement[50006-50190]:ExpressionStatement[49861-50045]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[50201-50219]:ExpressionStatement[50056-50074]"
  }, {
    "left" : "return literals;",
    "right" : "return literals;",
    "info" : "ReturnStatement[50225-50241]:ReturnStatement[50080-50096]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50249-50256]:Modifier[50104-50111]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[50257-50275]:SimpleType[50112-50130]"
  }, {
    "left" : "traverseWithinShortCircuitingBinOp",
    "right" : "traverseWithinShortCircuitingBinOp",
    "info" : "SimpleName[50276-50310]:SimpleName[50131-50165]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[50311-50317]:SingleVariableDeclaration[50166-50172]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[50325-50340]:SingleVariableDeclaration[50180-50195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50342-50611]:Block[50197-50466]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
    "info" : "SwitchStatement[50348-50607]:SwitchStatement[50203-50462]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[50377-50392]:SwitchCase[50232-50247]"
  }, {
    "left" : "return traverseAnd(n, scope);",
    "right" : "return traverseAnd(n, scope);",
    "info" : "ReturnStatement[50401-50430]:ReturnStatement[50256-50285]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[50438-50452]:SwitchCase[50293-50307]"
  }, {
    "left" : "return traverseOr(n, scope);",
    "right" : "return traverseOr(n, scope);",
    "info" : "ReturnStatement[50461-50489]:ReturnStatement[50316-50344]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[50497-50505]:SwitchCase[50352-50360]"
  }, {
    "left" : "scope = traverse(n, scope);",
    "right" : "scope = traverse(n, scope);",
    "info" : "ExpressionStatement[50514-50541]:ExpressionStatement[50369-50396]"
  }, {
    "left" : "return newBooleanOutcomePair(n.getJSType(), scope);",
    "right" : "return newBooleanOutcomePair(n.getJSType(), scope);",
    "info" : "ReturnStatement[50550-50601]:ReturnStatement[50405-50456]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[50831-50849]:SimpleType[50686-50704]"
  }, {
    "left" : "getBooleanOutcomePair",
    "right" : "getBooleanOutcomePair",
    "info" : "SimpleName[50850-50871]:SimpleName[50705-50726]"
  }, {
    "left" : "BooleanOutcomePair left",
    "right" : "BooleanOutcomePair left",
    "info" : "SingleVariableDeclaration[50872-50895]:SingleVariableDeclaration[50727-50750]"
  }, {
    "left" : "BooleanOutcomePair right",
    "right" : "BooleanOutcomePair right",
    "info" : "SingleVariableDeclaration[50903-50927]:SingleVariableDeclaration[50758-50782]"
  }, {
    "left" : "boolean condition",
    "right" : "boolean condition",
    "info" : "SingleVariableDeclaration[50929-50946]:SingleVariableDeclaration[50784-50801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50948-51247]:Block[50803-51102]"
  }, {
    "left" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
    "right" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
    "info" : "ReturnStatement[50954-51243]:ReturnStatement[50809-51098]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51908-51914]:Modifier[51763-51769]"
  }, {
    "left" : "BooleanLiteralSet",
    "right" : "BooleanLiteralSet",
    "info" : "SimpleType[51915-51932]:SimpleType[51770-51787]"
  }, {
    "left" : "getBooleanOutcomes",
    "right" : "getBooleanOutcomes",
    "info" : "SimpleName[51933-51951]:SimpleName[51788-51806]"
  }, {
    "left" : "BooleanLiteralSet left",
    "right" : "BooleanLiteralSet left",
    "info" : "SingleVariableDeclaration[51952-51974]:SingleVariableDeclaration[51807-51829]"
  }, {
    "left" : "BooleanLiteralSet right",
    "right" : "BooleanLiteralSet right",
    "info" : "SingleVariableDeclaration[51982-52005]:SingleVariableDeclaration[51837-51860]"
  }, {
    "left" : "boolean condition",
    "right" : "boolean condition",
    "info" : "SingleVariableDeclaration[52007-52024]:SingleVariableDeclaration[51862-51879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52026-52109]:Block[51881-51964]"
  }, {
    "left" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
    "right" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
    "info" : "ReturnStatement[52032-52105]:ReturnStatement[51887-51960]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52396-52403]:Modifier[52251-52258]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[52404-52409]:Modifier[52259-52264]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[52410-52415]:TYPE_DECLARATION_KIND[52265-52270]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleName[52836-52854]:SimpleName[52691-52709]"
  }, {
    "left" : "BooleanLiteralSet toBooleanOutcomes",
    "right" : "BooleanLiteralSet toBooleanOutcomes",
    "info" : "SingleVariableDeclaration[52864-52899]:SingleVariableDeclaration[52719-52754]"
  }, {
    "left" : "BooleanLiteralSet booleanValues",
    "right" : "BooleanLiteralSet booleanValues",
    "info" : "SingleVariableDeclaration[52901-52932]:SingleVariableDeclaration[52756-52787]"
  }, {
    "left" : "FlowScope leftScope",
    "right" : "FlowScope leftScope",
    "info" : "SingleVariableDeclaration[52942-52961]:SingleVariableDeclaration[52797-52816]"
  }, {
    "left" : "FlowScope rightScope",
    "right" : "FlowScope rightScope",
    "info" : "SingleVariableDeclaration[52963-52983]:SingleVariableDeclaration[52818-52838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52985-53154]:Block[52840-53009]"
  }, {
    "left" : "this.toBooleanOutcomes = toBooleanOutcomes;",
    "right" : "this.toBooleanOutcomes = toBooleanOutcomes;",
    "info" : "ExpressionStatement[52993-53036]:ExpressionStatement[52848-52891]"
  }, {
    "left" : "this.booleanValues = booleanValues;",
    "right" : "this.booleanValues = booleanValues;",
    "info" : "ExpressionStatement[53043-53078]:ExpressionStatement[52898-52933]"
  }, {
    "left" : "this.leftScope = leftScope;",
    "right" : "this.leftScope = leftScope;",
    "info" : "ExpressionStatement[53085-53112]:ExpressionStatement[52940-52967]"
  }, {
    "left" : "this.rightScope = rightScope;",
    "right" : "this.rightScope = rightScope;",
    "info" : "ExpressionStatement[53119-53148]:ExpressionStatement[52974-53003]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[53284-53293]:SimpleType[53139-53148]"
  }, {
    "left" : "getJoinedFlowScope",
    "right" : "getJoinedFlowScope",
    "info" : "SimpleName[53294-53312]:SimpleName[53149-53167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53315-53544]:Block[53170-53399]"
  }, {
    "left" : "if (joinedScope == null)",
    "right" : "if (joinedScope == null)",
    "info" : "IfStatement[53323-53512]:IfStatement[53178-53367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53348-53512]:Block[53203-53367]"
  }, {
    "left" : "if (leftScope == rightScope)",
    "right" : "if (leftScope == rightScope)",
    "info" : "IfStatement[53358-53504]:IfStatement[53213-53359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53387-53434]:Block[53242-53289]"
  }, {
    "left" : "joinedScope = rightScope;",
    "right" : "joinedScope = rightScope;",
    "info" : "ExpressionStatement[53399-53424]:ExpressionStatement[53254-53279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53440-53504]:Block[53295-53359]"
  }, {
    "left" : "joinedScope = join(leftScope, rightScope);",
    "right" : "joinedScope = join(leftScope, rightScope);",
    "info" : "ExpressionStatement[53452-53494]:ExpressionStatement[53307-53349]"
  }, {
    "left" : "return joinedScope;",
    "right" : "return joinedScope;",
    "info" : "ReturnStatement[53519-53538]:ReturnStatement[53374-53393]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[53655-53664]:SimpleType[53510-53519]"
  }, {
    "left" : "getOutcomeFlowScope",
    "right" : "getOutcomeFlowScope",
    "info" : "SimpleName[53665-53684]:SimpleName[53520-53539]"
  }, {
    "left" : "int nodeType",
    "right" : "int nodeType",
    "info" : "SingleVariableDeclaration[53685-53697]:SingleVariableDeclaration[53540-53552]"
  }, {
    "left" : "boolean outcome",
    "right" : "boolean outcome",
    "info" : "SingleVariableDeclaration[53699-53714]:SingleVariableDeclaration[53554-53569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53716-53967]:Block[53571-53822]"
  }, {
    "left" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
    "right" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
    "info" : "IfStatement[53724-53961]:IfStatement[53579-53816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53808-53909]:Block[53663-53764]"
  }, {
    "left" : "return rightScope;",
    "right" : "return rightScope;",
    "info" : "ReturnStatement[53883-53901]:ReturnStatement[53738-53756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53915-53961]:Block[53770-53816]"
  }, {
    "left" : "return getJoinedFlowScope();",
    "right" : "return getJoinedFlowScope();",
    "info" : "ReturnStatement[53925-53953]:ReturnStatement[53780-53808]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53975-53982]:Modifier[53830-53837]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[53983-54001]:SimpleType[53838-53856]"
  }, {
    "left" : "newBooleanOutcomePair",
    "right" : "newBooleanOutcomePair",
    "info" : "SimpleName[54002-54023]:SimpleName[53857-53878]"
  }, {
    "left" : "JSType jsType",
    "right" : "JSType jsType",
    "info" : "SingleVariableDeclaration[54031-54044]:SingleVariableDeclaration[53886-53899]"
  }, {
    "left" : "FlowScope flowScope",
    "right" : "FlowScope flowScope",
    "info" : "SingleVariableDeclaration[54046-54065]:SingleVariableDeclaration[53901-53920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54067-54453]:Block[53922-54308]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[54073-54218]:IfStatement[53928-54073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54093-54218]:Block[53948-54073]"
  }, {
    "left" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
    "right" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
    "info" : "ReturnStatement[54101-54212]:ReturnStatement[53956-54067]"
  }, {
    "left" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
    "right" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
    "info" : "ReturnStatement[54223-54449]:ReturnStatement[54078-54304]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54457-54464]:Modifier[54312-54319]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[54465-54469]:PrimitiveType[54320-54324]"
  }, {
    "left" : "redeclareSimpleVar",
    "right" : "redeclareSimpleVar",
    "info" : "SimpleName[54470-54488]:SimpleName[54325-54343]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[54496-54511]:SingleVariableDeclaration[54351-54366]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[54513-54526]:SingleVariableDeclaration[54368-54381]"
  }, {
    "left" : "JSType varType",
    "right" : "JSType varType",
    "info" : "SingleVariableDeclaration[54528-54542]:SingleVariableDeclaration[54383-54397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54544-54851]:Block[54399-54706]"
  }, {
    "left" : "Preconditions.checkState(nameNode.isName());",
    "right" : "Preconditions.checkState(nameNode.isName());",
    "info" : "ExpressionStatement[54550-54594]:ExpressionStatement[54405-54449]"
  }, {
    "left" : "String varName = nameNode.getString();",
    "right" : "String varName = nameNode.getString();",
    "info" : "VariableDeclarationStatement[54599-54637]:VariableDeclarationStatement[54454-54492]"
  }, {
    "left" : "if (varType == null)",
    "right" : "if (varType == null)",
    "info" : "IfStatement[54642-54728]:IfStatement[54497-54583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54663-54728]:Block[54518-54583]"
  }, {
    "left" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[54671-54722]:ExpressionStatement[54526-54577]"
  }, {
    "left" : "if (isUnflowable(syntacticScope.getVar(varName)))",
    "right" : "if (isUnflowable(syntacticScope.getVar(varName)))",
    "info" : "IfStatement[54733-54804]:IfStatement[54588-54659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54783-54804]:Block[54638-54659]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[54791-54798]:ReturnStatement[54646-54653]"
  }, {
    "left" : "scope.inferSlotType(varName, varType);",
    "right" : "scope.inferSlotType(varName, varType);",
    "info" : "ExpressionStatement[54809-54847]:ExpressionStatement[54664-54702]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54855-54862]:Modifier[54710-54717]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54863-54870]:PrimitiveType[54718-54725]"
  }, {
    "left" : "isUnflowable",
    "right" : "isUnflowable",
    "info" : "SimpleName[54871-54883]:SimpleName[54726-54738]"
  }, {
    "left" : "Var v",
    "right" : "Var v",
    "info" : "SingleVariableDeclaration[54884-54889]:SingleVariableDeclaration[54739-54744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54891-55069]:Block[54746-54924]"
  }, {
    "left" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
    "right" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
    "info" : "ReturnStatement[54897-55065]:ReturnStatement[54752-54920]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55179-55186]:Modifier[55034-55041]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[55187-55193]:SimpleType[55042-55048]"
  }, {
    "left" : "getJSType",
    "right" : "getJSType",
    "info" : "SimpleName[55194-55203]:SimpleName[55049-55058]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[55204-55210]:SingleVariableDeclaration[55059-55065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55212-55624]:Block[55067-55479]"
  }, {
    "left" : "JSType jsType = n.getJSType();",
    "right" : "JSType jsType = n.getJSType();",
    "info" : "VariableDeclarationStatement[55218-55248]:VariableDeclarationStatement[55073-55103]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[55253-55620]:IfStatement[55108-55475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55273-55586]:Block[55128-55441]"
  }, {
    "left" : "return unknownType;",
    "right" : "return unknownType;",
    "info" : "ReturnStatement[55561-55580]:ReturnStatement[55416-55435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55592-55620]:Block[55447-55475]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[55600-55614]:ReturnStatement[55455-55469]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55628-55635]:Modifier[55483-55490]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[55636-55642]:SimpleType[55491-55497]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[55643-55656]:SimpleName[55498-55511]"
  }, {
    "left" : "JSTypeNative typeId",
    "right" : "JSTypeNative typeId",
    "info" : "SingleVariableDeclaration[55657-55676]:SingleVariableDeclaration[55512-55531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55678-55726]:Block[55533-55581]"
  }, {
    "left" : "return registry.getNativeType(typeId);",
    "right" : "return registry.getNativeType(typeId);",
    "info" : "ReturnStatement[55684-55722]:ReturnStatement[55539-55577]"
  } ]
}