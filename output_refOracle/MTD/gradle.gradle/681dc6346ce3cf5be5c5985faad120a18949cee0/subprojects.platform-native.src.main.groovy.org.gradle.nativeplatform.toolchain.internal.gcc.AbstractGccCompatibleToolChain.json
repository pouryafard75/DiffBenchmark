{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[2377-12918]:TypeDeclaration[2496-13526]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2568-2667]:FieldDeclaration[2687-2786]"
  }, {
    "left" : "private final ExecActionFactory execActionFactory;",
    "right" : "private final ExecActionFactory execActionFactory;",
    "info" : "FieldDeclaration[2672-2722]:FieldDeclaration[2791-2841]"
  }, {
    "left" : "private final ToolSearchPath toolSearchPath;",
    "right" : "private final ToolSearchPath toolSearchPath;",
    "info" : "FieldDeclaration[2727-2771]:FieldDeclaration[2846-2890]"
  }, {
    "left" : "private final List<TargetPlatformConfiguration> platformConfigs = new ArrayList<TargetPlatformConfiguration>();",
    "right" : "private final List<TargetPlatformConfiguration> platformConfigs = new ArrayList<TargetPlatformConfiguration>();",
    "info" : "FieldDeclaration[2776-2887]:FieldDeclaration[2895-3006]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2892-2948]:FieldDeclaration[3106-3162]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2953-2993]:FieldDeclaration[3167-3207]"
  }, {
    "left" : "private int configInsertLocation;",
    "right" : "private int configInsertLocation;",
    "info" : "FieldDeclaration[2998-3031]:FieldDeclaration[3212-3245]"
  }, {
    "left" : "public name String, buildOperationProcessor BuildOperationProcessor, operatingSystem OperatingSystem, fileResolver FileResolver, execActionFactory ExecActionFactory, metaDataProvider CompilerMetaDataProvider, instantiator Instantiator)",
    "right" : "public name String, buildOperationProcessor BuildOperationProcessor, operatingSystem OperatingSystem, fileResolver FileResolver, execActionFactory ExecActionFactory, metaDataProvider CompilerMetaDataProvider, instantiator Instantiator)",
    "info" : "MethodDeclaration[3037-3475]:MethodDeclaration[3251-3689]"
  }, {
    "left" : "package name String, buildOperationProcessor BuildOperationProcessor, operatingSystem OperatingSystem, fileResolver FileResolver, execActionFactory ExecActionFactory, tools ToolSearchPath, metaDataProvider CompilerMetaDataProvider, instantiator Instantiator)",
    "right" : "package name String, buildOperationProcessor BuildOperationProcessor, operatingSystem OperatingSystem, fileResolver FileResolver, execActionFactory ExecActionFactory, tools ToolSearchPath, metaDataProvider CompilerMetaDataProvider, instantiator Instantiator)",
    "info" : "MethodDeclaration[3481-4149]:MethodDeclaration[3695-4363]"
  }, {
    "left" : "protected CommandLineToolSearchResult locate(GccCommandLineToolConfigurationInternal gccTool) {\n        return toolSearchPath.locate(gccTool.getToolType(), gccTool.getExecutable());\n    }",
    "right" : "protected CommandLineToolSearchResult locate(GccCommandLineToolConfigurationInternal gccTool) {\n        return toolSearchPath.locate(gccTool.getToolType(), gccTool.getExecutable());\n    }",
    "info" : "MethodDeclaration[4155-4342]:MethodDeclaration[4369-4556]"
  }, {
    "left" : "public ) : List<File>",
    "right" : "public ) : List<File>",
    "info" : "MethodDeclaration[4348-4424]:MethodDeclaration[4562-4638]"
  }, {
    "left" : "public pathEntries Object...) : void",
    "right" : "public pathEntries Object...) : void",
    "info" : "MethodDeclaration[4430-4577]:MethodDeclaration[4644-4791]"
  }, {
    "left" : "protected CompilerMetaDataProvider getMetaDataProvider() {\n        return metaDataProvider;\n    }",
    "right" : "protected CompilerMetaDataProvider getMetaDataProvider() {\n        return metaDataProvider;\n    }",
    "info" : "MethodDeclaration[4583-4680]:MethodDeclaration[4797-4894]"
  }, {
    "left" : "public platformName String) : void",
    "right" : "public platformName String) : void",
    "info" : "MethodDeclaration[4686-4809]:MethodDeclaration[4900-5023]"
  }, {
    "left" : "public void target(String platformName, Action<? super GccPlatformToolChain> action) {\n        target(new DefaultTargetPlatformConfiguration(asList(platformName), action));\n    }",
    "right" : "public void target(String platformName, Action<? super GccPlatformToolChain> action) {\n        target(new DefaultTargetPlatformConfiguration(asList(platformName), action));\n    }",
    "info" : "MethodDeclaration[4815-4993]:MethodDeclaration[5029-5207]"
  }, {
    "left" : "public void target(List<String> platformNames, Action<? super GccPlatformToolChain> action) {\n        target(new DefaultTargetPlatformConfiguration(platformNames, action));\n    }",
    "right" : "public void target(List<String> platformNames, Action<? super GccPlatformToolChain> action) {\n        target(new DefaultTargetPlatformConfiguration(platformNames, action));\n    }",
    "info" : "MethodDeclaration[4999-5177]:MethodDeclaration[5213-5391]"
  }, {
    "left" : "private void target(TargetPlatformConfiguration targetPlatformConfiguration) {\n        platformConfigs.add(configInsertLocation, targetPlatformConfiguration);\n        configInsertLocation++;\n    }",
    "right" : "private void target(TargetPlatformConfiguration targetPlatformConfiguration) {\n        platformConfigs.add(configInsertLocation, targetPlatformConfiguration);\n        configInsertLocation++;\n    }",
    "info" : "MethodDeclaration[5183-5379]:MethodDeclaration[5397-5593]"
  }, {
    "left" : "public PlatformToolProvider select(NativePlatformInternal targetPlatform) {\n        TargetPlatformConfiguration targetPlatformConfigurationConfiguration = getPlatformConfiguration(targetPlatform);\n        ToolChainAvailability result = new ToolChainAvailability();\n        if (targetPlatformConfigurationConfiguration == null) {\n            result.unavailable(String.format(\"Don't know how to build for platform '%s'.\", targetPlatform.getName()));\n            return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);\n        }\n\n        DefaultGccPlatformToolChain configurableToolChain = instantiator.newInstance(DefaultGccPlatformToolChain.class, targetPlatform);\n        addDefaultTools(configurableToolChain);\n        configureDefaultTools(configurableToolChain);\n        targetPlatformConfigurationConfiguration.apply(configurableToolChain);\n        configureActions.execute(configurableToolChain);\n\n        initTools(configurableToolChain, result);\n        if (!result.isAvailable()) {\n            return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);\n        }\n\n        return new GccPlatformToolProvider(buildOperationProcessor, targetPlatform.getOperatingSystem(), toolSearchPath, configurableToolChain, execActionFactory, configurableToolChain.isCanUseCommandFile());\n    }",
    "right" : "private PlatformToolProvider createPlatformToolProvider(NativePlatformInternal targetPlatform) {\n        TargetPlatformConfiguration targetPlatformConfigurationConfiguration = getPlatformConfiguration(targetPlatform);\n        ToolChainAvailability result = new ToolChainAvailability();\n        if (targetPlatformConfigurationConfiguration == null) {\n            result.unavailable(String.format(\"Don't know how to build for platform '%s'.\", targetPlatform.getName()));\n            return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);\n        }\n\n        DefaultGccPlatformToolChain configurableToolChain = instantiator.newInstance(DefaultGccPlatformToolChain.class, targetPlatform);\n        addDefaultTools(configurableToolChain);\n        configureDefaultTools(configurableToolChain);\n        targetPlatformConfigurationConfiguration.apply(configurableToolChain);\n        configureActions.execute(configurableToolChain);\n\n        initTools(configurableToolChain, result);\n        if (!result.isAvailable()) {\n            return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);\n        }\n\n        return new GccPlatformToolProvider(buildOperationProcessor, targetPlatform.getOperatingSystem(), toolSearchPath, configurableToolChain, execActionFactory, configurableToolChain.isCanUseCommandFile());\n    }",
    "info" : "MethodDeclaration[5385-6734]:MethodDeclaration[5972-7342]"
  }, {
    "left" : "protected void initTools(DefaultGccPlatformToolChain platformToolChain, ToolChainAvailability availability) {\n        // Attempt to determine whether the compiler is the correct implementation\n        boolean found = false;\n        for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getCompilers()) {\n            CommandLineToolSearchResult compiler = locate(tool);\n            if (compiler.isAvailable()) {\n                GccVersionResult versionResult = getMetaDataProvider().getGccMetaData(compiler.getTool(), platformToolChain.getCompilerProbeArgs());\n                availability.mustBeAvailable(versionResult);\n                if (!versionResult.isAvailable()) {\n                    return;\n                }\n                // Assume all the other compilers are ok, if they happen to be installed\n                LOGGER.debug(\"Found {} with version {}\", ToolType.C_COMPILER.getToolName(), versionResult);\n                found = true;\n                initForImplementation(platformToolChain, versionResult);\n                break;\n            }\n        }\n\n        // Attempt to locate each tool\n        for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getTools()) {\n            found |= toolSearchPath.locate(tool.getToolType(), tool.getExecutable()).isAvailable();\n        }\n        if (!found) {\n            // No tools found - report just the C compiler as missing\n            // TODO - report whichever tool is actually required, eg if there's only assembler source, complain about the assembler\n            GccCommandLineToolConfigurationInternal cCompiler = platformToolChain.getcCompiler();\n            availability.mustBeAvailable(locate(cCompiler));\n        }\n    }",
    "right" : "protected void initTools(DefaultGccPlatformToolChain platformToolChain, ToolChainAvailability availability) {\n        // Attempt to determine whether the compiler is the correct implementation\n        boolean found = false;\n        for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getCompilers()) {\n            CommandLineToolSearchResult compiler = locate(tool);\n            if (compiler.isAvailable()) {\n                GccVersionResult versionResult = getMetaDataProvider().getGccMetaData(compiler.getTool(), platformToolChain.getCompilerProbeArgs());\n                availability.mustBeAvailable(versionResult);\n                if (!versionResult.isAvailable()) {\n                    return;\n                }\n                // Assume all the other compilers are ok, if they happen to be installed\n                LOGGER.debug(\"Found {} with version {}\", ToolType.C_COMPILER.getToolName(), versionResult);\n                found = true;\n                initForImplementation(platformToolChain, versionResult);\n                break;\n            }\n        }\n\n        // Attempt to locate each tool\n        for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getTools()) {\n            found |= toolSearchPath.locate(tool.getToolType(), tool.getExecutable()).isAvailable();\n        }\n        if (!found) {\n            // No tools found - report just the C compiler as missing\n            // TODO - report whichever tool is actually required, eg if there's only assembler source, complain about the assembler\n            GccCommandLineToolConfigurationInternal cCompiler = platformToolChain.getcCompiler();\n            availability.mustBeAvailable(locate(cCompiler));\n        }\n    }",
    "info" : "MethodDeclaration[6740-8462]:MethodDeclaration[7348-9070]"
  }, {
    "left" : "protected void initForImplementation(DefaultGccPlatformToolChain platformToolChain, GccVersionResult versionResult) {\n    }",
    "right" : "protected void initForImplementation(DefaultGccPlatformToolChain platformToolChain, GccVersionResult versionResult) {\n    }",
    "info" : "MethodDeclaration[8468-8591]:MethodDeclaration[9076-9199]"
  }, {
    "left" : "private void addDefaultTools(DefaultGccPlatformToolChain toolChain) {\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.C_COMPILER, \"gcc\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.CPP_COMPILER, \"g++\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.LINKER, \"g++\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.STATIC_LIB_ARCHIVER, \"ar\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVECPP_COMPILER, \"g++\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVEC_COMPILER, \"gcc\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.ASSEMBLER, \"gcc\"));\n    }",
    "right" : "private void addDefaultTools(DefaultGccPlatformToolChain toolChain) {\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.C_COMPILER, \"gcc\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.CPP_COMPILER, \"g++\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.LINKER, \"g++\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.STATIC_LIB_ARCHIVER, \"ar\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVECPP_COMPILER, \"g++\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVEC_COMPILER, \"gcc\"));\n        toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.ASSEMBLER, \"gcc\"));\n    }",
    "info" : "MethodDeclaration[8597-9558]:MethodDeclaration[9205-10166]"
  }, {
    "left" : "protected toolChain DefaultGccPlatformToolChain) : void",
    "right" : "protected toolChain DefaultGccPlatformToolChain) : void",
    "info" : "MethodDeclaration[9564-9647]:MethodDeclaration[10172-10255]"
  }, {
    "left" : "protected TargetPlatformConfiguration getPlatformConfiguration(NativePlatformInternal targetPlatform) {\n        for (TargetPlatformConfiguration platformConfig : platformConfigs) {\n            if (platformConfig.supportsPlatform(targetPlatform)) {\n                return platformConfig;\n            }\n        }\n        return null;\n    }",
    "right" : "protected TargetPlatformConfiguration getPlatformConfiguration(NativePlatformInternal targetPlatform) {\n        for (TargetPlatformConfiguration platformConfig : platformConfigs) {\n            if (platformConfig.supportsPlatform(targetPlatform)) {\n                return platformConfig;\n            }\n        }\n        return null;\n    }",
    "info" : "MethodDeclaration[9653-9990]:MethodDeclaration[10261-10598]"
  }, {
    "left" : "private class Intel32Architecture implements TargetPlatformConfiguration {\n\n        public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return targetPlatform.getOperatingSystem().isCurrent() && targetPlatform.getArchitecture().isI386();\n        }\n\n        public void apply(DefaultGccPlatformToolChain gccToolChain) {\n            gccToolChain.compilerProbeArgs(\"-m32\");\n            Action<List<String>> m32args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m32\");\n                }\n            };\n            gccToolChain.getCppCompiler().withArguments(m32args);\n            gccToolChain.getcCompiler().withArguments(m32args);\n            gccToolChain.getObjcCompiler().withArguments(m32args);\n            gccToolChain.getObjcppCompiler().withArguments(m32args);\n            gccToolChain.getLinker().withArguments(m32args);\n            gccToolChain.getAssembler().withArguments(m32args);\n\n        }\n    }",
    "right" : "private class Intel32Architecture implements TargetPlatformConfiguration {\n\n        public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return targetPlatform.getOperatingSystem().isCurrent() && targetPlatform.getArchitecture().isI386();\n        }\n\n        public void apply(DefaultGccPlatformToolChain gccToolChain) {\n            gccToolChain.compilerProbeArgs(\"-m32\");\n            Action<List<String>> m32args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m32\");\n                }\n            };\n            gccToolChain.getCppCompiler().withArguments(m32args);\n            gccToolChain.getcCompiler().withArguments(m32args);\n            gccToolChain.getObjcCompiler().withArguments(m32args);\n            gccToolChain.getObjcppCompiler().withArguments(m32args);\n            gccToolChain.getLinker().withArguments(m32args);\n            gccToolChain.getAssembler().withArguments(m32args);\n\n        }\n    }",
    "info" : "TypeDeclaration[9996-11006]:TypeDeclaration[10604-11614]"
  }, {
    "left" : "public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return targetPlatform.getOperatingSystem().isCurrent() && targetPlatform.getArchitecture().isI386();\n        }",
    "right" : "public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return targetPlatform.getOperatingSystem().isCurrent() && targetPlatform.getArchitecture().isI386();\n        }",
    "info" : "MethodDeclaration[10080-10275]:MethodDeclaration[10688-10883]"
  }, {
    "left" : "public void apply(DefaultGccPlatformToolChain gccToolChain) {\n            gccToolChain.compilerProbeArgs(\"-m32\");\n            Action<List<String>> m32args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m32\");\n                }\n            };\n            gccToolChain.getCppCompiler().withArguments(m32args);\n            gccToolChain.getcCompiler().withArguments(m32args);\n            gccToolChain.getObjcCompiler().withArguments(m32args);\n            gccToolChain.getObjcppCompiler().withArguments(m32args);\n            gccToolChain.getLinker().withArguments(m32args);\n            gccToolChain.getAssembler().withArguments(m32args);\n\n        }",
    "right" : "public void apply(DefaultGccPlatformToolChain gccToolChain) {\n            gccToolChain.compilerProbeArgs(\"-m32\");\n            Action<List<String>> m32args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m32\");\n                }\n            };\n            gccToolChain.getCppCompiler().withArguments(m32args);\n            gccToolChain.getcCompiler().withArguments(m32args);\n            gccToolChain.getObjcCompiler().withArguments(m32args);\n            gccToolChain.getObjcppCompiler().withArguments(m32args);\n            gccToolChain.getLinker().withArguments(m32args);\n            gccToolChain.getAssembler().withArguments(m32args);\n\n        }",
    "info" : "MethodDeclaration[10285-11000]:MethodDeclaration[10893-11608]"
  }, {
    "left" : "public args List<String>) : void",
    "right" : "public args List<String>) : void",
    "info" : "MethodDeclaration[10487-10583]:MethodDeclaration[11095-11191]"
  }, {
    "left" : "private class Intel64Architecture implements TargetPlatformConfiguration {\n        public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return targetPlatform.getOperatingSystem().isCurrent()\n                    && targetPlatform.getArchitecture().isAmd64();\n        }\n\n        public void apply(DefaultGccPlatformToolChain gccToolChain) {\n            gccToolChain.compilerProbeArgs(\"-m64\");\n            Action<List<String>> m64args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m64\");\n                }\n            };\n            gccToolChain.getCppCompiler().withArguments(m64args);\n            gccToolChain.getcCompiler().withArguments(m64args);\n            gccToolChain.getObjcCompiler().withArguments(m64args);\n            gccToolChain.getObjcppCompiler().withArguments(m64args);\n            gccToolChain.getLinker().withArguments(m64args);\n            gccToolChain.getAssembler().withArguments(m64args);\n        }\n    }",
    "right" : "private class Intel64Architecture implements TargetPlatformConfiguration {\n        public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return targetPlatform.getOperatingSystem().isCurrent()\n                    && targetPlatform.getArchitecture().isAmd64();\n        }\n\n        public void apply(DefaultGccPlatformToolChain gccToolChain) {\n            gccToolChain.compilerProbeArgs(\"-m64\");\n            Action<List<String>> m64args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m64\");\n                }\n            };\n            gccToolChain.getCppCompiler().withArguments(m64args);\n            gccToolChain.getcCompiler().withArguments(m64args);\n            gccToolChain.getObjcCompiler().withArguments(m64args);\n            gccToolChain.getObjcppCompiler().withArguments(m64args);\n            gccToolChain.getLinker().withArguments(m64args);\n            gccToolChain.getAssembler().withArguments(m64args);\n        }\n    }",
    "info" : "TypeDeclaration[11012-12041]:TypeDeclaration[11620-12649]"
  }, {
    "left" : "public targetPlatform NativePlatformInternal) : boolean",
    "right" : "public targetPlatform NativePlatformInternal) : boolean",
    "info" : "MethodDeclaration[11095-11311]:MethodDeclaration[11703-11919]"
  }, {
    "left" : "public gccToolChain DefaultGccPlatformToolChain) : void",
    "right" : "public gccToolChain DefaultGccPlatformToolChain) : void",
    "info" : "MethodDeclaration[11321-12035]:MethodDeclaration[11929-12643]"
  }, {
    "left" : "public args List<String>) : void",
    "right" : "public args List<String>) : void",
    "info" : "MethodDeclaration[11523-11619]:MethodDeclaration[12131-12227]"
  }, {
    "left" : "private static class DefaultTargetPlatformConfiguration implements TargetPlatformConfiguration {\n        //TODO this should be a container of platforms\n        private final Collection<String> platformNames;\n        private Action<? super GccPlatformToolChain> configurationAction;\n\n        public DefaultTargetPlatformConfiguration(Collection<String> targetPlatformNames, Action<? super GccPlatformToolChain> configurationAction) {\n            this.platformNames = targetPlatformNames;\n            this.configurationAction = configurationAction;\n        }\n\n        public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return platformNames.contains(targetPlatform.getName());\n        }\n\n        public void apply(DefaultGccPlatformToolChain platformToolChain) {\n            configurationAction.execute(platformToolChain);\n        }\n    }",
    "right" : "private static class DefaultTargetPlatformConfiguration implements TargetPlatformConfiguration {\n        //TODO this should be a container of platforms\n        private final Collection<String> platformNames;\n        private Action<? super GccPlatformToolChain> configurationAction;\n\n        public DefaultTargetPlatformConfiguration(Collection<String> targetPlatformNames, Action<? super GccPlatformToolChain> configurationAction) {\n            this.platformNames = targetPlatformNames;\n            this.configurationAction = configurationAction;\n        }\n\n        public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return platformNames.contains(targetPlatform.getName());\n        }\n\n        public void apply(DefaultGccPlatformToolChain platformToolChain) {\n            configurationAction.execute(platformToolChain);\n        }\n    }",
    "info" : "TypeDeclaration[12047-12916]:TypeDeclaration[12655-13524]"
  }, {
    "left" : "private final Collection<String> platformNames;",
    "right" : "private final Collection<String> platformNames;",
    "info" : "FieldDeclaration[12207-12254]:FieldDeclaration[12815-12862]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[12263-12328]:FieldDeclaration[12871-12936]"
  }, {
    "left" : "public targetPlatformNames Collection<String>, configurationAction Action<null>)",
    "right" : "public targetPlatformNames Collection<String>, configurationAction Action<null>)",
    "info" : "MethodDeclaration[12338-12603]:MethodDeclaration[12946-13211]"
  }, {
    "left" : "public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return platformNames.contains(targetPlatform.getName());\n        }",
    "right" : "public boolean supportsPlatform(NativePlatformInternal targetPlatform) {\n            return platformNames.contains(targetPlatform.getName());\n        }",
    "info" : "MethodDeclaration[12613-12764]:MethodDeclaration[13221-13372]"
  }, {
    "left" : "public void apply(DefaultGccPlatformToolChain platformToolChain) {\n            configurationAction.execute(platformToolChain);\n        }",
    "right" : "public void apply(DefaultGccPlatformToolChain platformToolChain) {\n            configurationAction.execute(platformToolChain);\n        }",
    "info" : "MethodDeclaration[12774-12910]:MethodDeclaration[13382-13518]"
  } ],
  "mappings" : [
 {
    "left" : "import org.gradle.process.internal.ExecActionFactory;",
    "right" : "import org.gradle.nativeplatform.platform.NativePlatform;",
    "info" : "ImportDeclaration[2123-2176]:ImportDeclaration[989-1046]"
  }, {
    "left" : "import org.slf4j.Logger;",
    "right" : "import org.gradle.nativeplatform.platform.internal.NativePlatformInternal;",
    "info" : "ImportDeclaration[2177-2201]:ImportDeclaration[1047-1121]"
  }, {
    "left" : "import org.slf4j.LoggerFactory;",
    "right" : "import org.gradle.nativeplatform.toolchain.GccCompatibleToolChain;",
    "info" : "ImportDeclaration[2202-2233]:ImportDeclaration[1122-1188]"
  }, {
    "left" : "import java.io.File;",
    "right" : "import com.google.common.collect.Maps;",
    "info" : "ImportDeclaration[2235-2255]:ImportDeclaration[675-713]"
  }, {
    "left" : "import java.util.ArrayList;",
    "right" : "import org.gradle.nativeplatform.toolchain.NativePlatformToolChain;",
    "info" : "ImportDeclaration[2256-2283]:ImportDeclaration[1254-1321]"
  }, {
    "left" : "import java.util.Collection;",
    "right" : "import org.gradle.api.Action;",
    "info" : "ImportDeclaration[2284-2312]:ImportDeclaration[714-743]"
  }, {
    "left" : "import static java.util.Arrays.asList;",
    "right" : "import org.gradle.api.internal.file.FileResolver;",
    "info" : "ImportDeclaration[2337-2375]:ImportDeclaration[744-793]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2425-2431]:Modifier[2544-2550]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[2432-2440]:Modifier[2551-2559]"
  }, {
    "left" : "ExtendableToolChain<GccPlatformToolChain>",
    "right" : "ExtendableToolChain<GccPlatformToolChain>",
    "info" : "ParameterizedType[2486-2527]:ParameterizedType[2605-2646]"
  }, {
    "left" : "GccCompatibleToolChain",
    "right" : "GccCompatibleToolChain",
    "info" : "SimpleType[2539-2561]:SimpleType[2658-2680]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3037-3043]:Modifier[3251-3257]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[3075-3086]:SingleVariableDeclaration[3289-3300]"
  }, {
    "left" : "BuildOperationProcessor buildOperationProcessor",
    "right" : "BuildOperationProcessor buildOperationProcessor",
    "info" : "SingleVariableDeclaration[3088-3135]:SingleVariableDeclaration[3302-3349]"
  }, {
    "left" : "OperatingSystem operatingSystem",
    "right" : "OperatingSystem operatingSystem",
    "info" : "SingleVariableDeclaration[3137-3168]:SingleVariableDeclaration[3351-3382]"
  }, {
    "left" : "FileResolver fileResolver",
    "right" : "FileResolver fileResolver",
    "info" : "SingleVariableDeclaration[3170-3195]:SingleVariableDeclaration[3384-3409]"
  }, {
    "left" : "ExecActionFactory execActionFactory",
    "right" : "ExecActionFactory execActionFactory",
    "info" : "SingleVariableDeclaration[3197-3232]:SingleVariableDeclaration[3411-3446]"
  }, {
    "left" : "CompilerMetaDataProvider metaDataProvider",
    "right" : "CompilerMetaDataProvider metaDataProvider",
    "info" : "SingleVariableDeclaration[3234-3275]:SingleVariableDeclaration[3448-3489]"
  }, {
    "left" : "Instantiator instantiator",
    "right" : "Instantiator instantiator",
    "info" : "SingleVariableDeclaration[3277-3302]:SingleVariableDeclaration[3491-3516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3304-3475]:Block[3518-3689]"
  }, {
    "left" : "this(name, buildOperationProcessor, operatingSystem, fileResolver, execActionFactory, new ToolSearchPath(operatingSystem), metaDataProvider, instantiator);",
    "right" : "this(name, buildOperationProcessor, operatingSystem, fileResolver, execActionFactory, new ToolSearchPath(operatingSystem), metaDataProvider, instantiator);",
    "info" : "ConstructorInvocation[3314-3469]:ConstructorInvocation[3528-3683]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[3512-3523]:SingleVariableDeclaration[3726-3737]"
  }, {
    "left" : "BuildOperationProcessor buildOperationProcessor",
    "right" : "BuildOperationProcessor buildOperationProcessor",
    "info" : "SingleVariableDeclaration[3525-3572]:SingleVariableDeclaration[3739-3786]"
  }, {
    "left" : "OperatingSystem operatingSystem",
    "right" : "OperatingSystem operatingSystem",
    "info" : "SingleVariableDeclaration[3574-3605]:SingleVariableDeclaration[3788-3819]"
  }, {
    "left" : "FileResolver fileResolver",
    "right" : "FileResolver fileResolver",
    "info" : "SingleVariableDeclaration[3607-3632]:SingleVariableDeclaration[3821-3846]"
  }, {
    "left" : "ExecActionFactory execActionFactory",
    "right" : "ExecActionFactory execActionFactory",
    "info" : "SingleVariableDeclaration[3634-3669]:SingleVariableDeclaration[3848-3883]"
  }, {
    "left" : "ToolSearchPath tools",
    "right" : "ToolSearchPath tools",
    "info" : "SingleVariableDeclaration[3671-3691]:SingleVariableDeclaration[3885-3905]"
  }, {
    "left" : "CompilerMetaDataProvider metaDataProvider",
    "right" : "CompilerMetaDataProvider metaDataProvider",
    "info" : "SingleVariableDeclaration[3693-3734]:SingleVariableDeclaration[3907-3948]"
  }, {
    "left" : "Instantiator instantiator",
    "right" : "Instantiator instantiator",
    "info" : "SingleVariableDeclaration[3736-3761]:SingleVariableDeclaration[3950-3975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3763-4149]:Block[3977-4363]"
  }, {
    "left" : "super(name, buildOperationProcessor, operatingSystem, fileResolver);",
    "right" : "super(name, buildOperationProcessor, operatingSystem, fileResolver);",
    "info" : "SuperConstructorInvocation[3773-3841]:SuperConstructorInvocation[3987-4055]"
  }, {
    "left" : "this.execActionFactory = execActionFactory;",
    "right" : "this.execActionFactory = execActionFactory;",
    "info" : "ExpressionStatement[3850-3893]:ExpressionStatement[4064-4107]"
  }, {
    "left" : "this.toolSearchPath = tools;",
    "right" : "this.toolSearchPath = tools;",
    "info" : "ExpressionStatement[3902-3930]:ExpressionStatement[4116-4144]"
  }, {
    "left" : "this.metaDataProvider = metaDataProvider;",
    "right" : "this.metaDataProvider = metaDataProvider;",
    "info" : "ExpressionStatement[3939-3980]:ExpressionStatement[4153-4194]"
  }, {
    "left" : "this.instantiator = instantiator;",
    "right" : "this.instantiator = instantiator;",
    "info" : "ExpressionStatement[3989-4022]:ExpressionStatement[4203-4236]"
  }, {
    "left" : "target(new Intel32Architecture());",
    "right" : "target(new Intel32Architecture());",
    "info" : "ExpressionStatement[4032-4066]:ExpressionStatement[4246-4280]"
  }, {
    "left" : "target(new Intel64Architecture());",
    "right" : "target(new Intel64Architecture());",
    "info" : "ExpressionStatement[4075-4109]:ExpressionStatement[4289-4323]"
  }, {
    "left" : "configInsertLocation = 0;",
    "right" : "configInsertLocation = 0;",
    "info" : "ExpressionStatement[4118-4143]:ExpressionStatement[4332-4357]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4155-4164]:Modifier[4369-4378]"
  }, {
    "left" : "CommandLineToolSearchResult",
    "right" : "CommandLineToolSearchResult",
    "info" : "SimpleType[4165-4192]:SimpleType[4379-4406]"
  }, {
    "left" : "GccCommandLineToolConfigurationInternal gccTool",
    "right" : "GccCommandLineToolConfigurationInternal gccTool",
    "info" : "SingleVariableDeclaration[4200-4247]:SingleVariableDeclaration[4414-4461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4249-4342]:Block[4463-4556]"
  }, {
    "left" : "return toolSearchPath.locate(gccTool.getToolType(), gccTool.getExecutable());",
    "right" : "return toolSearchPath.locate(gccTool.getToolType(), gccTool.getExecutable());",
    "info" : "ReturnStatement[4259-4336]:ReturnStatement[4473-4550]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4348-4354]:Modifier[4562-4568]"
  }, {
    "left" : "List<File>",
    "right" : "List<File>",
    "info" : "ParameterizedType[4355-4365]:ParameterizedType[4569-4579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4376-4424]:Block[4590-4638]"
  }, {
    "left" : "return toolSearchPath.getPath();",
    "right" : "return toolSearchPath.getPath();",
    "info" : "ReturnStatement[4386-4418]:ReturnStatement[4600-4632]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4430-4436]:Modifier[4644-4650]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4437-4441]:PrimitiveType[4651-4655]"
  }, {
    "left" : "Object... pathEntries",
    "right" : "Object... pathEntries",
    "info" : "SingleVariableDeclaration[4447-4468]:SingleVariableDeclaration[4661-4682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4470-4577]:Block[4684-4791]"
  }, {
    "left" : "for (Object path : pathEntries)",
    "right" : "for (Object path : pathEntries)",
    "info" : "EnhancedForStatement[4480-4571]:EnhancedForStatement[4694-4785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4512-4571]:Block[4726-4785]"
  }, {
    "left" : "toolSearchPath.path(resolve(path));",
    "right" : "toolSearchPath.path(resolve(path));",
    "info" : "ExpressionStatement[4526-4561]:ExpressionStatement[4740-4775]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4583-4592]:Modifier[4797-4806]"
  }, {
    "left" : "CompilerMetaDataProvider",
    "right" : "CompilerMetaDataProvider",
    "info" : "SimpleType[4593-4617]:SimpleType[4807-4831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4640-4680]:Block[4854-4894]"
  }, {
    "left" : "return metaDataProvider;",
    "right" : "return metaDataProvider;",
    "info" : "ReturnStatement[4650-4674]:ReturnStatement[4864-4888]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4686-4692]:Modifier[4900-4906]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4693-4697]:PrimitiveType[4907-4911]"
  }, {
    "left" : "String platformName",
    "right" : "String platformName",
    "info" : "SingleVariableDeclaration[4705-4724]:SingleVariableDeclaration[4919-4938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4726-4809]:Block[4940-5023]"
  }, {
    "left" : "target(platformName, Actions.<NativePlatformToolChain>doNothing());",
    "right" : "target(platformName, Actions.<NativePlatformToolChain>doNothing());",
    "info" : "ExpressionStatement[4736-4803]:ExpressionStatement[4950-5017]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4815-4821]:Modifier[5029-5035]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4822-4826]:PrimitiveType[5036-5040]"
  }, {
    "left" : "String platformName",
    "right" : "String platformName",
    "info" : "SingleVariableDeclaration[4834-4853]:SingleVariableDeclaration[5048-5067]"
  }, {
    "left" : "Action<? super GccPlatformToolChain> action",
    "right" : "Action<? super GccPlatformToolChain> action",
    "info" : "SingleVariableDeclaration[4855-4898]:SingleVariableDeclaration[5069-5112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4900-4993]:Block[5114-5207]"
  }, {
    "left" : "target(new DefaultTargetPlatformConfiguration(asList(platformName), action));",
    "right" : "target(new DefaultTargetPlatformConfiguration(asList(platformName), action));",
    "info" : "ExpressionStatement[4910-4987]:ExpressionStatement[5124-5201]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4999-5005]:Modifier[5213-5219]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5006-5010]:PrimitiveType[5220-5224]"
  }, {
    "left" : "List<String> platformNames",
    "right" : "List<String> platformNames",
    "info" : "SingleVariableDeclaration[5018-5044]:SingleVariableDeclaration[5232-5258]"
  }, {
    "left" : "Action<? super GccPlatformToolChain> action",
    "right" : "Action<? super GccPlatformToolChain> action",
    "info" : "SingleVariableDeclaration[5046-5089]:SingleVariableDeclaration[5260-5303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5091-5177]:Block[5305-5391]"
  }, {
    "left" : "target(new DefaultTargetPlatformConfiguration(platformNames, action));",
    "right" : "target(new DefaultTargetPlatformConfiguration(platformNames, action));",
    "info" : "ExpressionStatement[5101-5171]:ExpressionStatement[5315-5385]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5183-5190]:Modifier[5397-5404]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5191-5195]:PrimitiveType[5405-5409]"
  }, {
    "left" : "TargetPlatformConfiguration targetPlatformConfiguration",
    "right" : "TargetPlatformConfiguration targetPlatformConfiguration",
    "info" : "SingleVariableDeclaration[5203-5258]:SingleVariableDeclaration[5417-5472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5260-5379]:Block[5474-5593]"
  }, {
    "left" : "platformConfigs.add(configInsertLocation, targetPlatformConfiguration);",
    "right" : "platformConfigs.add(configInsertLocation, targetPlatformConfiguration);",
    "info" : "ExpressionStatement[5270-5341]:ExpressionStatement[5484-5555]"
  }, {
    "left" : "configInsertLocation++;",
    "right" : "configInsertLocation++;",
    "info" : "ExpressionStatement[5350-5373]:ExpressionStatement[5564-5587]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5385-5391]:Modifier[5599-5605]"
  }, {
    "left" : "PlatformToolProvider",
    "right" : "PlatformToolProvider",
    "info" : "SimpleType[5392-5412]:SimpleType[5606-5626]"
  }, {
    "left" : "NativePlatformInternal",
    "right" : "NativePlatformInternal",
    "info" : "SimpleType[5420-5442]:SimpleType[5634-5656]"
  }, {
    "left" : "NativePlatformInternal targetPlatform",
    "right" : "NativePlatformInternal targetPlatform",
    "info" : "SingleVariableDeclaration[5420-5457]:SingleVariableDeclaration[6028-6065]"
  }, {
    "left" : "targetPlatform",
    "right" : "targetPlatform",
    "info" : "SimpleName[5443-5457]:SimpleName[5657-5671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5459-6734]:Block[6067-7342]"
  }, {
    "left" : "TargetPlatformConfiguration targetPlatformConfigurationConfiguration = getPlatformConfiguration(targetPlatform);",
    "right" : "TargetPlatformConfiguration targetPlatformConfigurationConfiguration = getPlatformConfiguration(targetPlatform);",
    "info" : "VariableDeclarationStatement[5469-5581]:VariableDeclarationStatement[6077-6189]"
  }, {
    "left" : "ToolChainAvailability result = new ToolChainAvailability();",
    "right" : "ToolChainAvailability result = new ToolChainAvailability();",
    "info" : "VariableDeclarationStatement[5590-5649]:VariableDeclarationStatement[6198-6257]"
  }, {
    "left" : "if (targetPlatformConfigurationConfiguration == null)",
    "right" : "if (targetPlatformConfigurationConfiguration == null)",
    "info" : "IfStatement[5658-5943]:IfStatement[6266-6551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5712-5943]:Block[6320-6551]"
  }, {
    "left" : "result.unavailable(String.format(\"Don't know how to build for platform '%s'.\", targetPlatform.getName()));",
    "right" : "result.unavailable(String.format(\"Don't know how to build for platform '%s'.\", targetPlatform.getName()));",
    "info" : "ExpressionStatement[5726-5832]:ExpressionStatement[6334-6440]"
  }, {
    "left" : "return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);",
    "right" : "return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);",
    "info" : "ReturnStatement[5845-5933]:ReturnStatement[6453-6541]"
  }, {
    "left" : "DefaultGccPlatformToolChain configurableToolChain = instantiator.newInstance(DefaultGccPlatformToolChain.class, targetPlatform);",
    "right" : "DefaultGccPlatformToolChain configurableToolChain = instantiator.newInstance(DefaultGccPlatformToolChain.class, targetPlatform);",
    "info" : "VariableDeclarationStatement[5953-6081]:VariableDeclarationStatement[6561-6689]"
  }, {
    "left" : "addDefaultTools(configurableToolChain);",
    "right" : "addDefaultTools(configurableToolChain);",
    "info" : "ExpressionStatement[6090-6129]:ExpressionStatement[6698-6737]"
  }, {
    "left" : "configureDefaultTools(configurableToolChain);",
    "right" : "configureDefaultTools(configurableToolChain);",
    "info" : "ExpressionStatement[6138-6183]:ExpressionStatement[6746-6791]"
  }, {
    "left" : "targetPlatformConfigurationConfiguration.apply(configurableToolChain);",
    "right" : "targetPlatformConfigurationConfiguration.apply(configurableToolChain);",
    "info" : "ExpressionStatement[6192-6262]:ExpressionStatement[6800-6870]"
  }, {
    "left" : "configureActions.execute(configurableToolChain);",
    "right" : "configureActions.execute(configurableToolChain);",
    "info" : "ExpressionStatement[6271-6319]:ExpressionStatement[6879-6927]"
  }, {
    "left" : "initTools(configurableToolChain, result);",
    "right" : "initTools(configurableToolChain, result);",
    "info" : "ExpressionStatement[6329-6370]:ExpressionStatement[6937-6978]"
  }, {
    "left" : "if (!result.isAvailable())",
    "right" : "if (!result.isAvailable())",
    "info" : "IfStatement[6379-6518]:IfStatement[6987-7126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6406-6518]:Block[7014-7126]"
  }, {
    "left" : "return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);",
    "right" : "return new UnavailablePlatformToolProvider(targetPlatform.getOperatingSystem(), result);",
    "info" : "ReturnStatement[6420-6508]:ReturnStatement[7028-7116]"
  }, {
    "left" : "return new GccPlatformToolProvider(buildOperationProcessor, targetPlatform.getOperatingSystem(), toolSearchPath, configurableToolChain, execActionFactory, configurableToolChain.isCanUseCommandFile());",
    "right" : "return new GccPlatformToolProvider(buildOperationProcessor, targetPlatform.getOperatingSystem(), toolSearchPath, configurableToolChain, execActionFactory, configurableToolChain.isCanUseCommandFile());",
    "info" : "ReturnStatement[6528-6728]:ReturnStatement[7136-7336]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[6740-6749]:Modifier[7348-7357]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6750-6754]:PrimitiveType[7358-7362]"
  }, {
    "left" : "DefaultGccPlatformToolChain platformToolChain",
    "right" : "DefaultGccPlatformToolChain platformToolChain",
    "info" : "SingleVariableDeclaration[6765-6810]:SingleVariableDeclaration[7373-7418]"
  }, {
    "left" : "ToolChainAvailability availability",
    "right" : "ToolChainAvailability availability",
    "info" : "SingleVariableDeclaration[6812-6846]:SingleVariableDeclaration[7420-7454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6848-8462]:Block[7456-9070]"
  }, {
    "left" : "boolean found = false;",
    "right" : "boolean found = false;",
    "info" : "VariableDeclarationStatement[6941-6963]:VariableDeclarationStatement[7549-7571]"
  }, {
    "left" : "for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getCompilers())",
    "right" : "for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getCompilers())",
    "info" : "EnhancedForStatement[6972-7821]:EnhancedForStatement[7580-8429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7058-7821]:Block[7666-8429]"
  }, {
    "left" : "CommandLineToolSearchResult compiler = locate(tool);",
    "right" : "CommandLineToolSearchResult compiler = locate(tool);",
    "info" : "VariableDeclarationStatement[7072-7124]:VariableDeclarationStatement[7680-7732]"
  }, {
    "left" : "if (compiler.isAvailable())",
    "right" : "if (compiler.isAvailable())",
    "info" : "IfStatement[7137-7811]:IfStatement[7745-8419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7165-7811]:Block[7773-8419]"
  }, {
    "left" : "GccVersionResult versionResult = getMetaDataProvider().getGccMetaData(compiler.getTool(), platformToolChain.getCompilerProbeArgs());",
    "right" : "GccVersionResult versionResult = getMetaDataProvider().getGccMetaData(compiler.getTool(), platformToolChain.getCompilerProbeArgs());",
    "info" : "VariableDeclarationStatement[7183-7315]:VariableDeclarationStatement[7791-7923]"
  }, {
    "left" : "availability.mustBeAvailable(versionResult);",
    "right" : "availability.mustBeAvailable(versionResult);",
    "info" : "ExpressionStatement[7332-7376]:ExpressionStatement[7940-7984]"
  }, {
    "left" : "if (!versionResult.isAvailable())",
    "right" : "if (!versionResult.isAvailable())",
    "info" : "IfStatement[7393-7474]:IfStatement[8001-8082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7427-7474]:Block[8035-8082]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7449-7456]:ReturnStatement[8057-8064]"
  }, {
    "left" : "LOGGER.debug(\"Found {} with version {}\", ToolType.C_COMPILER.getToolName(), versionResult);",
    "right" : "LOGGER.debug(\"Found {} with version {}\", ToolType.C_COMPILER.getToolName(), versionResult);",
    "info" : "ExpressionStatement[7580-7671]:ExpressionStatement[8188-8279]"
  }, {
    "left" : "found = true;",
    "right" : "found = true;",
    "info" : "ExpressionStatement[7688-7701]:ExpressionStatement[8296-8309]"
  }, {
    "left" : "initForImplementation(platformToolChain, versionResult);",
    "right" : "initForImplementation(platformToolChain, versionResult);",
    "info" : "ExpressionStatement[7718-7774]:ExpressionStatement[8326-8382]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7791-7797]:BreakStatement[8399-8405]"
  }, {
    "left" : "for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getTools())",
    "right" : "for (GccCommandLineToolConfigurationInternal tool : platformToolChain.getTools())",
    "info" : "EnhancedForStatement[7870-8063]:EnhancedForStatement[8478-8671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7952-8063]:Block[8560-8671]"
  }, {
    "left" : "found |= toolSearchPath.locate(tool.getToolType(), tool.getExecutable()).isAvailable();",
    "right" : "found |= toolSearchPath.locate(tool.getToolType(), tool.getExecutable()).isAvailable();",
    "info" : "ExpressionStatement[7966-8053]:ExpressionStatement[8574-8661]"
  }, {
    "left" : "if (!found)",
    "right" : "if (!found)",
    "info" : "IfStatement[8072-8456]:IfStatement[8680-9064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8084-8456]:Block[8692-9064]"
  }, {
    "left" : "GccCommandLineToolConfigurationInternal cCompiler = platformToolChain.getcCompiler();",
    "right" : "GccCommandLineToolConfigurationInternal cCompiler = platformToolChain.getcCompiler();",
    "info" : "VariableDeclarationStatement[8300-8385]:VariableDeclarationStatement[8908-8993]"
  }, {
    "left" : "availability.mustBeAvailable(locate(cCompiler));",
    "right" : "availability.mustBeAvailable(locate(cCompiler));",
    "info" : "ExpressionStatement[8398-8446]:ExpressionStatement[9006-9054]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[8468-8477]:Modifier[9076-9085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8478-8482]:PrimitiveType[9086-9090]"
  }, {
    "left" : "DefaultGccPlatformToolChain platformToolChain",
    "right" : "DefaultGccPlatformToolChain platformToolChain",
    "info" : "SingleVariableDeclaration[8505-8550]:SingleVariableDeclaration[9113-9158]"
  }, {
    "left" : "GccVersionResult versionResult",
    "right" : "GccVersionResult versionResult",
    "info" : "SingleVariableDeclaration[8552-8582]:SingleVariableDeclaration[9160-9190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8584-8591]:Block[9192-9199]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8597-8604]:Modifier[9205-9212]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8605-8609]:PrimitiveType[9213-9217]"
  }, {
    "left" : "DefaultGccPlatformToolChain toolChain",
    "right" : "DefaultGccPlatformToolChain toolChain",
    "info" : "SingleVariableDeclaration[8626-8663]:SingleVariableDeclaration[9234-9271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8665-9558]:Block[9273-10166]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.C_COMPILER, \"gcc\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.C_COMPILER, \"gcc\"));",
    "info" : "ExpressionStatement[8675-8789]:ExpressionStatement[9283-9397]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.CPP_COMPILER, \"g++\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.CPP_COMPILER, \"g++\"));",
    "info" : "ExpressionStatement[8798-8914]:ExpressionStatement[9406-9522]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.LINKER, \"g++\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.LINKER, \"g++\"));",
    "info" : "ExpressionStatement[8923-9033]:ExpressionStatement[9531-9641]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.STATIC_LIB_ARCHIVER, \"ar\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.STATIC_LIB_ARCHIVER, \"ar\"));",
    "info" : "ExpressionStatement[9042-9164]:ExpressionStatement[9650-9772]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVECPP_COMPILER, \"g++\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVECPP_COMPILER, \"g++\"));",
    "info" : "ExpressionStatement[9173-9298]:ExpressionStatement[9781-9906]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVEC_COMPILER, \"gcc\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.OBJECTIVEC_COMPILER, \"gcc\"));",
    "info" : "ExpressionStatement[9307-9430]:ExpressionStatement[9915-10038]"
  }, {
    "left" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.ASSEMBLER, \"gcc\"));",
    "right" : "toolChain.add(instantiator.newInstance(DefaultGccCommandLineToolConfiguration.class, ToolType.ASSEMBLER, \"gcc\"));",
    "info" : "ExpressionStatement[9439-9552]:ExpressionStatement[10047-10160]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9564-9573]:Modifier[10172-10181]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9574-9578]:PrimitiveType[10182-10186]"
  }, {
    "left" : "DefaultGccPlatformToolChain toolChain",
    "right" : "DefaultGccPlatformToolChain toolChain",
    "info" : "SingleVariableDeclaration[9601-9638]:SingleVariableDeclaration[10209-10246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9640-9647]:Block[10248-10255]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[9653-9662]:Modifier[10261-10270]"
  }, {
    "left" : "TargetPlatformConfiguration",
    "right" : "TargetPlatformConfiguration",
    "info" : "SimpleType[9663-9690]:SimpleType[10271-10298]"
  }, {
    "left" : "NativePlatformInternal targetPlatform",
    "right" : "NativePlatformInternal targetPlatform",
    "info" : "SingleVariableDeclaration[9716-9753]:SingleVariableDeclaration[10324-10361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9755-9990]:Block[10363-10598]"
  }, {
    "left" : "for (TargetPlatformConfiguration platformConfig : platformConfigs)",
    "right" : "for (TargetPlatformConfiguration platformConfig : platformConfigs)",
    "info" : "EnhancedForStatement[9765-9963]:EnhancedForStatement[10373-10571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9832-9963]:Block[10440-10571]"
  }, {
    "left" : "if (platformConfig.supportsPlatform(targetPlatform))",
    "right" : "if (platformConfig.supportsPlatform(targetPlatform))",
    "info" : "IfStatement[9846-9953]:IfStatement[10454-10561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9899-9953]:Block[10507-10561]"
  }, {
    "left" : "return platformConfig;",
    "right" : "return platformConfig;",
    "info" : "ReturnStatement[9917-9939]:ReturnStatement[10525-10547]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[9972-9984]:ReturnStatement[10580-10592]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9996-10003]:Modifier[10604-10611]"
  }, {
    "left" : "TargetPlatformConfiguration",
    "right" : "TargetPlatformConfiguration",
    "info" : "SimpleType[10041-10068]:SimpleType[10649-10676]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10080-10086]:Modifier[10688-10694]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10087-10094]:PrimitiveType[10695-10702]"
  }, {
    "left" : "NativePlatformInternal targetPlatform",
    "right" : "NativePlatformInternal targetPlatform",
    "info" : "SingleVariableDeclaration[10112-10149]:SingleVariableDeclaration[10720-10757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10151-10275]:Block[10759-10883]"
  }, {
    "left" : "return targetPlatform.getOperatingSystem().isCurrent() && targetPlatform.getArchitecture().isI386();",
    "right" : "return targetPlatform.getOperatingSystem().isCurrent() && targetPlatform.getArchitecture().isI386();",
    "info" : "ReturnStatement[10165-10265]:ReturnStatement[10773-10873]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10285-10291]:Modifier[10893-10899]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10292-10296]:PrimitiveType[10900-10904]"
  }, {
    "left" : "DefaultGccPlatformToolChain gccToolChain",
    "right" : "DefaultGccPlatformToolChain gccToolChain",
    "info" : "SingleVariableDeclaration[10303-10343]:SingleVariableDeclaration[10911-10951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10345-11000]:Block[10953-11608]"
  }, {
    "left" : "gccToolChain.compilerProbeArgs(\"-m32\");",
    "right" : "gccToolChain.compilerProbeArgs(\"-m32\");",
    "info" : "ExpressionStatement[10359-10398]:ExpressionStatement[10967-11006]"
  }, {
    "left" : "Action<List<String>> m32args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m32\");\n                }\n            };",
    "right" : "Action<List<String>> m32args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m32\");\n                }\n            };",
    "info" : "VariableDeclarationStatement[10411-10598]:VariableDeclarationStatement[11019-11206]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10487-10493]:Modifier[11095-11101]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10494-10498]:PrimitiveType[11102-11106]"
  }, {
    "left" : "List<String> args",
    "right" : "List<String> args",
    "info" : "SingleVariableDeclaration[10507-10524]:SingleVariableDeclaration[11115-11132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10526-10583]:Block[11134-11191]"
  }, {
    "left" : "args.add(\"-m32\");",
    "right" : "args.add(\"-m32\");",
    "info" : "ExpressionStatement[10548-10565]:ExpressionStatement[11156-11173]"
  }, {
    "left" : "gccToolChain.getCppCompiler().withArguments(m32args);",
    "right" : "gccToolChain.getCppCompiler().withArguments(m32args);",
    "info" : "ExpressionStatement[10611-10664]:ExpressionStatement[11219-11272]"
  }, {
    "left" : "gccToolChain.getcCompiler().withArguments(m32args);",
    "right" : "gccToolChain.getcCompiler().withArguments(m32args);",
    "info" : "ExpressionStatement[10677-10728]:ExpressionStatement[11285-11336]"
  }, {
    "left" : "gccToolChain.getObjcCompiler().withArguments(m32args);",
    "right" : "gccToolChain.getObjcCompiler().withArguments(m32args);",
    "info" : "ExpressionStatement[10741-10795]:ExpressionStatement[11349-11403]"
  }, {
    "left" : "gccToolChain.getObjcppCompiler().withArguments(m32args);",
    "right" : "gccToolChain.getObjcppCompiler().withArguments(m32args);",
    "info" : "ExpressionStatement[10808-10864]:ExpressionStatement[11416-11472]"
  }, {
    "left" : "gccToolChain.getLinker().withArguments(m32args);",
    "right" : "gccToolChain.getLinker().withArguments(m32args);",
    "info" : "ExpressionStatement[10877-10925]:ExpressionStatement[11485-11533]"
  }, {
    "left" : "gccToolChain.getAssembler().withArguments(m32args);",
    "right" : "gccToolChain.getAssembler().withArguments(m32args);",
    "info" : "ExpressionStatement[10938-10989]:ExpressionStatement[11546-11597]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11012-11019]:Modifier[11620-11627]"
  }, {
    "left" : "TargetPlatformConfiguration",
    "right" : "TargetPlatformConfiguration",
    "info" : "SimpleType[11057-11084]:SimpleType[11665-11692]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11095-11101]:Modifier[11703-11709]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11102-11109]:PrimitiveType[11710-11717]"
  }, {
    "left" : "NativePlatformInternal targetPlatform",
    "right" : "NativePlatformInternal targetPlatform",
    "info" : "SingleVariableDeclaration[11127-11164]:SingleVariableDeclaration[11735-11772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11166-11311]:Block[11774-11919]"
  }, {
    "left" : "return targetPlatform.getOperatingSystem().isCurrent()\n                    && targetPlatform.getArchitecture().isAmd64();",
    "right" : "return targetPlatform.getOperatingSystem().isCurrent()\n                    && targetPlatform.getArchitecture().isAmd64();",
    "info" : "ReturnStatement[11180-11301]:ReturnStatement[11788-11909]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11321-11327]:Modifier[11929-11935]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11328-11332]:PrimitiveType[11936-11940]"
  }, {
    "left" : "DefaultGccPlatformToolChain gccToolChain",
    "right" : "DefaultGccPlatformToolChain gccToolChain",
    "info" : "SingleVariableDeclaration[11339-11379]:SingleVariableDeclaration[11947-11987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11381-12035]:Block[11989-12643]"
  }, {
    "left" : "gccToolChain.compilerProbeArgs(\"-m64\");",
    "right" : "gccToolChain.compilerProbeArgs(\"-m64\");",
    "info" : "ExpressionStatement[11395-11434]:ExpressionStatement[12003-12042]"
  }, {
    "left" : "Action<List<String>> m64args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m64\");\n                }\n            };",
    "right" : "Action<List<String>> m64args = new Action<List<String>>() {\n                public void execute(List<String> args) {\n                    args.add(\"-m64\");\n                }\n            };",
    "info" : "VariableDeclarationStatement[11447-11634]:VariableDeclarationStatement[12055-12242]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11523-11529]:Modifier[12131-12137]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11530-11534]:PrimitiveType[12138-12142]"
  }, {
    "left" : "List<String> args",
    "right" : "List<String> args",
    "info" : "SingleVariableDeclaration[11543-11560]:SingleVariableDeclaration[12151-12168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11562-11619]:Block[12170-12227]"
  }, {
    "left" : "args.add(\"-m64\");",
    "right" : "args.add(\"-m64\");",
    "info" : "ExpressionStatement[11584-11601]:ExpressionStatement[12192-12209]"
  }, {
    "left" : "gccToolChain.getCppCompiler().withArguments(m64args);",
    "right" : "gccToolChain.getCppCompiler().withArguments(m64args);",
    "info" : "ExpressionStatement[11647-11700]:ExpressionStatement[12255-12308]"
  }, {
    "left" : "gccToolChain.getcCompiler().withArguments(m64args);",
    "right" : "gccToolChain.getcCompiler().withArguments(m64args);",
    "info" : "ExpressionStatement[11713-11764]:ExpressionStatement[12321-12372]"
  }, {
    "left" : "gccToolChain.getObjcCompiler().withArguments(m64args);",
    "right" : "gccToolChain.getObjcCompiler().withArguments(m64args);",
    "info" : "ExpressionStatement[11777-11831]:ExpressionStatement[12385-12439]"
  }, {
    "left" : "gccToolChain.getObjcppCompiler().withArguments(m64args);",
    "right" : "gccToolChain.getObjcppCompiler().withArguments(m64args);",
    "info" : "ExpressionStatement[11844-11900]:ExpressionStatement[12452-12508]"
  }, {
    "left" : "gccToolChain.getLinker().withArguments(m64args);",
    "right" : "gccToolChain.getLinker().withArguments(m64args);",
    "info" : "ExpressionStatement[11913-11961]:ExpressionStatement[12521-12569]"
  }, {
    "left" : "gccToolChain.getAssembler().withArguments(m64args);",
    "right" : "gccToolChain.getAssembler().withArguments(m64args);",
    "info" : "ExpressionStatement[11974-12025]:ExpressionStatement[12582-12633]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12047-12054]:Modifier[12655-12662]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12055-12061]:Modifier[12663-12669]"
  }, {
    "left" : "TargetPlatformConfiguration",
    "right" : "TargetPlatformConfiguration",
    "info" : "SimpleType[12114-12141]:SimpleType[12722-12749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12338-12344]:Modifier[12946-12952]"
  }, {
    "left" : "Collection<String> targetPlatformNames",
    "right" : "Collection<String> targetPlatformNames",
    "info" : "SingleVariableDeclaration[12380-12418]:SingleVariableDeclaration[12988-13026]"
  }, {
    "left" : "Action<? super GccPlatformToolChain> configurationAction",
    "right" : "Action<? super GccPlatformToolChain> configurationAction",
    "info" : "SingleVariableDeclaration[12420-12476]:SingleVariableDeclaration[13028-13084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12478-12603]:Block[13086-13211]"
  }, {
    "left" : "this.platformNames = targetPlatformNames;",
    "right" : "this.platformNames = targetPlatformNames;",
    "info" : "ExpressionStatement[12492-12533]:ExpressionStatement[13100-13141]"
  }, {
    "left" : "this.configurationAction = configurationAction;",
    "right" : "this.configurationAction = configurationAction;",
    "info" : "ExpressionStatement[12546-12593]:ExpressionStatement[13154-13201]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12613-12619]:Modifier[13221-13227]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12620-12627]:PrimitiveType[13228-13235]"
  }, {
    "left" : "NativePlatformInternal targetPlatform",
    "right" : "NativePlatformInternal targetPlatform",
    "info" : "SingleVariableDeclaration[12645-12682]:SingleVariableDeclaration[13253-13290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12684-12764]:Block[13292-13372]"
  }, {
    "left" : "return platformNames.contains(targetPlatform.getName());",
    "right" : "return platformNames.contains(targetPlatform.getName());",
    "info" : "ReturnStatement[12698-12754]:ReturnStatement[13306-13362]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12774-12780]:Modifier[13382-13388]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12781-12785]:PrimitiveType[13389-13393]"
  }, {
    "left" : "DefaultGccPlatformToolChain platformToolChain",
    "right" : "DefaultGccPlatformToolChain platformToolChain",
    "info" : "SingleVariableDeclaration[12792-12837]:SingleVariableDeclaration[13400-13445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12839-12910]:Block[13447-13518]"
  }, {
    "left" : "configurationAction.execute(platformToolChain);",
    "right" : "configurationAction.execute(platformToolChain);",
    "info" : "ExpressionStatement[12853-12900]:ExpressionStatement[13461-13508]"
  } ]
}