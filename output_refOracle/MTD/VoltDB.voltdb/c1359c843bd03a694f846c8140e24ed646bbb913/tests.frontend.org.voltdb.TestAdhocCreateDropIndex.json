{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1321-10271]:TypeDeclaration[1321-10554]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[1435-6148]:MethodDeclaration[1435-5609]"
  }, {
    "left" : "public void testCreateDropIndexonView() throws Exception\n    {\n        String pathToCatalog = Configuration.getPathToCatalogForTest(\"adhocddl.jar\");\n        String pathToDeployment = Configuration.getPathToCatalogForTest(\"adhocddl.xml\");\n\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(\n                \"create table FOO (\" +\n                \"ID integer not null,\" +\n                \"VAL bigint, \" +\n                \"constraint PK_TREE primary key (ID)\" +\n                \");\\n\" +\n                \"create table FOO_R (\" +\n                \"ID integer not null,\" +\n                \"VAL bigint, \" +\n                \"constraint PK_TREE_R primary key (ID)\" +\n                \");\\n\"\n                );\n        builder.addPartitionInfo(\"FOO\", \"ID\");\n        builder.setUseDDLSchema(true);\n        boolean success = builder.compile(pathToCatalog, 2, 1, 0);\n        assertTrue(\"Schema compilation failed\", success);\n        MiscUtils.copyFile(builder.getPathToDeployment(), pathToDeployment);\n\n        VoltDB.Configuration config = new VoltDB.Configuration();\n        config.m_pathToCatalog = pathToCatalog;\n        config.m_pathToDeployment = pathToDeployment;\n\n        try {\n            startSystem(config);\n\n            // create a basic view\n            assertFalse(findTableInSystemCatalogResults(\"FOOVIEW\"));\n            try {\n                m_client.callProcedure(\"@AdHoc\",\n                    \"create view FOOVIEW (VAL, TOTAL) as \" +\n                    \"select VAL, COUNT(*) from FOO group by VAL;\");\n            }\n            catch (ProcCallException pce) {\n                pce.printStackTrace();\n                fail(\"Should be able to create a view\");\n            }\n            assertTrue(findTableInSystemCatalogResults(\"FOOVIEW\"));\n\n            // can't create same view again\n            boolean threw = false;\n            try {\n                m_client.callProcedure(\"@AdHoc\",\n                    \"create view FOOVIEW (VAL, TOTAL) as \" +\n                    \"select VAL, COUNT(*) from FOO group by VAL;\");\n            }\n            catch (ProcCallException pce) {\n                threw = true;\n            }\n            assertTrue(\"Shouldn't be able to create the same view twice\", threw);\n            assertTrue(findTableInSystemCatalogResults(\"FOOVIEW\"));\n\n            // Create index on view\n            assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));\n            try {\n                m_client.callProcedure(\"@AdHoc\",\n                        \"create index VALDEX on FOOVIEW (VAL);\");\n            }\n            catch (ProcCallException pce) {\n                pce.printStackTrace();\n                fail(\"Should be able to create an index on a view\");\n            }\n            assertTrue(findIndexInSystemCatalogResults(\"VALDEX\"));\n\n            // drop index\n            try {\n                m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX;\");\n            }\n            catch (ProcCallException pce) {\n                pce.printStackTrace();\n                fail(\"Should be able to drop an index on a view\");\n            }\n            assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));\n\n            // can't drop index twice\n            threw = false;\n            try {\n                m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX;\");\n            }\n            catch (ProcCallException pce) {\n                threw = true;\n            }\n            assertTrue(\"Shouldn't be able to drop bad index without if exists\", threw);\n            assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));\n            // unless we use if exists\n            try {\n                m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX if exists;\");\n            }\n            catch (ProcCallException pce) {\n                pce.printStackTrace();\n                fail(\"Should be able to drop a bad index with if exists\");\n            }\n            assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));\n        }\n        finally {\n            teardownSystem();\n        }\n    }",
    "right" : "private void createSchema(VoltDB.Configuration config,\n                              String ddl,\n                              final int sitesPerHost,\n                              final int hostCount,\n                              final int replication) throws Exception\n    {\n        VoltProjectBuilder builder = new VoltProjectBuilder();\n        builder.addLiteralSchema(ddl);\n        builder.setUseDDLSchema(true);\n        config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"adhocddl.jar\");\n        boolean success = builder.compile(config.m_pathToCatalog, sitesPerHost, hostCount, replication);\n        assertTrue(\"Schema compilation failed\", success);\n        config.m_pathToDeployment = Configuration.getPathToCatalogForTest(\"adhocddl.xml\");\n        MiscUtils.copyFile(builder.getPathToDeployment(), config.m_pathToDeployment);\n    }",
    "info" : "MethodDeclaration[6154-10269]:MethodDeclaration[9700-10552]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1321-1327]:Modifier[1321-1327]"
  }, {
    "left" : "AdhocDDLTestBase",
    "right" : "AdhocDDLTestBase",
    "info" : "SimpleType[1367-1383]:SimpleType[1367-1383]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1435-1441]:Modifier[1435-1441]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1442-1446]:PrimitiveType[1442-1446]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[1477-1486]:SimpleType[1477-1486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1491-6148]:Block[1491-5609]"
  }, {
    "left" : "String pathToCatalog = Configuration.getPathToCatalogForTest(\"adhocddl.jar\");",
    "right" : "VoltDB.Configuration config = new VoltDB.Configuration();",
    "info" : "VariableDeclarationStatement[1501-1578]:VariableDeclarationStatement[1501-1558]"
  }, {
    "left" : "pathToCatalog = Configuration.getPathToCatalogForTest(\"adhocddl.jar\")",
    "right" : "config = new VoltDB.Configuration()",
    "info" : "VariableDeclarationFragment[1508-1577]:VariableDeclarationFragment[1522-1557]"
  }, {
    "left" : "\"adhocddl.jar\"",
    "right" : "\"adhocddl.jar\"",
    "info" : "StringLiteral[1562-1576]:StringLiteral[10190-10204]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[1587-1593]:SimpleType[1567-1573]"
  }, {
    "left" : "\"adhocddl.xml\"",
    "right" : "\"adhocddl.xml\"",
    "info" : "StringLiteral[1651-1665]:StringLiteral[10444-10458]"
  }, {
    "left" : "\"create table FOO (\" +\n                \"ID integer not null,\" +\n                \"VAL bigint, \" +\n                \"constraint PK_TREE primary key (ID)\" +\n                \");\\n\" +\n                \"create table FOO_R (\" +\n                \"ID integer not null,\" +\n                \"VAL bigint, \" +\n                \"constraint PK_TREE_R primary key (ID)\" +\n                \");\\n\"",
    "right" : "\"create table FOO (\" +\n                     \"ID integer not null,\" +\n                     \"VAL bigint, \" +\n                     \"constraint PK_TREE primary key (ID)\" +\n                     \");\\n\" +\n                     \"create table FOO_R (\" +\n                     \"ID integer not null,\" +\n                     \"VAL bigint, \" +\n                     \"constraint PK_TREE_R primary key (ID)\" +\n                     \");\\n\" +\n                     \"Partition table FOO on column ID;\\n\"",
    "info" : "InfixExpression[1782-2155]:InfixExpression[1580-2059]"
  }, {
    "left" : "builder.compile(pathToCatalog, 2, 1, 0)",
    "right" : "createSchema(config, ddl, 2, 1, 0)",
    "info" : "MethodInvocation[2287-2326]:MethodInvocation[2069-2103]"
  }, {
    "left" : "builder",
    "right" : "config",
    "info" : "SimpleName[2287-2294]:SimpleName[2082-2088]"
  }, {
    "left" : "pathToCatalog",
    "right" : "ddl",
    "info" : "SimpleName[2303-2316]:SimpleName[2090-2093]"
  }, {
    "left" : "assertTrue(\"Schema compilation failed\", success);",
    "right" : "createSchema(config, ddl, 2, 1, 0);",
    "info" : "ExpressionStatement[2336-2385]:ExpressionStatement[2069-2104]"
  }, {
    "left" : "\"Schema compilation failed\"",
    "right" : "\"Schema compilation failed\"",
    "info" : "StringLiteral[2347-2374]:StringLiteral[10331-10358]"
  }, {
    "left" : "VoltDB.Configuration",
    "right" : "VoltDB.Configuration",
    "info" : "SimpleType[2472-2492]:SimpleType[1535-1555]"
  }, {
    "left" : "VoltDB.Configuration",
    "right" : "VoltDB.Configuration",
    "info" : "SimpleType[2506-2526]:SimpleType[1501-1521]"
  }, {
    "left" : "config.m_pathToCatalog",
    "right" : "config.m_pathToCatalog",
    "info" : "QualifiedName[2538-2560]:QualifiedName[10127-10149]"
  }, {
    "left" : "config.m_pathToDeployment",
    "right" : "config.m_pathToDeployment",
    "info" : "QualifiedName[2586-2611]:QualifiedName[10378-10403]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[2641-6142]:TryStatement[2114-5603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2645-6084]:Block[2118-5545]"
  }, {
    "left" : "startSystem(config);",
    "right" : "startSystem(config);",
    "info" : "ExpressionStatement[2659-2679]:ExpressionStatement[2132-2152]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "info" : "ExpressionStatement[2743-2798]:ExpressionStatement[2204-2259]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[2811-3120]:TryStatement[2272-2581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2815-2941]:Block[2276-2402]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index FOODEX on FOO (VAL);\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index FOODEX on FOO (VAL);\");",
    "info" : "ExpressionStatement[2833-2927]:ExpressionStatement[2294-2388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2984-3120]:Block[2445-2581]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[3002-3024]:ExpressionStatement[2463-2485]"
  }, {
    "left" : "fail(\"Should be able to create an index on a partitioned table\");",
    "right" : "fail(\"Should be able to create an index on a partitioned table\");",
    "info" : "ExpressionStatement[3041-3106]:ExpressionStatement[2502-2567]"
  }, {
    "left" : "assertTrue(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "right" : "assertTrue(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "info" : "ExpressionStatement[3133-3187]:ExpressionStatement[2594-2648]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX_R\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX_R\"));",
    "info" : "ExpressionStatement[3249-3306]:ExpressionStatement[2710-2767]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[3319-3631]:TryStatement[2780-3092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3323-3453]:Block[2784-2914]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index FOODEX_R on FOO_R (VAL);\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index FOODEX_R on FOO_R (VAL);\");",
    "info" : "ExpressionStatement[3341-3439]:ExpressionStatement[2802-2900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3496-3631]:Block[2957-3092]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[3514-3536]:ExpressionStatement[2975-2997]"
  }, {
    "left" : "fail(\"Should be able to create an index on a replicated table\");",
    "right" : "fail(\"Should be able to create an index on a replicated table\");",
    "info" : "ExpressionStatement[3553-3617]:ExpressionStatement[3014-3078]"
  }, {
    "left" : "assertTrue(findIndexInSystemCatalogResults(\"FOODEX_R\"));",
    "right" : "assertTrue(findIndexInSystemCatalogResults(\"FOODEX_R\"));",
    "info" : "ExpressionStatement[3644-3700]:ExpressionStatement[3105-3161]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"UNIQFOODEX\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"UNIQFOODEX\"));",
    "info" : "ExpressionStatement[3771-3830]:ExpressionStatement[3232-3291]"
  }, {
    "left" : "boolean threw = false;",
    "right" : "boolean threw = false;",
    "info" : "VariableDeclarationStatement[3843-3865]:VariableDeclarationStatement[3304-3326]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[3878-4210]:TryStatement[3339-3671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3882-4025]:Block[3343-3486]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create assumeunique index UNIQFOODEX on FOO (VAL);\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create assumeunique index UNIQFOODEX on FOO (VAL);\");",
    "info" : "ExpressionStatement[3900-4011]:ExpressionStatement[3361-3472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4068-4210]:Block[3529-3671]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[4086-4108]:ExpressionStatement[3547-3569]"
  }, {
    "left" : "fail(\"Should be able to create a unique index on a partitioned table\");",
    "right" : "fail(\"Should be able to create a unique index on a partitioned table\");",
    "info" : "ExpressionStatement[4125-4196]:ExpressionStatement[3586-3657]"
  }, {
    "left" : "assertTrue(findIndexInSystemCatalogResults(\"UNIQFOODEX\"));",
    "right" : "assertTrue(findIndexInSystemCatalogResults(\"UNIQFOODEX\"));",
    "info" : "ExpressionStatement[4223-4281]:ExpressionStatement[3684-3742]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4354-4665]:TryStatement[3815-4126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4358-4495]:Block[3819-3956]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create unique index UNIQFOODEX2 on FOO (ID);\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create unique index UNIQFOODEX2 on FOO (ID);\");",
    "info" : "ExpressionStatement[4376-4481]:ExpressionStatement[3837-3942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4538-4665]:Block[3999-4126]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[4556-4578]:ExpressionStatement[4017-4039]"
  }, {
    "left" : "fail(\"Should be able to create redundant unique index\");",
    "right" : "fail(\"Should be able to create redundant unique index\");",
    "info" : "ExpressionStatement[4595-4651]:ExpressionStatement[4056-4112]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"UNIQFOODEX2\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"UNIQFOODEX2\"));",
    "info" : "ExpressionStatement[4774-4834]:ExpressionStatement[4235-4295]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4886-5155]:TryStatement[4347-4616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4890-5001]:Block[4351-4462]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index FOODEX;\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index FOODEX;\");",
    "info" : "ExpressionStatement[4908-4987]:ExpressionStatement[4369-4448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5044-5155]:Block[4505-4616]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[5062-5084]:ExpressionStatement[4523-4545]"
  }, {
    "left" : "fail(\"Should be able to drop an index\");",
    "right" : "fail(\"Should be able to drop an index\");",
    "info" : "ExpressionStatement[5101-5141]:ExpressionStatement[4562-4602]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "info" : "ExpressionStatement[5168-5223]:ExpressionStatement[4629-4684]"
  }, {
    "left" : "threw = false;",
    "right" : "threw = false;",
    "info" : "ExpressionStatement[5271-5285]:ExpressionStatement[4732-4746]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[5298-5501]:TryStatement[4759-4962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5302-5413]:Block[4763-4874]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index FOODEX;\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index FOODEX;\");",
    "info" : "ExpressionStatement[5320-5399]:ExpressionStatement[4781-4860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5456-5501]:Block[4917-4962]"
  }, {
    "left" : "threw = true;",
    "right" : "threw = true;",
    "info" : "ExpressionStatement[5474-5487]:ExpressionStatement[4935-4948]"
  }, {
    "left" : "assertTrue(\"Shouldn't be able to drop bad index without if exists\", threw);",
    "right" : "assertTrue(\"Shouldn't be able to drop bad index without if exists\", threw);",
    "info" : "ExpressionStatement[5514-5589]:ExpressionStatement[4975-5050]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "info" : "ExpressionStatement[5602-5657]:ExpressionStatement[5063-5118]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[5709-6006]:TryStatement[5170-5467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5713-5834]:Block[5174-5295]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index FOODEX if exists;\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index FOODEX if exists;\");",
    "info" : "ExpressionStatement[5731-5820]:ExpressionStatement[5192-5281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5877-6006]:Block[5338-5467]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[5895-5917]:ExpressionStatement[5356-5378]"
  }, {
    "left" : "fail(\"Should be able to drop a bad index with if exists\");",
    "right" : "fail(\"Should be able to drop a bad index with if exists\");",
    "info" : "ExpressionStatement[5934-5992]:ExpressionStatement[5395-5453]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"FOODEX\"));",
    "info" : "ExpressionStatement[6019-6074]:ExpressionStatement[5480-5535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6101-6142]:Block[5562-5603]"
  }, {
    "left" : "teardownSystem();",
    "right" : "teardownSystem();",
    "info" : "ExpressionStatement[6115-6132]:ExpressionStatement[5576-5593]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6154-6160]:Modifier[5615-5621]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6161-6165]:PrimitiveType[5622-5626]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[6201-6210]:SimpleType[5662-5671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6215-10269]:Block[5676-9694]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6225-6231]:SimpleType[5752-5758]"
  }, {
    "left" : "pathToCatalog = Configuration.getPathToCatalogForTest(\"adhocddl.jar\")",
    "right" : "config = new VoltDB.Configuration()",
    "info" : "VariableDeclarationFragment[6232-6301]:VariableDeclarationFragment[5707-5742]"
  }, {
    "left" : "Configuration",
    "right" : "Configuration",
    "info" : "SimpleName[6248-6261]:SimpleName[10152-10165]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6311-6317]:SimpleType[9785-9791]"
  }, {
    "left" : "Configuration",
    "right" : "Configuration",
    "info" : "SimpleName[6337-6350]:SimpleName[10406-10419]"
  }, {
    "left" : "VoltProjectBuilder builder = new VoltProjectBuilder();",
    "right" : "VoltDB.Configuration config = new VoltDB.Configuration();",
    "info" : "VariableDeclarationStatement[6401-6455]:VariableDeclarationStatement[5686-5743]"
  }, {
    "left" : "VoltProjectBuilder",
    "right" : "VoltProjectBuilder",
    "info" : "SimpleType[6401-6419]:SimpleType[9986-10004]"
  }, {
    "left" : "VoltProjectBuilder",
    "right" : "VoltProjectBuilder",
    "info" : "SimpleType[6434-6452]:SimpleType[10019-10037]"
  }, {
    "left" : "\"create table FOO (\" +\n                \"ID integer not null,\" +\n                \"VAL bigint, \" +\n                \"constraint PK_TREE primary key (ID)\" +\n                \");\\n\" +\n                \"create table FOO_R (\" +\n                \"ID integer not null,\" +\n                \"VAL bigint, \" +\n                \"constraint PK_TREE_R primary key (ID)\" +\n                \");\\n\"",
    "right" : "\"create table FOO (\" +\n                     \"ID integer not null,\" +\n                     \"VAL bigint, \" +\n                     \"VAL1 float,\" +\n                     \"constraint PK_TREE primary key (ID)\" +\n                     \");\\n\" +\n                     \"create table FOO_R (\" +\n                     \"ID integer not null,\" +\n                     \"VAL bigint, \" +\n                     \"constraint PK_TREE_R primary key (ID)\" +\n                     \");\\n\" +\n                     \"Partition table FOO on column ID;\\n\"",
    "info" : "InfixExpression[6506-6879]:InfixExpression[5765-6281]"
  }, {
    "left" : "builder",
    "right" : "builder",
    "info" : "SimpleName[6907-6914]:SimpleName[10049-10056]"
  }, {
    "left" : "builder",
    "right" : "builder",
    "info" : "SimpleName[6954-6961]:SimpleName[10488-10495]"
  }, {
    "left" : "true",
    "right" : "true",
    "info" : "BooleanLiteral[6978-6982]:BooleanLiteral[8097-8101]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6993-7000]:PrimitiveType[7873-7880]"
  }, {
    "left" : "builder.compile(pathToCatalog, 2, 1, 0)",
    "right" : "createSchema(config, ddl, 2, 1, 0)",
    "info" : "MethodInvocation[7011-7050]:MethodInvocation[6291-6325]"
  }, {
    "left" : "builder",
    "right" : "builder",
    "info" : "SimpleName[7011-7018]:SimpleName[10233-10240]"
  }, {
    "left" : "pathToCatalog",
    "right" : "ddl",
    "info" : "SimpleName[7027-7040]:SimpleName[6312-6315]"
  }, {
    "left" : "assertTrue(\"Schema compilation failed\", success)",
    "right" : "startSystem(config)",
    "info" : "MethodInvocation[7060-7108]:MethodInvocation[6354-6373]"
  }, {
    "left" : "success",
    "right" : "success",
    "info" : "SimpleName[7100-7107]:SimpleName[10360-10367]"
  }, {
    "left" : "MiscUtils",
    "right" : "MiscUtils",
    "info" : "SimpleName[7118-7127]:SimpleName[10469-10478]"
  }, {
    "left" : "builder",
    "right" : "builder",
    "info" : "SimpleName[7137-7144]:SimpleName[10088-10095]"
  }, {
    "left" : "VoltDB.Configuration",
    "right" : "VoltDB.Configuration",
    "info" : "SimpleType[7196-7216]:SimpleType[5720-5740]"
  }, {
    "left" : "VoltDB.Configuration",
    "right" : "VoltDB.Configuration",
    "info" : "SimpleType[7230-7250]:SimpleType[5686-5706]"
  }, {
    "left" : "config.m_pathToCatalog",
    "right" : "config.m_pathToCatalog",
    "info" : "QualifiedName[7262-7284]:QualifiedName[10249-10271]"
  }, {
    "left" : "config.m_pathToDeployment",
    "right" : "config.m_pathToDeployment",
    "info" : "QualifiedName[7310-7335]:QualifiedName[10519-10544]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7365-10263]:TryStatement[6336-9688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7369-10205]:Block[6340-9630]"
  }, {
    "left" : "startSystem(config);",
    "right" : "startSystem(config);",
    "info" : "ExpressionStatement[7383-7403]:ExpressionStatement[6354-6374]"
  }, {
    "left" : "config",
    "right" : "config",
    "info" : "SimpleName[7395-7401]:SimpleName[6366-6372]"
  }, {
    "left" : "assertFalse(findTableInSystemCatalogResults(\"FOOVIEW\"));",
    "right" : "assertFalse(findTableInSystemCatalogResults(\"FOOVIEW\"));",
    "info" : "ExpressionStatement[7452-7508]:ExpressionStatement[6423-6479]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7521-7872]:TryStatement[6492-6861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7525-7718]:Block[6496-6707]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                    \"create view FOOVIEW (VAL, TOTAL) as \" +\n                    \"select VAL, COUNT(*) from FOO group by VAL;\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                    \"create view FOOVIEW (VAL, VAL1, TOTAL) as \" +\n                    \"select VAL, VAL1, COUNT(*) from FOO group by VAL, VAL1;\");",
    "info" : "ExpressionStatement[7543-7704]:ExpressionStatement[6514-6693]"
  }, {
    "left" : "m_client",
    "right" : "m_client",
    "info" : "SimpleName[7543-7551]:SimpleName[7930-7938]"
  }, {
    "left" : "\"@AdHoc\"",
    "right" : "\"@AdHoc\"",
    "info" : "StringLiteral[7566-7574]:StringLiteral[7953-7961]"
  }, {
    "left" : "\"create view FOOVIEW (VAL, TOTAL) as \"",
    "right" : "\"create view FOOVIEW (VAL, VAL1, TOTAL) as \"",
    "info" : "StringLiteral[7596-7634]:StringLiteral[6567-6611]"
  }, {
    "left" : "\"select VAL, COUNT(*) from FOO group by VAL;\"",
    "right" : "\"select VAL, VAL1, COUNT(*) from FOO group by VAL, VAL1;\"",
    "info" : "StringLiteral[7657-7702]:StringLiteral[6634-6691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7761-7872]:Block[6750-6861]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[7779-7801]:ExpressionStatement[6768-6790]"
  }, {
    "left" : "fail(\"Should be able to create a view\");",
    "right" : "fail(\"Should be able to create a view\");",
    "info" : "ExpressionStatement[7818-7858]:ExpressionStatement[6807-6847]"
  }, {
    "left" : "assertTrue(findTableInSystemCatalogResults(\"FOOVIEW\"));",
    "right" : "assertTrue(findTableInSystemCatalogResults(\"FOOVIEW\"));",
    "info" : "ExpressionStatement[7885-7940]:ExpressionStatement[6874-6929]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7998-8005]:PrimitiveType[10215-10222]"
  }, {
    "left" : "false",
    "right" : "false",
    "info" : "BooleanLiteral[8014-8019]:BooleanLiteral[7889-7894]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                    \"create view FOOVIEW (VAL, TOTAL) as \" +\n                    \"select VAL, COUNT(*) from FOO group by VAL;\")",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"))",
    "info" : "MethodInvocation[8055-8215]:MethodInvocation[6979-7033]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                    \"create view FOOVIEW (VAL, TOTAL) as \" +\n                    \"select VAL, COUNT(*) from FOO group by VAL;\");",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));",
    "info" : "ExpressionStatement[8055-8216]:ExpressionStatement[6979-7034]"
  }, {
    "left" : "m_client",
    "right" : "m_client",
    "info" : "SimpleName[8055-8063]:SimpleName[8426-8434]"
  }, {
    "left" : "\"@AdHoc\"",
    "right" : "\"@AdHoc\"",
    "info" : "StringLiteral[8078-8086]:StringLiteral[8449-8457]"
  }, {
    "left" : "ProcCallException",
    "right" : "ProcCallException",
    "info" : "SimpleType[8250-8267]:SimpleType[8554-8571]"
  }, {
    "left" : "pce",
    "right" : "pce",
    "info" : "SimpleName[8268-8271]:SimpleName[8595-8598]"
  }, {
    "left" : "threw",
    "right" : "threw",
    "info" : "SimpleName[8291-8296]:SimpleName[8089-8094]"
  }, {
    "left" : "assertTrue(\"Shouldn't be able to create the same view twice\", threw)",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index SimpleIndex on FOOVIEW (VAL);\")",
    "info" : "MethodInvocation[8331-8399]:MethodInvocation[7069-7171]"
  }, {
    "left" : "\"Shouldn't be able to create the same view twice\"",
    "right" : "\"create index SimpleIndex on FOOVIEW (VAL);\"",
    "info" : "StringLiteral[8342-8391]:StringLiteral[7126-7170]"
  }, {
    "left" : "threw",
    "right" : "threw",
    "info" : "SimpleName[8393-8398]:SimpleName[8197-8202]"
  }, {
    "left" : "\"VALDEX\"",
    "right" : "\"VALDEX\"",
    "info" : "StringLiteral[8562-8570]:StringLiteral[7023-7031]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8586-8886]:TryStatement[7047-7352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8590-8720]:Block[7051-7186]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index VALDEX on FOOVIEW (VAL);\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index SimpleIndex on FOOVIEW (VAL);\");",
    "info" : "ExpressionStatement[8608-8706]:ExpressionStatement[7069-7172]"
  }, {
    "left" : "m_client",
    "right" : "m_client",
    "info" : "SimpleName[8608-8616]:SimpleName[9273-9281]"
  }, {
    "left" : "\"@AdHoc\"",
    "right" : "\"@AdHoc\"",
    "info" : "StringLiteral[8631-8639]:StringLiteral[9296-9304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8763-8886]:Block[7229-7352]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[8781-8803]:ExpressionStatement[7247-7269]"
  }, {
    "left" : "fail(\"Should be able to create an index on a view\");",
    "right" : "fail(\"Should be able to create an index on a view\");",
    "info" : "ExpressionStatement[8820-8872]:ExpressionStatement[7286-7338]"
  }, {
    "left" : "assertTrue(findIndexInSystemCatalogResults(\"VALDEX\"));",
    "right" : "assertTrue(findIndexInSystemCatalogResults(\"SimpleIndex\"));",
    "info" : "ExpressionStatement[8899-8953]:ExpressionStatement[7365-7424]"
  }, {
    "left" : "\"VALDEX\"",
    "right" : "\"SimpleIndex\"",
    "info" : "StringLiteral[8942-8950]:StringLiteral[7408-7421]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8993-9272]:TryStatement[7464-7748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8997-9108]:Block[7468-7584]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX;\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index SimpleIndex;\");",
    "info" : "ExpressionStatement[9015-9094]:ExpressionStatement[7486-7570]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX;\")",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"SimpleIndex\"))",
    "info" : "MethodInvocation[9015-9093]:MethodInvocation[8217-8276]"
  }, {
    "left" : "m_client",
    "right" : "m_client",
    "info" : "SimpleName[9015-9023]:SimpleName[8845-8853]"
  }, {
    "left" : "\"@AdHoc\"",
    "right" : "\"@AdHoc\"",
    "info" : "StringLiteral[9038-9046]:StringLiteral[8868-8876]"
  }, {
    "left" : "\"drop index VALDEX;\"",
    "right" : "\"drop index SimpleIndex;\"",
    "info" : "StringLiteral[9072-9092]:StringLiteral[7543-7568]"
  }, {
    "left" : "ProcCallException",
    "right" : "ProcCallException",
    "info" : "SimpleType[9128-9145]:SimpleType[9402-9419]"
  }, {
    "left" : "pce",
    "right" : "pce",
    "info" : "SimpleName[9146-9149]:SimpleName[9443-9446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9151-9272]:Block[7627-7748]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[9169-9191]:ExpressionStatement[7645-7667]"
  }, {
    "left" : "pce",
    "right" : "pce",
    "info" : "SimpleName[9169-9172]:SimpleName[9008-9011]"
  }, {
    "left" : "fail(\"Should be able to drop an index on a view\");",
    "right" : "fail(\"Should be able to drop an index on a view\");",
    "info" : "ExpressionStatement[9208-9258]:ExpressionStatement[7684-7734]"
  }, {
    "left" : "\"Should be able to drop an index on a view\"",
    "right" : "\"Should be able to drop an index on a view\"",
    "info" : "StringLiteral[9213-9256]:StringLiteral[9487-9530]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"))",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"SimpleIndex\"))",
    "info" : "MethodInvocation[9285-9339]:MethodInvocation[7761-7820]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index SimpleIndex;\");",
    "info" : "ExpressionStatement[9285-9340]:ExpressionStatement[7930-8014]"
  }, {
    "left" : "\"VALDEX\"",
    "right" : "\"SimpleIndex\"",
    "info" : "StringLiteral[9329-9337]:StringLiteral[7805-7818]"
  }, {
    "left" : "threw",
    "right" : "pce",
    "info" : "SimpleName[9392-9397]:SimpleName[8066-8069]"
  }, {
    "left" : "threw = false",
    "right" : "threw = true",
    "info" : "Assignment[9392-9405]:Assignment[8089-8101]"
  }, {
    "left" : "threw = false;",
    "right" : "assertTrue(\"Shouldn't be able to drop bad index without if exists\", threw);",
    "info" : "ExpressionStatement[9392-9406]:ExpressionStatement[8129-8204]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9419-9622]:TryStatement[8404-8706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9423-9534]:Block[8408-8534]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX;\")",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index SimpleIndex;\")",
    "info" : "MethodInvocation[9441-9519]:MethodInvocation[7486-7569]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX;\");",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index SimpleIndex if exists;\");",
    "info" : "ExpressionStatement[9441-9520]:ExpressionStatement[8426-8520]"
  }, {
    "left" : "\"drop index VALDEX;\"",
    "right" : "\"SimpleIndex\"",
    "info" : "StringLiteral[9498-9518]:StringLiteral[8261-8274]"
  }, {
    "left" : "ProcCallException",
    "right" : "ProcCallException",
    "info" : "SimpleType[9554-9571]:SimpleType[8990-9007]"
  }, {
    "left" : "pce",
    "right" : "pce",
    "info" : "SimpleName[9572-9575]:SimpleName[9031-9034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9577-9622]:Block[8577-8706]"
  }, {
    "left" : "threw = true;",
    "right" : "fail(\"Should be able to drop a bad index with if exists\");",
    "info" : "ExpressionStatement[9595-9608]:ExpressionStatement[8634-8692]"
  }, {
    "left" : "true",
    "right" : "true",
    "info" : "BooleanLiteral[9603-9607]:BooleanLiteral[10112-10116]"
  }, {
    "left" : "assertTrue(\"Shouldn't be able to drop bad index without if exists\", threw)",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"SimpleIndex\"))",
    "info" : "MethodInvocation[9635-9709]:MethodInvocation[8719-8778]"
  }, {
    "left" : "assertTrue(\"Shouldn't be able to drop bad index without if exists\", threw);",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"SimpleIndex\"));",
    "info" : "ExpressionStatement[9635-9710]:ExpressionStatement[8719-8779]"
  }, {
    "left" : "\"Shouldn't be able to drop bad index without if exists\"",
    "right" : "\"Shouldn't be able to drop bad index without if exists\"",
    "info" : "StringLiteral[9646-9701]:StringLiteral[8140-8195]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"))",
    "right" : "pce.printStackTrace()",
    "info" : "MethodInvocation[9723-9777]:MethodInvocation[9031-9052]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[9723-9778]:ExpressionStatement[9031-9053]"
  }, {
    "left" : "findIndexInSystemCatalogResults(\"VALDEX\")",
    "right" : "m_client.callProcedure(\"@AdHoc\",\n                        \"create index ComplexIndex on FOOVIEW (VAL, TOTAL);\")",
    "info" : "MethodInvocation[9735-9776]:MethodInvocation[8845-8955]"
  }, {
    "left" : "\"VALDEX\"",
    "right" : "\"create index ComplexIndex on FOOVIEW (VAL, TOTAL);\"",
    "info" : "StringLiteral[9767-9775]:StringLiteral[8902-8954]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9830-10127]:TryStatement[9251-9546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9834-9955]:Block[9255-9382]"
  }, {
    "left" : "m_client",
    "right" : "m_client",
    "info" : "SimpleName[9852-9860]:SimpleName[7069-7077]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX if exists;\")",
    "right" : "fail(\"Should be able to recreate an index on a view\")",
    "info" : "MethodInvocation[9852-9940]:MethodInvocation[9070-9123]"
  }, {
    "left" : "m_client.callProcedure(\"@AdHoc\",\n                        \"drop index VALDEX if exists;\");",
    "right" : "fail(\"Should be able to recreate an index on a view\");",
    "info" : "ExpressionStatement[9852-9941]:ExpressionStatement[9070-9124]"
  }, {
    "left" : "\"@AdHoc\"",
    "right" : "\"@AdHoc\"",
    "info" : "StringLiteral[9875-9883]:StringLiteral[7092-7100]"
  }, {
    "left" : "\"drop index VALDEX if exists;\"",
    "right" : "\"Should be able to recreate an index on a view\"",
    "info" : "StringLiteral[9909-9939]:StringLiteral[9075-9122]"
  }, {
    "left" : "ProcCallException",
    "right" : "ProcCallException",
    "info" : "SimpleType[9975-9992]:SimpleType[8048-8065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9998-10127]:Block[9425-9546]"
  }, {
    "left" : "pce",
    "right" : "pce",
    "info" : "SimpleName[10016-10019]:SimpleName[8572-8575]"
  }, {
    "left" : "pce.printStackTrace();",
    "right" : "pce.printStackTrace();",
    "info" : "ExpressionStatement[10016-10038]:ExpressionStatement[9443-9465]"
  }, {
    "left" : "fail(\"Should be able to drop a bad index with if exists\");",
    "right" : "fail(\"Should be able to drop an index on a view\");",
    "info" : "ExpressionStatement[10055-10113]:ExpressionStatement[9482-9532]"
  }, {
    "left" : "\"Should be able to drop a bad index with if exists\"",
    "right" : "\"Should be able to drop a bad index with if exists\"",
    "info" : "StringLiteral[10060-10111]:StringLiteral[8639-8690]"
  }, {
    "left" : "assertFalse(findIndexInSystemCatalogResults(\"VALDEX\"));",
    "right" : "assertFalse(findIndexInSystemCatalogResults(\"ComplexIndex\"));",
    "info" : "ExpressionStatement[10140-10195]:ExpressionStatement[9559-9620]"
  }, {
    "left" : "\"VALDEX\"",
    "right" : "\"ComplexIndex\"",
    "info" : "StringLiteral[10184-10192]:StringLiteral[9603-9617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10222-10263]:Block[9647-9688]"
  }, {
    "left" : "teardownSystem();",
    "right" : "teardownSystem();",
    "info" : "ExpressionStatement[10236-10253]:ExpressionStatement[9661-9678]"
  } ]
}