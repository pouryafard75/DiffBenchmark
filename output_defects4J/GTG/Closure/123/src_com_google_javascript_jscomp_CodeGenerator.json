{
  "matchedElements" : [
 {
    "left" : "class : CodeGenerator",
    "right" : "class : CodeGenerator",
    "info" : "TypeDeclaration[1099-39977]:TypeDeclaration[1099-39998]"
  }, {
    "left" : "LT_ESCAPED",
    "right" : "LT_ESCAPED",
    "info" : "FieldDeclaration[1231-1280]:FieldDeclaration[1231-1280]"
  }, {
    "left" : "GT_ESCAPED",
    "right" : "GT_ESCAPED",
    "info" : "FieldDeclaration[1283-1332]:FieldDeclaration[1283-1332]"
  }, {
    "left" : "escapedJsStrings",
    "right" : "escapedJsStrings",
    "info" : "FieldDeclaration[1390-1461]:FieldDeclaration[1390-1461]"
  }, {
    "left" : "HEX_CHARS",
    "right" : "HEX_CHARS",
    "info" : "FieldDeclaration[1465-1604]:FieldDeclaration[1465-1604]"
  }, {
    "left" : "cc",
    "right" : "cc",
    "info" : "FieldDeclaration[1608-1638]:FieldDeclaration[1608-1638]"
  }, {
    "left" : "outputCharsetEncoder",
    "right" : "outputCharsetEncoder",
    "info" : "FieldDeclaration[1642-1692]:FieldDeclaration[1642-1692]"
  }, {
    "left" : "preferSingleQuotes",
    "right" : "preferSingleQuotes",
    "info" : "FieldDeclaration[1696-1737]:FieldDeclaration[1696-1737]"
  }, {
    "left" : "trustedStrings",
    "right" : "trustedStrings",
    "info" : "FieldDeclaration[1740-1777]:FieldDeclaration[1740-1777]"
  }, {
    "left" : "languageMode",
    "right" : "languageMode",
    "info" : "FieldDeclaration[1780-1820]:FieldDeclaration[1780-1820]"
  }, {
    "left" : "private CodeGenerator(consumer )",
    "right" : "private CodeGenerator(consumer )",
    "info" : "MethodDeclaration[1824-2030]:MethodDeclaration[1824-2030]"
  }, {
    "left" : "package forCostEstimation(consumer ) : ",
    "right" : "package forCostEstimation(consumer ) : ",
    "info" : "MethodDeclaration[2034-2141]:MethodDeclaration[2034-2141]"
  }, {
    "left" : "package CodeGenerator(consumer , options ...)",
    "right" : "package CodeGenerator(consumer , options ...)",
    "info" : "MethodDeclaration[2145-2928]:MethodDeclaration[2145-2928]"
  }, {
    "left" : "public tagAsStrict() : void",
    "right" : "public tagAsStrict() : void",
    "info" : "MethodDeclaration[2932-3047]:MethodDeclaration[2932-3047]"
  }, {
    "left" : "package add(str ) : void",
    "right" : "package add(str ) : void",
    "info" : "MethodDeclaration[3051-3094]:MethodDeclaration[3051-3094]"
  }, {
    "left" : "private addIdentifier(identifier ) : void",
    "right" : "private addIdentifier(identifier ) : void",
    "info" : "MethodDeclaration[3098-3201]:MethodDeclaration[3098-3201]"
  }, {
    "left" : "package add(n ) : void",
    "right" : "package add(n ) : void",
    "info" : "MethodDeclaration[3205-3254]:MethodDeclaration[3205-3254]"
  }, {
    "left" : "package add(n , context ) : void",
    "right" : "package add(n , context ) : void",
    "info" : "MethodDeclaration[3258-22999]:MethodDeclaration[3258-23020]"
  }, {
    "left" : "private unrollBinaryOperator(n , op int, opStr , context , rhsContext , leftPrecedence int, rightPrecedence int) : void",
    "right" : "private unrollBinaryOperator(n , op int, opStr , context , rhsContext , leftPrecedence int, rightPrecedence int) : void",
    "info" : "MethodDeclaration[23003-23840]:MethodDeclaration[23024-23861]"
  }, {
    "left" : "package isSimpleNumber(s ...) : boolean",
    "right" : "package isSimpleNumber(s ...) : boolean",
    "info" : "MethodDeclaration[23844-24152]:MethodDeclaration[23865-24173]"
  }, {
    "left" : "package getSimpleNumber(s ...) : double",
    "right" : "package getSimpleNumber(s ...) : double",
    "info" : "MethodDeclaration[24156-24509]:MethodDeclaration[24177-24530]"
  }, {
    "left" : "private isIndirectEval(n ) : boolean",
    "right" : "private isIndirectEval(n ) : boolean",
    "info" : "MethodDeclaration[24513-24722]:MethodDeclaration[24534-24743]"
  }, {
    "left" : "private addNonEmptyStatement(n , context , allowNonBlockChild boolean) : void",
    "right" : "private addNonEmptyStatement(n , context , allowNonBlockChild boolean) : void",
    "info" : "MethodDeclaration[24726-26823]:MethodDeclaration[24747-26844]"
  }, {
    "left" : "private isOneExactlyFunctionOrDo(n ) : boolean",
    "right" : "private isOneExactlyFunctionOrDo(n ) : boolean",
    "info" : "MethodDeclaration[26827-27683]:MethodDeclaration[26848-27704]"
  }, {
    "left" : "private addExpr(n , minPrecedence int, context ) : void",
    "right" : "private addExpr(n , minPrecedence int, context ) : void",
    "info" : "MethodDeclaration[27687-27986]:MethodDeclaration[27708-28007]"
  }, {
    "left" : "package addList(firstInList ...) : void",
    "right" : "package addList(firstInList ...) : void",
    "info" : "MethodDeclaration[27990-28073]:MethodDeclaration[28011-28094]"
  }, {
    "left" : "package addList(firstInList , isArrayOrFunctionArgument boolean) : void",
    "right" : "package addList(firstInList , isArrayOrFunctionArgument boolean) : void",
    "info" : "MethodDeclaration[28077-28216]:MethodDeclaration[28098-28237]"
  }, {
    "left" : "package addList(firstInList , isArrayOrFunctionArgument boolean, lhsContext ) : void",
    "right" : "package addList(firstInList , isArrayOrFunctionArgument boolean, lhsContext ) : void",
    "info" : "MethodDeclaration[28220-28680]:MethodDeclaration[28241-28701]"
  }, {
    "left" : "package addArrayList(firstInList ...) : void",
    "right" : "package addArrayList(firstInList ...) : void",
    "info" : "MethodDeclaration[28684-29370]:MethodDeclaration[28705-29391]"
  }, {
    "left" : "package addCaseBody(caseBody ) : void",
    "right" : "package addCaseBody(caseBody ) : void",
    "info" : "MethodDeclaration[29374-29476]:MethodDeclaration[29395-29497]"
  }, {
    "left" : "package addAllSiblings(n ) : void",
    "right" : "package addAllSiblings(n ) : void",
    "info" : "MethodDeclaration[29480-29584]:MethodDeclaration[29501-29605]"
  }, {
    "left" : "private addJsString(n ) : void",
    "right" : "private addJsString(n ) : void",
    "info" : "MethodDeclaration[29588-30075]:MethodDeclaration[29609-30096]"
  }, {
    "left" : "private jsString(s , useSlashV boolean) : ",
    "right" : "private jsString(s , useSlashV boolean) : ",
    "info" : "MethodDeclaration[30079-30924]:MethodDeclaration[30100-30945]"
  }, {
    "left" : "package regexpEscape(s , outputCharsetEncoder ) : ",
    "right" : "package regexpEscape(s , outputCharsetEncoder ) : ",
    "info" : "MethodDeclaration[30928-31118]:MethodDeclaration[30949-31139]"
  }, {
    "left" : "package escapeToDoubleQuotedJsString(s ...) : ",
    "right" : "package escapeToDoubleQuotedJsString(s ...) : ",
    "info" : "MethodDeclaration[31122-31334]:MethodDeclaration[31143-31355]"
  }, {
    "left" : "package regexpEscape(s ...) : ",
    "right" : "package regexpEscape(s ...) : ",
    "info" : "MethodDeclaration[31463-31532]:MethodDeclaration[31484-31553]"
  }, {
    "left" : "private strEscape(s , quote char, doublequoteEscape , singlequoteEscape , backslashEscape , outputCharsetEncoder , useSlashV boolean, isRegexp boolean) : ",
    "right" : "private strEscape(s , quote char, doublequoteEscape , singlequoteEscape , backslashEscape , outputCharsetEncoder , useSlashV boolean, isRegexp boolean) : ",
    "info" : "MethodDeclaration[31536-35797]:MethodDeclaration[31557-35818]"
  }, {
    "left" : "package identifierEscape(s ...) : ",
    "right" : "package identifierEscape(s ...) : ",
    "info" : "MethodDeclaration[35801-36491]:MethodDeclaration[35822-36512]"
  }, {
    "left" : "private getNonEmptyChildCount(n , maxCount int) : int",
    "right" : "private getNonEmptyChildCount(n , maxCount int) : int",
    "info" : "MethodDeclaration[36494-36984]:MethodDeclaration[36515-37005]"
  }, {
    "left" : "private getFirstNonEmptyChild(n ) : ",
    "right" : "private getFirstNonEmptyChild(n ) : ",
    "info" : "MethodDeclaration[36988-37389]:MethodDeclaration[37009-37410]"
  }, {
    "left" : "private getContextForNonEmptyExpression(currentContext ) : ",
    "right" : "private getContextForNonEmptyExpression(currentContext ) : ",
    "info" : "MethodDeclaration[38000-38191]:MethodDeclaration[38021-38212]"
  }, {
    "left" : "private getContextForNoInOperator(context ) : ",
    "right" : "private getContextForNoInOperator(context ) : ",
    "info" : "MethodDeclaration[38195-38530]:MethodDeclaration[38216-38551]"
  }, {
    "left" : "private appendHexJavaScriptRepresentation(sb , c char) : void",
    "right" : "private appendHexJavaScriptRepresentation(sb , c char) : void",
    "info" : "MethodDeclaration[38534-38884]:MethodDeclaration[38555-38905]"
  }, {
    "left" : "private appendHexJavaScriptRepresentation(codePoint int, out ) : void",
    "right" : "private appendHexJavaScriptRepresentation(codePoint int, out ) : void",
    "info" : "MethodDeclaration[38888-39975]:MethodDeclaration[38909-39996]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[1824-1831]:Modifier[1824-1831]"
  }, {
    "left" : "CodeGenerator",
    "right" : "CodeGenerator",
    "info" : "SimpleName[1832-1845]:SimpleName[1832-1845]"
  }, {
    "left" : "CodeConsumer consumer",
    "right" : "CodeConsumer consumer",
    "info" : "SingleVariableDeclaration[1846-1867]:SingleVariableDeclaration[1846-1867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1869-2030]:Block[1869-2030]"
  }, {
    "left" : "cc = consumer;",
    "right" : "cc = consumer;",
    "info" : "ExpressionStatement[1875-1889]:ExpressionStatement[1875-1889]"
  }, {
    "left" : "outputCharsetEncoder = null;",
    "right" : "outputCharsetEncoder = null;",
    "info" : "ExpressionStatement[1894-1922]:ExpressionStatement[1894-1922]"
  }, {
    "left" : "preferSingleQuotes = false;",
    "right" : "preferSingleQuotes = false;",
    "info" : "ExpressionStatement[1927-1954]:ExpressionStatement[1927-1954]"
  }, {
    "left" : "trustedStrings = true;",
    "right" : "trustedStrings = true;",
    "info" : "ExpressionStatement[1959-1981]:ExpressionStatement[1959-1981]"
  }, {
    "left" : "languageMode = LanguageMode.ECMASCRIPT5;",
    "right" : "languageMode = LanguageMode.ECMASCRIPT5;",
    "info" : "ExpressionStatement[1986-2026]:ExpressionStatement[1986-2026]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2034-2040]:Modifier[2034-2040]"
  }, {
    "left" : "CodeGenerator",
    "right" : "CodeGenerator",
    "info" : "SimpleType[2041-2054]:SimpleType[2041-2054]"
  }, {
    "left" : "forCostEstimation",
    "right" : "forCostEstimation",
    "info" : "SimpleName[2055-2072]:SimpleName[2055-2072]"
  }, {
    "left" : "CodeConsumer consumer",
    "right" : "CodeConsumer consumer",
    "info" : "SingleVariableDeclaration[2073-2094]:SingleVariableDeclaration[2073-2094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2096-2141]:Block[2096-2141]"
  }, {
    "left" : "return new CodeGenerator(consumer);",
    "right" : "return new CodeGenerator(consumer);",
    "info" : "ReturnStatement[2102-2137]:ReturnStatement[2102-2137]"
  }, {
    "left" : "CodeGenerator",
    "right" : "CodeGenerator",
    "info" : "SimpleName[2145-2158]:SimpleName[2145-2158]"
  }, {
    "left" : "CodeConsumer consumer",
    "right" : "CodeConsumer consumer",
    "info" : "SingleVariableDeclaration[2166-2187]:SingleVariableDeclaration[2166-2187]"
  }, {
    "left" : "CompilerOptions options",
    "right" : "CompilerOptions options",
    "info" : "SingleVariableDeclaration[2195-2218]:SingleVariableDeclaration[2195-2218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2220-2928]:Block[2220-2928]"
  }, {
    "left" : "cc = consumer;",
    "right" : "cc = consumer;",
    "info" : "ExpressionStatement[2226-2240]:ExpressionStatement[2226-2240]"
  }, {
    "left" : "Charset outputCharset = options.getOutputCharset();",
    "right" : "Charset outputCharset = options.getOutputCharset();",
    "info" : "VariableDeclarationStatement[2246-2297]:VariableDeclarationStatement[2246-2297]"
  }, {
    "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
    "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
    "info" : "IfStatement[2302-2766]:IfStatement[2302-2766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2367-2691]:Block[2367-2691]"
  }, {
    "left" : "this.outputCharsetEncoder = null;",
    "right" : "this.outputCharsetEncoder = null;",
    "info" : "ExpressionStatement[2652-2685]:ExpressionStatement[2652-2685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2697-2766]:Block[2697-2766]"
  }, {
    "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
    "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
    "info" : "ExpressionStatement[2705-2760]:ExpressionStatement[2705-2760]"
  }, {
    "left" : "this.preferSingleQuotes = options.preferSingleQuotes;",
    "right" : "this.preferSingleQuotes = options.preferSingleQuotes;",
    "info" : "ExpressionStatement[2771-2824]:ExpressionStatement[2771-2824]"
  }, {
    "left" : "this.trustedStrings = options.trustedStrings;",
    "right" : "this.trustedStrings = options.trustedStrings;",
    "info" : "ExpressionStatement[2829-2874]:ExpressionStatement[2829-2874]"
  }, {
    "left" : "this.languageMode = options.getLanguageOut();",
    "right" : "this.languageMode = options.getLanguageOut();",
    "info" : "ExpressionStatement[2879-2924]:ExpressionStatement[2879-2924]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2990-2996]:Modifier[2990-2996]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2997-3001]:PrimitiveType[2997-3001]"
  }, {
    "left" : "tagAsStrict",
    "right" : "tagAsStrict",
    "info" : "SimpleName[3002-3013]:SimpleName[3002-3013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3016-3047]:Block[3016-3047]"
  }, {
    "left" : "add(\"'use strict';\");",
    "right" : "add(\"'use strict';\");",
    "info" : "ExpressionStatement[3022-3043]:ExpressionStatement[3022-3043]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3051-3055]:PrimitiveType[3051-3055]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[3056-3059]:SimpleName[3056-3059]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[3060-3070]:SingleVariableDeclaration[3060-3070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3072-3094]:Block[3072-3094]"
  }, {
    "left" : "cc.add(str);",
    "right" : "cc.add(str);",
    "info" : "ExpressionStatement[3078-3090]:ExpressionStatement[3078-3090]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3098-3105]:Modifier[3098-3105]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3106-3110]:PrimitiveType[3106-3110]"
  }, {
    "left" : "addIdentifier",
    "right" : "addIdentifier",
    "info" : "SimpleName[3111-3124]:SimpleName[3111-3124]"
  }, {
    "left" : "String identifier",
    "right" : "String identifier",
    "info" : "SingleVariableDeclaration[3125-3142]:SingleVariableDeclaration[3125-3142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3144-3201]:Block[3144-3201]"
  }, {
    "left" : "cc.addIdentifier(identifierEscape(identifier));",
    "right" : "cc.addIdentifier(identifierEscape(identifier));",
    "info" : "ExpressionStatement[3150-3197]:ExpressionStatement[3150-3197]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3205-3209]:PrimitiveType[3205-3209]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[3210-3213]:SimpleName[3210-3213]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3214-3220]:SingleVariableDeclaration[3214-3220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3222-3254]:Block[3222-3254]"
  }, {
    "left" : "add(n, Context.OTHER);",
    "right" : "add(n, Context.OTHER);",
    "info" : "ExpressionStatement[3228-3250]:ExpressionStatement[3228-3250]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3267-3273]:SingleVariableDeclaration[3267-3273]"
  }, {
    "left" : "Context context",
    "right" : "Context context",
    "info" : "SingleVariableDeclaration[3275-3290]:SingleVariableDeclaration[3275-3290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3292-22999]:Block[3292-23020]"
  }, {
    "left" : "if (!cc.continueProcessing())",
    "right" : "if (!cc.continueProcessing())",
    "info" : "IfStatement[3298-3349]:IfStatement[3298-3349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3328-3349]:Block[3328-3349]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[3336-3343]:ReturnStatement[3336-3343]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[3355-3378]:VariableDeclarationStatement[3355-3378]"
  }, {
    "left" : "String opstr = NodeUtil.opToStr(type);",
    "right" : "String opstr = NodeUtil.opToStr(type);",
    "info" : "VariableDeclarationStatement[3383-3421]:VariableDeclarationStatement[3383-3421]"
  }, {
    "left" : "int childCount = n.getChildCount();",
    "right" : "int childCount = n.getChildCount();",
    "info" : "VariableDeclarationStatement[3426-3461]:VariableDeclarationStatement[3426-3461]"
  }, {
    "left" : "Node first = n.getFirstChild();",
    "right" : "Node first = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[3466-3497]:VariableDeclarationStatement[3466-3497]"
  }, {
    "left" : "Node last = n.getLastChild();",
    "right" : "Node last = n.getLastChild();",
    "info" : "VariableDeclarationStatement[3502-3531]:VariableDeclarationStatement[3502-3531]"
  }, {
    "left" : "if (opstr != null && first != last)",
    "right" : "if (opstr != null && first != last)",
    "info" : "IfStatement[3572-4665]:IfStatement[3572-4665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3608-4665]:Block[3608-4665]"
  }, {
    "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
    "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
    "info" : "ExpressionStatement[3616-3771]:ExpressionStatement[3616-3771]"
  }, {
    "left" : "int p = NodeUtil.precedence(type);",
    "right" : "int p = NodeUtil.precedence(type);",
    "info" : "VariableDeclarationStatement[3778-3812]:VariableDeclarationStatement[3778-3812]"
  }, {
    "left" : "Context rhsContext = getContextForNoInOperator(context);",
    "right" : "Context rhsContext = getContextForNoInOperator(context);",
    "info" : "VariableDeclarationStatement[3927-3983]:VariableDeclarationStatement[3927-3983]"
  }, {
    "left" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
    "right" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
    "info" : "IfStatement[4113-4645]:IfStatement[4113-4645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4183-4297]:Block[4183-4297]"
  }, {
    "left" : "addExpr(first, p, context);",
    "right" : "addExpr(first, p, context);",
    "info" : "ExpressionStatement[4193-4220]:ExpressionStatement[4193-4220]"
  }, {
    "left" : "cc.addOp(opstr, true);",
    "right" : "cc.addOp(opstr, true);",
    "info" : "ExpressionStatement[4229-4251]:ExpressionStatement[4229-4251]"
  }, {
    "left" : "addExpr(last, p, rhsContext);",
    "right" : "addExpr(last, p, rhsContext);",
    "info" : "ExpressionStatement[4260-4289]:ExpressionStatement[4260-4289]"
  }, {
    "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
    "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
    "info" : "IfStatement[4303-4645]:IfStatement[4303-4645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4368-4553]:Block[4368-4553]"
  }, {
    "left" : "addExpr(first, p, context);",
    "right" : "addExpr(first, p, context);",
    "info" : "ExpressionStatement[4449-4476]:ExpressionStatement[4449-4476]"
  }, {
    "left" : "cc.addOp(opstr, true);",
    "right" : "cc.addOp(opstr, true);",
    "info" : "ExpressionStatement[4485-4507]:ExpressionStatement[4485-4507]"
  }, {
    "left" : "addExpr(last, p, rhsContext);",
    "right" : "addExpr(last, p, rhsContext);",
    "info" : "ExpressionStatement[4516-4545]:ExpressionStatement[4516-4545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4559-4645]:Block[4559-4645]"
  }, {
    "left" : "unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);",
    "right" : "unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);",
    "info" : "ExpressionStatement[4569-4637]:ExpressionStatement[4569-4637]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4652-4659]:ReturnStatement[4652-4659]"
  }, {
    "left" : "cc.startSourceMapping(n);",
    "right" : "cc.startSourceMapping(n);",
    "info" : "ExpressionStatement[4671-4696]:ExpressionStatement[4671-4696]"
  }, {
    "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = Context.OTHER;\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, rhsContext);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, rhsContext);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString())) {\n          // Check for ECMASCRIPT3 keywords.\n          add(\"[\");\n          add(last);\n          add(\"]\");\n        } else {\n          add(\".\");\n          addIdentifier(last.getString());\n        }\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
    "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = getContextForNoInOperator(context);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, rhsContext);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, rhsContext);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString())) {\n          // Check for ECMASCRIPT3 keywords.\n          add(\"[\");\n          add(last);\n          add(\"]\");\n        } else {\n          add(\".\");\n          addIdentifier(last.getString());\n        }\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
    "info" : "SwitchStatement[4702-22966]:SwitchStatement[4702-22987]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[4724-4739]:SwitchCase[4724-4739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4740-5363]:Block[4740-5363]"
  }, {
    "left" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
    "right" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
    "info" : "ExpressionStatement[4750-4860]:ExpressionStatement[4750-4860]"
  }, {
    "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
    "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
    "info" : "ExpressionStatement[4869-4930]:ExpressionStatement[4869-4930]"
  }, {
    "left" : "add(\"try\");",
    "right" : "add(\"try\");",
    "info" : "ExpressionStatement[4940-4951]:ExpressionStatement[4940-4951]"
  }, {
    "left" : "add(first, Context.PRESERVE_BLOCK);",
    "right" : "add(first, Context.PRESERVE_BLOCK);",
    "info" : "ExpressionStatement[4960-4995]:ExpressionStatement[4960-4995]"
  }, {
    "left" : "Node catchblock = first.getNext().getFirstChild();",
    "right" : "Node catchblock = first.getNext().getFirstChild();",
    "info" : "VariableDeclarationStatement[5106-5156]:VariableDeclarationStatement[5106-5156]"
  }, {
    "left" : "if (catchblock != null)",
    "right" : "if (catchblock != null)",
    "info" : "IfStatement[5165-5227]:IfStatement[5165-5227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5189-5227]:Block[5189-5227]"
  }, {
    "left" : "add(catchblock);",
    "right" : "add(catchblock);",
    "info" : "ExpressionStatement[5201-5217]:ExpressionStatement[5201-5217]"
  }, {
    "left" : "if (childCount == 3)",
    "right" : "if (childCount == 3)",
    "info" : "IfStatement[5237-5340]:IfStatement[5237-5340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5258-5340]:Block[5258-5340]"
  }, {
    "left" : "add(\"finally\");",
    "right" : "add(\"finally\");",
    "info" : "ExpressionStatement[5270-5285]:ExpressionStatement[5270-5285]"
  }, {
    "left" : "add(last, Context.PRESERVE_BLOCK);",
    "right" : "add(last, Context.PRESERVE_BLOCK);",
    "info" : "ExpressionStatement[5296-5330]:ExpressionStatement[5296-5330]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5349-5355]:BreakStatement[5349-5355]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[5371-5388]:SwitchCase[5371-5388]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[5397-5439]:ExpressionStatement[5397-5439]"
  }, {
    "left" : "add(\"catch(\");",
    "right" : "add(\"catch(\");",
    "info" : "ExpressionStatement[5448-5462]:ExpressionStatement[5448-5462]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[5471-5482]:ExpressionStatement[5471-5482]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[5491-5500]:ExpressionStatement[5491-5500]"
  }, {
    "left" : "add(last, Context.PRESERVE_BLOCK);",
    "right" : "add(last, Context.PRESERVE_BLOCK);",
    "info" : "ExpressionStatement[5509-5543]:ExpressionStatement[5509-5543]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[5566-5583]:SwitchCase[5566-5583]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[5592-5634]:ExpressionStatement[5592-5634]"
  }, {
    "left" : "add(\"throw\");",
    "right" : "add(\"throw\");",
    "info" : "ExpressionStatement[5643-5656]:ExpressionStatement[5643-5656]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[5665-5676]:ExpressionStatement[5665-5676]"
  }, {
    "left" : "cc.endStatement(true);",
    "right" : "cc.endStatement(true);",
    "info" : "ExpressionStatement[5784-5806]:ExpressionStatement[5784-5806]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[5829-5847]:SwitchCase[5829-5847]"
  }, {
    "left" : "add(\"return\");",
    "right" : "add(\"return\");",
    "info" : "ExpressionStatement[5856-5870]:ExpressionStatement[5856-5870]"
  }, {
    "left" : "if (childCount == 1)",
    "right" : "if (childCount == 1)",
    "info" : "IfStatement[5879-6003]:IfStatement[5879-6003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5900-5933]:Block[5900-5933]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[5912-5923]:ExpressionStatement[5912-5923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5939-6003]:Block[5939-6003]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[5951-5993]:ExpressionStatement[5951-5993]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[6012-6030]:ExpressionStatement[6012-6030]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[6053-6068]:SwitchCase[6053-6068]"
  }, {
    "left" : "if (first != null)",
    "right" : "if (first != null)",
    "info" : "IfStatement[6077-6199]:IfStatement[6077-6199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6096-6199]:Block[6096-6199]"
  }, {
    "left" : "add(\"var \");",
    "right" : "add(\"var \");",
    "info" : "ExpressionStatement[6108-6120]:ExpressionStatement[6108-6120]"
  }, {
    "left" : "addList(first, false, getContextForNoInOperator(context));",
    "right" : "addList(first, false, getContextForNoInOperator(context));",
    "info" : "ExpressionStatement[6131-6189]:ExpressionStatement[6131-6189]"
  }, {
    "left" : "case Token.LABEL_NAME:",
    "right" : "case Token.LABEL_NAME:",
    "info" : "SwitchCase[6222-6244]:SwitchCase[6222-6244]"
  }, {
    "left" : "Preconditions.checkState(!n.getString().isEmpty());",
    "right" : "Preconditions.checkState(!n.getString().isEmpty());",
    "info" : "ExpressionStatement[6253-6304]:ExpressionStatement[6253-6304]"
  }, {
    "left" : "addIdentifier(n.getString());",
    "right" : "addIdentifier(n.getString());",
    "info" : "ExpressionStatement[6313-6342]:ExpressionStatement[6313-6342]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[6365-6381]:SwitchCase[6365-6381]"
  }, {
    "left" : "if (first == null || first.isEmpty())",
    "right" : "if (first == null || first.isEmpty())",
    "info" : "IfStatement[6390-6927]:IfStatement[6390-6927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6428-6479]:Block[6428-6479]"
  }, {
    "left" : "addIdentifier(n.getString());",
    "right" : "addIdentifier(n.getString());",
    "info" : "ExpressionStatement[6440-6469]:ExpressionStatement[6440-6469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6485-6927]:Block[6485-6927]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[6497-6539]:ExpressionStatement[6497-6539]"
  }, {
    "left" : "addIdentifier(n.getString());",
    "right" : "addIdentifier(n.getString());",
    "info" : "ExpressionStatement[6550-6579]:ExpressionStatement[6550-6579]"
  }, {
    "left" : "cc.addOp(\"=\", true);",
    "right" : "cc.addOp(\"=\", true);",
    "info" : "ExpressionStatement[6590-6610]:ExpressionStatement[6590-6610]"
  }, {
    "left" : "if (first.isComma())",
    "right" : "if (first.isComma())",
    "info" : "IfStatement[6621-6917]:IfStatement[6621-6917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6642-6733]:Block[6642-6733]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
    "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
    "info" : "ExpressionStatement[6656-6721]:ExpressionStatement[6656-6721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6739-6917]:Block[6739-6917]"
  }, {
    "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
    "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
    "info" : "ExpressionStatement[6851-6905]:ExpressionStatement[6851-6905]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[6950-6970]:SwitchCase[6950-6970]"
  }, {
    "left" : "add(\"[\");",
    "right" : "add(\"[\");",
    "info" : "ExpressionStatement[6979-6988]:ExpressionStatement[6979-6988]"
  }, {
    "left" : "addArrayList(first);",
    "right" : "addArrayList(first);",
    "info" : "ExpressionStatement[6997-7017]:ExpressionStatement[6997-7017]"
  }, {
    "left" : "add(\"]\");",
    "right" : "add(\"]\");",
    "info" : "ExpressionStatement[7026-7035]:ExpressionStatement[7026-7035]"
  }, {
    "left" : "case Token.PARAM_LIST:",
    "right" : "case Token.PARAM_LIST:",
    "info" : "SwitchCase[7058-7080]:SwitchCase[7058-7080]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[7089-7098]:ExpressionStatement[7089-7098]"
  }, {
    "left" : "addList(first);",
    "right" : "addList(first);",
    "info" : "ExpressionStatement[7107-7122]:ExpressionStatement[7107-7122]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[7131-7140]:ExpressionStatement[7131-7140]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[7163-7180]:SwitchCase[7163-7180]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[7189-7231]:ExpressionStatement[7189-7231]"
  }, {
    "left" : "unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);",
    "right" : "unrollBinaryOperator(n, Token.COMMA, \",\", context,\n            getContextForNoInOperator(context), 0, 0);",
    "info" : "ExpressionStatement[7240-7345]:ExpressionStatement[7240-7345]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[7368-7386]:SwitchCase[7368-7386]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[7395-7437]:ExpressionStatement[7395-7437]"
  }, {
    "left" : "cc.addNumber(n.getDouble());",
    "right" : "cc.addNumber(n.getDouble());",
    "info" : "ExpressionStatement[7446-7474]:ExpressionStatement[7446-7474]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[7497-7515]:SwitchCase[7497-7515]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[7522-7538]:SwitchCase[7522-7538]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[7545-7560]:SwitchCase[7545-7560]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[7567-7585]:SwitchCase[7567-7585]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[7592-7607]:SwitchCase[7592-7607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7608-7866]:Block[7608-7866]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[7680-7722]:ExpressionStatement[7680-7722]"
  }, {
    "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
    "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
    "info" : "ExpressionStatement[7731-7777]:ExpressionStatement[7731-7777]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
    "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
    "info" : "ExpressionStatement[7786-7843]:ExpressionStatement[7786-7843]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7852-7858]:BreakStatement[7852-7858]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[7874-7889]:SwitchCase[7874-7889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7890-8417]:Block[7890-8417]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[7900-7942]:ExpressionStatement[7900-7942]"
  }, {
    "left" : "if (n.getFirstChild().isNumber())",
    "right" : "if (n.getFirstChild().isNumber())",
    "info" : "IfStatement[8150-8393]:IfStatement[8150-8393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8184-8251]:Block[8184-8251]"
  }, {
    "left" : "cc.addNumber(-n.getFirstChild().getDouble());",
    "right" : "cc.addNumber(-n.getFirstChild().getDouble());",
    "info" : "ExpressionStatement[8196-8241]:ExpressionStatement[8196-8241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8257-8393]:Block[8257-8393]"
  }, {
    "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
    "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
    "info" : "ExpressionStatement[8269-8315]:ExpressionStatement[8269-8315]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
    "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
    "info" : "ExpressionStatement[8326-8383]:ExpressionStatement[8326-8383]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8403-8409]:BreakStatement[8403-8409]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[8425-8441]:SwitchCase[8425-8441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8442-8789]:Block[8442-8810]"
  }, {
    "left" : "Preconditions.checkState(childCount == 3);",
    "right" : "Preconditions.checkState(childCount == 3);",
    "info" : "ExpressionStatement[8452-8494]:ExpressionStatement[8452-8494]"
  }, {
    "left" : "int p = NodeUtil.precedence(type);",
    "right" : "int p = NodeUtil.precedence(type);",
    "info" : "VariableDeclarationStatement[8503-8537]:VariableDeclarationStatement[8503-8537]"
  }, {
    "left" : "Context rhsContext = Context.OTHER;",
    "right" : "Context rhsContext = getContextForNoInOperator(context);",
    "info" : "VariableDeclarationStatement[8546-8581]:VariableDeclarationStatement[8546-8602]"
  }, {
    "left" : "addExpr(first, p + 1, context);",
    "right" : "addExpr(first, p + 1, context);",
    "info" : "ExpressionStatement[8590-8621]:ExpressionStatement[8611-8642]"
  }, {
    "left" : "cc.addOp(\"?\", true);",
    "right" : "cc.addOp(\"?\", true);",
    "info" : "ExpressionStatement[8630-8650]:ExpressionStatement[8651-8671]"
  }, {
    "left" : "addExpr(first.getNext(), 1, rhsContext);",
    "right" : "addExpr(first.getNext(), 1, rhsContext);",
    "info" : "ExpressionStatement[8659-8699]:ExpressionStatement[8680-8720]"
  }, {
    "left" : "cc.addOp(\":\", true);",
    "right" : "cc.addOp(\":\", true);",
    "info" : "ExpressionStatement[8708-8728]:ExpressionStatement[8729-8749]"
  }, {
    "left" : "addExpr(last, 1, rhsContext);",
    "right" : "addExpr(last, 1, rhsContext);",
    "info" : "ExpressionStatement[8737-8766]:ExpressionStatement[8758-8787]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8775-8781]:BreakStatement[8796-8802]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[8797-8815]:SwitchCase[8818-8836]"
  }, {
    "left" : "if (!first.isString() ||\n            !last.isString())",
    "right" : "if (!first.isString() ||\n            !last.isString())",
    "info" : "IfStatement[8824-8952]:IfStatement[8845-8973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8879-8952]:Block[8900-8973]"
  }, {
    "left" : "throw new Error(\"Expected children to be strings\");",
    "right" : "throw new Error(\"Expected children to be strings\");",
    "info" : "ThrowStatement[8891-8942]:ThrowStatement[8912-8963]"
  }, {
    "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
    "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
    "info" : "VariableDeclarationStatement[8962-9032]:VariableDeclarationStatement[8983-9053]"
  }, {
    "left" : "if (childCount == 2)",
    "right" : "if (childCount == 2)",
    "info" : "IfStatement[9100-9267]:IfStatement[9121-9288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9121-9174]:Block[9142-9195]"
  }, {
    "left" : "add(regexp + last.getString());",
    "right" : "add(regexp + last.getString());",
    "info" : "ExpressionStatement[9133-9164]:ExpressionStatement[9154-9185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9180-9267]:Block[9201-9288]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[9192-9234]:ExpressionStatement[9213-9255]"
  }, {
    "left" : "add(regexp);",
    "right" : "add(regexp);",
    "info" : "ExpressionStatement[9245-9257]:ExpressionStatement[9266-9278]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[9290-9310]:SwitchCase[9311-9331]"
  }, {
    "left" : "if (n.getClass() != Node.class)",
    "right" : "if (n.getClass() != Node.class)",
    "info" : "IfStatement[9319-9418]:IfStatement[9340-9439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9351-9418]:Block[9372-9439]"
  }, {
    "left" : "throw new Error(\"Unexpected Node subclass.\");",
    "right" : "throw new Error(\"Unexpected Node subclass.\");",
    "info" : "ThrowStatement[9363-9408]:ThrowStatement[9384-9429]"
  }, {
    "left" : "Preconditions.checkState(childCount == 3);",
    "right" : "Preconditions.checkState(childCount == 3);",
    "info" : "ExpressionStatement[9427-9469]:ExpressionStatement[9448-9490]"
  }, {
    "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
    "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
    "info" : "VariableDeclarationStatement[9478-9539]:VariableDeclarationStatement[9499-9560]"
  }, {
    "left" : "if (funcNeedsParens)",
    "right" : "if (funcNeedsParens)",
    "info" : "IfStatement[9548-9600]:IfStatement[9569-9621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9569-9600]:Block[9590-9621]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[9581-9590]:ExpressionStatement[9602-9611]"
  }, {
    "left" : "add(\"function\");",
    "right" : "add(\"function\");",
    "info" : "ExpressionStatement[9610-9626]:ExpressionStatement[9631-9647]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[9635-9646]:ExpressionStatement[9656-9667]"
  }, {
    "left" : "add(first.getNext());",
    "right" : "add(first.getNext());",
    "info" : "ExpressionStatement[9656-9677]:ExpressionStatement[9677-9698]"
  }, {
    "left" : "add(last, Context.PRESERVE_BLOCK);",
    "right" : "add(last, Context.PRESERVE_BLOCK);",
    "info" : "ExpressionStatement[9686-9720]:ExpressionStatement[9707-9741]"
  }, {
    "left" : "cc.endFunction(context == Context.STATEMENT);",
    "right" : "cc.endFunction(context == Context.STATEMENT);",
    "info" : "ExpressionStatement[9729-9774]:ExpressionStatement[9750-9795]"
  }, {
    "left" : "if (funcNeedsParens)",
    "right" : "if (funcNeedsParens)",
    "info" : "IfStatement[9784-9836]:IfStatement[9805-9857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9805-9836]:Block[9826-9857]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[9817-9826]:ExpressionStatement[9838-9847]"
  }, {
    "left" : "case Token.GETTER_DEF:",
    "right" : "case Token.GETTER_DEF:",
    "info" : "SwitchCase[9859-9881]:SwitchCase[9880-9902]"
  }, {
    "left" : "case Token.SETTER_DEF:",
    "right" : "case Token.SETTER_DEF:",
    "info" : "SwitchCase[9888-9910]:SwitchCase[9909-9931]"
  }, {
    "left" : "Preconditions.checkState(n.getParent().isObjectLit());",
    "right" : "Preconditions.checkState(n.getParent().isObjectLit());",
    "info" : "ExpressionStatement[9919-9973]:ExpressionStatement[9940-9994]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[9982-10024]:ExpressionStatement[10003-10045]"
  }, {
    "left" : "Preconditions.checkState(first.isFunction());",
    "right" : "Preconditions.checkState(first.isFunction());",
    "info" : "ExpressionStatement[10033-10078]:ExpressionStatement[10054-10099]"
  }, {
    "left" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
    "right" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
    "info" : "ExpressionStatement[10123-10193]:ExpressionStatement[10144-10214]"
  }, {
    "left" : "if (type == Token.GETTER_DEF)",
    "right" : "if (type == Token.GETTER_DEF)",
    "info" : "IfStatement[10202-10549]:IfStatement[10223-10570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10232-10388]:Block[10253-10409]"
  }, {
    "left" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
    "right" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
    "info" : "ExpressionStatement[10289-10355]:ExpressionStatement[10310-10376]"
  }, {
    "left" : "add(\"get \");",
    "right" : "add(\"get \");",
    "info" : "ExpressionStatement[10366-10378]:ExpressionStatement[10387-10399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10394-10549]:Block[10415-10570]"
  }, {
    "left" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
    "right" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
    "info" : "ExpressionStatement[10451-10516]:ExpressionStatement[10472-10537]"
  }, {
    "left" : "add(\"set \");",
    "right" : "add(\"set \");",
    "info" : "ExpressionStatement[10527-10539]:ExpressionStatement[10548-10560]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[10606-10634]:VariableDeclarationStatement[10627-10655]"
  }, {
    "left" : "Node fn = first;",
    "right" : "Node fn = first;",
    "info" : "VariableDeclarationStatement[10643-10659]:VariableDeclarationStatement[10664-10680]"
  }, {
    "left" : "Node parameters = fn.getChildAtIndex(1);",
    "right" : "Node parameters = fn.getChildAtIndex(1);",
    "info" : "VariableDeclarationStatement[10668-10708]:VariableDeclarationStatement[10689-10729]"
  }, {
    "left" : "Node body = fn.getLastChild();",
    "right" : "Node body = fn.getLastChild();",
    "info" : "VariableDeclarationStatement[10717-10747]:VariableDeclarationStatement[10738-10768]"
  }, {
    "left" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name))",
    "right" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name))",
    "info" : "IfStatement[10791-11282]:IfStatement[10812-11303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11010-11042]:Block[11031-11063]"
  }, {
    "left" : "add(name);",
    "right" : "add(name);",
    "info" : "ExpressionStatement[11022-11032]:ExpressionStatement[11043-11053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11048-11282]:Block[11069-11303]"
  }, {
    "left" : "double d = getSimpleNumber(name);",
    "right" : "double d = getSimpleNumber(name);",
    "info" : "VariableDeclarationStatement[11117-11150]:VariableDeclarationStatement[11138-11171]"
  }, {
    "left" : "if (!Double.isNaN(d))",
    "right" : "if (!Double.isNaN(d))",
    "info" : "IfStatement[11161-11272]:IfStatement[11182-11293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11183-11225]:Block[11204-11246]"
  }, {
    "left" : "cc.addNumber(d);",
    "right" : "cc.addNumber(d);",
    "info" : "ExpressionStatement[11197-11213]:ExpressionStatement[11218-11234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11231-11272]:Block[11252-11293]"
  }, {
    "left" : "addJsString(n);",
    "right" : "addJsString(n);",
    "info" : "ExpressionStatement[11245-11260]:ExpressionStatement[11266-11281]"
  }, {
    "left" : "add(parameters);",
    "right" : "add(parameters);",
    "info" : "ExpressionStatement[11292-11308]:ExpressionStatement[11313-11329]"
  }, {
    "left" : "add(body, Context.PRESERVE_BLOCK);",
    "right" : "add(body, Context.PRESERVE_BLOCK);",
    "info" : "ExpressionStatement[11317-11351]:ExpressionStatement[11338-11372]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[11374-11392]:SwitchCase[11395-11413]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[11399-11416]:SwitchCase[11420-11437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11417-12571]:Block[11438-12592]"
  }, {
    "left" : "if (n.getClass() != Node.class)",
    "right" : "if (n.getClass() != Node.class)",
    "info" : "IfStatement[11427-11526]:IfStatement[11448-11547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11459-11526]:Block[11480-11547]"
  }, {
    "left" : "throw new Error(\"Unexpected Node subclass.\");",
    "right" : "throw new Error(\"Unexpected Node subclass.\");",
    "info" : "ThrowStatement[11471-11516]:ThrowStatement[11492-11537]"
  }, {
    "left" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
    "right" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
    "info" : "VariableDeclarationStatement[11535-11593]:VariableDeclarationStatement[11556-11614]"
  }, {
    "left" : "if (preserveBlock)",
    "right" : "if (preserveBlock)",
    "info" : "IfStatement[11602-11659]:IfStatement[11623-11680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11621-11659]:Block[11642-11680]"
  }, {
    "left" : "cc.beginBlock();",
    "right" : "cc.beginBlock();",
    "info" : "ExpressionStatement[11633-11649]:ExpressionStatement[11654-11670]"
  }, {
    "left" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
    "right" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
    "info" : "VariableDeclarationStatement[11669-11885]:VariableDeclarationStatement[11690-11906]"
  }, {
    "left" : "for (Node c = first; c != null; c = c.getNext())",
    "right" : "for (Node c = first; c != null; c = c.getNext())",
    "info" : "ForStatement[11894-12430]:ForStatement[11915-12451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11943-12430]:Block[11964-12451]"
  }, {
    "left" : "add(c, Context.STATEMENT);",
    "right" : "add(c, Context.STATEMENT);",
    "info" : "ExpressionStatement[11955-11981]:ExpressionStatement[11976-12002]"
  }, {
    "left" : "if (c.isVar())",
    "right" : "if (c.isVar())",
    "info" : "IfStatement[12064-12123]:IfStatement[12085-12144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12079-12123]:Block[12100-12144]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[12093-12111]:ExpressionStatement[12114-12132]"
  }, {
    "left" : "if (c.isFunction())",
    "right" : "if (c.isFunction())",
    "info" : "IfStatement[12135-12201]:IfStatement[12156-12222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12155-12201]:Block[12176-12222]"
  }, {
    "left" : "cc.maybeLineBreak();",
    "right" : "cc.maybeLineBreak();",
    "info" : "ExpressionStatement[12169-12189]:ExpressionStatement[12190-12210]"
  }, {
    "left" : "if (preferLineBreaks)",
    "right" : "if (preferLineBreaks)",
    "info" : "IfStatement[12344-12420]:IfStatement[12365-12441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12366-12420]:Block[12387-12441]"
  }, {
    "left" : "cc.notePreferredLineBreak();",
    "right" : "cc.notePreferredLineBreak();",
    "info" : "ExpressionStatement[12380-12408]:ExpressionStatement[12401-12429]"
  }, {
    "left" : "if (preserveBlock)",
    "right" : "if (preserveBlock)",
    "info" : "IfStatement[12439-12548]:IfStatement[12460-12569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12458-12548]:Block[12479-12569]"
  }, {
    "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
    "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
    "info" : "ExpressionStatement[12470-12538]:ExpressionStatement[12491-12559]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12557-12563]:BreakStatement[12578-12584]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[12579-12594]:SwitchCase[12600-12615]"
  }, {
    "left" : "if (childCount == 4)",
    "right" : "if (childCount == 4)",
    "info" : "IfStatement[12603-13357]:IfStatement[12624-13378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12624-13067]:Block[12645-13088]"
  }, {
    "left" : "add(\"for(\");",
    "right" : "add(\"for(\");",
    "info" : "ExpressionStatement[12636-12648]:ExpressionStatement[12657-12669]"
  }, {
    "left" : "if (first.isVar())",
    "right" : "if (first.isVar())",
    "info" : "IfStatement[12659-12821]:IfStatement[12680-12842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12678-12743]:Block[12699-12764]"
  }, {
    "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
    "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
    "info" : "ExpressionStatement[12692-12731]:ExpressionStatement[12713-12752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12749-12821]:Block[12770-12842]"
  }, {
    "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
    "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
    "info" : "ExpressionStatement[12763-12809]:ExpressionStatement[12784-12830]"
  }, {
    "left" : "add(\";\");",
    "right" : "add(\";\");",
    "info" : "ExpressionStatement[12832-12841]:ExpressionStatement[12853-12862]"
  }, {
    "left" : "add(first.getNext());",
    "right" : "add(first.getNext());",
    "info" : "ExpressionStatement[12852-12873]:ExpressionStatement[12873-12894]"
  }, {
    "left" : "add(\";\");",
    "right" : "add(\";\");",
    "info" : "ExpressionStatement[12884-12893]:ExpressionStatement[12905-12914]"
  }, {
    "left" : "add(first.getNext().getNext());",
    "right" : "add(first.getNext().getNext());",
    "info" : "ExpressionStatement[12904-12935]:ExpressionStatement[12925-12956]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[12946-12955]:ExpressionStatement[12967-12976]"
  }, {
    "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
    "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
    "info" : "ExpressionStatement[12966-13057]:ExpressionStatement[12987-13078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13073-13357]:Block[13094-13378]"
  }, {
    "left" : "Preconditions.checkState(childCount == 3);",
    "right" : "Preconditions.checkState(childCount == 3);",
    "info" : "ExpressionStatement[13085-13127]:ExpressionStatement[13106-13148]"
  }, {
    "left" : "add(\"for(\");",
    "right" : "add(\"for(\");",
    "info" : "ExpressionStatement[13138-13150]:ExpressionStatement[13159-13171]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[13161-13172]:ExpressionStatement[13182-13193]"
  }, {
    "left" : "add(\"in\");",
    "right" : "add(\"in\");",
    "info" : "ExpressionStatement[13183-13193]:ExpressionStatement[13204-13214]"
  }, {
    "left" : "add(first.getNext());",
    "right" : "add(first.getNext());",
    "info" : "ExpressionStatement[13204-13225]:ExpressionStatement[13225-13246]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[13236-13245]:ExpressionStatement[13257-13266]"
  }, {
    "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
    "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
    "info" : "ExpressionStatement[13256-13347]:ExpressionStatement[13277-13368]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[13380-13394]:SwitchCase[13401-13415]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[13403-13445]:ExpressionStatement[13424-13466]"
  }, {
    "left" : "add(\"do\");",
    "right" : "add(\"do\");",
    "info" : "ExpressionStatement[13454-13464]:ExpressionStatement[13475-13485]"
  }, {
    "left" : "addNonEmptyStatement(first, Context.OTHER, false);",
    "right" : "addNonEmptyStatement(first, Context.OTHER, false);",
    "info" : "ExpressionStatement[13473-13523]:ExpressionStatement[13494-13544]"
  }, {
    "left" : "add(\"while(\");",
    "right" : "add(\"while(\");",
    "info" : "ExpressionStatement[13532-13546]:ExpressionStatement[13553-13567]"
  }, {
    "left" : "add(last);",
    "right" : "add(last);",
    "info" : "ExpressionStatement[13555-13565]:ExpressionStatement[13576-13586]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[13574-13583]:ExpressionStatement[13595-13604]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[13592-13610]:ExpressionStatement[13613-13631]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[13633-13650]:SwitchCase[13654-13671]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[13659-13701]:ExpressionStatement[13680-13722]"
  }, {
    "left" : "add(\"while(\");",
    "right" : "add(\"while(\");",
    "info" : "ExpressionStatement[13710-13724]:ExpressionStatement[13731-13745]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[13733-13744]:ExpressionStatement[13754-13765]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[13753-13762]:ExpressionStatement[13774-13783]"
  }, {
    "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
    "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
    "info" : "ExpressionStatement[13771-13860]:ExpressionStatement[13792-13881]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[13883-13900]:SwitchCase[13904-13921]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[13909-13951]:ExpressionStatement[13930-13972]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[13974-13993]:SwitchCase[13995-14014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13994-14803]:Block[14015-14824]"
  }, {
    "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
    "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
    "info" : "ExpressionStatement[14004-14131]:ExpressionStatement[14025-14152]"
  }, {
    "left" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
    "right" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
    "info" : "ExpressionStatement[14140-14244]:ExpressionStatement[14161-14265]"
  }, {
    "left" : "boolean needsParens = (first.isNumber());",
    "right" : "boolean needsParens = (first.isNumber());",
    "info" : "VariableDeclarationStatement[14253-14294]:VariableDeclarationStatement[14274-14315]"
  }, {
    "left" : "if (needsParens)",
    "right" : "if (needsParens)",
    "info" : "IfStatement[14303-14351]:IfStatement[14324-14372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14320-14351]:Block[14341-14372]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[14332-14341]:ExpressionStatement[14353-14362]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(type), context);",
    "right" : "addExpr(first, NodeUtil.precedence(type), context);",
    "info" : "ExpressionStatement[14360-14411]:ExpressionStatement[14381-14432]"
  }, {
    "left" : "if (needsParens)",
    "right" : "if (needsParens)",
    "info" : "IfStatement[14420-14468]:IfStatement[14441-14489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14437-14468]:Block[14458-14489]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[14449-14458]:ExpressionStatement[14470-14479]"
  }, {
    "left" : "if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString()))",
    "right" : "if (this.languageMode == LanguageMode.ECMASCRIPT3\n            && TokenStream.isKeyword(last.getString()))",
    "info" : "IfStatement[14477-14780]:IfStatement[14498-14801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14583-14700]:Block[14604-14721]"
  }, {
    "left" : "add(\"[\");",
    "right" : "add(\"[\");",
    "info" : "ExpressionStatement[14640-14649]:ExpressionStatement[14661-14670]"
  }, {
    "left" : "add(last);",
    "right" : "add(last);",
    "info" : "ExpressionStatement[14660-14670]:ExpressionStatement[14681-14691]"
  }, {
    "left" : "add(\"]\");",
    "right" : "add(\"]\");",
    "info" : "ExpressionStatement[14681-14690]:ExpressionStatement[14702-14711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14706-14780]:Block[14727-14801]"
  }, {
    "left" : "add(\".\");",
    "right" : "add(\".\");",
    "info" : "ExpressionStatement[14718-14727]:ExpressionStatement[14739-14748]"
  }, {
    "left" : "addIdentifier(last.getString());",
    "right" : "addIdentifier(last.getString());",
    "info" : "ExpressionStatement[14738-14770]:ExpressionStatement[14759-14791]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14789-14795]:BreakStatement[14810-14816]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[14811-14830]:SwitchCase[14832-14851]"
  }, {
    "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
    "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
    "info" : "ExpressionStatement[14839-14965]:ExpressionStatement[14860-14986]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(type), context);",
    "right" : "addExpr(first, NodeUtil.precedence(type), context);",
    "info" : "ExpressionStatement[14974-15025]:ExpressionStatement[14995-15046]"
  }, {
    "left" : "add(\"[\");",
    "right" : "add(\"[\");",
    "info" : "ExpressionStatement[15034-15043]:ExpressionStatement[15055-15064]"
  }, {
    "left" : "add(first.getNext());",
    "right" : "add(first.getNext());",
    "info" : "ExpressionStatement[15052-15073]:ExpressionStatement[15073-15094]"
  }, {
    "left" : "add(\"]\");",
    "right" : "add(\"]\");",
    "info" : "ExpressionStatement[15082-15091]:ExpressionStatement[15103-15112]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[15114-15130]:SwitchCase[15135-15151]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[15139-15181]:ExpressionStatement[15160-15202]"
  }, {
    "left" : "add(\"with(\");",
    "right" : "add(\"with(\");",
    "info" : "ExpressionStatement[15190-15203]:ExpressionStatement[15211-15224]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[15212-15223]:ExpressionStatement[15233-15244]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[15232-15241]:ExpressionStatement[15253-15262]"
  }, {
    "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
    "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
    "info" : "ExpressionStatement[15250-15339]:ExpressionStatement[15271-15360]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[15362-15377]:SwitchCase[15383-15398]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[15384-15399]:SwitchCase[15405-15420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15400-15893]:Block[15421-15914]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[15410-15452]:ExpressionStatement[15431-15473]"
  }, {
    "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
    "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
    "info" : "VariableDeclarationStatement[15461-15504]:VariableDeclarationStatement[15482-15525]"
  }, {
    "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
    "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
    "info" : "VariableDeclarationStatement[15513-15561]:VariableDeclarationStatement[15534-15582]"
  }, {
    "left" : "if (postProp != 0)",
    "right" : "if (postProp != 0)",
    "info" : "IfStatement[15679-15870]:IfStatement[15700-15891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15698-15801]:Block[15719-15822]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(type), context);",
    "right" : "addExpr(first, NodeUtil.precedence(type), context);",
    "info" : "ExpressionStatement[15710-15761]:ExpressionStatement[15731-15782]"
  }, {
    "left" : "cc.addOp(o, false);",
    "right" : "cc.addOp(o, false);",
    "info" : "ExpressionStatement[15772-15791]:ExpressionStatement[15793-15812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15807-15870]:Block[15828-15891]"
  }, {
    "left" : "cc.addOp(o, false);",
    "right" : "cc.addOp(o, false);",
    "info" : "ExpressionStatement[15819-15838]:ExpressionStatement[15840-15859]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[15849-15860]:ExpressionStatement[15870-15881]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15879-15885]:BreakStatement[15900-15906]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[15901-15917]:SwitchCase[15922-15938]"
  }, {
    "left" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
    "right" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
    "info" : "IfStatement[16502-16809]:IfStatement[16523-16830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16602-16730]:Block[16623-16751]"
  }, {
    "left" : "add(\"(0,\");",
    "right" : "add(\"(0,\");",
    "info" : "ExpressionStatement[16614-16625]:ExpressionStatement[16635-16646]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
    "right" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
    "info" : "ExpressionStatement[16636-16700]:ExpressionStatement[16657-16721]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[16711-16720]:ExpressionStatement[16732-16741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16736-16809]:Block[16757-16830]"
  }, {
    "left" : "addExpr(first, NodeUtil.precedence(type), context);",
    "right" : "addExpr(first, NodeUtil.precedence(type), context);",
    "info" : "ExpressionStatement[16748-16799]:ExpressionStatement[16769-16820]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[16818-16827]:ExpressionStatement[16839-16848]"
  }, {
    "left" : "addList(first.getNext());",
    "right" : "addList(first.getNext());",
    "info" : "ExpressionStatement[16836-16861]:ExpressionStatement[16857-16882]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[16870-16879]:ExpressionStatement[16891-16900]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[16902-16916]:SwitchCase[16923-16937]"
  }, {
    "left" : "boolean hasElse = childCount == 3;",
    "right" : "boolean hasElse = childCount == 3;",
    "info" : "VariableDeclarationStatement[16925-16959]:VariableDeclarationStatement[16946-16980]"
  }, {
    "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
    "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
    "info" : "VariableDeclarationStatement[16968-17062]:VariableDeclarationStatement[16989-17083]"
  }, {
    "left" : "if (ambiguousElseClause)",
    "right" : "if (ambiguousElseClause)",
    "info" : "IfStatement[17071-17134]:IfStatement[17092-17155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17096-17134]:Block[17117-17155]"
  }, {
    "left" : "cc.beginBlock();",
    "right" : "cc.beginBlock();",
    "info" : "ExpressionStatement[17108-17124]:ExpressionStatement[17129-17145]"
  }, {
    "left" : "add(\"if(\");",
    "right" : "add(\"if(\");",
    "info" : "ExpressionStatement[17144-17155]:ExpressionStatement[17165-17176]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[17164-17175]:ExpressionStatement[17185-17196]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[17184-17193]:ExpressionStatement[17205-17214]"
  }, {
    "left" : "if (hasElse)",
    "right" : "if (hasElse)",
    "info" : "IfStatement[17203-17594]:IfStatement[17224-17615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17216-17453]:Block[17237-17474]"
  }, {
    "left" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
    "right" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
    "info" : "ExpressionStatement[17228-17318]:ExpressionStatement[17249-17339]"
  }, {
    "left" : "add(\"else\");",
    "right" : "add(\"else\");",
    "info" : "ExpressionStatement[17329-17341]:ExpressionStatement[17350-17362]"
  }, {
    "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
    "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
    "info" : "ExpressionStatement[17352-17443]:ExpressionStatement[17373-17464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17459-17594]:Block[17480-17615]"
  }, {
    "left" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
    "right" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
    "info" : "ExpressionStatement[17471-17531]:ExpressionStatement[17492-17552]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[17542-17584]:ExpressionStatement[17563-17605]"
  }, {
    "left" : "if (ambiguousElseClause)",
    "right" : "if (ambiguousElseClause)",
    "info" : "IfStatement[17604-17665]:IfStatement[17625-17686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17629-17665]:Block[17650-17686]"
  }, {
    "left" : "cc.endBlock();",
    "right" : "cc.endBlock();",
    "info" : "ExpressionStatement[17641-17655]:ExpressionStatement[17662-17676]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[17688-17704]:SwitchCase[17709-17725]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[17713-17755]:ExpressionStatement[17734-17776]"
  }, {
    "left" : "cc.addConstant(\"null\");",
    "right" : "cc.addConstant(\"null\");",
    "info" : "ExpressionStatement[17764-17787]:ExpressionStatement[17785-17808]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[17810-17826]:SwitchCase[17831-17847]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[17835-17877]:ExpressionStatement[17856-17898]"
  }, {
    "left" : "add(\"this\");",
    "right" : "add(\"this\");",
    "info" : "ExpressionStatement[17886-17898]:ExpressionStatement[17907-17919]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[17921-17938]:SwitchCase[17942-17959]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[17947-17989]:ExpressionStatement[17968-18010]"
  }, {
    "left" : "cc.addConstant(\"false\");",
    "right" : "cc.addConstant(\"false\");",
    "info" : "ExpressionStatement[17998-18022]:ExpressionStatement[18019-18043]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[18045-18061]:SwitchCase[18066-18082]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[18070-18112]:ExpressionStatement[18091-18133]"
  }, {
    "left" : "cc.addConstant(\"true\");",
    "right" : "cc.addConstant(\"true\");",
    "info" : "ExpressionStatement[18121-18144]:ExpressionStatement[18142-18165]"
  }, {
    "left" : "case Token.CONTINUE:",
    "right" : "case Token.CONTINUE:",
    "info" : "SwitchCase[18167-18187]:SwitchCase[18188-18208]"
  }, {
    "left" : "Preconditions.checkState(childCount <= 1);",
    "right" : "Preconditions.checkState(childCount <= 1);",
    "info" : "ExpressionStatement[18196-18238]:ExpressionStatement[18217-18259]"
  }, {
    "left" : "add(\"continue\");",
    "right" : "add(\"continue\");",
    "info" : "ExpressionStatement[18247-18263]:ExpressionStatement[18268-18284]"
  }, {
    "left" : "if (childCount == 1)",
    "right" : "if (childCount == 1)",
    "info" : "IfStatement[18272-18473]:IfStatement[18293-18494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18293-18473]:Block[18314-18494]"
  }, {
    "left" : "if (!first.isLabelName())",
    "right" : "if (!first.isLabelName())",
    "info" : "IfStatement[18305-18421]:IfStatement[18326-18442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18331-18421]:Block[18352-18442]"
  }, {
    "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
    "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
    "info" : "ThrowStatement[18345-18409]:ThrowStatement[18366-18430]"
  }, {
    "left" : "add(\" \");",
    "right" : "add(\" \");",
    "info" : "ExpressionStatement[18432-18441]:ExpressionStatement[18453-18462]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[18452-18463]:ExpressionStatement[18473-18484]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[18482-18500]:ExpressionStatement[18503-18521]"
  }, {
    "left" : "case Token.DEBUGGER:",
    "right" : "case Token.DEBUGGER:",
    "info" : "SwitchCase[18523-18543]:SwitchCase[18544-18564]"
  }, {
    "left" : "Preconditions.checkState(childCount == 0);",
    "right" : "Preconditions.checkState(childCount == 0);",
    "info" : "ExpressionStatement[18552-18594]:ExpressionStatement[18573-18615]"
  }, {
    "left" : "add(\"debugger\");",
    "right" : "add(\"debugger\");",
    "info" : "ExpressionStatement[18603-18619]:ExpressionStatement[18624-18640]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[18628-18646]:ExpressionStatement[18649-18667]"
  }, {
    "left" : "case Token.BREAK:",
    "right" : "case Token.BREAK:",
    "info" : "SwitchCase[18669-18686]:SwitchCase[18690-18707]"
  }, {
    "left" : "Preconditions.checkState(childCount <= 1);",
    "right" : "Preconditions.checkState(childCount <= 1);",
    "info" : "ExpressionStatement[18695-18737]:ExpressionStatement[18716-18758]"
  }, {
    "left" : "add(\"break\");",
    "right" : "add(\"break\");",
    "info" : "ExpressionStatement[18746-18759]:ExpressionStatement[18767-18780]"
  }, {
    "left" : "if (childCount == 1)",
    "right" : "if (childCount == 1)",
    "info" : "IfStatement[18768-18969]:IfStatement[18789-18990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18789-18969]:Block[18810-18990]"
  }, {
    "left" : "if (!first.isLabelName())",
    "right" : "if (!first.isLabelName())",
    "info" : "IfStatement[18801-18917]:IfStatement[18822-18938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18827-18917]:Block[18848-18938]"
  }, {
    "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
    "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
    "info" : "ThrowStatement[18841-18905]:ThrowStatement[18862-18926]"
  }, {
    "left" : "add(\" \");",
    "right" : "add(\" \");",
    "info" : "ExpressionStatement[18928-18937]:ExpressionStatement[18949-18958]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[18948-18959]:ExpressionStatement[18969-18980]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[18978-18996]:ExpressionStatement[18999-19017]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[19019-19042]:SwitchCase[19040-19063]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[19051-19093]:ExpressionStatement[19072-19114]"
  }, {
    "left" : "add(first, Context.START_OF_EXPR);",
    "right" : "add(first, Context.START_OF_EXPR);",
    "info" : "ExpressionStatement[19102-19136]:ExpressionStatement[19123-19157]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[19145-19163]:ExpressionStatement[19166-19184]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[19186-19201]:SwitchCase[19207-19222]"
  }, {
    "left" : "add(\"new \");",
    "right" : "add(\"new \");",
    "info" : "ExpressionStatement[19210-19222]:ExpressionStatement[19231-19243]"
  }, {
    "left" : "int precedence = NodeUtil.precedence(type);",
    "right" : "int precedence = NodeUtil.precedence(type);",
    "info" : "VariableDeclarationStatement[19231-19274]:VariableDeclarationStatement[19252-19295]"
  }, {
    "left" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
    "right" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
    "info" : "IfStatement[19507-19671]:IfStatement[19528-19692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19595-19671]:Block[19616-19692]"
  }, {
    "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
    "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
    "info" : "ExpressionStatement[19607-19661]:ExpressionStatement[19628-19682]"
  }, {
    "left" : "addExpr(first, precedence, Context.OTHER);",
    "right" : "addExpr(first, precedence, Context.OTHER);",
    "info" : "ExpressionStatement[19680-19722]:ExpressionStatement[19701-19743]"
  }, {
    "left" : "Node next = first.getNext();",
    "right" : "Node next = first.getNext();",
    "info" : "VariableDeclarationStatement[19790-19818]:VariableDeclarationStatement[19811-19839]"
  }, {
    "left" : "if (next != null)",
    "right" : "if (next != null)",
    "info" : "IfStatement[19827-19921]:IfStatement[19848-19942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19845-19921]:Block[19866-19942]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[19857-19866]:ExpressionStatement[19878-19887]"
  }, {
    "left" : "addList(next);",
    "right" : "addList(next);",
    "info" : "ExpressionStatement[19877-19891]:ExpressionStatement[19898-19912]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[19902-19911]:ExpressionStatement[19923-19932]"
  }, {
    "left" : "case Token.STRING_KEY:",
    "right" : "case Token.STRING_KEY:",
    "info" : "SwitchCase[19944-19966]:SwitchCase[19965-19987]"
  }, {
    "left" : "Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");",
    "right" : "Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");",
    "info" : "ExpressionStatement[19975-20066]:ExpressionStatement[19996-20087]"
  }, {
    "left" : "addJsString(n);",
    "right" : "addJsString(n);",
    "info" : "ExpressionStatement[20075-20090]:ExpressionStatement[20096-20111]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[20113-20131]:SwitchCase[20134-20152]"
  }, {
    "left" : "Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");",
    "right" : "Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");",
    "info" : "ExpressionStatement[20140-20229]:ExpressionStatement[20161-20250]"
  }, {
    "left" : "addJsString(n);",
    "right" : "addJsString(n);",
    "info" : "ExpressionStatement[20238-20253]:ExpressionStatement[20259-20274]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[20276-20295]:SwitchCase[20297-20316]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[20304-20346]:ExpressionStatement[20325-20367]"
  }, {
    "left" : "add(\"delete \");",
    "right" : "add(\"delete \");",
    "info" : "ExpressionStatement[20355-20370]:ExpressionStatement[20376-20391]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[20379-20390]:ExpressionStatement[20400-20411]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[20413-20434]:SwitchCase[20434-20455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20435-21898]:Block[20456-21919]"
  }, {
    "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
    "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
    "info" : "VariableDeclarationStatement[20445-20502]:VariableDeclarationStatement[20466-20523]"
  }, {
    "left" : "if (needsParens)",
    "right" : "if (needsParens)",
    "info" : "IfStatement[20511-20559]:IfStatement[20532-20580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20528-20559]:Block[20549-20580]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[20540-20549]:ExpressionStatement[20561-20570]"
  }, {
    "left" : "add(\"{\");",
    "right" : "add(\"{\");",
    "info" : "ExpressionStatement[20568-20577]:ExpressionStatement[20589-20598]"
  }, {
    "left" : "for (Node c = first; c != null; c = c.getNext())",
    "right" : "for (Node c = first; c != null; c = c.getNext())",
    "info" : "ForStatement[20586-21800]:ForStatement[20607-21821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20635-21800]:Block[20656-21821]"
  }, {
    "left" : "if (c != first)",
    "right" : "if (c != first)",
    "info" : "IfStatement[20647-20708]:IfStatement[20668-20729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20663-20708]:Block[20684-20729]"
  }, {
    "left" : "cc.listSeparator();",
    "right" : "cc.listSeparator();",
    "info" : "ExpressionStatement[20677-20696]:ExpressionStatement[20698-20717]"
  }, {
    "left" : "if (c.isGetterDef() || c.isSetterDef())",
    "right" : "if (c.isGetterDef() || c.isSetterDef())",
    "info" : "IfStatement[20720-21790]:IfStatement[20741-21811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20760-20793]:Block[20781-20814]"
  }, {
    "left" : "add(c);",
    "right" : "add(c);",
    "info" : "ExpressionStatement[20774-20781]:ExpressionStatement[20795-20802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20799-21790]:Block[20820-21811]"
  }, {
    "left" : "Preconditions.checkState(c.isStringKey());",
    "right" : "Preconditions.checkState(c.isStringKey());",
    "info" : "ExpressionStatement[20813-20855]:ExpressionStatement[20834-20876]"
  }, {
    "left" : "String key = c.getString();",
    "right" : "String key = c.getString();",
    "info" : "VariableDeclarationStatement[20868-20895]:VariableDeclarationStatement[20889-20916]"
  }, {
    "left" : "if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key))",
    "right" : "if (!c.isQuotedString()\n                && !(languageMode == LanguageMode.ECMASCRIPT3\n                    && TokenStream.isKeyword(key))\n                && TokenStream.isJSIdentifier(key)\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                && NodeUtil.isLatin(key))",
    "info" : "IfStatement[21028-21698]:IfStatement[21049-21719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21374-21413]:Block[21395-21434]"
  }, {
    "left" : "add(key);",
    "right" : "add(key);",
    "info" : "ExpressionStatement[21390-21399]:ExpressionStatement[21411-21420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21419-21698]:Block[21440-21719]"
  }, {
    "left" : "double d = getSimpleNumber(key);",
    "right" : "double d = getSimpleNumber(key);",
    "info" : "VariableDeclarationStatement[21496-21528]:VariableDeclarationStatement[21517-21549]"
  }, {
    "left" : "if (!Double.isNaN(d))",
    "right" : "if (!Double.isNaN(d))",
    "info" : "IfStatement[21543-21684]:IfStatement[21564-21705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21565-21615]:Block[21586-21636]"
  }, {
    "left" : "cc.addNumber(d);",
    "right" : "cc.addNumber(d);",
    "info" : "ExpressionStatement[21583-21599]:ExpressionStatement[21604-21620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21621-21684]:Block[21642-21705]"
  }, {
    "left" : "addExpr(c, 1, Context.OTHER);",
    "right" : "addExpr(c, 1, Context.OTHER);",
    "info" : "ExpressionStatement[21639-21668]:ExpressionStatement[21660-21689]"
  }, {
    "left" : "add(\":\");",
    "right" : "add(\":\");",
    "info" : "ExpressionStatement[21711-21720]:ExpressionStatement[21732-21741]"
  }, {
    "left" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
    "right" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
    "info" : "ExpressionStatement[21733-21778]:ExpressionStatement[21754-21799]"
  }, {
    "left" : "add(\"}\");",
    "right" : "add(\"}\");",
    "info" : "ExpressionStatement[21809-21818]:ExpressionStatement[21830-21839]"
  }, {
    "left" : "if (needsParens)",
    "right" : "if (needsParens)",
    "info" : "IfStatement[21827-21875]:IfStatement[21848-21896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21844-21875]:Block[21865-21896]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[21856-21865]:ExpressionStatement[21877-21886]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21884-21890]:BreakStatement[21905-21911]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[21906-21924]:SwitchCase[21927-21945]"
  }, {
    "left" : "add(\"switch(\");",
    "right" : "add(\"switch(\");",
    "info" : "ExpressionStatement[21933-21948]:ExpressionStatement[21954-21969]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[21957-21968]:ExpressionStatement[21978-21989]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[21977-21986]:ExpressionStatement[21998-22007]"
  }, {
    "left" : "cc.beginBlock();",
    "right" : "cc.beginBlock();",
    "info" : "ExpressionStatement[21995-22011]:ExpressionStatement[22016-22032]"
  }, {
    "left" : "addAllSiblings(first.getNext());",
    "right" : "addAllSiblings(first.getNext());",
    "info" : "ExpressionStatement[22020-22052]:ExpressionStatement[22041-22073]"
  }, {
    "left" : "cc.endBlock(context == Context.STATEMENT);",
    "right" : "cc.endBlock(context == Context.STATEMENT);",
    "info" : "ExpressionStatement[22061-22103]:ExpressionStatement[22082-22124]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[22126-22142]:SwitchCase[22147-22163]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[22151-22193]:ExpressionStatement[22172-22214]"
  }, {
    "left" : "add(\"case \");",
    "right" : "add(\"case \");",
    "info" : "ExpressionStatement[22202-22215]:ExpressionStatement[22223-22236]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[22224-22235]:ExpressionStatement[22245-22256]"
  }, {
    "left" : "addCaseBody(last);",
    "right" : "addCaseBody(last);",
    "info" : "ExpressionStatement[22244-22262]:ExpressionStatement[22265-22283]"
  }, {
    "left" : "case Token.DEFAULT_CASE:",
    "right" : "case Token.DEFAULT_CASE:",
    "info" : "SwitchCase[22285-22309]:SwitchCase[22306-22330]"
  }, {
    "left" : "Preconditions.checkState(childCount == 1);",
    "right" : "Preconditions.checkState(childCount == 1);",
    "info" : "ExpressionStatement[22318-22360]:ExpressionStatement[22339-22381]"
  }, {
    "left" : "add(\"default\");",
    "right" : "add(\"default\");",
    "info" : "ExpressionStatement[22369-22384]:ExpressionStatement[22390-22405]"
  }, {
    "left" : "addCaseBody(first);",
    "right" : "addCaseBody(first);",
    "info" : "ExpressionStatement[22393-22412]:ExpressionStatement[22414-22433]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[22435-22452]:SwitchCase[22456-22473]"
  }, {
    "left" : "Preconditions.checkState(childCount == 2);",
    "right" : "Preconditions.checkState(childCount == 2);",
    "info" : "ExpressionStatement[22461-22503]:ExpressionStatement[22482-22524]"
  }, {
    "left" : "if (!first.isLabelName())",
    "right" : "if (!first.isLabelName())",
    "info" : "IfStatement[22512-22624]:IfStatement[22533-22645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22538-22624]:Block[22559-22645]"
  }, {
    "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
    "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
    "info" : "ThrowStatement[22550-22614]:ThrowStatement[22571-22635]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[22633-22644]:ExpressionStatement[22654-22665]"
  }, {
    "left" : "add(\":\");",
    "right" : "add(\":\");",
    "info" : "ExpressionStatement[22653-22662]:ExpressionStatement[22674-22683]"
  }, {
    "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
    "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
    "info" : "ExpressionStatement[22671-22759]:ExpressionStatement[22692-22780]"
  }, {
    "left" : "case Token.CAST:",
    "right" : "case Token.CAST:",
    "info" : "SwitchCase[22782-22798]:SwitchCase[22803-22819]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[22807-22816]:ExpressionStatement[22828-22837]"
  }, {
    "left" : "add(first);",
    "right" : "add(first);",
    "info" : "ExpressionStatement[22825-22836]:ExpressionStatement[22846-22857]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[22845-22854]:ExpressionStatement[22866-22875]"
  }, {
    "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
    "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
    "info" : "ThrowStatement[22894-22960]:ThrowStatement[22915-22981]"
  }, {
    "left" : "cc.endSourceMapping(n);",
    "right" : "cc.endSourceMapping(n);",
    "info" : "ExpressionStatement[22972-22995]:ExpressionStatement[22993-23016]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23244-23251]:Modifier[23265-23272]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23252-23256]:PrimitiveType[23273-23277]"
  }, {
    "left" : "unrollBinaryOperator",
    "right" : "unrollBinaryOperator",
    "info" : "SimpleName[23257-23277]:SimpleName[23278-23298]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[23285-23291]:SingleVariableDeclaration[23306-23312]"
  }, {
    "left" : "int op",
    "right" : "int op",
    "info" : "SingleVariableDeclaration[23293-23299]:SingleVariableDeclaration[23314-23320]"
  }, {
    "left" : "String opStr",
    "right" : "String opStr",
    "info" : "SingleVariableDeclaration[23301-23313]:SingleVariableDeclaration[23322-23334]"
  }, {
    "left" : "Context context",
    "right" : "Context context",
    "info" : "SingleVariableDeclaration[23315-23330]:SingleVariableDeclaration[23336-23351]"
  }, {
    "left" : "Context rhsContext",
    "right" : "Context rhsContext",
    "info" : "SingleVariableDeclaration[23338-23356]:SingleVariableDeclaration[23359-23377]"
  }, {
    "left" : "int leftPrecedence",
    "right" : "int leftPrecedence",
    "info" : "SingleVariableDeclaration[23358-23376]:SingleVariableDeclaration[23379-23397]"
  }, {
    "left" : "int rightPrecedence",
    "right" : "int rightPrecedence",
    "info" : "SingleVariableDeclaration[23378-23397]:SingleVariableDeclaration[23399-23418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23399-23840]:Block[23420-23861]"
  }, {
    "left" : "Node firstNonOperator = n.getFirstChild();",
    "right" : "Node firstNonOperator = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[23405-23447]:VariableDeclarationStatement[23426-23468]"
  }, {
    "left" : "while (firstNonOperator.getType() == op)",
    "right" : "while (firstNonOperator.getType() == op)",
    "info" : "WhileStatement[23452-23559]:WhileStatement[23473-23580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23493-23559]:Block[23514-23580]"
  }, {
    "left" : "firstNonOperator = firstNonOperator.getFirstChild();",
    "right" : "firstNonOperator = firstNonOperator.getFirstChild();",
    "info" : "ExpressionStatement[23501-23553]:ExpressionStatement[23522-23574]"
  }, {
    "left" : "addExpr(firstNonOperator, leftPrecedence, context);",
    "right" : "addExpr(firstNonOperator, leftPrecedence, context);",
    "info" : "ExpressionStatement[23565-23616]:ExpressionStatement[23586-23637]"
  }, {
    "left" : "Node current = firstNonOperator;",
    "right" : "Node current = firstNonOperator;",
    "info" : "VariableDeclarationStatement[23622-23654]:VariableDeclarationStatement[23643-23675]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[23659-23836]:DoStatement[23680-23857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23662-23814]:Block[23683-23835]"
  }, {
    "left" : "current = current.getParent();",
    "right" : "current = current.getParent();",
    "info" : "ExpressionStatement[23670-23700]:ExpressionStatement[23691-23721]"
  }, {
    "left" : "cc.addOp(opStr, true);",
    "right" : "cc.addOp(opStr, true);",
    "info" : "ExpressionStatement[23707-23729]:ExpressionStatement[23728-23750]"
  }, {
    "left" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
    "right" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
    "info" : "ExpressionStatement[23736-23808]:ExpressionStatement[23757-23829]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23844-23850]:Modifier[23865-23871]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23851-23858]:PrimitiveType[23872-23879]"
  }, {
    "left" : "isSimpleNumber",
    "right" : "isSimpleNumber",
    "info" : "SimpleName[23859-23873]:SimpleName[23880-23894]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[23874-23882]:SingleVariableDeclaration[23895-23903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23884-24152]:Block[23905-24173]"
  }, {
    "left" : "int len = s.length();",
    "right" : "int len = s.length();",
    "info" : "VariableDeclarationStatement[23890-23911]:VariableDeclarationStatement[23911-23932]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[23916-23957]:IfStatement[23937-23978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23930-23957]:Block[23951-23978]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23938-23951]:ReturnStatement[23959-23972]"
  }, {
    "left" : "for (int index = 0; index < len; index++)",
    "right" : "for (int index = 0; index < len; index++)",
    "info" : "ForStatement[23962-24105]:ForStatement[23983-24126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24004-24105]:Block[24025-24126]"
  }, {
    "left" : "char c = s.charAt(index);",
    "right" : "char c = s.charAt(index);",
    "info" : "VariableDeclarationStatement[24012-24037]:VariableDeclarationStatement[24033-24058]"
  }, {
    "left" : "if (c < '0' || c > '9')",
    "right" : "if (c < '0' || c > '9')",
    "info" : "IfStatement[24044-24099]:IfStatement[24065-24120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24068-24099]:Block[24089-24120]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[24078-24091]:ReturnStatement[24099-24112]"
  }, {
    "left" : "return len == 1 || s.charAt(0) != '0';",
    "right" : "return len == 1 || s.charAt(0) != '0';",
    "info" : "ReturnStatement[24110-24148]:ReturnStatement[24131-24169]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24156-24162]:Modifier[24177-24183]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[24163-24169]:PrimitiveType[24184-24190]"
  }, {
    "left" : "getSimpleNumber",
    "right" : "getSimpleNumber",
    "info" : "SimpleName[24170-24185]:SimpleName[24191-24206]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[24186-24194]:SingleVariableDeclaration[24207-24215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24196-24509]:Block[24217-24530]"
  }, {
    "left" : "if (isSimpleNumber(s))",
    "right" : "if (isSimpleNumber(s))",
    "info" : "IfStatement[24202-24482]:IfStatement[24223-24503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24225-24482]:Block[24246-24503]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[24233-24476]:TryStatement[24254-24497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24237-24368]:Block[24258-24389]"
  }, {
    "left" : "long l = Long.parseLong(s);",
    "right" : "long l = Long.parseLong(s);",
    "info" : "VariableDeclarationStatement[24247-24274]:VariableDeclarationStatement[24268-24295]"
  }, {
    "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
    "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
    "info" : "IfStatement[24283-24360]:IfStatement[24304-24381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24329-24360]:Block[24350-24381]"
  }, {
    "left" : "return l;",
    "right" : "return l;",
    "info" : "ReturnStatement[24341-24350]:ReturnStatement[24362-24371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24401-24476]:Block[24422-24497]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[24487-24505]:ReturnStatement[24508-24526]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24576-24583]:Modifier[24597-24604]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24584-24591]:PrimitiveType[24605-24612]"
  }, {
    "left" : "isIndirectEval",
    "right" : "isIndirectEval",
    "info" : "SimpleName[24592-24606]:SimpleName[24613-24627]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24607-24613]:SingleVariableDeclaration[24628-24634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24615-24722]:Block[24636-24743]"
  }, {
    "left" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
    "right" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
    "info" : "ReturnStatement[24621-24718]:ReturnStatement[24642-24739]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24999-25006]:Modifier[25020-25027]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25007-25011]:PrimitiveType[25028-25032]"
  }, {
    "left" : "addNonEmptyStatement",
    "right" : "addNonEmptyStatement",
    "info" : "SimpleName[25012-25032]:SimpleName[25033-25053]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25040-25046]:SingleVariableDeclaration[25061-25067]"
  }, {
    "left" : "Context context",
    "right" : "Context context",
    "info" : "SingleVariableDeclaration[25048-25063]:SingleVariableDeclaration[25069-25084]"
  }, {
    "left" : "boolean allowNonBlockChild",
    "right" : "boolean allowNonBlockChild",
    "info" : "SingleVariableDeclaration[25065-25091]:SingleVariableDeclaration[25086-25112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25093-26823]:Block[25114-26844]"
  }, {
    "left" : "Node nodeToProcess = n;",
    "right" : "Node nodeToProcess = n;",
    "info" : "VariableDeclarationStatement[25099-25122]:VariableDeclarationStatement[25120-25143]"
  }, {
    "left" : "if (!allowNonBlockChild && !n.isBlock())",
    "right" : "if (!allowNonBlockChild && !n.isBlock())",
    "info" : "IfStatement[25128-25223]:IfStatement[25149-25244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25169-25223]:Block[25190-25244]"
  }, {
    "left" : "throw new Error(\"Missing BLOCK child.\");",
    "right" : "throw new Error(\"Missing BLOCK child.\");",
    "info" : "ThrowStatement[25177-25217]:ThrowStatement[25198-25238]"
  }, {
    "left" : "if (n.isBlock())",
    "right" : "if (n.isBlock())",
    "info" : "IfStatement[25354-26480]:IfStatement[25375-26501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25371-26480]:Block[25392-26501]"
  }, {
    "left" : "int count = getNonEmptyChildCount(n, 2);",
    "right" : "int count = getNonEmptyChildCount(n, 2);",
    "info" : "VariableDeclarationStatement[25379-25419]:VariableDeclarationStatement[25400-25440]"
  }, {
    "left" : "if (count == 0)",
    "right" : "if (count == 0)",
    "info" : "IfStatement[25426-25679]:IfStatement[25447-25700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25442-25679]:Block[25463-25700]"
  }, {
    "left" : "if (cc.shouldPreserveExtraBlocks())",
    "right" : "if (cc.shouldPreserveExtraBlocks())",
    "info" : "IfStatement[25452-25655]:IfStatement[25473-25676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25488-25605]:Block[25509-25626]"
  }, {
    "left" : "cc.beginBlock();",
    "right" : "cc.beginBlock();",
    "info" : "ExpressionStatement[25500-25516]:ExpressionStatement[25521-25537]"
  }, {
    "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
    "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
    "info" : "ExpressionStatement[25527-25595]:ExpressionStatement[25548-25616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25611-25655]:Block[25632-25676]"
  }, {
    "left" : "cc.endStatement(true);",
    "right" : "cc.endStatement(true);",
    "info" : "ExpressionStatement[25623-25645]:ExpressionStatement[25644-25666]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[25664-25671]:ReturnStatement[25685-25692]"
  }, {
    "left" : "if (count == 1)",
    "right" : "if (count == 1)",
    "info" : "IfStatement[25687-26400]:IfStatement[25708-26421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25703-26400]:Block[25724-26421]"
  }, {
    "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
    "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
    "info" : "VariableDeclarationStatement[25871-25921]:VariableDeclarationStatement[25892-25942]"
  }, {
    "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
    "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
    "info" : "VariableDeclarationStatement[25930-25989]:VariableDeclarationStatement[25951-26010]"
  }, {
    "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
    "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
    "info" : "IfStatement[25998-26392]:IfStatement[26019-26413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26068-26287]:Block[26089-26308]"
  }, {
    "left" : "cc.beginBlock();",
    "right" : "cc.beginBlock();",
    "info" : "ExpressionStatement[26080-26096]:ExpressionStatement[26101-26117]"
  }, {
    "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
    "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
    "info" : "ExpressionStatement[26107-26149]:ExpressionStatement[26128-26170]"
  }, {
    "left" : "cc.maybeLineBreak();",
    "right" : "cc.maybeLineBreak();",
    "info" : "ExpressionStatement[26160-26180]:ExpressionStatement[26181-26201]"
  }, {
    "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
    "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
    "info" : "ExpressionStatement[26191-26259]:ExpressionStatement[26212-26280]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[26270-26277]:ReturnStatement[26291-26298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26293-26392]:Block[26314-26413]"
  }, {
    "left" : "nodeToProcess = firstAndOnlyChild;",
    "right" : "nodeToProcess = firstAndOnlyChild;",
    "info" : "ExpressionStatement[26348-26382]:ExpressionStatement[26369-26403]"
  }, {
    "left" : "if (count > 1)",
    "right" : "if (count > 1)",
    "info" : "IfStatement[26408-26474]:IfStatement[26429-26495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26423-26474]:Block[26444-26495]"
  }, {
    "left" : "context = Context.PRESERVE_BLOCK;",
    "right" : "context = Context.PRESERVE_BLOCK;",
    "info" : "ExpressionStatement[26433-26466]:ExpressionStatement[26454-26487]"
  }, {
    "left" : "if (nodeToProcess.isEmpty())",
    "right" : "if (nodeToProcess.isEmpty())",
    "info" : "IfStatement[26486-26819]:IfStatement[26507-26840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26515-26551]:Block[26536-26572]"
  }, {
    "left" : "cc.endStatement(true);",
    "right" : "cc.endStatement(true);",
    "info" : "ExpressionStatement[26523-26545]:ExpressionStatement[26544-26566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26557-26819]:Block[26578-26840]"
  }, {
    "left" : "add(nodeToProcess, context);",
    "right" : "add(nodeToProcess, context);",
    "info" : "ExpressionStatement[26565-26593]:ExpressionStatement[26586-26614]"
  }, {
    "left" : "if (nodeToProcess.isVar())",
    "right" : "if (nodeToProcess.isVar())",
    "info" : "IfStatement[26750-26813]:IfStatement[26771-26834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26777-26813]:Block[26798-26834]"
  }, {
    "left" : "cc.endStatement();",
    "right" : "cc.endStatement();",
    "info" : "ExpressionStatement[26787-26805]:ExpressionStatement[26808-26826]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26920-26927]:Modifier[26941-26948]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26928-26935]:PrimitiveType[26949-26956]"
  }, {
    "left" : "isOneExactlyFunctionOrDo",
    "right" : "isOneExactlyFunctionOrDo",
    "info" : "SimpleName[26936-26960]:SimpleName[26957-26981]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[26961-26967]:SingleVariableDeclaration[26982-26988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26969-27683]:Block[26990-27704]"
  }, {
    "left" : "if (n.isLabel())",
    "right" : "if (n.isLabel())",
    "info" : "IfStatement[26975-27679]:IfStatement[26996-27700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26992-27623]:Block[27013-27644]"
  }, {
    "left" : "Node labeledStatement = n.getLastChild();",
    "right" : "Node labeledStatement = n.getLastChild();",
    "info" : "VariableDeclarationStatement[27000-27041]:VariableDeclarationStatement[27021-27062]"
  }, {
    "left" : "if (!labeledStatement.isBlock())",
    "right" : "if (!labeledStatement.isBlock())",
    "info" : "IfStatement[27048-27617]:IfStatement[27069-27638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27081-27149]:Block[27102-27170]"
  }, {
    "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
    "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
    "info" : "ReturnStatement[27091-27141]:ReturnStatement[27112-27162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27155-27617]:Block[27176-27638]"
  }, {
    "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
    "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
    "info" : "IfStatement[27330-27609]:IfStatement[27351-27630]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27368-27448]:Block[27389-27469]"
  }, {
    "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
    "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
    "info" : "ReturnStatement[27380-27438]:ReturnStatement[27401-27459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27454-27609]:Block[27475-27630]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27586-27599]:ReturnStatement[27607-27620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27629-27679]:Block[27650-27700]"
  }, {
    "left" : "return (n.isFunction() || n.isDo());",
    "right" : "return (n.isFunction() || n.isDo());",
    "info" : "ReturnStatement[27637-27673]:ReturnStatement[27658-27694]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27687-27694]:Modifier[27708-27715]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27695-27699]:PrimitiveType[27716-27720]"
  }, {
    "left" : "addExpr",
    "right" : "addExpr",
    "info" : "SimpleName[27700-27707]:SimpleName[27721-27728]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27708-27714]:SingleVariableDeclaration[27729-27735]"
  }, {
    "left" : "int minPrecedence",
    "right" : "int minPrecedence",
    "info" : "SingleVariableDeclaration[27716-27733]:SingleVariableDeclaration[27737-27754]"
  }, {
    "left" : "Context context",
    "right" : "Context context",
    "info" : "SingleVariableDeclaration[27735-27750]:SingleVariableDeclaration[27756-27771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27752-27986]:Block[27773-28007]"
  }, {
    "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
    "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
    "info" : "IfStatement[27758-27982]:IfStatement[27779-28003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27878-27946]:Block[27899-27967]"
  }, {
    "left" : "add(\"(\");",
    "right" : "add(\"(\");",
    "info" : "ExpressionStatement[27886-27895]:ExpressionStatement[27907-27916]"
  }, {
    "left" : "add(n, Context.OTHER);",
    "right" : "add(n, Context.OTHER);",
    "info" : "ExpressionStatement[27902-27924]:ExpressionStatement[27923-27945]"
  }, {
    "left" : "add(\")\");",
    "right" : "add(\")\");",
    "info" : "ExpressionStatement[27931-27940]:ExpressionStatement[27952-27961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27952-27982]:Block[27973-28003]"
  }, {
    "left" : "add(n, context);",
    "right" : "add(n, context);",
    "info" : "ExpressionStatement[27960-27976]:ExpressionStatement[27981-27997]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27990-27994]:PrimitiveType[28011-28015]"
  }, {
    "left" : "addList",
    "right" : "addList",
    "info" : "SimpleName[27995-28002]:SimpleName[28016-28023]"
  }, {
    "left" : "Node firstInList",
    "right" : "Node firstInList",
    "info" : "SingleVariableDeclaration[28003-28019]:SingleVariableDeclaration[28024-28040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28021-28073]:Block[28042-28094]"
  }, {
    "left" : "addList(firstInList, true, Context.OTHER);",
    "right" : "addList(firstInList, true, Context.OTHER);",
    "info" : "ExpressionStatement[28027-28069]:ExpressionStatement[28048-28090]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28077-28081]:PrimitiveType[28098-28102]"
  }, {
    "left" : "addList",
    "right" : "addList",
    "info" : "SimpleName[28082-28089]:SimpleName[28103-28110]"
  }, {
    "left" : "Node firstInList",
    "right" : "Node firstInList",
    "info" : "SingleVariableDeclaration[28090-28106]:SingleVariableDeclaration[28111-28127]"
  }, {
    "left" : "boolean isArrayOrFunctionArgument",
    "right" : "boolean isArrayOrFunctionArgument",
    "info" : "SingleVariableDeclaration[28108-28141]:SingleVariableDeclaration[28129-28162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28143-28216]:Block[28164-28237]"
  }, {
    "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
    "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
    "info" : "ExpressionStatement[28149-28212]:ExpressionStatement[28170-28233]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28220-28224]:PrimitiveType[28241-28245]"
  }, {
    "left" : "addList",
    "right" : "addList",
    "info" : "SimpleName[28225-28232]:SimpleName[28246-28253]"
  }, {
    "left" : "Node firstInList",
    "right" : "Node firstInList",
    "info" : "SingleVariableDeclaration[28233-28249]:SingleVariableDeclaration[28254-28270]"
  }, {
    "left" : "boolean isArrayOrFunctionArgument",
    "right" : "boolean isArrayOrFunctionArgument",
    "info" : "SingleVariableDeclaration[28251-28284]:SingleVariableDeclaration[28272-28305]"
  }, {
    "left" : "Context lhsContext",
    "right" : "Context lhsContext",
    "info" : "SingleVariableDeclaration[28301-28319]:SingleVariableDeclaration[28322-28340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28321-28680]:Block[28342-28701]"
  }, {
    "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
    "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
    "info" : "ForStatement[28327-28676]:ForStatement[28348-28697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28382-28676]:Block[28403-28697]"
  }, {
    "left" : "boolean isFirst = n == firstInList;",
    "right" : "boolean isFirst = n == firstInList;",
    "info" : "VariableDeclarationStatement[28390-28425]:VariableDeclarationStatement[28411-28446]"
  }, {
    "left" : "if (isFirst)",
    "right" : "if (isFirst)",
    "info" : "IfStatement[28432-28670]:IfStatement[28453-28691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28445-28521]:Block[28466-28542]"
  }, {
    "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
    "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
    "info" : "ExpressionStatement[28455-28513]:ExpressionStatement[28476-28534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28527-28670]:Block[28548-28691]"
  }, {
    "left" : "cc.listSeparator();",
    "right" : "cc.listSeparator();",
    "info" : "ExpressionStatement[28537-28556]:ExpressionStatement[28558-28577]"
  }, {
    "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0,\n            getContextForNoInOperator(lhsContext));",
    "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0,\n            getContextForNoInOperator(lhsContext));",
    "info" : "ExpressionStatement[28565-28662]:ExpressionStatement[28586-28683]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29035-29039]:PrimitiveType[29056-29060]"
  }, {
    "left" : "addArrayList",
    "right" : "addArrayList",
    "info" : "SimpleName[29040-29052]:SimpleName[29061-29073]"
  }, {
    "left" : "Node firstInList",
    "right" : "Node firstInList",
    "info" : "SingleVariableDeclaration[29053-29069]:SingleVariableDeclaration[29074-29090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29071-29370]:Block[29092-29391]"
  }, {
    "left" : "boolean lastWasEmpty = false;",
    "right" : "boolean lastWasEmpty = false;",
    "info" : "VariableDeclarationStatement[29077-29106]:VariableDeclarationStatement[29098-29127]"
  }, {
    "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
    "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
    "info" : "ForStatement[29111-29309]:ForStatement[29132-29330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29166-29309]:Block[29187-29330]"
  }, {
    "left" : "if (n != firstInList)",
    "right" : "if (n != firstInList)",
    "info" : "IfStatement[29174-29233]:IfStatement[29195-29254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29196-29233]:Block[29217-29254]"
  }, {
    "left" : "cc.listSeparator();",
    "right" : "cc.listSeparator();",
    "info" : "ExpressionStatement[29206-29225]:ExpressionStatement[29227-29246]"
  }, {
    "left" : "addExpr(n, 1, Context.OTHER);",
    "right" : "addExpr(n, 1, Context.OTHER);",
    "info" : "ExpressionStatement[29240-29269]:ExpressionStatement[29261-29290]"
  }, {
    "left" : "lastWasEmpty = n.isEmpty();",
    "right" : "lastWasEmpty = n.isEmpty();",
    "info" : "ExpressionStatement[29276-29303]:ExpressionStatement[29297-29324]"
  }, {
    "left" : "if (lastWasEmpty)",
    "right" : "if (lastWasEmpty)",
    "info" : "IfStatement[29315-29366]:IfStatement[29336-29387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29333-29366]:Block[29354-29387]"
  }, {
    "left" : "cc.listSeparator();",
    "right" : "cc.listSeparator();",
    "info" : "ExpressionStatement[29341-29360]:ExpressionStatement[29362-29381]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29374-29378]:PrimitiveType[29395-29399]"
  }, {
    "left" : "addCaseBody",
    "right" : "addCaseBody",
    "info" : "SimpleName[29379-29390]:SimpleName[29400-29411]"
  }, {
    "left" : "Node caseBody",
    "right" : "Node caseBody",
    "info" : "SingleVariableDeclaration[29391-29404]:SingleVariableDeclaration[29412-29425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29406-29476]:Block[29427-29497]"
  }, {
    "left" : "cc.beginCaseBody();",
    "right" : "cc.beginCaseBody();",
    "info" : "ExpressionStatement[29412-29431]:ExpressionStatement[29433-29452]"
  }, {
    "left" : "add(caseBody);",
    "right" : "add(caseBody);",
    "info" : "ExpressionStatement[29436-29450]:ExpressionStatement[29457-29471]"
  }, {
    "left" : "cc.endCaseBody();",
    "right" : "cc.endCaseBody();",
    "info" : "ExpressionStatement[29455-29472]:ExpressionStatement[29476-29493]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29480-29484]:PrimitiveType[29501-29505]"
  }, {
    "left" : "addAllSiblings",
    "right" : "addAllSiblings",
    "info" : "SimpleName[29485-29499]:SimpleName[29506-29520]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29500-29506]:SingleVariableDeclaration[29521-29527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29508-29584]:Block[29529-29605]"
  }, {
    "left" : "for (Node c = n; c != null; c = c.getNext())",
    "right" : "for (Node c = n; c != null; c = c.getNext())",
    "info" : "ForStatement[29514-29580]:ForStatement[29535-29601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29559-29580]:Block[29580-29601]"
  }, {
    "left" : "add(c);",
    "right" : "add(c);",
    "info" : "ExpressionStatement[29567-29574]:ExpressionStatement[29588-29595]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29668-29675]:Modifier[29689-29696]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29676-29680]:PrimitiveType[29697-29701]"
  }, {
    "left" : "addJsString",
    "right" : "addJsString",
    "info" : "SimpleName[29681-29692]:SimpleName[29702-29713]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29693-29699]:SingleVariableDeclaration[29714-29720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29701-30075]:Block[29722-30096]"
  }, {
    "left" : "String s = n.getString();",
    "right" : "String s = n.getString();",
    "info" : "VariableDeclarationStatement[29707-29732]:VariableDeclarationStatement[29728-29753]"
  }, {
    "left" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
    "right" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
    "info" : "VariableDeclarationStatement[29737-29788]:VariableDeclarationStatement[29758-29809]"
  }, {
    "left" : "if (useSlashV)",
    "right" : "if (useSlashV)",
    "info" : "IfStatement[29793-30071]:IfStatement[29814-30092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29808-29862]:Block[29829-29883]"
  }, {
    "left" : "add(jsString(n.getString(), useSlashV));",
    "right" : "add(jsString(n.getString(), useSlashV));",
    "info" : "ExpressionStatement[29816-29856]:ExpressionStatement[29837-29877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29868-30071]:Block[29889-30092]"
  }, {
    "left" : "String cached = escapedJsStrings.get(s);",
    "right" : "String cached = escapedJsStrings.get(s);",
    "info" : "VariableDeclarationStatement[29876-29916]:VariableDeclarationStatement[29897-29937]"
  }, {
    "left" : "if (cached == null)",
    "right" : "if (cached == null)",
    "info" : "IfStatement[29923-30046]:IfStatement[29944-30067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29943-30046]:Block[29964-30067]"
  }, {
    "left" : "cached = jsString(n.getString(), useSlashV);",
    "right" : "cached = jsString(n.getString(), useSlashV);",
    "info" : "ExpressionStatement[29953-29997]:ExpressionStatement[29974-30018]"
  }, {
    "left" : "escapedJsStrings.put(s, cached);",
    "right" : "escapedJsStrings.put(s, cached);",
    "info" : "ExpressionStatement[30006-30038]:ExpressionStatement[30027-30059]"
  }, {
    "left" : "add(cached);",
    "right" : "add(cached);",
    "info" : "ExpressionStatement[30053-30065]:ExpressionStatement[30074-30086]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30079-30086]:Modifier[30100-30107]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[30087-30093]:SimpleType[30108-30114]"
  }, {
    "left" : "jsString",
    "right" : "jsString",
    "info" : "SimpleName[30094-30102]:SimpleName[30115-30123]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[30103-30111]:SingleVariableDeclaration[30124-30132]"
  }, {
    "left" : "boolean useSlashV",
    "right" : "boolean useSlashV",
    "info" : "SingleVariableDeclaration[30113-30130]:SingleVariableDeclaration[30134-30151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30132-30924]:Block[30153-30945]"
  }, {
    "left" : "int singleq = 0, doubleq = 0;",
    "right" : "int singleq = 0, doubleq = 0;",
    "info" : "VariableDeclarationStatement[30138-30167]:VariableDeclarationStatement[30159-30188]"
  }, {
    "left" : "for (int i = 0; i < s.length(); i++)",
    "right" : "for (int i = 0; i < s.length(); i++)",
    "info" : "ForStatement[30240-30394]:ForStatement[30261-30415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30277-30394]:Block[30298-30415]"
  }, {
    "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
    "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
    "info" : "SwitchStatement[30285-30388]:SwitchStatement[30306-30409]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[30316-30325]:SwitchCase[30337-30346]"
  }, {
    "left" : "doubleq++;",
    "right" : "doubleq++;",
    "info" : "ExpressionStatement[30326-30336]:ExpressionStatement[30347-30357]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30337-30343]:BreakStatement[30358-30364]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[30352-30362]:SwitchCase[30373-30383]"
  }, {
    "left" : "singleq++;",
    "right" : "singleq++;",
    "info" : "ExpressionStatement[30363-30373]:ExpressionStatement[30384-30394]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30374-30380]:BreakStatement[30395-30401]"
  }, {
    "left" : "String doublequote, singlequote;",
    "right" : "String doublequote, singlequote;",
    "info" : "VariableDeclarationStatement[30400-30432]:VariableDeclarationStatement[30421-30453]"
  }, {
    "left" : "char quote;",
    "right" : "char quote;",
    "info" : "VariableDeclarationStatement[30437-30448]:VariableDeclarationStatement[30458-30469]"
  }, {
    "left" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
    "right" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
    "info" : "IfStatement[30453-30805]:IfStatement[30474-30826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30530-30668]:Block[30551-30689]"
  }, {
    "left" : "quote = '\\'';",
    "right" : "quote = '\\'';",
    "info" : "ExpressionStatement[30595-30608]:ExpressionStatement[30616-30629]"
  }, {
    "left" : "doublequote = \"\\\"\";",
    "right" : "doublequote = \"\\\"\";",
    "info" : "ExpressionStatement[30615-30634]:ExpressionStatement[30636-30655]"
  }, {
    "left" : "singlequote = \"\\\\\\'\";",
    "right" : "singlequote = \"\\\\\\'\";",
    "info" : "ExpressionStatement[30641-30662]:ExpressionStatement[30662-30683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30674-30805]:Block[30695-30826]"
  }, {
    "left" : "quote = '\\\"';",
    "right" : "quote = '\\\"';",
    "info" : "ExpressionStatement[30732-30745]:ExpressionStatement[30753-30766]"
  }, {
    "left" : "doublequote = \"\\\\\\\"\";",
    "right" : "doublequote = \"\\\\\\\"\";",
    "info" : "ExpressionStatement[30752-30773]:ExpressionStatement[30773-30794]"
  }, {
    "left" : "singlequote = \"\\'\";",
    "right" : "singlequote = \"\\'\";",
    "info" : "ExpressionStatement[30780-30799]:ExpressionStatement[30801-30820]"
  }, {
    "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
    "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
    "info" : "ReturnStatement[30811-30920]:ReturnStatement[30832-30941]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[30964-30970]:SimpleType[30985-30991]"
  }, {
    "left" : "regexpEscape",
    "right" : "regexpEscape",
    "info" : "SimpleName[30971-30983]:SimpleName[30992-31004]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[30984-30992]:SingleVariableDeclaration[31005-31013]"
  }, {
    "left" : "CharsetEncoder outputCharsetEncoder",
    "right" : "CharsetEncoder outputCharsetEncoder",
    "info" : "SingleVariableDeclaration[30994-31029]:SingleVariableDeclaration[31015-31050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31031-31118]:Block[31052-31139]"
  }, {
    "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
    "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
    "info" : "ReturnStatement[31037-31114]:ReturnStatement[31058-31135]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[31210-31216]:SimpleType[31231-31237]"
  }, {
    "left" : "escapeToDoubleQuotedJsString",
    "right" : "escapeToDoubleQuotedJsString",
    "info" : "SimpleName[31217-31245]:SimpleName[31238-31266]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[31246-31254]:SingleVariableDeclaration[31267-31275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31256-31334]:Block[31277-31355]"
  }, {
    "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
    "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
    "info" : "ReturnStatement[31262-31330]:ReturnStatement[31283-31351]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[31463-31469]:SimpleType[31484-31490]"
  }, {
    "left" : "regexpEscape",
    "right" : "regexpEscape",
    "info" : "SimpleName[31470-31482]:SimpleName[31491-31503]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[31483-31491]:SingleVariableDeclaration[31504-31512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31493-31532]:Block[31514-31553]"
  }, {
    "left" : "return regexpEscape(s, null);",
    "right" : "return regexpEscape(s, null);",
    "info" : "ReturnStatement[31499-31528]:ReturnStatement[31520-31549]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31610-31617]:Modifier[31631-31638]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[31618-31624]:SimpleType[31639-31645]"
  }, {
    "left" : "strEscape",
    "right" : "strEscape",
    "info" : "SimpleName[31625-31634]:SimpleName[31646-31655]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[31642-31650]:SingleVariableDeclaration[31663-31671]"
  }, {
    "left" : "char quote",
    "right" : "char quote",
    "info" : "SingleVariableDeclaration[31658-31668]:SingleVariableDeclaration[31679-31689]"
  }, {
    "left" : "String doublequoteEscape",
    "right" : "String doublequoteEscape",
    "info" : "SingleVariableDeclaration[31676-31700]:SingleVariableDeclaration[31697-31721]"
  }, {
    "left" : "String singlequoteEscape",
    "right" : "String singlequoteEscape",
    "info" : "SingleVariableDeclaration[31708-31732]:SingleVariableDeclaration[31729-31753]"
  }, {
    "left" : "String backslashEscape",
    "right" : "String backslashEscape",
    "info" : "SingleVariableDeclaration[31740-31762]:SingleVariableDeclaration[31761-31783]"
  }, {
    "left" : "CharsetEncoder outputCharsetEncoder",
    "right" : "CharsetEncoder outputCharsetEncoder",
    "info" : "SingleVariableDeclaration[31770-31805]:SingleVariableDeclaration[31791-31826]"
  }, {
    "left" : "boolean useSlashV",
    "right" : "boolean useSlashV",
    "info" : "SingleVariableDeclaration[31813-31830]:SingleVariableDeclaration[31834-31851]"
  }, {
    "left" : "boolean isRegexp",
    "right" : "boolean isRegexp",
    "info" : "SingleVariableDeclaration[31838-31854]:SingleVariableDeclaration[31859-31875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31856-35797]:Block[31877-35818]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
    "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
    "info" : "VariableDeclarationStatement[31862-31915]:VariableDeclarationStatement[31883-31936]"
  }, {
    "left" : "sb.append(quote);",
    "right" : "sb.append(quote);",
    "info" : "ExpressionStatement[31920-31937]:ExpressionStatement[31941-31958]"
  }, {
    "left" : "for (int i = 0; i < s.length(); i++)",
    "right" : "for (int i = 0; i < s.length(); i++)",
    "info" : "ForStatement[31942-35745]:ForStatement[31963-35766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31979-35745]:Block[32000-35766]"
  }, {
    "left" : "char c = s.charAt(i);",
    "right" : "char c = s.charAt(i);",
    "info" : "VariableDeclarationStatement[31987-32008]:VariableDeclarationStatement[32008-32029]"
  }, {
    "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String endScript = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String startComment = \"!--\";\n\n          if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
    "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String endScript = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String startComment = \"!--\";\n\n          if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
    "info" : "SwitchStatement[32015-35739]:SwitchStatement[32036-35760]"
  }, {
    "left" : "case '\\0':",
    "right" : "case '\\0':",
    "info" : "SwitchCase[32036-32046]:SwitchCase[32057-32067]"
  }, {
    "left" : "sb.append(\"\\\\x00\");",
    "right" : "sb.append(\"\\\\x00\");",
    "info" : "ExpressionStatement[32047-32066]:ExpressionStatement[32068-32087]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32067-32073]:BreakStatement[32088-32094]"
  }, {
    "left" : "case '\\u000B':",
    "right" : "case '\\u000B':",
    "info" : "SwitchCase[32082-32096]:SwitchCase[32103-32117]"
  }, {
    "left" : "if (useSlashV)",
    "right" : "if (useSlashV)",
    "info" : "IfStatement[32107-32216]:IfStatement[32128-32237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32122-32165]:Block[32143-32186]"
  }, {
    "left" : "sb.append(\"\\\\v\");",
    "right" : "sb.append(\"\\\\v\");",
    "info" : "ExpressionStatement[32136-32153]:ExpressionStatement[32157-32174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32171-32216]:Block[32192-32237]"
  }, {
    "left" : "sb.append(\"\\\\x0B\");",
    "right" : "sb.append(\"\\\\x0B\");",
    "info" : "ExpressionStatement[32185-32204]:ExpressionStatement[32206-32225]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32227-32233]:BreakStatement[32248-32254]"
  }, {
    "left" : "case '\\b':",
    "right" : "case '\\b':",
    "info" : "SwitchCase[32304-32314]:SwitchCase[32325-32335]"
  }, {
    "left" : "sb.append(\"\\\\b\");",
    "right" : "sb.append(\"\\\\b\");",
    "info" : "ExpressionStatement[32315-32332]:ExpressionStatement[32336-32353]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32333-32339]:BreakStatement[32354-32360]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[32348-32358]:SwitchCase[32369-32379]"
  }, {
    "left" : "sb.append(\"\\\\f\");",
    "right" : "sb.append(\"\\\\f\");",
    "info" : "ExpressionStatement[32359-32376]:ExpressionStatement[32380-32397]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32377-32383]:BreakStatement[32398-32404]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[32392-32402]:SwitchCase[32413-32423]"
  }, {
    "left" : "sb.append(\"\\\\n\");",
    "right" : "sb.append(\"\\\\n\");",
    "info" : "ExpressionStatement[32403-32420]:ExpressionStatement[32424-32441]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32421-32427]:BreakStatement[32442-32448]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[32436-32446]:SwitchCase[32457-32467]"
  }, {
    "left" : "sb.append(\"\\\\r\");",
    "right" : "sb.append(\"\\\\r\");",
    "info" : "ExpressionStatement[32447-32464]:ExpressionStatement[32468-32485]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32465-32471]:BreakStatement[32486-32492]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[32480-32490]:SwitchCase[32501-32511]"
  }, {
    "left" : "sb.append(\"\\\\t\");",
    "right" : "sb.append(\"\\\\t\");",
    "info" : "ExpressionStatement[32491-32508]:ExpressionStatement[32512-32529]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32509-32515]:BreakStatement[32530-32536]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[32524-32534]:SwitchCase[32545-32555]"
  }, {
    "left" : "sb.append(backslashEscape);",
    "right" : "sb.append(backslashEscape);",
    "info" : "ExpressionStatement[32535-32562]:ExpressionStatement[32556-32583]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32563-32569]:BreakStatement[32584-32590]"
  }, {
    "left" : "case '\\\"':",
    "right" : "case '\\\"':",
    "info" : "SwitchCase[32578-32588]:SwitchCase[32599-32609]"
  }, {
    "left" : "sb.append(doublequoteEscape);",
    "right" : "sb.append(doublequoteEscape);",
    "info" : "ExpressionStatement[32589-32618]:ExpressionStatement[32610-32639]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32619-32625]:BreakStatement[32640-32646]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[32634-32644]:SwitchCase[32655-32665]"
  }, {
    "left" : "sb.append(singlequoteEscape);",
    "right" : "sb.append(singlequoteEscape);",
    "info" : "ExpressionStatement[32645-32674]:ExpressionStatement[32666-32695]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32675-32681]:BreakStatement[32696-32702]"
  }, {
    "left" : "case '\\u2028':",
    "right" : "case '\\u2028':",
    "info" : "SwitchCase[32750-32764]:SwitchCase[32771-32785]"
  }, {
    "left" : "sb.append(\"\\\\u2028\");",
    "right" : "sb.append(\"\\\\u2028\");",
    "info" : "ExpressionStatement[32765-32786]:ExpressionStatement[32786-32807]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32787-32793]:BreakStatement[32808-32814]"
  }, {
    "left" : "case '\\u2029':",
    "right" : "case '\\u2029':",
    "info" : "SwitchCase[32802-32816]:SwitchCase[32823-32837]"
  }, {
    "left" : "sb.append(\"\\\\u2029\");",
    "right" : "sb.append(\"\\\\u2029\");",
    "info" : "ExpressionStatement[32817-32838]:ExpressionStatement[32838-32859]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32839-32845]:BreakStatement[32860-32866]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[32855-32864]:SwitchCase[32876-32885]"
  }, {
    "left" : "if (trustedStrings || isRegexp)",
    "right" : "if (trustedStrings || isRegexp)",
    "info" : "IfStatement[32940-33062]:IfStatement[32961-33083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32972-33011]:Block[32993-33032]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[32986-32999]:ExpressionStatement[33007-33020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33017-33062]:Block[33038-33083]"
  }, {
    "left" : "sb.append(\"\\\\x3d\");",
    "right" : "sb.append(\"\\\\x3d\");",
    "info" : "ExpressionStatement[33031-33050]:ExpressionStatement[33052-33071]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33073-33079]:BreakStatement[33094-33100]"
  }, {
    "left" : "case '&':",
    "right" : "case '&':",
    "info" : "SwitchCase[33089-33098]:SwitchCase[33110-33119]"
  }, {
    "left" : "if (trustedStrings || isRegexp)",
    "right" : "if (trustedStrings || isRegexp)",
    "info" : "IfStatement[33109-33231]:IfStatement[33130-33252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33141-33180]:Block[33162-33201]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[33155-33168]:ExpressionStatement[33176-33189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33186-33231]:Block[33207-33252]"
  }, {
    "left" : "sb.append(\"\\\\x26\");",
    "right" : "sb.append(\"\\\\x26\");",
    "info" : "ExpressionStatement[33200-33219]:ExpressionStatement[33221-33240]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33242-33248]:BreakStatement[33263-33269]"
  }, {
    "left" : "case '>':",
    "right" : "case '>':",
    "info" : "SwitchCase[33258-33267]:SwitchCase[33279-33288]"
  }, {
    "left" : "if (!trustedStrings && !isRegexp)",
    "right" : "if (!trustedStrings && !isRegexp)",
    "info" : "IfStatement[33278-33379]:IfStatement[33299-33400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33312-33379]:Block[33333-33400]"
  }, {
    "left" : "sb.append(GT_ESCAPED);",
    "right" : "sb.append(GT_ESCAPED);",
    "info" : "ExpressionStatement[33326-33348]:ExpressionStatement[33347-33369]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33361-33367]:BreakStatement[33382-33388]"
  }, {
    "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
    "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
    "info" : "IfStatement[33651-33895]:IfStatement[33672-33916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33802-33850]:Block[33823-33871]"
  }, {
    "left" : "sb.append(GT_ESCAPED);",
    "right" : "sb.append(GT_ESCAPED);",
    "info" : "ExpressionStatement[33816-33838]:ExpressionStatement[33837-33859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33856-33895]:Block[33877-33916]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[33870-33883]:ExpressionStatement[33891-33904]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[33906-33912]:BreakStatement[33927-33933]"
  }, {
    "left" : "case '<':",
    "right" : "case '<':",
    "info" : "SwitchCase[33921-33930]:SwitchCase[33942-33951]"
  }, {
    "left" : "if (!trustedStrings && !isRegexp)",
    "right" : "if (!trustedStrings && !isRegexp)",
    "info" : "IfStatement[33941-34042]:IfStatement[33962-34063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33975-34042]:Block[33996-34063]"
  }, {
    "left" : "sb.append(LT_ESCAPED);",
    "right" : "sb.append(LT_ESCAPED);",
    "info" : "ExpressionStatement[33989-34011]:ExpressionStatement[34010-34032]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34024-34030]:BreakStatement[34045-34051]"
  }, {
    "left" : "final String endScript = \"/script\";",
    "right" : "final String endScript = \"/script\";",
    "info" : "VariableDeclarationStatement[34198-34233]:VariableDeclarationStatement[34219-34254]"
  }, {
    "left" : "final String startComment = \"!--\";",
    "right" : "final String startComment = \"!--\";",
    "info" : "VariableDeclarationStatement[34280-34314]:VariableDeclarationStatement[34301-34335]"
  }, {
    "left" : "if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length()))",
    "right" : "if (s.regionMatches(true, i + 1, endScript, 0,\n                              endScript.length()))",
    "info" : "IfStatement[34326-34683]:IfStatement[34347-34704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34424-34472]:Block[34445-34493]"
  }, {
    "left" : "sb.append(LT_ESCAPED);",
    "right" : "sb.append(LT_ESCAPED);",
    "info" : "ExpressionStatement[34438-34460]:ExpressionStatement[34459-34481]"
  }, {
    "left" : "if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length()))",
    "right" : "if (s.regionMatches(false, i + 1, startComment, 0,\n                                     startComment.length()))",
    "info" : "IfStatement[34478-34683]:IfStatement[34499-34704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34590-34638]:Block[34611-34659]"
  }, {
    "left" : "sb.append(LT_ESCAPED);",
    "right" : "sb.append(LT_ESCAPED);",
    "info" : "ExpressionStatement[34604-34626]:ExpressionStatement[34625-34647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34644-34683]:Block[34665-34704]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[34658-34671]:ExpressionStatement[34679-34692]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34694-34700]:BreakStatement[34715-34721]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34709-34717]:SwitchCase[34730-34738]"
  }, {
    "left" : "if (outputCharsetEncoder != null)",
    "right" : "if (outputCharsetEncoder != null)",
    "info" : "IfStatement[34865-35731]:IfStatement[34886-35752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34899-35131]:Block[34920-35152]"
  }, {
    "left" : "if (outputCharsetEncoder.canEncode(c))",
    "right" : "if (outputCharsetEncoder.canEncode(c))",
    "info" : "IfStatement[34913-35119]:IfStatement[34934-35140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34952-34995]:Block[34973-35016]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[34968-34981]:ExpressionStatement[34989-35002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35001-35119]:Block[35022-35140]"
  }, {
    "left" : "appendHexJavaScriptRepresentation(sb, c);",
    "right" : "appendHexJavaScriptRepresentation(sb, c);",
    "info" : "ExpressionStatement[35064-35105]:ExpressionStatement[35085-35126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35137-35731]:Block[35158-35752]"
  }, {
    "left" : "if (c > 0x1f && c < 0x7f)",
    "right" : "if (c > 0x1f && c < 0x7f)",
    "info" : "IfStatement[35374-35719]:IfStatement[35395-35740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35400-35443]:Block[35421-35464]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[35416-35429]:ExpressionStatement[35437-35450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35449-35719]:Block[35470-35740]"
  }, {
    "left" : "appendHexJavaScriptRepresentation(sb, c);",
    "right" : "appendHexJavaScriptRepresentation(sb, c);",
    "info" : "ExpressionStatement[35664-35705]:ExpressionStatement[35685-35726]"
  }, {
    "left" : "sb.append(quote);",
    "right" : "sb.append(quote);",
    "info" : "ExpressionStatement[35750-35767]:ExpressionStatement[35771-35788]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[35772-35793]:ReturnStatement[35793-35814]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35801-35807]:Modifier[35822-35828]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[35808-35814]:SimpleType[35829-35835]"
  }, {
    "left" : "identifierEscape",
    "right" : "identifierEscape",
    "info" : "SimpleName[35815-35831]:SimpleName[35836-35852]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[35832-35840]:SingleVariableDeclaration[35853-35861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35842-36491]:Block[35863-36512]"
  }, {
    "left" : "if (NodeUtil.isLatin(s))",
    "right" : "if (NodeUtil.isLatin(s))",
    "info" : "IfStatement[35923-35971]:IfStatement[35944-35992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35948-35971]:Block[35969-35992]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[35956-35965]:ReturnStatement[35977-35986]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[36055-36094]:VariableDeclarationStatement[36076-36115]"
  }, {
    "left" : "for (int i = 0; i < s.length(); i++)",
    "right" : "for (int i = 0; i < s.length(); i++)",
    "info" : "ForStatement[36099-36461]:ForStatement[36120-36482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36136-36461]:Block[36157-36482]"
  }, {
    "left" : "char c = s.charAt(i);",
    "right" : "char c = s.charAt(i);",
    "info" : "VariableDeclarationStatement[36144-36165]:VariableDeclarationStatement[36165-36186]"
  }, {
    "left" : "if (c > 0x1F && c < 0x7F)",
    "right" : "if (c > 0x1F && c < 0x7F)",
    "info" : "IfStatement[36333-36455]:IfStatement[36354-36476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36359-36390]:Block[36380-36411]"
  }, {
    "left" : "sb.append(c);",
    "right" : "sb.append(c);",
    "info" : "ExpressionStatement[36369-36382]:ExpressionStatement[36390-36403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36396-36455]:Block[36417-36476]"
  }, {
    "left" : "appendHexJavaScriptRepresentation(sb, c);",
    "right" : "appendHexJavaScriptRepresentation(sb, c);",
    "info" : "ExpressionStatement[36406-36447]:ExpressionStatement[36427-36468]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[36466-36487]:ReturnStatement[36487-36508]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36660-36667]:Modifier[36681-36688]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36668-36674]:Modifier[36689-36695]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[36675-36678]:PrimitiveType[36696-36699]"
  }, {
    "left" : "getNonEmptyChildCount",
    "right" : "getNonEmptyChildCount",
    "info" : "SimpleName[36679-36700]:SimpleName[36700-36721]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36701-36707]:SingleVariableDeclaration[36722-36728]"
  }, {
    "left" : "int maxCount",
    "right" : "int maxCount",
    "info" : "SingleVariableDeclaration[36709-36721]:SingleVariableDeclaration[36730-36742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36723-36984]:Block[36744-37005]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[36729-36739]:VariableDeclarationStatement[36750-36760]"
  }, {
    "left" : "Node c = n.getFirstChild();",
    "right" : "Node c = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[36744-36771]:VariableDeclarationStatement[36765-36792]"
  }, {
    "left" : "for (; c != null && i < maxCount; c = c.getNext())",
    "right" : "for (; c != null && i < maxCount; c = c.getNext())",
    "info" : "ForStatement[36776-36966]:ForStatement[36797-36987]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36827-36966]:Block[36848-36987]"
  }, {
    "left" : "if (c.isBlock())",
    "right" : "if (c.isBlock())",
    "info" : "IfStatement[36835-36960]:IfStatement[36856-36981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36852-36914]:Block[36873-36935]"
  }, {
    "left" : "i += getNonEmptyChildCount(c, maxCount - i);",
    "right" : "i += getNonEmptyChildCount(c, maxCount - i);",
    "info" : "ExpressionStatement[36862-36906]:ExpressionStatement[36883-36927]"
  }, {
    "left" : "if (!c.isEmpty())",
    "right" : "if (!c.isEmpty())",
    "info" : "IfStatement[36920-36960]:IfStatement[36941-36981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36938-36960]:Block[36959-36981]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[36948-36952]:ExpressionStatement[36969-36973]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[36971-36980]:ReturnStatement[36992-37001]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37047-37054]:Modifier[37068-37075]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37055-37061]:Modifier[37076-37082]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[37062-37066]:SimpleType[37083-37087]"
  }, {
    "left" : "getFirstNonEmptyChild",
    "right" : "getFirstNonEmptyChild",
    "info" : "SimpleName[37067-37088]:SimpleName[37088-37109]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37089-37095]:SingleVariableDeclaration[37110-37116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37097-37389]:Block[37118-37410]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[37103-37368]:ForStatement[37124-37389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37164-37368]:Block[37185-37389]"
  }, {
    "left" : "if (c.isBlock())",
    "right" : "if (c.isBlock())",
    "info" : "IfStatement[37172-37362]:IfStatement[37193-37383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37189-37311]:Block[37210-37332]"
  }, {
    "left" : "Node result = getFirstNonEmptyChild(c);",
    "right" : "Node result = getFirstNonEmptyChild(c);",
    "info" : "VariableDeclarationStatement[37199-37238]:VariableDeclarationStatement[37220-37259]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[37247-37303]:IfStatement[37268-37324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37267-37303]:Block[37288-37324]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[37279-37293]:ReturnStatement[37300-37314]"
  }, {
    "left" : "if (!c.isEmpty())",
    "right" : "if (!c.isEmpty())",
    "info" : "IfStatement[37317-37362]:IfStatement[37338-37383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37335-37362]:Block[37356-37383]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[37345-37354]:ReturnStatement[37366-37375]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[37373-37385]:ReturnStatement[37394-37406]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38000-38007]:Modifier[38021-38028]"
  }, {
    "left" : "Context",
    "right" : "Context",
    "info" : "SimpleType[38008-38015]:SimpleType[38029-38036]"
  }, {
    "left" : "getContextForNonEmptyExpression",
    "right" : "getContextForNonEmptyExpression",
    "info" : "SimpleName[38016-38047]:SimpleName[38037-38068]"
  }, {
    "left" : "Context currentContext",
    "right" : "Context currentContext",
    "info" : "SingleVariableDeclaration[38048-38070]:SingleVariableDeclaration[38069-38091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38072-38191]:Block[38093-38212]"
  }, {
    "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
    "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
    "info" : "ReturnStatement[38078-38187]:ReturnStatement[38099-38208]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38360-38367]:Modifier[38381-38388]"
  }, {
    "left" : "Context",
    "right" : "Context",
    "info" : "SimpleType[38369-38376]:SimpleType[38390-38397]"
  }, {
    "left" : "getContextForNoInOperator",
    "right" : "getContextForNoInOperator",
    "info" : "SimpleName[38377-38402]:SimpleName[38398-38423]"
  }, {
    "left" : "Context context",
    "right" : "Context context",
    "info" : "SingleVariableDeclaration[38403-38418]:SingleVariableDeclaration[38424-38439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38420-38530]:Block[38441-38551]"
  }, {
    "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
    "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
    "info" : "ReturnStatement[38426-38526]:ReturnStatement[38447-38547]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38608-38615]:Modifier[38629-38636]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38616-38622]:Modifier[38637-38643]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38623-38627]:PrimitiveType[38644-38648]"
  }, {
    "left" : "appendHexJavaScriptRepresentation",
    "right" : "appendHexJavaScriptRepresentation",
    "info" : "SimpleName[38628-38661]:SimpleName[38649-38682]"
  }, {
    "left" : "StringBuilder sb",
    "right" : "StringBuilder sb",
    "info" : "SingleVariableDeclaration[38669-38685]:SingleVariableDeclaration[38690-38706]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[38687-38693]:SingleVariableDeclaration[38708-38714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38695-38884]:Block[38716-38905]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[38701-38880]:TryStatement[38722-38901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38705-38760]:Block[38726-38781]"
  }, {
    "left" : "appendHexJavaScriptRepresentation(c, sb);",
    "right" : "appendHexJavaScriptRepresentation(c, sb);",
    "info" : "ExpressionStatement[38713-38754]:ExpressionStatement[38734-38775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38784-38880]:Block[38805-38901]"
  }, {
    "left" : "throw new RuntimeException(ex);",
    "right" : "throw new RuntimeException(ex);",
    "info" : "ThrowStatement[38843-38874]:ThrowStatement[38864-38895]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39120-39127]:Modifier[39141-39148]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39128-39134]:Modifier[39149-39155]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39135-39139]:PrimitiveType[39156-39160]"
  }, {
    "left" : "appendHexJavaScriptRepresentation",
    "right" : "appendHexJavaScriptRepresentation",
    "info" : "SimpleName[39140-39173]:SimpleName[39161-39194]"
  }, {
    "left" : "int codePoint",
    "right" : "int codePoint",
    "info" : "SingleVariableDeclaration[39181-39194]:SingleVariableDeclaration[39202-39215]"
  }, {
    "left" : "Appendable out",
    "right" : "Appendable out",
    "info" : "SingleVariableDeclaration[39196-39210]:SingleVariableDeclaration[39217-39231]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39225-39236]:SimpleType[39246-39257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39237-39975]:Block[39258-39996]"
  }, {
    "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
    "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
    "info" : "IfStatement[39243-39747]:IfStatement[39264-39768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39294-39747]:Block[39315-39768]"
  }, {
    "left" : "char[] surrogates = Character.toChars(codePoint);",
    "right" : "char[] surrogates = Character.toChars(codePoint);",
    "info" : "VariableDeclarationStatement[39556-39605]:VariableDeclarationStatement[39577-39626]"
  }, {
    "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
    "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
    "info" : "ExpressionStatement[39612-39666]:ExpressionStatement[39633-39687]"
  }, {
    "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
    "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
    "info" : "ExpressionStatement[39673-39727]:ExpressionStatement[39694-39748]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39734-39741]:ReturnStatement[39755-39762]"
  }, {
    "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
    "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
    "info" : "ExpressionStatement[39752-39971]:ExpressionStatement[39773-39992]"
  } ]
}