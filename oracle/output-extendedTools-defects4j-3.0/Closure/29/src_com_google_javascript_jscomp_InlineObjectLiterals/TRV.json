{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
      "right" : "public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
      "info" : "FieldDeclaration[1780-1848]:FieldDeclaration[1780-1848]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1852-1892]:FieldDeclaration[1852-1892]"
    }, {
      "left" : "private final Supplier<String> safeNameIdSupplier;",
      "right" : "private final Supplier<String> safeNameIdSupplier;",
      "info" : "FieldDeclaration[1896-1946]:FieldDeclaration[1896-1946]"
    }, {
      "left" : "InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier)",
      "right" : "InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier)",
      "info" : "MethodDeclaration[1950-2133]:MethodDeclaration[1950-2133]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2137-2355]:MethodDeclaration[2137-2355]"
    }, {
      "left" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "right" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[2584-2793]:FieldDeclaration[2584-2793]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[2799-3705]:MethodDeclaration[2799-3705]"
    }, {
      "left" : "private void blacklistVarReferencesInTree(Node root, final Scope scope)",
      "right" : "private void blacklistVarReferencesInTree(Node root, final Scope scope)",
      "info" : "MethodDeclaration[3711-4317]:MethodDeclaration[3711-4317]"
    }, {
      "left" : "public void visit(Node node)",
      "right" : "public void visit(Node node)",
      "info" : "MethodDeclaration[4112-4272]:MethodDeclaration[4112-4272]"
    }, {
      "left" : "private boolean isVarInlineForbidden(Var var)",
      "right" : "private boolean isVarInlineForbidden(Var var)",
      "info" : "MethodDeclaration[4323-5173]:MethodDeclaration[4323-5173]"
    }, {
      "left" : "private boolean isVarOrAssignExprLhs(Node n)",
      "right" : "private boolean isVarOrAssignExprLhs(Node n)",
      "info" : "MethodDeclaration[8470-8715]:MethodDeclaration[8878-9123]"
    }, {
      "left" : "private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo)",
      "right" : "private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo)",
      "info" : "MethodDeclaration[8721-10285]:MethodDeclaration[9129-10693]"
    }, {
      "left" : "private void fillInitialValues(Reference init, Map<String, Node> initvals)",
      "right" : "private void fillInitialValues(Reference init, Map<String, Node> initvals)",
      "info" : "MethodDeclaration[10291-10805]:MethodDeclaration[10699-11213]"
    }, {
      "left" : "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap)",
      "right" : "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap)",
      "info" : "MethodDeclaration[10811-13259]:MethodDeclaration[11219-13667]"
    }, {
      "left" : "private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo)",
      "right" : "private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo)",
      "info" : "MethodDeclaration[13265-16297]:MethodDeclaration[13673-16705]"
    } ],
    "mappings" : [
 {
      "left" : "InlineObjectLiterals",
      "right" : "InlineObjectLiterals",
      "info" : "SimpleName[1950-1970]:SimpleName[1950-1970]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1978-2003]:SingleVariableDeclaration[1978-2003]"
    }, {
      "left" : "Supplier<String> safeNameIdSupplier",
      "right" : "Supplier<String> safeNameIdSupplier",
      "info" : "SingleVariableDeclaration[2011-2046]:SingleVariableDeclaration[2011-2046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2048-2133]:Block[2048-2133]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2054-2079]:ExpressionStatement[2054-2079]"
    }, {
      "left" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "right" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "info" : "ExpressionStatement[2084-2129]:ExpressionStatement[2084-2129]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2137-2146]:MarkerAnnotation[2137-2146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2149-2155]:Modifier[2149-2155]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2156-2160]:PrimitiveType[2156-2160]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2161-2168]:SimpleName[2161-2168]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2169-2181]:SingleVariableDeclaration[2169-2181]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2183-2192]:SingleVariableDeclaration[2183-2192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2194-2355]:Block[2194-2355]"
    }, {
      "left" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());",
      "right" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());",
      "info" : "VariableDeclarationStatement[2200-2314]:VariableDeclarationStatement[2200-2314]"
    }, {
      "left" : "callback.process(externs, root);",
      "right" : "callback.process(externs, root);",
      "info" : "ExpressionStatement[2319-2351]:ExpressionStatement[2319-2351]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2799-2808]:MarkerAnnotation[2799-2808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2813-2819]:Modifier[2813-2819]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2820-2824]:PrimitiveType[2820-2824]"
    }, {
      "left" : "afterExitScope",
      "right" : "afterExitScope",
      "info" : "SimpleName[2825-2839]:SimpleName[2825-2839]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[2840-2855]:SingleVariableDeclaration[2840-2855]"
    }, {
      "left" : "ReferenceMap referenceMap",
      "right" : "ReferenceMap referenceMap",
      "info" : "SingleVariableDeclaration[2857-2882]:SingleVariableDeclaration[2857-2882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2884-3705]:Block[2884-3705]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[2892-3699]:ForStatement[2892-3699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2955-3699]:Block[2955-3699]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[2965-2983]:VariableDeclarationStatement[2965-2983]"
    }, {
      "left" : "if (isVarInlineForbidden(v))",
      "right" : "if (isVarInlineForbidden(v))",
      "info" : "IfStatement[2993-3053]:IfStatement[2993-3053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3022-3053]:Block[3022-3053]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3034-3043]:ContinueStatement[3034-3043]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[3063-3129]:VariableDeclarationStatement[3063-3129]"
    }, {
      "left" : "if (isInlinableObject(referenceInfo.references))",
      "right" : "if (isInlinableObject(referenceInfo.references))",
      "info" : "IfStatement[3139-3691]:IfStatement[3139-3691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3188-3691]:Block[3188-3691]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[3342-3359]:ExpressionStatement[3342-3359]"
    }, {
      "left" : "Reference declaration = referenceInfo.references.get(0);",
      "right" : "Reference declaration = referenceInfo.references.get(0);",
      "info" : "VariableDeclarationStatement[3371-3427]:VariableDeclarationStatement[3371-3427]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[3438-3496]:VariableDeclarationStatement[3438-3496]"
    }, {
      "left" : "splitObject(v, declaration, init, referenceInfo);",
      "right" : "splitObject(v, declaration, init, referenceInfo);",
      "info" : "ExpressionStatement[3632-3681]:ExpressionStatement[3632-3681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3970-3977]:Modifier[3970-3977]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3978-3982]:PrimitiveType[3978-3982]"
    }, {
      "left" : "blacklistVarReferencesInTree",
      "right" : "blacklistVarReferencesInTree",
      "info" : "SimpleName[3983-4011]:SimpleName[3983-4011]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4012-4021]:SingleVariableDeclaration[4012-4021]"
    }, {
      "left" : "final Scope scope",
      "right" : "final Scope scope",
      "info" : "SingleVariableDeclaration[4023-4040]:SingleVariableDeclaration[4023-4040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4042-4317]:Block[4042-4317]"
    }, {
      "left" : "NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.isName()) {\n            staleVars.add(scope.getVar(node.getString()));\n          }\n        }\n      }, NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.isName()) {\n            staleVars.add(scope.getVar(node.getString()));\n          }\n        }\n      }, NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[4050-4311]:ExpressionStatement[4050-4311]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4112-4121]:MarkerAnnotation[4112-4121]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4130-4136]:Modifier[4130-4136]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4137-4141]:PrimitiveType[4137-4141]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4142-4147]:SimpleName[4142-4147]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[4148-4157]:SingleVariableDeclaration[4148-4157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4159-4272]:Block[4159-4272]"
    }, {
      "left" : "if (node.isName())",
      "right" : "if (node.isName())",
      "info" : "IfStatement[4171-4262]:IfStatement[4171-4262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4190-4262]:Block[4190-4262]"
    }, {
      "left" : "staleVars.add(scope.getVar(node.getString()));",
      "right" : "staleVars.add(scope.getVar(node.getString()));",
      "info" : "ExpressionStatement[4204-4250]:ExpressionStatement[4204-4250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4406-4413]:Modifier[4406-4413]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4414-4421]:PrimitiveType[4414-4421]"
    }, {
      "left" : "isVarInlineForbidden",
      "right" : "isVarInlineForbidden",
      "info" : "SimpleName[4422-4442]:SimpleName[4422-4442]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[4443-4450]:SingleVariableDeclaration[4443-4450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4452-5173]:Block[4452-5173]"
    }, {
      "left" : "return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "right" : "return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "info" : "ReturnStatement[4938-5167]:ReturnStatement[4938-5167]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8470-8477]:Modifier[8878-8885]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8478-8485]:PrimitiveType[8886-8893]"
    }, {
      "left" : "isVarOrAssignExprLhs",
      "right" : "isVarOrAssignExprLhs",
      "info" : "SimpleName[8486-8506]:SimpleName[8894-8914]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8507-8513]:SingleVariableDeclaration[8915-8921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8515-8715]:Block[8923-9123]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8523-8551]:VariableDeclarationStatement[8931-8959]"
    }, {
      "left" : "return parent.isVar() ||\n          (parent.isAssign()\n              && parent.getFirstChild() == n\n              && parent.getParent().isExprResult());",
      "right" : "return parent.isVar() ||\n          (parent.isAssign()\n              && parent.getFirstChild() == n\n              && parent.getParent().isExprResult());",
      "info" : "ReturnStatement[8558-8709]:ReturnStatement[8966-9117]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8889-8896]:Modifier[9297-9304]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[8897-8916]:ParameterizedType[9305-9324]"
    }, {
      "left" : "computeVarList",
      "right" : "computeVarList",
      "info" : "SimpleName[8917-8931]:SimpleName[9325-9339]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[8941-8946]:SingleVariableDeclaration[9349-9354]"
    }, {
      "left" : "ReferenceCollection referenceInfo",
      "right" : "ReferenceCollection referenceInfo",
      "info" : "SingleVariableDeclaration[8948-8981]:SingleVariableDeclaration[9356-9389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8983-10285]:Block[9391-10693]"
    }, {
      "left" : "Map<String, String> varmap = Maps.newLinkedHashMap();",
      "right" : "Map<String, String> varmap = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[8991-9044]:VariableDeclarationStatement[9399-9452]"
    }, {
      "left" : "for (Reference ref : referenceInfo.references)",
      "right" : "for (Reference ref : referenceInfo.references)",
      "info" : "EnhancedForStatement[9052-10257]:EnhancedForStatement[9460-10665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9099-10257]:Block[9507-10665]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[9109-10249]:IfStatement[9517-10657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9164-9722]:Block[9572-10130]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[9176-9210]:VariableDeclarationStatement[9584-9618]"
    }, {
      "left" : "if (val != null)",
      "right" : "if (val != null)",
      "info" : "IfStatement[9221-9712]:IfStatement[9629-10120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9238-9712]:Block[9646-10120]"
    }, {
      "left" : "Preconditions.checkState(val.isObjectLit());",
      "right" : "Preconditions.checkState(val.isObjectLit());",
      "info" : "ExpressionStatement[9252-9296]:ExpressionStatement[9660-9704]"
    }, {
      "left" : "for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext())",
      "right" : "for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext())",
      "info" : "ForStatement[9309-9700]:ForStatement[9717-10108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9405-9700]:Block[9813-10108]"
    }, {
      "left" : "String varname = child.getString();",
      "right" : "String varname = child.getString();",
      "info" : "VariableDeclarationStatement[9421-9456]:VariableDeclarationStatement[9829-9864]"
    }, {
      "left" : "if (varmap.containsKey(varname))",
      "right" : "if (varmap.containsKey(varname))",
      "info" : "IfStatement[9471-9547]:IfStatement[9879-9955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9504-9547]:Block[9912-9955]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9522-9531]:ContinueStatement[9930-9939]"
    }, {
      "left" : "String var = VAR_PREFIX + varname + \"_\" +\n                safeNameIdSupplier.get();",
      "right" : "String var = VAR_PREFIX + varname + \"_\" +\n                safeNameIdSupplier.get();",
      "info" : "VariableDeclarationStatement[9563-9646]:VariableDeclarationStatement[9971-10054]"
    }, {
      "left" : "varmap.put(varname, var);",
      "right" : "varmap.put(varname, var);",
      "info" : "ExpressionStatement[9661-9686]:ExpressionStatement[10069-10094]"
    }, {
      "left" : "if (ref.getParent().isVar())",
      "right" : "if (ref.getParent().isVar())",
      "info" : "IfStatement[9728-10249]:IfStatement[10136-10657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9757-9817]:Block[10165-10225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9823-10249]:Block[10231-10657]"
    }, {
      "left" : "Node getprop = ref.getParent();",
      "right" : "Node getprop = ref.getParent();",
      "info" : "VariableDeclarationStatement[9835-9866]:VariableDeclarationStatement[10243-10274]"
    }, {
      "left" : "Preconditions.checkState(getprop.isGetProp());",
      "right" : "Preconditions.checkState(getprop.isGetProp());",
      "info" : "ExpressionStatement[9877-9923]:ExpressionStatement[10285-10331]"
    }, {
      "left" : "String varname = getprop.getLastChild().getString();",
      "right" : "String varname = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[9993-10045]:VariableDeclarationStatement[10401-10453]"
    }, {
      "left" : "if (varmap.containsKey(varname))",
      "right" : "if (varmap.containsKey(varname))",
      "info" : "IfStatement[10056-10124]:IfStatement[10464-10532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10089-10124]:Block[10497-10532]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[10103-10112]:ContinueStatement[10511-10520]"
    }, {
      "left" : "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get();",
      "right" : "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get();",
      "info" : "VariableDeclarationStatement[10136-10203]:VariableDeclarationStatement[10544-10611]"
    }, {
      "left" : "varmap.put(varname, var);",
      "right" : "varmap.put(varname, var);",
      "info" : "ExpressionStatement[10214-10239]:ExpressionStatement[10622-10647]"
    }, {
      "left" : "return varmap;",
      "right" : "return varmap;",
      "info" : "ReturnStatement[10265-10279]:ReturnStatement[10673-10687]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10460-10467]:Modifier[10868-10875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10468-10472]:PrimitiveType[10876-10880]"
    }, {
      "left" : "fillInitialValues",
      "right" : "fillInitialValues",
      "info" : "SimpleName[10473-10490]:SimpleName[10881-10898]"
    }, {
      "left" : "Reference init",
      "right" : "Reference init",
      "info" : "SingleVariableDeclaration[10491-10505]:SingleVariableDeclaration[10899-10913]"
    }, {
      "left" : "Map<String, Node> initvals",
      "right" : "Map<String, Node> initvals",
      "info" : "SingleVariableDeclaration[10507-10533]:SingleVariableDeclaration[10915-10941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10535-10805]:Block[10943-11213]"
    }, {
      "left" : "Node object = init.getAssignedValue();",
      "right" : "Node object = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[10543-10581]:VariableDeclarationStatement[10951-10989]"
    }, {
      "left" : "Preconditions.checkState(object.isObjectLit());",
      "right" : "Preconditions.checkState(object.isObjectLit());",
      "info" : "ExpressionStatement[10588-10635]:ExpressionStatement[10996-11043]"
    }, {
      "left" : "for (Node key = object.getFirstChild(); key != null;\n           key = key.getNext())",
      "right" : "for (Node key = object.getFirstChild(); key != null;\n           key = key.getNext())",
      "info" : "ForStatement[10642-10799]:ForStatement[11050-11207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10727-10799]:Block[11135-11207]"
    }, {
      "left" : "initvals.put(key.getString(), key.removeFirstChild());",
      "right" : "initvals.put(key.getString(), key.removeFirstChild());",
      "info" : "ExpressionStatement[10737-10791]:ExpressionStatement[11145-11199]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11012-11019]:Modifier[11420-11427]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11020-11024]:PrimitiveType[11428-11432]"
    }, {
      "left" : "replaceAssignmentExpression",
      "right" : "replaceAssignmentExpression",
      "info" : "SimpleName[11025-11052]:SimpleName[11433-11460]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[11053-11058]:SingleVariableDeclaration[11461-11466]"
    }, {
      "left" : "Reference ref",
      "right" : "Reference ref",
      "info" : "SingleVariableDeclaration[11060-11073]:SingleVariableDeclaration[11468-11481]"
    }, {
      "left" : "Map<String, String> varmap",
      "right" : "Map<String, String> varmap",
      "info" : "SingleVariableDeclaration[11120-11146]:SingleVariableDeclaration[11528-11554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11148-13259]:Block[11556-13667]"
    }, {
      "left" : "List<Node> nodes = Lists.newArrayList();",
      "right" : "List<Node> nodes = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11206-11246]:VariableDeclarationStatement[11614-11654]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[11253-11287]:VariableDeclarationStatement[11661-11695]"
    }, {
      "left" : "blacklistVarReferencesInTree(val, v.scope);",
      "right" : "blacklistVarReferencesInTree(val, v.scope);",
      "info" : "ExpressionStatement[11294-11337]:ExpressionStatement[11702-11745]"
    }, {
      "left" : "Preconditions.checkState(val.isObjectLit());",
      "right" : "Preconditions.checkState(val.isObjectLit());",
      "info" : "ExpressionStatement[11344-11388]:ExpressionStatement[11752-11796]"
    }, {
      "left" : "Set<String> all = Sets.newLinkedHashSet(varmap.keySet());",
      "right" : "Set<String> all = Sets.newLinkedHashSet(varmap.keySet());",
      "info" : "VariableDeclarationStatement[11395-11452]:VariableDeclarationStatement[11803-11860]"
    }, {
      "left" : "for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext())",
      "right" : "for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext())",
      "info" : "ForStatement[11459-11813]:ForStatement[11867-12221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11541-11813]:Block[11949-12221]"
    }, {
      "left" : "String var = key.getString();",
      "right" : "String var = key.getString();",
      "info" : "VariableDeclarationStatement[11551-11580]:VariableDeclarationStatement[11959-11988]"
    }, {
      "left" : "Node value = key.removeFirstChild();",
      "right" : "Node value = key.removeFirstChild();",
      "info" : "VariableDeclarationStatement[11589-11625]:VariableDeclarationStatement[11997-12033]"
    }, {
      "left" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                value));",
      "right" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                value));",
      "info" : "ExpressionStatement[11680-11780]:ExpressionStatement[12088-12188]"
    }, {
      "left" : "all.remove(var);",
      "right" : "all.remove(var);",
      "info" : "ExpressionStatement[11789-11805]:ExpressionStatement[12197-12213]"
    }, {
      "left" : "for (String var : all)",
      "right" : "for (String var : all)",
      "info" : "EnhancedForStatement[11869-12036]:EnhancedForStatement[12277-12444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11892-12036]:Block[12300-12444]"
    }, {
      "left" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                NodeUtil.newUndefinedNode(null)));",
      "right" : "nodes.add(\n            IR.assign(\n                IR.name(varmap.get(var)),\n                NodeUtil.newUndefinedNode(null)));",
      "info" : "ExpressionStatement[11902-12028]:ExpressionStatement[12310-12436]"
    }, {
      "left" : "Node replacement;",
      "right" : "Node replacement;",
      "info" : "VariableDeclarationStatement[12044-12061]:VariableDeclarationStatement[12452-12469]"
    }, {
      "left" : "if (nodes.isEmpty())",
      "right" : "if (nodes.isEmpty())",
      "info" : "IfStatement[12068-12947]:IfStatement[12476-13355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12089-12135]:Block[12497-12543]"
    }, {
      "left" : "replacement = IR.trueNode();",
      "right" : "replacement = IR.trueNode();",
      "info" : "ExpressionStatement[12099-12127]:ExpressionStatement[12507-12535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12141-12947]:Block[12549-13355]"
    }, {
      "left" : "nodes.add(IR.trueNode());",
      "right" : "nodes.add(IR.trueNode());",
      "info" : "ExpressionStatement[12282-12307]:ExpressionStatement[12690-12715]"
    }, {
      "left" : "nodes = Lists.reverse(nodes);",
      "right" : "nodes = Lists.reverse(nodes);",
      "info" : "ExpressionStatement[12529-12558]:ExpressionStatement[12937-12966]"
    }, {
      "left" : "replacement = new Node(Token.COMMA);",
      "right" : "replacement = new Node(Token.COMMA);",
      "info" : "ExpressionStatement[12567-12603]:ExpressionStatement[12975-13011]"
    }, {
      "left" : "Node cur = replacement;",
      "right" : "Node cur = replacement;",
      "info" : "VariableDeclarationStatement[12612-12635]:VariableDeclarationStatement[13020-13043]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[12644-12650]:VariableDeclarationStatement[13052-13058]"
    }, {
      "left" : "for (i = 0; i < nodes.size() - 2; i++)",
      "right" : "for (i = 0; i < nodes.size() - 2; i++)",
      "info" : "ForStatement[12659-12849]:ForStatement[13067-13257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12698-12849]:Block[13106-13257]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i));",
      "right" : "cur.addChildToFront(nodes.get(i));",
      "info" : "ExpressionStatement[12710-12744]:ExpressionStatement[13118-13152]"
    }, {
      "left" : "Node t = new Node(Token.COMMA);",
      "right" : "Node t = new Node(Token.COMMA);",
      "info" : "VariableDeclarationStatement[12755-12786]:VariableDeclarationStatement[13163-13194]"
    }, {
      "left" : "cur.addChildToFront(t);",
      "right" : "cur.addChildToFront(t);",
      "info" : "ExpressionStatement[12797-12820]:ExpressionStatement[13205-13228]"
    }, {
      "left" : "cur = t;",
      "right" : "cur = t;",
      "info" : "ExpressionStatement[12831-12839]:ExpressionStatement[13239-13247]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i));",
      "right" : "cur.addChildToFront(nodes.get(i));",
      "info" : "ExpressionStatement[12858-12892]:ExpressionStatement[13266-13300]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i + 1));",
      "right" : "cur.addChildToFront(nodes.get(i + 1));",
      "info" : "ExpressionStatement[12901-12939]:ExpressionStatement[13309-13347]"
    }, {
      "left" : "Node replace = ref.getParent();",
      "right" : "Node replace = ref.getParent();",
      "info" : "VariableDeclarationStatement[12955-12986]:VariableDeclarationStatement[13363-13394]"
    }, {
      "left" : "replacement.copyInformationFromForTree(replace);",
      "right" : "replacement.copyInformationFromForTree(replace);",
      "info" : "ExpressionStatement[12993-13041]:ExpressionStatement[13401-13449]"
    }, {
      "left" : "if (replace.isVar())",
      "right" : "if (replace.isVar())",
      "info" : "IfStatement[13049-13253]:IfStatement[13457-13661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13070-13174]:Block[13478-13582]"
    }, {
      "left" : "replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));",
      "right" : "replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));",
      "info" : "ExpressionStatement[13080-13166]:ExpressionStatement[13488-13574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13180-13253]:Block[13588-13661]"
    }, {
      "left" : "replace.getParent().replaceChild(replace, replacement);",
      "right" : "replace.getParent().replaceChild(replace, replacement);",
      "info" : "ExpressionStatement[13190-13245]:ExpressionStatement[13598-13653]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13373-13380]:Modifier[13781-13788]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13381-13385]:PrimitiveType[13789-13793]"
    }, {
      "left" : "splitObject",
      "right" : "splitObject",
      "info" : "SimpleName[13386-13397]:SimpleName[13794-13805]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[13398-13403]:SingleVariableDeclaration[13806-13811]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[13405-13426]:SingleVariableDeclaration[13813-13834]"
    }, {
      "left" : "Reference init",
      "right" : "Reference init",
      "info" : "SingleVariableDeclaration[13457-13471]:SingleVariableDeclaration[13865-13879]"
    }, {
      "left" : "ReferenceCollection referenceInfo",
      "right" : "ReferenceCollection referenceInfo",
      "info" : "SingleVariableDeclaration[13502-13535]:SingleVariableDeclaration[13910-13943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13537-16297]:Block[13945-16705]"
    }, {
      "left" : "Map<String, String> varmap = computeVarList(v, referenceInfo);",
      "right" : "Map<String, String> varmap = computeVarList(v, referenceInfo);",
      "info" : "VariableDeclarationStatement[13662-13724]:VariableDeclarationStatement[14070-14132]"
    }, {
      "left" : "Map<String, Node> initvals = Maps.newHashMap();",
      "right" : "Map<String, Node> initvals = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[13732-13779]:VariableDeclarationStatement[14140-14187]"
    }, {
      "left" : "Node vnode;",
      "right" : "Node vnode;",
      "info" : "VariableDeclarationStatement[13978-13989]:VariableDeclarationStatement[14386-14397]"
    }, {
      "left" : "boolean defined = referenceInfo.isWellDefined() &&\n          init.getParent().isVar();",
      "right" : "boolean defined = referenceInfo.isWellDefined() &&\n          init.getParent().isVar();",
      "info" : "VariableDeclarationStatement[13996-14082]:VariableDeclarationStatement[14404-14490]"
    }, {
      "left" : "if (defined)",
      "right" : "if (defined)",
      "info" : "IfStatement[14089-14388]:IfStatement[14497-14796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14102-14188]:Block[14510-14596]"
    }, {
      "left" : "vnode = init.getParent();",
      "right" : "vnode = init.getParent();",
      "info" : "ExpressionStatement[14112-14137]:ExpressionStatement[14520-14545]"
    }, {
      "left" : "fillInitialValues(init, initvals);",
      "right" : "fillInitialValues(init, initvals);",
      "info" : "ExpressionStatement[14146-14180]:ExpressionStatement[14554-14588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14194-14388]:Block[14602-14796]"
    }, {
      "left" : "vnode = v.getScope().getRootNode().getLastChild().getFirstChild();",
      "right" : "vnode = v.getScope().getRootNode().getLastChild().getFirstChild();",
      "info" : "ExpressionStatement[14314-14380]:ExpressionStatement[14722-14788]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : varmap.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : varmap.entrySet())",
      "info" : "EnhancedForStatement[14396-14826]:EnhancedForStatement[14804-15234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14454-14826]:Block[14862-15234]"
    }, {
      "left" : "Node val = initvals.get(entry.getKey());",
      "right" : "Node val = initvals.get(entry.getKey());",
      "info" : "VariableDeclarationStatement[14464-14504]:VariableDeclarationStatement[14872-14912]"
    }, {
      "left" : "Node varnode = NodeUtil.newVarNode(entry.getValue(), val);",
      "right" : "Node varnode = NodeUtil.newVarNode(entry.getValue(), val);",
      "info" : "VariableDeclarationStatement[14513-14571]:VariableDeclarationStatement[14921-14979]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[14580-14760]:IfStatement[14988-15168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14597-14689]:Block[15005-15097]"
    }, {
      "left" : "varnode.copyInformationFromForTree(vnode);",
      "right" : "varnode.copyInformationFromForTree(vnode);",
      "info" : "ExpressionStatement[14637-14679]:ExpressionStatement[15045-15087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14695-14760]:Block[15103-15168]"
    }, {
      "left" : "blacklistVarReferencesInTree(val, v.scope);",
      "right" : "blacklistVarReferencesInTree(val, v.scope);",
      "info" : "ExpressionStatement[14707-14750]:ExpressionStatement[15115-15158]"
    }, {
      "left" : "vnode.getParent().addChildBefore(varnode, vnode);",
      "right" : "vnode.getParent().addChildBefore(varnode, vnode);",
      "info" : "ExpressionStatement[14769-14818]:ExpressionStatement[15177-15226]"
    }, {
      "left" : "if (defined)",
      "right" : "if (defined)",
      "info" : "IfStatement[14834-14902]:IfStatement[15242-15310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14847-14902]:Block[15255-15310]"
    }, {
      "left" : "vnode.getParent().removeChild(vnode);",
      "right" : "vnode.getParent().removeChild(vnode);",
      "info" : "ExpressionStatement[14857-14894]:ExpressionStatement[15265-15302]"
    }, {
      "left" : "for (Reference ref : referenceInfo.references)",
      "right" : "for (Reference ref : referenceInfo.references)",
      "info" : "EnhancedForStatement[14910-16255]:EnhancedForStatement[15318-16663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14957-16255]:Block[15365-16663]"
    }, {
      "left" : "if (defined && ref == init)",
      "right" : "if (defined && ref == init)",
      "info" : "IfStatement[15021-15058]:IfStatement[15429-15466]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15049-15058]:ContinueStatement[15457-15466]"
    }, {
      "left" : "if (ref.isLvalue())",
      "right" : "if (ref.isLvalue())",
      "info" : "IfStatement[15068-16247]:IfStatement[15476-16655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15088-15271]:Block[15496-15679]"
    }, {
      "left" : "replaceAssignmentExpression(v, ref, varmap);",
      "right" : "replaceAssignmentExpression(v, ref, varmap);",
      "info" : "ExpressionStatement[15217-15261]:ExpressionStatement[15625-15669]"
    }, {
      "left" : "if (ref.getParent().isVar())",
      "right" : "if (ref.getParent().isVar())",
      "info" : "IfStatement[15277-16247]:IfStatement[15685-16655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15306-15505]:Block[15714-15913]"
    }, {
      "left" : "ref.getGrandparent().removeChild(ref.getParent());",
      "right" : "ref.getGrandparent().removeChild(ref.getParent());",
      "info" : "ExpressionStatement[15445-15495]:ExpressionStatement[15853-15903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15511-16247]:Block[15919-16655]"
    }, {
      "left" : "Node getprop = ref.getParent();",
      "right" : "Node getprop = ref.getParent();",
      "info" : "VariableDeclarationStatement[15601-15632]:VariableDeclarationStatement[16009-16040]"
    }, {
      "left" : "Preconditions.checkState(getprop.isGetProp());",
      "right" : "Preconditions.checkState(getprop.isGetProp());",
      "info" : "ExpressionStatement[15643-15689]:ExpressionStatement[16051-16097]"
    }, {
      "left" : "String var = getprop.getChildAtIndex(1).getString();",
      "right" : "String var = getprop.getChildAtIndex(1).getString();",
      "info" : "VariableDeclarationStatement[15759-15811]:VariableDeclarationStatement[16167-16219]"
    }, {
      "left" : "Preconditions.checkState(varmap.containsKey(var));",
      "right" : "Preconditions.checkState(varmap.containsKey(var));",
      "info" : "ExpressionStatement[15953-16003]:ExpressionStatement[16361-16411]"
    }, {
      "left" : "Node replacement = IR.name(varmap.get(var));",
      "right" : "Node replacement = IR.name(varmap.get(var));",
      "info" : "VariableDeclarationStatement[16066-16110]:VariableDeclarationStatement[16474-16518]"
    }, {
      "left" : "replacement.copyInformationFrom(getprop);",
      "right" : "replacement.copyInformationFrom(getprop);",
      "info" : "ExpressionStatement[16121-16162]:ExpressionStatement[16529-16570]"
    }, {
      "left" : "ref.getGrandparent().replaceChild(ref.getParent(), replacement);",
      "right" : "ref.getGrandparent().replaceChild(ref.getParent(), replacement);",
      "info" : "ExpressionStatement[16173-16237]:ExpressionStatement[16581-16645]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[16263-16291]:ExpressionStatement[16671-16699]"
    } ]
  },
  "interFileMappings" : { }
}