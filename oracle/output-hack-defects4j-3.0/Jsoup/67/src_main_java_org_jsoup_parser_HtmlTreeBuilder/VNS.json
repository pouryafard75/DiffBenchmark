{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "TypeDeclaration[565-25576]:TypeDeclaration[565-25791]"
    }, {
      "left" : "private static final String[] TagsSearchInScope = sort(new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"});",
      "right" : "private static final String[] TagsSearchInScope = sort(new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"});",
      "info" : "FieldDeclaration[731-871]:FieldDeclaration[731-871]"
    }, {
      "left" : "private static final String[] TagSearchList = sort(new String[]{\"ol\", \"ul\"});",
      "right" : "private static final String[] TagSearchList = sort(new String[]{\"ol\", \"ul\"});",
      "info" : "FieldDeclaration[876-953]:FieldDeclaration[876-953]"
    }, {
      "left" : "private static final String[] TagSearchButton = sort(new String[]{\"button\"});",
      "right" : "private static final String[] TagSearchButton = sort(new String[]{\"button\"});",
      "info" : "FieldDeclaration[958-1035]:FieldDeclaration[958-1035]"
    }, {
      "left" : "private static final String[] TagSearchTableScope = sort(new String[]{\"html\", \"table\"});",
      "right" : "private static final String[] TagSearchTableScope = sort(new String[]{\"html\", \"table\"});",
      "info" : "FieldDeclaration[1040-1128]:FieldDeclaration[1040-1128]"
    }, {
      "left" : "private static final String[] TagSearchSelectScope = sort(new String[]{\"optgroup\", \"option\"});",
      "right" : "private static final String[] TagSearchSelectScope = sort(new String[]{\"optgroup\", \"option\"});",
      "info" : "FieldDeclaration[1133-1227]:FieldDeclaration[1133-1227]"
    }, {
      "left" : "private static final String[] TagSearchEndTags = sort(new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"});",
      "right" : "private static final String[] TagSearchEndTags = sort(new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"});",
      "info" : "FieldDeclaration[1232-1357]:FieldDeclaration[1232-1357]"
    }, {
      "left" : "private static final String[] TagSearchSpecial = sort(new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n        \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n        \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n        \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n        \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n        \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n        \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n        \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"});",
      "right" : "private static final String[] TagSearchSpecial = sort(new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n        \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n        \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n        \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n        \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n        \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n        \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n        \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"});",
      "info" : "FieldDeclaration[1362-2187]:FieldDeclaration[1362-2187]"
    }, {
      "left" : "private HtmlTreeBuilderState state;",
      "right" : "private HtmlTreeBuilderState state;",
      "info" : "FieldDeclaration[2194-2229]:FieldDeclaration[2315-2350]"
    }, {
      "left" : "private HtmlTreeBuilderState originalState;",
      "right" : "private HtmlTreeBuilderState originalState;",
      "info" : "FieldDeclaration[2255-2298]:FieldDeclaration[2376-2419]"
    }, {
      "left" : "private boolean baseUriSetFromDoc;",
      "right" : "private boolean baseUriSetFromDoc;",
      "info" : "FieldDeclaration[2331-2365]:FieldDeclaration[2452-2486]"
    }, {
      "left" : "private Element headElement;",
      "right" : "private Element headElement;",
      "info" : "FieldDeclaration[2370-2398]:FieldDeclaration[2491-2519]"
    }, {
      "left" : "private FormElement formElement;",
      "right" : "private FormElement formElement;",
      "info" : "FieldDeclaration[2431-2463]:FieldDeclaration[2552-2584]"
    }, {
      "left" : "private Element contextElement;",
      "right" : "private Element contextElement;",
      "info" : "FieldDeclaration[2496-2527]:FieldDeclaration[2617-2648]"
    }, {
      "left" : "private ArrayList<Element> formattingElements;",
      "right" : "private ArrayList<Element> formattingElements;",
      "info" : "FieldDeclaration[2600-2646]:FieldDeclaration[2721-2767]"
    }, {
      "left" : "private List<String> pendingTableCharacters;",
      "right" : "private List<String> pendingTableCharacters;",
      "info" : "FieldDeclaration[2688-2732]:FieldDeclaration[2809-2853]"
    }, {
      "left" : "private Token.EndTag emptyEnd;",
      "right" : "private Token.EndTag emptyEnd;",
      "info" : "FieldDeclaration[2773-2803]:FieldDeclaration[2894-2924]"
    }, {
      "left" : "private boolean framesetOk;",
      "right" : "private boolean framesetOk;",
      "info" : "FieldDeclaration[2833-2860]:FieldDeclaration[2954-2981]"
    }, {
      "left" : "private boolean fosterInserts;",
      "right" : "private boolean fosterInserts;",
      "info" : "FieldDeclaration[2894-2924]:FieldDeclaration[3015-3045]"
    }, {
      "left" : "private boolean fragmentParsing;",
      "right" : "private boolean fragmentParsing;",
      "info" : "FieldDeclaration[2967-2999]:FieldDeclaration[3088-3120]"
    }, {
      "left" : "HtmlTreeBuilder()",
      "right" : "HtmlTreeBuilder()",
      "info" : "MethodDeclaration[3038-3058]:MethodDeclaration[3159-3179]"
    }, {
      "left" : "ParseSettings defaultSettings()",
      "right" : "ParseSettings defaultSettings()",
      "info" : "MethodDeclaration[3064-3145]:MethodDeclaration[3185-3266]"
    }, {
      "left" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[3151-3874]:MethodDeclaration[3272-3995]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[3880-6071]:MethodDeclaration[4001-6192]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[6077-6215]:MethodDeclaration[6198-6336]"
    }, {
      "left" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "right" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[6221-6358]:MethodDeclaration[6342-6479]"
    }, {
      "left" : "void transition(HtmlTreeBuilderState state)",
      "right" : "void transition(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[6364-6443]:MethodDeclaration[6485-6564]"
    }, {
      "left" : "HtmlTreeBuilderState state()",
      "right" : "HtmlTreeBuilderState state()",
      "info" : "MethodDeclaration[6449-6507]:MethodDeclaration[6570-6628]"
    }, {
      "left" : "void markInsertionMode()",
      "right" : "void markInsertionMode()",
      "info" : "MethodDeclaration[6513-6576]:MethodDeclaration[6634-6697]"
    }, {
      "left" : "HtmlTreeBuilderState originalState()",
      "right" : "HtmlTreeBuilderState originalState()",
      "info" : "MethodDeclaration[6582-6656]:MethodDeclaration[6703-6777]"
    }, {
      "left" : "void framesetOk(boolean framesetOk)",
      "right" : "void framesetOk(boolean framesetOk)",
      "info" : "MethodDeclaration[6662-6743]:MethodDeclaration[6783-6864]"
    }, {
      "left" : "boolean framesetOk()",
      "right" : "boolean framesetOk()",
      "info" : "MethodDeclaration[6749-6804]:MethodDeclaration[6870-6925]"
    }, {
      "left" : "Document getDocument()",
      "right" : "Document getDocument()",
      "info" : "MethodDeclaration[6810-6860]:MethodDeclaration[6931-6981]"
    }, {
      "left" : "String getBaseUri()",
      "right" : "String getBaseUri()",
      "info" : "MethodDeclaration[6866-6917]:MethodDeclaration[6987-7038]"
    }, {
      "left" : "void maybeSetBaseUri(Element base)",
      "right" : "void maybeSetBaseUri(Element base)",
      "info" : "MethodDeclaration[6923-7378]:MethodDeclaration[7044-7499]"
    }, {
      "left" : "boolean isFragmentParsing()",
      "right" : "boolean isFragmentParsing()",
      "info" : "MethodDeclaration[7384-7451]:MethodDeclaration[7505-7572]"
    }, {
      "left" : "void error(HtmlTreeBuilderState state)",
      "right" : "void error(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[7457-7668]:MethodDeclaration[7578-7789]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[7674-8476]:MethodDeclaration[7795-8597]"
    }, {
      "left" : "Element insertStartTag(String startTagName)",
      "right" : "Element insertStartTag(String startTagName)",
      "info" : "MethodDeclaration[8482-8652]:MethodDeclaration[8603-8773]"
    }, {
      "left" : "void insert(Element el)",
      "right" : "void insert(Element el)",
      "info" : "MethodDeclaration[8658-8736]:MethodDeclaration[8779-8857]"
    }, {
      "left" : "Element insertEmpty(Token.StartTag startTag)",
      "right" : "Element insertEmpty(Token.StartTag startTag)",
      "info" : "MethodDeclaration[8742-9295]:MethodDeclaration[8863-9416]"
    }, {
      "left" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "right" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "info" : "MethodDeclaration[9301-9627]:MethodDeclaration[9422-9748]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[9633-9772]:MethodDeclaration[9754-9893]"
    }, {
      "left" : "void insert(Token.Character characterToken)",
      "right" : "void insert(Token.Character characterToken)",
      "info" : "MethodDeclaration[9778-10306]:MethodDeclaration[9899-10427]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[10312-10889]:MethodDeclaration[10433-11010]"
    }, {
      "left" : "Element pop()",
      "right" : "Element pop()",
      "info" : "MethodDeclaration[10895-10986]:MethodDeclaration[11016-11107]"
    }, {
      "left" : "void push(Element element)",
      "right" : "void push(Element element)",
      "info" : "MethodDeclaration[10992-11054]:MethodDeclaration[11113-11175]"
    }, {
      "left" : "ArrayList<Element> getStack()",
      "right" : "ArrayList<Element> getStack()",
      "info" : "MethodDeclaration[11060-11119]:MethodDeclaration[11181-11240]"
    }, {
      "left" : "boolean onStack(Element el)",
      "right" : "boolean onStack(Element el)",
      "info" : "MethodDeclaration[11125-11204]:MethodDeclaration[11246-11325]"
    }, {
      "left" : "private boolean isElementInQueue(ArrayList<Element> queue, Element element)",
      "right" : "private boolean isElementInQueue(ArrayList<Element> queue, Element element)",
      "info" : "MethodDeclaration[11210-11505]:MethodDeclaration[11331-11626]"
    }, {
      "left" : "Element getFromStack(String elName)",
      "right" : "Element getFromStack(String elName)",
      "info" : "MethodDeclaration[11511-11780]:MethodDeclaration[11632-11901]"
    }, {
      "left" : "boolean removeFromStack(Element el)",
      "right" : "boolean removeFromStack(Element el)",
      "info" : "MethodDeclaration[11786-12071]:MethodDeclaration[11907-12192]"
    }, {
      "left" : "void popStackToClose(String elName)",
      "right" : "void popStackToClose(String elName)",
      "info" : "MethodDeclaration[12077-12334]:MethodDeclaration[12198-12455]"
    }, {
      "left" : "void popStackToClose(String... elNames)",
      "right" : "void popStackToClose(String... elNames)",
      "info" : "MethodDeclaration[12387-12652]:MethodDeclaration[12508-12773]"
    }, {
      "left" : "void popStackToBefore(String elName)",
      "right" : "void popStackToBefore(String elName)",
      "info" : "MethodDeclaration[12658-12957]:MethodDeclaration[12779-13078]"
    }, {
      "left" : "void clearStackToTableContext()",
      "right" : "void clearStackToTableContext()",
      "info" : "MethodDeclaration[12963-13040]:MethodDeclaration[13084-13161]"
    }, {
      "left" : "void clearStackToTableBodyContext()",
      "right" : "void clearStackToTableBodyContext()",
      "info" : "MethodDeclaration[13046-13157]:MethodDeclaration[13167-13278]"
    }, {
      "left" : "void clearStackToTableRowContext()",
      "right" : "void clearStackToTableRowContext()",
      "info" : "MethodDeclaration[13163-13252]:MethodDeclaration[13284-13373]"
    }, {
      "left" : "private void clearStackToContext(String... nodeNames)",
      "right" : "private void clearStackToContext(String... nodeNames)",
      "info" : "MethodDeclaration[13258-13599]:MethodDeclaration[13379-13720]"
    }, {
      "left" : "Element aboveOnStack(Element el)",
      "right" : "Element aboveOnStack(Element el)",
      "info" : "MethodDeclaration[13605-13891]:MethodDeclaration[13726-14012]"
    }, {
      "left" : "void insertOnStackAfter(Element after, Element in)",
      "right" : "void insertOnStackAfter(Element after, Element in)",
      "info" : "MethodDeclaration[13897-14059]:MethodDeclaration[14018-14180]"
    }, {
      "left" : "void replaceOnStack(Element out, Element in)",
      "right" : "void replaceOnStack(Element out, Element in)",
      "info" : "MethodDeclaration[14065-14157]:MethodDeclaration[14186-14278]"
    }, {
      "left" : "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in)",
      "right" : "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in)",
      "info" : "MethodDeclaration[14163-14349]:MethodDeclaration[14284-14470]"
    }, {
      "left" : "void resetInsertionMode()",
      "right" : "void resetInsertionMode()",
      "info" : "MethodDeclaration[14355-16351]:MethodDeclaration[14476-16472]"
    }, {
      "left" : "private String[] specificScopeTarget = {null};",
      "right" : "private String[] specificScopeTarget = {null};",
      "info" : "FieldDeclaration[16404-16450]:FieldDeclaration[16525-16571]"
    }, {
      "left" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[16456-16676]:MethodDeclaration[16577-16797]"
    }, {
      "left" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[16682-17285]:MethodDeclaration[16803-17500]"
    }, {
      "left" : "boolean inScope(String[] targetNames)",
      "right" : "boolean inScope(String[] targetNames)",
      "info" : "MethodDeclaration[17291-17406]:MethodDeclaration[17506-17621]"
    }, {
      "left" : "boolean inScope(String targetName)",
      "right" : "boolean inScope(String targetName)",
      "info" : "MethodDeclaration[17412-17496]:MethodDeclaration[17627-17711]"
    }, {
      "left" : "boolean inScope(String targetName, String[] extras)",
      "right" : "boolean inScope(String targetName, String[] extras)",
      "info" : "MethodDeclaration[17502-17768]:MethodDeclaration[17717-17983]"
    }, {
      "left" : "boolean inListItemScope(String targetName)",
      "right" : "boolean inListItemScope(String targetName)",
      "info" : "MethodDeclaration[17774-17875]:MethodDeclaration[17989-18090]"
    }, {
      "left" : "boolean inButtonScope(String targetName)",
      "right" : "boolean inButtonScope(String targetName)",
      "info" : "MethodDeclaration[17881-17982]:MethodDeclaration[18096-18197]"
    }, {
      "left" : "boolean inTableScope(String targetName)",
      "right" : "boolean inTableScope(String targetName)",
      "info" : "MethodDeclaration[17988-18106]:MethodDeclaration[18203-18321]"
    }, {
      "left" : "boolean inSelectScope(String targetName)",
      "right" : "boolean inSelectScope(String targetName)",
      "info" : "MethodDeclaration[18112-18567]:MethodDeclaration[18327-18782]"
    }, {
      "left" : "void setHeadElement(Element headElement)",
      "right" : "void setHeadElement(Element headElement)",
      "info" : "MethodDeclaration[18573-18661]:MethodDeclaration[18788-18876]"
    }, {
      "left" : "Element getHeadElement()",
      "right" : "Element getHeadElement()",
      "info" : "MethodDeclaration[18667-18727]:MethodDeclaration[18882-18942]"
    }, {
      "left" : "boolean isFosterInserts()",
      "right" : "boolean isFosterInserts()",
      "info" : "MethodDeclaration[18733-18796]:MethodDeclaration[18948-19011]"
    }, {
      "left" : "void setFosterInserts(boolean fosterInserts)",
      "right" : "void setFosterInserts(boolean fosterInserts)",
      "info" : "MethodDeclaration[18802-18898]:MethodDeclaration[19017-19113]"
    }, {
      "left" : "FormElement getFormElement()",
      "right" : "FormElement getFormElement()",
      "info" : "MethodDeclaration[18904-18968]:MethodDeclaration[19119-19183]"
    }, {
      "left" : "void setFormElement(FormElement formElement)",
      "right" : "void setFormElement(FormElement formElement)",
      "info" : "MethodDeclaration[18974-19066]:MethodDeclaration[19189-19281]"
    }, {
      "left" : "void newPendingTableCharacters()",
      "right" : "void newPendingTableCharacters()",
      "info" : "MethodDeclaration[19072-19164]:MethodDeclaration[19287-19379]"
    }, {
      "left" : "List<String> getPendingTableCharacters()",
      "right" : "List<String> getPendingTableCharacters()",
      "info" : "MethodDeclaration[19170-19257]:MethodDeclaration[19385-19472]"
    }, {
      "left" : "void setPendingTableCharacters(List<String> pendingTableCharacters)",
      "right" : "void setPendingTableCharacters(List<String> pendingTableCharacters)",
      "info" : "MethodDeclaration[19263-19400]:MethodDeclaration[19478-19615]"
    }, {
      "left" : "void generateImpliedEndTags(String excludeTag)",
      "right" : "void generateImpliedEndTags(String excludeTag)",
      "info" : "MethodDeclaration[19406-20248]:MethodDeclaration[19621-20463]"
    }, {
      "left" : "void generateImpliedEndTags()",
      "right" : "void generateImpliedEndTags()",
      "info" : "MethodDeclaration[20254-20329]:MethodDeclaration[20469-20544]"
    }, {
      "left" : "boolean isSpecial(Element el)",
      "right" : "boolean isSpecial(Element el)",
      "info" : "MethodDeclaration[20335-20544]:MethodDeclaration[20550-20759]"
    }, {
      "left" : "Element lastFormattingElement()",
      "right" : "Element lastFormattingElement()",
      "info" : "MethodDeclaration[20550-20696]:MethodDeclaration[20765-20911]"
    }, {
      "left" : "Element removeLastFormattingElement()",
      "right" : "Element removeLastFormattingElement()",
      "info" : "MethodDeclaration[20702-20907]:MethodDeclaration[20917-21122]"
    }, {
      "left" : "void pushActiveFormattingElements(Element in)",
      "right" : "void pushActiveFormattingElements(Element in)",
      "info" : "MethodDeclaration[20947-21453]:MethodDeclaration[21162-21668]"
    }, {
      "left" : "private boolean isSameFormattingElement(Element a, Element b)",
      "right" : "private boolean isSameFormattingElement(Element a, Element b)",
      "info" : "MethodDeclaration[21459-21841]:MethodDeclaration[21674-22056]"
    }, {
      "left" : "void reconstructFormattingElements()",
      "right" : "void reconstructFormattingElements()",
      "info" : "MethodDeclaration[21847-23348]:MethodDeclaration[22062-23563]"
    }, {
      "left" : "void clearFormattingElementsToLastMarker()",
      "right" : "void clearFormattingElementsToLastMarker()",
      "info" : "MethodDeclaration[23354-23569]:MethodDeclaration[23569-23784]"
    }, {
      "left" : "void removeFromActiveFormattingElements(Element el)",
      "right" : "void removeFromActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[23575-23887]:MethodDeclaration[23790-24102]"
    }, {
      "left" : "boolean isInActiveFormattingElements(Element el)",
      "right" : "boolean isInActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[23893-24006]:MethodDeclaration[24108-24221]"
    }, {
      "left" : "Element getActiveFormattingElement(String nodeName)",
      "right" : "Element getActiveFormattingElement(String nodeName)",
      "info" : "MethodDeclaration[24012-24383]:MethodDeclaration[24227-24598]"
    }, {
      "left" : "void replaceActiveFormattingElement(Element out, Element in)",
      "right" : "void replaceActiveFormattingElement(Element out, Element in)",
      "info" : "MethodDeclaration[24389-24510]:MethodDeclaration[24604-24725]"
    }, {
      "left" : "void insertMarkerToFormattingElements()",
      "right" : "void insertMarkerToFormattingElements()",
      "info" : "MethodDeclaration[24516-24601]:MethodDeclaration[24731-24816]"
    }, {
      "left" : "void insertInFosterParent(Node in)",
      "right" : "void insertInFosterParent(Node in)",
      "info" : "MethodDeclaration[24607-25326]:MethodDeclaration[24822-25541]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[25332-25574]:MethodDeclaration[25547-25789]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[622-628]:Modifier[622-628]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[629-634]:TYPE_DECLARATION_KIND[629-634]"
    }, {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "SimpleName[635-650]:SimpleName[635-650]"
    }, {
      "left" : "TreeBuilder",
      "right" : "TreeBuilder",
      "info" : "SimpleType[659-670]:SimpleType[659-670]"
    }, {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "SimpleName[3038-3053]:SimpleName[3159-3174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3056-3058]:Block[3177-3179]"
    }, {
      "left" : "ParseSettings",
      "right" : "ParseSettings",
      "info" : "SimpleType[3064-3077]:SimpleType[3185-3198]"
    }, {
      "left" : "defaultSettings",
      "right" : "defaultSettings",
      "info" : "SimpleName[3078-3093]:SimpleName[3199-3214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3096-3145]:Block[3217-3266]"
    }, {
      "left" : "return ParseSettings.htmlDefault;",
      "right" : "return ParseSettings.htmlDefault;",
      "info" : "ReturnStatement[3106-3139]:ReturnStatement[3227-3260]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3151-3160]:MarkerAnnotation[3272-3281]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3165-3174]:Modifier[3286-3295]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3175-3179]:PrimitiveType[3296-3300]"
    }, {
      "left" : "initialiseParse",
      "right" : "initialiseParse",
      "info" : "SimpleName[3180-3195]:SimpleName[3301-3316]"
    }, {
      "left" : "Reader input",
      "right" : "Reader input",
      "info" : "SingleVariableDeclaration[3196-3208]:SingleVariableDeclaration[3317-3329]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[3210-3224]:SingleVariableDeclaration[3331-3345]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[3226-3247]:SingleVariableDeclaration[3347-3368]"
    }, {
      "left" : "ParseSettings settings",
      "right" : "ParseSettings settings",
      "info" : "SingleVariableDeclaration[3249-3271]:SingleVariableDeclaration[3370-3392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3273-3874]:Block[3394-3995]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors, settings);",
      "right" : "super.initialiseParse(input, baseUri, errors, settings);",
      "info" : "ExpressionStatement[3283-3339]:ExpressionStatement[3404-3460]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[3449-3486]:ExpressionStatement[3570-3607]"
    }, {
      "left" : "originalState = null;",
      "right" : "originalState = null;",
      "info" : "ExpressionStatement[3495-3516]:ExpressionStatement[3616-3637]"
    }, {
      "left" : "baseUriSetFromDoc = false;",
      "right" : "baseUriSetFromDoc = false;",
      "info" : "ExpressionStatement[3525-3551]:ExpressionStatement[3646-3672]"
    }, {
      "left" : "headElement = null;",
      "right" : "headElement = null;",
      "info" : "ExpressionStatement[3560-3579]:ExpressionStatement[3681-3700]"
    }, {
      "left" : "formElement = null;",
      "right" : "formElement = null;",
      "info" : "ExpressionStatement[3588-3607]:ExpressionStatement[3709-3728]"
    }, {
      "left" : "contextElement = null;",
      "right" : "contextElement = null;",
      "info" : "ExpressionStatement[3616-3638]:ExpressionStatement[3737-3759]"
    }, {
      "left" : "formattingElements = new ArrayList<>();",
      "right" : "formattingElements = new ArrayList<>();",
      "info" : "ExpressionStatement[3647-3686]:ExpressionStatement[3768-3807]"
    }, {
      "left" : "pendingTableCharacters = new ArrayList<>();",
      "right" : "pendingTableCharacters = new ArrayList<>();",
      "info" : "ExpressionStatement[3695-3738]:ExpressionStatement[3816-3859]"
    }, {
      "left" : "emptyEnd = new Token.EndTag();",
      "right" : "emptyEnd = new Token.EndTag();",
      "info" : "ExpressionStatement[3747-3777]:ExpressionStatement[3868-3898]"
    }, {
      "left" : "framesetOk = true;",
      "right" : "framesetOk = true;",
      "info" : "ExpressionStatement[3786-3804]:ExpressionStatement[3907-3925]"
    }, {
      "left" : "fosterInserts = false;",
      "right" : "fosterInserts = false;",
      "info" : "ExpressionStatement[3813-3835]:ExpressionStatement[3934-3956]"
    }, {
      "left" : "fragmentParsing = false;",
      "right" : "fragmentParsing = false;",
      "info" : "ExpressionStatement[3844-3868]:ExpressionStatement[3965-3989]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[3880-3890]:ParameterizedType[4001-4011]"
    }, {
      "left" : "parseFragment",
      "right" : "parseFragment",
      "info" : "SimpleName[3891-3904]:SimpleName[4012-4025]"
    }, {
      "left" : "String inputFragment",
      "right" : "String inputFragment",
      "info" : "SingleVariableDeclaration[3905-3925]:SingleVariableDeclaration[4026-4046]"
    }, {
      "left" : "Element context",
      "right" : "Element context",
      "info" : "SingleVariableDeclaration[3927-3942]:SingleVariableDeclaration[4048-4063]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[3944-3958]:SingleVariableDeclaration[4065-4079]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[3960-3981]:SingleVariableDeclaration[4081-4102]"
    }, {
      "left" : "ParseSettings settings",
      "right" : "ParseSettings settings",
      "info" : "SingleVariableDeclaration[3983-4005]:SingleVariableDeclaration[4104-4126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4007-6071]:Block[4128-6192]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[4048-4085]:ExpressionStatement[4169-4206]"
    }, {
      "left" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "right" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "info" : "ExpressionStatement[4094-4170]:ExpressionStatement[4215-4291]"
    }, {
      "left" : "contextElement = context;",
      "right" : "contextElement = context;",
      "info" : "ExpressionStatement[4179-4204]:ExpressionStatement[4300-4325]"
    }, {
      "left" : "fragmentParsing = true;",
      "right" : "fragmentParsing = true;",
      "info" : "ExpressionStatement[4213-4236]:ExpressionStatement[4334-4357]"
    }, {
      "left" : "Element root = null;",
      "right" : "Element root = null;",
      "info" : "VariableDeclarationStatement[4245-4265]:VariableDeclarationStatement[4366-4386]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[4275-5926]:IfStatement[4396-6047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4296-5926]:Block[4417-6047]"
    }, {
      "left" : "if (context.ownerDocument() != null)",
      "right" : "if (context.ownerDocument() != null)",
      "info" : "IfStatement[4310-4433]:IfStatement[4431-4554]"
    }, {
      "left" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "right" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "info" : "ExpressionStatement[4380-4433]:ExpressionStatement[4501-4554]"
    }, {
      "left" : "String contextTag = context.tagName();",
      "right" : "String contextTag = context.tagName();",
      "info" : "VariableDeclarationStatement[4494-4532]:VariableDeclarationStatement[4615-4653]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "right" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "info" : "IfStatement[4545-5265]:IfStatement[4666-5386]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[4613-4657]:ExpressionStatement[4734-4778]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "right" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "info" : "IfStatement[4675-5265]:IfStatement[4796-5386]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[4771-4816]:ExpressionStatement[4892-4937]"
    }, {
      "left" : "if (contextTag.equals(\"script\"))",
      "right" : "if (contextTag.equals(\"script\"))",
      "info" : "IfStatement[4834-5265]:IfStatement[4955-5386]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[4883-4931]:ExpressionStatement[5004-5052]"
    }, {
      "left" : "if (contextTag.equals((\"noscript\")))",
      "right" : "if (contextTag.equals((\"noscript\")))",
      "info" : "IfStatement[4949-5265]:IfStatement[5070-5386]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[5002-5044]:ExpressionStatement[5123-5165]"
    }, {
      "left" : "if (contextTag.equals(\"plaintext\"))",
      "right" : "if (contextTag.equals(\"plaintext\"))",
      "info" : "IfStatement[5095-5265]:IfStatement[5216-5386]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[5147-5189]:ExpressionStatement[5268-5310]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[5223-5265]:ExpressionStatement[5344-5386]"
    }, {
      "left" : "root = new Element(Tag.valueOf(\"html\", settings), baseUri);",
      "right" : "root = new Element(Tag.valueOf(\"html\", settings), baseUri);",
      "info" : "ExpressionStatement[5290-5349]:ExpressionStatement[5411-5470]"
    }, {
      "left" : "doc.appendChild(root);",
      "right" : "doc.appendChild(root);",
      "info" : "ExpressionStatement[5362-5384]:ExpressionStatement[5483-5505]"
    }, {
      "left" : "stack.add(root);",
      "right" : "stack.add(root);",
      "info" : "ExpressionStatement[5397-5413]:ExpressionStatement[5518-5534]"
    }, {
      "left" : "resetInsertionMode();",
      "right" : "resetInsertionMode();",
      "info" : "ExpressionStatement[5426-5447]:ExpressionStatement[5547-5568]"
    }, {
      "left" : "Elements contextChain = context.parents();",
      "right" : "Elements contextChain = context.parents();",
      "info" : "VariableDeclarationStatement[5615-5657]:VariableDeclarationStatement[5736-5778]"
    }, {
      "left" : "contextChain.add(0, context);",
      "right" : "contextChain.add(0, context);",
      "info" : "ExpressionStatement[5670-5699]:ExpressionStatement[5791-5820]"
    }, {
      "left" : "for (Element parent: contextChain)",
      "right" : "for (Element parent: contextChain)",
      "info" : "EnhancedForStatement[5712-5916]:EnhancedForStatement[5833-6037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5747-5916]:Block[5868-6037]"
    }, {
      "left" : "if (parent instanceof FormElement)",
      "right" : "if (parent instanceof FormElement)",
      "info" : "IfStatement[5765-5902]:IfStatement[5886-6023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5800-5902]:Block[5921-6023]"
    }, {
      "left" : "formElement = (FormElement) parent;",
      "right" : "formElement = (FormElement) parent;",
      "info" : "ExpressionStatement[5822-5857]:ExpressionStatement[5943-5978]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5878-5884]:BreakStatement[5999-6005]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[5936-5948]:ExpressionStatement[6057-6069]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[5957-6065]:IfStatement[6078-6186]"
    }, {
      "left" : "return root.childNodes();",
      "right" : "return root.childNodes();",
      "info" : "ReturnStatement[5990-6015]:ReturnStatement[6111-6136]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[6041-6065]:ReturnStatement[6162-6186]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6077-6086]:MarkerAnnotation[6198-6207]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6091-6100]:Modifier[6212-6221]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6101-6108]:PrimitiveType[6222-6229]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6109-6116]:SimpleName[6230-6237]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[6117-6128]:SingleVariableDeclaration[6238-6249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6130-6215]:Block[6251-6336]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[6140-6161]:ExpressionStatement[6261-6282]"
    }, {
      "left" : "return this.state.process(token, this);",
      "right" : "return this.state.process(token, this);",
      "info" : "ReturnStatement[6170-6209]:ReturnStatement[6291-6330]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6221-6228]:PrimitiveType[6342-6349]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6229-6236]:SimpleName[6350-6357]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[6237-6248]:SingleVariableDeclaration[6358-6369]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[6250-6276]:SingleVariableDeclaration[6371-6397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6278-6358]:Block[6399-6479]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[6288-6309]:ExpressionStatement[6409-6430]"
    }, {
      "left" : "return state.process(token, this);",
      "right" : "return state.process(token, this);",
      "info" : "ReturnStatement[6318-6352]:ReturnStatement[6439-6473]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6364-6368]:PrimitiveType[6485-6489]"
    }, {
      "left" : "transition",
      "right" : "transition",
      "info" : "SimpleName[6369-6379]:SimpleName[6490-6500]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[6380-6406]:SingleVariableDeclaration[6501-6527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6408-6443]:Block[6529-6564]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[6418-6437]:ExpressionStatement[6539-6558]"
    }, {
      "left" : "HtmlTreeBuilderState",
      "right" : "HtmlTreeBuilderState",
      "info" : "SimpleType[6449-6469]:SimpleType[6570-6590]"
    }, {
      "left" : "state",
      "right" : "state",
      "info" : "SimpleName[6470-6475]:SimpleName[6591-6596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6478-6507]:Block[6599-6628]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[6488-6501]:ReturnStatement[6609-6622]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6513-6517]:PrimitiveType[6634-6638]"
    }, {
      "left" : "markInsertionMode",
      "right" : "markInsertionMode",
      "info" : "SimpleName[6518-6535]:SimpleName[6639-6656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6538-6576]:Block[6659-6697]"
    }, {
      "left" : "originalState = state;",
      "right" : "originalState = state;",
      "info" : "ExpressionStatement[6548-6570]:ExpressionStatement[6669-6691]"
    }, {
      "left" : "HtmlTreeBuilderState",
      "right" : "HtmlTreeBuilderState",
      "info" : "SimpleType[6582-6602]:SimpleType[6703-6723]"
    }, {
      "left" : "originalState",
      "right" : "originalState",
      "info" : "SimpleName[6603-6616]:SimpleName[6724-6737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6619-6656]:Block[6740-6777]"
    }, {
      "left" : "return originalState;",
      "right" : "return originalState;",
      "info" : "ReturnStatement[6629-6650]:ReturnStatement[6750-6771]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6662-6666]:PrimitiveType[6783-6787]"
    }, {
      "left" : "framesetOk",
      "right" : "framesetOk",
      "info" : "SimpleName[6667-6677]:SimpleName[6788-6798]"
    }, {
      "left" : "boolean framesetOk",
      "right" : "boolean framesetOk",
      "info" : "SingleVariableDeclaration[6678-6696]:SingleVariableDeclaration[6799-6817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6698-6743]:Block[6819-6864]"
    }, {
      "left" : "this.framesetOk = framesetOk;",
      "right" : "this.framesetOk = framesetOk;",
      "info" : "ExpressionStatement[6708-6737]:ExpressionStatement[6829-6858]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6749-6756]:PrimitiveType[6870-6877]"
    }, {
      "left" : "framesetOk",
      "right" : "framesetOk",
      "info" : "SimpleName[6757-6767]:SimpleName[6878-6888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6770-6804]:Block[6891-6925]"
    }, {
      "left" : "return framesetOk;",
      "right" : "return framesetOk;",
      "info" : "ReturnStatement[6780-6798]:ReturnStatement[6901-6919]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[6810-6818]:SimpleType[6931-6939]"
    }, {
      "left" : "getDocument",
      "right" : "getDocument",
      "info" : "SimpleName[6819-6830]:SimpleName[6940-6951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6833-6860]:Block[6954-6981]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[6843-6854]:ReturnStatement[6964-6975]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6866-6872]:SimpleType[6987-6993]"
    }, {
      "left" : "getBaseUri",
      "right" : "getBaseUri",
      "info" : "SimpleName[6873-6883]:SimpleName[6994-7004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6886-6917]:Block[7007-7038]"
    }, {
      "left" : "return baseUri;",
      "right" : "return baseUri;",
      "info" : "ReturnStatement[6896-6911]:ReturnStatement[7017-7032]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6923-6927]:PrimitiveType[7044-7048]"
    }, {
      "left" : "maybeSetBaseUri",
      "right" : "maybeSetBaseUri",
      "info" : "SimpleName[6928-6943]:SimpleName[7049-7064]"
    }, {
      "left" : "Element base",
      "right" : "Element base",
      "info" : "SingleVariableDeclaration[6944-6956]:SingleVariableDeclaration[7065-7077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6958-7378]:Block[7079-7499]"
    }, {
      "left" : "if (baseUriSetFromDoc)",
      "right" : "if (baseUriSetFromDoc)",
      "info" : "IfStatement[6968-7059]:IfStatement[7089-7180]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7052-7059]:ReturnStatement[7173-7180]"
    }, {
      "left" : "String href = base.absUrl(\"href\");",
      "right" : "String href = base.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[7069-7103]:VariableDeclarationStatement[7190-7224]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[7112-7372]:IfStatement[7233-7493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7136-7372]:Block[7257-7493]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[7178-7193]:ExpressionStatement[7299-7314]"
    }, {
      "left" : "baseUriSetFromDoc = true;",
      "right" : "baseUriSetFromDoc = true;",
      "info" : "ExpressionStatement[7206-7231]:ExpressionStatement[7327-7352]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[7244-7265]:ExpressionStatement[7365-7386]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7384-7391]:PrimitiveType[7505-7512]"
    }, {
      "left" : "isFragmentParsing",
      "right" : "isFragmentParsing",
      "info" : "SimpleName[7392-7409]:SimpleName[7513-7530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7412-7451]:Block[7533-7572]"
    }, {
      "left" : "return fragmentParsing;",
      "right" : "return fragmentParsing;",
      "info" : "ReturnStatement[7422-7445]:ReturnStatement[7543-7566]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7457-7461]:PrimitiveType[7578-7582]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[7462-7467]:SimpleName[7583-7588]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[7468-7494]:SingleVariableDeclaration[7589-7615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7496-7668]:Block[7617-7789]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[7506-7662]:IfStatement[7627-7783]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "info" : "ExpressionStatement[7544-7662]:ExpressionStatement[7665-7783]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[7674-7681]:SimpleType[7795-7802]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[7682-7688]:SimpleName[7803-7809]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[7689-7712]:SingleVariableDeclaration[7810-7833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7714-8476]:Block[7835-8597]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[7876-8288]:IfStatement[7997-8409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7906-8288]:Block[8027-8409]"
    }, {
      "left" : "Element el = insertEmpty(startTag);",
      "right" : "Element el = insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[7920-7955]:VariableDeclarationStatement[8041-8076]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[7968-7982]:ExpressionStatement[8089-8103]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[7995-8037]:ExpressionStatement[8116-8158]"
    }, {
      "left" : "tokeniser.emit(emptyEnd.reset().name(el.tagName()));",
      "right" : "tokeniser.emit(emptyEnd.reset().name(el.tagName()));",
      "info" : "ExpressionStatement[8121-8173]:ExpressionStatement[8242-8294]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8268-8278]:ReturnStatement[8389-8399]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));",
      "right" : "Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));",
      "info" : "VariableDeclarationStatement[8306-8431]:VariableDeclarationStatement[8427-8552]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[8440-8451]:ExpressionStatement[8561-8572]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8460-8470]:ReturnStatement[8581-8591]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[8482-8489]:SimpleType[8603-8610]"
    }, {
      "left" : "insertStartTag",
      "right" : "insertStartTag",
      "info" : "SimpleName[8490-8504]:SimpleName[8611-8625]"
    }, {
      "left" : "String startTagName",
      "right" : "String startTagName",
      "info" : "SingleVariableDeclaration[8505-8524]:SingleVariableDeclaration[8626-8645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8526-8652]:Block[8647-8773]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);",
      "right" : "Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);",
      "info" : "VariableDeclarationStatement[8536-8607]:VariableDeclarationStatement[8657-8728]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[8616-8627]:ExpressionStatement[8737-8748]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8636-8646]:ReturnStatement[8757-8767]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8658-8662]:PrimitiveType[8779-8783]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[8663-8669]:SimpleName[8784-8790]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[8670-8680]:SingleVariableDeclaration[8791-8801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8682-8736]:Block[8803-8857]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[8692-8707]:ExpressionStatement[8813-8828]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[8716-8730]:ExpressionStatement[8837-8851]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[8742-8749]:SimpleType[8863-8870]"
    }, {
      "left" : "insertEmpty",
      "right" : "insertEmpty",
      "info" : "SimpleName[8750-8761]:SimpleName[8871-8882]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[8762-8785]:SingleVariableDeclaration[8883-8906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8787-9295]:Block[8908-9416]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[8797-8846]:VariableDeclarationStatement[8918-8967]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "right" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[8855-8915]:VariableDeclarationStatement[8976-9036]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[8924-8939]:ExpressionStatement[9045-9060]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[8948-9270]:IfStatement[9069-9391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8978-9270]:Block[9099-9391]"
    }, {
      "left" : "if (tag.isKnownTag())",
      "right" : "if (tag.isKnownTag())",
      "info" : "IfStatement[8992-9260]:IfStatement[9113-9381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9014-9148]:Block[9135-9269]"
    }, {
      "left" : "if (!tag.isEmpty())",
      "right" : "if (!tag.isEmpty())",
      "info" : "IfStatement[9032-9134]:IfStatement[9153-9255]"
    }, {
      "left" : "tokeniser.error(\"Tag cannot be self closing; not a void tag\");",
      "right" : "tokeniser.error(\"Tag cannot be self closing; not a void tag\");",
      "info" : "ExpressionStatement[9072-9134]:ExpressionStatement[9193-9255]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[9239-9260]:ExpressionStatement[9360-9381]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[9279-9289]:ReturnStatement[9400-9410]"
    }, {
      "left" : "FormElement",
      "right" : "FormElement",
      "info" : "SimpleType[9301-9312]:SimpleType[9422-9433]"
    }, {
      "left" : "insertForm",
      "right" : "insertForm",
      "info" : "SimpleName[9313-9323]:SimpleName[9434-9444]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[9324-9347]:SingleVariableDeclaration[9445-9468]"
    }, {
      "left" : "boolean onStack",
      "right" : "boolean onStack",
      "info" : "SingleVariableDeclaration[9349-9364]:SingleVariableDeclaration[9470-9485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9366-9627]:Block[9487-9748]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[9376-9425]:VariableDeclarationStatement[9497-9546]"
    }, {
      "left" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "right" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[9434-9502]:VariableDeclarationStatement[9555-9623]"
    }, {
      "left" : "setFormElement(el);",
      "right" : "setFormElement(el);",
      "info" : "ExpressionStatement[9511-9530]:ExpressionStatement[9632-9651]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[9539-9554]:ExpressionStatement[9660-9675]"
    }, {
      "left" : "if (onStack)",
      "right" : "if (onStack)",
      "info" : "IfStatement[9563-9602]:IfStatement[9684-9723]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[9588-9602]:ExpressionStatement[9709-9723]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[9611-9621]:ReturnStatement[9732-9742]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9633-9637]:PrimitiveType[9754-9758]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[9638-9644]:SimpleName[9759-9765]"
    }, {
      "left" : "Token.Comment commentToken",
      "right" : "Token.Comment commentToken",
      "info" : "SingleVariableDeclaration[9645-9671]:SingleVariableDeclaration[9766-9792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9673-9772]:Block[9794-9893]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData());",
      "right" : "Comment comment = new Comment(commentToken.getData());",
      "info" : "VariableDeclarationStatement[9683-9737]:VariableDeclarationStatement[9804-9858]"
    }, {
      "left" : "insertNode(comment);",
      "right" : "insertNode(comment);",
      "info" : "ExpressionStatement[9746-9766]:ExpressionStatement[9867-9887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9778-9782]:PrimitiveType[9899-9903]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[9783-9789]:SimpleName[9904-9910]"
    }, {
      "left" : "Token.Character characterToken",
      "right" : "Token.Character characterToken",
      "info" : "SingleVariableDeclaration[9790-9820]:SingleVariableDeclaration[9911-9941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9822-10306]:Block[9943-10427]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[9832-9842]:VariableDeclarationStatement[9953-9963]"
    }, {
      "left" : "String tagName = currentElement().tagName();",
      "right" : "String tagName = currentElement().tagName();",
      "info" : "VariableDeclarationStatement[9928-9972]:VariableDeclarationStatement[10049-10093]"
    }, {
      "left" : "if (tagName.equals(\"script\") || tagName.equals(\"style\"))",
      "right" : "if (tagName.equals(\"script\") || tagName.equals(\"style\"))",
      "info" : "IfStatement[9981-10168]:IfStatement[10102-10289]"
    }, {
      "left" : "node = new DataNode(characterToken.getData());",
      "right" : "node = new DataNode(characterToken.getData());",
      "info" : "ExpressionStatement[10050-10096]:ExpressionStatement[10171-10217]"
    }, {
      "left" : "node = new TextNode(characterToken.getData());",
      "right" : "node = new TextNode(characterToken.getData());",
      "info" : "ExpressionStatement[10122-10168]:ExpressionStatement[10243-10289]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[10177-10212]:ExpressionStatement[10298-10333]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10312-10319]:Modifier[10433-10440]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10320-10324]:PrimitiveType[10441-10445]"
    }, {
      "left" : "insertNode",
      "right" : "insertNode",
      "info" : "SimpleName[10325-10335]:SimpleName[10446-10456]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[10336-10345]:SingleVariableDeclaration[10457-10466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10347-10889]:Block[10468-11010]"
    }, {
      "left" : "if (stack.size() == 0)",
      "right" : "if (stack.size() == 0)",
      "info" : "IfStatement[10450-10644]:IfStatement[10571-10765]"
    }, {
      "left" : "doc.appendChild(node);",
      "right" : "doc.appendChild(node);",
      "info" : "ExpressionStatement[10485-10507]:ExpressionStatement[10606-10628]"
    }, {
      "left" : "if (isFosterInserts())",
      "right" : "if (isFosterInserts())",
      "info" : "IfStatement[10521-10644]:IfStatement[10642-10765]"
    }, {
      "left" : "insertInFosterParent(node);",
      "right" : "insertInFosterParent(node);",
      "info" : "ExpressionStatement[10556-10583]:ExpressionStatement[10677-10704]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[10609-10644]:ExpressionStatement[10730-10765]"
    }, {
      "left" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "right" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "info" : "IfStatement[10709-10883]:IfStatement[10830-11004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10779-10883]:Block[10900-11004]"
    }, {
      "left" : "if (formElement != null)",
      "right" : "if (formElement != null)",
      "info" : "IfStatement[10793-10873]:IfStatement[10914-10994]"
    }, {
      "left" : "formElement.addElement((Element) node);",
      "right" : "formElement.addElement((Element) node);",
      "info" : "ExpressionStatement[10834-10873]:ExpressionStatement[10955-10994]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10895-10902]:SimpleType[11016-11023]"
    }, {
      "left" : "pop",
      "right" : "pop",
      "info" : "SimpleName[10903-10906]:SimpleName[11024-11027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10909-10986]:Block[11030-11107]"
    }, {
      "left" : "int size = stack.size();",
      "right" : "int size = stack.size();",
      "info" : "VariableDeclarationStatement[10919-10943]:VariableDeclarationStatement[11040-11064]"
    }, {
      "left" : "return stack.remove(size-1);",
      "right" : "return stack.remove(size-1);",
      "info" : "ReturnStatement[10952-10980]:ReturnStatement[11073-11101]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10992-10996]:PrimitiveType[11113-11117]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[10997-11001]:SimpleName[11118-11122]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[11002-11017]:SingleVariableDeclaration[11123-11138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11019-11054]:Block[11140-11175]"
    }, {
      "left" : "stack.add(element);",
      "right" : "stack.add(element);",
      "info" : "ExpressionStatement[11029-11048]:ExpressionStatement[11150-11169]"
    }, {
      "left" : "ArrayList<Element>",
      "right" : "ArrayList<Element>",
      "info" : "ParameterizedType[11060-11078]:ParameterizedType[11181-11199]"
    }, {
      "left" : "getStack",
      "right" : "getStack",
      "info" : "SimpleName[11079-11087]:SimpleName[11200-11208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11090-11119]:Block[11211-11240]"
    }, {
      "left" : "return stack;",
      "right" : "return stack;",
      "info" : "ReturnStatement[11100-11113]:ReturnStatement[11221-11234]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11125-11132]:PrimitiveType[11246-11253]"
    }, {
      "left" : "onStack",
      "right" : "onStack",
      "info" : "SimpleName[11133-11140]:SimpleName[11254-11261]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[11141-11151]:SingleVariableDeclaration[11262-11272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11153-11204]:Block[11274-11325]"
    }, {
      "left" : "return isElementInQueue(stack, el);",
      "right" : "return isElementInQueue(stack, el);",
      "info" : "ReturnStatement[11163-11198]:ReturnStatement[11284-11319]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11210-11217]:Modifier[11331-11338]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11218-11225]:PrimitiveType[11339-11346]"
    }, {
      "left" : "isElementInQueue",
      "right" : "isElementInQueue",
      "info" : "SimpleName[11226-11242]:SimpleName[11347-11363]"
    }, {
      "left" : "ArrayList<Element> queue",
      "right" : "ArrayList<Element> queue",
      "info" : "SingleVariableDeclaration[11243-11267]:SingleVariableDeclaration[11364-11388]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[11269-11284]:SingleVariableDeclaration[11390-11405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11286-11505]:Block[11407-11626]"
    }, {
      "left" : "for (int pos = queue.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = queue.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11296-11477]:ForStatement[11417-11598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11345-11477]:Block[11466-11598]"
    }, {
      "left" : "Element next = queue.get(pos);",
      "right" : "Element next = queue.get(pos);",
      "info" : "VariableDeclarationStatement[11359-11389]:VariableDeclarationStatement[11480-11510]"
    }, {
      "left" : "if (next == element)",
      "right" : "if (next == element)",
      "info" : "IfStatement[11402-11467]:IfStatement[11523-11588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11423-11467]:Block[11544-11588]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11441-11453]:ReturnStatement[11562-11574]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11486-11499]:ReturnStatement[11607-11620]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[11511-11518]:SimpleType[11632-11639]"
    }, {
      "left" : "getFromStack",
      "right" : "getFromStack",
      "info" : "SimpleName[11519-11531]:SimpleName[11640-11652]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[11532-11545]:SingleVariableDeclaration[11653-11666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11547-11780]:Block[11668-11901]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11557-11753]:ForStatement[11678-11874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11606-11753]:Block[11727-11874]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11620-11650]:VariableDeclarationStatement[11741-11771]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[11663-11743]:IfStatement[11784-11864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11699-11743]:Block[11820-11864]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[11717-11729]:ReturnStatement[11838-11850]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11762-11774]:ReturnStatement[11883-11895]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11786-11793]:PrimitiveType[11907-11914]"
    }, {
      "left" : "removeFromStack",
      "right" : "removeFromStack",
      "info" : "SimpleName[11794-11809]:SimpleName[11915-11930]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[11810-11820]:SingleVariableDeclaration[11931-11941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11822-12071]:Block[11943-12192]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11832-12043]:ForStatement[11953-12164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11881-12043]:Block[12002-12164]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11895-11925]:VariableDeclarationStatement[12016-12046]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[11938-12033]:IfStatement[12059-12154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11954-12033]:Block[12075-12154]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[11972-11990]:ExpressionStatement[12093-12111]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12007-12019]:ReturnStatement[12128-12140]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12052-12065]:ReturnStatement[12173-12186]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12077-12081]:PrimitiveType[12198-12202]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[12082-12097]:SimpleName[12203-12218]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[12098-12111]:SingleVariableDeclaration[12219-12232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12113-12334]:Block[12234-12455]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12123-12328]:ForStatement[12244-12449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12172-12328]:Block[12293-12449]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12186-12216]:VariableDeclarationStatement[12307-12337]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12229-12247]:ExpressionStatement[12350-12368]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[12260-12318]:IfStatement[12381-12439]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12312-12318]:BreakStatement[12433-12439]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12387-12391]:PrimitiveType[12508-12512]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[12392-12407]:SimpleName[12513-12528]"
    }, {
      "left" : "String... elNames",
      "right" : "String... elNames",
      "info" : "SingleVariableDeclaration[12408-12425]:SingleVariableDeclaration[12529-12546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12427-12652]:Block[12548-12773]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12437-12646]:ForStatement[12558-12767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12486-12646]:Block[12607-12767]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12500-12530]:VariableDeclarationStatement[12621-12651]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12543-12561]:ExpressionStatement[12664-12682]"
    }, {
      "left" : "if (inSorted(next.nodeName(), elNames))",
      "right" : "if (inSorted(next.nodeName(), elNames))",
      "info" : "IfStatement[12574-12636]:IfStatement[12695-12757]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12630-12636]:BreakStatement[12751-12757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12658-12662]:PrimitiveType[12779-12783]"
    }, {
      "left" : "popStackToBefore",
      "right" : "popStackToBefore",
      "info" : "SimpleName[12663-12679]:SimpleName[12784-12800]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[12680-12693]:SingleVariableDeclaration[12801-12814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12695-12957]:Block[12816-13078]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12705-12951]:ForStatement[12826-13072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12754-12951]:Block[12875-13072]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12768-12798]:VariableDeclarationStatement[12889-12919]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[12811-12941]:IfStatement[12932-13062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12847-12885]:Block[12968-13006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12865-12871]:BreakStatement[12986-12992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12891-12941]:Block[13012-13062]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12909-12927]:ExpressionStatement[13030-13048]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12963-12967]:PrimitiveType[13084-13088]"
    }, {
      "left" : "clearStackToTableContext",
      "right" : "clearStackToTableContext",
      "info" : "SimpleName[12968-12992]:SimpleName[13089-13113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12995-13040]:Block[13116-13161]"
    }, {
      "left" : "clearStackToContext(\"table\");",
      "right" : "clearStackToContext(\"table\");",
      "info" : "ExpressionStatement[13005-13034]:ExpressionStatement[13126-13155]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13046-13050]:PrimitiveType[13167-13171]"
    }, {
      "left" : "clearStackToTableBodyContext",
      "right" : "clearStackToTableBodyContext",
      "info" : "SimpleName[13051-13079]:SimpleName[13172-13200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13082-13157]:Block[13203-13278]"
    }, {
      "left" : "clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");",
      "right" : "clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");",
      "info" : "ExpressionStatement[13092-13151]:ExpressionStatement[13213-13272]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13163-13167]:PrimitiveType[13284-13288]"
    }, {
      "left" : "clearStackToTableRowContext",
      "right" : "clearStackToTableRowContext",
      "info" : "SimpleName[13168-13195]:SimpleName[13289-13316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13198-13252]:Block[13319-13373]"
    }, {
      "left" : "clearStackToContext(\"tr\", \"template\");",
      "right" : "clearStackToContext(\"tr\", \"template\");",
      "info" : "ExpressionStatement[13208-13246]:ExpressionStatement[13329-13367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13258-13265]:Modifier[13379-13386]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13266-13270]:PrimitiveType[13387-13391]"
    }, {
      "left" : "clearStackToContext",
      "right" : "clearStackToContext",
      "info" : "SimpleName[13271-13290]:SimpleName[13392-13411]"
    }, {
      "left" : "String... nodeNames",
      "right" : "String... nodeNames",
      "info" : "SingleVariableDeclaration[13291-13310]:SingleVariableDeclaration[13412-13431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13312-13599]:Block[13433-13720]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[13322-13593]:ForStatement[13443-13714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13371-13593]:Block[13492-13714]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[13385-13415]:VariableDeclarationStatement[13506-13536]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "right" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "info" : "IfStatement[13428-13583]:IfStatement[13549-13704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13525-13531]:BreakStatement[13646-13652]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[13565-13583]:ExpressionStatement[13686-13704]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[13605-13612]:SimpleType[13726-13733]"
    }, {
      "left" : "aboveOnStack",
      "right" : "aboveOnStack",
      "info" : "SimpleName[13613-13625]:SimpleName[13734-13746]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[13626-13636]:SingleVariableDeclaration[13747-13757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13638-13891]:Block[13759-14012]"
    }, {
      "left" : "assert onStack(el);",
      "right" : "assert onStack(el);",
      "info" : "AssertStatement[13648-13667]:AssertStatement[13769-13788]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[13676-13864]:ForStatement[13797-13985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13725-13864]:Block[13846-13985]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[13739-13769]:VariableDeclarationStatement[13860-13890]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[13782-13854]:IfStatement[13903-13975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13798-13854]:Block[13919-13975]"
    }, {
      "left" : "return stack.get(pos-1);",
      "right" : "return stack.get(pos-1);",
      "info" : "ReturnStatement[13816-13840]:ReturnStatement[13937-13961]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13873-13885]:ReturnStatement[13994-14006]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13897-13901]:PrimitiveType[14018-14022]"
    }, {
      "left" : "insertOnStackAfter",
      "right" : "insertOnStackAfter",
      "info" : "SimpleName[13902-13920]:SimpleName[14023-14041]"
    }, {
      "left" : "Element after",
      "right" : "Element after",
      "info" : "SingleVariableDeclaration[13921-13934]:SingleVariableDeclaration[14042-14055]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[13936-13946]:SingleVariableDeclaration[14057-14067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13948-14059]:Block[14069-14180]"
    }, {
      "left" : "int i = stack.lastIndexOf(after);",
      "right" : "int i = stack.lastIndexOf(after);",
      "info" : "VariableDeclarationStatement[13958-13991]:VariableDeclarationStatement[14079-14112]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[14000-14025]:ExpressionStatement[14121-14146]"
    }, {
      "left" : "stack.add(i+1, in);",
      "right" : "stack.add(i+1, in);",
      "info" : "ExpressionStatement[14034-14053]:ExpressionStatement[14155-14174]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14065-14069]:PrimitiveType[14186-14190]"
    }, {
      "left" : "replaceOnStack",
      "right" : "replaceOnStack",
      "info" : "SimpleName[14070-14084]:SimpleName[14191-14205]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[14085-14096]:SingleVariableDeclaration[14206-14217]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[14098-14108]:SingleVariableDeclaration[14219-14229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14110-14157]:Block[14231-14278]"
    }, {
      "left" : "replaceInQueue(stack, out, in);",
      "right" : "replaceInQueue(stack, out, in);",
      "info" : "ExpressionStatement[14120-14151]:ExpressionStatement[14241-14272]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14163-14170]:Modifier[14284-14291]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14171-14175]:PrimitiveType[14292-14296]"
    }, {
      "left" : "replaceInQueue",
      "right" : "replaceInQueue",
      "info" : "SimpleName[14176-14190]:SimpleName[14297-14311]"
    }, {
      "left" : "ArrayList<Element> queue",
      "right" : "ArrayList<Element> queue",
      "info" : "SingleVariableDeclaration[14191-14215]:SingleVariableDeclaration[14312-14336]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[14217-14228]:SingleVariableDeclaration[14338-14349]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[14230-14240]:SingleVariableDeclaration[14351-14361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14242-14349]:Block[14363-14470]"
    }, {
      "left" : "int i = queue.lastIndexOf(out);",
      "right" : "int i = queue.lastIndexOf(out);",
      "info" : "VariableDeclarationStatement[14252-14283]:VariableDeclarationStatement[14373-14404]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[14292-14317]:ExpressionStatement[14413-14438]"
    }, {
      "left" : "queue.set(i, in);",
      "right" : "queue.set(i, in);",
      "info" : "ExpressionStatement[14326-14343]:ExpressionStatement[14447-14464]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14355-14359]:PrimitiveType[14476-14480]"
    }, {
      "left" : "resetInsertionMode",
      "right" : "resetInsertionMode",
      "info" : "SimpleName[14360-14378]:SimpleName[14481-14499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14381-16351]:Block[14502-16472]"
    }, {
      "left" : "boolean last = false;",
      "right" : "boolean last = false;",
      "info" : "VariableDeclarationStatement[14391-14412]:VariableDeclarationStatement[14512-14533]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[14421-16345]:ForStatement[14542-16466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14470-16345]:Block[14591-16466]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[14484-14514]:VariableDeclarationStatement[14605-14635]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[14527-14624]:IfStatement[14648-14745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14541-14624]:Block[14662-14745]"
    }, {
      "left" : "last = true;",
      "right" : "last = true;",
      "info" : "ExpressionStatement[14559-14571]:ExpressionStatement[14680-14692]"
    }, {
      "left" : "node = contextElement;",
      "right" : "node = contextElement;",
      "info" : "ExpressionStatement[14588-14610]:ExpressionStatement[14709-14731]"
    }, {
      "left" : "String name = node.nodeName();",
      "right" : "String name = node.nodeName();",
      "info" : "VariableDeclarationStatement[14637-14667]:VariableDeclarationStatement[14758-14788]"
    }, {
      "left" : "if (\"select\".equals(name))",
      "right" : "if (\"select\".equals(name))",
      "info" : "IfStatement[14680-16335]:IfStatement[14801-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14707-14812]:Block[14828-14933]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InSelect);",
      "right" : "transition(HtmlTreeBuilderState.InSelect);",
      "info" : "ExpressionStatement[14725-14767]:ExpressionStatement[14846-14888]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14784-14790]:BreakStatement[14905-14911]"
    }, {
      "left" : "if ((\"td\".equals(name) || \"th\".equals(name) && !last))",
      "right" : "if ((\"td\".equals(name) || \"th\".equals(name) && !last))",
      "info" : "IfStatement[14818-16335]:IfStatement[14939-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14873-14968]:Block[14994-15089]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCell);",
      "right" : "transition(HtmlTreeBuilderState.InCell);",
      "info" : "ExpressionStatement[14891-14931]:ExpressionStatement[15012-15052]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14948-14954]:BreakStatement[15069-15075]"
    }, {
      "left" : "if (\"tr\".equals(name))",
      "right" : "if (\"tr\".equals(name))",
      "info" : "IfStatement[14974-16335]:IfStatement[15095-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14997-15091]:Block[15118-15212]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InRow);",
      "right" : "transition(HtmlTreeBuilderState.InRow);",
      "info" : "ExpressionStatement[15015-15054]:ExpressionStatement[15136-15175]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15071-15077]:BreakStatement[15192-15198]"
    }, {
      "left" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "right" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "info" : "IfStatement[15097-16335]:IfStatement[15218-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15171-15271]:Block[15292-15392]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTableBody);",
      "right" : "transition(HtmlTreeBuilderState.InTableBody);",
      "info" : "ExpressionStatement[15189-15234]:ExpressionStatement[15310-15355]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15251-15257]:BreakStatement[15372-15378]"
    }, {
      "left" : "if (\"caption\".equals(name))",
      "right" : "if (\"caption\".equals(name))",
      "info" : "IfStatement[15277-16335]:IfStatement[15398-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15305-15403]:Block[15426-15524]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCaption);",
      "right" : "transition(HtmlTreeBuilderState.InCaption);",
      "info" : "ExpressionStatement[15323-15366]:ExpressionStatement[15444-15487]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15383-15389]:BreakStatement[15504-15510]"
    }, {
      "left" : "if (\"colgroup\".equals(name))",
      "right" : "if (\"colgroup\".equals(name))",
      "info" : "IfStatement[15409-16335]:IfStatement[15530-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15438-15548]:Block[15559-15669]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "right" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "info" : "ExpressionStatement[15456-15503]:ExpressionStatement[15577-15624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15520-15526]:BreakStatement[15641-15647]"
    }, {
      "left" : "if (\"table\".equals(name))",
      "right" : "if (\"table\".equals(name))",
      "info" : "IfStatement[15554-16335]:IfStatement[15675-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15580-15676]:Block[15701-15797]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTable);",
      "right" : "transition(HtmlTreeBuilderState.InTable);",
      "info" : "ExpressionStatement[15598-15639]:ExpressionStatement[15719-15760]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15656-15662]:BreakStatement[15777-15783]"
    }, {
      "left" : "if (\"head\".equals(name))",
      "right" : "if (\"head\".equals(name))",
      "info" : "IfStatement[15682-16335]:IfStatement[15803-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15707-15810]:Block[15828-15931]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[15725-15765]:ExpressionStatement[15846-15886]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15782-15788]:BreakStatement[15903-15909]"
    }, {
      "left" : "if (\"body\".equals(name))",
      "right" : "if (\"body\".equals(name))",
      "info" : "IfStatement[15816-16335]:IfStatement[15937-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15841-15936]:Block[15962-16057]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[15859-15899]:ExpressionStatement[15980-16020]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15916-15922]:BreakStatement[16037-16043]"
    }, {
      "left" : "if (\"frameset\".equals(name))",
      "right" : "if (\"frameset\".equals(name))",
      "info" : "IfStatement[15942-16335]:IfStatement[16063-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15971-16078]:Block[16092-16199]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InFrameset);",
      "right" : "transition(HtmlTreeBuilderState.InFrameset);",
      "info" : "ExpressionStatement[15989-16033]:ExpressionStatement[16110-16154]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16050-16056]:BreakStatement[16171-16177]"
    }, {
      "left" : "if (\"html\".equals(name))",
      "right" : "if (\"html\".equals(name))",
      "info" : "IfStatement[16084-16335]:IfStatement[16205-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16109-16216]:Block[16230-16337]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "right" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "info" : "ExpressionStatement[16127-16171]:ExpressionStatement[16248-16292]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16188-16194]:BreakStatement[16309-16315]"
    }, {
      "left" : "if (last)",
      "right" : "if (last)",
      "info" : "IfStatement[16222-16335]:IfStatement[16343-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16232-16335]:Block[16353-16456]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[16250-16290]:ExpressionStatement[16371-16411]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16307-16313]:BreakStatement[16428-16434]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16456-16463]:Modifier[16577-16584]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16464-16471]:PrimitiveType[16585-16592]"
    }, {
      "left" : "inSpecificScope",
      "right" : "inSpecificScope",
      "info" : "SimpleName[16472-16487]:SimpleName[16593-16608]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[16488-16505]:SingleVariableDeclaration[16609-16626]"
    }, {
      "left" : "String[] baseTypes",
      "right" : "String[] baseTypes",
      "info" : "SingleVariableDeclaration[16507-16525]:SingleVariableDeclaration[16628-16646]"
    }, {
      "left" : "String[] extraTypes",
      "right" : "String[] extraTypes",
      "info" : "SingleVariableDeclaration[16527-16546]:SingleVariableDeclaration[16648-16667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16548-16676]:Block[16669-16797]"
    }, {
      "left" : "specificScopeTarget[0] = targetName;",
      "right" : "specificScopeTarget[0] = targetName;",
      "info" : "ExpressionStatement[16558-16594]:ExpressionStatement[16679-16715]"
    }, {
      "left" : "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);",
      "right" : "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);",
      "info" : "ReturnStatement[16603-16670]:ReturnStatement[16724-16791]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16682-16689]:Modifier[16803-16810]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16690-16697]:PrimitiveType[16811-16818]"
    }, {
      "left" : "inSpecificScope",
      "right" : "inSpecificScope",
      "info" : "SimpleName[16698-16713]:SimpleName[16819-16834]"
    }, {
      "left" : "String[] targetNames",
      "right" : "String[] targetNames",
      "info" : "SingleVariableDeclaration[16714-16734]:SingleVariableDeclaration[16835-16855]"
    }, {
      "left" : "String[] baseTypes",
      "right" : "String[] baseTypes",
      "info" : "SingleVariableDeclaration[16736-16754]:SingleVariableDeclaration[16857-16875]"
    }, {
      "left" : "String[] extraTypes",
      "right" : "String[] extraTypes",
      "info" : "SingleVariableDeclaration[16756-16775]:SingleVariableDeclaration[16877-16896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16777-17285]:Block[16898-17500]"
    }, {
      "left" : "int depth = stack.size() -1;",
      "right" : "int depth = stack.size() -1;",
      "info" : "VariableDeclarationStatement[16787-16815]:VariableDeclarationStatement[16908-16936]"
    }, {
      "left" : "for (int pos = depth; pos >= 0; pos--)",
      "right" : "for (int pos = depth; pos >= 0; pos--)",
      "info" : "ForStatement[16824-17207]:ForStatement[17039-17422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16863-17207]:Block[17078-17422]"
    }, {
      "left" : "Element el = stack.get(pos);",
      "right" : "Element el = stack.get(pos);",
      "info" : "VariableDeclarationStatement[16877-16905]:VariableDeclarationStatement[17092-17120]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[16918-16948]:VariableDeclarationStatement[17133-17163]"
    }, {
      "left" : "if (inSorted(elName, targetNames))",
      "right" : "if (inSorted(elName, targetNames))",
      "info" : "IfStatement[16961-17024]:IfStatement[17176-17239]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17012-17024]:ReturnStatement[17227-17239]"
    }, {
      "left" : "if (inSorted(elName, baseTypes))",
      "right" : "if (inSorted(elName, baseTypes))",
      "info" : "IfStatement[17037-17099]:IfStatement[17252-17314]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17086-17099]:ReturnStatement[17301-17314]"
    }, {
      "left" : "if (extraTypes != null && inSorted(elName, extraTypes))",
      "right" : "if (extraTypes != null && inSorted(elName, extraTypes))",
      "info" : "IfStatement[17112-17197]:IfStatement[17327-17412]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17184-17197]:ReturnStatement[17399-17412]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[17216-17257]:ExpressionStatement[17431-17472]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17266-17279]:ReturnStatement[17481-17494]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17291-17298]:PrimitiveType[17506-17513]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[17299-17306]:SimpleName[17514-17521]"
    }, {
      "left" : "String[] targetNames",
      "right" : "String[] targetNames",
      "info" : "SingleVariableDeclaration[17307-17327]:SingleVariableDeclaration[17522-17542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17329-17406]:Block[17544-17621]"
    }, {
      "left" : "return inSpecificScope(targetNames, TagsSearchInScope, null);",
      "right" : "return inSpecificScope(targetNames, TagsSearchInScope, null);",
      "info" : "ReturnStatement[17339-17400]:ReturnStatement[17554-17615]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17412-17419]:PrimitiveType[17627-17634]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[17420-17427]:SimpleName[17635-17642]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17428-17445]:SingleVariableDeclaration[17643-17660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17447-17496]:Block[17662-17711]"
    }, {
      "left" : "return inScope(targetName, null);",
      "right" : "return inScope(targetName, null);",
      "info" : "ReturnStatement[17457-17490]:ReturnStatement[17672-17705]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17502-17509]:PrimitiveType[17717-17724]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[17510-17517]:SimpleName[17725-17732]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17518-17535]:SingleVariableDeclaration[17733-17750]"
    }, {
      "left" : "String[] extras",
      "right" : "String[] extras",
      "info" : "SingleVariableDeclaration[17537-17552]:SingleVariableDeclaration[17752-17767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17554-17768]:Block[17769-17983]"
    }, {
      "left" : "return inSpecificScope(targetName, TagsSearchInScope, extras);",
      "right" : "return inSpecificScope(targetName, TagsSearchInScope, extras);",
      "info" : "ReturnStatement[17564-17626]:ReturnStatement[17779-17841]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17774-17781]:PrimitiveType[17989-17996]"
    }, {
      "left" : "inListItemScope",
      "right" : "inListItemScope",
      "info" : "SimpleName[17782-17797]:SimpleName[17997-18012]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17798-17815]:SingleVariableDeclaration[18013-18030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17817-17875]:Block[18032-18090]"
    }, {
      "left" : "return inScope(targetName, TagSearchList);",
      "right" : "return inScope(targetName, TagSearchList);",
      "info" : "ReturnStatement[17827-17869]:ReturnStatement[18042-18084]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17881-17888]:PrimitiveType[18096-18103]"
    }, {
      "left" : "inButtonScope",
      "right" : "inButtonScope",
      "info" : "SimpleName[17889-17902]:SimpleName[18104-18117]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17903-17920]:SingleVariableDeclaration[18118-18135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17922-17982]:Block[18137-18197]"
    }, {
      "left" : "return inScope(targetName, TagSearchButton);",
      "right" : "return inScope(targetName, TagSearchButton);",
      "info" : "ReturnStatement[17932-17976]:ReturnStatement[18147-18191]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17988-17995]:PrimitiveType[18203-18210]"
    }, {
      "left" : "inTableScope",
      "right" : "inTableScope",
      "info" : "SimpleName[17996-18008]:SimpleName[18211-18223]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[18009-18026]:SingleVariableDeclaration[18224-18241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18028-18106]:Block[18243-18321]"
    }, {
      "left" : "return inSpecificScope(targetName, TagSearchTableScope, null);",
      "right" : "return inSpecificScope(targetName, TagSearchTableScope, null);",
      "info" : "ReturnStatement[18038-18100]:ReturnStatement[18253-18315]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18112-18119]:PrimitiveType[18327-18334]"
    }, {
      "left" : "inSelectScope",
      "right" : "inSelectScope",
      "info" : "SimpleName[18120-18133]:SimpleName[18335-18348]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[18134-18151]:SingleVariableDeclaration[18349-18366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18153-18567]:Block[18368-18782]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[18163-18489]:ForStatement[18378-18704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18212-18489]:Block[18427-18704]"
    }, {
      "left" : "Element el = stack.get(pos);",
      "right" : "Element el = stack.get(pos);",
      "info" : "VariableDeclarationStatement[18226-18254]:VariableDeclarationStatement[18441-18469]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[18267-18297]:VariableDeclarationStatement[18482-18512]"
    }, {
      "left" : "if (elName.equals(targetName))",
      "right" : "if (elName.equals(targetName))",
      "info" : "IfStatement[18310-18369]:IfStatement[18525-18584]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18357-18369]:ReturnStatement[18572-18584]"
    }, {
      "left" : "if (!inSorted(elName, TagSearchSelectScope))",
      "right" : "if (!inSorted(elName, TagSearchSelectScope))",
      "info" : "IfStatement[18382-18479]:IfStatement[18597-18694]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18466-18479]:ReturnStatement[18681-18694]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[18498-18539]:ExpressionStatement[18713-18754]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18548-18561]:ReturnStatement[18763-18776]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18573-18577]:PrimitiveType[18788-18792]"
    }, {
      "left" : "setHeadElement",
      "right" : "setHeadElement",
      "info" : "SimpleName[18578-18592]:SimpleName[18793-18807]"
    }, {
      "left" : "Element headElement",
      "right" : "Element headElement",
      "info" : "SingleVariableDeclaration[18593-18612]:SingleVariableDeclaration[18808-18827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18614-18661]:Block[18829-18876]"
    }, {
      "left" : "this.headElement = headElement;",
      "right" : "this.headElement = headElement;",
      "info" : "ExpressionStatement[18624-18655]:ExpressionStatement[18839-18870]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[18667-18674]:SimpleType[18882-18889]"
    }, {
      "left" : "getHeadElement",
      "right" : "getHeadElement",
      "info" : "SimpleName[18675-18689]:SimpleName[18890-18904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18692-18727]:Block[18907-18942]"
    }, {
      "left" : "return headElement;",
      "right" : "return headElement;",
      "info" : "ReturnStatement[18702-18721]:ReturnStatement[18917-18936]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18733-18740]:PrimitiveType[18948-18955]"
    }, {
      "left" : "isFosterInserts",
      "right" : "isFosterInserts",
      "info" : "SimpleName[18741-18756]:SimpleName[18956-18971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18759-18796]:Block[18974-19011]"
    }, {
      "left" : "return fosterInserts;",
      "right" : "return fosterInserts;",
      "info" : "ReturnStatement[18769-18790]:ReturnStatement[18984-19005]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18802-18806]:PrimitiveType[19017-19021]"
    }, {
      "left" : "setFosterInserts",
      "right" : "setFosterInserts",
      "info" : "SimpleName[18807-18823]:SimpleName[19022-19038]"
    }, {
      "left" : "boolean fosterInserts",
      "right" : "boolean fosterInserts",
      "info" : "SingleVariableDeclaration[18824-18845]:SingleVariableDeclaration[19039-19060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18847-18898]:Block[19062-19113]"
    }, {
      "left" : "this.fosterInserts = fosterInserts;",
      "right" : "this.fosterInserts = fosterInserts;",
      "info" : "ExpressionStatement[18857-18892]:ExpressionStatement[19072-19107]"
    }, {
      "left" : "FormElement",
      "right" : "FormElement",
      "info" : "SimpleType[18904-18915]:SimpleType[19119-19130]"
    }, {
      "left" : "getFormElement",
      "right" : "getFormElement",
      "info" : "SimpleName[18916-18930]:SimpleName[19131-19145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18933-18968]:Block[19148-19183]"
    }, {
      "left" : "return formElement;",
      "right" : "return formElement;",
      "info" : "ReturnStatement[18943-18962]:ReturnStatement[19158-19177]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18974-18978]:PrimitiveType[19189-19193]"
    }, {
      "left" : "setFormElement",
      "right" : "setFormElement",
      "info" : "SimpleName[18979-18993]:SimpleName[19194-19208]"
    }, {
      "left" : "FormElement formElement",
      "right" : "FormElement formElement",
      "info" : "SingleVariableDeclaration[18994-19017]:SingleVariableDeclaration[19209-19232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19019-19066]:Block[19234-19281]"
    }, {
      "left" : "this.formElement = formElement;",
      "right" : "this.formElement = formElement;",
      "info" : "ExpressionStatement[19029-19060]:ExpressionStatement[19244-19275]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19072-19076]:PrimitiveType[19287-19291]"
    }, {
      "left" : "newPendingTableCharacters",
      "right" : "newPendingTableCharacters",
      "info" : "SimpleName[19077-19102]:SimpleName[19292-19317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19105-19164]:Block[19320-19379]"
    }, {
      "left" : "pendingTableCharacters = new ArrayList<>();",
      "right" : "pendingTableCharacters = new ArrayList<>();",
      "info" : "ExpressionStatement[19115-19158]:ExpressionStatement[19330-19373]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[19170-19182]:ParameterizedType[19385-19397]"
    }, {
      "left" : "getPendingTableCharacters",
      "right" : "getPendingTableCharacters",
      "info" : "SimpleName[19183-19208]:SimpleName[19398-19423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19211-19257]:Block[19426-19472]"
    }, {
      "left" : "return pendingTableCharacters;",
      "right" : "return pendingTableCharacters;",
      "info" : "ReturnStatement[19221-19251]:ReturnStatement[19436-19466]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19263-19267]:PrimitiveType[19478-19482]"
    }, {
      "left" : "setPendingTableCharacters",
      "right" : "setPendingTableCharacters",
      "info" : "SimpleName[19268-19293]:SimpleName[19483-19508]"
    }, {
      "left" : "List<String> pendingTableCharacters",
      "right" : "List<String> pendingTableCharacters",
      "info" : "SingleVariableDeclaration[19294-19329]:SingleVariableDeclaration[19509-19544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19331-19400]:Block[19546-19615]"
    }, {
      "left" : "this.pendingTableCharacters = pendingTableCharacters;",
      "right" : "this.pendingTableCharacters = pendingTableCharacters;",
      "info" : "ExpressionStatement[19341-19394]:ExpressionStatement[19556-19609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20012-20016]:PrimitiveType[20227-20231]"
    }, {
      "left" : "generateImpliedEndTags",
      "right" : "generateImpliedEndTags",
      "info" : "SimpleName[20017-20039]:SimpleName[20232-20254]"
    }, {
      "left" : "String excludeTag",
      "right" : "String excludeTag",
      "info" : "SingleVariableDeclaration[20040-20057]:SingleVariableDeclaration[20255-20272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20059-20248]:Block[20274-20463]"
    }, {
      "left" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                inSorted(currentElement().nodeName(), TagSearchEndTags))\n            pop();",
      "right" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                inSorted(currentElement().nodeName(), TagSearchEndTags))\n            pop();",
      "info" : "WhileStatement[20069-20242]:WhileStatement[20284-20457]"
    }, {
      "left" : "pop();",
      "right" : "pop();",
      "info" : "ExpressionStatement[20236-20242]:ExpressionStatement[20451-20457]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20254-20258]:PrimitiveType[20469-20473]"
    }, {
      "left" : "generateImpliedEndTags",
      "right" : "generateImpliedEndTags",
      "info" : "SimpleName[20259-20281]:SimpleName[20474-20496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20284-20329]:Block[20499-20544]"
    }, {
      "left" : "generateImpliedEndTags(null);",
      "right" : "generateImpliedEndTags(null);",
      "info" : "ExpressionStatement[20294-20323]:ExpressionStatement[20509-20538]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20335-20342]:PrimitiveType[20550-20557]"
    }, {
      "left" : "isSpecial",
      "right" : "isSpecial",
      "info" : "SimpleName[20343-20352]:SimpleName[20558-20567]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[20353-20363]:SingleVariableDeclaration[20568-20578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20365-20544]:Block[20580-20759]"
    }, {
      "left" : "String name = el.nodeName();",
      "right" : "String name = el.nodeName();",
      "info" : "VariableDeclarationStatement[20461-20489]:VariableDeclarationStatement[20676-20704]"
    }, {
      "left" : "return inSorted(name, TagSearchSpecial);",
      "right" : "return inSorted(name, TagSearchSpecial);",
      "info" : "ReturnStatement[20498-20538]:ReturnStatement[20713-20753]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[20550-20557]:SimpleType[20765-20772]"
    }, {
      "left" : "lastFormattingElement",
      "right" : "lastFormattingElement",
      "info" : "SimpleName[20558-20579]:SimpleName[20773-20794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20582-20696]:Block[20797-20911]"
    }, {
      "left" : "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;",
      "right" : "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;",
      "info" : "ReturnStatement[20592-20690]:ReturnStatement[20807-20905]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[20702-20709]:SimpleType[20917-20924]"
    }, {
      "left" : "removeLastFormattingElement",
      "right" : "removeLastFormattingElement",
      "info" : "SimpleName[20710-20737]:SimpleName[20925-20952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20740-20907]:Block[20955-21122]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[20750-20787]:VariableDeclarationStatement[20965-21002]"
    }, {
      "left" : "if (size > 0)",
      "right" : "if (size > 0)",
      "info" : "IfStatement[20796-20901]:IfStatement[21011-21116]"
    }, {
      "left" : "return formattingElements.remove(size-1);",
      "right" : "return formattingElements.remove(size-1);",
      "info" : "ReturnStatement[20822-20863]:ReturnStatement[21037-21078]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20889-20901]:ReturnStatement[21104-21116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20947-20951]:PrimitiveType[21162-21166]"
    }, {
      "left" : "pushActiveFormattingElements",
      "right" : "pushActiveFormattingElements",
      "info" : "SimpleName[20952-20980]:SimpleName[21167-21195]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[20981-20991]:SingleVariableDeclaration[21196-21206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20993-21453]:Block[21208-21668]"
    }, {
      "left" : "int numSeen = 0;",
      "right" : "int numSeen = 0;",
      "info" : "VariableDeclarationStatement[21003-21019]:VariableDeclarationStatement[21218-21234]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[21028-21411]:ForStatement[21243-21626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21090-21411]:Block[21305-21626]"
    }, {
      "left" : "Element el = formattingElements.get(pos);",
      "right" : "Element el = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[21104-21145]:VariableDeclarationStatement[21319-21360]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[21158-21206]:IfStatement[21373-21421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21200-21206]:BreakStatement[21415-21421]"
    }, {
      "left" : "if (isSameFormattingElement(in, el))",
      "right" : "if (isSameFormattingElement(in, el))",
      "info" : "IfStatement[21220-21283]:IfStatement[21435-21498]"
    }, {
      "left" : "numSeen++;",
      "right" : "numSeen++;",
      "info" : "ExpressionStatement[21273-21283]:ExpressionStatement[21488-21498]"
    }, {
      "left" : "if (numSeen == 3)",
      "right" : "if (numSeen == 3)",
      "info" : "IfStatement[21297-21401]:IfStatement[21512-21616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21315-21401]:Block[21530-21616]"
    }, {
      "left" : "formattingElements.remove(pos);",
      "right" : "formattingElements.remove(pos);",
      "info" : "ExpressionStatement[21333-21364]:ExpressionStatement[21548-21579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21381-21387]:BreakStatement[21596-21602]"
    }, {
      "left" : "formattingElements.add(in);",
      "right" : "formattingElements.add(in);",
      "info" : "ExpressionStatement[21420-21447]:ExpressionStatement[21635-21662]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21459-21466]:Modifier[21674-21681]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21467-21474]:PrimitiveType[21682-21689]"
    }, {
      "left" : "isSameFormattingElement",
      "right" : "isSameFormattingElement",
      "info" : "SimpleName[21475-21498]:SimpleName[21690-21713]"
    }, {
      "left" : "Element a",
      "right" : "Element a",
      "info" : "SingleVariableDeclaration[21499-21508]:SingleVariableDeclaration[21714-21723]"
    }, {
      "left" : "Element b",
      "right" : "Element b",
      "info" : "SingleVariableDeclaration[21510-21519]:SingleVariableDeclaration[21725-21734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21521-21841]:Block[21736-22056]"
    }, {
      "left" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "right" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "info" : "ReturnStatement[21651-21807]:ReturnStatement[21866-22022]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21847-21851]:PrimitiveType[22062-22066]"
    }, {
      "left" : "reconstructFormattingElements",
      "right" : "reconstructFormattingElements",
      "info" : "SimpleName[21852-21881]:SimpleName[22067-22096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21884-23348]:Block[22099-23563]"
    }, {
      "left" : "Element last = lastFormattingElement();",
      "right" : "Element last = lastFormattingElement();",
      "info" : "VariableDeclarationStatement[21894-21933]:VariableDeclarationStatement[22109-22148]"
    }, {
      "left" : "if (last == null || onStack(last))",
      "right" : "if (last == null || onStack(last))",
      "info" : "IfStatement[21942-21996]:IfStatement[22157-22211]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21989-21996]:ReturnStatement[22204-22211]"
    }, {
      "left" : "Element entry = last;",
      "right" : "Element entry = last;",
      "info" : "VariableDeclarationStatement[22006-22027]:VariableDeclarationStatement[22221-22242]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[22036-22073]:VariableDeclarationStatement[22251-22288]"
    }, {
      "left" : "int pos = size - 1;",
      "right" : "int pos = size - 1;",
      "info" : "VariableDeclarationStatement[22082-22101]:VariableDeclarationStatement[22297-22316]"
    }, {
      "left" : "boolean skip = false;",
      "right" : "boolean skip = false;",
      "info" : "VariableDeclarationStatement[22110-22131]:VariableDeclarationStatement[22325-22346]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[22140-22530]:WhileStatement[22355-22745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22153-22530]:Block[22368-22745]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[22167-22285]:IfStatement[22382-22500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22181-22285]:Block[22396-22500]"
    }, {
      "left" : "skip = true;",
      "right" : "skip = true;",
      "info" : "ExpressionStatement[22236-22248]:ExpressionStatement[22451-22463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22265-22271]:BreakStatement[22480-22486]"
    }, {
      "left" : "entry = formattingElements.get(--pos);",
      "right" : "entry = formattingElements.get(--pos);",
      "info" : "ExpressionStatement[22298-22336]:ExpressionStatement[22513-22551]"
    }, {
      "left" : "if (entry == null || onStack(entry))",
      "right" : "if (entry == null || onStack(entry))",
      "info" : "IfStatement[22383-22482]:IfStatement[22598-22697]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22476-22482]:BreakStatement[22691-22697]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[22539-23342]:WhileStatement[22754-23557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22551-23342]:Block[22766-23557]"
    }, {
      "left" : "if (!skip)",
      "right" : "if (!skip)",
      "info" : "IfStatement[22565-22661]:IfStatement[22780-22876]"
    }, {
      "left" : "entry = formattingElements.get(++pos);",
      "right" : "entry = formattingElements.get(++pos);",
      "info" : "ExpressionStatement[22623-22661]:ExpressionStatement[22838-22876]"
    }, {
      "left" : "Validate.notNull(entry);",
      "right" : "Validate.notNull(entry);",
      "info" : "ExpressionStatement[22674-22698]:ExpressionStatement[22889-22913]"
    }, {
      "left" : "skip = false;",
      "right" : "skip = false;",
      "info" : "ExpressionStatement[22851-22864]:ExpressionStatement[23066-23079]"
    }, {
      "left" : "Element newEl = insertStartTag(entry.nodeName());",
      "right" : "Element newEl = insertStartTag(entry.nodeName());",
      "info" : "VariableDeclarationStatement[22912-22961]:VariableDeclarationStatement[23127-23176]"
    }, {
      "left" : "newEl.attributes().addAll(entry.attributes());",
      "right" : "newEl.attributes().addAll(entry.attributes());",
      "info" : "ExpressionStatement[23076-23122]:ExpressionStatement[23291-23337]"
    }, {
      "left" : "formattingElements.set(pos, newEl);",
      "right" : "formattingElements.set(pos, newEl);",
      "info" : "ExpressionStatement[23184-23219]:ExpressionStatement[23399-23434]"
    }, {
      "left" : "if (pos == size-1)",
      "right" : "if (pos == size-1)",
      "info" : "IfStatement[23251-23332]:IfStatement[23466-23547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23326-23332]:BreakStatement[23541-23547]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23354-23358]:PrimitiveType[23569-23573]"
    }, {
      "left" : "clearFormattingElementsToLastMarker",
      "right" : "clearFormattingElementsToLastMarker",
      "info" : "SimpleName[23359-23394]:SimpleName[23574-23609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23397-23569]:Block[23612-23784]"
    }, {
      "left" : "while (!formattingElements.isEmpty())",
      "right" : "while (!formattingElements.isEmpty())",
      "info" : "WhileStatement[23407-23563]:WhileStatement[23622-23778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23445-23563]:Block[23660-23778]"
    }, {
      "left" : "Element el = removeLastFormattingElement();",
      "right" : "Element el = removeLastFormattingElement();",
      "info" : "VariableDeclarationStatement[23459-23502]:VariableDeclarationStatement[23674-23717]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[23515-23553]:IfStatement[23730-23768]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23547-23553]:BreakStatement[23762-23768]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23575-23579]:PrimitiveType[23790-23794]"
    }, {
      "left" : "removeFromActiveFormattingElements",
      "right" : "removeFromActiveFormattingElements",
      "info" : "SimpleName[23580-23614]:SimpleName[23795-23829]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[23615-23625]:SingleVariableDeclaration[23830-23840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23627-23887]:Block[23842-24102]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[23637-23881]:ForStatement[23852-24096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23699-23881]:Block[23914-24096]"
    }, {
      "left" : "Element next = formattingElements.get(pos);",
      "right" : "Element next = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[23713-23756]:VariableDeclarationStatement[23928-23971]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[23769-23871]:IfStatement[23984-24086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23785-23871]:Block[24000-24086]"
    }, {
      "left" : "formattingElements.remove(pos);",
      "right" : "formattingElements.remove(pos);",
      "info" : "ExpressionStatement[23803-23834]:ExpressionStatement[24018-24049]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23851-23857]:BreakStatement[24066-24072]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23893-23900]:PrimitiveType[24108-24115]"
    }, {
      "left" : "isInActiveFormattingElements",
      "right" : "isInActiveFormattingElements",
      "info" : "SimpleName[23901-23929]:SimpleName[24116-24144]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[23930-23940]:SingleVariableDeclaration[24145-24155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23942-24006]:Block[24157-24221]"
    }, {
      "left" : "return isElementInQueue(formattingElements, el);",
      "right" : "return isElementInQueue(formattingElements, el);",
      "info" : "ReturnStatement[23952-24000]:ReturnStatement[24167-24215]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[24012-24019]:SimpleType[24227-24234]"
    }, {
      "left" : "getActiveFormattingElement",
      "right" : "getActiveFormattingElement",
      "info" : "SimpleName[24020-24046]:SimpleName[24235-24261]"
    }, {
      "left" : "String nodeName",
      "right" : "String nodeName",
      "info" : "SingleVariableDeclaration[24047-24062]:SingleVariableDeclaration[24262-24277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24064-24383]:Block[24279-24598]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[24074-24356]:ForStatement[24289-24571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24136-24356]:Block[24351-24571]"
    }, {
      "left" : "Element next = formattingElements.get(pos);",
      "right" : "Element next = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[24150-24193]:VariableDeclarationStatement[24365-24408]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[24206-24346]:IfStatement[24421-24561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24256-24262]:BreakStatement[24471-24477]"
    }, {
      "left" : "if (next.nodeName().equals(nodeName))",
      "right" : "if (next.nodeName().equals(nodeName))",
      "info" : "IfStatement[24280-24346]:IfStatement[24495-24561]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[24334-24346]:ReturnStatement[24549-24561]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24365-24377]:ReturnStatement[24580-24592]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24389-24393]:PrimitiveType[24604-24608]"
    }, {
      "left" : "replaceActiveFormattingElement",
      "right" : "replaceActiveFormattingElement",
      "info" : "SimpleName[24394-24424]:SimpleName[24609-24639]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[24425-24436]:SingleVariableDeclaration[24640-24651]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[24438-24448]:SingleVariableDeclaration[24653-24663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24450-24510]:Block[24665-24725]"
    }, {
      "left" : "replaceInQueue(formattingElements, out, in);",
      "right" : "replaceInQueue(formattingElements, out, in);",
      "info" : "ExpressionStatement[24460-24504]:ExpressionStatement[24675-24719]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24516-24520]:PrimitiveType[24731-24735]"
    }, {
      "left" : "insertMarkerToFormattingElements",
      "right" : "insertMarkerToFormattingElements",
      "info" : "SimpleName[24521-24553]:SimpleName[24736-24768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24556-24601]:Block[24771-24816]"
    }, {
      "left" : "formattingElements.add(null);",
      "right" : "formattingElements.add(null);",
      "info" : "ExpressionStatement[24566-24595]:ExpressionStatement[24781-24810]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24607-24611]:PrimitiveType[24822-24826]"
    }, {
      "left" : "insertInFosterParent",
      "right" : "insertInFosterParent",
      "info" : "SimpleName[24612-24632]:SimpleName[24827-24847]"
    }, {
      "left" : "Node in",
      "right" : "Node in",
      "info" : "SingleVariableDeclaration[24633-24640]:SingleVariableDeclaration[24848-24855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24642-25326]:Block[24857-25541]"
    }, {
      "left" : "Element fosterParent;",
      "right" : "Element fosterParent;",
      "info" : "VariableDeclarationStatement[24652-24673]:VariableDeclarationStatement[24867-24888]"
    }, {
      "left" : "Element lastTable = getFromStack(\"table\");",
      "right" : "Element lastTable = getFromStack(\"table\");",
      "info" : "VariableDeclarationStatement[24682-24724]:VariableDeclarationStatement[24897-24939]"
    }, {
      "left" : "boolean isLastTableParent = false;",
      "right" : "boolean isLastTableParent = false;",
      "info" : "VariableDeclarationStatement[24733-24767]:VariableDeclarationStatement[24948-24982]"
    }, {
      "left" : "if (lastTable != null)",
      "right" : "if (lastTable != null)",
      "info" : "IfStatement[24776-25102]:IfStatement[24991-25317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24799-25024]:Block[25014-25239]"
    }, {
      "left" : "if (lastTable.parent() != null)",
      "right" : "if (lastTable.parent() != null)",
      "info" : "IfStatement[24813-25014]:IfStatement[25028-25229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24845-24953]:Block[25060-25168]"
    }, {
      "left" : "fosterParent = lastTable.parent();",
      "right" : "fosterParent = lastTable.parent();",
      "info" : "ExpressionStatement[24863-24897]:ExpressionStatement[25078-25112]"
    }, {
      "left" : "isLastTableParent = true;",
      "right" : "isLastTableParent = true;",
      "info" : "ExpressionStatement[24914-24939]:ExpressionStatement[25129-25154]"
    }, {
      "left" : "fosterParent = aboveOnStack(lastTable);",
      "right" : "fosterParent = aboveOnStack(lastTable);",
      "info" : "ExpressionStatement[24975-25014]:ExpressionStatement[25190-25229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25030-25102]:Block[25245-25317]"
    }, {
      "left" : "fosterParent = stack.get(0);",
      "right" : "fosterParent = stack.get(0);",
      "info" : "ExpressionStatement[25064-25092]:ExpressionStatement[25279-25307]"
    }, {
      "left" : "if (isLastTableParent)",
      "right" : "if (isLastTableParent)",
      "info" : "IfStatement[25112-25320]:IfStatement[25327-25535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25135-25265]:Block[25350-25480]"
    }, {
      "left" : "Validate.notNull(lastTable);",
      "right" : "Validate.notNull(lastTable);",
      "info" : "ExpressionStatement[25149-25177]:ExpressionStatement[25364-25392]"
    }, {
      "left" : "lastTable.before(in);",
      "right" : "lastTable.before(in);",
      "info" : "ExpressionStatement[25234-25255]:ExpressionStatement[25449-25470]"
    }, {
      "left" : "fosterParent.appendChild(in);",
      "right" : "fosterParent.appendChild(in);",
      "info" : "ExpressionStatement[25291-25320]:ExpressionStatement[25506-25535]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25332-25341]:MarkerAnnotation[25547-25556]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25346-25352]:Modifier[25561-25567]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25353-25359]:SimpleType[25568-25574]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[25360-25368]:SimpleName[25575-25583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25371-25574]:Block[25586-25789]"
    }, {
      "left" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "right" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "info" : "ReturnStatement[25381-25568]:ReturnStatement[25596-25783]"
    } ]
  },
  "interFileMappings" : { }
}