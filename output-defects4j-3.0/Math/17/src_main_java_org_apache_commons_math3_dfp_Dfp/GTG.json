{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "TypeDeclaration[916-76627]:TypeDeclaration[916-76734]"
    }, {
      "left" : "public static final int RADIX = 10000;",
      "right" : "public static final int RADIX = 10000;",
      "info" : "FieldDeclaration[4343-4441]:FieldDeclaration[4343-4441]"
    }, {
      "left" : "public static final int MIN_EXP = -32767;",
      "right" : "public static final int MIN_EXP = -32767;",
      "info" : "FieldDeclaration[4447-4597]:FieldDeclaration[4447-4597]"
    }, {
      "left" : "public static final int MAX_EXP =  32768;",
      "right" : "public static final int MAX_EXP =  32768;",
      "info" : "FieldDeclaration[4603-4744]:FieldDeclaration[4603-4744]"
    }, {
      "left" : "public static final int ERR_SCALE = 32760;",
      "right" : "public static final int ERR_SCALE = 32760;",
      "info" : "FieldDeclaration[4750-4873]:FieldDeclaration[4750-4873]"
    }, {
      "left" : "public static final byte FINITE = 0;",
      "right" : "public static final byte FINITE = 0;",
      "info" : "FieldDeclaration[4879-4969]:FieldDeclaration[4879-4969]"
    }, {
      "left" : "public static final byte INFINITE = 1;",
      "right" : "public static final byte INFINITE = 1;",
      "info" : "FieldDeclaration[4975-5054]:FieldDeclaration[4975-5054]"
    }, {
      "left" : "public static final byte SNAN = 2;",
      "right" : "public static final byte SNAN = 2;",
      "info" : "FieldDeclaration[5060-5140]:FieldDeclaration[5060-5140]"
    }, {
      "left" : "public static final byte QNAN = 3;",
      "right" : "public static final byte QNAN = 3;",
      "info" : "FieldDeclaration[5146-5222]:FieldDeclaration[5146-5222]"
    }, {
      "left" : "private static final String NAN_STRING = \"NaN\";",
      "right" : "private static final String NAN_STRING = \"NaN\";",
      "info" : "FieldDeclaration[5228-5317]:FieldDeclaration[5228-5317]"
    }, {
      "left" : "private static final String POS_INFINITY_STRING = \"Infinity\";",
      "right" : "private static final String POS_INFINITY_STRING = \"Infinity\";",
      "info" : "FieldDeclaration[5323-5440]:FieldDeclaration[5323-5440]"
    }, {
      "left" : "private static final String NEG_INFINITY_STRING = \"-Infinity\";",
      "right" : "private static final String NEG_INFINITY_STRING = \"-Infinity\";",
      "info" : "FieldDeclaration[5446-5564]:FieldDeclaration[5446-5564]"
    }, {
      "left" : "private static final String ADD_TRAP = \"add\";",
      "right" : "private static final String ADD_TRAP = \"add\";",
      "info" : "FieldDeclaration[5570-5664]:FieldDeclaration[5570-5664]"
    }, {
      "left" : "private static final String MULTIPLY_TRAP = \"multiply\";",
      "right" : "private static final String MULTIPLY_TRAP = \"multiply\";",
      "info" : "FieldDeclaration[5670-5780]:FieldDeclaration[5670-5780]"
    }, {
      "left" : "private static final String DIVIDE_TRAP = \"divide\";",
      "right" : "private static final String DIVIDE_TRAP = \"divide\";",
      "info" : "FieldDeclaration[5786-5886]:FieldDeclaration[5786-5886]"
    }, {
      "left" : "private static final String SQRT_TRAP = \"sqrt\";",
      "right" : "private static final String SQRT_TRAP = \"sqrt\";",
      "info" : "FieldDeclaration[5892-5991]:FieldDeclaration[5892-5991]"
    }, {
      "left" : "private static final String ALIGN_TRAP = \"align\";",
      "right" : "private static final String ALIGN_TRAP = \"align\";",
      "info" : "FieldDeclaration[5997-6096]:FieldDeclaration[5997-6096]"
    }, {
      "left" : "private static final String TRUNC_TRAP = \"trunc\";",
      "right" : "private static final String TRUNC_TRAP = \"trunc\";",
      "info" : "FieldDeclaration[6102-6202]:FieldDeclaration[6102-6202]"
    }, {
      "left" : "private static final String NEXT_AFTER_TRAP = \"nextAfter\";",
      "right" : "private static final String NEXT_AFTER_TRAP = \"nextAfter\";",
      "info" : "FieldDeclaration[6208-6316]:FieldDeclaration[6208-6316]"
    }, {
      "left" : "private static final String LESS_THAN_TRAP = \"lessThan\";",
      "right" : "private static final String LESS_THAN_TRAP = \"lessThan\";",
      "info" : "FieldDeclaration[6322-6427]:FieldDeclaration[6322-6427]"
    }, {
      "left" : "private static final String GREATER_THAN_TRAP = \"greaterThan\";",
      "right" : "private static final String GREATER_THAN_TRAP = \"greaterThan\";",
      "info" : "FieldDeclaration[6433-6547]:FieldDeclaration[6433-6547]"
    }, {
      "left" : "private static final String NEW_INSTANCE_TRAP = \"newInstance\";",
      "right" : "private static final String NEW_INSTANCE_TRAP = \"newInstance\";",
      "info" : "FieldDeclaration[6553-6667]:FieldDeclaration[6553-6667]"
    }, {
      "left" : "protected int[] mant;",
      "right" : "protected int[] mant;",
      "info" : "FieldDeclaration[6673-6715]:FieldDeclaration[6673-6715]"
    }, {
      "left" : "protected byte sign;",
      "right" : "protected byte sign;",
      "info" : "FieldDeclaration[6721-6795]:FieldDeclaration[6721-6795]"
    }, {
      "left" : "protected int exp;",
      "right" : "protected int exp;",
      "info" : "FieldDeclaration[6801-6840]:FieldDeclaration[6801-6840]"
    }, {
      "left" : "protected byte nans;",
      "right" : "protected byte nans;",
      "info" : "FieldDeclaration[6846-6923]:FieldDeclaration[6846-6923]"
    }, {
      "left" : "private final DfpField field;",
      "right" : "private final DfpField field;",
      "info" : "FieldDeclaration[6929-7001]:FieldDeclaration[6929-7001]"
    }, {
      "left" : "protected Dfp(final DfpField field)",
      "right" : "protected Dfp(final DfpField field)",
      "info" : "MethodDeclaration[7007-7297]:MethodDeclaration[7007-7297]"
    }, {
      "left" : "protected Dfp(final DfpField field, byte x)",
      "right" : "protected Dfp(final DfpField field, byte x)",
      "info" : "MethodDeclaration[7303-7544]:MethodDeclaration[7303-7544]"
    }, {
      "left" : "protected Dfp(final DfpField field, int x)",
      "right" : "protected Dfp(final DfpField field, int x)",
      "info" : "MethodDeclaration[7550-7790]:MethodDeclaration[7550-7790]"
    }, {
      "left" : "protected Dfp(final DfpField field, long x)",
      "right" : "protected Dfp(final DfpField field, long x)",
      "info" : "MethodDeclaration[7796-9129]:MethodDeclaration[7796-9129]"
    }, {
      "left" : "protected Dfp(final DfpField field, double x)",
      "right" : "protected Dfp(final DfpField field, double x)",
      "info" : "MethodDeclaration[9135-11087]:MethodDeclaration[9135-11087]"
    }, {
      "left" : "public Dfp(final Dfp d)",
      "right" : "public Dfp(final Dfp d)",
      "info" : "MethodDeclaration[11093-11319]:MethodDeclaration[11093-11319]"
    }, {
      "left" : "protected Dfp(final DfpField field, final String s)",
      "right" : "protected Dfp(final DfpField field, final String s)",
      "info" : "MethodDeclaration[11325-16993]:MethodDeclaration[11325-16993]"
    }, {
      "left" : "protected Dfp(final DfpField field, final byte sign, final byte nans)",
      "right" : "protected Dfp(final DfpField field, final byte sign, final byte nans)",
      "info" : "MethodDeclaration[16999-17516]:MethodDeclaration[16999-17516]"
    }, {
      "left" : "public Dfp newInstance()",
      "right" : "public Dfp newInstance()",
      "info" : "MethodDeclaration[17522-17774]:MethodDeclaration[17522-17774]"
    }, {
      "left" : "public Dfp newInstance(final byte x)",
      "right" : "public Dfp newInstance(final byte x)",
      "info" : "MethodDeclaration[17780-18008]:MethodDeclaration[17780-18008]"
    }, {
      "left" : "public Dfp newInstance(final int x)",
      "right" : "public Dfp newInstance(final int x)",
      "info" : "MethodDeclaration[18014-18241]:MethodDeclaration[18014-18241]"
    }, {
      "left" : "public Dfp newInstance(final long x)",
      "right" : "public Dfp newInstance(final long x)",
      "info" : "MethodDeclaration[18247-18475]:MethodDeclaration[18247-18475]"
    }, {
      "left" : "public Dfp newInstance(final double x)",
      "right" : "public Dfp newInstance(final double x)",
      "info" : "MethodDeclaration[18481-18713]:MethodDeclaration[18481-18713]"
    }, {
      "left" : "public Dfp newInstance(final Dfp d)",
      "right" : "public Dfp newInstance(final Dfp d)",
      "info" : "MethodDeclaration[18719-19394]:MethodDeclaration[18719-19394]"
    }, {
      "left" : "public Dfp newInstance(final String s)",
      "right" : "public Dfp newInstance(final String s)",
      "info" : "MethodDeclaration[19400-19741]:MethodDeclaration[19400-19741]"
    }, {
      "left" : "public Dfp newInstance(final byte sig, final byte code)",
      "right" : "public Dfp newInstance(final byte sig, final byte code)",
      "info" : "MethodDeclaration[19747-20118]:MethodDeclaration[19747-20118]"
    }, {
      "left" : "public DfpField getField()",
      "right" : "public DfpField getField()",
      "info" : "MethodDeclaration[20124-20556]:MethodDeclaration[20124-20556]"
    }, {
      "left" : "public int getRadixDigits()",
      "right" : "public int getRadixDigits()",
      "info" : "MethodDeclaration[20562-20738]:MethodDeclaration[20562-20738]"
    }, {
      "left" : "public Dfp getZero()",
      "right" : "public Dfp getZero()",
      "info" : "MethodDeclaration[20744-20877]:MethodDeclaration[20744-20877]"
    }, {
      "left" : "public Dfp getOne()",
      "right" : "public Dfp getOne()",
      "info" : "MethodDeclaration[20883-21013]:MethodDeclaration[20883-21013]"
    }, {
      "left" : "public Dfp getTwo()",
      "right" : "public Dfp getTwo()",
      "info" : "MethodDeclaration[21019-21149]:MethodDeclaration[21019-21149]"
    }, {
      "left" : "protected void shiftLeft()",
      "right" : "protected void shiftLeft()",
      "info" : "MethodDeclaration[21155-21400]:MethodDeclaration[21155-21400]"
    }, {
      "left" : "protected void shiftRight()",
      "right" : "protected void shiftRight()",
      "info" : "MethodDeclaration[21507-21768]:MethodDeclaration[21507-21768]"
    }, {
      "left" : "protected int align(int e)",
      "right" : "protected int align(int e)",
      "info" : "MethodDeclaration[21774-23457]:MethodDeclaration[21774-23457]"
    }, {
      "left" : "public boolean lessThan(final Dfp x)",
      "right" : "public boolean lessThan(final Dfp x)",
      "info" : "MethodDeclaration[23463-24399]:MethodDeclaration[23463-24399]"
    }, {
      "left" : "public boolean greaterThan(final Dfp x)",
      "right" : "public boolean greaterThan(final Dfp x)",
      "info" : "MethodDeclaration[24405-25356]:MethodDeclaration[24405-25356]"
    }, {
      "left" : "public boolean negativeOrNull()",
      "right" : "public boolean negativeOrNull()",
      "info" : "MethodDeclaration[25362-25839]:MethodDeclaration[25362-25839]"
    }, {
      "left" : "public boolean strictlyNegative()",
      "right" : "public boolean strictlyNegative()",
      "info" : "MethodDeclaration[25845-26320]:MethodDeclaration[25845-26320]"
    }, {
      "left" : "public boolean positiveOrNull()",
      "right" : "public boolean positiveOrNull()",
      "info" : "MethodDeclaration[26326-26809]:MethodDeclaration[26326-26809]"
    }, {
      "left" : "public boolean strictlyPositive()",
      "right" : "public boolean strictlyPositive()",
      "info" : "MethodDeclaration[26815-27296]:MethodDeclaration[26815-27296]"
    }, {
      "left" : "public Dfp abs()",
      "right" : "public Dfp abs()",
      "info" : "MethodDeclaration[27302-27508]:MethodDeclaration[27302-27508]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[27514-27673]:MethodDeclaration[27514-27673]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[27679-27857]:MethodDeclaration[27679-27857]"
    }, {
      "left" : "public boolean isZero()",
      "right" : "public boolean isZero()",
      "info" : "MethodDeclaration[27863-28267]:MethodDeclaration[27863-28267]"
    }, {
      "left" : "public boolean equals(final Object other)",
      "right" : "public boolean equals(final Object other)",
      "info" : "MethodDeclaration[28273-28812]:MethodDeclaration[28273-28812]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[28818-29045]:MethodDeclaration[28818-29045]"
    }, {
      "left" : "public boolean unequal(final Dfp x)",
      "right" : "public boolean unequal(final Dfp x)",
      "info" : "MethodDeclaration[29051-29456]:MethodDeclaration[29051-29456]"
    }, {
      "left" : "private static int compare(final Dfp a, final Dfp b)",
      "right" : "private static int compare(final Dfp a, final Dfp b)",
      "info" : "MethodDeclaration[29462-31081]:MethodDeclaration[29462-31081]"
    }, {
      "left" : "public Dfp rint()",
      "right" : "public Dfp rint()",
      "info" : "MethodDeclaration[31087-31393]:MethodDeclaration[31087-31393]"
    }, {
      "left" : "public Dfp floor()",
      "right" : "public Dfp floor()",
      "info" : "MethodDeclaration[31399-31615]:MethodDeclaration[31399-31615]"
    }, {
      "left" : "public Dfp ceil()",
      "right" : "public Dfp ceil()",
      "info" : "MethodDeclaration[31621-31834]:MethodDeclaration[31621-31834]"
    }, {
      "left" : "public Dfp remainder(final Dfp d)",
      "right" : "public Dfp remainder(final Dfp d)",
      "info" : "MethodDeclaration[31840-32312]:MethodDeclaration[31840-32312]"
    }, {
      "left" : "protected Dfp trunc(final DfpField.RoundingMode rmode)",
      "right" : "protected Dfp trunc(final DfpField.RoundingMode rmode)",
      "info" : "MethodDeclaration[32318-35395]:MethodDeclaration[32318-35395]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[35401-36130]:MethodDeclaration[35401-36130]"
    }, {
      "left" : "public int log10K()",
      "right" : "public int log10K()",
      "info" : "MethodDeclaration[36136-36431]:MethodDeclaration[36136-36431]"
    }, {
      "left" : "public Dfp power10K(final int e)",
      "right" : "public Dfp power10K(final int e)",
      "info" : "MethodDeclaration[36437-36671]:MethodDeclaration[36437-36671]"
    }, {
      "left" : "public int log10()",
      "right" : "public int log10()",
      "info" : "MethodDeclaration[36677-37125]:MethodDeclaration[36677-37125]"
    }, {
      "left" : "public Dfp power10(final int e)",
      "right" : "public Dfp power10(final int e)",
      "info" : "MethodDeclaration[37131-37760]:MethodDeclaration[37131-37760]"
    }, {
      "left" : "protected int complement(int extra)",
      "right" : "protected int complement(int extra)",
      "info" : "MethodDeclaration[37766-38429]:MethodDeclaration[37766-38429]"
    }, {
      "left" : "public Dfp add(final Dfp x)",
      "right" : "public Dfp add(final Dfp x)",
      "info" : "MethodDeclaration[38435-43023]:MethodDeclaration[38435-43023]"
    }, {
      "left" : "public Dfp negate()",
      "right" : "public Dfp negate()",
      "info" : "MethodDeclaration[43029-43280]:MethodDeclaration[43029-43280]"
    }, {
      "left" : "public Dfp subtract(final Dfp x)",
      "right" : "public Dfp subtract(final Dfp x)",
      "info" : "MethodDeclaration[43286-43471]:MethodDeclaration[43286-43471]"
    }, {
      "left" : "protected int round(int n)",
      "right" : "protected int round(int n)",
      "info" : "MethodDeclaration[43477-45675]:MethodDeclaration[43477-45675]"
    }, {
      "left" : "public Dfp multiply(final Dfp x)",
      "right" : "public Dfp multiply(final Dfp x)",
      "info" : "MethodDeclaration[45681-49189]:MethodDeclaration[45681-49189]"
    }, {
      "left" : "public Dfp multiply(final int x)",
      "right" : "public Dfp multiply(final int x)",
      "info" : "MethodDeclaration[49195-49388]:MethodDeclaration[49195-49495]"
    }, {
      "left" : "private Dfp multiplyFast(final int x)",
      "right" : "private Dfp multiplyFast(final int x)",
      "info" : "MethodDeclaration[49394-51287]:MethodDeclaration[49501-51394]"
    }, {
      "left" : "public Dfp divide(Dfp divisor)",
      "right" : "public Dfp divide(Dfp divisor)",
      "info" : "MethodDeclaration[51293-58841]:MethodDeclaration[51400-58948]"
    }, {
      "left" : "public Dfp divide(int divisor)",
      "right" : "public Dfp divide(int divisor)",
      "info" : "MethodDeclaration[58847-60830]:MethodDeclaration[58954-60937]"
    }, {
      "left" : "public Dfp reciprocal()",
      "right" : "public Dfp reciprocal()",
      "info" : "MethodDeclaration[60836-60936]:MethodDeclaration[60943-61043]"
    }, {
      "left" : "public Dfp sqrt()",
      "right" : "public Dfp sqrt()",
      "info" : "MethodDeclaration[60942-63575]:MethodDeclaration[61049-63682]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[63581-64130]:MethodDeclaration[63688-64237]"
    }, {
      "left" : "protected String dfp2sci()",
      "right" : "protected String dfp2sci()",
      "info" : "MethodDeclaration[64136-66302]:MethodDeclaration[64243-66409]"
    }, {
      "left" : "protected String dfp2string()",
      "right" : "protected String dfp2string()",
      "info" : "MethodDeclaration[66308-68093]:MethodDeclaration[66415-68200]"
    }, {
      "left" : "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)",
      "right" : "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)",
      "info" : "MethodDeclaration[68099-70360]:MethodDeclaration[68206-70467]"
    }, {
      "left" : "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)",
      "right" : "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)",
      "info" : "MethodDeclaration[70366-71044]:MethodDeclaration[70473-71151]"
    }, {
      "left" : "public int classify()",
      "right" : "public int classify()",
      "info" : "MethodDeclaration[71050-71206]:MethodDeclaration[71157-71313]"
    }, {
      "left" : "public static Dfp copysign(final Dfp x, final Dfp y)",
      "right" : "public static Dfp copysign(final Dfp x, final Dfp y)",
      "info" : "MethodDeclaration[71212-71648]:MethodDeclaration[71319-71755]"
    }, {
      "left" : "public Dfp nextAfter(final Dfp x)",
      "right" : "public Dfp nextAfter(final Dfp x)",
      "info" : "MethodDeclaration[71654-73830]:MethodDeclaration[71761-73937]"
    }, {
      "left" : "public double toDouble()",
      "right" : "public double toDouble()",
      "info" : "MethodDeclaration[73836-76169]:MethodDeclaration[73943-76276]"
    }, {
      "left" : "public double[] toSplitDouble()",
      "right" : "public double[] toSplitDouble()",
      "info" : "MethodDeclaration[76175-76624]:MethodDeclaration[76282-76731]"
    } ],
    "mappings" : [
 {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7120-7129]:Modifier[7120-7129]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7130-7133]:SimpleName[7130-7133]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7134-7154]:SingleVariableDeclaration[7134-7154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7156-7297]:Block[7156-7297]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[7166-7205]:ExpressionStatement[7166-7205]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[7214-7223]:ExpressionStatement[7214-7223]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[7232-7240]:ExpressionStatement[7232-7240]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[7249-7263]:ExpressionStatement[7249-7263]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[7272-7291]:ExpressionStatement[7272-7291]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7462-7471]:Modifier[7462-7471]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7472-7475]:SimpleName[7472-7475]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7476-7496]:SingleVariableDeclaration[7476-7496]"
    }, {
      "left" : "byte x",
      "right" : "byte x",
      "info" : "SingleVariableDeclaration[7498-7504]:SingleVariableDeclaration[7498-7504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7506-7544]:Block[7506-7544]"
    }, {
      "left" : "this(field, (long) x);",
      "right" : "this(field, (long) x);",
      "info" : "ConstructorInvocation[7516-7538]:ConstructorInvocation[7516-7538]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7709-7718]:Modifier[7709-7718]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7719-7722]:SimpleName[7719-7722]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7723-7743]:SingleVariableDeclaration[7723-7743]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[7745-7750]:SingleVariableDeclaration[7745-7750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7752-7790]:Block[7752-7790]"
    }, {
      "left" : "this(field, (long) x);",
      "right" : "this(field, (long) x);",
      "info" : "ConstructorInvocation[7762-7784]:ConstructorInvocation[7762-7784]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7955-7964]:Modifier[7955-7964]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7965-7968]:SimpleName[7965-7968]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7969-7989]:SingleVariableDeclaration[7969-7989]"
    }, {
      "left" : "long x",
      "right" : "long x",
      "info" : "SingleVariableDeclaration[7991-7997]:SingleVariableDeclaration[7991-7997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7999-9129]:Block[7999-9129]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[8040-8079]:ExpressionStatement[8040-8079]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[8088-8102]:ExpressionStatement[8088-8102]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[8111-8130]:ExpressionStatement[8111-8130]"
    }, {
      "left" : "boolean isLongMin = false;",
      "right" : "boolean isLongMin = false;",
      "info" : "VariableDeclarationStatement[8140-8166]:VariableDeclarationStatement[8140-8166]"
    }, {
      "left" : "if (x == Long.MIN_VALUE)",
      "right" : "if (x == Long.MIN_VALUE)",
      "info" : "IfStatement[8175-8393]:IfStatement[8175-8393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8200-8393]:Block[8200-8393]"
    }, {
      "left" : "isLongMin = true;",
      "right" : "isLongMin = true;",
      "info" : "ExpressionStatement[8349-8366]:ExpressionStatement[8349-8366]"
    }, {
      "left" : "++x;",
      "right" : "++x;",
      "info" : "ExpressionStatement[8379-8383]:ExpressionStatement[8379-8383]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[8427-8531]:IfStatement[8427-8531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8438-8492]:Block[8438-8492]"
    }, {
      "left" : "sign = -1;",
      "right" : "sign = -1;",
      "info" : "ExpressionStatement[8452-8462]:ExpressionStatement[8452-8462]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[8475-8482]:ExpressionStatement[8475-8482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8498-8531]:Block[8498-8531]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[8512-8521]:ExpressionStatement[8512-8521]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[8541-8549]:ExpressionStatement[8541-8549]"
    }, {
      "left" : "while (x != 0)",
      "right" : "while (x != 0)",
      "info" : "WhileStatement[8558-8771]:WhileStatement[8558-8771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8573-8771]:Block[8573-8771]"
    }, {
      "left" : "System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",
      "right" : "System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",
      "info" : "ExpressionStatement[8587-8663]:ExpressionStatement[8587-8663]"
    }, {
      "left" : "mant[mant.length - 1] = (int) (x % RADIX);",
      "right" : "mant[mant.length - 1] = (int) (x % RADIX);",
      "info" : "ExpressionStatement[8676-8718]:ExpressionStatement[8676-8718]"
    }, {
      "left" : "x /= RADIX;",
      "right" : "x /= RADIX;",
      "info" : "ExpressionStatement[8731-8742]:ExpressionStatement[8731-8742]"
    }, {
      "left" : "exp++;",
      "right" : "exp++;",
      "info" : "ExpressionStatement[8755-8761]:ExpressionStatement[8755-8761]"
    }, {
      "left" : "if (isLongMin)",
      "right" : "if (isLongMin)",
      "info" : "IfStatement[8781-9123]:IfStatement[8781-9123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8796-9123]:Block[8796-9123]"
    }, {
      "left" : "for (int i = 0; i < mant.length - 1; i++)",
      "right" : "for (int i = 0; i < mant.length - 1; i++)",
      "info" : "ForStatement[8944-9113]:ForStatement[8944-9113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8986-9113]:Block[8986-9113]"
    }, {
      "left" : "if (mant[i] != 0)",
      "right" : "if (mant[i] != 0)",
      "info" : "IfStatement[9004-9099]:IfStatement[9004-9099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9022-9099]:Block[9022-9099]"
    }, {
      "left" : "mant[i]++;",
      "right" : "mant[i]++;",
      "info" : "ExpressionStatement[9044-9054]:ExpressionStatement[9044-9054]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9075-9081]:BreakStatement[9075-9081]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9296-9305]:Modifier[9296-9305]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[9306-9309]:SimpleName[9306-9309]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[9310-9330]:SingleVariableDeclaration[9310-9330]"
    }, {
      "left" : "double x",
      "right" : "double x",
      "info" : "SingleVariableDeclaration[9332-9340]:SingleVariableDeclaration[9332-9340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9342-11087]:Block[9342-11087]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[9383-9422]:ExpressionStatement[9383-9422]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[9431-9440]:ExpressionStatement[9431-9440]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[9449-9457]:ExpressionStatement[9449-9457]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[9466-9480]:ExpressionStatement[9466-9480]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[9489-9508]:ExpressionStatement[9489-9508]"
    }, {
      "left" : "long bits = Double.doubleToLongBits(x);",
      "right" : "long bits = Double.doubleToLongBits(x);",
      "info" : "VariableDeclarationStatement[9518-9557]:VariableDeclarationStatement[9518-9557]"
    }, {
      "left" : "long mantissa = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[9566-9609]:VariableDeclarationStatement[9566-9609]"
    }, {
      "left" : "int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;",
      "right" : "int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;",
      "info" : "VariableDeclarationStatement[9618-9683]:VariableDeclarationStatement[9618-9683]"
    }, {
      "left" : "if (exponent == -1023)",
      "right" : "if (exponent == -1023)",
      "info" : "IfStatement[9693-10233]:IfStatement[9693-10233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9716-10233]:Block[9716-10233]"
    }, {
      "left" : "if (x == 0)",
      "right" : "if (x == 0)",
      "info" : "IfStatement[9764-9971]:IfStatement[9764-9971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9776-9971]:Block[9776-9971]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0)",
      "right" : "if ((bits & 0x8000000000000000L) != 0)",
      "info" : "IfStatement[9844-9933]:IfStatement[9844-9933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9883-9933]:Block[9883-9933]"
    }, {
      "left" : "sign = -1;",
      "right" : "sign = -1;",
      "info" : "ExpressionStatement[9905-9915]:ExpressionStatement[9905-9915]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9950-9957]:ReturnStatement[9950-9957]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[9985-9996]:ExpressionStatement[9985-9996]"
    }, {
      "left" : "while ( (mantissa & 0x0010000000000000L) == 0)",
      "right" : "while ( (mantissa & 0x0010000000000000L) == 0)",
      "info" : "WhileStatement[10056-10178]:WhileStatement[10056-10178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10103-10178]:Block[10103-10178]"
    }, {
      "left" : "exponent--;",
      "right" : "exponent--;",
      "info" : "ExpressionStatement[10121-10132]:ExpressionStatement[10121-10132]"
    }, {
      "left" : "mantissa <<= 1;",
      "right" : "mantissa <<= 1;",
      "info" : "ExpressionStatement[10149-10164]:ExpressionStatement[10149-10164]"
    }, {
      "left" : "mantissa &= 0x000fffffffffffffL;",
      "right" : "mantissa &= 0x000fffffffffffffL;",
      "info" : "ExpressionStatement[10191-10223]:ExpressionStatement[10191-10223]"
    }, {
      "left" : "if (exponent == 1024)",
      "right" : "if (exponent == 1024)",
      "info" : "IfStatement[10243-10615]:IfStatement[10243-10615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10265-10615]:Block[10265-10615]"
    }, {
      "left" : "if (x != x)",
      "right" : "if (x != x)",
      "info" : "IfStatement[10310-10585]:IfStatement[10310-10585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10322-10399]:Block[10322-10399]"
    }, {
      "left" : "sign = (byte) 1;",
      "right" : "sign = (byte) 1;",
      "info" : "ExpressionStatement[10340-10356]:ExpressionStatement[10340-10356]"
    }, {
      "left" : "nans = QNAN;",
      "right" : "nans = QNAN;",
      "info" : "ExpressionStatement[10373-10385]:ExpressionStatement[10373-10385]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[10405-10585]:IfStatement[10405-10585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10416-10498]:Block[10416-10498]"
    }, {
      "left" : "sign = (byte) -1;",
      "right" : "sign = (byte) -1;",
      "info" : "ExpressionStatement[10434-10451]:ExpressionStatement[10434-10451]"
    }, {
      "left" : "nans = INFINITE;",
      "right" : "nans = INFINITE;",
      "info" : "ExpressionStatement[10468-10484]:ExpressionStatement[10468-10484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10504-10585]:Block[10504-10585]"
    }, {
      "left" : "sign = (byte) 1;",
      "right" : "sign = (byte) 1;",
      "info" : "ExpressionStatement[10522-10538]:ExpressionStatement[10522-10538]"
    }, {
      "left" : "nans = INFINITE;",
      "right" : "nans = INFINITE;",
      "info" : "ExpressionStatement[10555-10571]:ExpressionStatement[10555-10571]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10598-10605]:ReturnStatement[10598-10605]"
    }, {
      "left" : "Dfp xdfp = new Dfp(field, mantissa);",
      "right" : "Dfp xdfp = new Dfp(field, mantissa);",
      "info" : "VariableDeclarationStatement[10625-10661]:VariableDeclarationStatement[10625-10661]"
    }, {
      "left" : "xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());",
      "right" : "xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());",
      "info" : "ExpressionStatement[10670-10744]:ExpressionStatement[10670-10744]"
    }, {
      "left" : "xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",
      "right" : "xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",
      "info" : "ExpressionStatement[10786-10846]:ExpressionStatement[10786-10846]"
    }, {
      "left" : "if ((bits & 0x8000000000000000L) != 0)",
      "right" : "if ((bits & 0x8000000000000000L) != 0)",
      "info" : "IfStatement[10856-10940]:IfStatement[10856-10940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10895-10940]:Block[10895-10940]"
    }, {
      "left" : "xdfp = xdfp.negate();",
      "right" : "xdfp = xdfp.negate();",
      "info" : "ExpressionStatement[10909-10930]:ExpressionStatement[10909-10930]"
    }, {
      "left" : "System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",
      "right" : "System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",
      "info" : "ExpressionStatement[10950-11003]:ExpressionStatement[10950-11003]"
    }, {
      "left" : "sign = xdfp.sign;",
      "right" : "sign = xdfp.sign;",
      "info" : "ExpressionStatement[11012-11029]:ExpressionStatement[11012-11029]"
    }, {
      "left" : "exp  = xdfp.exp;",
      "right" : "exp  = xdfp.exp;",
      "info" : "ExpressionStatement[11038-11054]:ExpressionStatement[11038-11054]"
    }, {
      "left" : "nans = xdfp.nans;",
      "right" : "nans = xdfp.nans;",
      "info" : "ExpressionStatement[11063-11080]:ExpressionStatement[11063-11080]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11160-11166]:Modifier[11160-11166]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[11167-11170]:SimpleName[11167-11170]"
    }, {
      "left" : "final Dfp d",
      "right" : "final Dfp d",
      "info" : "SingleVariableDeclaration[11171-11182]:SingleVariableDeclaration[11171-11182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11184-11319]:Block[11184-11319]"
    }, {
      "left" : "mant  = d.mant.clone();",
      "right" : "mant  = d.mant.clone();",
      "info" : "ExpressionStatement[11194-11217]:ExpressionStatement[11194-11217]"
    }, {
      "left" : "sign  = d.sign;",
      "right" : "sign  = d.sign;",
      "info" : "ExpressionStatement[11226-11241]:ExpressionStatement[11226-11241]"
    }, {
      "left" : "exp   = d.exp;",
      "right" : "exp   = d.exp;",
      "info" : "ExpressionStatement[11250-11264]:ExpressionStatement[11250-11264]"
    }, {
      "left" : "nans  = d.nans;",
      "right" : "nans  = d.nans;",
      "info" : "ExpressionStatement[11273-11288]:ExpressionStatement[11273-11288]"
    }, {
      "left" : "field = d.field;",
      "right" : "field = d.field;",
      "info" : "ExpressionStatement[11297-11313]:ExpressionStatement[11297-11313]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11501-11510]:Modifier[11501-11510]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[11511-11514]:SimpleName[11511-11514]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[11515-11535]:SingleVariableDeclaration[11515-11535]"
    }, {
      "left" : "final String s",
      "right" : "final String s",
      "info" : "SingleVariableDeclaration[11537-11551]:SingleVariableDeclaration[11537-11551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11553-16993]:Block[11553-16993]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[11594-11633]:ExpressionStatement[11594-11633]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[11642-11651]:ExpressionStatement[11642-11651]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[11660-11668]:ExpressionStatement[11660-11668]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[11677-11691]:ExpressionStatement[11677-11691]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[11700-11719]:ExpressionStatement[11700-11719]"
    }, {
      "left" : "boolean decimalFound = false;",
      "right" : "boolean decimalFound = false;",
      "info" : "VariableDeclarationStatement[11729-11758]:VariableDeclarationStatement[11729-11758]"
    }, {
      "left" : "final int rsize = 4;",
      "right" : "final int rsize = 4;",
      "info" : "VariableDeclarationStatement[11767-11787]:VariableDeclarationStatement[11767-11787]"
    }, {
      "left" : "final int offset = 4;",
      "right" : "final int offset = 4;",
      "info" : "VariableDeclarationStatement[11833-11854]:VariableDeclarationStatement[11833-11854]"
    }, {
      "left" : "final char[] striped = new char[getRadixDigits() * rsize + offset * 2];",
      "right" : "final char[] striped = new char[getRadixDigits() * rsize + offset * 2];",
      "info" : "VariableDeclarationStatement[11896-11967]:VariableDeclarationStatement[11896-11967]"
    }, {
      "left" : "if (s.equals(POS_INFINITY_STRING))",
      "right" : "if (s.equals(POS_INFINITY_STRING))",
      "info" : "IfStatement[12013-12137]:IfStatement[12013-12137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12048-12137]:Block[12048-12137]"
    }, {
      "left" : "sign = (byte) 1;",
      "right" : "sign = (byte) 1;",
      "info" : "ExpressionStatement[12062-12078]:ExpressionStatement[12062-12078]"
    }, {
      "left" : "nans = INFINITE;",
      "right" : "nans = INFINITE;",
      "info" : "ExpressionStatement[12091-12107]:ExpressionStatement[12091-12107]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12120-12127]:ReturnStatement[12120-12127]"
    }, {
      "left" : "if (s.equals(NEG_INFINITY_STRING))",
      "right" : "if (s.equals(NEG_INFINITY_STRING))",
      "info" : "IfStatement[12147-12272]:IfStatement[12147-12272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12182-12272]:Block[12182-12272]"
    }, {
      "left" : "sign = (byte) -1;",
      "right" : "sign = (byte) -1;",
      "info" : "ExpressionStatement[12196-12213]:ExpressionStatement[12196-12213]"
    }, {
      "left" : "nans = INFINITE;",
      "right" : "nans = INFINITE;",
      "info" : "ExpressionStatement[12226-12242]:ExpressionStatement[12226-12242]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12255-12262]:ReturnStatement[12255-12262]"
    }, {
      "left" : "if (s.equals(NAN_STRING))",
      "right" : "if (s.equals(NAN_STRING))",
      "info" : "IfStatement[12282-12393]:IfStatement[12282-12393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12308-12393]:Block[12308-12393]"
    }, {
      "left" : "sign = (byte) 1;",
      "right" : "sign = (byte) 1;",
      "info" : "ExpressionStatement[12322-12338]:ExpressionStatement[12322-12338]"
    }, {
      "left" : "nans = QNAN;",
      "right" : "nans = QNAN;",
      "info" : "ExpressionStatement[12351-12363]:ExpressionStatement[12351-12363]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12376-12383]:ReturnStatement[12376-12383]"
    }, {
      "left" : "int p = s.indexOf(\"e\");",
      "right" : "int p = s.indexOf(\"e\");",
      "info" : "VariableDeclarationStatement[12444-12467]:VariableDeclarationStatement[12444-12467]"
    }, {
      "left" : "if (p == -1)",
      "right" : "if (p == -1)",
      "info" : "IfStatement[12476-12551]:IfStatement[12476-12551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12489-12551]:Block[12489-12551]"
    }, {
      "left" : "p = s.indexOf(\"E\");",
      "right" : "p = s.indexOf(\"E\");",
      "info" : "ExpressionStatement[12522-12541]:ExpressionStatement[12522-12541]"
    }, {
      "left" : "final String fpdecimal;",
      "right" : "final String fpdecimal;",
      "info" : "VariableDeclarationStatement[12561-12584]:VariableDeclarationStatement[12561-12584]"
    }, {
      "left" : "int sciexp = 0;",
      "right" : "int sciexp = 0;",
      "info" : "VariableDeclarationStatement[12593-12608]:VariableDeclarationStatement[12593-12608]"
    }, {
      "left" : "if (p != -1)",
      "right" : "if (p != -1)",
      "info" : "IfStatement[12617-13331]:IfStatement[12617-13331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12630-13260]:Block[12630-13260]"
    }, {
      "left" : "fpdecimal = s.substring(0, p);",
      "right" : "fpdecimal = s.substring(0, p);",
      "info" : "ExpressionStatement[12679-12709]:ExpressionStatement[12679-12709]"
    }, {
      "left" : "String fpexp = s.substring(p+1);",
      "right" : "String fpexp = s.substring(p+1);",
      "info" : "VariableDeclarationStatement[12722-12754]:VariableDeclarationStatement[12722-12754]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[12767-12792]:VariableDeclarationStatement[12767-12792]"
    }, {
      "left" : "for (int i=0; i<fpexp.length(); i++)",
      "right" : "for (int i=0; i<fpexp.length(); i++)",
      "info" : "ForStatement[12806-13173]:ForStatement[12806-13173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12855-13173]:Block[12855-13173]"
    }, {
      "left" : "if (fpexp.charAt(i) == '-')",
      "right" : "if (fpexp.charAt(i) == '-')",
      "info" : "IfStatement[12873-13003]:IfStatement[12873-13003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12917-13003]:Block[12917-13003]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[12939-12955]:ExpressionStatement[12939-12955]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12976-12985]:ContinueStatement[12976-12985]"
    }, {
      "left" : "if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')",
      "right" : "if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')",
      "info" : "IfStatement[13020-13159]:IfStatement[13020-13159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13074-13159]:Block[13074-13159]"
    }, {
      "left" : "sciexp = sciexp * 10 + fpexp.charAt(i) - '0';",
      "right" : "sciexp = sciexp * 10 + fpexp.charAt(i) - '0';",
      "info" : "ExpressionStatement[13096-13141]:ExpressionStatement[13096-13141]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[13187-13250]:IfStatement[13187-13250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13201-13250]:Block[13201-13250]"
    }, {
      "left" : "sciexp = -sciexp;",
      "right" : "sciexp = -sciexp;",
      "info" : "ExpressionStatement[13219-13236]:ExpressionStatement[13219-13236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13266-13331]:Block[13266-13331]"
    }, {
      "left" : "fpdecimal = s;",
      "right" : "fpdecimal = s;",
      "info" : "ExpressionStatement[13307-13321]:ExpressionStatement[13307-13321]"
    }, {
      "left" : "if (fpdecimal.indexOf(\"-\") !=  -1)",
      "right" : "if (fpdecimal.indexOf(\"-\") !=  -1)",
      "info" : "IfStatement[13411-13480]:IfStatement[13411-13480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13446-13480]:Block[13446-13480]"
    }, {
      "left" : "sign = -1;",
      "right" : "sign = -1;",
      "info" : "ExpressionStatement[13460-13470]:ExpressionStatement[13460-13470]"
    }, {
      "left" : "p = 0;",
      "right" : "p = 0;",
      "info" : "ExpressionStatement[13582-13588]:ExpressionStatement[13582-13588]"
    }, {
      "left" : "int decimalPos = 0;",
      "right" : "int decimalPos = 0;",
      "info" : "VariableDeclarationStatement[13643-13662]:VariableDeclarationStatement[13643-13662]"
    }, {
      "left" : "for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        })",
      "right" : "for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        })",
      "info" : "ForStatement[13671-14108]:ForStatement[13671-14108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13680-14108]:Block[13680-14108]"
    }, {
      "left" : "if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9')",
      "right" : "if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9')",
      "info" : "IfStatement[13694-13794]:IfStatement[13694-13794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13756-13794]:Block[13756-13794]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13774-13780]:BreakStatement[13774-13780]"
    }, {
      "left" : "if (decimalFound && fpdecimal.charAt(p) == '0')",
      "right" : "if (decimalFound && fpdecimal.charAt(p) == '0')",
      "info" : "IfStatement[13808-13901]:IfStatement[13808-13901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13856-13901]:Block[13856-13901]"
    }, {
      "left" : "decimalPos--;",
      "right" : "decimalPos--;",
      "info" : "ExpressionStatement[13874-13887]:ExpressionStatement[13874-13887]"
    }, {
      "left" : "if (fpdecimal.charAt(p) == '.')",
      "right" : "if (fpdecimal.charAt(p) == '.')",
      "info" : "IfStatement[13915-13999]:IfStatement[13915-13999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13947-13999]:Block[13947-13999]"
    }, {
      "left" : "decimalFound = true;",
      "right" : "decimalFound = true;",
      "info" : "ExpressionStatement[13965-13985]:ExpressionStatement[13965-13985]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14013-14017]:ExpressionStatement[14013-14017]"
    }, {
      "left" : "if (p == fpdecimal.length())",
      "right" : "if (p == fpdecimal.length())",
      "info" : "IfStatement[14031-14098]:IfStatement[14031-14098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14060-14098]:Block[14060-14098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14078-14084]:BreakStatement[14078-14084]"
    }, {
      "left" : "int q = offset;",
      "right" : "int q = offset;",
      "info" : "VariableDeclarationStatement[14159-14174]:VariableDeclarationStatement[14159-14174]"
    }, {
      "left" : "striped[0] = '0';",
      "right" : "striped[0] = '0';",
      "info" : "ExpressionStatement[14183-14200]:ExpressionStatement[14183-14200]"
    }, {
      "left" : "striped[1] = '0';",
      "right" : "striped[1] = '0';",
      "info" : "ExpressionStatement[14209-14226]:ExpressionStatement[14209-14226]"
    }, {
      "left" : "striped[2] = '0';",
      "right" : "striped[2] = '0';",
      "info" : "ExpressionStatement[14235-14252]:ExpressionStatement[14235-14252]"
    }, {
      "left" : "striped[3] = '0';",
      "right" : "striped[3] = '0';",
      "info" : "ExpressionStatement[14261-14278]:ExpressionStatement[14261-14278]"
    }, {
      "left" : "int significantDigits=0;",
      "right" : "int significantDigits=0;",
      "info" : "VariableDeclarationStatement[14287-14311]:VariableDeclarationStatement[14287-14311]"
    }, {
      "left" : "for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        })",
      "right" : "for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        })",
      "info" : "ForStatement[14320-15012]:ForStatement[14320-15012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14328-15012]:Block[14328-15012]"
    }, {
      "left" : "if (p == (fpdecimal.length()))",
      "right" : "if (p == (fpdecimal.length()))",
      "info" : "IfStatement[14342-14411]:IfStatement[14342-14411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14373-14411]:Block[14373-14411]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14391-14397]:BreakStatement[14391-14397]"
    }, {
      "left" : "if (q == mant.length*rsize+offset+1)",
      "right" : "if (q == mant.length*rsize+offset+1)",
      "info" : "IfStatement[14484-14559]:IfStatement[14484-14559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14521-14559]:Block[14521-14559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14539-14545]:BreakStatement[14539-14545]"
    }, {
      "left" : "if (fpdecimal.charAt(p) == '.')",
      "right" : "if (fpdecimal.charAt(p) == '.')",
      "info" : "IfStatement[14573-14752]:IfStatement[14573-14752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14605-14752]:Block[14605-14752]"
    }, {
      "left" : "decimalFound = true;",
      "right" : "decimalFound = true;",
      "info" : "ExpressionStatement[14623-14643]:ExpressionStatement[14623-14643]"
    }, {
      "left" : "decimalPos = significantDigits;",
      "right" : "decimalPos = significantDigits;",
      "info" : "ExpressionStatement[14660-14691]:ExpressionStatement[14660-14691]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14708-14712]:ExpressionStatement[14708-14712]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14729-14738]:ContinueStatement[14729-14738]"
    }, {
      "left" : "if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9')",
      "right" : "if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9')",
      "info" : "IfStatement[14766-14888]:IfStatement[14766-14888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14826-14888]:Block[14826-14888]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14844-14848]:ExpressionStatement[14844-14848]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14865-14874]:ContinueStatement[14865-14874]"
    }, {
      "left" : "striped[q] = fpdecimal.charAt(p);",
      "right" : "striped[q] = fpdecimal.charAt(p);",
      "info" : "ExpressionStatement[14902-14935]:ExpressionStatement[14902-14935]"
    }, {
      "left" : "q++;",
      "right" : "q++;",
      "info" : "ExpressionStatement[14948-14952]:ExpressionStatement[14948-14952]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14965-14969]:ExpressionStatement[14965-14969]"
    }, {
      "left" : "significantDigits++;",
      "right" : "significantDigits++;",
      "info" : "ExpressionStatement[14982-15002]:ExpressionStatement[14982-15002]"
    }, {
      "left" : "if (decimalFound && q != offset)",
      "right" : "if (decimalFound && q != offset)",
      "info" : "IfStatement[15102-15436]:IfStatement[15102-15436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15135-15436]:Block[15135-15436]"
    }, {
      "left" : "for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            })",
      "right" : "for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            })",
      "info" : "ForStatement[15149-15426]:ForStatement[15149-15426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15158-15426]:Block[15158-15426]"
    }, {
      "left" : "q--;",
      "right" : "q--;",
      "info" : "ExpressionStatement[15176-15180]:ExpressionStatement[15176-15180]"
    }, {
      "left" : "if (q == offset)",
      "right" : "if (q == offset)",
      "info" : "IfStatement[15197-15260]:IfStatement[15197-15260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15214-15260]:Block[15214-15260]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15236-15242]:BreakStatement[15236-15242]"
    }, {
      "left" : "if (striped[q] == '0')",
      "right" : "if (striped[q] == '0')",
      "info" : "IfStatement[15277-15412]:IfStatement[15277-15412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15300-15360]:Block[15300-15360]"
    }, {
      "left" : "significantDigits--;",
      "right" : "significantDigits--;",
      "info" : "ExpressionStatement[15322-15342]:ExpressionStatement[15322-15342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15366-15412]:Block[15366-15412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15388-15394]:BreakStatement[15388-15394]"
    }, {
      "left" : "if (decimalFound && significantDigits == 0)",
      "right" : "if (decimalFound && significantDigits == 0)",
      "info" : "IfStatement[15496-15579]:IfStatement[15496-15579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15540-15579]:Block[15540-15579]"
    }, {
      "left" : "decimalPos = 0;",
      "right" : "decimalPos = 0;",
      "info" : "ExpressionStatement[15554-15569]:ExpressionStatement[15554-15569]"
    }, {
      "left" : "if (!decimalFound)",
      "right" : "if (!decimalFound)",
      "info" : "IfStatement[15655-15720]:IfStatement[15655-15720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15674-15720]:Block[15674-15720]"
    }, {
      "left" : "decimalPos = q-offset;",
      "right" : "decimalPos = q-offset;",
      "info" : "ExpressionStatement[15688-15710]:ExpressionStatement[15688-15710]"
    }, {
      "left" : "q = offset;",
      "right" : "q = offset;",
      "info" : "ExpressionStatement[15787-15798]:ExpressionStatement[15787-15798]"
    }, {
      "left" : "p = significantDigits-1+offset;",
      "right" : "p = significantDigits-1+offset;",
      "info" : "ExpressionStatement[15845-15876]:ExpressionStatement[15845-15876]"
    }, {
      "left" : "while (p > q)",
      "right" : "while (p > q)",
      "info" : "WhileStatement[15886-16002]:WhileStatement[15886-16002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15900-16002]:Block[15900-16002]"
    }, {
      "left" : "if (striped[p] != '0')",
      "right" : "if (striped[p] != '0')",
      "info" : "IfStatement[15914-15975]:IfStatement[15914-15975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15937-15975]:Block[15937-15975]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15955-15961]:BreakStatement[15955-15961]"
    }, {
      "left" : "p--;",
      "right" : "p--;",
      "info" : "ExpressionStatement[15988-15992]:ExpressionStatement[15988-15992]"
    }, {
      "left" : "int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;",
      "right" : "int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;",
      "info" : "VariableDeclarationStatement[16072-16134]:VariableDeclarationStatement[16072-16134]"
    }, {
      "left" : "q -= i;",
      "right" : "q -= i;",
      "info" : "ExpressionStatement[16143-16150]:ExpressionStatement[16143-16150]"
    }, {
      "left" : "decimalPos += i;",
      "right" : "decimalPos += i;",
      "info" : "ExpressionStatement[16159-16175]:ExpressionStatement[16159-16175]"
    }, {
      "left" : "while ((p - q) < (mant.length * rsize))",
      "right" : "while ((p - q) < (mant.length * rsize))",
      "info" : "WhileStatement[16267-16410]:WhileStatement[16267-16410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16307-16410]:Block[16307-16410]"
    }, {
      "left" : "for (i = 0; i < rsize; i++)",
      "right" : "for (i = 0; i < rsize; i++)",
      "info" : "ForStatement[16321-16400]:ForStatement[16321-16400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16349-16400]:Block[16349-16400]"
    }, {
      "left" : "striped[++p] = '0';",
      "right" : "striped[++p] = '0';",
      "info" : "ExpressionStatement[16367-16386]:ExpressionStatement[16367-16386]"
    }, {
      "left" : "for (i = mant.length - 1; i >= 0; i--)",
      "right" : "for (i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[16534-16804]:ForStatement[16534-16804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16573-16804]:Block[16573-16804]"
    }, {
      "left" : "mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');",
      "right" : "mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');",
      "info" : "ExpressionStatement[16587-16774]:ExpressionStatement[16587-16774]"
    }, {
      "left" : "q += 4;",
      "right" : "q += 4;",
      "info" : "ExpressionStatement[16787-16794]:ExpressionStatement[16787-16794]"
    }, {
      "left" : "exp = (decimalPos+sciexp) / rsize;",
      "right" : "exp = (decimalPos+sciexp) / rsize;",
      "info" : "ExpressionStatement[16815-16849]:ExpressionStatement[16815-16849]"
    }, {
      "left" : "if (q < striped.length)",
      "right" : "if (q < striped.length)",
      "info" : "IfStatement[16859-16986]:IfStatement[16859-16986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16883-16986]:Block[16883-16986]"
    }, {
      "left" : "round((striped[q] - '0')*1000);",
      "right" : "round((striped[q] - '0')*1000);",
      "info" : "ExpressionStatement[16945-16976]:ExpressionStatement[16945-16976]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17271-17280]:Modifier[17271-17280]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[17281-17284]:SimpleName[17281-17284]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[17285-17305]:SingleVariableDeclaration[17285-17305]"
    }, {
      "left" : "final byte sign",
      "right" : "final byte sign",
      "info" : "SingleVariableDeclaration[17307-17322]:SingleVariableDeclaration[17307-17322]"
    }, {
      "left" : "final byte nans",
      "right" : "final byte nans",
      "info" : "SingleVariableDeclaration[17324-17339]:SingleVariableDeclaration[17324-17339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17341-17516]:Block[17341-17516]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[17351-17370]:ExpressionStatement[17351-17370]"
    }, {
      "left" : "this.mant    = new int[field.getRadixDigits()];",
      "right" : "this.mant    = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[17379-17426]:ExpressionStatement[17379-17426]"
    }, {
      "left" : "this.sign    = sign;",
      "right" : "this.sign    = sign;",
      "info" : "ExpressionStatement[17435-17455]:ExpressionStatement[17435-17455]"
    }, {
      "left" : "this.exp     = 0;",
      "right" : "this.exp     = 0;",
      "info" : "ExpressionStatement[17464-17481]:ExpressionStatement[17464-17481]"
    }, {
      "left" : "this.nans    = nans;",
      "right" : "this.nans    = nans;",
      "info" : "ExpressionStatement[17490-17510]:ExpressionStatement[17490-17510]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17706-17712]:Modifier[17706-17712]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[17713-17716]:SimpleType[17713-17716]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[17717-17728]:SimpleName[17717-17728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17731-17774]:Block[17731-17774]"
    }, {
      "left" : "return new Dfp(getField());",
      "right" : "return new Dfp(getField());",
      "info" : "ReturnStatement[17741-17768]:ReturnStatement[17741-17768]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17925-17931]:Modifier[17925-17931]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[17932-17935]:SimpleType[17932-17935]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[17936-17947]:SimpleName[17936-17947]"
    }, {
      "left" : "final byte x",
      "right" : "final byte x",
      "info" : "SingleVariableDeclaration[17948-17960]:SingleVariableDeclaration[17948-17960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17962-18008]:Block[17962-18008]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[17972-18002]:ReturnStatement[17972-18002]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18159-18165]:Modifier[18159-18165]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18166-18169]:SimpleType[18166-18169]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18170-18181]:SimpleName[18170-18181]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[18182-18193]:SingleVariableDeclaration[18182-18193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18195-18241]:Block[18195-18241]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[18205-18235]:ReturnStatement[18205-18235]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18392-18398]:Modifier[18392-18398]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18399-18402]:SimpleType[18399-18402]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18403-18414]:SimpleName[18403-18414]"
    }, {
      "left" : "final long x",
      "right" : "final long x",
      "info" : "SingleVariableDeclaration[18415-18427]:SingleVariableDeclaration[18415-18427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18429-18475]:Block[18429-18475]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[18439-18469]:ReturnStatement[18439-18469]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18628-18634]:Modifier[18628-18634]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18635-18638]:SimpleType[18635-18638]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18639-18650]:SimpleName[18639-18650]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[18651-18665]:SingleVariableDeclaration[18651-18665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18667-18713]:Block[18667-18713]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[18677-18707]:ReturnStatement[18677-18707]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18953-18959]:Modifier[18953-18959]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18960-18963]:SimpleType[18960-18963]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18964-18975]:SimpleName[18964-18975]"
    }, {
      "left" : "final Dfp d",
      "right" : "final Dfp d",
      "info" : "SingleVariableDeclaration[18976-18987]:SingleVariableDeclaration[18976-18987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18989-19394]:Block[18989-19394]"
    }, {
      "left" : "if (field.getRadixDigits() != d.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != d.field.getRadixDigits())",
      "info" : "IfStatement[19066-19359]:IfStatement[19066-19359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19122-19359]:Block[19122-19359]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[19136-19182]:ExpressionStatement[19136-19182]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[19195-19237]:VariableDeclarationStatement[19195-19237]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[19250-19269]:ExpressionStatement[19250-19269]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",
      "info" : "ReturnStatement[19282-19349]:ReturnStatement[19282-19349]"
    }, {
      "left" : "return new Dfp(d);",
      "right" : "return new Dfp(d);",
      "info" : "ReturnStatement[19369-19387]:ReturnStatement[19369-19387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19661-19667]:Modifier[19661-19667]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[19668-19671]:SimpleType[19668-19671]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[19672-19683]:SimpleName[19672-19683]"
    }, {
      "left" : "final String s",
      "right" : "final String s",
      "info" : "SingleVariableDeclaration[19684-19698]:SingleVariableDeclaration[19684-19698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19700-19741]:Block[19700-19741]"
    }, {
      "left" : "return new Dfp(field, s);",
      "right" : "return new Dfp(field, s);",
      "info" : "ReturnStatement[19710-19735]:ReturnStatement[19710-19735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20015-20021]:Modifier[20015-20021]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[20022-20025]:SimpleType[20022-20025]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[20026-20037]:SimpleName[20026-20037]"
    }, {
      "left" : "final byte sig",
      "right" : "final byte sig",
      "info" : "SingleVariableDeclaration[20038-20052]:SingleVariableDeclaration[20038-20052]"
    }, {
      "left" : "final byte code",
      "right" : "final byte code",
      "info" : "SingleVariableDeclaration[20054-20069]:SingleVariableDeclaration[20054-20069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20071-20118]:Block[20071-20118]"
    }, {
      "left" : "return field.newDfp(sig, code);",
      "right" : "return field.newDfp(sig, code);",
      "info" : "ReturnStatement[20081-20112]:ReturnStatement[20081-20112]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20500-20506]:Modifier[20500-20506]"
    }, {
      "left" : "DfpField",
      "right" : "DfpField",
      "info" : "SimpleType[20507-20515]:SimpleType[20507-20515]"
    }, {
      "left" : "getField",
      "right" : "getField",
      "info" : "SimpleName[20516-20524]:SimpleName[20516-20524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20527-20556]:Block[20527-20556]"
    }, {
      "left" : "return field;",
      "right" : "return field;",
      "info" : "ReturnStatement[20537-20550]:ReturnStatement[20537-20550]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20664-20670]:Modifier[20664-20670]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20671-20674]:PrimitiveType[20671-20674]"
    }, {
      "left" : "getRadixDigits",
      "right" : "getRadixDigits",
      "info" : "SimpleName[20675-20689]:SimpleName[20675-20689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20692-20738]:Block[20692-20738]"
    }, {
      "left" : "return field.getRadixDigits();",
      "right" : "return field.getRadixDigits();",
      "info" : "ReturnStatement[20702-20732]:ReturnStatement[20702-20732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20817-20823]:Modifier[20817-20823]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[20824-20827]:SimpleType[20824-20827]"
    }, {
      "left" : "getZero",
      "right" : "getZero",
      "info" : "SimpleName[20828-20835]:SimpleName[20828-20835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20838-20877]:Block[20838-20877]"
    }, {
      "left" : "return field.getZero();",
      "right" : "return field.getZero();",
      "info" : "ReturnStatement[20848-20871]:ReturnStatement[20848-20871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20955-20961]:Modifier[20955-20961]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[20962-20965]:SimpleType[20962-20965]"
    }, {
      "left" : "getOne",
      "right" : "getOne",
      "info" : "SimpleName[20966-20972]:SimpleName[20966-20972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20975-21013]:Block[20975-21013]"
    }, {
      "left" : "return field.getOne();",
      "right" : "return field.getOne();",
      "info" : "ReturnStatement[20985-21007]:ReturnStatement[20985-21007]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21091-21097]:Modifier[21091-21097]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[21098-21101]:SimpleType[21098-21101]"
    }, {
      "left" : "getTwo",
      "right" : "getTwo",
      "info" : "SimpleName[21102-21108]:SimpleName[21102-21108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21111-21149]:Block[21111-21149]"
    }, {
      "left" : "return field.getTwo();",
      "right" : "return field.getTwo();",
      "info" : "ReturnStatement[21121-21143]:ReturnStatement[21121-21143]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21235-21244]:Modifier[21235-21244]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21245-21249]:PrimitiveType[21245-21249]"
    }, {
      "left" : "shiftLeft",
      "right" : "shiftLeft",
      "info" : "SimpleName[21250-21259]:SimpleName[21250-21259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21262-21400]:Block[21262-21400]"
    }, {
      "left" : "for (int i = mant.length - 1; i > 0; i--)",
      "right" : "for (int i = mant.length - 1; i > 0; i--)",
      "info" : "ForStatement[21272-21358]:ForStatement[21272-21358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21314-21358]:Block[21314-21358]"
    }, {
      "left" : "mant[i] = mant[i-1];",
      "right" : "mant[i] = mant[i-1];",
      "info" : "ExpressionStatement[21328-21348]:ExpressionStatement[21328-21348]"
    }, {
      "left" : "mant[0] = 0;",
      "right" : "mant[0] = 0;",
      "info" : "ExpressionStatement[21367-21379]:ExpressionStatement[21367-21379]"
    }, {
      "left" : "exp--;",
      "right" : "exp--;",
      "info" : "ExpressionStatement[21388-21394]:ExpressionStatement[21388-21394]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21588-21597]:Modifier[21588-21597]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21598-21602]:PrimitiveType[21598-21602]"
    }, {
      "left" : "shiftRight",
      "right" : "shiftRight",
      "info" : "SimpleName[21603-21613]:SimpleName[21603-21613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21616-21768]:Block[21616-21768]"
    }, {
      "left" : "for (int i = 0; i < mant.length - 1; i++)",
      "right" : "for (int i = 0; i < mant.length - 1; i++)",
      "info" : "ForStatement[21626-21712]:ForStatement[21626-21712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21668-21712]:Block[21668-21712]"
    }, {
      "left" : "mant[i] = mant[i+1];",
      "right" : "mant[i] = mant[i+1];",
      "info" : "ExpressionStatement[21682-21702]:ExpressionStatement[21682-21702]"
    }, {
      "left" : "mant[mant.length - 1] = 0;",
      "right" : "mant[mant.length - 1] = 0;",
      "info" : "ExpressionStatement[21721-21747]:ExpressionStatement[21721-21747]"
    }, {
      "left" : "exp++;",
      "right" : "exp++;",
      "info" : "ExpressionStatement[21756-21762]:ExpressionStatement[21756-21762]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22182-22191]:Modifier[22182-22191]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22192-22195]:PrimitiveType[22192-22195]"
    }, {
      "left" : "align",
      "right" : "align",
      "info" : "SimpleName[22196-22201]:SimpleName[22196-22201]"
    }, {
      "left" : "int e",
      "right" : "int e",
      "info" : "SingleVariableDeclaration[22202-22207]:SingleVariableDeclaration[22202-22207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22209-23457]:Block[22209-23457]"
    }, {
      "left" : "int lostdigit = 0;",
      "right" : "int lostdigit = 0;",
      "info" : "VariableDeclarationStatement[22219-22237]:VariableDeclarationStatement[22219-22237]"
    }, {
      "left" : "boolean inexact = false;",
      "right" : "boolean inexact = false;",
      "info" : "VariableDeclarationStatement[22246-22270]:VariableDeclarationStatement[22246-22270]"
    }, {
      "left" : "int diff = exp - e;",
      "right" : "int diff = exp - e;",
      "info" : "VariableDeclarationStatement[22280-22299]:VariableDeclarationStatement[22280-22299]"
    }, {
      "left" : "int adiff = diff;",
      "right" : "int adiff = diff;",
      "info" : "VariableDeclarationStatement[22309-22326]:VariableDeclarationStatement[22309-22326]"
    }, {
      "left" : "if (adiff < 0)",
      "right" : "if (adiff < 0)",
      "info" : "IfStatement[22335-22389]:IfStatement[22335-22389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22350-22389]:Block[22350-22389]"
    }, {
      "left" : "adiff = -adiff;",
      "right" : "adiff = -adiff;",
      "info" : "ExpressionStatement[22364-22379]:ExpressionStatement[22364-22379]"
    }, {
      "left" : "if (diff == 0)",
      "right" : "if (diff == 0)",
      "info" : "IfStatement[22399-22447]:IfStatement[22399-22447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22414-22447]:Block[22414-22447]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[22428-22437]:ReturnStatement[22428-22437]"
    }, {
      "left" : "if (adiff > (mant.length + 1))",
      "right" : "if (adiff > (mant.length + 1))",
      "info" : "IfStatement[22457-22732]:IfStatement[22457-22732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22488-22732]:Block[22488-22732]"
    }, {
      "left" : "Arrays.fill(mant, 0);",
      "right" : "Arrays.fill(mant, 0);",
      "info" : "ExpressionStatement[22530-22551]:ExpressionStatement[22530-22551]"
    }, {
      "left" : "exp = e;",
      "right" : "exp = e;",
      "info" : "ExpressionStatement[22564-22572]:ExpressionStatement[22564-22572]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[22586-22632]:ExpressionStatement[22586-22632]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "right" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "info" : "ExpressionStatement[22645-22699]:ExpressionStatement[22645-22699]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[22713-22722]:ReturnStatement[22713-22722]"
    }, {
      "left" : "for (int i = 0; i < adiff; i++)",
      "right" : "for (int i = 0; i < adiff; i++)",
      "info" : "ForStatement[22742-23263]:ForStatement[22742-23263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22774-23263]:Block[22774-23263]"
    }, {
      "left" : "if (diff < 0)",
      "right" : "if (diff < 0)",
      "info" : "IfStatement[22788-23253]:IfStatement[22788-23253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22802-23203]:Block[22802-23203]"
    }, {
      "left" : "if (lostdigit != 0)",
      "right" : "if (lostdigit != 0)",
      "info" : "IfStatement[23045-23120]:IfStatement[23045-23120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23065-23120]:Block[23065-23120]"
    }, {
      "left" : "inexact = true;",
      "right" : "inexact = true;",
      "info" : "ExpressionStatement[23087-23102]:ExpressionStatement[23087-23102]"
    }, {
      "left" : "lostdigit = mant[0];",
      "right" : "lostdigit = mant[0];",
      "info" : "ExpressionStatement[23138-23158]:ExpressionStatement[23138-23158]"
    }, {
      "left" : "shiftRight();",
      "right" : "shiftRight();",
      "info" : "ExpressionStatement[23176-23189]:ExpressionStatement[23176-23189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23209-23253]:Block[23209-23253]"
    }, {
      "left" : "shiftLeft();",
      "right" : "shiftLeft();",
      "info" : "ExpressionStatement[23227-23239]:ExpressionStatement[23227-23239]"
    }, {
      "left" : "if (inexact)",
      "right" : "if (inexact)",
      "info" : "IfStatement[23273-23423]:IfStatement[23273-23423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23286-23423]:Block[23286-23423]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[23300-23346]:ExpressionStatement[23300-23346]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "right" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "info" : "ExpressionStatement[23359-23413]:ExpressionStatement[23359-23413]"
    }, {
      "left" : "return lostdigit;",
      "right" : "return lostdigit;",
      "info" : "ReturnStatement[23433-23450]:ReturnStatement[23433-23450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23646-23652]:Modifier[23646-23652]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23653-23660]:PrimitiveType[23653-23660]"
    }, {
      "left" : "lessThan",
      "right" : "lessThan",
      "info" : "SimpleName[23661-23669]:SimpleName[23661-23669]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[23670-23681]:SingleVariableDeclaration[23670-23681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23683-24399]:Block[23683-24399]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[23760-24069]:IfStatement[23760-24069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23816-24069]:Block[23816-24069]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[23830-23876]:ExpressionStatement[23830-23876]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[23889-23931]:VariableDeclarationStatement[23889-23931]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[23944-23963]:ExpressionStatement[23944-23963]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",
      "info" : "ExpressionStatement[23976-24033]:ExpressionStatement[23976-24033]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24046-24059]:ReturnStatement[24046-24059]"
    }, {
      "left" : "if (isNaN() || x.isNaN())",
      "right" : "if (isNaN() || x.isNaN())",
      "info" : "IfStatement[24147-24355]:IfStatement[24147-24355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24173-24355]:Block[24173-24355]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[24187-24233]:ExpressionStatement[24187-24233]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",
      "info" : "ExpressionStatement[24246-24319]:ExpressionStatement[24246-24319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24332-24345]:ReturnStatement[24332-24345]"
    }, {
      "left" : "return compare(this, x) < 0;",
      "right" : "return compare(this, x) < 0;",
      "info" : "ReturnStatement[24365-24393]:ReturnStatement[24365-24393]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24594-24600]:Modifier[24594-24600]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24601-24608]:PrimitiveType[24601-24608]"
    }, {
      "left" : "greaterThan",
      "right" : "greaterThan",
      "info" : "SimpleName[24609-24620]:SimpleName[24609-24620]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[24621-24632]:SingleVariableDeclaration[24621-24632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24634-25356]:Block[24634-25356]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[24711-25023]:IfStatement[24711-25023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24767-25023]:Block[24767-25023]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[24781-24827]:ExpressionStatement[24781-24827]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[24840-24882]:VariableDeclarationStatement[24840-24882]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[24895-24914]:ExpressionStatement[24895-24914]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",
      "right" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",
      "info" : "ExpressionStatement[24927-24987]:ExpressionStatement[24927-24987]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25000-25013]:ReturnStatement[25000-25013]"
    }, {
      "left" : "if (isNaN() || x.isNaN())",
      "right" : "if (isNaN() || x.isNaN())",
      "info" : "IfStatement[25101-25312]:IfStatement[25101-25312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25127-25312]:Block[25127-25312]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[25141-25187]:ExpressionStatement[25141-25187]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",
      "info" : "ExpressionStatement[25200-25276]:ExpressionStatement[25200-25276]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25289-25302]:ReturnStatement[25289-25302]"
    }, {
      "left" : "return compare(this, x) > 0;",
      "right" : "return compare(this, x) > 0;",
      "info" : "ReturnStatement[25322-25350]:ReturnStatement[25322-25350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25512-25518]:Modifier[25512-25518]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25519-25526]:PrimitiveType[25519-25526]"
    }, {
      "left" : "negativeOrNull",
      "right" : "negativeOrNull",
      "info" : "SimpleName[25527-25541]:SimpleName[25527-25541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25544-25839]:Block[25544-25839]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[25555-25753]:IfStatement[25555-25753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25568-25753]:Block[25568-25753]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[25582-25628]:ExpressionStatement[25582-25628]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "info" : "ExpressionStatement[25641-25717]:ExpressionStatement[25641-25717]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25730-25743]:ReturnStatement[25730-25743]"
    }, {
      "left" : "return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());",
      "right" : "return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());",
      "info" : "ReturnStatement[25763-25832]:ReturnStatement[25763-25832]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25992-25998]:Modifier[25992-25998]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25999-26006]:PrimitiveType[25999-26006]"
    }, {
      "left" : "strictlyNegative",
      "right" : "strictlyNegative",
      "info" : "SimpleName[26007-26023]:SimpleName[26007-26023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26026-26320]:Block[26026-26320]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[26037-26235]:IfStatement[26037-26235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26050-26235]:Block[26050-26235]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[26064-26110]:ExpressionStatement[26064-26110]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "info" : "ExpressionStatement[26123-26199]:ExpressionStatement[26123-26199]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26212-26225]:ReturnStatement[26212-26225]"
    }, {
      "left" : "return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());",
      "right" : "return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());",
      "info" : "ReturnStatement[26245-26313]:ReturnStatement[26245-26313]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26482-26488]:Modifier[26482-26488]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26489-26496]:PrimitiveType[26489-26496]"
    }, {
      "left" : "positiveOrNull",
      "right" : "positiveOrNull",
      "info" : "SimpleName[26497-26511]:SimpleName[26497-26511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26514-26809]:Block[26514-26809]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[26525-26723]:IfStatement[26525-26723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26538-26723]:Block[26538-26723]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[26552-26598]:ExpressionStatement[26552-26598]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "info" : "ExpressionStatement[26611-26687]:ExpressionStatement[26611-26687]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26700-26713]:ReturnStatement[26700-26713]"
    }, {
      "left" : "return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());",
      "right" : "return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());",
      "info" : "ReturnStatement[26733-26802]:ReturnStatement[26733-26802]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26968-26974]:Modifier[26968-26974]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26975-26982]:PrimitiveType[26975-26982]"
    }, {
      "left" : "strictlyPositive",
      "right" : "strictlyPositive",
      "info" : "SimpleName[26983-26999]:SimpleName[26983-26999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27002-27296]:Block[27002-27296]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[27013-27211]:IfStatement[27013-27211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27026-27211]:Block[27026-27211]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[27040-27086]:ExpressionStatement[27040-27086]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "info" : "ExpressionStatement[27099-27175]:ExpressionStatement[27099-27175]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27188-27201]:ReturnStatement[27188-27201]"
    }, {
      "left" : "return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());",
      "right" : "return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());",
      "info" : "ReturnStatement[27221-27289]:ReturnStatement[27221-27289]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27396-27402]:Modifier[27396-27402]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[27403-27406]:SimpleType[27403-27406]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[27407-27410]:SimpleName[27407-27410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27413-27508]:Block[27413-27508]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[27423-27454]:VariableDeclarationStatement[27423-27454]"
    }, {
      "left" : "result.sign = 1;",
      "right" : "result.sign = 1;",
      "info" : "ExpressionStatement[27463-27479]:ExpressionStatement[27463-27479]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27488-27502]:ReturnStatement[27488-27502]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27605-27611]:Modifier[27605-27611]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27612-27619]:PrimitiveType[27612-27619]"
    }, {
      "left" : "isInfinite",
      "right" : "isInfinite",
      "info" : "SimpleName[27620-27630]:SimpleName[27620-27630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27633-27673]:Block[27633-27673]"
    }, {
      "left" : "return nans == INFINITE;",
      "right" : "return nans == INFINITE;",
      "info" : "ReturnStatement[27643-27667]:ReturnStatement[27643-27667]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27778-27784]:Modifier[27778-27784]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27785-27792]:PrimitiveType[27785-27792]"
    }, {
      "left" : "isNaN",
      "right" : "isNaN",
      "info" : "SimpleName[27793-27798]:SimpleName[27793-27798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27801-27857]:Block[27801-27857]"
    }, {
      "left" : "return (nans == QNAN) || (nans == SNAN);",
      "right" : "return (nans == QNAN) || (nans == SNAN);",
      "info" : "ReturnStatement[27811-27851]:ReturnStatement[27811-27851]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27964-27970]:Modifier[27964-27970]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27971-27978]:PrimitiveType[27971-27978]"
    }, {
      "left" : "isZero",
      "right" : "isZero",
      "info" : "SimpleName[27979-27985]:SimpleName[27979-27985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27988-28267]:Block[27988-28267]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[27999-28197]:IfStatement[27999-28197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28012-28197]:Block[28012-28197]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[28026-28072]:ExpressionStatement[28026-28072]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",
      "info" : "ExpressionStatement[28085-28161]:ExpressionStatement[28085-28161]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28174-28187]:ReturnStatement[28174-28187]"
    }, {
      "left" : "return (mant[mant.length - 1] == 0) && !isInfinite();",
      "right" : "return (mant[mant.length - 1] == 0) && !isInfinite();",
      "info" : "ReturnStatement[28207-28260]:ReturnStatement[28207-28260]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28458-28467]:MarkerAnnotation[28458-28467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28472-28478]:Modifier[28472-28478]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28479-28486]:PrimitiveType[28479-28486]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[28487-28493]:SimpleName[28487-28493]"
    }, {
      "left" : "final Object other",
      "right" : "final Object other",
      "info" : "SingleVariableDeclaration[28494-28512]:SingleVariableDeclaration[28494-28512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28514-28812]:Block[28514-28812]"
    }, {
      "left" : "if (other instanceof Dfp)",
      "right" : "if (other instanceof Dfp)",
      "info" : "IfStatement[28525-28782]:IfStatement[28525-28782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28551-28782]:Block[28551-28782]"
    }, {
      "left" : "final Dfp x = (Dfp) other;",
      "right" : "final Dfp x = (Dfp) other;",
      "info" : "VariableDeclarationStatement[28565-28591]:VariableDeclarationStatement[28565-28591]"
    }, {
      "left" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[28604-28729]:IfStatement[28604-28729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28684-28729]:Block[28684-28729]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28702-28715]:ReturnStatement[28702-28715]"
    }, {
      "left" : "return compare(this, x) == 0;",
      "right" : "return compare(this, x) == 0;",
      "info" : "ReturnStatement[28743-28772]:ReturnStatement[28743-28772]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28792-28805]:ReturnStatement[28792-28805]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28924-28933]:MarkerAnnotation[28924-28933]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28938-28944]:Modifier[28938-28944]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28945-28948]:PrimitiveType[28945-28948]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[28949-28957]:SimpleName[28949-28957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28960-29045]:Block[28960-29045]"
    }, {
      "left" : "return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);",
      "right" : "return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);",
      "info" : "ReturnStatement[28970-29039]:ReturnStatement[28970-29039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29240-29246]:Modifier[29240-29246]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29247-29254]:PrimitiveType[29247-29254]"
    }, {
      "left" : "unequal",
      "right" : "unequal",
      "info" : "SimpleName[29255-29262]:SimpleName[29255-29262]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[29263-29274]:SingleVariableDeclaration[29263-29274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29276-29456]:Block[29276-29456]"
    }, {
      "left" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[29286-29403]:IfStatement[29286-29403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29366-29403]:Block[29366-29403]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29380-29393]:ReturnStatement[29380-29393]"
    }, {
      "left" : "return greaterThan(x) || lessThan(x);",
      "right" : "return greaterThan(x) || lessThan(x);",
      "info" : "ReturnStatement[29413-29450]:ReturnStatement[29413-29450]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29733-29740]:Modifier[29733-29740]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29741-29747]:Modifier[29741-29747]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29748-29751]:PrimitiveType[29748-29751]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[29752-29759]:SimpleName[29752-29759]"
    }, {
      "left" : "final Dfp a",
      "right" : "final Dfp a",
      "info" : "SingleVariableDeclaration[29760-29771]:SingleVariableDeclaration[29760-29771]"
    }, {
      "left" : "final Dfp b",
      "right" : "final Dfp b",
      "info" : "SingleVariableDeclaration[29773-29784]:SingleVariableDeclaration[29773-29784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29786-31081]:Block[29786-31081]"
    }, {
      "left" : "if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE)",
      "right" : "if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE)",
      "info" : "IfStatement[29831-29986]:IfStatement[29831-29986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29953-29986]:Block[29953-29986]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[29967-29976]:ReturnStatement[29967-29976]"
    }, {
      "left" : "if (a.sign != b.sign)",
      "right" : "if (a.sign != b.sign)",
      "info" : "IfStatement[29996-30149]:IfStatement[29996-30149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30018-30149]:Block[30018-30149]"
    }, {
      "left" : "if (a.sign == -1)",
      "right" : "if (a.sign == -1)",
      "info" : "IfStatement[30032-30139]:IfStatement[30032-30139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30050-30092]:Block[30050-30092]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[30068-30078]:ReturnStatement[30068-30078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30098-30139]:Block[30098-30139]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[30116-30125]:ReturnStatement[30116-30125]"
    }, {
      "left" : "if (a.nans == INFINITE && b.nans == FINITE)",
      "right" : "if (a.nans == INFINITE && b.nans == FINITE)",
      "info" : "IfStatement[30195-30277]:IfStatement[30195-30277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30239-30277]:Block[30239-30277]"
    }, {
      "left" : "return a.sign;",
      "right" : "return a.sign;",
      "info" : "ReturnStatement[30253-30267]:ReturnStatement[30253-30267]"
    }, {
      "left" : "if (a.nans == FINITE && b.nans == INFINITE)",
      "right" : "if (a.nans == FINITE && b.nans == INFINITE)",
      "info" : "IfStatement[30287-30370]:IfStatement[30287-30370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30331-30370]:Block[30331-30370]"
    }, {
      "left" : "return -b.sign;",
      "right" : "return -b.sign;",
      "info" : "ReturnStatement[30345-30360]:ReturnStatement[30345-30360]"
    }, {
      "left" : "if (a.nans == INFINITE && b.nans == INFINITE)",
      "right" : "if (a.nans == INFINITE && b.nans == INFINITE)",
      "info" : "IfStatement[30380-30459]:IfStatement[30380-30459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30426-30459]:Block[30426-30459]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[30440-30449]:ReturnStatement[30440-30449]"
    }, {
      "left" : "if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0)",
      "right" : "if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0)",
      "info" : "IfStatement[30547-30782]:IfStatement[30547-30782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30613-30782]:Block[30613-30782]"
    }, {
      "left" : "if (a.exp < b.exp)",
      "right" : "if (a.exp < b.exp)",
      "info" : "IfStatement[30627-30693]:IfStatement[30627-30693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30646-30693]:Block[30646-30693]"
    }, {
      "left" : "return -a.sign;",
      "right" : "return -a.sign;",
      "info" : "ReturnStatement[30664-30679]:ReturnStatement[30664-30679]"
    }, {
      "left" : "if (a.exp > b.exp)",
      "right" : "if (a.exp > b.exp)",
      "info" : "IfStatement[30707-30772]:IfStatement[30707-30772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30726-30772]:Block[30726-30772]"
    }, {
      "left" : "return a.sign;",
      "right" : "return a.sign;",
      "info" : "ReturnStatement[30744-30758]:ReturnStatement[30744-30758]"
    }, {
      "left" : "for (int i = a.mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = a.mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[30825-31055]:ForStatement[30825-31055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30870-31055]:Block[30870-31055]"
    }, {
      "left" : "if (a.mant[i] > b.mant[i])",
      "right" : "if (a.mant[i] > b.mant[i])",
      "info" : "IfStatement[30884-30957]:IfStatement[30884-30957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30911-30957]:Block[30911-30957]"
    }, {
      "left" : "return a.sign;",
      "right" : "return a.sign;",
      "info" : "ReturnStatement[30929-30943]:ReturnStatement[30929-30943]"
    }, {
      "left" : "if (a.mant[i] < b.mant[i])",
      "right" : "if (a.mant[i] < b.mant[i])",
      "info" : "IfStatement[30971-31045]:IfStatement[30971-31045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30998-31045]:Block[30998-31045]"
    }, {
      "left" : "return -a.sign;",
      "right" : "return -a.sign;",
      "info" : "ReturnStatement[31016-31031]:ReturnStatement[31016-31031]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[31065-31074]:ReturnStatement[31065-31074]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31307-31313]:Modifier[31307-31313]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[31314-31317]:SimpleType[31314-31317]"
    }, {
      "left" : "rint",
      "right" : "rint",
      "info" : "SimpleName[31318-31322]:SimpleName[31318-31322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31325-31393]:Block[31325-31393]"
    }, {
      "left" : "return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);",
      "right" : "return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);",
      "info" : "ReturnStatement[31335-31387]:ReturnStatement[31335-31387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31532-31538]:Modifier[31532-31538]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[31539-31542]:SimpleType[31539-31542]"
    }, {
      "left" : "floor",
      "right" : "floor",
      "info" : "SimpleName[31543-31548]:SimpleName[31543-31548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31551-31615]:Block[31551-31615]"
    }, {
      "left" : "return trunc(DfpField.RoundingMode.ROUND_FLOOR);",
      "right" : "return trunc(DfpField.RoundingMode.ROUND_FLOOR);",
      "info" : "ReturnStatement[31561-31609]:ReturnStatement[31561-31609]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31753-31759]:Modifier[31753-31759]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[31760-31763]:SimpleType[31760-31763]"
    }, {
      "left" : "ceil",
      "right" : "ceil",
      "info" : "SimpleName[31764-31768]:SimpleName[31764-31768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31771-31834]:Block[31771-31834]"
    }, {
      "left" : "return trunc(DfpField.RoundingMode.ROUND_CEIL);",
      "right" : "return trunc(DfpField.RoundingMode.ROUND_CEIL);",
      "info" : "ReturnStatement[31781-31828]:ReturnStatement[31781-31828]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31987-31993]:Modifier[31987-31993]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[31994-31997]:SimpleType[31994-31997]"
    }, {
      "left" : "remainder",
      "right" : "remainder",
      "info" : "SimpleName[31998-32007]:SimpleName[31998-32007]"
    }, {
      "left" : "final Dfp d",
      "right" : "final Dfp d",
      "info" : "SingleVariableDeclaration[32008-32019]:SingleVariableDeclaration[32008-32019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32021-32312]:Block[32021-32312]"
    }, {
      "left" : "final Dfp result = this.subtract(this.divide(d).rint().multiply(d));",
      "right" : "final Dfp result = this.subtract(this.divide(d).rint().multiply(d));",
      "info" : "VariableDeclarationStatement[32032-32100]:VariableDeclarationStatement[32032-32100]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[32201-32281]:IfStatement[32201-32281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32238-32281]:Block[32238-32281]"
    }, {
      "left" : "result.sign = sign;",
      "right" : "result.sign = sign;",
      "info" : "ExpressionStatement[32252-32271]:ExpressionStatement[32252-32271]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32291-32305]:ReturnStatement[32291-32305]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32464-32473]:Modifier[32464-32473]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[32474-32477]:SimpleType[32474-32477]"
    }, {
      "left" : "trunc",
      "right" : "trunc",
      "info" : "SimpleName[32478-32483]:SimpleName[32478-32483]"
    }, {
      "left" : "final DfpField.RoundingMode rmode",
      "right" : "final DfpField.RoundingMode rmode",
      "info" : "SingleVariableDeclaration[32484-32517]:SingleVariableDeclaration[32484-32517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32519-35395]:Block[32519-35395]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[32529-32553]:VariableDeclarationStatement[32529-32553]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[32563-32625]:IfStatement[32563-32625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32576-32625]:Block[32576-32625]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[32590-32615]:ReturnStatement[32590-32615]"
    }, {
      "left" : "if (nans == INFINITE)",
      "right" : "if (nans == INFINITE)",
      "info" : "IfStatement[32635-32706]:IfStatement[32635-32706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32657-32706]:Block[32657-32706]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[32671-32696]:ReturnStatement[32671-32696]"
    }, {
      "left" : "if (mant[mant.length-1] == 0)",
      "right" : "if (mant[mant.length-1] == 0)",
      "info" : "IfStatement[32716-32820]:IfStatement[32716-32820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32746-32820]:Block[32746-32820]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[32785-32810]:ReturnStatement[32785-32810]"
    }, {
      "left" : "if (exp < 0)",
      "right" : "if (exp < 0)",
      "info" : "IfStatement[32923-33160]:IfStatement[32923-33160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32936-33160]:Block[32936-33160]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[32950-32996]:ExpressionStatement[32950-32996]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[33009-33045]:VariableDeclarationStatement[33009-33045]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "info" : "ExpressionStatement[33058-33123]:ExpressionStatement[33058-33123]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33136-33150]:ReturnStatement[33136-33150]"
    }, {
      "left" : "if (exp >= mant.length)",
      "right" : "if (exp >= mant.length)",
      "info" : "IfStatement[33351-33424]:IfStatement[33351-33424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33375-33424]:Block[33375-33424]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[33389-33414]:ReturnStatement[33389-33414]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[33561-33592]:VariableDeclarationStatement[33561-33592]"
    }, {
      "left" : "for (int i = 0; i < mant.length-result.exp; i++)",
      "right" : "for (int i = 0; i < mant.length-result.exp; i++)",
      "info" : "ForStatement[33601-33737]:ForStatement[33601-33737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33650-33737]:Block[33650-33737]"
    }, {
      "left" : "changed |= result.mant[i] != 0;",
      "right" : "changed |= result.mant[i] != 0;",
      "info" : "ExpressionStatement[33664-33695]:ExpressionStatement[33664-33695]"
    }, {
      "left" : "result.mant[i] = 0;",
      "right" : "result.mant[i] = 0;",
      "info" : "ExpressionStatement[33708-33727]:ExpressionStatement[33708-33727]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[33747-35365]:IfStatement[33747-35365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33760-35365]:Block[33760-35365]"
    }, {
      "left" : "switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }",
      "right" : "switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[33774-35171]:SwitchStatement[33774-35171]"
    }, {
      "left" : "case ROUND_FLOOR:",
      "right" : "case ROUND_FLOOR:",
      "info" : "SwitchCase[33807-33824]:SwitchCase[33807-33824]"
    }, {
      "left" : "if (result.sign == -1)",
      "right" : "if (result.sign == -1)",
      "info" : "IfStatement[33845-34023]:IfStatement[33845-34023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33868-34023]:Block[33868-34023]"
    }, {
      "left" : "result = result.add(newInstance(-1));",
      "right" : "result = result.add(newInstance(-1));",
      "info" : "ExpressionStatement[33964-34001]:ExpressionStatement[33964-34001]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34044-34050]:BreakStatement[34044-34050]"
    }, {
      "left" : "case ROUND_CEIL:",
      "right" : "case ROUND_CEIL:",
      "info" : "SwitchCase[34068-34084]:SwitchCase[34068-34084]"
    }, {
      "left" : "if (result.sign == 1)",
      "right" : "if (result.sign == 1)",
      "info" : "IfStatement[34105-34275]:IfStatement[34105-34275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34127-34275]:Block[34127-34275]"
    }, {
      "left" : "result = result.add(getOne());",
      "right" : "result = result.add(getOne());",
      "info" : "ExpressionStatement[34223-34253]:ExpressionStatement[34223-34253]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34296-34302]:BreakStatement[34296-34302]"
    }, {
      "left" : "case ROUND_HALF_EVEN:",
      "right" : "case ROUND_HALF_EVEN:",
      "info" : "SwitchCase[34320-34341]:SwitchCase[34320-34341]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34358-34366]:SwitchCase[34358-34366]"
    }, {
      "left" : "final Dfp half = newInstance(\"0.5\");",
      "right" : "final Dfp half = newInstance(\"0.5\");",
      "info" : "VariableDeclarationStatement[34387-34423]:VariableDeclarationStatement[34387-34423]"
    }, {
      "left" : "Dfp a = subtract(result);",
      "right" : "Dfp a = subtract(result);",
      "info" : "VariableDeclarationStatement[34444-34469]:VariableDeclarationStatement[34444-34469]"
    }, {
      "left" : "a.sign = 1;",
      "right" : "a.sign = 1;",
      "info" : "ExpressionStatement[34529-34540]:ExpressionStatement[34529-34540]"
    }, {
      "left" : "if (a.greaterThan(half))",
      "right" : "if (a.greaterThan(half))",
      "info" : "IfStatement[34601-34787]:IfStatement[34601-34787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34626-34787]:Block[34626-34787]"
    }, {
      "left" : "a = newInstance(getOne());",
      "right" : "a = newInstance(getOne());",
      "info" : "ExpressionStatement[34652-34678]:ExpressionStatement[34652-34678]"
    }, {
      "left" : "a.sign = sign;",
      "right" : "a.sign = sign;",
      "info" : "ExpressionStatement[34703-34717]:ExpressionStatement[34703-34717]"
    }, {
      "left" : "result = result.add(a);",
      "right" : "result = result.add(a);",
      "info" : "ExpressionStatement[34742-34765]:ExpressionStatement[34742-34765]"
    }, {
      "left" : "if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0)",
      "right" : "if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0)",
      "info" : "IfStatement[34883-35130]:IfStatement[34883-35130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34969-35130]:Block[34969-35130]"
    }, {
      "left" : "a = newInstance(getOne());",
      "right" : "a = newInstance(getOne());",
      "info" : "ExpressionStatement[34995-35021]:ExpressionStatement[34995-35021]"
    }, {
      "left" : "a.sign = sign;",
      "right" : "a.sign = sign;",
      "info" : "ExpressionStatement[35046-35060]:ExpressionStatement[35046-35060]"
    }, {
      "left" : "result = result.add(a);",
      "right" : "result = result.add(a);",
      "info" : "ExpressionStatement[35085-35108]:ExpressionStatement[35085-35108]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35151-35157]:BreakStatement[35151-35157]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[35185-35231]:ExpressionStatement[35185-35231]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "info" : "ExpressionStatement[35263-35328]:ExpressionStatement[35263-35328]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35341-35355]:ReturnStatement[35341-35355]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35375-35389]:ReturnStatement[35375-35389]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35584-35590]:Modifier[35584-35590]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35591-35594]:PrimitiveType[35591-35594]"
    }, {
      "left" : "intValue",
      "right" : "intValue",
      "info" : "SimpleName[35595-35603]:SimpleName[35595-35603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35606-36130]:Block[35606-36130]"
    }, {
      "left" : "Dfp rounded;",
      "right" : "Dfp rounded;",
      "info" : "VariableDeclarationStatement[35616-35628]:VariableDeclarationStatement[35616-35628]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[35637-35652]:VariableDeclarationStatement[35637-35652]"
    }, {
      "left" : "rounded = rint();",
      "right" : "rounded = rint();",
      "info" : "ExpressionStatement[35662-35679]:ExpressionStatement[35662-35679]"
    }, {
      "left" : "if (rounded.greaterThan(newInstance(2147483647)))",
      "right" : "if (rounded.greaterThan(newInstance(2147483647)))",
      "info" : "IfStatement[35689-35781]:IfStatement[35689-35781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35739-35781]:Block[35739-35781]"
    }, {
      "left" : "return 2147483647;",
      "right" : "return 2147483647;",
      "info" : "ReturnStatement[35753-35771]:ReturnStatement[35753-35771]"
    }, {
      "left" : "if (rounded.lessThan(newInstance(-2147483648)))",
      "right" : "if (rounded.lessThan(newInstance(-2147483648)))",
      "info" : "IfStatement[35791-35882]:IfStatement[35791-35882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35839-35882]:Block[35839-35882]"
    }, {
      "left" : "return -2147483648;",
      "right" : "return -2147483648;",
      "info" : "ReturnStatement[35853-35872]:ReturnStatement[35853-35872]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--)",
      "right" : "for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--)",
      "info" : "ForStatement[35892-36025]:ForStatement[35892-36025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35959-36025]:Block[35959-36025]"
    }, {
      "left" : "result = result * RADIX + rounded.mant[i];",
      "right" : "result = result * RADIX + rounded.mant[i];",
      "info" : "ExpressionStatement[35973-36015]:ExpressionStatement[35973-36015]"
    }, {
      "left" : "if (rounded.sign == -1)",
      "right" : "if (rounded.sign == -1)",
      "info" : "IfStatement[36035-36100]:IfStatement[36035-36100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36059-36100]:Block[36059-36100]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[36073-36090]:ExpressionStatement[36073-36090]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[36110-36124]:ReturnStatement[36110-36124]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36380-36386]:Modifier[36380-36386]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36387-36390]:PrimitiveType[36387-36390]"
    }, {
      "left" : "log10K",
      "right" : "log10K",
      "info" : "SimpleName[36391-36397]:SimpleName[36391-36397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36400-36431]:Block[36400-36431]"
    }, {
      "left" : "return exp - 1;",
      "right" : "return exp - 1;",
      "info" : "ReturnStatement[36410-36425]:ReturnStatement[36410-36425]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36551-36557]:Modifier[36551-36557]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[36558-36561]:SimpleType[36558-36561]"
    }, {
      "left" : "power10K",
      "right" : "power10K",
      "info" : "SimpleName[36562-36570]:SimpleName[36562-36570]"
    }, {
      "left" : "final int e",
      "right" : "final int e",
      "info" : "SingleVariableDeclaration[36571-36582]:SingleVariableDeclaration[36571-36582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36584-36671]:Block[36584-36671]"
    }, {
      "left" : "Dfp d = newInstance(getOne());",
      "right" : "Dfp d = newInstance(getOne());",
      "info" : "VariableDeclarationStatement[36594-36624]:VariableDeclarationStatement[36594-36624]"
    }, {
      "left" : "d.exp = e + 1;",
      "right" : "d.exp = e + 1;",
      "info" : "ExpressionStatement[36633-36647]:ExpressionStatement[36633-36647]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[36656-36665]:ReturnStatement[36656-36665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36821-36827]:Modifier[36821-36827]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36828-36831]:PrimitiveType[36828-36831]"
    }, {
      "left" : "log10",
      "right" : "log10",
      "info" : "SimpleName[36832-36837]:SimpleName[36832-36837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36841-37125]:Block[36841-37125]"
    }, {
      "left" : "if (mant[mant.length-1] > 1000)",
      "right" : "if (mant[mant.length-1] > 1000)",
      "info" : "IfStatement[36851-36926]:IfStatement[36851-36926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36883-36926]:Block[36883-36926]"
    }, {
      "left" : "return exp * 4 - 1;",
      "right" : "return exp * 4 - 1;",
      "info" : "ReturnStatement[36897-36916]:ReturnStatement[36897-36916]"
    }, {
      "left" : "if (mant[mant.length-1] > 100)",
      "right" : "if (mant[mant.length-1] > 100)",
      "info" : "IfStatement[36935-37009]:IfStatement[36935-37009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36966-37009]:Block[36966-37009]"
    }, {
      "left" : "return exp * 4 - 2;",
      "right" : "return exp * 4 - 2;",
      "info" : "ReturnStatement[36980-36999]:ReturnStatement[36980-36999]"
    }, {
      "left" : "if (mant[mant.length-1] > 10)",
      "right" : "if (mant[mant.length-1] > 10)",
      "info" : "IfStatement[37018-37091]:IfStatement[37018-37091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37048-37091]:Block[37048-37091]"
    }, {
      "left" : "return exp * 4 - 3;",
      "right" : "return exp * 4 - 3;",
      "info" : "ReturnStatement[37062-37081]:ReturnStatement[37062-37081]"
    }, {
      "left" : "return exp * 4 - 4;",
      "right" : "return exp * 4 - 4;",
      "info" : "ReturnStatement[37100-37119]:ReturnStatement[37100-37119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37242-37248]:Modifier[37242-37248]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[37249-37252]:SimpleType[37249-37252]"
    }, {
      "left" : "power10",
      "right" : "power10",
      "info" : "SimpleName[37253-37260]:SimpleName[37253-37260]"
    }, {
      "left" : "final int e",
      "right" : "final int e",
      "info" : "SingleVariableDeclaration[37261-37272]:SingleVariableDeclaration[37261-37272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37274-37760]:Block[37274-37760]"
    }, {
      "left" : "Dfp d = newInstance(getOne());",
      "right" : "Dfp d = newInstance(getOne());",
      "info" : "VariableDeclarationStatement[37284-37314]:VariableDeclarationStatement[37284-37314]"
    }, {
      "left" : "if (e >= 0)",
      "right" : "if (e >= 0)",
      "info" : "IfStatement[37324-37428]:IfStatement[37324-37428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37336-37378]:Block[37336-37378]"
    }, {
      "left" : "d.exp = e / 4 + 1;",
      "right" : "d.exp = e / 4 + 1;",
      "info" : "ExpressionStatement[37350-37368]:ExpressionStatement[37350-37368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37384-37428]:Block[37384-37428]"
    }, {
      "left" : "d.exp = (e + 1) / 4;",
      "right" : "d.exp = (e + 1) / 4;",
      "info" : "ExpressionStatement[37398-37418]:ExpressionStatement[37398-37418]"
    }, {
      "left" : "switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }",
      "right" : "switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }",
      "info" : "SwitchStatement[37438-37735]:SwitchStatement[37438-37735]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[37477-37484]:SwitchCase[37477-37484]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37501-37507]:BreakStatement[37501-37507]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[37520-37527]:SwitchCase[37520-37527]"
    }, {
      "left" : "d = d.multiply(10);",
      "right" : "d = d.multiply(10);",
      "info" : "ExpressionStatement[37544-37563]:ExpressionStatement[37544-37563]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37580-37586]:BreakStatement[37580-37586]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[37599-37606]:SwitchCase[37599-37606]"
    }, {
      "left" : "d = d.multiply(100);",
      "right" : "d = d.multiply(100);",
      "info" : "ExpressionStatement[37623-37643]:ExpressionStatement[37623-37643]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37660-37666]:BreakStatement[37660-37666]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[37679-37687]:SwitchCase[37679-37687]"
    }, {
      "left" : "d = d.multiply(1000);",
      "right" : "d = d.multiply(1000);",
      "info" : "ExpressionStatement[37704-37725]:ExpressionStatement[37704-37725]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[37745-37754]:ReturnStatement[37745-37754]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38003-38012]:Modifier[38003-38012]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38013-38016]:PrimitiveType[38013-38016]"
    }, {
      "left" : "complement",
      "right" : "complement",
      "info" : "SimpleName[38017-38027]:SimpleName[38017-38027]"
    }, {
      "left" : "int extra",
      "right" : "int extra",
      "info" : "SingleVariableDeclaration[38028-38037]:SingleVariableDeclaration[38028-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38039-38429]:Block[38039-38429]"
    }, {
      "left" : "extra = RADIX-extra;",
      "right" : "extra = RADIX-extra;",
      "info" : "ExpressionStatement[38050-38070]:ExpressionStatement[38050-38070]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[38079-38167]:ForStatement[38079-38167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38117-38167]:Block[38117-38167]"
    }, {
      "left" : "mant[i] = RADIX-mant[i]-1;",
      "right" : "mant[i] = RADIX-mant[i]-1;",
      "info" : "ExpressionStatement[38131-38157]:ExpressionStatement[38131-38157]"
    }, {
      "left" : "int rh = extra / RADIX;",
      "right" : "int rh = extra / RADIX;",
      "info" : "VariableDeclarationStatement[38177-38200]:VariableDeclarationStatement[38177-38200]"
    }, {
      "left" : "extra = extra - rh * RADIX;",
      "right" : "extra = extra - rh * RADIX;",
      "info" : "ExpressionStatement[38209-38236]:ExpressionStatement[38209-38236]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[38245-38400]:ForStatement[38245-38400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38283-38400]:Block[38283-38400]"
    }, {
      "left" : "final int r = mant[i] + rh;",
      "right" : "final int r = mant[i] + rh;",
      "info" : "VariableDeclarationStatement[38297-38324]:VariableDeclarationStatement[38297-38324]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[38337-38352]:ExpressionStatement[38337-38352]"
    }, {
      "left" : "mant[i] = r - rh * RADIX;",
      "right" : "mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[38365-38390]:ExpressionStatement[38365-38390]"
    }, {
      "left" : "return extra;",
      "right" : "return extra;",
      "info" : "ReturnStatement[38410-38423]:ReturnStatement[38410-38423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38529-38535]:Modifier[38529-38535]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[38536-38539]:SimpleType[38536-38539]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[38540-38543]:SimpleName[38540-38543]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[38544-38555]:SingleVariableDeclaration[38544-38555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38557-43023]:Block[38557-43023]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[38634-38918]:IfStatement[38634-38918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38690-38918]:Block[38690-38918]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[38704-38750]:ExpressionStatement[38704-38750]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[38763-38805]:VariableDeclarationStatement[38763-38805]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[38818-38837]:ExpressionStatement[38818-38837]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "info" : "ReturnStatement[38850-38908]:ReturnStatement[38850-38908]"
    }, {
      "left" : "if (nans != FINITE || x.nans != FINITE)",
      "right" : "if (nans != FINITE || x.nans != FINITE)",
      "info" : "IfStatement[38963-39819]:IfStatement[38963-39819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39003-39819]:Block[39003-39819]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[39017-39074]:IfStatement[39017-39074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39030-39074]:Block[39030-39074]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39048-39060]:ReturnStatement[39048-39060]"
    }, {
      "left" : "if (x.isNaN())",
      "right" : "if (x.isNaN())",
      "info" : "IfStatement[39088-39144]:IfStatement[39088-39144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39103-39144]:Block[39103-39144]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[39121-39130]:ReturnStatement[39121-39130]"
    }, {
      "left" : "if (nans == INFINITE && x.nans == FINITE)",
      "right" : "if (nans == INFINITE && x.nans == FINITE)",
      "info" : "IfStatement[39158-39244]:IfStatement[39158-39244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39200-39244]:Block[39200-39244]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39218-39230]:ReturnStatement[39218-39230]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == FINITE)",
      "right" : "if (x.nans == INFINITE && nans == FINITE)",
      "info" : "IfStatement[39258-39341]:IfStatement[39258-39341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39300-39341]:Block[39300-39341]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[39318-39327]:ReturnStatement[39318-39327]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == INFINITE && sign == x.sign)",
      "right" : "if (x.nans == INFINITE && nans == INFINITE && sign == x.sign)",
      "info" : "IfStatement[39355-39458]:IfStatement[39355-39458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39417-39458]:Block[39417-39458]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[39435-39444]:ReturnStatement[39435-39444]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == INFINITE && sign != x.sign)",
      "right" : "if (x.nans == INFINITE && nans == INFINITE && sign != x.sign)",
      "info" : "IfStatement[39472-39809]:IfStatement[39472-39809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39534-39809]:Block[39534-39809]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[39552-39598]:ExpressionStatement[39552-39598]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[39615-39651]:VariableDeclarationStatement[39615-39651]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[39668-39687]:ExpressionStatement[39668-39687]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "info" : "ExpressionStatement[39704-39764]:ExpressionStatement[39704-39764]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[39781-39795]:ReturnStatement[39781-39795]"
    }, {
      "left" : "Dfp a = newInstance(this);",
      "right" : "Dfp a = newInstance(this);",
      "info" : "VariableDeclarationStatement[39865-39891]:VariableDeclarationStatement[39865-39891]"
    }, {
      "left" : "Dfp b = newInstance(x);",
      "right" : "Dfp b = newInstance(x);",
      "info" : "VariableDeclarationStatement[39900-39923]:VariableDeclarationStatement[39900-39923]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[39976-40012]:VariableDeclarationStatement[39976-40012]"
    }, {
      "left" : "final byte asign = a.sign;",
      "right" : "final byte asign = a.sign;",
      "info" : "VariableDeclarationStatement[40087-40113]:VariableDeclarationStatement[40087-40113]"
    }, {
      "left" : "final byte bsign = b.sign;",
      "right" : "final byte bsign = b.sign;",
      "info" : "VariableDeclarationStatement[40122-40148]:VariableDeclarationStatement[40122-40148]"
    }, {
      "left" : "a.sign = 1;",
      "right" : "a.sign = 1;",
      "info" : "ExpressionStatement[40158-40169]:ExpressionStatement[40158-40169]"
    }, {
      "left" : "b.sign = 1;",
      "right" : "b.sign = 1;",
      "info" : "ExpressionStatement[40178-40189]:ExpressionStatement[40178-40189]"
    }, {
      "left" : "byte rsign = bsign;",
      "right" : "byte rsign = bsign;",
      "info" : "VariableDeclarationStatement[40276-40295]:VariableDeclarationStatement[40276-40295]"
    }, {
      "left" : "if (compare(a, b) > 0)",
      "right" : "if (compare(a, b) > 0)",
      "info" : "IfStatement[40304-40365]:IfStatement[40304-40365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40327-40365]:Block[40327-40365]"
    }, {
      "left" : "rsign = asign;",
      "right" : "rsign = asign;",
      "info" : "ExpressionStatement[40341-40355]:ExpressionStatement[40341-40355]"
    }, {
      "left" : "if (b.mant[mant.length-1] == 0)",
      "right" : "if (b.mant[mant.length-1] == 0)",
      "info" : "IfStatement[40585-40655]:IfStatement[40585-40655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40617-40655]:Block[40617-40655]"
    }, {
      "left" : "b.exp = a.exp;",
      "right" : "b.exp = a.exp;",
      "info" : "ExpressionStatement[40631-40645]:ExpressionStatement[40631-40645]"
    }, {
      "left" : "if (a.mant[mant.length-1] == 0)",
      "right" : "if (a.mant[mant.length-1] == 0)",
      "info" : "IfStatement[40665-40735]:IfStatement[40665-40735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40697-40735]:Block[40697-40735]"
    }, {
      "left" : "a.exp = b.exp;",
      "right" : "a.exp = b.exp;",
      "info" : "ExpressionStatement[40711-40725]:ExpressionStatement[40711-40725]"
    }, {
      "left" : "int aextradigit = 0;",
      "right" : "int aextradigit = 0;",
      "info" : "VariableDeclarationStatement[40798-40818]:VariableDeclarationStatement[40798-40818]"
    }, {
      "left" : "int bextradigit = 0;",
      "right" : "int bextradigit = 0;",
      "info" : "VariableDeclarationStatement[40827-40847]:VariableDeclarationStatement[40827-40847]"
    }, {
      "left" : "if (a.exp < b.exp)",
      "right" : "if (a.exp < b.exp)",
      "info" : "IfStatement[40856-40987]:IfStatement[40856-40987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40875-40928]:Block[40875-40928]"
    }, {
      "left" : "aextradigit = a.align(b.exp);",
      "right" : "aextradigit = a.align(b.exp);",
      "info" : "ExpressionStatement[40889-40918]:ExpressionStatement[40889-40918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40934-40987]:Block[40934-40987]"
    }, {
      "left" : "bextradigit = b.align(a.exp);",
      "right" : "bextradigit = b.align(a.exp);",
      "info" : "ExpressionStatement[40948-40977]:ExpressionStatement[40948-40977]"
    }, {
      "left" : "if (asign != bsign)",
      "right" : "if (asign != bsign)",
      "info" : "IfStatement[41072-41286]:IfStatement[41072-41286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41092-41286]:Block[41092-41286]"
    }, {
      "left" : "if (asign == rsign)",
      "right" : "if (asign == rsign)",
      "info" : "IfStatement[41106-41276]:IfStatement[41106-41276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41126-41198]:Block[41126-41198]"
    }, {
      "left" : "bextradigit = b.complement(bextradigit);",
      "right" : "bextradigit = b.complement(bextradigit);",
      "info" : "ExpressionStatement[41144-41184]:ExpressionStatement[41144-41184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41204-41276]:Block[41204-41276]"
    }, {
      "left" : "aextradigit = a.complement(aextradigit);",
      "right" : "aextradigit = a.complement(aextradigit);",
      "info" : "ExpressionStatement[41222-41262]:ExpressionStatement[41222-41262]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[41328-41339]:VariableDeclarationStatement[41328-41339]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[41370-41542]:ForStatement[41370-41542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41408-41542]:Block[41408-41542]"
    }, {
      "left" : "final int r = a.mant[i]+b.mant[i]+rh;",
      "right" : "final int r = a.mant[i]+b.mant[i]+rh;",
      "info" : "VariableDeclarationStatement[41422-41459]:VariableDeclarationStatement[41422-41459]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[41472-41487]:ExpressionStatement[41472-41487]"
    }, {
      "left" : "result.mant[i] = r - rh * RADIX;",
      "right" : "result.mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[41500-41532]:ExpressionStatement[41500-41532]"
    }, {
      "left" : "result.exp = a.exp;",
      "right" : "result.exp = a.exp;",
      "info" : "ExpressionStatement[41551-41570]:ExpressionStatement[41551-41570]"
    }, {
      "left" : "result.sign = rsign;",
      "right" : "result.sign = rsign;",
      "info" : "ExpressionStatement[41579-41599]:ExpressionStatement[41579-41599]"
    }, {
      "left" : "if (rh != 0 && (asign == bsign))",
      "right" : "if (rh != 0 && (asign == bsign))",
      "info" : "IfStatement[41724-42053]:IfStatement[41724-42053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41757-42053]:Block[41757-42053]"
    }, {
      "left" : "final int lostdigit = result.mant[0];",
      "right" : "final int lostdigit = result.mant[0];",
      "info" : "VariableDeclarationStatement[41771-41808]:VariableDeclarationStatement[41771-41808]"
    }, {
      "left" : "result.shiftRight();",
      "right" : "result.shiftRight();",
      "info" : "ExpressionStatement[41821-41841]:ExpressionStatement[41821-41841]"
    }, {
      "left" : "result.mant[mant.length-1] = rh;",
      "right" : "result.mant[mant.length-1] = rh;",
      "info" : "ExpressionStatement[41854-41886]:ExpressionStatement[41854-41886]"
    }, {
      "left" : "final int excp = result.round(lostdigit);",
      "right" : "final int excp = result.round(lostdigit);",
      "info" : "VariableDeclarationStatement[41899-41940]:VariableDeclarationStatement[41899-41940]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[41953-42043]:IfStatement[41953-42043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41968-42043]:Block[41968-42043]"
    }, {
      "left" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "right" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "info" : "ExpressionStatement[41986-42029]:ExpressionStatement[41986-42029]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[42098-42431]:ForStatement[42098-42431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42136-42431]:Block[42136-42431]"
    }, {
      "left" : "if (result.mant[mant.length-1] != 0)",
      "right" : "if (result.mant[mant.length-1] != 0)",
      "info" : "IfStatement[42150-42225]:IfStatement[42150-42225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42187-42225]:Block[42187-42225]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42205-42211]:BreakStatement[42205-42211]"
    }, {
      "left" : "result.shiftLeft();",
      "right" : "result.shiftLeft();",
      "info" : "ExpressionStatement[42238-42257]:ExpressionStatement[42238-42257]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[42270-42421]:IfStatement[42270-42421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42282-42421]:Block[42282-42421]"
    }, {
      "left" : "result.mant[0] = aextradigit+bextradigit;",
      "right" : "result.mant[0] = aextradigit+bextradigit;",
      "info" : "ExpressionStatement[42300-42341]:ExpressionStatement[42300-42341]"
    }, {
      "left" : "aextradigit = 0;",
      "right" : "aextradigit = 0;",
      "info" : "ExpressionStatement[42358-42374]:ExpressionStatement[42358-42374]"
    }, {
      "left" : "bextradigit = 0;",
      "right" : "bextradigit = 0;",
      "info" : "ExpressionStatement[42391-42407]:ExpressionStatement[42391-42407]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[42521-42781]:IfStatement[42521-42781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42558-42781]:Block[42558-42781]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[42572-42587]:ExpressionStatement[42572-42587]"
    }, {
      "left" : "if (asign != bsign)",
      "right" : "if (asign != bsign)",
      "info" : "IfStatement[42601-42771]:IfStatement[42601-42771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42621-42771]:Block[42621-42771]"
    }, {
      "left" : "result.sign = 1;",
      "right" : "result.sign = 1;",
      "info" : "ExpressionStatement[42707-42723]:ExpressionStatement[42707-42723]"
    }, {
      "left" : "final int excp = result.round(aextradigit + bextradigit);",
      "right" : "final int excp = result.round(aextradigit + bextradigit);",
      "info" : "VariableDeclarationStatement[42845-42902]:VariableDeclarationStatement[42845-42902]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[42911-42993]:IfStatement[42911-42993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42926-42993]:Block[42926-42993]"
    }, {
      "left" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "right" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "info" : "ExpressionStatement[42940-42983]:ExpressionStatement[42940-42983]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[43003-43017]:ReturnStatement[43003-43017]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43146-43152]:Modifier[43146-43152]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[43153-43156]:SimpleType[43153-43156]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[43157-43163]:SimpleName[43157-43163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43166-43280]:Block[43166-43280]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[43176-43207]:VariableDeclarationStatement[43176-43207]"
    }, {
      "left" : "result.sign = (byte) - result.sign;",
      "right" : "result.sign = (byte) - result.sign;",
      "info" : "ExpressionStatement[43216-43251]:ExpressionStatement[43216-43251]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[43260-43274]:ReturnStatement[43260-43274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43399-43405]:Modifier[43399-43405]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[43406-43409]:SimpleType[43406-43409]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[43410-43418]:SimpleName[43410-43418]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[43419-43430]:SingleVariableDeclaration[43419-43430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43432-43471]:Block[43432-43471]"
    }, {
      "left" : "return add(x.negate());",
      "right" : "return add(x.negate());",
      "info" : "ReturnStatement[43442-43465]:ReturnStatement[43442-43465]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[43634-43643]:Modifier[43634-43643]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[43644-43647]:PrimitiveType[43644-43647]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[43648-43653]:SimpleName[43648-43653]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[43654-43659]:SingleVariableDeclaration[43654-43659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43661-45675]:Block[43661-45675]"
    }, {
      "left" : "boolean inc = false;",
      "right" : "boolean inc = false;",
      "info" : "VariableDeclarationStatement[43671-43691]:VariableDeclarationStatement[43671-43691]"
    }, {
      "left" : "switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }",
      "right" : "switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }",
      "info" : "SwitchStatement[43700-44687]:SwitchStatement[43700-44687]"
    }, {
      "left" : "case ROUND_DOWN:",
      "right" : "case ROUND_DOWN:",
      "info" : "SwitchCase[43747-43763]:SwitchCase[43747-43763]"
    }, {
      "left" : "inc = false;",
      "right" : "inc = false;",
      "info" : "ExpressionStatement[43780-43792]:ExpressionStatement[43780-43792]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43809-43815]:BreakStatement[43809-43815]"
    }, {
      "left" : "case ROUND_UP:",
      "right" : "case ROUND_UP:",
      "info" : "SwitchCase[43829-43843]:SwitchCase[43829-43843]"
    }, {
      "left" : "inc = n != 0;",
      "right" : "inc = n != 0;",
      "info" : "ExpressionStatement[43860-43873]:ExpressionStatement[43860-43873]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43916-43922]:BreakStatement[43916-43922]"
    }, {
      "left" : "case ROUND_HALF_UP:",
      "right" : "case ROUND_HALF_UP:",
      "info" : "SwitchCase[43936-43955]:SwitchCase[43936-43955]"
    }, {
      "left" : "inc = n >= 5000;",
      "right" : "inc = n >= 5000;",
      "info" : "ExpressionStatement[43972-43988]:ExpressionStatement[43972-43988]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44023-44029]:BreakStatement[44023-44029]"
    }, {
      "left" : "case ROUND_HALF_DOWN:",
      "right" : "case ROUND_HALF_DOWN:",
      "info" : "SwitchCase[44043-44064]:SwitchCase[44043-44064]"
    }, {
      "left" : "inc = n > 5000;",
      "right" : "inc = n > 5000;",
      "info" : "ExpressionStatement[44081-44096]:ExpressionStatement[44081-44096]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44133-44139]:BreakStatement[44133-44139]"
    }, {
      "left" : "case ROUND_HALF_EVEN:",
      "right" : "case ROUND_HALF_EVEN:",
      "info" : "SwitchCase[44153-44174]:SwitchCase[44153-44174]"
    }, {
      "left" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);",
      "right" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);",
      "info" : "ExpressionStatement[44191-44243]:ExpressionStatement[44191-44243]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44280-44286]:BreakStatement[44280-44286]"
    }, {
      "left" : "case ROUND_HALF_ODD:",
      "right" : "case ROUND_HALF_ODD:",
      "info" : "SwitchCase[44300-44320]:SwitchCase[44300-44320]"
    }, {
      "left" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);",
      "right" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);",
      "info" : "ExpressionStatement[44337-44389]:ExpressionStatement[44337-44389]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44425-44431]:BreakStatement[44425-44431]"
    }, {
      "left" : "case ROUND_CEIL:",
      "right" : "case ROUND_CEIL:",
      "info" : "SwitchCase[44445-44461]:SwitchCase[44445-44461]"
    }, {
      "left" : "inc = sign == 1 && n != 0;",
      "right" : "inc = sign == 1 && n != 0;",
      "info" : "ExpressionStatement[44478-44504]:ExpressionStatement[44478-44504]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44536-44542]:BreakStatement[44536-44542]"
    }, {
      "left" : "case ROUND_FLOOR:",
      "right" : "case ROUND_FLOOR:",
      "info" : "SwitchCase[44556-44573]:SwitchCase[44556-44573]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44586-44594]:SwitchCase[44586-44594]"
    }, {
      "left" : "inc = sign == -1 && n != 0;",
      "right" : "inc = sign == -1 && n != 0;",
      "info" : "ExpressionStatement[44611-44638]:ExpressionStatement[44611-44638]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44671-44677]:BreakStatement[44671-44677]"
    }, {
      "left" : "if (inc)",
      "right" : "if (inc)",
      "info" : "IfStatement[44697-45077]:IfStatement[44697-45077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44706-45077]:Block[44706-45077]"
    }, {
      "left" : "int rh = 1;",
      "right" : "int rh = 1;",
      "info" : "VariableDeclarationStatement[44758-44769]:VariableDeclarationStatement[44758-44769]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[44782-44953]:ForStatement[44782-44953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44820-44953]:Block[44820-44953]"
    }, {
      "left" : "final int r = mant[i] + rh;",
      "right" : "final int r = mant[i] + rh;",
      "info" : "VariableDeclarationStatement[44838-44865]:VariableDeclarationStatement[44838-44865]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[44882-44897]:ExpressionStatement[44882-44897]"
    }, {
      "left" : "mant[i] = r - rh * RADIX;",
      "right" : "mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[44914-44939]:ExpressionStatement[44914-44939]"
    }, {
      "left" : "if (rh != 0)",
      "right" : "if (rh != 0)",
      "info" : "IfStatement[44967-45067]:IfStatement[44967-45067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44980-45067]:Block[44980-45067]"
    }, {
      "left" : "shiftRight();",
      "right" : "shiftRight();",
      "info" : "ExpressionStatement[44998-45011]:ExpressionStatement[44998-45011]"
    }, {
      "left" : "mant[mant.length-1] = rh;",
      "right" : "mant[mant.length-1] = rh;",
      "info" : "ExpressionStatement[45028-45053]:ExpressionStatement[45028-45053]"
    }, {
      "left" : "if (exp < MIN_EXP)",
      "right" : "if (exp < MIN_EXP)",
      "info" : "IfStatement[45157-45325]:IfStatement[45157-45325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45176-45325]:Block[45176-45325]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);",
      "info" : "ExpressionStatement[45223-45271]:ExpressionStatement[45223-45271]"
    }, {
      "left" : "return DfpField.FLAG_UNDERFLOW;",
      "right" : "return DfpField.FLAG_UNDERFLOW;",
      "info" : "ReturnStatement[45284-45315]:ReturnStatement[45284-45315]"
    }, {
      "left" : "if (exp > MAX_EXP)",
      "right" : "if (exp > MAX_EXP)",
      "info" : "IfStatement[45335-45492]:IfStatement[45335-45492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45354-45492]:Block[45354-45492]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);",
      "info" : "ExpressionStatement[45392-45439]:ExpressionStatement[45392-45439]"
    }, {
      "left" : "return DfpField.FLAG_OVERFLOW;",
      "right" : "return DfpField.FLAG_OVERFLOW;",
      "info" : "ReturnStatement[45452-45482]:ReturnStatement[45452-45482]"
    }, {
      "left" : "if (n != 0)",
      "right" : "if (n != 0)",
      "info" : "IfStatement[45502-45649]:IfStatement[45502-45649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45514-45649]:Block[45514-45649]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[45551-45597]:ExpressionStatement[45551-45597]"
    }, {
      "left" : "return DfpField.FLAG_INEXACT;",
      "right" : "return DfpField.FLAG_INEXACT;",
      "info" : "ReturnStatement[45610-45639]:ReturnStatement[45610-45639]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[45659-45668]:ReturnStatement[45659-45668]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45783-45789]:Modifier[45783-45789]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[45790-45793]:SimpleType[45790-45793]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[45794-45802]:SimpleName[45794-45802]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[45803-45814]:SingleVariableDeclaration[45803-45814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45816-49189]:Block[45816-49189]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[45893-46182]:IfStatement[45893-46182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45949-46182]:Block[45949-46182]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[45963-46009]:ExpressionStatement[45963-46009]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[46022-46064]:VariableDeclarationStatement[46022-46064]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[46077-46096]:ExpressionStatement[46077-46096]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "info" : "ReturnStatement[46109-46172]:ReturnStatement[46109-46172]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[46192-46228]:VariableDeclarationStatement[46192-46228]"
    }, {
      "left" : "if (nans != FINITE || x.nans != FINITE)",
      "right" : "if (nans != FINITE || x.nans != FINITE)",
      "info" : "IfStatement[46273-47577]:IfStatement[46273-47577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46313-47577]:Block[46313-47577]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[46327-46384]:IfStatement[46327-46384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46340-46384]:Block[46340-46384]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[46358-46370]:ReturnStatement[46358-46370]"
    }, {
      "left" : "if (x.isNaN())",
      "right" : "if (x.isNaN())",
      "info" : "IfStatement[46398-46454]:IfStatement[46398-46454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46413-46454]:Block[46413-46454]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[46431-46440]:ReturnStatement[46431-46440]"
    }, {
      "left" : "if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0)",
      "right" : "if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0)",
      "info" : "IfStatement[46468-46684]:IfStatement[46468-46684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46540-46684]:Block[46540-46684]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[46558-46585]:ExpressionStatement[46558-46585]"
    }, {
      "left" : "result.sign = (byte) (sign * x.sign);",
      "right" : "result.sign = (byte) (sign * x.sign);",
      "info" : "ExpressionStatement[46602-46639]:ExpressionStatement[46602-46639]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[46656-46670]:ReturnStatement[46656-46670]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0)",
      "right" : "if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0)",
      "info" : "IfStatement[46698-46909]:IfStatement[46698-46909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46768-46909]:Block[46768-46909]"
    }, {
      "left" : "result = newInstance(x);",
      "right" : "result = newInstance(x);",
      "info" : "ExpressionStatement[46786-46810]:ExpressionStatement[46786-46810]"
    }, {
      "left" : "result.sign = (byte) (sign * x.sign);",
      "right" : "result.sign = (byte) (sign * x.sign);",
      "info" : "ExpressionStatement[46827-46864]:ExpressionStatement[46827-46864]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[46881-46895]:ReturnStatement[46881-46895]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == INFINITE)",
      "right" : "if (x.nans == INFINITE && nans == INFINITE)",
      "info" : "IfStatement[46923-47111]:IfStatement[46923-47111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46967-47111]:Block[46967-47111]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[46985-47012]:ExpressionStatement[46985-47012]"
    }, {
      "left" : "result.sign = (byte) (sign * x.sign);",
      "right" : "result.sign = (byte) (sign * x.sign);",
      "info" : "ExpressionStatement[47029-47066]:ExpressionStatement[47029-47066]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47083-47097]:ReturnStatement[47083-47097]"
    }, {
      "left" : "if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0))",
      "right" : "if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0))",
      "info" : "IfStatement[47125-47567]:IfStatement[47125-47567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47291-47567]:Block[47291-47567]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[47309-47355]:ExpressionStatement[47309-47355]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[47372-47404]:ExpressionStatement[47372-47404]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[47421-47440]:ExpressionStatement[47421-47440]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "info" : "ExpressionStatement[47457-47522]:ExpressionStatement[47457-47522]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47539-47553]:ReturnStatement[47539-47553]"
    }, {
      "left" : "int[] product = new int[mant.length*2];",
      "right" : "int[] product = new int[mant.length*2];",
      "info" : "VariableDeclarationStatement[47587-47626]:VariableDeclarationStatement[47587-47626]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[47683-48118]:ForStatement[47683-48118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47721-48118]:Block[47721-48118]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[47735-47746]:VariableDeclarationStatement[47735-47746]"
    }, {
      "left" : "for (int j=0; j<mant.length; j++)",
      "right" : "for (int j=0; j<mant.length; j++)",
      "info" : "ForStatement[47779-48067]:ForStatement[47779-48067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47813-48067]:Block[47813-48067]"
    }, {
      "left" : "int r = mant[i] * x.mant[j];",
      "right" : "int r = mant[i] * x.mant[j];",
      "info" : "VariableDeclarationStatement[47831-47859]:VariableDeclarationStatement[47831-47859]"
    }, {
      "left" : "r = r + product[i+j] + rh;",
      "right" : "r = r + product[i+j] + rh;",
      "info" : "ExpressionStatement[47904-47930]:ExpressionStatement[47904-47930]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[47991-48006]:ExpressionStatement[47991-48006]"
    }, {
      "left" : "product[i+j] = r - rh * RADIX;",
      "right" : "product[i+j] = r - rh * RADIX;",
      "info" : "ExpressionStatement[48023-48053]:ExpressionStatement[48023-48053]"
    }, {
      "left" : "product[i+mant.length] = rh;",
      "right" : "product[i+mant.length] = rh;",
      "info" : "ExpressionStatement[48080-48108]:ExpressionStatement[48080-48108]"
    }, {
      "left" : "int md = mant.length * 2 - 1;",
      "right" : "int md = mant.length * 2 - 1;",
      "info" : "VariableDeclarationStatement[48163-48192]:VariableDeclarationStatement[48163-48192]"
    }, {
      "left" : "for (int i = mant.length * 2 - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length * 2 - 1; i >= 0; i--)",
      "info" : "ForStatement[48237-48391]:ForStatement[48237-48391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48284-48391]:Block[48284-48391]"
    }, {
      "left" : "if (product[i] != 0)",
      "right" : "if (product[i] != 0)",
      "info" : "IfStatement[48298-48381]:IfStatement[48298-48381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48319-48381]:Block[48319-48381]"
    }, {
      "left" : "md = i;",
      "right" : "md = i;",
      "info" : "ExpressionStatement[48337-48344]:ExpressionStatement[48337-48344]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48361-48367]:BreakStatement[48361-48367]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[48444-48557]:ForStatement[48444-48557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48482-48557]:Block[48482-48557]"
    }, {
      "left" : "result.mant[mant.length - i - 1] = product[md - i];",
      "right" : "result.mant[mant.length - i - 1] = product[md - i];",
      "info" : "ExpressionStatement[48496-48547]:ExpressionStatement[48496-48547]"
    }, {
      "left" : "result.exp = exp + x.exp + md - 2 * mant.length + 1;",
      "right" : "result.exp = exp + x.exp + md - 2 * mant.length + 1;",
      "info" : "ExpressionStatement[48598-48650]:ExpressionStatement[48598-48650]"
    }, {
      "left" : "result.sign = (byte)((sign == x.sign)?1:-1);",
      "right" : "result.sign = (byte)((sign == x.sign)?1:-1);",
      "info" : "ExpressionStatement[48659-48703]:ExpressionStatement[48659-48703]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[48713-48839]:IfStatement[48713-48839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48750-48839]:Block[48750-48839]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[48814-48829]:ExpressionStatement[48814-48829]"
    }, {
      "left" : "final int excp;",
      "right" : "final int excp;",
      "info" : "VariableDeclarationStatement[48849-48864]:VariableDeclarationStatement[48849-48864]"
    }, {
      "left" : "if (md > (mant.length-1))",
      "right" : "if (md > (mant.length-1))",
      "info" : "IfStatement[48873-49061]:IfStatement[48873-49061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48899-48968]:Block[48899-48968]"
    }, {
      "left" : "excp = result.round(product[md-mant.length]);",
      "right" : "excp = result.round(product[md-mant.length]);",
      "info" : "ExpressionStatement[48913-48958]:ExpressionStatement[48913-48958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48974-49061]:Block[48974-49061]"
    }, {
      "left" : "excp = result.round(0);",
      "right" : "excp = result.round(0);",
      "info" : "ExpressionStatement[48988-49011]:ExpressionStatement[48988-49011]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[49071-49158]:IfStatement[49071-49158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49086-49158]:Block[49086-49158]"
    }, {
      "left" : "result = dotrap(excp, MULTIPLY_TRAP, x, result);",
      "right" : "result = dotrap(excp, MULTIPLY_TRAP, x, result);",
      "info" : "ExpressionStatement[49100-49148]:ExpressionStatement[49100-49148]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[49168-49182]:ReturnStatement[49168-49182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49312-49318]:Modifier[49312-49318]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[49319-49322]:SimpleType[49319-49322]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[49323-49331]:SimpleName[49323-49331]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[49332-49343]:SingleVariableDeclaration[49332-49343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49345-49388]:Block[49380-49427]"
    }, {
      "left" : "return multiplyFast(x);",
      "right" : "return multiplyFast(x);",
      "info" : "ReturnStatement[49359-49382]:ReturnStatement[49394-49417]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49582-49589]:Modifier[49689-49696]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[49590-49593]:SimpleType[49697-49700]"
    }, {
      "left" : "multiplyFast",
      "right" : "multiplyFast",
      "info" : "SimpleName[49594-49606]:SimpleName[49701-49713]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[49607-49618]:SingleVariableDeclaration[49714-49725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49620-51287]:Block[49727-51394]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[49630-49661]:VariableDeclarationStatement[49737-49768]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[49706-50286]:IfStatement[49813-50393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49726-50286]:Block[49833-50393]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[49740-49797]:IfStatement[49847-49904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49753-49797]:Block[49860-49904]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49771-49783]:ReturnStatement[49878-49890]"
    }, {
      "left" : "if (nans == INFINITE && x != 0)",
      "right" : "if (nans == INFINITE && x != 0)",
      "info" : "IfStatement[49811-49933]:IfStatement[49918-50040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49843-49933]:Block[49950-50040]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[49861-49888]:ExpressionStatement[49968-49995]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[49905-49919]:ReturnStatement[50012-50026]"
    }, {
      "left" : "if (nans == INFINITE && x == 0)",
      "right" : "if (nans == INFINITE && x == 0)",
      "info" : "IfStatement[49947-50276]:IfStatement[50054-50383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49979-50276]:Block[50086-50383]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[49997-50043]:ExpressionStatement[50104-50150]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[50060-50092]:ExpressionStatement[50167-50199]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[50109-50128]:ExpressionStatement[50216-50235]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",
      "info" : "ExpressionStatement[50145-50231]:ExpressionStatement[50252-50338]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50248-50262]:ReturnStatement[50355-50369]"
    }, {
      "left" : "if (x < 0 || x >= RADIX)",
      "right" : "if (x < 0 || x >= RADIX)",
      "info" : "IfStatement[50324-50606]:IfStatement[50431-50713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50349-50606]:Block[50456-50713]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[50363-50409]:ExpressionStatement[50470-50516]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[50422-50454]:ExpressionStatement[50529-50561]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[50467-50486]:ExpressionStatement[50574-50593]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",
      "info" : "ExpressionStatement[50499-50569]:ExpressionStatement[50606-50676]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50582-50596]:ReturnStatement[50689-50703]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[50616-50627]:VariableDeclarationStatement[50723-50734]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[50636-50802]:ForStatement[50743-50909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50674-50802]:Block[50781-50909]"
    }, {
      "left" : "final int r = mant[i] * x + rh;",
      "right" : "final int r = mant[i] * x + rh;",
      "info" : "VariableDeclarationStatement[50688-50719]:VariableDeclarationStatement[50795-50826]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[50732-50747]:ExpressionStatement[50839-50854]"
    }, {
      "left" : "result.mant[i] = r - rh * RADIX;",
      "right" : "result.mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[50760-50792]:ExpressionStatement[50867-50899]"
    }, {
      "left" : "int lostdigit = 0;",
      "right" : "int lostdigit = 0;",
      "info" : "VariableDeclarationStatement[50812-50830]:VariableDeclarationStatement[50919-50937]"
    }, {
      "left" : "if (rh != 0)",
      "right" : "if (rh != 0)",
      "info" : "IfStatement[50839-50981]:IfStatement[50946-51088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50852-50981]:Block[50959-51088]"
    }, {
      "left" : "lostdigit = result.mant[0];",
      "right" : "lostdigit = result.mant[0];",
      "info" : "ExpressionStatement[50866-50893]:ExpressionStatement[50973-51000]"
    }, {
      "left" : "result.shiftRight();",
      "right" : "result.shiftRight();",
      "info" : "ExpressionStatement[50906-50926]:ExpressionStatement[51013-51033]"
    }, {
      "left" : "result.mant[mant.length-1] = rh;",
      "right" : "result.mant[mant.length-1] = rh;",
      "info" : "ExpressionStatement[50939-50971]:ExpressionStatement[51046-51078]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[50991-51105]:IfStatement[51098-51212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51028-51105]:Block[51135-51212]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[51080-51095]:ExpressionStatement[51187-51202]"
    }, {
      "left" : "final int excp = result.round(lostdigit);",
      "right" : "final int excp = result.round(lostdigit);",
      "info" : "VariableDeclarationStatement[51115-51156]:VariableDeclarationStatement[51222-51263]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[51165-51257]:IfStatement[51272-51364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51180-51257]:Block[51287-51364]"
    }, {
      "left" : "result = dotrap(excp, MULTIPLY_TRAP, result, result);",
      "right" : "result = dotrap(excp, MULTIPLY_TRAP, result, result);",
      "info" : "ExpressionStatement[51194-51247]:ExpressionStatement[51301-51354]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[51267-51281]:ReturnStatement[51374-51388]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51406-51412]:Modifier[51513-51519]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[51413-51416]:SimpleType[51520-51523]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[51417-51423]:SimpleName[51524-51530]"
    }, {
      "left" : "Dfp divisor",
      "right" : "Dfp divisor",
      "info" : "SingleVariableDeclaration[51424-51435]:SingleVariableDeclaration[51531-51542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51437-58841]:Block[51544-58948]"
    }, {
      "left" : "int dividend[];",
      "right" : "int dividend[];",
      "info" : "VariableDeclarationStatement[51447-51462]:VariableDeclarationStatement[51554-51569]"
    }, {
      "left" : "int quotient[];",
      "right" : "int quotient[];",
      "info" : "VariableDeclarationStatement[51505-51520]:VariableDeclarationStatement[51612-51627]"
    }, {
      "left" : "int remainder[];",
      "right" : "int remainder[];",
      "info" : "VariableDeclarationStatement[51541-51557]:VariableDeclarationStatement[51648-51664]"
    }, {
      "left" : "int qd;",
      "right" : "int qd;",
      "info" : "VariableDeclarationStatement[51578-51585]:VariableDeclarationStatement[51685-51692]"
    }, {
      "left" : "int nsqd;",
      "right" : "int nsqd;",
      "info" : "VariableDeclarationStatement[51647-51656]:VariableDeclarationStatement[51754-51763]"
    }, {
      "left" : "int trial=0;",
      "right" : "int trial=0;",
      "info" : "VariableDeclarationStatement[51720-51732]:VariableDeclarationStatement[51827-51839]"
    }, {
      "left" : "int minadj;",
      "right" : "int minadj;",
      "info" : "VariableDeclarationStatement[51768-51779]:VariableDeclarationStatement[51875-51886]"
    }, {
      "left" : "boolean trialgood;",
      "right" : "boolean trialgood;",
      "info" : "VariableDeclarationStatement[51814-51832]:VariableDeclarationStatement[51921-51939]"
    }, {
      "left" : "int md=0;",
      "right" : "int md=0;",
      "info" : "VariableDeclarationStatement[51880-51889]:VariableDeclarationStatement[51987-51996]"
    }, {
      "left" : "int excp;",
      "right" : "int excp;",
      "info" : "VariableDeclarationStatement[51932-51941]:VariableDeclarationStatement[52039-52048]"
    }, {
      "left" : "if (field.getRadixDigits() != divisor.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != divisor.field.getRadixDigits())",
      "info" : "IfStatement[52037-52336]:IfStatement[52144-52443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52099-52336]:Block[52206-52443]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[52113-52159]:ExpressionStatement[52220-52266]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[52172-52214]:VariableDeclarationStatement[52279-52321]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[52227-52246]:ExpressionStatement[52334-52353]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "info" : "ReturnStatement[52259-52326]:ReturnStatement[52366-52433]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[52346-52382]:VariableDeclarationStatement[52453-52489]"
    }, {
      "left" : "if (nans != FINITE || divisor.nans != FINITE)",
      "right" : "if (nans != FINITE || divisor.nans != FINITE)",
      "info" : "IfStatement[52427-53409]:IfStatement[52534-53516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52473-53409]:Block[52580-53516]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[52487-52544]:IfStatement[52594-52651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52500-52544]:Block[52607-52651]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[52518-52530]:ReturnStatement[52625-52637]"
    }, {
      "left" : "if (divisor.isNaN())",
      "right" : "if (divisor.isNaN())",
      "info" : "IfStatement[52558-52626]:IfStatement[52665-52733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52579-52626]:Block[52686-52733]"
    }, {
      "left" : "return divisor;",
      "right" : "return divisor;",
      "info" : "ReturnStatement[52597-52612]:ReturnStatement[52704-52719]"
    }, {
      "left" : "if (nans == INFINITE && divisor.nans == FINITE)",
      "right" : "if (nans == INFINITE && divisor.nans == FINITE)",
      "info" : "IfStatement[52640-52838]:IfStatement[52747-52945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52688-52838]:Block[52795-52945]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[52706-52733]:ExpressionStatement[52813-52840]"
    }, {
      "left" : "result.sign = (byte) (sign * divisor.sign);",
      "right" : "result.sign = (byte) (sign * divisor.sign);",
      "info" : "ExpressionStatement[52750-52793]:ExpressionStatement[52857-52900]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[52810-52824]:ReturnStatement[52917-52931]"
    }, {
      "left" : "if (divisor.nans == INFINITE && nans == FINITE)",
      "right" : "if (divisor.nans == INFINITE && nans == FINITE)",
      "info" : "IfStatement[52852-53055]:IfStatement[52959-53162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52900-53055]:Block[53007-53162]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[52918-52950]:ExpressionStatement[53025-53057]"
    }, {
      "left" : "result.sign = (byte) (sign * divisor.sign);",
      "right" : "result.sign = (byte) (sign * divisor.sign);",
      "info" : "ExpressionStatement[52967-53010]:ExpressionStatement[53074-53117]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[53027-53041]:ReturnStatement[53134-53148]"
    }, {
      "left" : "if (divisor.nans == INFINITE && nans == INFINITE)",
      "right" : "if (divisor.nans == INFINITE && nans == INFINITE)",
      "info" : "IfStatement[53069-53399]:IfStatement[53176-53506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53119-53399]:Block[53226-53506]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[53137-53183]:ExpressionStatement[53244-53290]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[53200-53232]:ExpressionStatement[53307-53339]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[53249-53268]:ExpressionStatement[53356-53375]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "info" : "ExpressionStatement[53285-53354]:ExpressionStatement[53392-53461]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[53371-53385]:ReturnStatement[53478-53492]"
    }, {
      "left" : "if (divisor.mant[mant.length-1] == 0)",
      "right" : "if (divisor.mant[mant.length-1] == 0)",
      "info" : "IfStatement[53457-53813]:IfStatement[53564-53920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53495-53813]:Block[53602-53920]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "info" : "ExpressionStatement[53509-53556]:ExpressionStatement[53616-53663]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[53569-53601]:ExpressionStatement[53676-53708]"
    }, {
      "left" : "result.sign = (byte) (sign * divisor.sign);",
      "right" : "result.sign = (byte) (sign * divisor.sign);",
      "info" : "ExpressionStatement[53614-53657]:ExpressionStatement[53721-53764]"
    }, {
      "left" : "result.nans = INFINITE;",
      "right" : "result.nans = INFINITE;",
      "info" : "ExpressionStatement[53670-53693]:ExpressionStatement[53777-53800]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",
      "right" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",
      "info" : "ExpressionStatement[53706-53776]:ExpressionStatement[53813-53883]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[53789-53803]:ReturnStatement[53896-53910]"
    }, {
      "left" : "dividend = new int[mant.length+1];",
      "right" : "dividend = new int[mant.length+1];",
      "info" : "ExpressionStatement[53823-53857]:ExpressionStatement[53930-53964]"
    }, {
      "left" : "quotient = new int[mant.length+2];",
      "right" : "quotient = new int[mant.length+2];",
      "info" : "ExpressionStatement[53893-53927]:ExpressionStatement[54000-54034]"
    }, {
      "left" : "remainder = new int[mant.length+1];",
      "right" : "remainder = new int[mant.length+1];",
      "info" : "ExpressionStatement[53995-54030]:ExpressionStatement[54102-54137]"
    }, {
      "left" : "dividend[mant.length] = 0;",
      "right" : "dividend[mant.length] = 0;",
      "info" : "ExpressionStatement[54128-54154]:ExpressionStatement[54235-54261]"
    }, {
      "left" : "quotient[mant.length] = 0;",
      "right" : "quotient[mant.length] = 0;",
      "info" : "ExpressionStatement[54163-54189]:ExpressionStatement[54270-54296]"
    }, {
      "left" : "quotient[mant.length+1] = 0;",
      "right" : "quotient[mant.length+1] = 0;",
      "info" : "ExpressionStatement[54198-54226]:ExpressionStatement[54305-54333]"
    }, {
      "left" : "remainder[mant.length] = 0;",
      "right" : "remainder[mant.length] = 0;",
      "info" : "ExpressionStatement[54235-54262]:ExpressionStatement[54342-54369]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[54374-54517]:ForStatement[54481-54624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54412-54517]:Block[54519-54624]"
    }, {
      "left" : "dividend[i] = mant[i];",
      "right" : "dividend[i] = mant[i];",
      "info" : "ExpressionStatement[54426-54448]:ExpressionStatement[54533-54555]"
    }, {
      "left" : "quotient[i] = 0;",
      "right" : "quotient[i] = 0;",
      "info" : "ExpressionStatement[54461-54477]:ExpressionStatement[54568-54584]"
    }, {
      "left" : "remainder[i] = 0;",
      "right" : "remainder[i] = 0;",
      "info" : "ExpressionStatement[54490-54507]:ExpressionStatement[54597-54614]"
    }, {
      "left" : "nsqd = 0;",
      "right" : "nsqd = 0;",
      "info" : "ExpressionStatement[54578-54587]:ExpressionStatement[54685-54694]"
    }, {
      "left" : "for (qd = mant.length+1; qd >= 0; qd--)",
      "right" : "for (qd = mant.length+1; qd >= 0; qd--)",
      "info" : "ForStatement[54596-57872]:ForStatement[54703-57979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54636-57872]:Block[54743-57979]"
    }, {
      "left" : "final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];",
      "right" : "final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];",
      "info" : "VariableDeclarationStatement[54764-54835]:VariableDeclarationStatement[54871-54942]"
    }, {
      "left" : "int min = divMsb       / (divisor.mant[mant.length-1]+1);",
      "right" : "int min = divMsb       / (divisor.mant[mant.length-1]+1);",
      "info" : "VariableDeclarationStatement[54848-54905]:VariableDeclarationStatement[54955-55012]"
    }, {
      "left" : "int max = (divMsb + 1) / divisor.mant[mant.length-1];",
      "right" : "int max = (divMsb + 1) / divisor.mant[mant.length-1];",
      "info" : "VariableDeclarationStatement[54918-54971]:VariableDeclarationStatement[55025-55078]"
    }, {
      "left" : "trialgood = false;",
      "right" : "trialgood = false;",
      "info" : "ExpressionStatement[54985-55003]:ExpressionStatement[55092-55110]"
    }, {
      "left" : "while (!trialgood)",
      "right" : "while (!trialgood)",
      "info" : "WhileStatement[55016-57181]:WhileStatement[55123-57288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55035-57181]:Block[55142-57288]"
    }, {
      "left" : "trial = (min+max)/2;",
      "right" : "trial = (min+max)/2;",
      "info" : "ExpressionStatement[55085-55105]:ExpressionStatement[55192-55212]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[55188-55199]:VariableDeclarationStatement[55295-55306]"
    }, {
      "left" : "for (int i = 0; i < mant.length + 1; i++)",
      "right" : "for (int i = 0; i < mant.length + 1; i++)",
      "info" : "ForStatement[55216-55481]:ForStatement[55323-55588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55258-55481]:Block[55365-55588]"
    }, {
      "left" : "int dm = (i<mant.length)?divisor.mant[i]:0;",
      "right" : "int dm = (i<mant.length)?divisor.mant[i]:0;",
      "info" : "VariableDeclarationStatement[55280-55323]:VariableDeclarationStatement[55387-55430]"
    }, {
      "left" : "final int r = (dm * trial) + rh;",
      "right" : "final int r = (dm * trial) + rh;",
      "info" : "VariableDeclarationStatement[55344-55376]:VariableDeclarationStatement[55451-55483]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[55397-55412]:ExpressionStatement[55504-55519]"
    }, {
      "left" : "remainder[i] = r - rh * RADIX;",
      "right" : "remainder[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[55433-55463]:ExpressionStatement[55540-55570]"
    }, {
      "left" : "rh = 1;",
      "right" : "rh = 1;",
      "info" : "ExpressionStatement[55562-55569]:ExpressionStatement[55669-55676]"
    }, {
      "left" : "for (int i = 0; i < mant.length + 1; i++)",
      "right" : "for (int i = 0; i < mant.length + 1; i++)",
      "info" : "ForStatement[55622-55851]:ForStatement[55729-55958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55664-55851]:Block[55771-55958]"
    }, {
      "left" : "final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;",
      "right" : "final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;",
      "info" : "VariableDeclarationStatement[55686-55746]:VariableDeclarationStatement[55793-55853]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[55767-55782]:ExpressionStatement[55874-55889]"
    }, {
      "left" : "remainder[i] = r - rh * RADIX;",
      "right" : "remainder[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[55803-55833]:ExpressionStatement[55910-55940]"
    }, {
      "left" : "if (rh == 0)",
      "right" : "if (rh == 0)",
      "info" : "IfStatement[55922-56081]:IfStatement[56029-56188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55935-56081]:Block[56042-56188]"
    }, {
      "left" : "max = trial-1;",
      "right" : "max = trial-1;",
      "info" : "ExpressionStatement[56019-56033]:ExpressionStatement[56126-56140]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[56054-56063]:ContinueStatement[56161-56170]"
    }, {
      "left" : "minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];",
      "right" : "minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];",
      "info" : "ExpressionStatement[56177-56244]:ExpressionStatement[56284-56351]"
    }, {
      "left" : "minadj = minadj / (divisor.mant[mant.length-1]+1);",
      "right" : "minadj = minadj / (divisor.mant[mant.length-1]+1);",
      "info" : "ExpressionStatement[56261-56311]:ExpressionStatement[56368-56418]"
    }, {
      "left" : "if (minadj >= 2)",
      "right" : "if (minadj >= 2)",
      "info" : "IfStatement[56329-56458]:IfStatement[56436-56565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56346-56458]:Block[56453-56565]"
    }, {
      "left" : "min = trial+minadj;",
      "right" : "min = trial+minadj;",
      "info" : "ExpressionStatement[56368-56387]:ExpressionStatement[56475-56494]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[56431-56440]:ContinueStatement[56538-56547]"
    }, {
      "left" : "trialgood = false;",
      "right" : "trialgood = false;",
      "info" : "ExpressionStatement[56615-56633]:ExpressionStatement[56722-56740]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[56667-56962]:ForStatement[56774-57069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56710-56962]:Block[56817-57069]"
    }, {
      "left" : "if (divisor.mant[i] > remainder[i])",
      "right" : "if (divisor.mant[i] > remainder[i])",
      "info" : "IfStatement[56732-56833]:IfStatement[56839-56940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56768-56833]:Block[56875-56940]"
    }, {
      "left" : "trialgood = true;",
      "right" : "trialgood = true;",
      "info" : "ExpressionStatement[56794-56811]:ExpressionStatement[56901-56918]"
    }, {
      "left" : "if (divisor.mant[i] < remainder[i])",
      "right" : "if (divisor.mant[i] < remainder[i])",
      "info" : "IfStatement[56854-56944]:IfStatement[56961-57051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56890-56944]:Block[56997-57051]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56916-56922]:BreakStatement[57023-57029]"
    }, {
      "left" : "if (remainder[mant.length] != 0)",
      "right" : "if (remainder[mant.length] != 0)",
      "info" : "IfStatement[56980-57071]:IfStatement[57087-57178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57013-57071]:Block[57120-57178]"
    }, {
      "left" : "trialgood = false;",
      "right" : "trialgood = false;",
      "info" : "ExpressionStatement[57035-57053]:ExpressionStatement[57142-57160]"
    }, {
      "left" : "if (trialgood == false)",
      "right" : "if (trialgood == false)",
      "info" : "IfStatement[57089-57167]:IfStatement[57196-57274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57113-57167]:Block[57220-57274]"
    }, {
      "left" : "min = trial+1;",
      "right" : "min = trial+1;",
      "info" : "ExpressionStatement[57135-57149]:ExpressionStatement[57242-57256]"
    }, {
      "left" : "quotient[qd] = trial;",
      "right" : "quotient[qd] = trial;",
      "info" : "ExpressionStatement[57236-57257]:ExpressionStatement[57343-57364]"
    }, {
      "left" : "if (trial != 0 || nsqd != 0)",
      "right" : "if (trial != 0 || nsqd != 0)",
      "info" : "IfStatement[57270-57338]:IfStatement[57377-57445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57299-57338]:Block[57406-57445]"
    }, {
      "left" : "nsqd++;",
      "right" : "nsqd++;",
      "info" : "ExpressionStatement[57317-57324]:ExpressionStatement[57424-57431]"
    }, {
      "left" : "if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length)",
      "right" : "if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length)",
      "info" : "IfStatement[57352-57526]:IfStatement[57459-57633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57440-57526]:Block[57547-57633]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57506-57512]:BreakStatement[57613-57619]"
    }, {
      "left" : "if (nsqd > mant.length)",
      "right" : "if (nsqd > mant.length)",
      "info" : "IfStatement[57540-57643]:IfStatement[57647-57750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57564-57643]:Block[57671-57750]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57623-57629]:BreakStatement[57730-57736]"
    }, {
      "left" : "dividend[0] = 0;",
      "right" : "dividend[0] = 0;",
      "info" : "ExpressionStatement[57732-57748]:ExpressionStatement[57839-57855]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[57761-57862]:ForStatement[57868-57969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57799-57862]:Block[57906-57969]"
    }, {
      "left" : "dividend[i + 1] = remainder[i];",
      "right" : "dividend[i + 1] = remainder[i];",
      "info" : "ExpressionStatement[57817-57848]:ExpressionStatement[57924-57955]"
    }, {
      "left" : "md = mant.length;",
      "right" : "md = mant.length;",
      "info" : "ExpressionStatement[57920-57937]:ExpressionStatement[58027-58044]"
    }, {
      "left" : "for (int i = mant.length + 1; i >= 0; i--)",
      "right" : "for (int i = mant.length + 1; i >= 0; i--)",
      "info" : "ForStatement[57958-58109]:ForStatement[58065-58216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58001-58109]:Block[58108-58216]"
    }, {
      "left" : "if (quotient[i] != 0)",
      "right" : "if (quotient[i] != 0)",
      "info" : "IfStatement[58015-58099]:IfStatement[58122-58206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58037-58099]:Block[58144-58206]"
    }, {
      "left" : "md = i;",
      "right" : "md = i;",
      "info" : "ExpressionStatement[58055-58062]:ExpressionStatement[58162-58169]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58079-58085]:BreakStatement[58186-58192]"
    }, {
      "left" : "for (int i=0; i<mant.length; i++)",
      "right" : "for (int i=0; i<mant.length; i++)",
      "info" : "ForStatement[58165-58269]:ForStatement[58272-58376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58199-58269]:Block[58306-58376]"
    }, {
      "left" : "result.mant[mant.length-i-1] = quotient[md-i];",
      "right" : "result.mant[mant.length-i-1] = quotient[md-i];",
      "info" : "ExpressionStatement[58213-58259]:ExpressionStatement[58320-58366]"
    }, {
      "left" : "result.exp = exp - divisor.exp + md - mant.length;",
      "right" : "result.exp = exp - divisor.exp + md - mant.length;",
      "info" : "ExpressionStatement[58313-58363]:ExpressionStatement[58420-58470]"
    }, {
      "left" : "result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);",
      "right" : "result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);",
      "info" : "ExpressionStatement[58372-58427]:ExpressionStatement[58479-58534]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[58437-58551]:IfStatement[58544-58658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58474-58551]:Block[58581-58658]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[58526-58541]:ExpressionStatement[58633-58648]"
    }, {
      "left" : "if (md > (mant.length-1))",
      "right" : "if (md > (mant.length-1))",
      "info" : "IfStatement[58561-58710]:IfStatement[58668-58817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58587-58657]:Block[58694-58764]"
    }, {
      "left" : "excp = result.round(quotient[md-mant.length]);",
      "right" : "excp = result.round(quotient[md-mant.length]);",
      "info" : "ExpressionStatement[58601-58647]:ExpressionStatement[58708-58754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58663-58710]:Block[58770-58817]"
    }, {
      "left" : "excp = result.round(0);",
      "right" : "excp = result.round(0);",
      "info" : "ExpressionStatement[58677-58700]:ExpressionStatement[58784-58807]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[58720-58811]:IfStatement[58827-58918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58735-58811]:Block[58842-58918]"
    }, {
      "left" : "result = dotrap(excp, DIVIDE_TRAP, divisor, result);",
      "right" : "result = dotrap(excp, DIVIDE_TRAP, divisor, result);",
      "info" : "ExpressionStatement[58749-58801]:ExpressionStatement[58856-58908]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[58821-58835]:ReturnStatement[58928-58942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59058-59064]:Modifier[59165-59171]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[59065-59068]:SimpleType[59172-59175]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[59069-59075]:SimpleName[59176-59182]"
    }, {
      "left" : "int divisor",
      "right" : "int divisor",
      "info" : "SingleVariableDeclaration[59076-59087]:SingleVariableDeclaration[59183-59194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59089-60830]:Block[59196-60937]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[59132-59326]:IfStatement[59239-59433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59152-59326]:Block[59259-59433]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[59166-59223]:IfStatement[59273-59330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59179-59223]:Block[59286-59330]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[59197-59209]:ReturnStatement[59304-59316]"
    }, {
      "left" : "if (nans == INFINITE)",
      "right" : "if (nans == INFINITE)",
      "info" : "IfStatement[59237-59316]:IfStatement[59344-59423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59259-59316]:Block[59366-59423]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[59277-59302]:ReturnStatement[59384-59409]"
    }, {
      "left" : "if (divisor == 0)",
      "right" : "if (divisor == 0)",
      "info" : "IfStatement[59371-59689]:IfStatement[59478-59796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59389-59689]:Block[59496-59796]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "info" : "ExpressionStatement[59403-59450]:ExpressionStatement[59510-59557]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[59463-59499]:VariableDeclarationStatement[59570-59606]"
    }, {
      "left" : "result.sign = sign;",
      "right" : "result.sign = sign;",
      "info" : "ExpressionStatement[59512-59531]:ExpressionStatement[59619-59638]"
    }, {
      "left" : "result.nans = INFINITE;",
      "right" : "result.nans = INFINITE;",
      "info" : "ExpressionStatement[59544-59567]:ExpressionStatement[59651-59674]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",
      "right" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",
      "info" : "ExpressionStatement[59580-59652]:ExpressionStatement[59687-59759]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[59665-59679]:ReturnStatement[59772-59786]"
    }, {
      "left" : "if (divisor < 0 || divisor >= RADIX)",
      "right" : "if (divisor < 0 || divisor >= RADIX)",
      "info" : "IfStatement[59730-60026]:IfStatement[59837-60133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59767-60026]:Block[59874-60133]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[59781-59827]:ExpressionStatement[59888-59934]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[59840-59876]:VariableDeclarationStatement[59947-59983]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[59889-59908]:ExpressionStatement[59996-60015]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",
      "info" : "ExpressionStatement[59921-59989]:ExpressionStatement[60028-60096]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[60002-60016]:ReturnStatement[60109-60123]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[60036-60067]:VariableDeclarationStatement[60143-60174]"
    }, {
      "left" : "int rl = 0;",
      "right" : "int rl = 0;",
      "info" : "VariableDeclarationStatement[60077-60088]:VariableDeclarationStatement[60184-60195]"
    }, {
      "left" : "for (int i = mant.length-1; i >= 0; i--)",
      "right" : "for (int i = mant.length-1; i >= 0; i--)",
      "info" : "ForStatement[60097-60310]:ForStatement[60204-60417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60138-60310]:Block[60245-60417]"
    }, {
      "left" : "final int r = rl*RADIX + result.mant[i];",
      "right" : "final int r = rl*RADIX + result.mant[i];",
      "info" : "VariableDeclarationStatement[60152-60192]:VariableDeclarationStatement[60259-60299]"
    }, {
      "left" : "final int rh = r / divisor;",
      "right" : "final int rh = r / divisor;",
      "info" : "VariableDeclarationStatement[60205-60232]:VariableDeclarationStatement[60312-60339]"
    }, {
      "left" : "rl = r - rh * divisor;",
      "right" : "rl = r - rh * divisor;",
      "info" : "ExpressionStatement[60245-60267]:ExpressionStatement[60352-60374]"
    }, {
      "left" : "result.mant[i] = rh;",
      "right" : "result.mant[i] = rh;",
      "info" : "ExpressionStatement[60280-60300]:ExpressionStatement[60387-60407]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[60320-60618]:IfStatement[60427-60725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60357-60618]:Block[60464-60725]"
    }, {
      "left" : "result.shiftLeft();",
      "right" : "result.shiftLeft();",
      "info" : "ExpressionStatement[60396-60415]:ExpressionStatement[60503-60522]"
    }, {
      "left" : "final int r = rl * RADIX;",
      "right" : "final int r = rl * RADIX;",
      "info" : "VariableDeclarationStatement[60428-60453]:VariableDeclarationStatement[60535-60560]"
    }, {
      "left" : "final int rh = r / divisor;",
      "right" : "final int rh = r / divisor;",
      "info" : "VariableDeclarationStatement[60513-60540]:VariableDeclarationStatement[60620-60647]"
    }, {
      "left" : "rl = r - rh * divisor;",
      "right" : "rl = r - rh * divisor;",
      "info" : "ExpressionStatement[60553-60575]:ExpressionStatement[60660-60682]"
    }, {
      "left" : "result.mant[0] = rh;",
      "right" : "result.mant[0] = rh;",
      "info" : "ExpressionStatement[60588-60608]:ExpressionStatement[60695-60715]"
    }, {
      "left" : "final int excp = result.round(rl * RADIX / divisor);",
      "right" : "final int excp = result.round(rl * RADIX / divisor);",
      "info" : "VariableDeclarationStatement[60628-60680]:VariableDeclarationStatement[60735-60787]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[60709-60799]:IfStatement[60816-60906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60724-60799]:Block[60831-60906]"
    }, {
      "left" : "result = dotrap(excp, DIVIDE_TRAP, result, result);",
      "right" : "result = dotrap(excp, DIVIDE_TRAP, result, result);",
      "info" : "ExpressionStatement[60738-60789]:ExpressionStatement[60845-60896]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[60809-60823]:ReturnStatement[60916-60930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60861-60867]:Modifier[60968-60974]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[60868-60871]:SimpleType[60975-60978]"
    }, {
      "left" : "reciprocal",
      "right" : "reciprocal",
      "info" : "SimpleName[60872-60882]:SimpleName[60979-60989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60885-60936]:Block[60992-61043]"
    }, {
      "left" : "return field.getOne().divide(this);",
      "right" : "return field.getOne().divide(this);",
      "info" : "ReturnStatement[60895-60930]:ReturnStatement[61002-61037]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61026-61032]:Modifier[61133-61139]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[61033-61036]:SimpleType[61140-61143]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[61037-61041]:SimpleName[61144-61148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61044-63575]:Block[61151-63682]"
    }, {
      "left" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "right" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "info" : "IfStatement[61090-61210]:IfStatement[61197-61317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61138-61210]:Block[61245-61317]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[61175-61200]:ReturnStatement[61282-61307]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[61220-61780]:IfStatement[61327-61887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61240-61780]:Block[61347-61887]"
    }, {
      "left" : "if (nans == INFINITE && sign == 1)",
      "right" : "if (nans == INFINITE && sign == 1)",
      "info" : "IfStatement[61254-61386]:IfStatement[61361-61493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61289-61386]:Block[61396-61493]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[61347-61372]:ReturnStatement[61454-61479]"
    }, {
      "left" : "if (nans == QNAN)",
      "right" : "if (nans == QNAN)",
      "info" : "IfStatement[61400-61475]:IfStatement[61507-61582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61418-61475]:Block[61525-61582]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[61436-61461]:ReturnStatement[61543-61568]"
    }, {
      "left" : "if (nans == SNAN)",
      "right" : "if (nans == SNAN)",
      "info" : "IfStatement[61489-61770]:IfStatement[61596-61877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61507-61770]:Block[61614-61877]"
    }, {
      "left" : "Dfp result;",
      "right" : "Dfp result;",
      "info" : "VariableDeclarationStatement[61525-61536]:VariableDeclarationStatement[61632-61643]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[61554-61600]:ExpressionStatement[61661-61707]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[61617-61644]:ExpressionStatement[61724-61751]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "info" : "ExpressionStatement[61661-61725]:ExpressionStatement[61768-61832]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[61742-61756]:ReturnStatement[61849-61863]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[61790-62104]:IfStatement[61897-62211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61806-62104]:Block[61913-62211]"
    }, {
      "left" : "Dfp result;",
      "right" : "Dfp result;",
      "info" : "VariableDeclarationStatement[61847-61858]:VariableDeclarationStatement[61954-61965]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[61872-61918]:ExpressionStatement[61979-62025]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[61931-61958]:ExpressionStatement[62038-62065]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[61971-61990]:ExpressionStatement[62078-62097]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "info" : "ExpressionStatement[62003-62067]:ExpressionStatement[62110-62174]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[62080-62094]:ReturnStatement[62187-62201]"
    }, {
      "left" : "Dfp x = newInstance(this);",
      "right" : "Dfp x = newInstance(this);",
      "info" : "VariableDeclarationStatement[62114-62140]:VariableDeclarationStatement[62221-62247]"
    }, {
      "left" : "if (x.exp < -1 || x.exp > 1)",
      "right" : "if (x.exp < -1 || x.exp > 1)",
      "info" : "IfStatement[62227-62301]:IfStatement[62334-62408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62256-62301]:Block[62363-62408]"
    }, {
      "left" : "x.exp = this.exp / 2;",
      "right" : "x.exp = this.exp / 2;",
      "info" : "ExpressionStatement[62270-62291]:ExpressionStatement[62377-62398]"
    }, {
      "left" : "switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }",
      "right" : "switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }",
      "info" : "SwitchStatement[62356-62760]:SwitchStatement[62463-62867]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[62408-62415]:SwitchCase[62515-62522]"
    }, {
      "left" : "x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;",
      "right" : "x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;",
      "info" : "ExpressionStatement[62432-62482]:ExpressionStatement[62539-62589]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62499-62505]:BreakStatement[62606-62612]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[62518-62525]:SwitchCase[62625-62632]"
    }, {
      "left" : "x.mant[mant.length-1] = 1500;",
      "right" : "x.mant[mant.length-1] = 1500;",
      "info" : "ExpressionStatement[62542-62571]:ExpressionStatement[62649-62678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62588-62594]:BreakStatement[62695-62701]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[62607-62614]:SwitchCase[62714-62721]"
    }, {
      "left" : "x.mant[mant.length-1] = 2200;",
      "right" : "x.mant[mant.length-1] = 2200;",
      "info" : "ExpressionStatement[62631-62660]:ExpressionStatement[62738-62767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62677-62683]:BreakStatement[62784-62790]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[62696-62704]:SwitchCase[62803-62811]"
    }, {
      "left" : "x.mant[mant.length-1] = 3000;",
      "right" : "x.mant[mant.length-1] = 3000;",
      "info" : "ExpressionStatement[62721-62750]:ExpressionStatement[62828-62857]"
    }, {
      "left" : "Dfp dx = newInstance(x);",
      "right" : "Dfp dx = newInstance(x);",
      "info" : "VariableDeclarationStatement[62770-62794]:VariableDeclarationStatement[62877-62901]"
    }, {
      "left" : "Dfp px  = getZero();",
      "right" : "Dfp px  = getZero();",
      "info" : "VariableDeclarationStatement[62923-62943]:VariableDeclarationStatement[63030-63050]"
    }, {
      "left" : "Dfp ppx = getZero();",
      "right" : "Dfp ppx = getZero();",
      "info" : "VariableDeclarationStatement[62952-62972]:VariableDeclarationStatement[63059-63079]"
    }, {
      "left" : "while (x.unequal(px))",
      "right" : "while (x.unequal(px))",
      "info" : "WhileStatement[62981-63549]:WhileStatement[63088-63656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63003-63549]:Block[63110-63656]"
    }, {
      "left" : "dx = newInstance(x);",
      "right" : "dx = newInstance(x);",
      "info" : "ExpressionStatement[63017-63037]:ExpressionStatement[63124-63144]"
    }, {
      "left" : "dx.sign = -1;",
      "right" : "dx.sign = -1;",
      "info" : "ExpressionStatement[63050-63063]:ExpressionStatement[63157-63170]"
    }, {
      "left" : "dx = dx.add(this.divide(x));",
      "right" : "dx = dx.add(this.divide(x));",
      "info" : "ExpressionStatement[63076-63104]:ExpressionStatement[63183-63211]"
    }, {
      "left" : "dx = dx.divide(2);",
      "right" : "dx = dx.divide(2);",
      "info" : "ExpressionStatement[63117-63135]:ExpressionStatement[63224-63242]"
    }, {
      "left" : "ppx = px;",
      "right" : "ppx = px;",
      "info" : "ExpressionStatement[63148-63157]:ExpressionStatement[63255-63264]"
    }, {
      "left" : "px = x;",
      "right" : "px = x;",
      "info" : "ExpressionStatement[63170-63177]:ExpressionStatement[63277-63284]"
    }, {
      "left" : "x = x.add(dx);",
      "right" : "x = x.add(dx);",
      "info" : "ExpressionStatement[63190-63204]:ExpressionStatement[63297-63311]"
    }, {
      "left" : "if (x.equals(ppx))",
      "right" : "if (x.equals(ppx))",
      "info" : "IfStatement[63218-63325]:IfStatement[63325-63432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63237-63325]:Block[63344-63432]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63305-63311]:BreakStatement[63412-63418]"
    }, {
      "left" : "if (dx.mant[mant.length-1] == 0)",
      "right" : "if (dx.mant[mant.length-1] == 0)",
      "info" : "IfStatement[63468-63539]:IfStatement[63575-63646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63501-63539]:Block[63608-63646]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63519-63525]:BreakStatement[63626-63632]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[63559-63568]:ReturnStatement[63666-63675]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[63695-63704]:MarkerAnnotation[63802-63811]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63709-63715]:Modifier[63816-63822]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[63716-63722]:SimpleType[63823-63829]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[63723-63731]:SimpleName[63830-63838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63734-64130]:Block[63841-64237]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[63744-64007]:IfStatement[63851-64114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63764-64007]:Block[63871-64114]"
    }, {
      "left" : "if (nans == INFINITE)",
      "right" : "if (nans == INFINITE)",
      "info" : "IfStatement[63825-63997]:IfStatement[63932-64104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63847-63941]:Block[63954-64048]"
    }, {
      "left" : "return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;",
      "right" : "return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;",
      "info" : "ReturnStatement[63865-63927]:ReturnStatement[63972-64034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63947-63997]:Block[64054-64104]"
    }, {
      "left" : "return NAN_STRING;",
      "right" : "return NAN_STRING;",
      "info" : "ReturnStatement[63965-63983]:ReturnStatement[64072-64090]"
    }, {
      "left" : "if (exp > mant.length || exp < -1)",
      "right" : "if (exp > mant.length || exp < -1)",
      "info" : "IfStatement[64017-64093]:IfStatement[64124-64200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64052-64093]:Block[64159-64200]"
    }, {
      "left" : "return dfp2sci();",
      "right" : "return dfp2sci();",
      "info" : "ReturnStatement[64066-64083]:ReturnStatement[64173-64190]"
    }, {
      "left" : "return dfp2string();",
      "right" : "return dfp2string();",
      "info" : "ReturnStatement[64103-64123]:ReturnStatement[64210-64230]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[64287-64296]:Modifier[64394-64403]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[64297-64303]:SimpleType[64404-64410]"
    }, {
      "left" : "dfp2sci",
      "right" : "dfp2sci",
      "info" : "SimpleName[64304-64311]:SimpleName[64411-64418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64314-66302]:Block[64421-66409]"
    }, {
      "left" : "char rawdigits[]    = new char[mant.length * 4];",
      "right" : "char rawdigits[]    = new char[mant.length * 4];",
      "info" : "VariableDeclarationStatement[64324-64372]:VariableDeclarationStatement[64431-64479]"
    }, {
      "left" : "char outputbuffer[] = new char[mant.length * 4 + 20];",
      "right" : "char outputbuffer[] = new char[mant.length * 4 + 20];",
      "info" : "VariableDeclarationStatement[64381-64434]:VariableDeclarationStatement[64488-64541]"
    }, {
      "left" : "int p;",
      "right" : "int p;",
      "info" : "VariableDeclarationStatement[64443-64449]:VariableDeclarationStatement[64550-64556]"
    }, {
      "left" : "int q;",
      "right" : "int q;",
      "info" : "VariableDeclarationStatement[64458-64464]:VariableDeclarationStatement[64565-64571]"
    }, {
      "left" : "int e;",
      "right" : "int e;",
      "info" : "VariableDeclarationStatement[64473-64479]:VariableDeclarationStatement[64580-64586]"
    }, {
      "left" : "int ae;",
      "right" : "int ae;",
      "info" : "VariableDeclarationStatement[64488-64495]:VariableDeclarationStatement[64595-64602]"
    }, {
      "left" : "int shf;",
      "right" : "int shf;",
      "info" : "VariableDeclarationStatement[64504-64512]:VariableDeclarationStatement[64611-64619]"
    }, {
      "left" : "p = 0;",
      "right" : "p = 0;",
      "info" : "ExpressionStatement[64552-64558]:ExpressionStatement[64659-64665]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[64567-64879]:ForStatement[64674-64986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64610-64879]:Block[64717-64986]"
    }, {
      "left" : "rawdigits[p++] = (char) ((mant[i] / 1000) + '0');",
      "right" : "rawdigits[p++] = (char) ((mant[i] / 1000) + '0');",
      "info" : "ExpressionStatement[64624-64673]:ExpressionStatement[64731-64780]"
    }, {
      "left" : "rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');",
      "right" : "rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');",
      "info" : "ExpressionStatement[64686-64740]:ExpressionStatement[64793-64847]"
    }, {
      "left" : "rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "right" : "rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "info" : "ExpressionStatement[64753-64807]:ExpressionStatement[64860-64914]"
    }, {
      "left" : "rawdigits[p++] = (char) (((mant[i]) % 10) + '0');",
      "right" : "rawdigits[p++] = (char) (((mant[i]) % 10) + '0');",
      "info" : "ExpressionStatement[64820-64869]:ExpressionStatement[64927-64976]"
    }, {
      "left" : "for (p = 0; p < rawdigits.length; p++)",
      "right" : "for (p = 0; p < rawdigits.length; p++)",
      "info" : "ForStatement[64928-65054]:ForStatement[65035-65161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64967-65054]:Block[65074-65161]"
    }, {
      "left" : "if (rawdigits[p] != '0')",
      "right" : "if (rawdigits[p] != '0')",
      "info" : "IfStatement[64981-65044]:IfStatement[65088-65151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65006-65044]:Block[65113-65151]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65024-65030]:BreakStatement[65131-65137]"
    }, {
      "left" : "shf = p;",
      "right" : "shf = p;",
      "info" : "ExpressionStatement[65063-65071]:ExpressionStatement[65170-65178]"
    }, {
      "left" : "q = 0;",
      "right" : "q = 0;",
      "info" : "ExpressionStatement[65114-65120]:ExpressionStatement[65221-65227]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[65129-65193]:IfStatement[65236-65300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65145-65193]:Block[65252-65300]"
    }, {
      "left" : "outputbuffer[q++] = '-';",
      "right" : "outputbuffer[q++] = '-';",
      "info" : "ExpressionStatement[65159-65183]:ExpressionStatement[65266-65290]"
    }, {
      "left" : "if (p != rawdigits.length)",
      "right" : "if (p != rawdigits.length)",
      "info" : "IfStatement[65203-65731]:IfStatement[65310-65838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65230-65478]:Block[65337-65585]"
    }, {
      "left" : "outputbuffer[q++] = rawdigits[p++];",
      "right" : "outputbuffer[q++] = rawdigits[p++];",
      "info" : "ExpressionStatement[65288-65323]:ExpressionStatement[65395-65430]"
    }, {
      "left" : "outputbuffer[q++] = '.';",
      "right" : "outputbuffer[q++] = '.';",
      "info" : "ExpressionStatement[65336-65360]:ExpressionStatement[65443-65467]"
    }, {
      "left" : "while (p<rawdigits.length)",
      "right" : "while (p<rawdigits.length)",
      "info" : "WhileStatement[65374-65468]:WhileStatement[65481-65575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65401-65468]:Block[65508-65575]"
    }, {
      "left" : "outputbuffer[q++] = rawdigits[p++];",
      "right" : "outputbuffer[q++] = rawdigits[p++];",
      "info" : "ExpressionStatement[65419-65454]:ExpressionStatement[65526-65561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65484-65731]:Block[65591-65838]"
    }, {
      "left" : "outputbuffer[q++] = '0';",
      "right" : "outputbuffer[q++] = '0';",
      "info" : "ExpressionStatement[65498-65522]:ExpressionStatement[65605-65629]"
    }, {
      "left" : "outputbuffer[q++] = '.';",
      "right" : "outputbuffer[q++] = '.';",
      "info" : "ExpressionStatement[65535-65559]:ExpressionStatement[65642-65666]"
    }, {
      "left" : "outputbuffer[q++] = '0';",
      "right" : "outputbuffer[q++] = '0';",
      "info" : "ExpressionStatement[65572-65596]:ExpressionStatement[65679-65703]"
    }, {
      "left" : "outputbuffer[q++] = 'e';",
      "right" : "outputbuffer[q++] = 'e';",
      "info" : "ExpressionStatement[65609-65633]:ExpressionStatement[65716-65740]"
    }, {
      "left" : "outputbuffer[q++] = '0';",
      "right" : "outputbuffer[q++] = '0';",
      "info" : "ExpressionStatement[65646-65670]:ExpressionStatement[65753-65777]"
    }, {
      "left" : "return new String(outputbuffer, 0, 5);",
      "right" : "return new String(outputbuffer, 0, 5);",
      "info" : "ReturnStatement[65683-65721]:ReturnStatement[65790-65828]"
    }, {
      "left" : "outputbuffer[q++] = 'e';",
      "right" : "outputbuffer[q++] = 'e';",
      "info" : "ExpressionStatement[65741-65765]:ExpressionStatement[65848-65872]"
    }, {
      "left" : "e = exp * 4 - shf - 1;",
      "right" : "e = exp * 4 - shf - 1;",
      "info" : "ExpressionStatement[65816-65838]:ExpressionStatement[65923-65945]"
    }, {
      "left" : "ae = e;",
      "right" : "ae = e;",
      "info" : "ExpressionStatement[65847-65854]:ExpressionStatement[65954-65961]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[65863-65906]:IfStatement[65970-66013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65874-65906]:Block[65981-66013]"
    }, {
      "left" : "ae = -e;",
      "right" : "ae = -e;",
      "info" : "ExpressionStatement[65888-65896]:ExpressionStatement[65995-66003]"
    }, {
      "left" : "for (p = 1000000000; p > ae; p /= 10)",
      "right" : "for (p = 1000000000; p > ae; p /= 10)",
      "info" : "ForStatement[65962-66040]:ForStatement[66069-66147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66000-66040]:Block[66107-66147]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[66050-66109]:IfStatement[66157-66216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66061-66109]:Block[66168-66216]"
    }, {
      "left" : "outputbuffer[q++] = '-';",
      "right" : "outputbuffer[q++] = '-';",
      "info" : "ExpressionStatement[66075-66099]:ExpressionStatement[66182-66206]"
    }, {
      "left" : "while (p > 0)",
      "right" : "while (p > 0)",
      "info" : "WhileStatement[66119-66247]:WhileStatement[66226-66354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66133-66247]:Block[66240-66354]"
    }, {
      "left" : "outputbuffer[q++] = (char)(ae / p + '0');",
      "right" : "outputbuffer[q++] = (char)(ae / p + '0');",
      "info" : "ExpressionStatement[66147-66188]:ExpressionStatement[66254-66295]"
    }, {
      "left" : "ae = ae % p;",
      "right" : "ae = ae % p;",
      "info" : "ExpressionStatement[66201-66213]:ExpressionStatement[66308-66320]"
    }, {
      "left" : "p = p / 10;",
      "right" : "p = p / 10;",
      "info" : "ExpressionStatement[66226-66237]:ExpressionStatement[66333-66344]"
    }, {
      "left" : "return new String(outputbuffer, 0, q);",
      "right" : "return new String(outputbuffer, 0, q);",
      "info" : "ReturnStatement[66257-66295]:ReturnStatement[66364-66402]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[66451-66460]:Modifier[66558-66567]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[66461-66467]:SimpleType[66568-66574]"
    }, {
      "left" : "dfp2string",
      "right" : "dfp2string",
      "info" : "SimpleName[66468-66478]:SimpleName[66575-66585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66481-68093]:Block[66588-68200]"
    }, {
      "left" : "char buffer[] = new char[mant.length*4 + 20];",
      "right" : "char buffer[] = new char[mant.length*4 + 20];",
      "info" : "VariableDeclarationStatement[66491-66536]:VariableDeclarationStatement[66598-66643]"
    }, {
      "left" : "int p = 1;",
      "right" : "int p = 1;",
      "info" : "VariableDeclarationStatement[66545-66555]:VariableDeclarationStatement[66652-66662]"
    }, {
      "left" : "int q;",
      "right" : "int q;",
      "info" : "VariableDeclarationStatement[66564-66570]:VariableDeclarationStatement[66671-66677]"
    }, {
      "left" : "int e = exp;",
      "right" : "int e = exp;",
      "info" : "VariableDeclarationStatement[66579-66591]:VariableDeclarationStatement[66686-66698]"
    }, {
      "left" : "boolean pointInserted = false;",
      "right" : "boolean pointInserted = false;",
      "info" : "VariableDeclarationStatement[66600-66630]:VariableDeclarationStatement[66707-66737]"
    }, {
      "left" : "buffer[0] = ' ';",
      "right" : "buffer[0] = ' ';",
      "info" : "ExpressionStatement[66640-66656]:ExpressionStatement[66747-66763]"
    }, {
      "left" : "if (e <= 0)",
      "right" : "if (e <= 0)",
      "info" : "IfStatement[66666-66785]:IfStatement[66773-66892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66678-66785]:Block[66785-66892]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[66692-66710]:ExpressionStatement[66799-66817]"
    }, {
      "left" : "buffer[p++] = '.';",
      "right" : "buffer[p++] = '.';",
      "info" : "ExpressionStatement[66723-66741]:ExpressionStatement[66830-66848]"
    }, {
      "left" : "pointInserted = true;",
      "right" : "pointInserted = true;",
      "info" : "ExpressionStatement[66754-66775]:ExpressionStatement[66861-66882]"
    }, {
      "left" : "while (e < 0)",
      "right" : "while (e < 0)",
      "info" : "WhileStatement[66795-66961]:WhileStatement[66902-67068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66809-66961]:Block[66916-67068]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[66823-66841]:ExpressionStatement[66930-66948]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[66854-66872]:ExpressionStatement[66961-66979]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[66885-66903]:ExpressionStatement[66992-67010]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[66916-66934]:ExpressionStatement[67023-67041]"
    }, {
      "left" : "e++;",
      "right" : "e++;",
      "info" : "ExpressionStatement[66947-66951]:ExpressionStatement[67054-67058]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[66971-67387]:ForStatement[67078-67494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67014-67387]:Block[67121-67494]"
    }, {
      "left" : "buffer[p++] = (char) ((mant[i] / 1000) + '0');",
      "right" : "buffer[p++] = (char) ((mant[i] / 1000) + '0');",
      "info" : "ExpressionStatement[67028-67074]:ExpressionStatement[67135-67181]"
    }, {
      "left" : "buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');",
      "right" : "buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');",
      "info" : "ExpressionStatement[67087-67139]:ExpressionStatement[67194-67246]"
    }, {
      "left" : "buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "right" : "buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "info" : "ExpressionStatement[67152-67203]:ExpressionStatement[67259-67310]"
    }, {
      "left" : "buffer[p++] = (char) (((mant[i]) % 10) + '0');",
      "right" : "buffer[p++] = (char) (((mant[i]) % 10) + '0');",
      "info" : "ExpressionStatement[67216-67262]:ExpressionStatement[67323-67369]"
    }, {
      "left" : "if (--e == 0)",
      "right" : "if (--e == 0)",
      "info" : "IfStatement[67275-67377]:IfStatement[67382-67484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67289-67377]:Block[67396-67484]"
    }, {
      "left" : "buffer[p++] = '.';",
      "right" : "buffer[p++] = '.';",
      "info" : "ExpressionStatement[67307-67325]:ExpressionStatement[67414-67432]"
    }, {
      "left" : "pointInserted = true;",
      "right" : "pointInserted = true;",
      "info" : "ExpressionStatement[67342-67363]:ExpressionStatement[67449-67470]"
    }, {
      "left" : "while (e > 0)",
      "right" : "while (e > 0)",
      "info" : "WhileStatement[67397-67563]:WhileStatement[67504-67670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67411-67563]:Block[67518-67670]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[67425-67443]:ExpressionStatement[67532-67550]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[67456-67474]:ExpressionStatement[67563-67581]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[67487-67505]:ExpressionStatement[67594-67612]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[67518-67536]:ExpressionStatement[67625-67643]"
    }, {
      "left" : "e--;",
      "right" : "e--;",
      "info" : "ExpressionStatement[67549-67553]:ExpressionStatement[67656-67660]"
    }, {
      "left" : "if (!pointInserted)",
      "right" : "if (!pointInserted)",
      "info" : "IfStatement[67573-67680]:IfStatement[67680-67787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67593-67680]:Block[67700-67787]"
    }, {
      "left" : "buffer[p++] = '.';",
      "right" : "buffer[p++] = '.';",
      "info" : "ExpressionStatement[67652-67670]:ExpressionStatement[67759-67777]"
    }, {
      "left" : "q = 1;",
      "right" : "q = 1;",
      "info" : "ExpressionStatement[67724-67730]:ExpressionStatement[67831-67837]"
    }, {
      "left" : "while (buffer[q] == '0')",
      "right" : "while (buffer[q] == '0')",
      "info" : "WhileStatement[67739-67792]:WhileStatement[67846-67899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67764-67792]:Block[67871-67899]"
    }, {
      "left" : "q++;",
      "right" : "q++;",
      "info" : "ExpressionStatement[67778-67782]:ExpressionStatement[67885-67889]"
    }, {
      "left" : "if (buffer[q] == '.')",
      "right" : "if (buffer[q] == '.')",
      "info" : "IfStatement[67801-67851]:IfStatement[67908-67958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67823-67851]:Block[67930-67958]"
    }, {
      "left" : "q--;",
      "right" : "q--;",
      "info" : "ExpressionStatement[67837-67841]:ExpressionStatement[67944-67948]"
    }, {
      "left" : "while (buffer[p-1] == '0')",
      "right" : "while (buffer[p-1] == '0')",
      "info" : "WhileStatement[67896-67951]:WhileStatement[68003-68058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67923-67951]:Block[68030-68058]"
    }, {
      "left" : "p--;",
      "right" : "p--;",
      "info" : "ExpressionStatement[67937-67941]:ExpressionStatement[68044-68048]"
    }, {
      "left" : "if (sign < 0)",
      "right" : "if (sign < 0)",
      "info" : "IfStatement[67984-68040]:IfStatement[68091-68147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67998-68040]:Block[68105-68147]"
    }, {
      "left" : "buffer[--q] = '-';",
      "right" : "buffer[--q] = '-';",
      "info" : "ExpressionStatement[68012-68030]:ExpressionStatement[68119-68137]"
    }, {
      "left" : "return new String(buffer, q, p - q);",
      "right" : "return new String(buffer, q, p - q);",
      "info" : "ReturnStatement[68050-68086]:ReturnStatement[68157-68193]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68446-68452]:Modifier[68553-68559]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[68453-68456]:SimpleType[68560-68563]"
    }, {
      "left" : "dotrap",
      "right" : "dotrap",
      "info" : "SimpleName[68457-68463]:SimpleName[68564-68570]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[68464-68472]:SingleVariableDeclaration[68571-68579]"
    }, {
      "left" : "String what",
      "right" : "String what",
      "info" : "SingleVariableDeclaration[68474-68485]:SingleVariableDeclaration[68581-68592]"
    }, {
      "left" : "Dfp oper",
      "right" : "Dfp oper",
      "info" : "SingleVariableDeclaration[68487-68495]:SingleVariableDeclaration[68594-68602]"
    }, {
      "left" : "Dfp result",
      "right" : "Dfp result",
      "info" : "SingleVariableDeclaration[68497-68507]:SingleVariableDeclaration[68604-68614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68509-70360]:Block[68616-70467]"
    }, {
      "left" : "Dfp def = result;",
      "right" : "Dfp def = result;",
      "info" : "VariableDeclarationStatement[68519-68536]:VariableDeclarationStatement[68626-68643]"
    }, {
      "left" : "switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp = result.exp + ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp = result.exp - ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }",
      "right" : "switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp = result.exp + ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp = result.exp - ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }",
      "info" : "SwitchStatement[68546-70300]:SwitchStatement[68653-70407]"
    }, {
      "left" : "case DfpField.FLAG_INVALID:",
      "right" : "case DfpField.FLAG_INVALID:",
      "info" : "SwitchCase[68574-68601]:SwitchCase[68681-68708]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[68618-68647]:ExpressionStatement[68725-68754]"
    }, {
      "left" : "def.sign = result.sign;",
      "right" : "def.sign = result.sign;",
      "info" : "ExpressionStatement[68664-68687]:ExpressionStatement[68771-68794]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[68704-68720]:ExpressionStatement[68811-68827]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68737-68743]:BreakStatement[68844-68850]"
    }, {
      "left" : "case DfpField.FLAG_DIV_ZERO:",
      "right" : "case DfpField.FLAG_DIV_ZERO:",
      "info" : "SwitchCase[68757-68785]:SwitchCase[68864-68892]"
    }, {
      "left" : "if (nans == FINITE && mant[mant.length-1] != 0)",
      "right" : "if (nans == FINITE && mant[mant.length-1] != 0)",
      "info" : "IfStatement[68802-69075]:IfStatement[68909-69182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68850-69075]:Block[68957-69182]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[68932-68961]:ExpressionStatement[69039-69068]"
    }, {
      "left" : "def.sign = (byte)(sign*oper.sign);",
      "right" : "def.sign = (byte)(sign*oper.sign);",
      "info" : "ExpressionStatement[68982-69016]:ExpressionStatement[69089-69123]"
    }, {
      "left" : "def.nans = INFINITE;",
      "right" : "def.nans = INFINITE;",
      "info" : "ExpressionStatement[69037-69057]:ExpressionStatement[69144-69164]"
    }, {
      "left" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "right" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "info" : "IfStatement[69093-69275]:IfStatement[69200-69382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69141-69275]:Block[69248-69382]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[69191-69220]:ExpressionStatement[69298-69327]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[69241-69257]:ExpressionStatement[69348-69364]"
    }, {
      "left" : "if (nans == INFINITE || nans == QNAN)",
      "right" : "if (nans == INFINITE || nans == QNAN)",
      "info" : "IfStatement[69293-69437]:IfStatement[69400-69544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69331-69437]:Block[69438-69544]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[69353-69382]:ExpressionStatement[69460-69489]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[69403-69419]:ExpressionStatement[69510-69526]"
    }, {
      "left" : "if (nans == INFINITE || nans == SNAN)",
      "right" : "if (nans == INFINITE || nans == SNAN)",
      "info" : "IfStatement[69455-69599]:IfStatement[69562-69706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69493-69599]:Block[69600-69706]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[69515-69544]:ExpressionStatement[69622-69651]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[69565-69581]:ExpressionStatement[69672-69688]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[69616-69622]:BreakStatement[69723-69729]"
    }, {
      "left" : "case DfpField.FLAG_UNDERFLOW:",
      "right" : "case DfpField.FLAG_UNDERFLOW:",
      "info" : "SwitchCase[69636-69665]:SwitchCase[69743-69772]"
    }, {
      "left" : "if ( (result.exp+mant.length) < MIN_EXP)",
      "right" : "if ( (result.exp+mant.length) < MIN_EXP)",
      "info" : "IfStatement[69682-69930]:IfStatement[69789-70037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69723-69836]:Block[69830-69943]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[69745-69774]:ExpressionStatement[69852-69881]"
    }, {
      "left" : "def.sign = result.sign;",
      "right" : "def.sign = result.sign;",
      "info" : "ExpressionStatement[69795-69818]:ExpressionStatement[69902-69925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69842-69930]:Block[69949-70037]"
    }, {
      "left" : "def = newInstance(result);",
      "right" : "def = newInstance(result);",
      "info" : "ExpressionStatement[69864-69890]:ExpressionStatement[69971-69997]"
    }, {
      "left" : "result.exp = result.exp + ERR_SCALE;",
      "right" : "result.exp = result.exp + ERR_SCALE;",
      "info" : "ExpressionStatement[69947-69983]:ExpressionStatement[70054-70090]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70000-70006]:BreakStatement[70107-70113]"
    }, {
      "left" : "case DfpField.FLAG_OVERFLOW:",
      "right" : "case DfpField.FLAG_OVERFLOW:",
      "info" : "SwitchCase[70020-70048]:SwitchCase[70127-70155]"
    }, {
      "left" : "result.exp = result.exp - ERR_SCALE;",
      "right" : "result.exp = result.exp - ERR_SCALE;",
      "info" : "ExpressionStatement[70065-70101]:ExpressionStatement[70172-70208]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[70118-70147]:ExpressionStatement[70225-70254]"
    }, {
      "left" : "def.sign = result.sign;",
      "right" : "def.sign = result.sign;",
      "info" : "ExpressionStatement[70164-70187]:ExpressionStatement[70271-70294]"
    }, {
      "left" : "def.nans = INFINITE;",
      "right" : "def.nans = INFINITE;",
      "info" : "ExpressionStatement[70204-70224]:ExpressionStatement[70311-70331]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70241-70247]:BreakStatement[70348-70354]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[70261-70269]:SwitchCase[70368-70376]"
    }, {
      "left" : "def = result;",
      "right" : "def = result;",
      "info" : "ExpressionStatement[70270-70283]:ExpressionStatement[70377-70390]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70284-70290]:BreakStatement[70391-70397]"
    }, {
      "left" : "return trap(type, what, oper, def, result);",
      "right" : "return trap(type, what, oper, def, result);",
      "info" : "ReturnStatement[70310-70353]:ReturnStatement[70417-70460]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70944-70953]:Modifier[71051-71060]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[70954-70957]:SimpleType[71061-71064]"
    }, {
      "left" : "trap",
      "right" : "trap",
      "info" : "SimpleName[70958-70962]:SimpleName[71065-71069]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[70963-70971]:SingleVariableDeclaration[71070-71078]"
    }, {
      "left" : "String what",
      "right" : "String what",
      "info" : "SingleVariableDeclaration[70973-70984]:SingleVariableDeclaration[71080-71091]"
    }, {
      "left" : "Dfp oper",
      "right" : "Dfp oper",
      "info" : "SingleVariableDeclaration[70986-70994]:SingleVariableDeclaration[71093-71101]"
    }, {
      "left" : "Dfp def",
      "right" : "Dfp def",
      "info" : "SingleVariableDeclaration[70996-71003]:SingleVariableDeclaration[71103-71110]"
    }, {
      "left" : "Dfp result",
      "right" : "Dfp result",
      "info" : "SingleVariableDeclaration[71005-71015]:SingleVariableDeclaration[71112-71122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71017-71044]:Block[71124-71151]"
    }, {
      "left" : "return def;",
      "right" : "return def;",
      "info" : "ReturnStatement[71027-71038]:ReturnStatement[71134-71145]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71156-71162]:Modifier[71263-71269]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[71163-71166]:PrimitiveType[71270-71273]"
    }, {
      "left" : "classify",
      "right" : "classify",
      "info" : "SimpleName[71167-71175]:SimpleName[71274-71282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71178-71206]:Block[71285-71313]"
    }, {
      "left" : "return nans;",
      "right" : "return nans;",
      "info" : "ReturnStatement[71188-71200]:ReturnStatement[71295-71307]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71496-71502]:Modifier[71603-71609]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[71503-71509]:Modifier[71610-71616]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[71510-71513]:SimpleType[71617-71620]"
    }, {
      "left" : "copysign",
      "right" : "copysign",
      "info" : "SimpleName[71514-71522]:SimpleName[71621-71629]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[71523-71534]:SingleVariableDeclaration[71630-71641]"
    }, {
      "left" : "final Dfp y",
      "right" : "final Dfp y",
      "info" : "SingleVariableDeclaration[71536-71547]:SingleVariableDeclaration[71643-71654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71549-71648]:Block[71656-71755]"
    }, {
      "left" : "Dfp result = x.newInstance(x);",
      "right" : "Dfp result = x.newInstance(x);",
      "info" : "VariableDeclarationStatement[71559-71589]:VariableDeclarationStatement[71666-71696]"
    }, {
      "left" : "result.sign = y.sign;",
      "right" : "result.sign = y.sign;",
      "info" : "ExpressionStatement[71598-71619]:ExpressionStatement[71705-71726]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[71628-71642]:ReturnStatement[71735-71749]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71895-71901]:Modifier[72002-72008]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[71902-71905]:SimpleType[72009-72012]"
    }, {
      "left" : "nextAfter",
      "right" : "nextAfter",
      "info" : "SimpleName[71906-71915]:SimpleName[72013-72022]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[71916-71927]:SingleVariableDeclaration[72023-72034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71929-73830]:Block[72036-73937]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[72006-72297]:IfStatement[72113-72404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72062-72297]:Block[72169-72404]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[72076-72122]:ExpressionStatement[72183-72229]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[72135-72177]:VariableDeclarationStatement[72242-72284]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[72190-72209]:ExpressionStatement[72297-72316]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",
      "info" : "ReturnStatement[72222-72287]:ReturnStatement[72329-72394]"
    }, {
      "left" : "boolean up = false;",
      "right" : "boolean up = false;",
      "info" : "VariableDeclarationStatement[72344-72363]:VariableDeclarationStatement[72451-72470]"
    }, {
      "left" : "if (this.lessThan(x))",
      "right" : "if (this.lessThan(x))",
      "info" : "IfStatement[72372-72428]:IfStatement[72479-72535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72394-72428]:Block[72501-72535]"
    }, {
      "left" : "up = true;",
      "right" : "up = true;",
      "info" : "ExpressionStatement[72408-72418]:ExpressionStatement[72515-72525]"
    }, {
      "left" : "if (compare(this, x) == 0)",
      "right" : "if (compare(this, x) == 0)",
      "info" : "IfStatement[72438-72511]:IfStatement[72545-72618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72465-72511]:Block[72572-72618]"
    }, {
      "left" : "return newInstance(x);",
      "right" : "return newInstance(x);",
      "info" : "ReturnStatement[72479-72501]:ReturnStatement[72586-72608]"
    }, {
      "left" : "if (lessThan(getZero()))",
      "right" : "if (lessThan(getZero()))",
      "info" : "IfStatement[72521-72579]:IfStatement[72628-72686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72546-72579]:Block[72653-72686]"
    }, {
      "left" : "up = !up;",
      "right" : "up = !up;",
      "info" : "ExpressionStatement[72560-72569]:ExpressionStatement[72667-72676]"
    }, {
      "left" : "final Dfp inc;",
      "right" : "final Dfp inc;",
      "info" : "VariableDeclarationStatement[72589-72603]:VariableDeclarationStatement[72696-72710]"
    }, {
      "left" : "Dfp result;",
      "right" : "Dfp result;",
      "info" : "VariableDeclarationStatement[72612-72623]:VariableDeclarationStatement[72719-72730]"
    }, {
      "left" : "if (up)",
      "right" : "if (up)",
      "info" : "IfStatement[72632-73348]:IfStatement[72739-73455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72640-72908]:Block[72747-73015]"
    }, {
      "left" : "inc = newInstance(getOne());",
      "right" : "inc = newInstance(getOne());",
      "info" : "ExpressionStatement[72654-72682]:ExpressionStatement[72761-72789]"
    }, {
      "left" : "inc.exp = this.exp-mant.length+1;",
      "right" : "inc.exp = this.exp-mant.length+1;",
      "info" : "ExpressionStatement[72695-72728]:ExpressionStatement[72802-72835]"
    }, {
      "left" : "inc.sign = this.sign;",
      "right" : "inc.sign = this.sign;",
      "info" : "ExpressionStatement[72741-72762]:ExpressionStatement[72848-72869]"
    }, {
      "left" : "if (this.equals(getZero()))",
      "right" : "if (this.equals(getZero()))",
      "info" : "IfStatement[72776-72866]:IfStatement[72883-72973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72804-72866]:Block[72911-72973]"
    }, {
      "left" : "inc.exp = MIN_EXP-mant.length;",
      "right" : "inc.exp = MIN_EXP-mant.length;",
      "info" : "ExpressionStatement[72822-72852]:ExpressionStatement[72929-72959]"
    }, {
      "left" : "result = add(inc);",
      "right" : "result = add(inc);",
      "info" : "ExpressionStatement[72880-72898]:ExpressionStatement[72987-73005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72914-73348]:Block[73021-73455]"
    }, {
      "left" : "inc = newInstance(getOne());",
      "right" : "inc = newInstance(getOne());",
      "info" : "ExpressionStatement[72928-72956]:ExpressionStatement[73035-73063]"
    }, {
      "left" : "inc.exp = this.exp;",
      "right" : "inc.exp = this.exp;",
      "info" : "ExpressionStatement[72969-72988]:ExpressionStatement[73076-73095]"
    }, {
      "left" : "inc.sign = this.sign;",
      "right" : "inc.sign = this.sign;",
      "info" : "ExpressionStatement[73001-73022]:ExpressionStatement[73108-73129]"
    }, {
      "left" : "if (this.equals(inc))",
      "right" : "if (this.equals(inc))",
      "info" : "IfStatement[73036-73192]:IfStatement[73143-73299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73058-73121]:Block[73165-73228]"
    }, {
      "left" : "inc.exp = this.exp-mant.length;",
      "right" : "inc.exp = this.exp-mant.length;",
      "info" : "ExpressionStatement[73076-73107]:ExpressionStatement[73183-73214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73127-73192]:Block[73234-73299]"
    }, {
      "left" : "inc.exp = this.exp-mant.length+1;",
      "right" : "inc.exp = this.exp-mant.length+1;",
      "info" : "ExpressionStatement[73145-73178]:ExpressionStatement[73252-73285]"
    }, {
      "left" : "if (this.equals(getZero()))",
      "right" : "if (this.equals(getZero()))",
      "info" : "IfStatement[73206-73296]:IfStatement[73313-73403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73234-73296]:Block[73341-73403]"
    }, {
      "left" : "inc.exp = MIN_EXP-mant.length;",
      "right" : "inc.exp = MIN_EXP-mant.length;",
      "info" : "ExpressionStatement[73252-73282]:ExpressionStatement[73359-73389]"
    }, {
      "left" : "result = this.subtract(inc);",
      "right" : "result = this.subtract(inc);",
      "info" : "ExpressionStatement[73310-73338]:ExpressionStatement[73417-73445]"
    }, {
      "left" : "if (result.classify() == INFINITE && this.classify() != INFINITE)",
      "right" : "if (result.classify() == INFINITE && this.classify() != INFINITE)",
      "info" : "IfStatement[73358-73574]:IfStatement[73465-73681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73424-73574]:Block[73531-73681]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[73438-73484]:ExpressionStatement[73545-73591]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "info" : "ExpressionStatement[73497-73564]:ExpressionStatement[73604-73671]"
    }, {
      "left" : "if (result.equals(getZero()) && this.equals(getZero()) == false)",
      "right" : "if (result.equals(getZero()) && this.equals(getZero()) == false)",
      "info" : "IfStatement[73584-73799]:IfStatement[73691-73906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73649-73799]:Block[73756-73906]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[73663-73709]:ExpressionStatement[73770-73816]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "info" : "ExpressionStatement[73722-73789]:ExpressionStatement[73829-73896]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[73809-73823]:ReturnStatement[73916-73930]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73968-73974]:Modifier[74075-74081]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[73975-73981]:PrimitiveType[74082-74088]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[73982-73990]:SimpleName[74089-74097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73993-76169]:Block[74100-76276]"
    }, {
      "left" : "if (isInfinite())",
      "right" : "if (isInfinite())",
      "info" : "IfStatement[74004-74205]:IfStatement[74111-74312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74022-74205]:Block[74129-74312]"
    }, {
      "left" : "if (lessThan(getZero()))",
      "right" : "if (lessThan(getZero()))",
      "info" : "IfStatement[74036-74195]:IfStatement[74143-74302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74061-74125]:Block[74168-74232]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[74079-74111]:ReturnStatement[74186-74218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74131-74195]:Block[74238-74302]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[74149-74181]:ReturnStatement[74256-74288]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[74215-74270]:IfStatement[74322-74377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74228-74270]:Block[74335-74377]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[74242-74260]:ReturnStatement[74349-74367]"
    }, {
      "left" : "Dfp y = this;",
      "right" : "Dfp y = this;",
      "info" : "VariableDeclarationStatement[74280-74293]:VariableDeclarationStatement[74387-74400]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[74302-74325]:VariableDeclarationStatement[74409-74432]"
    }, {
      "left" : "int cmp0 = compare(this, getZero());",
      "right" : "int cmp0 = compare(this, getZero());",
      "info" : "VariableDeclarationStatement[74334-74370]:VariableDeclarationStatement[74441-74477]"
    }, {
      "left" : "if (cmp0 == 0)",
      "right" : "if (cmp0 == 0)",
      "info" : "IfStatement[74379-74532]:IfStatement[74486-74639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74394-74448]:Block[74501-74555]"
    }, {
      "left" : "return sign < 0 ? -0.0 : +0.0;",
      "right" : "return sign < 0 ? -0.0 : +0.0;",
      "info" : "ReturnStatement[74408-74438]:ReturnStatement[74515-74545]"
    }, {
      "left" : "if (cmp0 < 0)",
      "right" : "if (cmp0 < 0)",
      "info" : "IfStatement[74454-74532]:IfStatement[74561-74639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74468-74532]:Block[74575-74639]"
    }, {
      "left" : "y = negate();",
      "right" : "y = negate();",
      "info" : "ExpressionStatement[74482-74495]:ExpressionStatement[74589-74602]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[74508-74522]:ExpressionStatement[74615-74629]"
    }, {
      "left" : "int exponent = (int)(y.log10() * 3.32);",
      "right" : "int exponent = (int)(y.log10() * 3.32);",
      "info" : "VariableDeclarationStatement[74680-74719]:VariableDeclarationStatement[74787-74826]"
    }, {
      "left" : "if (exponent < 0)",
      "right" : "if (exponent < 0)",
      "info" : "IfStatement[74728-74781]:IfStatement[74835-74888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74746-74781]:Block[74853-74888]"
    }, {
      "left" : "exponent--;",
      "right" : "exponent--;",
      "info" : "ExpressionStatement[74760-74771]:ExpressionStatement[74867-74878]"
    }, {
      "left" : "Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",
      "right" : "Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",
      "info" : "VariableDeclarationStatement[74791-74837]:VariableDeclarationStatement[74898-74944]"
    }, {
      "left" : "while (tempDfp.lessThan(y) || tempDfp.equals(y))",
      "right" : "while (tempDfp.lessThan(y) || tempDfp.equals(y))",
      "info" : "WhileStatement[74846-74973]:WhileStatement[74953-75080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74895-74973]:Block[75002-75080]"
    }, {
      "left" : "tempDfp = tempDfp.multiply(2);",
      "right" : "tempDfp = tempDfp.multiply(2);",
      "info" : "ExpressionStatement[74909-74939]:ExpressionStatement[75016-75046]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[74952-74963]:ExpressionStatement[75059-75070]"
    }, {
      "left" : "exponent--;",
      "right" : "exponent--;",
      "info" : "ExpressionStatement[74982-74993]:ExpressionStatement[75089-75100]"
    }, {
      "left" : "y = y.divide(DfpMath.pow(getTwo(), exponent));",
      "right" : "y = y.divide(DfpMath.pow(getTwo(), exponent));",
      "info" : "ExpressionStatement[75065-75111]:ExpressionStatement[75172-75218]"
    }, {
      "left" : "if (exponent > -1023)",
      "right" : "if (exponent > -1023)",
      "info" : "IfStatement[75120-75191]:IfStatement[75227-75298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75142-75191]:Block[75249-75298]"
    }, {
      "left" : "y = y.subtract(getOne());",
      "right" : "y = y.subtract(getOne());",
      "info" : "ExpressionStatement[75156-75181]:ExpressionStatement[75263-75288]"
    }, {
      "left" : "if (exponent < -1074)",
      "right" : "if (exponent < -1074)",
      "info" : "IfStatement[75201-75256]:IfStatement[75308-75363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75223-75256]:Block[75330-75363]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[75237-75246]:ReturnStatement[75344-75353]"
    }, {
      "left" : "if (exponent > 1023)",
      "right" : "if (exponent > 1023)",
      "info" : "IfStatement[75266-75379]:IfStatement[75373-75486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75287-75379]:Block[75394-75486]"
    }, {
      "left" : "return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;",
      "right" : "return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[75301-75369]:ReturnStatement[75408-75476]"
    }, {
      "left" : "y = y.multiply(newInstance(4503599627370496l)).rint();",
      "right" : "y = y.multiply(newInstance(4503599627370496l)).rint();",
      "info" : "ExpressionStatement[75390-75444]:ExpressionStatement[75497-75551]"
    }, {
      "left" : "String str = y.toString();",
      "right" : "String str = y.toString();",
      "info" : "VariableDeclarationStatement[75453-75479]:VariableDeclarationStatement[75560-75586]"
    }, {
      "left" : "str = str.substring(0, str.length()-1);",
      "right" : "str = str.substring(0, str.length()-1);",
      "info" : "ExpressionStatement[75488-75527]:ExpressionStatement[75595-75634]"
    }, {
      "left" : "long mantissa = Long.parseLong(str);",
      "right" : "long mantissa = Long.parseLong(str);",
      "info" : "VariableDeclarationStatement[75536-75572]:VariableDeclarationStatement[75643-75679]"
    }, {
      "left" : "if (mantissa == 4503599627370496L)",
      "right" : "if (mantissa == 4503599627370496L)",
      "info" : "IfStatement[75582-75752]:IfStatement[75689-75859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75617-75752]:Block[75724-75859]"
    }, {
      "left" : "mantissa = 0;",
      "right" : "mantissa = 0;",
      "info" : "ExpressionStatement[75705-75718]:ExpressionStatement[75812-75825]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[75731-75742]:ExpressionStatement[75838-75849]"
    }, {
      "left" : "if (exponent <= -1023)",
      "right" : "if (exponent <= -1023)",
      "info" : "IfStatement[75823-75881]:IfStatement[75930-75988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75846-75881]:Block[75953-75988]"
    }, {
      "left" : "exponent--;",
      "right" : "exponent--;",
      "info" : "ExpressionStatement[75860-75871]:ExpressionStatement[75967-75978]"
    }, {
      "left" : "while (exponent < -1023)",
      "right" : "while (exponent < -1023)",
      "info" : "WhileStatement[75891-75980]:WhileStatement[75998-76087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75916-75980]:Block[76023-76087]"
    }, {
      "left" : "exponent++;",
      "right" : "exponent++;",
      "info" : "ExpressionStatement[75930-75941]:ExpressionStatement[76037-76048]"
    }, {
      "left" : "mantissa >>>= 1;",
      "right" : "mantissa >>>= 1;",
      "info" : "ExpressionStatement[75954-75970]:ExpressionStatement[76061-76077]"
    }, {
      "left" : "long bits = mantissa | ((exponent + 1023L) << 52);",
      "right" : "long bits = mantissa | ((exponent + 1023L) << 52);",
      "info" : "VariableDeclarationStatement[75990-76040]:VariableDeclarationStatement[76097-76147]"
    }, {
      "left" : "double x = Double.longBitsToDouble(bits);",
      "right" : "double x = Double.longBitsToDouble(bits);",
      "info" : "VariableDeclarationStatement[76049-76090]:VariableDeclarationStatement[76156-76197]"
    }, {
      "left" : "if (negate)",
      "right" : "if (negate)",
      "info" : "IfStatement[76100-76143]:IfStatement[76207-76250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76112-76143]:Block[76219-76250]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[76126-76133]:ExpressionStatement[76233-76240]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[76153-76162]:ReturnStatement[76260-76269]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76329-76335]:Modifier[76436-76442]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[76336-76344]:ArrayType[76443-76451]"
    }, {
      "left" : "toSplitDouble",
      "right" : "toSplitDouble",
      "info" : "SimpleName[76345-76358]:SimpleName[76452-76465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76361-76624]:Block[76468-76731]"
    }, {
      "left" : "double split[] = new double[2];",
      "right" : "double split[] = new double[2];",
      "info" : "VariableDeclarationStatement[76371-76402]:VariableDeclarationStatement[76478-76509]"
    }, {
      "left" : "long mask = 0xffffffffc0000000L;",
      "right" : "long mask = 0xffffffffc0000000L;",
      "info" : "VariableDeclarationStatement[76411-76443]:VariableDeclarationStatement[76518-76550]"
    }, {
      "left" : "split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);",
      "right" : "split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);",
      "info" : "ExpressionStatement[76453-76532]:ExpressionStatement[76560-76639]"
    }, {
      "left" : "split[1] = subtract(newInstance(split[0])).toDouble();",
      "right" : "split[1] = subtract(newInstance(split[0])).toDouble();",
      "info" : "ExpressionStatement[76541-76595]:ExpressionStatement[76648-76702]"
    }, {
      "left" : "return split;",
      "right" : "return split;",
      "info" : "ReturnStatement[76605-76618]:ReturnStatement[76712-76725]"
    } ]
  },
  "interFileMappings" : { }
}