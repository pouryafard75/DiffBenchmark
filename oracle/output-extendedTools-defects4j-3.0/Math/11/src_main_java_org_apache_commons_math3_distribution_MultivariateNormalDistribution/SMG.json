{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MultivariateNormalDistribution",
      "right" : "MultivariateNormalDistribution",
      "info" : "TypeDeclaration[1435-9007]:TypeDeclaration[1435-9009]"
    }, {
      "left" : "private final double[] means;",
      "right" : "private final double[] means;",
      "info" : "FieldDeclaration[1918-1975]:FieldDeclaration[1918-1975]"
    }, {
      "left" : "private final RealMatrix covarianceMatrix;",
      "right" : "private final RealMatrix covarianceMatrix;",
      "info" : "FieldDeclaration[1980-2052]:FieldDeclaration[1980-2052]"
    }, {
      "left" : "private final RealMatrix covarianceMatrixInverse;",
      "right" : "private final RealMatrix covarianceMatrixInverse;",
      "info" : "FieldDeclaration[2057-2162]:FieldDeclaration[2057-2162]"
    }, {
      "left" : "private final double covarianceMatrixDeterminant;",
      "right" : "private final double covarianceMatrixDeterminant;",
      "info" : "FieldDeclaration[2167-2269]:FieldDeclaration[2167-2269]"
    }, {
      "left" : "private final RealMatrix samplingMatrix;",
      "right" : "private final RealMatrix samplingMatrix;",
      "info" : "FieldDeclaration[2274-2364]:FieldDeclaration[2274-2364]"
    }, {
      "left" : "public MultivariateNormalDistribution(final double[] means,\n                                          final double[][] covariances)\n        throws SingularMatrixException,\n               DimensionMismatchException,\n               NonPositiveDefiniteMatrixException",
      "right" : "public MultivariateNormalDistribution(final double[] means,\n                                          final double[][] covariances)\n        throws SingularMatrixException,\n               DimensionMismatchException,\n               NonPositiveDefiniteMatrixException",
      "info" : "MethodDeclaration[2370-3433]:MethodDeclaration[2370-3433]"
    }, {
      "left" : "public MultivariateNormalDistribution(RandomGenerator rng,\n                                          final double[] means,\n                                          final double[][] covariances)\n            throws SingularMatrixException,\n                   DimensionMismatchException,\n                   NonPositiveDefiniteMatrixException",
      "right" : "public MultivariateNormalDistribution(RandomGenerator rng,\n                                          final double[] means,\n                                          final double[][] covariances)\n            throws SingularMatrixException,\n                   DimensionMismatchException,\n                   NonPositiveDefiniteMatrixException",
      "info" : "MethodDeclaration[3439-6594]:MethodDeclaration[3439-6594]"
    }, {
      "left" : "public double[] getMeans()",
      "right" : "public double[] getMeans()",
      "info" : "MethodDeclaration[6600-6759]:MethodDeclaration[6600-6759]"
    }, {
      "left" : "public RealMatrix getCovariances()",
      "right" : "public RealMatrix getCovariances()",
      "info" : "MethodDeclaration[6765-6943]:MethodDeclaration[6765-6943]"
    }, {
      "left" : "public double density(final double[] vals) throws DimensionMismatchException",
      "right" : "public double density(final double[] vals) throws DimensionMismatchException",
      "info" : "MethodDeclaration[6949-7365]:MethodDeclaration[6949-7367]"
    }, {
      "left" : "public double[] getStandardDeviations()",
      "right" : "public double[] getStandardDeviations()",
      "info" : "MethodDeclaration[7371-7832]:MethodDeclaration[7373-7834]"
    }, {
      "left" : "public double[] sample()",
      "right" : "public double[] sample()",
      "info" : "MethodDeclaration[7838-8263]:MethodDeclaration[7840-8265]"
    }, {
      "left" : "private double getExponentTerm(final double[] values)",
      "right" : "private double getExponentTerm(final double[] values)",
      "info" : "MethodDeclaration[8269-9005]:MethodDeclaration[8271-9007]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1819-1825]:Modifier[1819-1825]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1826-1831]:TYPE_DECLARATION_KIND[1826-1831]"
    }, {
      "left" : "MultivariateNormalDistribution",
      "right" : "MultivariateNormalDistribution",
      "info" : "SimpleName[1832-1862]:SimpleName[1832-1862]"
    }, {
      "left" : "AbstractMultivariateRealDistribution",
      "right" : "AbstractMultivariateRealDistribution",
      "info" : "SimpleType[1875-1911]:SimpleType[1875-1911]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3109-3115]:Modifier[3109-3115]"
    }, {
      "left" : "MultivariateNormalDistribution",
      "right" : "MultivariateNormalDistribution",
      "info" : "SimpleName[3116-3146]:SimpleName[3116-3146]"
    }, {
      "left" : "final double[] means",
      "right" : "final double[] means",
      "info" : "SingleVariableDeclaration[3147-3167]:SingleVariableDeclaration[3147-3167]"
    }, {
      "left" : "final double[][] covariances",
      "right" : "final double[][] covariances",
      "info" : "SingleVariableDeclaration[3211-3239]:SingleVariableDeclaration[3211-3239]"
    }, {
      "left" : "SingularMatrixException",
      "right" : "SingularMatrixException",
      "info" : "SimpleType[3256-3279]:SimpleType[3256-3279]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[3296-3322]:SimpleType[3296-3322]"
    }, {
      "left" : "NonPositiveDefiniteMatrixException",
      "right" : "NonPositiveDefiniteMatrixException",
      "info" : "SimpleType[3339-3373]:SimpleType[3339-3373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3374-3433]:Block[3374-3433]"
    }, {
      "left" : "this(new Well19937c(), means, covariances);",
      "right" : "this(new Well19937c(), means, covariances);",
      "info" : "ConstructorInvocation[3384-3427]:ConstructorInvocation[3384-3427]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4221-4227]:Modifier[4221-4227]"
    }, {
      "left" : "MultivariateNormalDistribution",
      "right" : "MultivariateNormalDistribution",
      "info" : "SimpleName[4228-4258]:SimpleName[4228-4258]"
    }, {
      "left" : "RandomGenerator rng",
      "right" : "RandomGenerator rng",
      "info" : "SingleVariableDeclaration[4259-4278]:SingleVariableDeclaration[4259-4278]"
    }, {
      "left" : "final double[] means",
      "right" : "final double[] means",
      "info" : "SingleVariableDeclaration[4322-4342]:SingleVariableDeclaration[4322-4342]"
    }, {
      "left" : "final double[][] covariances",
      "right" : "final double[][] covariances",
      "info" : "SingleVariableDeclaration[4386-4414]:SingleVariableDeclaration[4386-4414]"
    }, {
      "left" : "SingularMatrixException",
      "right" : "SingularMatrixException",
      "info" : "SimpleType[4435-4458]:SimpleType[4435-4458]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[4479-4505]:SimpleType[4479-4505]"
    }, {
      "left" : "NonPositiveDefiniteMatrixException",
      "right" : "NonPositiveDefiniteMatrixException",
      "info" : "SimpleType[4526-4560]:SimpleType[4526-4560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4561-6594]:Block[4561-6594]"
    }, {
      "left" : "super(rng, means.length);",
      "right" : "super(rng, means.length);",
      "info" : "SuperConstructorInvocation[4571-4596]:SuperConstructorInvocation[4571-4596]"
    }, {
      "left" : "final int dim = means.length;",
      "right" : "final int dim = means.length;",
      "info" : "VariableDeclarationStatement[4606-4635]:VariableDeclarationStatement[4606-4635]"
    }, {
      "left" : "if (covariances.length != dim)",
      "right" : "if (covariances.length != dim)",
      "info" : "IfStatement[4645-4762]:IfStatement[4645-4762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4676-4762]:Block[4676-4762]"
    }, {
      "left" : "throw new DimensionMismatchException(covariances.length, dim);",
      "right" : "throw new DimensionMismatchException(covariances.length, dim);",
      "info" : "ThrowStatement[4690-4752]:ThrowStatement[4690-4752]"
    }, {
      "left" : "for (int i = 0; i < dim; i++)",
      "right" : "for (int i = 0; i < dim; i++)",
      "info" : "ForStatement[4772-4957]:ForStatement[4772-4957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4802-4957]:Block[4802-4957]"
    }, {
      "left" : "if (dim != covariances[i].length)",
      "right" : "if (dim != covariances[i].length)",
      "info" : "IfStatement[4816-4947]:IfStatement[4816-4947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4850-4947]:Block[4850-4947]"
    }, {
      "left" : "throw new DimensionMismatchException(covariances[i].length, dim);",
      "right" : "throw new DimensionMismatchException(covariances[i].length, dim);",
      "info" : "ThrowStatement[4868-4933]:ThrowStatement[4868-4933]"
    }, {
      "left" : "this.means = MathArrays.copyOf(means);",
      "right" : "this.means = MathArrays.copyOf(means);",
      "info" : "ExpressionStatement[4967-5005]:ExpressionStatement[4967-5005]"
    }, {
      "left" : "covarianceMatrix = new Array2DRowRealMatrix(covariances);",
      "right" : "covarianceMatrix = new Array2DRowRealMatrix(covariances);",
      "info" : "ExpressionStatement[5015-5072]:ExpressionStatement[5015-5072]"
    }, {
      "left" : "final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);",
      "right" : "final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);",
      "info" : "VariableDeclarationStatement[5132-5210]:VariableDeclarationStatement[5132-5210]"
    }, {
      "left" : "covarianceMatrixInverse = covMatDec.getSolver().getInverse();",
      "right" : "covarianceMatrixInverse = covMatDec.getSolver().getInverse();",
      "info" : "ExpressionStatement[5262-5323]:ExpressionStatement[5262-5323]"
    }, {
      "left" : "covarianceMatrixDeterminant = covMatDec.getDeterminant();",
      "right" : "covarianceMatrixDeterminant = covMatDec.getDeterminant();",
      "info" : "ExpressionStatement[5378-5435]:ExpressionStatement[5378-5435]"
    }, {
      "left" : "final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();",
      "right" : "final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();",
      "info" : "VariableDeclarationStatement[5494-5560]:VariableDeclarationStatement[5494-5560]"
    }, {
      "left" : "for (int i = 0; i < covMatEigenvalues.length; i++)",
      "right" : "for (int i = 0; i < covMatEigenvalues.length; i++)",
      "info" : "ForStatement[5570-5780]:ForStatement[5570-5780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5621-5780]:Block[5621-5780]"
    }, {
      "left" : "if (covMatEigenvalues[i] < 0)",
      "right" : "if (covMatEigenvalues[i] < 0)",
      "info" : "IfStatement[5635-5770]:IfStatement[5635-5770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5665-5770]:Block[5665-5770]"
    }, {
      "left" : "throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);",
      "right" : "throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);",
      "info" : "ThrowStatement[5683-5756]:ThrowStatement[5683-5756]"
    }, {
      "left" : "final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",
      "right" : "final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",
      "info" : "VariableDeclarationStatement[5870-5953]:VariableDeclarationStatement[5870-5953]"
    }, {
      "left" : "for (int v = 0; v < dim; v++)",
      "right" : "for (int v = 0; v < dim; v++)",
      "info" : "ForStatement[5962-6127]:ForStatement[5962-6127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5992-6127]:Block[5992-6127]"
    }, {
      "left" : "final double[] evec = covMatDec.getEigenvector(v).toArray();",
      "right" : "final double[] evec = covMatDec.getEigenvector(v).toArray();",
      "info" : "VariableDeclarationStatement[6006-6066]:VariableDeclarationStatement[6006-6066]"
    }, {
      "left" : "covMatEigenvectors.setColumn(v, evec);",
      "right" : "covMatEigenvectors.setColumn(v, evec);",
      "info" : "ExpressionStatement[6079-6117]:ExpressionStatement[6079-6117]"
    }, {
      "left" : "final RealMatrix tmpMatrix = covMatEigenvectors.transpose();",
      "right" : "final RealMatrix tmpMatrix = covMatEigenvectors.transpose();",
      "info" : "VariableDeclarationStatement[6137-6197]:VariableDeclarationStatement[6137-6197]"
    }, {
      "left" : "for (int row = 0; row < dim; row++)",
      "right" : "for (int row = 0; row < dim; row++)",
      "info" : "ForStatement[6279-6522]:ForStatement[6279-6522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6315-6522]:Block[6315-6522]"
    }, {
      "left" : "final double factor = FastMath.sqrt(covMatEigenvalues[row]);",
      "right" : "final double factor = FastMath.sqrt(covMatEigenvalues[row]);",
      "info" : "VariableDeclarationStatement[6329-6389]:VariableDeclarationStatement[6329-6389]"
    }, {
      "left" : "for (int col = 0; col < dim; col++)",
      "right" : "for (int col = 0; col < dim; col++)",
      "info" : "ForStatement[6402-6512]:ForStatement[6402-6512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6438-6512]:Block[6438-6512]"
    }, {
      "left" : "tmpMatrix.multiplyEntry(row, col, factor);",
      "right" : "tmpMatrix.multiplyEntry(row, col, factor);",
      "info" : "ExpressionStatement[6456-6498]:ExpressionStatement[6456-6498]"
    }, {
      "left" : "samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);",
      "right" : "samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);",
      "info" : "ExpressionStatement[6532-6588]:ExpressionStatement[6532-6588]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6684-6690]:Modifier[6684-6690]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[6691-6699]:ArrayType[6691-6699]"
    }, {
      "left" : "getMeans",
      "right" : "getMeans",
      "info" : "SimpleName[6700-6708]:SimpleName[6700-6708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6711-6759]:Block[6711-6759]"
    }, {
      "left" : "return MathArrays.copyOf(means);",
      "right" : "return MathArrays.copyOf(means);",
      "info" : "ReturnStatement[6721-6753]:ReturnStatement[6721-6753]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6861-6867]:Modifier[6861-6867]"
    }, {
      "left" : "RealMatrix",
      "right" : "RealMatrix",
      "info" : "SimpleType[6868-6878]:SimpleType[6868-6878]"
    }, {
      "left" : "getCovariances",
      "right" : "getCovariances",
      "info" : "SimpleName[6879-6893]:SimpleName[6879-6893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6896-6943]:Block[6896-6943]"
    }, {
      "left" : "return covarianceMatrix.copy();",
      "right" : "return covarianceMatrix.copy();",
      "info" : "ReturnStatement[6906-6937]:ReturnStatement[6906-6937]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6974-6980]:Modifier[6974-6980]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[6981-6987]:PrimitiveType[6981-6987]"
    }, {
      "left" : "density",
      "right" : "density",
      "info" : "SimpleName[6988-6995]:SimpleName[6988-6995]"
    }, {
      "left" : "final double[] vals",
      "right" : "final double[] vals",
      "info" : "SingleVariableDeclaration[6996-7015]:SingleVariableDeclaration[6996-7015]"
    }, {
      "left" : "DimensionMismatchException",
      "right" : "DimensionMismatchException",
      "info" : "SimpleType[7024-7050]:SimpleType[7024-7050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7051-7365]:Block[7051-7367]"
    }, {
      "left" : "final int dim = getDimension();",
      "right" : "final int dim = getDimension();",
      "info" : "VariableDeclarationStatement[7061-7092]:VariableDeclarationStatement[7061-7092]"
    }, {
      "left" : "if (vals.length != dim)",
      "right" : "if (vals.length != dim)",
      "info" : "IfStatement[7101-7204]:IfStatement[7101-7204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7125-7204]:Block[7125-7204]"
    }, {
      "left" : "throw new DimensionMismatchException(vals.length, dim);",
      "right" : "throw new DimensionMismatchException(vals.length, dim);",
      "info" : "ThrowStatement[7139-7194]:ThrowStatement[7139-7194]"
    }, {
      "left" : "return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);",
      "right" : "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);",
      "info" : "ReturnStatement[7214-7359]:ReturnStatement[7214-7361]"
    }, {
      "left" : "dim",
      "right" : "dim",
      "info" : "SimpleName[7252-7255]:SimpleName[7258-7261]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7527-7533]:Modifier[7529-7535]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[7534-7542]:ArrayType[7536-7544]"
    }, {
      "left" : "getStandardDeviations",
      "right" : "getStandardDeviations",
      "info" : "SimpleName[7543-7564]:SimpleName[7545-7566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7567-7832]:Block[7569-7834]"
    }, {
      "left" : "final int dim = getDimension();",
      "right" : "final int dim = getDimension();",
      "info" : "VariableDeclarationStatement[7577-7608]:VariableDeclarationStatement[7579-7610]"
    }, {
      "left" : "final double[] std = new double[dim];",
      "right" : "final double[] std = new double[dim];",
      "info" : "VariableDeclarationStatement[7617-7654]:VariableDeclarationStatement[7619-7656]"
    }, {
      "left" : "final double[][] s = covarianceMatrix.getData();",
      "right" : "final double[][] s = covarianceMatrix.getData();",
      "info" : "VariableDeclarationStatement[7663-7711]:VariableDeclarationStatement[7665-7713]"
    }, {
      "left" : "for (int i = 0; i < dim; i++)",
      "right" : "for (int i = 0; i < dim; i++)",
      "info" : "ForStatement[7720-7806]:ForStatement[7722-7808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7750-7806]:Block[7752-7808]"
    }, {
      "left" : "std[i] = FastMath.sqrt(s[i][i]);",
      "right" : "std[i] = FastMath.sqrt(s[i][i]);",
      "info" : "ExpressionStatement[7764-7796]:ExpressionStatement[7766-7798]"
    }, {
      "left" : "return std;",
      "right" : "return std;",
      "info" : "ReturnStatement[7815-7826]:ReturnStatement[7817-7828]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7863-7869]:Modifier[7865-7871]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[7870-7878]:ArrayType[7872-7880]"
    }, {
      "left" : "sample",
      "right" : "sample",
      "info" : "SimpleName[7879-7885]:SimpleName[7881-7887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7888-8263]:Block[7890-8265]"
    }, {
      "left" : "final int dim = getDimension();",
      "right" : "final int dim = getDimension();",
      "info" : "VariableDeclarationStatement[7898-7929]:VariableDeclarationStatement[7900-7931]"
    }, {
      "left" : "final double[] normalVals = new double[dim];",
      "right" : "final double[] normalVals = new double[dim];",
      "info" : "VariableDeclarationStatement[7938-7982]:VariableDeclarationStatement[7940-7984]"
    }, {
      "left" : "for (int i = 0; i < dim; i++)",
      "right" : "for (int i = 0; i < dim; i++)",
      "info" : "ForStatement[7992-8084]:ForStatement[7994-8086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8022-8084]:Block[8024-8086]"
    }, {
      "left" : "normalVals[i] = random.nextGaussian();",
      "right" : "normalVals[i] = random.nextGaussian();",
      "info" : "ExpressionStatement[8036-8074]:ExpressionStatement[8038-8076]"
    }, {
      "left" : "final double[] vals = samplingMatrix.operate(normalVals);",
      "right" : "final double[] vals = samplingMatrix.operate(normalVals);",
      "info" : "VariableDeclarationStatement[8094-8151]:VariableDeclarationStatement[8096-8153]"
    }, {
      "left" : "for (int i = 0; i < dim; i++)",
      "right" : "for (int i = 0; i < dim; i++)",
      "info" : "ForStatement[8161-8235]:ForStatement[8163-8237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8191-8235]:Block[8193-8237]"
    }, {
      "left" : "vals[i] += means[i];",
      "right" : "vals[i] += means[i];",
      "info" : "ExpressionStatement[8205-8225]:ExpressionStatement[8207-8227]"
    }, {
      "left" : "return vals;",
      "right" : "return vals;",
      "info" : "ReturnStatement[8245-8257]:ReturnStatement[8247-8259]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8499-8506]:Modifier[8501-8508]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8507-8513]:PrimitiveType[8509-8515]"
    }, {
      "left" : "getExponentTerm",
      "right" : "getExponentTerm",
      "info" : "SimpleName[8514-8529]:SimpleName[8516-8531]"
    }, {
      "left" : "final double[] values",
      "right" : "final double[] values",
      "info" : "SingleVariableDeclaration[8530-8551]:SingleVariableDeclaration[8532-8553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8553-9005]:Block[8555-9007]"
    }, {
      "left" : "final double[] centered = new double[values.length];",
      "right" : "final double[] centered = new double[values.length];",
      "info" : "VariableDeclarationStatement[8563-8615]:VariableDeclarationStatement[8565-8617]"
    }, {
      "left" : "for (int i = 0; i < centered.length; i++)",
      "right" : "for (int i = 0; i < centered.length; i++)",
      "info" : "ForStatement[8624-8730]:ForStatement[8626-8732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8666-8730]:Block[8668-8732]"
    }, {
      "left" : "centered[i] = values[i] - getMeans()[i];",
      "right" : "centered[i] = values[i] - getMeans()[i];",
      "info" : "ExpressionStatement[8680-8720]:ExpressionStatement[8682-8722]"
    }, {
      "left" : "final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);",
      "right" : "final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);",
      "info" : "VariableDeclarationStatement[8739-8816]:VariableDeclarationStatement[8741-8818]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[8825-8840]:VariableDeclarationStatement[8827-8842]"
    }, {
      "left" : "for (int i = 0; i < preMultiplied.length; i++)",
      "right" : "for (int i = 0; i < preMultiplied.length; i++)",
      "info" : "ForStatement[8849-8958]:ForStatement[8851-8960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8896-8958]:Block[8898-8960]"
    }, {
      "left" : "sum += preMultiplied[i] * centered[i];",
      "right" : "sum += preMultiplied[i] * centered[i];",
      "info" : "ExpressionStatement[8910-8948]:ExpressionStatement[8912-8950]"
    }, {
      "left" : "return FastMath.exp(-0.5 * sum);",
      "right" : "return FastMath.exp(-0.5 * sum);",
      "info" : "ReturnStatement[8967-8999]:ReturnStatement[8969-9001]"
    } ]
  },
  "interFileMappings" : { }
}