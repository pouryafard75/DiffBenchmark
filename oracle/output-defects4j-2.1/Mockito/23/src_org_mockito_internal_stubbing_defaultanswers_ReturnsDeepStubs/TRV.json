{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = -7105341425736035847L;",
      "right" : "private static final long serialVersionUID = -7105341425736035847L;",
      "info" : "FieldDeclaration[1554-1621]:FieldDeclaration[1554-1621]"
    }, {
      "left" : "private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable",
      "right" : "private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable",
      "info" : "MethodDeclaration[2269-3043]:MethodDeclaration[2655-3429]"
    }, {
      "left" : "private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata)",
      "right" : "private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata)",
      "info" : "MethodDeclaration[3051-3837]:MethodDeclaration[3437-4223]"
    }, {
      "left" : "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata)",
      "right" : "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata)",
      "info" : "MethodDeclaration[4315-4659]:MethodDeclaration[4728-5072]"
    }, {
      "left" : "protected GenericMetadataSupport actualParameterizedType(Object mock)",
      "right" : "protected GenericMetadataSupport actualParameterizedType(Object mock)",
      "info" : "MethodDeclaration[4480-4640]:MethodDeclaration[4893-5053]"
    }, {
      "left" : "protected GenericMetadataSupport actualParameterizedType(Object mock)",
      "right" : "protected GenericMetadataSupport actualParameterizedType(Object mock)",
      "info" : "MethodDeclaration[5023-5296]:MethodDeclaration[5522-5795]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2388-3043]:Block[2774-3429]"
    }, {
      "left" : "InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());",
      "right" : "InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());",
      "info" : "VariableDeclarationStatement[2396-2486]:VariableDeclarationStatement[2782-2872]"
    }, {
      "left" : "InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();",
      "right" : "InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();",
      "info" : "VariableDeclarationStatement[2493-2588]:VariableDeclarationStatement[2879-2974]"
    }, {
      "left" : "for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations())",
      "right" : "for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations())",
      "info" : "EnhancedForStatement[2648-2915]:EnhancedForStatement[3034-3301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2740-2915]:Block[3126-3301]"
    }, {
      "left" : "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation()))",
      "right" : "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation()))",
      "info" : "IfStatement[2749-2910]:IfStatement[3135-3296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2840-2910]:Block[3226-3296]"
    }, {
      "left" : "return stubbedInvocationMatcher.answer(invocation);",
      "right" : "return stubbedInvocationMatcher.answer(invocation);",
      "info" : "ReturnStatement[2850-2901]:ReturnStatement[3236-3287]"
    }, {
      "left" : "return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);",
      "right" : "return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);",
      "info" : "ReturnStatement[2949-3036]:ReturnStatement[3335-3422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3667-3837]:Block[4053-4223]"
    }, {
      "left" : "return mockitoCore.mock(\r\n                returnTypeGenericMetadata.rawType(),\r\n                withSettingsUsing(returnTypeGenericMetadata)\r\n        );",
      "right" : "return mockitoCore.mock(\r\n                returnTypeGenericMetadata.rawType(),\r\n                withSettingsUsing(returnTypeGenericMetadata)\r\n        );",
      "info" : "ReturnStatement[3678-3830]:ReturnStatement[4064-4216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4424-4659]:Block[4837-5072]"
    }, {
      "left" : "return new ReturnsDeepStubs() {\r\n            @Override\r\n            protected GenericMetadataSupport actualParameterizedType(Object mock) {\r\n                return returnTypeGenericMetadata;\r\n            }\r\n        };",
      "right" : "return new ReturnsDeepStubs() {\r\n            @Override\r\n            protected GenericMetadataSupport actualParameterizedType(Object mock) {\r\n                return returnTypeGenericMetadata;\r\n            }\r\n        };",
      "info" : "ReturnStatement[4435-4652]:ReturnStatement[4848-5065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4573-4640]:Block[4986-5053]"
    }, {
      "left" : "return returnTypeGenericMetadata;",
      "right" : "return returnTypeGenericMetadata;",
      "info" : "ReturnStatement[4592-4625]:ReturnStatement[5005-5038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5093-5296]:Block[5592-5795]"
    }, {
      "left" : "CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();",
      "right" : "CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();",
      "info" : "VariableDeclarationStatement[5104-5209]:VariableDeclarationStatement[5603-5708]"
    }, {
      "left" : "return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());",
      "right" : "return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());",
      "info" : "ReturnStatement[5219-5289]:ReturnStatement[5718-5788]"
    } ]
  },
  "interFileMappings" : { }
}