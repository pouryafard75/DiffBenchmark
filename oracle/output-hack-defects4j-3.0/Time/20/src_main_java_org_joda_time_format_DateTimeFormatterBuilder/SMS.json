{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "TypeDeclaration[1277-104227]:TypeDeclaration[1277-104417]"
    }, {
      "left" : "private ArrayList<Object> iElementPairs;",
      "right" : "private ArrayList<Object> iElementPairs;",
      "info" : "FieldDeclaration[2476-2572]:FieldDeclaration[2476-2572]"
    }, {
      "left" : "private Object iFormatter;",
      "right" : "private Object iFormatter;",
      "info" : "FieldDeclaration[2577-2652]:FieldDeclaration[2577-2652]"
    }, {
      "left" : "public DateTimeFormatterBuilder()",
      "right" : "public DateTimeFormatterBuilder()",
      "info" : "MethodDeclaration[2736-2902]:MethodDeclaration[2736-2902]"
    }, {
      "left" : "public DateTimeFormatter toFormatter()",
      "right" : "public DateTimeFormatter toFormatter()",
      "info" : "MethodDeclaration[2986-4169]:MethodDeclaration[2986-4169]"
    }, {
      "left" : "public DateTimePrinter toPrinter()",
      "right" : "public DateTimePrinter toPrinter()",
      "info" : "MethodDeclaration[4175-4870]:MethodDeclaration[4175-4870]"
    }, {
      "left" : "public DateTimeParser toParser()",
      "right" : "public DateTimeParser toParser()",
      "info" : "MethodDeclaration[4876-5561]:MethodDeclaration[4876-5561]"
    }, {
      "left" : "public boolean canBuildFormatter()",
      "right" : "public boolean canBuildFormatter()",
      "info" : "MethodDeclaration[5645-5910]:MethodDeclaration[5645-5910]"
    }, {
      "left" : "public boolean canBuildPrinter()",
      "right" : "public boolean canBuildPrinter()",
      "info" : "MethodDeclaration[5916-6173]:MethodDeclaration[5916-6173]"
    }, {
      "left" : "public boolean canBuildParser()",
      "right" : "public boolean canBuildParser()",
      "info" : "MethodDeclaration[6179-6432]:MethodDeclaration[6179-6432]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[6516-6705]:MethodDeclaration[6516-6705]"
    }, {
      "left" : "public DateTimeFormatterBuilder append(DateTimeFormatter formatter)",
      "right" : "public DateTimeFormatterBuilder append(DateTimeFormatter formatter)",
      "info" : "MethodDeclaration[6789-7296]:MethodDeclaration[6789-7296]"
    }, {
      "left" : "public DateTimeFormatterBuilder append(DateTimePrinter printer)",
      "right" : "public DateTimeFormatterBuilder append(DateTimePrinter printer)",
      "info" : "MethodDeclaration[7302-7772]:MethodDeclaration[7302-7772]"
    }, {
      "left" : "public DateTimeFormatterBuilder append(DateTimeParser parser)",
      "right" : "public DateTimeFormatterBuilder append(DateTimeParser parser)",
      "info" : "MethodDeclaration[7778-8224]:MethodDeclaration[7778-8224]"
    }, {
      "left" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser parser)",
      "right" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser parser)",
      "info" : "MethodDeclaration[8230-8718]:MethodDeclaration[8230-8718]"
    }, {
      "left" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers)",
      "right" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers)",
      "info" : "MethodDeclaration[8724-10615]:MethodDeclaration[8724-10615]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendOptional(DateTimeParser parser)",
      "right" : "public DateTimeFormatterBuilder appendOptional(DateTimeParser parser)",
      "info" : "MethodDeclaration[10621-11171]:MethodDeclaration[10621-11171]"
    }, {
      "left" : "private void checkParser(DateTimeParser parser)",
      "right" : "private void checkParser(DateTimeParser parser)",
      "info" : "MethodDeclaration[11255-11542]:MethodDeclaration[11255-11542]"
    }, {
      "left" : "private void checkPrinter(DateTimePrinter printer)",
      "right" : "private void checkPrinter(DateTimePrinter printer)",
      "info" : "MethodDeclaration[11548-11843]:MethodDeclaration[11548-11843]"
    }, {
      "left" : "private DateTimeFormatterBuilder append0(Object element)",
      "right" : "private DateTimeFormatterBuilder append0(Object element)",
      "info" : "MethodDeclaration[11849-12090]:MethodDeclaration[11849-12090]"
    }, {
      "left" : "private DateTimeFormatterBuilder append0(\n            DateTimePrinter printer, DateTimeParser parser)",
      "right" : "private DateTimeFormatterBuilder append0(\n            DateTimePrinter printer, DateTimeParser parser)",
      "info" : "MethodDeclaration[12096-12324]:MethodDeclaration[12096-12324]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendLiteral(char c)",
      "right" : "public DateTimeFormatterBuilder appendLiteral(char c)",
      "info" : "MethodDeclaration[12408-12727]:MethodDeclaration[12408-12727]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendLiteral(String text)",
      "right" : "public DateTimeFormatterBuilder appendLiteral(String text)",
      "info" : "MethodDeclaration[12733-13431]:MethodDeclaration[12733-13431]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendDecimal(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendDecimal(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[13437-14609]:MethodDeclaration[13437-14609]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFixedDecimal(\n            DateTimeFieldType fieldType, int numDigits)",
      "right" : "public DateTimeFormatterBuilder appendFixedDecimal(\n            DateTimeFieldType fieldType, int numDigits)",
      "info" : "MethodDeclaration[14615-15647]:MethodDeclaration[14615-15647]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendSignedDecimal(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendSignedDecimal(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[15653-16826]:MethodDeclaration[15653-16826]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFixedSignedDecimal(\n            DateTimeFieldType fieldType, int numDigits)",
      "right" : "public DateTimeFormatterBuilder appendFixedSignedDecimal(\n            DateTimeFieldType fieldType, int numDigits)",
      "info" : "MethodDeclaration[16832-17867]:MethodDeclaration[16832-17867]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendText(DateTimeFieldType fieldType)",
      "right" : "public DateTimeFormatterBuilder appendText(DateTimeFieldType fieldType)",
      "info" : "MethodDeclaration[17873-18422]:MethodDeclaration[17873-18422]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType)",
      "right" : "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType)",
      "info" : "MethodDeclaration[18428-18987]:MethodDeclaration[18428-18987]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFraction(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendFraction(\n            DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[18993-20144]:MethodDeclaration[18993-20144]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[20150-21012]:MethodDeclaration[20150-21012]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFractionOfMinute(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendFractionOfMinute(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[21018-21839]:MethodDeclaration[21018-21839]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFractionOfHour(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendFractionOfHour(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[21845-22658]:MethodDeclaration[21845-22658]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[22664-23474]:MethodDeclaration[22664-23474]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMillisOfSecond(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendMillisOfSecond(int minDigits)",
      "info" : "MethodDeclaration[23480-24309]:MethodDeclaration[23480-24309]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMillisOfDay(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendMillisOfDay(int minDigits)",
      "info" : "MethodDeclaration[24315-24671]:MethodDeclaration[24315-24671]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendSecondOfMinute(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendSecondOfMinute(int minDigits)",
      "info" : "MethodDeclaration[24677-25042]:MethodDeclaration[24677-25042]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendSecondOfDay(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendSecondOfDay(int minDigits)",
      "info" : "MethodDeclaration[25048-25404]:MethodDeclaration[25048-25404]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits)",
      "info" : "MethodDeclaration[25410-25769]:MethodDeclaration[25410-25769]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits)",
      "info" : "MethodDeclaration[25775-26131]:MethodDeclaration[25775-26131]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendHourOfDay(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendHourOfDay(int minDigits)",
      "info" : "MethodDeclaration[26137-26487]:MethodDeclaration[26137-26487]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendClockhourOfDay(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendClockhourOfDay(int minDigits)",
      "info" : "MethodDeclaration[26493-26857]:MethodDeclaration[26493-26857]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendHourOfHalfday(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendHourOfHalfday(int minDigits)",
      "info" : "MethodDeclaration[26863-27225]:MethodDeclaration[26863-27225]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits)",
      "info" : "MethodDeclaration[27231-27608]:MethodDeclaration[27231-27608]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendDayOfWeek(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendDayOfWeek(int minDigits)",
      "info" : "MethodDeclaration[27614-27964]:MethodDeclaration[27614-27964]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits)",
      "info" : "MethodDeclaration[27970-28323]:MethodDeclaration[27970-28323]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendDayOfYear(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendDayOfYear(int minDigits)",
      "info" : "MethodDeclaration[28329-28679]:MethodDeclaration[28329-28679]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits)",
      "info" : "MethodDeclaration[28685-29050]:MethodDeclaration[28685-29050]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[29056-29564]:MethodDeclaration[29056-29564]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits)",
      "right" : "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits)",
      "info" : "MethodDeclaration[29570-29926]:MethodDeclaration[29570-29926]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[29932-30428]:MethodDeclaration[29932-30428]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTwoDigitYear(int pivot)",
      "right" : "public DateTimeFormatterBuilder appendTwoDigitYear(int pivot)",
      "info" : "MethodDeclaration[30434-31451]:MethodDeclaration[30434-31451]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTwoDigitYear(int pivot, boolean lenientParse)",
      "right" : "public DateTimeFormatterBuilder appendTwoDigitYear(int pivot, boolean lenientParse)",
      "info" : "MethodDeclaration[31457-32350]:MethodDeclaration[31457-32350]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot)",
      "right" : "public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot)",
      "info" : "MethodDeclaration[32356-33389]:MethodDeclaration[32356-33389]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot, boolean lenientParse)",
      "right" : "public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot, boolean lenientParse)",
      "info" : "MethodDeclaration[33395-34316]:MethodDeclaration[33395-34316]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[34322-34827]:MethodDeclaration[34322-34827]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendYearOfCentury(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendYearOfCentury(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[34833-35345]:MethodDeclaration[34833-35345]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendCenturyOfEra(int minDigits, int maxDigits)",
      "right" : "public DateTimeFormatterBuilder appendCenturyOfEra(int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[35351-35866]:MethodDeclaration[35351-35866]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendHalfdayOfDayText()",
      "right" : "public DateTimeFormatterBuilder appendHalfdayOfDayText()",
      "info" : "MethodDeclaration[35872-36214]:MethodDeclaration[35872-36214]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendDayOfWeekText()",
      "right" : "public DateTimeFormatterBuilder appendDayOfWeekText()",
      "info" : "MethodDeclaration[36220-36572]:MethodDeclaration[36220-36572]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendDayOfWeekShortText()",
      "right" : "public DateTimeFormatterBuilder appendDayOfWeekShortText()",
      "info" : "MethodDeclaration[36578-36953]:MethodDeclaration[36578-36953]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMonthOfYearText()",
      "right" : "public DateTimeFormatterBuilder appendMonthOfYearText()",
      "info" : "MethodDeclaration[36959-37333]:MethodDeclaration[36959-37333]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendMonthOfYearShortText()",
      "right" : "public DateTimeFormatterBuilder appendMonthOfYearShortText()",
      "info" : "MethodDeclaration[37339-37709]:MethodDeclaration[37339-37709]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendEraText()",
      "right" : "public DateTimeFormatterBuilder appendEraText()",
      "info" : "MethodDeclaration[37715-38045]:MethodDeclaration[37715-38045]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneName()",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneName()",
      "info" : "MethodDeclaration[38051-38470]:MethodDeclaration[38051-38470]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneName(Map<String, DateTimeZone> parseLookup)",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneName(Map<String, DateTimeZone> parseLookup)",
      "info" : "MethodDeclaration[38476-39149]:MethodDeclaration[38476-39149]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneShortName()",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneShortName()",
      "info" : "MethodDeclaration[39155-39591]:MethodDeclaration[39155-39591]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> parseLookup)",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> parseLookup)",
      "info" : "MethodDeclaration[39597-40289]:MethodDeclaration[39597-40289]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneId()",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneId()",
      "info" : "MethodDeclaration[40295-40622]:MethodDeclaration[40295-40622]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneOffset(\n            String zeroOffsetText, boolean showSeparators,\n            int minFields, int maxFields)",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneOffset(\n            String zeroOffsetText, boolean showSeparators,\n            int minFields, int maxFields)",
      "info" : "MethodDeclaration[40628-41840]:MethodDeclaration[40628-41840]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendTimeZoneOffset(\n            String zeroOffsetPrintText, String zeroOffsetParseText, boolean showSeparators,\n            int minFields, int maxFields)",
      "right" : "public DateTimeFormatterBuilder appendTimeZoneOffset(\n            String zeroOffsetPrintText, String zeroOffsetParseText, boolean showSeparators,\n            int minFields, int maxFields)",
      "info" : "MethodDeclaration[41846-43296]:MethodDeclaration[41846-43296]"
    }, {
      "left" : "public DateTimeFormatterBuilder appendPattern(String pattern)",
      "right" : "public DateTimeFormatterBuilder appendPattern(String pattern)",
      "info" : "MethodDeclaration[43380-43797]:MethodDeclaration[43380-43797]"
    }, {
      "left" : "private Object getFormatter()",
      "right" : "private Object getFormatter()",
      "info" : "MethodDeclaration[43881-44532]:MethodDeclaration[43881-44532]"
    }, {
      "left" : "private boolean isPrinter(Object f)",
      "right" : "private boolean isPrinter(Object f)",
      "info" : "MethodDeclaration[44538-44789]:MethodDeclaration[44538-44789]"
    }, {
      "left" : "private boolean isParser(Object f)",
      "right" : "private boolean isParser(Object f)",
      "info" : "MethodDeclaration[44795-45043]:MethodDeclaration[44795-45043]"
    }, {
      "left" : "private boolean isFormatter(Object f)",
      "right" : "private boolean isFormatter(Object f)",
      "info" : "MethodDeclaration[45049-45140]:MethodDeclaration[45049-45140]"
    }, {
      "left" : "static void appendUnknownString(StringBuffer buf, int len)",
      "right" : "static void appendUnknownString(StringBuffer buf, int len)",
      "info" : "MethodDeclaration[45146-45295]:MethodDeclaration[45146-45295]"
    }, {
      "left" : "static void printUnknownString(Writer out, int len) throws IOException",
      "right" : "static void printUnknownString(Writer out, int len) throws IOException",
      "info" : "MethodDeclaration[45301-45461]:MethodDeclaration[45301-45461]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "TypeDeclaration[45545-47325]:TypeDeclaration[45545-47325]"
    }, {
      "left" : "private final char iValue;",
      "right" : "private final char iValue;",
      "info" : "FieldDeclaration[45641-45667]:FieldDeclaration[45641-45667]"
    }, {
      "left" : "CharacterLiteral(char value)",
      "right" : "CharacterLiteral(char value)",
      "info" : "MethodDeclaration[45677-45766]:MethodDeclaration[45677-45766]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[45776-45844]:MethodDeclaration[45776-45844]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[45854-46061]:MethodDeclaration[45854-46061]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[46071-46290]:MethodDeclaration[46071-46290]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[46300-46421]:MethodDeclaration[46300-46421]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[46431-46564]:MethodDeclaration[46431-46564]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[46574-46641]:MethodDeclaration[46574-46641]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[46651-47319]:MethodDeclaration[46651-47319]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "TypeDeclaration[47409-48812]:TypeDeclaration[47409-48812]"
    }, {
      "left" : "private final String iValue;",
      "right" : "private final String iValue;",
      "info" : "FieldDeclaration[47502-47530]:FieldDeclaration[47502-47530]"
    }, {
      "left" : "StringLiteral(String value)",
      "right" : "StringLiteral(String value)",
      "info" : "MethodDeclaration[47540-47628]:MethodDeclaration[47540-47628]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[47638-47720]:MethodDeclaration[47638-47720]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[47730-47937]:MethodDeclaration[47730-47937]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[47947-48166]:MethodDeclaration[47947-48166]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[48176-48297]:MethodDeclaration[48176-48297]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[48307-48440]:MethodDeclaration[48307-48440]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[48450-48531]:MethodDeclaration[48450-48531]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[48541-48806]:MethodDeclaration[48541-48806]"
    }, {
      "left" : "NumberFormatter",
      "right" : "NumberFormatter",
      "info" : "TypeDeclaration[48896-51759]:TypeDeclaration[48896-51759]"
    }, {
      "left" : "protected final DateTimeFieldType iFieldType;",
      "right" : "protected final DateTimeFieldType iFieldType;",
      "info" : "FieldDeclaration[48999-49044]:FieldDeclaration[48999-49044]"
    }, {
      "left" : "protected final int iMaxParsedDigits;",
      "right" : "protected final int iMaxParsedDigits;",
      "info" : "FieldDeclaration[49053-49090]:FieldDeclaration[49053-49090]"
    }, {
      "left" : "protected final boolean iSigned;",
      "right" : "protected final boolean iSigned;",
      "info" : "FieldDeclaration[49099-49131]:FieldDeclaration[49099-49131]"
    }, {
      "left" : "NumberFormatter(DateTimeFieldType fieldType,\n                int maxParsedDigits, boolean signed)",
      "right" : "NumberFormatter(DateTimeFieldType fieldType,\n                int maxParsedDigits, boolean signed)",
      "info" : "MethodDeclaration[49141-49385]:MethodDeclaration[49141-49385]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[49395-49477]:MethodDeclaration[49395-49477]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[49487-51753]:MethodDeclaration[49487-51753]"
    }, {
      "left" : "UnpaddedNumber",
      "right" : "UnpaddedNumber",
      "info" : "TypeDeclaration[51843-53970]:TypeDeclaration[51843-53970]"
    }, {
      "left" : "protected UnpaddedNumber(DateTimeFieldType fieldType,\n                       int maxParsedDigits, boolean signed)",
      "right" : "protected UnpaddedNumber(DateTimeFieldType fieldType,\n                       int maxParsedDigits, boolean signed)",
      "info" : "MethodDeclaration[51906-52094]:MethodDeclaration[51906-52094]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[52104-52187]:MethodDeclaration[52104-52187]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[52197-52628]:MethodDeclaration[52197-52628]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[52638-53080]:MethodDeclaration[52638-53080]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[53090-53517]:MethodDeclaration[53090-53517]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[53527-53964]:MethodDeclaration[53527-53964]"
    }, {
      "left" : "PaddedNumber",
      "right" : "PaddedNumber",
      "info" : "TypeDeclaration[54054-56501]:TypeDeclaration[54054-56501]"
    }, {
      "left" : "protected final int iMinPrintedDigits;",
      "right" : "protected final int iMinPrintedDigits;",
      "info" : "FieldDeclaration[54115-54153]:FieldDeclaration[54115-54153]"
    }, {
      "left" : "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n                     boolean signed, int minPrintedDigits)",
      "right" : "protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,\n                     boolean signed, int minPrintedDigits)",
      "info" : "MethodDeclaration[54163-54419]:MethodDeclaration[54163-54419]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[54429-54512]:MethodDeclaration[54429-54512]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[54522-54993]:MethodDeclaration[54522-54993]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[55003-55485]:MethodDeclaration[55003-55485]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[55495-55985]:MethodDeclaration[55495-55985]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[55995-56495]:MethodDeclaration[55995-56495]"
    }, {
      "left" : "FixedNumber",
      "right" : "FixedNumber",
      "info" : "TypeDeclaration[56585-57753]:TypeDeclaration[56585-57753]"
    }, {
      "left" : "protected FixedNumber(DateTimeFieldType fieldType, int numDigits, boolean signed)",
      "right" : "protected FixedNumber(DateTimeFieldType fieldType, int numDigits, boolean signed)",
      "info" : "MethodDeclaration[56642-56795]:MethodDeclaration[56642-56795]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[56805-57747]:MethodDeclaration[56805-57747]"
    }, {
      "left" : "TwoDigitYear",
      "right" : "TwoDigitYear",
      "info" : "TypeDeclaration[57837-64367]:TypeDeclaration[57837-64367]"
    }, {
      "left" : "private final DateTimeFieldType iType;",
      "right" : "private final DateTimeFieldType iType;",
      "info" : "FieldDeclaration[57929-58008]:FieldDeclaration[57929-58008]"
    }, {
      "left" : "private final int iPivot;",
      "right" : "private final int iPivot;",
      "info" : "FieldDeclaration[58017-58073]:FieldDeclaration[58017-58073]"
    }, {
      "left" : "private final boolean iLenientParse;",
      "right" : "private final boolean iLenientParse;",
      "info" : "FieldDeclaration[58082-58118]:FieldDeclaration[58082-58118]"
    }, {
      "left" : "TwoDigitYear(DateTimeFieldType type, int pivot, boolean lenientParse)",
      "right" : "TwoDigitYear(DateTimeFieldType type, int pivot, boolean lenientParse)",
      "info" : "MethodDeclaration[58128-58326]:MethodDeclaration[58128-58326]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[58336-58423]:MethodDeclaration[58336-58423]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[58433-61886]:MethodDeclaration[58433-61886]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[61904-61972]:MethodDeclaration[61904-61972]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[61982-62416]:MethodDeclaration[61982-62416]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[62426-62870]:MethodDeclaration[62426-62870]"
    }, {
      "left" : "private int getTwoDigitYear(long instant, Chronology chrono)",
      "right" : "private int getTwoDigitYear(long instant, Chronology chrono)",
      "info" : "MethodDeclaration[62880-63237]:MethodDeclaration[62880-63237]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[63247-63587]:MethodDeclaration[63247-63587]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[63597-63947]:MethodDeclaration[63597-63947]"
    }, {
      "left" : "private int getTwoDigitYear(ReadablePartial partial)",
      "right" : "private int getTwoDigitYear(ReadablePartial partial)",
      "info" : "MethodDeclaration[63957-64361]:MethodDeclaration[63957-64361]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "TypeDeclaration[64451-70421]:TypeDeclaration[64451-70421]"
    }, {
      "left" : "private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =\n                    new HashMap<Locale, Map<DateTimeFieldType, Object[]>>();",
      "right" : "private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =\n                    new HashMap<Locale, Map<DateTimeFieldType, Object[]>>();",
      "info" : "FieldDeclaration[64540-64691]:FieldDeclaration[64540-64691]"
    }, {
      "left" : "private final DateTimeFieldType iFieldType;",
      "right" : "private final DateTimeFieldType iFieldType;",
      "info" : "FieldDeclaration[64700-64743]:FieldDeclaration[64700-64743]"
    }, {
      "left" : "private final boolean iShort;",
      "right" : "private final boolean iShort;",
      "info" : "FieldDeclaration[64752-64781]:FieldDeclaration[64752-64781]"
    }, {
      "left" : "TextField(DateTimeFieldType fieldType, boolean isShort)",
      "right" : "TextField(DateTimeFieldType fieldType, boolean isShort)",
      "info" : "MethodDeclaration[64791-64945]:MethodDeclaration[64791-64945]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[64955-65037]:MethodDeclaration[64955-65037]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[65047-65395]:MethodDeclaration[65047-65395]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[65405-65764]:MethodDeclaration[65405-65764]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[65774-66028]:MethodDeclaration[65774-66028]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[66038-66303]:MethodDeclaration[66038-66303]"
    }, {
      "left" : "private String print(long instant, Chronology chrono, Locale locale)",
      "right" : "private String print(long instant, Chronology chrono, Locale locale)",
      "info" : "MethodDeclaration[66313-66636]:MethodDeclaration[66313-66636]"
    }, {
      "left" : "private String print(ReadablePartial partial, Locale locale)",
      "right" : "private String print(ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[66646-67121]:MethodDeclaration[66646-67121]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[67131-67220]:MethodDeclaration[67131-67220]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[67230-70415]:MethodDeclaration[67230-70415]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "TypeDeclaration[70505-78219]:TypeDeclaration[70505-78219]"
    }, {
      "left" : "private final DateTimeFieldType iFieldType;",
      "right" : "private final DateTimeFieldType iFieldType;",
      "info" : "FieldDeclaration[70593-70636]:FieldDeclaration[70593-70636]"
    }, {
      "left" : "protected int iMinDigits;",
      "right" : "protected int iMinDigits;",
      "info" : "FieldDeclaration[70645-70670]:FieldDeclaration[70645-70670]"
    }, {
      "left" : "protected int iMaxDigits;",
      "right" : "protected int iMaxDigits;",
      "info" : "FieldDeclaration[70679-70704]:FieldDeclaration[70679-70704]"
    }, {
      "left" : "protected Fraction(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "right" : "protected Fraction(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
      "info" : "MethodDeclaration[70714-71061]:MethodDeclaration[70714-71061]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[71071-71148]:MethodDeclaration[71071-71148]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[71158-71493]:MethodDeclaration[71158-71493]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[71503-71740]:MethodDeclaration[71503-71740]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[71750-72229]:MethodDeclaration[71750-72229]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[72239-72620]:MethodDeclaration[72239-72620]"
    }, {
      "left" : "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n            throws IOException",
      "right" : "protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n            throws IOException",
      "info" : "MethodDeclaration[72630-75284]:MethodDeclaration[72630-75284]"
    }, {
      "left" : "private long[] getFractionData(long fraction, DateTimeField field)",
      "right" : "private long[] getFractionData(long fraction, DateTimeField field)",
      "info" : "MethodDeclaration[75302-76918]:MethodDeclaration[75302-76918]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[76928-77004]:MethodDeclaration[76928-77004]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[77014-78213]:MethodDeclaration[77014-78213]"
    }, {
      "left" : "TimeZoneOffset",
      "right" : "TimeZoneOffset",
      "info" : "TypeDeclaration[78303-90345]:TypeDeclaration[78303-90345]"
    }, {
      "left" : "private final String iZeroOffsetPrintText;",
      "right" : "private final String iZeroOffsetPrintText;",
      "info" : "FieldDeclaration[78397-78439]:FieldDeclaration[78397-78439]"
    }, {
      "left" : "private final String iZeroOffsetParseText;",
      "right" : "private final String iZeroOffsetParseText;",
      "info" : "FieldDeclaration[78448-78490]:FieldDeclaration[78448-78490]"
    }, {
      "left" : "private final boolean iShowSeparators;",
      "right" : "private final boolean iShowSeparators;",
      "info" : "FieldDeclaration[78499-78537]:FieldDeclaration[78499-78537]"
    }, {
      "left" : "private final int iMinFields;",
      "right" : "private final int iMinFields;",
      "info" : "FieldDeclaration[78546-78575]:FieldDeclaration[78546-78575]"
    }, {
      "left" : "private final int iMaxFields;",
      "right" : "private final int iMaxFields;",
      "info" : "FieldDeclaration[78584-78613]:FieldDeclaration[78584-78613]"
    }, {
      "left" : "TimeZoneOffset(String zeroOffsetPrintText, String zeroOffsetParseText,\n                                boolean showSeparators,\n                                int minFields, int maxFields)",
      "right" : "TimeZoneOffset(String zeroOffsetPrintText, String zeroOffsetParseText,\n                                boolean showSeparators,\n                                int minFields, int maxFields)",
      "info" : "MethodDeclaration[78623-79318]:MethodDeclaration[78623-79318]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[79340-79695]:MethodDeclaration[79340-79695]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[79713-81790]:MethodDeclaration[79713-81790]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[81808-83888]:MethodDeclaration[81808-83888]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[83898-84015]:MethodDeclaration[83898-84015]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[84025-84155]:MethodDeclaration[84025-84155]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[84165-84254]:MethodDeclaration[84165-84254]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[84264-89778]:MethodDeclaration[84264-89778]"
    }, {
      "left" : "private int digitCount(String text, int position, int amount)",
      "right" : "private int digitCount(String text, int position, int amount)",
      "info" : "MethodDeclaration[89788-90339]:MethodDeclaration[89788-90339]"
    }, {
      "left" : "TimeZoneName",
      "right" : "TimeZoneName",
      "info" : "TypeDeclaration[90429-92760]:TypeDeclaration[90429-92760]"
    }, {
      "left" : "static final int LONG_NAME = 0;",
      "right" : "static final int LONG_NAME = 0;",
      "info" : "FieldDeclaration[90521-90552]:FieldDeclaration[90521-90552]"
    }, {
      "left" : "static final int SHORT_NAME = 1;",
      "right" : "static final int SHORT_NAME = 1;",
      "info" : "FieldDeclaration[90561-90593]:FieldDeclaration[90561-90593]"
    }, {
      "left" : "private final Map<String, DateTimeZone> iParseLookup;",
      "right" : "private final Map<String, DateTimeZone> iParseLookup;",
      "info" : "FieldDeclaration[90603-90656]:FieldDeclaration[90603-90656]"
    }, {
      "left" : "private final int iType;",
      "right" : "private final int iType;",
      "info" : "FieldDeclaration[90665-90689]:FieldDeclaration[90665-90689]"
    }, {
      "left" : "TimeZoneName(int type, Map<String, DateTimeZone> parseLookup)",
      "right" : "TimeZoneName(int type, Map<String, DateTimeZone> parseLookup)",
      "info" : "MethodDeclaration[90699-90859]:MethodDeclaration[90699-90859]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[90869-90966]:MethodDeclaration[90869-90966]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[90976-91228]:MethodDeclaration[90976-91228]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[91238-91502]:MethodDeclaration[91238-91502]"
    }, {
      "left" : "private String print(long instant, DateTimeZone displayZone, Locale locale)",
      "right" : "private String print(long instant, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[91512-91957]:MethodDeclaration[91512-91957]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[91967-92084]:MethodDeclaration[91967-92084]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[92094-92224]:MethodDeclaration[92094-92224]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[92234-92330]:MethodDeclaration[92234-92330]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[92340-92754]:MethodDeclaration[92340-92754]"
    }, {
      "left" : "enum : TimeZoneId",
      "right" : "enum : TimeZoneId",
      "info" : "EnumDeclaration[92844-94616]:EnumDeclaration[92844-94806]"
    }, {
      "left" : "static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();",
      "right" : "static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();",
      "info" : "FieldDeclaration[92951-93017]:FieldDeclaration[92951-93017]"
    }, {
      "left" : "static final int MAX_LENGTH;",
      "right" : "static final int MAX_LENGTH;",
      "info" : "FieldDeclaration[93026-93054]:FieldDeclaration[93026-93054]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[93250-93327]:MethodDeclaration[93250-93327]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[93337-93584]:MethodDeclaration[93337-93584]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[93594-93853]:MethodDeclaration[93594-93853]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[93863-93980]:MethodDeclaration[93863-93980]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[93990-94120]:MethodDeclaration[93990-94120]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[94130-94206]:MethodDeclaration[94130-94206]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[94216-94610]:MethodDeclaration[94216-94800]"
    }, {
      "left" : "Composite",
      "right" : "Composite",
      "info" : "TypeDeclaration[94700-101192]:TypeDeclaration[94890-101382]"
    }, {
      "left" : "private final DateTimePrinter[] iPrinters;",
      "right" : "private final DateTimePrinter[] iPrinters;",
      "info" : "FieldDeclaration[94789-94831]:FieldDeclaration[94979-95021]"
    }, {
      "left" : "private final DateTimeParser[] iParsers;",
      "right" : "private final DateTimeParser[] iParsers;",
      "info" : "FieldDeclaration[94840-94880]:FieldDeclaration[95030-95070]"
    }, {
      "left" : "private final int iPrintedLengthEstimate;",
      "right" : "private final int iPrintedLengthEstimate;",
      "info" : "FieldDeclaration[94890-94931]:FieldDeclaration[95080-95121]"
    }, {
      "left" : "private final int iParsedLengthEstimate;",
      "right" : "private final int iParsedLengthEstimate;",
      "info" : "FieldDeclaration[94940-94980]:FieldDeclaration[95130-95170]"
    }, {
      "left" : "Composite(List<Object> elementPairs)",
      "right" : "Composite(List<Object> elementPairs)",
      "info" : "MethodDeclaration[94990-96435]:MethodDeclaration[95180-96625]"
    }, {
      "left" : "public int estimatePrintedLength()",
      "right" : "public int estimatePrintedLength()",
      "info" : "MethodDeclaration[96445-96534]:MethodDeclaration[96635-96724]"
    }, {
      "left" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "right" : "public void printTo(\n                StringBuffer buf, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale)",
      "info" : "MethodDeclaration[96544-97239]:MethodDeclaration[96734-97429]"
    }, {
      "left" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "right" : "public void printTo(\n                Writer out, long instant, Chronology chrono,\n                int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException",
      "info" : "MethodDeclaration[97249-97957]:MethodDeclaration[97439-98147]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale)",
      "info" : "MethodDeclaration[97967-98536]:MethodDeclaration[98157-98726]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException",
      "info" : "MethodDeclaration[98546-99128]:MethodDeclaration[98736-99318]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[99138-99225]:MethodDeclaration[99328-99415]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[99235-99696]:MethodDeclaration[99425-99886]"
    }, {
      "left" : "boolean isPrinter()",
      "right" : "boolean isPrinter()",
      "info" : "MethodDeclaration[99706-99775]:MethodDeclaration[99896-99965]"
    }, {
      "left" : "boolean isParser()",
      "right" : "boolean isParser()",
      "info" : "MethodDeclaration[99785-99852]:MethodDeclaration[99975-100042]"
    }, {
      "left" : "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList)",
      "right" : "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList)",
      "info" : "MethodDeclaration[99862-100944]:MethodDeclaration[100052-101134]"
    }, {
      "left" : "private void addArrayToList(List<Object> list, Object[] array)",
      "right" : "private void addArrayToList(List<Object> list, Object[] array)",
      "info" : "MethodDeclaration[100954-101186]:MethodDeclaration[101144-101376]"
    }, {
      "left" : "MatchingParser",
      "right" : "MatchingParser",
      "info" : "TypeDeclaration[101276-104224]:TypeDeclaration[101466-104414]"
    }, {
      "left" : "private final DateTimeParser[] iParsers;",
      "right" : "private final DateTimeParser[] iParsers;",
      "info" : "FieldDeclaration[101353-101393]:FieldDeclaration[101543-101583]"
    }, {
      "left" : "private final int iParsedLengthEstimate;",
      "right" : "private final int iParsedLengthEstimate;",
      "info" : "FieldDeclaration[101402-101442]:FieldDeclaration[101592-101632]"
    }, {
      "left" : "MatchingParser(DateTimeParser[] parsers)",
      "right" : "MatchingParser(DateTimeParser[] parsers)",
      "info" : "MethodDeclaration[101452-101951]:MethodDeclaration[101642-102141]"
    }, {
      "left" : "public int estimateParsedLength()",
      "right" : "public int estimateParsedLength()",
      "info" : "MethodDeclaration[101961-102048]:MethodDeclaration[102151-102238]"
    }, {
      "left" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "right" : "public int parseInto(DateTimeParserBucket bucket, String text, int position)",
      "info" : "MethodDeclaration[102058-104218]:MethodDeclaration[102248-104408]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2431-2437]:Modifier[2431-2437]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2438-2443]:TYPE_DECLARATION_KIND[2438-2443]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleName[2444-2468]:SimpleName[2444-2468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2795-2801]:Modifier[2795-2801]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleName[2802-2826]:SimpleName[2802-2826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2829-2902]:Block[2829-2902]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2839-2847]:SuperConstructorInvocation[2839-2847]"
    }, {
      "left" : "iElementPairs = new ArrayList<Object>();",
      "right" : "iElementPairs = new ArrayList<Object>();",
      "info" : "ExpressionStatement[2856-2896]:ExpressionStatement[2856-2896]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3641-3647]:Modifier[3641-3647]"
    }, {
      "left" : "DateTimeFormatter",
      "right" : "DateTimeFormatter",
      "info" : "SimpleType[3648-3665]:SimpleType[3648-3665]"
    }, {
      "left" : "toFormatter",
      "right" : "toFormatter",
      "info" : "SimpleName[3666-3677]:SimpleName[3666-3677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3680-4169]:Block[3680-4169]"
    }, {
      "left" : "Object f = getFormatter();",
      "right" : "Object f = getFormatter();",
      "info" : "VariableDeclarationStatement[3690-3716]:VariableDeclarationStatement[3690-3716]"
    }, {
      "left" : "DateTimePrinter printer = null;",
      "right" : "DateTimePrinter printer = null;",
      "info" : "VariableDeclarationStatement[3725-3756]:VariableDeclarationStatement[3725-3756]"
    }, {
      "left" : "if (isPrinter(f))",
      "right" : "if (isPrinter(f))",
      "info" : "IfStatement[3765-3837]:IfStatement[3765-3837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3783-3837]:Block[3783-3837]"
    }, {
      "left" : "printer = (DateTimePrinter) f;",
      "right" : "printer = (DateTimePrinter) f;",
      "info" : "ExpressionStatement[3797-3827]:ExpressionStatement[3797-3827]"
    }, {
      "left" : "DateTimeParser parser = null;",
      "right" : "DateTimeParser parser = null;",
      "info" : "VariableDeclarationStatement[3846-3875]:VariableDeclarationStatement[3846-3875]"
    }, {
      "left" : "if (isParser(f))",
      "right" : "if (isParser(f))",
      "info" : "IfStatement[3884-3953]:IfStatement[3884-3953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3901-3953]:Block[3901-3953]"
    }, {
      "left" : "parser = (DateTimeParser) f;",
      "right" : "parser = (DateTimeParser) f;",
      "info" : "ExpressionStatement[3915-3943]:ExpressionStatement[3915-3943]"
    }, {
      "left" : "if (printer != null || parser != null)",
      "right" : "if (printer != null || parser != null)",
      "info" : "IfStatement[3962-4071]:IfStatement[3962-4071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4001-4071]:Block[4001-4071]"
    }, {
      "left" : "return new DateTimeFormatter(printer, parser);",
      "right" : "return new DateTimeFormatter(printer, parser);",
      "info" : "ReturnStatement[4015-4061]:ReturnStatement[4015-4061]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Both printing and parsing not supported\");",
      "right" : "throw new UnsupportedOperationException(\"Both printing and parsing not supported\");",
      "info" : "ThrowStatement[4080-4163]:ThrowStatement[4080-4163]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4637-4643]:Modifier[4637-4643]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[4644-4659]:SimpleType[4644-4659]"
    }, {
      "left" : "toPrinter",
      "right" : "toPrinter",
      "info" : "SimpleName[4660-4669]:SimpleName[4660-4669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4672-4870]:Block[4672-4870]"
    }, {
      "left" : "Object f = getFormatter();",
      "right" : "Object f = getFormatter();",
      "info" : "VariableDeclarationStatement[4682-4708]:VariableDeclarationStatement[4682-4708]"
    }, {
      "left" : "if (isPrinter(f))",
      "right" : "if (isPrinter(f))",
      "info" : "IfStatement[4717-4786]:IfStatement[4717-4786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4735-4786]:Block[4735-4786]"
    }, {
      "left" : "return (DateTimePrinter) f;",
      "right" : "return (DateTimePrinter) f;",
      "info" : "ReturnStatement[4749-4776]:ReturnStatement[4749-4776]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Printing is not supported\");",
      "right" : "throw new UnsupportedOperationException(\"Printing is not supported\");",
      "info" : "ThrowStatement[4795-4864]:ThrowStatement[4795-4864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5333-5339]:Modifier[5333-5339]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[5340-5354]:SimpleType[5340-5354]"
    }, {
      "left" : "toParser",
      "right" : "toParser",
      "info" : "SimpleName[5355-5363]:SimpleName[5355-5363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5366-5561]:Block[5366-5561]"
    }, {
      "left" : "Object f = getFormatter();",
      "right" : "Object f = getFormatter();",
      "info" : "VariableDeclarationStatement[5376-5402]:VariableDeclarationStatement[5376-5402]"
    }, {
      "left" : "if (isParser(f))",
      "right" : "if (isParser(f))",
      "info" : "IfStatement[5411-5478]:IfStatement[5411-5478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5428-5478]:Block[5428-5478]"
    }, {
      "left" : "return (DateTimeParser) f;",
      "right" : "return (DateTimeParser) f;",
      "info" : "ReturnStatement[5442-5468]:ReturnStatement[5442-5468]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Parsing is not supported\");",
      "right" : "throw new UnsupportedOperationException(\"Parsing is not supported\");",
      "info" : "ThrowStatement[5487-5555]:ThrowStatement[5487-5555]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5824-5830]:Modifier[5824-5830]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5831-5838]:PrimitiveType[5831-5838]"
    }, {
      "left" : "canBuildFormatter",
      "right" : "canBuildFormatter",
      "info" : "SimpleName[5839-5856]:SimpleName[5839-5856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5859-5910]:Block[5859-5910]"
    }, {
      "left" : "return isFormatter(getFormatter());",
      "right" : "return isFormatter(getFormatter());",
      "info" : "ReturnStatement[5869-5904]:ReturnStatement[5869-5904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6091-6097]:Modifier[6091-6097]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6098-6105]:PrimitiveType[6098-6105]"
    }, {
      "left" : "canBuildPrinter",
      "right" : "canBuildPrinter",
      "info" : "SimpleName[6106-6121]:SimpleName[6106-6121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6124-6173]:Block[6124-6173]"
    }, {
      "left" : "return isPrinter(getFormatter());",
      "right" : "return isPrinter(getFormatter());",
      "info" : "ReturnStatement[6134-6167]:ReturnStatement[6134-6167]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6352-6358]:Modifier[6352-6358]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6359-6366]:PrimitiveType[6359-6366]"
    }, {
      "left" : "canBuildParser",
      "right" : "canBuildParser",
      "info" : "SimpleName[6367-6381]:SimpleName[6367-6381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6384-6432]:Block[6384-6432]"
    }, {
      "left" : "return isParser(getFormatter());",
      "right" : "return isParser(getFormatter());",
      "info" : "ReturnStatement[6394-6426]:ReturnStatement[6394-6426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6620-6626]:Modifier[6620-6626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6627-6631]:PrimitiveType[6627-6631]"
    }, {
      "left" : "clear",
      "right" : "clear",
      "info" : "SimpleName[6632-6637]:SimpleName[6632-6637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6640-6705]:Block[6640-6705]"
    }, {
      "left" : "iFormatter = null;",
      "right" : "iFormatter = null;",
      "info" : "ExpressionStatement[6650-6668]:ExpressionStatement[6650-6668]"
    }, {
      "left" : "iElementPairs.clear();",
      "right" : "iElementPairs.clear();",
      "info" : "ExpressionStatement[6677-6699]:ExpressionStatement[6677-6699]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7034-7040]:Modifier[7034-7040]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[7041-7065]:SimpleType[7041-7065]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[7066-7072]:SimpleName[7066-7072]"
    }, {
      "left" : "DateTimeFormatter formatter",
      "right" : "DateTimeFormatter formatter",
      "info" : "SingleVariableDeclaration[7073-7100]:SingleVariableDeclaration[7073-7100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-7296]:Block[7102-7296]"
    }, {
      "left" : "if (formatter == null)",
      "right" : "if (formatter == null)",
      "info" : "IfStatement[7112-7219]:IfStatement[7112-7219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7135-7219]:Block[7135-7219]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No formatter supplied\");",
      "right" : "throw new IllegalArgumentException(\"No formatter supplied\");",
      "info" : "ThrowStatement[7149-7209]:ThrowStatement[7149-7209]"
    }, {
      "left" : "return append0(formatter.getPrinter(), formatter.getParser());",
      "right" : "return append0(formatter.getPrinter(), formatter.getParser());",
      "info" : "ReturnStatement[7228-7290]:ReturnStatement[7228-7290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7631-7637]:Modifier[7631-7637]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[7638-7662]:SimpleType[7638-7662]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[7663-7669]:SimpleName[7663-7669]"
    }, {
      "left" : "DateTimePrinter printer",
      "right" : "DateTimePrinter printer",
      "info" : "SingleVariableDeclaration[7670-7693]:SingleVariableDeclaration[7670-7693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7695-7772]:Block[7695-7772]"
    }, {
      "left" : "checkPrinter(printer);",
      "right" : "checkPrinter(printer);",
      "info" : "ExpressionStatement[7705-7727]:ExpressionStatement[7705-7727]"
    }, {
      "left" : "return append0(printer, null);",
      "right" : "return append0(printer, null);",
      "info" : "ReturnStatement[7736-7766]:ReturnStatement[7736-7766]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8088-8094]:Modifier[8088-8094]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[8095-8119]:SimpleType[8095-8119]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[8120-8126]:SimpleName[8120-8126]"
    }, {
      "left" : "DateTimeParser parser",
      "right" : "DateTimeParser parser",
      "info" : "SingleVariableDeclaration[8127-8148]:SingleVariableDeclaration[8127-8148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8150-8224]:Block[8150-8224]"
    }, {
      "left" : "checkParser(parser);",
      "right" : "checkParser(parser);",
      "info" : "ExpressionStatement[8160-8180]:ExpressionStatement[8160-8180]"
    }, {
      "left" : "return append0(null, parser);",
      "right" : "return append0(null, parser);",
      "info" : "ReturnStatement[8189-8218]:ReturnStatement[8189-8218]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8523-8529]:Modifier[8523-8529]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[8530-8554]:SimpleType[8530-8554]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[8555-8561]:SimpleName[8555-8561]"
    }, {
      "left" : "DateTimePrinter printer",
      "right" : "DateTimePrinter printer",
      "info" : "SingleVariableDeclaration[8562-8585]:SingleVariableDeclaration[8562-8585]"
    }, {
      "left" : "DateTimeParser parser",
      "right" : "DateTimeParser parser",
      "info" : "SingleVariableDeclaration[8587-8608]:SingleVariableDeclaration[8587-8608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8610-8718]:Block[8610-8718]"
    }, {
      "left" : "checkPrinter(printer);",
      "right" : "checkPrinter(printer);",
      "info" : "ExpressionStatement[8620-8642]:ExpressionStatement[8620-8642]"
    }, {
      "left" : "checkParser(parser);",
      "right" : "checkParser(parser);",
      "info" : "ExpressionStatement[8651-8671]:ExpressionStatement[8651-8671]"
    }, {
      "left" : "return append0(printer, parser);",
      "right" : "return append0(printer, parser);",
      "info" : "ReturnStatement[8680-8712]:ReturnStatement[8680-8712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9683-9689]:Modifier[9683-9689]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[9690-9714]:SimpleType[9690-9714]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[9715-9721]:SimpleName[9715-9721]"
    }, {
      "left" : "DateTimePrinter printer",
      "right" : "DateTimePrinter printer",
      "info" : "SingleVariableDeclaration[9722-9745]:SingleVariableDeclaration[9722-9745]"
    }, {
      "left" : "DateTimeParser[] parsers",
      "right" : "DateTimeParser[] parsers",
      "info" : "SingleVariableDeclaration[9747-9771]:SingleVariableDeclaration[9747-9771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9773-10615]:Block[9773-10615]"
    }, {
      "left" : "if (printer != null)",
      "right" : "if (printer != null)",
      "info" : "IfStatement[9783-9850]:IfStatement[9783-9850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9804-9850]:Block[9804-9850]"
    }, {
      "left" : "checkPrinter(printer);",
      "right" : "checkPrinter(printer);",
      "info" : "ExpressionStatement[9818-9840]:ExpressionStatement[9818-9840]"
    }, {
      "left" : "if (parsers == null)",
      "right" : "if (parsers == null)",
      "info" : "IfStatement[9859-9962]:IfStatement[9859-9962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9880-9962]:Block[9880-9962]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No parsers supplied\");",
      "right" : "throw new IllegalArgumentException(\"No parsers supplied\");",
      "info" : "ThrowStatement[9894-9952]:ThrowStatement[9894-9952]"
    }, {
      "left" : "int length = parsers.length;",
      "right" : "int length = parsers.length;",
      "info" : "VariableDeclarationStatement[9971-9999]:VariableDeclarationStatement[9971-9999]"
    }, {
      "left" : "if (length == 1)",
      "right" : "if (length == 1)",
      "info" : "IfStatement[10008-10211]:IfStatement[10008-10211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10025-10211]:Block[10025-10211]"
    }, {
      "left" : "if (parsers[0] == null)",
      "right" : "if (parsers[0] == null)",
      "info" : "IfStatement[10039-10152]:IfStatement[10039-10152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10063-10152]:Block[10063-10152]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No parser supplied\");",
      "right" : "throw new IllegalArgumentException(\"No parser supplied\");",
      "info" : "ThrowStatement[10081-10138]:ThrowStatement[10081-10138]"
    }, {
      "left" : "return append0(printer, parsers[0]);",
      "right" : "return append0(printer, parsers[0]);",
      "info" : "ReturnStatement[10165-10201]:ReturnStatement[10165-10201]"
    }, {
      "left" : "DateTimeParser[] copyOfParsers = new DateTimeParser[length];",
      "right" : "DateTimeParser[] copyOfParsers = new DateTimeParser[length];",
      "info" : "VariableDeclarationStatement[10221-10281]:VariableDeclarationStatement[10221-10281]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[10290-10296]:VariableDeclarationStatement[10290-10296]"
    }, {
      "left" : "for (i = 0; i < length - 1; i++)",
      "right" : "for (i = 0; i < length - 1; i++)",
      "info" : "ForStatement[10305-10501]:ForStatement[10305-10501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10338-10501]:Block[10338-10501]"
    }, {
      "left" : "if ((copyOfParsers[i] = parsers[i]) == null)",
      "right" : "if ((copyOfParsers[i] = parsers[i]) == null)",
      "info" : "IfStatement[10352-10491]:IfStatement[10352-10491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10397-10491]:Block[10397-10491]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Incomplete parser array\");",
      "right" : "throw new IllegalArgumentException(\"Incomplete parser array\");",
      "info" : "ThrowStatement[10415-10477]:ThrowStatement[10415-10477]"
    }, {
      "left" : "copyOfParsers[i] = parsers[i];",
      "right" : "copyOfParsers[i] = parsers[i];",
      "info" : "ExpressionStatement[10510-10540]:ExpressionStatement[10510-10540]"
    }, {
      "left" : "return append0(printer, new MatchingParser(copyOfParsers));",
      "right" : "return append0(printer, new MatchingParser(copyOfParsers));",
      "info" : "ReturnStatement[10550-10609]:ReturnStatement[10550-10609]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10934-10940]:Modifier[10934-10940]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[10941-10965]:SimpleType[10941-10965]"
    }, {
      "left" : "appendOptional",
      "right" : "appendOptional",
      "info" : "SimpleName[10966-10980]:SimpleName[10966-10980]"
    }, {
      "left" : "DateTimeParser parser",
      "right" : "DateTimeParser parser",
      "info" : "SingleVariableDeclaration[10981-11002]:SingleVariableDeclaration[10981-11002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11004-11171]:Block[11004-11171]"
    }, {
      "left" : "checkParser(parser);",
      "right" : "checkParser(parser);",
      "info" : "ExpressionStatement[11014-11034]:ExpressionStatement[11014-11034]"
    }, {
      "left" : "DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",
      "right" : "DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",
      "info" : "VariableDeclarationStatement[11043-11106]:VariableDeclarationStatement[11043-11106]"
    }, {
      "left" : "return append0(null, new MatchingParser(parsers));",
      "right" : "return append0(null, new MatchingParser(parsers));",
      "info" : "ReturnStatement[11115-11165]:ReturnStatement[11115-11165]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11377-11384]:Modifier[11377-11384]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11385-11389]:PrimitiveType[11385-11389]"
    }, {
      "left" : "checkParser",
      "right" : "checkParser",
      "info" : "SimpleName[11390-11401]:SimpleName[11390-11401]"
    }, {
      "left" : "DateTimeParser parser",
      "right" : "DateTimeParser parser",
      "info" : "SingleVariableDeclaration[11402-11423]:SingleVariableDeclaration[11402-11423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11425-11542]:Block[11425-11542]"
    }, {
      "left" : "if (parser == null)",
      "right" : "if (parser == null)",
      "info" : "IfStatement[11435-11536]:IfStatement[11435-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11455-11536]:Block[11455-11536]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No parser supplied\");",
      "right" : "throw new IllegalArgumentException(\"No parser supplied\");",
      "info" : "ThrowStatement[11469-11526]:ThrowStatement[11469-11526]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11673-11680]:Modifier[11673-11680]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11681-11685]:PrimitiveType[11681-11685]"
    }, {
      "left" : "checkPrinter",
      "right" : "checkPrinter",
      "info" : "SimpleName[11686-11698]:SimpleName[11686-11698]"
    }, {
      "left" : "DateTimePrinter printer",
      "right" : "DateTimePrinter printer",
      "info" : "SingleVariableDeclaration[11699-11722]:SingleVariableDeclaration[11699-11722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11724-11843]:Block[11724-11843]"
    }, {
      "left" : "if (printer == null)",
      "right" : "if (printer == null)",
      "info" : "IfStatement[11734-11837]:IfStatement[11734-11837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11755-11837]:Block[11755-11837]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No printer supplied\");",
      "right" : "throw new IllegalArgumentException(\"No printer supplied\");",
      "info" : "ThrowStatement[11769-11827]:ThrowStatement[11769-11827]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11849-11856]:Modifier[11849-11856]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[11857-11881]:SimpleType[11857-11881]"
    }, {
      "left" : "append0",
      "right" : "append0",
      "info" : "SimpleName[11882-11889]:SimpleName[11882-11889]"
    }, {
      "left" : "Object element",
      "right" : "Object element",
      "info" : "SingleVariableDeclaration[11890-11904]:SingleVariableDeclaration[11890-11904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11906-12090]:Block[11906-12090]"
    }, {
      "left" : "iFormatter = null;",
      "right" : "iFormatter = null;",
      "info" : "ExpressionStatement[11916-11934]:ExpressionStatement[11916-11934]"
    }, {
      "left" : "iElementPairs.add(element);",
      "right" : "iElementPairs.add(element);",
      "info" : "ExpressionStatement[12000-12027]:ExpressionStatement[12000-12027]"
    }, {
      "left" : "iElementPairs.add(element);",
      "right" : "iElementPairs.add(element);",
      "info" : "ExpressionStatement[12036-12063]:ExpressionStatement[12036-12063]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12072-12084]:ReturnStatement[12072-12084]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12096-12103]:Modifier[12096-12103]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[12104-12128]:SimpleType[12104-12128]"
    }, {
      "left" : "append0",
      "right" : "append0",
      "info" : "SimpleName[12129-12136]:SimpleName[12129-12136]"
    }, {
      "left" : "DateTimePrinter printer",
      "right" : "DateTimePrinter printer",
      "info" : "SingleVariableDeclaration[12150-12173]:SingleVariableDeclaration[12150-12173]"
    }, {
      "left" : "DateTimeParser parser",
      "right" : "DateTimeParser parser",
      "info" : "SingleVariableDeclaration[12175-12196]:SingleVariableDeclaration[12175-12196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12198-12324]:Block[12198-12324]"
    }, {
      "left" : "iFormatter = null;",
      "right" : "iFormatter = null;",
      "info" : "ExpressionStatement[12208-12226]:ExpressionStatement[12208-12226]"
    }, {
      "left" : "iElementPairs.add(printer);",
      "right" : "iElementPairs.add(printer);",
      "info" : "ExpressionStatement[12235-12262]:ExpressionStatement[12235-12262]"
    }, {
      "left" : "iElementPairs.add(parser);",
      "right" : "iElementPairs.add(parser);",
      "info" : "ExpressionStatement[12271-12297]:ExpressionStatement[12271-12297]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[12306-12318]:ReturnStatement[12306-12318]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12617-12623]:Modifier[12617-12623]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[12624-12648]:SimpleType[12624-12648]"
    }, {
      "left" : "appendLiteral",
      "right" : "appendLiteral",
      "info" : "SimpleName[12649-12662]:SimpleName[12649-12662]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[12663-12669]:SingleVariableDeclaration[12663-12669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12671-12727]:Block[12671-12727]"
    }, {
      "left" : "return append0(new CharacterLiteral(c));",
      "right" : "return append0(new CharacterLiteral(c));",
      "info" : "ReturnStatement[12681-12721]:ReturnStatement[12681-12721]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12991-12997]:Modifier[12991-12997]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[12998-13022]:SimpleType[12998-13022]"
    }, {
      "left" : "appendLiteral",
      "right" : "appendLiteral",
      "info" : "SimpleName[13023-13036]:SimpleName[13023-13036]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[13037-13048]:SingleVariableDeclaration[13037-13048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13050-13431]:Block[13050-13431]"
    }, {
      "left" : "if (text == null)",
      "right" : "if (text == null)",
      "info" : "IfStatement[13060-13165]:IfStatement[13060-13165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13078-13165]:Block[13078-13165]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Literal must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Literal must not be null\");",
      "info" : "ThrowStatement[13092-13155]:ThrowStatement[13092-13155]"
    }, {
      "left" : "switch (text.length()) {\n            case 0:\n                return this;\n            case 1:\n                return append0(new CharacterLiteral(text.charAt(0)));\n            default:\n                return append0(new StringLiteral(text));\n        }",
      "right" : "switch (text.length()) {\n            case 0:\n                return this;\n            case 1:\n                return append0(new CharacterLiteral(text.charAt(0)));\n            default:\n                return append0(new StringLiteral(text));\n        }",
      "info" : "SwitchStatement[13174-13425]:SwitchStatement[13174-13425]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[13211-13218]:SwitchCase[13211-13218]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13235-13247]:ReturnStatement[13235-13247]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[13260-13267]:SwitchCase[13260-13267]"
    }, {
      "left" : "return append0(new CharacterLiteral(text.charAt(0)));",
      "right" : "return append0(new CharacterLiteral(text.charAt(0)));",
      "info" : "ReturnStatement[13284-13337]:ReturnStatement[13284-13337]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13350-13358]:SwitchCase[13350-13358]"
    }, {
      "left" : "return append0(new StringLiteral(text));",
      "right" : "return append0(new StringLiteral(text));",
      "info" : "ReturnStatement[13375-13415]:ReturnStatement[13375-13415]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13953-13959]:Modifier[13953-13959]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[13960-13984]:SimpleType[13960-13984]"
    }, {
      "left" : "appendDecimal",
      "right" : "appendDecimal",
      "info" : "SimpleName[13985-13998]:SimpleName[13985-13998]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[14012-14039]:SingleVariableDeclaration[14012-14039]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[14041-14054]:SingleVariableDeclaration[14041-14054]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[14056-14069]:SingleVariableDeclaration[14056-14069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14071-14609]:Block[14071-14609]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[14081-14194]:IfStatement[14081-14194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14104-14194]:Block[14104-14194]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[14118-14184]:ThrowStatement[14118-14184]"
    }, {
      "left" : "if (maxDigits < minDigits)",
      "right" : "if (maxDigits < minDigits)",
      "info" : "IfStatement[14203-14276]:IfStatement[14203-14276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14230-14276]:Block[14230-14276]"
    }, {
      "left" : "maxDigits = minDigits;",
      "right" : "maxDigits = minDigits;",
      "info" : "ExpressionStatement[14244-14266]:ExpressionStatement[14244-14266]"
    }, {
      "left" : "if (minDigits < 0 || maxDigits <= 0)",
      "right" : "if (minDigits < 0 || maxDigits <= 0)",
      "info" : "IfStatement[14285-14383]:IfStatement[14285-14383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14322-14383]:Block[14322-14383]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[14336-14373]:ThrowStatement[14336-14373]"
    }, {
      "left" : "if (minDigits <= 1)",
      "right" : "if (minDigits <= 1)",
      "info" : "IfStatement[14392-14603]:IfStatement[14392-14603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14412-14500]:Block[14412-14500]"
    }, {
      "left" : "return append0(new UnpaddedNumber(fieldType, maxDigits, false));",
      "right" : "return append0(new UnpaddedNumber(fieldType, maxDigits, false));",
      "info" : "ReturnStatement[14426-14490]:ReturnStatement[14426-14490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14506-14603]:Block[14506-14603]"
    }, {
      "left" : "return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",
      "right" : "return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",
      "info" : "ReturnStatement[14520-14593]:ReturnStatement[14520-14593]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15210-15216]:Modifier[15210-15216]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[15217-15241]:SimpleType[15217-15241]"
    }, {
      "left" : "appendFixedDecimal",
      "right" : "appendFixedDecimal",
      "info" : "SimpleName[15242-15260]:SimpleName[15242-15260]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[15274-15301]:SingleVariableDeclaration[15274-15301]"
    }, {
      "left" : "int numDigits",
      "right" : "int numDigits",
      "info" : "SingleVariableDeclaration[15303-15316]:SingleVariableDeclaration[15303-15316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15318-15647]:Block[15318-15647]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[15328-15441]:IfStatement[15328-15441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15351-15441]:Block[15351-15441]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[15365-15431]:ThrowStatement[15365-15431]"
    }, {
      "left" : "if (numDigits <= 0)",
      "right" : "if (numDigits <= 0)",
      "info" : "IfStatement[15450-15571]:IfStatement[15450-15571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15470-15571]:Block[15470-15571]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal number of digits: \" + numDigits);",
      "right" : "throw new IllegalArgumentException(\"Illegal number of digits: \" + numDigits);",
      "info" : "ThrowStatement[15484-15561]:ThrowStatement[15484-15561]"
    }, {
      "left" : "return append0(new FixedNumber(fieldType, numDigits, false));",
      "right" : "return append0(new FixedNumber(fieldType, numDigits, false));",
      "info" : "ReturnStatement[15580-15641]:ReturnStatement[15580-15641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16166-16172]:Modifier[16166-16172]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[16173-16197]:SimpleType[16173-16197]"
    }, {
      "left" : "appendSignedDecimal",
      "right" : "appendSignedDecimal",
      "info" : "SimpleName[16198-16217]:SimpleName[16198-16217]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[16231-16258]:SingleVariableDeclaration[16231-16258]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[16260-16273]:SingleVariableDeclaration[16260-16273]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[16275-16288]:SingleVariableDeclaration[16275-16288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16290-16826]:Block[16290-16826]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[16300-16413]:IfStatement[16300-16413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16323-16413]:Block[16323-16413]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[16337-16403]:ThrowStatement[16337-16403]"
    }, {
      "left" : "if (maxDigits < minDigits)",
      "right" : "if (maxDigits < minDigits)",
      "info" : "IfStatement[16422-16495]:IfStatement[16422-16495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16449-16495]:Block[16449-16495]"
    }, {
      "left" : "maxDigits = minDigits;",
      "right" : "maxDigits = minDigits;",
      "info" : "ExpressionStatement[16463-16485]:ExpressionStatement[16463-16485]"
    }, {
      "left" : "if (minDigits < 0 || maxDigits <= 0)",
      "right" : "if (minDigits < 0 || maxDigits <= 0)",
      "info" : "IfStatement[16504-16602]:IfStatement[16504-16602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16541-16602]:Block[16541-16602]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[16555-16592]:ThrowStatement[16555-16592]"
    }, {
      "left" : "if (minDigits <= 1)",
      "right" : "if (minDigits <= 1)",
      "info" : "IfStatement[16611-16820]:IfStatement[16611-16820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16631-16718]:Block[16631-16718]"
    }, {
      "left" : "return append0(new UnpaddedNumber(fieldType, maxDigits, true));",
      "right" : "return append0(new UnpaddedNumber(fieldType, maxDigits, true));",
      "info" : "ReturnStatement[16645-16708]:ReturnStatement[16645-16708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16724-16820]:Block[16724-16820]"
    }, {
      "left" : "return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",
      "right" : "return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",
      "info" : "ReturnStatement[16738-16810]:ReturnStatement[16738-16810]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17425-17431]:Modifier[17425-17431]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[17432-17456]:SimpleType[17432-17456]"
    }, {
      "left" : "appendFixedSignedDecimal",
      "right" : "appendFixedSignedDecimal",
      "info" : "SimpleName[17457-17481]:SimpleName[17457-17481]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[17495-17522]:SingleVariableDeclaration[17495-17522]"
    }, {
      "left" : "int numDigits",
      "right" : "int numDigits",
      "info" : "SingleVariableDeclaration[17524-17537]:SingleVariableDeclaration[17524-17537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17539-17867]:Block[17539-17867]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[17549-17662]:IfStatement[17549-17662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17572-17662]:Block[17572-17662]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[17586-17652]:ThrowStatement[17586-17652]"
    }, {
      "left" : "if (numDigits <= 0)",
      "right" : "if (numDigits <= 0)",
      "info" : "IfStatement[17671-17792]:IfStatement[17671-17792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17691-17792]:Block[17691-17792]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal number of digits: \" + numDigits);",
      "right" : "throw new IllegalArgumentException(\"Illegal number of digits: \" + numDigits);",
      "info" : "ThrowStatement[17705-17782]:ThrowStatement[17705-17782]"
    }, {
      "left" : "return append0(new FixedNumber(fieldType, numDigits, true));",
      "right" : "return append0(new FixedNumber(fieldType, numDigits, true));",
      "info" : "ReturnStatement[17801-17861]:ReturnStatement[17801-17861]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18164-18170]:Modifier[18164-18170]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[18171-18195]:SimpleType[18171-18195]"
    }, {
      "left" : "appendText",
      "right" : "appendText",
      "info" : "SimpleName[18196-18206]:SimpleName[18196-18206]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[18207-18234]:SingleVariableDeclaration[18207-18234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18236-18422]:Block[18236-18422]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[18246-18359]:IfStatement[18246-18359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18269-18359]:Block[18269-18359]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[18283-18349]:ThrowStatement[18283-18349]"
    }, {
      "left" : "return append0(new TextField(fieldType, false));",
      "right" : "return append0(new TextField(fieldType, false));",
      "info" : "ReturnStatement[18368-18416]:ReturnStatement[18368-18416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18725-18731]:Modifier[18725-18731]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[18732-18756]:SimpleType[18732-18756]"
    }, {
      "left" : "appendShortText",
      "right" : "appendShortText",
      "info" : "SimpleName[18757-18772]:SimpleName[18757-18772]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[18773-18800]:SingleVariableDeclaration[18773-18800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18802-18987]:Block[18802-18987]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[18812-18925]:IfStatement[18812-18925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18835-18925]:Block[18835-18925]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[18849-18915]:ThrowStatement[18849-18915]"
    }, {
      "left" : "return append0(new TextField(fieldType, true));",
      "right" : "return append0(new TextField(fieldType, true));",
      "info" : "ReturnStatement[18934-18981]:ReturnStatement[18934-18981]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19636-19642]:Modifier[19636-19642]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[19643-19667]:SimpleType[19643-19667]"
    }, {
      "left" : "appendFraction",
      "right" : "appendFraction",
      "info" : "SimpleName[19668-19682]:SimpleName[19668-19682]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[19696-19723]:SingleVariableDeclaration[19696-19723]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[19725-19738]:SingleVariableDeclaration[19725-19738]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[19740-19753]:SingleVariableDeclaration[19740-19753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19755-20144]:Block[19755-20144]"
    }, {
      "left" : "if (fieldType == null)",
      "right" : "if (fieldType == null)",
      "info" : "IfStatement[19765-19878]:IfStatement[19765-19878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19788-19878]:Block[19788-19878]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Field type must not be null\");",
      "info" : "ThrowStatement[19802-19868]:ThrowStatement[19802-19868]"
    }, {
      "left" : "if (maxDigits < minDigits)",
      "right" : "if (maxDigits < minDigits)",
      "info" : "IfStatement[19887-19960]:IfStatement[19887-19960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19914-19960]:Block[19914-19960]"
    }, {
      "left" : "maxDigits = minDigits;",
      "right" : "maxDigits = minDigits;",
      "info" : "ExpressionStatement[19928-19950]:ExpressionStatement[19928-19950]"
    }, {
      "left" : "if (minDigits < 0 || maxDigits <= 0)",
      "right" : "if (minDigits < 0 || maxDigits <= 0)",
      "info" : "IfStatement[19969-20067]:IfStatement[19969-20067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20006-20067]:Block[20006-20067]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[20020-20057]:ThrowStatement[20020-20057]"
    }, {
      "left" : "return append0(new Fraction(fieldType, minDigits, maxDigits));",
      "right" : "return append0(new Fraction(fieldType, minDigits, maxDigits));",
      "info" : "ReturnStatement[20076-20138]:ReturnStatement[20076-20138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20834-20840]:Modifier[20834-20840]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[20841-20865]:SimpleType[20841-20865]"
    }, {
      "left" : "appendFractionOfSecond",
      "right" : "appendFractionOfSecond",
      "info" : "SimpleName[20866-20888]:SimpleName[20866-20888]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[20889-20902]:SingleVariableDeclaration[20889-20902]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[20904-20917]:SingleVariableDeclaration[20904-20917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20919-21012]:Block[20919-21012]"
    }, {
      "left" : "return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",
      "right" : "return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",
      "info" : "ReturnStatement[20929-21006]:ReturnStatement[20929-21006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21661-21667]:Modifier[21661-21667]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[21668-21692]:SimpleType[21668-21692]"
    }, {
      "left" : "appendFractionOfMinute",
      "right" : "appendFractionOfMinute",
      "info" : "SimpleName[21693-21715]:SimpleName[21693-21715]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[21716-21729]:SingleVariableDeclaration[21716-21729]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[21731-21744]:SingleVariableDeclaration[21731-21744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21746-21839]:Block[21746-21839]"
    }, {
      "left" : "return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",
      "right" : "return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",
      "info" : "ReturnStatement[21756-21833]:ReturnStatement[21756-21833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22484-22490]:Modifier[22484-22490]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[22491-22515]:SimpleType[22491-22515]"
    }, {
      "left" : "appendFractionOfHour",
      "right" : "appendFractionOfHour",
      "info" : "SimpleName[22516-22536]:SimpleName[22516-22536]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[22537-22550]:SingleVariableDeclaration[22537-22550]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[22552-22565]:SingleVariableDeclaration[22552-22565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22567-22658]:Block[22567-22658]"
    }, {
      "left" : "return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",
      "right" : "return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",
      "info" : "ReturnStatement[22577-22652]:ReturnStatement[22577-22652]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23301-23307]:Modifier[23301-23307]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[23308-23332]:SimpleType[23308-23332]"
    }, {
      "left" : "appendFractionOfDay",
      "right" : "appendFractionOfDay",
      "info" : "SimpleName[23333-23352]:SimpleName[23333-23352]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[23353-23366]:SingleVariableDeclaration[23353-23366]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[23368-23381]:SingleVariableDeclaration[23368-23381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23383-23474]:Block[23383-23474]"
    }, {
      "left" : "return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",
      "right" : "return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",
      "info" : "ReturnStatement[23393-23468]:ReturnStatement[23393-23468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24154-24160]:Modifier[24154-24160]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[24161-24185]:SimpleType[24161-24185]"
    }, {
      "left" : "appendMillisOfSecond",
      "right" : "appendMillisOfSecond",
      "info" : "SimpleName[24186-24206]:SimpleName[24186-24206]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[24207-24220]:SingleVariableDeclaration[24207-24220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24222-24309]:Block[24222-24309]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",
      "right" : "return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",
      "info" : "ReturnStatement[24232-24303]:ReturnStatement[24232-24303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24522-24528]:Modifier[24522-24528]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[24529-24553]:SimpleType[24529-24553]"
    }, {
      "left" : "appendMillisOfDay",
      "right" : "appendMillisOfDay",
      "info" : "SimpleName[24554-24571]:SimpleName[24554-24571]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[24572-24585]:SingleVariableDeclaration[24572-24585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24587-24671]:Block[24587-24671]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",
      "right" : "return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",
      "info" : "ReturnStatement[24597-24665]:ReturnStatement[24597-24665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24887-24893]:Modifier[24887-24893]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[24894-24918]:SimpleType[24894-24918]"
    }, {
      "left" : "appendSecondOfMinute",
      "right" : "appendSecondOfMinute",
      "info" : "SimpleName[24919-24939]:SimpleName[24919-24939]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[24940-24953]:SingleVariableDeclaration[24940-24953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24955-25042]:Block[24955-25042]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",
      "info" : "ReturnStatement[24965-25036]:ReturnStatement[24965-25036]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25255-25261]:Modifier[25255-25261]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[25262-25286]:SimpleType[25262-25286]"
    }, {
      "left" : "appendSecondOfDay",
      "right" : "appendSecondOfDay",
      "info" : "SimpleName[25287-25304]:SimpleName[25287-25304]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[25305-25318]:SingleVariableDeclaration[25305-25318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25320-25404]:Block[25320-25404]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",
      "right" : "return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",
      "info" : "ReturnStatement[25330-25398]:ReturnStatement[25330-25398]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25618-25624]:Modifier[25618-25624]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[25625-25649]:SimpleType[25625-25649]"
    }, {
      "left" : "appendMinuteOfHour",
      "right" : "appendMinuteOfHour",
      "info" : "SimpleName[25650-25668]:SimpleName[25650-25668]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[25669-25682]:SingleVariableDeclaration[25669-25682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25684-25769]:Block[25684-25769]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",
      "info" : "ReturnStatement[25694-25763]:ReturnStatement[25694-25763]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25982-25988]:Modifier[25982-25988]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[25989-26013]:SimpleType[25989-26013]"
    }, {
      "left" : "appendMinuteOfDay",
      "right" : "appendMinuteOfDay",
      "info" : "SimpleName[26014-26031]:SimpleName[26014-26031]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[26032-26045]:SingleVariableDeclaration[26032-26045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26047-26131]:Block[26047-26131]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",
      "right" : "return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",
      "info" : "ReturnStatement[26057-26125]:ReturnStatement[26057-26125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26342-26348]:Modifier[26342-26348]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[26349-26373]:SimpleType[26349-26373]"
    }, {
      "left" : "appendHourOfDay",
      "right" : "appendHourOfDay",
      "info" : "SimpleName[26374-26389]:SimpleName[26374-26389]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[26390-26403]:SingleVariableDeclaration[26390-26403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26405-26487]:Block[26405-26487]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",
      "info" : "ReturnStatement[26415-26481]:ReturnStatement[26415-26481]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26702-26708]:Modifier[26702-26708]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[26709-26733]:SimpleType[26709-26733]"
    }, {
      "left" : "appendClockhourOfDay",
      "right" : "appendClockhourOfDay",
      "info" : "SimpleName[26734-26754]:SimpleName[26734-26754]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[26755-26768]:SingleVariableDeclaration[26755-26768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26770-26857]:Block[26770-26857]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",
      "info" : "ReturnStatement[26780-26851]:ReturnStatement[26780-26851]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27072-27078]:Modifier[27072-27078]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[27079-27103]:SimpleType[27079-27103]"
    }, {
      "left" : "appendHourOfHalfday",
      "right" : "appendHourOfHalfday",
      "info" : "SimpleName[27104-27123]:SimpleName[27104-27123]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[27124-27137]:SingleVariableDeclaration[27124-27137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27139-27225]:Block[27139-27225]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",
      "info" : "ReturnStatement[27149-27219]:ReturnStatement[27149-27219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27445-27451]:Modifier[27445-27451]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[27452-27476]:SimpleType[27452-27476]"
    }, {
      "left" : "appendClockhourOfHalfday",
      "right" : "appendClockhourOfHalfday",
      "info" : "SimpleName[27477-27501]:SimpleName[27477-27501]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[27502-27515]:SingleVariableDeclaration[27502-27515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27517-27608]:Block[27517-27608]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",
      "info" : "ReturnStatement[27527-27602]:ReturnStatement[27527-27602]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27819-27825]:Modifier[27819-27825]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[27826-27850]:SimpleType[27826-27850]"
    }, {
      "left" : "appendDayOfWeek",
      "right" : "appendDayOfWeek",
      "info" : "SimpleName[27851-27866]:SimpleName[27851-27866]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[27867-27880]:SingleVariableDeclaration[27867-27880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27882-27964]:Block[27882-27964]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",
      "right" : "return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",
      "info" : "ReturnStatement[27892-27958]:ReturnStatement[27892-27958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28176-28182]:Modifier[28176-28182]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[28183-28207]:SimpleType[28183-28207]"
    }, {
      "left" : "appendDayOfMonth",
      "right" : "appendDayOfMonth",
      "info" : "SimpleName[28208-28224]:SimpleName[28208-28224]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[28225-28238]:SingleVariableDeclaration[28225-28238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28240-28323]:Block[28240-28323]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",
      "info" : "ReturnStatement[28250-28317]:ReturnStatement[28250-28317]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28534-28540]:Modifier[28534-28540]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[28541-28565]:SimpleType[28541-28565]"
    }, {
      "left" : "appendDayOfYear",
      "right" : "appendDayOfYear",
      "info" : "SimpleName[28566-28581]:SimpleName[28566-28581]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[28582-28595]:SingleVariableDeclaration[28582-28595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28597-28679]:Block[28597-28679]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",
      "right" : "return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",
      "info" : "ReturnStatement[28607-28673]:ReturnStatement[28607-28673]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28895-28901]:Modifier[28895-28901]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[28902-28926]:SimpleType[28902-28926]"
    }, {
      "left" : "appendWeekOfWeekyear",
      "right" : "appendWeekOfWeekyear",
      "info" : "SimpleName[28927-28947]:SimpleName[28927-28947]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[28948-28961]:SingleVariableDeclaration[28948-28961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28963-29050]:Block[28963-29050]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",
      "info" : "ReturnStatement[28973-29044]:ReturnStatement[28973-29044]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29392-29398]:Modifier[29392-29398]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[29399-29423]:SimpleType[29399-29423]"
    }, {
      "left" : "appendWeekyear",
      "right" : "appendWeekyear",
      "info" : "SimpleName[29424-29438]:SimpleName[29424-29438]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[29439-29452]:SingleVariableDeclaration[29439-29452]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[29454-29467]:SingleVariableDeclaration[29454-29467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29469-29564]:Block[29469-29564]"
    }, {
      "left" : "return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",
      "right" : "return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",
      "info" : "ReturnStatement[29479-29558]:ReturnStatement[29479-29558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29777-29783]:Modifier[29777-29783]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[29784-29808]:SimpleType[29784-29808]"
    }, {
      "left" : "appendMonthOfYear",
      "right" : "appendMonthOfYear",
      "info" : "SimpleName[29809-29826]:SimpleName[29809-29826]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[29827-29840]:SingleVariableDeclaration[29827-29840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29842-29926]:Block[29842-29926]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",
      "right" : "return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",
      "info" : "ReturnStatement[29852-29920]:ReturnStatement[29852-29920]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30264-30270]:Modifier[30264-30270]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[30271-30295]:SimpleType[30271-30295]"
    }, {
      "left" : "appendYear",
      "right" : "appendYear",
      "info" : "SimpleName[30296-30306]:SimpleName[30296-30306]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[30307-30320]:SingleVariableDeclaration[30307-30320]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[30322-30335]:SingleVariableDeclaration[30322-30335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30337-30428]:Block[30337-30428]"
    }, {
      "left" : "return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",
      "right" : "return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",
      "info" : "ReturnStatement[30347-30422]:ReturnStatement[30347-30422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31333-31339]:Modifier[31333-31339]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[31340-31364]:SimpleType[31340-31364]"
    }, {
      "left" : "appendTwoDigitYear",
      "right" : "appendTwoDigitYear",
      "info" : "SimpleName[31365-31383]:SimpleName[31365-31383]"
    }, {
      "left" : "int pivot",
      "right" : "int pivot",
      "info" : "SingleVariableDeclaration[31384-31393]:SingleVariableDeclaration[31384-31393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31395-31451]:Block[31395-31451]"
    }, {
      "left" : "return appendTwoDigitYear(pivot, false);",
      "right" : "return appendTwoDigitYear(pivot, false);",
      "info" : "ReturnStatement[31405-31445]:ReturnStatement[31405-31445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32170-32176]:Modifier[32170-32176]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[32177-32201]:SimpleType[32177-32201]"
    }, {
      "left" : "appendTwoDigitYear",
      "right" : "appendTwoDigitYear",
      "info" : "SimpleName[32202-32220]:SimpleName[32202-32220]"
    }, {
      "left" : "int pivot",
      "right" : "int pivot",
      "info" : "SingleVariableDeclaration[32221-32230]:SingleVariableDeclaration[32221-32230]"
    }, {
      "left" : "boolean lenientParse",
      "right" : "boolean lenientParse",
      "info" : "SingleVariableDeclaration[32232-32252]:SingleVariableDeclaration[32232-32252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32254-32350]:Block[32254-32350]"
    }, {
      "left" : "return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",
      "right" : "return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",
      "info" : "ReturnStatement[32264-32344]:ReturnStatement[32264-32344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33263-33269]:Modifier[33263-33269]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[33270-33294]:SimpleType[33270-33294]"
    }, {
      "left" : "appendTwoDigitWeekyear",
      "right" : "appendTwoDigitWeekyear",
      "info" : "SimpleName[33295-33317]:SimpleName[33295-33317]"
    }, {
      "left" : "int pivot",
      "right" : "int pivot",
      "info" : "SingleVariableDeclaration[33318-33327]:SingleVariableDeclaration[33318-33327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33329-33389]:Block[33329-33389]"
    }, {
      "left" : "return appendTwoDigitWeekyear(pivot, false);",
      "right" : "return appendTwoDigitWeekyear(pivot, false);",
      "info" : "ReturnStatement[33339-33383]:ReturnStatement[33339-33383]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34128-34134]:Modifier[34128-34134]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[34135-34159]:SimpleType[34135-34159]"
    }, {
      "left" : "appendTwoDigitWeekyear",
      "right" : "appendTwoDigitWeekyear",
      "info" : "SimpleName[34160-34182]:SimpleName[34160-34182]"
    }, {
      "left" : "int pivot",
      "right" : "int pivot",
      "info" : "SingleVariableDeclaration[34183-34192]:SingleVariableDeclaration[34183-34192]"
    }, {
      "left" : "boolean lenientParse",
      "right" : "boolean lenientParse",
      "info" : "SingleVariableDeclaration[34194-34214]:SingleVariableDeclaration[34194-34214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34216-34316]:Block[34216-34316]"
    }, {
      "left" : "return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",
      "right" : "return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",
      "info" : "ReturnStatement[34226-34310]:ReturnStatement[34226-34310]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34659-34665]:Modifier[34659-34665]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[34666-34690]:SimpleType[34666-34690]"
    }, {
      "left" : "appendYearOfEra",
      "right" : "appendYearOfEra",
      "info" : "SimpleName[34691-34706]:SimpleName[34691-34706]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[34707-34720]:SingleVariableDeclaration[34707-34720]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[34722-34735]:SingleVariableDeclaration[34722-34735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34737-34827]:Block[34737-34827]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",
      "right" : "return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",
      "info" : "ReturnStatement[34747-34821]:ReturnStatement[34747-34821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35169-35175]:Modifier[35169-35175]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[35176-35200]:SimpleType[35176-35200]"
    }, {
      "left" : "appendYearOfCentury",
      "right" : "appendYearOfCentury",
      "info" : "SimpleName[35201-35220]:SimpleName[35201-35220]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[35221-35234]:SingleVariableDeclaration[35221-35234]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[35236-35249]:SingleVariableDeclaration[35236-35249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35251-35345]:Block[35251-35345]"
    }, {
      "left" : "return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",
      "right" : "return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",
      "info" : "ReturnStatement[35261-35339]:ReturnStatement[35261-35339]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35686-35692]:Modifier[35686-35692]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[35693-35717]:SimpleType[35693-35717]"
    }, {
      "left" : "appendCenturyOfEra",
      "right" : "appendCenturyOfEra",
      "info" : "SimpleName[35718-35736]:SimpleName[35718-35736]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[35737-35750]:SingleVariableDeclaration[35737-35750]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[35752-35765]:SingleVariableDeclaration[35752-35765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35767-35866]:Block[35767-35866]"
    }, {
      "left" : "return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",
      "right" : "return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",
      "info" : "ReturnStatement[35777-35860]:ReturnStatement[35777-35860]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36089-36095]:Modifier[36089-36095]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[36096-36120]:SimpleType[36096-36120]"
    }, {
      "left" : "appendHalfdayOfDayText",
      "right" : "appendHalfdayOfDayText",
      "info" : "SimpleName[36121-36143]:SimpleName[36121-36143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36146-36214]:Block[36146-36214]"
    }, {
      "left" : "return appendText(DateTimeFieldType.halfdayOfDay());",
      "right" : "return appendText(DateTimeFieldType.halfdayOfDay());",
      "info" : "ReturnStatement[36156-36208]:ReturnStatement[36156-36208]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36453-36459]:Modifier[36453-36459]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[36460-36484]:SimpleType[36460-36484]"
    }, {
      "left" : "appendDayOfWeekText",
      "right" : "appendDayOfWeekText",
      "info" : "SimpleName[36485-36504]:SimpleName[36485-36504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36507-36572]:Block[36507-36572]"
    }, {
      "left" : "return appendText(DateTimeFieldType.dayOfWeek());",
      "right" : "return appendText(DateTimeFieldType.dayOfWeek());",
      "info" : "ReturnStatement[36517-36566]:ReturnStatement[36517-36566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36824-36830]:Modifier[36824-36830]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[36831-36855]:SimpleType[36831-36855]"
    }, {
      "left" : "appendDayOfWeekShortText",
      "right" : "appendDayOfWeekShortText",
      "info" : "SimpleName[36856-36880]:SimpleName[36856-36880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36883-36953]:Block[36883-36953]"
    }, {
      "left" : "return appendShortText(DateTimeFieldType.dayOfWeek());",
      "right" : "return appendShortText(DateTimeFieldType.dayOfWeek());",
      "info" : "ReturnStatement[36893-36947]:ReturnStatement[36893-36947]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37209-37215]:Modifier[37209-37215]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[37216-37240]:SimpleType[37216-37240]"
    }, {
      "left" : "appendMonthOfYearText",
      "right" : "appendMonthOfYearText",
      "info" : "SimpleName[37241-37262]:SimpleName[37241-37262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37265-37333]:Block[37265-37333]"
    }, {
      "left" : "return appendText(DateTimeFieldType.monthOfYear());",
      "right" : "return appendText(DateTimeFieldType.monthOfYear());",
      "info" : "ReturnStatement[37276-37327]:ReturnStatement[37276-37327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37576-37582]:Modifier[37576-37582]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[37583-37607]:SimpleType[37583-37607]"
    }, {
      "left" : "appendMonthOfYearShortText",
      "right" : "appendMonthOfYearShortText",
      "info" : "SimpleName[37608-37634]:SimpleName[37608-37634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37637-37709]:Block[37637-37709]"
    }, {
      "left" : "return appendShortText(DateTimeFieldType.monthOfYear());",
      "right" : "return appendShortText(DateTimeFieldType.monthOfYear());",
      "info" : "ReturnStatement[37647-37703]:ReturnStatement[37647-37703]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37938-37944]:Modifier[37938-37944]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[37945-37969]:SimpleType[37945-37969]"
    }, {
      "left" : "appendEraText",
      "right" : "appendEraText",
      "info" : "SimpleName[37970-37983]:SimpleName[37970-37983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37986-38045]:Block[37986-38045]"
    }, {
      "left" : "return appendText(DateTimeFieldType.era());",
      "right" : "return appendText(DateTimeFieldType.era());",
      "info" : "ReturnStatement[37996-38039]:ReturnStatement[37996-38039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38332-38338]:Modifier[38332-38338]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[38339-38363]:SimpleType[38339-38363]"
    }, {
      "left" : "appendTimeZoneName",
      "right" : "appendTimeZoneName",
      "info" : "SimpleName[38364-38382]:SimpleName[38364-38382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38385-38470]:Block[38385-38470]"
    }, {
      "left" : "return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",
      "right" : "return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",
      "info" : "ReturnStatement[38395-38464]:ReturnStatement[38395-38464]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38939-38945]:Modifier[38939-38945]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[38946-38970]:SimpleType[38946-38970]"
    }, {
      "left" : "appendTimeZoneName",
      "right" : "appendTimeZoneName",
      "info" : "SimpleName[38971-38989]:SimpleName[38971-38989]"
    }, {
      "left" : "Map<String, DateTimeZone> parseLookup",
      "right" : "Map<String, DateTimeZone> parseLookup",
      "info" : "SingleVariableDeclaration[38990-39027]:SingleVariableDeclaration[38990-39027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39029-39149]:Block[39029-39149]"
    }, {
      "left" : "TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",
      "right" : "TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",
      "info" : "VariableDeclarationStatement[39039-39111]:VariableDeclarationStatement[39039-39111]"
    }, {
      "left" : "return append0(pp, pp);",
      "right" : "return append0(pp, pp);",
      "info" : "ReturnStatement[39120-39143]:ReturnStatement[39120-39143]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39447-39453]:Modifier[39447-39453]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[39454-39478]:SimpleType[39454-39478]"
    }, {
      "left" : "appendTimeZoneShortName",
      "right" : "appendTimeZoneShortName",
      "info" : "SimpleName[39479-39502]:SimpleName[39479-39502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39505-39591]:Block[39505-39591]"
    }, {
      "left" : "return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",
      "right" : "return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",
      "info" : "ReturnStatement[39515-39585]:ReturnStatement[39515-39585]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40073-40079]:Modifier[40073-40079]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[40080-40104]:SimpleType[40080-40104]"
    }, {
      "left" : "appendTimeZoneShortName",
      "right" : "appendTimeZoneShortName",
      "info" : "SimpleName[40105-40128]:SimpleName[40105-40128]"
    }, {
      "left" : "Map<String, DateTimeZone> parseLookup",
      "right" : "Map<String, DateTimeZone> parseLookup",
      "info" : "SingleVariableDeclaration[40129-40166]:SingleVariableDeclaration[40129-40166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40168-40289]:Block[40168-40289]"
    }, {
      "left" : "TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",
      "right" : "TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",
      "info" : "VariableDeclarationStatement[40178-40251]:VariableDeclarationStatement[40178-40251]"
    }, {
      "left" : "return append0(pp, pp);",
      "right" : "return append0(pp, pp);",
      "info" : "ReturnStatement[40260-40283]:ReturnStatement[40260-40283]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40498-40504]:Modifier[40498-40504]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[40505-40529]:SimpleType[40505-40529]"
    }, {
      "left" : "appendTimeZoneId",
      "right" : "appendTimeZoneId",
      "info" : "SimpleName[40530-40546]:SimpleName[40530-40546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40549-40622]:Block[40549-40622]"
    }, {
      "left" : "return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",
      "right" : "return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",
      "info" : "ReturnStatement[40559-40616]:ReturnStatement[40559-40616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41540-41546]:Modifier[41540-41546]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[41547-41571]:SimpleType[41547-41571]"
    }, {
      "left" : "appendTimeZoneOffset",
      "right" : "appendTimeZoneOffset",
      "info" : "SimpleName[41572-41592]:SimpleName[41572-41592]"
    }, {
      "left" : "String zeroOffsetText",
      "right" : "String zeroOffsetText",
      "info" : "SingleVariableDeclaration[41606-41627]:SingleVariableDeclaration[41606-41627]"
    }, {
      "left" : "boolean showSeparators",
      "right" : "boolean showSeparators",
      "info" : "SingleVariableDeclaration[41629-41651]:SingleVariableDeclaration[41629-41651]"
    }, {
      "left" : "int minFields",
      "right" : "int minFields",
      "info" : "SingleVariableDeclaration[41665-41678]:SingleVariableDeclaration[41665-41678]"
    }, {
      "left" : "int maxFields",
      "right" : "int maxFields",
      "info" : "SingleVariableDeclaration[41680-41693]:SingleVariableDeclaration[41680-41693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41695-41840]:Block[41695-41840]"
    }, {
      "left" : "return append0(new TimeZoneOffset\n                       (zeroOffsetText, zeroOffsetText, showSeparators, minFields, maxFields));",
      "right" : "return append0(new TimeZoneOffset\n                       (zeroOffsetText, zeroOffsetText, showSeparators, minFields, maxFields));",
      "info" : "ReturnStatement[41705-41834]:ReturnStatement[41705-41834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42953-42959]:Modifier[42953-42959]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[42960-42984]:SimpleType[42960-42984]"
    }, {
      "left" : "appendTimeZoneOffset",
      "right" : "appendTimeZoneOffset",
      "info" : "SimpleName[42985-43005]:SimpleName[42985-43005]"
    }, {
      "left" : "String zeroOffsetPrintText",
      "right" : "String zeroOffsetPrintText",
      "info" : "SingleVariableDeclaration[43019-43045]:SingleVariableDeclaration[43019-43045]"
    }, {
      "left" : "String zeroOffsetParseText",
      "right" : "String zeroOffsetParseText",
      "info" : "SingleVariableDeclaration[43047-43073]:SingleVariableDeclaration[43047-43073]"
    }, {
      "left" : "boolean showSeparators",
      "right" : "boolean showSeparators",
      "info" : "SingleVariableDeclaration[43075-43097]:SingleVariableDeclaration[43075-43097]"
    }, {
      "left" : "int minFields",
      "right" : "int minFields",
      "info" : "SingleVariableDeclaration[43111-43124]:SingleVariableDeclaration[43111-43124]"
    }, {
      "left" : "int maxFields",
      "right" : "int maxFields",
      "info" : "SingleVariableDeclaration[43126-43139]:SingleVariableDeclaration[43126-43139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43141-43296]:Block[43141-43296]"
    }, {
      "left" : "return append0(new TimeZoneOffset\n                       (zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields));",
      "right" : "return append0(new TimeZoneOffset\n                       (zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields));",
      "info" : "ReturnStatement[43151-43290]:ReturnStatement[43151-43290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43652-43658]:Modifier[43652-43658]"
    }, {
      "left" : "DateTimeFormatterBuilder",
      "right" : "DateTimeFormatterBuilder",
      "info" : "SimpleType[43659-43683]:SimpleType[43659-43683]"
    }, {
      "left" : "appendPattern",
      "right" : "appendPattern",
      "info" : "SimpleName[43684-43697]:SimpleName[43684-43697]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[43698-43712]:SingleVariableDeclaration[43698-43712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43714-43797]:Block[43714-43797]"
    }, {
      "left" : "DateTimeFormat.appendPatternTo(this, pattern);",
      "right" : "DateTimeFormat.appendPatternTo(this, pattern);",
      "info" : "ExpressionStatement[43724-43770]:ExpressionStatement[43724-43770]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43779-43791]:ReturnStatement[43779-43791]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43881-43888]:Modifier[43881-43888]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[43889-43895]:SimpleType[43889-43895]"
    }, {
      "left" : "getFormatter",
      "right" : "getFormatter",
      "info" : "SimpleName[43896-43908]:SimpleName[43896-43908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43911-44532]:Block[43911-44532]"
    }, {
      "left" : "Object f = iFormatter;",
      "right" : "Object f = iFormatter;",
      "info" : "VariableDeclarationStatement[43921-43943]:VariableDeclarationStatement[43921-43943]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[43953-44507]:IfStatement[43953-44507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43968-44507]:Block[43968-44507]"
    }, {
      "left" : "if (iElementPairs.size() == 2)",
      "right" : "if (iElementPairs.size() == 2)",
      "info" : "IfStatement[43982-44374]:IfStatement[43982-44374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44013-44374]:Block[44013-44374]"
    }, {
      "left" : "Object printer = iElementPairs.get(0);",
      "right" : "Object printer = iElementPairs.get(0);",
      "info" : "VariableDeclarationStatement[44031-44069]:VariableDeclarationStatement[44031-44069]"
    }, {
      "left" : "Object parser = iElementPairs.get(1);",
      "right" : "Object parser = iElementPairs.get(1);",
      "info" : "VariableDeclarationStatement[44086-44123]:VariableDeclarationStatement[44086-44123]"
    }, {
      "left" : "if (printer != null)",
      "right" : "if (printer != null)",
      "info" : "IfStatement[44141-44360]:IfStatement[44141-44360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44162-44303]:Block[44162-44303]"
    }, {
      "left" : "if (printer == parser || parser == null)",
      "right" : "if (printer == parser || parser == null)",
      "info" : "IfStatement[44184-44285]:IfStatement[44184-44285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44225-44285]:Block[44225-44285]"
    }, {
      "left" : "f = printer;",
      "right" : "f = printer;",
      "info" : "ExpressionStatement[44251-44263]:ExpressionStatement[44251-44263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44309-44360]:Block[44309-44360]"
    }, {
      "left" : "f = parser;",
      "right" : "f = parser;",
      "info" : "ExpressionStatement[44331-44342]:ExpressionStatement[44331-44342]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[44388-44468]:IfStatement[44388-44468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44403-44468]:Block[44403-44468]"
    }, {
      "left" : "f = new Composite(iElementPairs);",
      "right" : "f = new Composite(iElementPairs);",
      "info" : "ExpressionStatement[44421-44454]:ExpressionStatement[44421-44454]"
    }, {
      "left" : "iFormatter = f;",
      "right" : "iFormatter = f;",
      "info" : "ExpressionStatement[44482-44497]:ExpressionStatement[44482-44497]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[44517-44526]:ReturnStatement[44517-44526]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44538-44545]:Modifier[44538-44545]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44546-44553]:PrimitiveType[44546-44553]"
    }, {
      "left" : "isPrinter",
      "right" : "isPrinter",
      "info" : "SimpleName[44554-44563]:SimpleName[44554-44563]"
    }, {
      "left" : "Object f",
      "right" : "Object f",
      "info" : "SingleVariableDeclaration[44564-44572]:SingleVariableDeclaration[44564-44572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44574-44789]:Block[44574-44789]"
    }, {
      "left" : "if (f instanceof DateTimePrinter)",
      "right" : "if (f instanceof DateTimePrinter)",
      "info" : "IfStatement[44584-44761]:IfStatement[44584-44761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44618-44761]:Block[44618-44761]"
    }, {
      "left" : "if (f instanceof Composite)",
      "right" : "if (f instanceof Composite)",
      "info" : "IfStatement[44632-44726]:IfStatement[44632-44726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44660-44726]:Block[44660-44726]"
    }, {
      "left" : "return ((Composite)f).isPrinter();",
      "right" : "return ((Composite)f).isPrinter();",
      "info" : "ReturnStatement[44678-44712]:ReturnStatement[44678-44712]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44739-44751]:ReturnStatement[44739-44751]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44770-44783]:ReturnStatement[44770-44783]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44795-44802]:Modifier[44795-44802]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44803-44810]:PrimitiveType[44803-44810]"
    }, {
      "left" : "isParser",
      "right" : "isParser",
      "info" : "SimpleName[44811-44819]:SimpleName[44811-44819]"
    }, {
      "left" : "Object f",
      "right" : "Object f",
      "info" : "SingleVariableDeclaration[44820-44828]:SingleVariableDeclaration[44820-44828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44830-45043]:Block[44830-45043]"
    }, {
      "left" : "if (f instanceof DateTimeParser)",
      "right" : "if (f instanceof DateTimeParser)",
      "info" : "IfStatement[44840-45015]:IfStatement[44840-45015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44873-45015]:Block[44873-45015]"
    }, {
      "left" : "if (f instanceof Composite)",
      "right" : "if (f instanceof Composite)",
      "info" : "IfStatement[44887-44980]:IfStatement[44887-44980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44915-44980]:Block[44915-44980]"
    }, {
      "left" : "return ((Composite)f).isParser();",
      "right" : "return ((Composite)f).isParser();",
      "info" : "ReturnStatement[44933-44966]:ReturnStatement[44933-44966]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44993-45005]:ReturnStatement[44993-45005]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45024-45037]:ReturnStatement[45024-45037]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45049-45056]:Modifier[45049-45056]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45057-45064]:PrimitiveType[45057-45064]"
    }, {
      "left" : "isFormatter",
      "right" : "isFormatter",
      "info" : "SimpleName[45065-45076]:SimpleName[45065-45076]"
    }, {
      "left" : "Object f",
      "right" : "Object f",
      "info" : "SingleVariableDeclaration[45077-45085]:SingleVariableDeclaration[45077-45085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45087-45140]:Block[45087-45140]"
    }, {
      "left" : "return (isPrinter(f) || isParser(f));",
      "right" : "return (isPrinter(f) || isParser(f));",
      "info" : "ReturnStatement[45097-45134]:ReturnStatement[45097-45134]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45146-45152]:Modifier[45146-45152]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45153-45157]:PrimitiveType[45153-45157]"
    }, {
      "left" : "appendUnknownString",
      "right" : "appendUnknownString",
      "info" : "SimpleName[45158-45177]:SimpleName[45158-45177]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[45178-45194]:SingleVariableDeclaration[45178-45194]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[45196-45203]:SingleVariableDeclaration[45196-45203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45205-45295]:Block[45205-45295]"
    }, {
      "left" : "for (int i = len; --i >= 0)",
      "right" : "for (int i = len; --i >= 0)",
      "info" : "ForStatement[45215-45289]:ForStatement[45215-45289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45244-45289]:Block[45244-45289]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[45258-45279]:ExpressionStatement[45258-45279]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45301-45307]:Modifier[45301-45307]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45308-45312]:PrimitiveType[45308-45312]"
    }, {
      "left" : "printUnknownString",
      "right" : "printUnknownString",
      "info" : "SimpleName[45313-45331]:SimpleName[45313-45331]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[45332-45342]:SingleVariableDeclaration[45332-45342]"
    }, {
      "left" : "int len",
      "right" : "int len",
      "info" : "SingleVariableDeclaration[45344-45351]:SingleVariableDeclaration[45344-45351]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[45360-45371]:SimpleType[45360-45371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45372-45461]:Block[45372-45461]"
    }, {
      "left" : "for (int i = len; --i >= 0)",
      "right" : "for (int i = len; --i >= 0)",
      "info" : "ForStatement[45382-45455]:ForStatement[45382-45455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45411-45455]:Block[45411-45455]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[45425-45445]:ExpressionStatement[45425-45445]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45545-45551]:Modifier[45545-45551]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[45552-45557]:TYPE_DECLARATION_KIND[45552-45557]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "SimpleName[45558-45574]:SimpleName[45558-45574]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[45598-45613]:SimpleType[45598-45613]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[45615-45629]:SimpleType[45615-45629]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "SimpleName[45677-45693]:SimpleName[45677-45693]"
    }, {
      "left" : "char value",
      "right" : "char value",
      "info" : "SingleVariableDeclaration[45694-45704]:SingleVariableDeclaration[45694-45704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45706-45766]:Block[45706-45766]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[45720-45728]:SuperConstructorInvocation[45720-45728]"
    }, {
      "left" : "iValue = value;",
      "right" : "iValue = value;",
      "info" : "ExpressionStatement[45741-45756]:ExpressionStatement[45741-45756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45776-45782]:Modifier[45776-45782]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[45783-45786]:PrimitiveType[45783-45786]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[45787-45808]:SimpleName[45787-45808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45811-45844]:Block[45811-45844]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[45825-45834]:ReturnStatement[45825-45834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45854-45860]:Modifier[45854-45860]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45861-45865]:PrimitiveType[45861-45865]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[45866-45873]:SimpleName[45866-45873]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[45891-45907]:SingleVariableDeclaration[45891-45907]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[45909-45921]:SingleVariableDeclaration[45909-45921]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[45923-45940]:SingleVariableDeclaration[45923-45940]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[45958-45975]:SingleVariableDeclaration[45958-45975]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[45977-46001]:SingleVariableDeclaration[45977-46001]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[46003-46016]:SingleVariableDeclaration[46003-46016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46018-46061]:Block[46018-46061]"
    }, {
      "left" : "buf.append(iValue);",
      "right" : "buf.append(iValue);",
      "info" : "ExpressionStatement[46032-46051]:ExpressionStatement[46032-46051]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46071-46077]:Modifier[46071-46077]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46078-46082]:PrimitiveType[46078-46082]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[46083-46090]:SimpleName[46083-46090]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[46108-46118]:SingleVariableDeclaration[46108-46118]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[46120-46132]:SingleVariableDeclaration[46120-46132]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[46134-46151]:SingleVariableDeclaration[46134-46151]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[46169-46186]:SingleVariableDeclaration[46169-46186]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[46188-46212]:SingleVariableDeclaration[46188-46212]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[46214-46227]:SingleVariableDeclaration[46214-46227]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46236-46247]:SimpleType[46236-46247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46248-46290]:Block[46248-46290]"
    }, {
      "left" : "out.write(iValue);",
      "right" : "out.write(iValue);",
      "info" : "ExpressionStatement[46262-46280]:ExpressionStatement[46262-46280]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46300-46306]:Modifier[46300-46306]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46307-46311]:PrimitiveType[46307-46311]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[46312-46319]:SimpleName[46312-46319]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[46320-46336]:SingleVariableDeclaration[46320-46336]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[46338-46361]:SingleVariableDeclaration[46338-46361]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[46363-46376]:SingleVariableDeclaration[46363-46376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46378-46421]:Block[46378-46421]"
    }, {
      "left" : "buf.append(iValue);",
      "right" : "buf.append(iValue);",
      "info" : "ExpressionStatement[46392-46411]:ExpressionStatement[46392-46411]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46431-46437]:Modifier[46431-46437]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46438-46442]:PrimitiveType[46438-46442]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[46443-46450]:SimpleName[46443-46450]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[46451-46461]:SingleVariableDeclaration[46451-46461]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[46463-46486]:SingleVariableDeclaration[46463-46486]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[46488-46501]:SingleVariableDeclaration[46488-46501]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46510-46521]:SimpleType[46510-46521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46522-46564]:Block[46522-46564]"
    }, {
      "left" : "out.write(iValue);",
      "right" : "out.write(iValue);",
      "info" : "ExpressionStatement[46536-46554]:ExpressionStatement[46536-46554]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46574-46580]:Modifier[46574-46580]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[46581-46584]:PrimitiveType[46581-46584]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[46585-46605]:SimpleName[46585-46605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46608-46641]:Block[46608-46641]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[46622-46631]:ReturnStatement[46622-46631]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46651-46657]:Modifier[46651-46657]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[46658-46661]:PrimitiveType[46658-46661]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[46662-46671]:SimpleName[46662-46671]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[46672-46699]:SingleVariableDeclaration[46672-46699]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[46701-46712]:SingleVariableDeclaration[46701-46712]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[46714-46726]:SingleVariableDeclaration[46714-46726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46728-47319]:Block[46728-47319]"
    }, {
      "left" : "if (position >= text.length())",
      "right" : "if (position >= text.length())",
      "info" : "IfStatement[46742-46822]:IfStatement[46742-46822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46773-46822]:Block[46773-46822]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[46791-46808]:ReturnStatement[46791-46808]"
    }, {
      "left" : "char a = text.charAt(position);",
      "right" : "char a = text.charAt(position);",
      "info" : "VariableDeclarationStatement[46836-46867]:VariableDeclarationStatement[46836-46867]"
    }, {
      "left" : "char b = iValue;",
      "right" : "char b = iValue;",
      "info" : "VariableDeclarationStatement[46880-46896]:VariableDeclarationStatement[46880-46896]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[46910-47275]:IfStatement[46910-47275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46922-47275]:Block[46922-47275]"
    }, {
      "left" : "a = Character.toUpperCase(a);",
      "right" : "a = Character.toUpperCase(a);",
      "info" : "ExpressionStatement[46940-46969]:ExpressionStatement[46940-46969]"
    }, {
      "left" : "b = Character.toUpperCase(b);",
      "right" : "b = Character.toUpperCase(b);",
      "info" : "ExpressionStatement[46986-47015]:ExpressionStatement[46986-47015]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[47032-47261]:IfStatement[47032-47261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47044-47261]:Block[47044-47261]"
    }, {
      "left" : "a = Character.toLowerCase(a);",
      "right" : "a = Character.toLowerCase(a);",
      "info" : "ExpressionStatement[47066-47095]:ExpressionStatement[47066-47095]"
    }, {
      "left" : "b = Character.toLowerCase(b);",
      "right" : "b = Character.toLowerCase(b);",
      "info" : "ExpressionStatement[47116-47145]:ExpressionStatement[47116-47145]"
    }, {
      "left" : "if (a != b)",
      "right" : "if (a != b)",
      "info" : "IfStatement[47166-47243]:IfStatement[47166-47243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47178-47243]:Block[47178-47243]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[47204-47221]:ReturnStatement[47204-47221]"
    }, {
      "left" : "return position + 1;",
      "right" : "return position + 1;",
      "info" : "ReturnStatement[47289-47309]:ReturnStatement[47289-47309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47409-47415]:Modifier[47409-47415]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[47416-47421]:TYPE_DECLARATION_KIND[47416-47421]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "SimpleName[47422-47435]:SimpleName[47422-47435]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[47459-47474]:SimpleType[47459-47474]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[47476-47490]:SimpleType[47476-47490]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "SimpleName[47540-47553]:SimpleName[47540-47553]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[47554-47566]:SingleVariableDeclaration[47554-47566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47568-47628]:Block[47568-47628]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[47582-47590]:SuperConstructorInvocation[47582-47590]"
    }, {
      "left" : "iValue = value;",
      "right" : "iValue = value;",
      "info" : "ExpressionStatement[47603-47618]:ExpressionStatement[47603-47618]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47638-47644]:Modifier[47638-47644]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[47645-47648]:PrimitiveType[47645-47648]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[47649-47670]:SimpleName[47649-47670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47673-47720]:Block[47673-47720]"
    }, {
      "left" : "return iValue.length();",
      "right" : "return iValue.length();",
      "info" : "ReturnStatement[47687-47710]:ReturnStatement[47687-47710]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47730-47736]:Modifier[47730-47736]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47737-47741]:PrimitiveType[47737-47741]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[47742-47749]:SimpleName[47742-47749]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[47767-47783]:SingleVariableDeclaration[47767-47783]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[47785-47797]:SingleVariableDeclaration[47785-47797]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[47799-47816]:SingleVariableDeclaration[47799-47816]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[47834-47851]:SingleVariableDeclaration[47834-47851]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[47853-47877]:SingleVariableDeclaration[47853-47877]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[47879-47892]:SingleVariableDeclaration[47879-47892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47894-47937]:Block[47894-47937]"
    }, {
      "left" : "buf.append(iValue);",
      "right" : "buf.append(iValue);",
      "info" : "ExpressionStatement[47908-47927]:ExpressionStatement[47908-47927]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47947-47953]:Modifier[47947-47953]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47954-47958]:PrimitiveType[47954-47958]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[47959-47966]:SimpleName[47959-47966]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[47984-47994]:SingleVariableDeclaration[47984-47994]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[47996-48008]:SingleVariableDeclaration[47996-48008]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[48010-48027]:SingleVariableDeclaration[48010-48027]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[48045-48062]:SingleVariableDeclaration[48045-48062]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[48064-48088]:SingleVariableDeclaration[48064-48088]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[48090-48103]:SingleVariableDeclaration[48090-48103]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[48112-48123]:SimpleType[48112-48123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48124-48166]:Block[48124-48166]"
    }, {
      "left" : "out.write(iValue);",
      "right" : "out.write(iValue);",
      "info" : "ExpressionStatement[48138-48156]:ExpressionStatement[48138-48156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48176-48182]:Modifier[48176-48182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48183-48187]:PrimitiveType[48183-48187]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[48188-48195]:SimpleName[48188-48195]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[48196-48212]:SingleVariableDeclaration[48196-48212]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[48214-48237]:SingleVariableDeclaration[48214-48237]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[48239-48252]:SingleVariableDeclaration[48239-48252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48254-48297]:Block[48254-48297]"
    }, {
      "left" : "buf.append(iValue);",
      "right" : "buf.append(iValue);",
      "info" : "ExpressionStatement[48268-48287]:ExpressionStatement[48268-48287]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48307-48313]:Modifier[48307-48313]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48314-48318]:PrimitiveType[48314-48318]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[48319-48326]:SimpleName[48319-48326]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[48327-48337]:SingleVariableDeclaration[48327-48337]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[48339-48362]:SingleVariableDeclaration[48339-48362]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[48364-48377]:SingleVariableDeclaration[48364-48377]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[48386-48397]:SimpleType[48386-48397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48398-48440]:Block[48398-48440]"
    }, {
      "left" : "out.write(iValue);",
      "right" : "out.write(iValue);",
      "info" : "ExpressionStatement[48412-48430]:ExpressionStatement[48412-48430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48450-48456]:Modifier[48450-48456]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[48457-48460]:PrimitiveType[48457-48460]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[48461-48481]:SimpleName[48461-48481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48484-48531]:Block[48484-48531]"
    }, {
      "left" : "return iValue.length();",
      "right" : "return iValue.length();",
      "info" : "ReturnStatement[48498-48521]:ReturnStatement[48498-48521]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48541-48547]:Modifier[48541-48547]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[48548-48551]:PrimitiveType[48548-48551]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[48552-48561]:SimpleName[48552-48561]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[48562-48589]:SingleVariableDeclaration[48562-48589]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[48591-48602]:SingleVariableDeclaration[48591-48602]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[48604-48616]:SingleVariableDeclaration[48604-48616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48618-48806]:Block[48618-48806]"
    }, {
      "left" : "if (text.regionMatches(true, position, iValue, 0, iValue.length()))",
      "right" : "if (text.regionMatches(true, position, iValue, 0, iValue.length()))",
      "info" : "IfStatement[48632-48766]:IfStatement[48632-48766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48700-48766]:Block[48700-48766]"
    }, {
      "left" : "return position + iValue.length();",
      "right" : "return position + iValue.length();",
      "info" : "ReturnStatement[48718-48752]:ReturnStatement[48718-48752]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[48779-48796]:ReturnStatement[48779-48796]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48896-48902]:Modifier[48896-48902]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[48903-48911]:Modifier[48903-48911]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[48912-48917]:TYPE_DECLARATION_KIND[48912-48917]"
    }, {
      "left" : "NumberFormatter",
      "right" : "NumberFormatter",
      "info" : "SimpleName[48918-48933]:SimpleName[48918-48933]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[48957-48972]:SimpleType[48957-48972]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[48974-48988]:SimpleType[48974-48988]"
    }, {
      "left" : "NumberFormatter",
      "right" : "NumberFormatter",
      "info" : "SimpleName[49141-49156]:SimpleName[49141-49156]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[49157-49184]:SingleVariableDeclaration[49157-49184]"
    }, {
      "left" : "int maxParsedDigits",
      "right" : "int maxParsedDigits",
      "info" : "SingleVariableDeclaration[49202-49221]:SingleVariableDeclaration[49202-49221]"
    }, {
      "left" : "boolean signed",
      "right" : "boolean signed",
      "info" : "SingleVariableDeclaration[49223-49237]:SingleVariableDeclaration[49223-49237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49239-49385]:Block[49239-49385]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[49253-49261]:SuperConstructorInvocation[49253-49261]"
    }, {
      "left" : "iFieldType = fieldType;",
      "right" : "iFieldType = fieldType;",
      "info" : "ExpressionStatement[49274-49297]:ExpressionStatement[49274-49297]"
    }, {
      "left" : "iMaxParsedDigits = maxParsedDigits;",
      "right" : "iMaxParsedDigits = maxParsedDigits;",
      "info" : "ExpressionStatement[49310-49345]:ExpressionStatement[49310-49345]"
    }, {
      "left" : "iSigned = signed;",
      "right" : "iSigned = signed;",
      "info" : "ExpressionStatement[49358-49375]:ExpressionStatement[49358-49375]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49395-49401]:Modifier[49395-49401]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[49402-49405]:PrimitiveType[49402-49405]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[49406-49426]:SimpleName[49406-49426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49429-49477]:Block[49429-49477]"
    }, {
      "left" : "return iMaxParsedDigits;",
      "right" : "return iMaxParsedDigits;",
      "info" : "ReturnStatement[49443-49467]:ReturnStatement[49443-49467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49487-49493]:Modifier[49487-49493]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[49494-49497]:PrimitiveType[49494-49497]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[49498-49507]:SimpleName[49498-49507]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[49508-49535]:SingleVariableDeclaration[49508-49535]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[49537-49548]:SingleVariableDeclaration[49537-49548]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[49550-49562]:SingleVariableDeclaration[49550-49562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49564-51753]:Block[49564-51753]"
    }, {
      "left" : "int limit = Math.min(iMaxParsedDigits, text.length() - position);",
      "right" : "int limit = Math.min(iMaxParsedDigits, text.length() - position);",
      "info" : "VariableDeclarationStatement[49578-49643]:VariableDeclarationStatement[49578-49643]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[49657-49682]:VariableDeclarationStatement[49657-49682]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[49695-49710]:VariableDeclarationStatement[49695-49710]"
    }, {
      "left" : "while (length < limit)",
      "right" : "while (length < limit)",
      "info" : "WhileStatement[49723-50725]:WhileStatement[49723-50725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49746-50725]:Block[49746-50725]"
    }, {
      "left" : "char c = text.charAt(position + length);",
      "right" : "char c = text.charAt(position + length);",
      "info" : "VariableDeclarationStatement[49764-49804]:VariableDeclarationStatement[49764-49804]"
    }, {
      "left" : "if (length == 0 && (c == '-' || c == '+') && iSigned)",
      "right" : "if (length == 0 && (c == '-' || c == '+') && iSigned)",
      "info" : "IfStatement[49821-50598]:IfStatement[49821-50598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49875-50598]:Block[49875-50598]"
    }, {
      "left" : "negative = c == '-';",
      "right" : "negative = c == '-';",
      "info" : "ExpressionStatement[49897-49917]:ExpressionStatement[49897-49917]"
    }, {
      "left" : "if (length + 1 >= limit || \n                        (c = text.charAt(position + length + 1)) < '0' || c > '9')",
      "right" : "if (length + 1 >= limit || \n                        (c = text.charAt(position + length + 1)) < '0' || c > '9')",
      "info" : "IfStatement[49994-50179]:IfStatement[49994-50179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50125-50179]:Block[50125-50179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50151-50157]:BreakStatement[50151-50157]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[50201-50402]:IfStatement[50201-50402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50215-50272]:Block[50215-50272]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[50241-50250]:ExpressionStatement[50241-50250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50278-50402]:Block[50278-50402]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[50369-50380]:ExpressionStatement[50369-50380]"
    }, {
      "left" : "limit = Math.min(limit + 1, text.length() - position);",
      "right" : "limit = Math.min(limit + 1, text.length() - position);",
      "info" : "ExpressionStatement[50496-50550]:ExpressionStatement[50496-50550]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[50571-50580]:ContinueStatement[50571-50580]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[50615-50685]:IfStatement[50615-50685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50639-50685]:Block[50639-50685]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50661-50667]:BreakStatement[50661-50667]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[50702-50711]:ExpressionStatement[50702-50711]"
    }, {
      "left" : "if (length == 0)",
      "right" : "if (length == 0)",
      "info" : "IfStatement[50739-50805]:IfStatement[50739-50805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50756-50805]:Block[50756-50805]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[50774-50791]:ReturnStatement[50774-50791]"
    }, {
      "left" : "int value;",
      "right" : "int value;",
      "info" : "VariableDeclarationStatement[50819-50829]:VariableDeclarationStatement[50819-50829]"
    }, {
      "left" : "if (length >= 9)",
      "right" : "if (length >= 9)",
      "info" : "IfStatement[50842-51664]:IfStatement[50842-51664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50859-51079]:Block[50859-51079]"
    }, {
      "left" : "value = Integer.parseInt(text.substring(position, position += length));",
      "right" : "value = Integer.parseInt(text.substring(position, position += length));",
      "info" : "ExpressionStatement[50994-51065]:ExpressionStatement[50994-51065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51085-51664]:Block[51085-51664]"
    }, {
      "left" : "int i = position;",
      "right" : "int i = position;",
      "info" : "VariableDeclarationStatement[51103-51120]:VariableDeclarationStatement[51103-51120]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[51137-51195]:IfStatement[51137-51195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51151-51195]:Block[51151-51195]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[51173-51177]:ExpressionStatement[51173-51177]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[51212-51387]:TryStatement[51212-51387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51216-51287]:Block[51216-51287]"
    }, {
      "left" : "value = text.charAt(i++) - '0';",
      "right" : "value = text.charAt(i++) - '0';",
      "info" : "ExpressionStatement[51238-51269]:ExpressionStatement[51238-51269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51330-51387]:Block[51330-51387]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[51352-51369]:ReturnStatement[51352-51369]"
    }, {
      "left" : "position += length;",
      "right" : "position += length;",
      "info" : "ExpressionStatement[51404-51423]:ExpressionStatement[51404-51423]"
    }, {
      "left" : "while (i < position)",
      "right" : "while (i < position)",
      "info" : "WhileStatement[51440-51564]:WhileStatement[51440-51564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51461-51564]:Block[51461-51564]"
    }, {
      "left" : "value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';",
      "right" : "value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';",
      "info" : "ExpressionStatement[51483-51546]:ExpressionStatement[51483-51546]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[51581-51650]:IfStatement[51581-51650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51595-51650]:Block[51595-51650]"
    }, {
      "left" : "value = -value;",
      "right" : "value = -value;",
      "info" : "ExpressionStatement[51617-51632]:ExpressionStatement[51617-51632]"
    }, {
      "left" : "bucket.saveField(iFieldType, value);",
      "right" : "bucket.saveField(iFieldType, value);",
      "info" : "ExpressionStatement[51678-51714]:ExpressionStatement[51678-51714]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[51727-51743]:ReturnStatement[51727-51743]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51843-51849]:Modifier[51843-51849]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[51850-51855]:TYPE_DECLARATION_KIND[51850-51855]"
    }, {
      "left" : "UnpaddedNumber",
      "right" : "UnpaddedNumber",
      "info" : "SimpleName[51856-51870]:SimpleName[51856-51870]"
    }, {
      "left" : "NumberFormatter",
      "right" : "NumberFormatter",
      "info" : "SimpleType[51879-51894]:SimpleType[51879-51894]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[51906-51915]:Modifier[51906-51915]"
    }, {
      "left" : "UnpaddedNumber",
      "right" : "UnpaddedNumber",
      "info" : "SimpleName[51916-51930]:SimpleName[51916-51930]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[51931-51958]:SingleVariableDeclaration[51931-51958]"
    }, {
      "left" : "int maxParsedDigits",
      "right" : "int maxParsedDigits",
      "info" : "SingleVariableDeclaration[51983-52002]:SingleVariableDeclaration[51983-52002]"
    }, {
      "left" : "boolean signed",
      "right" : "boolean signed",
      "info" : "SingleVariableDeclaration[52004-52018]:SingleVariableDeclaration[52004-52018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52028-52094]:Block[52028-52094]"
    }, {
      "left" : "super(fieldType, maxParsedDigits, signed);",
      "right" : "super(fieldType, maxParsedDigits, signed);",
      "info" : "SuperConstructorInvocation[52042-52084]:SuperConstructorInvocation[52042-52084]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52104-52110]:Modifier[52104-52110]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[52111-52114]:PrimitiveType[52111-52114]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[52115-52136]:SimpleName[52115-52136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52139-52187]:Block[52139-52187]"
    }, {
      "left" : "return iMaxParsedDigits;",
      "right" : "return iMaxParsedDigits;",
      "info" : "ReturnStatement[52153-52177]:ReturnStatement[52153-52177]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52197-52203]:Modifier[52197-52203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52204-52208]:PrimitiveType[52204-52208]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[52209-52216]:SimpleName[52209-52216]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[52234-52250]:SingleVariableDeclaration[52234-52250]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[52252-52264]:SingleVariableDeclaration[52252-52264]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[52266-52283]:SingleVariableDeclaration[52266-52283]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[52301-52318]:SingleVariableDeclaration[52301-52318]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[52320-52344]:SingleVariableDeclaration[52320-52344]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[52346-52359]:SingleVariableDeclaration[52346-52359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52361-52628]:Block[52361-52628]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52375-52618]:TryStatement[52375-52618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52379-52537]:Block[52379-52537]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(chrono);",
      "right" : "DateTimeField field = iFieldType.getField(chrono);",
      "info" : "VariableDeclarationStatement[52397-52447]:VariableDeclarationStatement[52397-52447]"
    }, {
      "left" : "FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",
      "right" : "FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",
      "info" : "ExpressionStatement[52464-52523]:ExpressionStatement[52464-52523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52565-52618]:Block[52565-52618]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[52583-52604]:ExpressionStatement[52583-52604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52638-52644]:Modifier[52638-52644]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52645-52649]:PrimitiveType[52645-52649]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[52650-52657]:SimpleName[52650-52657]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[52675-52685]:SingleVariableDeclaration[52675-52685]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[52687-52699]:SingleVariableDeclaration[52687-52699]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[52701-52718]:SingleVariableDeclaration[52701-52718]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[52736-52753]:SingleVariableDeclaration[52736-52753]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[52755-52779]:SingleVariableDeclaration[52755-52779]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[52781-52794]:SingleVariableDeclaration[52781-52794]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[52803-52814]:SimpleType[52803-52814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52815-53080]:Block[52815-53080]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52829-53070]:TryStatement[52829-53070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52833-52990]:Block[52833-52990]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(chrono);",
      "right" : "DateTimeField field = iFieldType.getField(chrono);",
      "info" : "VariableDeclarationStatement[52851-52901]:VariableDeclarationStatement[52851-52901]"
    }, {
      "left" : "FormatUtils.writeUnpaddedInteger(out, field.get(instant));",
      "right" : "FormatUtils.writeUnpaddedInteger(out, field.get(instant));",
      "info" : "ExpressionStatement[52918-52976]:ExpressionStatement[52918-52976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53018-53070]:Block[53018-53070]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[53036-53056]:ExpressionStatement[53036-53056]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53090-53096]:Modifier[53090-53096]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53097-53101]:PrimitiveType[53097-53101]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[53102-53109]:SimpleName[53102-53109]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[53110-53126]:SingleVariableDeclaration[53110-53126]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[53128-53151]:SingleVariableDeclaration[53128-53151]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[53153-53166]:SingleVariableDeclaration[53153-53166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53168-53517]:Block[53168-53517]"
    }, {
      "left" : "if (partial.isSupported(iFieldType))",
      "right" : "if (partial.isSupported(iFieldType))",
      "info" : "IfStatement[53182-53507]:IfStatement[53182-53507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53219-53448]:Block[53219-53448]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[53237-53434]:TryStatement[53237-53434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53241-53345]:Block[53241-53345]"
    }, {
      "left" : "FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",
      "right" : "FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",
      "info" : "ExpressionStatement[53263-53327]:ExpressionStatement[53263-53327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53373-53434]:Block[53373-53434]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[53395-53416]:ExpressionStatement[53395-53416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53454-53507]:Block[53454-53507]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[53472-53493]:ExpressionStatement[53472-53493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53527-53533]:Modifier[53527-53533]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53534-53538]:PrimitiveType[53534-53538]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[53539-53546]:SimpleName[53539-53546]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[53547-53557]:SingleVariableDeclaration[53547-53557]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[53559-53582]:SingleVariableDeclaration[53559-53582]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[53584-53597]:SingleVariableDeclaration[53584-53597]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[53606-53617]:SimpleType[53606-53617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53618-53964]:Block[53618-53964]"
    }, {
      "left" : "if (partial.isSupported(iFieldType))",
      "right" : "if (partial.isSupported(iFieldType))",
      "info" : "IfStatement[53632-53954]:IfStatement[53632-53954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53669-53896]:Block[53669-53896]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[53687-53882]:TryStatement[53687-53882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53691-53794]:Block[53691-53794]"
    }, {
      "left" : "FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",
      "right" : "FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",
      "info" : "ExpressionStatement[53713-53776]:ExpressionStatement[53713-53776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53822-53882]:Block[53822-53882]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[53844-53864]:ExpressionStatement[53844-53864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53902-53954]:Block[53902-53954]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[53920-53940]:ExpressionStatement[53920-53940]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54054-54060]:Modifier[54054-54060]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[54061-54066]:TYPE_DECLARATION_KIND[54061-54066]"
    }, {
      "left" : "PaddedNumber",
      "right" : "PaddedNumber",
      "info" : "SimpleName[54067-54079]:SimpleName[54067-54079]"
    }, {
      "left" : "NumberFormatter",
      "right" : "NumberFormatter",
      "info" : "SimpleType[54088-54103]:SimpleType[54088-54103]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[54163-54172]:Modifier[54163-54172]"
    }, {
      "left" : "PaddedNumber",
      "right" : "PaddedNumber",
      "info" : "SimpleName[54173-54185]:SimpleName[54173-54185]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[54186-54213]:SingleVariableDeclaration[54186-54213]"
    }, {
      "left" : "int maxParsedDigits",
      "right" : "int maxParsedDigits",
      "info" : "SingleVariableDeclaration[54215-54234]:SingleVariableDeclaration[54215-54234]"
    }, {
      "left" : "boolean signed",
      "right" : "boolean signed",
      "info" : "SingleVariableDeclaration[54257-54271]:SingleVariableDeclaration[54257-54271]"
    }, {
      "left" : "int minPrintedDigits",
      "right" : "int minPrintedDigits",
      "info" : "SingleVariableDeclaration[54273-54293]:SingleVariableDeclaration[54273-54293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54303-54419]:Block[54303-54419]"
    }, {
      "left" : "super(fieldType, maxParsedDigits, signed);",
      "right" : "super(fieldType, maxParsedDigits, signed);",
      "info" : "SuperConstructorInvocation[54317-54359]:SuperConstructorInvocation[54317-54359]"
    }, {
      "left" : "iMinPrintedDigits = minPrintedDigits;",
      "right" : "iMinPrintedDigits = minPrintedDigits;",
      "info" : "ExpressionStatement[54372-54409]:ExpressionStatement[54372-54409]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54429-54435]:Modifier[54429-54435]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[54436-54439]:PrimitiveType[54436-54439]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[54440-54461]:SimpleName[54440-54461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54464-54512]:Block[54464-54512]"
    }, {
      "left" : "return iMaxParsedDigits;",
      "right" : "return iMaxParsedDigits;",
      "info" : "ReturnStatement[54478-54502]:ReturnStatement[54478-54502]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54522-54528]:Modifier[54522-54528]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54529-54533]:PrimitiveType[54529-54533]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[54534-54541]:SimpleName[54534-54541]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[54559-54575]:SingleVariableDeclaration[54559-54575]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[54577-54589]:SingleVariableDeclaration[54577-54589]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[54591-54608]:SingleVariableDeclaration[54591-54608]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[54626-54643]:SingleVariableDeclaration[54626-54643]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[54645-54669]:SingleVariableDeclaration[54645-54669]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[54671-54684]:SingleVariableDeclaration[54671-54684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54686-54993]:Block[54686-54993]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[54700-54983]:TryStatement[54700-54983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54704-54879]:Block[54704-54879]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(chrono);",
      "right" : "DateTimeField field = iFieldType.getField(chrono);",
      "info" : "VariableDeclarationStatement[54722-54772]:VariableDeclarationStatement[54722-54772]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",
      "right" : "FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",
      "info" : "ExpressionStatement[54789-54865]:ExpressionStatement[54789-54865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54907-54983]:Block[54907-54983]"
    }, {
      "left" : "appendUnknownString(buf, iMinPrintedDigits);",
      "right" : "appendUnknownString(buf, iMinPrintedDigits);",
      "info" : "ExpressionStatement[54925-54969]:ExpressionStatement[54925-54969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55003-55009]:Modifier[55003-55009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55010-55014]:PrimitiveType[55010-55014]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[55015-55022]:SimpleName[55015-55022]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[55040-55050]:SingleVariableDeclaration[55040-55050]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[55052-55064]:SingleVariableDeclaration[55052-55064]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[55066-55083]:SingleVariableDeclaration[55066-55083]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[55101-55118]:SingleVariableDeclaration[55101-55118]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[55120-55144]:SingleVariableDeclaration[55120-55144]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[55146-55159]:SingleVariableDeclaration[55146-55159]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55168-55179]:SimpleType[55168-55179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55180-55485]:Block[55180-55485]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[55194-55475]:TryStatement[55194-55475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55198-55372]:Block[55198-55372]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(chrono);",
      "right" : "DateTimeField field = iFieldType.getField(chrono);",
      "info" : "VariableDeclarationStatement[55216-55266]:VariableDeclarationStatement[55216-55266]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",
      "right" : "FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",
      "info" : "ExpressionStatement[55283-55358]:ExpressionStatement[55283-55358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55400-55475]:Block[55400-55475]"
    }, {
      "left" : "printUnknownString(out, iMinPrintedDigits);",
      "right" : "printUnknownString(out, iMinPrintedDigits);",
      "info" : "ExpressionStatement[55418-55461]:ExpressionStatement[55418-55461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55495-55501]:Modifier[55495-55501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55502-55506]:PrimitiveType[55502-55506]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[55507-55514]:SimpleName[55507-55514]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[55515-55531]:SingleVariableDeclaration[55515-55531]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[55533-55556]:SingleVariableDeclaration[55533-55556]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[55558-55571]:SingleVariableDeclaration[55558-55571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55573-55985]:Block[55573-55985]"
    }, {
      "left" : "if (partial.isSupported(iFieldType))",
      "right" : "if (partial.isSupported(iFieldType))",
      "info" : "IfStatement[55587-55975]:IfStatement[55587-55975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55624-55893]:Block[55624-55893]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[55642-55879]:TryStatement[55642-55879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55646-55767]:Block[55646-55767]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",
      "right" : "FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",
      "info" : "ExpressionStatement[55668-55749]:ExpressionStatement[55668-55749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55795-55879]:Block[55795-55879]"
    }, {
      "left" : "appendUnknownString(buf, iMinPrintedDigits);",
      "right" : "appendUnknownString(buf, iMinPrintedDigits);",
      "info" : "ExpressionStatement[55817-55861]:ExpressionStatement[55817-55861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55899-55975]:Block[55899-55975]"
    }, {
      "left" : "appendUnknownString(buf, iMinPrintedDigits);",
      "right" : "appendUnknownString(buf, iMinPrintedDigits);",
      "info" : "ExpressionStatement[55917-55961]:ExpressionStatement[55917-55961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55995-56001]:Modifier[55995-56001]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56002-56006]:PrimitiveType[56002-56006]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[56007-56014]:SimpleName[56007-56014]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[56015-56025]:SingleVariableDeclaration[56015-56025]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[56027-56050]:SingleVariableDeclaration[56027-56050]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[56052-56065]:SingleVariableDeclaration[56052-56065]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[56074-56085]:SimpleType[56074-56085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56086-56495]:Block[56086-56495]"
    }, {
      "left" : "if (partial.isSupported(iFieldType))",
      "right" : "if (partial.isSupported(iFieldType))",
      "info" : "IfStatement[56100-56485]:IfStatement[56100-56485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56137-56404]:Block[56137-56404]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[56155-56390]:TryStatement[56155-56390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56159-56279]:Block[56159-56279]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",
      "right" : "FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",
      "info" : "ExpressionStatement[56181-56261]:ExpressionStatement[56181-56261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56307-56390]:Block[56307-56390]"
    }, {
      "left" : "printUnknownString(out, iMinPrintedDigits);",
      "right" : "printUnknownString(out, iMinPrintedDigits);",
      "info" : "ExpressionStatement[56329-56372]:ExpressionStatement[56329-56372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56410-56485]:Block[56410-56485]"
    }, {
      "left" : "printUnknownString(out, iMinPrintedDigits);",
      "right" : "printUnknownString(out, iMinPrintedDigits);",
      "info" : "ExpressionStatement[56428-56471]:ExpressionStatement[56428-56471]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56585-56591]:Modifier[56585-56591]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[56592-56597]:TYPE_DECLARATION_KIND[56592-56597]"
    }, {
      "left" : "FixedNumber",
      "right" : "FixedNumber",
      "info" : "SimpleName[56598-56609]:SimpleName[56598-56609]"
    }, {
      "left" : "PaddedNumber",
      "right" : "PaddedNumber",
      "info" : "SimpleType[56618-56630]:SimpleType[56618-56630]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[56642-56651]:Modifier[56642-56651]"
    }, {
      "left" : "FixedNumber",
      "right" : "FixedNumber",
      "info" : "SimpleName[56652-56663]:SimpleName[56652-56663]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[56664-56691]:SingleVariableDeclaration[56664-56691]"
    }, {
      "left" : "int numDigits",
      "right" : "int numDigits",
      "info" : "SingleVariableDeclaration[56693-56706]:SingleVariableDeclaration[56693-56706]"
    }, {
      "left" : "boolean signed",
      "right" : "boolean signed",
      "info" : "SingleVariableDeclaration[56708-56722]:SingleVariableDeclaration[56708-56722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56724-56795]:Block[56724-56795]"
    }, {
      "left" : "super(fieldType, numDigits, signed, numDigits);",
      "right" : "super(fieldType, numDigits, signed, numDigits);",
      "info" : "SuperConstructorInvocation[56738-56785]:SuperConstructorInvocation[56738-56785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56805-56811]:Modifier[56805-56811]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[56812-56815]:PrimitiveType[56812-56815]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[56816-56825]:SimpleName[56816-56825]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[56826-56853]:SingleVariableDeclaration[56826-56853]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[56855-56866]:SingleVariableDeclaration[56855-56866]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[56868-56880]:SingleVariableDeclaration[56868-56880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56882-57747]:Block[56882-57747]"
    }, {
      "left" : "int newPos = super.parseInto(bucket, text, position);",
      "right" : "int newPos = super.parseInto(bucket, text, position);",
      "info" : "VariableDeclarationStatement[56896-56949]:VariableDeclarationStatement[56896-56949]"
    }, {
      "left" : "if (newPos < 0)",
      "right" : "if (newPos < 0)",
      "info" : "IfStatement[56962-57024]:IfStatement[56962-57024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56978-57024]:Block[56978-57024]"
    }, {
      "left" : "return newPos;",
      "right" : "return newPos;",
      "info" : "ReturnStatement[56996-57010]:ReturnStatement[56996-57010]"
    }, {
      "left" : "int expectedPos = position + iMaxParsedDigits;",
      "right" : "int expectedPos = position + iMaxParsedDigits;",
      "info" : "VariableDeclarationStatement[57037-57083]:VariableDeclarationStatement[57037-57083]"
    }, {
      "left" : "if (newPos != expectedPos)",
      "right" : "if (newPos != expectedPos)",
      "info" : "IfStatement[57096-57710]:IfStatement[57096-57710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57123-57710]:Block[57123-57710]"
    }, {
      "left" : "if (iSigned)",
      "right" : "if (iSigned)",
      "info" : "IfStatement[57141-57334]:IfStatement[57141-57334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57154-57334]:Block[57154-57334]"
    }, {
      "left" : "char c = text.charAt(position);",
      "right" : "char c = text.charAt(position);",
      "info" : "VariableDeclarationStatement[57176-57207]:VariableDeclarationStatement[57176-57207]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[57228-57316]:IfStatement[57228-57316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57254-57316]:Block[57254-57316]"
    }, {
      "left" : "expectedPos++;",
      "right" : "expectedPos++;",
      "info" : "ExpressionStatement[57280-57294]:ExpressionStatement[57280-57294]"
    }, {
      "left" : "if (newPos > expectedPos)",
      "right" : "if (newPos > expectedPos)",
      "info" : "IfStatement[57351-57696]:IfStatement[57351-57696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57377-57523]:Block[57377-57523]"
    }, {
      "left" : "return ~(expectedPos + 1);",
      "right" : "return ~(expectedPos + 1);",
      "info" : "ReturnStatement[57479-57505]:ReturnStatement[57479-57505]"
    }, {
      "left" : "if (newPos < expectedPos)",
      "right" : "if (newPos < expectedPos)",
      "info" : "IfStatement[57529-57696]:IfStatement[57529-57696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57555-57696]:Block[57555-57696]"
    }, {
      "left" : "return ~newPos;",
      "right" : "return ~newPos;",
      "info" : "ReturnStatement[57663-57678]:ReturnStatement[57663-57678]"
    }, {
      "left" : "return newPos;",
      "right" : "return newPos;",
      "info" : "ReturnStatement[57723-57737]:ReturnStatement[57723-57737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57837-57843]:Modifier[57837-57843]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[57844-57849]:TYPE_DECLARATION_KIND[57844-57849]"
    }, {
      "left" : "TwoDigitYear",
      "right" : "TwoDigitYear",
      "info" : "SimpleName[57850-57862]:SimpleName[57850-57862]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[57886-57901]:SimpleType[57886-57901]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[57903-57917]:SimpleType[57903-57917]"
    }, {
      "left" : "TwoDigitYear",
      "right" : "TwoDigitYear",
      "info" : "SimpleName[58128-58140]:SimpleName[58128-58140]"
    }, {
      "left" : "DateTimeFieldType type",
      "right" : "DateTimeFieldType type",
      "info" : "SingleVariableDeclaration[58141-58163]:SingleVariableDeclaration[58141-58163]"
    }, {
      "left" : "int pivot",
      "right" : "int pivot",
      "info" : "SingleVariableDeclaration[58165-58174]:SingleVariableDeclaration[58165-58174]"
    }, {
      "left" : "boolean lenientParse",
      "right" : "boolean lenientParse",
      "info" : "SingleVariableDeclaration[58176-58196]:SingleVariableDeclaration[58176-58196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58198-58326]:Block[58198-58326]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[58212-58220]:SuperConstructorInvocation[58212-58220]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[58233-58246]:ExpressionStatement[58233-58246]"
    }, {
      "left" : "iPivot = pivot;",
      "right" : "iPivot = pivot;",
      "info" : "ExpressionStatement[58259-58274]:ExpressionStatement[58259-58274]"
    }, {
      "left" : "iLenientParse = lenientParse;",
      "right" : "iLenientParse = lenientParse;",
      "info" : "ExpressionStatement[58287-58316]:ExpressionStatement[58287-58316]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58336-58342]:Modifier[58336-58342]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[58343-58346]:PrimitiveType[58343-58346]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[58347-58367]:SimpleName[58347-58367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58370-58423]:Block[58370-58423]"
    }, {
      "left" : "return iLenientParse ? 4 : 2;",
      "right" : "return iLenientParse ? 4 : 2;",
      "info" : "ReturnStatement[58384-58413]:ReturnStatement[58384-58413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58433-58439]:Modifier[58433-58439]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[58440-58443]:PrimitiveType[58440-58443]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[58444-58453]:SimpleName[58444-58453]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[58454-58481]:SingleVariableDeclaration[58454-58481]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[58483-58494]:SingleVariableDeclaration[58483-58494]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[58496-58508]:SingleVariableDeclaration[58496-58508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58510-61886]:Block[58510-61886]"
    }, {
      "left" : "int limit = text.length() - position;",
      "right" : "int limit = text.length() - position;",
      "info" : "VariableDeclarationStatement[58524-58561]:VariableDeclarationStatement[58524-58561]"
    }, {
      "left" : "if (!iLenientParse)",
      "right" : "if (!iLenientParse)",
      "info" : "IfStatement[58575-60954]:IfStatement[58575-60954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58595-58743]:Block[58595-58743]"
    }, {
      "left" : "limit = Math.min(2, limit);",
      "right" : "limit = Math.min(2, limit);",
      "info" : "ExpressionStatement[58613-58640]:ExpressionStatement[58613-58640]"
    }, {
      "left" : "if (limit < 2)",
      "right" : "if (limit < 2)",
      "info" : "IfStatement[58657-58729]:IfStatement[58657-58729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58672-58729]:Block[58672-58729]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[58694-58711]:ReturnStatement[58694-58711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58749-60954]:Block[58749-60954]"
    }, {
      "left" : "boolean hasSignChar = false;",
      "right" : "boolean hasSignChar = false;",
      "info" : "VariableDeclarationStatement[58767-58795]:VariableDeclarationStatement[58767-58795]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[58812-58837]:VariableDeclarationStatement[58812-58837]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[58854-58869]:VariableDeclarationStatement[58854-58869]"
    }, {
      "left" : "while (length < limit)",
      "right" : "while (length < limit)",
      "info" : "WhileStatement[58886-59611]:WhileStatement[58886-59611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58909-59611]:Block[58909-59611]"
    }, {
      "left" : "char c = text.charAt(position + length);",
      "right" : "char c = text.charAt(position + length);",
      "info" : "VariableDeclarationStatement[58931-58971]:VariableDeclarationStatement[58931-58971]"
    }, {
      "left" : "if (length == 0 && (c == '-' || c == '+'))",
      "right" : "if (length == 0 && (c == '-' || c == '+'))",
      "info" : "IfStatement[58992-59464]:IfStatement[58992-59464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59035-59464]:Block[59035-59464]"
    }, {
      "left" : "hasSignChar = true;",
      "right" : "hasSignChar = true;",
      "info" : "ExpressionStatement[59061-59080]:ExpressionStatement[59061-59080]"
    }, {
      "left" : "negative = c == '-';",
      "right" : "negative = c == '-';",
      "info" : "ExpressionStatement[59105-59125]:ExpressionStatement[59105-59125]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[59150-59408]:IfStatement[59150-59408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59164-59229]:Block[59164-59229]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[59194-59203]:ExpressionStatement[59194-59203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59235-59408]:Block[59235-59408]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[59334-59345]:ExpressionStatement[59334-59345]"
    }, {
      "left" : "limit--;",
      "right" : "limit--;",
      "info" : "ExpressionStatement[59374-59382]:ExpressionStatement[59374-59382]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[59433-59442]:ContinueStatement[59433-59442]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[59485-59563]:IfStatement[59485-59563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59509-59563]:Block[59509-59563]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59535-59541]:BreakStatement[59535-59541]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[59584-59593]:ExpressionStatement[59584-59593]"
    }, {
      "left" : "if (length == 0)",
      "right" : "if (length == 0)",
      "info" : "IfStatement[59645-59719]:IfStatement[59645-59719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59662-59719]:Block[59662-59719]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[59684-59701]:ReturnStatement[59684-59701]"
    }, {
      "left" : "if (hasSignChar || length != 2)",
      "right" : "if (hasSignChar || length != 2)",
      "info" : "IfStatement[59737-60940]:IfStatement[59737-60940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59769-60940]:Block[59769-60940]"
    }, {
      "left" : "int value;",
      "right" : "int value;",
      "info" : "VariableDeclarationStatement[59791-59801]:VariableDeclarationStatement[59791-59801]"
    }, {
      "left" : "if (length >= 9)",
      "right" : "if (length >= 9)",
      "info" : "IfStatement[59822-60812]:IfStatement[59822-60812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59839-60091]:Block[59839-60091]"
    }, {
      "left" : "value = Integer.parseInt(text.substring(position, position += length));",
      "right" : "value = Integer.parseInt(text.substring(position, position += length));",
      "info" : "ExpressionStatement[59998-60069]:ExpressionStatement[59998-60069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60097-60812]:Block[60097-60812]"
    }, {
      "left" : "int i = position;",
      "right" : "int i = position;",
      "info" : "VariableDeclarationStatement[60123-60140]:VariableDeclarationStatement[60123-60140]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[60165-60239]:IfStatement[60165-60239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60179-60239]:Block[60179-60239]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[60209-60213]:ExpressionStatement[60209-60213]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[60264-60471]:TryStatement[60264-60471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60268-60355]:Block[60268-60355]"
    }, {
      "left" : "value = text.charAt(i++) - '0';",
      "right" : "value = text.charAt(i++) - '0';",
      "info" : "ExpressionStatement[60298-60329]:ExpressionStatement[60298-60329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60398-60471]:Block[60398-60471]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[60428-60445]:ReturnStatement[60428-60445]"
    }, {
      "left" : "position += length;",
      "right" : "position += length;",
      "info" : "ExpressionStatement[60496-60515]:ExpressionStatement[60496-60515]"
    }, {
      "left" : "while (i < position)",
      "right" : "while (i < position)",
      "info" : "WhileStatement[60540-60680]:WhileStatement[60540-60680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60561-60680]:Block[60561-60680]"
    }, {
      "left" : "value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';",
      "right" : "value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';",
      "info" : "ExpressionStatement[60591-60654]:ExpressionStatement[60591-60654]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[60705-60790]:IfStatement[60705-60790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60719-60790]:Block[60719-60790]"
    }, {
      "left" : "value = -value;",
      "right" : "value = -value;",
      "info" : "ExpressionStatement[60749-60764]:ExpressionStatement[60749-60764]"
    }, {
      "left" : "bucket.saveField(iType, value);",
      "right" : "bucket.saveField(iType, value);",
      "info" : "ExpressionStatement[60854-60885]:ExpressionStatement[60854-60885]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[60906-60922]:ReturnStatement[60906-60922]"
    }, {
      "left" : "int year;",
      "right" : "int year;",
      "info" : "VariableDeclarationStatement[60968-60977]:VariableDeclarationStatement[60968-60977]"
    }, {
      "left" : "char c = text.charAt(position);",
      "right" : "char c = text.charAt(position);",
      "info" : "VariableDeclarationStatement[60990-61021]:VariableDeclarationStatement[60990-61021]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[61034-61107]:IfStatement[61034-61107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61058-61107]:Block[61058-61107]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[61076-61093]:ReturnStatement[61076-61093]"
    }, {
      "left" : "year = c - '0';",
      "right" : "year = c - '0';",
      "info" : "ExpressionStatement[61120-61135]:ExpressionStatement[61120-61135]"
    }, {
      "left" : "c = text.charAt(position + 1);",
      "right" : "c = text.charAt(position + 1);",
      "info" : "ExpressionStatement[61148-61178]:ExpressionStatement[61148-61178]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[61191-61264]:IfStatement[61191-61264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61215-61264]:Block[61215-61264]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[61233-61250]:ReturnStatement[61233-61250]"
    }, {
      "left" : "year = ((year << 3) + (year << 1)) + c - '0';",
      "right" : "year = ((year << 3) + (year << 1)) + c - '0';",
      "info" : "ExpressionStatement[61277-61322]:ExpressionStatement[61277-61322]"
    }, {
      "left" : "int pivot = iPivot;",
      "right" : "int pivot = iPivot;",
      "info" : "VariableDeclarationStatement[61336-61355]:VariableDeclarationStatement[61336-61355]"
    }, {
      "left" : "if (bucket.getPivotYear() != null)",
      "right" : "if (bucket.getPivotYear() != null)",
      "info" : "IfStatement[61443-61551]:IfStatement[61443-61551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61478-61551]:Block[61478-61551]"
    }, {
      "left" : "pivot = bucket.getPivotYear().intValue();",
      "right" : "pivot = bucket.getPivotYear().intValue();",
      "info" : "ExpressionStatement[61496-61537]:ExpressionStatement[61496-61537]"
    }, {
      "left" : "int low = pivot - 50;",
      "right" : "int low = pivot - 50;",
      "info" : "VariableDeclarationStatement[61565-61586]:VariableDeclarationStatement[61565-61586]"
    }, {
      "left" : "int t;",
      "right" : "int t;",
      "info" : "VariableDeclarationStatement[61600-61606]:VariableDeclarationStatement[61600-61606]"
    }, {
      "left" : "if (low >= 0)",
      "right" : "if (low >= 0)",
      "info" : "IfStatement[61619-61744]:IfStatement[61619-61744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61633-61679]:Block[61633-61679]"
    }, {
      "left" : "t = low % 100;",
      "right" : "t = low % 100;",
      "info" : "ExpressionStatement[61651-61665]:ExpressionStatement[61651-61665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61685-61744]:Block[61685-61744]"
    }, {
      "left" : "t = 99 + ((low + 1) % 100);",
      "right" : "t = 99 + ((low + 1) % 100);",
      "info" : "ExpressionStatement[61703-61730]:ExpressionStatement[61703-61730]"
    }, {
      "left" : "year += low + ((year < t) ? 100 : 0) - t;",
      "right" : "year += low + ((year < t) ? 100 : 0) - t;",
      "info" : "ExpressionStatement[61758-61799]:ExpressionStatement[61758-61799]"
    }, {
      "left" : "bucket.saveField(iType, year);",
      "right" : "bucket.saveField(iType, year);",
      "info" : "ExpressionStatement[61813-61843]:ExpressionStatement[61813-61843]"
    }, {
      "left" : "return position + 2;",
      "right" : "return position + 2;",
      "info" : "ReturnStatement[61856-61876]:ReturnStatement[61856-61876]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61904-61910]:Modifier[61904-61910]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[61911-61914]:PrimitiveType[61911-61914]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[61915-61936]:SimpleName[61915-61936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61939-61972]:Block[61939-61972]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[61953-61962]:ReturnStatement[61953-61962]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61982-61988]:Modifier[61982-61988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61989-61993]:PrimitiveType[61989-61993]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[61994-62001]:SimpleName[61994-62001]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[62019-62035]:SingleVariableDeclaration[62019-62035]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[62037-62049]:SingleVariableDeclaration[62037-62049]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[62051-62068]:SingleVariableDeclaration[62051-62068]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[62086-62103]:SingleVariableDeclaration[62086-62103]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[62105-62129]:SingleVariableDeclaration[62105-62129]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[62131-62144]:SingleVariableDeclaration[62131-62144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62146-62416]:Block[62146-62416]"
    }, {
      "left" : "int year = getTwoDigitYear(instant, chrono);",
      "right" : "int year = getTwoDigitYear(instant, chrono);",
      "info" : "VariableDeclarationStatement[62160-62204]:VariableDeclarationStatement[62160-62204]"
    }, {
      "left" : "if (year < 0)",
      "right" : "if (year < 0)",
      "info" : "IfStatement[62217-62406]:IfStatement[62217-62406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62231-62322]:Block[62231-62322]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[62249-62270]:ExpressionStatement[62249-62270]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[62287-62308]:ExpressionStatement[62287-62308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62328-62406]:Block[62328-62406]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, year, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, year, 2);",
      "info" : "ExpressionStatement[62346-62392]:ExpressionStatement[62346-62392]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62426-62432]:Modifier[62426-62432]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62433-62437]:PrimitiveType[62433-62437]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[62438-62445]:SimpleName[62438-62445]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[62463-62473]:SingleVariableDeclaration[62463-62473]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[62475-62487]:SingleVariableDeclaration[62475-62487]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[62489-62506]:SingleVariableDeclaration[62489-62506]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[62524-62541]:SingleVariableDeclaration[62524-62541]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[62543-62567]:SingleVariableDeclaration[62543-62567]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[62569-62582]:SingleVariableDeclaration[62569-62582]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[62591-62602]:SimpleType[62591-62602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62603-62870]:Block[62603-62870]"
    }, {
      "left" : "int year = getTwoDigitYear(instant, chrono);",
      "right" : "int year = getTwoDigitYear(instant, chrono);",
      "info" : "VariableDeclarationStatement[62617-62661]:VariableDeclarationStatement[62617-62661]"
    }, {
      "left" : "if (year < 0)",
      "right" : "if (year < 0)",
      "info" : "IfStatement[62674-62860]:IfStatement[62674-62860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62688-62777]:Block[62688-62777]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[62706-62726]:ExpressionStatement[62706-62726]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[62743-62763]:ExpressionStatement[62743-62763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62783-62860]:Block[62783-62860]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, year, 2);",
      "right" : "FormatUtils.writePaddedInteger(out, year, 2);",
      "info" : "ExpressionStatement[62801-62846]:ExpressionStatement[62801-62846]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62880-62887]:Modifier[62880-62887]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[62888-62891]:PrimitiveType[62888-62891]"
    }, {
      "left" : "getTwoDigitYear",
      "right" : "getTwoDigitYear",
      "info" : "SimpleName[62892-62907]:SimpleName[62892-62907]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[62908-62920]:SingleVariableDeclaration[62908-62920]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[62922-62939]:SingleVariableDeclaration[62922-62939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62941-63237]:Block[62941-63237]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[62955-63227]:TryStatement[62955-63227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62959-63157]:Block[62959-63157]"
    }, {
      "left" : "int year = iType.getField(chrono).get(instant);",
      "right" : "int year = iType.getField(chrono).get(instant);",
      "info" : "VariableDeclarationStatement[62977-63024]:VariableDeclarationStatement[62977-63024]"
    }, {
      "left" : "if (year < 0)",
      "right" : "if (year < 0)",
      "info" : "IfStatement[63041-63108]:IfStatement[63041-63108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63055-63108]:Block[63055-63108]"
    }, {
      "left" : "year = -year;",
      "right" : "year = -year;",
      "info" : "ExpressionStatement[63077-63090]:ExpressionStatement[63077-63090]"
    }, {
      "left" : "return year % 100;",
      "right" : "return year % 100;",
      "info" : "ReturnStatement[63125-63143]:ReturnStatement[63125-63143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63185-63227]:Block[63185-63227]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[63203-63213]:ReturnStatement[63203-63213]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63247-63253]:Modifier[63247-63253]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63254-63258]:PrimitiveType[63254-63258]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[63259-63266]:SimpleName[63259-63266]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[63267-63283]:SingleVariableDeclaration[63267-63283]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[63285-63308]:SingleVariableDeclaration[63285-63308]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[63310-63323]:SingleVariableDeclaration[63310-63323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63325-63587]:Block[63325-63587]"
    }, {
      "left" : "int year = getTwoDigitYear(partial);",
      "right" : "int year = getTwoDigitYear(partial);",
      "info" : "VariableDeclarationStatement[63339-63375]:VariableDeclarationStatement[63339-63375]"
    }, {
      "left" : "if (year < 0)",
      "right" : "if (year < 0)",
      "info" : "IfStatement[63388-63577]:IfStatement[63388-63577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63402-63493]:Block[63402-63493]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[63420-63441]:ExpressionStatement[63420-63441]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[63458-63479]:ExpressionStatement[63458-63479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63499-63577]:Block[63499-63577]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, year, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, year, 2);",
      "info" : "ExpressionStatement[63517-63563]:ExpressionStatement[63517-63563]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[63597-63603]:Modifier[63597-63603]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[63604-63608]:PrimitiveType[63604-63608]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[63609-63616]:SimpleName[63609-63616]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[63617-63627]:SingleVariableDeclaration[63617-63627]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[63629-63652]:SingleVariableDeclaration[63629-63652]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[63654-63667]:SingleVariableDeclaration[63654-63667]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[63676-63687]:SimpleType[63676-63687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63688-63947]:Block[63688-63947]"
    }, {
      "left" : "int year = getTwoDigitYear(partial);",
      "right" : "int year = getTwoDigitYear(partial);",
      "info" : "VariableDeclarationStatement[63702-63738]:VariableDeclarationStatement[63702-63738]"
    }, {
      "left" : "if (year < 0)",
      "right" : "if (year < 0)",
      "info" : "IfStatement[63751-63937]:IfStatement[63751-63937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63765-63854]:Block[63765-63854]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[63783-63803]:ExpressionStatement[63783-63803]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[63820-63840]:ExpressionStatement[63820-63840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63860-63937]:Block[63860-63937]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, year, 2);",
      "right" : "FormatUtils.writePaddedInteger(out, year, 2);",
      "info" : "ExpressionStatement[63878-63923]:ExpressionStatement[63878-63923]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63957-63964]:Modifier[63957-63964]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[63965-63968]:PrimitiveType[63965-63968]"
    }, {
      "left" : "getTwoDigitYear",
      "right" : "getTwoDigitYear",
      "info" : "SimpleName[63969-63984]:SimpleName[63969-63984]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[63985-64008]:SingleVariableDeclaration[63985-64008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64010-64361]:Block[64010-64361]"
    }, {
      "left" : "if (partial.isSupported(iType))",
      "right" : "if (partial.isSupported(iType))",
      "info" : "IfStatement[64024-64327]:IfStatement[64024-64327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64056-64327]:Block[64056-64327]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[64074-64313]:TryStatement[64074-64313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64078-64283]:Block[64078-64283]"
    }, {
      "left" : "int year = partial.get(iType);",
      "right" : "int year = partial.get(iType);",
      "info" : "VariableDeclarationStatement[64100-64130]:VariableDeclarationStatement[64100-64130]"
    }, {
      "left" : "if (year < 0)",
      "right" : "if (year < 0)",
      "info" : "IfStatement[64151-64226]:IfStatement[64151-64226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64165-64226]:Block[64165-64226]"
    }, {
      "left" : "year = -year;",
      "right" : "year = -year;",
      "info" : "ExpressionStatement[64191-64204]:ExpressionStatement[64191-64204]"
    }, {
      "left" : "return year % 100;",
      "right" : "return year % 100;",
      "info" : "ReturnStatement[64247-64265]:ReturnStatement[64247-64265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64311-64313]:Block[64311-64313]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[64341-64351]:ReturnStatement[64341-64351]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64451-64457]:Modifier[64451-64457]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[64458-64463]:TYPE_DECLARATION_KIND[64458-64463]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "SimpleName[64464-64473]:SimpleName[64464-64473]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[64497-64512]:SimpleType[64497-64512]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[64514-64528]:SimpleType[64514-64528]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "SimpleName[64791-64800]:SimpleName[64791-64800]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[64801-64828]:SingleVariableDeclaration[64801-64828]"
    }, {
      "left" : "boolean isShort",
      "right" : "boolean isShort",
      "info" : "SingleVariableDeclaration[64830-64845]:SingleVariableDeclaration[64830-64845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64847-64945]:Block[64847-64945]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[64861-64869]:SuperConstructorInvocation[64861-64869]"
    }, {
      "left" : "iFieldType = fieldType;",
      "right" : "iFieldType = fieldType;",
      "info" : "ExpressionStatement[64882-64905]:ExpressionStatement[64882-64905]"
    }, {
      "left" : "iShort = isShort;",
      "right" : "iShort = isShort;",
      "info" : "ExpressionStatement[64918-64935]:ExpressionStatement[64918-64935]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[64955-64961]:Modifier[64955-64961]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[64962-64965]:PrimitiveType[64962-64965]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[64966-64987]:SimpleName[64966-64987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64990-65037]:Block[64990-65037]"
    }, {
      "left" : "return iShort ? 6 : 20;",
      "right" : "return iShort ? 6 : 20;",
      "info" : "ReturnStatement[65004-65027]:ReturnStatement[65004-65027]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65047-65053]:Modifier[65047-65053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65054-65058]:PrimitiveType[65054-65058]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[65059-65066]:SimpleName[65059-65066]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[65084-65100]:SingleVariableDeclaration[65084-65100]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[65102-65114]:SingleVariableDeclaration[65102-65114]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[65116-65133]:SingleVariableDeclaration[65116-65133]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[65151-65168]:SingleVariableDeclaration[65151-65168]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[65170-65194]:SingleVariableDeclaration[65170-65194]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[65196-65209]:SingleVariableDeclaration[65196-65209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65211-65395]:Block[65211-65395]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65225-65385]:TryStatement[65225-65385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65229-65304]:Block[65229-65304]"
    }, {
      "left" : "buf.append(print(instant, chrono, locale));",
      "right" : "buf.append(print(instant, chrono, locale));",
      "info" : "ExpressionStatement[65247-65290]:ExpressionStatement[65247-65290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65332-65385]:Block[65332-65385]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[65350-65371]:ExpressionStatement[65350-65371]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65405-65411]:Modifier[65405-65411]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65412-65416]:PrimitiveType[65412-65416]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[65417-65424]:SimpleName[65417-65424]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[65442-65452]:SingleVariableDeclaration[65442-65452]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[65454-65466]:SingleVariableDeclaration[65454-65466]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[65468-65485]:SingleVariableDeclaration[65468-65485]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[65503-65520]:SingleVariableDeclaration[65503-65520]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[65522-65546]:SingleVariableDeclaration[65522-65546]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[65548-65561]:SingleVariableDeclaration[65548-65561]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[65570-65581]:SimpleType[65570-65581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65582-65764]:Block[65582-65764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65596-65754]:TryStatement[65596-65754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65600-65674]:Block[65600-65674]"
    }, {
      "left" : "out.write(print(instant, chrono, locale));",
      "right" : "out.write(print(instant, chrono, locale));",
      "info" : "ExpressionStatement[65618-65660]:ExpressionStatement[65618-65660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65702-65754]:Block[65702-65754]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[65720-65740]:ExpressionStatement[65720-65740]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65774-65780]:Modifier[65774-65780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[65781-65785]:PrimitiveType[65781-65785]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[65786-65793]:SimpleName[65786-65793]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[65794-65810]:SingleVariableDeclaration[65794-65810]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[65812-65835]:SingleVariableDeclaration[65812-65835]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[65837-65850]:SingleVariableDeclaration[65837-65850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65852-66028]:Block[65852-66028]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[65866-66018]:TryStatement[65866-66018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65870-65937]:Block[65870-65937]"
    }, {
      "left" : "buf.append(print(partial, locale));",
      "right" : "buf.append(print(partial, locale));",
      "info" : "ExpressionStatement[65888-65923]:ExpressionStatement[65888-65923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65965-66018]:Block[65965-66018]"
    }, {
      "left" : "buf.append('\\ufffd');",
      "right" : "buf.append('\\ufffd');",
      "info" : "ExpressionStatement[65983-66004]:ExpressionStatement[65983-66004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[66038-66044]:Modifier[66038-66044]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66045-66049]:PrimitiveType[66045-66049]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[66050-66057]:SimpleName[66050-66057]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[66058-66068]:SingleVariableDeclaration[66058-66068]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[66070-66093]:SingleVariableDeclaration[66070-66093]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[66095-66108]:SingleVariableDeclaration[66095-66108]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[66117-66128]:SimpleType[66117-66128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66129-66303]:Block[66129-66303]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[66143-66293]:TryStatement[66143-66293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66147-66213]:Block[66147-66213]"
    }, {
      "left" : "out.write(print(partial, locale));",
      "right" : "out.write(print(partial, locale));",
      "info" : "ExpressionStatement[66165-66199]:ExpressionStatement[66165-66199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66241-66293]:Block[66241-66293]"
    }, {
      "left" : "out.write('\\ufffd');",
      "right" : "out.write('\\ufffd');",
      "info" : "ExpressionStatement[66259-66279]:ExpressionStatement[66259-66279]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66313-66320]:Modifier[66313-66320]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[66321-66327]:SimpleType[66321-66327]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[66328-66333]:SimpleName[66328-66333]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[66334-66346]:SingleVariableDeclaration[66334-66346]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[66348-66365]:SingleVariableDeclaration[66348-66365]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[66367-66380]:SingleVariableDeclaration[66367-66380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66382-66636]:Block[66382-66636]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(chrono);",
      "right" : "DateTimeField field = iFieldType.getField(chrono);",
      "info" : "VariableDeclarationStatement[66396-66446]:VariableDeclarationStatement[66396-66446]"
    }, {
      "left" : "if (iShort)",
      "right" : "if (iShort)",
      "info" : "IfStatement[66459-66626]:IfStatement[66459-66626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66471-66548]:Block[66471-66548]"
    }, {
      "left" : "return field.getAsShortText(instant, locale);",
      "right" : "return field.getAsShortText(instant, locale);",
      "info" : "ReturnStatement[66489-66534]:ReturnStatement[66489-66534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66554-66626]:Block[66554-66626]"
    }, {
      "left" : "return field.getAsText(instant, locale);",
      "right" : "return field.getAsText(instant, locale);",
      "info" : "ReturnStatement[66572-66612]:ReturnStatement[66572-66612]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[66646-66653]:Modifier[66646-66653]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[66654-66660]:SimpleType[66654-66660]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[66661-66666]:SimpleName[66661-66666]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[66667-66690]:SingleVariableDeclaration[66667-66690]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[66692-66705]:SingleVariableDeclaration[66692-66705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66707-67121]:Block[66707-67121]"
    }, {
      "left" : "if (partial.isSupported(iFieldType))",
      "right" : "if (partial.isSupported(iFieldType))",
      "info" : "IfStatement[66721-67111]:IfStatement[66721-67111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66758-67057]:Block[66758-67057]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(partial.getChronology());",
      "right" : "DateTimeField field = iFieldType.getField(partial.getChronology());",
      "info" : "VariableDeclarationStatement[66776-66843]:VariableDeclarationStatement[66776-66843]"
    }, {
      "left" : "if (iShort)",
      "right" : "if (iShort)",
      "info" : "IfStatement[66860-67043]:IfStatement[66860-67043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66872-66957]:Block[66872-66957]"
    }, {
      "left" : "return field.getAsShortText(partial, locale);",
      "right" : "return field.getAsShortText(partial, locale);",
      "info" : "ReturnStatement[66894-66939]:ReturnStatement[66894-66939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66963-67043]:Block[66963-67043]"
    }, {
      "left" : "return field.getAsText(partial, locale);",
      "right" : "return field.getAsText(partial, locale);",
      "info" : "ReturnStatement[66985-67025]:ReturnStatement[66985-67025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67063-67111]:Block[67063-67111]"
    }, {
      "left" : "return \"\\ufffd\";",
      "right" : "return \"\\ufffd\";",
      "info" : "ReturnStatement[67081-67097]:ReturnStatement[67081-67097]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67131-67137]:Modifier[67131-67137]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[67138-67141]:PrimitiveType[67138-67141]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[67142-67162]:SimpleName[67142-67162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67165-67220]:Block[67165-67220]"
    }, {
      "left" : "return estimatePrintedLength();",
      "right" : "return estimatePrintedLength();",
      "info" : "ReturnStatement[67179-67210]:ReturnStatement[67179-67210]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[67230-67260]:SingleMemberAnnotation[67230-67260]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67269-67275]:Modifier[67269-67275]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[67276-67279]:PrimitiveType[67276-67279]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[67280-67289]:SimpleName[67280-67289]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[67290-67317]:SingleVariableDeclaration[67290-67317]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[67319-67330]:SingleVariableDeclaration[67319-67330]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[67332-67344]:SingleVariableDeclaration[67332-67344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67346-70415]:Block[67346-70415]"
    }, {
      "left" : "Locale locale = bucket.getLocale();",
      "right" : "Locale locale = bucket.getLocale();",
      "info" : "VariableDeclarationStatement[67360-67395]:VariableDeclarationStatement[67360-67395]"
    }, {
      "left" : "Set<String> validValues = null;",
      "right" : "Set<String> validValues = null;",
      "info" : "VariableDeclarationStatement[67513-67544]:VariableDeclarationStatement[67513-67544]"
    }, {
      "left" : "int maxLength = 0;",
      "right" : "int maxLength = 0;",
      "info" : "VariableDeclarationStatement[67557-67575]:VariableDeclarationStatement[67557-67575]"
    }, {
      "left" : "synchronized (cParseCache) {\n                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);\n                if (innerMap == null) {\n                    innerMap = new HashMap<DateTimeFieldType, Object[]>();\n                    cParseCache.put(locale, innerMap);\n                }\n                Object[] array = innerMap.get(iFieldType);\n                if (array == null) {\n                    validValues = new HashSet<String>(32);\n                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);\n                    Property property = dt.property(iFieldType);\n                    int min = property.getMinimumValueOverall();\n                    int max = property.getMaximumValueOverall();\n                    if (max - min > 32) {  // protect against invalid fields\n                        return ~position;\n                    }\n                    maxLength = property.getMaximumTextLength(locale);\n                    for (int i = min; i <= max; i++) {\n                        property.set(i);\n                        validValues.add(property.getAsShortText(locale));\n                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));\n                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));\n                        validValues.add(property.getAsText(locale));\n                        validValues.add(property.getAsText(locale).toLowerCase(locale));\n                        validValues.add(property.getAsText(locale).toUpperCase(locale));\n                    }\n                    if (\"en\".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {\n                        // hack to support for parsing \"BCE\" and \"CE\" if the language is English\n                        validValues.add(\"BCE\");\n                        validValues.add(\"bce\");\n                        validValues.add(\"CE\");\n                        validValues.add(\"ce\");\n                        maxLength = 3;\n                    }\n                    array = new Object[] {validValues, Integer.valueOf(maxLength)};\n                    innerMap.put(iFieldType, array);\n                } else {\n                    validValues = (Set<String>) array[0];\n                    maxLength = ((Integer) array[1]).intValue();\n                }\n            }",
      "right" : "synchronized (cParseCache) {\n                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);\n                if (innerMap == null) {\n                    innerMap = new HashMap<DateTimeFieldType, Object[]>();\n                    cParseCache.put(locale, innerMap);\n                }\n                Object[] array = innerMap.get(iFieldType);\n                if (array == null) {\n                    validValues = new HashSet<String>(32);\n                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);\n                    Property property = dt.property(iFieldType);\n                    int min = property.getMinimumValueOverall();\n                    int max = property.getMaximumValueOverall();\n                    if (max - min > 32) {  // protect against invalid fields\n                        return ~position;\n                    }\n                    maxLength = property.getMaximumTextLength(locale);\n                    for (int i = min; i <= max; i++) {\n                        property.set(i);\n                        validValues.add(property.getAsShortText(locale));\n                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));\n                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));\n                        validValues.add(property.getAsText(locale));\n                        validValues.add(property.getAsText(locale).toLowerCase(locale));\n                        validValues.add(property.getAsText(locale).toUpperCase(locale));\n                    }\n                    if (\"en\".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {\n                        // hack to support for parsing \"BCE\" and \"CE\" if the language is English\n                        validValues.add(\"BCE\");\n                        validValues.add(\"bce\");\n                        validValues.add(\"CE\");\n                        validValues.add(\"ce\");\n                        maxLength = 3;\n                    }\n                    array = new Object[] {validValues, Integer.valueOf(maxLength)};\n                    innerMap.put(iFieldType, array);\n                } else {\n                    validValues = (Set<String>) array[0];\n                    maxLength = ((Integer) array[1]).intValue();\n                }\n            }",
      "info" : "SynchronizedStatement[67588-69929]:SynchronizedStatement[67588-69929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67615-69929]:Block[67615-69929]"
    }, {
      "left" : "Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",
      "right" : "Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",
      "info" : "VariableDeclarationStatement[67633-67701]:VariableDeclarationStatement[67633-67701]"
    }, {
      "left" : "if (innerMap == null)",
      "right" : "if (innerMap == null)",
      "info" : "IfStatement[67718-67889]:IfStatement[67718-67889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67740-67889]:Block[67740-67889]"
    }, {
      "left" : "innerMap = new HashMap<DateTimeFieldType, Object[]>();",
      "right" : "innerMap = new HashMap<DateTimeFieldType, Object[]>();",
      "info" : "ExpressionStatement[67762-67816]:ExpressionStatement[67762-67816]"
    }, {
      "left" : "cParseCache.put(locale, innerMap);",
      "right" : "cParseCache.put(locale, innerMap);",
      "info" : "ExpressionStatement[67837-67871]:ExpressionStatement[67837-67871]"
    }, {
      "left" : "Object[] array = innerMap.get(iFieldType);",
      "right" : "Object[] array = innerMap.get(iFieldType);",
      "info" : "VariableDeclarationStatement[67906-67948]:VariableDeclarationStatement[67906-67948]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[67965-69915]:IfStatement[67965-69915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67984-69767]:Block[67984-69767]"
    }, {
      "left" : "validValues = new HashSet<String>(32);",
      "right" : "validValues = new HashSet<String>(32);",
      "info" : "ExpressionStatement[68006-68044]:ExpressionStatement[68006-68044]"
    }, {
      "left" : "MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",
      "right" : "MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",
      "info" : "VariableDeclarationStatement[68065-68128]:VariableDeclarationStatement[68065-68128]"
    }, {
      "left" : "Property property = dt.property(iFieldType);",
      "right" : "Property property = dt.property(iFieldType);",
      "info" : "VariableDeclarationStatement[68149-68193]:VariableDeclarationStatement[68149-68193]"
    }, {
      "left" : "int min = property.getMinimumValueOverall();",
      "right" : "int min = property.getMinimumValueOverall();",
      "info" : "VariableDeclarationStatement[68214-68258]:VariableDeclarationStatement[68214-68258]"
    }, {
      "left" : "int max = property.getMaximumValueOverall();",
      "right" : "int max = property.getMaximumValueOverall();",
      "info" : "VariableDeclarationStatement[68279-68323]:VariableDeclarationStatement[68279-68323]"
    }, {
      "left" : "if (max - min > 32)",
      "right" : "if (max - min > 32)",
      "info" : "IfStatement[68344-68464]:IfStatement[68344-68464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68364-68464]:Block[68364-68464]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[68425-68442]:ReturnStatement[68425-68442]"
    }, {
      "left" : "maxLength = property.getMaximumTextLength(locale);",
      "right" : "maxLength = property.getMaximumTextLength(locale);",
      "info" : "ExpressionStatement[68485-68535]:ExpressionStatement[68485-68535]"
    }, {
      "left" : "for (int i = min; i <= max; i++)",
      "right" : "for (int i = min; i <= max; i++)",
      "info" : "ForStatement[68556-69162]:ForStatement[68556-69162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68589-69162]:Block[68589-69162]"
    }, {
      "left" : "property.set(i);",
      "right" : "property.set(i);",
      "info" : "ExpressionStatement[68615-68631]:ExpressionStatement[68615-68631]"
    }, {
      "left" : "validValues.add(property.getAsShortText(locale));",
      "right" : "validValues.add(property.getAsShortText(locale));",
      "info" : "ExpressionStatement[68656-68705]:ExpressionStatement[68656-68705]"
    }, {
      "left" : "validValues.add(property.getAsShortText(locale).toLowerCase(locale));",
      "right" : "validValues.add(property.getAsShortText(locale).toLowerCase(locale));",
      "info" : "ExpressionStatement[68730-68799]:ExpressionStatement[68730-68799]"
    }, {
      "left" : "validValues.add(property.getAsShortText(locale).toUpperCase(locale));",
      "right" : "validValues.add(property.getAsShortText(locale).toUpperCase(locale));",
      "info" : "ExpressionStatement[68824-68893]:ExpressionStatement[68824-68893]"
    }, {
      "left" : "validValues.add(property.getAsText(locale));",
      "right" : "validValues.add(property.getAsText(locale));",
      "info" : "ExpressionStatement[68918-68962]:ExpressionStatement[68918-68962]"
    }, {
      "left" : "validValues.add(property.getAsText(locale).toLowerCase(locale));",
      "right" : "validValues.add(property.getAsText(locale).toLowerCase(locale));",
      "info" : "ExpressionStatement[68987-69051]:ExpressionStatement[68987-69051]"
    }, {
      "left" : "validValues.add(property.getAsText(locale).toUpperCase(locale));",
      "right" : "validValues.add(property.getAsText(locale).toUpperCase(locale));",
      "info" : "ExpressionStatement[69076-69140]:ExpressionStatement[69076-69140]"
    }, {
      "left" : "if (\"en\".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era())",
      "right" : "if (\"en\".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era())",
      "info" : "IfStatement[69183-69612]:IfStatement[69183-69612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69263-69612]:Block[69263-69612]"
    }, {
      "left" : "validValues.add(\"BCE\");",
      "right" : "validValues.add(\"BCE\");",
      "info" : "ExpressionStatement[69386-69409]:ExpressionStatement[69386-69409]"
    }, {
      "left" : "validValues.add(\"bce\");",
      "right" : "validValues.add(\"bce\");",
      "info" : "ExpressionStatement[69434-69457]:ExpressionStatement[69434-69457]"
    }, {
      "left" : "validValues.add(\"CE\");",
      "right" : "validValues.add(\"CE\");",
      "info" : "ExpressionStatement[69482-69504]:ExpressionStatement[69482-69504]"
    }, {
      "left" : "validValues.add(\"ce\");",
      "right" : "validValues.add(\"ce\");",
      "info" : "ExpressionStatement[69529-69551]:ExpressionStatement[69529-69551]"
    }, {
      "left" : "maxLength = 3;",
      "right" : "maxLength = 3;",
      "info" : "ExpressionStatement[69576-69590]:ExpressionStatement[69576-69590]"
    }, {
      "left" : "array = new Object[] {validValues, Integer.valueOf(maxLength)};",
      "right" : "array = new Object[] {validValues, Integer.valueOf(maxLength)};",
      "info" : "ExpressionStatement[69633-69696]:ExpressionStatement[69633-69696]"
    }, {
      "left" : "innerMap.put(iFieldType, array);",
      "right" : "innerMap.put(iFieldType, array);",
      "info" : "ExpressionStatement[69717-69749]:ExpressionStatement[69717-69749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69773-69915]:Block[69773-69915]"
    }, {
      "left" : "validValues = (Set<String>) array[0];",
      "right" : "validValues = (Set<String>) array[0];",
      "info" : "ExpressionStatement[69795-69832]:ExpressionStatement[69795-69832]"
    }, {
      "left" : "maxLength = ((Integer) array[1]).intValue();",
      "right" : "maxLength = ((Integer) array[1]).intValue();",
      "info" : "ExpressionStatement[69853-69897]:ExpressionStatement[69853-69897]"
    }, {
      "left" : "int limit = Math.min(text.length(), position + maxLength);",
      "right" : "int limit = Math.min(text.length(), position + maxLength);",
      "info" : "VariableDeclarationStatement[70026-70084]:VariableDeclarationStatement[70026-70084]"
    }, {
      "left" : "for (int i = limit; i > position; i--)",
      "right" : "for (int i = limit; i > position; i--)",
      "info" : "ForStatement[70097-70375]:ForStatement[70097-70375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70136-70375]:Block[70136-70375]"
    }, {
      "left" : "String match = text.substring(position, i);",
      "right" : "String match = text.substring(position, i);",
      "info" : "VariableDeclarationStatement[70154-70197]:VariableDeclarationStatement[70154-70197]"
    }, {
      "left" : "if (validValues.contains(match))",
      "right" : "if (validValues.contains(match))",
      "info" : "IfStatement[70214-70361]:IfStatement[70214-70361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70247-70361]:Block[70247-70361]"
    }, {
      "left" : "bucket.saveField(iFieldType, match, locale);",
      "right" : "bucket.saveField(iFieldType, match, locale);",
      "info" : "ExpressionStatement[70269-70313]:ExpressionStatement[70269-70313]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[70334-70343]:ReturnStatement[70334-70343]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[70388-70405]:ReturnStatement[70388-70405]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[70505-70511]:Modifier[70505-70511]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[70512-70517]:TYPE_DECLARATION_KIND[70512-70517]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[70518-70526]:SimpleName[70518-70526]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[70550-70565]:SimpleType[70550-70565]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[70567-70581]:SimpleType[70567-70581]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[70714-70723]:Modifier[70714-70723]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[70724-70732]:SimpleName[70724-70732]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[70733-70760]:SingleVariableDeclaration[70733-70760]"
    }, {
      "left" : "int minDigits",
      "right" : "int minDigits",
      "info" : "SingleVariableDeclaration[70762-70775]:SingleVariableDeclaration[70762-70775]"
    }, {
      "left" : "int maxDigits",
      "right" : "int maxDigits",
      "info" : "SingleVariableDeclaration[70777-70790]:SingleVariableDeclaration[70777-70790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70792-71061]:Block[70792-71061]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[70806-70814]:SuperConstructorInvocation[70806-70814]"
    }, {
      "left" : "iFieldType = fieldType;",
      "right" : "iFieldType = fieldType;",
      "info" : "ExpressionStatement[70827-70850]:ExpressionStatement[70827-70850]"
    }, {
      "left" : "if (maxDigits > 18)",
      "right" : "if (maxDigits > 18)",
      "info" : "IfStatement[70912-70979]:IfStatement[70912-70979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70932-70979]:Block[70932-70979]"
    }, {
      "left" : "maxDigits = 18;",
      "right" : "maxDigits = 18;",
      "info" : "ExpressionStatement[70950-70965]:ExpressionStatement[70950-70965]"
    }, {
      "left" : "iMinDigits = minDigits;",
      "right" : "iMinDigits = minDigits;",
      "info" : "ExpressionStatement[70992-71015]:ExpressionStatement[70992-71015]"
    }, {
      "left" : "iMaxDigits = maxDigits;",
      "right" : "iMaxDigits = maxDigits;",
      "info" : "ExpressionStatement[71028-71051]:ExpressionStatement[71028-71051]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71071-71077]:Modifier[71071-71077]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[71078-71081]:PrimitiveType[71078-71081]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[71082-71103]:SimpleName[71082-71103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71106-71148]:Block[71106-71148]"
    }, {
      "left" : "return iMaxDigits;",
      "right" : "return iMaxDigits;",
      "info" : "ReturnStatement[71120-71138]:ReturnStatement[71120-71138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71158-71164]:Modifier[71158-71164]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71165-71169]:PrimitiveType[71165-71169]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[71170-71177]:SimpleName[71170-71177]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[71195-71211]:SingleVariableDeclaration[71195-71211]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[71213-71225]:SingleVariableDeclaration[71213-71225]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[71227-71244]:SingleVariableDeclaration[71227-71244]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[71262-71279]:SingleVariableDeclaration[71262-71279]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[71281-71305]:SingleVariableDeclaration[71281-71305]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[71307-71320]:SingleVariableDeclaration[71307-71320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71322-71493]:Block[71322-71493]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[71336-71483]:TryStatement[71336-71483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71340-71408]:Block[71340-71408]"
    }, {
      "left" : "printTo(buf, null, instant, chrono);",
      "right" : "printTo(buf, null, instant, chrono);",
      "info" : "ExpressionStatement[71358-71394]:ExpressionStatement[71358-71394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71431-71483]:Block[71431-71483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71503-71509]:Modifier[71503-71509]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71510-71514]:PrimitiveType[71510-71514]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[71515-71522]:SimpleName[71515-71522]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[71540-71550]:SingleVariableDeclaration[71540-71550]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[71552-71564]:SingleVariableDeclaration[71552-71564]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[71566-71583]:SingleVariableDeclaration[71566-71583]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[71601-71618]:SingleVariableDeclaration[71601-71618]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[71620-71644]:SingleVariableDeclaration[71620-71644]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[71646-71659]:SingleVariableDeclaration[71646-71659]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[71668-71679]:SimpleType[71668-71679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71680-71740]:Block[71680-71740]"
    }, {
      "left" : "printTo(null, out, instant, chrono);",
      "right" : "printTo(null, out, instant, chrono);",
      "info" : "ExpressionStatement[71694-71730]:ExpressionStatement[71694-71730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[71750-71756]:Modifier[71750-71756]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71757-71761]:PrimitiveType[71757-71761]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[71762-71769]:SimpleName[71762-71769]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[71770-71786]:SingleVariableDeclaration[71770-71786]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[71788-71811]:SingleVariableDeclaration[71788-71811]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[71813-71826]:SingleVariableDeclaration[71813-71826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71828-72229]:Block[71828-72229]"
    }, {
      "left" : "long millis = partial.getChronology().set(partial, 0L);",
      "right" : "long millis = partial.getChronology().set(partial, 0L);",
      "info" : "VariableDeclarationStatement[71988-72043]:VariableDeclarationStatement[71988-72043]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[72056-72219]:TryStatement[72056-72219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72060-72144]:Block[72060-72144]"
    }, {
      "left" : "printTo(buf, null, millis, partial.getChronology());",
      "right" : "printTo(buf, null, millis, partial.getChronology());",
      "info" : "ExpressionStatement[72078-72130]:ExpressionStatement[72078-72130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72167-72219]:Block[72167-72219]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[72239-72245]:Modifier[72239-72245]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72246-72250]:PrimitiveType[72246-72250]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[72251-72258]:SimpleName[72251-72258]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[72259-72269]:SingleVariableDeclaration[72259-72269]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[72271-72294]:SingleVariableDeclaration[72271-72294]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[72296-72309]:SingleVariableDeclaration[72296-72309]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[72318-72329]:SimpleType[72318-72329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72330-72620]:Block[72330-72620]"
    }, {
      "left" : "long millis = partial.getChronology().set(partial, 0L);",
      "right" : "long millis = partial.getChronology().set(partial, 0L);",
      "info" : "VariableDeclarationStatement[72490-72545]:VariableDeclarationStatement[72490-72545]"
    }, {
      "left" : "printTo(null, out, millis, partial.getChronology());",
      "right" : "printTo(null, out, millis, partial.getChronology());",
      "info" : "ExpressionStatement[72558-72610]:ExpressionStatement[72558-72610]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[72630-72639]:Modifier[72630-72639]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72640-72644]:PrimitiveType[72640-72644]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[72645-72652]:SimpleName[72645-72652]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[72653-72669]:SingleVariableDeclaration[72653-72669]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[72671-72681]:SingleVariableDeclaration[72671-72681]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[72683-72695]:SingleVariableDeclaration[72683-72695]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[72697-72714]:SingleVariableDeclaration[72697-72714]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[72735-72746]:SimpleType[72735-72746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72755-75284]:Block[72755-75284]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(chrono);",
      "right" : "DateTimeField field = iFieldType.getField(chrono);",
      "info" : "VariableDeclarationStatement[72769-72819]:VariableDeclarationStatement[72769-72819]"
    }, {
      "left" : "int minDigits = iMinDigits;",
      "right" : "int minDigits = iMinDigits;",
      "info" : "VariableDeclarationStatement[72832-72859]:VariableDeclarationStatement[72832-72859]"
    }, {
      "left" : "long fraction;",
      "right" : "long fraction;",
      "info" : "VariableDeclarationStatement[72873-72887]:VariableDeclarationStatement[72873-72887]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[72900-73230]:TryStatement[72900-73230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72904-72972]:Block[72904-72972]"
    }, {
      "left" : "fraction = field.remainder(instant);",
      "right" : "fraction = field.remainder(instant);",
      "info" : "ExpressionStatement[72922-72958]:ExpressionStatement[72922-72958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73000-73230]:Block[73000-73230]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[73018-73192]:IfStatement[73018-73192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73035-73111]:Block[73035-73111]"
    }, {
      "left" : "appendUnknownString(buf, minDigits);",
      "right" : "appendUnknownString(buf, minDigits);",
      "info" : "ExpressionStatement[73057-73093]:ExpressionStatement[73057-73093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73117-73192]:Block[73117-73192]"
    }, {
      "left" : "printUnknownString(out, minDigits);",
      "right" : "printUnknownString(out, minDigits);",
      "info" : "ExpressionStatement[73139-73174]:ExpressionStatement[73139-73174]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73209-73216]:ReturnStatement[73209-73216]"
    }, {
      "left" : "if (fraction == 0)",
      "right" : "if (fraction == 0)",
      "info" : "IfStatement[73244-73599]:IfStatement[73244-73599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73263-73599]:Block[73263-73599]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[73281-73561]:IfStatement[73281-73561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73298-73427]:Block[73298-73427]"
    }, {
      "left" : "while (--minDigits >= 0)",
      "right" : "while (--minDigits >= 0)",
      "info" : "WhileStatement[73320-73409]:WhileStatement[73320-73409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73345-73409]:Block[73345-73409]"
    }, {
      "left" : "buf.append('0');",
      "right" : "buf.append('0');",
      "info" : "ExpressionStatement[73371-73387]:ExpressionStatement[73371-73387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73433-73561]:Block[73433-73561]"
    }, {
      "left" : "while (--minDigits >= 0)",
      "right" : "while (--minDigits >= 0)",
      "info" : "WhileStatement[73455-73543]:WhileStatement[73455-73543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73480-73543]:Block[73480-73543]"
    }, {
      "left" : "out.write('0');",
      "right" : "out.write('0');",
      "info" : "ExpressionStatement[73506-73521]:ExpressionStatement[73506-73521]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73578-73585]:ReturnStatement[73578-73585]"
    }, {
      "left" : "String str;",
      "right" : "String str;",
      "info" : "VariableDeclarationStatement[73613-73624]:VariableDeclarationStatement[73613-73624]"
    }, {
      "left" : "long[] fractionData = getFractionData(fraction, field);",
      "right" : "long[] fractionData = getFractionData(fraction, field);",
      "info" : "VariableDeclarationStatement[73637-73692]:VariableDeclarationStatement[73637-73692]"
    }, {
      "left" : "long scaled = fractionData[0];",
      "right" : "long scaled = fractionData[0];",
      "info" : "VariableDeclarationStatement[73705-73735]:VariableDeclarationStatement[73705-73735]"
    }, {
      "left" : "int maxDigits = (int) fractionData[1];",
      "right" : "int maxDigits = (int) fractionData[1];",
      "info" : "VariableDeclarationStatement[73748-73786]:VariableDeclarationStatement[73748-73786]"
    }, {
      "left" : "if ((scaled & 0x7fffffff) == scaled)",
      "right" : "if ((scaled & 0x7fffffff) == scaled)",
      "info" : "IfStatement[73812-73984]:IfStatement[73812-73984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73849-73918]:Block[73849-73918]"
    }, {
      "left" : "str = Integer.toString((int) scaled);",
      "right" : "str = Integer.toString((int) scaled);",
      "info" : "ExpressionStatement[73867-73904]:ExpressionStatement[73867-73904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73924-73984]:Block[73924-73984]"
    }, {
      "left" : "str = Long.toString(scaled);",
      "right" : "str = Long.toString(scaled);",
      "info" : "ExpressionStatement[73942-73970]:ExpressionStatement[73942-73970]"
    }, {
      "left" : "int length = str.length();",
      "right" : "int length = str.length();",
      "info" : "VariableDeclarationStatement[73998-74024]:VariableDeclarationStatement[73998-74024]"
    }, {
      "left" : "int digits = maxDigits;",
      "right" : "int digits = maxDigits;",
      "info" : "VariableDeclarationStatement[74037-74060]:VariableDeclarationStatement[74037-74060]"
    }, {
      "left" : "while (length < digits)",
      "right" : "while (length < digits)",
      "info" : "WhileStatement[74073-74318]:WhileStatement[74073-74318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74097-74318]:Block[74097-74318]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[74115-74249]:IfStatement[74115-74249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74132-74188]:Block[74132-74188]"
    }, {
      "left" : "buf.append('0');",
      "right" : "buf.append('0');",
      "info" : "ExpressionStatement[74154-74170]:ExpressionStatement[74154-74170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74194-74249]:Block[74194-74249]"
    }, {
      "left" : "out.write('0');",
      "right" : "out.write('0');",
      "info" : "ExpressionStatement[74216-74231]:ExpressionStatement[74216-74231]"
    }, {
      "left" : "minDigits--;",
      "right" : "minDigits--;",
      "info" : "ExpressionStatement[74266-74278]:ExpressionStatement[74266-74278]"
    }, {
      "left" : "digits--;",
      "right" : "digits--;",
      "info" : "ExpressionStatement[74295-74304]:ExpressionStatement[74295-74304]"
    }, {
      "left" : "if (minDigits < digits)",
      "right" : "if (minDigits < digits)",
      "info" : "IfStatement[74332-75142]:IfStatement[74332-75142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74356-75142]:Block[74356-75142]"
    }, {
      "left" : "while (minDigits < digits)",
      "right" : "while (minDigits < digits)",
      "info" : "WhileStatement[74445-74676]:WhileStatement[74445-74676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74472-74676]:Block[74472-74676]"
    }, {
      "left" : "if (length <= 1 || str.charAt(length - 1) != '0')",
      "right" : "if (length <= 1 || str.charAt(length - 1) != '0')",
      "info" : "IfStatement[74494-74598]:IfStatement[74494-74598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74544-74598]:Block[74544-74598]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[74570-74576]:BreakStatement[74570-74576]"
    }, {
      "left" : "digits--;",
      "right" : "digits--;",
      "info" : "ExpressionStatement[74619-74628]:ExpressionStatement[74619-74628]"
    }, {
      "left" : "length--;",
      "right" : "length--;",
      "info" : "ExpressionStatement[74649-74658]:ExpressionStatement[74649-74658]"
    }, {
      "left" : "if (length < str.length())",
      "right" : "if (length < str.length())",
      "info" : "IfStatement[74693-75128]:IfStatement[74693-75128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74720-75128]:Block[74720-75128]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[74742-75082]:IfStatement[74742-75082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74759-74918]:Block[74759-74918]"
    }, {
      "left" : "for (int i=0; i<length; i++)",
      "right" : "for (int i=0; i<length; i++)",
      "info" : "ForStatement[74785-74896]:ForStatement[74785-74896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74814-74896]:Block[74814-74896]"
    }, {
      "left" : "buf.append(str.charAt(i));",
      "right" : "buf.append(str.charAt(i));",
      "info" : "ExpressionStatement[74844-74870]:ExpressionStatement[74844-74870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74924-75082]:Block[74924-75082]"
    }, {
      "left" : "for (int i=0; i<length; i++)",
      "right" : "for (int i=0; i<length; i++)",
      "info" : "ForStatement[74950-75060]:ForStatement[74950-75060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74979-75060]:Block[74979-75060]"
    }, {
      "left" : "out.write(str.charAt(i));",
      "right" : "out.write(str.charAt(i));",
      "info" : "ExpressionStatement[75009-75034]:ExpressionStatement[75009-75034]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75103-75110]:ReturnStatement[75103-75110]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[75156-75274]:IfStatement[75156-75274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75173-75221]:Block[75173-75221]"
    }, {
      "left" : "buf.append(str);",
      "right" : "buf.append(str);",
      "info" : "ExpressionStatement[75191-75207]:ExpressionStatement[75191-75207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75227-75274]:Block[75227-75274]"
    }, {
      "left" : "out.write(str);",
      "right" : "out.write(str);",
      "info" : "ExpressionStatement[75245-75260]:ExpressionStatement[75245-75260]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75302-75309]:Modifier[75302-75309]"
    }, {
      "left" : "long[]",
      "right" : "long[]",
      "info" : "ArrayType[75310-75316]:ArrayType[75310-75316]"
    }, {
      "left" : "getFractionData",
      "right" : "getFractionData",
      "info" : "SimpleName[75317-75332]:SimpleName[75317-75332]"
    }, {
      "left" : "long fraction",
      "right" : "long fraction",
      "info" : "SingleVariableDeclaration[75333-75346]:SingleVariableDeclaration[75333-75346]"
    }, {
      "left" : "DateTimeField field",
      "right" : "DateTimeField field",
      "info" : "SingleVariableDeclaration[75348-75367]:SingleVariableDeclaration[75348-75367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75369-76918]:Block[75369-76918]"
    }, {
      "left" : "long rangeMillis = field.getDurationField().getUnitMillis();",
      "right" : "long rangeMillis = field.getDurationField().getUnitMillis();",
      "info" : "VariableDeclarationStatement[75383-75443]:VariableDeclarationStatement[75383-75443]"
    }, {
      "left" : "long scalar;",
      "right" : "long scalar;",
      "info" : "VariableDeclarationStatement[75456-75468]:VariableDeclarationStatement[75456-75468]"
    }, {
      "left" : "int maxDigits = iMaxDigits;",
      "right" : "int maxDigits = iMaxDigits;",
      "info" : "VariableDeclarationStatement[75481-75508]:VariableDeclarationStatement[75481-75508]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[75521-76819]:WhileStatement[75521-76819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75534-76819]:Block[75534-76819]"
    }, {
      "left" : "switch (maxDigits) {\n                default: scalar = 1L; break;\n                case 1:  scalar = 10L; break;\n                case 2:  scalar = 100L; break;\n                case 3:  scalar = 1000L; break;\n                case 4:  scalar = 10000L; break;\n                case 5:  scalar = 100000L; break;\n                case 6:  scalar = 1000000L; break;\n                case 7:  scalar = 10000000L; break;\n                case 8:  scalar = 100000000L; break;\n                case 9:  scalar = 1000000000L; break;\n                case 10: scalar = 10000000000L; break;\n                case 11: scalar = 100000000000L; break;\n                case 12: scalar = 1000000000000L; break;\n                case 13: scalar = 10000000000000L; break;\n                case 14: scalar = 100000000000000L; break;\n                case 15: scalar = 1000000000000000L; break;\n                case 16: scalar = 10000000000000000L; break;\n                case 17: scalar = 100000000000000000L; break;\n                case 18: scalar = 1000000000000000000L; break;\n                }",
      "right" : "switch (maxDigits) {\n                default: scalar = 1L; break;\n                case 1:  scalar = 10L; break;\n                case 2:  scalar = 100L; break;\n                case 3:  scalar = 1000L; break;\n                case 4:  scalar = 10000L; break;\n                case 5:  scalar = 100000L; break;\n                case 6:  scalar = 1000000L; break;\n                case 7:  scalar = 10000000L; break;\n                case 8:  scalar = 100000000L; break;\n                case 9:  scalar = 1000000000L; break;\n                case 10: scalar = 10000000000L; break;\n                case 11: scalar = 100000000000L; break;\n                case 12: scalar = 1000000000000L; break;\n                case 13: scalar = 10000000000000L; break;\n                case 14: scalar = 100000000000000L; break;\n                case 15: scalar = 1000000000000000L; break;\n                case 16: scalar = 10000000000000000L; break;\n                case 17: scalar = 100000000000000000L; break;\n                case 18: scalar = 1000000000000000000L; break;\n                }",
      "info" : "SwitchStatement[75552-76616]:SwitchStatement[75552-76616]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[75589-75597]:SwitchCase[75589-75597]"
    }, {
      "left" : "scalar = 1L;",
      "right" : "scalar = 1L;",
      "info" : "ExpressionStatement[75598-75610]:ExpressionStatement[75598-75610]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75611-75617]:BreakStatement[75611-75617]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[75634-75641]:SwitchCase[75634-75641]"
    }, {
      "left" : "scalar = 10L;",
      "right" : "scalar = 10L;",
      "info" : "ExpressionStatement[75643-75656]:ExpressionStatement[75643-75656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75657-75663]:BreakStatement[75657-75663]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[75680-75687]:SwitchCase[75680-75687]"
    }, {
      "left" : "scalar = 100L;",
      "right" : "scalar = 100L;",
      "info" : "ExpressionStatement[75689-75703]:ExpressionStatement[75689-75703]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75704-75710]:BreakStatement[75704-75710]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[75727-75734]:SwitchCase[75727-75734]"
    }, {
      "left" : "scalar = 1000L;",
      "right" : "scalar = 1000L;",
      "info" : "ExpressionStatement[75736-75751]:ExpressionStatement[75736-75751]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75752-75758]:BreakStatement[75752-75758]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[75775-75782]:SwitchCase[75775-75782]"
    }, {
      "left" : "scalar = 10000L;",
      "right" : "scalar = 10000L;",
      "info" : "ExpressionStatement[75784-75800]:ExpressionStatement[75784-75800]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75801-75807]:BreakStatement[75801-75807]"
    }, {
      "left" : "case 5:",
      "right" : "case 5:",
      "info" : "SwitchCase[75824-75831]:SwitchCase[75824-75831]"
    }, {
      "left" : "scalar = 100000L;",
      "right" : "scalar = 100000L;",
      "info" : "ExpressionStatement[75833-75850]:ExpressionStatement[75833-75850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75851-75857]:BreakStatement[75851-75857]"
    }, {
      "left" : "case 6:",
      "right" : "case 6:",
      "info" : "SwitchCase[75874-75881]:SwitchCase[75874-75881]"
    }, {
      "left" : "scalar = 1000000L;",
      "right" : "scalar = 1000000L;",
      "info" : "ExpressionStatement[75883-75901]:ExpressionStatement[75883-75901]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75902-75908]:BreakStatement[75902-75908]"
    }, {
      "left" : "case 7:",
      "right" : "case 7:",
      "info" : "SwitchCase[75925-75932]:SwitchCase[75925-75932]"
    }, {
      "left" : "scalar = 10000000L;",
      "right" : "scalar = 10000000L;",
      "info" : "ExpressionStatement[75934-75953]:ExpressionStatement[75934-75953]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[75954-75960]:BreakStatement[75954-75960]"
    }, {
      "left" : "case 8:",
      "right" : "case 8:",
      "info" : "SwitchCase[75977-75984]:SwitchCase[75977-75984]"
    }, {
      "left" : "scalar = 100000000L;",
      "right" : "scalar = 100000000L;",
      "info" : "ExpressionStatement[75986-76006]:ExpressionStatement[75986-76006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76007-76013]:BreakStatement[76007-76013]"
    }, {
      "left" : "case 9:",
      "right" : "case 9:",
      "info" : "SwitchCase[76030-76037]:SwitchCase[76030-76037]"
    }, {
      "left" : "scalar = 1000000000L;",
      "right" : "scalar = 1000000000L;",
      "info" : "ExpressionStatement[76039-76060]:ExpressionStatement[76039-76060]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76061-76067]:BreakStatement[76061-76067]"
    }, {
      "left" : "case 10:",
      "right" : "case 10:",
      "info" : "SwitchCase[76084-76092]:SwitchCase[76084-76092]"
    }, {
      "left" : "scalar = 10000000000L;",
      "right" : "scalar = 10000000000L;",
      "info" : "ExpressionStatement[76093-76115]:ExpressionStatement[76093-76115]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76116-76122]:BreakStatement[76116-76122]"
    }, {
      "left" : "case 11:",
      "right" : "case 11:",
      "info" : "SwitchCase[76139-76147]:SwitchCase[76139-76147]"
    }, {
      "left" : "scalar = 100000000000L;",
      "right" : "scalar = 100000000000L;",
      "info" : "ExpressionStatement[76148-76171]:ExpressionStatement[76148-76171]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76172-76178]:BreakStatement[76172-76178]"
    }, {
      "left" : "case 12:",
      "right" : "case 12:",
      "info" : "SwitchCase[76195-76203]:SwitchCase[76195-76203]"
    }, {
      "left" : "scalar = 1000000000000L;",
      "right" : "scalar = 1000000000000L;",
      "info" : "ExpressionStatement[76204-76228]:ExpressionStatement[76204-76228]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76229-76235]:BreakStatement[76229-76235]"
    }, {
      "left" : "case 13:",
      "right" : "case 13:",
      "info" : "SwitchCase[76252-76260]:SwitchCase[76252-76260]"
    }, {
      "left" : "scalar = 10000000000000L;",
      "right" : "scalar = 10000000000000L;",
      "info" : "ExpressionStatement[76261-76286]:ExpressionStatement[76261-76286]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76287-76293]:BreakStatement[76287-76293]"
    }, {
      "left" : "case 14:",
      "right" : "case 14:",
      "info" : "SwitchCase[76310-76318]:SwitchCase[76310-76318]"
    }, {
      "left" : "scalar = 100000000000000L;",
      "right" : "scalar = 100000000000000L;",
      "info" : "ExpressionStatement[76319-76345]:ExpressionStatement[76319-76345]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76346-76352]:BreakStatement[76346-76352]"
    }, {
      "left" : "case 15:",
      "right" : "case 15:",
      "info" : "SwitchCase[76369-76377]:SwitchCase[76369-76377]"
    }, {
      "left" : "scalar = 1000000000000000L;",
      "right" : "scalar = 1000000000000000L;",
      "info" : "ExpressionStatement[76378-76405]:ExpressionStatement[76378-76405]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76406-76412]:BreakStatement[76406-76412]"
    }, {
      "left" : "case 16:",
      "right" : "case 16:",
      "info" : "SwitchCase[76429-76437]:SwitchCase[76429-76437]"
    }, {
      "left" : "scalar = 10000000000000000L;",
      "right" : "scalar = 10000000000000000L;",
      "info" : "ExpressionStatement[76438-76466]:ExpressionStatement[76438-76466]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76467-76473]:BreakStatement[76467-76473]"
    }, {
      "left" : "case 17:",
      "right" : "case 17:",
      "info" : "SwitchCase[76490-76498]:SwitchCase[76490-76498]"
    }, {
      "left" : "scalar = 100000000000000000L;",
      "right" : "scalar = 100000000000000000L;",
      "info" : "ExpressionStatement[76499-76528]:ExpressionStatement[76499-76528]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76529-76535]:BreakStatement[76529-76535]"
    }, {
      "left" : "case 18:",
      "right" : "case 18:",
      "info" : "SwitchCase[76552-76560]:SwitchCase[76552-76560]"
    }, {
      "left" : "scalar = 1000000000000000000L;",
      "right" : "scalar = 1000000000000000000L;",
      "info" : "ExpressionStatement[76561-76591]:ExpressionStatement[76561-76591]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76592-76598]:BreakStatement[76592-76598]"
    }, {
      "left" : "if (((rangeMillis * scalar) / scalar) == rangeMillis)",
      "right" : "if (((rangeMillis * scalar) / scalar) == rangeMillis)",
      "info" : "IfStatement[76633-76733]:IfStatement[76633-76733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76687-76733]:Block[76687-76733]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[76709-76715]:BreakStatement[76709-76715]"
    }, {
      "left" : "maxDigits--;",
      "right" : "maxDigits--;",
      "info" : "ExpressionStatement[76793-76805]:ExpressionStatement[76793-76805]"
    }, {
      "left" : "return new long[] {fraction * scalar / rangeMillis, maxDigits};",
      "right" : "return new long[] {fraction * scalar / rangeMillis, maxDigits};",
      "info" : "ReturnStatement[76845-76908]:ReturnStatement[76845-76908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76928-76934]:Modifier[76928-76934]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[76935-76938]:PrimitiveType[76935-76938]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[76939-76959]:SimpleName[76939-76959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76962-77004]:Block[76962-77004]"
    }, {
      "left" : "return iMaxDigits;",
      "right" : "return iMaxDigits;",
      "info" : "ReturnStatement[76976-76994]:ReturnStatement[76976-76994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77014-77020]:Modifier[77014-77020]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[77021-77024]:PrimitiveType[77021-77024]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[77025-77034]:SimpleName[77025-77034]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[77035-77062]:SingleVariableDeclaration[77035-77062]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[77064-77075]:SingleVariableDeclaration[77064-77075]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[77077-77089]:SingleVariableDeclaration[77077-77089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77091-78213]:Block[77091-78213]"
    }, {
      "left" : "DateTimeField field = iFieldType.getField(bucket.getChronology());",
      "right" : "DateTimeField field = iFieldType.getField(bucket.getChronology());",
      "info" : "VariableDeclarationStatement[77105-77171]:VariableDeclarationStatement[77105-77171]"
    }, {
      "left" : "int limit = Math.min(iMaxDigits, text.length() - position);",
      "right" : "int limit = Math.min(iMaxDigits, text.length() - position);",
      "info" : "VariableDeclarationStatement[77197-77256]:VariableDeclarationStatement[77197-77256]"
    }, {
      "left" : "long value = 0;",
      "right" : "long value = 0;",
      "info" : "VariableDeclarationStatement[77270-77285]:VariableDeclarationStatement[77270-77285]"
    }, {
      "left" : "long n = field.getDurationField().getUnitMillis() * 10;",
      "right" : "long n = field.getDurationField().getUnitMillis() * 10;",
      "info" : "VariableDeclarationStatement[77298-77353]:VariableDeclarationStatement[77298-77353]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[77366-77381]:VariableDeclarationStatement[77366-77381]"
    }, {
      "left" : "while (length < limit)",
      "right" : "while (length < limit)",
      "info" : "WhileStatement[77394-77701]:WhileStatement[77394-77701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77417-77701]:Block[77417-77701]"
    }, {
      "left" : "char c = text.charAt(position + length);",
      "right" : "char c = text.charAt(position + length);",
      "info" : "VariableDeclarationStatement[77435-77475]:VariableDeclarationStatement[77435-77475]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[77492-77562]:IfStatement[77492-77562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77516-77562]:Block[77516-77562]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[77538-77544]:BreakStatement[77538-77544]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[77579-77588]:ExpressionStatement[77579-77588]"
    }, {
      "left" : "long nn = n / 10;",
      "right" : "long nn = n / 10;",
      "info" : "VariableDeclarationStatement[77605-77622]:VariableDeclarationStatement[77605-77622]"
    }, {
      "left" : "value += (c - '0') * nn;",
      "right" : "value += (c - '0') * nn;",
      "info" : "ExpressionStatement[77639-77663]:ExpressionStatement[77639-77663]"
    }, {
      "left" : "n = nn;",
      "right" : "n = nn;",
      "info" : "ExpressionStatement[77680-77687]:ExpressionStatement[77680-77687]"
    }, {
      "left" : "value /= 10;",
      "right" : "value /= 10;",
      "info" : "ExpressionStatement[77715-77727]:ExpressionStatement[77715-77727]"
    }, {
      "left" : "if (length == 0)",
      "right" : "if (length == 0)",
      "info" : "IfStatement[77741-77807]:IfStatement[77741-77807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77758-77807]:Block[77758-77807]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[77776-77793]:ReturnStatement[77776-77793]"
    }, {
      "left" : "if (value > Integer.MAX_VALUE)",
      "right" : "if (value > Integer.MAX_VALUE)",
      "info" : "IfStatement[77821-77901]:IfStatement[77821-77901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77852-77901]:Block[77852-77901]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[77870-77887]:ReturnStatement[77870-77887]"
    }, {
      "left" : "DateTimeField parseField = new PreciseDateTimeField(\n                DateTimeFieldType.millisOfSecond(),\n                MillisDurationField.INSTANCE,\n                field.getDurationField());",
      "right" : "DateTimeField parseField = new PreciseDateTimeField(\n                DateTimeFieldType.millisOfSecond(),\n                MillisDurationField.INSTANCE,\n                field.getDurationField());",
      "info" : "VariableDeclarationStatement[77915-78108]:VariableDeclarationStatement[77915-78108]"
    }, {
      "left" : "bucket.saveField(parseField, (int) value);",
      "right" : "bucket.saveField(parseField, (int) value);",
      "info" : "ExpressionStatement[78122-78164]:ExpressionStatement[78122-78164]"
    }, {
      "left" : "return position + length;",
      "right" : "return position + length;",
      "info" : "ReturnStatement[78178-78203]:ReturnStatement[78178-78203]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78303-78309]:Modifier[78303-78309]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[78310-78315]:TYPE_DECLARATION_KIND[78310-78315]"
    }, {
      "left" : "TimeZoneOffset",
      "right" : "TimeZoneOffset",
      "info" : "SimpleName[78316-78330]:SimpleName[78316-78330]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[78354-78369]:SimpleType[78354-78369]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[78371-78385]:SimpleType[78371-78385]"
    }, {
      "left" : "TimeZoneOffset",
      "right" : "TimeZoneOffset",
      "info" : "SimpleName[78623-78637]:SimpleName[78623-78637]"
    }, {
      "left" : "String zeroOffsetPrintText",
      "right" : "String zeroOffsetPrintText",
      "info" : "SingleVariableDeclaration[78638-78664]:SingleVariableDeclaration[78638-78664]"
    }, {
      "left" : "String zeroOffsetParseText",
      "right" : "String zeroOffsetParseText",
      "info" : "SingleVariableDeclaration[78666-78692]:SingleVariableDeclaration[78666-78692]"
    }, {
      "left" : "boolean showSeparators",
      "right" : "boolean showSeparators",
      "info" : "SingleVariableDeclaration[78726-78748]:SingleVariableDeclaration[78726-78748]"
    }, {
      "left" : "int minFields",
      "right" : "int minFields",
      "info" : "SingleVariableDeclaration[78782-78795]:SingleVariableDeclaration[78782-78795]"
    }, {
      "left" : "int maxFields",
      "right" : "int maxFields",
      "info" : "SingleVariableDeclaration[78797-78810]:SingleVariableDeclaration[78797-78810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78820-79318]:Block[78820-79318]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[78834-78842]:SuperConstructorInvocation[78834-78842]"
    }, {
      "left" : "iZeroOffsetPrintText = zeroOffsetPrintText;",
      "right" : "iZeroOffsetPrintText = zeroOffsetPrintText;",
      "info" : "ExpressionStatement[78855-78898]:ExpressionStatement[78855-78898]"
    }, {
      "left" : "iZeroOffsetParseText = zeroOffsetParseText;",
      "right" : "iZeroOffsetParseText = zeroOffsetParseText;",
      "info" : "ExpressionStatement[78911-78954]:ExpressionStatement[78911-78954]"
    }, {
      "left" : "iShowSeparators = showSeparators;",
      "right" : "iShowSeparators = showSeparators;",
      "info" : "ExpressionStatement[78967-79000]:ExpressionStatement[78967-79000]"
    }, {
      "left" : "if (minFields <= 0 || maxFields < minFields)",
      "right" : "if (minFields <= 0 || maxFields < minFields)",
      "info" : "IfStatement[79013-79127]:IfStatement[79013-79127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79058-79127]:Block[79058-79127]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[79076-79113]:ThrowStatement[79076-79113]"
    }, {
      "left" : "if (minFields > 4)",
      "right" : "if (minFields > 4)",
      "info" : "IfStatement[79140-79236]:IfStatement[79140-79236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79159-79236]:Block[79159-79236]"
    }, {
      "left" : "minFields = 4;",
      "right" : "minFields = 4;",
      "info" : "ExpressionStatement[79177-79191]:ExpressionStatement[79177-79191]"
    }, {
      "left" : "maxFields = 4;",
      "right" : "maxFields = 4;",
      "info" : "ExpressionStatement[79208-79222]:ExpressionStatement[79208-79222]"
    }, {
      "left" : "iMinFields = minFields;",
      "right" : "iMinFields = minFields;",
      "info" : "ExpressionStatement[79249-79272]:ExpressionStatement[79249-79272]"
    }, {
      "left" : "iMaxFields = maxFields;",
      "right" : "iMaxFields = maxFields;",
      "info" : "ExpressionStatement[79285-79308]:ExpressionStatement[79285-79308]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[79340-79346]:Modifier[79340-79346]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[79347-79350]:PrimitiveType[79347-79350]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[79351-79372]:SimpleName[79351-79372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79375-79695]:Block[79375-79695]"
    }, {
      "left" : "int est = 1 + iMinFields << 1;",
      "right" : "int est = 1 + iMinFields << 1;",
      "info" : "VariableDeclarationStatement[79389-79419]:VariableDeclarationStatement[79389-79419]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[79432-79507]:IfStatement[79432-79507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79453-79507]:Block[79453-79507]"
    }, {
      "left" : "est += iMinFields - 1;",
      "right" : "est += iMinFields - 1;",
      "info" : "ExpressionStatement[79471-79493]:ExpressionStatement[79471-79493]"
    }, {
      "left" : "if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est)",
      "right" : "if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est)",
      "info" : "IfStatement[79520-79661]:IfStatement[79520-79661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79593-79661]:Block[79593-79661]"
    }, {
      "left" : "est = iZeroOffsetPrintText.length();",
      "right" : "est = iZeroOffsetPrintText.length();",
      "info" : "ExpressionStatement[79611-79647]:ExpressionStatement[79611-79647]"
    }, {
      "left" : "return est;",
      "right" : "return est;",
      "info" : "ReturnStatement[79674-79685]:ReturnStatement[79674-79685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[79713-79719]:Modifier[79713-79719]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79720-79724]:PrimitiveType[79720-79724]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[79725-79732]:SimpleName[79725-79732]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[79750-79766]:SingleVariableDeclaration[79750-79766]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[79768-79780]:SingleVariableDeclaration[79768-79780]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[79782-79799]:SingleVariableDeclaration[79782-79799]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[79817-79834]:SingleVariableDeclaration[79817-79834]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[79836-79860]:SingleVariableDeclaration[79836-79860]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[79862-79875]:SingleVariableDeclaration[79862-79875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79877-81790]:Block[79877-81790]"
    }, {
      "left" : "if (displayZone == null)",
      "right" : "if (displayZone == null)",
      "info" : "IfStatement[79891-79967]:IfStatement[79891-79967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79916-79967]:Block[79916-79967]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[79934-79941]:ReturnStatement[79934-79941]"
    }, {
      "left" : "if (displayOffset == 0 && iZeroOffsetPrintText != null)",
      "right" : "if (displayOffset == 0 && iZeroOffsetPrintText != null)",
      "info" : "IfStatement[79980-80125]:IfStatement[79980-80125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80036-80125]:Block[80036-80125]"
    }, {
      "left" : "buf.append(iZeroOffsetPrintText);",
      "right" : "buf.append(iZeroOffsetPrintText);",
      "info" : "ExpressionStatement[80054-80087]:ExpressionStatement[80054-80087]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[80104-80111]:ReturnStatement[80104-80111]"
    }, {
      "left" : "if (displayOffset >= 0)",
      "right" : "if (displayOffset >= 0)",
      "info" : "IfStatement[80138-80312]:IfStatement[80138-80312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80162-80210]:Block[80162-80210]"
    }, {
      "left" : "buf.append('+');",
      "right" : "buf.append('+');",
      "info" : "ExpressionStatement[80180-80196]:ExpressionStatement[80180-80196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80216-80312]:Block[80216-80312]"
    }, {
      "left" : "buf.append('-');",
      "right" : "buf.append('-');",
      "info" : "ExpressionStatement[80234-80250]:ExpressionStatement[80234-80250]"
    }, {
      "left" : "displayOffset = -displayOffset;",
      "right" : "displayOffset = -displayOffset;",
      "info" : "ExpressionStatement[80267-80298]:ExpressionStatement[80267-80298]"
    }, {
      "left" : "int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[80326-80388]:VariableDeclarationStatement[80326-80388]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "info" : "ExpressionStatement[80401-80448]:ExpressionStatement[80401-80448]"
    }, {
      "left" : "if (iMaxFields == 1)",
      "right" : "if (iMaxFields == 1)",
      "info" : "IfStatement[80461-80521]:IfStatement[80461-80521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80482-80521]:Block[80482-80521]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[80500-80507]:ReturnStatement[80500-80507]"
    }, {
      "left" : "displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[80534-80598]:ExpressionStatement[80534-80598]"
    }, {
      "left" : "if (displayOffset == 0 && iMinFields <= 1)",
      "right" : "if (displayOffset == 0 && iMinFields <= 1)",
      "info" : "IfStatement[80611-80693]:IfStatement[80611-80693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80654-80693]:Block[80654-80693]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[80672-80679]:ReturnStatement[80672-80679]"
    }, {
      "left" : "int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "VariableDeclarationStatement[80707-80773]:VariableDeclarationStatement[80707-80773]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[80786-80855]:IfStatement[80786-80855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80807-80855]:Block[80807-80855]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[80825-80841]:ExpressionStatement[80825-80841]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "info" : "ExpressionStatement[80868-80917]:ExpressionStatement[80868-80917]"
    }, {
      "left" : "if (iMaxFields == 2)",
      "right" : "if (iMaxFields == 2)",
      "info" : "IfStatement[80930-80990]:IfStatement[80930-80990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80951-80990]:Block[80951-80990]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[80969-80976]:ReturnStatement[80969-80976]"
    }, {
      "left" : "displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[81003-81066]:ExpressionStatement[81003-81066]"
    }, {
      "left" : "if (displayOffset == 0 && iMinFields <= 2)",
      "right" : "if (displayOffset == 0 && iMinFields <= 2)",
      "info" : "IfStatement[81079-81161]:IfStatement[81079-81161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81122-81161]:Block[81122-81161]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[81140-81147]:ReturnStatement[81140-81147]"
    }, {
      "left" : "int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "VariableDeclarationStatement[81175-81241]:VariableDeclarationStatement[81175-81241]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[81254-81323]:IfStatement[81254-81323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81275-81323]:Block[81275-81323]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[81293-81309]:ExpressionStatement[81293-81309]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "info" : "ExpressionStatement[81336-81385]:ExpressionStatement[81336-81385]"
    }, {
      "left" : "if (iMaxFields == 3)",
      "right" : "if (iMaxFields == 3)",
      "info" : "IfStatement[81398-81458]:IfStatement[81398-81458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81419-81458]:Block[81419-81458]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[81437-81444]:ReturnStatement[81437-81444]"
    }, {
      "left" : "displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[81471-81534]:ExpressionStatement[81471-81534]"
    }, {
      "left" : "if (displayOffset == 0 && iMinFields <= 3)",
      "right" : "if (displayOffset == 0 && iMinFields <= 3)",
      "info" : "IfStatement[81547-81629]:IfStatement[81547-81629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81590-81629]:Block[81590-81629]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[81608-81615]:ReturnStatement[81608-81615]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[81643-81712]:IfStatement[81643-81712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81664-81712]:Block[81664-81712]"
    }, {
      "left" : "buf.append('.');",
      "right" : "buf.append('.');",
      "info" : "ExpressionStatement[81682-81698]:ExpressionStatement[81682-81698]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",
      "right" : "FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",
      "info" : "ExpressionStatement[81725-81780]:ExpressionStatement[81725-81780]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[81808-81814]:Modifier[81808-81814]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81815-81819]:PrimitiveType[81815-81819]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[81820-81827]:SimpleName[81820-81827]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[81845-81855]:SingleVariableDeclaration[81845-81855]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[81857-81869]:SingleVariableDeclaration[81857-81869]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[81871-81888]:SingleVariableDeclaration[81871-81888]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[81906-81923]:SingleVariableDeclaration[81906-81923]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[81925-81949]:SingleVariableDeclaration[81925-81949]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[81951-81964]:SingleVariableDeclaration[81951-81964]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[81973-81984]:SimpleType[81973-81984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81985-83888]:Block[81985-83888]"
    }, {
      "left" : "if (displayZone == null)",
      "right" : "if (displayZone == null)",
      "info" : "IfStatement[81999-82075]:IfStatement[81999-82075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82024-82075]:Block[82024-82075]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[82042-82049]:ReturnStatement[82042-82049]"
    }, {
      "left" : "if (displayOffset == 0 && iZeroOffsetPrintText != null)",
      "right" : "if (displayOffset == 0 && iZeroOffsetPrintText != null)",
      "info" : "IfStatement[82088-82232]:IfStatement[82088-82232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82144-82232]:Block[82144-82232]"
    }, {
      "left" : "out.write(iZeroOffsetPrintText);",
      "right" : "out.write(iZeroOffsetPrintText);",
      "info" : "ExpressionStatement[82162-82194]:ExpressionStatement[82162-82194]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[82211-82218]:ReturnStatement[82211-82218]"
    }, {
      "left" : "if (displayOffset >= 0)",
      "right" : "if (displayOffset >= 0)",
      "info" : "IfStatement[82245-82417]:IfStatement[82245-82417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82269-82316]:Block[82269-82316]"
    }, {
      "left" : "out.write('+');",
      "right" : "out.write('+');",
      "info" : "ExpressionStatement[82287-82302]:ExpressionStatement[82287-82302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82322-82417]:Block[82322-82417]"
    }, {
      "left" : "out.write('-');",
      "right" : "out.write('-');",
      "info" : "ExpressionStatement[82340-82355]:ExpressionStatement[82340-82355]"
    }, {
      "left" : "displayOffset = -displayOffset;",
      "right" : "displayOffset = -displayOffset;",
      "info" : "ExpressionStatement[82372-82403]:ExpressionStatement[82372-82403]"
    }, {
      "left" : "int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[82431-82493]:VariableDeclarationStatement[82431-82493]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, hours, 2);",
      "right" : "FormatUtils.writePaddedInteger(out, hours, 2);",
      "info" : "ExpressionStatement[82506-82552]:ExpressionStatement[82506-82552]"
    }, {
      "left" : "if (iMaxFields == 1)",
      "right" : "if (iMaxFields == 1)",
      "info" : "IfStatement[82565-82625]:IfStatement[82565-82625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82586-82625]:Block[82586-82625]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[82604-82611]:ReturnStatement[82604-82611]"
    }, {
      "left" : "displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[82638-82702]:ExpressionStatement[82638-82702]"
    }, {
      "left" : "if (displayOffset == 0 && iMinFields == 1)",
      "right" : "if (displayOffset == 0 && iMinFields == 1)",
      "info" : "IfStatement[82715-82797]:IfStatement[82715-82797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82758-82797]:Block[82758-82797]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[82776-82783]:ReturnStatement[82776-82783]"
    }, {
      "left" : "int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "VariableDeclarationStatement[82811-82877]:VariableDeclarationStatement[82811-82877]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[82890-82958]:IfStatement[82890-82958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82911-82958]:Block[82911-82958]"
    }, {
      "left" : "out.write(':');",
      "right" : "out.write(':');",
      "info" : "ExpressionStatement[82929-82944]:ExpressionStatement[82929-82944]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, minutes, 2);",
      "right" : "FormatUtils.writePaddedInteger(out, minutes, 2);",
      "info" : "ExpressionStatement[82971-83019]:ExpressionStatement[82971-83019]"
    }, {
      "left" : "if (iMaxFields == 2)",
      "right" : "if (iMaxFields == 2)",
      "info" : "IfStatement[83032-83092]:IfStatement[83032-83092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83053-83092]:Block[83053-83092]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83071-83078]:ReturnStatement[83071-83078]"
    }, {
      "left" : "displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[83105-83168]:ExpressionStatement[83105-83168]"
    }, {
      "left" : "if (displayOffset == 0 && iMinFields == 2)",
      "right" : "if (displayOffset == 0 && iMinFields == 2)",
      "info" : "IfStatement[83181-83263]:IfStatement[83181-83263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83224-83263]:Block[83224-83263]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83242-83249]:ReturnStatement[83242-83249]"
    }, {
      "left" : "int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "VariableDeclarationStatement[83277-83343]:VariableDeclarationStatement[83277-83343]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[83356-83424]:IfStatement[83356-83424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83377-83424]:Block[83377-83424]"
    }, {
      "left" : "out.write(':');",
      "right" : "out.write(':');",
      "info" : "ExpressionStatement[83395-83410]:ExpressionStatement[83395-83410]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, seconds, 2);",
      "right" : "FormatUtils.writePaddedInteger(out, seconds, 2);",
      "info" : "ExpressionStatement[83437-83485]:ExpressionStatement[83437-83485]"
    }, {
      "left" : "if (iMaxFields == 3)",
      "right" : "if (iMaxFields == 3)",
      "info" : "IfStatement[83498-83558]:IfStatement[83498-83558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83519-83558]:Block[83519-83558]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83537-83544]:ReturnStatement[83537-83544]"
    }, {
      "left" : "displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[83571-83634]:ExpressionStatement[83571-83634]"
    }, {
      "left" : "if (displayOffset == 0 && iMinFields == 3)",
      "right" : "if (displayOffset == 0 && iMinFields == 3)",
      "info" : "IfStatement[83647-83729]:IfStatement[83647-83729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83690-83729]:Block[83690-83729]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83708-83715]:ReturnStatement[83708-83715]"
    }, {
      "left" : "if (iShowSeparators)",
      "right" : "if (iShowSeparators)",
      "info" : "IfStatement[83743-83811]:IfStatement[83743-83811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83764-83811]:Block[83764-83811]"
    }, {
      "left" : "out.write('.');",
      "right" : "out.write('.');",
      "info" : "ExpressionStatement[83782-83797]:ExpressionStatement[83782-83797]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, displayOffset, 3);",
      "right" : "FormatUtils.writePaddedInteger(out, displayOffset, 3);",
      "info" : "ExpressionStatement[83824-83878]:ExpressionStatement[83824-83878]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[83898-83904]:Modifier[83898-83904]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[83905-83909]:PrimitiveType[83905-83909]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[83910-83917]:SimpleName[83910-83917]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[83918-83934]:SingleVariableDeclaration[83918-83934]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[83936-83959]:SingleVariableDeclaration[83936-83959]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[83961-83974]:SingleVariableDeclaration[83961-83974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83976-84015]:Block[83976-84015]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[84025-84031]:Modifier[84025-84031]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[84032-84036]:PrimitiveType[84032-84036]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[84037-84044]:SimpleName[84037-84044]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[84045-84055]:SingleVariableDeclaration[84045-84055]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[84057-84080]:SingleVariableDeclaration[84057-84080]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[84082-84095]:SingleVariableDeclaration[84082-84095]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[84104-84115]:SimpleType[84104-84115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84116-84155]:Block[84116-84155]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[84165-84171]:Modifier[84165-84171]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[84172-84175]:PrimitiveType[84172-84175]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[84176-84196]:SimpleName[84176-84196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84199-84254]:Block[84199-84254]"
    }, {
      "left" : "return estimatePrintedLength();",
      "right" : "return estimatePrintedLength();",
      "info" : "ReturnStatement[84213-84244]:ReturnStatement[84213-84244]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[84264-84270]:Modifier[84264-84270]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[84271-84274]:PrimitiveType[84271-84274]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[84275-84284]:SimpleName[84275-84284]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[84285-84312]:SingleVariableDeclaration[84285-84312]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[84314-84325]:SingleVariableDeclaration[84314-84325]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[84327-84339]:SingleVariableDeclaration[84327-84339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84341-89778]:Block[84341-89778]"
    }, {
      "left" : "int limit = text.length() - position;",
      "right" : "int limit = text.length() - position;",
      "info" : "VariableDeclarationStatement[84355-84392]:VariableDeclarationStatement[84355-84392]"
    }, {
      "left" : "zeroOffset:\n            if (iZeroOffsetParseText != null) {\n                if (iZeroOffsetParseText.length() == 0) {\n                    // Peek ahead, looking for sign character.\n                    if (limit > 0) {\n                        char c = text.charAt(position);\n                        if (c == '-' || c == '+') {\n                            break zeroOffset;\n                        }\n                    }\n                    bucket.setOffset(Integer.valueOf(0));\n                    return position;\n                }\n                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n                    bucket.setOffset(Integer.valueOf(0));\n                    return position + iZeroOffsetParseText.length();\n                }\n            }",
      "right" : "zeroOffset:\n            if (iZeroOffsetParseText != null) {\n                if (iZeroOffsetParseText.length() == 0) {\n                    // Peek ahead, looking for sign character.\n                    if (limit > 0) {\n                        char c = text.charAt(position);\n                        if (c == '-' || c == '+') {\n                            break zeroOffset;\n                        }\n                    }\n                    bucket.setOffset(Integer.valueOf(0));\n                    return position;\n                }\n                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {\n                    bucket.setOffset(Integer.valueOf(0));\n                    return position + iZeroOffsetParseText.length();\n                }\n            }",
      "info" : "LabeledStatement[84406-85211]:LabeledStatement[84406-85211]"
    }, {
      "left" : "if (iZeroOffsetParseText != null)",
      "right" : "if (iZeroOffsetParseText != null)",
      "info" : "IfStatement[84430-85211]:IfStatement[84430-85211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84464-85211]:Block[84464-85211]"
    }, {
      "left" : "if (iZeroOffsetParseText.length() == 0)",
      "right" : "if (iZeroOffsetParseText.length() == 0)",
      "info" : "IfStatement[84482-84938]:IfStatement[84482-84938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84522-84938]:Block[84522-84938]"
    }, {
      "left" : "if (limit > 0)",
      "right" : "if (limit > 0)",
      "info" : "IfStatement[84607-84825]:IfStatement[84607-84825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84622-84825]:Block[84622-84825]"
    }, {
      "left" : "char c = text.charAt(position);",
      "right" : "char c = text.charAt(position);",
      "info" : "VariableDeclarationStatement[84648-84679]:VariableDeclarationStatement[84648-84679]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[84704-84803]:IfStatement[84704-84803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84730-84803]:Block[84730-84803]"
    }, {
      "left" : "break zeroOffset;",
      "right" : "break zeroOffset;",
      "info" : "BreakStatement[84760-84777]:BreakStatement[84760-84777]"
    }, {
      "left" : "bucket.setOffset(Integer.valueOf(0));",
      "right" : "bucket.setOffset(Integer.valueOf(0));",
      "info" : "ExpressionStatement[84846-84883]:ExpressionStatement[84846-84883]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[84904-84920]:ReturnStatement[84904-84920]"
    }, {
      "left" : "if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length()))",
      "right" : "if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length()))",
      "info" : "IfStatement[84955-85197]:IfStatement[84955-85197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85051-85197]:Block[85051-85197]"
    }, {
      "left" : "bucket.setOffset(Integer.valueOf(0));",
      "right" : "bucket.setOffset(Integer.valueOf(0));",
      "info" : "ExpressionStatement[85073-85110]:ExpressionStatement[85073-85110]"
    }, {
      "left" : "return position + iZeroOffsetParseText.length();",
      "right" : "return position + iZeroOffsetParseText.length();",
      "info" : "ReturnStatement[85131-85179]:ReturnStatement[85131-85179]"
    }, {
      "left" : "if (limit <= 1)",
      "right" : "if (limit <= 1)",
      "info" : "IfStatement[85308-85373]:IfStatement[85308-85373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85324-85373]:Block[85324-85373]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[85342-85359]:ReturnStatement[85342-85359]"
    }, {
      "left" : "boolean negative;",
      "right" : "boolean negative;",
      "info" : "VariableDeclarationStatement[85387-85404]:VariableDeclarationStatement[85387-85404]"
    }, {
      "left" : "char c = text.charAt(position);",
      "right" : "char c = text.charAt(position);",
      "info" : "VariableDeclarationStatement[85417-85448]:VariableDeclarationStatement[85417-85448]"
    }, {
      "left" : "if (c == '-')",
      "right" : "if (c == '-')",
      "info" : "IfStatement[85461-85647]:IfStatement[85461-85647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85475-85523]:Block[85475-85523]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[85493-85509]:ExpressionStatement[85493-85509]"
    }, {
      "left" : "if (c == '+')",
      "right" : "if (c == '+')",
      "info" : "IfStatement[85529-85647]:IfStatement[85529-85647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85543-85592]:Block[85543-85592]"
    }, {
      "left" : "negative = false;",
      "right" : "negative = false;",
      "info" : "ExpressionStatement[85561-85578]:ExpressionStatement[85561-85578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85598-85647]:Block[85598-85647]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[85616-85633]:ReturnStatement[85616-85633]"
    }, {
      "left" : "limit--;",
      "right" : "limit--;",
      "info" : "ExpressionStatement[85661-85669]:ExpressionStatement[85661-85669]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[85682-85693]:ExpressionStatement[85682-85693]"
    }, {
      "left" : "if (digitCount(text, position, 2) < 2)",
      "right" : "if (digitCount(text, position, 2) < 2)",
      "info" : "IfStatement[85964-86097]:IfStatement[85964-86097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86003-86097]:Block[86003-86097]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[86066-86083]:ReturnStatement[86066-86083]"
    }, {
      "left" : "int offset;",
      "right" : "int offset;",
      "info" : "VariableDeclarationStatement[86111-86122]:VariableDeclarationStatement[86111-86122]"
    }, {
      "left" : "int hours = FormatUtils.parseTwoDigits(text, position);",
      "right" : "int hours = FormatUtils.parseTwoDigits(text, position);",
      "info" : "VariableDeclarationStatement[86136-86191]:VariableDeclarationStatement[86136-86191]"
    }, {
      "left" : "if (hours > 23)",
      "right" : "if (hours > 23)",
      "info" : "IfStatement[86204-86269]:IfStatement[86204-86269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86220-86269]:Block[86220-86269]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[86238-86255]:ReturnStatement[86238-86255]"
    }, {
      "left" : "offset = hours * DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "offset = hours * DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[86282-86333]:ExpressionStatement[86282-86333]"
    }, {
      "left" : "limit -= 2;",
      "right" : "limit -= 2;",
      "info" : "ExpressionStatement[86346-86357]:ExpressionStatement[86346-86357]"
    }, {
      "left" : "position += 2;",
      "right" : "position += 2;",
      "info" : "ExpressionStatement[86370-86384]:ExpressionStatement[86370-86384]"
    }, {
      "left" : "parse: {\n                // Need to decide now if separators are expected or parsing\n                // stops at hour field.\n\n                if (limit <= 0) {\n                    break parse;\n                }\n\n                boolean expectSeparators;\n                c = text.charAt(position);\n                if (c == ':') {\n                    expectSeparators = true;\n                    limit--;\n                    position++;\n                } else if (c >= '0' && c <= '9') {\n                    expectSeparators = false;\n                } else {\n                    break parse;\n                }\n\n                // Proceed to parse minutes.\n\n                int count = digitCount(text, position, 2);\n                if (count == 0 && !expectSeparators) {\n                    break parse;\n                } else if (count < 2) {\n                    // Need two digits for minute.\n                    return ~position;\n                }\n\n                int minutes = FormatUtils.parseTwoDigits(text, position);\n                if (minutes > 59) {\n                    return ~position;\n                }\n                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n                limit -= 2;\n                position += 2;\n\n                // Proceed to parse seconds.\n\n                if (limit <= 0) {\n                    break parse;\n                }\n\n                if (expectSeparators) {\n                    if (text.charAt(position) != ':') {\n                        break parse;\n                    }\n                    limit--;\n                    position++;\n                }\n\n                count = digitCount(text, position, 2);\n                if (count == 0 && !expectSeparators) {\n                    break parse;\n                } else if (count < 2) {\n                    // Need two digits for second.\n                    return ~position;\n                }\n\n                int seconds = FormatUtils.parseTwoDigits(text, position);\n                if (seconds > 59) {\n                    return ~position;\n                }\n                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;\n                limit -= 2;\n                position += 2;\n\n                // Proceed to parse fraction of second.\n\n                if (limit <= 0) {\n                    break parse;\n                }\n\n                if (expectSeparators) {\n                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {\n                        break parse;\n                    }\n                    limit--;\n                    position++;\n                }\n                \n                count = digitCount(text, position, 3);\n                if (count == 0 && !expectSeparators) {\n                    break parse;\n                } else if (count < 1) {\n                    // Need at least one digit for fraction of second.\n                    return ~position;\n                }\n\n                offset += (text.charAt(position++) - '0') * 100;\n                if (count > 1) {\n                    offset += (text.charAt(position++) - '0') * 10;\n                    if (count > 2) {\n                        offset += text.charAt(position++) - '0';\n                    }\n                }\n            }",
      "right" : "parse: {\n                // Need to decide now if separators are expected or parsing\n                // stops at hour field.\n\n                if (limit <= 0) {\n                    break parse;\n                }\n\n                boolean expectSeparators;\n                c = text.charAt(position);\n                if (c == ':') {\n                    expectSeparators = true;\n                    limit--;\n                    position++;\n                } else if (c >= '0' && c <= '9') {\n                    expectSeparators = false;\n                } else {\n                    break parse;\n                }\n\n                // Proceed to parse minutes.\n\n                int count = digitCount(text, position, 2);\n                if (count == 0 && !expectSeparators) {\n                    break parse;\n                } else if (count < 2) {\n                    // Need two digits for minute.\n                    return ~position;\n                }\n\n                int minutes = FormatUtils.parseTwoDigits(text, position);\n                if (minutes > 59) {\n                    return ~position;\n                }\n                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n                limit -= 2;\n                position += 2;\n\n                // Proceed to parse seconds.\n\n                if (limit <= 0) {\n                    break parse;\n                }\n\n                if (expectSeparators) {\n                    if (text.charAt(position) != ':') {\n                        break parse;\n                    }\n                    limit--;\n                    position++;\n                }\n\n                count = digitCount(text, position, 2);\n                if (count == 0 && !expectSeparators) {\n                    break parse;\n                } else if (count < 2) {\n                    // Need two digits for second.\n                    return ~position;\n                }\n\n                int seconds = FormatUtils.parseTwoDigits(text, position);\n                if (seconds > 59) {\n                    return ~position;\n                }\n                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;\n                limit -= 2;\n                position += 2;\n\n                // Proceed to parse fraction of second.\n\n                if (limit <= 0) {\n                    break parse;\n                }\n\n                if (expectSeparators) {\n                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {\n                        break parse;\n                    }\n                    limit--;\n                    position++;\n                }\n                \n                count = digitCount(text, position, 3);\n                if (count == 0 && !expectSeparators) {\n                    break parse;\n                } else if (count < 1) {\n                    // Need at least one digit for fraction of second.\n                    return ~position;\n                }\n\n                offset += (text.charAt(position++) - '0') * 100;\n                if (count > 1) {\n                    offset += (text.charAt(position++) - '0') * 10;\n                    if (count > 2) {\n                        offset += text.charAt(position++) - '0';\n                    }\n                }\n            }",
      "info" : "LabeledStatement[86398-89662]:LabeledStatement[86398-89662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86405-89662]:Block[86405-89662]"
    }, {
      "left" : "if (limit <= 0)",
      "right" : "if (limit <= 0)",
      "info" : "IfStatement[86540-86608]:IfStatement[86540-86608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86556-86608]:Block[86556-86608]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[86578-86590]:BreakStatement[86578-86590]"
    }, {
      "left" : "boolean expectSeparators;",
      "right" : "boolean expectSeparators;",
      "info" : "VariableDeclarationStatement[86626-86651]:VariableDeclarationStatement[86626-86651]"
    }, {
      "left" : "c = text.charAt(position);",
      "right" : "c = text.charAt(position);",
      "info" : "ExpressionStatement[86668-86694]:ExpressionStatement[86668-86694]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[86711-87005]:IfStatement[86711-87005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86725-86850]:Block[86725-86850]"
    }, {
      "left" : "expectSeparators = true;",
      "right" : "expectSeparators = true;",
      "info" : "ExpressionStatement[86747-86771]:ExpressionStatement[86747-86771]"
    }, {
      "left" : "limit--;",
      "right" : "limit--;",
      "info" : "ExpressionStatement[86792-86800]:ExpressionStatement[86792-86800]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[86821-86832]:ExpressionStatement[86821-86832]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[86856-87005]:IfStatement[86856-87005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86882-86947]:Block[86882-86947]"
    }, {
      "left" : "expectSeparators = false;",
      "right" : "expectSeparators = false;",
      "info" : "ExpressionStatement[86904-86929]:ExpressionStatement[86904-86929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86953-87005]:Block[86953-87005]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[86975-86987]:BreakStatement[86975-86987]"
    }, {
      "left" : "int count = digitCount(text, position, 2);",
      "right" : "int count = digitCount(text, position, 2);",
      "info" : "VariableDeclarationStatement[87069-87111]:VariableDeclarationStatement[87069-87111]"
    }, {
      "left" : "if (count == 0 && !expectSeparators)",
      "right" : "if (count == 0 && !expectSeparators)",
      "info" : "IfStatement[87128-87346]:IfStatement[87128-87346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87165-87217]:Block[87165-87217]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[87187-87199]:BreakStatement[87187-87199]"
    }, {
      "left" : "if (count < 2)",
      "right" : "if (count < 2)",
      "info" : "IfStatement[87223-87346]:IfStatement[87223-87346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87238-87346]:Block[87238-87346]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[87311-87328]:ReturnStatement[87311-87328]"
    }, {
      "left" : "int minutes = FormatUtils.parseTwoDigits(text, position);",
      "right" : "int minutes = FormatUtils.parseTwoDigits(text, position);",
      "info" : "VariableDeclarationStatement[87364-87421]:VariableDeclarationStatement[87364-87421]"
    }, {
      "left" : "if (minutes > 59)",
      "right" : "if (minutes > 59)",
      "info" : "IfStatement[87438-87513]:IfStatement[87438-87513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87456-87513]:Block[87456-87513]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[87478-87495]:ReturnStatement[87478-87495]"
    }, {
      "left" : "offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[87530-87586]:ExpressionStatement[87530-87586]"
    }, {
      "left" : "limit -= 2;",
      "right" : "limit -= 2;",
      "info" : "ExpressionStatement[87603-87614]:ExpressionStatement[87603-87614]"
    }, {
      "left" : "position += 2;",
      "right" : "position += 2;",
      "info" : "ExpressionStatement[87631-87645]:ExpressionStatement[87631-87645]"
    }, {
      "left" : "if (limit <= 0)",
      "right" : "if (limit <= 0)",
      "info" : "IfStatement[87709-87777]:IfStatement[87709-87777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87725-87777]:Block[87725-87777]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[87747-87759]:BreakStatement[87747-87759]"
    }, {
      "left" : "if (expectSeparators)",
      "right" : "if (expectSeparators)",
      "info" : "IfStatement[87795-88012]:IfStatement[87795-88012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87817-88012]:Block[87817-88012]"
    }, {
      "left" : "if (text.charAt(position) != ':')",
      "right" : "if (text.charAt(position) != ':')",
      "info" : "IfStatement[87839-87933]:IfStatement[87839-87933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87873-87933]:Block[87873-87933]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[87899-87911]:BreakStatement[87899-87911]"
    }, {
      "left" : "limit--;",
      "right" : "limit--;",
      "info" : "ExpressionStatement[87954-87962]:ExpressionStatement[87954-87962]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[87983-87994]:ExpressionStatement[87983-87994]"
    }, {
      "left" : "count = digitCount(text, position, 2);",
      "right" : "count = digitCount(text, position, 2);",
      "info" : "ExpressionStatement[88030-88068]:ExpressionStatement[88030-88068]"
    }, {
      "left" : "if (count == 0 && !expectSeparators)",
      "right" : "if (count == 0 && !expectSeparators)",
      "info" : "IfStatement[88085-88303]:IfStatement[88085-88303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88122-88174]:Block[88122-88174]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[88144-88156]:BreakStatement[88144-88156]"
    }, {
      "left" : "if (count < 2)",
      "right" : "if (count < 2)",
      "info" : "IfStatement[88180-88303]:IfStatement[88180-88303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88195-88303]:Block[88195-88303]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[88268-88285]:ReturnStatement[88268-88285]"
    }, {
      "left" : "int seconds = FormatUtils.parseTwoDigits(text, position);",
      "right" : "int seconds = FormatUtils.parseTwoDigits(text, position);",
      "info" : "VariableDeclarationStatement[88321-88378]:VariableDeclarationStatement[88321-88378]"
    }, {
      "left" : "if (seconds > 59)",
      "right" : "if (seconds > 59)",
      "info" : "IfStatement[88395-88470]:IfStatement[88395-88470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88413-88470]:Block[88413-88470]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[88435-88452]:ReturnStatement[88435-88452]"
    }, {
      "left" : "offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[88487-88543]:ExpressionStatement[88487-88543]"
    }, {
      "left" : "limit -= 2;",
      "right" : "limit -= 2;",
      "info" : "ExpressionStatement[88560-88571]:ExpressionStatement[88560-88571]"
    }, {
      "left" : "position += 2;",
      "right" : "position += 2;",
      "info" : "ExpressionStatement[88588-88602]:ExpressionStatement[88588-88602]"
    }, {
      "left" : "if (limit <= 0)",
      "right" : "if (limit <= 0)",
      "info" : "IfStatement[88677-88745]:IfStatement[88677-88745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88693-88745]:Block[88693-88745]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[88715-88727]:BreakStatement[88715-88727]"
    }, {
      "left" : "if (expectSeparators)",
      "right" : "if (expectSeparators)",
      "info" : "IfStatement[88763-89012]:IfStatement[88763-89012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88785-89012]:Block[88785-89012]"
    }, {
      "left" : "if (text.charAt(position) != '.' && text.charAt(position) != ',')",
      "right" : "if (text.charAt(position) != '.' && text.charAt(position) != ',')",
      "info" : "IfStatement[88807-88933]:IfStatement[88807-88933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88873-88933]:Block[88873-88933]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[88899-88911]:BreakStatement[88899-88911]"
    }, {
      "left" : "limit--;",
      "right" : "limit--;",
      "info" : "ExpressionStatement[88954-88962]:ExpressionStatement[88954-88962]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[88983-88994]:ExpressionStatement[88983-88994]"
    }, {
      "left" : "count = digitCount(text, position, 3);",
      "right" : "count = digitCount(text, position, 3);",
      "info" : "ExpressionStatement[89046-89084]:ExpressionStatement[89046-89084]"
    }, {
      "left" : "if (count == 0 && !expectSeparators)",
      "right" : "if (count == 0 && !expectSeparators)",
      "info" : "IfStatement[89101-89339]:IfStatement[89101-89339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89138-89190]:Block[89138-89190]"
    }, {
      "left" : "break parse;",
      "right" : "break parse;",
      "info" : "BreakStatement[89160-89172]:BreakStatement[89160-89172]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[89196-89339]:IfStatement[89196-89339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89211-89339]:Block[89211-89339]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[89304-89321]:ReturnStatement[89304-89321]"
    }, {
      "left" : "offset += (text.charAt(position++) - '0') * 100;",
      "right" : "offset += (text.charAt(position++) - '0') * 100;",
      "info" : "ExpressionStatement[89357-89405]:ExpressionStatement[89357-89405]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[89422-89648]:IfStatement[89422-89648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89437-89648]:Block[89437-89648]"
    }, {
      "left" : "offset += (text.charAt(position++) - '0') * 10;",
      "right" : "offset += (text.charAt(position++) - '0') * 10;",
      "info" : "ExpressionStatement[89459-89506]:ExpressionStatement[89459-89506]"
    }, {
      "left" : "if (count > 2)",
      "right" : "if (count > 2)",
      "info" : "IfStatement[89527-89630]:IfStatement[89527-89630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89542-89630]:Block[89542-89630]"
    }, {
      "left" : "offset += text.charAt(position++) - '0';",
      "right" : "offset += text.charAt(position++) - '0';",
      "info" : "ExpressionStatement[89568-89608]:ExpressionStatement[89568-89608]"
    }, {
      "left" : "bucket.setOffset(Integer.valueOf(negative ? -offset : offset));",
      "right" : "bucket.setOffset(Integer.valueOf(negative ? -offset : offset));",
      "info" : "ExpressionStatement[89676-89739]:ExpressionStatement[89676-89739]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[89752-89768]:ReturnStatement[89752-89768]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[89922-89929]:Modifier[89922-89929]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[89930-89933]:PrimitiveType[89930-89933]"
    }, {
      "left" : "digitCount",
      "right" : "digitCount",
      "info" : "SimpleName[89934-89944]:SimpleName[89934-89944]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[89945-89956]:SingleVariableDeclaration[89945-89956]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[89958-89970]:SingleVariableDeclaration[89958-89970]"
    }, {
      "left" : "int amount",
      "right" : "int amount",
      "info" : "SingleVariableDeclaration[89972-89982]:SingleVariableDeclaration[89972-89982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89984-90339]:Block[89984-90339]"
    }, {
      "left" : "int limit = Math.min(text.length() - position, amount);",
      "right" : "int limit = Math.min(text.length() - position, amount);",
      "info" : "VariableDeclarationStatement[89998-90053]:VariableDeclarationStatement[89998-90053]"
    }, {
      "left" : "amount = 0;",
      "right" : "amount = 0;",
      "info" : "ExpressionStatement[90066-90077]:ExpressionStatement[90066-90077]"
    }, {
      "left" : "for (; limit > 0; limit--)",
      "right" : "for (; limit > 0; limit--)",
      "info" : "ForStatement[90090-90302]:ForStatement[90090-90302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90117-90302]:Block[90117-90302]"
    }, {
      "left" : "char c = text.charAt(position + amount);",
      "right" : "char c = text.charAt(position + amount);",
      "info" : "VariableDeclarationStatement[90135-90175]:VariableDeclarationStatement[90135-90175]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[90192-90262]:IfStatement[90192-90262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90216-90262]:Block[90216-90262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90238-90244]:BreakStatement[90238-90244]"
    }, {
      "left" : "amount++;",
      "right" : "amount++;",
      "info" : "ExpressionStatement[90279-90288]:ExpressionStatement[90279-90288]"
    }, {
      "left" : "return amount;",
      "right" : "return amount;",
      "info" : "ReturnStatement[90315-90329]:ReturnStatement[90315-90329]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[90429-90435]:Modifier[90429-90435]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[90436-90441]:TYPE_DECLARATION_KIND[90436-90441]"
    }, {
      "left" : "TimeZoneName",
      "right" : "TimeZoneName",
      "info" : "SimpleName[90442-90454]:SimpleName[90442-90454]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[90478-90493]:SimpleType[90478-90493]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[90495-90509]:SimpleType[90495-90509]"
    }, {
      "left" : "TimeZoneName",
      "right" : "TimeZoneName",
      "info" : "SimpleName[90699-90711]:SimpleName[90699-90711]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[90712-90720]:SingleVariableDeclaration[90712-90720]"
    }, {
      "left" : "Map<String, DateTimeZone> parseLookup",
      "right" : "Map<String, DateTimeZone> parseLookup",
      "info" : "SingleVariableDeclaration[90722-90759]:SingleVariableDeclaration[90722-90759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90761-90859]:Block[90761-90859]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[90775-90783]:SuperConstructorInvocation[90775-90783]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[90796-90809]:ExpressionStatement[90796-90809]"
    }, {
      "left" : "iParseLookup = parseLookup;",
      "right" : "iParseLookup = parseLookup;",
      "info" : "ExpressionStatement[90822-90849]:ExpressionStatement[90822-90849]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[90869-90875]:Modifier[90869-90875]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[90876-90879]:PrimitiveType[90876-90879]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[90880-90901]:SimpleName[90880-90901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90904-90966]:Block[90904-90966]"
    }, {
      "left" : "return (iType == SHORT_NAME ? 4 : 20);",
      "right" : "return (iType == SHORT_NAME ? 4 : 20);",
      "info" : "ReturnStatement[90918-90956]:ReturnStatement[90918-90956]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[90976-90982]:Modifier[90976-90982]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[90983-90987]:PrimitiveType[90983-90987]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[90988-90995]:SimpleName[90988-90995]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[91013-91029]:SingleVariableDeclaration[91013-91029]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[91031-91043]:SingleVariableDeclaration[91031-91043]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[91045-91062]:SingleVariableDeclaration[91045-91062]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[91080-91097]:SingleVariableDeclaration[91080-91097]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[91099-91123]:SingleVariableDeclaration[91099-91123]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[91125-91138]:SingleVariableDeclaration[91125-91138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91140-91228]:Block[91140-91228]"
    }, {
      "left" : "buf.append(print(instant - displayOffset, displayZone, locale));",
      "right" : "buf.append(print(instant - displayOffset, displayZone, locale));",
      "info" : "ExpressionStatement[91154-91218]:ExpressionStatement[91154-91218]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[91238-91244]:Modifier[91238-91244]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[91245-91249]:PrimitiveType[91245-91249]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[91250-91257]:SimpleName[91250-91257]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[91275-91285]:SingleVariableDeclaration[91275-91285]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[91287-91299]:SingleVariableDeclaration[91287-91299]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[91301-91318]:SingleVariableDeclaration[91301-91318]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[91336-91353]:SingleVariableDeclaration[91336-91353]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[91355-91379]:SingleVariableDeclaration[91355-91379]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[91381-91394]:SingleVariableDeclaration[91381-91394]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[91403-91414]:SimpleType[91403-91414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91415-91502]:Block[91415-91502]"
    }, {
      "left" : "out.write(print(instant - displayOffset, displayZone, locale));",
      "right" : "out.write(print(instant - displayOffset, displayZone, locale));",
      "info" : "ExpressionStatement[91429-91492]:ExpressionStatement[91429-91492]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[91512-91519]:Modifier[91512-91519]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[91520-91526]:SimpleType[91520-91526]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[91527-91532]:SimpleName[91527-91532]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[91533-91545]:SingleVariableDeclaration[91533-91545]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[91547-91571]:SingleVariableDeclaration[91547-91571]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[91573-91586]:SingleVariableDeclaration[91573-91586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91588-91957]:Block[91588-91957]"
    }, {
      "left" : "if (displayZone == null)",
      "right" : "if (displayZone == null)",
      "info" : "IfStatement[91602-91681]:IfStatement[91602-91681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91627-91681]:Block[91627-91681]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[91645-91655]:ReturnStatement[91645-91655]"
    }, {
      "left" : "switch (iType) {\n                case LONG_NAME:\n                    return displayZone.getName(instant, locale);\n                case SHORT_NAME:\n                    return displayZone.getShortName(instant, locale);\n            }",
      "right" : "switch (iType) {\n                case LONG_NAME:\n                    return displayZone.getName(instant, locale);\n                case SHORT_NAME:\n                    return displayZone.getShortName(instant, locale);\n            }",
      "info" : "SwitchStatement[91694-91924]:SwitchStatement[91694-91924]"
    }, {
      "left" : "case LONG_NAME:",
      "right" : "case LONG_NAME:",
      "info" : "SwitchCase[91727-91742]:SwitchCase[91727-91742]"
    }, {
      "left" : "return displayZone.getName(instant, locale);",
      "right" : "return displayZone.getName(instant, locale);",
      "info" : "ReturnStatement[91763-91807]:ReturnStatement[91763-91807]"
    }, {
      "left" : "case SHORT_NAME:",
      "right" : "case SHORT_NAME:",
      "info" : "SwitchCase[91824-91840]:SwitchCase[91824-91840]"
    }, {
      "left" : "return displayZone.getShortName(instant, locale);",
      "right" : "return displayZone.getShortName(instant, locale);",
      "info" : "ReturnStatement[91861-91910]:ReturnStatement[91861-91910]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[91937-91947]:ReturnStatement[91937-91947]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[91967-91973]:Modifier[91967-91973]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[91974-91978]:PrimitiveType[91974-91978]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[91979-91986]:SimpleName[91979-91986]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[91987-92003]:SingleVariableDeclaration[91987-92003]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[92005-92028]:SingleVariableDeclaration[92005-92028]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[92030-92043]:SingleVariableDeclaration[92030-92043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92045-92084]:Block[92045-92084]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92094-92100]:Modifier[92094-92100]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[92101-92105]:PrimitiveType[92101-92105]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[92106-92113]:SimpleName[92106-92113]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[92114-92124]:SingleVariableDeclaration[92114-92124]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[92126-92149]:SingleVariableDeclaration[92126-92149]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[92151-92164]:SingleVariableDeclaration[92151-92164]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[92173-92184]:SimpleType[92173-92184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92185-92224]:Block[92185-92224]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92234-92240]:Modifier[92234-92240]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[92241-92244]:PrimitiveType[92241-92244]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[92245-92265]:SimpleName[92245-92265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92268-92330]:Block[92268-92330]"
    }, {
      "left" : "return (iType == SHORT_NAME ? 4 : 20);",
      "right" : "return (iType == SHORT_NAME ? 4 : 20);",
      "info" : "ReturnStatement[92282-92320]:ReturnStatement[92282-92320]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[92340-92346]:Modifier[92340-92346]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[92347-92350]:PrimitiveType[92347-92350]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[92351-92360]:SimpleName[92351-92360]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[92361-92388]:SingleVariableDeclaration[92361-92388]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[92390-92401]:SingleVariableDeclaration[92390-92401]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[92403-92415]:SingleVariableDeclaration[92403-92415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92417-92754]:Block[92417-92754]"
    }, {
      "left" : "String str = text.substring(position);",
      "right" : "String str = text.substring(position);",
      "info" : "VariableDeclarationStatement[92431-92469]:VariableDeclarationStatement[92431-92469]"
    }, {
      "left" : "for (String name : iParseLookup.keySet())",
      "right" : "for (String name : iParseLookup.keySet())",
      "info" : "EnhancedForStatement[92482-92714]:EnhancedForStatement[92482-92714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92524-92714]:Block[92524-92714]"
    }, {
      "left" : "if (str.startsWith(name))",
      "right" : "if (str.startsWith(name))",
      "info" : "IfStatement[92542-92700]:IfStatement[92542-92700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92568-92700]:Block[92568-92700]"
    }, {
      "left" : "bucket.setZone(iParseLookup.get(name));",
      "right" : "bucket.setZone(iParseLookup.get(name));",
      "info" : "ExpressionStatement[92590-92629]:ExpressionStatement[92590-92629]"
    }, {
      "left" : "return position + name.length();",
      "right" : "return position + name.length();",
      "info" : "ReturnStatement[92650-92682]:ReturnStatement[92650-92682]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[92727-92744]:ReturnStatement[92727-92744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93070-93240]:Block[93070-93240]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[93084-93096]:VariableDeclarationStatement[93084-93096]"
    }, {
      "left" : "for (String id : ALL_IDS)",
      "right" : "for (String id : ALL_IDS)",
      "info" : "EnhancedForStatement[93109-93200]:EnhancedForStatement[93109-93200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93135-93200]:Block[93135-93200]"
    }, {
      "left" : "max = Math.max(max, id.length());",
      "right" : "max = Math.max(max, id.length());",
      "info" : "ExpressionStatement[93153-93186]:ExpressionStatement[93153-93186]"
    }, {
      "left" : "MAX_LENGTH = max;",
      "right" : "MAX_LENGTH = max;",
      "info" : "ExpressionStatement[93213-93230]:ExpressionStatement[93213-93230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[93250-93256]:Modifier[93250-93256]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[93257-93260]:PrimitiveType[93257-93260]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[93261-93282]:SimpleName[93261-93282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93285-93327]:Block[93285-93327]"
    }, {
      "left" : "return MAX_LENGTH;",
      "right" : "return MAX_LENGTH;",
      "info" : "ReturnStatement[93299-93317]:ReturnStatement[93299-93317]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[93337-93343]:Modifier[93337-93343]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93344-93348]:PrimitiveType[93344-93348]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[93349-93356]:SimpleName[93349-93356]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[93374-93390]:SingleVariableDeclaration[93374-93390]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[93392-93404]:SingleVariableDeclaration[93392-93404]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[93406-93423]:SingleVariableDeclaration[93406-93423]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[93441-93458]:SingleVariableDeclaration[93441-93458]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[93460-93484]:SingleVariableDeclaration[93460-93484]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[93486-93499]:SingleVariableDeclaration[93486-93499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93501-93584]:Block[93501-93584]"
    }, {
      "left" : "buf.append(displayZone != null ? displayZone.getID() : \"\");",
      "right" : "buf.append(displayZone != null ? displayZone.getID() : \"\");",
      "info" : "ExpressionStatement[93515-93574]:ExpressionStatement[93515-93574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[93594-93600]:Modifier[93594-93600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93601-93605]:PrimitiveType[93601-93605]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[93606-93613]:SimpleName[93606-93613]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[93631-93641]:SingleVariableDeclaration[93631-93641]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[93643-93655]:SingleVariableDeclaration[93643-93655]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[93657-93674]:SingleVariableDeclaration[93657-93674]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[93692-93709]:SingleVariableDeclaration[93692-93709]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[93711-93735]:SingleVariableDeclaration[93711-93735]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[93737-93750]:SingleVariableDeclaration[93737-93750]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[93759-93770]:SimpleType[93759-93770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93771-93853]:Block[93771-93853]"
    }, {
      "left" : "out.write(displayZone != null ? displayZone.getID() : \"\");",
      "right" : "out.write(displayZone != null ? displayZone.getID() : \"\");",
      "info" : "ExpressionStatement[93785-93843]:ExpressionStatement[93785-93843]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[93863-93869]:Modifier[93863-93869]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93870-93874]:PrimitiveType[93870-93874]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[93875-93882]:SimpleName[93875-93882]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[93883-93899]:SingleVariableDeclaration[93883-93899]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[93901-93924]:SingleVariableDeclaration[93901-93924]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[93926-93939]:SingleVariableDeclaration[93926-93939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93941-93980]:Block[93941-93980]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[93990-93996]:Modifier[93990-93996]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[93997-94001]:PrimitiveType[93997-94001]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[94002-94009]:SimpleName[94002-94009]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[94010-94020]:SingleVariableDeclaration[94010-94020]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[94022-94045]:SingleVariableDeclaration[94022-94045]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[94047-94060]:SingleVariableDeclaration[94047-94060]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[94069-94080]:SimpleType[94069-94080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94081-94120]:Block[94081-94120]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[94130-94136]:Modifier[94130-94136]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[94137-94140]:PrimitiveType[94137-94140]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[94141-94161]:SimpleName[94141-94161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94164-94206]:Block[94164-94206]"
    }, {
      "left" : "return MAX_LENGTH;",
      "right" : "return MAX_LENGTH;",
      "info" : "ReturnStatement[94178-94196]:ReturnStatement[94178-94196]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[94216-94222]:Modifier[94216-94222]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[94223-94226]:PrimitiveType[94223-94226]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[94227-94236]:SimpleName[94227-94236]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[94237-94264]:SingleVariableDeclaration[94237-94264]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[94266-94277]:SingleVariableDeclaration[94266-94277]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[94279-94291]:SingleVariableDeclaration[94279-94291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94293-94610]:Block[94293-94800]"
    }, {
      "left" : "String str = text.substring(position);",
      "right" : "String str = text.substring(position);",
      "info" : "VariableDeclarationStatement[94307-94345]:VariableDeclarationStatement[94307-94345]"
    }, {
      "left" : "for (String id : ALL_IDS)",
      "right" : "for (String id : ALL_IDS)",
      "info" : "EnhancedForStatement[94358-94570]:EnhancedForStatement[94390-94607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94384-94570]:Block[94416-94607]"
    }, {
      "left" : "if (str.startsWith(id))",
      "right" : "if (best != null)",
      "info" : "IfStatement[94402-94556]:IfStatement[94620-94760]"
    }, {
      "left" : "str.startsWith(id)",
      "right" : "str.startsWith(id)",
      "info" : "MethodInvocation[94406-94424]:MethodInvocation[94438-94456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94426-94556]:Block[94638-94760]"
    }, {
      "left" : "bucket.setZone(DateTimeZone.forID(id));",
      "right" : "bucket.setZone(DateTimeZone.forID(best));",
      "info" : "ExpressionStatement[94448-94487]:ExpressionStatement[94656-94697]"
    }, {
      "left" : "id",
      "right" : "best",
      "info" : "SimpleName[94482-94484]:SimpleName[94690-94694]"
    }, {
      "left" : "return position + id.length();",
      "right" : "return position + best.length();",
      "info" : "ReturnStatement[94508-94538]:ReturnStatement[94714-94746]"
    }, {
      "left" : "position + id.length()",
      "right" : "id.length() > best.length()",
      "info" : "InfixExpression[94515-94537]:InfixExpression[94497-94524]"
    }, {
      "left" : "+",
      "right" : ">",
      "info" : "INFIX_EXPRESSION_OPERATOR[94524-94525]:INFIX_EXPRESSION_OPERATOR[94509-94510]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[94583-94600]:ReturnStatement[94773-94790]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[94700-94706]:Modifier[94890-94896]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[94707-94712]:TYPE_DECLARATION_KIND[94897-94902]"
    }, {
      "left" : "Composite",
      "right" : "Composite",
      "info" : "SimpleName[94713-94722]:SimpleName[94903-94912]"
    }, {
      "left" : "DateTimePrinter",
      "right" : "DateTimePrinter",
      "info" : "SimpleType[94746-94761]:SimpleType[94936-94951]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[94763-94777]:SimpleType[94953-94967]"
    }, {
      "left" : "Composite",
      "right" : "Composite",
      "info" : "SimpleName[94990-94999]:SimpleName[95180-95189]"
    }, {
      "left" : "List<Object> elementPairs",
      "right" : "List<Object> elementPairs",
      "info" : "SingleVariableDeclaration[95000-95025]:SingleVariableDeclaration[95190-95215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95027-96435]:Block[95217-96625]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[95041-95049]:SuperConstructorInvocation[95231-95239]"
    }, {
      "left" : "List<Object> printerList = new ArrayList<Object>();",
      "right" : "List<Object> printerList = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[95063-95114]:VariableDeclarationStatement[95253-95304]"
    }, {
      "left" : "List<Object> parserList = new ArrayList<Object>();",
      "right" : "List<Object> parserList = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[95127-95177]:VariableDeclarationStatement[95317-95367]"
    }, {
      "left" : "decompose(elementPairs, printerList, parserList);",
      "right" : "decompose(elementPairs, printerList, parserList);",
      "info" : "ExpressionStatement[95191-95240]:ExpressionStatement[95381-95430]"
    }, {
      "left" : "if (printerList.size() <= 0)",
      "right" : "if (printerList.size() <= 0)",
      "info" : "IfStatement[95254-95840]:IfStatement[95444-96030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95283-95376]:Block[95473-95566]"
    }, {
      "left" : "iPrinters = null;",
      "right" : "iPrinters = null;",
      "info" : "ExpressionStatement[95301-95318]:ExpressionStatement[95491-95508]"
    }, {
      "left" : "iPrintedLengthEstimate = 0;",
      "right" : "iPrintedLengthEstimate = 0;",
      "info" : "ExpressionStatement[95335-95362]:ExpressionStatement[95525-95552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95382-95840]:Block[95572-96030]"
    }, {
      "left" : "int size = printerList.size();",
      "right" : "int size = printerList.size();",
      "info" : "VariableDeclarationStatement[95400-95430]:VariableDeclarationStatement[95590-95620]"
    }, {
      "left" : "iPrinters = new DateTimePrinter[size];",
      "right" : "iPrinters = new DateTimePrinter[size];",
      "info" : "ExpressionStatement[95447-95485]:ExpressionStatement[95637-95675]"
    }, {
      "left" : "int printEst = 0;",
      "right" : "int printEst = 0;",
      "info" : "VariableDeclarationStatement[95502-95519]:VariableDeclarationStatement[95692-95709]"
    }, {
      "left" : "for (int i=0; i<size; i++)",
      "right" : "for (int i=0; i<size; i++)",
      "info" : "ForStatement[95536-95775]:ForStatement[95726-95965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95563-95775]:Block[95753-95965]"
    }, {
      "left" : "DateTimePrinter printer = (DateTimePrinter) printerList.get(i);",
      "right" : "DateTimePrinter printer = (DateTimePrinter) printerList.get(i);",
      "info" : "VariableDeclarationStatement[95585-95648]:VariableDeclarationStatement[95775-95838]"
    }, {
      "left" : "printEst += printer.estimatePrintedLength();",
      "right" : "printEst += printer.estimatePrintedLength();",
      "info" : "ExpressionStatement[95669-95713]:ExpressionStatement[95859-95903]"
    }, {
      "left" : "iPrinters[i] = printer;",
      "right" : "iPrinters[i] = printer;",
      "info" : "ExpressionStatement[95734-95757]:ExpressionStatement[95924-95947]"
    }, {
      "left" : "iPrintedLengthEstimate = printEst;",
      "right" : "iPrintedLengthEstimate = printEst;",
      "info" : "ExpressionStatement[95792-95826]:ExpressionStatement[95982-96016]"
    }, {
      "left" : "if (parserList.size() <= 0)",
      "right" : "if (parserList.size() <= 0)",
      "info" : "IfStatement[95854-96425]:IfStatement[96044-96615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95882-95973]:Block[96072-96163]"
    }, {
      "left" : "iParsers = null;",
      "right" : "iParsers = null;",
      "info" : "ExpressionStatement[95900-95916]:ExpressionStatement[96090-96106]"
    }, {
      "left" : "iParsedLengthEstimate = 0;",
      "right" : "iParsedLengthEstimate = 0;",
      "info" : "ExpressionStatement[95933-95959]:ExpressionStatement[96123-96149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95979-96425]:Block[96169-96615]"
    }, {
      "left" : "int size = parserList.size();",
      "right" : "int size = parserList.size();",
      "info" : "VariableDeclarationStatement[95997-96026]:VariableDeclarationStatement[96187-96216]"
    }, {
      "left" : "iParsers = new DateTimeParser[size];",
      "right" : "iParsers = new DateTimeParser[size];",
      "info" : "ExpressionStatement[96043-96079]:ExpressionStatement[96233-96269]"
    }, {
      "left" : "int parseEst = 0;",
      "right" : "int parseEst = 0;",
      "info" : "VariableDeclarationStatement[96096-96113]:VariableDeclarationStatement[96286-96303]"
    }, {
      "left" : "for (int i=0; i<size; i++)",
      "right" : "for (int i=0; i<size; i++)",
      "info" : "ForStatement[96130-96361]:ForStatement[96320-96551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96157-96361]:Block[96347-96551]"
    }, {
      "left" : "DateTimeParser parser = (DateTimeParser) parserList.get(i);",
      "right" : "DateTimeParser parser = (DateTimeParser) parserList.get(i);",
      "info" : "VariableDeclarationStatement[96179-96238]:VariableDeclarationStatement[96369-96428]"
    }, {
      "left" : "parseEst += parser.estimateParsedLength();",
      "right" : "parseEst += parser.estimateParsedLength();",
      "info" : "ExpressionStatement[96259-96301]:ExpressionStatement[96449-96491]"
    }, {
      "left" : "iParsers[i] = parser;",
      "right" : "iParsers[i] = parser;",
      "info" : "ExpressionStatement[96322-96343]:ExpressionStatement[96512-96533]"
    }, {
      "left" : "iParsedLengthEstimate = parseEst;",
      "right" : "iParsedLengthEstimate = parseEst;",
      "info" : "ExpressionStatement[96378-96411]:ExpressionStatement[96568-96601]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96445-96451]:Modifier[96635-96641]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[96452-96455]:PrimitiveType[96642-96645]"
    }, {
      "left" : "estimatePrintedLength",
      "right" : "estimatePrintedLength",
      "info" : "SimpleName[96456-96477]:SimpleName[96646-96667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96480-96534]:Block[96670-96724]"
    }, {
      "left" : "return iPrintedLengthEstimate;",
      "right" : "return iPrintedLengthEstimate;",
      "info" : "ReturnStatement[96494-96524]:ReturnStatement[96684-96714]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[96544-96550]:Modifier[96734-96740]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[96551-96555]:PrimitiveType[96741-96745]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[96556-96563]:SimpleName[96746-96753]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[96581-96597]:SingleVariableDeclaration[96771-96787]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[96599-96611]:SingleVariableDeclaration[96789-96801]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[96613-96630]:SingleVariableDeclaration[96803-96820]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[96648-96665]:SingleVariableDeclaration[96838-96855]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[96667-96691]:SingleVariableDeclaration[96857-96881]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[96693-96706]:SingleVariableDeclaration[96883-96896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96708-97239]:Block[96898-97429]"
    }, {
      "left" : "DateTimePrinter[] elements = iPrinters;",
      "right" : "DateTimePrinter[] elements = iPrinters;",
      "info" : "VariableDeclarationStatement[96722-96761]:VariableDeclarationStatement[96912-96951]"
    }, {
      "left" : "if (elements == null)",
      "right" : "if (elements == null)",
      "info" : "IfStatement[96774-96870]:IfStatement[96964-97060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96796-96870]:Block[96986-97060]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[96814-96856]:ThrowStatement[97004-97046]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[96884-97036]:IfStatement[97074-97226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96904-97036]:Block[97094-97226]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[96993-97022]:ExpressionStatement[97183-97212]"
    }, {
      "left" : "int len = elements.length;",
      "right" : "int len = elements.length;",
      "info" : "VariableDeclarationStatement[97050-97076]:VariableDeclarationStatement[97240-97266]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[97089-97229]:ForStatement[97279-97419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97119-97229]:Block[97309-97419]"
    }, {
      "left" : "elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",
      "right" : "elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",
      "info" : "ExpressionStatement[97137-97215]:ExpressionStatement[97327-97405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[97249-97255]:Modifier[97439-97445]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[97256-97260]:PrimitiveType[97446-97450]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[97261-97268]:SimpleName[97451-97458]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[97286-97296]:SingleVariableDeclaration[97476-97486]"
    }, {
      "left" : "long instant",
      "right" : "long instant",
      "info" : "SingleVariableDeclaration[97298-97310]:SingleVariableDeclaration[97488-97500]"
    }, {
      "left" : "Chronology chrono",
      "right" : "Chronology chrono",
      "info" : "SingleVariableDeclaration[97312-97329]:SingleVariableDeclaration[97502-97519]"
    }, {
      "left" : "int displayOffset",
      "right" : "int displayOffset",
      "info" : "SingleVariableDeclaration[97347-97364]:SingleVariableDeclaration[97537-97554]"
    }, {
      "left" : "DateTimeZone displayZone",
      "right" : "DateTimeZone displayZone",
      "info" : "SingleVariableDeclaration[97366-97390]:SingleVariableDeclaration[97556-97580]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[97392-97405]:SingleVariableDeclaration[97582-97595]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[97414-97425]:SimpleType[97604-97615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97426-97957]:Block[97616-98147]"
    }, {
      "left" : "DateTimePrinter[] elements = iPrinters;",
      "right" : "DateTimePrinter[] elements = iPrinters;",
      "info" : "VariableDeclarationStatement[97440-97479]:VariableDeclarationStatement[97630-97669]"
    }, {
      "left" : "if (elements == null)",
      "right" : "if (elements == null)",
      "info" : "IfStatement[97492-97588]:IfStatement[97682-97778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97514-97588]:Block[97704-97778]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[97532-97574]:ThrowStatement[97722-97764]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[97602-97754]:IfStatement[97792-97944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97622-97754]:Block[97812-97944]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[97711-97740]:ExpressionStatement[97901-97930]"
    }, {
      "left" : "int len = elements.length;",
      "right" : "int len = elements.length;",
      "info" : "VariableDeclarationStatement[97768-97794]:VariableDeclarationStatement[97958-97984]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[97807-97947]:ForStatement[97997-98137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97837-97947]:Block[98027-98137]"
    }, {
      "left" : "elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",
      "right" : "elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",
      "info" : "ExpressionStatement[97855-97933]:ExpressionStatement[98045-98123]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[97967-97973]:Modifier[98157-98163]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[97974-97978]:PrimitiveType[98164-98168]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[97979-97986]:SimpleName[98169-98176]"
    }, {
      "left" : "StringBuffer buf",
      "right" : "StringBuffer buf",
      "info" : "SingleVariableDeclaration[97987-98003]:SingleVariableDeclaration[98177-98193]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[98005-98028]:SingleVariableDeclaration[98195-98218]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[98030-98043]:SingleVariableDeclaration[98220-98233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98045-98536]:Block[98235-98726]"
    }, {
      "left" : "DateTimePrinter[] elements = iPrinters;",
      "right" : "DateTimePrinter[] elements = iPrinters;",
      "info" : "VariableDeclarationStatement[98059-98098]:VariableDeclarationStatement[98249-98288]"
    }, {
      "left" : "if (elements == null)",
      "right" : "if (elements == null)",
      "info" : "IfStatement[98111-98207]:IfStatement[98301-98397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98133-98207]:Block[98323-98397]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[98151-98193]:ThrowStatement[98341-98383]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[98221-98373]:IfStatement[98411-98563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98241-98373]:Block[98431-98563]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[98330-98359]:ExpressionStatement[98520-98549]"
    }, {
      "left" : "int len = elements.length;",
      "right" : "int len = elements.length;",
      "info" : "VariableDeclarationStatement[98387-98413]:VariableDeclarationStatement[98577-98603]"
    }, {
      "left" : "for (int i=0; i<len; i++)",
      "right" : "for (int i=0; i<len; i++)",
      "info" : "ForStatement[98426-98526]:ForStatement[98616-98716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98452-98526]:Block[98642-98716]"
    }, {
      "left" : "elements[i].printTo(buf, partial, locale);",
      "right" : "elements[i].printTo(buf, partial, locale);",
      "info" : "ExpressionStatement[98470-98512]:ExpressionStatement[98660-98702]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[98546-98552]:Modifier[98736-98742]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[98553-98557]:PrimitiveType[98743-98747]"
    }, {
      "left" : "printTo",
      "right" : "printTo",
      "info" : "SimpleName[98558-98565]:SimpleName[98748-98755]"
    }, {
      "left" : "Writer out",
      "right" : "Writer out",
      "info" : "SingleVariableDeclaration[98566-98576]:SingleVariableDeclaration[98756-98766]"
    }, {
      "left" : "ReadablePartial partial",
      "right" : "ReadablePartial partial",
      "info" : "SingleVariableDeclaration[98578-98601]:SingleVariableDeclaration[98768-98791]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[98603-98616]:SingleVariableDeclaration[98793-98806]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[98625-98636]:SimpleType[98815-98826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98637-99128]:Block[98827-99318]"
    }, {
      "left" : "DateTimePrinter[] elements = iPrinters;",
      "right" : "DateTimePrinter[] elements = iPrinters;",
      "info" : "VariableDeclarationStatement[98651-98690]:VariableDeclarationStatement[98841-98880]"
    }, {
      "left" : "if (elements == null)",
      "right" : "if (elements == null)",
      "info" : "IfStatement[98703-98799]:IfStatement[98893-98989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98725-98799]:Block[98915-98989]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[98743-98785]:ThrowStatement[98933-98975]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[98813-98965]:IfStatement[99003-99155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98833-98965]:Block[99023-99155]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[98922-98951]:ExpressionStatement[99112-99141]"
    }, {
      "left" : "int len = elements.length;",
      "right" : "int len = elements.length;",
      "info" : "VariableDeclarationStatement[98979-99005]:VariableDeclarationStatement[99169-99195]"
    }, {
      "left" : "for (int i=0; i<len; i++)",
      "right" : "for (int i=0; i<len; i++)",
      "info" : "ForStatement[99018-99118]:ForStatement[99208-99308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99044-99118]:Block[99234-99308]"
    }, {
      "left" : "elements[i].printTo(out, partial, locale);",
      "right" : "elements[i].printTo(out, partial, locale);",
      "info" : "ExpressionStatement[99062-99104]:ExpressionStatement[99252-99294]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[99138-99144]:Modifier[99328-99334]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[99145-99148]:PrimitiveType[99335-99338]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[99149-99169]:SimpleName[99339-99359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99172-99225]:Block[99362-99415]"
    }, {
      "left" : "return iParsedLengthEstimate;",
      "right" : "return iParsedLengthEstimate;",
      "info" : "ReturnStatement[99186-99215]:ReturnStatement[99376-99405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[99235-99241]:Modifier[99425-99431]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[99242-99245]:PrimitiveType[99432-99435]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[99246-99255]:SimpleName[99436-99445]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[99256-99283]:SingleVariableDeclaration[99446-99473]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[99285-99296]:SingleVariableDeclaration[99475-99486]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[99298-99310]:SingleVariableDeclaration[99488-99500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99312-99696]:Block[99502-99886]"
    }, {
      "left" : "DateTimeParser[] elements = iParsers;",
      "right" : "DateTimeParser[] elements = iParsers;",
      "info" : "VariableDeclarationStatement[99326-99363]:VariableDeclarationStatement[99516-99553]"
    }, {
      "left" : "if (elements == null)",
      "right" : "if (elements == null)",
      "info" : "IfStatement[99376-99472]:IfStatement[99566-99662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99398-99472]:Block[99588-99662]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[99416-99458]:ThrowStatement[99606-99648]"
    }, {
      "left" : "int len = elements.length;",
      "right" : "int len = elements.length;",
      "info" : "VariableDeclarationStatement[99486-99512]:VariableDeclarationStatement[99676-99702]"
    }, {
      "left" : "for (int i=0; i<len && position >= 0; i++)",
      "right" : "for (int i=0; i<len && position >= 0; i++)",
      "info" : "ForStatement[99525-99657]:ForStatement[99715-99847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99568-99657]:Block[99758-99847]"
    }, {
      "left" : "position = elements[i].parseInto(bucket, text, position);",
      "right" : "position = elements[i].parseInto(bucket, text, position);",
      "info" : "ExpressionStatement[99586-99643]:ExpressionStatement[99776-99833]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[99670-99686]:ReturnStatement[99860-99876]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[99706-99713]:PrimitiveType[99896-99903]"
    }, {
      "left" : "isPrinter",
      "right" : "isPrinter",
      "info" : "SimpleName[99714-99723]:SimpleName[99904-99913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99726-99775]:Block[99916-99965]"
    }, {
      "left" : "return iPrinters != null;",
      "right" : "return iPrinters != null;",
      "info" : "ReturnStatement[99740-99765]:ReturnStatement[99930-99955]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[99785-99792]:PrimitiveType[99975-99982]"
    }, {
      "left" : "isParser",
      "right" : "isParser",
      "info" : "SimpleName[99793-99801]:SimpleName[99983-99991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99804-99852]:Block[99994-100042]"
    }, {
      "left" : "return iParsers != null;",
      "right" : "return iParsers != null;",
      "info" : "ReturnStatement[99818-99842]:ReturnStatement[100008-100032]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[99994-100001]:Modifier[100184-100191]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[100002-100006]:PrimitiveType[100192-100196]"
    }, {
      "left" : "decompose",
      "right" : "decompose",
      "info" : "SimpleName[100007-100016]:SimpleName[100197-100206]"
    }, {
      "left" : "List<Object> elementPairs",
      "right" : "List<Object> elementPairs",
      "info" : "SingleVariableDeclaration[100017-100042]:SingleVariableDeclaration[100207-100232]"
    }, {
      "left" : "List<Object> printerList",
      "right" : "List<Object> printerList",
      "info" : "SingleVariableDeclaration[100044-100068]:SingleVariableDeclaration[100234-100258]"
    }, {
      "left" : "List<Object> parserList",
      "right" : "List<Object> parserList",
      "info" : "SingleVariableDeclaration[100070-100093]:SingleVariableDeclaration[100260-100283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100095-100944]:Block[100285-101134]"
    }, {
      "left" : "int size = elementPairs.size();",
      "right" : "int size = elementPairs.size();",
      "info" : "VariableDeclarationStatement[100109-100140]:VariableDeclarationStatement[100299-100330]"
    }, {
      "left" : "for (int i=0; i<size; i+=2)",
      "right" : "for (int i=0; i<size; i+=2)",
      "info" : "ForStatement[100153-100934]:ForStatement[100343-101124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100181-100934]:Block[100371-101124]"
    }, {
      "left" : "Object element = elementPairs.get(i);",
      "right" : "Object element = elementPairs.get(i);",
      "info" : "VariableDeclarationStatement[100199-100236]:VariableDeclarationStatement[100389-100426]"
    }, {
      "left" : "if (element instanceof DateTimePrinter)",
      "right" : "if (element instanceof DateTimePrinter)",
      "info" : "IfStatement[100253-100554]:IfStatement[100443-100744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100293-100554]:Block[100483-100744]"
    }, {
      "left" : "if (element instanceof Composite)",
      "right" : "if (element instanceof Composite)",
      "info" : "IfStatement[100315-100536]:IfStatement[100505-100726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100349-100457]:Block[100539-100647]"
    }, {
      "left" : "addArrayToList(printerList, ((Composite)element).iPrinters);",
      "right" : "addArrayToList(printerList, ((Composite)element).iPrinters);",
      "info" : "ExpressionStatement[100375-100435]:ExpressionStatement[100565-100625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100463-100536]:Block[100653-100726]"
    }, {
      "left" : "printerList.add(element);",
      "right" : "printerList.add(element);",
      "info" : "ExpressionStatement[100489-100514]:ExpressionStatement[100679-100704]"
    }, {
      "left" : "element = elementPairs.get(i + 1);",
      "right" : "element = elementPairs.get(i + 1);",
      "info" : "ExpressionStatement[100572-100606]:ExpressionStatement[100762-100796]"
    }, {
      "left" : "if (element instanceof DateTimeParser)",
      "right" : "if (element instanceof DateTimeParser)",
      "info" : "IfStatement[100623-100920]:IfStatement[100813-101110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100662-100920]:Block[100852-101110]"
    }, {
      "left" : "if (element instanceof Composite)",
      "right" : "if (element instanceof Composite)",
      "info" : "IfStatement[100684-100902]:IfStatement[100874-101092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100718-100824]:Block[100908-101014]"
    }, {
      "left" : "addArrayToList(parserList, ((Composite)element).iParsers);",
      "right" : "addArrayToList(parserList, ((Composite)element).iParsers);",
      "info" : "ExpressionStatement[100744-100802]:ExpressionStatement[100934-100992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100830-100902]:Block[101020-101092]"
    }, {
      "left" : "parserList.add(element);",
      "right" : "parserList.add(element);",
      "info" : "ExpressionStatement[100856-100880]:ExpressionStatement[101046-101070]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[100954-100961]:Modifier[101144-101151]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[100962-100966]:PrimitiveType[101152-101156]"
    }, {
      "left" : "addArrayToList",
      "right" : "addArrayToList",
      "info" : "SimpleName[100967-100981]:SimpleName[101157-101171]"
    }, {
      "left" : "List<Object> list",
      "right" : "List<Object> list",
      "info" : "SingleVariableDeclaration[100982-100999]:SingleVariableDeclaration[101172-101189]"
    }, {
      "left" : "Object[] array",
      "right" : "Object[] array",
      "info" : "SingleVariableDeclaration[101001-101015]:SingleVariableDeclaration[101191-101205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101017-101186]:Block[101207-101376]"
    }, {
      "left" : "if (array != null)",
      "right" : "if (array != null)",
      "info" : "IfStatement[101031-101176]:IfStatement[101221-101366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101050-101176]:Block[101240-101366]"
    }, {
      "left" : "for (int i=0; i<array.length; i++)",
      "right" : "for (int i=0; i<array.length; i++)",
      "info" : "ForStatement[101068-101162]:ForStatement[101258-101352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101103-101162]:Block[101293-101352]"
    }, {
      "left" : "list.add(array[i]);",
      "right" : "list.add(array[i]);",
      "info" : "ExpressionStatement[101125-101144]:ExpressionStatement[101315-101334]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[101276-101282]:Modifier[101466-101472]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[101283-101288]:TYPE_DECLARATION_KIND[101473-101478]"
    }, {
      "left" : "MatchingParser",
      "right" : "MatchingParser",
      "info" : "SimpleName[101289-101303]:SimpleName[101479-101493]"
    }, {
      "left" : "DateTimeParser",
      "right" : "DateTimeParser",
      "info" : "SimpleType[101327-101341]:SimpleType[101517-101531]"
    }, {
      "left" : "MatchingParser",
      "right" : "MatchingParser",
      "info" : "SimpleName[101452-101466]:SimpleName[101642-101656]"
    }, {
      "left" : "DateTimeParser[] parsers",
      "right" : "DateTimeParser[] parsers",
      "info" : "SingleVariableDeclaration[101467-101491]:SingleVariableDeclaration[101657-101681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101493-101951]:Block[101683-102141]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[101507-101515]:SuperConstructorInvocation[101697-101705]"
    }, {
      "left" : "iParsers = parsers;",
      "right" : "iParsers = parsers;",
      "info" : "ExpressionStatement[101528-101547]:ExpressionStatement[101718-101737]"
    }, {
      "left" : "int est = 0;",
      "right" : "int est = 0;",
      "info" : "VariableDeclarationStatement[101560-101572]:VariableDeclarationStatement[101750-101762]"
    }, {
      "left" : "for (int i=parsers.length; --i>=0)",
      "right" : "for (int i=parsers.length; --i>=0)",
      "info" : "ForStatement[101585-101900]:ForStatement[101775-102090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101622-101900]:Block[101812-102090]"
    }, {
      "left" : "DateTimeParser parser = parsers[i];",
      "right" : "DateTimeParser parser = parsers[i];",
      "info" : "VariableDeclarationStatement[101640-101675]:VariableDeclarationStatement[101830-101865]"
    }, {
      "left" : "if (parser != null)",
      "right" : "if (parser != null)",
      "info" : "IfStatement[101692-101886]:IfStatement[101882-102076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101712-101886]:Block[101902-102076]"
    }, {
      "left" : "int len = parser.estimateParsedLength();",
      "right" : "int len = parser.estimateParsedLength();",
      "info" : "VariableDeclarationStatement[101734-101774]:VariableDeclarationStatement[101924-101964]"
    }, {
      "left" : "if (len > est)",
      "right" : "if (len > est)",
      "info" : "IfStatement[101795-101868]:IfStatement[101985-102058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101810-101868]:Block[102000-102058]"
    }, {
      "left" : "est = len;",
      "right" : "est = len;",
      "info" : "ExpressionStatement[101836-101846]:ExpressionStatement[102026-102036]"
    }, {
      "left" : "iParsedLengthEstimate = est;",
      "right" : "iParsedLengthEstimate = est;",
      "info" : "ExpressionStatement[101913-101941]:ExpressionStatement[102103-102131]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[101961-101967]:Modifier[102151-102157]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[101968-101971]:PrimitiveType[102158-102161]"
    }, {
      "left" : "estimateParsedLength",
      "right" : "estimateParsedLength",
      "info" : "SimpleName[101972-101992]:SimpleName[102162-102182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101995-102048]:Block[102185-102238]"
    }, {
      "left" : "return iParsedLengthEstimate;",
      "right" : "return iParsedLengthEstimate;",
      "info" : "ReturnStatement[102009-102038]:ReturnStatement[102199-102228]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[102058-102064]:Modifier[102248-102254]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[102065-102068]:PrimitiveType[102255-102258]"
    }, {
      "left" : "parseInto",
      "right" : "parseInto",
      "info" : "SimpleName[102069-102078]:SimpleName[102259-102268]"
    }, {
      "left" : "DateTimeParserBucket bucket",
      "right" : "DateTimeParserBucket bucket",
      "info" : "SingleVariableDeclaration[102079-102106]:SingleVariableDeclaration[102269-102296]"
    }, {
      "left" : "String text",
      "right" : "String text",
      "info" : "SingleVariableDeclaration[102108-102119]:SingleVariableDeclaration[102298-102309]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[102121-102133]:SingleVariableDeclaration[102311-102323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102135-104218]:Block[102325-104408]"
    }, {
      "left" : "DateTimeParser[] parsers = iParsers;",
      "right" : "DateTimeParser[] parsers = iParsers;",
      "info" : "VariableDeclarationStatement[102149-102185]:VariableDeclarationStatement[102339-102375]"
    }, {
      "left" : "int length = parsers.length;",
      "right" : "int length = parsers.length;",
      "info" : "VariableDeclarationStatement[102198-102226]:VariableDeclarationStatement[102388-102416]"
    }, {
      "left" : "final Object originalState = bucket.saveState();",
      "right" : "final Object originalState = bucket.saveState();",
      "info" : "VariableDeclarationStatement[102240-102288]:VariableDeclarationStatement[102430-102478]"
    }, {
      "left" : "boolean isOptional = false;",
      "right" : "boolean isOptional = false;",
      "info" : "VariableDeclarationStatement[102301-102328]:VariableDeclarationStatement[102491-102518]"
    }, {
      "left" : "int bestValidPos = position;",
      "right" : "int bestValidPos = position;",
      "info" : "VariableDeclarationStatement[102342-102370]:VariableDeclarationStatement[102532-102560]"
    }, {
      "left" : "Object bestValidState = null;",
      "right" : "Object bestValidState = null;",
      "info" : "VariableDeclarationStatement[102383-102412]:VariableDeclarationStatement[102573-102602]"
    }, {
      "left" : "int bestInvalidPos = position;",
      "right" : "int bestInvalidPos = position;",
      "info" : "VariableDeclarationStatement[102426-102456]:VariableDeclarationStatement[102616-102646]"
    }, {
      "left" : "for (int i=0; i<length; i++)",
      "right" : "for (int i=0; i<length; i++)",
      "info" : "ForStatement[102470-103849]:ForStatement[102660-104039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102499-103849]:Block[102689-104039]"
    }, {
      "left" : "DateTimeParser parser = parsers[i];",
      "right" : "DateTimeParser parser = parsers[i];",
      "info" : "VariableDeclarationStatement[102517-102552]:VariableDeclarationStatement[102707-102742]"
    }, {
      "left" : "if (parser == null)",
      "right" : "if (parser == null)",
      "info" : "IfStatement[102569-102861]:IfStatement[102759-103051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102589-102861]:Block[102779-103051]"
    }, {
      "left" : "if (bestValidPos <= position)",
      "right" : "if (bestValidPos <= position)",
      "info" : "IfStatement[102683-102777]:IfStatement[102873-102967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102713-102777]:Block[102903-102967]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[102739-102755]:ReturnStatement[102929-102945]"
    }, {
      "left" : "isOptional = true;",
      "right" : "isOptional = true;",
      "info" : "ExpressionStatement[102798-102816]:ExpressionStatement[102988-103006]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[102837-102843]:BreakStatement[103027-103033]"
    }, {
      "left" : "int parsePos = parser.parseInto(bucket, text, position);",
      "right" : "int parsePos = parser.parseInto(bucket, text, position);",
      "info" : "VariableDeclarationStatement[102878-102934]:VariableDeclarationStatement[103068-103124]"
    }, {
      "left" : "if (parsePos >= position)",
      "right" : "if (parsePos >= position)",
      "info" : "IfStatement[102951-103783]:IfStatement[103141-103973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102977-103512]:Block[103167-103702]"
    }, {
      "left" : "if (parsePos > bestValidPos)",
      "right" : "if (parsePos > bestValidPos)",
      "info" : "IfStatement[102999-103494]:IfStatement[103189-103684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103028-103494]:Block[103218-103684]"
    }, {
      "left" : "if (parsePos >= text.length() ||\n                            (i + 1) >= length || parsers[i + 1] == null)",
      "right" : "if (parsePos >= text.length() ||\n                            (i + 1) >= length || parsers[i + 1] == null)",
      "info" : "IfStatement[103054-103362]:IfStatement[103244-103552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103160-103362]:Block[103350-103552]"
    }, {
      "left" : "return parsePos;",
      "right" : "return parsePos;",
      "info" : "ReturnStatement[103320-103336]:ReturnStatement[103510-103526]"
    }, {
      "left" : "bestValidPos = parsePos;",
      "right" : "bestValidPos = parsePos;",
      "info" : "ExpressionStatement[103387-103411]:ExpressionStatement[103577-103601]"
    }, {
      "left" : "bestValidState = bucket.saveState();",
      "right" : "bestValidState = bucket.saveState();",
      "info" : "ExpressionStatement[103436-103472]:ExpressionStatement[103626-103662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103518-103783]:Block[103708-103973]"
    }, {
      "left" : "if (parsePos < 0)",
      "right" : "if (parsePos < 0)",
      "info" : "IfStatement[103540-103765]:IfStatement[103730-103955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103558-103765]:Block[103748-103955]"
    }, {
      "left" : "parsePos = ~parsePos;",
      "right" : "parsePos = ~parsePos;",
      "info" : "ExpressionStatement[103584-103605]:ExpressionStatement[103774-103795]"
    }, {
      "left" : "if (parsePos > bestInvalidPos)",
      "right" : "if (parsePos > bestInvalidPos)",
      "info" : "IfStatement[103630-103743]:IfStatement[103820-103933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103661-103743]:Block[103851-103933]"
    }, {
      "left" : "bestInvalidPos = parsePos;",
      "right" : "bestInvalidPos = parsePos;",
      "info" : "ExpressionStatement[103691-103717]:ExpressionStatement[103881-103907]"
    }, {
      "left" : "bucket.restoreState(originalState);",
      "right" : "bucket.restoreState(originalState);",
      "info" : "ExpressionStatement[103800-103835]:ExpressionStatement[103990-104025]"
    }, {
      "left" : "if (bestValidPos > position || (bestValidPos == position && isOptional))",
      "right" : "if (bestValidPos > position || (bestValidPos == position && isOptional))",
      "info" : "IfStatement[103863-104171]:IfStatement[104053-104361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103936-104171]:Block[104126-104361]"
    }, {
      "left" : "if (bestValidState != null)",
      "right" : "if (bestValidState != null)",
      "info" : "IfStatement[104016-104120]:IfStatement[104206-104310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104044-104120]:Block[104234-104310]"
    }, {
      "left" : "bucket.restoreState(bestValidState);",
      "right" : "bucket.restoreState(bestValidState);",
      "info" : "ExpressionStatement[104066-104102]:ExpressionStatement[104256-104292]"
    }, {
      "left" : "return bestValidPos;",
      "right" : "return bestValidPos;",
      "info" : "ReturnStatement[104137-104157]:ReturnStatement[104327-104347]"
    }, {
      "left" : "return ~bestInvalidPos;",
      "right" : "return ~bestInvalidPos;",
      "info" : "ReturnStatement[104185-104208]:ReturnStatement[104375-104398]"
    } ]
  },
  "interFileMappings" : { }
}