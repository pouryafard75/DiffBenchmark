{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public ClassNameIdResolver(JavaType baseType, TypeFactory typeFactory)",
      "right" : "public ClassNameIdResolver(JavaType baseType, TypeFactory typeFactory)",
      "info" : "MethodDeclaration[550-666]:MethodDeclaration[550-666]"
    }, {
      "left" : "public JsonTypeInfo.Id getMechanism()",
      "right" : "public JsonTypeInfo.Id getMechanism()",
      "info" : "MethodDeclaration[672-757]:MethodDeclaration[672-757]"
    }, {
      "left" : "public void registerSubtype(Class<?> type, String name)",
      "right" : "public void registerSubtype(Class<?> type, String name)",
      "info" : "MethodDeclaration[763-880]:MethodDeclaration[763-880]"
    }, {
      "left" : "public String idFromValue(Object value)",
      "right" : "public String idFromValue(Object value)",
      "info" : "MethodDeclaration[890-1014]:MethodDeclaration[890-1014]"
    }, {
      "left" : "public String idFromValueAndType(Object value, Class<?> type)",
      "right" : "public String idFromValueAndType(Object value, Class<?> type)",
      "info" : "MethodDeclaration[1020-1154]:MethodDeclaration[1020-1154]"
    }, {
      "left" : "public JavaType typeFromId(DatabindContext context, String id) throws IOException",
      "right" : "public JavaType typeFromId(DatabindContext context, String id) throws IOException",
      "info" : "MethodDeclaration[1160-1304]:MethodDeclaration[1160-1304]"
    }, {
      "left" : "protected final String _idFrom(Object value, Class<?> cls, TypeFactory typeFactory)",
      "right" : "protected final String _idFrom(Object value, Class<?> cls, TypeFactory typeFactory)",
      "info" : "MethodDeclaration[3248-6665]:MethodDeclaration[3487-6904]"
    }, {
      "left" : "public String getDescForKnownTypeIds()",
      "right" : "public String getDescForKnownTypeIds()",
      "info" : "MethodDeclaration[6671-6776]:MethodDeclaration[6910-7015]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[621-666]:Block[621-666]"
    }, {
      "left" : "super(baseType, typeFactory);",
      "right" : "super(baseType, typeFactory);",
      "info" : "SuperConstructorInvocation[631-660]:SuperConstructorInvocation[631-660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[724-757]:Block[724-757]"
    }, {
      "left" : "return JsonTypeInfo.Id.CLASS;",
      "right" : "return JsonTypeInfo.Id.CLASS;",
      "info" : "ReturnStatement[726-755]:ReturnStatement[726-755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[819-880]:Block[819-880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[944-1014]:Block[944-1014]"
    }, {
      "left" : "return _idFrom(value, value.getClass(), _typeFactory);",
      "right" : "return _idFrom(value, value.getClass(), _typeFactory);",
      "info" : "ReturnStatement[954-1008]:ReturnStatement[954-1008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1096-1154]:Block[1096-1154]"
    }, {
      "left" : "return _idFrom(value, type, _typeFactory);",
      "right" : "return _idFrom(value, type, _typeFactory);",
      "info" : "ReturnStatement[1106-1148]:ReturnStatement[1106-1148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1256-1304]:Block[1256-1304]"
    }, {
      "left" : "return _typeFromId(id, context);",
      "right" : "return _typeFromId(id, context);",
      "info" : "ReturnStatement[1266-1298]:ReturnStatement[1266-1298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3336-6665]:Block[3575-6904]"
    }, {
      "left" : "if (Enum.class.isAssignableFrom(cls))",
      "right" : "if (Enum.class.isAssignableFrom(cls))",
      "info" : "IfStatement[3402-3588]:IfStatement[3641-3827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3440-3588]:Block[3679-3827]"
    }, {
      "left" : "if (!cls.isEnum())",
      "right" : "if (!cls.isEnum())",
      "info" : "IfStatement[3454-3578]:IfStatement[3693-3817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3473-3578]:Block[3712-3817]"
    }, {
      "left" : "cls = cls.getSuperclass();",
      "right" : "cls = cls.getSuperclass();",
      "info" : "ExpressionStatement[3538-3564]:ExpressionStatement[3777-3803]"
    }, {
      "left" : "String str = cls.getName();",
      "right" : "String str = cls.getName();",
      "info" : "VariableDeclarationStatement[3597-3624]:VariableDeclarationStatement[3836-3863]"
    }, {
      "left" : "if (str.startsWith(\"java.util\"))",
      "right" : "if (str.startsWith(\"java.util\"))",
      "info" : "IfStatement[3633-6639]:IfStatement[3872-6878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3666-5466]:Block[3905-5705]"
    }, {
      "left" : "if (value instanceof EnumSet<?>)",
      "right" : "if (value instanceof EnumSet<?>)",
      "info" : "IfStatement[4050-5456]:IfStatement[4289-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4083-4402]:Block[4322-4641]"
    }, {
      "left" : "Class<?> enumClass = ClassUtil.findEnumType((EnumSet<?>) value);",
      "right" : "Class<?> enumClass = ClassUtil.findEnumType((EnumSet<?>) value);",
      "info" : "VariableDeclarationStatement[4133-4197]:VariableDeclarationStatement[4372-4436]"
    }, {
      "left" : "str = typeFactory.constructCollectionType(EnumSet.class, enumClass).toCanonical();",
      "right" : "str = typeFactory.constructCollectionType(EnumSet.class, enumClass).toCanonical();",
      "info" : "ExpressionStatement[4306-4388]:ExpressionStatement[4545-4627]"
    }, {
      "left" : "if (value instanceof EnumMap<?,?>)",
      "right" : "if (value instanceof EnumMap<?,?>)",
      "info" : "IfStatement[4408-5456]:IfStatement[4647-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4443-4790]:Block[4682-5029]"
    }, {
      "left" : "Class<?> enumClass = ClassUtil.findEnumType((EnumMap<?,?>) value);",
      "right" : "Class<?> enumClass = ClassUtil.findEnumType((EnumMap<?,?>) value);",
      "info" : "VariableDeclarationStatement[4461-4527]:VariableDeclarationStatement[4700-4766]"
    }, {
      "left" : "Class<?> valueClass = Object.class;",
      "right" : "Class<?> valueClass = Object.class;",
      "info" : "VariableDeclarationStatement[4544-4579]:VariableDeclarationStatement[4783-4818]"
    }, {
      "left" : "str = typeFactory.constructMapType(EnumMap.class, enumClass, valueClass).toCanonical();",
      "right" : "str = typeFactory.constructMapType(EnumMap.class, enumClass, valueClass).toCanonical();",
      "info" : "ExpressionStatement[4689-4776]:ExpressionStatement[4928-5015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4796-5456]:Block[5035-5695]"
    }, {
      "left" : "String end = str.substring(9);",
      "right" : "String end = str.substring(9);",
      "info" : "VariableDeclarationStatement[4814-4844]:VariableDeclarationStatement[5053-5083]"
    }, {
      "left" : "if ((end.startsWith(\".Arrays$\") || end.startsWith(\".Collections$\"))\n                       && str.indexOf(\"List\") >= 0)",
      "right" : "if ((end.startsWith(\".Arrays$\") || end.startsWith(\".Collections$\"))\n                       && str.indexOf(\"List\") >= 0)",
      "info" : "IfStatement[4861-5442]:IfStatement[5100-5681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4981-5442]:Block[5220-5681]"
    }, {
      "left" : "str = \"java.util.ArrayList\";",
      "right" : "str = \"java.util.ArrayList\";",
      "info" : "ExpressionStatement[5396-5424]:ExpressionStatement[5635-5663]"
    }, {
      "left" : "if (str.indexOf('$') >= 0)",
      "right" : "if (str.indexOf('$') >= 0)",
      "info" : "IfStatement[5472-6639]:IfStatement[5711-6878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5499-6639]:Block[5738-6878]"
    }, {
      "left" : "Class<?> outer = ClassUtil.getOuterClass(cls);",
      "right" : "Class<?> outer = ClassUtil.getOuterClass(cls);",
      "info" : "VariableDeclarationStatement[5990-6036]:VariableDeclarationStatement[6229-6275]"
    }, {
      "left" : "if (outer != null)",
      "right" : "if (outer != null)",
      "info" : "IfStatement[6049-6629]:IfStatement[6288-6868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6068-6629]:Block[6307-6868]"
    }, {
      "left" : "Class<?> staticType = _baseType.getRawClass();",
      "right" : "Class<?> staticType = _baseType.getRawClass();",
      "info" : "VariableDeclarationStatement[6318-6364]:VariableDeclarationStatement[6557-6603]"
    }, {
      "left" : "if (ClassUtil.getOuterClass(staticType) == null)",
      "right" : "if (ClassUtil.getOuterClass(staticType) == null)",
      "info" : "IfStatement[6381-6615]:IfStatement[6620-6854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6430-6615]:Block[6669-6854]"
    }, {
      "left" : "cls = _baseType.getRawClass();",
      "right" : "cls = _baseType.getRawClass();",
      "info" : "ExpressionStatement[6526-6556]:ExpressionStatement[6765-6795]"
    }, {
      "left" : "str = cls.getName();",
      "right" : "str = cls.getName();",
      "info" : "ExpressionStatement[6577-6597]:ExpressionStatement[6816-6836]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[6648-6659]:ReturnStatement[6887-6898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6724-6776]:Block[6963-7015]"
    }, {
      "left" : "return \"class name used as type id\";",
      "right" : "return \"class name used as type id\";",
      "info" : "ReturnStatement[6734-6770]:ReturnStatement[6973-7009]"
    } ]
  },
  "interFileMappings" : { }
}