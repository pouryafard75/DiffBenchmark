{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final List<Node> EMPTY_NODES = Collections.emptyList();",
      "right" : "private static final List<Node> EMPTY_NODES = Collections.emptyList();",
      "info" : "FieldDeclaration[1191-1261]:FieldDeclaration[1191-1261]"
    }, {
      "left" : "private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");",
      "right" : "private static final Pattern classSplit = Pattern.compile(\"\\\\s+\");",
      "info" : "FieldDeclaration[1266-1332]:FieldDeclaration[1266-1332]"
    }, {
      "left" : "private Tag tag;",
      "right" : "private Tag tag;",
      "info" : "FieldDeclaration[1337-1353]:FieldDeclaration[1337-1353]"
    }, {
      "left" : "private WeakReference<List<Element>> shadowChildrenRef;",
      "right" : "private WeakReference<List<Element>> shadowChildrenRef;",
      "info" : "FieldDeclaration[1358-1413]:FieldDeclaration[1358-1413]"
    }, {
      "left" : "List<Node> childNodes;",
      "right" : "List<Node> childNodes;",
      "info" : "FieldDeclaration[1474-1496]:FieldDeclaration[1474-1496]"
    }, {
      "left" : "private Attributes attributes;",
      "right" : "private Attributes attributes;",
      "info" : "FieldDeclaration[1501-1531]:FieldDeclaration[1501-1531]"
    }, {
      "left" : "private String baseUri;",
      "right" : "private String baseUri;",
      "info" : "FieldDeclaration[1536-1559]:FieldDeclaration[1536-1559]"
    }, {
      "left" : "public Element(String tag)",
      "right" : "public Element(String tag)",
      "info" : "MethodDeclaration[1565-1737]:MethodDeclaration[1565-1737]"
    }, {
      "left" : "public Element(Tag tag, String baseUri, Attributes attributes)",
      "right" : "public Element(Tag tag, String baseUri, Attributes attributes)",
      "info" : "MethodDeclaration[1743-2294]:MethodDeclaration[1743-2294]"
    }, {
      "left" : "public Element(Tag tag, String baseUri)",
      "right" : "public Element(Tag tag, String baseUri)",
      "info" : "MethodDeclaration[2304-2682]:MethodDeclaration[2304-2682]"
    }, {
      "left" : "protected List<Node> ensureChildNodes()",
      "right" : "protected List<Node> ensureChildNodes()",
      "info" : "MethodDeclaration[2688-2861]:MethodDeclaration[2688-2861]"
    }, {
      "left" : "protected boolean hasAttributes()",
      "right" : "protected boolean hasAttributes()",
      "info" : "MethodDeclaration[2867-2957]:MethodDeclaration[2867-2957]"
    }, {
      "left" : "public Attributes attributes()",
      "right" : "public Attributes attributes()",
      "info" : "MethodDeclaration[2963-3115]:MethodDeclaration[2963-3115]"
    }, {
      "left" : "public String baseUri()",
      "right" : "public String baseUri()",
      "info" : "MethodDeclaration[3121-3190]:MethodDeclaration[3121-3190]"
    }, {
      "left" : "protected void doSetBaseUri(String baseUri)",
      "right" : "protected void doSetBaseUri(String baseUri)",
      "info" : "MethodDeclaration[3196-3293]:MethodDeclaration[3196-3293]"
    }, {
      "left" : "public int childNodeSize()",
      "right" : "public int childNodeSize()",
      "info" : "MethodDeclaration[3299-3381]:MethodDeclaration[3299-3381]"
    }, {
      "left" : "public String nodeName()",
      "right" : "public String nodeName()",
      "info" : "MethodDeclaration[3387-3463]:MethodDeclaration[3387-3463]"
    }, {
      "left" : "public String tagName()",
      "right" : "public String tagName()",
      "info" : "MethodDeclaration[3469-3778]:MethodDeclaration[3469-3778]"
    }, {
      "left" : "public Element tagName(String tagName)",
      "right" : "public Element tagName(String tagName)",
      "info" : "MethodDeclaration[3993-4502]:MethodDeclaration[4065-4574]"
    }, {
      "left" : "public Tag tag()",
      "right" : "public Tag tag()",
      "info" : "MethodDeclaration[4508-4643]:MethodDeclaration[4580-4715]"
    }, {
      "left" : "public boolean isBlock()",
      "right" : "public boolean isBlock()",
      "info" : "MethodDeclaration[4653-4933]:MethodDeclaration[4725-5005]"
    }, {
      "left" : "public String id()",
      "right" : "public String id()",
      "info" : "MethodDeclaration[4939-5163]:MethodDeclaration[5011-5235]"
    }, {
      "left" : "public Element attr(String attributeKey, String attributeValue)",
      "right" : "public Element attr(String attributeKey, String attributeValue)",
      "info" : "MethodDeclaration[5169-5531]:MethodDeclaration[5241-5603]"
    }, {
      "left" : "public Element attr(String attributeKey, boolean attributeValue)",
      "right" : "public Element attr(String attributeKey, boolean attributeValue)",
      "info" : "MethodDeclaration[5541-6119]:MethodDeclaration[5613-6191]"
    }, {
      "left" : "public Map<String, String> dataset()",
      "right" : "public Map<String, String> dataset()",
      "info" : "MethodDeclaration[6125-6897]:MethodDeclaration[6197-6969]"
    }, {
      "left" : "public final Element parent()",
      "right" : "public final Element parent()",
      "info" : "MethodDeclaration[6903-6991]:MethodDeclaration[6975-7063]"
    }, {
      "left" : "public Elements parents()",
      "right" : "public Elements parents()",
      "info" : "MethodDeclaration[6997-7291]:MethodDeclaration[7069-7363]"
    }, {
      "left" : "private static void accumulateParents(Element el, Elements parents)",
      "right" : "private static void accumulateParents(Element el, Elements parents)",
      "info" : "MethodDeclaration[7297-7568]:MethodDeclaration[7369-7640]"
    }, {
      "left" : "public Element child(int index)",
      "right" : "public Element child(int index)",
      "info" : "MethodDeclaration[7574-8175]:MethodDeclaration[7646-8247]"
    }, {
      "left" : "public Elements children()",
      "right" : "public Elements children()",
      "info" : "MethodDeclaration[8181-8542]:MethodDeclaration[8253-8614]"
    }, {
      "left" : "private List<Element> childElementsList()",
      "right" : "private List<Element> childElementsList()",
      "info" : "MethodDeclaration[8548-9528]:MethodDeclaration[8620-9600]"
    }, {
      "left" : "void nodelistChanged()",
      "right" : "void nodelistChanged()",
      "info" : "MethodDeclaration[9534-9709]:MethodDeclaration[9606-9781]"
    }, {
      "left" : "public List<TextNode> textNodes()",
      "right" : "public List<TextNode> textNodes()",
      "info" : "MethodDeclaration[9715-10895]:MethodDeclaration[9787-10967]"
    }, {
      "left" : "public List<DataNode> dataNodes()",
      "right" : "public List<DataNode> dataNodes()",
      "info" : "MethodDeclaration[10901-11536]:MethodDeclaration[10973-11608]"
    }, {
      "left" : "public Elements select(String cssQuery)",
      "right" : "public Elements select(String cssQuery)",
      "info" : "MethodDeclaration[11542-12597]:MethodDeclaration[11614-12669]"
    }, {
      "left" : "public Element selectFirst(String cssQuery)",
      "right" : "public Element selectFirst(String cssQuery)",
      "info" : "MethodDeclaration[12603-13160]:MethodDeclaration[12675-13232]"
    }, {
      "left" : "public boolean is(String cssQuery)",
      "right" : "public boolean is(String cssQuery)",
      "info" : "MethodDeclaration[13166-13448]:MethodDeclaration[13238-13520]"
    }, {
      "left" : "public boolean is(Evaluator evaluator)",
      "right" : "public boolean is(Evaluator evaluator)",
      "info" : "MethodDeclaration[13454-13720]:MethodDeclaration[13526-13792]"
    }, {
      "left" : "public Element appendChild(Node child)",
      "right" : "public Element appendChild(Node child)",
      "info" : "MethodDeclaration[13730-14241]:MethodDeclaration[13802-14313]"
    }, {
      "left" : "public Element appendTo(Element parent)",
      "right" : "public Element appendTo(Element parent)",
      "info" : "MethodDeclaration[14247-14625]:MethodDeclaration[14319-14697]"
    }, {
      "left" : "public Element prependChild(Node child)",
      "right" : "public Element prependChild(Node child)",
      "info" : "MethodDeclaration[14631-14967]:MethodDeclaration[14703-15039]"
    }, {
      "left" : "public Element insertChildren(int index, Collection<? extends Node> children)",
      "right" : "public Element insertChildren(int index, Collection<? extends Node> children)",
      "info" : "MethodDeclaration[14974-16008]:MethodDeclaration[15046-16080]"
    }, {
      "left" : "public Element insertChildren(int index, Node... children)",
      "right" : "public Element insertChildren(int index, Node... children)",
      "info" : "MethodDeclaration[16014-16903]:MethodDeclaration[16086-16975]"
    }, {
      "left" : "public Element appendElement(String tagName)",
      "right" : "public Element appendElement(String tagName)",
      "info" : "MethodDeclaration[16913-17431]:MethodDeclaration[16985-17503]"
    }, {
      "left" : "public Element prependElement(String tagName)",
      "right" : "public Element prependElement(String tagName)",
      "info" : "MethodDeclaration[17441-17963]:MethodDeclaration[17513-18035]"
    }, {
      "left" : "public Element appendText(String text)",
      "right" : "public Element appendText(String text)",
      "info" : "MethodDeclaration[17973-18297]:MethodDeclaration[18045-18369]"
    }, {
      "left" : "public Element prependText(String text)",
      "right" : "public Element prependText(String text)",
      "info" : "MethodDeclaration[18307-18634]:MethodDeclaration[18379-18706]"
    }, {
      "left" : "public Element append(String html)",
      "right" : "public Element append(String html)",
      "info" : "MethodDeclaration[18644-19162]:MethodDeclaration[18716-19234]"
    }, {
      "left" : "public Element prepend(String html)",
      "right" : "public Element prepend(String html)",
      "info" : "MethodDeclaration[19172-19710]:MethodDeclaration[19244-19782]"
    }, {
      "left" : "public Element before(String html)",
      "right" : "public Element before(String html)",
      "info" : "MethodDeclaration[19716-20052]:MethodDeclaration[19788-20124]"
    }, {
      "left" : "public Element before(Node node)",
      "right" : "public Element before(Node node)",
      "info" : "MethodDeclaration[20058-20375]:MethodDeclaration[20130-20447]"
    }, {
      "left" : "public Element after(String html)",
      "right" : "public Element after(String html)",
      "info" : "MethodDeclaration[20381-20714]:MethodDeclaration[20453-20786]"
    }, {
      "left" : "public Element after(Node node)",
      "right" : "public Element after(Node node)",
      "info" : "MethodDeclaration[20720-21034]:MethodDeclaration[20792-21106]"
    }, {
      "left" : "public Element empty()",
      "right" : "public Element empty()",
      "info" : "MethodDeclaration[21040-21242]:MethodDeclaration[21112-21314]"
    }, {
      "left" : "public Element wrap(String html)",
      "right" : "public Element wrap(String html)",
      "info" : "MethodDeclaration[21248-21579]:MethodDeclaration[21320-21651]"
    }, {
      "left" : "public String cssSelector()",
      "right" : "public String cssSelector()",
      "info" : "MethodDeclaration[21585-22866]:MethodDeclaration[21657-22938]"
    }, {
      "left" : "public Elements siblingElements()",
      "right" : "public Elements siblingElements()",
      "info" : "MethodDeclaration[22872-23462]:MethodDeclaration[22944-23534]"
    }, {
      "left" : "public Element nextElementSibling()",
      "right" : "public Element nextElementSibling()",
      "info" : "MethodDeclaration[23468-24246]:MethodDeclaration[23540-24318]"
    }, {
      "left" : "public Elements nextElementSiblings()",
      "right" : "public Elements nextElementSiblings()",
      "info" : "MethodDeclaration[24252-24551]:MethodDeclaration[24324-24623]"
    }, {
      "left" : "public Element previousElementSibling()",
      "right" : "public Element previousElementSibling()",
      "info" : "MethodDeclaration[24557-25086]:MethodDeclaration[24629-25158]"
    }, {
      "left" : "public Elements previousElementSiblings()",
      "right" : "public Elements previousElementSiblings()",
      "info" : "MethodDeclaration[25092-25350]:MethodDeclaration[25164-25422]"
    }, {
      "left" : "private Elements nextElementSiblings(boolean next)",
      "right" : "private Elements nextElementSiblings(boolean next)",
      "info" : "MethodDeclaration[25356-25587]:MethodDeclaration[25428-25659]"
    }, {
      "left" : "public Element firstElementSibling()",
      "right" : "public Element firstElementSibling()",
      "info" : "MethodDeclaration[25593-25977]:MethodDeclaration[25665-26049]"
    }, {
      "left" : "public int elementSiblingIndex()",
      "right" : "public int elementSiblingIndex()",
      "info" : "MethodDeclaration[25987-26325]:MethodDeclaration[26059-26397]"
    }, {
      "left" : "public Element lastElementSibling()",
      "right" : "public Element lastElementSibling()",
      "info" : "MethodDeclaration[26331-26675]:MethodDeclaration[26403-26747]"
    }, {
      "left" : "private static <E extends Element> int indexInList(Element search, List<E> elements)",
      "right" : "private static <E extends Element> int indexInList(Element search, List<E> elements)",
      "info" : "MethodDeclaration[26681-26953]:MethodDeclaration[26753-27025]"
    }, {
      "left" : "public Elements getElementsByTag(String tagName)",
      "right" : "public Elements getElementsByTag(String tagName)",
      "info" : "MethodDeclaration[26984-27487]:MethodDeclaration[27056-27559]"
    }, {
      "left" : "public Element getElementById(String id)",
      "right" : "public Element getElementById(String id)",
      "info" : "MethodDeclaration[27493-28275]:MethodDeclaration[27565-28347]"
    }, {
      "left" : "public Elements getElementsByClass(String className)",
      "right" : "public Elements getElementsByClass(String className)",
      "info" : "MethodDeclaration[28281-28967]:MethodDeclaration[28353-29039]"
    }, {
      "left" : "public Elements getElementsByAttribute(String key)",
      "right" : "public Elements getElementsByAttribute(String key)",
      "info" : "MethodDeclaration[28973-29378]:MethodDeclaration[29045-29450]"
    }, {
      "left" : "public Elements getElementsByAttributeStarting(String keyPrefix)",
      "right" : "public Elements getElementsByAttributeStarting(String keyPrefix)",
      "info" : "MethodDeclaration[29384-29955]:MethodDeclaration[29456-30027]"
    }, {
      "left" : "public Elements getElementsByAttributeValue(String key, String value)",
      "right" : "public Elements getElementsByAttributeValue(String key, String value)",
      "info" : "MethodDeclaration[29961-30398]:MethodDeclaration[30033-30470]"
    }, {
      "left" : "public Elements getElementsByAttributeValueNot(String key, String value)",
      "right" : "public Elements getElementsByAttributeValueNot(String key, String value)",
      "info" : "MethodDeclaration[30404-30856]:MethodDeclaration[30476-30928]"
    }, {
      "left" : "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix)",
      "right" : "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix)",
      "info" : "MethodDeclaration[30862-31340]:MethodDeclaration[30934-31412]"
    }, {
      "left" : "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix)",
      "right" : "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix)",
      "info" : "MethodDeclaration[31346-31818]:MethodDeclaration[31418-31890]"
    }, {
      "left" : "public Elements getElementsByAttributeValueContaining(String key, String match)",
      "right" : "public Elements getElementsByAttributeValueContaining(String key, String match)",
      "info" : "MethodDeclaration[31824-32289]:MethodDeclaration[31896-32361]"
    }, {
      "left" : "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern)",
      "right" : "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern)",
      "info" : "MethodDeclaration[32299-32804]:MethodDeclaration[32371-32876]"
    }, {
      "left" : "public Elements getElementsByAttributeValueMatching(String key, String regex)",
      "right" : "public Elements getElementsByAttributeValueMatching(String key, String regex)",
      "info" : "MethodDeclaration[32814-33660]:MethodDeclaration[32886-33732]"
    }, {
      "left" : "public Elements getElementsByIndexLessThan(int index)",
      "right" : "public Elements getElementsByIndexLessThan(int index)",
      "info" : "MethodDeclaration[33670-33971]:MethodDeclaration[33742-34043]"
    }, {
      "left" : "public Elements getElementsByIndexGreaterThan(int index)",
      "right" : "public Elements getElementsByIndexGreaterThan(int index)",
      "info" : "MethodDeclaration[33981-34294]:MethodDeclaration[34053-34366]"
    }, {
      "left" : "public Elements getElementsByIndexEquals(int index)",
      "right" : "public Elements getElementsByIndexEquals(int index)",
      "info" : "MethodDeclaration[34304-34599]:MethodDeclaration[34376-34671]"
    }, {
      "left" : "public Elements getElementsContainingText(String searchText)",
      "right" : "public Elements getElementsContainingText(String searchText)",
      "info" : "MethodDeclaration[34609-35096]:MethodDeclaration[34681-35168]"
    }, {
      "left" : "public Elements getElementsContainingOwnText(String searchText)",
      "right" : "public Elements getElementsContainingOwnText(String searchText)",
      "info" : "MethodDeclaration[35106-35617]:MethodDeclaration[35178-35689]"
    }, {
      "left" : "public Elements getElementsMatchingText(Pattern pattern)",
      "right" : "public Elements getElementsMatchingText(Pattern pattern)",
      "info" : "MethodDeclaration[35627-36008]:MethodDeclaration[35699-36080]"
    }, {
      "left" : "public Elements getElementsMatchingText(String regex)",
      "right" : "public Elements getElementsMatchingText(String regex)",
      "info" : "MethodDeclaration[36018-36765]:MethodDeclaration[36090-36837]"
    }, {
      "left" : "public Elements getElementsMatchingOwnText(Pattern pattern)",
      "right" : "public Elements getElementsMatchingOwnText(Pattern pattern)",
      "info" : "MethodDeclaration[36775-37169]:MethodDeclaration[36847-37241]"
    }, {
      "left" : "public Elements getElementsMatchingOwnText(String regex)",
      "right" : "public Elements getElementsMatchingOwnText(String regex)",
      "info" : "MethodDeclaration[37179-37935]:MethodDeclaration[37251-38007]"
    }, {
      "left" : "public Elements getAllElements()",
      "right" : "public Elements getAllElements()",
      "info" : "MethodDeclaration[37945-38194]:MethodDeclaration[38017-38266]"
    }, {
      "left" : "public String text()",
      "right" : "public String text()",
      "info" : "MethodDeclaration[38200-39963]:MethodDeclaration[38272-40035]"
    }, {
      "left" : "public void head(Node node, int depth)",
      "right" : "public void head(Node node, int depth)",
      "info" : "MethodDeclaration[38801-39382]:MethodDeclaration[38873-39454]"
    }, {
      "left" : "public void tail(Node node, int depth)",
      "right" : "public void tail(Node node, int depth)",
      "info" : "MethodDeclaration[39396-39882]:MethodDeclaration[39468-39954]"
    }, {
      "left" : "public String wholeText()",
      "right" : "public String wholeText()",
      "info" : "MethodDeclaration[39969-40721]:MethodDeclaration[40041-40793]"
    }, {
      "left" : "public void head(Node node, int depth)",
      "right" : "public void head(Node node, int depth)",
      "info" : "MethodDeclaration[40343-40579]:MethodDeclaration[40415-40651]"
    }, {
      "left" : "public void tail(Node node, int depth)",
      "right" : "public void tail(Node node, int depth)",
      "info" : "MethodDeclaration[40593-40647]:MethodDeclaration[40665-40719]"
    }, {
      "left" : "public String ownText()",
      "right" : "public String ownText()",
      "info" : "MethodDeclaration[40727-41434]:MethodDeclaration[40799-41506]"
    }, {
      "left" : "private void ownText(StringBuilder accum)",
      "right" : "private void ownText(StringBuilder accum)",
      "info" : "MethodDeclaration[41440-41820]:MethodDeclaration[41512-41892]"
    }, {
      "left" : "private static void appendNormalisedText(StringBuilder accum, TextNode textNode)",
      "right" : "private static void appendNormalisedText(StringBuilder accum, TextNode textNode)",
      "info" : "MethodDeclaration[41826-42195]:MethodDeclaration[41898-42267]"
    }, {
      "left" : "private static void appendWhitespaceIfBr(Element element, StringBuilder accum)",
      "right" : "private static void appendWhitespaceIfBr(Element element, StringBuilder accum)",
      "info" : "MethodDeclaration[42201-42407]:MethodDeclaration[42273-42479]"
    }, {
      "left" : "static boolean preserveWhitespace(Node node)",
      "right" : "static boolean preserveWhitespace(Node node)",
      "info" : "MethodDeclaration[42413-42902]:MethodDeclaration[42485-42974]"
    }, {
      "left" : "public Element text(String text)",
      "right" : "public Element text(String text)",
      "info" : "MethodDeclaration[42908-43271]:MethodDeclaration[42980-43343]"
    }, {
      "left" : "public boolean hasText()",
      "right" : "public boolean hasText()",
      "info" : "MethodDeclaration[43277-43882]:MethodDeclaration[43349-43954]"
    }, {
      "left" : "public String data()",
      "right" : "public String data()",
      "info" : "MethodDeclaration[43888-45362]:MethodDeclaration[43960-45434]"
    }, {
      "left" : "public String className()",
      "right" : "public String className()",
      "info" : "MethodDeclaration[45371-45773]:MethodDeclaration[45443-45845]"
    }, {
      "left" : "public Set<String> classNames()",
      "right" : "public Set<String> classNames()",
      "info" : "MethodDeclaration[45779-46461]:MethodDeclaration[45851-46533]"
    }, {
      "left" : "public Element classNames(Set<String> classNames)",
      "right" : "public Element classNames(Set<String> classNames)",
      "info" : "MethodDeclaration[46467-46931]:MethodDeclaration[46539-47003]"
    }, {
      "left" : "// performance sensitive\n    public boolean hasClass(String className)",
      "right" : "// performance sensitive\n    public boolean hasClass(String className)",
      "info" : "MethodDeclaration[46937-48672]:MethodDeclaration[47009-48744]"
    }, {
      "left" : "public Element addClass(String className)",
      "right" : "public Element addClass(String className)",
      "info" : "MethodDeclaration[48678-49039]:MethodDeclaration[48750-49111]"
    }, {
      "left" : "public Element removeClass(String className)",
      "right" : "public Element removeClass(String className)",
      "info" : "MethodDeclaration[49045-49420]:MethodDeclaration[49117-49492]"
    }, {
      "left" : "public Element toggleClass(String className)",
      "right" : "public Element toggleClass(String className)",
      "info" : "MethodDeclaration[49426-49934]:MethodDeclaration[49498-50006]"
    }, {
      "left" : "public String val()",
      "right" : "public String val()",
      "info" : "MethodDeclaration[49944-50240]:MethodDeclaration[50016-50312]"
    }, {
      "left" : "public Element val(String value)",
      "right" : "public Element val(String value)",
      "info" : "MethodDeclaration[50250-50580]:MethodDeclaration[50322-50652]"
    }, {
      "left" : "void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException",
      "right" : "void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException",
      "info" : "MethodDeclaration[50586-51592]:MethodDeclaration[50658-51664]"
    }, {
      "left" : "void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException",
      "right" : "void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException",
      "info" : "MethodDeclaration[51595-52110]:MethodDeclaration[51667-52182]"
    }, {
      "left" : "public String html()",
      "right" : "public String html()",
      "info" : "MethodDeclaration[52116-52645]:MethodDeclaration[52188-52717]"
    }, {
      "left" : "public <T extends Appendable> T html(T appendable)",
      "right" : "public <T extends Appendable> T html(T appendable)",
      "info" : "MethodDeclaration[52651-52887]:MethodDeclaration[52723-52959]"
    }, {
      "left" : "public Element html(String html)",
      "right" : "public Element html(String html)",
      "info" : "MethodDeclaration[52897-53198]:MethodDeclaration[52969-53270]"
    }, {
      "left" : "public Element clone()",
      "right" : "public Element clone()",
      "info" : "MethodDeclaration[53204-53288]:MethodDeclaration[53276-53360]"
    }, {
      "left" : "public Element shallowClone()",
      "right" : "public Element shallowClone()",
      "info" : "MethodDeclaration[53294-53471]:MethodDeclaration[53366-53543]"
    }, {
      "left" : "protected Element doClone(Node parent)",
      "right" : "protected Element doClone(Node parent)",
      "info" : "MethodDeclaration[53477-53896]:MethodDeclaration[53549-53968]"
    }, {
      "left" : "NodeList",
      "right" : "NodeList",
      "info" : "TypeDeclaration[53902-54245]:TypeDeclaration[53974-54317]"
    }, {
      "left" : "private final Element owner;",
      "right" : "private final Element owner;",
      "info" : "FieldDeclaration[53987-54015]:FieldDeclaration[54059-54087]"
    }, {
      "left" : "NodeList(Element owner, int initialCapacity)",
      "right" : "NodeList(Element owner, int initialCapacity)",
      "info" : "MethodDeclaration[54025-54149]:MethodDeclaration[54097-54221]"
    }, {
      "left" : "public void onContentsChanged()",
      "right" : "public void onContentsChanged()",
      "info" : "MethodDeclaration[54159-54239]:MethodDeclaration[54231-54311]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1676-1737]:Block[1676-1737]"
    }, {
      "left" : "this(Tag.valueOf(tag), \"\", new Attributes());",
      "right" : "this(Tag.valueOf(tag), \"\", new Attributes());",
      "info" : "ConstructorInvocation[1686-1731]:ConstructorInvocation[1686-1731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2093-2294]:Block[2093-2294]"
    }, {
      "left" : "Validate.notNull(tag);",
      "right" : "Validate.notNull(tag);",
      "info" : "ExpressionStatement[2103-2125]:ExpressionStatement[2103-2125]"
    }, {
      "left" : "Validate.notNull(baseUri);",
      "right" : "Validate.notNull(baseUri);",
      "info" : "ExpressionStatement[2134-2160]:ExpressionStatement[2134-2160]"
    }, {
      "left" : "childNodes = EMPTY_NODES;",
      "right" : "childNodes = EMPTY_NODES;",
      "info" : "ExpressionStatement[2169-2194]:ExpressionStatement[2169-2194]"
    }, {
      "left" : "this.baseUri = baseUri;",
      "right" : "this.baseUri = baseUri;",
      "info" : "ExpressionStatement[2203-2226]:ExpressionStatement[2203-2226]"
    }, {
      "left" : "this.attributes = attributes;",
      "right" : "this.attributes = attributes;",
      "info" : "ExpressionStatement[2235-2264]:ExpressionStatement[2235-2264]"
    }, {
      "left" : "this.tag = tag;",
      "right" : "this.tag = tag;",
      "info" : "ExpressionStatement[2273-2288]:ExpressionStatement[2273-2288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2641-2682]:Block[2641-2682]"
    }, {
      "left" : "this(tag, baseUri, null);",
      "right" : "this(tag, baseUri, null);",
      "info" : "ConstructorInvocation[2651-2676]:ConstructorInvocation[2651-2676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2728-2861]:Block[2728-2861]"
    }, {
      "left" : "if (childNodes == EMPTY_NODES)",
      "right" : "if (childNodes == EMPTY_NODES)",
      "info" : "IfStatement[2738-2828]:IfStatement[2738-2828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2769-2828]:Block[2769-2828]"
    }, {
      "left" : "childNodes = new NodeList(this, 4);",
      "right" : "childNodes = new NodeList(this, 4);",
      "info" : "ExpressionStatement[2783-2818]:ExpressionStatement[2783-2818]"
    }, {
      "left" : "return childNodes;",
      "right" : "return childNodes;",
      "info" : "ReturnStatement[2837-2855]:ReturnStatement[2837-2855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2915-2957]:Block[2915-2957]"
    }, {
      "left" : "return attributes != null;",
      "right" : "return attributes != null;",
      "info" : "ReturnStatement[2925-2951]:ReturnStatement[2925-2951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3008-3115]:Block[3008-3115]"
    }, {
      "left" : "if (!hasAttributes())",
      "right" : "if (!hasAttributes())",
      "info" : "IfStatement[3018-3082]:IfStatement[3018-3082]"
    }, {
      "left" : "attributes = new Attributes();",
      "right" : "attributes = new Attributes();",
      "info" : "ExpressionStatement[3052-3082]:ExpressionStatement[3052-3082]"
    }, {
      "left" : "return attributes;",
      "right" : "return attributes;",
      "info" : "ReturnStatement[3091-3109]:ReturnStatement[3091-3109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3159-3190]:Block[3159-3190]"
    }, {
      "left" : "return baseUri;",
      "right" : "return baseUri;",
      "info" : "ReturnStatement[3169-3184]:ReturnStatement[3169-3184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3254-3293]:Block[3254-3293]"
    }, {
      "left" : "this.baseUri = baseUri;",
      "right" : "this.baseUri = baseUri;",
      "info" : "ExpressionStatement[3264-3287]:ExpressionStatement[3264-3287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3340-3381]:Block[3340-3381]"
    }, {
      "left" : "return childNodes.size();",
      "right" : "return childNodes.size();",
      "info" : "ReturnStatement[3350-3375]:ReturnStatement[3350-3375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3426-3463]:Block[3426-3463]"
    }, {
      "left" : "return tag.getName();",
      "right" : "return tag.getName();",
      "info" : "ReturnStatement[3436-3457]:ReturnStatement[3436-3457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3741-3778]:Block[3741-3778]"
    }, {
      "left" : "return tag.getName();",
      "right" : "return tag.getName();",
      "info" : "ReturnStatement[3751-3772]:ReturnStatement[3751-3772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4285-4502]:Block[4357-4574]"
    }, {
      "left" : "Validate.notEmpty(tagName, \"Tag name must not be empty.\");",
      "right" : "Validate.notEmpty(tagName, \"Tag name must not be empty.\");",
      "info" : "ExpressionStatement[4295-4353]:ExpressionStatement[4367-4425]"
    }, {
      "left" : "tag = Tag.valueOf(tagName, NodeUtils.parser(this).settings());",
      "right" : "tag = Tag.valueOf(tagName, NodeUtils.parser(this).settings());",
      "info" : "ExpressionStatement[4362-4424]:ExpressionStatement[4434-4496]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4484-4496]:ReturnStatement[4556-4568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4616-4643]:Block[4688-4715]"
    }, {
      "left" : "return tag;",
      "right" : "return tag;",
      "info" : "ReturnStatement[4626-4637]:ReturnStatement[4698-4709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4896-4933]:Block[4968-5005]"
    }, {
      "left" : "return tag.isBlock();",
      "right" : "return tag.isBlock();",
      "info" : "ReturnStatement[4906-4927]:ReturnStatement[4978-4999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5107-5163]:Block[5179-5235]"
    }, {
      "left" : "return attributes().getIgnoreCase(\"id\");",
      "right" : "return attributes().getIgnoreCase(\"id\");",
      "info" : "ReturnStatement[5117-5157]:ReturnStatement[5189-5229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5453-5531]:Block[5525-5603]"
    }, {
      "left" : "super.attr(attributeKey, attributeValue);",
      "right" : "super.attr(attributeKey, attributeValue);",
      "info" : "ExpressionStatement[5463-5504]:ExpressionStatement[5535-5576]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5513-5525]:ReturnStatement[5585-5597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6035-6119]:Block[6107-6191]"
    }, {
      "left" : "attributes().put(attributeKey, attributeValue);",
      "right" : "attributes().put(attributeKey, attributeValue);",
      "info" : "ExpressionStatement[6045-6092]:ExpressionStatement[6117-6164]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6101-6113]:ReturnStatement[6173-6185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6851-6897]:Block[6923-6969]"
    }, {
      "left" : "return attributes().dataset();",
      "right" : "return attributes().dataset();",
      "info" : "ReturnStatement[6861-6891]:ReturnStatement[6933-6963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6947-6991]:Block[7019-7063]"
    }, {
      "left" : "return (Element) parentNode;",
      "right" : "return (Element) parentNode;",
      "info" : "ReturnStatement[6957-6985]:ReturnStatement[7029-7057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7175-7291]:Block[7247-7363]"
    }, {
      "left" : "Elements parents = new Elements();",
      "right" : "Elements parents = new Elements();",
      "info" : "VariableDeclarationStatement[7185-7219]:VariableDeclarationStatement[7257-7291]"
    }, {
      "left" : "accumulateParents(this, parents);",
      "right" : "accumulateParents(this, parents);",
      "info" : "ExpressionStatement[7228-7261]:ExpressionStatement[7300-7333]"
    }, {
      "left" : "return parents;",
      "right" : "return parents;",
      "info" : "ReturnStatement[7270-7285]:ReturnStatement[7342-7357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7365-7568]:Block[7437-7640]"
    }, {
      "left" : "Element parent = el.parent();",
      "right" : "Element parent = el.parent();",
      "info" : "VariableDeclarationStatement[7375-7404]:VariableDeclarationStatement[7447-7476]"
    }, {
      "left" : "if (parent != null && !parent.tagName().equals(\"#root\"))",
      "right" : "if (parent != null && !parent.tagName().equals(\"#root\"))",
      "info" : "IfStatement[7413-7562]:IfStatement[7485-7634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7470-7562]:Block[7542-7634]"
    }, {
      "left" : "parents.add(parent);",
      "right" : "parents.add(parent);",
      "info" : "ExpressionStatement[7484-7504]:ExpressionStatement[7556-7576]"
    }, {
      "left" : "accumulateParents(parent, parents);",
      "right" : "accumulateParents(parent, parents);",
      "info" : "ExpressionStatement[7517-7552]:ExpressionStatement[7589-7624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8121-8175]:Block[8193-8247]"
    }, {
      "left" : "return childElementsList().get(index);",
      "right" : "return childElementsList().get(index);",
      "info" : "ReturnStatement[8131-8169]:ReturnStatement[8203-8241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8485-8542]:Block[8557-8614]"
    }, {
      "left" : "return new Elements(childElementsList());",
      "right" : "return new Elements(childElementsList());",
      "info" : "ReturnStatement[8495-8536]:ReturnStatement[8567-8608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8887-9528]:Block[8959-9600]"
    }, {
      "left" : "List<Element> children;",
      "right" : "List<Element> children;",
      "info" : "VariableDeclarationStatement[8897-8920]:VariableDeclarationStatement[8969-8992]"
    }, {
      "left" : "if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null)",
      "right" : "if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null)",
      "info" : "IfStatement[8929-9497]:IfStatement[9001-9569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9008-9497]:Block[9080-9569]"
    }, {
      "left" : "final int size = childNodes.size();",
      "right" : "final int size = childNodes.size();",
      "info" : "VariableDeclarationStatement[9022-9057]:VariableDeclarationStatement[9094-9129]"
    }, {
      "left" : "children = new ArrayList<>(size);",
      "right" : "children = new ArrayList<>(size);",
      "info" : "ExpressionStatement[9070-9103]:ExpressionStatement[9142-9175]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[9230-9424]:ForStatement[9302-9496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9261-9424]:Block[9333-9496]"
    }, {
      "left" : "final Node node = childNodes.get(i);",
      "right" : "final Node node = childNodes.get(i);",
      "info" : "VariableDeclarationStatement[9279-9315]:VariableDeclarationStatement[9351-9387]"
    }, {
      "left" : "if (node instanceof Element)",
      "right" : "if (node instanceof Element)",
      "info" : "IfStatement[9332-9410]:IfStatement[9404-9482]"
    }, {
      "left" : "children.add((Element) node);",
      "right" : "children.add((Element) node);",
      "info" : "ExpressionStatement[9381-9410]:ExpressionStatement[9453-9482]"
    }, {
      "left" : "shadowChildrenRef = new WeakReference<>(children);",
      "right" : "shadowChildrenRef = new WeakReference<>(children);",
      "info" : "ExpressionStatement[9437-9487]:ExpressionStatement[9509-9559]"
    }, {
      "left" : "return children;",
      "right" : "return children;",
      "info" : "ReturnStatement[9506-9522]:ReturnStatement[9578-9594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9635-9709]:Block[9707-9781]"
    }, {
      "left" : "super.nodelistChanged();",
      "right" : "super.nodelistChanged();",
      "info" : "ExpressionStatement[9645-9669]:ExpressionStatement[9717-9741]"
    }, {
      "left" : "shadowChildrenRef = null;",
      "right" : "shadowChildrenRef = null;",
      "info" : "ExpressionStatement[9678-9703]:ExpressionStatement[9750-9775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10639-10895]:Block[10711-10967]"
    }, {
      "left" : "List<TextNode> textNodes = new ArrayList<>();",
      "right" : "List<TextNode> textNodes = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[10649-10694]:VariableDeclarationStatement[10721-10766]"
    }, {
      "left" : "for (Node node : childNodes)",
      "right" : "for (Node node : childNodes)",
      "info" : "EnhancedForStatement[10703-10833]:EnhancedForStatement[10775-10905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10732-10833]:Block[10804-10905]"
    }, {
      "left" : "if (node instanceof TextNode)",
      "right" : "if (node instanceof TextNode)",
      "info" : "IfStatement[10746-10823]:IfStatement[10818-10895]"
    }, {
      "left" : "textNodes.add((TextNode) node);",
      "right" : "textNodes.add((TextNode) node);",
      "info" : "ExpressionStatement[10792-10823]:ExpressionStatement[10864-10895]"
    }, {
      "left" : "return Collections.unmodifiableList(textNodes);",
      "right" : "return Collections.unmodifiableList(textNodes);",
      "info" : "ReturnStatement[10842-10889]:ReturnStatement[10914-10961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11280-11536]:Block[11352-11608]"
    }, {
      "left" : "List<DataNode> dataNodes = new ArrayList<>();",
      "right" : "List<DataNode> dataNodes = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[11290-11335]:VariableDeclarationStatement[11362-11407]"
    }, {
      "left" : "for (Node node : childNodes)",
      "right" : "for (Node node : childNodes)",
      "info" : "EnhancedForStatement[11344-11474]:EnhancedForStatement[11416-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11373-11474]:Block[11445-11546]"
    }, {
      "left" : "if (node instanceof DataNode)",
      "right" : "if (node instanceof DataNode)",
      "info" : "IfStatement[11387-11464]:IfStatement[11459-11536]"
    }, {
      "left" : "dataNodes.add((DataNode) node);",
      "right" : "dataNodes.add((DataNode) node);",
      "info" : "ExpressionStatement[11433-11464]:ExpressionStatement[11505-11536]"
    }, {
      "left" : "return Collections.unmodifiableList(dataNodes);",
      "right" : "return Collections.unmodifiableList(dataNodes);",
      "info" : "ReturnStatement[11483-11530]:ReturnStatement[11555-11602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12542-12597]:Block[12614-12669]"
    }, {
      "left" : "return Selector.select(cssQuery, this);",
      "right" : "return Selector.select(cssQuery, this);",
      "info" : "ReturnStatement[12552-12591]:ReturnStatement[12624-12663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13100-13160]:Block[13172-13232]"
    }, {
      "left" : "return Selector.selectFirst(cssQuery, this);",
      "right" : "return Selector.selectFirst(cssQuery, this);",
      "info" : "ReturnStatement[13110-13154]:ReturnStatement[13182-13226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13393-13448]:Block[13465-13520]"
    }, {
      "left" : "return is(QueryParser.parse(cssQuery));",
      "right" : "return is(QueryParser.parse(cssQuery));",
      "info" : "ReturnStatement[13403-13442]:ReturnStatement[13475-13514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13651-13720]:Block[13723-13792]"
    }, {
      "left" : "return evaluator.matches((Element)this.root(), this);",
      "right" : "return evaluator.matches((Element)this.root(), this);",
      "info" : "ReturnStatement[13661-13714]:ReturnStatement[13733-13786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13951-14241]:Block[14023-14313]"
    }, {
      "left" : "Validate.notNull(child);",
      "right" : "Validate.notNull(child);",
      "info" : "ExpressionStatement[13961-13985]:ExpressionStatement[14033-14057]"
    }, {
      "left" : "reparentChild(child);",
      "right" : "reparentChild(child);",
      "info" : "ExpressionStatement[14080-14101]:ExpressionStatement[14152-14173]"
    }, {
      "left" : "ensureChildNodes();",
      "right" : "ensureChildNodes();",
      "info" : "ExpressionStatement[14110-14129]:ExpressionStatement[14182-14201]"
    }, {
      "left" : "childNodes.add(child);",
      "right" : "childNodes.add(child);",
      "info" : "ExpressionStatement[14138-14160]:ExpressionStatement[14210-14232]"
    }, {
      "left" : "child.setSiblingIndex(childNodes.size() - 1);",
      "right" : "child.setSiblingIndex(childNodes.size() - 1);",
      "info" : "ExpressionStatement[14169-14214]:ExpressionStatement[14241-14286]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14223-14235]:ReturnStatement[14295-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14529-14625]:Block[14601-14697]"
    }, {
      "left" : "Validate.notNull(parent);",
      "right" : "Validate.notNull(parent);",
      "info" : "ExpressionStatement[14539-14564]:ExpressionStatement[14611-14636]"
    }, {
      "left" : "parent.appendChild(this);",
      "right" : "parent.appendChild(this);",
      "info" : "ExpressionStatement[14573-14598]:ExpressionStatement[14645-14670]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14607-14619]:ReturnStatement[14679-14691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14866-14967]:Block[14938-15039]"
    }, {
      "left" : "Validate.notNull(child);",
      "right" : "Validate.notNull(child);",
      "info" : "ExpressionStatement[14876-14900]:ExpressionStatement[14948-14972]"
    }, {
      "left" : "addChildren(0, child);",
      "right" : "addChildren(0, child);",
      "info" : "ExpressionStatement[14918-14940]:ExpressionStatement[14990-15012]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14949-14961]:ReturnStatement[15021-15033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15522-16008]:Block[15594-16080]"
    }, {
      "left" : "Validate.notNull(children, \"Children collection to be inserted must not be null.\");",
      "right" : "Validate.notNull(children, \"Children collection to be inserted must not be null.\");",
      "info" : "ExpressionStatement[15532-15615]:ExpressionStatement[15604-15687]"
    }, {
      "left" : "int currentSize = childNodeSize();",
      "right" : "int currentSize = childNodeSize();",
      "info" : "VariableDeclarationStatement[15624-15658]:VariableDeclarationStatement[15696-15730]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[15667-15706]:IfStatement[15739-15778]"
    }, {
      "left" : "index += currentSize +1;",
      "right" : "index += currentSize +1;",
      "info" : "ExpressionStatement[15682-15706]:ExpressionStatement[15754-15778]"
    }, {
      "left" : "Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");",
      "right" : "Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");",
      "info" : "ExpressionStatement[15730-15816]:ExpressionStatement[15802-15888]"
    }, {
      "left" : "ArrayList<Node> nodes = new ArrayList<>(children);",
      "right" : "ArrayList<Node> nodes = new ArrayList<>(children);",
      "info" : "VariableDeclarationStatement[15826-15876]:VariableDeclarationStatement[15898-15948]"
    }, {
      "left" : "Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);",
      "right" : "Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);",
      "info" : "VariableDeclarationStatement[15885-15942]:VariableDeclarationStatement[15957-16014]"
    }, {
      "left" : "addChildren(index, nodeArray);",
      "right" : "addChildren(index, nodeArray);",
      "info" : "ExpressionStatement[15951-15981]:ExpressionStatement[16023-16053]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15990-16002]:ReturnStatement[16062-16074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16543-16903]:Block[16615-16975]"
    }, {
      "left" : "Validate.notNull(children, \"Children collection to be inserted must not be null.\");",
      "right" : "Validate.notNull(children, \"Children collection to be inserted must not be null.\");",
      "info" : "ExpressionStatement[16553-16636]:ExpressionStatement[16625-16708]"
    }, {
      "left" : "int currentSize = childNodeSize();",
      "right" : "int currentSize = childNodeSize();",
      "info" : "VariableDeclarationStatement[16645-16679]:VariableDeclarationStatement[16717-16751]"
    }, {
      "left" : "if (index < 0)",
      "right" : "if (index < 0)",
      "info" : "IfStatement[16688-16727]:IfStatement[16760-16799]"
    }, {
      "left" : "index += currentSize +1;",
      "right" : "index += currentSize +1;",
      "info" : "ExpressionStatement[16703-16727]:ExpressionStatement[16775-16799]"
    }, {
      "left" : "Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");",
      "right" : "Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");",
      "info" : "ExpressionStatement[16751-16837]:ExpressionStatement[16823-16909]"
    }, {
      "left" : "addChildren(index, children);",
      "right" : "addChildren(index, children);",
      "info" : "ExpressionStatement[16847-16876]:ExpressionStatement[16919-16948]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16885-16897]:ReturnStatement[16957-16969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17269-17431]:Block[17341-17503]"
    }, {
      "left" : "Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri());",
      "right" : "Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri());",
      "info" : "VariableDeclarationStatement[17279-17375]:VariableDeclarationStatement[17351-17447]"
    }, {
      "left" : "appendChild(child);",
      "right" : "appendChild(child);",
      "info" : "ExpressionStatement[17384-17403]:ExpressionStatement[17456-17475]"
    }, {
      "left" : "return child;",
      "right" : "return child;",
      "info" : "ReturnStatement[17412-17425]:ReturnStatement[17484-17497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17800-17963]:Block[17872-18035]"
    }, {
      "left" : "Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri());",
      "right" : "Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri());",
      "info" : "VariableDeclarationStatement[17810-17906]:VariableDeclarationStatement[17882-17978]"
    }, {
      "left" : "prependChild(child);",
      "right" : "prependChild(child);",
      "info" : "ExpressionStatement[17915-17935]:ExpressionStatement[17987-18007]"
    }, {
      "left" : "return child;",
      "right" : "return child;",
      "info" : "ReturnStatement[17944-17957]:ReturnStatement[18016-18029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18166-18297]:Block[18238-18369]"
    }, {
      "left" : "Validate.notNull(text);",
      "right" : "Validate.notNull(text);",
      "info" : "ExpressionStatement[18176-18199]:ExpressionStatement[18248-18271]"
    }, {
      "left" : "TextNode node = new TextNode(text);",
      "right" : "TextNode node = new TextNode(text);",
      "info" : "VariableDeclarationStatement[18208-18243]:VariableDeclarationStatement[18280-18315]"
    }, {
      "left" : "appendChild(node);",
      "right" : "appendChild(node);",
      "info" : "ExpressionStatement[18252-18270]:ExpressionStatement[18324-18342]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18279-18291]:ReturnStatement[18351-18363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18502-18634]:Block[18574-18706]"
    }, {
      "left" : "Validate.notNull(text);",
      "right" : "Validate.notNull(text);",
      "info" : "ExpressionStatement[18512-18535]:ExpressionStatement[18584-18607]"
    }, {
      "left" : "TextNode node = new TextNode(text);",
      "right" : "TextNode node = new TextNode(text);",
      "info" : "VariableDeclarationStatement[18544-18579]:VariableDeclarationStatement[18616-18651]"
    }, {
      "left" : "prependChild(node);",
      "right" : "prependChild(node);",
      "info" : "ExpressionStatement[18588-18607]:ExpressionStatement[18660-18679]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[18616-18628]:ReturnStatement[18688-18700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18949-19162]:Block[19021-19234]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[18959-18982]:ExpressionStatement[19031-19054]"
    }, {
      "left" : "List<Node> nodes = NodeUtils.parser(this).parseFragmentInput(html, this, baseUri());",
      "right" : "List<Node> nodes = NodeUtils.parser(this).parseFragmentInput(html, this, baseUri());",
      "info" : "VariableDeclarationStatement[18991-19075]:VariableDeclarationStatement[19063-19147]"
    }, {
      "left" : "addChildren(nodes.toArray(new Node[nodes.size()]));",
      "right" : "addChildren(nodes.toArray(new Node[nodes.size()]));",
      "info" : "ExpressionStatement[19084-19135]:ExpressionStatement[19156-19207]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19144-19156]:ReturnStatement[19216-19228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19494-19710]:Block[19566-19782]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[19504-19527]:ExpressionStatement[19576-19599]"
    }, {
      "left" : "List<Node> nodes = NodeUtils.parser(this).parseFragmentInput(html, this, baseUri());",
      "right" : "List<Node> nodes = NodeUtils.parser(this).parseFragmentInput(html, this, baseUri());",
      "info" : "VariableDeclarationStatement[19536-19620]:VariableDeclarationStatement[19608-19692]"
    }, {
      "left" : "addChildren(0, nodes.toArray(new Node[nodes.size()]));",
      "right" : "addChildren(0, nodes.toArray(new Node[nodes.size()]));",
      "info" : "ExpressionStatement[19629-19683]:ExpressionStatement[19701-19755]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[19692-19704]:ReturnStatement[19764-19776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20000-20052]:Block[20072-20124]"
    }, {
      "left" : "return (Element) super.before(html);",
      "right" : "return (Element) super.before(html);",
      "info" : "ReturnStatement[20010-20046]:ReturnStatement[20082-20118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20323-20375]:Block[20395-20447]"
    }, {
      "left" : "return (Element) super.before(node);",
      "right" : "return (Element) super.before(node);",
      "info" : "ReturnStatement[20333-20369]:ReturnStatement[20405-20441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20663-20714]:Block[20735-20786]"
    }, {
      "left" : "return (Element) super.after(html);",
      "right" : "return (Element) super.after(html);",
      "info" : "ReturnStatement[20673-20708]:ReturnStatement[20745-20780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20983-21034]:Block[21055-21106]"
    }, {
      "left" : "return (Element) super.after(node);",
      "right" : "return (Element) super.after(node);",
      "info" : "ReturnStatement[20993-21028]:ReturnStatement[21065-21100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21186-21242]:Block[21258-21314]"
    }, {
      "left" : "childNodes.clear();",
      "right" : "childNodes.clear();",
      "info" : "ExpressionStatement[21196-21215]:ExpressionStatement[21268-21287]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[21224-21236]:ReturnStatement[21296-21308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21529-21579]:Block[21601-21651]"
    }, {
      "left" : "return (Element) super.wrap(html);",
      "right" : "return (Element) super.wrap(html);",
      "info" : "ReturnStatement[21539-21573]:ReturnStatement[21611-21645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22027-22866]:Block[22099-22938]"
    }, {
      "left" : "if (id().length() > 0)",
      "right" : "if (id().length() > 0)",
      "info" : "IfStatement[22037-22090]:IfStatement[22109-22162]"
    }, {
      "left" : "return \"#\" + id();",
      "right" : "return \"#\" + id();",
      "info" : "ReturnStatement[22072-22090]:ReturnStatement[22144-22162]"
    }, {
      "left" : "String tagName = tagName().replace(':', '|');",
      "right" : "String tagName = tagName().replace(':', '|');",
      "info" : "VariableDeclarationStatement[22174-22219]:VariableDeclarationStatement[22246-22291]"
    }, {
      "left" : "StringBuilder selector = new StringBuilder(tagName);",
      "right" : "StringBuilder selector = new StringBuilder(tagName);",
      "info" : "VariableDeclarationStatement[22228-22280]:VariableDeclarationStatement[22300-22352]"
    }, {
      "left" : "String classes = StringUtil.join(classNames(), \".\");",
      "right" : "String classes = StringUtil.join(classNames(), \".\");",
      "info" : "VariableDeclarationStatement[22289-22341]:VariableDeclarationStatement[22361-22413]"
    }, {
      "left" : "if (classes.length() > 0)",
      "right" : "if (classes.length() > 0)",
      "info" : "IfStatement[22350-22425]:IfStatement[22422-22497]"
    }, {
      "left" : "selector.append('.').append(classes);",
      "right" : "selector.append('.').append(classes);",
      "info" : "ExpressionStatement[22388-22425]:ExpressionStatement[22460-22497]"
    }, {
      "left" : "if (parent() == null || parent() instanceof Document)",
      "right" : "if (parent() == null || parent() instanceof Document)",
      "info" : "IfStatement[22435-22595]:IfStatement[22507-22667]"
    }, {
      "left" : "return selector.toString();",
      "right" : "return selector.toString();",
      "info" : "ReturnStatement[22568-22595]:ReturnStatement[22640-22667]"
    }, {
      "left" : "selector.insert(0, \" > \");",
      "right" : "selector.insert(0, \" > \");",
      "info" : "ExpressionStatement[22605-22631]:ExpressionStatement[22677-22703]"
    }, {
      "left" : "if (parent().select(selector.toString()).size() > 1)",
      "right" : "if (parent().select(selector.toString()).size() > 1)",
      "info" : "IfStatement[22640-22798]:IfStatement[22712-22870]"
    }, {
      "left" : "selector.append(String.format(\n                \":nth-child(%d)\", elementSiblingIndex() + 1));",
      "right" : "selector.append(String.format(\n                \":nth-child(%d)\", elementSiblingIndex() + 1));",
      "info" : "ExpressionStatement[22705-22798]:ExpressionStatement[22777-22870]"
    }, {
      "left" : "return parent().cssSelector() + selector.toString();",
      "right" : "return parent().cssSelector() + selector.toString();",
      "info" : "ReturnStatement[22808-22860]:ReturnStatement[22880-22932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23138-23462]:Block[23210-23534]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[23148-23207]:IfStatement[23220-23279]"
    }, {
      "left" : "return new Elements(0);",
      "right" : "return new Elements(0);",
      "info" : "ReturnStatement[23184-23207]:ReturnStatement[23256-23279]"
    }, {
      "left" : "List<Element> elements = parent().childElementsList();",
      "right" : "List<Element> elements = parent().childElementsList();",
      "info" : "VariableDeclarationStatement[23217-23271]:VariableDeclarationStatement[23289-23343]"
    }, {
      "left" : "Elements siblings = new Elements(elements.size() - 1);",
      "right" : "Elements siblings = new Elements(elements.size() - 1);",
      "info" : "VariableDeclarationStatement[23280-23334]:VariableDeclarationStatement[23352-23406]"
    }, {
      "left" : "for (Element el: elements)\n            if (el != this)\n                siblings.add(el);",
      "right" : "for (Element el: elements)\n            if (el != this)\n                siblings.add(el);",
      "info" : "EnhancedForStatement[23343-23431]:EnhancedForStatement[23415-23503]"
    }, {
      "left" : "if (el != this)",
      "right" : "if (el != this)",
      "info" : "IfStatement[23382-23431]:IfStatement[23454-23503]"
    }, {
      "left" : "siblings.add(el);",
      "right" : "siblings.add(el);",
      "info" : "ExpressionStatement[23414-23431]:ExpressionStatement[23486-23503]"
    }, {
      "left" : "return siblings;",
      "right" : "return siblings;",
      "info" : "ReturnStatement[23440-23456]:ReturnStatement[23512-23528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23926-24246]:Block[23998-24318]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[23936-23972]:IfStatement[24008-24044]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23960-23972]:ReturnStatement[24032-24044]"
    }, {
      "left" : "List<Element> siblings = parent().childElementsList();",
      "right" : "List<Element> siblings = parent().childElementsList();",
      "info" : "VariableDeclarationStatement[23981-24035]:VariableDeclarationStatement[24053-24107]"
    }, {
      "left" : "Integer index = indexInList(this, siblings);",
      "right" : "Integer index = indexInList(this, siblings);",
      "info" : "VariableDeclarationStatement[24044-24088]:VariableDeclarationStatement[24116-24160]"
    }, {
      "left" : "Validate.notNull(index);",
      "right" : "Validate.notNull(index);",
      "info" : "ExpressionStatement[24097-24121]:ExpressionStatement[24169-24193]"
    }, {
      "left" : "if (siblings.size() > index+1)",
      "right" : "if (siblings.size() > index+1)",
      "info" : "IfStatement[24130-24240]:IfStatement[24202-24312]"
    }, {
      "left" : "return siblings.get(index+1);",
      "right" : "return siblings.get(index+1);",
      "info" : "ReturnStatement[24173-24202]:ReturnStatement[24245-24274]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24228-24240]:ReturnStatement[24300-24312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24502-24551]:Block[24574-24623]"
    }, {
      "left" : "return nextElementSiblings(true);",
      "right" : "return nextElementSiblings(true);",
      "info" : "ReturnStatement[24512-24545]:ReturnStatement[24584-24617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24782-25086]:Block[24854-25158]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[24792-24828]:IfStatement[24864-24900]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24816-24828]:ReturnStatement[24888-24900]"
    }, {
      "left" : "List<Element> siblings = parent().childElementsList();",
      "right" : "List<Element> siblings = parent().childElementsList();",
      "info" : "VariableDeclarationStatement[24837-24891]:VariableDeclarationStatement[24909-24963]"
    }, {
      "left" : "Integer index = indexInList(this, siblings);",
      "right" : "Integer index = indexInList(this, siblings);",
      "info" : "VariableDeclarationStatement[24900-24944]:VariableDeclarationStatement[24972-25016]"
    }, {
      "left" : "Validate.notNull(index);",
      "right" : "Validate.notNull(index);",
      "info" : "ExpressionStatement[24953-24977]:ExpressionStatement[25025-25049]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[24986-25080]:IfStatement[25058-25152]"
    }, {
      "left" : "return siblings.get(index-1);",
      "right" : "return siblings.get(index-1);",
      "info" : "ReturnStatement[25013-25042]:ReturnStatement[25085-25114]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25068-25080]:ReturnStatement[25140-25152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25300-25350]:Block[25372-25422]"
    }, {
      "left" : "return nextElementSiblings(false);",
      "right" : "return nextElementSiblings(false);",
      "info" : "ReturnStatement[25310-25344]:ReturnStatement[25382-25416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25407-25587]:Block[25479-25659]"
    }, {
      "left" : "Elements els = new Elements();",
      "right" : "Elements els = new Elements();",
      "info" : "VariableDeclarationStatement[25417-25447]:VariableDeclarationStatement[25489-25519]"
    }, {
      "left" : "if (parentNode == null)",
      "right" : "if (parentNode == null)",
      "info" : "IfStatement[25456-25504]:IfStatement[25528-25576]"
    }, {
      "left" : "return  els;",
      "right" : "return  els;",
      "info" : "ReturnStatement[25492-25504]:ReturnStatement[25564-25576]"
    }, {
      "left" : "els.add(this);",
      "right" : "els.add(this);",
      "info" : "ExpressionStatement[25513-25527]:ExpressionStatement[25585-25599]"
    }, {
      "left" : "return next ?  els.nextAll() : els.prevAll();",
      "right" : "return next ?  els.nextAll() : els.prevAll();",
      "info" : "ReturnStatement[25536-25581]:ReturnStatement[25608-25653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25793-25977]:Block[25865-26049]"
    }, {
      "left" : "List<Element> siblings = parent().childElementsList();",
      "right" : "List<Element> siblings = parent().childElementsList();",
      "info" : "VariableDeclarationStatement[25856-25910]:VariableDeclarationStatement[25928-25982]"
    }, {
      "left" : "return siblings.size() > 1 ? siblings.get(0) : null;",
      "right" : "return siblings.size() > 1 ? siblings.get(0) : null;",
      "info" : "ReturnStatement[25919-25971]:ReturnStatement[25991-26043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26216-26325]:Block[26288-26397]"
    }, {
      "left" : "if (parent() == null)",
      "right" : "if (parent() == null)",
      "info" : "IfStatement[26225-26256]:IfStatement[26297-26328]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[26247-26256]:ReturnStatement[26319-26328]"
    }, {
      "left" : "return indexInList(this, parent().childElementsList());",
      "right" : "return indexInList(this, parent().childElementsList());",
      "info" : "ReturnStatement[26264-26319]:ReturnStatement[26336-26391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26526-26675]:Block[26598-26747]"
    }, {
      "left" : "List<Element> siblings = parent().childElementsList();",
      "right" : "List<Element> siblings = parent().childElementsList();",
      "info" : "VariableDeclarationStatement[26536-26590]:VariableDeclarationStatement[26608-26662]"
    }, {
      "left" : "return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;",
      "right" : "return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;",
      "info" : "ReturnStatement[26599-26669]:ReturnStatement[26671-26741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26766-26953]:Block[26838-27025]"
    }, {
      "left" : "final int size = elements.size();",
      "right" : "final int size = elements.size();",
      "info" : "VariableDeclarationStatement[26776-26809]:VariableDeclarationStatement[26848-26881]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[26818-26929]:ForStatement[26890-27001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26849-26929]:Block[26921-27001]"
    }, {
      "left" : "if (elements.get(i) == search)",
      "right" : "if (elements.get(i) == search)",
      "info" : "IfStatement[26863-26919]:IfStatement[26935-26991]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[26910-26919]:ReturnStatement[26982-26991]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[26938-26947]:ReturnStatement[27010-27019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27337-27487]:Block[27409-27559]"
    }, {
      "left" : "Validate.notEmpty(tagName);",
      "right" : "Validate.notEmpty(tagName);",
      "info" : "ExpressionStatement[27347-27374]:ExpressionStatement[27419-27446]"
    }, {
      "left" : "tagName = normalize(tagName);",
      "right" : "tagName = normalize(tagName);",
      "info" : "ExpressionStatement[27383-27412]:ExpressionStatement[27455-27484]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Tag(tagName), this);",
      "right" : "return Collector.collect(new Evaluator.Tag(tagName), this);",
      "info" : "ReturnStatement[27422-27481]:ReturnStatement[27494-27553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28046-28275]:Block[28118-28347]"
    }, {
      "left" : "Validate.notEmpty(id);",
      "right" : "Validate.notEmpty(id);",
      "info" : "ExpressionStatement[28056-28078]:ExpressionStatement[28128-28150]"
    }, {
      "left" : "Elements elements = Collector.collect(new Evaluator.Id(id), this);",
      "right" : "Elements elements = Collector.collect(new Evaluator.Id(id), this);",
      "info" : "VariableDeclarationStatement[28096-28162]:VariableDeclarationStatement[28168-28234]"
    }, {
      "left" : "if (elements.size() > 0)",
      "right" : "if (elements.size() > 0)",
      "info" : "IfStatement[28171-28269]:IfStatement[28243-28341]"
    }, {
      "left" : "return elements.get(0);",
      "right" : "return elements.get(0);",
      "info" : "ReturnStatement[28208-28231]:ReturnStatement[28280-28303]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28257-28269]:ReturnStatement[28329-28341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28849-28967]:Block[28921-29039]"
    }, {
      "left" : "Validate.notEmpty(className);",
      "right" : "Validate.notEmpty(className);",
      "info" : "ExpressionStatement[28859-28888]:ExpressionStatement[28931-28960]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Class(className), this);",
      "right" : "return Collector.collect(new Evaluator.Class(className), this);",
      "info" : "ReturnStatement[28898-28961]:ReturnStatement[28970-29033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29242-29378]:Block[29314-29450]"
    }, {
      "left" : "Validate.notEmpty(key);",
      "right" : "Validate.notEmpty(key);",
      "info" : "ExpressionStatement[29252-29275]:ExpressionStatement[29324-29347]"
    }, {
      "left" : "key = key.trim();",
      "right" : "key = key.trim();",
      "info" : "ExpressionStatement[29284-29301]:ExpressionStatement[29356-29373]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Attribute(key), this);",
      "right" : "return Collector.collect(new Evaluator.Attribute(key), this);",
      "info" : "ReturnStatement[29311-29372]:ReturnStatement[29383-29444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29787-29955]:Block[29859-30027]"
    }, {
      "left" : "Validate.notEmpty(keyPrefix);",
      "right" : "Validate.notEmpty(keyPrefix);",
      "info" : "ExpressionStatement[29797-29826]:ExpressionStatement[29869-29898]"
    }, {
      "left" : "keyPrefix = keyPrefix.trim();",
      "right" : "keyPrefix = keyPrefix.trim();",
      "info" : "ExpressionStatement[29835-29864]:ExpressionStatement[29907-29936]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);",
      "info" : "ReturnStatement[29874-29949]:ReturnStatement[29946-30021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30305-30398]:Block[30377-30470]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);",
      "info" : "ReturnStatement[30315-30392]:ReturnStatement[30387-30464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30760-30856]:Block[30832-30928]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);",
      "info" : "ReturnStatement[30770-30850]:ReturnStatement[30842-30922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31233-31340]:Block[31305-31412]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);",
      "info" : "ReturnStatement[31243-31334]:ReturnStatement[31315-31406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31713-31818]:Block[31785-31890]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);",
      "info" : "ReturnStatement[31723-31812]:ReturnStatement[31795-31884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32186-32289]:Block[32258-32361]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);",
      "info" : "ReturnStatement[32196-32283]:ReturnStatement[32268-32355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32692-32804]:Block[32764-32876]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);",
      "right" : "return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);",
      "info" : "ReturnStatement[32702-32789]:ReturnStatement[32774-32861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33362-33660]:Block[33434-33732]"
    }, {
      "left" : "Pattern pattern;",
      "right" : "Pattern pattern;",
      "info" : "VariableDeclarationStatement[33372-33388]:VariableDeclarationStatement[33444-33460]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33397-33588]:TryStatement[33469-33660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33401-33458]:Block[33473-33530]"
    }, {
      "left" : "pattern = Pattern.compile(regex);",
      "right" : "pattern = Pattern.compile(regex);",
      "info" : "ExpressionStatement[33415-33448]:ExpressionStatement[33487-33520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33492-33588]:Block[33564-33660]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "right" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "info" : "ThrowStatement[33506-33578]:ThrowStatement[33578-33650]"
    }, {
      "left" : "return getElementsByAttributeValueMatching(key, pattern);",
      "right" : "return getElementsByAttributeValueMatching(key, pattern);",
      "info" : "ReturnStatement[33597-33654]:ReturnStatement[33669-33726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33888-33971]:Block[33960-34043]"
    }, {
      "left" : "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
      "right" : "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
      "info" : "ReturnStatement[33898-33965]:ReturnStatement[33970-34037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34208-34294]:Block[34280-34366]"
    }, {
      "left" : "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
      "right" : "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
      "info" : "ReturnStatement[34218-34288]:ReturnStatement[34290-34360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34518-34599]:Block[34590-34671]"
    }, {
      "left" : "return Collector.collect(new Evaluator.IndexEquals(index), this);",
      "right" : "return Collector.collect(new Evaluator.IndexEquals(index), this);",
      "info" : "ReturnStatement[34528-34593]:ReturnStatement[34600-34665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35009-35096]:Block[35081-35168]"
    }, {
      "left" : "return Collector.collect(new Evaluator.ContainsText(searchText), this);",
      "right" : "return Collector.collect(new Evaluator.ContainsText(searchText), this);",
      "info" : "ReturnStatement[35019-35090]:ReturnStatement[35091-35162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35527-35617]:Block[35599-35689]"
    }, {
      "left" : "return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);",
      "right" : "return Collector.collect(new Evaluator.ContainsOwnText(searchText), this);",
      "info" : "ReturnStatement[35537-35611]:ReturnStatement[35609-35683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35929-36008]:Block[36001-36080]"
    }, {
      "left" : "return Collector.collect(new Evaluator.Matches(pattern), this);",
      "right" : "return Collector.collect(new Evaluator.Matches(pattern), this);",
      "info" : "ReturnStatement[35939-36002]:ReturnStatement[36011-36074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36484-36765]:Block[36556-36837]"
    }, {
      "left" : "Pattern pattern;",
      "right" : "Pattern pattern;",
      "info" : "VariableDeclarationStatement[36494-36510]:VariableDeclarationStatement[36566-36582]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36519-36710]:TryStatement[36591-36782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36523-36580]:Block[36595-36652]"
    }, {
      "left" : "pattern = Pattern.compile(regex);",
      "right" : "pattern = Pattern.compile(regex);",
      "info" : "ExpressionStatement[36537-36570]:ExpressionStatement[36609-36642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36614-36710]:Block[36686-36782]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "right" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "info" : "ThrowStatement[36628-36700]:ThrowStatement[36700-36772]"
    }, {
      "left" : "return getElementsMatchingText(pattern);",
      "right" : "return getElementsMatchingText(pattern);",
      "info" : "ReturnStatement[36719-36759]:ReturnStatement[36791-36831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37087-37169]:Block[37159-37241]"
    }, {
      "left" : "return Collector.collect(new Evaluator.MatchesOwn(pattern), this);",
      "right" : "return Collector.collect(new Evaluator.MatchesOwn(pattern), this);",
      "info" : "ReturnStatement[37097-37163]:ReturnStatement[37169-37235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37651-37935]:Block[37723-38007]"
    }, {
      "left" : "Pattern pattern;",
      "right" : "Pattern pattern;",
      "info" : "VariableDeclarationStatement[37661-37677]:VariableDeclarationStatement[37733-37749]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37686-37877]:TryStatement[37758-37949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37690-37747]:Block[37762-37819]"
    }, {
      "left" : "pattern = Pattern.compile(regex);",
      "right" : "pattern = Pattern.compile(regex);",
      "info" : "ExpressionStatement[37704-37737]:ExpressionStatement[37776-37809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37781-37877]:Block[37853-37949]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "right" : "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e);",
      "info" : "ThrowStatement[37795-37867]:ThrowStatement[37867-37939]"
    }, {
      "left" : "return getElementsMatchingOwnText(pattern);",
      "right" : "return getElementsMatchingOwnText(pattern);",
      "info" : "ReturnStatement[37886-37929]:ReturnStatement[37958-38001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38118-38194]:Block[38190-38266]"
    }, {
      "left" : "return Collector.collect(new Evaluator.AllElements(), this);",
      "right" : "return Collector.collect(new Evaluator.AllElements(), this);",
      "info" : "ReturnStatement[38128-38188]:ReturnStatement[38200-38260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38672-39963]:Block[38744-40035]"
    }, {
      "left" : "final StringBuilder accum = StringUtil.borrowBuilder();",
      "right" : "final StringBuilder accum = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[38682-38737]:VariableDeclarationStatement[38754-38809]"
    }, {
      "left" : "NodeTraversor.traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    appendNormalisedText(accum, textNode);\n                } else if (node instanceof Element) {\n                    Element element = (Element) node;\n                    if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(' ');\n                }\n            }\n\n            public void tail(Node node, int depth) {\n                // make sure there is a space between block tags and immediately following text nodes <div>One</div>Two should be \"One Two\".\n                if (node instanceof Element) {\n                    Element element = (Element) node;\n                    if (element.isBlock() && (node.nextSibling() instanceof TextNode) && !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(' ');\n                }\n\n            }\n        }, this);",
      "right" : "NodeTraversor.traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    appendNormalisedText(accum, textNode);\n                } else if (node instanceof Element) {\n                    Element element = (Element) node;\n                    if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(' ');\n                }\n            }\n\n            public void tail(Node node, int depth) {\n                // make sure there is a space between block tags and immediately following text nodes <div>One</div>Two should be \"One Two\".\n                if (node instanceof Element) {\n                    Element element = (Element) node;\n                    if (element.isBlock() && (node.nextSibling() instanceof TextNode) && !TextNode.lastCharIsWhitespace(accum))\n                        accum.append(' ');\n                }\n\n            }\n        }, this);",
      "info" : "ExpressionStatement[38746-39900]:ExpressionStatement[38818-39972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38840-39382]:Block[38912-39454]"
    }, {
      "left" : "if (node instanceof TextNode)",
      "right" : "if (node instanceof TextNode)",
      "info" : "IfStatement[38858-39368]:IfStatement[38930-39440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38888-39023]:Block[38960-39095]"
    }, {
      "left" : "TextNode textNode = (TextNode) node;",
      "right" : "TextNode textNode = (TextNode) node;",
      "info" : "VariableDeclarationStatement[38910-38946]:VariableDeclarationStatement[38982-39018]"
    }, {
      "left" : "appendNormalisedText(accum, textNode);",
      "right" : "appendNormalisedText(accum, textNode);",
      "info" : "ExpressionStatement[38967-39005]:ExpressionStatement[39039-39077]"
    }, {
      "left" : "if (node instanceof Element)",
      "right" : "if (node instanceof Element)",
      "info" : "IfStatement[39029-39368]:IfStatement[39101-39440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39058-39368]:Block[39130-39440]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[39080-39113]:VariableDeclarationStatement[39152-39185]"
    }, {
      "left" : "if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))",
      "right" : "if (accum.length() > 0 &&\n                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n                        !TextNode.lastCharIsWhitespace(accum))",
      "info" : "IfStatement[39134-39350]:IfStatement[39206-39422]"
    }, {
      "left" : "accum.append(' ');",
      "right" : "accum.append(' ');",
      "info" : "ExpressionStatement[39332-39350]:ExpressionStatement[39404-39422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39435-39882]:Block[39507-39954]"
    }, {
      "left" : "if (node instanceof Element)",
      "right" : "if (node instanceof Element)",
      "info" : "IfStatement[39594-39867]:IfStatement[39666-39939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39623-39867]:Block[39695-39939]"
    }, {
      "left" : "Element element = (Element) node;",
      "right" : "Element element = (Element) node;",
      "info" : "VariableDeclarationStatement[39645-39678]:VariableDeclarationStatement[39717-39750]"
    }, {
      "left" : "if (element.isBlock() && (node.nextSibling() instanceof TextNode) && !TextNode.lastCharIsWhitespace(accum))",
      "right" : "if (element.isBlock() && (node.nextSibling() instanceof TextNode) && !TextNode.lastCharIsWhitespace(accum))",
      "info" : "IfStatement[39699-39849]:IfStatement[39771-39921]"
    }, {
      "left" : "accum.append(' ');",
      "right" : "accum.append(' ');",
      "info" : "ExpressionStatement[39831-39849]:ExpressionStatement[39903-39921]"
    }, {
      "left" : "return StringUtil.releaseBuilder(accum).trim();",
      "right" : "return StringUtil.releaseBuilder(accum).trim();",
      "info" : "ReturnStatement[39910-39957]:ReturnStatement[39982-40029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40214-40721]:Block[40286-40793]"
    }, {
      "left" : "final StringBuilder accum = StringUtil.borrowBuilder();",
      "right" : "final StringBuilder accum = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[40224-40279]:VariableDeclarationStatement[40296-40351]"
    }, {
      "left" : "NodeTraversor.traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    accum.append(textNode.getWholeText());\n                }\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        }, this);",
      "right" : "NodeTraversor.traverse(new NodeVisitor() {\n            public void head(Node node, int depth) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    accum.append(textNode.getWholeText());\n                }\n            }\n\n            public void tail(Node node, int depth) {\n            }\n        }, this);",
      "info" : "ExpressionStatement[40288-40665]:ExpressionStatement[40360-40737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40382-40579]:Block[40454-40651]"
    }, {
      "left" : "if (node instanceof TextNode)",
      "right" : "if (node instanceof TextNode)",
      "info" : "IfStatement[40400-40565]:IfStatement[40472-40637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40430-40565]:Block[40502-40637]"
    }, {
      "left" : "TextNode textNode = (TextNode) node;",
      "right" : "TextNode textNode = (TextNode) node;",
      "info" : "VariableDeclarationStatement[40452-40488]:VariableDeclarationStatement[40524-40560]"
    }, {
      "left" : "accum.append(textNode.getWholeText());",
      "right" : "accum.append(textNode.getWholeText());",
      "info" : "ExpressionStatement[40509-40547]:ExpressionStatement[40581-40619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40632-40647]:Block[40704-40719]"
    }, {
      "left" : "return StringUtil.releaseBuilder(accum);",
      "right" : "return StringUtil.releaseBuilder(accum);",
      "info" : "ReturnStatement[40675-40715]:ReturnStatement[40747-40787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41298-41434]:Block[41370-41506]"
    }, {
      "left" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "right" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[41308-41354]:VariableDeclarationStatement[41380-41426]"
    }, {
      "left" : "ownText(sb);",
      "right" : "ownText(sb);",
      "info" : "ExpressionStatement[41363-41375]:ExpressionStatement[41435-41447]"
    }, {
      "left" : "return StringUtil.releaseBuilder(sb).trim();",
      "right" : "return StringUtil.releaseBuilder(sb).trim();",
      "info" : "ReturnStatement[41384-41428]:ReturnStatement[41456-41500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41482-41820]:Block[41554-41892]"
    }, {
      "left" : "for (Node child : childNodes)",
      "right" : "for (Node child : childNodes)",
      "info" : "EnhancedForStatement[41492-41814]:EnhancedForStatement[41564-41886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41522-41814]:Block[41594-41886]"
    }, {
      "left" : "if (child instanceof TextNode)",
      "right" : "if (child instanceof TextNode)",
      "info" : "IfStatement[41536-41804]:IfStatement[41608-41876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41567-41691]:Block[41639-41763]"
    }, {
      "left" : "TextNode textNode = (TextNode) child;",
      "right" : "TextNode textNode = (TextNode) child;",
      "info" : "VariableDeclarationStatement[41585-41622]:VariableDeclarationStatement[41657-41694]"
    }, {
      "left" : "appendNormalisedText(accum, textNode);",
      "right" : "appendNormalisedText(accum, textNode);",
      "info" : "ExpressionStatement[41639-41677]:ExpressionStatement[41711-41749]"
    }, {
      "left" : "if (child instanceof Element)",
      "right" : "if (child instanceof Element)",
      "info" : "IfStatement[41697-41804]:IfStatement[41769-41876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41727-41804]:Block[41799-41876]"
    }, {
      "left" : "appendWhitespaceIfBr((Element) child, accum);",
      "right" : "appendWhitespaceIfBr((Element) child, accum);",
      "info" : "ExpressionStatement[41745-41790]:ExpressionStatement[41817-41862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41907-42195]:Block[41979-42267]"
    }, {
      "left" : "String text = textNode.getWholeText();",
      "right" : "String text = textNode.getWholeText();",
      "info" : "VariableDeclarationStatement[41917-41955]:VariableDeclarationStatement[41989-42027]"
    }, {
      "left" : "if (preserveWhitespace(textNode.parentNode) || textNode instanceof CDataNode)",
      "right" : "if (preserveWhitespace(textNode.parentNode) || textNode instanceof CDataNode)",
      "info" : "IfStatement[41965-42189]:IfStatement[42037-42261]"
    }, {
      "left" : "accum.append(text);",
      "right" : "accum.append(text);",
      "info" : "ExpressionStatement[42055-42074]:ExpressionStatement[42127-42146]"
    }, {
      "left" : "StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));",
      "right" : "StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));",
      "info" : "ExpressionStatement[42100-42189]:ExpressionStatement[42172-42261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42280-42407]:Block[42352-42479]"
    }, {
      "left" : "if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum))",
      "right" : "if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum))",
      "info" : "IfStatement[42290-42401]:IfStatement[42362-42473]"
    }, {
      "left" : "accum.append(\" \");",
      "right" : "accum.append(\" \");",
      "info" : "ExpressionStatement[42383-42401]:ExpressionStatement[42455-42473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42458-42902]:Block[42530-42974]"
    }, {
      "left" : "if (node instanceof Element)",
      "right" : "if (node instanceof Element)",
      "info" : "IfStatement[42573-42874]:IfStatement[42645-42946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42602-42874]:Block[42674-42946]"
    }, {
      "left" : "Element el = (Element) node;",
      "right" : "Element el = (Element) node;",
      "info" : "VariableDeclarationStatement[42616-42644]:VariableDeclarationStatement[42688-42716]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[42657-42667]:VariableDeclarationStatement[42729-42739]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[42680-42864]:DoStatement[42752-42936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42683-42835]:Block[42755-42907]"
    }, {
      "left" : "if (el.tag.preserveWhitespace())",
      "right" : "if (el.tag.preserveWhitespace())",
      "info" : "IfStatement[42701-42766]:IfStatement[42773-42838]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42754-42766]:ReturnStatement[42826-42838]"
    }, {
      "left" : "el = el.parent();",
      "right" : "el = el.parent();",
      "info" : "ExpressionStatement[42783-42800]:ExpressionStatement[42855-42872]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[42817-42821]:ExpressionStatement[42889-42893]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42883-42896]:ReturnStatement[42955-42968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43113-43271]:Block[43185-43343]"
    }, {
      "left" : "Validate.notNull(text);",
      "right" : "Validate.notNull(text);",
      "info" : "ExpressionStatement[43123-43146]:ExpressionStatement[43195-43218]"
    }, {
      "left" : "empty();",
      "right" : "empty();",
      "info" : "ExpressionStatement[43156-43164]:ExpressionStatement[43228-43236]"
    }, {
      "left" : "TextNode textNode = new TextNode(text);",
      "right" : "TextNode textNode = new TextNode(text);",
      "info" : "VariableDeclarationStatement[43173-43212]:VariableDeclarationStatement[43245-43284]"
    }, {
      "left" : "appendChild(textNode);",
      "right" : "appendChild(textNode);",
      "info" : "ExpressionStatement[43221-43243]:ExpressionStatement[43293-43315]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43253-43265]:ReturnStatement[43325-43337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43453-43882]:Block[43525-43954]"
    }, {
      "left" : "for (Node child: childNodes)",
      "right" : "for (Node child: childNodes)",
      "info" : "EnhancedForStatement[43463-43854]:EnhancedForStatement[43535-43926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43492-43854]:Block[43564-43926]"
    }, {
      "left" : "if (child instanceof TextNode)",
      "right" : "if (child instanceof TextNode)",
      "info" : "IfStatement[43506-43844]:IfStatement[43578-43916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43537-43680]:Block[43609-43752]"
    }, {
      "left" : "TextNode textNode = (TextNode) child;",
      "right" : "TextNode textNode = (TextNode) child;",
      "info" : "VariableDeclarationStatement[43555-43592]:VariableDeclarationStatement[43627-43664]"
    }, {
      "left" : "if (!textNode.isBlank())",
      "right" : "if (!textNode.isBlank())",
      "info" : "IfStatement[43609-43666]:IfStatement[43681-43738]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43654-43666]:ReturnStatement[43726-43738]"
    }, {
      "left" : "if (child instanceof Element)",
      "right" : "if (child instanceof Element)",
      "info" : "IfStatement[43686-43844]:IfStatement[43758-43916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43716-43844]:Block[43788-43916]"
    }, {
      "left" : "Element el = (Element) child;",
      "right" : "Element el = (Element) child;",
      "info" : "VariableDeclarationStatement[43734-43763]:VariableDeclarationStatement[43806-43835]"
    }, {
      "left" : "if (el.hasText())",
      "right" : "if (el.hasText())",
      "info" : "IfStatement[43780-43830]:IfStatement[43852-43902]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43818-43830]:ReturnStatement[43890-43902]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43863-43876]:ReturnStatement[43935-43948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44314-45362]:Block[44386-45434]"
    }, {
      "left" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "right" : "StringBuilder sb = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[44324-44370]:VariableDeclarationStatement[44396-44442]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[44380-45310]:EnhancedForStatement[44452-45382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44414-45310]:Block[44486-45382]"
    }, {
      "left" : "if (childNode instanceof DataNode)",
      "right" : "if (childNode instanceof DataNode)",
      "info" : "IfStatement[44428-45300]:IfStatement[44500-45372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44463-44580]:Block[44535-44652]"
    }, {
      "left" : "DataNode data = (DataNode) childNode;",
      "right" : "DataNode data = (DataNode) childNode;",
      "info" : "VariableDeclarationStatement[44481-44518]:VariableDeclarationStatement[44553-44590]"
    }, {
      "left" : "sb.append(data.getWholeData());",
      "right" : "sb.append(data.getWholeData());",
      "info" : "ExpressionStatement[44535-44566]:ExpressionStatement[44607-44638]"
    }, {
      "left" : "if (childNode instanceof Comment)",
      "right" : "if (childNode instanceof Comment)",
      "info" : "IfStatement[44586-45300]:IfStatement[44658-45372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44620-44736]:Block[44692-44808]"
    }, {
      "left" : "Comment comment = (Comment) childNode;",
      "right" : "Comment comment = (Comment) childNode;",
      "info" : "VariableDeclarationStatement[44638-44676]:VariableDeclarationStatement[44710-44748]"
    }, {
      "left" : "sb.append(comment.getData());",
      "right" : "sb.append(comment.getData());",
      "info" : "ExpressionStatement[44693-44722]:ExpressionStatement[44765-44794]"
    }, {
      "left" : "if (childNode instanceof Element)",
      "right" : "if (childNode instanceof Element)",
      "info" : "IfStatement[44742-45300]:IfStatement[44814-45372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44776-44939]:Block[44848-45011]"
    }, {
      "left" : "Element element = (Element) childNode;",
      "right" : "Element element = (Element) childNode;",
      "info" : "VariableDeclarationStatement[44794-44832]:VariableDeclarationStatement[44866-44904]"
    }, {
      "left" : "String elementData = element.data();",
      "right" : "String elementData = element.data();",
      "info" : "VariableDeclarationStatement[44849-44885]:VariableDeclarationStatement[44921-44957]"
    }, {
      "left" : "sb.append(elementData);",
      "right" : "sb.append(elementData);",
      "info" : "ExpressionStatement[44902-44925]:ExpressionStatement[44974-44997]"
    }, {
      "left" : "if (childNode instanceof CDataNode)",
      "right" : "if (childNode instanceof CDataNode)",
      "info" : "IfStatement[44945-45300]:IfStatement[45017-45372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44981-45300]:Block[45053-45372]"
    }, {
      "left" : "CDataNode cDataNode = (CDataNode) childNode;",
      "right" : "CDataNode cDataNode = (CDataNode) childNode;",
      "info" : "VariableDeclarationStatement[45189-45233]:VariableDeclarationStatement[45261-45305]"
    }, {
      "left" : "sb.append(cDataNode.getWholeText());",
      "right" : "sb.append(cDataNode.getWholeText());",
      "info" : "ExpressionStatement[45250-45286]:ExpressionStatement[45322-45358]"
    }, {
      "left" : "return StringUtil.releaseBuilder(sb);",
      "right" : "return StringUtil.releaseBuilder(sb);",
      "info" : "ReturnStatement[45319-45356]:ReturnStatement[45391-45428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45729-45773]:Block[45801-45845]"
    }, {
      "left" : "return attr(\"class\").trim();",
      "right" : "return attr(\"class\").trim();",
      "info" : "ReturnStatement[45739-45767]:ReturnStatement[45811-45839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46213-46461]:Block[46285-46533]"
    }, {
      "left" : "String[] names = classSplit.split(className());",
      "right" : "String[] names = classSplit.split(className());",
      "info" : "VariableDeclarationStatement[46220-46267]:VariableDeclarationStatement[46292-46339]"
    }, {
      "left" : "Set<String> classNames = new LinkedHashSet<>(Arrays.asList(names));",
      "right" : "Set<String> classNames = new LinkedHashSet<>(Arrays.asList(names));",
      "info" : "VariableDeclarationStatement[46273-46340]:VariableDeclarationStatement[46345-46412]"
    }, {
      "left" : "classNames.remove(\"\");",
      "right" : "classNames.remove(\"\");",
      "info" : "ExpressionStatement[46346-46368]:ExpressionStatement[46418-46440]"
    }, {
      "left" : "return classNames;",
      "right" : "return classNames;",
      "info" : "ReturnStatement[46437-46455]:ReturnStatement[46509-46527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46687-46931]:Block[46759-47003]"
    }, {
      "left" : "Validate.notNull(classNames);",
      "right" : "Validate.notNull(classNames);",
      "info" : "ExpressionStatement[46697-46726]:ExpressionStatement[46769-46798]"
    }, {
      "left" : "if (classNames.isEmpty())",
      "right" : "if (classNames.isEmpty())",
      "info" : "IfStatement[46735-46904]:IfStatement[46807-46976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46761-46814]:Block[46833-46886]"
    }, {
      "left" : "attributes().remove(\"class\");",
      "right" : "attributes().remove(\"class\");",
      "info" : "ExpressionStatement[46775-46804]:ExpressionStatement[46847-46876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46820-46904]:Block[46892-46976]"
    }, {
      "left" : "attributes().put(\"class\", StringUtil.join(classNames, \" \"));",
      "right" : "attributes().put(\"class\", StringUtil.join(classNames, \" \"));",
      "info" : "ExpressionStatement[46834-46894]:ExpressionStatement[46906-46966]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[46913-46925]:ReturnStatement[46985-46997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47180-48672]:Block[47252-48744]"
    }, {
      "left" : "final String classAttr = attributes().getIgnoreCase(\"class\");",
      "right" : "final String classAttr = attributes().getIgnoreCase(\"class\");",
      "info" : "VariableDeclarationStatement[47190-47251]:VariableDeclarationStatement[47262-47323]"
    }, {
      "left" : "final int len = classAttr.length();",
      "right" : "final int len = classAttr.length();",
      "info" : "VariableDeclarationStatement[47260-47295]:VariableDeclarationStatement[47332-47367]"
    }, {
      "left" : "final int wantLen = className.length();",
      "right" : "final int wantLen = className.length();",
      "info" : "VariableDeclarationStatement[47304-47343]:VariableDeclarationStatement[47376-47415]"
    }, {
      "left" : "if (len == 0 || len < wantLen)",
      "right" : "if (len == 0 || len < wantLen)",
      "info" : "IfStatement[47353-47421]:IfStatement[47425-47493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47384-47421]:Block[47456-47493]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47398-47411]:ReturnStatement[47470-47483]"
    }, {
      "left" : "if (len == wantLen)",
      "right" : "if (len == wantLen)",
      "info" : "IfStatement[47520-47609]:IfStatement[47592-47681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47540-47609]:Block[47612-47681]"
    }, {
      "left" : "return className.equalsIgnoreCase(classAttr);",
      "right" : "return className.equalsIgnoreCase(classAttr);",
      "info" : "ReturnStatement[47554-47599]:ReturnStatement[47626-47671]"
    }, {
      "left" : "boolean inClass = false;",
      "right" : "boolean inClass = false;",
      "info" : "VariableDeclarationStatement[47723-47747]:VariableDeclarationStatement[47795-47819]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[47756-47770]:VariableDeclarationStatement[47828-47842]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[47779-48471]:ForStatement[47851-48543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47809-48471]:Block[47881-48543]"
    }, {
      "left" : "if (Character.isWhitespace(classAttr.charAt(i)))",
      "right" : "if (Character.isWhitespace(classAttr.charAt(i)))",
      "info" : "IfStatement[47823-48461]:IfStatement[47895-48533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47872-48244]:Block[47944-48316]"
    }, {
      "left" : "if (inClass)",
      "right" : "if (inClass)",
      "info" : "IfStatement[47890-48230]:IfStatement[47962-48302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47903-48230]:Block[47975-48302]"
    }, {
      "left" : "if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))",
      "right" : "if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))",
      "info" : "IfStatement[48026-48175]:IfStatement[48098-48247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48115-48175]:Block[48187-48247]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48141-48153]:ReturnStatement[48213-48225]"
    }, {
      "left" : "inClass = false;",
      "right" : "inClass = false;",
      "info" : "ExpressionStatement[48196-48212]:ExpressionStatement[48268-48284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48250-48461]:Block[48322-48533]"
    }, {
      "left" : "if (!inClass)",
      "right" : "if (!inClass)",
      "info" : "IfStatement[48268-48447]:IfStatement[48340-48519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48282-48447]:Block[48354-48519]"
    }, {
      "left" : "inClass = true;",
      "right" : "inClass = true;",
      "info" : "ExpressionStatement[48383-48398]:ExpressionStatement[48455-48470]"
    }, {
      "left" : "start = i;",
      "right" : "start = i;",
      "info" : "ExpressionStatement[48419-48429]:ExpressionStatement[48491-48501]"
    }, {
      "left" : "if (inClass && len - start == wantLen)",
      "right" : "if (inClass && len - start == wantLen)",
      "info" : "IfStatement[48513-48643]:IfStatement[48585-48715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48552-48643]:Block[48624-48715]"
    }, {
      "left" : "return classAttr.regionMatches(true, start, className, 0, wantLen);",
      "right" : "return classAttr.regionMatches(true, start, className, 0, wantLen);",
      "info" : "ReturnStatement[48566-48633]:ReturnStatement[48638-48705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48653-48666]:ReturnStatement[48725-48738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48867-49039]:Block[48939-49111]"
    }, {
      "left" : "Validate.notNull(className);",
      "right" : "Validate.notNull(className);",
      "info" : "ExpressionStatement[48877-48905]:ExpressionStatement[48949-48977]"
    }, {
      "left" : "Set<String> classes = classNames();",
      "right" : "Set<String> classes = classNames();",
      "info" : "VariableDeclarationStatement[48915-48950]:VariableDeclarationStatement[48987-49022]"
    }, {
      "left" : "classes.add(className);",
      "right" : "classes.add(className);",
      "info" : "ExpressionStatement[48959-48982]:ExpressionStatement[49031-49054]"
    }, {
      "left" : "classNames(classes);",
      "right" : "classNames(classes);",
      "info" : "ExpressionStatement[48991-49011]:ExpressionStatement[49063-49083]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49021-49033]:ReturnStatement[49093-49105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49245-49420]:Block[49317-49492]"
    }, {
      "left" : "Validate.notNull(className);",
      "right" : "Validate.notNull(className);",
      "info" : "ExpressionStatement[49255-49283]:ExpressionStatement[49327-49355]"
    }, {
      "left" : "Set<String> classes = classNames();",
      "right" : "Set<String> classes = classNames();",
      "info" : "VariableDeclarationStatement[49293-49328]:VariableDeclarationStatement[49365-49400]"
    }, {
      "left" : "classes.remove(className);",
      "right" : "classes.remove(className);",
      "info" : "ExpressionStatement[49337-49363]:ExpressionStatement[49409-49435]"
    }, {
      "left" : "classNames(classes);",
      "right" : "classNames(classes);",
      "info" : "ExpressionStatement[49372-49392]:ExpressionStatement[49444-49464]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49402-49414]:ReturnStatement[49474-49486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49665-49934]:Block[49737-50006]"
    }, {
      "left" : "Validate.notNull(className);",
      "right" : "Validate.notNull(className);",
      "info" : "ExpressionStatement[49675-49703]:ExpressionStatement[49747-49775]"
    }, {
      "left" : "Set<String> classes = classNames();",
      "right" : "Set<String> classes = classNames();",
      "info" : "VariableDeclarationStatement[49713-49748]:VariableDeclarationStatement[49785-49820]"
    }, {
      "left" : "if (classes.contains(className))",
      "right" : "if (classes.contains(className))",
      "info" : "IfStatement[49757-49877]:IfStatement[49829-49949]"
    }, {
      "left" : "classes.remove(className);",
      "right" : "classes.remove(className);",
      "info" : "ExpressionStatement[49802-49828]:ExpressionStatement[49874-49900]"
    }, {
      "left" : "classes.add(className);",
      "right" : "classes.add(className);",
      "info" : "ExpressionStatement[49854-49877]:ExpressionStatement[49926-49949]"
    }, {
      "left" : "classNames(classes);",
      "right" : "classNames(classes);",
      "info" : "ExpressionStatement[49886-49906]:ExpressionStatement[49958-49978]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49916-49928]:ReturnStatement[49988-50000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50117-50240]:Block[50189-50312]"
    }, {
      "left" : "if (tagName().equals(\"textarea\"))",
      "right" : "if (tagName().equals(\"textarea\"))",
      "info" : "IfStatement[50127-50234]:IfStatement[50199-50306]"
    }, {
      "left" : "return text();",
      "right" : "return text();",
      "info" : "ReturnStatement[50173-50187]:ReturnStatement[50245-50259]"
    }, {
      "left" : "return attr(\"value\");",
      "right" : "return attr(\"value\");",
      "info" : "ReturnStatement[50213-50234]:ReturnStatement[50285-50306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50438-50580]:Block[50510-50652]"
    }, {
      "left" : "if (tagName().equals(\"textarea\"))",
      "right" : "if (tagName().equals(\"textarea\"))",
      "info" : "IfStatement[50448-50553]:IfStatement[50520-50625]"
    }, {
      "left" : "text(value);",
      "right" : "text(value);",
      "info" : "ExpressionStatement[50494-50506]:ExpressionStatement[50566-50578]"
    }, {
      "left" : "attr(\"value\", value);",
      "right" : "attr(\"value\", value);",
      "info" : "ExpressionStatement[50532-50553]:ExpressionStatement[50604-50625]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[50562-50574]:ReturnStatement[50634-50646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50694-51592]:Block[50766-51664]"
    }, {
      "left" : "if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()))",
      "right" : "if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()))",
      "info" : "IfStatement[50704-51069]:IfStatement[50776-51141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50825-51069]:Block[50897-51141]"
    }, {
      "left" : "if (accum instanceof StringBuilder)",
      "right" : "if (accum instanceof StringBuilder)",
      "info" : "IfStatement[50839-51059]:IfStatement[50911-51131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50875-50995]:Block[50947-51067]"
    }, {
      "left" : "if (((StringBuilder) accum).length() > 0)",
      "right" : "if (((StringBuilder) accum).length() > 0)",
      "info" : "IfStatement[50893-50981]:IfStatement[50965-51053]"
    }, {
      "left" : "indent(accum, depth, out);",
      "right" : "indent(accum, depth, out);",
      "info" : "ExpressionStatement[50955-50981]:ExpressionStatement[51027-51053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51001-51059]:Block[51073-51131]"
    }, {
      "left" : "indent(accum, depth, out);",
      "right" : "indent(accum, depth, out);",
      "info" : "ExpressionStatement[51019-51045]:ExpressionStatement[51091-51117]"
    }, {
      "left" : "accum.append('<').append(tagName());",
      "right" : "accum.append('<').append(tagName());",
      "info" : "ExpressionStatement[51078-51114]:ExpressionStatement[51150-51186]"
    }, {
      "left" : "if (attributes != null)",
      "right" : "if (attributes != null)",
      "info" : "IfStatement[51123-51175]:IfStatement[51195-51247]"
    }, {
      "left" : "attributes.html(accum, out);",
      "right" : "attributes.html(accum, out);",
      "info" : "ExpressionStatement[51147-51175]:ExpressionStatement[51219-51247]"
    }, {
      "left" : "if (childNodes.isEmpty() && tag.isSelfClosing())",
      "right" : "if (childNodes.isEmpty() && tag.isSelfClosing())",
      "info" : "IfStatement[51274-51586]:IfStatement[51346-51658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51323-51542]:Block[51395-51614]"
    }, {
      "left" : "if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty())",
      "right" : "if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty())",
      "info" : "IfStatement[51337-51499]:IfStatement[51409-51571]"
    }, {
      "left" : "accum.append('>');",
      "right" : "accum.append('>');",
      "info" : "ExpressionStatement[51427-51445]:ExpressionStatement[51499-51517]"
    }, {
      "left" : "accum.append(\" />\");",
      "right" : "accum.append(\" />\");",
      "info" : "ExpressionStatement[51479-51499]:ExpressionStatement[51551-51571]"
    }, {
      "left" : "accum.append('>');",
      "right" : "accum.append('>');",
      "info" : "ExpressionStatement[51568-51586]:ExpressionStatement[51640-51658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51691-52110]:Block[51763-52182]"
    }, {
      "left" : "if (!(childNodes.isEmpty() && tag.isSelfClosing()))",
      "right" : "if (!(childNodes.isEmpty() && tag.isSelfClosing()))",
      "info" : "IfStatement[51701-52104]:IfStatement[51773-52176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51753-52104]:Block[51825-52176]"
    }, {
      "left" : "if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                    tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n            )))",
      "right" : "if (out.prettyPrint() && (!childNodes.isEmpty() && (\n                    tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode))))\n            )))",
      "info" : "IfStatement[51767-52032]:IfStatement[51839-52104]"
    }, {
      "left" : "indent(accum, depth, out);",
      "right" : "indent(accum, depth, out);",
      "info" : "ExpressionStatement[52006-52032]:ExpressionStatement[52078-52104]"
    }, {
      "left" : "accum.append(\"</\").append(tagName()).append('>');",
      "right" : "accum.append(\"</\").append(tagName()).append('>');",
      "info" : "ExpressionStatement[52045-52094]:ExpressionStatement[52117-52166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52421-52645]:Block[52493-52717]"
    }, {
      "left" : "StringBuilder accum = StringUtil.borrowBuilder();",
      "right" : "StringBuilder accum = StringUtil.borrowBuilder();",
      "info" : "VariableDeclarationStatement[52431-52480]:VariableDeclarationStatement[52503-52552]"
    }, {
      "left" : "html(accum);",
      "right" : "html(accum);",
      "info" : "ExpressionStatement[52489-52501]:ExpressionStatement[52561-52573]"
    }, {
      "left" : "String html = StringUtil.releaseBuilder(accum);",
      "right" : "String html = StringUtil.releaseBuilder(accum);",
      "info" : "VariableDeclarationStatement[52510-52557]:VariableDeclarationStatement[52582-52629]"
    }, {
      "left" : "return NodeUtils.outputSettings(this).prettyPrint() ? html.trim() : html;",
      "right" : "return NodeUtils.outputSettings(this).prettyPrint() ? html.trim() : html;",
      "info" : "ReturnStatement[52566-52639]:ReturnStatement[52638-52711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52716-52887]:Block[52788-52959]"
    }, {
      "left" : "final int size = childNodes.size();",
      "right" : "final int size = childNodes.size();",
      "info" : "VariableDeclarationStatement[52726-52761]:VariableDeclarationStatement[52798-52833]"
    }, {
      "left" : "for (int i = 0; i < size; i++)\n            childNodes.get(i).outerHtml(appendable);",
      "right" : "for (int i = 0; i < size; i++)\n            childNodes.get(i).outerHtml(appendable);",
      "info" : "ForStatement[52770-52853]:ForStatement[52842-52925]"
    }, {
      "left" : "childNodes.get(i).outerHtml(appendable);",
      "right" : "childNodes.get(i).outerHtml(appendable);",
      "info" : "ExpressionStatement[52813-52853]:ExpressionStatement[52885-52925]"
    }, {
      "left" : "return appendable;",
      "right" : "return appendable;",
      "info" : "ReturnStatement[52863-52881]:ReturnStatement[52935-52953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53131-53198]:Block[53203-53270]"
    }, {
      "left" : "empty();",
      "right" : "empty();",
      "info" : "ExpressionStatement[53141-53149]:ExpressionStatement[53213-53221]"
    }, {
      "left" : "append(html);",
      "right" : "append(html);",
      "info" : "ExpressionStatement[53158-53171]:ExpressionStatement[53230-53243]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[53180-53192]:ReturnStatement[53252-53264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53241-53288]:Block[53313-53360]"
    }, {
      "left" : "return (Element) super.clone();",
      "right" : "return (Element) super.clone();",
      "info" : "ReturnStatement[53251-53282]:ReturnStatement[53323-53354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53338-53471]:Block[53410-53543]"
    }, {
      "left" : "return new Element(tag, baseUri, attributes);",
      "right" : "return new Element(tag, baseUri, attributes);",
      "info" : "ReturnStatement[53420-53465]:ReturnStatement[53492-53537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53530-53896]:Block[53602-53968]"
    }, {
      "left" : "Element clone = (Element) super.doClone(parent);",
      "right" : "Element clone = (Element) super.doClone(parent);",
      "info" : "VariableDeclarationStatement[53540-53588]:VariableDeclarationStatement[53612-53660]"
    }, {
      "left" : "clone.attributes = attributes != null ? attributes.clone() : null;",
      "right" : "clone.attributes = attributes != null ? attributes.clone() : null;",
      "info" : "ExpressionStatement[53597-53663]:ExpressionStatement[53669-53735]"
    }, {
      "left" : "clone.baseUri = baseUri;",
      "right" : "clone.baseUri = baseUri;",
      "info" : "ExpressionStatement[53672-53696]:ExpressionStatement[53744-53768]"
    }, {
      "left" : "clone.childNodes = new NodeList(clone, childNodes.size());",
      "right" : "clone.childNodes = new NodeList(clone, childNodes.size());",
      "info" : "ExpressionStatement[53705-53763]:ExpressionStatement[53777-53835]"
    }, {
      "left" : "clone.childNodes.addAll(childNodes);",
      "right" : "clone.childNodes.addAll(childNodes);",
      "info" : "ExpressionStatement[53772-53808]:ExpressionStatement[53844-53880]"
    }, {
      "left" : "return clone;",
      "right" : "return clone;",
      "info" : "ReturnStatement[53877-53890]:ReturnStatement[53949-53962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54070-54149]:Block[54142-54221]"
    }, {
      "left" : "super(initialCapacity);",
      "right" : "super(initialCapacity);",
      "info" : "SuperConstructorInvocation[54084-54107]:SuperConstructorInvocation[54156-54179]"
    }, {
      "left" : "this.owner = owner;",
      "right" : "this.owner = owner;",
      "info" : "ExpressionStatement[54120-54139]:ExpressionStatement[54192-54211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54191-54239]:Block[54263-54311]"
    }, {
      "left" : "owner.nodelistChanged();",
      "right" : "owner.nodelistChanged();",
      "info" : "ExpressionStatement[54205-54229]:ExpressionStatement[54277-54301]"
    } ]
  },
  "interFileMappings" : { }
}