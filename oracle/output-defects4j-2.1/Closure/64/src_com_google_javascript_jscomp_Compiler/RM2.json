{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "TypeDeclaration[2156-59481]:TypeDeclaration[2156-59540]"
    }, {
      "left" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "right" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "info" : "FieldDeclaration[2702-2918]:FieldDeclaration[2702-2918]"
    }, {
      "left" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "right" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "info" : "FieldDeclaration[2922-3080]:FieldDeclaration[2922-3080]"
    }, {
      "left" : "CompilerOptions options = null;",
      "right" : "CompilerOptions options = null;",
      "info" : "FieldDeclaration[3084-3115]:FieldDeclaration[3084-3115]"
    }, {
      "left" : "private PassConfig passes = null;",
      "right" : "private PassConfig passes = null;",
      "info" : "FieldDeclaration[3119-3152]:FieldDeclaration[3119-3152]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[3180-3216]:FieldDeclaration[3180-3216]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[3247-3278]:FieldDeclaration[3247-3278]"
    }, {
      "left" : "private JSModuleGraph moduleGraph;",
      "right" : "private JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[3432-3466]:FieldDeclaration[3432-3466]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[3496-3531]:FieldDeclaration[3496-3531]"
    }, {
      "left" : "private ErrorManager errorManager;",
      "right" : "private ErrorManager errorManager;",
      "info" : "FieldDeclaration[3593-3627]:FieldDeclaration[3593-3627]"
    }, {
      "left" : "private WarningsGuard warningsGuard;",
      "right" : "private WarningsGuard warningsGuard;",
      "info" : "FieldDeclaration[3675-3711]:FieldDeclaration[3675-3711]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[3742-3759]:FieldDeclaration[3742-3759]"
    }, {
      "left" : "Node jsRoot;",
      "right" : "Node jsRoot;",
      "info" : "FieldDeclaration[3762-3774]:FieldDeclaration[3762-3774]"
    }, {
      "left" : "Node externAndJsRoot;",
      "right" : "Node externAndJsRoot;",
      "info" : "FieldDeclaration[3777-3798]:FieldDeclaration[3777-3798]"
    }, {
      "left" : "private Map<String, CompilerInput> inputsByName;",
      "right" : "private Map<String, CompilerInput> inputsByName;",
      "info" : "FieldDeclaration[3802-3850]:FieldDeclaration[3802-3850]"
    }, {
      "left" : "private SourceMap sourceMap;",
      "right" : "private SourceMap sourceMap;",
      "info" : "FieldDeclaration[3854-3911]:FieldDeclaration[3854-3911]"
    }, {
      "left" : "private String externExports = null;",
      "right" : "private String externExports = null;",
      "info" : "FieldDeclaration[3915-3999]:FieldDeclaration[3915-3999]"
    }, {
      "left" : "private int uniqueNameId = 0;",
      "right" : "private int uniqueNameId = 0;",
      "info" : "FieldDeclaration[4003-4123]:FieldDeclaration[4003-4123]"
    }, {
      "left" : "private boolean useThreads = true;",
      "right" : "private boolean useThreads = true;",
      "info" : "FieldDeclaration[4127-4194]:FieldDeclaration[4127-4194]"
    }, {
      "left" : "private boolean hasRegExpGlobalReferences = true;",
      "right" : "private boolean hasRegExpGlobalReferences = true;",
      "info" : "FieldDeclaration[4198-4348]:FieldDeclaration[4198-4348]"
    }, {
      "left" : "private FunctionInformationMap functionInformationMap;",
      "right" : "private FunctionInformationMap functionInformationMap;",
      "info" : "FieldDeclaration[4352-4444]:FieldDeclaration[4352-4444]"
    }, {
      "left" : "private final StringBuilder debugLog = new StringBuilder();",
      "right" : "private final StringBuilder debugLog = new StringBuilder();",
      "info" : "FieldDeclaration[4448-4538]:FieldDeclaration[4448-4538]"
    }, {
      "left" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "right" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "info" : "FieldDeclaration[4542-4668]:FieldDeclaration[4542-4668]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[4672-4708]:FieldDeclaration[4672-4708]"
    }, {
      "left" : "private Config parserConfig = null;",
      "right" : "private Config parserConfig = null;",
      "info" : "FieldDeclaration[4711-4746]:FieldDeclaration[4711-4746]"
    }, {
      "left" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "right" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "info" : "FieldDeclaration[4750-4805]:FieldDeclaration[4750-4805]"
    }, {
      "left" : "private TypeValidator typeValidator;",
      "right" : "private TypeValidator typeValidator;",
      "info" : "FieldDeclaration[4808-4844]:FieldDeclaration[4808-4844]"
    }, {
      "left" : "public PerformanceTracker tracker;",
      "right" : "public PerformanceTracker tracker;",
      "info" : "FieldDeclaration[4848-4882]:FieldDeclaration[4848-4882]"
    }, {
      "left" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "right" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "info" : "FieldDeclaration[4965-5083]:FieldDeclaration[4965-5083]"
    }, {
      "left" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "right" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "info" : "FieldDeclaration[5161-5255]:FieldDeclaration[5161-5255]"
    }, {
      "left" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "right" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "info" : "FieldDeclaration[5259-5483]:FieldDeclaration[5259-5483]"
    }, {
      "left" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "right" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "info" : "FieldDeclaration[5486-5665]:FieldDeclaration[5486-5665]"
    }, {
      "left" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "right" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "info" : "FieldDeclaration[5669-5726]:FieldDeclaration[5669-5726]"
    }, {
      "left" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "right" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "info" : "FieldDeclaration[5731-6006]:FieldDeclaration[5731-6006]"
    }, {
      "left" : "private final PrintStream outStream;",
      "right" : "private final PrintStream outStream;",
      "info" : "FieldDeclaration[6010-6046]:FieldDeclaration[6010-6046]"
    }, {
      "left" : "private GlobalVarReferenceMap globalRefMap = null;",
      "right" : "private GlobalVarReferenceMap globalRefMap = null;",
      "info" : "FieldDeclaration[6050-6100]:FieldDeclaration[6050-6100]"
    }, {
      "left" : "public Compiler()",
      "right" : "public Compiler()",
      "info" : "MethodDeclaration[6104-6241]:MethodDeclaration[6104-6241]"
    }, {
      "left" : "public Compiler(PrintStream stream)",
      "right" : "public Compiler(PrintStream stream)",
      "info" : "MethodDeclaration[6245-6441]:MethodDeclaration[6245-6441]"
    }, {
      "left" : "public Compiler(ErrorManager errorManager)",
      "right" : "public Compiler(ErrorManager errorManager)",
      "info" : "MethodDeclaration[6445-6610]:MethodDeclaration[6445-6610]"
    }, {
      "left" : "public void setErrorManager(ErrorManager errorManager)",
      "right" : "public void setErrorManager(ErrorManager errorManager)",
      "info" : "MethodDeclaration[6614-6919]:MethodDeclaration[6614-6919]"
    }, {
      "left" : "private MessageFormatter createMessageFormatter()",
      "right" : "private MessageFormatter createMessageFormatter()",
      "info" : "MethodDeclaration[6923-7212]:MethodDeclaration[6923-7212]"
    }, {
      "left" : "public void initOptions(CompilerOptions options)",
      "right" : "public void initOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[7216-9479]:MethodDeclaration[7216-9479]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[9483-9769]:MethodDeclaration[9483-9769]"
    }, {
      "left" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "right" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[9773-10141]:MethodDeclaration[9773-10141]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10145-10468]:MethodDeclaration[10145-10468]"
    }, {
      "left" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "right" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10472-11550]:MethodDeclaration[10472-11550]"
    }, {
      "left" : "private void initBasedOnOptions()",
      "right" : "private void initBasedOnOptions()",
      "info" : "MethodDeclaration[11554-11828]:MethodDeclaration[11554-11828]"
    }, {
      "left" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "right" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "info" : "MethodDeclaration[11832-12105]:MethodDeclaration[11832-12105]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "right" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "info" : "FieldDeclaration[12109-12279]:FieldDeclaration[12109-12279]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "right" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "info" : "FieldDeclaration[12283-12478]:FieldDeclaration[12283-12478]"
    }, {
      "left" : "private void checkFirstModule(List<JSModule> modules)",
      "right" : "private void checkFirstModule(List<JSModule> modules)",
      "info" : "MethodDeclaration[12482-13001]:MethodDeclaration[12482-13001]"
    }, {
      "left" : "private static void fillEmptyModules(List<JSModule> modules)",
      "right" : "private static void fillEmptyModules(List<JSModule> modules)",
      "info" : "MethodDeclaration[13005-13354]:MethodDeclaration[13005-13354]"
    }, {
      "left" : "public void rebuildInputsFromModules()",
      "right" : "public void rebuildInputsFromModules()",
      "info" : "MethodDeclaration[13358-13718]:MethodDeclaration[13358-13718]"
    }, {
      "left" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "right" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "info" : "MethodDeclaration[13722-14451]:MethodDeclaration[13722-14451]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "info" : "FieldDeclaration[14455-14575]:FieldDeclaration[14455-14575]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "info" : "FieldDeclaration[14578-14729]:FieldDeclaration[14578-14729]"
    }, {
      "left" : "void initInputsByNameMap()",
      "right" : "void initInputsByNameMap()",
      "info" : "MethodDeclaration[14733-15430]:MethodDeclaration[14733-15430]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "info" : "MethodDeclaration[15434-15602]:MethodDeclaration[15434-15602]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "info" : "MethodDeclaration[15606-15776]:MethodDeclaration[15606-15776]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "info" : "MethodDeclaration[15780-15950]:MethodDeclaration[15780-15950]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[15954-16275]:MethodDeclaration[15954-16275]"
    }, {
      "left" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "right" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "info" : "MethodDeclaration[16279-16814]:MethodDeclaration[16279-16814]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[16818-17141]:MethodDeclaration[16818-17141]"
    }, {
      "left" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "right" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "info" : "MethodDeclaration[17145-17693]:MethodDeclaration[17145-17693]"
    }, {
      "left" : "private Result compile()",
      "right" : "private Result compile()",
      "info" : "MethodDeclaration[17697-17900]:MethodDeclaration[17697-17900]"
    }, {
      "left" : "public Result call() throws Exception",
      "right" : "public Result call() throws Exception",
      "info" : "MethodDeclaration[17786-17888]:MethodDeclaration[17786-17888]"
    }, {
      "left" : "public void disableThreads()",
      "right" : "public void disableThreads()",
      "info" : "MethodDeclaration[17904-18067]:MethodDeclaration[17904-18067]"
    }, {
      "left" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "right" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "info" : "MethodDeclaration[18071-18207]:MethodDeclaration[18071-18207]"
    }, {
      "left" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "right" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "info" : "MethodDeclaration[18211-18330]:MethodDeclaration[18211-18330]"
    }, {
      "left" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "right" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "info" : "MethodDeclaration[18334-19913]:MethodDeclaration[18334-19913]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[19040-19397]:MethodDeclaration[19040-19397]"
    }, {
      "left" : "private void compileInternal()",
      "right" : "private void compileInternal()",
      "info" : "MethodDeclaration[19917-20745]:MethodDeclaration[19917-20745]"
    }, {
      "left" : "public void parse()",
      "right" : "public void parse()",
      "info" : "MethodDeclaration[20749-20793]:MethodDeclaration[20749-20793]"
    }, {
      "left" : "PassConfig getPassConfig()",
      "right" : "PassConfig getPassConfig()",
      "info" : "MethodDeclaration[20797-20923]:MethodDeclaration[20797-20923]"
    }, {
      "left" : "PassConfig createPassConfigInternal()",
      "right" : "PassConfig createPassConfigInternal()",
      "info" : "MethodDeclaration[20927-21122]:MethodDeclaration[20927-21122]"
    }, {
      "left" : "public void setPassConfig(PassConfig passes)",
      "right" : "public void setPassConfig(PassConfig passes)",
      "info" : "MethodDeclaration[21126-21870]:MethodDeclaration[21126-21870]"
    }, {
      "left" : "boolean precheck()",
      "right" : "boolean precheck()",
      "info" : "MethodDeclaration[21874-22110]:MethodDeclaration[21874-22110]"
    }, {
      "left" : "public void check()",
      "right" : "public void check()",
      "info" : "MethodDeclaration[22114-23190]:MethodDeclaration[22114-23190]"
    }, {
      "left" : "private void externExports()",
      "right" : "private void externExports()",
      "info" : "MethodDeclaration[23194-23456]:MethodDeclaration[23194-23456]"
    }, {
      "left" : "void process(CompilerPass p)",
      "right" : "void process(CompilerPass p)",
      "info" : "MethodDeclaration[23460-23542]:MethodDeclaration[23460-23542]"
    }, {
      "left" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "right" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "info" : "FieldDeclaration[23546-23767]:FieldDeclaration[23546-23767]"
    }, {
      "left" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "right" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[23636-23762]:MethodDeclaration[23636-23762]"
    }, {
      "left" : "private void maybeSanityCheck()",
      "right" : "private void maybeSanityCheck()",
      "info" : "MethodDeclaration[23771-23887]:MethodDeclaration[23771-23887]"
    }, {
      "left" : "private void runSanityCheck()",
      "right" : "private void runSanityCheck()",
      "info" : "MethodDeclaration[23891-23985]:MethodDeclaration[23891-23985]"
    }, {
      "left" : "void removeTryCatchFinally()",
      "right" : "void removeTryCatchFinally()",
      "info" : "MethodDeclaration[23989-24264]:MethodDeclaration[23989-24264]"
    }, {
      "left" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "right" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "info" : "MethodDeclaration[24268-24849]:MethodDeclaration[24268-24849]"
    }, {
      "left" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "right" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "info" : "MethodDeclaration[24853-25289]:MethodDeclaration[24853-25289]"
    }, {
      "left" : "private Tracer currentTracer = null;",
      "right" : "private Tracer currentTracer = null;",
      "info" : "FieldDeclaration[25293-25329]:FieldDeclaration[25293-25329]"
    }, {
      "left" : "private String currentPassName = null;",
      "right" : "private String currentPassName = null;",
      "info" : "FieldDeclaration[25332-25370]:FieldDeclaration[25332-25370]"
    }, {
      "left" : "void startPass(String passName)",
      "right" : "void startPass(String passName)",
      "info" : "MethodDeclaration[25374-25585]:MethodDeclaration[25374-25585]"
    }, {
      "left" : "void endPass()",
      "right" : "void endPass()",
      "info" : "MethodDeclaration[25589-25932]:MethodDeclaration[25589-25932]"
    }, {
      "left" : "Tracer newTracer(String passName)",
      "right" : "Tracer newTracer(String passName)",
      "info" : "MethodDeclaration[25936-26269]:MethodDeclaration[25936-26269]"
    }, {
      "left" : "void stopTracer(Tracer t, String passName)",
      "right" : "void stopTracer(Tracer t, String passName)",
      "info" : "MethodDeclaration[26273-26436]:MethodDeclaration[26273-26436]"
    }, {
      "left" : "public Result getResult()",
      "right" : "public Result getResult()",
      "info" : "MethodDeclaration[26440-26867]:MethodDeclaration[26440-26867]"
    }, {
      "left" : "public JSError[] getMessages()",
      "right" : "public JSError[] getMessages()",
      "info" : "MethodDeclaration[26871-27011]:MethodDeclaration[26871-27011]"
    }, {
      "left" : "public JSError[] getErrors()",
      "right" : "public JSError[] getErrors()",
      "info" : "MethodDeclaration[27015-27145]:MethodDeclaration[27015-27145]"
    }, {
      "left" : "public JSError[] getWarnings()",
      "right" : "public JSError[] getWarnings()",
      "info" : "MethodDeclaration[27149-27285]:MethodDeclaration[27149-27285]"
    }, {
      "left" : "public Node getRoot()",
      "right" : "public Node getRoot()",
      "info" : "MethodDeclaration[27289-27356]:MethodDeclaration[27289-27356]"
    }, {
      "left" : "private int nextUniqueNameId()",
      "right" : "private int nextUniqueNameId()",
      "info" : "MethodDeclaration[27360-27482]:MethodDeclaration[27360-27482]"
    }, {
      "left" : "void resetUniqueNameId()",
      "right" : "void resetUniqueNameId()",
      "info" : "MethodDeclaration[27486-27610]:MethodDeclaration[27486-27610]"
    }, {
      "left" : "Supplier<String> getUniqueNameIdSupplier()",
      "right" : "Supplier<String> getUniqueNameIdSupplier()",
      "info" : "MethodDeclaration[27614-27841]:MethodDeclaration[27614-27841]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[27745-27830]:MethodDeclaration[27745-27830]"
    }, {
      "left" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "right" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "info" : "MethodDeclaration[27845-28208]:MethodDeclaration[27845-28208]"
    }, {
      "left" : "public CompilerInput getInput(String name)",
      "right" : "public CompilerInput getInput(String name)",
      "info" : "MethodDeclaration[28519-28614]:MethodDeclaration[28519-28614]"
    }, {
      "left" : "protected void removeInput(String name)",
      "right" : "protected void removeInput(String name)",
      "info" : "MethodDeclaration[28618-28984]:MethodDeclaration[28618-28984]"
    }, {
      "left" : "public CompilerInput newExternInput(String name)",
      "right" : "public CompilerInput newExternInput(String name)",
      "info" : "MethodDeclaration[28988-29395]:MethodDeclaration[28988-29395]"
    }, {
      "left" : "void addIncrementalSourceAst(JsAst ast)",
      "right" : "void addIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[29399-29754]:MethodDeclaration[29399-29754]"
    }, {
      "left" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "right" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[29758-30853]:MethodDeclaration[29758-30853]"
    }, {
      "left" : "JSModuleGraph getModuleGraph()",
      "right" : "JSModuleGraph getModuleGraph()",
      "info" : "MethodDeclaration[30857-30929]:MethodDeclaration[30857-30929]"
    }, {
      "left" : "public JSTypeRegistry getTypeRegistry()",
      "right" : "public JSTypeRegistry getTypeRegistry()",
      "info" : "MethodDeclaration[30933-31132]:MethodDeclaration[30933-31132]"
    }, {
      "left" : "ScopeCreator getTypedScopeCreator()",
      "right" : "ScopeCreator getTypedScopeCreator()",
      "info" : "MethodDeclaration[31136-31240]:MethodDeclaration[31136-31240]"
    }, {
      "left" : "public Scope getTopScope()",
      "right" : "public Scope getTopScope()",
      "info" : "MethodDeclaration[31244-31330]:MethodDeclaration[31244-31330]"
    }, {
      "left" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "right" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "info" : "MethodDeclaration[31334-31899]:MethodDeclaration[31334-31899]"
    }, {
      "left" : "TypeValidator getTypeValidator()",
      "right" : "TypeValidator getTypeValidator()",
      "info" : "MethodDeclaration[31903-32065]:MethodDeclaration[31903-32065]"
    }, {
      "left" : "Node parseInputs()",
      "right" : "Node parseInputs()",
      "info" : "MethodDeclaration[32237-36523]:MethodDeclaration[32237-36523]"
    }, {
      "left" : "public Node parse(JSSourceFile file)",
      "right" : "public Node parse(JSSourceFile file)",
      "info" : "MethodDeclaration[36527-36699]:MethodDeclaration[36527-36699]"
    }, {
      "left" : "Node parseSyntheticCode(String js)",
      "right" : "Node parseSyntheticCode(String js)",
      "info" : "MethodDeclaration[36703-36934]:MethodDeclaration[36703-36934]"
    }, {
      "left" : "void initCompilerOptionsIfTesting()",
      "right" : "void initCompilerOptionsIfTesting()",
      "info" : "MethodDeclaration[36938-37158]:MethodDeclaration[36938-37158]"
    }, {
      "left" : "Node parseSyntheticCode(String fileName, String js)",
      "right" : "Node parseSyntheticCode(String fileName, String js)",
      "info" : "MethodDeclaration[37162-37322]:MethodDeclaration[37162-37322]"
    }, {
      "left" : "Node parseTestCode(String js)",
      "right" : "Node parseTestCode(String js)",
      "info" : "MethodDeclaration[37326-37665]:MethodDeclaration[37326-37665]"
    }, {
      "left" : "ErrorReporter getDefaultErrorReporter()",
      "right" : "ErrorReporter getDefaultErrorReporter()",
      "info" : "MethodDeclaration[37669-37759]:MethodDeclaration[37669-37759]"
    }, {
      "left" : "public String toSource()",
      "right" : "public String toSource()",
      "info" : "MethodDeclaration[37951-38649]:MethodDeclaration[37951-38649]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[38103-38637]:MethodDeclaration[38103-38637]"
    }, {
      "left" : "public String[] toSourceArray()",
      "right" : "public String[] toSourceArray()",
      "info" : "MethodDeclaration[38653-39429]:MethodDeclaration[38653-39429]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[38824-39417]:MethodDeclaration[38824-39417]"
    }, {
      "left" : "public String toSource(final JSModule module)",
      "right" : "public String toSource(final JSModule module)",
      "info" : "MethodDeclaration[39433-40216]:MethodDeclaration[39433-40216]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[39614-40204]:MethodDeclaration[39614-40204]"
    }, {
      "left" : "public String[] toSourceArray(final JSModule module)",
      "right" : "public String[] toSourceArray(final JSModule module)",
      "info" : "MethodDeclaration[40221-41159]:MethodDeclaration[40221-41159]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[40425-41147]:MethodDeclaration[40425-41147]"
    }, {
      "left" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "right" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "info" : "MethodDeclaration[41163-43835]:MethodDeclaration[41163-43853]"
    }, {
      "left" : "String toSource(Node n)",
      "right" : "String toSource(Node n)",
      "info" : "MethodDeclaration[43839-44047]:MethodDeclaration[43857-44071]"
    }, {
      "left" : "private String toSource(Node n, SourceMap sourceMap)",
      "right" : "private String toSource(Node n, SourceMap sourceMap, boolean firstOutput)",
      "info" : "MethodDeclaration[44051-44772]:MethodDeclaration[44075-44831]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "TypeDeclaration[44776-46521]:TypeDeclaration[44835-46580]"
    }, {
      "left" : "private final StringBuilder sb = new StringBuilder();",
      "right" : "private final StringBuilder sb = new StringBuilder();",
      "info" : "FieldDeclaration[44973-45026]:FieldDeclaration[45032-45085]"
    }, {
      "left" : "private int lineCount = 0;",
      "right" : "private int lineCount = 0;",
      "info" : "FieldDeclaration[45031-45057]:FieldDeclaration[45090-45116]"
    }, {
      "left" : "private int colCount = 0;",
      "right" : "private int colCount = 0;",
      "info" : "FieldDeclaration[45062-45087]:FieldDeclaration[45121-45146]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[45093-45202]:MethodDeclaration[45152-45261]"
    }, {
      "left" : "CodeBuilder append(String str)",
      "right" : "CodeBuilder append(String str)",
      "info" : "MethodDeclaration[45208-45774]:MethodDeclaration[45267-45833]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[45780-45902]:MethodDeclaration[45839-45961]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[45908-46014]:MethodDeclaration[45967-46073]"
    }, {
      "left" : "int getLineIndex()",
      "right" : "int getLineIndex()",
      "info" : "MethodDeclaration[46020-46149]:MethodDeclaration[46079-46208]"
    }, {
      "left" : "int getColumnIndex()",
      "right" : "int getColumnIndex()",
      "info" : "MethodDeclaration[46155-46287]:MethodDeclaration[46214-46346]"
    }, {
      "left" : "boolean endsWith(String suffix)",
      "right" : "boolean endsWith(String suffix)",
      "info" : "MethodDeclaration[46293-46517]:MethodDeclaration[46352-46576]"
    }, {
      "left" : "public void optimize()",
      "right" : "public void optimize()",
      "info" : "MethodDeclaration[46699-47345]:MethodDeclaration[46758-47404]"
    }, {
      "left" : "void setCssRenamingMap(CssRenamingMap map)",
      "right" : "void setCssRenamingMap(CssRenamingMap map)",
      "info" : "MethodDeclaration[47349-47443]:MethodDeclaration[47408-47502]"
    }, {
      "left" : "CssRenamingMap getCssRenamingMap()",
      "right" : "CssRenamingMap getCssRenamingMap()",
      "info" : "MethodDeclaration[47447-47534]:MethodDeclaration[47506-47593]"
    }, {
      "left" : "public void processDefines()",
      "right" : "public void processDefines()",
      "info" : "MethodDeclaration[47538-48025]:MethodDeclaration[47597-48084]"
    }, {
      "left" : "boolean isInliningForbidden()",
      "right" : "boolean isInliningForbidden()",
      "info" : "MethodDeclaration[48029-48232]:MethodDeclaration[48088-48291]"
    }, {
      "left" : "ControlFlowGraph<Node> computeCFG()",
      "right" : "ControlFlowGraph<Node> computeCFG()",
      "info" : "MethodDeclaration[48236-48558]:MethodDeclaration[48295-48617]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[48562-48707]:MethodDeclaration[48621-48766]"
    }, {
      "left" : "void prepareAst(Node root)",
      "right" : "void prepareAst(Node root)",
      "info" : "MethodDeclaration[48711-48914]:MethodDeclaration[48770-48973]"
    }, {
      "left" : "void recordFunctionInformation()",
      "right" : "void recordFunctionInformation()",
      "info" : "MethodDeclaration[48918-49332]:MethodDeclaration[48977-49391]"
    }, {
      "left" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "right" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "info" : "FieldDeclaration[49336-49441]:FieldDeclaration[49395-49500]"
    }, {
      "left" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "right" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "info" : "FieldDeclaration[49444-49549]:FieldDeclaration[49503-49608]"
    }, {
      "left" : "void addChangeHandler(CodeChangeHandler handler)",
      "right" : "void addChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[49553-49656]:MethodDeclaration[49612-49715]"
    }, {
      "left" : "void removeChangeHandler(CodeChangeHandler handler)",
      "right" : "void removeChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[49660-49769]:MethodDeclaration[49719-49828]"
    }, {
      "left" : "public void reportCodeChange()",
      "right" : "public void reportCodeChange()",
      "info" : "MethodDeclaration[49773-50107]:MethodDeclaration[49832-50166]"
    }, {
      "left" : "public CodingConvention getCodingConvention()",
      "right" : "public CodingConvention getCodingConvention()",
      "info" : "MethodDeclaration[50111-50338]:MethodDeclaration[50170-50397]"
    }, {
      "left" : "public boolean isIdeMode()",
      "right" : "public boolean isIdeMode()",
      "info" : "MethodDeclaration[50342-50414]:MethodDeclaration[50401-50473]"
    }, {
      "left" : "public boolean acceptEcmaScript5()",
      "right" : "public boolean acceptEcmaScript5()",
      "info" : "MethodDeclaration[50418-50609]:MethodDeclaration[50477-50668]"
    }, {
      "left" : "public LanguageMode languageMode()",
      "right" : "public LanguageMode languageMode()",
      "info" : "MethodDeclaration[50613-50689]:MethodDeclaration[50672-50748]"
    }, {
      "left" : "public boolean acceptConstKeyword()",
      "right" : "public boolean acceptConstKeyword()",
      "info" : "MethodDeclaration[50693-50785]:MethodDeclaration[50752-50844]"
    }, {
      "left" : "Config getParserConfig()",
      "right" : "Config getParserConfig()",
      "info" : "MethodDeclaration[50789-51471]:MethodDeclaration[50848-51530]"
    }, {
      "left" : "public boolean isTypeCheckingEnabled()",
      "right" : "public boolean isTypeCheckingEnabled()",
      "info" : "MethodDeclaration[51475-51562]:MethodDeclaration[51534-51621]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[51743-51974]:MethodDeclaration[51802-52033]"
    }, {
      "left" : "public void report(JSError error)",
      "right" : "public void report(JSError error)",
      "info" : "MethodDeclaration[51978-52296]:MethodDeclaration[52037-52355]"
    }, {
      "left" : "public CheckLevel getErrorLevel(JSError error)",
      "right" : "public CheckLevel getErrorLevel(JSError error)",
      "info" : "MethodDeclaration[52300-52444]:MethodDeclaration[52359-52503]"
    }, {
      "left" : "void throwInternalError(String message, Exception cause)",
      "right" : "void throwInternalError(String message, Exception cause)",
      "info" : "MethodDeclaration[52448-52836]:MethodDeclaration[52507-52895]"
    }, {
      "left" : "public int getErrorCount()",
      "right" : "public int getErrorCount()",
      "info" : "MethodDeclaration[52841-52958]:MethodDeclaration[52900-53017]"
    }, {
      "left" : "public int getWarningCount()",
      "right" : "public int getWarningCount()",
      "info" : "MethodDeclaration[52962-53085]:MethodDeclaration[53021-53144]"
    }, {
      "left" : "boolean hasHaltingErrors()",
      "right" : "boolean hasHaltingErrors()",
      "info" : "MethodDeclaration[53089-53181]:MethodDeclaration[53148-53240]"
    }, {
      "left" : "public boolean hasErrors()",
      "right" : "public boolean hasErrors()",
      "info" : "MethodDeclaration[53185-53666]:MethodDeclaration[53244-53725]"
    }, {
      "left" : "void addToDebugLog(String str)",
      "right" : "void addToDebugLog(String str)",
      "info" : "MethodDeclaration[53670-53851]:MethodDeclaration[53729-53910]"
    }, {
      "left" : "private SourceFile getSourceFileByName(String sourceName)",
      "right" : "private SourceFile getSourceFileByName(String sourceName)",
      "info" : "MethodDeclaration[53855-54048]:MethodDeclaration[53914-54107]"
    }, {
      "left" : "public String getSourceLine(String sourceName, int lineNumber)",
      "right" : "public String getSourceLine(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[54052-54315]:MethodDeclaration[54111-54374]"
    }, {
      "left" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "right" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[54319-54586]:MethodDeclaration[54378-54645]"
    }, {
      "left" : "Node getNodeForCodeInsertion(JSModule module)",
      "right" : "Node getNodeForCodeInsertion(JSModule module)",
      "info" : "MethodDeclaration[54774-55225]:MethodDeclaration[54833-55284]"
    }, {
      "left" : "public SourceMap getSourceMap()",
      "right" : "public SourceMap getSourceMap()",
      "info" : "MethodDeclaration[55229-55288]:MethodDeclaration[55288-55347]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[55292-55389]:MethodDeclaration[55351-55448]"
    }, {
      "left" : "VariableMap getPropertyMap()",
      "right" : "VariableMap getPropertyMap()",
      "info" : "MethodDeclaration[55393-55490]:MethodDeclaration[55452-55549]"
    }, {
      "left" : "CompilerOptions getOptions()",
      "right" : "CompilerOptions getOptions()",
      "info" : "MethodDeclaration[55494-55548]:MethodDeclaration[55553-55607]"
    }, {
      "left" : "FunctionInformationMap getFunctionalInformationMap()",
      "right" : "FunctionInformationMap getFunctionalInformationMap()",
      "info" : "MethodDeclaration[55552-55645]:MethodDeclaration[55611-55704]"
    }, {
      "left" : "public static void setLoggingLevel(Level level)",
      "right" : "public static void setLoggingLevel(Level level)",
      "info" : "MethodDeclaration[55649-55816]:MethodDeclaration[55708-55875]"
    }, {
      "left" : "public String getAstDotGraph() throws IOException",
      "right" : "public String getAstDotGraph() throws IOException",
      "info" : "MethodDeclaration[55820-56177]:MethodDeclaration[55879-56236]"
    }, {
      "left" : "public ErrorManager getErrorManager()",
      "right" : "public ErrorManager getErrorManager()",
      "info" : "MethodDeclaration[56181-56336]:MethodDeclaration[56240-56395]"
    }, {
      "left" : "List<CompilerInput> getInputsInOrder()",
      "right" : "List<CompilerInput> getInputsInOrder()",
      "info" : "MethodDeclaration[56340-56460]:MethodDeclaration[56399-56519]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "TypeDeclaration[56464-57530]:TypeDeclaration[56523-57589]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[57130-57178]:FieldDeclaration[57189-57237]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[57184-57201]:FieldDeclaration[57243-57260]"
    }, {
      "left" : "private Node jsRoot;",
      "right" : "private Node jsRoot;",
      "info" : "FieldDeclaration[57206-57226]:FieldDeclaration[57265-57285]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[57231-57267]:FieldDeclaration[57290-57326]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[57272-57307]:FieldDeclaration[57331-57366]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[57312-57343]:FieldDeclaration[57371-57402]"
    }, {
      "left" : "private PassConfig.State passConfigState;",
      "right" : "private PassConfig.State passConfigState;",
      "info" : "FieldDeclaration[57348-57389]:FieldDeclaration[57407-57448]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[57394-57430]:FieldDeclaration[57453-57489]"
    }, {
      "left" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "right" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "info" : "FieldDeclaration[57435-57490]:FieldDeclaration[57494-57549]"
    }, {
      "left" : "private IntermediateState()",
      "right" : "private IntermediateState()",
      "info" : "MethodDeclaration[57496-57526]:MethodDeclaration[57555-57585]"
    }, {
      "left" : "public IntermediateState getState()",
      "right" : "public IntermediateState getState()",
      "info" : "MethodDeclaration[57534-58045]:MethodDeclaration[57593-58104]"
    }, {
      "left" : "public void setState(IntermediateState state)",
      "right" : "public void setState(IntermediateState state)",
      "info" : "MethodDeclaration[58049-58572]:MethodDeclaration[58108-58631]"
    }, {
      "left" : "List<CompilerInput> getInputsForTesting()",
      "right" : "List<CompilerInput> getInputsForTesting()",
      "info" : "MethodDeclaration[58576-58663]:MethodDeclaration[58635-58722]"
    }, {
      "left" : "List<CompilerInput> getExternsForTesting()",
      "right" : "List<CompilerInput> getExternsForTesting()",
      "info" : "MethodDeclaration[58667-58756]:MethodDeclaration[58726-58815]"
    }, {
      "left" : "boolean hasRegExpGlobalReferences()",
      "right" : "boolean hasRegExpGlobalReferences()",
      "info" : "MethodDeclaration[58760-58851]:MethodDeclaration[58819-58910]"
    }, {
      "left" : "void setHasRegExpGlobalReferences(boolean references)",
      "right" : "void setHasRegExpGlobalReferences(boolean references)",
      "info" : "MethodDeclaration[58855-58970]:MethodDeclaration[58914-59029]"
    }, {
      "left" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "right" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "info" : "MethodDeclaration[58974-59394]:MethodDeclaration[59033-59453]"
    }, {
      "left" : "ReferenceMap getGlobalVarReferences()",
      "right" : "ReferenceMap getGlobalVarReferences()",
      "info" : "MethodDeclaration[59398-59478]:MethodDeclaration[59457-59537]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-6241]:Block[6206-6241]"
    }, {
      "left" : "this((PrintStream) null);",
      "right" : "this((PrintStream) null);",
      "info" : "ConstructorInvocation[6212-6237]:ConstructorInvocation[6212-6237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6376-6441]:Block[6376-6441]"
    }, {
      "left" : "addChangeHandler(recentChange);",
      "right" : "addChangeHandler(recentChange);",
      "info" : "ExpressionStatement[6382-6413]:ExpressionStatement[6382-6413]"
    }, {
      "left" : "outStream = stream;",
      "right" : "outStream = stream;",
      "info" : "ExpressionStatement[6418-6437]:ExpressionStatement[6418-6437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6610]:Block[6558-6610]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[6564-6571]:ConstructorInvocation[6564-6571]"
    }, {
      "left" : "setErrorManager(errorManager);",
      "right" : "setErrorManager(errorManager);",
      "info" : "ExpressionStatement[6576-6606]:ExpressionStatement[6576-6606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6785-6919]:Block[6785-6919]"
    }, {
      "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "info" : "ExpressionStatement[6791-6877]:ExpressionStatement[6791-6877]"
    }, {
      "left" : "this.errorManager = errorManager;",
      "right" : "this.errorManager = errorManager;",
      "info" : "ExpressionStatement[6882-6915]:ExpressionStatement[6882-6915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7087-7212]:Block[7087-7212]"
    }, {
      "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "info" : "VariableDeclarationStatement[7093-7148]:VariableDeclarationStatement[7093-7148]"
    }, {
      "left" : "return options.errorFormat.toFormatter(this, colorize);",
      "right" : "return options.errorFormat.toFormatter(this, colorize);",
      "info" : "ReturnStatement[7153-7208]:ReturnStatement[7153-7208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7379-9479]:Block[7379-9479]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[7385-7408]:ExpressionStatement[7385-7408]"
    }, {
      "left" : "if (errorManager == null)",
      "right" : "if (errorManager == null)",
      "info" : "IfStatement[7413-7817]:IfStatement[7413-7817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7439-7817]:Block[7439-7817]"
    }, {
      "left" : "if (outStream == null)",
      "right" : "if (outStream == null)",
      "info" : "IfStatement[7447-7811]:IfStatement[7447-7811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7470-7575]:Block[7470-7575]"
    }, {
      "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "info" : "ExpressionStatement[7480-7567]:ExpressionStatement[7480-7567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7581-7811]:Block[7581-7811]"
    }, {
      "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "info" : "VariableDeclarationStatement[7591-7702]:VariableDeclarationStatement[7591-7702]"
    }, {
      "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "info" : "ExpressionStatement[7711-7769]:ExpressionStatement[7711-7769]"
    }, {
      "left" : "setErrorManager(printer);",
      "right" : "setErrorManager(printer);",
      "info" : "ExpressionStatement[7778-7803]:ExpressionStatement[7778-7803]"
    }, {
      "left" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[7885-8418]:IfStatement[7885-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7936-7976]:Block[7936-7976]"
    }, {
      "left" : "options.checkTypes = true;",
      "right" : "options.checkTypes = true;",
      "info" : "ExpressionStatement[7944-7970]:ExpressionStatement[7944-7970]"
    }, {
      "left" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[7982-8418]:IfStatement[7982-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8075]:Block[8034-8075]"
    }, {
      "left" : "options.checkTypes = false;",
      "right" : "options.checkTypes = false;",
      "info" : "ExpressionStatement[8042-8069]:ExpressionStatement[8042-8069]"
    }, {
      "left" : "if (!options.checkTypes)",
      "right" : "if (!options.checkTypes)",
      "info" : "IfStatement[8081-8418]:IfStatement[8081-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8106-8418]:Block[8106-8418]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "info" : "ExpressionStatement[8274-8412]:ExpressionStatement[8274-8412]"
    }, {
      "left" : "if (options.checkGlobalThisLevel.isOn())",
      "right" : "if (options.checkGlobalThisLevel.isOn())",
      "info" : "IfStatement[8424-8584]:IfStatement[8424-8584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8584]:Block[8465-8584]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "info" : "ExpressionStatement[8473-8578]:ExpressionStatement[8473-8578]"
    }, {
      "left" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "right" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[8628-8678]:VariableDeclarationStatement[8628-8678]"
    }, {
      "left" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "right" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "info" : "ExpressionStatement[8683-8791]:ExpressionStatement[8683-8791]"
    }, {
      "left" : "guards.add(options.getWarningsGuard());",
      "right" : "guards.add(options.getWarningsGuard());",
      "info" : "ExpressionStatement[8796-8835]:ExpressionStatement[8796-8835]"
    }, {
      "left" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
      "right" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
      "info" : "VariableDeclarationStatement[8841-8912]:VariableDeclarationStatement[8841-8912]"
    }, {
      "left" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "right" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "info" : "IfStatement[9204-9433]:IfStatement[9204-9433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9300-9433]:Block[9300-9433]"
    }, {
      "left" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "right" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "info" : "ExpressionStatement[9308-9427]:ExpressionStatement[9308-9427]"
    }, {
      "left" : "this.warningsGuard = composedGuards;",
      "right" : "this.warningsGuard = composedGuards;",
      "info" : "ExpressionStatement[9439-9475]:ExpressionStatement[9439-9475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9652-9769]:Block[9652-9769]"
    }, {
      "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "info" : "ExpressionStatement[9658-9765]:ExpressionStatement[9658-9765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9950-10141]:Block[9950-10141]"
    }, {
      "left" : "JSModule module = new JSModule(\"[singleton]\");",
      "right" : "JSModule module = new JSModule(\"[singleton]\");",
      "info" : "VariableDeclarationStatement[9956-10002]:VariableDeclarationStatement[9956-10002]"
    }, {
      "left" : "for (JSSourceFile input : inputs)",
      "right" : "for (JSSourceFile input : inputs)",
      "info" : "EnhancedForStatement[10007-10073]:EnhancedForStatement[10007-10073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10041-10073]:Block[10041-10073]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[10049-10067]:ExpressionStatement[10049-10067]"
    }, {
      "left" : "initModules(externs, Lists.newArrayList(module), options);",
      "right" : "initModules(externs, Lists.newArrayList(module), options);",
      "info" : "ExpressionStatement[10079-10137]:ExpressionStatement[10079-10137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10346-10468]:Block[10346-10468]"
    }, {
      "left" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "right" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "info" : "ExpressionStatement[10352-10464]:ExpressionStatement[10352-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10695-11550]:Block[10695-11550]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[10701-10722]:ExpressionStatement[10701-10722]"
    }, {
      "left" : "checkFirstModule(modules);",
      "right" : "checkFirstModule(modules);",
      "info" : "ExpressionStatement[10728-10754]:ExpressionStatement[10728-10754]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[10759-10785]:ExpressionStatement[10759-10785]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[10791-10839]:ExpressionStatement[10791-10839]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[10947-10970]:ExpressionStatement[10947-10970]"
    }, {
      "left" : "if (modules.size() > 1)",
      "right" : "if (modules.size() > 1)",
      "info" : "IfStatement[10975-11439]:IfStatement[10975-11439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10999-11395]:Block[10999-11395]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11007-11389]:TryStatement[11007-11389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11011-11075]:Block[11011-11075]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[11021-11067]:ExpressionStatement[11021-11067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11126-11389]:Block[11126-11389]"
    }, {
      "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "info" : "ExpressionStatement[11244-11365]:ExpressionStatement[11244-11365]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11374-11381]:ReturnStatement[11374-11381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11401-11439]:Block[11401-11439]"
    }, {
      "left" : "this.moduleGraph = null;",
      "right" : "this.moduleGraph = null;",
      "info" : "ExpressionStatement[11409-11433]:ExpressionStatement[11409-11433]"
    }, {
      "left" : "this.inputs = getAllInputsFromModules(modules);",
      "right" : "this.inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[11445-11492]:ExpressionStatement[11445-11492]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[11497-11518]:ExpressionStatement[11497-11518]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[11524-11546]:ExpressionStatement[11524-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11670-11828]:Block[11670-11828]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[11719-11824]:IfStatement[11719-11824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11760-11824]:Block[11760-11824]"
    }, {
      "left" : "sourceMap = options.sourceMapFormat.getInstance();",
      "right" : "sourceMap = options.sourceMapFormat.getInstance();",
      "info" : "ExpressionStatement[11768-11818]:ExpressionStatement[11768-11818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11929-12105]:Block[11929-12105]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11935-11985]:VariableDeclarationStatement[11935-11985]"
    }, {
      "left" : "for (JSSourceFile file : files)",
      "right" : "for (JSSourceFile file : files)",
      "info" : "EnhancedForStatement[11990-12082]:EnhancedForStatement[11990-12082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12022-12082]:Block[12022-12082]"
    }, {
      "left" : "inputs.add(new CompilerInput(file, isExtern));",
      "right" : "inputs.add(new CompilerInput(file, isExtern));",
      "info" : "ExpressionStatement[12030-12076]:ExpressionStatement[12030-12076]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[12087-12101]:ReturnStatement[12087-12101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12669-13001]:Block[12669-13001]"
    }, {
      "left" : "if (modules.isEmpty())",
      "right" : "if (modules.isEmpty())",
      "info" : "IfStatement[12675-12997]:IfStatement[12675-12997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12698-12758]:Block[12698-12758]"
    }, {
      "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "info" : "ExpressionStatement[12706-12752]:ExpressionStatement[12706-12752]"
    }, {
      "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "info" : "IfStatement[12764-12997]:IfStatement[12764-12997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12828-12997]:Block[12828-12997]"
    }, {
      "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "info" : "ExpressionStatement[12909-12991]:ExpressionStatement[12909-12991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13178-13354]:Block[13178-13354]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[13184-13350]:EnhancedForStatement[13184-13350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13216-13350]:Block[13216-13350]"
    }, {
      "left" : "if (module.getInputs().isEmpty())",
      "right" : "if (module.getInputs().isEmpty())",
      "info" : "IfStatement[13224-13344]:IfStatement[13224-13344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13258-13344]:Block[13258-13344]"
    }, {
      "left" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "right" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "info" : "ExpressionStatement[13268-13336]:ExpressionStatement[13268-13336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13639-13718]:Block[13639-13718]"
    }, {
      "left" : "inputs = getAllInputsFromModules(modules);",
      "right" : "inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[13645-13687]:ExpressionStatement[13645-13687]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[13692-13714]:ExpressionStatement[13692-13714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13918-14451]:Block[13918-14451]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[13924-13974]:VariableDeclarationStatement[13924-13974]"
    }, {
      "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[13979-14030]:VariableDeclarationStatement[13979-14030]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[14035-14428]:EnhancedForStatement[14035-14428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14067-14428]:Block[14067-14428]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[14075-14422]:EnhancedForStatement[14075-14422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14122-14422]:Block[14122-14422]"
    }, {
      "left" : "String inputName = input.getName();",
      "right" : "String inputName = input.getName();",
      "info" : "VariableDeclarationStatement[14132-14167]:VariableDeclarationStatement[14132-14167]"
    }, {
      "left" : "inputs.add(input);",
      "right" : "inputs.add(input);",
      "info" : "ExpressionStatement[14355-14373]:ExpressionStatement[14355-14373]"
    }, {
      "left" : "inputMap.put(inputName, module);",
      "right" : "inputMap.put(inputName, module);",
      "info" : "ExpressionStatement[14382-14414]:ExpressionStatement[14382-14414]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[14433-14447]:ReturnStatement[14433-14447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14872-15430]:Block[14872-15430]"
    }, {
      "left" : "inputsByName = new HashMap<String, CompilerInput>();",
      "right" : "inputsByName = new HashMap<String, CompilerInput>();",
      "info" : "ExpressionStatement[14878-14930]:ExpressionStatement[14878-14930]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[14935-15182]:EnhancedForStatement[14935-15182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14971-15182]:Block[14971-15182]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[14979-15009]:VariableDeclarationStatement[14979-15009]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[15016-15176]:IfStatement[15016-15176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15053-15101]:Block[15053-15101]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[15063-15093]:ExpressionStatement[15063-15093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15107-15176]:Block[15107-15176]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "info" : "ExpressionStatement[15117-15168]:ExpressionStatement[15117-15168]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[15187-15426]:EnhancedForStatement[15187-15426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15222-15426]:Block[15222-15426]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[15230-15260]:VariableDeclarationStatement[15230-15260]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[15267-15420]:IfStatement[15267-15420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15304-15352]:Block[15304-15352]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[15314-15344]:ExpressionStatement[15314-15344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15358-15420]:Block[15358-15420]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "info" : "ExpressionStatement[15368-15412]:ExpressionStatement[15368-15412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15529-15602]:Block[15529-15602]"
    }, {
      "left" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "right" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "info" : "ReturnStatement[15536-15598]:ReturnStatement[15536-15598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15703-15776]:Block[15703-15776]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "info" : "ReturnStatement[15710-15772]:ReturnStatement[15710-15772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15875-15950]:Block[15875-15950]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "info" : "ReturnStatement[15882-15946]:ReturnStatement[15882-15946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16140-16275]:Block[16140-16275]"
    }, {
      "left" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "right" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "info" : "ReturnStatement[16146-16271]:ReturnStatement[16146-16271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16431-16814]:Block[16431-16814]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[16491-16532]:ExpressionStatement[16491-16532]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16538-16810]:TryStatement[16538-16810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16542-16672]:Block[16542-16672]"
    }, {
      "left" : "init(externs, inputs, options);",
      "right" : "init(externs, inputs, options);",
      "info" : "ExpressionStatement[16550-16581]:ExpressionStatement[16550-16581]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[16588-16642]:IfStatement[16588-16642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16605-16642]:Block[16605-16642]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[16615-16634]:ReturnStatement[16615-16634]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[16649-16666]:ReturnStatement[16649-16666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16681-16810]:Block[16681-16810]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[16689-16728]:VariableDeclarationStatement[16689-16728]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[16735-16765]:ExpressionStatement[16735-16765]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[16772-16804]:ExpressionStatement[16772-16804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17002-17141]:Block[17002-17141]"
    }, {
      "left" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "right" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "info" : "ReturnStatement[17008-17137]:ReturnStatement[17008-17137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17302-17693]:Block[17302-17693]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[17362-17403]:ExpressionStatement[17362-17403]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17409-17689]:TryStatement[17409-17689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17413-17551]:Block[17413-17551]"
    }, {
      "left" : "initModules(externs, modules, options);",
      "right" : "initModules(externs, modules, options);",
      "info" : "ExpressionStatement[17421-17460]:ExpressionStatement[17421-17460]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[17467-17521]:IfStatement[17467-17521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17484-17521]:Block[17484-17521]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[17494-17513]:ReturnStatement[17494-17513]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[17528-17545]:ReturnStatement[17528-17545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17560-17689]:Block[17560-17689]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[17568-17607]:VariableDeclarationStatement[17568-17607]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[17614-17644]:ExpressionStatement[17614-17644]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[17651-17683]:ExpressionStatement[17651-17683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17722-17900]:Block[17722-17900]"
    }, {
      "left" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "info" : "ReturnStatement[17728-17896]:ReturnStatement[17728-17896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17824-17888]:Block[17824-17888]"
    }, {
      "left" : "compileInternal();",
      "right" : "compileInternal();",
      "info" : "ExpressionStatement[17834-17852]:ExpressionStatement[17834-17852]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[17861-17880]:ReturnStatement[17861-17880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18038-18067]:Block[18038-18067]"
    }, {
      "left" : "useThreads = false;",
      "right" : "useThreads = false;",
      "info" : "ExpressionStatement[18044-18063]:ExpressionStatement[18044-18063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18133-18207]:Block[18133-18207]"
    }, {
      "left" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "right" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "info" : "ReturnStatement[18139-18203]:ReturnStatement[18139-18203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18278-18330]:Block[18278-18330]"
    }, {
      "left" : "return runCallable(callable, true, false);",
      "right" : "return runCallable(callable, true, false);",
      "info" : "ReturnStatement[18284-18326]:ReturnStatement[18284-18326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18471-19913]:Block[18471-19913]"
    }, {
      "left" : "final boolean dumpTraceReport = trace;",
      "right" : "final boolean dumpTraceReport = trace;",
      "info" : "VariableDeclarationStatement[18859-18897]:VariableDeclarationStatement[18859-18897]"
    }, {
      "left" : "final Object[] result = new Object[1];",
      "right" : "final Object[] result = new Object[1];",
      "info" : "VariableDeclarationStatement[18902-18940]:VariableDeclarationStatement[18902-18940]"
    }, {
      "left" : "final Throwable[] exception = new Throwable[1];",
      "right" : "final Throwable[] exception = new Throwable[1];",
      "info" : "VariableDeclarationStatement[18945-18992]:VariableDeclarationStatement[18945-18992]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "right" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[18997-19404]:VariableDeclarationStatement[18997-19404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19058-19397]:Block[19058-19397]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19068-19389]:TryStatement[19068-19389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19072-19212]:Block[19072-19212]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[19084-19163]:IfStatement[19084-19163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19105-19163]:Block[19105-19163]"
    }, {
      "left" : "Tracer.initCurrentThreadTrace();",
      "right" : "Tracer.initCurrentThreadTrace();",
      "info" : "ExpressionStatement[19119-19151]:ExpressionStatement[19119-19151]"
    }, {
      "left" : "result[0] = callable.call();",
      "right" : "result[0] = callable.call();",
      "info" : "ExpressionStatement[19174-19202]:ExpressionStatement[19174-19202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19233-19272]:Block[19233-19272]"
    }, {
      "left" : "exception[0] = e;",
      "right" : "exception[0] = e;",
      "info" : "ExpressionStatement[19245-19262]:ExpressionStatement[19245-19262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19281-19389]:Block[19281-19389]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[19293-19379]:IfStatement[19293-19379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19314-19379]:Block[19314-19379]"
    }, {
      "left" : "Tracer.logAndClearCurrentThreadTrace();",
      "right" : "Tracer.logAndClearCurrentThreadTrace();",
      "info" : "ExpressionStatement[19328-19367]:ExpressionStatement[19328-19367]"
    }, {
      "left" : "if (useLargeStackThread)",
      "right" : "if (useLargeStackThread)",
      "info" : "IfStatement[19410-19735]:IfStatement[19410-19735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19435-19700]:Block[19435-19700]"
    }, {
      "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "info" : "VariableDeclarationStatement[19443-19517]:VariableDeclarationStatement[19443-19517]"
    }, {
      "left" : "th.start();",
      "right" : "th.start();",
      "info" : "ExpressionStatement[19524-19535]:ExpressionStatement[19524-19535]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[19542-19694]:WhileStatement[19542-19694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19555-19694]:Block[19555-19694]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19565-19686]:TryStatement[19565-19686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19569-19618]:Block[19569-19618]"
    }, {
      "left" : "th.join();",
      "right" : "th.join();",
      "info" : "ExpressionStatement[19581-19591]:ExpressionStatement[19581-19591]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19602-19608]:BreakStatement[19602-19608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19655-19686]:Block[19655-19686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19706-19735]:Block[19706-19735]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[19714-19729]:ExpressionStatement[19714-19729]"
    }, {
      "left" : "if (exception[0] != null)",
      "right" : "if (exception[0] != null)",
      "info" : "IfStatement[19801-19882]:IfStatement[19801-19882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19827-19882]:Block[19827-19882]"
    }, {
      "left" : "throw new RuntimeException(exception[0]);",
      "right" : "throw new RuntimeException(exception[0]);",
      "info" : "ThrowStatement[19835-19876]:ThrowStatement[19835-19876]"
    }, {
      "left" : "return (T) result[0];",
      "right" : "return (T) result[0];",
      "info" : "ReturnStatement[19888-19909]:ReturnStatement[19888-19909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19948-20745]:Block[19948-20745]"
    }, {
      "left" : "parse();",
      "right" : "parse();",
      "info" : "ExpressionStatement[19954-19962]:ExpressionStatement[19954-19962]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[19967-20005]:IfStatement[19967-20005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19984-20005]:Block[19984-20005]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19992-19999]:ReturnStatement[19992-19999]"
    }, {
      "left" : "if (!precheck())",
      "right" : "if (!precheck())",
      "info" : "IfStatement[20011-20049]:IfStatement[20011-20049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20028-20049]:Block[20028-20049]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20036-20043]:ReturnStatement[20036-20043]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[20055-20202]:IfStatement[20055-20202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20095-20202]:Block[20095-20202]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[20174-20182]:ExpressionStatement[20174-20182]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20189-20196]:ReturnStatement[20189-20196]"
    }, {
      "left" : "if (!options.skipAllPasses)",
      "right" : "if (!options.skipAllPasses)",
      "info" : "IfStatement[20208-20571]:IfStatement[20208-20571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20236-20571]:Block[20236-20571]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[20244-20252]:ExpressionStatement[20244-20252]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[20259-20301]:IfStatement[20259-20301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20276-20301]:Block[20276-20301]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20286-20293]:ReturnStatement[20286-20293]"
    }, {
      "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "info" : "IfStatement[20309-20428]:IfStatement[20309-20428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20394-20428]:Block[20394-20428]"
    }, {
      "left" : "externExports();",
      "right" : "externExports();",
      "info" : "ExpressionStatement[20404-20420]:ExpressionStatement[20404-20420]"
    }, {
      "left" : "if (!options.ideMode)",
      "right" : "if (!options.ideMode)",
      "info" : "IfStatement[20514-20565]:IfStatement[20514-20565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20536-20565]:Block[20536-20565]"
    }, {
      "left" : "optimize();",
      "right" : "optimize();",
      "info" : "ExpressionStatement[20546-20557]:ExpressionStatement[20546-20557]"
    }, {
      "left" : "if (options.recordFunctionInformation)",
      "right" : "if (options.recordFunctionInformation)",
      "info" : "IfStatement[20577-20658]:IfStatement[20577-20658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20616-20658]:Block[20616-20658]"
    }, {
      "left" : "recordFunctionInformation();",
      "right" : "recordFunctionInformation();",
      "info" : "ExpressionStatement[20624-20652]:ExpressionStatement[20624-20652]"
    }, {
      "left" : "if (options.devMode == DevMode.START_AND_END)",
      "right" : "if (options.devMode == DevMode.START_AND_END)",
      "info" : "IfStatement[20664-20741]:IfStatement[20664-20741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20710-20741]:Block[20710-20741]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[20718-20735]:ExpressionStatement[20718-20735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20769-20793]:Block[20769-20793]"
    }, {
      "left" : "parseInputs();",
      "right" : "parseInputs();",
      "info" : "ExpressionStatement[20775-20789]:ExpressionStatement[20775-20789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20824-20923]:Block[20824-20923]"
    }, {
      "left" : "if (passes == null)",
      "right" : "if (passes == null)",
      "info" : "IfStatement[20830-20900]:IfStatement[20830-20900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20850-20900]:Block[20850-20900]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[20858-20894]:ExpressionStatement[20858-20894]"
    }, {
      "left" : "return passes;",
      "right" : "return passes;",
      "info" : "ReturnStatement[20905-20919]:ReturnStatement[20905-20919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21074-21122]:Block[21074-21122]"
    }, {
      "left" : "return new DefaultPassConfig(options);",
      "right" : "return new DefaultPassConfig(options);",
      "info" : "ReturnStatement[21080-21118]:ReturnStatement[21080-21118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21372-21870]:Block[21372-21870]"
    }, {
      "left" : "Preconditions.checkNotNull(passes);",
      "right" : "Preconditions.checkNotNull(passes);",
      "info" : "ExpressionStatement[21687-21722]:ExpressionStatement[21687-21722]"
    }, {
      "left" : "if (this.passes != null)",
      "right" : "if (this.passes != null)",
      "info" : "IfStatement[21728-21840]:IfStatement[21728-21840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21753-21840]:Block[21753-21840]"
    }, {
      "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "info" : "ThrowStatement[21761-21834]:ThrowStatement[21761-21834]"
    }, {
      "left" : "this.passes = passes;",
      "right" : "this.passes = passes;",
      "info" : "ExpressionStatement[21845-21866]:ExpressionStatement[21845-21866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22088-22110]:Block[22088-22110]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22094-22106]:ReturnStatement[22094-22106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22134-23190]:Block[22134-23190]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "info" : "ExpressionStatement[22140-22195]:ExpressionStatement[22140-22195]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[22201-22267]:VariableDeclarationStatement[22201-22267]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[22272-22372]:IfStatement[22272-22372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22315-22372]:Block[22315-22372]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[22323-22366]:ExpressionStatement[22323-22366]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "info" : "ExpressionStatement[22377-22429]:ExpressionStatement[22377-22429]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[22434-22478]:ExpressionStatement[22434-22478]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[22483-22521]:IfStatement[22483-22521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22500-22521]:Block[22500-22521]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22508-22515]:ReturnStatement[22508-22515]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[22604-22665]:IfStatement[22604-22665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22644-22665]:Block[22644-22665]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22652-22659]:ReturnStatement[22652-22659]"
    }, {
      "left" : "if (options.removeTryCatchFinally)",
      "right" : "if (options.removeTryCatchFinally)",
      "info" : "IfStatement[22671-22744]:IfStatement[22671-22744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22706-22744]:Block[22706-22744]"
    }, {
      "left" : "removeTryCatchFinally();",
      "right" : "removeTryCatchFinally();",
      "info" : "ExpressionStatement[22714-22738]:ExpressionStatement[22714-22738]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "right" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "info" : "IfStatement[22750-23118]:IfStatement[22750-23118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22983-23118]:Block[22983-23118]"
    }, {
      "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "info" : "ExpressionStatement[22991-23112]:ExpressionStatement[22991-23112]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "info" : "ExpressionStatement[23124-23186]:ExpressionStatement[23124-23186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23223-23456]:Block[23223-23456]"
    }, {
      "left" : "logger.info(\"Creating extern file for exports\");",
      "right" : "logger.info(\"Creating extern file for exports\");",
      "info" : "ExpressionStatement[23229-23277]:ExpressionStatement[23229-23277]"
    }, {
      "left" : "startPass(\"externExports\");",
      "right" : "startPass(\"externExports\");",
      "info" : "ExpressionStatement[23282-23309]:ExpressionStatement[23282-23309]"
    }, {
      "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "info" : "VariableDeclarationStatement[23315-23368]:VariableDeclarationStatement[23315-23368]"
    }, {
      "left" : "process(pass);",
      "right" : "process(pass);",
      "info" : "ExpressionStatement[23373-23387]:ExpressionStatement[23373-23387]"
    }, {
      "left" : "externExports = pass.getGeneratedExterns();",
      "right" : "externExports = pass.getGeneratedExterns();",
      "info" : "ExpressionStatement[23393-23436]:ExpressionStatement[23393-23436]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[23442-23452]:ExpressionStatement[23442-23452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23501-23542]:Block[23501-23542]"
    }, {
      "left" : "p.process(externsRoot, jsRoot);",
      "right" : "p.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[23507-23538]:ExpressionStatement[23507-23538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23715-23762]:Block[23715-23762]"
    }, {
      "left" : "return new SanityCheck(compiler);",
      "right" : "return new SanityCheck(compiler);",
      "info" : "ReturnStatement[23723-23756]:ReturnStatement[23723-23756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23803-23887]:Block[23803-23887]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[23809-23883]:IfStatement[23809-23883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23852-23883]:Block[23852-23883]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[23860-23877]:ExpressionStatement[23860-23877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23921-23985]:Block[23921-23985]"
    }, {
      "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[23927-23981]:ExpressionStatement[23927-23981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24094-24264]:Block[24094-24264]"
    }, {
      "left" : "logger.info(\"Remove try/catch/finally\");",
      "right" : "logger.info(\"Remove try/catch/finally\");",
      "info" : "ExpressionStatement[24100-24140]:ExpressionStatement[24100-24140]"
    }, {
      "left" : "startPass(\"removeTryCatchFinally\");",
      "right" : "startPass(\"removeTryCatchFinally\");",
      "info" : "ExpressionStatement[24145-24180]:ExpressionStatement[24145-24180]"
    }, {
      "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "info" : "VariableDeclarationStatement[24185-24229]:VariableDeclarationStatement[24185-24229]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[24234-24245]:ExpressionStatement[24234-24245]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[24250-24260]:ExpressionStatement[24250-24260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24546-24849]:Block[24546-24849]"
    }, {
      "left" : "logger.info(\"Strip code\");",
      "right" : "logger.info(\"Strip code\");",
      "info" : "ExpressionStatement[24552-24578]:ExpressionStatement[24552-24578]"
    }, {
      "left" : "startPass(\"stripCode\");",
      "right" : "startPass(\"stripCode\");",
      "info" : "ExpressionStatement[24583-24606]:ExpressionStatement[24583-24606]"
    }, {
      "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "info" : "VariableDeclarationStatement[24611-24722]:VariableDeclarationStatement[24611-24722]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip())",
      "right" : "if (options.getTweakProcessing().shouldStrip())",
      "info" : "IfStatement[24727-24814]:IfStatement[24727-24814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24775-24814]:Block[24775-24814]"
    }, {
      "left" : "r.enableTweakStripping();",
      "right" : "r.enableTweakStripping();",
      "info" : "ExpressionStatement[24783-24808]:ExpressionStatement[24783-24808]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[24819-24830]:ExpressionStatement[24819-24830]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[24835-24845]:ExpressionStatement[24835-24845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25006-25289]:Block[25006-25289]"
    }, {
      "left" : "if (options.customPasses != null)",
      "right" : "if (options.customPasses != null)",
      "info" : "IfStatement[25012-25285]:IfStatement[25012-25285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25046-25285]:Block[25046-25285]"
    }, {
      "left" : "Tracer t = newTracer(\"runCustomPasses\");",
      "right" : "Tracer t = newTracer(\"runCustomPasses\");",
      "info" : "VariableDeclarationStatement[25054-25094]:VariableDeclarationStatement[25054-25094]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25101-25279]:TryStatement[25101-25279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25105-25219]:Block[25105-25219]"
    }, {
      "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "info" : "EnhancedForStatement[25115-25211]:EnhancedForStatement[25115-25211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25178-25211]:Block[25178-25211]"
    }, {
      "left" : "process(p);",
      "right" : "process(p);",
      "info" : "ExpressionStatement[25190-25201]:ExpressionStatement[25190-25201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25228-25279]:Block[25228-25279]"
    }, {
      "left" : "stopTracer(t, \"runCustomPasses\");",
      "right" : "stopTracer(t, \"runCustomPasses\");",
      "info" : "ExpressionStatement[25238-25271]:ExpressionStatement[25238-25271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25454-25585]:Block[25454-25585]"
    }, {
      "left" : "Preconditions.checkState(currentTracer == null);",
      "right" : "Preconditions.checkState(currentTracer == null);",
      "info" : "ExpressionStatement[25460-25508]:ExpressionStatement[25460-25508]"
    }, {
      "left" : "currentPassName = passName;",
      "right" : "currentPassName = passName;",
      "info" : "ExpressionStatement[25513-25540]:ExpressionStatement[25513-25540]"
    }, {
      "left" : "currentTracer = newTracer(passName);",
      "right" : "currentTracer = newTracer(passName);",
      "info" : "ExpressionStatement[25545-25581]:ExpressionStatement[25545-25581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25646-25932]:Block[25646-25932]"
    }, {
      "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "info" : "ExpressionStatement[25652-25759]:ExpressionStatement[25652-25759]"
    }, {
      "left" : "stopTracer(currentTracer, currentPassName);",
      "right" : "stopTracer(currentTracer, currentPassName);",
      "info" : "ExpressionStatement[25764-25807]:ExpressionStatement[25764-25807]"
    }, {
      "left" : "String passToCheck = currentPassName;",
      "right" : "String passToCheck = currentPassName;",
      "info" : "VariableDeclarationStatement[25812-25849]:VariableDeclarationStatement[25812-25849]"
    }, {
      "left" : "currentPassName = null;",
      "right" : "currentPassName = null;",
      "info" : "ExpressionStatement[25854-25877]:ExpressionStatement[25854-25877]"
    }, {
      "left" : "currentTracer = null;",
      "right" : "currentTracer = null;",
      "info" : "ExpressionStatement[25882-25903]:ExpressionStatement[25882-25903]"
    }, {
      "left" : "maybeSanityCheck();",
      "right" : "maybeSanityCheck();",
      "info" : "ExpressionStatement[25909-25928]:ExpressionStatement[25909-25928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26033-26269]:Block[26033-26269]"
    }, {
      "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "info" : "VariableDeclarationStatement[26039-26141]:VariableDeclarationStatement[26039-26141]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[26146-26221]:IfStatement[26146-26221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26173-26221]:Block[26173-26221]"
    }, {
      "left" : "tracker.recordPassStart(passName);",
      "right" : "tracker.recordPassStart(passName);",
      "info" : "ExpressionStatement[26181-26215]:ExpressionStatement[26181-26215]"
    }, {
      "left" : "return new Tracer(\"Compiler\", comment);",
      "right" : "return new Tracer(\"Compiler\", comment);",
      "info" : "ReturnStatement[26226-26265]:ReturnStatement[26226-26265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26316-26436]:Block[26316-26436]"
    }, {
      "left" : "long result = t.stop();",
      "right" : "long result = t.stop();",
      "info" : "VariableDeclarationStatement[26322-26345]:VariableDeclarationStatement[26322-26345]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[26350-26432]:IfStatement[26350-26432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26377-26432]:Block[26377-26432]"
    }, {
      "left" : "tracker.recordPassStop(passName, result);",
      "right" : "tracker.recordPassStop(passName, result);",
      "info" : "ExpressionStatement[26385-26426]:ExpressionStatement[26385-26426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26522-26867]:Block[26522-26867]"
    }, {
      "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "info" : "VariableDeclarationStatement[26528-26592]:VariableDeclarationStatement[26528-26592]"
    }, {
      "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "info" : "ReturnStatement[26597-26863]:ReturnStatement[26597-26863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26982-27011]:Block[26982-27011]"
    }, {
      "left" : "return getErrors();",
      "right" : "return getErrors();",
      "info" : "ReturnStatement[26988-27007]:ReturnStatement[26988-27007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27103-27145]:Block[27103-27145]"
    }, {
      "left" : "return errorManager.getErrors();",
      "right" : "return errorManager.getErrors();",
      "info" : "ReturnStatement[27109-27141]:ReturnStatement[27109-27141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27241-27285]:Block[27241-27285]"
    }, {
      "left" : "return errorManager.getWarnings();",
      "right" : "return errorManager.getWarnings();",
      "info" : "ReturnStatement[27247-27281]:ReturnStatement[27247-27281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27323-27356]:Block[27323-27356]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[27329-27352]:ReturnStatement[27329-27352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27450-27482]:Block[27450-27482]"
    }, {
      "left" : "return uniqueNameId++;",
      "right" : "return uniqueNameId++;",
      "info" : "ReturnStatement[27456-27478]:ReturnStatement[27456-27478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27583-27610]:Block[27583-27610]"
    }, {
      "left" : "uniqueNameId = 0;",
      "right" : "uniqueNameId = 0;",
      "info" : "ExpressionStatement[27589-27606]:ExpressionStatement[27589-27606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27669-27841]:Block[27669-27841]"
    }, {
      "left" : "final Compiler self = this;",
      "right" : "final Compiler self = this;",
      "info" : "VariableDeclarationStatement[27675-27702]:VariableDeclarationStatement[27675-27702]"
    }, {
      "left" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "right" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "info" : "ReturnStatement[27707-27837]:ReturnStatement[27707-27837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27765-27830]:Block[27765-27830]"
    }, {
      "left" : "return String.valueOf(self.nextUniqueNameId());",
      "right" : "return String.valueOf(self.nextUniqueNameId());",
      "info" : "ReturnStatement[27775-27822]:ReturnStatement[27775-27822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27908-28208]:Block[27908-28208]"
    }, {
      "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "info" : "IfStatement[27914-28204]:IfStatement[27914-28204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27989-28155]:Block[27989-28155]"
    }, {
      "left" : "return n1.isEquivalentToTyped(n2);",
      "right" : "return n1.isEquivalentToTyped(n2);",
      "info" : "ReturnStatement[28115-28149]:ReturnStatement[28115-28149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28161-28204]:Block[28161-28204]"
    }, {
      "left" : "return n1.isEquivalentTo(n2);",
      "right" : "return n1.isEquivalentTo(n2);",
      "info" : "ReturnStatement[28169-28198]:ReturnStatement[28169-28198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28574-28614]:Block[28574-28614]"
    }, {
      "left" : "return inputsByName.get(name);",
      "right" : "return inputsByName.get(name);",
      "info" : "ReturnStatement[28580-28610]:ReturnStatement[28580-28610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28760-28984]:Block[28760-28984]"
    }, {
      "left" : "CompilerInput input = getInput(name);",
      "right" : "CompilerInput input = getInput(name);",
      "info" : "VariableDeclarationStatement[28766-28803]:VariableDeclarationStatement[28766-28803]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[28808-28848]:IfStatement[28808-28848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28827-28848]:Block[28827-28848]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28835-28842]:ReturnStatement[28835-28842]"
    }, {
      "left" : "inputsByName.remove(name);",
      "right" : "inputsByName.remove(name);",
      "info" : "ExpressionStatement[28853-28879]:ExpressionStatement[28853-28879]"
    }, {
      "left" : "Node root = input.getAstRoot(this);",
      "right" : "Node root = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[28884-28919]:VariableDeclarationStatement[28884-28919]"
    }, {
      "left" : "if (root != null)",
      "right" : "if (root != null)",
      "info" : "IfStatement[28924-28980]:IfStatement[28924-28980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28942-28980]:Block[28942-28980]"
    }, {
      "left" : "root.detachFromParent();",
      "right" : "root.detachFromParent();",
      "info" : "ExpressionStatement[28950-28974]:ExpressionStatement[28950-28974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29049-29395]:Block[29049-29395]"
    }, {
      "left" : "if (inputsByName.containsKey(name))",
      "right" : "if (inputsByName.containsKey(name))",
      "info" : "IfStatement[29055-29177]:IfStatement[29055-29177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29091-29177]:Block[29091-29177]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "info" : "ThrowStatement[29099-29171]:ThrowStatement[29099-29171]"
    }, {
      "left" : "SourceAst ast = new SyntheticAst(name);",
      "right" : "SourceAst ast = new SyntheticAst(name);",
      "info" : "VariableDeclarationStatement[29182-29221]:VariableDeclarationStatement[29182-29221]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "right" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "info" : "VariableDeclarationStatement[29226-29283]:VariableDeclarationStatement[29226-29283]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[29288-29318]:ExpressionStatement[29288-29318]"
    }, {
      "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "info" : "ExpressionStatement[29323-29373]:ExpressionStatement[29323-29373]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[29378-29391]:ReturnStatement[29378-29391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29518-29754]:Block[29518-29754]"
    }, {
      "left" : "String sourceName = ast.getSourceFile().getName();",
      "right" : "String sourceName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[29524-29574]:VariableDeclarationStatement[29524-29574]"
    }, {
      "left" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "right" : "Preconditions.checkState(\n        getInput(sourceName) == null,\n        \"Duplicate input of name \" + sourceName);",
      "info" : "ExpressionStatement[29579-29692]:ExpressionStatement[29579-29692]"
    }, {
      "left" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "right" : "inputsByName.put(sourceName, new CompilerInput(ast));",
      "info" : "ExpressionStatement[29697-29750]:ExpressionStatement[29697-29750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30076-30853]:Block[30076-30853]"
    }, {
      "left" : "String sourceName = ast.getSourceFile().getName();",
      "right" : "String sourceName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[30082-30132]:VariableDeclarationStatement[30082-30132]"
    }, {
      "left" : "CompilerInput oldInput =\n        Preconditions.checkNotNull(\n            getInput(sourceName),\n            \"No input to replace: \" + sourceName);",
      "right" : "CompilerInput oldInput =\n        Preconditions.checkNotNull(\n            getInput(sourceName),\n            \"No input to replace: \" + sourceName);",
      "info" : "VariableDeclarationStatement[30137-30282]:VariableDeclarationStatement[30137-30282]"
    }, {
      "left" : "Node newRoot = ast.getAstRoot(this);",
      "right" : "Node newRoot = ast.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30287-30323]:VariableDeclarationStatement[30287-30323]"
    }, {
      "left" : "if (newRoot == null)",
      "right" : "if (newRoot == null)",
      "info" : "IfStatement[30328-30376]:IfStatement[30328-30376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30349-30376]:Block[30349-30376]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30357-30370]:ReturnStatement[30357-30370]"
    }, {
      "left" : "Node oldRoot = oldInput.getAstRoot(this);",
      "right" : "Node oldRoot = oldInput.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30382-30423]:VariableDeclarationStatement[30382-30423]"
    }, {
      "left" : "if (oldRoot != null)",
      "right" : "if (oldRoot != null)",
      "info" : "IfStatement[30428-30583]:IfStatement[30428-30583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30449-30514]:Block[30449-30514]"
    }, {
      "left" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "right" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "info" : "ExpressionStatement[30457-30508]:ExpressionStatement[30457-30508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30520-30583]:Block[30520-30583]"
    }, {
      "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "info" : "ExpressionStatement[30528-30577]:ExpressionStatement[30528-30577]"
    }, {
      "left" : "CompilerInput newInput = new CompilerInput(ast);",
      "right" : "CompilerInput newInput = new CompilerInput(ast);",
      "info" : "VariableDeclarationStatement[30589-30637]:VariableDeclarationStatement[30589-30637]"
    }, {
      "left" : "inputsByName.put(sourceName, newInput);",
      "right" : "inputsByName.put(sourceName, newInput);",
      "info" : "ExpressionStatement[30642-30681]:ExpressionStatement[30642-30681]"
    }, {
      "left" : "JSModule module = oldInput.getModule();",
      "right" : "JSModule module = oldInput.getModule();",
      "info" : "VariableDeclarationStatement[30687-30726]:VariableDeclarationStatement[30687-30726]"
    }, {
      "left" : "if (module != null)",
      "right" : "if (module != null)",
      "info" : "IfStatement[30731-30832]:IfStatement[30731-30832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30751-30832]:Block[30751-30832]"
    }, {
      "left" : "module.addAfter(newInput, oldInput);",
      "right" : "module.addAfter(newInput, oldInput);",
      "info" : "ExpressionStatement[30759-30795]:ExpressionStatement[30759-30795]"
    }, {
      "left" : "module.remove(oldInput);",
      "right" : "module.remove(oldInput);",
      "info" : "ExpressionStatement[30802-30826]:ExpressionStatement[30802-30826]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30837-30849]:ReturnStatement[30837-30849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30900-30929]:Block[30900-30929]"
    }, {
      "left" : "return moduleGraph;",
      "right" : "return moduleGraph;",
      "info" : "ReturnStatement[30906-30925]:ReturnStatement[30906-30925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30985-31132]:Block[30985-31132]"
    }, {
      "left" : "if (typeRegistry == null)",
      "right" : "if (typeRegistry == null)",
      "info" : "IfStatement[30991-31103]:IfStatement[30991-31103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31017-31103]:Block[31017-31103]"
    }, {
      "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "info" : "ExpressionStatement[31025-31097]:ExpressionStatement[31025-31097]"
    }, {
      "left" : "return typeRegistry;",
      "right" : "return typeRegistry;",
      "info" : "ReturnStatement[31108-31128]:ReturnStatement[31108-31128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31184-31240]:Block[31184-31240]"
    }, {
      "left" : "return getPassConfig().getTypedScopeCreator();",
      "right" : "return getPassConfig().getTypedScopeCreator();",
      "info" : "ReturnStatement[31190-31236]:ReturnStatement[31190-31236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31283-31330]:Block[31283-31330]"
    }, {
      "left" : "return getPassConfig().getTopScope();",
      "right" : "return getPassConfig().getTopScope();",
      "info" : "ReturnStatement[31289-31326]:ReturnStatement[31289-31326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31412-31899]:Block[31412-31899]"
    }, {
      "left" : "if (abstractInterpreter == null)",
      "right" : "if (abstractInterpreter == null)",
      "info" : "IfStatement[31418-31863]:IfStatement[31418-31863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31451-31863]:Block[31451-31863]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "info" : "VariableDeclarationStatement[31459-31615]:VariableDeclarationStatement[31459-31615]"
    }, {
      "left" : "if (options.closurePass)",
      "right" : "if (options.closurePass)",
      "info" : "IfStatement[31622-31816]:IfStatement[31622-31816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31647-31816]:Block[31647-31816]"
    }, {
      "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "info" : "ExpressionStatement[31657-31808]:ExpressionStatement[31657-31808]"
    }, {
      "left" : "abstractInterpreter = interpreter;",
      "right" : "abstractInterpreter = interpreter;",
      "info" : "ExpressionStatement[31823-31857]:ExpressionStatement[31823-31857]"
    }, {
      "left" : "return abstractInterpreter;",
      "right" : "return abstractInterpreter;",
      "info" : "ReturnStatement[31868-31895]:ReturnStatement[31868-31895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31948-32065]:Block[31948-32065]"
    }, {
      "left" : "if (typeValidator == null)",
      "right" : "if (typeValidator == null)",
      "info" : "IfStatement[31954-32035]:IfStatement[31954-32035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31981-32035]:Block[31981-32035]"
    }, {
      "left" : "typeValidator = new TypeValidator(this);",
      "right" : "typeValidator = new TypeValidator(this);",
      "info" : "ExpressionStatement[31989-32029]:ExpressionStatement[31989-32029]"
    }, {
      "left" : "return typeValidator;",
      "right" : "return typeValidator;",
      "info" : "ReturnStatement[32040-32061]:ReturnStatement[32040-32061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32416-36523]:Block[32416-36523]"
    }, {
      "left" : "boolean devMode = options.devMode != DevMode.OFF;",
      "right" : "boolean devMode = options.devMode != DevMode.OFF;",
      "info" : "VariableDeclarationStatement[32422-32471]:VariableDeclarationStatement[32422-32471]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[32590-32658]:IfStatement[32590-32658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32615-32658]:Block[32615-32658]"
    }, {
      "left" : "externsRoot.detachChildren();",
      "right" : "externsRoot.detachChildren();",
      "info" : "ExpressionStatement[32623-32652]:ExpressionStatement[32623-32652]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[32663-32721]:IfStatement[32663-32721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32683-32721]:Block[32683-32721]"
    }, {
      "left" : "jsRoot.detachChildren();",
      "right" : "jsRoot.detachChildren();",
      "info" : "ExpressionStatement[32691-32715]:ExpressionStatement[32691-32715]"
    }, {
      "left" : "jsRoot = new Node(Token.BLOCK);",
      "right" : "jsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[32757-32788]:ExpressionStatement[32757-32788]"
    }, {
      "left" : "jsRoot.setIsSyntheticBlock(true);",
      "right" : "jsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32793-32826]:ExpressionStatement[32793-32826]"
    }, {
      "left" : "externsRoot = new Node(Token.BLOCK);",
      "right" : "externsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[32832-32868]:ExpressionStatement[32832-32868]"
    }, {
      "left" : "externsRoot.setIsSyntheticBlock(true);",
      "right" : "externsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32873-32911]:ExpressionStatement[32873-32911]"
    }, {
      "left" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "right" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[32917-32978]:ExpressionStatement[32917-32978]"
    }, {
      "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[32983-33025]:ExpressionStatement[32983-33025]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[33031-33213]:IfStatement[33031-33213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33058-33213]:Block[33058-33213]"
    }, {
      "left" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "right" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "info" : "ExpressionStatement[33066-33151]:ExpressionStatement[33066-33151]"
    }, {
      "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "info" : "ExpressionStatement[33158-33207]:ExpressionStatement[33158-33207]"
    }, {
      "left" : "Tracer tracer = newTracer(\"parseInputs\");",
      "right" : "Tracer tracer = newTracer(\"parseInputs\");",
      "info" : "VariableDeclarationStatement[33219-33260]:VariableDeclarationStatement[33219-33260]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33266-36519]:TryStatement[33266-36519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33270-36462]:Block[33270-36462]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[33310-33495]:EnhancedForStatement[33310-33495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33346-33495]:Block[33346-33495]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[33356-33388]:VariableDeclarationStatement[33356-33388]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[33397-33448]:IfStatement[33397-33448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33414-33448]:Block[33414-33448]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33426-33438]:ReturnStatement[33426-33438]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[33457-33487]:ExpressionStatement[33457-33487]"
    }, {
      "left" : "if (options.manageClosureDependencies)",
      "right" : "if (options.manageClosureDependencies)",
      "info" : "IfStatement[33556-34515]:IfStatement[33556-34515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33595-34515]:Block[33595-34515]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[33605-33951]:EnhancedForStatement[33605-33951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33640-33951]:Block[33640-33951]"
    }, {
      "left" : "input.setCompiler(this);",
      "right" : "input.setCompiler(this);",
      "info" : "ExpressionStatement[33652-33676]:ExpressionStatement[33652-33676]"
    }, {
      "left" : "for (String provide : input.getProvides())",
      "right" : "for (String provide : input.getProvides())",
      "info" : "EnhancedForStatement[33826-33941]:EnhancedForStatement[33826-33941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33869-33941]:Block[33869-33941]"
    }, {
      "left" : "getTypeRegistry().forwardDeclareType(provide);",
      "right" : "getTypeRegistry().forwardDeclareType(provide);",
      "info" : "ExpressionStatement[33883-33929]:ExpressionStatement[33883-33929]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33961-34507]:TryStatement[33961-34507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33965-34182]:Block[33965-34182]"
    }, {
      "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);",
      "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);",
      "info" : "ExpressionStatement[33977-34172]:ExpressionStatement[33977-34172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34221-34354]:Block[34221-34354]"
    }, {
      "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[34233-34321]:ExpressionStatement[34233-34321]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34332-34344]:ReturnStatement[34332-34344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34389-34507]:Block[34389-34507]"
    }, {
      "left" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[34401-34474]:ExpressionStatement[34401-34474]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34485-34497]:ReturnStatement[34485-34497]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[34581-34609]:VariableDeclarationStatement[34581-34609]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[34616-35460]:EnhancedForStatement[34616-35460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34651-35460]:Block[34651-35460]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[34661-34693]:VariableDeclarationStatement[34661-34693]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[34763-34809]:IfStatement[34763-34809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34778-34809]:Block[34778-34809]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34790-34799]:ContinueStatement[34790-34799]"
    }, {
      "left" : "if (n.getJSDocInfo() != null)",
      "right" : "if (n.getJSDocInfo() != null)",
      "info" : "IfStatement[34819-35452]:IfStatement[34819-35452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34849-35452]:Block[34849-35452]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[34861-34895]:VariableDeclarationStatement[34861-34895]"
    }, {
      "left" : "if (info.isExterns())",
      "right" : "if (info.isExterns())",
      "info" : "IfStatement[34906-35442]:IfStatement[34906-35442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34928-35322]:Block[34928-35322]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[35132-35162]:ExpressionStatement[35132-35162]"
    }, {
      "left" : "input.setIsExtern(true);",
      "right" : "input.setIsExtern(true);",
      "info" : "ExpressionStatement[35175-35199]:ExpressionStatement[35175-35199]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[35213-35245]:ExpressionStatement[35213-35245]"
    }, {
      "left" : "externs.add(input);",
      "right" : "externs.add(input);",
      "info" : "ExpressionStatement[35259-35278]:ExpressionStatement[35259-35278]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[35291-35310]:ExpressionStatement[35291-35310]"
    }, {
      "left" : "if (info.isNoCompile())",
      "right" : "if (info.isNoCompile())",
      "info" : "IfStatement[35328-35442]:IfStatement[35328-35442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35352-35442]:Block[35352-35442]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[35366-35398]:ExpressionStatement[35366-35398]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[35411-35430]:ExpressionStatement[35411-35430]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[35468-35565]:IfStatement[35468-35565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35485-35565]:Block[35485-35565]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[35495-35521]:ExpressionStatement[35495-35521]"
    }, {
      "left" : "rebuildInputsFromModules();",
      "right" : "rebuildInputsFromModules();",
      "info" : "ExpressionStatement[35530-35557]:ExpressionStatement[35530-35557]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[35597-36371]:EnhancedForStatement[35597-36371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35632-36371]:Block[35632-36371]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[35642-35674]:VariableDeclarationStatement[35642-35674]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[35683-35729]:IfStatement[35683-35729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35698-35729]:Block[35698-35729]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35710-35719]:ContinueStatement[35710-35719]"
    }, {
      "left" : "if (devMode)",
      "right" : "if (devMode)",
      "info" : "IfStatement[35739-35857]:IfStatement[35739-35857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35752-35857]:Block[35752-35857]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[35764-35781]:ExpressionStatement[35764-35781]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[35792-35847]:IfStatement[35792-35847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35809-35847]:Block[35809-35847]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35823-35835]:ReturnStatement[35823-35835]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "info" : "IfStatement[35867-36328]:IfStatement[35867-36328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35963-36328]:Block[35963-36328]"
    }, {
      "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "info" : "VariableDeclarationStatement[36124-36270]:VariableDeclarationStatement[36124-36270]"
    }, {
      "left" : "NodeTraversal.traverse(this, n, sia);",
      "right" : "NodeTraversal.traverse(this, n, sia);",
      "info" : "ExpressionStatement[36281-36318]:ExpressionStatement[36281-36318]"
    }, {
      "left" : "jsRoot.addChildToBack(n);",
      "right" : "jsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[36338-36363]:ExpressionStatement[36338-36363]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[36379-36426]:IfStatement[36379-36426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36396-36426]:Block[36396-36426]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36406-36418]:ReturnStatement[36406-36418]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[36433-36456]:ReturnStatement[36433-36456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36471-36519]:Block[36471-36519]"
    }, {
      "left" : "stopTracer(tracer, \"parseInputs\");",
      "right" : "stopTracer(tracer, \"parseInputs\");",
      "info" : "ExpressionStatement[36479-36513]:ExpressionStatement[36479-36513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36564-36699]:Block[36564-36699]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[36570-36601]:ExpressionStatement[36570-36601]"
    }, {
      "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "info" : "ExpressionStatement[36606-36650]:ExpressionStatement[36606-36650]"
    }, {
      "left" : "return new JsAst(file).getAstRoot(this);",
      "right" : "return new JsAst(file).getAstRoot(this);",
      "info" : "ReturnStatement[36655-36695]:ReturnStatement[36655-36695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36750-36934]:Block[36750-36934]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "info" : "VariableDeclarationStatement[36756-36849]:VariableDeclarationStatement[36756-36849]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[36854-36895]:ExpressionStatement[36854-36895]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[36900-36930]:ReturnStatement[36900-36930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36974-37158]:Block[36974-37158]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[36980-37154]:IfStatement[36980-37154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37001-37154]:Block[37001-37154]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[37113-37148]:ExpressionStatement[37113-37148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37226-37322]:Block[37226-37322]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[37232-37263]:ExpressionStatement[37232-37263]"
    }, {
      "left" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "right" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "info" : "ReturnStatement[37268-37318]:ReturnStatement[37268-37318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37368-37665]:Block[37368-37665]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[37374-37405]:ExpressionStatement[37374-37405]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "info" : "VariableDeclarationStatement[37410-37502]:VariableDeclarationStatement[37410-37502]"
    }, {
      "left" : "if (inputsByName == null)",
      "right" : "if (inputsByName == null)",
      "info" : "IfStatement[37507-37580]:IfStatement[37507-37580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37533-37580]:Block[37533-37580]"
    }, {
      "left" : "inputsByName = Maps.newHashMap();",
      "right" : "inputsByName = Maps.newHashMap();",
      "info" : "ExpressionStatement[37541-37574]:ExpressionStatement[37541-37574]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[37585-37626]:ExpressionStatement[37585-37626]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[37631-37661]:ReturnStatement[37631-37661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37721-37759]:Block[37721-37759]"
    }, {
      "left" : "return defaultErrorReporter;",
      "right" : "return defaultErrorReporter;",
      "info" : "ReturnStatement[37727-37755]:ReturnStatement[37727-37755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38039-38649]:Block[38039-38649]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[38045-38645]:ReturnStatement[38045-38645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38141-38637]:Block[38141-38637]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSource\");",
      "right" : "Tracer tracer = newTracer(\"toSource\");",
      "info" : "VariableDeclarationStatement[38151-38189]:VariableDeclarationStatement[38151-38189]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38198-38629]:TryStatement[38198-38629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38202-38567]:Block[38202-38567]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[38214-38249]:VariableDeclarationStatement[38214-38249]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[38260-38525]:IfStatement[38260-38525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38280-38525]:Block[38280-38525]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[38294-38304]:VariableDeclarationStatement[38294-38304]"
    }, {
      "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "info" : "ForStatement[38317-38513]:ForStatement[38317-38513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38453-38513]:Block[38453-38513]"
    }, {
      "left" : "toSource(cb, i++, scriptNode);",
      "right" : "toSource(cb, i++, scriptNode);",
      "info" : "ExpressionStatement[38469-38499]:ExpressionStatement[38469-38499]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[38536-38557]:ReturnStatement[38536-38557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38576-38629]:Block[38576-38629]"
    }, {
      "left" : "stopTracer(tracer, \"toSource\");",
      "right" : "stopTracer(tracer, \"toSource\");",
      "info" : "ExpressionStatement[38588-38619]:ExpressionStatement[38588-38619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38758-39429]:Block[38758-39429]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[38764-39425]:ReturnStatement[38764-39425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38864-39417]:Block[38864-39417]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "info" : "VariableDeclarationStatement[38874-38917]:VariableDeclarationStatement[38874-38917]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38926-39409]:TryStatement[38926-39409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38930-39342]:Block[38930-39342]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[38942-38972]:VariableDeclarationStatement[38942-38972]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[38983-39024]:VariableDeclarationStatement[38983-39024]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[39035-39070]:VariableDeclarationStatement[39035-39070]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[39081-39306]:ForStatement[39081-39306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39117-39306]:Block[39117-39306]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[39131-39189]:VariableDeclarationStatement[39131-39189]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[39202-39213]:ExpressionStatement[39202-39213]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[39226-39254]:ExpressionStatement[39226-39254]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[39267-39294]:ExpressionStatement[39267-39294]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[39317-39332]:ReturnStatement[39317-39332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39351-39409]:Block[39351-39409]"
    }, {
      "left" : "stopTracer(tracer, \"toSourceArray\");",
      "right" : "stopTracer(tracer, \"toSourceArray\");",
      "info" : "ExpressionStatement[39363-39399]:ExpressionStatement[39363-39399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39550-40216]:Block[39550-40216]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "info" : "ReturnStatement[39556-40212]:ReturnStatement[39556-40212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39652-40204]:Block[39652-40204]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[39662-39710]:VariableDeclarationStatement[39662-39710]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[39719-39749]:VariableDeclarationStatement[39719-39749]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[39758-39810]:IfStatement[39758-39810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39778-39810]:Block[39778-39810]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[39790-39800]:ReturnStatement[39790-39800]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[39819-39854]:VariableDeclarationStatement[39819-39854]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[39863-40166]:ForStatement[39863-40166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39899-40166]:Block[39899-40166]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[39911-39969]:VariableDeclarationStatement[39911-39969]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[39980-40117]:IfStatement[39980-40117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40004-40117]:Block[40004-40117]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "info" : "ThrowStatement[40018-40105]:ThrowStatement[40018-40105]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[40128-40156]:ExpressionStatement[40128-40156]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[40175-40196]:ReturnStatement[40175-40196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40359-41159]:Block[40359-41159]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "info" : "ReturnStatement[40365-41155]:ReturnStatement[40365-41155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40465-41147]:Block[40465-41147]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[40475-40523]:VariableDeclarationStatement[40475-40523]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[40532-40562]:VariableDeclarationStatement[40532-40562]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[40571-40634]:IfStatement[40571-40634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40591-40634]:Block[40591-40634]"
    }, {
      "left" : "return new String[0];",
      "right" : "return new String[0];",
      "info" : "ReturnStatement[40603-40624]:ReturnStatement[40603-40624]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[40644-40685]:VariableDeclarationStatement[40644-40685]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[40694-40729]:VariableDeclarationStatement[40694-40729]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[40738-41115]:ForStatement[40738-41115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40774-41115]:Block[40774-41115]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[40786-40844]:VariableDeclarationStatement[40786-40844]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[40855-41005]:IfStatement[40855-41005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40879-41005]:Block[40879-41005]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "info" : "ThrowStatement[40893-40993]:ThrowStatement[40893-40993]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[41017-41028]:ExpressionStatement[41017-41028]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[41039-41067]:ExpressionStatement[41039-41067]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[41078-41105]:ExpressionStatement[41078-41105]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[41124-41139]:ReturnStatement[41124-41139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41645-43835]:Block[41645-43853]"
    }, {
      "left" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "right" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "info" : "ExpressionStatement[41651-43831]:ExpressionStatement[41651-43849]"
    }, {
      "left" : "if (options.printInputDelimiter)",
      "right" : "if (options.printInputDelimiter)",
      "info" : "IfStatement[41746-42441]:IfStatement[41746-42441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41779-42441]:Block[41779-42441]"
    }, {
      "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "info" : "IfStatement[41791-41931]:IfStatement[41791-41931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41839-41931]:Block[41839-41931]"
    }, {
      "left" : "cb.append(\"\\n\");",
      "right" : "cb.append(\"\\n\");",
      "info" : "ExpressionStatement[41853-41869]:ExpressionStatement[41853-41869]"
    }, {
      "left" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[41942-41999]:ExpressionStatement[41942-41999]"
    }, {
      "left" : "String delimiter = options.inputDelimiter;",
      "right" : "String delimiter = options.inputDelimiter;",
      "info" : "VariableDeclarationStatement[42011-42053]:VariableDeclarationStatement[42011-42053]"
    }, {
      "left" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "right" : "String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);",
      "info" : "VariableDeclarationStatement[42065-42128]:VariableDeclarationStatement[42065-42128]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[42139-42184]:ExpressionStatement[42139-42184]"
    }, {
      "left" : "Preconditions.checkState(!sourceName.isEmpty());",
      "right" : "Preconditions.checkState(!sourceName.isEmpty());",
      "info" : "ExpressionStatement[42195-42243]:ExpressionStatement[42195-42243]"
    }, {
      "left" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "right" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "info" : "ExpressionStatement[42255-42372]:ExpressionStatement[42255-42372]"
    }, {
      "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "info" : "ExpressionStatement[42384-42431]:ExpressionStatement[42384-42431]"
    }, {
      "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "info" : "IfStatement[42450-42661]:IfStatement[42450-42661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42539-42661]:Block[42539-42661]"
    }, {
      "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "info" : "ExpressionStatement[42551-42651]:ExpressionStatement[42551-42651]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[42830-42978]:IfStatement[42830-42978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42871-42978]:Block[42871-42978]"
    }, {
      "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "info" : "ExpressionStatement[42883-42968]:ExpressionStatement[42883-42968]"
    }, {
      "left" : "String code = toSource(root, sourceMap);",
      "right" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
      "info" : "VariableDeclarationStatement[43098-43138]:VariableDeclarationStatement[43098-43156]"
    }, {
      "left" : "if (!code.isEmpty())",
      "right" : "if (!code.isEmpty())",
      "info" : "IfStatement[43147-43794]:IfStatement[43165-43812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43168-43794]:Block[43186-43812]"
    }, {
      "left" : "cb.append(code);",
      "right" : "cb.append(code);",
      "info" : "ExpressionStatement[43180-43196]:ExpressionStatement[43198-43214]"
    }, {
      "left" : "int length = code.length();",
      "right" : "int length = code.length();",
      "info" : "VariableDeclarationStatement[43432-43459]:VariableDeclarationStatement[43450-43477]"
    }, {
      "left" : "char lastChar = code.charAt(length - 1);",
      "right" : "char lastChar = code.charAt(length - 1);",
      "info" : "VariableDeclarationStatement[43470-43510]:VariableDeclarationStatement[43488-43528]"
    }, {
      "left" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "right" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "info" : "VariableDeclarationStatement[43521-43602]:VariableDeclarationStatement[43539-43620]"
    }, {
      "left" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "right" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "info" : "VariableDeclarationStatement[43613-43713]:VariableDeclarationStatement[43631-43731]"
    }, {
      "left" : "if (!hasSemiColon)",
      "right" : "if (!hasSemiColon)",
      "info" : "IfStatement[43724-43784]:IfStatement[43742-43802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43743-43784]:Block[43761-43802]"
    }, {
      "left" : "cb.append(\";\");",
      "right" : "cb.append(\";\");",
      "info" : "ExpressionStatement[43757-43772]:ExpressionStatement[43775-43790]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43803-43815]:ReturnStatement[43821-43833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43976-44047]:Block[43994-44071]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[43982-44013]:ExpressionStatement[44000-44031]"
    }, {
      "left" : "return toSource(n, null);",
      "right" : "return toSource(n, null, true);",
      "info" : "ReturnStatement[44018-44043]:ReturnStatement[44036-44067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44166-44772]:Block[44211-44831]"
    }, {
      "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "info" : "VariableDeclarationStatement[44172-44229]:VariableDeclarationStatement[44217-44274]"
    }, {
      "left" : "builder.setPrettyPrint(options.prettyPrint);",
      "right" : "builder.setPrettyPrint(options.prettyPrint);",
      "info" : "ExpressionStatement[44234-44278]:ExpressionStatement[44279-44323]"
    }, {
      "left" : "builder.setLineBreak(options.lineBreak);",
      "right" : "builder.setLineBreak(options.lineBreak);",
      "info" : "ExpressionStatement[44283-44323]:ExpressionStatement[44328-44368]"
    }, {
      "left" : "builder.setSourceMap(sourceMap);",
      "right" : "builder.setSourceMap(sourceMap);",
      "info" : "ExpressionStatement[44328-44360]:ExpressionStatement[44373-44405]"
    }, {
      "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "info" : "ExpressionStatement[44365-44427]:ExpressionStatement[44410-44472]"
    }, {
      "left" : "builder.setTagAsStrict(\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "right" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "info" : "ExpressionStatement[44432-44525]:ExpressionStatement[44477-44584]"
    }, {
      "left" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "right" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "info" : "ExpressionStatement[44530-44590]:ExpressionStatement[44589-44649]"
    }, {
      "left" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "right" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "info" : "VariableDeclarationStatement[44596-44700]:VariableDeclarationStatement[44655-44759]"
    }, {
      "left" : "builder.setOutputCharset(charset);",
      "right" : "builder.setOutputCharset(charset);",
      "info" : "ExpressionStatement[44705-44739]:ExpressionStatement[44764-44798]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[44745-44768]:ReturnStatement[44804-44827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45172-45202]:Block[45231-45261]"
    }, {
      "left" : "sb.setLength(0);",
      "right" : "sb.setLength(0);",
      "info" : "ExpressionStatement[45180-45196]:ExpressionStatement[45239-45255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45295-45774]:Block[45354-45833]"
    }, {
      "left" : "sb.append(str);",
      "right" : "sb.append(str);",
      "info" : "ExpressionStatement[45303-45318]:ExpressionStatement[45362-45377]"
    }, {
      "left" : "int index = -1;",
      "right" : "int index = -1;",
      "info" : "VariableDeclarationStatement[45392-45407]:VariableDeclarationStatement[45451-45466]"
    }, {
      "left" : "int lastIndex = index;",
      "right" : "int lastIndex = index;",
      "info" : "VariableDeclarationStatement[45414-45436]:VariableDeclarationStatement[45473-45495]"
    }, {
      "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "info" : "WhileStatement[45443-45552]:WhileStatement[45502-45611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45495-45552]:Block[45554-45611]"
    }, {
      "left" : "++lineCount;",
      "right" : "++lineCount;",
      "info" : "ExpressionStatement[45505-45517]:ExpressionStatement[45564-45576]"
    }, {
      "left" : "lastIndex = index;",
      "right" : "lastIndex = index;",
      "info" : "ExpressionStatement[45526-45544]:ExpressionStatement[45585-45603]"
    }, {
      "left" : "if (lastIndex == -1)",
      "right" : "if (lastIndex == -1)",
      "info" : "IfStatement[45560-45748]:IfStatement[45619-45807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45581-45682]:Block[45640-45741]"
    }, {
      "left" : "colCount += str.length();",
      "right" : "colCount += str.length();",
      "info" : "ExpressionStatement[45649-45674]:ExpressionStatement[45708-45733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45688-45748]:Block[45747-45807]"
    }, {
      "left" : "colCount = str.length() - (lastIndex + 1);",
      "right" : "colCount = str.length() - (lastIndex + 1);",
      "info" : "ExpressionStatement[45698-45740]:ExpressionStatement[45757-45799]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45756-45768]:ReturnStatement[45815-45827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45867-45902]:Block[45926-45961]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[45875-45896]:ReturnStatement[45934-45955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45981-46014]:Block[46040-46073]"
    }, {
      "left" : "return sb.length();",
      "right" : "return sb.length();",
      "info" : "ReturnStatement[45989-46008]:ReturnStatement[46048-46067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46118-46149]:Block[46177-46208]"
    }, {
      "left" : "return lineCount;",
      "right" : "return lineCount;",
      "info" : "ReturnStatement[46126-46143]:ReturnStatement[46185-46202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46257-46287]:Block[46316-46346]"
    }, {
      "left" : "return colCount;",
      "right" : "return colCount;",
      "info" : "ReturnStatement[46265-46281]:ReturnStatement[46324-46340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46392-46517]:Block[46451-46576]"
    }, {
      "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "info" : "ReturnStatement[46400-46511]:ReturnStatement[46459-46570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46722-47345]:Block[46781-47404]"
    }, {
      "left" : "normalize();",
      "right" : "normalize();",
      "info" : "ExpressionStatement[46996-47008]:ExpressionStatement[47055-47067]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[47014-47080]:VariableDeclarationStatement[47073-47139]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[47085-47185]:IfStatement[47144-47244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47128-47185]:Block[47187-47244]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[47136-47179]:ExpressionStatement[47195-47238]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "info" : "ExpressionStatement[47190-47249]:ExpressionStatement[47249-47308]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[47254-47298]:ExpressionStatement[47313-47357]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[47303-47341]:IfStatement[47362-47400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47320-47341]:Block[47379-47400]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47328-47335]:ReturnStatement[47387-47394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47404-47443]:Block[47463-47502]"
    }, {
      "left" : "options.cssRenamingMap = map;",
      "right" : "options.cssRenamingMap = map;",
      "info" : "ExpressionStatement[47410-47439]:ExpressionStatement[47469-47498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47494-47534]:Block[47553-47593]"
    }, {
      "left" : "return options.cssRenamingMap;",
      "right" : "return options.cssRenamingMap;",
      "info" : "ReturnStatement[47500-47530]:ReturnStatement[47559-47589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47916-48025]:Block[47975-48084]"
    }, {
      "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[47922-48021]:ExpressionStatement[47981-48080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48059-48232]:Block[48118-48291]"
    }, {
      "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "info" : "ReturnStatement[48065-48228]:ReturnStatement[48124-48287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48304-48558]:Block[48363-48617]"
    }, {
      "left" : "logger.info(\"Computing Control Flow Graph\");",
      "right" : "logger.info(\"Computing Control Flow Graph\");",
      "info" : "ExpressionStatement[48310-48354]:ExpressionStatement[48369-48413]"
    }, {
      "left" : "Tracer tracer = newTracer(\"computeCFG\");",
      "right" : "Tracer tracer = newTracer(\"computeCFG\");",
      "info" : "VariableDeclarationStatement[48359-48399]:VariableDeclarationStatement[48418-48458]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[48404-48473]:VariableDeclarationStatement[48463-48532]"
    }, {
      "left" : "process(cfa);",
      "right" : "process(cfa);",
      "info" : "ExpressionStatement[48478-48491]:ExpressionStatement[48537-48550]"
    }, {
      "left" : "stopTracer(tracer, \"computeCFG\");",
      "right" : "stopTracer(tracer, \"computeCFG\");",
      "info" : "ExpressionStatement[48496-48529]:ExpressionStatement[48555-48588]"
    }, {
      "left" : "return cfa.getCfg();",
      "right" : "return cfa.getCfg();",
      "info" : "ReturnStatement[48534-48554]:ReturnStatement[48593-48613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48586-48707]:Block[48645-48766]"
    }, {
      "left" : "logger.info(\"Normalizing\");",
      "right" : "logger.info(\"Normalizing\");",
      "info" : "ExpressionStatement[48592-48619]:ExpressionStatement[48651-48678]"
    }, {
      "left" : "startPass(\"normalize\");",
      "right" : "startPass(\"normalize\");",
      "info" : "ExpressionStatement[48624-48647]:ExpressionStatement[48683-48706]"
    }, {
      "left" : "process(new Normalize(this, false));",
      "right" : "process(new Normalize(this, false));",
      "info" : "ExpressionStatement[48652-48688]:ExpressionStatement[48711-48747]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[48693-48703]:ExpressionStatement[48752-48762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48750-48914]:Block[48809-48973]"
    }, {
      "left" : "Tracer tracer = newTracer(\"prepareAst\");",
      "right" : "Tracer tracer = newTracer(\"prepareAst\");",
      "info" : "VariableDeclarationStatement[48756-48796]:VariableDeclarationStatement[48815-48855]"
    }, {
      "left" : "CompilerPass pass = new PrepareAst(this);",
      "right" : "CompilerPass pass = new PrepareAst(this);",
      "info" : "VariableDeclarationStatement[48801-48842]:VariableDeclarationStatement[48860-48901]"
    }, {
      "left" : "pass.process(null, root);",
      "right" : "pass.process(null, root);",
      "info" : "ExpressionStatement[48847-48872]:ExpressionStatement[48906-48931]"
    }, {
      "left" : "stopTracer(tracer, \"prepareAst\");",
      "right" : "stopTracer(tracer, \"prepareAst\");",
      "info" : "ExpressionStatement[48877-48910]:ExpressionStatement[48936-48969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48951-49332]:Block[49010-49391]"
    }, {
      "left" : "logger.info(\"Recording function information\");",
      "right" : "logger.info(\"Recording function information\");",
      "info" : "ExpressionStatement[48957-49003]:ExpressionStatement[49016-49062]"
    }, {
      "left" : "startPass(\"recordFunctionInformation\");",
      "right" : "startPass(\"recordFunctionInformation\");",
      "info" : "ExpressionStatement[49008-49047]:ExpressionStatement[49067-49106]"
    }, {
      "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "info" : "VariableDeclarationStatement[49052-49214]:VariableDeclarationStatement[49111-49273]"
    }, {
      "left" : "process(recordFunctionInfoPass);",
      "right" : "process(recordFunctionInfoPass);",
      "info" : "ExpressionStatement[49219-49251]:ExpressionStatement[49278-49310]"
    }, {
      "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "info" : "ExpressionStatement[49256-49313]:ExpressionStatement[49315-49372]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[49318-49328]:ExpressionStatement[49377-49387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49614-49656]:Block[49673-49715]"
    }, {
      "left" : "codeChangeHandlers.add(handler);",
      "right" : "codeChangeHandlers.add(handler);",
      "info" : "ExpressionStatement[49620-49652]:ExpressionStatement[49679-49711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49724-49769]:Block[49783-49828]"
    }, {
      "left" : "codeChangeHandlers.remove(handler);",
      "right" : "codeChangeHandlers.remove(handler);",
      "info" : "ExpressionStatement[49730-49765]:ExpressionStatement[49789-49824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50007-50107]:Block[50066-50166]"
    }, {
      "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "info" : "EnhancedForStatement[50013-50103]:EnhancedForStatement[50072-50162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50066-50103]:Block[50125-50162]"
    }, {
      "left" : "handler.reportChange();",
      "right" : "handler.reportChange();",
      "info" : "ExpressionStatement[50074-50097]:ExpressionStatement[50133-50156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50169-50338]:Block[50228-50397]"
    }, {
      "left" : "CodingConvention convention = options.getCodingConvention();",
      "right" : "CodingConvention convention = options.getCodingConvention();",
      "info" : "VariableDeclarationStatement[50175-50235]:VariableDeclarationStatement[50234-50294]"
    }, {
      "left" : "convention = convention != null ? convention : defaultCodingConvention;",
      "right" : "convention = convention != null ? convention : defaultCodingConvention;",
      "info" : "ExpressionStatement[50240-50311]:ExpressionStatement[50299-50370]"
    }, {
      "left" : "return convention;",
      "right" : "return convention;",
      "info" : "ReturnStatement[50316-50334]:ReturnStatement[50375-50393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50381-50414]:Block[50440-50473]"
    }, {
      "left" : "return options.ideMode;",
      "right" : "return options.ideMode;",
      "info" : "ReturnStatement[50387-50410]:ReturnStatement[50446-50469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50465-50609]:Block[50524-50668]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "right" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "info" : "SwitchStatement[50471-50587]:SwitchStatement[50530-50646]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[50512-50529]:SwitchCase[50571-50588]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[50536-50560]:SwitchCase[50595-50619]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[50569-50581]:ReturnStatement[50628-50640]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50592-50605]:ReturnStatement[50651-50664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50648-50689]:Block[50707-50748]"
    }, {
      "left" : "return options.getLanguageIn();",
      "right" : "return options.getLanguageIn();",
      "info" : "ReturnStatement[50654-50685]:ReturnStatement[50713-50744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50741-50785]:Block[50800-50844]"
    }, {
      "left" : "return options.acceptConstKeyword;",
      "right" : "return options.acceptConstKeyword;",
      "info" : "ReturnStatement[50747-50781]:ReturnStatement[50806-50840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50826-51471]:Block[50885-51530]"
    }, {
      "left" : "if (parserConfig == null)",
      "right" : "if (parserConfig == null)",
      "info" : "IfStatement[50832-51442]:IfStatement[50891-51501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50858-51442]:Block[50917-51501]"
    }, {
      "left" : "Config.LanguageMode mode;",
      "right" : "Config.LanguageMode mode;",
      "info" : "VariableDeclarationStatement[50866-50891]:VariableDeclarationStatement[50925-50950]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "right" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "info" : "SwitchStatement[50898-51321]:SwitchStatement[50957-51380]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[50941-50958]:SwitchCase[51000-51017]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "info" : "ExpressionStatement[50969-51008]:ExpressionStatement[51028-51067]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51019-51025]:BreakStatement[51078-51084]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[51034-51051]:SwitchCase[51093-51110]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "info" : "ExpressionStatement[51062-51101]:ExpressionStatement[51121-51160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51112-51118]:BreakStatement[51171-51177]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[51127-51151]:SwitchCase[51186-51210]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "info" : "ExpressionStatement[51162-51208]:ExpressionStatement[51221-51267]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51219-51225]:BreakStatement[51278-51284]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51234-51242]:SwitchCase[51293-51301]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected language mode\");",
      "right" : "throw new IllegalStateException(\"unexpected language mode\");",
      "info" : "ThrowStatement[51253-51313]:ThrowStatement[51312-51372]"
    }, {
      "left" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword());",
      "right" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword());",
      "info" : "ExpressionStatement[51329-51436]:ExpressionStatement[51388-51495]"
    }, {
      "left" : "return parserConfig;",
      "right" : "return parserConfig;",
      "info" : "ReturnStatement[51447-51467]:ReturnStatement[51506-51526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51526-51562]:Block[51585-51621]"
    }, {
      "left" : "return options.checkTypes;",
      "right" : "return options.checkTypes;",
      "info" : "ReturnStatement[51532-51558]:ReturnStatement[51591-51617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51934-51974]:Block[51993-52033]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[51940-51970]:ReturnStatement[51999-52029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52024-52296]:Block[52083-52355]"
    }, {
      "left" : "CheckLevel level = error.level;",
      "right" : "CheckLevel level = error.level;",
      "info" : "VariableDeclarationStatement[52030-52061]:VariableDeclarationStatement[52089-52120]"
    }, {
      "left" : "if (warningsGuard != null)",
      "right" : "if (warningsGuard != null)",
      "info" : "IfStatement[52066-52220]:IfStatement[52125-52279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52093-52220]:Block[52152-52279]"
    }, {
      "left" : "CheckLevel newLevel = warningsGuard.level(error);",
      "right" : "CheckLevel newLevel = warningsGuard.level(error);",
      "info" : "VariableDeclarationStatement[52101-52150]:VariableDeclarationStatement[52160-52209]"
    }, {
      "left" : "if (newLevel != null)",
      "right" : "if (newLevel != null)",
      "info" : "IfStatement[52157-52214]:IfStatement[52216-52273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52179-52214]:Block[52238-52273]"
    }, {
      "left" : "level = newLevel;",
      "right" : "level = newLevel;",
      "info" : "ExpressionStatement[52189-52206]:ExpressionStatement[52248-52265]"
    }, {
      "left" : "if (level.isOn())",
      "right" : "if (level.isOn())",
      "info" : "IfStatement[52226-52292]:IfStatement[52285-52351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52244-52292]:Block[52303-52351]"
    }, {
      "left" : "errorManager.report(level, error);",
      "right" : "errorManager.report(level, error);",
      "info" : "ExpressionStatement[52252-52286]:ExpressionStatement[52311-52345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52359-52444]:Block[52418-52503]"
    }, {
      "left" : "Preconditions.checkNotNull(options);",
      "right" : "Preconditions.checkNotNull(options);",
      "info" : "ExpressionStatement[52365-52401]:ExpressionStatement[52424-52460]"
    }, {
      "left" : "return warningsGuard.level(error);",
      "right" : "return warningsGuard.level(error);",
      "info" : "ReturnStatement[52406-52440]:ReturnStatement[52465-52499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52560-52836]:Block[52619-52895]"
    }, {
      "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "info" : "VariableDeclarationStatement[52566-52673]:VariableDeclarationStatement[52625-52732]"
    }, {
      "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "info" : "VariableDeclarationStatement[52679-52742]:VariableDeclarationStatement[52738-52801]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[52747-52819]:IfStatement[52806-52878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52766-52819]:Block[52825-52878]"
    }, {
      "left" : "e.setStackTrace(cause.getStackTrace());",
      "right" : "e.setStackTrace(cause.getStackTrace());",
      "info" : "ExpressionStatement[52774-52813]:ExpressionStatement[52833-52872]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[52824-52832]:ThrowStatement[52883-52891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52912-52958]:Block[52971-53017]"
    }, {
      "left" : "return errorManager.getErrorCount();",
      "right" : "return errorManager.getErrorCount();",
      "info" : "ReturnStatement[52918-52954]:ReturnStatement[52977-53013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53037-53085]:Block[53096-53144]"
    }, {
      "left" : "return errorManager.getWarningCount();",
      "right" : "return errorManager.getWarningCount();",
      "info" : "ReturnStatement[53043-53081]:ReturnStatement[53102-53140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53128-53181]:Block[53187-53240]"
    }, {
      "left" : "return !isIdeMode() && getErrorCount() > 0;",
      "right" : "return !isIdeMode() && getErrorCount() > 0;",
      "info" : "ReturnStatement[53134-53177]:ReturnStatement[53193-53236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53630-53666]:Block[53689-53725]"
    }, {
      "left" : "return hasHaltingErrors();",
      "right" : "return hasHaltingErrors();",
      "info" : "ReturnStatement[53636-53662]:ReturnStatement[53695-53721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53771-53851]:Block[53830-53910]"
    }, {
      "left" : "debugLog.append(str);",
      "right" : "debugLog.append(str);",
      "info" : "ExpressionStatement[53777-53798]:ExpressionStatement[53836-53857]"
    }, {
      "left" : "debugLog.append('\\n');",
      "right" : "debugLog.append('\\n');",
      "info" : "ExpressionStatement[53803-53825]:ExpressionStatement[53862-53884]"
    }, {
      "left" : "logger.fine(str);",
      "right" : "logger.fine(str);",
      "info" : "ExpressionStatement[53830-53847]:ExpressionStatement[53889-53906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53913-54048]:Block[53972-54107]"
    }, {
      "left" : "if (inputsByName.containsKey(sourceName))",
      "right" : "if (inputsByName.containsKey(sourceName))",
      "info" : "IfStatement[53919-54027]:IfStatement[53978-54086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53961-54027]:Block[54020-54086]"
    }, {
      "left" : "return inputsByName.get(sourceName).getSourceFile();",
      "right" : "return inputsByName.get(sourceName).getSourceFile();",
      "info" : "ReturnStatement[53969-54021]:ReturnStatement[54028-54080]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54032-54044]:ReturnStatement[54091-54103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54115-54315]:Block[54174-54374]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[54121-54167]:IfStatement[54180-54226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54141-54167]:Block[54200-54226]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54149-54161]:ReturnStatement[54208-54220]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[54172-54223]:VariableDeclarationStatement[54231-54282]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[54228-54294]:IfStatement[54287-54353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54247-54294]:Block[54306-54353]"
    }, {
      "left" : "return input.getLine(lineNumber);",
      "right" : "return input.getLine(lineNumber);",
      "info" : "ReturnStatement[54255-54288]:ReturnStatement[54314-54347]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54299-54311]:ReturnStatement[54358-54370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54384-54586]:Block[54443-54645]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[54390-54436]:IfStatement[54449-54495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54410-54436]:Block[54469-54495]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54418-54430]:ReturnStatement[54477-54489]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[54441-54492]:VariableDeclarationStatement[54500-54551]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[54497-54565]:IfStatement[54556-54624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54516-54565]:Block[54575-54624]"
    }, {
      "left" : "return input.getRegion(lineNumber);",
      "right" : "return input.getRegion(lineNumber);",
      "info" : "ReturnStatement[54524-54559]:ReturnStatement[54583-54618]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54570-54582]:ReturnStatement[54629-54641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54832-55225]:Block[54891-55284]"
    }, {
      "left" : "if (module == null)",
      "right" : "if (module == null)",
      "info" : "IfStatement[54838-55003]:IfStatement[54897-55062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54858-55003]:Block[54917-55062]"
    }, {
      "left" : "if (inputs.isEmpty())",
      "right" : "if (inputs.isEmpty())",
      "info" : "IfStatement[54866-54951]:IfStatement[54925-55010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54888-54951]:Block[54947-55010]"
    }, {
      "left" : "throw new IllegalStateException(\"No inputs\");",
      "right" : "throw new IllegalStateException(\"No inputs\");",
      "info" : "ThrowStatement[54898-54943]:ThrowStatement[54957-55002]"
    }, {
      "left" : "return inputs.get(0).getAstRoot(this);",
      "right" : "return inputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[54959-54997]:ReturnStatement[55018-55056]"
    }, {
      "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[55009-55063]:VariableDeclarationStatement[55068-55122]"
    }, {
      "left" : "if (moduleInputs.size() > 0)",
      "right" : "if (moduleInputs.size() > 0)",
      "info" : "IfStatement[55068-55155]:IfStatement[55127-55214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55097-55155]:Block[55156-55214]"
    }, {
      "left" : "return moduleInputs.get(0).getAstRoot(this);",
      "right" : "return moduleInputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[55105-55149]:ReturnStatement[55164-55208]"
    }, {
      "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "info" : "ThrowStatement[55160-55221]:ThrowStatement[55219-55280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55261-55288]:Block[55320-55347]"
    }, {
      "left" : "return sourceMap;",
      "right" : "return sourceMap;",
      "info" : "ReturnStatement[55267-55284]:ReturnStatement[55326-55343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55321-55389]:Block[55380-55448]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().variableMap;",
      "right" : "return getPassConfig().getIntermediateState().variableMap;",
      "info" : "ReturnStatement[55327-55385]:ReturnStatement[55386-55444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55422-55490]:Block[55481-55549]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().propertyMap;",
      "right" : "return getPassConfig().getIntermediateState().propertyMap;",
      "info" : "ReturnStatement[55428-55486]:ReturnStatement[55487-55545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55523-55548]:Block[55582-55607]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[55529-55544]:ReturnStatement[55588-55603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55605-55645]:Block[55664-55704]"
    }, {
      "left" : "return functionInformationMap;",
      "right" : "return functionInformationMap;",
      "info" : "ReturnStatement[55611-55641]:ReturnStatement[55670-55700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55783-55816]:Block[55842-55875]"
    }, {
      "left" : "logger.setLevel(level);",
      "right" : "logger.setLevel(level);",
      "info" : "ExpressionStatement[55789-55812]:ExpressionStatement[55848-55871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55946-56177]:Block[56005-56236]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[55952-56173]:IfStatement[56011-56232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55972-56143]:Block[56031-56202]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[55980-56049]:VariableDeclarationStatement[56039-56108]"
    }, {
      "left" : "cfa.process(null, jsRoot);",
      "right" : "cfa.process(null, jsRoot);",
      "info" : "ExpressionStatement[56056-56082]:ExpressionStatement[56115-56141]"
    }, {
      "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "info" : "ReturnStatement[56089-56137]:ReturnStatement[56148-56196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56149-56173]:Block[56208-56232]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[56157-56167]:ReturnStatement[56216-56226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56231-56336]:Block[56290-56395]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[56237-56307]:IfStatement[56296-56366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56258-56307]:Block[56317-56366]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[56266-56301]:ExpressionStatement[56325-56360]"
    }, {
      "left" : "return errorManager;",
      "right" : "return errorManager;",
      "info" : "ReturnStatement[56312-56332]:ReturnStatement[56371-56391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56391-56460]:Block[56450-56519]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "info" : "ReturnStatement[56397-56456]:ReturnStatement[56456-56515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57524-57526]:Block[57583-57585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57662-58045]:Block[57721-58104]"
    }, {
      "left" : "IntermediateState state = new IntermediateState();",
      "right" : "IntermediateState state = new IntermediateState();",
      "info" : "VariableDeclarationStatement[57668-57718]:VariableDeclarationStatement[57727-57777]"
    }, {
      "left" : "state.externsRoot = externsRoot;",
      "right" : "state.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[57723-57755]:ExpressionStatement[57782-57814]"
    }, {
      "left" : "state.jsRoot = jsRoot;",
      "right" : "state.jsRoot = jsRoot;",
      "info" : "ExpressionStatement[57760-57782]:ExpressionStatement[57819-57841]"
    }, {
      "left" : "state.externs = externs;",
      "right" : "state.externs = externs;",
      "info" : "ExpressionStatement[57787-57811]:ExpressionStatement[57846-57870]"
    }, {
      "left" : "state.inputs = inputs;",
      "right" : "state.inputs = inputs;",
      "info" : "ExpressionStatement[57816-57838]:ExpressionStatement[57875-57897]"
    }, {
      "left" : "state.modules = modules;",
      "right" : "state.modules = modules;",
      "info" : "ExpressionStatement[57843-57867]:ExpressionStatement[57902-57926]"
    }, {
      "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "info" : "ExpressionStatement[57872-57935]:ExpressionStatement[57931-57994]"
    }, {
      "left" : "state.typeRegistry = typeRegistry;",
      "right" : "state.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[57940-57974]:ExpressionStatement[57999-58033]"
    }, {
      "left" : "state.lifeCycleStage = getLifeCycleStage();",
      "right" : "state.lifeCycleStage = getLifeCycleStage();",
      "info" : "ExpressionStatement[57979-58022]:ExpressionStatement[58038-58081]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[58028-58041]:ReturnStatement[58087-58100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58228-58572]:Block[58287-58631]"
    }, {
      "left" : "externsRoot = state.externsRoot;",
      "right" : "externsRoot = state.externsRoot;",
      "info" : "ExpressionStatement[58234-58266]:ExpressionStatement[58293-58325]"
    }, {
      "left" : "jsRoot = state.jsRoot;",
      "right" : "jsRoot = state.jsRoot;",
      "info" : "ExpressionStatement[58271-58293]:ExpressionStatement[58330-58352]"
    }, {
      "left" : "externs = state.externs;",
      "right" : "externs = state.externs;",
      "info" : "ExpressionStatement[58298-58322]:ExpressionStatement[58357-58381]"
    }, {
      "left" : "inputs = state.inputs;",
      "right" : "inputs = state.inputs;",
      "info" : "ExpressionStatement[58327-58349]:ExpressionStatement[58386-58408]"
    }, {
      "left" : "modules = state.modules;",
      "right" : "modules = state.modules;",
      "info" : "ExpressionStatement[58354-58378]:ExpressionStatement[58413-58437]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[58383-58419]:ExpressionStatement[58442-58478]"
    }, {
      "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "info" : "ExpressionStatement[58424-58484]:ExpressionStatement[58483-58543]"
    }, {
      "left" : "typeRegistry = state.typeRegistry;",
      "right" : "typeRegistry = state.typeRegistry;",
      "info" : "ExpressionStatement[58489-58523]:ExpressionStatement[58548-58582]"
    }, {
      "left" : "setLifeCycleStage(state.lifeCycleStage);",
      "right" : "setLifeCycleStage(state.lifeCycleStage);",
      "info" : "ExpressionStatement[58528-58568]:ExpressionStatement[58587-58627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58639-58663]:Block[58698-58722]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[58645-58659]:ReturnStatement[58704-58718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58731-58756]:Block[58790-58815]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[58737-58752]:ReturnStatement[58796-58811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58808-58851]:Block[58867-58910]"
    }, {
      "left" : "return hasRegExpGlobalReferences;",
      "right" : "return hasRegExpGlobalReferences;",
      "info" : "ReturnStatement[58814-58847]:ReturnStatement[58873-58906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58921-58970]:Block[58980-59029]"
    }, {
      "left" : "hasRegExpGlobalReferences = references;",
      "right" : "hasRegExpGlobalReferences = references;",
      "info" : "ExpressionStatement[58927-58966]:ExpressionStatement[58986-59025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59087-59394]:Block[59146-59453]"
    }, {
      "left" : "Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT\n        || collectionRoot.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT\n        || collectionRoot.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[59093-59211]:ExpressionStatement[59152-59270]"
    }, {
      "left" : "if (globalRefMap == null)",
      "right" : "if (globalRefMap == null)",
      "info" : "IfStatement[59216-59317]:IfStatement[59275-59376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59242-59317]:Block[59301-59376]"
    }, {
      "left" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder());",
      "right" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder());",
      "info" : "ExpressionStatement[59250-59311]:ExpressionStatement[59309-59370]"
    }, {
      "left" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "right" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "info" : "ExpressionStatement[59322-59390]:ExpressionStatement[59381-59449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59448-59478]:Block[59507-59537]"
    }, {
      "left" : "return globalRefMap;",
      "right" : "return globalRefMap;",
      "info" : "ReturnStatement[59454-59474]:ReturnStatement[59513-59533]"
    } ]
  },
  "interFileMappings" : { }
}