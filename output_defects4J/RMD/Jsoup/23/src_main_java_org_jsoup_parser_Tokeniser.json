{
  "matchedElements" : [
 {
    "left" : "class : Tokeniser",
    "right" : "class : Tokeniser",
    "info" : "TypeDeclaration[147-8088]:TypeDeclaration[147-8097]"
  }, {
    "left" : "replacementChar",
    "right" : "replacementChar",
    "info" : "FieldDeclaration[218-263]:FieldDeclaration[218-263]"
  }, {
    "left" : "reader",
    "right" : "reader",
    "info" : "FieldDeclaration[296-327]:FieldDeclaration[296-327]"
  }, {
    "left" : "errors",
    "right" : "errors",
    "info" : "FieldDeclaration[346-376]:FieldDeclaration[346-376]"
  }, {
    "left" : "state",
    "right" : "state",
    "info" : "FieldDeclaration[415-466]:FieldDeclaration[415-466]"
  }, {
    "left" : "emitPending",
    "right" : "emitPending",
    "info" : "FieldDeclaration[501-527]:FieldDeclaration[501-527]"
  }, {
    "left" : "isEmitPending",
    "right" : "isEmitPending",
    "info" : "FieldDeclaration[579-617]:FieldDeclaration[579-617]"
  }, {
    "left" : "charBuffer",
    "right" : "charBuffer",
    "info" : "FieldDeclaration[622-677]:FieldDeclaration[622-677]"
  }, {
    "left" : "dataBuffer",
    "right" : "dataBuffer",
    "info" : "FieldDeclaration[727-752]:FieldDeclaration[727-752]"
  }, {
    "left" : "tagPending",
    "right" : "tagPending",
    "info" : "FieldDeclaration[796-817]:FieldDeclaration[796-817]"
  }, {
    "left" : "doctypePending",
    "right" : "doctypePending",
    "info" : "FieldDeclaration[848-877]:FieldDeclaration[848-877]"
  }, {
    "left" : "commentPending",
    "right" : "commentPending",
    "info" : "FieldDeclaration[905-934]:FieldDeclaration[905-934]"
  }, {
    "left" : "lastStartTag",
    "right" : "lastStartTag",
    "info" : "FieldDeclaration[962-998]:FieldDeclaration[962-998]"
  }, {
    "left" : "selfClosingFlagAcknowledged",
    "right" : "selfClosingFlagAcknowledged",
    "info" : "FieldDeclaration[1062-1113]:FieldDeclaration[1062-1113]"
  }, {
    "left" : "package Tokeniser(reader , errors ...)",
    "right" : "package Tokeniser(reader , errors ...)",
    "info" : "MethodDeclaration[1119-1243]:MethodDeclaration[1119-1243]"
  }, {
    "left" : "package read() : ",
    "right" : "package read() : ",
    "info" : "MethodDeclaration[1249-1903]:MethodDeclaration[1249-1903]"
  }, {
    "left" : "package emit(token ) : void",
    "right" : "package emit(token ) : void",
    "info" : "MethodDeclaration[1909-2561]:MethodDeclaration[1909-2561]"
  }, {
    "left" : "package emit(str ) : void",
    "right" : "package emit(str ) : void",
    "info" : "MethodDeclaration[2567-2800]:MethodDeclaration[2567-2800]"
  }, {
    "left" : "package emit(c char) : void",
    "right" : "package emit(c char) : void",
    "info" : "MethodDeclaration[2806-2861]:MethodDeclaration[2806-2861]"
  }, {
    "left" : "package getState() : ",
    "right" : "package getState() : ",
    "info" : "MethodDeclaration[2867-2922]:MethodDeclaration[2867-2922]"
  }, {
    "left" : "package transition(state ) : void",
    "right" : "package transition(state ) : void",
    "info" : "MethodDeclaration[2928-3001]:MethodDeclaration[2928-3001]"
  }, {
    "left" : "package advanceTransition(state ) : void",
    "right" : "package advanceTransition(state ) : void",
    "info" : "MethodDeclaration[3007-3113]:MethodDeclaration[3007-3113]"
  }, {
    "left" : "package acknowledgeSelfClosingFlag() : void",
    "right" : "package acknowledgeSelfClosingFlag() : void",
    "info" : "MethodDeclaration[3119-3204]:MethodDeclaration[3119-3204]"
  }, {
    "left" : "package consumeCharacterReference(additionalAllowedCharacter , inAttribute boolean) : ",
    "right" : "package consumeCharacterReference(additionalAllowedCharacter , inAttribute boolean) : ",
    "info" : "MethodDeclaration[3210-6252]:MethodDeclaration[3210-6261]"
  }, {
    "left" : "package createTagPending(start boolean) : ",
    "right" : "package createTagPending(start boolean) : ",
    "info" : "MethodDeclaration[6258-6406]:MethodDeclaration[6267-6415]"
  }, {
    "left" : "package emitTagPending() : void",
    "right" : "package emitTagPending() : void",
    "info" : "MethodDeclaration[6412-6501]:MethodDeclaration[6421-6510]"
  }, {
    "left" : "package createCommentPending() : void",
    "right" : "package createCommentPending() : void",
    "info" : "MethodDeclaration[6507-6588]:MethodDeclaration[6516-6597]"
  }, {
    "left" : "package emitCommentPending() : void",
    "right" : "package emitCommentPending() : void",
    "info" : "MethodDeclaration[6594-6657]:MethodDeclaration[6603-6666]"
  }, {
    "left" : "package createDoctypePending() : void",
    "right" : "package createDoctypePending() : void",
    "info" : "MethodDeclaration[6663-6744]:MethodDeclaration[6672-6753]"
  }, {
    "left" : "package emitDoctypePending() : void",
    "right" : "package emitDoctypePending() : void",
    "info" : "MethodDeclaration[6750-6813]:MethodDeclaration[6759-6822]"
  }, {
    "left" : "package createTempBuffer() : void",
    "right" : "package createTempBuffer() : void",
    "info" : "MethodDeclaration[6819-6892]:MethodDeclaration[6828-6901]"
  }, {
    "left" : "package isAppropriateEndTagToken() : boolean",
    "right" : "package isAppropriateEndTagToken() : boolean",
    "info" : "MethodDeclaration[6898-7004]:MethodDeclaration[6907-7013]"
  }, {
    "left" : "package appropriateEndTagName() : ",
    "right" : "package appropriateEndTagName() : ",
    "info" : "MethodDeclaration[7010-7085]:MethodDeclaration[7019-7094]"
  }, {
    "left" : "package error(state ) : void",
    "right" : "package error(state ) : void",
    "info" : "MethodDeclaration[7091-7293]:MethodDeclaration[7100-7302]"
  }, {
    "left" : "package eofError(state ) : void",
    "right" : "package eofError(state ) : void",
    "info" : "MethodDeclaration[7299-7499]:MethodDeclaration[7308-7508]"
  }, {
    "left" : "private characterReferenceError(message ) : void",
    "right" : "private characterReferenceError(message ) : void",
    "info" : "MethodDeclaration[7505-7697]:MethodDeclaration[7514-7706]"
  }, {
    "left" : "private error(errorMsg ) : void",
    "right" : "private error(errorMsg ) : void",
    "info" : "MethodDeclaration[7703-7844]:MethodDeclaration[7712-7853]"
  }, {
    "left" : "package currentNodeInHtmlNS() : boolean",
    "right" : "package currentNodeInHtmlNS() : boolean",
    "info" : "MethodDeclaration[7850-8086]:MethodDeclaration[7859-8095]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[196-201]:TYPE_DECLARATION_KIND[196-201]"
  }, {
    "left" : "Tokeniser",
    "right" : "Tokeniser",
    "info" : "SimpleName[1119-1128]:SimpleName[1119-1128]"
  }, {
    "left" : "CharacterReader reader",
    "right" : "CharacterReader reader",
    "info" : "SingleVariableDeclaration[1129-1151]:SingleVariableDeclaration[1129-1151]"
  }, {
    "left" : "ParseErrorList errors",
    "right" : "ParseErrorList errors",
    "info" : "SingleVariableDeclaration[1153-1174]:SingleVariableDeclaration[1153-1174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1176-1243]:Block[1176-1243]"
  }, {
    "left" : "this.reader = reader;",
    "right" : "this.reader = reader;",
    "info" : "ExpressionStatement[1186-1207]:ExpressionStatement[1186-1207]"
  }, {
    "left" : "this.errors = errors;",
    "right" : "this.errors = errors;",
    "info" : "ExpressionStatement[1216-1237]:ExpressionStatement[1216-1237]"
  }, {
    "left" : "Token",
    "right" : "Token",
    "info" : "SimpleType[1249-1254]:SimpleType[1249-1254]"
  }, {
    "left" : "read",
    "right" : "read",
    "info" : "SimpleName[1255-1259]:SimpleName[1255-1259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1262-1903]:Block[1262-1903]"
  }, {
    "left" : "if (!selfClosingFlagAcknowledged)",
    "right" : "if (!selfClosingFlagAcknowledged)",
    "info" : "IfStatement[1272-1422]:IfStatement[1272-1422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1306-1422]:Block[1306-1422]"
  }, {
    "left" : "error(\"Self closing flag not acknowledged\");",
    "right" : "error(\"Self closing flag not acknowledged\");",
    "info" : "ExpressionStatement[1320-1364]:ExpressionStatement[1320-1364]"
  }, {
    "left" : "selfClosingFlagAcknowledged = true;",
    "right" : "selfClosingFlagAcknowledged = true;",
    "info" : "ExpressionStatement[1377-1412]:ExpressionStatement[1377-1412]"
  }, {
    "left" : "while (!isEmitPending)\n            state.read(this, reader);",
    "right" : "while (!isEmitPending)\n            state.read(this, reader);",
    "info" : "WhileStatement[1432-1492]:WhileStatement[1432-1492]"
  }, {
    "left" : "state.read(this, reader);",
    "right" : "state.read(this, reader);",
    "info" : "ExpressionStatement[1467-1492]:ExpressionStatement[1467-1492]"
  }, {
    "left" : "if (charBuffer.length() > 0)",
    "right" : "if (charBuffer.length() > 0)",
    "info" : "IfStatement[1625-1897]:IfStatement[1625-1897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1654-1813]:Block[1654-1813]"
  }, {
    "left" : "String str = charBuffer.toString();",
    "right" : "String str = charBuffer.toString();",
    "info" : "VariableDeclarationStatement[1668-1703]:VariableDeclarationStatement[1668-1703]"
  }, {
    "left" : "charBuffer.delete(0, charBuffer.length());",
    "right" : "charBuffer.delete(0, charBuffer.length());",
    "info" : "ExpressionStatement[1716-1758]:ExpressionStatement[1716-1758]"
  }, {
    "left" : "return new Token.Character(str);",
    "right" : "return new Token.Character(str);",
    "info" : "ReturnStatement[1771-1803]:ReturnStatement[1771-1803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1819-1897]:Block[1819-1897]"
  }, {
    "left" : "isEmitPending = false;",
    "right" : "isEmitPending = false;",
    "info" : "ExpressionStatement[1833-1855]:ExpressionStatement[1833-1855]"
  }, {
    "left" : "return emitPending;",
    "right" : "return emitPending;",
    "info" : "ReturnStatement[1868-1887]:ReturnStatement[1868-1887]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1909-1913]:PrimitiveType[1909-1913]"
  }, {
    "left" : "emit",
    "right" : "emit",
    "info" : "SimpleName[1914-1918]:SimpleName[1914-1918]"
  }, {
    "left" : "Token token",
    "right" : "Token token",
    "info" : "SingleVariableDeclaration[1919-1930]:SingleVariableDeclaration[1919-1930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1932-2561]:Block[1932-2561]"
  }, {
    "left" : "Validate.isFalse(isEmitPending, \"There is an unread token pending!\");",
    "right" : "Validate.isFalse(isEmitPending, \"There is an unread token pending!\");",
    "info" : "ExpressionStatement[1942-2011]:ExpressionStatement[1942-2011]"
  }, {
    "left" : "emitPending = token;",
    "right" : "emitPending = token;",
    "info" : "ExpressionStatement[2021-2041]:ExpressionStatement[2021-2041]"
  }, {
    "left" : "isEmitPending = true;",
    "right" : "isEmitPending = true;",
    "info" : "ExpressionStatement[2050-2071]:ExpressionStatement[2050-2071]"
  }, {
    "left" : "if (token.type == Token.TokenType.StartTag)",
    "right" : "if (token.type == Token.TokenType.StartTag)",
    "info" : "IfStatement[2081-2555]:IfStatement[2081-2555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2125-2326]:Block[2125-2326]"
  }, {
    "left" : "Token.StartTag startTag = (Token.StartTag) token;",
    "right" : "Token.StartTag startTag = (Token.StartTag) token;",
    "info" : "VariableDeclarationStatement[2139-2188]:VariableDeclarationStatement[2139-2188]"
  }, {
    "left" : "lastStartTag = startTag;",
    "right" : "lastStartTag = startTag;",
    "info" : "ExpressionStatement[2201-2225]:ExpressionStatement[2201-2225]"
  }, {
    "left" : "if (startTag.selfClosing)",
    "right" : "if (startTag.selfClosing)",
    "info" : "IfStatement[2238-2316]:IfStatement[2238-2316]"
  }, {
    "left" : "selfClosingFlagAcknowledged = false;",
    "right" : "selfClosingFlagAcknowledged = false;",
    "info" : "ExpressionStatement[2280-2316]:ExpressionStatement[2280-2316]"
  }, {
    "left" : "if (token.type == Token.TokenType.EndTag)",
    "right" : "if (token.type == Token.TokenType.EndTag)",
    "info" : "IfStatement[2332-2555]:IfStatement[2332-2555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2374-2555]:Block[2374-2555]"
  }, {
    "left" : "Token.EndTag endTag = (Token.EndTag) token;",
    "right" : "Token.EndTag endTag = (Token.EndTag) token;",
    "info" : "VariableDeclarationStatement[2388-2431]:VariableDeclarationStatement[2388-2431]"
  }, {
    "left" : "if (endTag.attributes.size() > 0)",
    "right" : "if (endTag.attributes.size() > 0)",
    "info" : "IfStatement[2444-2545]:IfStatement[2444-2545]"
  }, {
    "left" : "error(\"Attributes incorrectly present on end tag\");",
    "right" : "error(\"Attributes incorrectly present on end tag\");",
    "info" : "ExpressionStatement[2494-2545]:ExpressionStatement[2494-2545]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2567-2571]:PrimitiveType[2567-2571]"
  }, {
    "left" : "emit",
    "right" : "emit",
    "info" : "SimpleName[2572-2576]:SimpleName[2572-2576]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[2577-2587]:SingleVariableDeclaration[2577-2587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2589-2800]:Block[2589-2800]"
  }, {
    "left" : "charBuffer.append(str);",
    "right" : "charBuffer.append(str);",
    "info" : "ExpressionStatement[2771-2794]:ExpressionStatement[2771-2794]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2806-2810]:PrimitiveType[2806-2810]"
  }, {
    "left" : "emit",
    "right" : "emit",
    "info" : "SimpleName[2811-2815]:SimpleName[2811-2815]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[2816-2822]:SingleVariableDeclaration[2816-2822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2824-2861]:Block[2824-2861]"
  }, {
    "left" : "charBuffer.append(c);",
    "right" : "charBuffer.append(c);",
    "info" : "ExpressionStatement[2834-2855]:ExpressionStatement[2834-2855]"
  }, {
    "left" : "TokeniserState",
    "right" : "TokeniserState",
    "info" : "SimpleType[2867-2881]:SimpleType[2867-2881]"
  }, {
    "left" : "getState",
    "right" : "getState",
    "info" : "SimpleName[2882-2890]:SimpleName[2882-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2893-2922]:Block[2893-2922]"
  }, {
    "left" : "return state;",
    "right" : "return state;",
    "info" : "ReturnStatement[2903-2916]:ReturnStatement[2903-2916]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2928-2932]:PrimitiveType[2928-2932]"
  }, {
    "left" : "transition",
    "right" : "transition",
    "info" : "SimpleName[2933-2943]:SimpleName[2933-2943]"
  }, {
    "left" : "TokeniserState state",
    "right" : "TokeniserState state",
    "info" : "SingleVariableDeclaration[2944-2964]:SingleVariableDeclaration[2944-2964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2966-3001]:Block[2966-3001]"
  }, {
    "left" : "this.state = state;",
    "right" : "this.state = state;",
    "info" : "ExpressionStatement[2976-2995]:ExpressionStatement[2976-2995]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3007-3011]:PrimitiveType[3007-3011]"
  }, {
    "left" : "advanceTransition",
    "right" : "advanceTransition",
    "info" : "SimpleName[3012-3029]:SimpleName[3012-3029]"
  }, {
    "left" : "TokeniserState state",
    "right" : "TokeniserState state",
    "info" : "SingleVariableDeclaration[3030-3050]:SingleVariableDeclaration[3030-3050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3052-3113]:Block[3052-3113]"
  }, {
    "left" : "reader.advance();",
    "right" : "reader.advance();",
    "info" : "ExpressionStatement[3062-3079]:ExpressionStatement[3062-3079]"
  }, {
    "left" : "this.state = state;",
    "right" : "this.state = state;",
    "info" : "ExpressionStatement[3088-3107]:ExpressionStatement[3088-3107]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3119-3123]:PrimitiveType[3119-3123]"
  }, {
    "left" : "acknowledgeSelfClosingFlag",
    "right" : "acknowledgeSelfClosingFlag",
    "info" : "SimpleName[3124-3150]:SimpleName[3124-3150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3153-3204]:Block[3153-3204]"
  }, {
    "left" : "selfClosingFlagAcknowledged = true;",
    "right" : "selfClosingFlagAcknowledged = true;",
    "info" : "ExpressionStatement[3163-3198]:ExpressionStatement[3163-3198]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[3210-3219]:SimpleType[3210-3219]"
  }, {
    "left" : "consumeCharacterReference",
    "right" : "consumeCharacterReference",
    "info" : "SimpleName[3220-3245]:SimpleName[3220-3245]"
  }, {
    "left" : "Character additionalAllowedCharacter",
    "right" : "Character additionalAllowedCharacter",
    "info" : "SingleVariableDeclaration[3246-3282]:SingleVariableDeclaration[3246-3282]"
  }, {
    "left" : "boolean inAttribute",
    "right" : "boolean inAttribute",
    "info" : "SingleVariableDeclaration[3284-3303]:SingleVariableDeclaration[3284-3303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3305-6252]:Block[3305-6261]"
  }, {
    "left" : "if (reader.isEmpty())",
    "right" : "if (reader.isEmpty())",
    "info" : "IfStatement[3315-3361]:IfStatement[3315-3361]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3349-3361]:ReturnStatement[3349-3361]"
  }, {
    "left" : "if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())",
    "right" : "if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())",
    "info" : "IfStatement[3370-3484]:IfStatement[3370-3484]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3472-3484]:ReturnStatement[3472-3484]"
  }, {
    "left" : "if (reader.matchesAny('\\t', '\\n', '\\f', ' ', '<', '&'))",
    "right" : "if (reader.matchesAny('\\t', '\\n', '\\f', ' ', '<', '&'))",
    "info" : "IfStatement[3493-3573]:IfStatement[3493-3573]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3561-3573]:ReturnStatement[3561-3573]"
  }, {
    "left" : "reader.mark();",
    "right" : "reader.mark();",
    "info" : "ExpressionStatement[3583-3597]:ExpressionStatement[3583-3597]"
  }, {
    "left" : "if (reader.matchConsume(\"#\"))",
    "right" : "if (reader.matchConsume(\"#\"))",
    "info" : "IfStatement[3606-6246]:IfStatement[3606-6255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3636-4828]:Block[3636-4828]"
  }, {
    "left" : "boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");",
    "right" : "boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");",
    "info" : "VariableDeclarationStatement[3662-3717]:VariableDeclarationStatement[3662-3717]"
  }, {
    "left" : "String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();",
    "right" : "String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();",
    "info" : "VariableDeclarationStatement[3730-3818]:VariableDeclarationStatement[3730-3818]"
  }, {
    "left" : "if (numRef.length() == 0)",
    "right" : "if (numRef.length() == 0)",
    "info" : "IfStatement[3831-4044]:IfStatement[3831-4044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3857-4044]:Block[3857-4044]"
  }, {
    "left" : "characterReferenceError(\"numeric reference with no numerals\");",
    "right" : "characterReferenceError(\"numeric reference with no numerals\");",
    "info" : "ExpressionStatement[3900-3962]:ExpressionStatement[3900-3962]"
  }, {
    "left" : "reader.rewindToMark();",
    "right" : "reader.rewindToMark();",
    "info" : "ExpressionStatement[3979-4001]:ExpressionStatement[3979-4001]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[4018-4030]:ReturnStatement[4018-4030]"
  }, {
    "left" : "if (!reader.matchConsume(\";\"))",
    "right" : "if (!reader.matchConsume(\";\"))",
    "info" : "IfStatement[4057-4149]:IfStatement[4057-4149]"
  }, {
    "left" : "characterReferenceError(\"missing semicolon\");",
    "right" : "characterReferenceError(\"missing semicolon\");",
    "info" : "ExpressionStatement[4104-4149]:ExpressionStatement[4104-4149]"
  }, {
    "left" : "int charval = -1;",
    "right" : "int charval = -1;",
    "info" : "VariableDeclarationStatement[4178-4195]:VariableDeclarationStatement[4178-4195]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4208-4380]:TryStatement[4208-4380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4212-4332]:Block[4212-4332]"
  }, {
    "left" : "int base = isHexMode ? 16 : 10;",
    "right" : "int base = isHexMode ? 16 : 10;",
    "info" : "VariableDeclarationStatement[4230-4261]:VariableDeclarationStatement[4230-4261]"
  }, {
    "left" : "charval = Integer.valueOf(numRef, base);",
    "right" : "charval = Integer.valueOf(numRef, base);",
    "info" : "ExpressionStatement[4278-4318]:ExpressionStatement[4278-4318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4365-4380]:Block[4365-4380]"
  }, {
    "left" : "if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF)",
    "right" : "if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF)",
    "info" : "IfStatement[4401-4818]:IfStatement[4401-4818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4486-4618]:Block[4486-4618]"
  }, {
    "left" : "characterReferenceError(\"character outside of valid range\");",
    "right" : "characterReferenceError(\"character outside of valid range\");",
    "info" : "ExpressionStatement[4504-4564]:ExpressionStatement[4504-4564]"
  }, {
    "left" : "return replacementChar;",
    "right" : "return replacementChar;",
    "info" : "ReturnStatement[4581-4604]:ReturnStatement[4581-4604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4624-4818]:Block[4624-4818]"
  }, {
    "left" : "return (char) charval;",
    "right" : "return (char) charval;",
    "info" : "ReturnStatement[4782-4804]:ReturnStatement[4782-4804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4834-6246]:Block[4834-6255]"
  }, {
    "left" : "String nameRef = reader.consumeLetterSequence();",
    "right" : "String nameRef = reader.consumeLetterThenDigitSequence();",
    "info" : "VariableDeclarationStatement[4979-5027]:VariableDeclarationStatement[4979-5036]"
  }, {
    "left" : "consumeLetterSequence",
    "right" : "consumeLetterThenDigitSequence",
    "info" : "SimpleName[5003-5024]:SimpleName[5003-5033]"
  }, {
    "left" : "String origNameRef = new String(nameRef);",
    "right" : "String origNameRef = new String(nameRef);",
    "info" : "VariableDeclarationStatement[5040-5081]:VariableDeclarationStatement[5049-5090]"
  }, {
    "left" : "boolean looksLegit = reader.matches(';');",
    "right" : "boolean looksLegit = reader.matches(';');",
    "info" : "VariableDeclarationStatement[5159-5200]:VariableDeclarationStatement[5168-5209]"
  }, {
    "left" : "boolean found = false;",
    "right" : "boolean found = false;",
    "info" : "VariableDeclarationStatement[5213-5235]:VariableDeclarationStatement[5222-5244]"
  }, {
    "left" : "while (nameRef.length() > 0 && !found)",
    "right" : "while (nameRef.length() > 0 && !found)",
    "info" : "WhileStatement[5248-5542]:WhileStatement[5257-5551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5287-5542]:Block[5296-5551]"
  }, {
    "left" : "if (Entities.isNamedEntity(nameRef))",
    "right" : "if (Entities.isNamedEntity(nameRef))",
    "info" : "IfStatement[5305-5528]:IfStatement[5314-5537]"
  }, {
    "left" : "found = true;",
    "right" : "found = true;",
    "info" : "ExpressionStatement[5362-5375]:ExpressionStatement[5371-5384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5397-5528]:Block[5406-5537]"
  }, {
    "left" : "nameRef = nameRef.substring(0, nameRef.length()-1);",
    "right" : "nameRef = nameRef.substring(0, nameRef.length()-1);",
    "info" : "ExpressionStatement[5419-5470]:ExpressionStatement[5428-5479]"
  }, {
    "left" : "reader.unconsume();",
    "right" : "reader.unconsume();",
    "info" : "ExpressionStatement[5491-5510]:ExpressionStatement[5500-5519]"
  }, {
    "left" : "if (!found)",
    "right" : "if (!found)",
    "info" : "IfStatement[5555-5812]:IfStatement[5564-5821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5567-5812]:Block[5576-5821]"
  }, {
    "left" : "if (looksLegit)",
    "right" : "if (looksLegit)",
    "info" : "IfStatement[5585-5730]:IfStatement[5594-5739]"
  }, {
    "left" : "characterReferenceError(String.format(\"invalid named referenece '%s'\", origNameRef));",
    "right" : "characterReferenceError(String.format(\"invalid named referenece '%s'\", origNameRef));",
    "info" : "ExpressionStatement[5645-5730]:ExpressionStatement[5654-5739]"
  }, {
    "left" : "reader.rewindToMark();",
    "right" : "reader.rewindToMark();",
    "info" : "ExpressionStatement[5747-5769]:ExpressionStatement[5756-5778]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5786-5798]:ReturnStatement[5795-5807]"
  }, {
    "left" : "if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny('=', '-', '_')))",
    "right" : "if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny('=', '-', '_')))",
    "info" : "IfStatement[5825-6058]:IfStatement[5834-6067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5931-6058]:Block[5940-6067]"
  }, {
    "left" : "reader.rewindToMark();",
    "right" : "reader.rewindToMark();",
    "info" : "ExpressionStatement[5993-6015]:ExpressionStatement[6002-6024]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6032-6044]:ReturnStatement[6041-6053]"
  }, {
    "left" : "if (!reader.matchConsume(\";\"))",
    "right" : "if (!reader.matchConsume(\";\"))",
    "info" : "IfStatement[6071-6163]:IfStatement[6080-6172]"
  }, {
    "left" : "characterReferenceError(\"missing semicolon\");",
    "right" : "characterReferenceError(\"missing semicolon\");",
    "info" : "ExpressionStatement[6118-6163]:ExpressionStatement[6127-6172]"
  }, {
    "left" : "return Entities.getCharacterByName(nameRef);",
    "right" : "return Entities.getCharacterByName(nameRef);",
    "info" : "ReturnStatement[6192-6236]:ReturnStatement[6201-6245]"
  }, {
    "left" : "Token.Tag",
    "right" : "Token.Tag",
    "info" : "SimpleType[6258-6267]:SimpleType[6267-6276]"
  }, {
    "left" : "createTagPending",
    "right" : "createTagPending",
    "info" : "SimpleName[6268-6284]:SimpleName[6277-6293]"
  }, {
    "left" : "boolean start",
    "right" : "boolean start",
    "info" : "SingleVariableDeclaration[6285-6298]:SingleVariableDeclaration[6294-6307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6300-6406]:Block[6309-6415]"
  }, {
    "left" : "tagPending = start ? new Token.StartTag() : new Token.EndTag();",
    "right" : "tagPending = start ? new Token.StartTag() : new Token.EndTag();",
    "info" : "ExpressionStatement[6310-6373]:ExpressionStatement[6319-6382]"
  }, {
    "left" : "return tagPending;",
    "right" : "return tagPending;",
    "info" : "ReturnStatement[6382-6400]:ReturnStatement[6391-6409]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6412-6416]:PrimitiveType[6421-6425]"
  }, {
    "left" : "emitTagPending",
    "right" : "emitTagPending",
    "info" : "SimpleName[6417-6431]:SimpleName[6426-6440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6434-6501]:Block[6443-6510]"
  }, {
    "left" : "tagPending.finaliseTag();",
    "right" : "tagPending.finaliseTag();",
    "info" : "ExpressionStatement[6444-6469]:ExpressionStatement[6453-6478]"
  }, {
    "left" : "emit(tagPending);",
    "right" : "emit(tagPending);",
    "info" : "ExpressionStatement[6478-6495]:ExpressionStatement[6487-6504]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6507-6511]:PrimitiveType[6516-6520]"
  }, {
    "left" : "createCommentPending",
    "right" : "createCommentPending",
    "info" : "SimpleName[6512-6532]:SimpleName[6521-6541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6535-6588]:Block[6544-6597]"
  }, {
    "left" : "commentPending = new Token.Comment();",
    "right" : "commentPending = new Token.Comment();",
    "info" : "ExpressionStatement[6545-6582]:ExpressionStatement[6554-6591]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6594-6598]:PrimitiveType[6603-6607]"
  }, {
    "left" : "emitCommentPending",
    "right" : "emitCommentPending",
    "info" : "SimpleName[6599-6617]:SimpleName[6608-6626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6620-6657]:Block[6629-6666]"
  }, {
    "left" : "emit(commentPending);",
    "right" : "emit(commentPending);",
    "info" : "ExpressionStatement[6630-6651]:ExpressionStatement[6639-6660]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6663-6667]:PrimitiveType[6672-6676]"
  }, {
    "left" : "createDoctypePending",
    "right" : "createDoctypePending",
    "info" : "SimpleName[6668-6688]:SimpleName[6677-6697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6691-6744]:Block[6700-6753]"
  }, {
    "left" : "doctypePending = new Token.Doctype();",
    "right" : "doctypePending = new Token.Doctype();",
    "info" : "ExpressionStatement[6701-6738]:ExpressionStatement[6710-6747]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6750-6754]:PrimitiveType[6759-6763]"
  }, {
    "left" : "emitDoctypePending",
    "right" : "emitDoctypePending",
    "info" : "SimpleName[6755-6773]:SimpleName[6764-6782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6776-6813]:Block[6785-6822]"
  }, {
    "left" : "emit(doctypePending);",
    "right" : "emit(doctypePending);",
    "info" : "ExpressionStatement[6786-6807]:ExpressionStatement[6795-6816]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6819-6823]:PrimitiveType[6828-6832]"
  }, {
    "left" : "createTempBuffer",
    "right" : "createTempBuffer",
    "info" : "SimpleName[6824-6840]:SimpleName[6833-6849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6843-6892]:Block[6852-6901]"
  }, {
    "left" : "dataBuffer = new StringBuilder();",
    "right" : "dataBuffer = new StringBuilder();",
    "info" : "ExpressionStatement[6853-6886]:ExpressionStatement[6862-6895]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6898-6905]:PrimitiveType[6907-6914]"
  }, {
    "left" : "isAppropriateEndTagToken",
    "right" : "isAppropriateEndTagToken",
    "info" : "SimpleName[6906-6930]:SimpleName[6915-6939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6933-7004]:Block[6942-7013]"
  }, {
    "left" : "return tagPending.tagName.equals(lastStartTag.tagName);",
    "right" : "return tagPending.tagName.equals(lastStartTag.tagName);",
    "info" : "ReturnStatement[6943-6998]:ReturnStatement[6952-7007]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7010-7016]:SimpleType[7019-7025]"
  }, {
    "left" : "appropriateEndTagName",
    "right" : "appropriateEndTagName",
    "info" : "SimpleName[7017-7038]:SimpleName[7026-7047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7041-7085]:Block[7050-7094]"
  }, {
    "left" : "return lastStartTag.tagName;",
    "right" : "return lastStartTag.tagName;",
    "info" : "ReturnStatement[7051-7079]:ReturnStatement[7060-7088]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7091-7095]:PrimitiveType[7100-7104]"
  }, {
    "left" : "error",
    "right" : "error",
    "info" : "SimpleName[7096-7101]:SimpleName[7105-7110]"
  }, {
    "left" : "TokeniserState state",
    "right" : "TokeniserState state",
    "info" : "SingleVariableDeclaration[7102-7122]:SingleVariableDeclaration[7111-7131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7124-7293]:Block[7133-7302]"
  }, {
    "left" : "if (errors.canAddError())",
    "right" : "if (errors.canAddError())",
    "info" : "IfStatement[7134-7287]:IfStatement[7143-7296]"
  }, {
    "left" : "errors.add(new ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));",
    "right" : "errors.add(new ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));",
    "info" : "ExpressionStatement[7172-7287]:ExpressionStatement[7181-7296]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7299-7303]:PrimitiveType[7308-7312]"
  }, {
    "left" : "eofError",
    "right" : "eofError",
    "info" : "SimpleName[7304-7312]:SimpleName[7313-7321]"
  }, {
    "left" : "TokeniserState state",
    "right" : "TokeniserState state",
    "info" : "SingleVariableDeclaration[7313-7333]:SingleVariableDeclaration[7322-7342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7335-7499]:Block[7344-7508]"
  }, {
    "left" : "if (errors.canAddError())",
    "right" : "if (errors.canAddError())",
    "info" : "IfStatement[7345-7493]:IfStatement[7354-7502]"
  }, {
    "left" : "errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));",
    "right" : "errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));",
    "info" : "ExpressionStatement[7383-7493]:ExpressionStatement[7392-7502]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7505-7512]:Modifier[7514-7521]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7513-7517]:PrimitiveType[7522-7526]"
  }, {
    "left" : "characterReferenceError",
    "right" : "characterReferenceError",
    "info" : "SimpleName[7518-7541]:SimpleName[7527-7550]"
  }, {
    "left" : "String message",
    "right" : "String message",
    "info" : "SingleVariableDeclaration[7542-7556]:SingleVariableDeclaration[7551-7565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7558-7697]:Block[7567-7706]"
  }, {
    "left" : "if (errors.canAddError())",
    "right" : "if (errors.canAddError())",
    "info" : "IfStatement[7568-7691]:IfStatement[7577-7700]"
  }, {
    "left" : "errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));",
    "right" : "errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));",
    "info" : "ExpressionStatement[7606-7691]:ExpressionStatement[7615-7700]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7703-7710]:Modifier[7712-7719]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7711-7715]:PrimitiveType[7720-7724]"
  }, {
    "left" : "error",
    "right" : "error",
    "info" : "SimpleName[7716-7721]:SimpleName[7725-7730]"
  }, {
    "left" : "String errorMsg",
    "right" : "String errorMsg",
    "info" : "SingleVariableDeclaration[7722-7737]:SingleVariableDeclaration[7731-7746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7739-7844]:Block[7748-7853]"
  }, {
    "left" : "if (errors.canAddError())",
    "right" : "if (errors.canAddError())",
    "info" : "IfStatement[7749-7838]:IfStatement[7758-7847]"
  }, {
    "left" : "errors.add(new ParseError(reader.pos(), errorMsg));",
    "right" : "errors.add(new ParseError(reader.pos(), errorMsg));",
    "info" : "ExpressionStatement[7787-7838]:ExpressionStatement[7796-7847]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7850-7857]:PrimitiveType[7859-7866]"
  }, {
    "left" : "currentNodeInHtmlNS",
    "right" : "currentNodeInHtmlNS",
    "info" : "SimpleName[7858-7877]:SimpleName[7867-7886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7880-8086]:Block[7889-8095]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[7939-7951]:ReturnStatement[7948-7960]"
  } ]
}