{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FileUtilHeavyTest",
      "right" : "FileUtilHeavyTest",
      "info" : "TypeDeclaration[1030-8396]:TypeDeclaration[1030-12164]"
    }, {
      "left" : "private static File myTempDirectory;",
      "right" : "private static File myTempDirectory;",
      "info" : "FieldDeclaration[1108-1144]:FieldDeclaration[1108-1144]"
    }, {
      "left" : "private static File myVisitorTestDirectory;",
      "right" : "private static File myVisitorTestDirectory;",
      "info" : "FieldDeclaration[1147-1190]:FieldDeclaration[1147-1190]"
    }, {
      "left" : "private static File myFindTestDirectory;",
      "right" : "private static File myFindTestDirectory;",
      "info" : "FieldDeclaration[1193-1233]:FieldDeclaration[1193-1233]"
    }, {
      "left" : "private static File myFindTestFirstFile;",
      "right" : "private static File myFindTestFirstFile;",
      "info" : "FieldDeclaration[1236-1276]:FieldDeclaration[1236-1276]"
    }, {
      "left" : "private static File myFindTestSecondFile;",
      "right" : "private static File myFindTestSecondFile;",
      "info" : "FieldDeclaration[1279-1320]:FieldDeclaration[1279-1320]"
    }, {
      "left" : "public static void setUp() throws Exception",
      "right" : "public static void setUp() throws Exception",
      "info" : "MethodDeclaration[1324-2283]:MethodDeclaration[1324-2283]"
    }, {
      "left" : "public static void tearDown()",
      "right" : "public static void tearDown()",
      "info" : "MethodDeclaration[2287-2417]:MethodDeclaration[2287-2417]"
    }, {
      "left" : "public void testProcessSimple()",
      "right" : "public void testProcessSimple()",
      "info" : "MethodDeclaration[2421-3110]:MethodDeclaration[2421-3110]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[2626-2833]:MethodDeclaration[2626-2833]"
    }, {
      "left" : "public void testProcessStops()",
      "right" : "public void testProcessStops()",
      "info" : "MethodDeclaration[3114-3423]:MethodDeclaration[3114-3423]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[3282-3381]:MethodDeclaration[3282-3381]"
    }, {
      "left" : "public void testProcessDirectoryFilter()",
      "right" : "public void testProcessDirectoryFilter()",
      "info" : "MethodDeclaration[3427-4524]:MethodDeclaration[3427-4524]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[3641-3848]:MethodDeclaration[3641-3848]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[3919-4125]:MethodDeclaration[3919-4125]"
    }, {
      "left" : "public void nonExistingFileInNonExistentDirectory()",
      "right" : "public void nonExistingFileInNonExistentDirectory()",
      "info" : "MethodDeclaration[4528-4701]:MethodDeclaration[4528-4701]"
    }, {
      "left" : "public void nonExistingFileInDirectory()",
      "right" : "public void nonExistingFileInDirectory()",
      "info" : "MethodDeclaration[4705-4899]:MethodDeclaration[4705-4899]"
    }, {
      "left" : "public void nonExistingFile()",
      "right" : "public void nonExistingFile()",
      "info" : "MethodDeclaration[4903-5125]:MethodDeclaration[4903-5125]"
    }, {
      "left" : "public void existingFileInDirectory()",
      "right" : "public void existingFileInDirectory()",
      "info" : "MethodDeclaration[5129-5342]:MethodDeclaration[5129-5342]"
    }, {
      "left" : "public void existingFile()",
      "right" : "public void existingFile()",
      "info" : "MethodDeclaration[5346-5548]:MethodDeclaration[5346-5548]"
    }, {
      "left" : "public void twoFilesOrderInDirectory()",
      "right" : "public void twoFilesOrderInDirectory()",
      "info" : "MethodDeclaration[5552-5776]:MethodDeclaration[5552-5776]"
    }, {
      "left" : "public void twoFilesOrderInDirectory2()",
      "right" : "public void twoFilesOrderInDirectory2()",
      "info" : "MethodDeclaration[5780-6006]:MethodDeclaration[5780-6006]"
    }, {
      "left" : "public void twoFilesOrder()",
      "right" : "public void twoFilesOrder()",
      "info" : "MethodDeclaration[6010-6223]:MethodDeclaration[6010-6223]"
    }, {
      "left" : "public void twoFilesOrder2()",
      "right" : "public void twoFilesOrder2()",
      "info" : "MethodDeclaration[6227-6441]:MethodDeclaration[6227-6441]"
    }, {
      "left" : "public void testRepeatableOperation() throws IOException",
      "right" : "public void testRepeatableOperation() throws IOException",
      "info" : "MethodDeclaration[6445-7571]:MethodDeclaration[6445-7571]"
    }, {
      "left" : "CountableIOOperation",
      "right" : "CountableIOOperation",
      "info" : "TypeDeclaration[6516-6876]:TypeDeclaration[6516-6876]"
    }, {
      "left" : "private int count = 0;",
      "right" : "private int count = 0;",
      "info" : "FieldDeclaration[6626-6648]:FieldDeclaration[6626-6648]"
    }, {
      "left" : "public Boolean execute(boolean lastAttempt) throws IOException",
      "right" : "public Boolean execute(boolean lastAttempt) throws IOException",
      "info" : "MethodDeclaration[6656-6809]:MethodDeclaration[6656-6809]"
    }, {
      "left" : "protected abstract boolean stop(boolean lastAttempt);",
      "right" : "protected abstract boolean stop(boolean lastAttempt);",
      "info" : "MethodDeclaration[6817-6870]:MethodDeclaration[6817-6870]"
    }, {
      "left" : "protected boolean stop(boolean lastAttempt)",
      "right" : "protected boolean stop(boolean lastAttempt)",
      "info" : "MethodDeclaration[6951-7021]:MethodDeclaration[6951-7021]"
    }, {
      "left" : "protected boolean stop(boolean lastAttempt)",
      "right" : "protected boolean stop(boolean lastAttempt)",
      "info" : "MethodDeclaration[7180-7251]:MethodDeclaration[7180-7251]"
    }, {
      "left" : "protected boolean stop(boolean lastAttempt)",
      "right" : "protected boolean stop(boolean lastAttempt)",
      "info" : "MethodDeclaration[7405-7482]:MethodDeclaration[7405-7482]"
    }, {
      "left" : "public void testSymlinkDeletion() throws Exception",
      "right" : "public void testSymlinkDeletion() throws Exception",
      "info" : "MethodDeclaration[7575-8168]:MethodDeclaration[7575-8168]"
    }, {
      "left" : "public void testCaseSensitivityDetection() throws IOException",
      "right" : "public void testCaseSensitivityDetection() throws IOException",
      "info" : "MethodDeclaration[8172-8394]:MethodDeclaration[11940-12162]"
    } ],
    "mappings" : [
 {
      "left" : "@BeforeClass",
      "right" : "@BeforeClass",
      "info" : "MarkerAnnotation[1324-1336]:MarkerAnnotation[1324-1336]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1339-1345]:Modifier[1339-1345]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1339-1345]:Modifier[8185-8191]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1346-1352]:Modifier[1346-1352]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1353-1357]:PrimitiveType[1353-1357]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1353-1357]:PrimitiveType[8192-8196]"
    }, {
      "left" : "setUp",
      "right" : "setUp",
      "info" : "SimpleName[1358-1363]:SimpleName[1358-1363]"
    }, {
      "left" : "setUp",
      "right" : "testToCanonicalPathSymLinksAware",
      "info" : "SimpleName[1358-1363]:SimpleName[8197-8229]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[1373-1382]:SimpleType[1373-1382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1383-2283]:Block[1383-2283]"
    }, {
      "left" : "myTempDirectory = FileUtil.createTempDirectory(\"FileUtilHeavyTest.\", \".tmp\");",
      "right" : "myTempDirectory = FileUtil.createTempDirectory(\"FileUtilHeavyTest.\", \".tmp\");",
      "info" : "ExpressionStatement[1389-1466]:ExpressionStatement[1389-1466]"
    }, {
      "left" : "myTempDirectory = FileUtil.createTempDirectory(\"FileUtilHeavyTest.\", \".tmp\");",
      "right" : "assumeTrue(SystemInfo.areSymLinksSupported);",
      "info" : "ExpressionStatement[1389-1466]:ExpressionStatement[8255-8299]"
    }, {
      "left" : "FileUtil.createTempDirectory(\"FileUtilHeavyTest.\", \".tmp\")",
      "right" : "assumeTrue(SystemInfo.areSymLinksSupported)",
      "info" : "MethodInvocation[1407-1465]:MethodInvocation[8255-8298]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[1407-1415]:METHOD_INVOCATION_RECEIVER[11367-11375]"
    }, {
      "left" : "myVisitorTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"visitor_test_dir\");",
      "right" : "myVisitorTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"visitor_test_dir\");",
      "info" : "ExpressionStatement[1472-1559]:ExpressionStatement[1472-1559]"
    }, {
      "left" : "File dir1 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir1\");",
      "right" : "File dir1 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir1\");",
      "info" : "VariableDeclarationStatement[1564-1633]:VariableDeclarationStatement[1564-1633]"
    }, {
      "left" : "File dir1 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir1\");",
      "right" : "File root = IoTestUtil.createTestDir(myTempDirectory, \"root\");",
      "info" : "VariableDeclarationStatement[1564-1633]:VariableDeclarationStatement[8309-8371]"
    }, {
      "left" : "dir1",
      "right" : "root",
      "info" : "SimpleName[1569-1573]:SimpleName[8314-8318]"
    }, {
      "left" : "myVisitorTestDirectory",
      "right" : "myTempDirectory",
      "info" : "SimpleName[1601-1623]:SimpleName[8346-8361]"
    }, {
      "left" : "\"dir1\"",
      "right" : "\"root\"",
      "info" : "StringLiteral[1625-1631]:StringLiteral[8363-8369]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir1, \"1\");",
      "right" : "IoTestUtil.createTestFile(dir1, \"1\");",
      "info" : "ExpressionStatement[1638-1675]:ExpressionStatement[1638-1675]"
    }, {
      "left" : "IoTestUtil",
      "right" : "assertTrue",
      "info" : "SimpleName[1638-1648]:SimpleName[8376-8386]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir1, \"1\");",
      "right" : "assertTrue(new File(root, \"dir1/dir2/dir3/dir4\").mkdirs());",
      "info" : "ExpressionStatement[1638-1675]:ExpressionStatement[8376-8435]"
    }, {
      "left" : "dir1",
      "right" : "root",
      "info" : "SimpleName[1664-1668]:SimpleName[8396-8400]"
    }, {
      "left" : "\"1\"",
      "right" : "\"dir1/dir2/dir3/dir4\"",
      "info" : "StringLiteral[1670-1673]:StringLiteral[8402-8423]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir1, \"2\");",
      "right" : "IoTestUtil.createTestFile(dir1, \"2\");",
      "info" : "ExpressionStatement[1680-1717]:ExpressionStatement[1680-1717]"
    }, {
      "left" : "createTestFile",
      "right" : "createSymLink",
      "info" : "SimpleName[1691-1705]:SimpleName[8478-8491]"
    }, {
      "left" : "File dir2 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir2\");",
      "right" : "File dir2 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir2\");",
      "info" : "VariableDeclarationStatement[1722-1791]:VariableDeclarationStatement[1722-1791]"
    }, {
      "left" : "dir2",
      "right" : "root",
      "info" : "SimpleName[1727-1731]:SimpleName[8501-8505]"
    }, {
      "left" : "\"dir2\"",
      "right" : "\"dir1/dir2\"",
      "info" : "StringLiteral[1783-1789]:StringLiteral[8507-8518]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir2, \"1\");",
      "right" : "IoTestUtil.createTestFile(dir2, \"1\");",
      "info" : "ExpressionStatement[1796-1833]:ExpressionStatement[1796-1833]"
    }, {
      "left" : "IoTestUtil",
      "right" : "getPath",
      "info" : "SimpleName[1796-1806]:SimpleName[8520-8527]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir2, \"2\");",
      "right" : "IoTestUtil.createTestFile(dir2, \"2\");",
      "info" : "ExpressionStatement[1838-1875]:ExpressionStatement[1838-1875]"
    }, {
      "left" : "File dir21 = IoTestUtil.createTestDir(dir2, \"inner\");",
      "right" : "File dir21 = IoTestUtil.createTestDir(dir2, \"inner\");",
      "info" : "VariableDeclarationStatement[1880-1933]:VariableDeclarationStatement[1880-1933]"
    }, {
      "left" : "dir21",
      "right" : "root",
      "info" : "SimpleName[1885-1890]:SimpleName[8540-8544]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir21, \"1\");",
      "right" : "IoTestUtil.createTestFile(dir21, \"1\");",
      "info" : "ExpressionStatement[1938-1976]:ExpressionStatement[1938-1976]"
    }, {
      "left" : "\"1\"",
      "right" : "\"dir1/dir2_link\"",
      "info" : "StringLiteral[1971-1974]:StringLiteral[8546-8562]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir21, \"2\");",
      "right" : "IoTestUtil.createTestFile(dir21, \"2\");",
      "info" : "ExpressionStatement[1981-2019]:ExpressionStatement[1981-2019]"
    }, {
      "left" : "IoTestUtil",
      "right" : "getPath",
      "info" : "SimpleName[1981-1991]:SimpleName[8564-8571]"
    }, {
      "left" : "myFindTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"find_file_test_dir\");",
      "right" : "myFindTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"find_file_test_dir\");",
      "info" : "ExpressionStatement[2025-2111]:ExpressionStatement[2025-2111]"
    }, {
      "left" : "createTestDir",
      "right" : "createSymLink",
      "info" : "SimpleName[2058-2071]:SimpleName[8630-8643]"
    }, {
      "left" : "myFindTestFirstFile = IoTestUtil.createTestFile(myFindTestDirectory, \"first\");",
      "right" : "myFindTestFirstFile = IoTestUtil.createTestFile(myFindTestDirectory, \"first\");",
      "info" : "ExpressionStatement[2116-2194]:ExpressionStatement[2116-2194]"
    }, {
      "left" : "IoTestUtil.createTestFile(myFindTestDirectory, \"first\")",
      "right" : "new File(root, \"dir1\").getPath()",
      "info" : "MethodInvocation[2138-2193]:MethodInvocation[8644-8676]"
    }, {
      "left" : "myFindTestDirectory",
      "right" : "root",
      "info" : "SimpleName[2164-2183]:SimpleName[8653-8657]"
    }, {
      "left" : "\"first\"",
      "right" : "\"dir1\"",
      "info" : "StringLiteral[2185-2192]:StringLiteral[8659-8665]"
    }, {
      "left" : "myFindTestSecondFile = IoTestUtil.createTestFile(myFindTestDirectory, \"second\");",
      "right" : "myFindTestSecondFile = IoTestUtil.createTestFile(myFindTestDirectory, \"second\");",
      "info" : "ExpressionStatement[2199-2279]:ExpressionStatement[2199-2279]"
    }, {
      "left" : "IoTestUtil.createTestFile(myFindTestDirectory, \"second\")",
      "right" : "new File(root, \"dir1/dir1_link\").getPath()",
      "info" : "MethodInvocation[2222-2278]:MethodInvocation[8678-8720]"
    }, {
      "left" : "myFindTestDirectory",
      "right" : "root",
      "info" : "SimpleName[2248-2267]:SimpleName[8687-8691]"
    }, {
      "left" : "\"second\"",
      "right" : "\"dir1/dir1_link\"",
      "info" : "StringLiteral[2269-2277]:StringLiteral[8693-8709]"
    }, {
      "left" : "@AfterClass",
      "right" : "@AfterClass",
      "info" : "MarkerAnnotation[2287-2298]:MarkerAnnotation[2287-2298]"
    }, {
      "left" : "AfterClass",
      "right" : "assertEquals",
      "info" : "SimpleName[2288-2298]:SimpleName[8838-8850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2301-2307]:Modifier[2301-2307]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2308-2314]:Modifier[2308-2314]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2315-2319]:PrimitiveType[2315-2319]"
    }, {
      "left" : "tearDown",
      "right" : "tearDown",
      "info" : "SimpleName[2320-2328]:SimpleName[2320-2328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2331-2417]:Block[2331-2417]"
    }, {
      "left" : "if (myTempDirectory != null)",
      "right" : "if (myTempDirectory != null)",
      "info" : "IfStatement[2337-2413]:IfStatement[2337-2413]"
    }, {
      "left" : "myTempDirectory",
      "right" : "root",
      "info" : "SimpleName[2341-2356]:SimpleName[8851-8855]"
    }, {
      "left" : "myTempDirectory != null",
      "right" : "root + \"/dir1/dir2_link\"",
      "info" : "InfixExpression[2341-2364]:InfixExpression[8851-8875]"
    }, {
      "left" : "!=",
      "right" : "+",
      "info" : "INFIX_EXPRESSION_OPERATOR[2357-2359]:INFIX_EXPRESSION_OPERATOR[8856-8857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2366-2413]:Block[2366-2413]"
    }, {
      "left" : "FileUtil.delete(myTempDirectory);",
      "right" : "FileUtil.delete(myTempDirectory);",
      "info" : "ExpressionStatement[2374-2407]:ExpressionStatement[2374-2407]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[2374-2382]:METHOD_INVOCATION_RECEIVER[8877-8885]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[2421-2426]:MarkerAnnotation[2421-2426]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2429-2435]:Modifier[2429-2435]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2436-2440]:PrimitiveType[2436-2440]"
    }, {
      "left" : "testProcessSimple",
      "right" : "testProcessSimple",
      "info" : "SimpleName[2441-2458]:SimpleName[2441-2458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2461-3110]:Block[2461-3110]"
    }, {
      "left" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "right" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "info" : "VariableDeclarationStatement[2467-2534]:VariableDeclarationStatement[2467-2534]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    });",
      "right" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    });",
      "info" : "ExpressionStatement[2539-2841]:ExpressionStatement[2539-2841]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    })",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/./\", true)",
      "info" : "MethodInvocation[2539-2840]:MethodInvocation[8877-8936]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[2539-2547]:METHOD_INVOCATION_RECEIVER[9704-9712]"
    }, {
      "left" : "processFilesRecursively",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[2548-2571]:SimpleName[8886-8901]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[2610-2614]:SimpleType[8535-8539]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2626-2635]:MarkerAnnotation[2626-2635]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2642-2648]:Modifier[2642-2648]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2649-2656]:PrimitiveType[2649-2656]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2657-2664]:SimpleName[2657-2664]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[2665-2674]:SingleVariableDeclaration[2665-2674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2676-2833]:Block[2676-2833]"
    }, {
      "left" : "Integer integer = result.get(file.getName());",
      "right" : "Integer integer = result.get(file.getName());",
      "info" : "VariableDeclarationStatement[2686-2731]:VariableDeclarationStatement[2686-2731]"
    }, {
      "left" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "right" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "info" : "ExpressionStatement[2740-2804]:ExpressionStatement[2740-2804]"
    }, {
      "left" : "integer",
      "right" : "root",
      "info" : "SimpleName[2790-2797]:SimpleName[8902-8906]"
    }, {
      "left" : "integer + 1",
      "right" : "root + \"/dir1/dir2_link/./\"",
      "info" : "InfixExpression[2790-2801]:InfixExpression[8902-8929]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2813-2825]:ReturnStatement[2813-2825]"
    }, {
      "left" : "true",
      "right" : "true",
      "info" : "BooleanLiteral[2820-2824]:BooleanLiteral[8931-8935]"
    }, {
      "left" : "assertEquals(6, result.size());",
      "right" : "assertEquals(6, result.size());",
      "info" : "ExpressionStatement[2847-2878]:ExpressionStatement[2847-2878]"
    }, {
      "left" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "right" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "info" : "ExpressionStatement[2883-2956]:ExpressionStatement[2883-2956]"
    }, {
      "left" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "right" : "assertEquals(root + \"/dir1/dir2_link\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/../\", true));",
      "info" : "ExpressionStatement[2883-2956]:ExpressionStatement[8943-9049]"
    }, {
      "left" : "result",
      "right" : "FileUtil",
      "info" : "SimpleName[2899-2905]:SimpleName[8982-8990]"
    }, {
      "left" : "result.get(myVisitorTestDirectory.getName())",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/../\", true)",
      "info" : "MethodInvocation[2899-2943]:MethodInvocation[8982-9047]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[2906-2909]:SimpleName[8991-9006]"
    }, {
      "left" : "myVisitorTestDirectory",
      "right" : "root",
      "info" : "SimpleName[2910-2932]:SimpleName[9007-9011]"
    }, {
      "left" : "assertEquals(3, result.get(\"1\").intValue());",
      "right" : "assertEquals(3, result.get(\"1\").intValue());",
      "info" : "ExpressionStatement[2961-3005]:ExpressionStatement[2961-3005]"
    }, {
      "left" : "assertEquals(3, result.get(\"1\").intValue());",
      "right" : "assertEquals(root + \"/dir1/dir2_link/dir3\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/dir4/../\", true));",
      "info" : "ExpressionStatement[2961-3005]:ExpressionStatement[9054-9170]"
    }, {
      "left" : "result",
      "right" : "FileUtil",
      "info" : "SimpleName[2977-2983]:SimpleName[9098-9106]"
    }, {
      "left" : "result.get(\"1\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/dir4/../\", true)",
      "info" : "MethodInvocation[2977-2992]:MethodInvocation[9098-9168]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[2984-2987]:SimpleName[9107-9122]"
    }, {
      "left" : "\"1\"",
      "right" : "\"/dir1/dir2_link/dir3/dir4/../\"",
      "info" : "StringLiteral[2988-2991]:StringLiteral[9130-9161]"
    }, {
      "left" : "assertEquals(3, result.get(\"2\").intValue());",
      "right" : "assertEquals(3, result.get(\"2\").intValue());",
      "info" : "ExpressionStatement[3010-3054]:ExpressionStatement[3010-3054]"
    }, {
      "left" : "assertEquals(3, result.get(\"2\").intValue());",
      "right" : "assertEquals(root + \"/dir1/dir2_link\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/dir4/../../\", true));",
      "info" : "ExpressionStatement[3010-3054]:ExpressionStatement[9175-9289]"
    }, {
      "left" : "result",
      "right" : "FileUtil",
      "info" : "SimpleName[3026-3032]:SimpleName[9214-9222]"
    }, {
      "left" : "result.get(\"2\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/dir4/../../\", true)",
      "info" : "MethodInvocation[3026-3041]:MethodInvocation[9214-9287]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[3033-3036]:SimpleName[9223-9238]"
    }, {
      "left" : "\"2\"",
      "right" : "\"/dir1/dir2_link/dir3/dir4/../../\"",
      "info" : "StringLiteral[3037-3040]:StringLiteral[9246-9280]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "right" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "info" : "ExpressionStatement[3059-3106]:ExpressionStatement[3059-3106]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[3059-3071]:SimpleName[9294-9306]"
    }, {
      "left" : "result",
      "right" : "root",
      "info" : "SimpleName[3075-3081]:SimpleName[9307-9311]"
    }, {
      "left" : "\"dir1\"",
      "right" : "\"/dir1/dir2_link\"",
      "info" : "StringLiteral[3086-3092]:StringLiteral[9314-9331]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3114-3119]:MarkerAnnotation[3114-3119]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3122-3128]:Modifier[3122-3128]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3129-3133]:PrimitiveType[3129-3133]"
    }, {
      "left" : "testProcessStops",
      "right" : "testProcessStops",
      "info" : "SimpleName[3134-3150]:SimpleName[3134-3150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3153-3423]:Block[3153-3423]"
    }, {
      "left" : "final int[] cnt = new int[]{0};",
      "right" : "final int[] cnt = new int[]{0};",
      "info" : "VariableDeclarationStatement[3159-3190]:VariableDeclarationStatement[3159-3190]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        ++cnt[0];\n        return false;\n      }\n    });",
      "right" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        ++cnt[0];\n        return false;\n      }\n    });",
      "info" : "ExpressionStatement[3195-3389]:ExpressionStatement[3195-3389]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        ++cnt[0];\n        return false;\n      }\n    })",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/../dir1/dir2_link/dir3/../\", true)",
      "info" : "MethodInvocation[3195-3388]:MethodInvocation[9333-9406]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[3195-3203]:METHOD_INVOCATION_RECEIVER[11559-11567]"
    }, {
      "left" : "processFilesRecursively",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[3204-3227]:SimpleName[9342-9357]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[3266-3270]:SimpleType[8391-8395]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3282-3291]:MarkerAnnotation[3282-3291]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3298-3304]:Modifier[3298-3304]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3305-3312]:PrimitiveType[3305-3312]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3313-3320]:SimpleName[3313-3320]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[3321-3330]:SingleVariableDeclaration[3321-3330]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[3321-3325]:SimpleType[8496-8500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3332-3381]:Block[3332-3381]"
    }, {
      "left" : "++cnt[0];",
      "right" : "++cnt[0];",
      "info" : "ExpressionStatement[3342-3351]:ExpressionStatement[3342-3351]"
    }, {
      "left" : "cnt",
      "right" : "root",
      "info" : "SimpleName[3344-3347]:SimpleName[9358-9362]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3360-3373]:ReturnStatement[3360-3373]"
    }, {
      "left" : "false",
      "right" : "true",
      "info" : "BooleanLiteral[3367-3372]:BooleanLiteral[9401-9405]"
    }, {
      "left" : "assertEquals(1, cnt[0]);",
      "right" : "assertEquals(1, cnt[0]);",
      "info" : "ExpressionStatement[3395-3419]:ExpressionStatement[3395-3419]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[3395-3407]:SimpleName[9444-9456]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[3427-3432]:MarkerAnnotation[3427-3432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3435-3441]:Modifier[3435-3441]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3442-3446]:PrimitiveType[3442-3446]"
    }, {
      "left" : "testProcessDirectoryFilter",
      "right" : "testProcessDirectoryFilter",
      "info" : "SimpleName[3447-3473]:SimpleName[3447-3473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3476-4524]:Block[3476-4524]"
    }, {
      "left" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "right" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "info" : "VariableDeclarationStatement[3482-3549]:VariableDeclarationStatement[3482-3549]"
    }, {
      "left" : "result",
      "right" : "root",
      "info" : "SimpleName[3509-3515]:SimpleName[9457-9461]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    }, new Processor<File>() {\n                                       @Override\n                                       public boolean process(File file) {\n                                         return ! \"dir2\".equals(file.getName());\n                                       }\n                                     });",
      "right" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    }, new Processor<File>() {\n                                       @Override\n                                       public boolean process(File file) {\n                                         return ! \"dir2\".equals(file.getName());\n                                       }\n                                     });",
      "info" : "ExpressionStatement[3554-4166]:ExpressionStatement[3554-4166]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    }, new Processor<File>() {\n                                       @Override\n                                       public boolean process(File file) {\n                                         return ! \"dir2\".equals(file.getName());\n                                       }\n                                     })",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/./\", true)",
      "info" : "MethodInvocation[3554-4165]:MethodInvocation[9483-9542]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[3554-3562]:METHOD_INVOCATION_RECEIVER[11752-11760]"
    }, {
      "left" : "processFilesRecursively",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[3563-3586]:SimpleName[9492-9507]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[3625-3629]:SimpleType[8682-8686]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3641-3650]:MarkerAnnotation[3641-3650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3657-3663]:Modifier[3657-3663]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3664-3671]:PrimitiveType[3664-3671]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3672-3679]:SimpleName[3672-3679]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[3680-3689]:SingleVariableDeclaration[3680-3689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3691-3848]:Block[3691-3848]"
    }, {
      "left" : "Integer integer = result.get(file.getName());",
      "right" : "Integer integer = result.get(file.getName());",
      "info" : "VariableDeclarationStatement[3701-3746]:VariableDeclarationStatement[3701-3746]"
    }, {
      "left" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "right" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "info" : "ExpressionStatement[3755-3819]:ExpressionStatement[3755-3819]"
    }, {
      "left" : "integer",
      "right" : "root",
      "info" : "SimpleName[3805-3812]:SimpleName[9508-9512]"
    }, {
      "left" : "integer + 1",
      "right" : "root + \"/dir1/dir1_link/./\"",
      "info" : "InfixExpression[3805-3816]:InfixExpression[9508-9535]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3828-3840]:ReturnStatement[3828-3840]"
    }, {
      "left" : "true",
      "right" : "true",
      "info" : "BooleanLiteral[3835-3839]:BooleanLiteral[9537-9541]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[3870-3874]:SimpleType[8648-8652]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3919-3928]:MarkerAnnotation[3919-3928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3968-3974]:Modifier[3968-3974]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3975-3982]:PrimitiveType[3975-3982]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[3983-3990]:SimpleName[3983-3990]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[3991-4000]:SingleVariableDeclaration[3991-4000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4002-4125]:Block[4002-4125]"
    }, {
      "left" : "return ! \"dir2\".equals(file.getName());",
      "right" : "return ! \"dir2\".equals(file.getName());",
      "info" : "ReturnStatement[4045-4084]:ReturnStatement[4045-4084]"
    }, {
      "left" : "assertEquals(5, result.size());",
      "right" : "assertEquals(5, result.size());",
      "info" : "ExpressionStatement[4172-4203]:ExpressionStatement[4172-4203]"
    }, {
      "left" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "right" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "info" : "ExpressionStatement[4208-4281]:ExpressionStatement[4208-4281]"
    }, {
      "left" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "right" : "assertEquals(root + \"/dir1/dir1_link\", FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir2/../\", true));",
      "info" : "ExpressionStatement[4208-4281]:ExpressionStatement[9549-9655]"
    }, {
      "left" : "result",
      "right" : "FileUtil",
      "info" : "SimpleName[4224-4230]:SimpleName[9588-9596]"
    }, {
      "left" : "result.get(myVisitorTestDirectory.getName())",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir2/../\", true)",
      "info" : "MethodInvocation[4224-4268]:MethodInvocation[9588-9653]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4231-4234]:SimpleName[9597-9612]"
    }, {
      "left" : "myVisitorTestDirectory",
      "right" : "root",
      "info" : "SimpleName[4235-4257]:SimpleName[9613-9617]"
    }, {
      "left" : "assertEquals(1, result.get(\"1\").intValue());",
      "right" : "assertEquals(1, result.get(\"1\").intValue());",
      "info" : "ExpressionStatement[4286-4330]:ExpressionStatement[4286-4330]"
    }, {
      "left" : "assertEquals(1, result.get(\"1\").intValue());",
      "right" : "assertEquals(root + \"/dir1/dir1_link/dir2\", FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir2/dir3/../\", true));",
      "info" : "ExpressionStatement[4286-4330]:ExpressionStatement[9660-9776]"
    }, {
      "left" : "result.get(\"1\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir2/dir3/../\", true)",
      "info" : "MethodInvocation[4302-4317]:MethodInvocation[9704-9774]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4309-4312]:SimpleName[9713-9728]"
    }, {
      "left" : "\"1\"",
      "right" : "\"/dir1/dir1_link/dir2/dir3/../\"",
      "info" : "StringLiteral[4313-4316]:StringLiteral[9736-9767]"
    }, {
      "left" : "assertEquals(1, result.get(\"2\").intValue());",
      "right" : "assertEquals(1, result.get(\"2\").intValue());",
      "info" : "ExpressionStatement[4335-4379]:ExpressionStatement[4335-4379]"
    }, {
      "left" : "assertEquals(1, result.get(\"2\").intValue());",
      "right" : "assertEquals(root + \"/dir1/dir1_link\", FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir2/dir3/../../\", true));",
      "info" : "ExpressionStatement[4335-4379]:ExpressionStatement[9781-9895]"
    }, {
      "left" : "result",
      "right" : "FileUtil",
      "info" : "SimpleName[4351-4357]:SimpleName[9820-9828]"
    }, {
      "left" : "result.get(\"2\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir2/dir3/../../\", true)",
      "info" : "MethodInvocation[4351-4366]:MethodInvocation[9820-9893]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4358-4361]:SimpleName[9829-9844]"
    }, {
      "left" : "\"2\"",
      "right" : "\"/dir1/dir1_link/dir2/dir3/../../\"",
      "info" : "StringLiteral[4362-4365]:StringLiteral[9852-9886]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "right" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "info" : "ExpressionStatement[4384-4431]:ExpressionStatement[4384-4431]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "right" : "assertEquals(root + \"/dir1/dir1_link\", FileUtil.toCanonicalPath(root + \"/dir1/../dir1/dir1_link/dir2/../\", true));",
      "info" : "ExpressionStatement[4384-4431]:ExpressionStatement[9900-10014]"
    }, {
      "left" : "result.get(\"dir1\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/../dir1/dir1_link/dir2/../\", true)",
      "info" : "MethodInvocation[4400-4418]:MethodInvocation[9939-10012]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4407-4410]:SimpleName[9948-9963]"
    }, {
      "left" : "\"dir1\"",
      "right" : "\"/dir1/../dir1/dir1_link/dir2/../\"",
      "info" : "StringLiteral[4411-4417]:StringLiteral[9971-10005]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir2\").intValue());",
      "right" : "assertEquals(1, result.get(\"dir2\").intValue());",
      "info" : "ExpressionStatement[4436-4483]:ExpressionStatement[4436-4483]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir2\").intValue());",
      "right" : "assertEquals(root + \"/dir1\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/../\", true));",
      "info" : "ExpressionStatement[4436-4483]:ExpressionStatement[10118-10209]"
    }, {
      "left" : "result",
      "right" : "FileUtil",
      "info" : "SimpleName[4452-4458]:SimpleName[10147-10155]"
    }, {
      "left" : "result.get(\"dir2\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/../\", true)",
      "info" : "MethodInvocation[4452-4470]:MethodInvocation[10147-10207]"
    }, {
      "left" : "get",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4459-4462]:SimpleName[10156-10171]"
    }, {
      "left" : "\"dir2\"",
      "right" : "\"/dir1/dir2_link/../\"",
      "info" : "StringLiteral[4463-4469]:StringLiteral[10179-10200]"
    }, {
      "left" : "assertNull(result.get(\"dir21\"));",
      "right" : "assertNull(result.get(\"dir21\"));",
      "info" : "ExpressionStatement[4488-4520]:ExpressionStatement[4488-4520]"
    }, {
      "left" : "assertNull",
      "right" : "assertEquals",
      "info" : "SimpleName[4488-4498]:SimpleName[10214-10226]"
    }, {
      "left" : "result",
      "right" : "root",
      "info" : "SimpleName[4499-4505]:SimpleName[10227-10231]"
    }, {
      "left" : "\"dir21\"",
      "right" : "\"/dir1/dir2\"",
      "info" : "StringLiteral[4510-4517]:StringLiteral[10234-10246]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4528-4533]:MarkerAnnotation[4528-4533]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4536-4542]:Modifier[4536-4542]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4543-4547]:PrimitiveType[4543-4547]"
    }, {
      "left" : "nonExistingFileInNonExistentDirectory",
      "right" : "nonExistingFileInNonExistentDirectory",
      "info" : "SimpleName[4548-4585]:SimpleName[4548-4585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4588-4701]:Block[4588-4701]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(\"123\", \"zero\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(\"123\", \"zero\");",
      "info" : "VariableDeclarationStatement[4594-4655]:VariableDeclarationStatement[4594-4655]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[4608-4616]:METHOD_INVOCATION_RECEIVER[11793-11801]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertTrue(StringUtil.isEmpty(path));",
      "info" : "ExpressionStatement[4660-4697]:ExpressionStatement[4660-4697]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4705-4710]:MarkerAnnotation[4705-4710]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4713-4719]:Modifier[4713-4719]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4720-4724]:PrimitiveType[4720-4724]"
    }, {
      "left" : "nonExistingFileInDirectory",
      "right" : "nonExistingFileInDirectory",
      "info" : "SimpleName[4725-4751]:SimpleName[4725-4751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4754-4899]:Block[4754-4899]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"zero\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"zero\");",
      "info" : "VariableDeclarationStatement[4760-4853]:VariableDeclarationStatement[4760-4853]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"zero\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/../dir2\", true)",
      "info" : "MethodInvocation[4774-4852]:MethodInvocation[10248-10312]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[4774-4782]:METHOD_INVOCATION_RECEIVER[11695-11703]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4783-4805]:SimpleName[10257-10272]"
    }, {
      "left" : "myFindTestDirectory",
      "right" : "root",
      "info" : "SimpleName[4806-4825]:SimpleName[10273-10277]"
    }, {
      "left" : "\"zero\"",
      "right" : "\"/dir1/dir2_link/../dir2\"",
      "info" : "StringLiteral[4845-4851]:StringLiteral[10280-10305]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertTrue(StringUtil.isEmpty(path));",
      "info" : "ExpressionStatement[4858-4895]:ExpressionStatement[4858-4895]"
    }, {
      "left" : "assertTrue",
      "right" : "assertEquals",
      "info" : "SimpleName[4858-4868]:SimpleName[10319-10331]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertEquals(root + \"/dir1/dir2\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/../../dir1/dir2\", true));",
      "info" : "ExpressionStatement[4858-4895]:ExpressionStatement[10319-10427]"
    }, {
      "left" : "StringUtil",
      "right" : "FileUtil",
      "info" : "SimpleName[4869-4879]:SimpleName[10353-10361]"
    }, {
      "left" : "isEmpty",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[4880-4887]:SimpleName[10362-10377]"
    }, {
      "left" : "path",
      "right" : "root",
      "info" : "SimpleName[4888-4892]:SimpleName[10378-10382]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[4903-4908]:MarkerAnnotation[4903-4908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4911-4917]:Modifier[4911-4917]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4918-4922]:PrimitiveType[4918-4922]"
    }, {
      "left" : "nonExistingFile",
      "right" : "nonExistingFile",
      "info" : "SimpleName[4923-4938]:SimpleName[4923-4938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-5125]:Block[4941-5125]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath() + \"123\", myFindTestFirstFile.getName() + \"123\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath() + \"123\", myFindTestFirstFile.getName() + \"123\");",
      "info" : "VariableDeclarationStatement[4947-5079]:VariableDeclarationStatement[4947-5079]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath() + \"123\", myFindTestFirstFile.getName() + \"123\")",
      "right" : "assertEquals(root + \"/dir1/dir2\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/../../dir2\", true))",
      "info" : "MethodInvocation[4961-5078]:MethodInvocation[10432-10539]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[4961-4969]:METHOD_INVOCATION_RECEIVER[10700-10708]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "root",
      "info" : "SimpleName[4993-5012]:SimpleName[10445-10449]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "root",
      "info" : "SimpleName[4993-5012]:SimpleName[11392-11396]"
    }, {
      "left" : "myFindTestFirstFile.getAbsolutePath() + \"123\"",
      "right" : "root + \"/dir1/../dir1/dir1_link/../dir1\"",
      "info" : "InfixExpression[4993-5038]:InfixExpression[11392-11432]"
    }, {
      "left" : "\"123\"",
      "right" : "\"/dir1/dir2\"",
      "info" : "StringLiteral[5033-5038]:StringLiteral[10452-10464]"
    }, {
      "left" : "\"123\"",
      "right" : "\"/dir1/../dir1/dir1_link/../dir1\"",
      "info" : "StringLiteral[5033-5038]:StringLiteral[11399-11432]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[5040-5059]:METHOD_INVOCATION_RECEIVER[10466-10474]"
    }, {
      "left" : "getName",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[5060-5067]:SimpleName[10475-10490]"
    }, {
      "left" : "+",
      "right" : "+",
      "info" : "INFIX_EXPRESSION_OPERATOR[5070-5071]:INFIX_EXPRESSION_OPERATOR[10496-10497]"
    }, {
      "left" : "\"123\"",
      "right" : "\"/dir1/dir2_link/dir3/../../dir2\"",
      "info" : "StringLiteral[5072-5077]:StringLiteral[10498-10531]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertTrue(StringUtil.isEmpty(path));",
      "info" : "ExpressionStatement[5084-5121]:ExpressionStatement[5084-5121]"
    }, {
      "left" : "assertTrue",
      "right" : "assertEquals",
      "info" : "SimpleName[5084-5094]:SimpleName[10545-10557]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertEquals(root + \"/dir1/dir2\", FileUtil.toCanonicalPath(root + \"/dir1/dir2_link/dir3/../../../dir1/dir2\", true));",
      "info" : "ExpressionStatement[5084-5121]:ExpressionStatement[10545-10661]"
    }, {
      "left" : "StringUtil",
      "right" : "FileUtil",
      "info" : "SimpleName[5095-5105]:SimpleName[10579-10587]"
    }, {
      "left" : "isEmpty",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[5106-5113]:SimpleName[10588-10603]"
    }, {
      "left" : "path",
      "right" : "root",
      "info" : "SimpleName[5114-5118]:SimpleName[10604-10608]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5129-5134]:MarkerAnnotation[5129-5134]"
    }, {
      "left" : "Test",
      "right" : "assertEquals",
      "info" : "SimpleName[5130-5134]:SimpleName[10666-10678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5137-5143]:Modifier[5137-5143]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5144-5148]:PrimitiveType[5144-5148]"
    }, {
      "left" : "existingFileInDirectory",
      "right" : "existingFileInDirectory",
      "info" : "SimpleName[5149-5172]:SimpleName[5149-5172]"
    }, {
      "left" : "existingFileInDirectory",
      "right" : "root",
      "info" : "SimpleName[5149-5172]:SimpleName[10679-10683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5175-5342]:Block[5175-5342]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\");",
      "info" : "VariableDeclarationStatement[5181-5275]:VariableDeclarationStatement[5181-5275]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/../dir1/dir2_link/../dir2\", true)",
      "info" : "MethodInvocation[5195-5274]:MethodInvocation[10700-10772]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[5195-5203]:METHOD_INVOCATION_RECEIVER[11598-11606]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[5204-5226]:SimpleName[10709-10724]"
    }, {
      "left" : "myFindTestDirectory",
      "right" : "root",
      "info" : "SimpleName[5227-5246]:SimpleName[10725-10729]"
    }, {
      "left" : "\"first\"",
      "right" : "\"/dir1/../dir1/dir2_link/../dir2\"",
      "info" : "StringLiteral[5266-5273]:StringLiteral[10732-10765]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5280-5338]:ExpressionStatement[5280-5338]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[5280-5292]:SimpleName[10810-10822]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "root",
      "info" : "SimpleName[5299-5318]:SimpleName[10823-10827]"
    }, {
      "left" : "myFindTestFirstFile.getAbsolutePath()",
      "right" : "root.getPath()",
      "info" : "MethodInvocation[5299-5336]:MethodInvocation[10823-10837]"
    }, {
      "left" : "getAbsolutePath",
      "right" : "getPath",
      "info" : "SimpleName[5319-5334]:SimpleName[10828-10835]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5346-5351]:MarkerAnnotation[5346-5351]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5354-5360]:Modifier[5354-5360]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5361-5365]:PrimitiveType[5361-5365]"
    }, {
      "left" : "existingFile",
      "right" : "existingFile",
      "info" : "SimpleName[5366-5378]:SimpleName[5366-5378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5381-5548]:Block[5381-5548]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\");",
      "info" : "VariableDeclarationStatement[5387-5481]:VariableDeclarationStatement[5387-5481]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/../\", true)",
      "info" : "MethodInvocation[5401-5480]:MethodInvocation[10839-10899]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[5410-5432]:SimpleName[10848-10863]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "root",
      "info" : "SimpleName[5433-5452]:SimpleName[10864-10868]"
    }, {
      "left" : "\"first\"",
      "right" : "\"/dir1/dir1_link/../\"",
      "info" : "StringLiteral[5472-5479]:StringLiteral[10871-10892]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5486-5544]:ExpressionStatement[5486-5544]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[5486-5498]:SimpleName[10906-10918]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5552-5557]:MarkerAnnotation[5552-5557]"
    }, {
      "left" : "Test",
      "right" : "root",
      "info" : "SimpleName[5553-5557]:SimpleName[10919-10923]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5560-5566]:Modifier[5560-5566]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5567-5571]:PrimitiveType[5567-5571]"
    }, {
      "left" : "twoFilesOrderInDirectory",
      "right" : "twoFilesOrderInDirectory",
      "info" : "SimpleName[5572-5596]:SimpleName[5572-5596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5599-5776]:Block[5599-5776]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\", \"second\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\", \"second\");",
      "info" : "VariableDeclarationStatement[5605-5709]:VariableDeclarationStatement[5605-5709]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\", \"second\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/../dir1\", true)",
      "info" : "MethodInvocation[5619-5708]:MethodInvocation[10935-10999]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[5628-5650]:SimpleName[10944-10959]"
    }, {
      "left" : "myFindTestDirectory",
      "right" : "root",
      "info" : "SimpleName[5651-5670]:SimpleName[10960-10964]"
    }, {
      "left" : "\"first\"",
      "right" : "\"/dir1/dir1_link/../dir1\"",
      "info" : "StringLiteral[5690-5697]:StringLiteral[10967-10992]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5714-5772]:ExpressionStatement[5714-5772]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[5714-5726]:SimpleName[11006-11018]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5780-5785]:MarkerAnnotation[5780-5785]"
    }, {
      "left" : "Test",
      "right" : "root",
      "info" : "SimpleName[5781-5785]:SimpleName[11019-11023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5788-5794]:Modifier[5788-5794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5795-5799]:PrimitiveType[5795-5799]"
    }, {
      "left" : "twoFilesOrderInDirectory2",
      "right" : "twoFilesOrderInDirectory2",
      "info" : "SimpleName[5800-5825]:SimpleName[5800-5825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5828-6006]:Block[5828-6006]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"second\", \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"second\", \"first\");",
      "info" : "VariableDeclarationStatement[5834-5938]:VariableDeclarationStatement[5834-5938]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"second\", \"first\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/../../root/dir1\", true)",
      "info" : "MethodInvocation[5848-5937]:MethodInvocation[11035-11107]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[5857-5879]:SimpleName[11044-11059]"
    }, {
      "left" : "myFindTestDirectory",
      "right" : "root",
      "info" : "SimpleName[5880-5899]:SimpleName[11060-11064]"
    }, {
      "left" : "\"first\"",
      "right" : "\"/dir1/dir1_link/../../root/dir1\"",
      "info" : "StringLiteral[5929-5936]:StringLiteral[11067-11100]"
    }, {
      "left" : "assertEquals(path, myFindTestSecondFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestSecondFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5943-6002]:ExpressionStatement[5943-6002]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[5943-5955]:SimpleName[11114-11126]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6010-6015]:MarkerAnnotation[6010-6015]"
    }, {
      "left" : "Test",
      "right" : "root",
      "info" : "SimpleName[6011-6015]:SimpleName[11127-11131]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6018-6024]:Modifier[6018-6024]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6025-6029]:PrimitiveType[6025-6029]"
    }, {
      "left" : "twoFilesOrder",
      "right" : "twoFilesOrder",
      "info" : "SimpleName[6030-6043]:SimpleName[6030-6043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6046-6223]:Block[6046-6223]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\", \"second\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\", \"second\");",
      "info" : "VariableDeclarationStatement[6052-6156]:VariableDeclarationStatement[6052-6156]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\", \"second\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir3/../../dir1\", true)",
      "info" : "MethodInvocation[6066-6155]:MethodInvocation[11143-11215]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[6066-6074]:METHOD_INVOCATION_RECEIVER[11251-11259]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[6075-6097]:SimpleName[11152-11167]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "root",
      "info" : "SimpleName[6098-6117]:SimpleName[11168-11172]"
    }, {
      "left" : "\"first\"",
      "right" : "\"/dir1/dir1_link/dir3/../../dir1\"",
      "info" : "StringLiteral[6137-6144]:StringLiteral[11175-11208]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[6161-6219]:ExpressionStatement[6161-6219]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[6161-6173]:SimpleName[11222-11234]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6227-6232]:MarkerAnnotation[6227-6232]"
    }, {
      "left" : "Test",
      "right" : "root",
      "info" : "SimpleName[6228-6232]:SimpleName[11235-11239]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6235-6241]:Modifier[6235-6241]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6242-6246]:PrimitiveType[6242-6246]"
    }, {
      "left" : "twoFilesOrder2",
      "right" : "twoFilesOrder2",
      "info" : "SimpleName[6247-6261]:SimpleName[6247-6261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6264-6441]:Block[6264-6441]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"second\", \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"second\", \"first\");",
      "info" : "VariableDeclarationStatement[6270-6374]:VariableDeclarationStatement[6270-6374]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[6284-6292]:METHOD_INVOCATION_RECEIVER[11143-11151]"
    }, {
      "left" : "FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"second\", \"first\")",
      "right" : "FileUtil.toCanonicalPath(root + \"/dir1/dir1_link/dir3/../../../root/dir1\", true)",
      "info" : "MethodInvocation[6284-6373]:MethodInvocation[11251-11331]"
    }, {
      "left" : "findFileInProvidedPath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[6293-6315]:SimpleName[11260-11275]"
    }, {
      "left" : "myFindTestFirstFile",
      "right" : "root",
      "info" : "SimpleName[6316-6335]:SimpleName[11276-11280]"
    }, {
      "left" : "\"first\"",
      "right" : "\"/dir1/dir1_link/dir3/../../../root/dir1\"",
      "info" : "StringLiteral[6365-6372]:StringLiteral[11283-11324]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[6379-6437]:ExpressionStatement[6379-6437]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(root + \"/dir1\", FileUtil.toCanonicalPath(root + \"/dir1/../dir1/dir1_link/../dir1\", true));",
      "info" : "ExpressionStatement[6379-6437]:ExpressionStatement[11338-11441]"
    }, {
      "left" : "path",
      "right" : "root",
      "info" : "SimpleName[6392-6396]:SimpleName[11351-11355]"
    }, {
      "left" : "getAbsolutePath",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[6418-6433]:SimpleName[11376-11391]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6445-6450]:MarkerAnnotation[6445-6450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6453-6459]:Modifier[6453-6459]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6460-6464]:PrimitiveType[6460-6464]"
    }, {
      "left" : "testRepeatableOperation",
      "right" : "testRepeatableOperation",
      "info" : "SimpleName[6465-6488]:SimpleName[6465-6488]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6498-6509]:SimpleType[6498-6509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6510-7571]:Block[6510-7571]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[6516-6524]:Modifier[6516-6524]"
    }, {
      "left" : "abstract class CountableIOOperation implements FileUtilRt.RepeatableIOOperation<Boolean, IOException> {\n      private int count = 0;\n\n      @Override\n      public Boolean execute(boolean lastAttempt) throws IOException {\n        count++;\n        return stop(lastAttempt) ? true : null;\n      }\n\n      protected abstract boolean stop(boolean lastAttempt);\n    }",
      "right" : "abstract class CountableIOOperation implements FileUtilRt.RepeatableIOOperation<Boolean, IOException> {\n      private int count = 0;\n\n      @Override\n      public Boolean execute(boolean lastAttempt) throws IOException {\n        count++;\n        return stop(lastAttempt) ? true : null;\n      }\n\n      protected abstract boolean stop(boolean lastAttempt);\n    }",
      "info" : "TypeDeclarationStatement[6516-6876]:TypeDeclarationStatement[6516-6876]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6525-6530]:TYPE_DECLARATION_KIND[6525-6530]"
    }, {
      "left" : "CountableIOOperation",
      "right" : "CountableIOOperation",
      "info" : "SimpleName[6531-6551]:SimpleName[6531-6551]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6656-6665]:MarkerAnnotation[6656-6665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6672-6678]:Modifier[6672-6678]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[6679-6686]:SimpleType[6679-6686]"
    }, {
      "left" : "execute",
      "right" : "execute",
      "info" : "SimpleName[6687-6694]:SimpleName[6687-6694]"
    }, {
      "left" : "boolean lastAttempt",
      "right" : "boolean lastAttempt",
      "info" : "SingleVariableDeclaration[6695-6714]:SingleVariableDeclaration[6695-6714]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6723-6734]:SimpleType[6723-6734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6735-6809]:Block[6735-6809]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[6745-6753]:ExpressionStatement[6745-6753]"
    }, {
      "left" : "return stop(lastAttempt) ? true : null;",
      "right" : "return stop(lastAttempt) ? true : null;",
      "info" : "ReturnStatement[6762-6801]:ReturnStatement[6762-6801]"
    }, {
      "left" : "true",
      "right" : "true",
      "info" : "BooleanLiteral[6789-6793]:BooleanLiteral[11434-11438]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6817-6826]:Modifier[6817-6826]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[6827-6835]:Modifier[6827-6835]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6836-6843]:PrimitiveType[6836-6843]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[6844-6848]:SimpleName[6844-6848]"
    }, {
      "left" : "boolean lastAttempt",
      "right" : "boolean lastAttempt",
      "info" : "SingleVariableDeclaration[6849-6868]:SingleVariableDeclaration[6849-6868]"
    }, {
      "left" : "CountableIOOperation successful = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return true; }\n    };",
      "right" : "CountableIOOperation successful = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return true; }\n    };",
      "info" : "VariableDeclarationStatement[6882-7028]:VariableDeclarationStatement[6882-7028]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6951-6960]:MarkerAnnotation[6951-6960]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6961-6970]:Modifier[6961-6970]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6971-6978]:PrimitiveType[6971-6978]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[6979-6983]:SimpleName[6979-6983]"
    }, {
      "left" : "boolean lastAttempt",
      "right" : "boolean lastAttempt",
      "info" : "SingleVariableDeclaration[6984-7003]:SingleVariableDeclaration[6984-7003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7005-7021]:Block[7005-7021]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7007-7019]:ReturnStatement[7007-7019]"
    }, {
      "left" : "FileUtilRt.doIOOperation(successful);",
      "right" : "FileUtilRt.doIOOperation(successful);",
      "info" : "ExpressionStatement[7033-7070]:ExpressionStatement[7033-7070]"
    }, {
      "left" : "assertEquals(1, successful.count);",
      "right" : "assertEquals(1, successful.count);",
      "info" : "ExpressionStatement[7075-7109]:ExpressionStatement[7075-7109]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[7075-7087]:SimpleName[11546-11558]"
    }, {
      "left" : "CountableIOOperation failed = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return false; }\n    };",
      "right" : "CountableIOOperation failed = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return false; }\n    };",
      "info" : "VariableDeclarationStatement[7115-7258]:VariableDeclarationStatement[7115-7258]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7180-7189]:MarkerAnnotation[7180-7189]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7190-7199]:Modifier[7190-7199]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7200-7207]:PrimitiveType[7200-7207]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[7208-7212]:SimpleName[7208-7212]"
    }, {
      "left" : "boolean lastAttempt",
      "right" : "boolean lastAttempt",
      "info" : "SingleVariableDeclaration[7213-7232]:SingleVariableDeclaration[7213-7232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7234-7251]:Block[7234-7251]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7236-7249]:ReturnStatement[7236-7249]"
    }, {
      "left" : "FileUtilRt.doIOOperation(failed);",
      "right" : "FileUtilRt.doIOOperation(failed);",
      "info" : "ExpressionStatement[7263-7296]:ExpressionStatement[7263-7296]"
    }, {
      "left" : "FileUtilRt.doIOOperation(failed)",
      "right" : "FileUtil.toCanonicalPath(\"..\", false)",
      "info" : "MethodInvocation[7263-7295]:MethodInvocation[11559-11596]"
    }, {
      "left" : "doIOOperation",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[7274-7287]:SimpleName[11568-11583]"
    }, {
      "left" : "assertEquals(10, failed.count);",
      "right" : "assertEquals(10, failed.count);",
      "info" : "ExpressionStatement[7301-7332]:ExpressionStatement[7301-7332]"
    }, {
      "left" : "CountableIOOperation lastShot = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return lastAttempt; }\n    };",
      "right" : "CountableIOOperation lastShot = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return lastAttempt; }\n    };",
      "info" : "VariableDeclarationStatement[7338-7489]:VariableDeclarationStatement[7338-7489]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7405-7414]:MarkerAnnotation[7405-7414]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7415-7424]:Modifier[7415-7424]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7425-7432]:PrimitiveType[7425-7432]"
    }, {
      "left" : "stop",
      "right" : "stop",
      "info" : "SimpleName[7433-7437]:SimpleName[7433-7437]"
    }, {
      "left" : "boolean lastAttempt",
      "right" : "boolean lastAttempt",
      "info" : "SingleVariableDeclaration[7438-7457]:SingleVariableDeclaration[7438-7457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7459-7482]:Block[7459-7482]"
    }, {
      "left" : "return lastAttempt;",
      "right" : "return lastAttempt;",
      "info" : "ReturnStatement[7461-7480]:ReturnStatement[7461-7480]"
    }, {
      "left" : "FileUtilRt.doIOOperation(lastShot);",
      "right" : "FileUtilRt.doIOOperation(lastShot);",
      "info" : "ExpressionStatement[7494-7529]:ExpressionStatement[7494-7529]"
    }, {
      "left" : "FileUtilRt.doIOOperation(lastShot)",
      "right" : "FileUtil.toCanonicalPath(\"..\", true)",
      "info" : "MethodInvocation[7494-7528]:MethodInvocation[11598-11634]"
    }, {
      "left" : "doIOOperation",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[7505-7518]:SimpleName[11607-11622]"
    }, {
      "left" : "assertEquals(10, lastShot.count);",
      "right" : "assertEquals(10, lastShot.count);",
      "info" : "ExpressionStatement[7534-7567]:ExpressionStatement[7534-7567]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[7534-7546]:SimpleName[11641-11653]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7575-7580]:MarkerAnnotation[7575-7580]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7575-7580]:MarkerAnnotation[8177-8182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7583-7589]:Modifier[7583-7589]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7590-7594]:PrimitiveType[7590-7594]"
    }, {
      "left" : "testSymlinkDeletion",
      "right" : "testSymlinkDeletion",
      "info" : "SimpleName[7595-7614]:SimpleName[7595-7614]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7624-7633]:SimpleType[7624-7633]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7624-7633]:SimpleType[8239-8248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7634-8168]:Block[7634-8168]"
    }, {
      "left" : "assumeTrue(SystemInfo.isWin7OrNewer || SystemInfo.isUnix);",
      "right" : "assumeTrue(SystemInfo.isWin7OrNewer || SystemInfo.isUnix);",
      "info" : "ExpressionStatement[7640-7698]:ExpressionStatement[7640-7698]"
    }, {
      "left" : "File targetDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_1\");",
      "right" : "File targetDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_1\");",
      "info" : "VariableDeclarationStatement[7704-7782]:VariableDeclarationStatement[7704-7782]"
    }, {
      "left" : "File",
      "right" : "File",
      "info" : "SimpleType[7704-7708]:SimpleType[8309-8313]"
    }, {
      "left" : "IoTestUtil",
      "right" : "IoTestUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[7721-7731]:METHOD_INVOCATION_RECEIVER[8321-8331]"
    }, {
      "left" : "IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_1\")",
      "right" : "FileUtil.toCanonicalPath(\"../\", false)",
      "info" : "MethodInvocation[7721-7781]:MethodInvocation[11654-11692]"
    }, {
      "left" : "createTestDir",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[7732-7745]:SimpleName[11663-11678]"
    }, {
      "left" : "\"link_del_test_1\"",
      "right" : "\"../\"",
      "info" : "StringLiteral[7763-7780]:StringLiteral[11679-11684]"
    }, {
      "left" : "IoTestUtil.createTestFile(targetDir, \"file\");",
      "right" : "IoTestUtil.createTestFile(targetDir, \"file\");",
      "info" : "ExpressionStatement[7787-7832]:ExpressionStatement[7787-7832]"
    }, {
      "left" : "IoTestUtil",
      "right" : "IoTestUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[7787-7797]:METHOD_INVOCATION_RECEIVER[8619-8629]"
    }, {
      "left" : "IoTestUtil.createTestFile(targetDir, \"file\")",
      "right" : "FileUtil.toCanonicalPath(\"../\", true)",
      "info" : "MethodInvocation[7787-7831]:MethodInvocation[11695-11732]"
    }, {
      "left" : "createTestFile",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[7798-7812]:SimpleName[11704-11719]"
    }, {
      "left" : "\"file\"",
      "right" : "\"../\"",
      "info" : "StringLiteral[7824-7830]:StringLiteral[11720-11725]"
    }, {
      "left" : "File linkDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_2\");",
      "right" : "File linkDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_2\");",
      "info" : "VariableDeclarationStatement[7837-7913]:VariableDeclarationStatement[7837-7913]"
    }, {
      "left" : "File",
      "right" : "assertEquals",
      "info" : "SimpleName[7837-7841]:SimpleName[11739-11751]"
    }, {
      "left" : "IoTestUtil.createTestFile(linkDir, \"file\");",
      "right" : "IoTestUtil.createTestFile(linkDir, \"file\");",
      "info" : "ExpressionStatement[7918-7961]:ExpressionStatement[7918-7961]"
    }, {
      "left" : "IoTestUtil",
      "right" : "IoTestUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[7918-7928]:METHOD_INVOCATION_RECEIVER[8467-8477]"
    }, {
      "left" : "IoTestUtil.createTestFile(linkDir, \"file\")",
      "right" : "FileUtil.toCanonicalPath(\"/..\", false)",
      "info" : "MethodInvocation[7918-7960]:MethodInvocation[11752-11790]"
    }, {
      "left" : "createTestFile",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[7929-7943]:SimpleName[11761-11776]"
    }, {
      "left" : "\"file\"",
      "right" : "\"/..\"",
      "info" : "StringLiteral[7953-7959]:StringLiteral[11777-11782]"
    }, {
      "left" : "IoTestUtil.createSymLink(targetDir.getPath(), linkDir.getPath() + \"/link\");",
      "right" : "IoTestUtil.createSymLink(targetDir.getPath(), linkDir.getPath() + \"/link\");",
      "info" : "ExpressionStatement[7966-8041]:ExpressionStatement[7966-8041]"
    }, {
      "left" : "IoTestUtil.createSymLink(targetDir.getPath(), linkDir.getPath() + \"/link\")",
      "right" : "FileUtil.toCanonicalPath(\"/..\", true)",
      "info" : "MethodInvocation[7966-8040]:MethodInvocation[11793-11830]"
    }, {
      "left" : "createSymLink",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[7977-7990]:SimpleName[11802-11817]"
    }, {
      "left" : "\"/link\"",
      "right" : "\"/..\"",
      "info" : "StringLiteral[8032-8039]:StringLiteral[11818-11823]"
    }, {
      "left" : "assertEquals(1, targetDir.list().length);",
      "right" : "assertEquals(1, targetDir.list().length);",
      "info" : "ExpressionStatement[8047-8088]:ExpressionStatement[8047-8088]"
    }, {
      "left" : "assertEquals",
      "right" : "assertEquals",
      "info" : "SimpleName[8047-8059]:SimpleName[11837-11849]"
    }, {
      "left" : "FileUtil.delete(linkDir);",
      "right" : "FileUtil.delete(linkDir);",
      "info" : "ExpressionStatement[8093-8118]:ExpressionStatement[8093-8118]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[8093-8101]:METHOD_INVOCATION_RECEIVER[11654-11662]"
    }, {
      "left" : "FileUtil.delete(linkDir)",
      "right" : "FileUtil.toCanonicalPath(\"/../\", false)",
      "info" : "MethodInvocation[8093-8117]:MethodInvocation[11850-11889]"
    }, {
      "left" : "delete",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[8102-8108]:SimpleName[11859-11874]"
    }, {
      "left" : "assertEquals(1, targetDir.list().length);",
      "right" : "assertEquals(1, targetDir.list().length);",
      "info" : "ExpressionStatement[8123-8164]:ExpressionStatement[8123-8164]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8172-8177]:MarkerAnnotation[11940-11945]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8180-8186]:Modifier[11948-11954]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8187-8191]:PrimitiveType[11955-11959]"
    }, {
      "left" : "testCaseSensitivityDetection",
      "right" : "testCaseSensitivityDetection",
      "info" : "SimpleName[8192-8220]:SimpleName[11960-11988]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8230-8241]:SimpleType[11998-12009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8242-8394]:Block[12010-12162]"
    }, {
      "left" : "String path = myFindTestFirstFile.getPath();",
      "right" : "String path = myFindTestFirstFile.getPath();",
      "info" : "VariableDeclarationStatement[8248-8292]:VariableDeclarationStatement[12016-12060]"
    }, {
      "left" : "assertEquals(SystemInfo.isFileSystemCaseSensitive, FileUtil.isFileSystemCaseSensitive(path));",
      "right" : "assertEquals(SystemInfo.isFileSystemCaseSensitive, FileUtil.isFileSystemCaseSensitive(path));",
      "info" : "ExpressionStatement[8297-8390]:ExpressionStatement[12065-12158]"
    }, {
      "left" : "FileUtil",
      "right" : "FileUtil",
      "info" : "METHOD_INVOCATION_RECEIVER[8348-8356]:METHOD_INVOCATION_RECEIVER[9939-9947]"
    }, {
      "left" : "FileUtil.isFileSystemCaseSensitive(path)",
      "right" : "FileUtil.toCanonicalPath(\"/../\", true)",
      "info" : "MethodInvocation[8348-8388]:MethodInvocation[11892-11930]"
    }, {
      "left" : "isFileSystemCaseSensitive",
      "right" : "toCanonicalPath",
      "info" : "SimpleName[8357-8382]:SimpleName[11901-11916]"
    } ]
  },
  "interFileMappings" : { }
}