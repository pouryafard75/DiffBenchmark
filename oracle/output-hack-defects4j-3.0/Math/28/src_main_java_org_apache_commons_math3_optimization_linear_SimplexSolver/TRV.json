{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final double DEFAULT_EPSILON = 1.0e-6;",
      "right" : "private static final double DEFAULT_EPSILON = 1.0e-6;",
      "info" : "FieldDeclaration[1259-1384]:FieldDeclaration[1259-1384]"
    }, {
      "left" : "private static final int DEFAULT_ULPS = 10;",
      "right" : "private static final int DEFAULT_ULPS = 10;",
      "info" : "FieldDeclaration[1390-1519]:FieldDeclaration[1390-1519]"
    }, {
      "left" : "private final double epsilon;",
      "right" : "private final double epsilon;",
      "info" : "FieldDeclaration[1525-1618]:FieldDeclaration[1525-1618]"
    }, {
      "left" : "private final int maxUlps;",
      "right" : "private final int maxUlps;",
      "info" : "FieldDeclaration[1624-1728]:FieldDeclaration[1624-1728]"
    }, {
      "left" : "public SimplexSolver()",
      "right" : "public SimplexSolver()",
      "info" : "MethodDeclaration[1734-1878]:MethodDeclaration[1734-1878]"
    }, {
      "left" : "public SimplexSolver(final double epsilon, final int maxUlps)",
      "right" : "public SimplexSolver(final double epsilon, final int maxUlps)",
      "info" : "MethodDeclaration[1884-2261]:MethodDeclaration[1884-2261]"
    }, {
      "left" : "private Integer getPivotColumn(SimplexTableau tableau)",
      "right" : "private Integer getPivotColumn(SimplexTableau tableau)",
      "info" : "MethodDeclaration[2267-3026]:MethodDeclaration[2267-3026]"
    }, {
      "left" : "protected void doIteration(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException",
      "right" : "protected void doIteration(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException",
      "info" : "MethodDeclaration[6585-7733]:MethodDeclaration[6732-7880]"
    }, {
      "left" : "protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
      "right" : "protected void solvePhase1(final SimplexTableau tableau)\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
      "info" : "MethodDeclaration[7739-8702]:MethodDeclaration[7886-8849]"
    }, {
      "left" : "public PointValuePair doOptimize()\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
      "right" : "public PointValuePair doOptimize()\n        throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException",
      "info" : "MethodDeclaration[8708-9396]:MethodDeclaration[8855-9543]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1803-1809]:Modifier[1803-1809]"
    }, {
      "left" : "SimplexSolver",
      "right" : "SimplexSolver",
      "info" : "SimpleName[1810-1823]:SimpleName[1810-1823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1826-1878]:Block[1826-1878]"
    }, {
      "left" : "this(DEFAULT_EPSILON, DEFAULT_ULPS);",
      "right" : "this(DEFAULT_EPSILON, DEFAULT_ULPS);",
      "info" : "ConstructorInvocation[1836-1872]:ConstructorInvocation[1836-1872]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2128-2134]:Modifier[2128-2134]"
    }, {
      "left" : "SimplexSolver",
      "right" : "SimplexSolver",
      "info" : "SimpleName[2135-2148]:SimpleName[2135-2148]"
    }, {
      "left" : "final double epsilon",
      "right" : "final double epsilon",
      "info" : "SingleVariableDeclaration[2149-2169]:SingleVariableDeclaration[2149-2169]"
    }, {
      "left" : "final int maxUlps",
      "right" : "final int maxUlps",
      "info" : "SingleVariableDeclaration[2171-2188]:SingleVariableDeclaration[2171-2188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2190-2261]:Block[2190-2261]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[2200-2223]:ExpressionStatement[2200-2223]"
    }, {
      "left" : "this.maxUlps = maxUlps;",
      "right" : "this.maxUlps = maxUlps;",
      "info" : "ExpressionStatement[2232-2255]:ExpressionStatement[2232-2255]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2485-2492]:Modifier[2485-2492]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[2493-2500]:SimpleType[2493-2500]"
    }, {
      "left" : "getPivotColumn",
      "right" : "getPivotColumn",
      "info" : "SimpleName[2501-2515]:SimpleName[2501-2515]"
    }, {
      "left" : "SimplexTableau tableau",
      "right" : "SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[2516-2538]:SingleVariableDeclaration[2516-2538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2540-3026]:Block[2540-3026]"
    }, {
      "left" : "double minValue = 0;",
      "right" : "double minValue = 0;",
      "info" : "VariableDeclarationStatement[2550-2570]:VariableDeclarationStatement[2550-2570]"
    }, {
      "left" : "Integer minPos = null;",
      "right" : "Integer minPos = null;",
      "info" : "VariableDeclarationStatement[2579-2601]:VariableDeclarationStatement[2579-2601]"
    }, {
      "left" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "right" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "info" : "ForStatement[2610-2997]:ForStatement[2610-2997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2692-2997]:Block[2692-2997]"
    }, {
      "left" : "final double entry = tableau.getEntry(0, i);",
      "right" : "final double entry = tableau.getEntry(0, i);",
      "info" : "VariableDeclarationStatement[2706-2750]:VariableDeclarationStatement[2706-2750]"
    }, {
      "left" : "if (entry < minValue)",
      "right" : "if (entry < minValue)",
      "info" : "IfStatement[2888-2987]:IfStatement[2888-2987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2910-2987]:Block[2910-2987]"
    }, {
      "left" : "minValue = entry;",
      "right" : "minValue = entry;",
      "info" : "ExpressionStatement[2928-2945]:ExpressionStatement[2928-2945]"
    }, {
      "left" : "minPos = i;",
      "right" : "minPos = i;",
      "info" : "ExpressionStatement[2962-2973]:ExpressionStatement[2962-2973]"
    }, {
      "left" : "return minPos;",
      "right" : "return minPos;",
      "info" : "ReturnStatement[3006-3020]:ReturnStatement[3006-3020]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6907-6916]:Modifier[7054-7063]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6917-6921]:PrimitiveType[7064-7068]"
    }, {
      "left" : "doIteration",
      "right" : "doIteration",
      "info" : "SimpleName[6922-6933]:SimpleName[7069-7080]"
    }, {
      "left" : "final SimplexTableau tableau",
      "right" : "final SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[6934-6962]:SingleVariableDeclaration[7081-7109]"
    }, {
      "left" : "MaxCountExceededException",
      "right" : "MaxCountExceededException",
      "info" : "SimpleType[6979-7004]:SimpleType[7126-7151]"
    }, {
      "left" : "UnboundedSolutionException",
      "right" : "UnboundedSolutionException",
      "info" : "SimpleType[7006-7032]:SimpleType[7153-7179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7033-7733]:Block[7180-7880]"
    }, {
      "left" : "incrementIterationsCounter();",
      "right" : "incrementIterationsCounter();",
      "info" : "ExpressionStatement[7044-7073]:ExpressionStatement[7191-7220]"
    }, {
      "left" : "Integer pivotCol = getPivotColumn(tableau);",
      "right" : "Integer pivotCol = getPivotColumn(tableau);",
      "info" : "VariableDeclarationStatement[7083-7126]:VariableDeclarationStatement[7230-7273]"
    }, {
      "left" : "Integer pivotRow = getPivotRow(tableau, pivotCol);",
      "right" : "Integer pivotRow = getPivotRow(tableau, pivotCol);",
      "info" : "VariableDeclarationStatement[7135-7185]:VariableDeclarationStatement[7282-7332]"
    }, {
      "left" : "if (pivotRow == null)",
      "right" : "if (pivotRow == null)",
      "info" : "IfStatement[7194-7279]:IfStatement[7341-7426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7216-7279]:Block[7363-7426]"
    }, {
      "left" : "throw new UnboundedSolutionException();",
      "right" : "throw new UnboundedSolutionException();",
      "info" : "ThrowStatement[7230-7269]:ThrowStatement[7377-7416]"
    }, {
      "left" : "double pivotVal = tableau.getEntry(pivotRow, pivotCol);",
      "right" : "double pivotVal = tableau.getEntry(pivotRow, pivotCol);",
      "info" : "VariableDeclarationStatement[7327-7382]:VariableDeclarationStatement[7474-7529]"
    }, {
      "left" : "tableau.divideRow(pivotRow, pivotVal);",
      "right" : "tableau.divideRow(pivotRow, pivotVal);",
      "info" : "ExpressionStatement[7391-7429]:ExpressionStatement[7538-7576]"
    }, {
      "left" : "for (int i = 0; i < tableau.getHeight(); i++)",
      "right" : "for (int i = 0; i < tableau.getHeight(); i++)",
      "info" : "ForStatement[7488-7727]:ForStatement[7635-7874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7534-7727]:Block[7681-7874]"
    }, {
      "left" : "if (i != pivotRow)",
      "right" : "if (i != pivotRow)",
      "info" : "IfStatement[7548-7717]:IfStatement[7695-7864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7567-7717]:Block[7714-7864]"
    }, {
      "left" : "final double multiplier = tableau.getEntry(i, pivotCol);",
      "right" : "final double multiplier = tableau.getEntry(i, pivotCol);",
      "info" : "VariableDeclarationStatement[7585-7641]:VariableDeclarationStatement[7732-7788]"
    }, {
      "left" : "tableau.subtractRow(i, pivotRow, multiplier);",
      "right" : "tableau.subtractRow(i, pivotRow, multiplier);",
      "info" : "ExpressionStatement[7658-7703]:ExpressionStatement[7805-7850]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8114-8123]:Modifier[8261-8270]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8124-8128]:PrimitiveType[8271-8275]"
    }, {
      "left" : "solvePhase1",
      "right" : "solvePhase1",
      "info" : "SimpleName[8129-8140]:SimpleName[8276-8287]"
    }, {
      "left" : "final SimplexTableau tableau",
      "right" : "final SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[8141-8169]:SingleVariableDeclaration[8288-8316]"
    }, {
      "left" : "MaxCountExceededException",
      "right" : "MaxCountExceededException",
      "info" : "SimpleType[8186-8211]:SimpleType[8333-8358]"
    }, {
      "left" : "UnboundedSolutionException",
      "right" : "UnboundedSolutionException",
      "info" : "SimpleType[8213-8239]:SimpleType[8360-8386]"
    }, {
      "left" : "NoFeasibleSolutionException",
      "right" : "NoFeasibleSolutionException",
      "info" : "SimpleType[8241-8268]:SimpleType[8388-8415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8269-8702]:Block[8416-8849]"
    }, {
      "left" : "if (tableau.getNumArtificialVariables() == 0)",
      "right" : "if (tableau.getNumArtificialVariables() == 0)",
      "info" : "IfStatement[8318-8395]:IfStatement[8465-8542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8364-8395]:Block[8511-8542]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8378-8385]:ReturnStatement[8525-8532]"
    }, {
      "left" : "while (!tableau.isOptimal())",
      "right" : "while (!tableau.isOptimal())",
      "info" : "WhileStatement[8405-8479]:WhileStatement[8552-8626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8434-8479]:Block[8581-8626]"
    }, {
      "left" : "doIteration(tableau);",
      "right" : "doIteration(tableau);",
      "info" : "ExpressionStatement[8448-8469]:ExpressionStatement[8595-8616]"
    }, {
      "left" : "if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon))",
      "right" : "if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon))",
      "info" : "IfStatement[8551-8696]:IfStatement[8698-8843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8632-8696]:Block[8779-8843]"
    }, {
      "left" : "throw new NoFeasibleSolutionException();",
      "right" : "throw new NoFeasibleSolutionException();",
      "info" : "ThrowStatement[8646-8686]:ThrowStatement[8793-8833]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8733-8742]:MarkerAnnotation[8880-8889]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8747-8753]:Modifier[8894-8900]"
    }, {
      "left" : "PointValuePair",
      "right" : "PointValuePair",
      "info" : "SimpleType[8754-8768]:SimpleType[8901-8915]"
    }, {
      "left" : "doOptimize",
      "right" : "doOptimize",
      "info" : "SimpleName[8769-8779]:SimpleName[8916-8926]"
    }, {
      "left" : "MaxCountExceededException",
      "right" : "MaxCountExceededException",
      "info" : "SimpleType[8797-8822]:SimpleType[8944-8969]"
    }, {
      "left" : "UnboundedSolutionException",
      "right" : "UnboundedSolutionException",
      "info" : "SimpleType[8824-8850]:SimpleType[8971-8997]"
    }, {
      "left" : "NoFeasibleSolutionException",
      "right" : "NoFeasibleSolutionException",
      "info" : "SimpleType[8852-8879]:SimpleType[8999-9026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8880-9396]:Block[9027-9543]"
    }, {
      "left" : "final SimplexTableau tableau =\n            new SimplexTableau(getFunction(),\n                               getConstraints(),\n                               getGoalType(),\n                               restrictToNonNegative(),\n                               epsilon,\n                               maxUlps);",
      "right" : "final SimplexTableau tableau =\n            new SimplexTableau(getFunction(),\n                               getConstraints(),\n                               getGoalType(),\n                               restrictToNonNegative(),\n                               epsilon,\n                               maxUlps);",
      "info" : "VariableDeclarationStatement[8890-9198]:VariableDeclarationStatement[9037-9345]"
    }, {
      "left" : "solvePhase1(tableau);",
      "right" : "solvePhase1(tableau);",
      "info" : "ExpressionStatement[9208-9229]:ExpressionStatement[9355-9376]"
    }, {
      "left" : "tableau.dropPhase1Objective();",
      "right" : "tableau.dropPhase1Objective();",
      "info" : "ExpressionStatement[9238-9268]:ExpressionStatement[9385-9415]"
    }, {
      "left" : "while (!tableau.isOptimal())",
      "right" : "while (!tableau.isOptimal())",
      "info" : "WhileStatement[9278-9352]:WhileStatement[9425-9499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9307-9352]:Block[9454-9499]"
    }, {
      "left" : "doIteration(tableau);",
      "right" : "doIteration(tableau);",
      "info" : "ExpressionStatement[9321-9342]:ExpressionStatement[9468-9489]"
    }, {
      "left" : "return tableau.getSolution();",
      "right" : "return tableau.getSolution();",
      "info" : "ReturnStatement[9361-9390]:ReturnStatement[9508-9537]"
    } ]
  },
  "interFileMappings" : { }
}