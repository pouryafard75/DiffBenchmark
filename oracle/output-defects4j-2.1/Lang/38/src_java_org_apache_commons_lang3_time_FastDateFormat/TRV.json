{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[3297-3445]:FieldDeclaration[3297-3445]"
    }, {
      "left" : "public static final int FULL = DateFormat.FULL;",
      "right" : "public static final int FULL = DateFormat.FULL;",
      "info" : "FieldDeclaration[3451-3563]:FieldDeclaration[3451-3563]"
    }, {
      "left" : "public static final int LONG = DateFormat.LONG;",
      "right" : "public static final int LONG = DateFormat.LONG;",
      "info" : "FieldDeclaration[3568-3680]:FieldDeclaration[3568-3680]"
    }, {
      "left" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "right" : "public static final int MEDIUM = DateFormat.MEDIUM;",
      "info" : "FieldDeclaration[3685-3803]:FieldDeclaration[3685-3803]"
    }, {
      "left" : "public static final int SHORT = DateFormat.SHORT;",
      "right" : "public static final int SHORT = DateFormat.SHORT;",
      "info" : "FieldDeclaration[3808-3923]:FieldDeclaration[3808-3923]"
    }, {
      "left" : "private static String cDefaultPattern;",
      "right" : "private static String cDefaultPattern;",
      "info" : "FieldDeclaration[3958-3996]:FieldDeclaration[3958-3996]"
    }, {
      "left" : "private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);",
      "right" : "private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4041-4162]:FieldDeclaration[4041-4162]"
    }, {
      "left" : "private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "right" : "private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4167-4276]:FieldDeclaration[4167-4276]"
    }, {
      "left" : "private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "right" : "private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4281-4390]:FieldDeclaration[4281-4390]"
    }, {
      "left" : "private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "right" : "private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);",
      "info" : "FieldDeclaration[4395-4508]:FieldDeclaration[4395-4508]"
    }, {
      "left" : "private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);",
      "right" : "private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);",
      "info" : "FieldDeclaration[4513-4609]:FieldDeclaration[4513-4609]"
    }, {
      "left" : "private final String mPattern;",
      "right" : "private final String mPattern;",
      "info" : "FieldDeclaration[4615-4681]:FieldDeclaration[4615-4681]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[4686-4757]:FieldDeclaration[4686-4757]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[4762-4873]:FieldDeclaration[4762-4873]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[4878-4942]:FieldDeclaration[4878-4942]"
    }, {
      "left" : "private final boolean mLocaleForced;",
      "right" : "private final boolean mLocaleForced;",
      "info" : "FieldDeclaration[4947-5048]:FieldDeclaration[4947-5048]"
    }, {
      "left" : "private transient Rule[] mRules;",
      "right" : "private transient Rule[] mRules;",
      "info" : "FieldDeclaration[5053-5126]:FieldDeclaration[5053-5126]"
    }, {
      "left" : "private transient int mMaxLengthEstimate;",
      "right" : "private transient int mMaxLengthEstimate;",
      "info" : "FieldDeclaration[5131-5225]:FieldDeclaration[5131-5225]"
    }, {
      "left" : "public static FastDateFormat getInstance()",
      "right" : "public static FastDateFormat getInstance()",
      "info" : "MethodDeclaration[5309-5577]:MethodDeclaration[5309-5577]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern)",
      "right" : "public static FastDateFormat getInstance(String pattern)",
      "info" : "MethodDeclaration[5583-6016]:MethodDeclaration[5583-6016]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "right" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
      "info" : "MethodDeclaration[6022-6560]:MethodDeclaration[6022-6560]"
    }, {
      "left" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "right" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
      "info" : "MethodDeclaration[6566-7068]:MethodDeclaration[6566-7068]"
    }, {
      "left" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[7074-8065]:MethodDeclaration[7074-8065]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style)",
      "right" : "public static FastDateFormat getDateInstance(int style)",
      "info" : "MethodDeclaration[8149-8623]:MethodDeclaration[8149-8623]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[8629-9183]:MethodDeclaration[8629-9183]"
    }, {
      "left" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[9189-9776]:MethodDeclaration[9189-9776]"
    }, {
      "left" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[9781-11217]:MethodDeclaration[9781-11217]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style)",
      "right" : "public static FastDateFormat getTimeInstance(int style)",
      "info" : "MethodDeclaration[11301-11775]:MethodDeclaration[11301-11775]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "right" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
      "info" : "MethodDeclaration[11781-12335]:MethodDeclaration[11781-12335]"
    }, {
      "left" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "right" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
      "info" : "MethodDeclaration[12345-12932]:MethodDeclaration[12345-12932]"
    }, {
      "left" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "right" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[12942-14429]:MethodDeclaration[12942-14429]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle)",
      "info" : "MethodDeclaration[14513-15127]:MethodDeclaration[14513-15127]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale)",
      "info" : "MethodDeclaration[15137-15831]:MethodDeclaration[15137-15831]"
    }, {
      "left" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "right" : "public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, TimeZone timeZone)",
      "info" : "MethodDeclaration[15841-16568]:MethodDeclaration[15841-16568]"
    }, {
      "left" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)",
      "right" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)",
      "info" : "MethodDeclaration[16577-18214]:MethodDeclaration[16577-18214]"
    }, {
      "left" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "right" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[18298-19156]:MethodDeclaration[18298-19156]"
    }, {
      "left" : "private static synchronized String getDefaultPattern()",
      "right" : "private static synchronized String getDefaultPattern()",
      "info" : "MethodDeclaration[19162-19470]:MethodDeclaration[19162-19470]"
    }, {
      "left" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[19573-20640]:MethodDeclaration[19573-20640]"
    }, {
      "left" : "protected void init()",
      "right" : "protected void init()",
      "info" : "MethodDeclaration[20646-21018]:MethodDeclaration[20646-21018]"
    }, {
      "left" : "protected List<Rule> parsePattern()",
      "right" : "protected List<Rule> parsePattern()",
      "info" : "MethodDeclaration[21127-26329]:MethodDeclaration[21127-26329]"
    }, {
      "left" : "protected String parseToken(String pattern, int[] indexRef)",
      "right" : "protected String parseToken(String pattern, int[] indexRef)",
      "info" : "MethodDeclaration[26335-28051]:MethodDeclaration[26335-28051]"
    }, {
      "left" : "protected NumberRule selectNumberRule(int field, int padding)",
      "right" : "protected NumberRule selectNumberRule(int field, int padding)",
      "info" : "MethodDeclaration[28057-28605]:MethodDeclaration[28057-28605]"
    }, {
      "left" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "right" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
      "info" : "MethodDeclaration[28711-29581]:MethodDeclaration[28711-29581]"
    }, {
      "left" : "public String format(long millis)",
      "right" : "public String format(long millis)",
      "info" : "MethodDeclaration[29587-29862]:MethodDeclaration[29587-29862]"
    }, {
      "left" : "public String format(Date date)",
      "right" : "public String format(Date date)",
      "info" : "MethodDeclaration[29868-30215]:MethodDeclaration[29868-30215]"
    }, {
      "left" : "public String format(Calendar calendar)",
      "right" : "public String format(Calendar calendar)",
      "info" : "MethodDeclaration[30221-30511]:MethodDeclaration[30221-30511]"
    }, {
      "left" : "public StringBuffer format(long millis, StringBuffer buf)",
      "right" : "public StringBuffer format(long millis, StringBuffer buf)",
      "info" : "MethodDeclaration[30517-30923]:MethodDeclaration[30517-30923]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer buf)",
      "right" : "public StringBuffer format(Date date, StringBuffer buf)",
      "info" : "MethodDeclaration[30929-31359]:MethodDeclaration[30929-31359]"
    }, {
      "left" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "right" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
      "info" : "MethodDeclaration[31886-32397]:MethodDeclaration[31931-32442]"
    }, {
      "left" : "public Object parseObject(String source, ParsePosition pos)",
      "right" : "public Object parseObject(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[32496-32849]:MethodDeclaration[32541-32894]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[32954-33166]:MethodDeclaration[32999-33211]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[33172-33591]:MethodDeclaration[33217-33636]"
    }, {
      "left" : "public boolean getTimeZoneOverridesCalendar()",
      "right" : "public boolean getTimeZoneOverridesCalendar()",
      "info" : "MethodDeclaration[33597-33920]:MethodDeclaration[33642-33965]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[33926-34087]:MethodDeclaration[33971-34132]"
    }, {
      "left" : "public int getMaxLengthEstimate()",
      "right" : "public int getMaxLengthEstimate()",
      "info" : "MethodDeclaration[34093-34451]:MethodDeclaration[34138-34496]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[34549-35338]:MethodDeclaration[34594-35383]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[35344-35762]:MethodDeclaration[35389-35807]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[35768-35988]:MethodDeclaration[35813-36033]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[36091-36570]:MethodDeclaration[36136-36615]"
    }, {
      "left" : "Rule",
      "right" : "Rule",
      "info" : "TypeDeclaration[36671-37233]:TypeDeclaration[36716-37278]"
    }, {
      "left" : "int estimateLength();",
      "right" : "int estimateLength();",
      "info" : "MethodDeclaration[36763-36915]:MethodDeclaration[36808-36960]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "right" : "void appendTo(StringBuffer buffer, Calendar calendar);",
      "info" : "MethodDeclaration[36933-37227]:MethodDeclaration[36978-37272]"
    }, {
      "left" : "NumberRule",
      "right" : "NumberRule",
      "info" : "TypeDeclaration[37239-37632]:TypeDeclaration[37284-37677]"
    }, {
      "left" : "void appendTo(StringBuffer buffer, int value);",
      "right" : "void appendTo(StringBuffer buffer, int value);",
      "info" : "MethodDeclaration[37358-37626]:MethodDeclaration[37403-37671]"
    }, {
      "left" : "CharacterLiteral",
      "right" : "CharacterLiteral",
      "info" : "TypeDeclaration[37638-38371]:TypeDeclaration[37683-38416]"
    }, {
      "left" : "private final char mValue;",
      "right" : "private final char mValue;",
      "info" : "FieldDeclaration[37783-37809]:FieldDeclaration[37828-37854]"
    }, {
      "left" : "CharacterLiteral(char value)",
      "right" : "CharacterLiteral(char value)",
      "info" : "MethodDeclaration[37819-38079]:MethodDeclaration[37864-38124]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38089-38199]:MethodDeclaration[38134-38244]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[38209-38365]:MethodDeclaration[38254-38410]"
    }, {
      "left" : "StringLiteral",
      "right" : "StringLiteral",
      "info" : "TypeDeclaration[38377-39106]:TypeDeclaration[38422-39151]"
    }, {
      "left" : "private final String mValue;",
      "right" : "private final String mValue;",
      "info" : "FieldDeclaration[38509-38537]:FieldDeclaration[38554-38582]"
    }, {
      "left" : "StringLiteral(String value)",
      "right" : "StringLiteral(String value)",
      "info" : "MethodDeclaration[38547-38800]:MethodDeclaration[38592-38845]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[38810-38934]:MethodDeclaration[38855-38979]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[38944-39100]:MethodDeclaration[38989-39145]"
    }, {
      "left" : "TextField",
      "right" : "TextField",
      "info" : "TypeDeclaration[39112-40185]:TypeDeclaration[39157-40230]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[39245-39270]:FieldDeclaration[39290-39315]"
    }, {
      "left" : "private final String[] mValues;",
      "right" : "private final String[] mValues;",
      "info" : "FieldDeclaration[39279-39310]:FieldDeclaration[39324-39355]"
    }, {
      "left" : "TextField(int field, String[] values)",
      "right" : "TextField(int field, String[] values)",
      "info" : "MethodDeclaration[39320-39647]:MethodDeclaration[39365-39692]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[39657-39990]:MethodDeclaration[39702-40035]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[40000-40179]:MethodDeclaration[40045-40224]"
    }, {
      "left" : "UnpaddedNumberField",
      "right" : "UnpaddedNumberField",
      "info" : "TypeDeclaration[40191-41369]:TypeDeclaration[40236-41414]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[40336-40361]:FieldDeclaration[40381-40406]"
    }, {
      "left" : "UnpaddedNumberField(int field)",
      "right" : "UnpaddedNumberField(int field)",
      "info" : "MethodDeclaration[40371-40606]:MethodDeclaration[40416-40651]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[40616-40726]:MethodDeclaration[40661-40771]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[40736-40909]:MethodDeclaration[40781-40954]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[40919-41363]:MethodDeclaration[40964-41408]"
    }, {
      "left" : "UnpaddedMonthField",
      "right" : "UnpaddedMonthField",
      "info" : "TypeDeclaration[41375-42435]:TypeDeclaration[41420-42480]"
    }, {
      "left" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "right" : "static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();",
      "info" : "FieldDeclaration[41518-41586]:FieldDeclaration[41563-41631]"
    }, {
      "left" : "UnpaddedMonthField()",
      "right" : "UnpaddedMonthField()",
      "info" : "MethodDeclaration[41596-41754]:MethodDeclaration[41641-41799]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[41764-41874]:MethodDeclaration[41809-41919]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[41884-42069]:MethodDeclaration[41929-42114]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[42079-42429]:MethodDeclaration[42124-42474]"
    }, {
      "left" : "PaddedNumberField",
      "right" : "PaddedNumberField",
      "info" : "TypeDeclaration[42441-44305]:TypeDeclaration[42486-44350]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[42581-42606]:FieldDeclaration[42626-42651]"
    }, {
      "left" : "private final int mSize;",
      "right" : "private final int mSize;",
      "info" : "FieldDeclaration[42615-42639]:FieldDeclaration[42660-42684]"
    }, {
      "left" : "PaddedNumberField(int field, int size)",
      "right" : "PaddedNumberField(int field, int size)",
      "info" : "MethodDeclaration[42649-43110]:MethodDeclaration[42694-43155]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[43120-43230]:MethodDeclaration[43165-43275]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[43240-43413]:MethodDeclaration[43285-43458]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[43423-44299]:MethodDeclaration[43468-44344]"
    }, {
      "left" : "TwoDigitNumberField",
      "right" : "TwoDigitNumberField",
      "info" : "TypeDeclaration[44311-45401]:TypeDeclaration[44356-45446]"
    }, {
      "left" : "private final int mField;",
      "right" : "private final int mField;",
      "info" : "FieldDeclaration[44456-44481]:FieldDeclaration[44501-44526]"
    }, {
      "left" : "TwoDigitNumberField(int field)",
      "right" : "TwoDigitNumberField(int field)",
      "info" : "MethodDeclaration[44491-44727]:MethodDeclaration[44536-44772]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[44737-44847]:MethodDeclaration[44782-44892]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[44857-45030]:MethodDeclaration[44902-45075]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[45040-45395]:MethodDeclaration[45085-45440]"
    }, {
      "left" : "TwoDigitYearField",
      "right" : "TwoDigitYearField",
      "info" : "TypeDeclaration[45407-46326]:TypeDeclaration[45452-46371]"
    }, {
      "left" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "right" : "static final TwoDigitYearField INSTANCE = new TwoDigitYearField();",
      "info" : "FieldDeclaration[45548-45614]:FieldDeclaration[45593-45659]"
    }, {
      "left" : "TwoDigitYearField()",
      "right" : "TwoDigitYearField()",
      "info" : "MethodDeclaration[45624-45769]:MethodDeclaration[45669-45814]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[45779-45889]:MethodDeclaration[45824-45934]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[45899-46085]:MethodDeclaration[45944-46130]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[46095-46320]:MethodDeclaration[46140-46365]"
    }, {
      "left" : "TwoDigitMonthField",
      "right" : "TwoDigitMonthField",
      "info" : "TypeDeclaration[46332-47256]:TypeDeclaration[46377-47301]"
    }, {
      "left" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "right" : "static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();",
      "info" : "FieldDeclaration[46475-46543]:FieldDeclaration[46520-46588]"
    }, {
      "left" : "TwoDigitMonthField()",
      "right" : "TwoDigitMonthField()",
      "info" : "MethodDeclaration[46553-46700]:MethodDeclaration[46598-46745]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[46710-46820]:MethodDeclaration[46755-46865]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[46830-47015]:MethodDeclaration[46875-47060]"
    }, {
      "left" : "public final void appendTo(StringBuffer buffer, int value)",
      "right" : "public final void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[47025-47250]:MethodDeclaration[47070-47295]"
    }, {
      "left" : "TwelveHourField",
      "right" : "TwelveHourField",
      "info" : "TypeDeclaration[47262-48359]:TypeDeclaration[47307-48404]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[47406-47437]:FieldDeclaration[47451-47482]"
    }, {
      "left" : "TwelveHourField(NumberRule rule)",
      "right" : "TwelveHourField(NumberRule rule)",
      "info" : "MethodDeclaration[47447-47706]:MethodDeclaration[47492-47751]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[47716-47847]:MethodDeclaration[47761-47892]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[47857-48187]:MethodDeclaration[47902-48232]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[48197-48353]:MethodDeclaration[48242-48398]"
    }, {
      "left" : "TwentyFourHourField",
      "right" : "TwentyFourHourField",
      "info" : "TypeDeclaration[48365-49488]:TypeDeclaration[48410-49533]"
    }, {
      "left" : "private final NumberRule mRule;",
      "right" : "private final NumberRule mRule;",
      "info" : "FieldDeclaration[48518-48549]:FieldDeclaration[48563-48594]"
    }, {
      "left" : "TwentyFourHourField(NumberRule rule)",
      "right" : "TwentyFourHourField(NumberRule rule)",
      "info" : "MethodDeclaration[48559-48826]:MethodDeclaration[48604-48871]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[48836-48967]:MethodDeclaration[48881-49012]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[48977-49316]:MethodDeclaration[49022-49361]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, int value)",
      "right" : "public void appendTo(StringBuffer buffer, int value)",
      "info" : "MethodDeclaration[49326-49482]:MethodDeclaration[49371-49527]"
    }, {
      "left" : "TimeZoneNameRule",
      "right" : "TimeZoneNameRule",
      "info" : "TypeDeclaration[49494-51904]:TypeDeclaration[49539-51949]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[49628-49661]:FieldDeclaration[49673-49706]"
    }, {
      "left" : "private final boolean mTimeZoneForced;",
      "right" : "private final boolean mTimeZoneForced;",
      "info" : "FieldDeclaration[49670-49708]:FieldDeclaration[49715-49753]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[49717-49746]:FieldDeclaration[49762-49791]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[49755-49780]:FieldDeclaration[49800-49825]"
    }, {
      "left" : "private final String mStandard;",
      "right" : "private final String mStandard;",
      "info" : "FieldDeclaration[49789-49820]:FieldDeclaration[49834-49865]"
    }, {
      "left" : "private final String mDaylight;",
      "right" : "private final String mDaylight;",
      "info" : "FieldDeclaration[49829-49860]:FieldDeclaration[49874-49905]"
    }, {
      "left" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "right" : "TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style)",
      "info" : "MethodDeclaration[49870-50752]:MethodDeclaration[49915-50797]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[50762-51097]:MethodDeclaration[50807-51142]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[51107-51898]:MethodDeclaration[51152-51943]"
    }, {
      "left" : "TimeZoneNumberRule",
      "right" : "TimeZoneNumberRule",
      "info" : "TypeDeclaration[51910-53621]:TypeDeclaration[51955-53666]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "right" : "static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);",
      "info" : "FieldDeclaration[52106-52184]:FieldDeclaration[52151-52229]"
    }, {
      "left" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "right" : "static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);",
      "info" : "FieldDeclaration[52193-52275]:FieldDeclaration[52238-52320]"
    }, {
      "left" : "final boolean mColon;",
      "right" : "final boolean mColon;",
      "info" : "FieldDeclaration[52293-52314]:FieldDeclaration[52338-52359]"
    }, {
      "left" : "TimeZoneNumberRule(boolean colon)",
      "right" : "TimeZoneNumberRule(boolean colon)",
      "info" : "MethodDeclaration[52332-52628]:MethodDeclaration[52377-52673]"
    }, {
      "left" : "public int estimateLength()",
      "right" : "public int estimateLength()",
      "info" : "MethodDeclaration[52638-52748]:MethodDeclaration[52683-52793]"
    }, {
      "left" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "right" : "public void appendTo(StringBuffer buffer, Calendar calendar)",
      "info" : "MethodDeclaration[52758-53603]:MethodDeclaration[52803-53648]"
    }, {
      "left" : "TimeZoneDisplayKey",
      "right" : "TimeZoneDisplayKey",
      "info" : "TypeDeclaration[53705-55311]:TypeDeclaration[53750-55356]"
    }, {
      "left" : "private final TimeZone mTimeZone;",
      "right" : "private final TimeZone mTimeZone;",
      "info" : "FieldDeclaration[53846-53879]:FieldDeclaration[53891-53924]"
    }, {
      "left" : "private final int mStyle;",
      "right" : "private final int mStyle;",
      "info" : "FieldDeclaration[53888-53913]:FieldDeclaration[53933-53958]"
    }, {
      "left" : "private final Locale mLocale;",
      "right" : "private final Locale mLocale;",
      "info" : "FieldDeclaration[53922-53951]:FieldDeclaration[53967-53996]"
    }, {
      "left" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "right" : "TimeZoneDisplayKey(TimeZone timeZone,\n                           boolean daylight, int style, Locale locale)",
      "info" : "MethodDeclaration[53961-54608]:MethodDeclaration[54006-54653]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[54618-54771]:MethodDeclaration[54663-54816]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[54781-55305]:MethodDeclaration[54826-55350]"
    }, {
      "left" : "Pair",
      "right" : "Pair",
      "info" : "TypeDeclaration[55395-56934]:TypeDeclaration[55440-56979]"
    }, {
      "left" : "private final Object mObj1;",
      "right" : "private final Object mObj1;",
      "info" : "FieldDeclaration[55610-55637]:FieldDeclaration[55655-55682]"
    }, {
      "left" : "private final Object mObj2;",
      "right" : "private final Object mObj2;",
      "info" : "FieldDeclaration[55646-55673]:FieldDeclaration[55691-55718]"
    }, {
      "left" : "public Pair(Object obj1, Object obj2)",
      "right" : "public Pair(Object obj1, Object obj2)",
      "info" : "MethodDeclaration[55683-55989]:MethodDeclaration[55728-56034]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[55999-56521]:MethodDeclaration[56044-56566]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[56531-56763]:MethodDeclaration[56576-56808]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[56773-56928]:MethodDeclaration[56818-56973]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5509-5577]:Block[5509-5577]"
    }, {
      "left" : "return getInstance(getDefaultPattern(), null, null);",
      "right" : "return getInstance(getDefaultPattern(), null, null);",
      "info" : "ReturnStatement[5519-5571]:ReturnStatement[5519-5571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5960-6016]:Block[5960-6016]"
    }, {
      "left" : "return getInstance(pattern, null, null);",
      "right" : "return getInstance(pattern, null, null);",
      "info" : "ReturnStatement[5970-6010]:ReturnStatement[5970-6010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6500-6560]:Block[6500-6560]"
    }, {
      "left" : "return getInstance(pattern, timeZone, null);",
      "right" : "return getInstance(pattern, timeZone, null);",
      "info" : "ReturnStatement[6510-6554]:ReturnStatement[6510-6554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7010-7068]:Block[7010-7068]"
    }, {
      "left" : "return getInstance(pattern, null, locale);",
      "right" : "return getInstance(pattern, null, locale);",
      "info" : "ReturnStatement[7020-7062]:ReturnStatement[7020-7062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7680-8065]:Block[7680-8065]"
    }, {
      "left" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "right" : "FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);",
      "info" : "VariableDeclarationStatement[7690-7765]:VariableDeclarationStatement[7690-7765]"
    }, {
      "left" : "FastDateFormat format = cInstanceCache.get(emptyFormat);",
      "right" : "FastDateFormat format = cInstanceCache.get(emptyFormat);",
      "info" : "VariableDeclarationStatement[7774-7830]:VariableDeclarationStatement[7774-7830]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[7839-8036]:IfStatement[7839-8036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7859-8036]:Block[7859-8036]"
    }, {
      "left" : "format = emptyFormat;",
      "right" : "format = emptyFormat;",
      "info" : "ExpressionStatement[7873-7894]:ExpressionStatement[7873-7894]"
    }, {
      "left" : "format.init();",
      "right" : "format.init();",
      "info" : "ExpressionStatement[7907-7921]:ExpressionStatement[7907-7921]"
    }, {
      "left" : "cInstanceCache.put(format, format);",
      "right" : "cInstanceCache.put(format, format);",
      "info" : "ExpressionStatement[7975-8010]:ExpressionStatement[7975-8010]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[8045-8059]:ReturnStatement[8045-8059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8565-8623]:Block[8565-8623]"
    }, {
      "left" : "return getDateInstance(style, null, null);",
      "right" : "return getDateInstance(style, null, null);",
      "info" : "ReturnStatement[8575-8617]:ReturnStatement[8575-8617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9123-9183]:Block[9123-9183]"
    }, {
      "left" : "return getDateInstance(style, null, locale);",
      "right" : "return getDateInstance(style, null, locale);",
      "info" : "ReturnStatement[9133-9177]:ReturnStatement[9133-9177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9714-9776]:Block[9714-9776]"
    }, {
      "left" : "return getDateInstance(style, timeZone, null);",
      "right" : "return getDateInstance(style, timeZone, null);",
      "info" : "ReturnStatement[9724-9770]:ReturnStatement[9724-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10365-11217]:Block[10365-11217]"
    }, {
      "left" : "Object key = Integer.valueOf(style);",
      "right" : "Object key = Integer.valueOf(style);",
      "info" : "VariableDeclarationStatement[10375-10411]:VariableDeclarationStatement[10375-10411]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[10420-10496]:IfStatement[10420-10496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10442-10496]:Block[10442-10496]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[10456-10486]:ExpressionStatement[10456-10486]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[10506-10579]:IfStatement[10506-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10526-10579]:Block[10526-10579]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[10540-10569]:ExpressionStatement[10540-10569]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[10589-10617]:ExpressionStatement[10589-10617]"
    }, {
      "left" : "FastDateFormat format = cDateInstanceCache.get(key);",
      "right" : "FastDateFormat format = cDateInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[10627-10679]:VariableDeclarationStatement[10627-10679]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[10688-11188]:IfStatement[10688-11188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10708-11188]:Block[10708-11188]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10722-11178]:TryStatement[10722-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10726-11039]:Block[10726-11039]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);",
      "info" : "VariableDeclarationStatement[10744-10834]:VariableDeclarationStatement[10744-10834]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[10851-10890]:VariableDeclarationStatement[10851-10890]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[10907-10955]:ExpressionStatement[10907-10955]"
    }, {
      "left" : "cDateInstanceCache.put(key, format);",
      "right" : "cDateInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[10972-11008]:ExpressionStatement[10972-11008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11070-11178]:Block[11070-11178]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[11088-11164]:ThrowStatement[11088-11164]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[11197-11211]:ReturnStatement[11197-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-11775]:Block[11717-11775]"
    }, {
      "left" : "return getTimeInstance(style, null, null);",
      "right" : "return getTimeInstance(style, null, null);",
      "info" : "ReturnStatement[11727-11769]:ReturnStatement[11727-11769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12275-12335]:Block[12275-12335]"
    }, {
      "left" : "return getTimeInstance(style, null, locale);",
      "right" : "return getTimeInstance(style, null, locale);",
      "info" : "ReturnStatement[12285-12329]:ReturnStatement[12285-12329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12870-12932]:Block[12870-12932]"
    }, {
      "left" : "return getTimeInstance(style, timeZone, null);",
      "right" : "return getTimeInstance(style, timeZone, null);",
      "info" : "ReturnStatement[12880-12926]:ReturnStatement[12880-12926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13526-14429]:Block[13526-14429]"
    }, {
      "left" : "Object key = Integer.valueOf(style);",
      "right" : "Object key = Integer.valueOf(style);",
      "info" : "VariableDeclarationStatement[13536-13572]:VariableDeclarationStatement[13536-13572]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[13581-13657]:IfStatement[13581-13657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13603-13657]:Block[13603-13657]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[13617-13647]:ExpressionStatement[13617-13647]"
    }, {
      "left" : "if (locale != null)",
      "right" : "if (locale != null)",
      "info" : "IfStatement[13666-13738]:IfStatement[13666-13738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13686-13738]:Block[13686-13738]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[13700-13728]:ExpressionStatement[13700-13728]"
    }, {
      "left" : "FastDateFormat format = cTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = cTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[13748-13800]:VariableDeclarationStatement[13748-13800]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[13809-14400]:IfStatement[13809-14400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13829-14400]:Block[13829-14400]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[13843-13924]:IfStatement[13843-13924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13863-13924]:Block[13863-13924]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[13881-13910]:ExpressionStatement[13881-13910]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13938-14390]:TryStatement[13938-14390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13942-14251]:Block[13942-14251]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);",
      "info" : "VariableDeclarationStatement[13960-14050]:VariableDeclarationStatement[13960-14050]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[14067-14106]:VariableDeclarationStatement[14067-14106]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[14123-14171]:ExpressionStatement[14123-14171]"
    }, {
      "left" : "cTimeInstanceCache.put(key, format);",
      "right" : "cTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[14188-14224]:ExpressionStatement[14188-14224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14282-14390]:Block[14282-14390]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);",
      "info" : "ThrowStatement[14300-14376]:ThrowStatement[14300-14376]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[14409-14423]:ReturnStatement[14409-14423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15050-15127]:Block[15050-15127]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, null);",
      "info" : "ReturnStatement[15060-15121]:ReturnStatement[15060-15121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15752-15831]:Block[15752-15831]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, null, locale);",
      "info" : "ReturnStatement[15762-15825]:ReturnStatement[15762-15825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16487-16568]:Block[16487-16568]"
    }, {
      "left" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "right" : "return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);",
      "info" : "ReturnStatement[16497-16562]:ReturnStatement[16497-16562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17281-18214]:Block[17281-18214]"
    }, {
      "left" : "Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));",
      "right" : "Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));",
      "info" : "VariableDeclarationStatement[17292-17370]:VariableDeclarationStatement[17292-17370]"
    }, {
      "left" : "if (timeZone != null)",
      "right" : "if (timeZone != null)",
      "info" : "IfStatement[17379-17455]:IfStatement[17379-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17401-17455]:Block[17401-17455]"
    }, {
      "left" : "key = new Pair(key, timeZone);",
      "right" : "key = new Pair(key, timeZone);",
      "info" : "ExpressionStatement[17415-17445]:ExpressionStatement[17415-17445]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[17464-17537]:IfStatement[17464-17537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17484-17537]:Block[17484-17537]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[17498-17527]:ExpressionStatement[17498-17527]"
    }, {
      "left" : "key = new Pair(key, locale);",
      "right" : "key = new Pair(key, locale);",
      "info" : "ExpressionStatement[17546-17574]:ExpressionStatement[17546-17574]"
    }, {
      "left" : "FastDateFormat format = cDateTimeInstanceCache.get(key);",
      "right" : "FastDateFormat format = cDateTimeInstanceCache.get(key);",
      "info" : "VariableDeclarationStatement[17584-17640]:VariableDeclarationStatement[17584-17640]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[17649-18185]:IfStatement[17649-18185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17669-18185]:Block[17669-18185]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17683-18175]:TryStatement[17683-18175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17687-18031]:Block[17687-18031]"
    }, {
      "left" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);",
      "right" : "SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);",
      "info" : "VariableDeclarationStatement[17705-17838]:VariableDeclarationStatement[17705-17838]"
    }, {
      "left" : "String pattern = formatter.toPattern();",
      "right" : "String pattern = formatter.toPattern();",
      "info" : "VariableDeclarationStatement[17855-17894]:VariableDeclarationStatement[17855-17894]"
    }, {
      "left" : "format = getInstance(pattern, timeZone, locale);",
      "right" : "format = getInstance(pattern, timeZone, locale);",
      "info" : "ExpressionStatement[17911-17959]:ExpressionStatement[17911-17959]"
    }, {
      "left" : "cDateTimeInstanceCache.put(key, format);",
      "right" : "cDateTimeInstanceCache.put(key, format);",
      "info" : "ExpressionStatement[17976-18016]:ExpressionStatement[17976-18016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18062-18175]:Block[18062-18175]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);",
      "right" : "throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);",
      "info" : "ThrowStatement[18080-18161]:ThrowStatement[18080-18161]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[18194-18208]:ReturnStatement[18194-18208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18781-19156]:Block[18781-19156]"
    }, {
      "left" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "right" : "Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);",
      "info" : "VariableDeclarationStatement[18791-18856]:VariableDeclarationStatement[18791-18856]"
    }, {
      "left" : "String value = cTimeZoneDisplayCache.get(key);",
      "right" : "String value = cTimeZoneDisplayCache.get(key);",
      "info" : "VariableDeclarationStatement[18865-18911]:VariableDeclarationStatement[18865-18911]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[18920-19128]:IfStatement[18920-19128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18939-19128]:Block[18939-19128]"
    }, {
      "left" : "value = tz.getDisplayName(daylight, style, locale);",
      "right" : "value = tz.getDisplayName(daylight, style, locale);",
      "info" : "ExpressionStatement[19016-19067]:ExpressionStatement[19016-19067]"
    }, {
      "left" : "cTimeZoneDisplayCache.put(key, value);",
      "right" : "cTimeZoneDisplayCache.put(key, value);",
      "info" : "ExpressionStatement[19080-19118]:ExpressionStatement[19080-19118]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[19137-19150]:ReturnStatement[19137-19150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19316-19470]:Block[19316-19470]"
    }, {
      "left" : "if (cDefaultPattern == null)",
      "right" : "if (cDefaultPattern == null)",
      "info" : "IfStatement[19326-19432]:IfStatement[19326-19432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19355-19432]:Block[19355-19432]"
    }, {
      "left" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "right" : "cDefaultPattern = new SimpleDateFormat().toPattern();",
      "info" : "ExpressionStatement[19369-19422]:ExpressionStatement[19369-19422]"
    }, {
      "left" : "return cDefaultPattern;",
      "right" : "return cDefaultPattern;",
      "info" : "ReturnStatement[19441-19464]:ReturnStatement[19441-19464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20135-20640]:Block[20135-20640]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[20145-20153]:SuperConstructorInvocation[20145-20153]"
    }, {
      "left" : "if (pattern == null)",
      "right" : "if (pattern == null)",
      "info" : "IfStatement[20162-20274]:IfStatement[20162-20274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20183-20274]:Block[20183-20274]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The pattern must not be null\");",
      "info" : "ThrowStatement[20197-20264]:ThrowStatement[20197-20264]"
    }, {
      "left" : "mPattern = pattern;",
      "right" : "mPattern = pattern;",
      "info" : "ExpressionStatement[20283-20302]:ExpressionStatement[20283-20302]"
    }, {
      "left" : "mTimeZoneForced = (timeZone != null);",
      "right" : "mTimeZoneForced = (timeZone != null);",
      "info" : "ExpressionStatement[20320-20357]:ExpressionStatement[20320-20357]"
    }, {
      "left" : "if (timeZone == null)",
      "right" : "if (timeZone == null)",
      "info" : "IfStatement[20366-20445]:IfStatement[20366-20445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20388-20445]:Block[20388-20445]"
    }, {
      "left" : "timeZone = TimeZone.getDefault();",
      "right" : "timeZone = TimeZone.getDefault();",
      "info" : "ExpressionStatement[20402-20435]:ExpressionStatement[20402-20435]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[20454-20475]:ExpressionStatement[20454-20475]"
    }, {
      "left" : "mLocaleForced = (locale != null);",
      "right" : "mLocaleForced = (locale != null);",
      "info" : "ExpressionStatement[20493-20526]:ExpressionStatement[20493-20526]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[20535-20608]:IfStatement[20535-20608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20555-20608]:Block[20555-20608]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[20569-20598]:ExpressionStatement[20569-20598]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[20617-20634]:ExpressionStatement[20617-20634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20738-21018]:Block[20738-21018]"
    }, {
      "left" : "List<Rule> rulesList = parsePattern();",
      "right" : "List<Rule> rulesList = parsePattern();",
      "info" : "VariableDeclarationStatement[20748-20786]:VariableDeclarationStatement[20748-20786]"
    }, {
      "left" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
      "right" : "mRules = rulesList.toArray(new Rule[rulesList.size()]);",
      "info" : "ExpressionStatement[20795-20850]:ExpressionStatement[20795-20850]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[20860-20872]:VariableDeclarationStatement[20860-20872]"
    }, {
      "left" : "for (int i=mRules.length; --i >= 0)",
      "right" : "for (int i=mRules.length; --i >= 0)",
      "info" : "ForStatement[20881-20977]:ForStatement[20881-20977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20919-20977]:Block[20919-20977]"
    }, {
      "left" : "len += mRules[i].estimateLength();",
      "right" : "len += mRules[i].estimateLength();",
      "info" : "ExpressionStatement[20933-20967]:ExpressionStatement[20933-20967]"
    }, {
      "left" : "mMaxLengthEstimate = len;",
      "right" : "mMaxLengthEstimate = len;",
      "info" : "ExpressionStatement[20987-21012]:ExpressionStatement[20987-21012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21355-26329]:Block[21355-26329]"
    }, {
      "left" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "right" : "DateFormatSymbols symbols = new DateFormatSymbols(mLocale);",
      "info" : "VariableDeclarationStatement[21365-21424]:VariableDeclarationStatement[21365-21424]"
    }, {
      "left" : "List<Rule> rules = new ArrayList<Rule>();",
      "right" : "List<Rule> rules = new ArrayList<Rule>();",
      "info" : "VariableDeclarationStatement[21433-21474]:VariableDeclarationStatement[21433-21474]"
    }, {
      "left" : "String[] ERAs = symbols.getEras();",
      "right" : "String[] ERAs = symbols.getEras();",
      "info" : "VariableDeclarationStatement[21484-21518]:VariableDeclarationStatement[21484-21518]"
    }, {
      "left" : "String[] months = symbols.getMonths();",
      "right" : "String[] months = symbols.getMonths();",
      "info" : "VariableDeclarationStatement[21527-21565]:VariableDeclarationStatement[21527-21565]"
    }, {
      "left" : "String[] shortMonths = symbols.getShortMonths();",
      "right" : "String[] shortMonths = symbols.getShortMonths();",
      "info" : "VariableDeclarationStatement[21574-21622]:VariableDeclarationStatement[21574-21622]"
    }, {
      "left" : "String[] weekdays = symbols.getWeekdays();",
      "right" : "String[] weekdays = symbols.getWeekdays();",
      "info" : "VariableDeclarationStatement[21631-21673]:VariableDeclarationStatement[21631-21673]"
    }, {
      "left" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "right" : "String[] shortWeekdays = symbols.getShortWeekdays();",
      "info" : "VariableDeclarationStatement[21682-21734]:VariableDeclarationStatement[21682-21734]"
    }, {
      "left" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "right" : "String[] AmPmStrings = symbols.getAmPmStrings();",
      "info" : "VariableDeclarationStatement[21743-21791]:VariableDeclarationStatement[21743-21791]"
    }, {
      "left" : "int length = mPattern.length();",
      "right" : "int length = mPattern.length();",
      "info" : "VariableDeclarationStatement[21801-21832]:VariableDeclarationStatement[21801-21832]"
    }, {
      "left" : "int[] indexRef = new int[1];",
      "right" : "int[] indexRef = new int[1];",
      "info" : "VariableDeclarationStatement[21841-21869]:VariableDeclarationStatement[21841-21869]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[21879-26300]:ForStatement[21879-26300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21912-26300]:Block[21912-26300]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[21926-21942]:ExpressionStatement[21926-21942]"
    }, {
      "left" : "String token = parseToken(mPattern, indexRef);",
      "right" : "String token = parseToken(mPattern, indexRef);",
      "info" : "VariableDeclarationStatement[21955-22001]:VariableDeclarationStatement[21955-22001]"
    }, {
      "left" : "i = indexRef[0];",
      "right" : "i = indexRef[0];",
      "info" : "ExpressionStatement[22014-22030]:ExpressionStatement[22014-22030]"
    }, {
      "left" : "int tokenLen = token.length();",
      "right" : "int tokenLen = token.length();",
      "info" : "VariableDeclarationStatement[22044-22074]:VariableDeclarationStatement[22044-22074]"
    }, {
      "left" : "if (tokenLen == 0)",
      "right" : "if (tokenLen == 0)",
      "info" : "IfStatement[22087-22144]:IfStatement[22087-22144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22106-22144]:Block[22106-22144]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22124-22130]:BreakStatement[22124-22130]"
    }, {
      "left" : "Rule rule;",
      "right" : "Rule rule;",
      "info" : "VariableDeclarationStatement[22158-22168]:VariableDeclarationStatement[22158-22168]"
    }, {
      "left" : "char c = token.charAt(0);",
      "right" : "char c = token.charAt(0);",
      "info" : "VariableDeclarationStatement[22181-22206]:VariableDeclarationStatement[22181-22206]"
    }, {
      "left" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "right" : "switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }",
      "info" : "SwitchStatement[22220-26260]:SwitchStatement[22220-26260]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[22245-22254]:SwitchCase[22245-22254]"
    }, {
      "left" : "rule = new TextField(Calendar.ERA, ERAs);",
      "right" : "rule = new TextField(Calendar.ERA, ERAs);",
      "info" : "ExpressionStatement[22296-22337]:ExpressionStatement[22296-22337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22354-22360]:BreakStatement[22354-22360]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[22373-22382]:SwitchCase[22373-22382]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22416-22604]:IfStatement[22416-22604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22435-22524]:Block[22435-22524]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.YEAR, tokenLen);",
      "info" : "ExpressionStatement[22457-22506]:ExpressionStatement[22457-22506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22530-22604]:Block[22530-22604]"
    }, {
      "left" : "rule = TwoDigitYearField.INSTANCE;",
      "right" : "rule = TwoDigitYearField.INSTANCE;",
      "info" : "ExpressionStatement[22552-22586]:ExpressionStatement[22552-22586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22621-22627]:BreakStatement[22621-22627]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[22640-22649]:SwitchCase[22640-22649]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[22701-23101]:IfStatement[22701-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22720-22805]:Block[22720-22805]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, months);",
      "right" : "rule = new TextField(Calendar.MONTH, months);",
      "info" : "ExpressionStatement[22742-22787]:ExpressionStatement[22742-22787]"
    }, {
      "left" : "if (tokenLen == 3)",
      "right" : "if (tokenLen == 3)",
      "info" : "IfStatement[22811-23101]:IfStatement[22811-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22830-22920]:Block[22830-22920]"
    }, {
      "left" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "right" : "rule = new TextField(Calendar.MONTH, shortMonths);",
      "info" : "ExpressionStatement[22852-22902]:ExpressionStatement[22852-22902]"
    }, {
      "left" : "if (tokenLen == 2)",
      "right" : "if (tokenLen == 2)",
      "info" : "IfStatement[22926-23101]:IfStatement[22926-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22945-23020]:Block[22945-23020]"
    }, {
      "left" : "rule = TwoDigitMonthField.INSTANCE;",
      "right" : "rule = TwoDigitMonthField.INSTANCE;",
      "info" : "ExpressionStatement[22967-23002]:ExpressionStatement[22967-23002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23026-23101]:Block[23026-23101]"
    }, {
      "left" : "rule = UnpaddedMonthField.INSTANCE;",
      "right" : "rule = UnpaddedMonthField.INSTANCE;",
      "info" : "ExpressionStatement[23048-23083]:ExpressionStatement[23048-23083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23118-23124]:BreakStatement[23118-23124]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[23137-23146]:SwitchCase[23137-23146]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[23188-23245]:ExpressionStatement[23188-23245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23262-23268]:BreakStatement[23262-23268]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[23281-23290]:SwitchCase[23281-23290]"
    }, {
      "left" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "right" : "rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));",
      "info" : "ExpressionStatement[23340-23410]:ExpressionStatement[23340-23410]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23427-23433]:BreakStatement[23427-23433]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[23446-23455]:SwitchCase[23446-23455]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);",
      "info" : "ExpressionStatement[23503-23559]:ExpressionStatement[23503-23559]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23576-23582]:BreakStatement[23576-23582]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[23595-23604]:SwitchCase[23595-23604]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MINUTE, tokenLen);",
      "info" : "ExpressionStatement[23648-23699]:ExpressionStatement[23648-23699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23716-23722]:BreakStatement[23716-23722]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[23735-23744]:SwitchCase[23735-23744]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.SECOND, tokenLen);",
      "info" : "ExpressionStatement[23790-23841]:ExpressionStatement[23790-23841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23858-23864]:BreakStatement[23858-23864]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[23877-23886]:SwitchCase[23877-23886]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);",
      "info" : "ExpressionStatement[23927-23983]:ExpressionStatement[23927-23983]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24000-24006]:BreakStatement[24000-24006]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[24019-24028]:SwitchCase[24019-24028]"
    }, {
      "left" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "right" : "rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);",
      "info" : "ExpressionStatement[24067-24151]:ExpressionStatement[24067-24151]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24168-24174]:BreakStatement[24168-24174]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[24187-24196]:SwitchCase[24187-24196]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24237-24293]:ExpressionStatement[24237-24293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24310-24316]:BreakStatement[24310-24316]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[24329-24338]:SwitchCase[24329-24338]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24388-24453]:ExpressionStatement[24388-24453]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24470-24476]:BreakStatement[24470-24476]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[24489-24498]:SwitchCase[24489-24498]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);",
      "info" : "ExpressionStatement[24540-24597]:ExpressionStatement[24540-24597]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24614-24620]:BreakStatement[24614-24620]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[24633-24642]:SwitchCase[24633-24642]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);",
      "info" : "ExpressionStatement[24685-24743]:ExpressionStatement[24685-24743]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24760-24766]:BreakStatement[24760-24766]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[24779-24788]:SwitchCase[24779-24788]"
    }, {
      "left" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "right" : "rule = new TextField(Calendar.AM_PM, AmPmStrings);",
      "info" : "ExpressionStatement[24828-24878]:ExpressionStatement[24828-24878]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24895-24901]:BreakStatement[24895-24901]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[24914-24923]:SwitchCase[24914-24923]"
    }, {
      "left" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "right" : "rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));",
      "info" : "ExpressionStatement[24963-25044]:ExpressionStatement[24963-25044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25061-25067]:BreakStatement[25061-25067]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[25080-25089]:SwitchCase[25080-25089]"
    }, {
      "left" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "right" : "rule = selectNumberRule(Calendar.HOUR, tokenLen);",
      "info" : "ExpressionStatement[25131-25180]:ExpressionStatement[25131-25180]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25197-25203]:BreakStatement[25197-25203]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[25216-25225]:SwitchCase[25216-25225]"
    }, {
      "left" : "if (tokenLen >= 4)",
      "right" : "if (tokenLen >= 4)",
      "info" : "IfStatement[25262-25528]:IfStatement[25262-25528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25281-25401]:Block[25281-25401]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);",
      "info" : "ExpressionStatement[25303-25383]:ExpressionStatement[25303-25383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25407-25528]:Block[25407-25528]"
    }, {
      "left" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "right" : "rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);",
      "info" : "ExpressionStatement[25429-25510]:ExpressionStatement[25429-25510]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25545-25551]:BreakStatement[25545-25551]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[25564-25573]:SwitchCase[25564-25573]"
    }, {
      "left" : "if (tokenLen == 1)",
      "right" : "if (tokenLen == 1)",
      "info" : "IfStatement[25611-25801]:IfStatement[25611-25801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25630-25714]:Block[25630-25714]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_NO_COLON;",
      "info" : "ExpressionStatement[25652-25696]:ExpressionStatement[25652-25696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25720-25801]:Block[25720-25801]"
    }, {
      "left" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "right" : "rule = TimeZoneNumberRule.INSTANCE_COLON;",
      "info" : "ExpressionStatement[25742-25783]:ExpressionStatement[25742-25783]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25818-25824]:BreakStatement[25818-25824]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25837-25847]:SwitchCase[25837-25847]"
    }, {
      "left" : "String sub = token.substring(1);",
      "right" : "String sub = token.substring(1);",
      "info" : "VariableDeclarationStatement[25880-25912]:VariableDeclarationStatement[25880-25912]"
    }, {
      "left" : "if (sub.length() == 1)",
      "right" : "if (sub.length() == 1)",
      "info" : "IfStatement[25929-26111]:IfStatement[25929-26111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25952-26035]:Block[25952-26035]"
    }, {
      "left" : "rule = new CharacterLiteral(sub.charAt(0));",
      "right" : "rule = new CharacterLiteral(sub.charAt(0));",
      "info" : "ExpressionStatement[25974-26017]:ExpressionStatement[25974-26017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26041-26111]:Block[26041-26111]"
    }, {
      "left" : "rule = new StringLiteral(sub);",
      "right" : "rule = new StringLiteral(sub);",
      "info" : "ExpressionStatement[26063-26093]:ExpressionStatement[26063-26093]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26128-26134]:BreakStatement[26128-26134]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26147-26155]:SwitchCase[26147-26155]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "right" : "throw new IllegalArgumentException(\"Illegal pattern component: \" + token);",
      "info" : "ThrowStatement[26172-26246]:ThrowStatement[26172-26246]"
    }, {
      "left" : "rules.add(rule);",
      "right" : "rules.add(rule);",
      "info" : "ExpressionStatement[26274-26290]:ExpressionStatement[26274-26290]"
    }, {
      "left" : "return rules;",
      "right" : "return rules;",
      "info" : "ReturnStatement[26310-26323]:ReturnStatement[26310-26323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26569-28051]:Block[26569-28051]"
    }, {
      "left" : "StringBuilder buf = new StringBuilder();",
      "right" : "StringBuilder buf = new StringBuilder();",
      "info" : "VariableDeclarationStatement[26579-26619]:VariableDeclarationStatement[26579-26619]"
    }, {
      "left" : "int i = indexRef[0];",
      "right" : "int i = indexRef[0];",
      "info" : "VariableDeclarationStatement[26629-26649]:VariableDeclarationStatement[26629-26649]"
    }, {
      "left" : "int length = pattern.length();",
      "right" : "int length = pattern.length();",
      "info" : "VariableDeclarationStatement[26658-26688]:VariableDeclarationStatement[26658-26688]"
    }, {
      "left" : "char c = pattern.charAt(i);",
      "right" : "char c = pattern.charAt(i);",
      "info" : "VariableDeclarationStatement[26698-26725]:VariableDeclarationStatement[26698-26725]"
    }, {
      "left" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "right" : "if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')",
      "info" : "IfStatement[26734-27988]:IfStatement[26734-27988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26784-27184]:Block[26784-27184]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[26894-26908]:ExpressionStatement[26894-26908]"
    }, {
      "left" : "while (i + 1 < length)",
      "right" : "while (i + 1 < length)",
      "info" : "WhileStatement[26922-27174]:WhileStatement[26922-27174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26945-27174]:Block[26945-27174]"
    }, {
      "left" : "char peek = pattern.charAt(i + 1);",
      "right" : "char peek = pattern.charAt(i + 1);",
      "info" : "VariableDeclarationStatement[26963-26997]:VariableDeclarationStatement[26963-26997]"
    }, {
      "left" : "if (peek == c)",
      "right" : "if (peek == c)",
      "info" : "IfStatement[27014-27160]:IfStatement[27014-27160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27029-27108]:Block[27029-27108]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27051-27065]:ExpressionStatement[27051-27065]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27086-27090]:ExpressionStatement[27086-27090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27114-27160]:Block[27114-27160]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27136-27142]:BreakStatement[27136-27142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27190-27988]:Block[27190-27988]"
    }, {
      "left" : "buf.append('\\'');",
      "right" : "buf.append('\\'');",
      "info" : "ExpressionStatement[27253-27270]:ExpressionStatement[27253-27270]"
    }, {
      "left" : "boolean inLiteral = false;",
      "right" : "boolean inLiteral = false;",
      "info" : "VariableDeclarationStatement[27284-27310]:VariableDeclarationStatement[27284-27310]"
    }, {
      "left" : "for (; i < length; i++)",
      "right" : "for (; i < length; i++)",
      "info" : "ForStatement[27324-27978]:ForStatement[27324-27978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27348-27978]:Block[27348-27978]"
    }, {
      "left" : "c = pattern.charAt(i);",
      "right" : "c = pattern.charAt(i);",
      "info" : "ExpressionStatement[27366-27388]:ExpressionStatement[27366-27388]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[27406-27964]:IfStatement[27406-27964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27421-27736]:Block[27421-27736]"
    }, {
      "left" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "right" : "if (i + 1 < length && pattern.charAt(i + 1) == '\\'')",
      "info" : "IfStatement[27443-27718]:IfStatement[27443-27718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27496-27641]:Block[27496-27641]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[27576-27580]:ExpressionStatement[27576-27580]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27605-27619]:ExpressionStatement[27605-27619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27647-27718]:Block[27647-27718]"
    }, {
      "left" : "inLiteral = !inLiteral;",
      "right" : "inLiteral = !inLiteral;",
      "info" : "ExpressionStatement[27673-27696]:ExpressionStatement[27673-27696]"
    }, {
      "left" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "right" : "if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[27742-27964]:IfStatement[27742-27964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27833-27904]:Block[27833-27904]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[27855-27859]:ExpressionStatement[27855-27859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27880-27886]:BreakStatement[27880-27886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27910-27964]:Block[27910-27964]"
    }, {
      "left" : "buf.append(c);",
      "right" : "buf.append(c);",
      "info" : "ExpressionStatement[27932-27946]:ExpressionStatement[27932-27946]"
    }, {
      "left" : "indexRef[0] = i;",
      "right" : "indexRef[0] = i;",
      "info" : "ExpressionStatement[27998-28014]:ExpressionStatement[27998-28014]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[28023-28045]:ReturnStatement[28023-28045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28352-28605]:Block[28352-28605]"
    }, {
      "left" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "right" : "switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }",
      "info" : "SwitchStatement[28362-28599]:SwitchStatement[28362-28599]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[28389-28396]:SwitchCase[28389-28396]"
    }, {
      "left" : "return new UnpaddedNumberField(field);",
      "right" : "return new UnpaddedNumberField(field);",
      "info" : "ReturnStatement[28409-28447]:ReturnStatement[28409-28447]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[28456-28463]:SwitchCase[28456-28463]"
    }, {
      "left" : "return new TwoDigitNumberField(field);",
      "right" : "return new TwoDigitNumberField(field);",
      "info" : "ReturnStatement[28476-28514]:ReturnStatement[28476-28514]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28523-28531]:SwitchCase[28523-28531]"
    }, {
      "left" : "return new PaddedNumberField(field, padding);",
      "right" : "return new PaddedNumberField(field, padding);",
      "info" : "ReturnStatement[28544-28589]:ReturnStatement[28544-28589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29116-29581]:Block[29116-29581]"
    }, {
      "left" : "if (obj instanceof Date)",
      "right" : "if (obj instanceof Date)",
      "info" : "IfStatement[29126-29575]:IfStatement[29126-29575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29151-29213]:Block[29151-29213]"
    }, {
      "left" : "return format((Date) obj, toAppendTo);",
      "right" : "return format((Date) obj, toAppendTo);",
      "info" : "ReturnStatement[29165-29203]:ReturnStatement[29165-29203]"
    }, {
      "left" : "if (obj instanceof Calendar)",
      "right" : "if (obj instanceof Calendar)",
      "info" : "IfStatement[29219-29575]:IfStatement[29219-29575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29248-29314]:Block[29248-29314]"
    }, {
      "left" : "return format((Calendar) obj, toAppendTo);",
      "right" : "return format((Calendar) obj, toAppendTo);",
      "info" : "ReturnStatement[29262-29304]:ReturnStatement[29262-29304]"
    }, {
      "left" : "if (obj instanceof Long)",
      "right" : "if (obj instanceof Long)",
      "info" : "IfStatement[29320-29575]:IfStatement[29320-29575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29345-29421]:Block[29345-29421]"
    }, {
      "left" : "return format(((Long) obj).longValue(), toAppendTo);",
      "right" : "return format(((Long) obj).longValue(), toAppendTo);",
      "info" : "ReturnStatement[29359-29411]:ReturnStatement[29359-29411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29427-29575]:Block[29427-29575]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "right" : "throw new IllegalArgumentException(\"Unknown class: \" +\n                (obj == null ? \"<null>\" : obj.getClass().getName()));",
      "info" : "ThrowStatement[29441-29565]:ThrowStatement[29441-29565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29814-29862]:Block[29814-29862]"
    }, {
      "left" : "return format(new Date(millis));",
      "right" : "return format(new Date(millis));",
      "info" : "ReturnStatement[29824-29856]:ReturnStatement[29824-29856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30049-30215]:Block[30049-30215]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[30059-30105]:VariableDeclarationStatement[30059-30105]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[30114-30130]:ExpressionStatement[30114-30130]"
    }, {
      "left" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[30139-30209]:ReturnStatement[30139-30209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30422-30511]:Block[30422-30511]"
    }, {
      "left" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "right" : "return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();",
      "info" : "ReturnStatement[30432-30505]:ReturnStatement[30432-30505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30870-30923]:Block[30870-30923]"
    }, {
      "left" : "return format(new Date(millis), buf);",
      "right" : "return format(new Date(millis), buf);",
      "info" : "ReturnStatement[30880-30917]:ReturnStatement[30880-30917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31237-31359]:Block[31237-31359]"
    }, {
      "left" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "right" : "Calendar c = new GregorianCalendar(mTimeZone);",
      "info" : "VariableDeclarationStatement[31247-31293]:VariableDeclarationStatement[31247-31293]"
    }, {
      "left" : "c.setTime(date);",
      "right" : "c.setTime(date);",
      "info" : "ExpressionStatement[31302-31318]:ExpressionStatement[31302-31318]"
    }, {
      "left" : "return applyRules(c, buf);",
      "right" : "return applyRules(c, buf);",
      "info" : "ReturnStatement[31327-31353]:ReturnStatement[31327-31353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32210-32397]:Block[32255-32442]"
    }, {
      "left" : "Rule[] rules = mRules;",
      "right" : "Rule[] rules = mRules;",
      "info" : "VariableDeclarationStatement[32220-32242]:VariableDeclarationStatement[32265-32287]"
    }, {
      "left" : "int len = mRules.length;",
      "right" : "int len = mRules.length;",
      "info" : "VariableDeclarationStatement[32251-32275]:VariableDeclarationStatement[32296-32320]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[32284-32371]:ForStatement[32329-32416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32314-32371]:Block[32359-32416]"
    }, {
      "left" : "rules[i].appendTo(buf, calendar);",
      "right" : "rules[i].appendTo(buf, calendar);",
      "info" : "ExpressionStatement[32328-32361]:ExpressionStatement[32373-32406]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[32380-32391]:ReturnStatement[32425-32436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32766-32849]:Block[32811-32894]"
    }, {
      "left" : "pos.setIndex(0);",
      "right" : "pos.setIndex(0);",
      "info" : "ExpressionStatement[32776-32792]:ExpressionStatement[32821-32837]"
    }, {
      "left" : "pos.setErrorIndex(0);",
      "right" : "pos.setErrorIndex(0);",
      "info" : "ExpressionStatement[32801-32822]:ExpressionStatement[32846-32867]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32831-32843]:ReturnStatement[32876-32888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33134-33166]:Block[33179-33211]"
    }, {
      "left" : "return mPattern;",
      "right" : "return mPattern;",
      "info" : "ReturnStatement[33144-33160]:ReturnStatement[33189-33205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33558-33591]:Block[33603-33636]"
    }, {
      "left" : "return mTimeZone;",
      "right" : "return mTimeZone;",
      "info" : "ReturnStatement[33568-33585]:ReturnStatement[33613-33630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33881-33920]:Block[33926-33965]"
    }, {
      "left" : "return mTimeZoneForced;",
      "right" : "return mTimeZoneForced;",
      "info" : "ReturnStatement[33891-33914]:ReturnStatement[33936-33959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34056-34087]:Block[34101-34132]"
    }, {
      "left" : "return mLocale;",
      "right" : "return mLocale;",
      "info" : "ReturnStatement[34066-34081]:ReturnStatement[34111-34126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34409-34451]:Block[34454-34496]"
    }, {
      "left" : "return mMaxLengthEstimate;",
      "right" : "return mMaxLengthEstimate;",
      "info" : "ReturnStatement[34419-34445]:ReturnStatement[34464-34490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34756-35338]:Block[34801-35383]"
    }, {
      "left" : "if (obj instanceof FastDateFormat == false)",
      "right" : "if (obj instanceof FastDateFormat == false)",
      "info" : "IfStatement[34766-34847]:IfStatement[34811-34892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34810-34847]:Block[34855-34892]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34824-34837]:ReturnStatement[34869-34882]"
    }, {
      "left" : "FastDateFormat other = (FastDateFormat) obj;",
      "right" : "FastDateFormat other = (FastDateFormat) obj;",
      "info" : "VariableDeclarationStatement[34856-34900]:VariableDeclarationStatement[34901-34945]"
    }, {
      "left" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "right" : "if (\n            (mPattern == other.mPattern || mPattern.equals(other.mPattern)) &&\n            (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) &&\n            (mLocale == other.mLocale || mLocale.equals(other.mLocale)) &&\n            (mTimeZoneForced == other.mTimeZoneForced) &&\n            (mLocaleForced == other.mLocaleForced))",
      "info" : "IfStatement[34909-35310]:IfStatement[34954-35355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35274-35310]:Block[35319-35355]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35288-35300]:ReturnStatement[35333-35345]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35319-35332]:ReturnStatement[35364-35377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35510-35762]:Block[35555-35807]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[35520-35534]:VariableDeclarationStatement[35565-35579]"
    }, {
      "left" : "total += mPattern.hashCode();",
      "right" : "total += mPattern.hashCode();",
      "info" : "ExpressionStatement[35543-35572]:ExpressionStatement[35588-35617]"
    }, {
      "left" : "total += mTimeZone.hashCode();",
      "right" : "total += mTimeZone.hashCode();",
      "info" : "ExpressionStatement[35581-35611]:ExpressionStatement[35626-35656]"
    }, {
      "left" : "total += (mTimeZoneForced ? 1 : 0);",
      "right" : "total += (mTimeZoneForced ? 1 : 0);",
      "info" : "ExpressionStatement[35620-35655]:ExpressionStatement[35665-35700]"
    }, {
      "left" : "total += mLocale.hashCode();",
      "right" : "total += mLocale.hashCode();",
      "info" : "ExpressionStatement[35664-35692]:ExpressionStatement[35709-35737]"
    }, {
      "left" : "total += (mLocaleForced ? 1 : 0);",
      "right" : "total += (mLocaleForced ? 1 : 0);",
      "info" : "ExpressionStatement[35701-35734]:ExpressionStatement[35746-35779]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[35743-35756]:ReturnStatement[35788-35801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35930-35988]:Block[35975-36033]"
    }, {
      "left" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "right" : "return \"FastDateFormat[\" + mPattern + \"]\";",
      "info" : "ReturnStatement[35940-35982]:ReturnStatement[35985-36027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36515-36570]:Block[36560-36615]"
    }, {
      "left" : "in.defaultReadObject();",
      "right" : "in.defaultReadObject();",
      "info" : "ExpressionStatement[36525-36548]:ExpressionStatement[36570-36593]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[36557-36564]:ExpressionStatement[36602-36609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38040-38079]:Block[38085-38124]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[38054-38069]:ExpressionStatement[38099-38114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38166-38199]:Block[38211-38244]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[38180-38189]:ReturnStatement[38225-38234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38319-38365]:Block[38364-38410]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[38333-38355]:ExpressionStatement[38378-38400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38761-38800]:Block[38806-38845]"
    }, {
      "left" : "mValue = value;",
      "right" : "mValue = value;",
      "info" : "ExpressionStatement[38775-38790]:ExpressionStatement[38820-38835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38887-38934]:Block[38932-38979]"
    }, {
      "left" : "return mValue.length();",
      "right" : "return mValue.length();",
      "info" : "ReturnStatement[38901-38924]:ReturnStatement[38946-38969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39054-39100]:Block[39099-39145]"
    }, {
      "left" : "buffer.append(mValue);",
      "right" : "buffer.append(mValue);",
      "info" : "ExpressionStatement[39068-39090]:ExpressionStatement[39113-39135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39578-39647]:Block[39623-39692]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[39592-39607]:ExpressionStatement[39637-39652]"
    }, {
      "left" : "mValues = values;",
      "right" : "mValues = values;",
      "info" : "ExpressionStatement[39620-39637]:ExpressionStatement[39665-39682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39734-39990]:Block[39779-40035]"
    }, {
      "left" : "int max = 0;",
      "right" : "int max = 0;",
      "info" : "VariableDeclarationStatement[39748-39760]:VariableDeclarationStatement[39793-39805]"
    }, {
      "left" : "for (int i=mValues.length; --i >= 0)",
      "right" : "for (int i=mValues.length; --i >= 0)",
      "info" : "ForStatement[39773-39956]:ForStatement[39818-40001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39812-39956]:Block[39857-40001]"
    }, {
      "left" : "int len = mValues[i].length();",
      "right" : "int len = mValues[i].length();",
      "info" : "VariableDeclarationStatement[39830-39860]:VariableDeclarationStatement[39875-39905]"
    }, {
      "left" : "if (len > max)",
      "right" : "if (len > max)",
      "info" : "IfStatement[39877-39942]:IfStatement[39922-39987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39892-39942]:Block[39937-39987]"
    }, {
      "left" : "max = len;",
      "right" : "max = len;",
      "info" : "ExpressionStatement[39914-39924]:ExpressionStatement[39959-39969]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[39969-39980]:ReturnStatement[40014-40025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40110-40179]:Block[40155-40224]"
    }, {
      "left" : "buffer.append(mValues[calendar.get(mField)]);",
      "right" : "buffer.append(mValues[calendar.get(mField)]);",
      "info" : "ExpressionStatement[40124-40169]:ExpressionStatement[40169-40214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40567-40606]:Block[40612-40651]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[40581-40596]:ExpressionStatement[40626-40641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40693-40726]:Block[40738-40771]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[40707-40716]:ReturnStatement[40752-40761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40846-40909]:Block[40891-40954]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[40860-40899]:ExpressionStatement[40905-40944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41027-41363]:Block[41072-41408]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[41041-41353]:IfStatement[41086-41398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41057-41124]:Block[41102-41169]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[41075-41110]:ExpressionStatement[41120-41155]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[41130-41353]:IfStatement[41175-41398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41147-41276]:Block[41192-41321]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[41165-41205]:ExpressionStatement[41210-41250]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[41222-41262]:ExpressionStatement[41267-41307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41282-41353]:Block[41327-41398]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[41300-41339]:ExpressionStatement[41345-41384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41722-41754]:Block[41767-41799]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[41736-41744]:SuperConstructorInvocation[41781-41789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41841-41874]:Block[41886-41919]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[41855-41864]:ReturnStatement[41900-41909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41994-42069]:Block[42039-42114]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[42008-42059]:ExpressionStatement[42053-42104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42187-42429]:Block[42232-42474]"
    }, {
      "left" : "if (value < 10)",
      "right" : "if (value < 10)",
      "info" : "IfStatement[42201-42419]:IfStatement[42246-42464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42217-42284]:Block[42262-42329]"
    }, {
      "left" : "buffer.append((char)(value + '0'));",
      "right" : "buffer.append((char)(value + '0'));",
      "info" : "ExpressionStatement[42235-42270]:ExpressionStatement[42280-42315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42290-42419]:Block[42335-42464]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[42308-42348]:ExpressionStatement[42353-42393]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[42365-42405]:ExpressionStatement[42410-42450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42875-43110]:Block[42920-43155]"
    }, {
      "left" : "if (size < 3)",
      "right" : "if (size < 3)",
      "info" : "IfStatement[42889-43046]:IfStatement[42934-43091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42903-43046]:Block[42948-43091]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[42995-43032]:ThrowStatement[43040-43077]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[43059-43074]:ExpressionStatement[43104-43119]"
    }, {
      "left" : "mSize = size;",
      "right" : "mSize = size;",
      "info" : "ExpressionStatement[43087-43100]:ExpressionStatement[43132-43145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43197-43230]:Block[43242-43275]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[43211-43220]:ReturnStatement[43256-43265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43350-43413]:Block[43395-43458]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[43364-43403]:ExpressionStatement[43409-43448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43531-44299]:Block[43576-44344]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[43545-44289]:IfStatement[43590-44334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43562-43799]:Block[43607-43844]"
    }, {
      "left" : "for (int i = mSize; --i >= 2)",
      "right" : "for (int i = mSize; --i >= 2)",
      "info" : "ForStatement[43580-43671]:ForStatement[43625-43716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43612-43671]:Block[43657-43716]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[43634-43653]:ExpressionStatement[43679-43698]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[43688-43728]:ExpressionStatement[43733-43773]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[43745-43785]:ExpressionStatement[43790-43830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43805-44289]:Block[43850-44334]"
    }, {
      "left" : "int digits;",
      "right" : "int digits;",
      "info" : "VariableDeclarationStatement[43823-43834]:VariableDeclarationStatement[43868-43879]"
    }, {
      "left" : "if (value < 1000)",
      "right" : "if (value < 1000)",
      "info" : "IfStatement[43851-44106]:IfStatement[43896-44151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43869-43920]:Block[43914-43965]"
    }, {
      "left" : "digits = 3;",
      "right" : "digits = 3;",
      "info" : "ExpressionStatement[43891-43902]:ExpressionStatement[43936-43947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43926-44106]:Block[43971-44151]"
    }, {
      "left" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "right" : "Validate.isTrue(value > -1, \"Negative values should not be possible\", value);",
      "info" : "ExpressionStatement[43948-44025]:ExpressionStatement[43993-44070]"
    }, {
      "left" : "digits = Integer.toString(value).length();",
      "right" : "digits = Integer.toString(value).length();",
      "info" : "ExpressionStatement[44046-44088]:ExpressionStatement[44091-44133]"
    }, {
      "left" : "for (int i = mSize; --i >= digits)",
      "right" : "for (int i = mSize; --i >= digits)",
      "info" : "ForStatement[44123-44219]:ForStatement[44168-44264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44160-44219]:Block[44205-44264]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[44182-44201]:ExpressionStatement[44227-44246]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[44236-44275]:ExpressionStatement[44281-44320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44688-44727]:Block[44733-44772]"
    }, {
      "left" : "mField = field;",
      "right" : "mField = field;",
      "info" : "ExpressionStatement[44702-44717]:ExpressionStatement[44747-44762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44814-44847]:Block[44859-44892]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[44828-44837]:ReturnStatement[44873-44882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44967-45030]:Block[45012-45075]"
    }, {
      "left" : "appendTo(buffer, calendar.get(mField));",
      "right" : "appendTo(buffer, calendar.get(mField));",
      "info" : "ExpressionStatement[44981-45020]:ExpressionStatement[45026-45065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45148-45395]:Block[45193-45440]"
    }, {
      "left" : "if (value < 100)",
      "right" : "if (value < 100)",
      "info" : "IfStatement[45162-45385]:IfStatement[45207-45430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45179-45308]:Block[45224-45353]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[45197-45237]:ExpressionStatement[45242-45282]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[45254-45294]:ExpressionStatement[45299-45339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45314-45385]:Block[45359-45430]"
    }, {
      "left" : "buffer.append(Integer.toString(value));",
      "right" : "buffer.append(Integer.toString(value));",
      "info" : "ExpressionStatement[45332-45371]:ExpressionStatement[45377-45416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45737-45769]:Block[45782-45814]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[45751-45759]:SuperConstructorInvocation[45796-45804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45856-45889]:Block[45901-45934]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[45870-45879]:ReturnStatement[45915-45924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46009-46085]:Block[46054-46130]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "right" : "appendTo(buffer, calendar.get(Calendar.YEAR) % 100);",
      "info" : "ExpressionStatement[46023-46075]:ExpressionStatement[46068-46120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46203-46320]:Block[46248-46365]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[46217-46257]:ExpressionStatement[46262-46302]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[46270-46310]:ExpressionStatement[46315-46355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46668-46700]:Block[46713-46745]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[46682-46690]:SuperConstructorInvocation[46727-46735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46787-46820]:Block[46832-46865]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[46801-46810]:ReturnStatement[46846-46855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46940-47015]:Block[46985-47060]"
    }, {
      "left" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "right" : "appendTo(buffer, calendar.get(Calendar.MONTH) + 1);",
      "info" : "ExpressionStatement[46954-47005]:ExpressionStatement[46999-47050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47133-47250]:Block[47178-47295]"
    }, {
      "left" : "buffer.append((char)(value / 10 + '0'));",
      "right" : "buffer.append((char)(value / 10 + '0'));",
      "info" : "ExpressionStatement[47147-47187]:ExpressionStatement[47192-47232]"
    }, {
      "left" : "buffer.append((char)(value % 10 + '0'));",
      "right" : "buffer.append((char)(value % 10 + '0'));",
      "info" : "ExpressionStatement[47200-47240]:ExpressionStatement[47245-47285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47669-47706]:Block[47714-47751]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[47683-47696]:ExpressionStatement[47728-47741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47793-47847]:Block[47838-47892]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[47807-47837]:ReturnStatement[47852-47882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47967-48187]:Block[48012-48232]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR);",
      "right" : "int value = calendar.get(Calendar.HOUR);",
      "info" : "VariableDeclarationStatement[47981-48021]:VariableDeclarationStatement[48026-48066]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[48034-48134]:IfStatement[48079-48179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48050-48134]:Block[48095-48179]"
    }, {
      "left" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "right" : "value = calendar.getLeastMaximum(Calendar.HOUR) + 1;",
      "info" : "ExpressionStatement[48068-48120]:ExpressionStatement[48113-48165]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48147-48177]:ExpressionStatement[48192-48222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48299-48353]:Block[48344-48398]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[48313-48343]:ExpressionStatement[48358-48388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48789-48826]:Block[48834-48871]"
    }, {
      "left" : "mRule = rule;",
      "right" : "mRule = rule;",
      "info" : "ExpressionStatement[48803-48816]:ExpressionStatement[48848-48861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48913-48967]:Block[48958-49012]"
    }, {
      "left" : "return mRule.estimateLength();",
      "right" : "return mRule.estimateLength();",
      "info" : "ReturnStatement[48927-48957]:ReturnStatement[48972-49002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49087-49316]:Block[49132-49361]"
    }, {
      "left" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "right" : "int value = calendar.get(Calendar.HOUR_OF_DAY);",
      "info" : "VariableDeclarationStatement[49101-49148]:VariableDeclarationStatement[49146-49193]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[49161-49263]:IfStatement[49206-49308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49177-49263]:Block[49222-49308]"
    }, {
      "left" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "right" : "value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;",
      "info" : "ExpressionStatement[49195-49249]:ExpressionStatement[49240-49294]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[49276-49306]:ExpressionStatement[49321-49351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49428-49482]:Block[49473-49527]"
    }, {
      "left" : "mRule.appendTo(buffer, value);",
      "right" : "mRule.appendTo(buffer, value);",
      "info" : "ExpressionStatement[49442-49472]:ExpressionStatement[49487-49517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50306-50752]:Block[50351-50797]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[50320-50341]:ExpressionStatement[50365-50386]"
    }, {
      "left" : "mTimeZoneForced = timeZoneForced;",
      "right" : "mTimeZoneForced = timeZoneForced;",
      "info" : "ExpressionStatement[50354-50387]:ExpressionStatement[50399-50432]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[50400-50417]:ExpressionStatement[50445-50462]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[50430-50445]:ExpressionStatement[50475-50490]"
    }, {
      "left" : "if (timeZoneForced)",
      "right" : "if (timeZoneForced)",
      "info" : "IfStatement[50459-50742]:IfStatement[50504-50787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50479-50653]:Block[50524-50698]"
    }, {
      "left" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "right" : "mStandard = getTimeZoneDisplay(timeZone, false, style, locale);",
      "info" : "ExpressionStatement[50497-50560]:ExpressionStatement[50542-50605]"
    }, {
      "left" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "right" : "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);",
      "info" : "ExpressionStatement[50577-50639]:ExpressionStatement[50622-50684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50659-50742]:Block[50704-50787]"
    }, {
      "left" : "mStandard = null;",
      "right" : "mStandard = null;",
      "info" : "ExpressionStatement[50677-50694]:ExpressionStatement[50722-50739]"
    }, {
      "left" : "mDaylight = null;",
      "right" : "mDaylight = null;",
      "info" : "ExpressionStatement[50711-50728]:ExpressionStatement[50756-50773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50839-51097]:Block[50884-51142]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[50853-51087]:IfStatement[50898-51132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50874-50962]:Block[50919-51007]"
    }, {
      "left" : "return Math.max(mStandard.length(), mDaylight.length());",
      "right" : "return Math.max(mStandard.length(), mDaylight.length());",
      "info" : "ReturnStatement[50892-50948]:ReturnStatement[50937-50993]"
    }, {
      "left" : "if (mStyle == TimeZone.SHORT)",
      "right" : "if (mStyle == TimeZone.SHORT)",
      "info" : "IfStatement[50968-51087]:IfStatement[51013-51132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50998-51039]:Block[51043-51084]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[51016-51025]:ReturnStatement[51061-51070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51045-51087]:Block[51090-51132]"
    }, {
      "left" : "return 40;",
      "right" : "return 40;",
      "info" : "ReturnStatement[51063-51073]:ReturnStatement[51108-51118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51217-51898]:Block[51262-51943]"
    }, {
      "left" : "if (mTimeZoneForced)",
      "right" : "if (mTimeZoneForced)",
      "info" : "IfStatement[51231-51888]:IfStatement[51276-51933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51252-51495]:Block[51297-51540]"
    }, {
      "left" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[51270-51481]:IfStatement[51315-51526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51345-51410]:Block[51390-51455]"
    }, {
      "left" : "buffer.append(mDaylight);",
      "right" : "buffer.append(mDaylight);",
      "info" : "ExpressionStatement[51367-51392]:ExpressionStatement[51412-51437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51416-51481]:Block[51461-51526]"
    }, {
      "left" : "buffer.append(mStandard);",
      "right" : "buffer.append(mStandard);",
      "info" : "ExpressionStatement[51438-51463]:ExpressionStatement[51483-51508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51501-51888]:Block[51546-51933]"
    }, {
      "left" : "TimeZone timeZone = calendar.getTimeZone();",
      "right" : "TimeZone timeZone = calendar.getTimeZone();",
      "info" : "VariableDeclarationStatement[51519-51562]:VariableDeclarationStatement[51564-51607]"
    }, {
      "left" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "right" : "if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0)",
      "info" : "IfStatement[51579-51874]:IfStatement[51624-51919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51653-51760]:Block[51698-51805]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));",
      "info" : "ExpressionStatement[51675-51742]:ExpressionStatement[51720-51787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51766-51874]:Block[51811-51919]"
    }, {
      "left" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "right" : "buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));",
      "info" : "ExpressionStatement[51788-51856]:ExpressionStatement[51833-51901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52589-52628]:Block[52634-52673]"
    }, {
      "left" : "mColon = colon;",
      "right" : "mColon = colon;",
      "info" : "ExpressionStatement[52603-52618]:ExpressionStatement[52648-52663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52715-52748]:Block[52760-52793]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[52729-52738]:ReturnStatement[52774-52783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52868-53603]:Block[52913-53648]"
    }, {
      "left" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "right" : "int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);",
      "info" : "VariableDeclarationStatement[52882-52966]:VariableDeclarationStatement[52927-53011]"
    }, {
      "left" : "if (offset < 0)",
      "right" : "if (offset < 0)",
      "info" : "IfStatement[52992-53150]:IfStatement[53037-53195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53008-53093]:Block[53053-53138]"
    }, {
      "left" : "buffer.append('-');",
      "right" : "buffer.append('-');",
      "info" : "ExpressionStatement[53026-53045]:ExpressionStatement[53071-53090]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[53062-53079]:ExpressionStatement[53107-53124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53099-53150]:Block[53144-53195]"
    }, {
      "left" : "buffer.append('+');",
      "right" : "buffer.append('+');",
      "info" : "ExpressionStatement[53117-53136]:ExpressionStatement[53162-53181]"
    }, {
      "left" : "int hours = offset / (60 * 60 * 1000);",
      "right" : "int hours = offset / (60 * 60 * 1000);",
      "info" : "VariableDeclarationStatement[53176-53214]:VariableDeclarationStatement[53221-53259]"
    }, {
      "left" : "buffer.append((char)(hours / 10 + '0'));",
      "right" : "buffer.append((char)(hours / 10 + '0'));",
      "info" : "ExpressionStatement[53227-53267]:ExpressionStatement[53272-53312]"
    }, {
      "left" : "buffer.append((char)(hours % 10 + '0'));",
      "right" : "buffer.append((char)(hours % 10 + '0'));",
      "info" : "ExpressionStatement[53280-53320]:ExpressionStatement[53325-53365]"
    }, {
      "left" : "if (mColon)",
      "right" : "if (mColon)",
      "info" : "IfStatement[53346-53409]:IfStatement[53391-53454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53358-53409]:Block[53403-53454]"
    }, {
      "left" : "buffer.append(':');",
      "right" : "buffer.append(':');",
      "info" : "ExpressionStatement[53376-53395]:ExpressionStatement[53421-53440]"
    }, {
      "left" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "right" : "int minutes = offset / (60 * 1000) - 60 * hours;",
      "info" : "VariableDeclarationStatement[53435-53483]:VariableDeclarationStatement[53480-53528]"
    }, {
      "left" : "buffer.append((char)(minutes / 10 + '0'));",
      "right" : "buffer.append((char)(minutes / 10 + '0'));",
      "info" : "ExpressionStatement[53496-53538]:ExpressionStatement[53541-53583]"
    }, {
      "left" : "buffer.append((char)(minutes % 10 + '0'));",
      "right" : "buffer.append((char)(minutes % 10 + '0'));",
      "info" : "ExpressionStatement[53551-53593]:ExpressionStatement[53596-53638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54426-54608]:Block[54471-54653]"
    }, {
      "left" : "mTimeZone = timeZone;",
      "right" : "mTimeZone = timeZone;",
      "info" : "ExpressionStatement[54440-54461]:ExpressionStatement[54485-54506]"
    }, {
      "left" : "if (daylight)",
      "right" : "if (daylight)",
      "info" : "IfStatement[54474-54540]:IfStatement[54519-54585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54488-54540]:Block[54533-54585]"
    }, {
      "left" : "style |= 0x80000000;",
      "right" : "style |= 0x80000000;",
      "info" : "ExpressionStatement[54506-54526]:ExpressionStatement[54551-54571]"
    }, {
      "left" : "mStyle = style;",
      "right" : "mStyle = style;",
      "info" : "ExpressionStatement[54553-54568]:ExpressionStatement[54598-54613]"
    }, {
      "left" : "mLocale = locale;",
      "right" : "mLocale = locale;",
      "info" : "ExpressionStatement[54581-54598]:ExpressionStatement[54626-54643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54707-54771]:Block[54752-54816]"
    }, {
      "left" : "return mStyle * 31 + mLocale.hashCode();",
      "right" : "return mStyle * 31 + mLocale.hashCode();",
      "info" : "ReturnStatement[54721-54761]:ReturnStatement[54766-54806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54882-55305]:Block[54927-55350]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[54896-54957]:IfStatement[54941-55002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54913-54957]:Block[54958-55002]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54931-54943]:ReturnStatement[54976-54988]"
    }, {
      "left" : "if (obj instanceof TimeZoneDisplayKey)",
      "right" : "if (obj instanceof TimeZoneDisplayKey)",
      "info" : "IfStatement[54970-55269]:IfStatement[55015-55314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55009-55269]:Block[55054-55314]"
    }, {
      "left" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "right" : "TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;",
      "info" : "VariableDeclarationStatement[55027-55078]:VariableDeclarationStatement[55072-55123]"
    }, {
      "left" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "right" : "return\n                    mTimeZone.equals(other.mTimeZone) &&\n                    mStyle == other.mStyle &&\n                    mLocale.equals(other.mLocale);",
      "info" : "ReturnStatement[55095-55255]:ReturnStatement[55140-55300]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55282-55295]:ReturnStatement[55327-55340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55926-55989]:Block[55971-56034]"
    }, {
      "left" : "mObj1 = obj1;",
      "right" : "mObj1 = obj1;",
      "info" : "ExpressionStatement[55940-55953]:ExpressionStatement[55985-55998]"
    }, {
      "left" : "mObj2 = obj2;",
      "right" : "mObj2 = obj2;",
      "info" : "ExpressionStatement[55966-55979]:ExpressionStatement[56011-56024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56100-56521]:Block[56145-56566]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[56114-56175]:IfStatement[56159-56220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56131-56175]:Block[56176-56220]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56149-56161]:ReturnStatement[56194-56206]"
    }, {
      "left" : "if (!(obj instanceof Pair))",
      "right" : "if (!(obj instanceof Pair))",
      "info" : "IfStatement[56189-56262]:IfStatement[56234-56307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56217-56262]:Block[56262-56307]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56235-56248]:ReturnStatement[56280-56293]"
    }, {
      "left" : "Pair key = (Pair)obj;",
      "right" : "Pair key = (Pair)obj;",
      "info" : "VariableDeclarationStatement[56276-56297]:VariableDeclarationStatement[56321-56342]"
    }, {
      "left" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "right" : "return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));",
      "info" : "ReturnStatement[56311-56511]:ReturnStatement[56356-56556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56620-56763]:Block[56665-56808]"
    }, {
      "left" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "right" : "return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());",
      "info" : "ReturnStatement[56634-56753]:ReturnStatement[56679-56798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56865-56928]:Block[56910-56973]"
    }, {
      "left" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "right" : "return \"[\" + mObj1 + ':' + mObj2 + ']';",
      "info" : "ReturnStatement[56879-56918]:ReturnStatement[56924-56963]"
    } ]
  },
  "interFileMappings" : { }
}