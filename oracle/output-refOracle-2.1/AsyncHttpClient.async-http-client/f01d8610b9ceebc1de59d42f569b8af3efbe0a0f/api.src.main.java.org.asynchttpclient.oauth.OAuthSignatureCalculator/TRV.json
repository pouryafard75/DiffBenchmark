{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public final static String HEADER_AUTHORIZATION = \"Authorization\";",
      "right" : "public final static String HEADER_AUTHORIZATION = \"Authorization\";",
      "info" : "FieldDeclaration[1751-1817]:FieldDeclaration[1751-1817]"
    }, {
      "left" : "private static final String KEY_OAUTH_CONSUMER_KEY = \"oauth_consumer_key\";",
      "right" : "private static final String KEY_OAUTH_CONSUMER_KEY = \"oauth_consumer_key\";",
      "info" : "FieldDeclaration[1823-1897]:FieldDeclaration[1823-1897]"
    }, {
      "left" : "private static final String KEY_OAUTH_NONCE = \"oauth_nonce\";",
      "right" : "private static final String KEY_OAUTH_NONCE = \"oauth_nonce\";",
      "info" : "FieldDeclaration[1902-1962]:FieldDeclaration[1902-1962]"
    }, {
      "left" : "private static final String KEY_OAUTH_SIGNATURE = \"oauth_signature\";",
      "right" : "private static final String KEY_OAUTH_SIGNATURE = \"oauth_signature\";",
      "info" : "FieldDeclaration[1967-2035]:FieldDeclaration[1967-2035]"
    }, {
      "left" : "private static final String KEY_OAUTH_SIGNATURE_METHOD = \"oauth_signature_method\";",
      "right" : "private static final String KEY_OAUTH_SIGNATURE_METHOD = \"oauth_signature_method\";",
      "info" : "FieldDeclaration[2040-2122]:FieldDeclaration[2040-2122]"
    }, {
      "left" : "private static final String KEY_OAUTH_TIMESTAMP = \"oauth_timestamp\";",
      "right" : "private static final String KEY_OAUTH_TIMESTAMP = \"oauth_timestamp\";",
      "info" : "FieldDeclaration[2127-2195]:FieldDeclaration[2127-2195]"
    }, {
      "left" : "private static final String KEY_OAUTH_TOKEN = \"oauth_token\";",
      "right" : "private static final String KEY_OAUTH_TOKEN = \"oauth_token\";",
      "info" : "FieldDeclaration[2200-2260]:FieldDeclaration[2200-2260]"
    }, {
      "left" : "private static final String KEY_OAUTH_VERSION = \"oauth_version\";",
      "right" : "private static final String KEY_OAUTH_VERSION = \"oauth_version\";",
      "info" : "FieldDeclaration[2265-2329]:FieldDeclaration[2265-2329]"
    }, {
      "left" : "private static final String OAUTH_VERSION_1_0 = \"1.0\";",
      "right" : "private static final String OAUTH_VERSION_1_0 = \"1.0\";",
      "info" : "FieldDeclaration[2335-2389]:FieldDeclaration[2335-2389]"
    }, {
      "left" : "private static final String OAUTH_SIGNATURE_METHOD = \"HMAC-SHA1\";",
      "right" : "private static final String OAUTH_SIGNATURE_METHOD = \"HMAC-SHA1\";",
      "info" : "FieldDeclaration[2394-2459]:FieldDeclaration[2394-2459]"
    }, {
      "left" : "protected static final ThreadLocal<byte[]> NONCE_BUFFER = new ThreadLocal<byte[]>() {\n        protected byte[] initialValue() {\n            return new byte[16];\n        }\n    };",
      "right" : "protected static final ThreadLocal<byte[]> NONCE_BUFFER = new ThreadLocal<byte[]>() {\n        protected byte[] initialValue() {\n            return new byte[16];\n        }\n    };",
      "info" : "FieldDeclaration[2465-2642]:FieldDeclaration[2465-2642]"
    }, {
      "left" : "protected byte[] initialValue()",
      "right" : "protected byte[] initialValue()",
      "info" : "MethodDeclaration[2559-2635]:MethodDeclaration[2559-2635]"
    }, {
      "left" : "protected final ThreadSafeHMAC mac;",
      "right" : "protected final ThreadSafeHMAC mac;",
      "info" : "FieldDeclaration[2648-2683]:FieldDeclaration[2648-2683]"
    }, {
      "left" : "protected final ConsumerKey consumerAuth;",
      "right" : "protected final ConsumerKey consumerAuth;",
      "info" : "FieldDeclaration[2689-2730]:FieldDeclaration[2689-2730]"
    }, {
      "left" : "protected final RequestToken userAuth;",
      "right" : "protected final RequestToken userAuth;",
      "info" : "FieldDeclaration[2736-2774]:FieldDeclaration[2736-2774]"
    }, {
      "left" : "public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth)",
      "right" : "public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth)",
      "info" : "MethodDeclaration[2780-3172]:MethodDeclaration[2780-3172]"
    }, {
      "left" : "public void calculateAndAddSignature(Request request, RequestBuilderBase<?> requestBuilder)",
      "right" : "public void calculateAndAddSignature(Request request, RequestBuilderBase<?> requestBuilder)",
      "info" : "MethodDeclaration[3178-3680]:MethodDeclaration[3178-3680]"
    }, {
      "left" : "private String baseUrl(Uri uri)",
      "right" : "private String baseUrl(Uri uri)",
      "info" : "MethodDeclaration[3686-4445]:MethodDeclaration[3686-4445]"
    }, {
      "left" : "private String constructAuthHeader(String signature, String nonce, long oauthTimestamp)",
      "right" : "private String constructAuthHeader(String signature, String nonce, long oauthTimestamp)",
      "info" : "MethodDeclaration[7026-8257]:MethodDeclaration[7601-8832]"
    }, {
      "left" : "protected long generateTimestamp()",
      "right" : "protected long generateTimestamp()",
      "info" : "MethodDeclaration[8624-8717]:MethodDeclaration[8838-8931]"
    }, {
      "left" : "private final ArrayList<Parameter> allParameters;",
      "right" : "private final ArrayList<Parameter> allParameters;",
      "info" : "FieldDeclaration[9253-9302]:FieldDeclaration[9815-9864]"
    }, {
      "left" : "public OAuthParameterSet(int size)",
      "right" : "public OAuthParameterSet(int size)",
      "info" : "MethodDeclaration[9312-9409]:MethodDeclaration[9874-9971]"
    }, {
      "left" : "public String sortAndConcat()",
      "right" : "public String sortAndConcat()",
      "info" : "MethodDeclaration[9677-10342]:MethodDeclaration[10140-10805]"
    }, {
      "left" : "Parameter",
      "right" : "Parameter",
      "info" : "TypeDeclaration[10354-11719]:TypeDeclaration[10817-12182]"
    }, {
      "left" : "private final String key, value;",
      "right" : "private final String key, value;",
      "info" : "FieldDeclaration[10513-10545]:FieldDeclaration[10976-11008]"
    }, {
      "left" : "public Parameter(String key, String value)",
      "right" : "public Parameter(String key, String value)",
      "info" : "MethodDeclaration[10555-10669]:MethodDeclaration[11018-11132]"
    }, {
      "left" : "public String key()",
      "right" : "public String key()",
      "info" : "MethodDeclaration[10679-10734]:MethodDeclaration[11142-11197]"
    }, {
      "left" : "public String value()",
      "right" : "public String value()",
      "info" : "MethodDeclaration[10744-10803]:MethodDeclaration[11207-11266]"
    }, {
      "left" : "public int compareTo(Parameter other)",
      "right" : "public int compareTo(Parameter other)",
      "info" : "MethodDeclaration[10813-11050]:MethodDeclaration[11276-11513]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[11060-11152]:MethodDeclaration[11523-11615]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[11162-11531]:MethodDeclaration[11625-11994]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[11541-11713]:MethodDeclaration[12004-12176]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2591-2635]:Block[2591-2635]"
    }, {
      "left" : "return new byte[16];",
      "right" : "return new byte[16];",
      "info" : "ReturnStatement[2605-2625]:ReturnStatement[2605-2625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3031-3172]:Block[3031-3172]"
    }, {
      "left" : "mac = new ThreadSafeHMAC(consumerAuth, userAuth);",
      "right" : "mac = new ThreadSafeHMAC(consumerAuth, userAuth);",
      "info" : "ExpressionStatement[3041-3090]:ExpressionStatement[3041-3090]"
    }, {
      "left" : "this.consumerAuth = consumerAuth;",
      "right" : "this.consumerAuth = consumerAuth;",
      "info" : "ExpressionStatement[3099-3132]:ExpressionStatement[3099-3132]"
    }, {
      "left" : "this.userAuth = userAuth;",
      "right" : "this.userAuth = userAuth;",
      "info" : "ExpressionStatement[3141-3166]:ExpressionStatement[3141-3166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3284-3680]:Block[3284-3680]"
    }, {
      "left" : "String nonce = generateNonce();",
      "right" : "String nonce = generateNonce();",
      "info" : "VariableDeclarationStatement[3294-3325]:VariableDeclarationStatement[3294-3325]"
    }, {
      "left" : "long timestamp = generateTimestamp();",
      "right" : "long timestamp = generateTimestamp();",
      "info" : "VariableDeclarationStatement[3334-3371]:VariableDeclarationStatement[3334-3371]"
    }, {
      "left" : "String signature = calculateSignature(request.getMethod(), request.getUri(), timestamp, nonce, request.getFormParams(), request.getQueryParams());",
      "right" : "String signature = calculateSignature(request.getMethod(), request.getUri(), timestamp, nonce, request.getFormParams(), request.getQueryParams());",
      "info" : "VariableDeclarationStatement[3380-3526]:VariableDeclarationStatement[3380-3526]"
    }, {
      "left" : "String headerValue = constructAuthHeader(signature, nonce, timestamp);",
      "right" : "String headerValue = constructAuthHeader(signature, nonce, timestamp);",
      "info" : "VariableDeclarationStatement[3535-3605]:VariableDeclarationStatement[3535-3605]"
    }, {
      "left" : "requestBuilder.setHeader(HEADER_AUTHORIZATION, headerValue);",
      "right" : "requestBuilder.setHeader(HEADER_AUTHORIZATION, headerValue);",
      "info" : "ExpressionStatement[3614-3674]:ExpressionStatement[3614-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3718-4445]:Block[3718-4445]"
    }, {
      "left" : "String scheme = uri.getScheme();",
      "right" : "String scheme = uri.getScheme();",
      "info" : "VariableDeclarationStatement[3858-3890]:VariableDeclarationStatement[3858-3890]"
    }, {
      "left" : "StringBuilder sb = StringUtils.stringBuilder();",
      "right" : "StringBuilder sb = StringUtils.stringBuilder();",
      "info" : "VariableDeclarationStatement[3900-3947]:VariableDeclarationStatement[3900-3947]"
    }, {
      "left" : "sb.append(scheme).append(\"://\").append(uri.getHost());",
      "right" : "sb.append(scheme).append(\"://\").append(uri.getHost());",
      "info" : "ExpressionStatement[3956-4010]:ExpressionStatement[3956-4010]"
    }, {
      "left" : "int port = uri.getPort();",
      "right" : "int port = uri.getPort();",
      "info" : "VariableDeclarationStatement[4028-4053]:VariableDeclarationStatement[4028-4053]"
    }, {
      "left" : "if (scheme.equals(\"http\"))",
      "right" : "if (scheme.equals(\"http\"))",
      "info" : "IfStatement[4062-4256]:IfStatement[4062-4256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4089-4155]:Block[4089-4155]"
    }, {
      "left" : "if (port == 80)",
      "right" : "if (port == 80)",
      "info" : "IfStatement[4103-4145]:IfStatement[4103-4145]"
    }, {
      "left" : "port = -1;",
      "right" : "port = -1;",
      "info" : "ExpressionStatement[4135-4145]:ExpressionStatement[4135-4145]"
    }, {
      "left" : "if (scheme.equals(\"https\"))",
      "right" : "if (scheme.equals(\"https\"))",
      "info" : "IfStatement[4161-4256]:IfStatement[4161-4256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4189-4256]:Block[4189-4256]"
    }, {
      "left" : "if (port == 443)",
      "right" : "if (port == 443)",
      "info" : "IfStatement[4203-4246]:IfStatement[4203-4246]"
    }, {
      "left" : "port = -1;",
      "right" : "port = -1;",
      "info" : "ExpressionStatement[4236-4246]:ExpressionStatement[4236-4246]"
    }, {
      "left" : "if (port != -1)",
      "right" : "if (port != -1)",
      "info" : "IfStatement[4266-4322]:IfStatement[4266-4322]"
    }, {
      "left" : "sb.append(':').append(port);",
      "right" : "sb.append(':').append(port);",
      "info" : "ExpressionStatement[4294-4322]:ExpressionStatement[4294-4322]"
    }, {
      "left" : "if (isNonEmpty(uri.getPath()))",
      "right" : "if (isNonEmpty(uri.getPath()))",
      "info" : "IfStatement[4332-4400]:IfStatement[4332-4400]"
    }, {
      "left" : "sb.append(uri.getPath());",
      "right" : "sb.append(uri.getPath());",
      "info" : "ExpressionStatement[4375-4400]:ExpressionStatement[4375-4400]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[4418-4439]:ReturnStatement[4418-4439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7166-8257]:Block[7741-8832]"
    }, {
      "left" : "StringBuilder sb = StringUtils.stringBuilder();",
      "right" : "StringBuilder sb = StringUtils.stringBuilder();",
      "info" : "VariableDeclarationStatement[7176-7223]:VariableDeclarationStatement[7751-7798]"
    }, {
      "left" : "sb.append(\"OAuth \");",
      "right" : "sb.append(\"OAuth \");",
      "info" : "ExpressionStatement[7232-7252]:ExpressionStatement[7807-7827]"
    }, {
      "left" : "sb.append(KEY_OAUTH_CONSUMER_KEY).append(\"=\\\"\").append(consumerAuth.getKey()).append(\"\\\", \");",
      "right" : "sb.append(KEY_OAUTH_CONSUMER_KEY).append(\"=\\\"\").append(consumerAuth.getKey()).append(\"\\\", \");",
      "info" : "ExpressionStatement[7261-7354]:ExpressionStatement[7836-7929]"
    }, {
      "left" : "if (userAuth.getKey() != null)",
      "right" : "if (userAuth.getKey() != null)",
      "info" : "IfStatement[7363-7500]:IfStatement[7938-8075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7394-7500]:Block[7969-8075]"
    }, {
      "left" : "sb.append(KEY_OAUTH_TOKEN).append(\"=\\\"\").append(userAuth.getKey()).append(\"\\\", \");",
      "right" : "sb.append(KEY_OAUTH_TOKEN).append(\"=\\\"\").append(userAuth.getKey()).append(\"\\\", \");",
      "info" : "ExpressionStatement[7408-7490]:ExpressionStatement[7983-8065]"
    }, {
      "left" : "sb.append(KEY_OAUTH_SIGNATURE_METHOD).append(\"=\\\"\").append(OAUTH_SIGNATURE_METHOD).append(\"\\\", \");",
      "right" : "sb.append(KEY_OAUTH_SIGNATURE_METHOD).append(\"=\\\"\").append(OAUTH_SIGNATURE_METHOD).append(\"\\\", \");",
      "info" : "ExpressionStatement[7509-7607]:ExpressionStatement[8084-8182]"
    }, {
      "left" : "sb.append(KEY_OAUTH_SIGNATURE).append(\"=\\\"\");",
      "right" : "sb.append(KEY_OAUTH_SIGNATURE).append(\"=\\\"\");",
      "info" : "ExpressionStatement[7678-7723]:ExpressionStatement[8253-8298]"
    }, {
      "left" : "Utf8UrlEncoder.encodeAndAppendQueryElement(sb, signature).append(\"\\\", \");",
      "right" : "Utf8UrlEncoder.encodeAndAppendQueryElement(sb, signature).append(\"\\\", \");",
      "info" : "ExpressionStatement[7732-7805]:ExpressionStatement[8307-8380]"
    }, {
      "left" : "sb.append(KEY_OAUTH_TIMESTAMP).append(\"=\\\"\").append(oauthTimestamp).append(\"\\\", \");",
      "right" : "sb.append(KEY_OAUTH_TIMESTAMP).append(\"=\\\"\").append(oauthTimestamp).append(\"\\\", \");",
      "info" : "ExpressionStatement[7814-7897]:ExpressionStatement[8389-8472]"
    }, {
      "left" : "sb.append(KEY_OAUTH_NONCE).append(\"=\\\"\");",
      "right" : "sb.append(KEY_OAUTH_NONCE).append(\"=\\\"\");",
      "info" : "ExpressionStatement[7998-8039]:ExpressionStatement[8573-8614]"
    }, {
      "left" : "Utf8UrlEncoder.encodeAndAppendQueryElement(sb, nonce);",
      "right" : "Utf8UrlEncoder.encodeAndAppendQueryElement(sb, nonce);",
      "info" : "ExpressionStatement[8048-8102]:ExpressionStatement[8623-8677]"
    }, {
      "left" : "sb.append(\"\\\", \");",
      "right" : "sb.append(\"\\\", \");",
      "info" : "ExpressionStatement[8111-8129]:ExpressionStatement[8686-8704]"
    }, {
      "left" : "sb.append(KEY_OAUTH_VERSION).append(\"=\\\"\").append(OAUTH_VERSION_1_0).append(\"\\\"\");",
      "right" : "sb.append(KEY_OAUTH_VERSION).append(\"=\\\"\").append(OAUTH_VERSION_1_0).append(\"\\\"\");",
      "info" : "ExpressionStatement[8139-8221]:ExpressionStatement[8714-8796]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[8230-8251]:ReturnStatement[8805-8826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8659-8717]:Block[8873-8931]"
    }, {
      "left" : "return System.currentTimeMillis() / 1000L;",
      "right" : "return System.currentTimeMillis() / 1000L;",
      "info" : "ReturnStatement[8669-8711]:ReturnStatement[8883-8925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9347-9409]:Block[9909-9971]"
    }, {
      "left" : "allParameters = new ArrayList<>(size);",
      "right" : "allParameters = new ArrayList<>(size);",
      "info" : "ExpressionStatement[9361-9399]:ExpressionStatement[9923-9961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9707-10342]:Block[10170-10805]"
    }, {
      "left" : "Parameter[] params = allParameters.toArray(new Parameter[allParameters.size()]);",
      "right" : "Parameter[] params = allParameters.toArray(new Parameter[allParameters.size()]);",
      "info" : "VariableDeclarationStatement[9779-9859]:VariableDeclarationStatement[10242-10322]"
    }, {
      "left" : "Arrays.sort(params);",
      "right" : "Arrays.sort(params);",
      "info" : "ExpressionStatement[9872-9892]:ExpressionStatement[10335-10355]"
    }, {
      "left" : "StringBuilder encodedParams = new StringBuilder(100);",
      "right" : "StringBuilder encodedParams = new StringBuilder(100);",
      "info" : "VariableDeclarationStatement[9975-10028]:VariableDeclarationStatement[10438-10491]"
    }, {
      "left" : "for (Parameter param : params)",
      "right" : "for (Parameter param : params)",
      "info" : "EnhancedForStatement[10041-10287]:EnhancedForStatement[10504-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10072-10287]:Block[10535-10750]"
    }, {
      "left" : "if (encodedParams.length() > 0)",
      "right" : "if (encodedParams.length() > 0)",
      "info" : "IfStatement[10090-10188]:IfStatement[10553-10651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10122-10188]:Block[10585-10651]"
    }, {
      "left" : "encodedParams.append('&');",
      "right" : "encodedParams.append('&');",
      "info" : "ExpressionStatement[10144-10170]:ExpressionStatement[10607-10633]"
    }, {
      "left" : "encodedParams.append(param.key()).append('=').append(param.value());",
      "right" : "encodedParams.append(param.key()).append('=').append(param.value());",
      "info" : "ExpressionStatement[10205-10273]:ExpressionStatement[10668-10736]"
    }, {
      "left" : "return encodedParams.toString();",
      "right" : "return encodedParams.toString();",
      "info" : "ReturnStatement[10300-10332]:ReturnStatement[10763-10795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10598-10669]:Block[11061-11132]"
    }, {
      "left" : "this.key = key;",
      "right" : "this.key = key;",
      "info" : "ExpressionStatement[10612-10627]:ExpressionStatement[11075-11090]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[10640-10659]:ExpressionStatement[11103-11122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10699-10734]:Block[11162-11197]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[10713-10724]:ReturnStatement[11176-11187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10766-10803]:Block[11229-11266]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[10780-10793]:ReturnStatement[11243-11256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10869-11050]:Block[11332-11513]"
    }, {
      "left" : "int diff = key.compareTo(other.key);",
      "right" : "int diff = key.compareTo(other.key);",
      "info" : "VariableDeclarationStatement[10883-10919]:VariableDeclarationStatement[11346-11382]"
    }, {
      "left" : "if (diff == 0)",
      "right" : "if (diff == 0)",
      "info" : "IfStatement[10932-11015]:IfStatement[11395-11478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10947-11015]:Block[11410-11478]"
    }, {
      "left" : "diff = value.compareTo(other.value);",
      "right" : "diff = value.compareTo(other.value);",
      "info" : "ExpressionStatement[10965-11001]:ExpressionStatement[11428-11464]"
    }, {
      "left" : "return diff;",
      "right" : "return diff;",
      "info" : "ReturnStatement[11028-11040]:ReturnStatement[11491-11503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11103-11152]:Block[11566-11615]"
    }, {
      "left" : "return key + \"=\" + value;",
      "right" : "return key + \"=\" + value;",
      "info" : "ReturnStatement[11117-11142]:ReturnStatement[11580-11605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11212-11531]:Block[11675-11994]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[11226-11253]:IfStatement[11689-11716]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11241-11253]:ReturnStatement[11704-11716]"
    }, {
      "left" : "if (o == null || getClass() != o.getClass())",
      "right" : "if (o == null || getClass() != o.getClass())",
      "info" : "IfStatement[11266-11324]:IfStatement[11729-11787]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11311-11324]:ReturnStatement[11774-11787]"
    }, {
      "left" : "Parameter parameter = (Parameter) o;",
      "right" : "Parameter parameter = (Parameter) o;",
      "info" : "VariableDeclarationStatement[11338-11374]:VariableDeclarationStatement[11801-11837]"
    }, {
      "left" : "if (!key.equals(parameter.key))",
      "right" : "if (!key.equals(parameter.key))",
      "info" : "IfStatement[11388-11433]:IfStatement[11851-11896]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11420-11433]:ReturnStatement[11883-11896]"
    }, {
      "left" : "if (!value.equals(parameter.value))",
      "right" : "if (!value.equals(parameter.value))",
      "info" : "IfStatement[11446-11495]:IfStatement[11909-11958]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11482-11495]:ReturnStatement[11945-11958]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11509-11521]:ReturnStatement[11972-11984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11581-11713]:Block[12044-12176]"
    }, {
      "left" : "int result = key.hashCode();",
      "right" : "int result = key.hashCode();",
      "info" : "VariableDeclarationStatement[11595-11623]:VariableDeclarationStatement[12058-12086]"
    }, {
      "left" : "result = 31 * result + value.hashCode();",
      "right" : "result = 31 * result + value.hashCode();",
      "info" : "ExpressionStatement[11636-11676]:ExpressionStatement[12099-12139]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11689-11703]:ReturnStatement[12152-12166]"
    } ]
  },
  "interFileMappings" : { }
}