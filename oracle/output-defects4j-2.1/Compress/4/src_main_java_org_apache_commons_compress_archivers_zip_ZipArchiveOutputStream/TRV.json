{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final int BYTE_MASK = 0xFF;",
      "right" : "static final int BYTE_MASK = 0xFF;",
      "info" : "FieldDeclaration[2384-2418]:FieldDeclaration[2384-2418]"
    }, {
      "left" : "private static final int SHORT = 2;",
      "right" : "private static final int SHORT = 2;",
      "info" : "FieldDeclaration[2423-2458]:FieldDeclaration[2423-2458]"
    }, {
      "left" : "private static final int WORD = 4;",
      "right" : "private static final int WORD = 4;",
      "info" : "FieldDeclaration[2463-2497]:FieldDeclaration[2463-2497]"
    }, {
      "left" : "static final int BUFFER_SIZE = 512;",
      "right" : "static final int BUFFER_SIZE = 512;",
      "info" : "FieldDeclaration[2502-2537]:FieldDeclaration[2502-2537]"
    }, {
      "left" : "private static final int DEFLATER_BLOCK_SIZE = 8192;",
      "right" : "private static final int DEFLATER_BLOCK_SIZE = 8192;",
      "info" : "FieldDeclaration[2819-2871]:FieldDeclaration[2819-2871]"
    }, {
      "left" : "public static final int DEFLATED = java.util.zip.ZipEntry.DEFLATED;",
      "right" : "public static final int DEFLATED = java.util.zip.ZipEntry.DEFLATED;",
      "info" : "FieldDeclaration[2877-3008]:FieldDeclaration[2877-3008]"
    }, {
      "left" : "public static final int DEFAULT_COMPRESSION = Deflater.DEFAULT_COMPRESSION;",
      "right" : "public static final int DEFAULT_COMPRESSION = Deflater.DEFAULT_COMPRESSION;",
      "info" : "FieldDeclaration[3014-3160]:FieldDeclaration[3014-3160]"
    }, {
      "left" : "public static final int STORED = java.util.zip.ZipEntry.STORED;",
      "right" : "public static final int STORED = java.util.zip.ZipEntry.STORED;",
      "info" : "FieldDeclaration[3166-3291]:FieldDeclaration[3166-3291]"
    }, {
      "left" : "static final String DEFAULT_ENCODING = ZipEncodingHelper.UTF8;",
      "right" : "static final String DEFAULT_ENCODING = ZipEncodingHelper.UTF8;",
      "info" : "FieldDeclaration[3297-3427]:FieldDeclaration[3297-3427]"
    }, {
      "left" : "public static final int EFS_FLAG = 1 << 11;",
      "right" : "public static final int EFS_FLAG = 1 << 11;",
      "info" : "FieldDeclaration[3434-3582]:FieldDeclaration[3434-3582]"
    }, {
      "left" : "private ZipArchiveEntry entry;",
      "right" : "private ZipArchiveEntry entry;",
      "info" : "FieldDeclaration[3588-3656]:FieldDeclaration[3588-3656]"
    }, {
      "left" : "private String comment = \"\";",
      "right" : "private String comment = \"\";",
      "info" : "FieldDeclaration[3662-3731]:FieldDeclaration[3662-3731]"
    }, {
      "left" : "private int level = DEFAULT_COMPRESSION;",
      "right" : "private int level = DEFAULT_COMPRESSION;",
      "info" : "FieldDeclaration[3737-3834]:FieldDeclaration[3737-3834]"
    }, {
      "left" : "private boolean hasCompressionLevelChanged = false;",
      "right" : "private boolean hasCompressionLevelChanged = false;",
      "info" : "FieldDeclaration[3840-3988]:FieldDeclaration[3840-3988]"
    }, {
      "left" : "private int method = java.util.zip.ZipEntry.DEFLATED;",
      "right" : "private int method = java.util.zip.ZipEntry.DEFLATED;",
      "info" : "FieldDeclaration[3994-4113]:FieldDeclaration[3994-4113]"
    }, {
      "left" : "private final List entries = new LinkedList();",
      "right" : "private final List entries = new LinkedList();",
      "info" : "FieldDeclaration[4119-4230]:FieldDeclaration[4119-4230]"
    }, {
      "left" : "private final CRC32 crc = new CRC32();",
      "right" : "private final CRC32 crc = new CRC32();",
      "info" : "FieldDeclaration[4236-4348]:FieldDeclaration[4236-4348]"
    }, {
      "left" : "private long written = 0;",
      "right" : "private long written = 0;",
      "info" : "FieldDeclaration[4354-4434]:FieldDeclaration[4354-4434]"
    }, {
      "left" : "private long dataStart = 0;",
      "right" : "private long dataStart = 0;",
      "info" : "FieldDeclaration[4440-4517]:FieldDeclaration[4440-4517]"
    }, {
      "left" : "private long localDataStart = 0;",
      "right" : "private long localDataStart = 0;",
      "info" : "FieldDeclaration[4523-4671]:FieldDeclaration[4523-4671]"
    }, {
      "left" : "private long cdOffset = 0;",
      "right" : "private long cdOffset = 0;",
      "info" : "FieldDeclaration[4677-4754]:FieldDeclaration[4677-4754]"
    }, {
      "left" : "private long cdLength = 0;",
      "right" : "private long cdLength = 0;",
      "info" : "FieldDeclaration[4760-4838]:FieldDeclaration[4760-4838]"
    }, {
      "left" : "private static final byte[] ZERO = {0, 0};",
      "right" : "private static final byte[] ZERO = {0, 0};",
      "info" : "FieldDeclaration[4844-4934]:FieldDeclaration[4844-4934]"
    }, {
      "left" : "private static final byte[] LZERO = {0, 0, 0, 0};",
      "right" : "private static final byte[] LZERO = {0, 0, 0, 0};",
      "info" : "FieldDeclaration[4940-5036]:FieldDeclaration[4940-5036]"
    }, {
      "left" : "private final Map offsets = new HashMap();",
      "right" : "private final Map offsets = new HashMap();",
      "info" : "FieldDeclaration[5042-5159]:FieldDeclaration[5042-5159]"
    }, {
      "left" : "private String encoding = DEFAULT_ENCODING;",
      "right" : "private String encoding = DEFAULT_ENCODING;",
      "info" : "FieldDeclaration[5165-5520]:FieldDeclaration[5165-5520]"
    }, {
      "left" : "private ZipEncoding zipEncoding =\n        ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING);",
      "right" : "private ZipEncoding zipEncoding =\n        ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING);",
      "info" : "FieldDeclaration[5526-5802]:FieldDeclaration[5526-5802]"
    }, {
      "left" : "protected final Deflater def = new Deflater(level, true);",
      "right" : "protected final Deflater def = new Deflater(level, true);",
      "info" : "FieldDeclaration[5808-5936]:FieldDeclaration[5808-5936]"
    }, {
      "left" : "private final byte[] buf = new byte[BUFFER_SIZE];",
      "right" : "private final byte[] buf = new byte[BUFFER_SIZE];",
      "info" : "FieldDeclaration[5942-6056]:FieldDeclaration[5942-6056]"
    }, {
      "left" : "private final RandomAccessFile raf;",
      "right" : "private final RandomAccessFile raf;",
      "info" : "FieldDeclaration[6062-6151]:FieldDeclaration[6062-6151]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[6157-6188]:FieldDeclaration[6157-6188]"
    }, {
      "left" : "private boolean useEFS = true;",
      "right" : "private boolean useEFS = true;",
      "info" : "FieldDeclaration[6194-6312]:FieldDeclaration[6194-6312]"
    }, {
      "left" : "private boolean fallbackToUTF8 = false;",
      "right" : "private boolean fallbackToUTF8 = false;",
      "info" : "FieldDeclaration[6319-6434]:FieldDeclaration[6319-6434]"
    }, {
      "left" : "private UnicodeExtraFieldPolicy createUnicodeExtraFields =\n        UnicodeExtraFieldPolicy.NEVER;",
      "right" : "private UnicodeExtraFieldPolicy createUnicodeExtraFields =\n        UnicodeExtraFieldPolicy.NEVER;",
      "info" : "FieldDeclaration[6440-6618]:FieldDeclaration[6440-6618]"
    }, {
      "left" : "public ZipArchiveOutputStream(OutputStream out)",
      "right" : "public ZipArchiveOutputStream(OutputStream out)",
      "info" : "MethodDeclaration[6624-6857]:MethodDeclaration[6624-6857]"
    }, {
      "left" : "public ZipArchiveOutputStream(File file) throws IOException",
      "right" : "public ZipArchiveOutputStream(File file) throws IOException",
      "info" : "MethodDeclaration[6863-7638]:MethodDeclaration[6863-7638]"
    }, {
      "left" : "public boolean isSeekable()",
      "right" : "public boolean isSeekable()",
      "info" : "MethodDeclaration[7644-8071]:MethodDeclaration[7644-8071]"
    }, {
      "left" : "public void setEncoding(final String encoding)",
      "right" : "public void setEncoding(final String encoding)",
      "info" : "MethodDeclaration[8077-8713]:MethodDeclaration[8077-8713]"
    }, {
      "left" : "public String getEncoding()",
      "right" : "public String getEncoding()",
      "info" : "MethodDeclaration[8719-8937]:MethodDeclaration[8719-8937]"
    }, {
      "left" : "public void setUseLanguageEncodingFlag(boolean b)",
      "right" : "public void setUseLanguageEncodingFlag(boolean b)",
      "info" : "MethodDeclaration[8943-9205]:MethodDeclaration[8943-9205]"
    }, {
      "left" : "public void setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy b)",
      "right" : "public void setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy b)",
      "info" : "MethodDeclaration[9211-9426]:MethodDeclaration[9211-9426]"
    }, {
      "left" : "public void setFallbackToUTF8(boolean b)",
      "right" : "public void setFallbackToUTF8(boolean b)",
      "info" : "MethodDeclaration[9432-9702]:MethodDeclaration[9432-9702]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[9816-10279]:MethodDeclaration[9816-10279]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[10285-12536]:MethodDeclaration[10285-12536]"
    }, {
      "left" : "// @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n    public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "right" : "// @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n    public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "info" : "MethodDeclaration[12542-13918]:MethodDeclaration[12542-13918]"
    }, {
      "left" : "public void setComment(String comment)",
      "right" : "public void setComment(String comment)",
      "info" : "MethodDeclaration[13924-14081]:MethodDeclaration[13924-14081]"
    }, {
      "left" : "public void setLevel(int level)",
      "right" : "public void setLevel(int level)",
      "info" : "MethodDeclaration[14087-14731]:MethodDeclaration[14087-14731]"
    }, {
      "left" : "public void setMethod(int method)",
      "right" : "public void setMethod(int method)",
      "info" : "MethodDeclaration[14737-15002]:MethodDeclaration[14737-15002]"
    }, {
      "left" : "public void write(byte[] b, int offset, int length) throws IOException",
      "right" : "public void write(byte[] b, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[15008-16460]:MethodDeclaration[15008-16460]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[16841-17139]:MethodDeclaration[16823-17121]"
    }, {
      "left" : "static final byte[] LFH_SIG = ZipLong.LFH_SIG.getBytes();",
      "right" : "static final byte[] LFH_SIG = ZipLong.LFH_SIG.getBytes();",
      "info" : "FieldDeclaration[17189-17297]:FieldDeclaration[17171-17279]"
    }, {
      "left" : "static final byte[] DD_SIG = ZipLong.getBytes(0X08074B50L);",
      "right" : "static final byte[] DD_SIG = ZipLong.getBytes(0X08074B50L);",
      "info" : "FieldDeclaration[17302-17410]:FieldDeclaration[17284-17392]"
    }, {
      "left" : "static final byte[] CFH_SIG = ZipLong.CFH_SIG.getBytes();",
      "right" : "static final byte[] CFH_SIG = ZipLong.CFH_SIG.getBytes();",
      "info" : "FieldDeclaration[17415-17525]:FieldDeclaration[17397-17507]"
    }, {
      "left" : "static final byte[] EOCD_SIG = ZipLong.getBytes(0X06054B50L);",
      "right" : "static final byte[] EOCD_SIG = ZipLong.getBytes(0X06054B50L);",
      "info" : "FieldDeclaration[17530-17643]:FieldDeclaration[17512-17625]"
    }, {
      "left" : "protected final void deflate() throws IOException",
      "right" : "protected final void deflate() throws IOException",
      "info" : "MethodDeclaration[17649-17943]:MethodDeclaration[17631-17925]"
    }, {
      "left" : "protected void writeLocalFileHeader(ZipArchiveEntry ze) throws IOException",
      "right" : "protected void writeLocalFileHeader(ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[17949-21535]:MethodDeclaration[17931-21517]"
    }, {
      "left" : "protected void writeDataDescriptor(ZipArchiveEntry ze) throws IOException",
      "right" : "protected void writeDataDescriptor(ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[21541-22130]:MethodDeclaration[21523-22112]"
    }, {
      "left" : "protected void writeCentralFileHeader(ZipArchiveEntry ze) throws IOException",
      "right" : "protected void writeCentralFileHeader(ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[22136-25115]:MethodDeclaration[22118-25097]"
    }, {
      "left" : "protected void writeCentralDirectoryEnd() throws IOException",
      "right" : "protected void writeCentralDirectoryEnd() throws IOException",
      "info" : "MethodDeclaration[25121-25867]:MethodDeclaration[25103-25849]"
    }, {
      "left" : "protected final void writeOut(byte[] data) throws IOException",
      "right" : "protected final void writeOut(byte[] data) throws IOException",
      "info" : "MethodDeclaration[25873-26129]:MethodDeclaration[25855-26111]"
    }, {
      "left" : "protected final void writeOut(byte[] data, int offset, int length)\n        throws IOException",
      "right" : "protected final void writeOut(byte[] data, int offset, int length)\n        throws IOException",
      "info" : "MethodDeclaration[26135-26631]:MethodDeclaration[26117-26613]"
    }, {
      "left" : "private void deflateUntilInputIsNeeded() throws IOException",
      "right" : "private void deflateUntilInputIsNeeded() throws IOException",
      "info" : "MethodDeclaration[26637-26773]:MethodDeclaration[26619-26755]"
    }, {
      "left" : "private void writeVersionNeededToExtractAndGeneralPurposeBits(final int\n                                                                  zipMethod,\n                                                                  final boolean\n                                                                  utfFallback)\n        throws IOException",
      "right" : "private void writeVersionNeededToExtractAndGeneralPurposeBits(final int\n                                                                  zipMethod,\n                                                                  final boolean\n                                                                  utfFallback)\n        throws IOException",
      "info" : "MethodDeclaration[26779-27813]:MethodDeclaration[26761-27795]"
    }, {
      "left" : "UnicodeExtraFieldPolicy",
      "right" : "UnicodeExtraFieldPolicy",
      "info" : "TypeDeclaration[27819-28806]:TypeDeclaration[27801-28788]"
    }, {
      "left" : "public static final UnicodeExtraFieldPolicy ALWAYS =\n            new UnicodeExtraFieldPolicy(\"always\");",
      "right" : "public static final UnicodeExtraFieldPolicy ALWAYS =\n            new UnicodeExtraFieldPolicy(\"always\");",
      "info" : "FieldDeclaration[27987-28161]:FieldDeclaration[27969-28143]"
    }, {
      "left" : "public static final UnicodeExtraFieldPolicy NEVER =\n            new UnicodeExtraFieldPolicy(\"never\");",
      "right" : "public static final UnicodeExtraFieldPolicy NEVER =\n            new UnicodeExtraFieldPolicy(\"never\");",
      "info" : "FieldDeclaration[28170-28341]:FieldDeclaration[28152-28323]"
    }, {
      "left" : "public static final UnicodeExtraFieldPolicy NOT_ENCODEABLE =\n            new UnicodeExtraFieldPolicy(\"not encodeable\");",
      "right" : "public static final UnicodeExtraFieldPolicy NOT_ENCODEABLE =\n            new UnicodeExtraFieldPolicy(\"not encodeable\");",
      "info" : "FieldDeclaration[28350-28610]:FieldDeclaration[28332-28592]"
    }, {
      "left" : "private final String name;",
      "right" : "private final String name;",
      "info" : "FieldDeclaration[28620-28646]:FieldDeclaration[28602-28628]"
    }, {
      "left" : "private UnicodeExtraFieldPolicy(String n)",
      "right" : "private UnicodeExtraFieldPolicy(String n)",
      "info" : "MethodDeclaration[28655-28730]:MethodDeclaration[28637-28712]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[28739-28800]:MethodDeclaration[28721-28782]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[28812-28981]:MethodDeclaration[28794-28963]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6801-6857]:Block[6801-6857]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[6811-6826]:ExpressionStatement[6811-6826]"
    }, {
      "left" : "this.raf = null;",
      "right" : "this.raf = null;",
      "info" : "ExpressionStatement[6835-6851]:ExpressionStatement[6835-6851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7114-7638]:Block[7114-7638]"
    }, {
      "left" : "OutputStream o = null;",
      "right" : "OutputStream o = null;",
      "info" : "VariableDeclarationStatement[7124-7146]:VariableDeclarationStatement[7124-7146]"
    }, {
      "left" : "RandomAccessFile _raf = null;",
      "right" : "RandomAccessFile _raf = null;",
      "info" : "VariableDeclarationStatement[7155-7184]:VariableDeclarationStatement[7155-7184]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7193-7595]:TryStatement[7193-7595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7197-7292]:Block[7197-7292]"
    }, {
      "left" : "_raf = new RandomAccessFile(file, \"rw\");",
      "right" : "_raf = new RandomAccessFile(file, \"rw\");",
      "info" : "ExpressionStatement[7211-7251]:ExpressionStatement[7211-7251]"
    }, {
      "left" : "_raf.setLength(0);",
      "right" : "_raf.setLength(0);",
      "info" : "ExpressionStatement[7264-7282]:ExpressionStatement[7264-7282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7315-7595]:Block[7315-7595]"
    }, {
      "left" : "if (_raf != null)",
      "right" : "if (_raf != null)",
      "info" : "IfStatement[7329-7541]:IfStatement[7329-7541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7347-7541]:Block[7347-7541]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7365-7498]:TryStatement[7365-7498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7369-7422]:Block[7369-7422]"
    }, {
      "left" : "_raf.close();",
      "right" : "_raf.close();",
      "info" : "ExpressionStatement[7391-7404]:ExpressionStatement[7391-7404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7449-7498]:Block[7449-7498]"
    }, {
      "left" : "_raf = null;",
      "right" : "_raf = null;",
      "info" : "ExpressionStatement[7515-7527]:ExpressionStatement[7515-7527]"
    }, {
      "left" : "o = new FileOutputStream(file);",
      "right" : "o = new FileOutputStream(file);",
      "info" : "ExpressionStatement[7554-7585]:ExpressionStatement[7554-7585]"
    }, {
      "left" : "out = o;",
      "right" : "out = o;",
      "info" : "ExpressionStatement[7604-7612]:ExpressionStatement[7604-7612]"
    }, {
      "left" : "raf = _raf;",
      "right" : "raf = _raf;",
      "info" : "ExpressionStatement[7621-7632]:ExpressionStatement[7621-7632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8036-8071]:Block[8036-8071]"
    }, {
      "left" : "return raf != null;",
      "right" : "return raf != null;",
      "info" : "ReturnStatement[8046-8065]:ReturnStatement[8046-8065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8713]:Block[8547-8713]"
    }, {
      "left" : "this.encoding = encoding;",
      "right" : "this.encoding = encoding;",
      "info" : "ExpressionStatement[8557-8582]:ExpressionStatement[8557-8582]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[8591-8653]:ExpressionStatement[8591-8653]"
    }, {
      "left" : "useEFS &= ZipEncodingHelper.isUTF8(encoding);",
      "right" : "useEFS &= ZipEncodingHelper.isUTF8(encoding);",
      "info" : "ExpressionStatement[8662-8707]:ExpressionStatement[8662-8707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8905-8937]:Block[8905-8937]"
    }, {
      "left" : "return encoding;",
      "right" : "return encoding;",
      "info" : "ReturnStatement[8915-8931]:ReturnStatement[8915-8931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9140-9205]:Block[9140-9205]"
    }, {
      "left" : "useEFS = b && ZipEncodingHelper.isUTF8(encoding);",
      "right" : "useEFS = b && ZipEncodingHelper.isUTF8(encoding);",
      "info" : "ExpressionStatement[9150-9199]:ExpressionStatement[9150-9199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9381-9426]:Block[9381-9426]"
    }, {
      "left" : "createUnicodeExtraFields = b;",
      "right" : "createUnicodeExtraFields = b;",
      "info" : "ExpressionStatement[9391-9420]:ExpressionStatement[9391-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9667-9702]:Block[9667-9702]"
    }, {
      "left" : "fallbackToUTF8 = b;",
      "right" : "fallbackToUTF8 = b;",
      "info" : "ExpressionStatement[9677-9696]:ExpressionStatement[9677-9696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9856-10279]:Block[9856-10279]"
    }, {
      "left" : "if(entry != null)",
      "right" : "if(entry != null)",
      "info" : "IfStatement[9866-9974]:IfStatement[9866-9974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9884-9974]:Block[9884-9974]"
    }, {
      "left" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "info" : "ThrowStatement[9898-9964]:ThrowStatement[9898-9964]"
    }, {
      "left" : "cdOffset = written;",
      "right" : "cdOffset = written;",
      "info" : "ExpressionStatement[9992-10011]:ExpressionStatement[9992-10011]"
    }, {
      "left" : "for (Iterator i = entries.iterator(); i.hasNext())",
      "right" : "for (Iterator i = entries.iterator(); i.hasNext())",
      "info" : "ForStatement[10020-10148]:ForStatement[10020-10148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10073-10148]:Block[10073-10148]"
    }, {
      "left" : "writeCentralFileHeader((ZipArchiveEntry) i.next());",
      "right" : "writeCentralFileHeader((ZipArchiveEntry) i.next());",
      "info" : "ExpressionStatement[10087-10138]:ExpressionStatement[10087-10138]"
    }, {
      "left" : "cdLength = written - cdOffset;",
      "right" : "cdLength = written - cdOffset;",
      "info" : "ExpressionStatement[10157-10187]:ExpressionStatement[10157-10187]"
    }, {
      "left" : "writeCentralDirectoryEnd();",
      "right" : "writeCentralDirectoryEnd();",
      "info" : "ExpressionStatement[10196-10223]:ExpressionStatement[10196-10223]"
    }, {
      "left" : "offsets.clear();",
      "right" : "offsets.clear();",
      "info" : "ExpressionStatement[10232-10248]:ExpressionStatement[10232-10248]"
    }, {
      "left" : "entries.clear();",
      "right" : "entries.clear();",
      "info" : "ExpressionStatement[10257-10273]:ExpressionStatement[10257-10273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10437-12536]:Block[10437-12536]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[10447-10497]:IfStatement[10447-10497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10466-10497]:Block[10466-10497]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10480-10487]:ReturnStatement[10480-10487]"
    }, {
      "left" : "long realCrc = crc.getValue();",
      "right" : "long realCrc = crc.getValue();",
      "info" : "VariableDeclarationStatement[10507-10537]:VariableDeclarationStatement[10507-10537]"
    }, {
      "left" : "crc.reset();",
      "right" : "crc.reset();",
      "info" : "ExpressionStatement[10546-10558]:ExpressionStatement[10546-10558]"
    }, {
      "left" : "if (entry.getMethod() == DEFLATED)",
      "right" : "if (entry.getMethod() == DEFLATED)",
      "info" : "IfStatement[10568-12004]:IfStatement[10568-12004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10603-10977]:Block[10603-10977]"
    }, {
      "left" : "def.finish();",
      "right" : "def.finish();",
      "info" : "ExpressionStatement[10617-10630]:ExpressionStatement[10617-10630]"
    }, {
      "left" : "while (!def.finished())",
      "right" : "while (!def.finished())",
      "info" : "WhileStatement[10643-10709]:WhileStatement[10643-10709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10667-10709]:Block[10667-10709]"
    }, {
      "left" : "deflate();",
      "right" : "deflate();",
      "info" : "ExpressionStatement[10685-10695]:ExpressionStatement[10685-10695]"
    }, {
      "left" : "entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));",
      "right" : "entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));",
      "info" : "ExpressionStatement[10723-10777]:ExpressionStatement[10723-10777]"
    }, {
      "left" : "entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));",
      "right" : "entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));",
      "info" : "ExpressionStatement[10790-10855]:ExpressionStatement[10790-10855]"
    }, {
      "left" : "entry.setCrc(realCrc);",
      "right" : "entry.setCrc(realCrc);",
      "info" : "ExpressionStatement[10868-10890]:ExpressionStatement[10868-10890]"
    }, {
      "left" : "def.reset();",
      "right" : "def.reset();",
      "info" : "ExpressionStatement[10904-10916]:ExpressionStatement[10904-10916]"
    }, {
      "left" : "written += entry.getCompressedSize();",
      "right" : "written += entry.getCompressedSize();",
      "info" : "ExpressionStatement[10930-10967]:ExpressionStatement[10930-10967]"
    }, {
      "left" : "if (raf == null)",
      "right" : "if (raf == null)",
      "info" : "IfStatement[10983-12004]:IfStatement[10983-12004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11000-11778]:Block[11000-11778]"
    }, {
      "left" : "if (entry.getCrc() != realCrc)",
      "right" : "if (entry.getCrc() != realCrc)",
      "info" : "IfStatement[11014-11392]:IfStatement[11014-11392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11045-11392]:Block[11045-11392]"
    }, {
      "left" : "throw new ZipException(\"bad CRC checksum for entry \"\n                                       + entry.getName() + \": \"\n                                       + Long.toHexString(entry.getCrc())\n                                       + \" instead of \"\n                                       + Long.toHexString(realCrc));",
      "right" : "throw new ZipException(\"bad CRC checksum for entry \"\n                                       + entry.getName() + \": \"\n                                       + Long.toHexString(entry.getCrc())\n                                       + \" instead of \"\n                                       + Long.toHexString(realCrc));",
      "info" : "ThrowStatement[11063-11378]:ThrowStatement[11063-11378]"
    }, {
      "left" : "if (entry.getSize() != written - dataStart)",
      "right" : "if (entry.getSize() != written - dataStart)",
      "info" : "IfStatement[11406-11768]:IfStatement[11406-11768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11450-11768]:Block[11450-11768]"
    }, {
      "left" : "throw new ZipException(\"bad size for entry \"\n                                       + entry.getName() + \": \"\n                                       + entry.getSize()\n                                       + \" instead of \"\n                                       + (written - dataStart));",
      "right" : "throw new ZipException(\"bad size for entry \"\n                                       + entry.getName() + \": \"\n                                       + entry.getSize()\n                                       + \" instead of \"\n                                       + (written - dataStart));",
      "info" : "ThrowStatement[11468-11754]:ThrowStatement[11468-11754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11784-12004]:Block[11784-12004]"
    }, {
      "left" : "long size = written - dataStart;",
      "right" : "long size = written - dataStart;",
      "info" : "VariableDeclarationStatement[11850-11882]:VariableDeclarationStatement[11850-11882]"
    }, {
      "left" : "entry.setSize(size);",
      "right" : "entry.setSize(size);",
      "info" : "ExpressionStatement[11896-11916]:ExpressionStatement[11896-11916]"
    }, {
      "left" : "entry.setCompressedSize(size);",
      "right" : "entry.setCompressedSize(size);",
      "info" : "ExpressionStatement[11929-11959]:ExpressionStatement[11929-11959]"
    }, {
      "left" : "entry.setCrc(realCrc);",
      "right" : "entry.setCrc(realCrc);",
      "info" : "ExpressionStatement[11972-11994]:ExpressionStatement[11972-11994]"
    }, {
      "left" : "if (raf != null)",
      "right" : "if (raf != null)",
      "info" : "IfStatement[12150-12471]:IfStatement[12150-12471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12167-12471]:Block[12167-12471]"
    }, {
      "left" : "long save = raf.getFilePointer();",
      "right" : "long save = raf.getFilePointer();",
      "info" : "VariableDeclarationStatement[12181-12214]:VariableDeclarationStatement[12181-12214]"
    }, {
      "left" : "raf.seek(localDataStart);",
      "right" : "raf.seek(localDataStart);",
      "info" : "ExpressionStatement[12228-12253]:ExpressionStatement[12228-12253]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.getCrc()));",
      "right" : "writeOut(ZipLong.getBytes(entry.getCrc()));",
      "info" : "ExpressionStatement[12266-12309]:ExpressionStatement[12266-12309]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.getCompressedSize()));",
      "right" : "writeOut(ZipLong.getBytes(entry.getCompressedSize()));",
      "info" : "ExpressionStatement[12322-12376]:ExpressionStatement[12322-12376]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.getSize()));",
      "right" : "writeOut(ZipLong.getBytes(entry.getSize()));",
      "info" : "ExpressionStatement[12389-12433]:ExpressionStatement[12389-12433]"
    }, {
      "left" : "raf.seek(save);",
      "right" : "raf.seek(save);",
      "info" : "ExpressionStatement[12446-12461]:ExpressionStatement[12446-12461]"
    }, {
      "left" : "writeDataDescriptor(entry);",
      "right" : "writeDataDescriptor(entry);",
      "info" : "ExpressionStatement[12481-12508]:ExpressionStatement[12481-12508]"
    }, {
      "left" : "entry = null;",
      "right" : "entry = null;",
      "info" : "ExpressionStatement[12517-12530]:ExpressionStatement[12517-12530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12719-13918]:Block[12719-13918]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[12729-12749]:ExpressionStatement[12729-12749]"
    }, {
      "left" : "entry = ((ZipArchiveEntry) archiveEntry);",
      "right" : "entry = ((ZipArchiveEntry) archiveEntry);",
      "info" : "ExpressionStatement[12759-12800]:ExpressionStatement[12759-12800]"
    }, {
      "left" : "entries.add(entry);",
      "right" : "entries.add(entry);",
      "info" : "ExpressionStatement[12809-12828]:ExpressionStatement[12809-12828]"
    }, {
      "left" : "if (entry.getMethod() == -1)",
      "right" : "if (entry.getMethod() == -1)",
      "info" : "IfStatement[12838-12932]:IfStatement[12838-12932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12867-12932]:Block[12867-12932]"
    }, {
      "left" : "entry.setMethod(method);",
      "right" : "entry.setMethod(method);",
      "info" : "ExpressionStatement[12898-12922]:ExpressionStatement[12898-12922]"
    }, {
      "left" : "if (entry.getTime() == -1)",
      "right" : "if (entry.getTime() == -1)",
      "info" : "IfStatement[12942-13052]:IfStatement[12942-13052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12969-13052]:Block[12969-13052]"
    }, {
      "left" : "entry.setTime(System.currentTimeMillis());",
      "right" : "entry.setTime(System.currentTimeMillis());",
      "info" : "ExpressionStatement[13000-13042]:ExpressionStatement[13000-13042]"
    }, {
      "left" : "if (entry.getMethod() == STORED && raf == null)",
      "right" : "if (entry.getMethod() == STORED && raf == null)",
      "info" : "IfStatement[13123-13708]:IfStatement[13123-13708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13171-13708]:Block[13171-13708]"
    }, {
      "left" : "if (entry.getSize() == -1)",
      "right" : "if (entry.getSize() == -1)",
      "info" : "IfStatement[13185-13433]:IfStatement[13185-13433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13212-13433]:Block[13212-13433]"
    }, {
      "left" : "throw new ZipException(\"uncompressed size is required for\"\n                                       + \" STORED method when not writing to a\"\n                                       + \" file\");",
      "right" : "throw new ZipException(\"uncompressed size is required for\"\n                                       + \" STORED method when not writing to a\"\n                                       + \" file\");",
      "info" : "ThrowStatement[13230-13419]:ThrowStatement[13230-13419]"
    }, {
      "left" : "if (entry.getCrc() == -1)",
      "right" : "if (entry.getCrc() == -1)",
      "info" : "IfStatement[13446-13644]:IfStatement[13446-13644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13472-13644]:Block[13472-13644]"
    }, {
      "left" : "throw new ZipException(\"crc checksum is required for STORED\"\n                                       + \" method when not writing to a file\");",
      "right" : "throw new ZipException(\"crc checksum is required for STORED\"\n                                       + \" method when not writing to a file\");",
      "info" : "ThrowStatement[13490-13630]:ThrowStatement[13490-13630]"
    }, {
      "left" : "entry.setCompressedSize(entry.getSize());",
      "right" : "entry.setCompressedSize(entry.getSize());",
      "info" : "ExpressionStatement[13657-13698]:ExpressionStatement[13657-13698]"
    }, {
      "left" : "if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged)",
      "right" : "if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged)",
      "info" : "IfStatement[13718-13875]:IfStatement[13718-13875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13783-13875]:Block[13783-13875]"
    }, {
      "left" : "def.setLevel(level);",
      "right" : "def.setLevel(level);",
      "info" : "ExpressionStatement[13797-13817]:ExpressionStatement[13797-13817]"
    }, {
      "left" : "hasCompressionLevelChanged = false;",
      "right" : "hasCompressionLevelChanged = false;",
      "info" : "ExpressionStatement[13830-13865]:ExpressionStatement[13830-13865]"
    }, {
      "left" : "writeLocalFileHeader(entry);",
      "right" : "writeLocalFileHeader(entry);",
      "info" : "ExpressionStatement[13884-13912]:ExpressionStatement[13884-13912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14042-14081]:Block[14042-14081]"
    }, {
      "left" : "this.comment = comment;",
      "right" : "this.comment = comment;",
      "info" : "ExpressionStatement[14052-14075]:ExpressionStatement[14052-14075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14391-14731]:Block[14391-14731]"
    }, {
      "left" : "if (level < Deflater.DEFAULT_COMPRESSION\n            || level > Deflater.BEST_COMPRESSION)",
      "right" : "if (level < Deflater.DEFAULT_COMPRESSION\n            || level > Deflater.BEST_COMPRESSION)",
      "info" : "IfStatement[14401-14637]:IfStatement[14401-14637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14492-14637]:Block[14492-14637]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid compression level: \"\n                                               + level);",
      "right" : "throw new IllegalArgumentException(\"Invalid compression level: \"\n                                               + level);",
      "info" : "ThrowStatement[14506-14627]:ThrowStatement[14506-14627]"
    }, {
      "left" : "hasCompressionLevelChanged = (this.level != level);",
      "right" : "hasCompressionLevelChanged = (this.level != level);",
      "info" : "ExpressionStatement[14646-14697]:ExpressionStatement[14646-14697]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[14706-14725]:ExpressionStatement[14706-14725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14965-15002]:Block[14965-15002]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[14975-14996]:ExpressionStatement[14975-14996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15309-16460]:Block[15309-16460]"
    }, {
      "left" : "if (entry.getMethod() == DEFLATED)",
      "right" : "if (entry.getMethod() == DEFLATED)",
      "info" : "IfStatement[15319-16415]:IfStatement[15319-16415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15354-16326]:Block[15354-16326]"
    }, {
      "left" : "if (length > 0)",
      "right" : "if (length > 0)",
      "info" : "IfStatement[15368-16316]:IfStatement[15368-16316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15384-16316]:Block[15384-16316]"
    }, {
      "left" : "if (!def.finished())",
      "right" : "if (!def.finished())",
      "info" : "IfStatement[15402-16302]:IfStatement[15402-16302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15423-16302]:Block[15423-16302]"
    }, {
      "left" : "if (length <= DEFLATER_BLOCK_SIZE)",
      "right" : "if (length <= DEFLATER_BLOCK_SIZE)",
      "info" : "IfStatement[15445-16284]:IfStatement[15445-16284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15480-15613]:Block[15480-15613]"
    }, {
      "left" : "def.setInput(b, offset, length);",
      "right" : "def.setInput(b, offset, length);",
      "info" : "ExpressionStatement[15506-15538]:ExpressionStatement[15506-15538]"
    }, {
      "left" : "deflateUntilInputIsNeeded();",
      "right" : "deflateUntilInputIsNeeded();",
      "info" : "ExpressionStatement[15563-15591]:ExpressionStatement[15563-15591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15619-16284]:Block[15619-16284]"
    }, {
      "left" : "final int fullblocks = length / DEFLATER_BLOCK_SIZE;",
      "right" : "final int fullblocks = length / DEFLATER_BLOCK_SIZE;",
      "info" : "VariableDeclarationStatement[15645-15697]:VariableDeclarationStatement[15645-15697]"
    }, {
      "left" : "for (int i = 0; i < fullblocks; i++)",
      "right" : "for (int i = 0; i < fullblocks; i++)",
      "info" : "ForStatement[15722-15984]:ForStatement[15722-15984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15759-15984]:Block[15759-15984]"
    }, {
      "left" : "def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,\n                                         DEFLATER_BLOCK_SIZE);",
      "right" : "def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,\n                                         DEFLATER_BLOCK_SIZE);",
      "info" : "ExpressionStatement[15789-15901]:ExpressionStatement[15789-15901]"
    }, {
      "left" : "deflateUntilInputIsNeeded();",
      "right" : "deflateUntilInputIsNeeded();",
      "info" : "ExpressionStatement[15930-15958]:ExpressionStatement[15930-15958]"
    }, {
      "left" : "final int done = fullblocks * DEFLATER_BLOCK_SIZE;",
      "right" : "final int done = fullblocks * DEFLATER_BLOCK_SIZE;",
      "info" : "VariableDeclarationStatement[16009-16059]:VariableDeclarationStatement[16009-16059]"
    }, {
      "left" : "if (done < length)",
      "right" : "if (done < length)",
      "info" : "IfStatement[16084-16262]:IfStatement[16084-16262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16103-16262]:Block[16103-16262]"
    }, {
      "left" : "def.setInput(b, offset + done, length - done);",
      "right" : "def.setInput(b, offset + done, length - done);",
      "info" : "ExpressionStatement[16133-16179]:ExpressionStatement[16133-16179]"
    }, {
      "left" : "deflateUntilInputIsNeeded();",
      "right" : "deflateUntilInputIsNeeded();",
      "info" : "ExpressionStatement[16208-16236]:ExpressionStatement[16208-16236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16332-16415]:Block[16332-16415]"
    }, {
      "left" : "writeOut(b, offset, length);",
      "right" : "writeOut(b, offset, length);",
      "info" : "ExpressionStatement[16346-16374]:ExpressionStatement[16346-16374]"
    }, {
      "left" : "written += length;",
      "right" : "written += length;",
      "info" : "ExpressionStatement[16387-16405]:ExpressionStatement[16387-16405]"
    }, {
      "left" : "crc.update(b, offset, length);",
      "right" : "crc.update(b, offset, length);",
      "info" : "ExpressionStatement[16424-16454]:ExpressionStatement[16424-16454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17070-17139]:Block[17052-17121]"
    }, {
      "left" : "if (out != null)",
      "right" : "if (out != null)",
      "info" : "IfStatement[17080-17133]:IfStatement[17062-17115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17097-17133]:Block[17079-17115]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[17111-17123]:ExpressionStatement[17093-17105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17817-17943]:Block[17799-17925]"
    }, {
      "left" : "int len = def.deflate(buf, 0, buf.length);",
      "right" : "int len = def.deflate(buf, 0, buf.length);",
      "info" : "VariableDeclarationStatement[17827-17869]:VariableDeclarationStatement[17809-17851]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[17878-17937]:IfStatement[17860-17919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17891-17937]:Block[17873-17919]"
    }, {
      "left" : "writeOut(buf, 0, len);",
      "right" : "writeOut(buf, 0, len);",
      "info" : "ExpressionStatement[17905-17927]:ExpressionStatement[17887-17909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18154-21535]:Block[18136-21517]"
    }, {
      "left" : "boolean encodable = zipEncoding.canEncode(ze.getName());",
      "right" : "boolean encodable = zipEncoding.canEncode(ze.getName());",
      "info" : "VariableDeclarationStatement[18165-18221]:VariableDeclarationStatement[18147-18203]"
    }, {
      "left" : "final ZipEncoding entryEncoding;",
      "right" : "final ZipEncoding entryEncoding;",
      "info" : "VariableDeclarationStatement[18239-18271]:VariableDeclarationStatement[18221-18253]"
    }, {
      "left" : "if (!encodable && fallbackToUTF8)",
      "right" : "if (!encodable && fallbackToUTF8)",
      "info" : "IfStatement[18289-18457]:IfStatement[18271-18439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18323-18399]:Block[18305-18381]"
    }, {
      "left" : "entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;",
      "right" : "entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;",
      "info" : "ExpressionStatement[18337-18389]:ExpressionStatement[18319-18371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18405-18457]:Block[18387-18439]"
    }, {
      "left" : "entryEncoding = zipEncoding;",
      "right" : "entryEncoding = zipEncoding;",
      "info" : "ExpressionStatement[18419-18447]:ExpressionStatement[18401-18429]"
    }, {
      "left" : "ByteBuffer name = entryEncoding.encode(ze.getName());",
      "right" : "ByteBuffer name = entryEncoding.encode(ze.getName());",
      "info" : "VariableDeclarationStatement[18475-18528]:VariableDeclarationStatement[18457-18510]"
    }, {
      "left" : "if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER)",
      "right" : "if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER)",
      "info" : "IfStatement[18546-19813]:IfStatement[18528-19795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18609-19813]:Block[18591-19795]"
    }, {
      "left" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                || !encodable)",
      "right" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                || !encodable)",
      "info" : "IfStatement[18624-19033]:IfStatement[18606-19015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18718-19033]:Block[18700-19015]"
    }, {
      "left" : "ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                           name.array(),\n                                                           name.arrayOffset(),\n                                                           name.limit()));",
      "right" : "ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                           name.array(),\n                                                           name.arrayOffset(),\n                                                           name.limit()));",
      "info" : "ExpressionStatement[18736-19019]:ExpressionStatement[18718-19001]"
    }, {
      "left" : "String comm = ze.getComment();",
      "right" : "String comm = ze.getComment();",
      "info" : "VariableDeclarationStatement[19047-19077]:VariableDeclarationStatement[19029-19059]"
    }, {
      "left" : "if (comm != null && !\"\".equals(comm))",
      "right" : "if (comm != null && !\"\".equals(comm))",
      "info" : "IfStatement[19090-19803]:IfStatement[19072-19785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19128-19803]:Block[19110-19785]"
    }, {
      "left" : "boolean commentEncodable = this.zipEncoding.canEncode(comm);",
      "right" : "boolean commentEncodable = this.zipEncoding.canEncode(comm);",
      "info" : "VariableDeclarationStatement[19147-19207]:VariableDeclarationStatement[19129-19189]"
    }, {
      "left" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                    || !commentEncodable)",
      "right" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                    || !commentEncodable)",
      "info" : "IfStatement[19225-19789]:IfStatement[19207-19771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19330-19789]:Block[19312-19771]"
    }, {
      "left" : "ByteBuffer commentB = entryEncoding.encode(comm);",
      "right" : "ByteBuffer commentB = entryEncoding.encode(comm);",
      "info" : "VariableDeclarationStatement[19352-19401]:VariableDeclarationStatement[19334-19383]"
    }, {
      "left" : "ze.addExtraField(new UnicodeCommentExtraField(comm,\n                                                                  commentB.array(),\n                                                                  commentB.arrayOffset(),\n                                                                  commentB.limit())\n                                     );",
      "right" : "ze.addExtraField(new UnicodeCommentExtraField(comm,\n                                                                  commentB.array(),\n                                                                  commentB.arrayOffset(),\n                                                                  commentB.limit())\n                                     );",
      "info" : "ExpressionStatement[19422-19771]:ExpressionStatement[19404-19753]"
    }, {
      "left" : "offsets.put(ze, ZipLong.getBytes(written));",
      "right" : "offsets.put(ze, ZipLong.getBytes(written));",
      "info" : "ExpressionStatement[19823-19866]:ExpressionStatement[19805-19848]"
    }, {
      "left" : "writeOut(LFH_SIG);",
      "right" : "writeOut(LFH_SIG);",
      "info" : "ExpressionStatement[19876-19894]:ExpressionStatement[19858-19876]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[19903-19919]:ExpressionStatement[19885-19901]"
    }, {
      "left" : "final int zipMethod = ze.getMethod();",
      "right" : "final int zipMethod = ze.getMethod();",
      "info" : "VariableDeclarationStatement[20003-20040]:VariableDeclarationStatement[19985-20022]"
    }, {
      "left" : "writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,\n                                                         !encodable\n                                                         && fallbackToUTF8);",
      "right" : "writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,\n                                                         !encodable\n                                                         && fallbackToUTF8);",
      "info" : "ExpressionStatement[20050-20254]:ExpressionStatement[20032-20236]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[20263-20279]:ExpressionStatement[20245-20261]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(zipMethod));",
      "right" : "writeOut(ZipShort.getBytes(zipMethod));",
      "info" : "ExpressionStatement[20319-20358]:ExpressionStatement[20301-20340]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[20367-20384]:ExpressionStatement[20349-20366]"
    }, {
      "left" : "writeOut(ZipUtil.toDosTime(ze.getTime()));",
      "right" : "writeOut(ZipUtil.toDosTime(ze.getTime()));",
      "info" : "ExpressionStatement[20429-20471]:ExpressionStatement[20411-20453]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[20480-20496]:ExpressionStatement[20462-20478]"
    }, {
      "left" : "localDataStart = written;",
      "right" : "localDataStart = written;",
      "info" : "ExpressionStatement[20581-20606]:ExpressionStatement[20563-20588]"
    }, {
      "left" : "if (zipMethod == DEFLATED || raf != null)",
      "right" : "if (zipMethod == DEFLATED || raf != null)",
      "info" : "IfStatement[20615-20933]:IfStatement[20597-20915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20657-20755]:Block[20639-20737]"
    }, {
      "left" : "writeOut(LZERO);",
      "right" : "writeOut(LZERO);",
      "info" : "ExpressionStatement[20671-20687]:ExpressionStatement[20653-20669]"
    }, {
      "left" : "writeOut(LZERO);",
      "right" : "writeOut(LZERO);",
      "info" : "ExpressionStatement[20700-20716]:ExpressionStatement[20682-20698]"
    }, {
      "left" : "writeOut(LZERO);",
      "right" : "writeOut(LZERO);",
      "info" : "ExpressionStatement[20729-20745]:ExpressionStatement[20711-20727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20761-20933]:Block[20743-20915]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getCrc()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getCrc()));",
      "info" : "ExpressionStatement[20775-20815]:ExpressionStatement[20757-20797]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getSize()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getSize()));",
      "info" : "ExpressionStatement[20828-20869]:ExpressionStatement[20810-20851]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getSize()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getSize()));",
      "info" : "ExpressionStatement[20882-20923]:ExpressionStatement[20864-20905]"
    }, {
      "left" : "written += 12;",
      "right" : "written += 12;",
      "info" : "ExpressionStatement[20980-20994]:ExpressionStatement[20962-20976]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(name.limit()));",
      "right" : "writeOut(ZipShort.getBytes(name.limit()));",
      "info" : "ExpressionStatement[21069-21111]:ExpressionStatement[21051-21093]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[21120-21137]:ExpressionStatement[21102-21119]"
    }, {
      "left" : "byte[] extra = ze.getLocalFileDataExtra();",
      "right" : "byte[] extra = ze.getLocalFileDataExtra();",
      "info" : "VariableDeclarationStatement[21177-21219]:VariableDeclarationStatement[21159-21201]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(extra.length));",
      "right" : "writeOut(ZipShort.getBytes(extra.length));",
      "info" : "ExpressionStatement[21228-21270]:ExpressionStatement[21210-21252]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[21279-21296]:ExpressionStatement[21261-21278]"
    }, {
      "left" : "writeOut(name.array(), name.arrayOffset(), name.limit());",
      "right" : "writeOut(name.array(), name.arrayOffset(), name.limit());",
      "info" : "ExpressionStatement[21327-21384]:ExpressionStatement[21309-21366]"
    }, {
      "left" : "written += name.limit();",
      "right" : "written += name.limit();",
      "info" : "ExpressionStatement[21393-21417]:ExpressionStatement[21375-21399]"
    }, {
      "left" : "writeOut(extra);",
      "right" : "writeOut(extra);",
      "info" : "ExpressionStatement[21450-21466]:ExpressionStatement[21432-21448]"
    }, {
      "left" : "written += extra.length;",
      "right" : "written += extra.length;",
      "info" : "ExpressionStatement[21475-21499]:ExpressionStatement[21457-21481]"
    }, {
      "left" : "dataStart = written;",
      "right" : "dataStart = written;",
      "info" : "ExpressionStatement[21509-21529]:ExpressionStatement[21491-21511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21744-22130]:Block[21726-22112]"
    }, {
      "left" : "if (ze.getMethod() != DEFLATED || raf != null)",
      "right" : "if (ze.getMethod() != DEFLATED || raf != null)",
      "info" : "IfStatement[21754-21832]:IfStatement[21736-21814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21801-21832]:Block[21783-21814]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21815-21822]:ReturnStatement[21797-21804]"
    }, {
      "left" : "writeOut(DD_SIG);",
      "right" : "writeOut(DD_SIG);",
      "info" : "ExpressionStatement[21841-21858]:ExpressionStatement[21823-21840]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.getCrc()));",
      "right" : "writeOut(ZipLong.getBytes(entry.getCrc()));",
      "info" : "ExpressionStatement[21867-21910]:ExpressionStatement[21849-21892]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.getCompressedSize()));",
      "right" : "writeOut(ZipLong.getBytes(entry.getCompressedSize()));",
      "info" : "ExpressionStatement[21919-21973]:ExpressionStatement[21901-21955]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.getSize()));",
      "right" : "writeOut(ZipLong.getBytes(entry.getSize()));",
      "info" : "ExpressionStatement[21982-22026]:ExpressionStatement[21964-22008]"
    }, {
      "left" : "written += 16;",
      "right" : "written += 16;",
      "info" : "ExpressionStatement[22073-22087]:ExpressionStatement[22055-22069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22346-25115]:Block[22328-25097]"
    }, {
      "left" : "writeOut(CFH_SIG);",
      "right" : "writeOut(CFH_SIG);",
      "info" : "ExpressionStatement[22356-22374]:ExpressionStatement[22338-22356]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[22383-22399]:ExpressionStatement[22365-22381]"
    }, {
      "left" : "writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | 20));",
      "right" : "writeOut(ZipShort.getBytes((ze.getPlatform() << 8) | 20));",
      "info" : "ExpressionStatement[22474-22532]:ExpressionStatement[22456-22514]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[22541-22558]:ExpressionStatement[22523-22540]"
    }, {
      "left" : "final int zipMethod = ze.getMethod();",
      "right" : "final int zipMethod = ze.getMethod();",
      "info" : "VariableDeclarationStatement[22568-22605]:VariableDeclarationStatement[22550-22587]"
    }, {
      "left" : "final boolean encodable = zipEncoding.canEncode(ze.getName());",
      "right" : "final boolean encodable = zipEncoding.canEncode(ze.getName());",
      "info" : "VariableDeclarationStatement[22614-22676]:VariableDeclarationStatement[22596-22658]"
    }, {
      "left" : "writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,\n                                                         !encodable\n                                                         && fallbackToUTF8);",
      "right" : "writeVersionNeededToExtractAndGeneralPurposeBits(zipMethod,\n                                                         !encodable\n                                                         && fallbackToUTF8);",
      "info" : "ExpressionStatement[22685-22889]:ExpressionStatement[22667-22871]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[22898-22914]:ExpressionStatement[22880-22896]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(zipMethod));",
      "right" : "writeOut(ZipShort.getBytes(zipMethod));",
      "info" : "ExpressionStatement[22954-22993]:ExpressionStatement[22936-22975]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[23002-23019]:ExpressionStatement[22984-23001]"
    }, {
      "left" : "writeOut(ZipUtil.toDosTime(ze.getTime()));",
      "right" : "writeOut(ZipUtil.toDosTime(ze.getTime()));",
      "info" : "ExpressionStatement[23064-23106]:ExpressionStatement[23046-23088]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[23115-23131]:ExpressionStatement[23097-23113]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getCrc()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getCrc()));",
      "info" : "ExpressionStatement[23216-23256]:ExpressionStatement[23198-23238]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getCompressedSize()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getCompressedSize()));",
      "info" : "ExpressionStatement[23265-23316]:ExpressionStatement[23247-23298]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getSize()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getSize()));",
      "info" : "ExpressionStatement[23325-23366]:ExpressionStatement[23307-23348]"
    }, {
      "left" : "written += 12;",
      "right" : "written += 12;",
      "info" : "ExpressionStatement[23413-23427]:ExpressionStatement[23395-23409]"
    }, {
      "left" : "final ZipEncoding entryEncoding;",
      "right" : "final ZipEncoding entryEncoding;",
      "info" : "VariableDeclarationStatement[23502-23534]:VariableDeclarationStatement[23484-23516]"
    }, {
      "left" : "if (!encodable && fallbackToUTF8)",
      "right" : "if (!encodable && fallbackToUTF8)",
      "info" : "IfStatement[23552-23720]:IfStatement[23534-23702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23586-23662]:Block[23568-23644]"
    }, {
      "left" : "entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;",
      "right" : "entryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;",
      "info" : "ExpressionStatement[23600-23652]:ExpressionStatement[23582-23634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23668-23720]:Block[23650-23702]"
    }, {
      "left" : "entryEncoding = zipEncoding;",
      "right" : "entryEncoding = zipEncoding;",
      "info" : "ExpressionStatement[23682-23710]:ExpressionStatement[23664-23692]"
    }, {
      "left" : "ByteBuffer name = entryEncoding.encode(ze.getName());",
      "right" : "ByteBuffer name = entryEncoding.encode(ze.getName());",
      "info" : "VariableDeclarationStatement[23738-23791]:VariableDeclarationStatement[23720-23773]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(name.limit()));",
      "right" : "writeOut(ZipShort.getBytes(name.limit()));",
      "info" : "ExpressionStatement[23809-23851]:ExpressionStatement[23791-23833]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[23860-23877]:ExpressionStatement[23842-23859]"
    }, {
      "left" : "byte[] extra = ze.getCentralDirectoryExtra();",
      "right" : "byte[] extra = ze.getCentralDirectoryExtra();",
      "info" : "VariableDeclarationStatement[23917-23962]:VariableDeclarationStatement[23899-23944]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(extra.length));",
      "right" : "writeOut(ZipShort.getBytes(extra.length));",
      "info" : "ExpressionStatement[23971-24013]:ExpressionStatement[23953-23995]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[24022-24039]:ExpressionStatement[24004-24021]"
    }, {
      "left" : "String comm = ze.getComment();",
      "right" : "String comm = ze.getComment();",
      "info" : "VariableDeclarationStatement[24080-24110]:VariableDeclarationStatement[24062-24092]"
    }, {
      "left" : "if (comm == null)",
      "right" : "if (comm == null)",
      "info" : "IfStatement[24119-24171]:IfStatement[24101-24153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24137-24171]:Block[24119-24153]"
    }, {
      "left" : "comm = \"\";",
      "right" : "comm = \"\";",
      "info" : "ExpressionStatement[24151-24161]:ExpressionStatement[24133-24143]"
    }, {
      "left" : "ByteBuffer commentB = entryEncoding.encode(comm);",
      "right" : "ByteBuffer commentB = entryEncoding.encode(comm);",
      "info" : "VariableDeclarationStatement[24189-24238]:VariableDeclarationStatement[24171-24220]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(commentB.limit()));",
      "right" : "writeOut(ZipShort.getBytes(commentB.limit()));",
      "info" : "ExpressionStatement[24256-24302]:ExpressionStatement[24238-24284]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[24311-24328]:ExpressionStatement[24293-24310]"
    }, {
      "left" : "writeOut(ZERO);",
      "right" : "writeOut(ZERO);",
      "info" : "ExpressionStatement[24367-24382]:ExpressionStatement[24349-24364]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[24391-24408]:ExpressionStatement[24373-24390]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(ze.getInternalAttributes()));",
      "right" : "writeOut(ZipShort.getBytes(ze.getInternalAttributes()));",
      "info" : "ExpressionStatement[24454-24510]:ExpressionStatement[24436-24492]"
    }, {
      "left" : "written += SHORT;",
      "right" : "written += SHORT;",
      "info" : "ExpressionStatement[24519-24536]:ExpressionStatement[24501-24518]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(ze.getExternalAttributes()));",
      "right" : "writeOut(ZipLong.getBytes(ze.getExternalAttributes()));",
      "info" : "ExpressionStatement[24582-24637]:ExpressionStatement[24564-24619]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[24646-24662]:ExpressionStatement[24628-24644]"
    }, {
      "left" : "writeOut((byte[]) offsets.get(ze));",
      "right" : "writeOut((byte[]) offsets.get(ze));",
      "info" : "ExpressionStatement[24706-24741]:ExpressionStatement[24688-24723]"
    }, {
      "left" : "written += WORD;",
      "right" : "written += WORD;",
      "info" : "ExpressionStatement[24750-24766]:ExpressionStatement[24732-24748]"
    }, {
      "left" : "writeOut(name.array(), name.arrayOffset(), name.limit());",
      "right" : "writeOut(name.array(), name.arrayOffset(), name.limit());",
      "info" : "ExpressionStatement[24797-24854]:ExpressionStatement[24779-24836]"
    }, {
      "left" : "written += name.limit();",
      "right" : "written += name.limit();",
      "info" : "ExpressionStatement[24863-24887]:ExpressionStatement[24845-24869]"
    }, {
      "left" : "writeOut(extra);",
      "right" : "writeOut(extra);",
      "info" : "ExpressionStatement[24920-24936]:ExpressionStatement[24902-24918]"
    }, {
      "left" : "written += extra.length;",
      "right" : "written += extra.length;",
      "info" : "ExpressionStatement[24945-24969]:ExpressionStatement[24927-24951]"
    }, {
      "left" : "writeOut(commentB.array(), commentB.arrayOffset(), commentB.limit());",
      "right" : "writeOut(commentB.array(), commentB.arrayOffset(), commentB.limit());",
      "info" : "ExpressionStatement[25003-25072]:ExpressionStatement[24985-25054]"
    }, {
      "left" : "written += commentB.limit();",
      "right" : "written += commentB.limit();",
      "info" : "ExpressionStatement[25081-25109]:ExpressionStatement[25063-25091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25291-25867]:Block[25273-25849]"
    }, {
      "left" : "writeOut(EOCD_SIG);",
      "right" : "writeOut(EOCD_SIG);",
      "info" : "ExpressionStatement[25301-25320]:ExpressionStatement[25283-25302]"
    }, {
      "left" : "writeOut(ZERO);",
      "right" : "writeOut(ZERO);",
      "info" : "ExpressionStatement[25354-25369]:ExpressionStatement[25336-25351]"
    }, {
      "left" : "writeOut(ZERO);",
      "right" : "writeOut(ZERO);",
      "info" : "ExpressionStatement[25378-25393]:ExpressionStatement[25360-25375]"
    }, {
      "left" : "byte[] num = ZipShort.getBytes(entries.size());",
      "right" : "byte[] num = ZipShort.getBytes(entries.size());",
      "info" : "VariableDeclarationStatement[25432-25479]:VariableDeclarationStatement[25414-25461]"
    }, {
      "left" : "writeOut(num);",
      "right" : "writeOut(num);",
      "info" : "ExpressionStatement[25488-25502]:ExpressionStatement[25470-25484]"
    }, {
      "left" : "writeOut(num);",
      "right" : "writeOut(num);",
      "info" : "ExpressionStatement[25511-25525]:ExpressionStatement[25493-25507]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(cdLength));",
      "right" : "writeOut(ZipLong.getBytes(cdLength));",
      "info" : "ExpressionStatement[25572-25609]:ExpressionStatement[25554-25591]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(cdOffset));",
      "right" : "writeOut(ZipLong.getBytes(cdOffset));",
      "info" : "ExpressionStatement[25618-25655]:ExpressionStatement[25600-25637]"
    }, {
      "left" : "ByteBuffer data = this.zipEncoding.encode(comment);",
      "right" : "ByteBuffer data = this.zipEncoding.encode(comment);",
      "info" : "VariableDeclarationStatement[25693-25744]:VariableDeclarationStatement[25675-25726]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(data.limit()));",
      "right" : "writeOut(ZipShort.getBytes(data.limit()));",
      "info" : "ExpressionStatement[25753-25795]:ExpressionStatement[25735-25777]"
    }, {
      "left" : "writeOut(data.array(), data.arrayOffset(), data.limit());",
      "right" : "writeOut(data.array(), data.arrayOffset(), data.limit());",
      "info" : "ExpressionStatement[25804-25861]:ExpressionStatement[25786-25843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26082-26129]:Block[26064-26111]"
    }, {
      "left" : "writeOut(data, 0, data.length);",
      "right" : "writeOut(data, 0, data.length);",
      "info" : "ExpressionStatement[26092-26123]:ExpressionStatement[26074-26105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26480-26631]:Block[26462-26613]"
    }, {
      "left" : "if (raf != null)",
      "right" : "if (raf != null)",
      "info" : "IfStatement[26490-26625]:IfStatement[26472-26607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26507-26563]:Block[26489-26545]"
    }, {
      "left" : "raf.write(data, offset, length);",
      "right" : "raf.write(data, offset, length);",
      "info" : "ExpressionStatement[26521-26553]:ExpressionStatement[26503-26535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26569-26625]:Block[26551-26607]"
    }, {
      "left" : "out.write(data, offset, length);",
      "right" : "out.write(data, offset, length);",
      "info" : "ExpressionStatement[26583-26615]:ExpressionStatement[26565-26597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26697-26773]:Block[26679-26755]"
    }, {
      "left" : "while (!def.needsInput())",
      "right" : "while (!def.needsInput())",
      "info" : "WhileStatement[26707-26767]:WhileStatement[26689-26749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26733-26767]:Block[26715-26749]"
    }, {
      "left" : "deflate();",
      "right" : "deflate();",
      "info" : "ExpressionStatement[26747-26757]:ExpressionStatement[26729-26739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27114-27813]:Block[27096-27795]"
    }, {
      "left" : "int versionNeededToExtract = 10;",
      "right" : "int versionNeededToExtract = 10;",
      "info" : "VariableDeclarationStatement[27163-27195]:VariableDeclarationStatement[27145-27177]"
    }, {
      "left" : "int generalPurposeFlag = (useEFS || utfFallback) ? EFS_FLAG : 0;",
      "right" : "int generalPurposeFlag = (useEFS || utfFallback) ? EFS_FLAG : 0;",
      "info" : "VariableDeclarationStatement[27204-27268]:VariableDeclarationStatement[27186-27250]"
    }, {
      "left" : "if (zipMethod == DEFLATED && raf == null)",
      "right" : "if (zipMethod == DEFLATED && raf == null)",
      "info" : "IfStatement[27277-27578]:IfStatement[27259-27560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27319-27578]:Block[27301-27560]"
    }, {
      "left" : "versionNeededToExtract =  20;",
      "right" : "versionNeededToExtract =  20;",
      "info" : "ExpressionStatement[27442-27471]:ExpressionStatement[27424-27453]"
    }, {
      "left" : "generalPurposeFlag |= 8;",
      "right" : "generalPurposeFlag |= 8;",
      "info" : "ExpressionStatement[27544-27568]:ExpressionStatement[27526-27550]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(versionNeededToExtract));",
      "right" : "writeOut(ZipShort.getBytes(versionNeededToExtract));",
      "info" : "ExpressionStatement[27662-27714]:ExpressionStatement[27644-27696]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(generalPurposeFlag));",
      "right" : "writeOut(ZipShort.getBytes(generalPurposeFlag));",
      "info" : "ExpressionStatement[27759-27807]:ExpressionStatement[27741-27789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28697-28730]:Block[28679-28712]"
    }, {
      "left" : "name = n;",
      "right" : "name = n;",
      "info" : "ExpressionStatement[28711-28720]:ExpressionStatement[28693-28702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28764-28800]:Block[28746-28782]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[28778-28790]:ReturnStatement[28760-28772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28916-28981]:Block[28898-28963]"
    }, {
      "left" : "return new ZipArchiveEntry(inputFile, entryName);",
      "right" : "return new ZipArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[28926-28975]:ReturnStatement[28908-28957]"
    } ]
  },
  "interFileMappings" : { }
}