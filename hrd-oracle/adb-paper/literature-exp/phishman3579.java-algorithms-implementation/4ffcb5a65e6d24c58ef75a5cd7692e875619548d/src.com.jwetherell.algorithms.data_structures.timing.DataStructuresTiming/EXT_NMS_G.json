{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataStructuresTiming",
      "right" : "DataStructuresTiming",
      "info" : "TypeDeclaration[1586-61760]:TypeDeclaration[1586-61810]"
    }, {
      "left" : "private static final int NUMBER_OF_TESTS = 3;",
      "right" : "private static final int NUMBER_OF_TESTS = 3;",
      "info" : "FieldDeclaration[1627-1672]:FieldDeclaration[1627-1672]"
    }, {
      "left" : "private static final Random RANDOM = new Random();",
      "right" : "private static final Random RANDOM = new Random();",
      "info" : "FieldDeclaration[1677-1727]:FieldDeclaration[1677-1727]"
    }, {
      "left" : "private static final int ARRAY_SIZE = 10000;",
      "right" : "private static final int ARRAY_SIZE = 10000;",
      "info" : "FieldDeclaration[1732-1776]:FieldDeclaration[1732-1776]"
    }, {
      "left" : "private static final int RANDOM_SIZE = 1000 * ARRAY_SIZE;",
      "right" : "private static final int RANDOM_SIZE = 1000 * ARRAY_SIZE;",
      "info" : "FieldDeclaration[1781-1838]:FieldDeclaration[1781-1838]"
    }, {
      "left" : "private static final Integer INVALID = RANDOM_SIZE + 10;",
      "right" : "private static final Integer INVALID = RANDOM_SIZE + 10;",
      "info" : "FieldDeclaration[1843-1899]:FieldDeclaration[1843-1899]"
    }, {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"0.##\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"0.##\");",
      "info" : "FieldDeclaration[1904-1974]:FieldDeclaration[1904-1974]"
    }, {
      "left" : "private static Integer[] unsorted = null;",
      "right" : "private static Integer[] unsorted = null;",
      "info" : "FieldDeclaration[1980-2021]:FieldDeclaration[1980-2021]"
    }, {
      "left" : "private static Integer[] sorted = null;",
      "right" : "private static Integer[] sorted = null;",
      "info" : "FieldDeclaration[2026-2065]:FieldDeclaration[2026-2065]"
    }, {
      "left" : "private static String string = null;",
      "right" : "private static String string = null;",
      "info" : "FieldDeclaration[2070-2106]:FieldDeclaration[2070-2106]"
    }, {
      "left" : "private static int debug = 1;",
      "right" : "private static int debug = 1;",
      "info" : "FieldDeclaration[2112-2141]:FieldDeclaration[2112-2141]"
    }, {
      "left" : "private static boolean debugTime = true;",
      "right" : "private static boolean debugTime = true;",
      "info" : "FieldDeclaration[2239-2279]:FieldDeclaration[2239-2279]"
    }, {
      "left" : "private static boolean debugMemory = true;",
      "right" : "private static boolean debugMemory = true;",
      "info" : "FieldDeclaration[2369-2411]:FieldDeclaration[2369-2411]"
    }, {
      "left" : "private static final int TESTS = 39;",
      "right" : "private static final int TESTS = 39;",
      "info" : "FieldDeclaration[2466-2502]:FieldDeclaration[2466-2502]"
    }, {
      "left" : "private static final String[] testNames = new String[TESTS];",
      "right" : "private static final String[] testNames = new String[TESTS];",
      "info" : "FieldDeclaration[2556-2616]:FieldDeclaration[2556-2616]"
    }, {
      "left" : "private static final long[][] testResults = new long[TESTS][];",
      "right" : "private static final long[][] testResults = new long[TESTS][];",
      "info" : "FieldDeclaration[2653-2715]:FieldDeclaration[2653-2715]"
    }, {
      "left" : "private static int testIndex = 0;",
      "right" : "private static int testIndex = 0;",
      "info" : "FieldDeclaration[2754-2787]:FieldDeclaration[2754-2787]"
    }, {
      "left" : "private static int testNumber = 0;",
      "right" : "private static int testNumber = 0;",
      "info" : "FieldDeclaration[2816-2850]:FieldDeclaration[2816-2850]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[2905-3452]:MethodDeclaration[2905-3452]"
    }, {
      "left" : "private static void generateTestData()",
      "right" : "private static void generateTestData()",
      "info" : "MethodDeclaration[3458-4617]:MethodDeclaration[3458-4617]"
    }, {
      "left" : "private static boolean runTests()",
      "right" : "private static boolean runTests()",
      "info" : "MethodDeclaration[4623-10451]:MethodDeclaration[4623-10451]"
    }, {
      "left" : "private static void handleError(Object obj)",
      "right" : "private static void handleError(Object obj)",
      "info" : "MethodDeclaration[10457-10642]:MethodDeclaration[10457-10642]"
    }, {
      "left" : "private static boolean testAVLTree()",
      "right" : "private static boolean testAVLTree()",
      "info" : "MethodDeclaration[10648-10963]:MethodDeclaration[10648-10963]"
    }, {
      "left" : "private static boolean testBTree()",
      "right" : "private static boolean testBTree()",
      "info" : "MethodDeclaration[10969-11268]:MethodDeclaration[10969-11268]"
    }, {
      "left" : "private static boolean testBST()",
      "right" : "private static boolean testBST()",
      "info" : "MethodDeclaration[11274-11589]:MethodDeclaration[11274-11589]"
    }, {
      "left" : "private static boolean testMinHeap()",
      "right" : "private static boolean testMinHeap()",
      "info" : "MethodDeclaration[11595-12297]:MethodDeclaration[11595-12297]"
    }, {
      "left" : "private static boolean testMaxHeap()",
      "right" : "private static boolean testMaxHeap()",
      "info" : "MethodDeclaration[12303-13005]:MethodDeclaration[12303-13005]"
    }, {
      "left" : "private static boolean testHashMap()",
      "right" : "private static boolean testHashMap()",
      "info" : "MethodDeclaration[13011-13577]:MethodDeclaration[13011-13577]"
    }, {
      "left" : "private static boolean testHAMT()",
      "right" : "private static boolean testHAMT()",
      "info" : "MethodDeclaration[13583-13898]:MethodDeclaration[13583-13898]"
    }, {
      "left" : "private static boolean testJavaHashMap()",
      "right" : "private static boolean testJavaHashMap()",
      "info" : "MethodDeclaration[13904-14186]:MethodDeclaration[13904-14186]"
    }, {
      "left" : "private static boolean testJavaMinHeap()",
      "right" : "private static boolean testJavaMinHeap()",
      "info" : "MethodDeclaration[14192-14870]:MethodDeclaration[14192-14870]"
    }, {
      "left" : "public int compare(Integer arg0, Integer arg1)",
      "right" : "public int compare(Integer arg0, Integer arg1)",
      "info" : "MethodDeclaration[14397-14721]:MethodDeclaration[14397-14721]"
    }, {
      "left" : "private static boolean testJavaMaxHeap()",
      "right" : "private static boolean testJavaMaxHeap()",
      "info" : "MethodDeclaration[14876-15553]:MethodDeclaration[14876-15553]"
    }, {
      "left" : "public int compare(Integer arg0, Integer arg1)",
      "right" : "public int compare(Integer arg0, Integer arg1)",
      "info" : "MethodDeclaration[15081-15405]:MethodDeclaration[15081-15405]"
    }, {
      "left" : "private static boolean testJavaArrayList()",
      "right" : "private static boolean testJavaArrayList()",
      "info" : "MethodDeclaration[15559-15749]:MethodDeclaration[15559-15749]"
    }, {
      "left" : "private static boolean testJavaLinkedList()",
      "right" : "private static boolean testJavaLinkedList()",
      "info" : "MethodDeclaration[15755-15948]:MethodDeclaration[15755-15948]"
    }, {
      "left" : "private static boolean testJavaArrayQueue()",
      "right" : "private static boolean testJavaArrayQueue()",
      "info" : "MethodDeclaration[15954-16238]:MethodDeclaration[15954-16238]"
    }, {
      "left" : "private static boolean testJavaLinkedQueue()",
      "right" : "private static boolean testJavaLinkedQueue()",
      "info" : "MethodDeclaration[16244-16530]:MethodDeclaration[16244-16530]"
    }, {
      "left" : "private static boolean testJavaRedBlackIntegerTree()",
      "right" : "private static boolean testJavaRedBlackIntegerTree()",
      "info" : "MethodDeclaration[16536-16838]:MethodDeclaration[16536-16838]"
    }, {
      "left" : "private static boolean testJavaRedBlackStringTree()",
      "right" : "private static boolean testJavaRedBlackStringTree()",
      "info" : "MethodDeclaration[16844-17141]:MethodDeclaration[16844-17141]"
    }, {
      "left" : "private static boolean testJavaStack()",
      "right" : "private static boolean testJavaStack()",
      "info" : "MethodDeclaration[17147-17420]:MethodDeclaration[17147-17420]"
    }, {
      "left" : "private static boolean testJavaTreeMap()",
      "right" : "private static boolean testJavaTreeMap()",
      "info" : "MethodDeclaration[17426-17690]:MethodDeclaration[17426-17690]"
    }, {
      "left" : "private static boolean testArrayList()",
      "right" : "private static boolean testArrayList()",
      "info" : "MethodDeclaration[17696-18018]:MethodDeclaration[17696-18018]"
    }, {
      "left" : "private static boolean testLinkedList()",
      "right" : "private static boolean testLinkedList()",
      "info" : "MethodDeclaration[18024-18350]:MethodDeclaration[18024-18350]"
    }, {
      "left" : "private static boolean testPatriciaTrie()",
      "right" : "private static boolean testPatriciaTrie()",
      "info" : "MethodDeclaration[18356-18686]:MethodDeclaration[18356-18686]"
    }, {
      "left" : "private static boolean testArrayQueue()",
      "right" : "private static boolean testArrayQueue()",
      "info" : "MethodDeclaration[18692-19022]:MethodDeclaration[18692-19022]"
    }, {
      "left" : "private static boolean testLinkedQueue()",
      "right" : "private static boolean testLinkedQueue()",
      "info" : "MethodDeclaration[19028-19362]:MethodDeclaration[19028-19362]"
    }, {
      "left" : "private static boolean testRadixTrie()",
      "right" : "private static boolean testRadixTrie()",
      "info" : "MethodDeclaration[19368-19672]:MethodDeclaration[19368-19672]"
    }, {
      "left" : "private static boolean testRedBlackTree()",
      "right" : "private static boolean testRedBlackTree()",
      "info" : "MethodDeclaration[19678-20005]:MethodDeclaration[19678-20005]"
    }, {
      "left" : "private static boolean testJavaSkipList()",
      "right" : "private static boolean testJavaSkipList()",
      "info" : "MethodDeclaration[20011-20329]:MethodDeclaration[20011-20329]"
    }, {
      "left" : "private static boolean testSkipList()",
      "right" : "private static boolean testSkipList()",
      "info" : "MethodDeclaration[20335-20640]:MethodDeclaration[20335-20640]"
    }, {
      "left" : "private static boolean testSplayTree()",
      "right" : "private static boolean testSplayTree()",
      "info" : "MethodDeclaration[20646-20967]:MethodDeclaration[20646-20967]"
    }, {
      "left" : "private static boolean testArrayStack()",
      "right" : "private static boolean testArrayStack()",
      "info" : "MethodDeclaration[20973-21303]:MethodDeclaration[20973-21303]"
    }, {
      "left" : "private static boolean testLinkedStack()",
      "right" : "private static boolean testLinkedStack()",
      "info" : "MethodDeclaration[21309-21643]:MethodDeclaration[21309-21643]"
    }, {
      "left" : "private static boolean testTreap()",
      "right" : "private static boolean testTreap()",
      "info" : "MethodDeclaration[21649-21957]:MethodDeclaration[21649-21957]"
    }, {
      "left" : "private static boolean testTreeMap()",
      "right" : "private static boolean testTreeMap()",
      "info" : "MethodDeclaration[21963-22259]:MethodDeclaration[21963-22259]"
    }, {
      "left" : "private static boolean testTrie()",
      "right" : "private static boolean testTrie()",
      "info" : "MethodDeclaration[22265-22554]:MethodDeclaration[22265-22554]"
    }, {
      "left" : "private static boolean testTrieMap()",
      "right" : "private static boolean testTrieMap()",
      "info" : "MethodDeclaration[22560-22856]:MethodDeclaration[22560-22856]"
    }, {
      "left" : "private static boolean testJavaSkipListMap()",
      "right" : "private static boolean testJavaSkipListMap()",
      "info" : "MethodDeclaration[22862-23146]:MethodDeclaration[22862-23146]"
    }, {
      "left" : "private static boolean testSkipListMap()",
      "right" : "private static boolean testSkipListMap()",
      "info" : "MethodDeclaration[23152-23464]:MethodDeclaration[23152-23464]"
    }, {
      "left" : "private static <T extends Comparable<T>> boolean testJavaCollection(Collection<T> collection, Class<T> type, String name)",
      "right" : "private static <T extends Comparable<T>> boolean testJavaCollection(Collection<T> collection, Class<T> type, String name)",
      "info" : "MethodDeclaration[23470-39755]:MethodDeclaration[23470-39755]"
    }, {
      "left" : "private static <K extends Comparable<K>,V> boolean testJavaMap(java.util.Map<K,V> map, Class<K> keyType, String name)",
      "right" : "private static <K extends Comparable<K>,V> boolean testJavaMap(java.util.Map<K,V> map, Class<K> keyType, String name)",
      "info" : "MethodDeclaration[39761-56433]:MethodDeclaration[39761-56433]"
    }, {
      "left" : "private static final String getTestResults(int number, String[] names, long[][] results)",
      "right" : "private static final String getTestResults(int number, String[] names, long[][] results)",
      "info" : "MethodDeclaration[56439-60982]:MethodDeclaration[56439-60982]"
    }, {
      "left" : "private static final long getMemoryUse()",
      "right" : "private static final long getMemoryUse()",
      "info" : "MethodDeclaration[60988-61261]:MethodDeclaration[60988-61261]"
    }, {
      "left" : "private static final void putOutTheGarbage()",
      "right" : "private static final void putOutTheGarbage()",
      "info" : "MethodDeclaration[61267-61397]:MethodDeclaration[61267-61397]"
    }, {
      "left" : "private static final long fSLEEP_INTERVAL = 100;",
      "right" : "private static final long fSLEEP_INTERVAL = 100;",
      "info" : "FieldDeclaration[61403-61451]:FieldDeclaration[61403-61451]"
    }, {
      "left" : "private static final void collectGarbage()",
      "right" : "private static final void collectGarbage()",
      "info" : "MethodDeclaration[61457-61758]:MethodDeclaration[61457-61808]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2905-2911]:Modifier[2905-2911]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2912-2918]:Modifier[2912-2918]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2919-2923]:PrimitiveType[2919-2923]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[2924-2928]:SimpleName[2924-2928]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[2929-2942]:SingleVariableDeclaration[2929-2942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2944-3452]:Block[2944-3452]"
    }, {
      "left" : "System.out.println(\"Starting tests.\");",
      "right" : "System.out.println(\"Starting tests.\");",
      "info" : "ExpressionStatement[2954-2992]:ExpressionStatement[2954-2992]"
    }, {
      "left" : "boolean passed = false;",
      "right" : "boolean passed = false;",
      "info" : "VariableDeclarationStatement[3001-3024]:VariableDeclarationStatement[3001-3024]"
    }, {
      "left" : "for (int i = 0; i < NUMBER_OF_TESTS; i++)",
      "right" : "for (int i = 0; i < NUMBER_OF_TESTS; i++)",
      "info" : "ForStatement[3033-3303]:ForStatement[3033-3303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3075-3303]:Block[3075-3303]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3089-3261]:TryStatement[3089-3261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3093-3145]:Block[3093-3145]"
    }, {
      "left" : "passed = runTests();",
      "right" : "passed = runTests();",
      "info" : "ExpressionStatement[3111-3131]:ExpressionStatement[3111-3131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3177-3261]:Block[3177-3261]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "System.err.println(string);",
      "info" : "ExpressionStatement[3195-3222]:ExpressionStatement[3195-3222]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[3239-3247]:ThrowStatement[3239-3247]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[3274-3293]:IfStatement[3274-3293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3287-3293]:BreakStatement[3287-3293]"
    }, {
      "left" : "if (passed)",
      "right" : "if (passed)",
      "info" : "IfStatement[3312-3446]:IfStatement[3312-3446]"
    }, {
      "left" : "System.out.println(\"Tests finished. All passed.\");",
      "right" : "System.out.println(\"Tests finished. All passed.\");",
      "info" : "ExpressionStatement[3324-3374]:ExpressionStatement[3324-3374]"
    }, {
      "left" : "System.err.println(\"Tests finished. Detected a failure.\");",
      "right" : "System.err.println(\"Tests finished. Detected a failure.\");",
      "info" : "ExpressionStatement[3388-3446]:ExpressionStatement[3388-3446]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3458-3465]:Modifier[3458-3465]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3466-3472]:Modifier[3466-3472]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3473-3477]:PrimitiveType[3473-3477]"
    }, {
      "left" : "generateTestData",
      "right" : "generateTestData",
      "info" : "SimpleName[3478-3494]:SimpleName[3478-3494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3497-4617]:Block[3497-4617]"
    }, {
      "left" : "System.out.println(\"Generating data.\");",
      "right" : "System.out.println(\"Generating data.\");",
      "info" : "ExpressionStatement[3507-3546]:ExpressionStatement[3507-3546]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[3555-3599]:VariableDeclarationStatement[3555-3599]"
    }, {
      "left" : "builder.append(\"Array=\");",
      "right" : "builder.append(\"Array=\");",
      "info" : "ExpressionStatement[3608-3633]:ExpressionStatement[3608-3633]"
    }, {
      "left" : "unsorted = new Integer[ARRAY_SIZE];",
      "right" : "unsorted = new Integer[ARRAY_SIZE];",
      "info" : "ExpressionStatement[3642-3677]:ExpressionStatement[3642-3677]"
    }, {
      "left" : "java.util.Set<Integer> set = new java.util.HashSet<Integer>();",
      "right" : "java.util.Set<Integer> set = new java.util.HashSet<Integer>();",
      "info" : "VariableDeclarationStatement[3686-3748]:VariableDeclarationStatement[3686-3748]"
    }, {
      "left" : "for (int i = 0; i < ARRAY_SIZE; i++)",
      "right" : "for (int i = 0; i < ARRAY_SIZE; i++)",
      "info" : "ForStatement[3757-4315]:ForStatement[3757-4315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3794-4315]:Block[3794-4315]"
    }, {
      "left" : "Integer j = RANDOM.nextInt(RANDOM_SIZE);",
      "right" : "Integer j = RANDOM.nextInt(RANDOM_SIZE);",
      "info" : "VariableDeclarationStatement[3808-3848]:VariableDeclarationStatement[3808-3848]"
    }, {
      "left" : "boolean found = true;",
      "right" : "boolean found = true;",
      "info" : "VariableDeclarationStatement[3910-3931]:VariableDeclarationStatement[3910-3931]"
    }, {
      "left" : "while (found)",
      "right" : "while (found)",
      "info" : "WhileStatement[3944-4212]:WhileStatement[3944-4212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3958-4212]:Block[3958-4212]"
    }, {
      "left" : "if (set.contains(j))",
      "right" : "if (set.contains(j))",
      "info" : "IfStatement[3976-4198]:IfStatement[3976-4198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3997-4069]:Block[3997-4069]"
    }, {
      "left" : "j = RANDOM.nextInt(RANDOM_SIZE);",
      "right" : "j = RANDOM.nextInt(RANDOM_SIZE);",
      "info" : "ExpressionStatement[4019-4051]:ExpressionStatement[4019-4051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4075-4198]:Block[4075-4198]"
    }, {
      "left" : "unsorted[i] = j;",
      "right" : "unsorted[i] = j;",
      "info" : "ExpressionStatement[4097-4113]:ExpressionStatement[4097-4113]"
    }, {
      "left" : "set.add(j);",
      "right" : "set.add(j);",
      "info" : "ExpressionStatement[4134-4145]:ExpressionStatement[4134-4145]"
    }, {
      "left" : "found = false;",
      "right" : "found = false;",
      "info" : "ExpressionStatement[4166-4180]:ExpressionStatement[4166-4180]"
    }, {
      "left" : "unsorted[i] = j;",
      "right" : "unsorted[i] = j;",
      "info" : "ExpressionStatement[4225-4241]:ExpressionStatement[4225-4241]"
    }, {
      "left" : "if (i!=ARRAY_SIZE-1)",
      "right" : "if (i!=ARRAY_SIZE-1)",
      "info" : "IfStatement[4254-4305]:IfStatement[4254-4305]"
    }, {
      "left" : "builder.append(j).append(',');",
      "right" : "builder.append(j).append(',');",
      "info" : "ExpressionStatement[4275-4305]:ExpressionStatement[4275-4305]"
    }, {
      "left" : "set.clear();",
      "right" : "set.clear();",
      "info" : "ExpressionStatement[4324-4336]:ExpressionStatement[4324-4336]"
    }, {
      "left" : "set = null;",
      "right" : "set = null;",
      "info" : "ExpressionStatement[4345-4356]:ExpressionStatement[4345-4356]"
    }, {
      "left" : "builder.append('\\n');",
      "right" : "builder.append('\\n');",
      "info" : "ExpressionStatement[4365-4386]:ExpressionStatement[4365-4386]"
    }, {
      "left" : "string = builder.toString();",
      "right" : "string = builder.toString();",
      "info" : "ExpressionStatement[4395-4423]:ExpressionStatement[4395-4423]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[4432-4474]:IfStatement[4432-4474]"
    }, {
      "left" : "System.out.println(string);",
      "right" : "System.out.println(string);",
      "info" : "ExpressionStatement[4447-4474]:ExpressionStatement[4447-4474]"
    }, {
      "left" : "sorted = Arrays.copyOf(unsorted, unsorted.length);",
      "right" : "sorted = Arrays.copyOf(unsorted, unsorted.length);",
      "info" : "ExpressionStatement[4484-4534]:ExpressionStatement[4484-4534]"
    }, {
      "left" : "Arrays.sort(sorted);",
      "right" : "Arrays.sort(sorted);",
      "info" : "ExpressionStatement[4543-4563]:ExpressionStatement[4543-4563]"
    }, {
      "left" : "System.out.println(\"Generated data.\");",
      "right" : "System.out.println(\"Generated data.\");",
      "info" : "ExpressionStatement[4573-4611]:ExpressionStatement[4573-4611]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4623-4630]:Modifier[4623-4630]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4631-4637]:Modifier[4631-4637]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4638-4645]:PrimitiveType[4638-4645]"
    }, {
      "left" : "runTests",
      "right" : "runTests",
      "info" : "SimpleName[4646-4654]:SimpleName[4646-4654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4657-10451]:Block[4657-10451]"
    }, {
      "left" : "testIndex = 0;",
      "right" : "testIndex = 0;",
      "info" : "ExpressionStatement[4667-4681]:ExpressionStatement[4667-4681]"
    }, {
      "left" : "testNumber++;",
      "right" : "testNumber++;",
      "info" : "ExpressionStatement[4690-4703]:ExpressionStatement[4690-4703]"
    }, {
      "left" : "generateTestData();",
      "right" : "generateTestData();",
      "info" : "ExpressionStatement[4713-4732]:ExpressionStatement[4713-4732]"
    }, {
      "left" : "boolean passed = true;",
      "right" : "boolean passed = true;",
      "info" : "VariableDeclarationStatement[4742-4764]:VariableDeclarationStatement[4742-4764]"
    }, {
      "left" : "passed = testJavaRedBlackIntegerTree();",
      "right" : "passed = testJavaRedBlackIntegerTree();",
      "info" : "ExpressionStatement[4792-4831]:ExpressionStatement[4792-4831]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[4840-4958]:IfStatement[4840-4958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4853-4958]:Block[4853-4958]"
    }, {
      "left" : "System.err.println(\"Java Red-Black [Integer] failed.\");",
      "right" : "System.err.println(\"Java Red-Black [Integer] failed.\");",
      "info" : "ExpressionStatement[4867-4922]:ExpressionStatement[4867-4922]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4935-4948]:ReturnStatement[4935-4948]"
    }, {
      "left" : "passed = testRedBlackTree();",
      "right" : "passed = testRedBlackTree();",
      "info" : "ExpressionStatement[4968-4996]:ExpressionStatement[4968-4996]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5005-5113]:IfStatement[5005-5113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5018-5113]:Block[5018-5113]"
    }, {
      "left" : "System.err.println(\"Red-Black Tree failed.\");",
      "right" : "System.err.println(\"Red-Black Tree failed.\");",
      "info" : "ExpressionStatement[5032-5077]:ExpressionStatement[5032-5077]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5090-5103]:ReturnStatement[5090-5103]"
    }, {
      "left" : "passed = testAVLTree();",
      "right" : "passed = testAVLTree();",
      "info" : "ExpressionStatement[5123-5146]:ExpressionStatement[5123-5146]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5155-5257]:IfStatement[5155-5257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5168-5257]:Block[5168-5257]"
    }, {
      "left" : "System.err.println(\"AVL Tree failed.\");",
      "right" : "System.err.println(\"AVL Tree failed.\");",
      "info" : "ExpressionStatement[5182-5221]:ExpressionStatement[5182-5221]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5234-5247]:ReturnStatement[5234-5247]"
    }, {
      "left" : "passed = testSplayTree();",
      "right" : "passed = testSplayTree();",
      "info" : "ExpressionStatement[5267-5292]:ExpressionStatement[5267-5292]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5301-5405]:IfStatement[5301-5405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5314-5405]:Block[5314-5405]"
    }, {
      "left" : "System.err.println(\"Splay Tree failed.\");",
      "right" : "System.err.println(\"Splay Tree failed.\");",
      "info" : "ExpressionStatement[5328-5369]:ExpressionStatement[5328-5369]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5382-5395]:ReturnStatement[5382-5395]"
    }, {
      "left" : "passed = testBTree();",
      "right" : "passed = testBTree();",
      "info" : "ExpressionStatement[5415-5436]:ExpressionStatement[5415-5436]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5445-5545]:IfStatement[5445-5545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5458-5545]:Block[5458-5545]"
    }, {
      "left" : "System.err.println(\"B-Tree failed.\");",
      "right" : "System.err.println(\"B-Tree failed.\");",
      "info" : "ExpressionStatement[5472-5509]:ExpressionStatement[5472-5509]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5522-5535]:ReturnStatement[5522-5535]"
    }, {
      "left" : "passed = testTreap();",
      "right" : "passed = testTreap();",
      "info" : "ExpressionStatement[5555-5576]:ExpressionStatement[5555-5576]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5585-5684]:IfStatement[5585-5684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5598-5684]:Block[5598-5684]"
    }, {
      "left" : "System.err.println(\"Treap failed.\");",
      "right" : "System.err.println(\"Treap failed.\");",
      "info" : "ExpressionStatement[5612-5648]:ExpressionStatement[5612-5648]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5661-5674]:ReturnStatement[5661-5674]"
    }, {
      "left" : "passed = testBST();",
      "right" : "passed = testBST();",
      "info" : "ExpressionStatement[5694-5713]:ExpressionStatement[5694-5713]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5722-5819]:IfStatement[5722-5819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5735-5819]:Block[5735-5819]"
    }, {
      "left" : "System.err.println(\"BST failed.\");",
      "right" : "System.err.println(\"BST failed.\");",
      "info" : "ExpressionStatement[5749-5783]:ExpressionStatement[5749-5783]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5796-5809]:ReturnStatement[5796-5809]"
    }, {
      "left" : "passed = testJavaRedBlackStringTree();",
      "right" : "passed = testJavaRedBlackStringTree();",
      "info" : "ExpressionStatement[5829-5867]:ExpressionStatement[5829-5867]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5876-5993]:IfStatement[5876-5993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5889-5993]:Block[5889-5993]"
    }, {
      "left" : "System.err.println(\"Java Red-Black [String] failed.\");",
      "right" : "System.err.println(\"Java Red-Black [String] failed.\");",
      "info" : "ExpressionStatement[5903-5957]:ExpressionStatement[5903-5957]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5970-5983]:ReturnStatement[5970-5983]"
    }, {
      "left" : "passed = testTrie();",
      "right" : "passed = testTrie();",
      "info" : "ExpressionStatement[6003-6023]:ExpressionStatement[6003-6023]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6032-6130]:IfStatement[6032-6130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6045-6130]:Block[6045-6130]"
    }, {
      "left" : "System.err.println(\"Trie failed.\");",
      "right" : "System.err.println(\"Trie failed.\");",
      "info" : "ExpressionStatement[6059-6094]:ExpressionStatement[6059-6094]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6107-6120]:ReturnStatement[6107-6120]"
    }, {
      "left" : "passed = testPatriciaTrie();",
      "right" : "passed = testPatriciaTrie();",
      "info" : "ExpressionStatement[6140-6168]:ExpressionStatement[6140-6168]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6177-6284]:IfStatement[6177-6284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6190-6284]:Block[6190-6284]"
    }, {
      "left" : "System.err.println(\"Patricia Trie failed.\");",
      "right" : "System.err.println(\"Patricia Trie failed.\");",
      "info" : "ExpressionStatement[6204-6248]:ExpressionStatement[6204-6248]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6261-6274]:ReturnStatement[6261-6274]"
    }, {
      "left" : "passed = testJavaSkipList();",
      "right" : "passed = testJavaSkipList();",
      "info" : "ExpressionStatement[6311-6339]:ExpressionStatement[6311-6339]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6348-6458]:IfStatement[6348-6458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6361-6458]:Block[6361-6458]"
    }, {
      "left" : "System.err.println(\"Java's Skip List failed.\");",
      "right" : "System.err.println(\"Java's Skip List failed.\");",
      "info" : "ExpressionStatement[6375-6422]:ExpressionStatement[6375-6422]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6435-6448]:ReturnStatement[6435-6448]"
    }, {
      "left" : "passed = testSkipList();",
      "right" : "passed = testSkipList();",
      "info" : "ExpressionStatement[6468-6492]:ExpressionStatement[6468-6492]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6501-6604]:IfStatement[6501-6604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6514-6604]:Block[6514-6604]"
    }, {
      "left" : "System.err.println(\"Skip List failed.\");",
      "right" : "System.err.println(\"Skip List failed.\");",
      "info" : "ExpressionStatement[6528-6568]:ExpressionStatement[6528-6568]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6581-6594]:ReturnStatement[6581-6594]"
    }, {
      "left" : "passed = testJavaMinHeap();",
      "right" : "passed = testJavaMinHeap();",
      "info" : "ExpressionStatement[6632-6659]:ExpressionStatement[6632-6659]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6668-6775]:IfStatement[6668-6775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6681-6775]:Block[6681-6775]"
    }, {
      "left" : "System.err.println(\"Java Min-Heap failed.\");",
      "right" : "System.err.println(\"Java Min-Heap failed.\");",
      "info" : "ExpressionStatement[6695-6739]:ExpressionStatement[6695-6739]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6752-6765]:ReturnStatement[6752-6765]"
    }, {
      "left" : "passed = testMinHeap();",
      "right" : "passed = testMinHeap();",
      "info" : "ExpressionStatement[6785-6808]:ExpressionStatement[6785-6808]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6817-6919]:IfStatement[6817-6919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6830-6919]:Block[6830-6919]"
    }, {
      "left" : "System.err.println(\"Min-Heap failed.\");",
      "right" : "System.err.println(\"Min-Heap failed.\");",
      "info" : "ExpressionStatement[6844-6883]:ExpressionStatement[6844-6883]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6896-6909]:ReturnStatement[6896-6909]"
    }, {
      "left" : "passed = testJavaMaxHeap();",
      "right" : "passed = testJavaMaxHeap();",
      "info" : "ExpressionStatement[6929-6956]:ExpressionStatement[6929-6956]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[6965-7072]:IfStatement[6965-7072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6978-7072]:Block[6978-7072]"
    }, {
      "left" : "System.err.println(\"Java Max-Heap failed.\");",
      "right" : "System.err.println(\"Java Max-Heap failed.\");",
      "info" : "ExpressionStatement[6992-7036]:ExpressionStatement[6992-7036]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7049-7062]:ReturnStatement[7049-7062]"
    }, {
      "left" : "passed = testMaxHeap();",
      "right" : "passed = testMaxHeap();",
      "info" : "ExpressionStatement[7082-7105]:ExpressionStatement[7082-7105]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[7114-7216]:IfStatement[7114-7216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7127-7216]:Block[7127-7216]"
    }, {
      "left" : "System.err.println(\"Max-Heap failed.\");",
      "right" : "System.err.println(\"Max-Heap failed.\");",
      "info" : "ExpressionStatement[7141-7180]:ExpressionStatement[7141-7180]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7193-7206]:ReturnStatement[7193-7206]"
    }, {
      "left" : "passed = testJavaArrayList();",
      "right" : "passed = testJavaArrayList();",
      "info" : "ExpressionStatement[7244-7273]:ExpressionStatement[7244-7273]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[7282-7385]:IfStatement[7282-7385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7295-7385]:Block[7295-7385]"
    }, {
      "left" : "System.err.println(\"Java List failed.\");",
      "right" : "System.err.println(\"Java List failed.\");",
      "info" : "ExpressionStatement[7309-7349]:ExpressionStatement[7309-7349]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7362-7375]:ReturnStatement[7362-7375]"
    }, {
      "left" : "passed = testArrayList();",
      "right" : "passed = testArrayList();",
      "info" : "ExpressionStatement[7395-7420]:ExpressionStatement[7395-7420]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[7429-7527]:IfStatement[7429-7527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7442-7527]:Block[7442-7527]"
    }, {
      "left" : "System.err.println(\"List failed.\");",
      "right" : "System.err.println(\"List failed.\");",
      "info" : "ExpressionStatement[7456-7491]:ExpressionStatement[7456-7491]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7504-7517]:ReturnStatement[7504-7517]"
    }, {
      "left" : "passed = testJavaLinkedList();",
      "right" : "passed = testJavaLinkedList();",
      "info" : "ExpressionStatement[7537-7567]:ExpressionStatement[7537-7567]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[7576-7679]:IfStatement[7576-7679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7589-7679]:Block[7589-7679]"
    }, {
      "left" : "System.err.println(\"Java List failed.\");",
      "right" : "System.err.println(\"Java List failed.\");",
      "info" : "ExpressionStatement[7603-7643]:ExpressionStatement[7603-7643]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7656-7669]:ReturnStatement[7656-7669]"
    }, {
      "left" : "passed = testLinkedList();",
      "right" : "passed = testLinkedList();",
      "info" : "ExpressionStatement[7689-7715]:ExpressionStatement[7689-7715]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[7724-7822]:IfStatement[7724-7822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7737-7822]:Block[7737-7822]"
    }, {
      "left" : "System.err.println(\"List failed.\");",
      "right" : "System.err.println(\"List failed.\");",
      "info" : "ExpressionStatement[7751-7786]:ExpressionStatement[7751-7786]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7799-7812]:ReturnStatement[7799-7812]"
    }, {
      "left" : "passed = testJavaArrayQueue();",
      "right" : "passed = testJavaArrayQueue();",
      "info" : "ExpressionStatement[7851-7881]:ExpressionStatement[7851-7881]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[7890-7994]:IfStatement[7890-7994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7903-7994]:Block[7903-7994]"
    }, {
      "left" : "System.err.println(\"Java Queue failed.\");",
      "right" : "System.err.println(\"Java Queue failed.\");",
      "info" : "ExpressionStatement[7917-7958]:ExpressionStatement[7917-7958]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7971-7984]:ReturnStatement[7971-7984]"
    }, {
      "left" : "passed = testArrayQueue();",
      "right" : "passed = testArrayQueue();",
      "info" : "ExpressionStatement[8004-8030]:ExpressionStatement[8004-8030]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8039-8138]:IfStatement[8039-8138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8052-8138]:Block[8052-8138]"
    }, {
      "left" : "System.err.println(\"Queue failed.\");",
      "right" : "System.err.println(\"Queue failed.\");",
      "info" : "ExpressionStatement[8066-8102]:ExpressionStatement[8066-8102]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8115-8128]:ReturnStatement[8115-8128]"
    }, {
      "left" : "passed = testJavaLinkedQueue();",
      "right" : "passed = testJavaLinkedQueue();",
      "info" : "ExpressionStatement[8148-8179]:ExpressionStatement[8148-8179]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8188-8292]:IfStatement[8188-8292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8201-8292]:Block[8201-8292]"
    }, {
      "left" : "System.err.println(\"Java Queue failed.\");",
      "right" : "System.err.println(\"Java Queue failed.\");",
      "info" : "ExpressionStatement[8215-8256]:ExpressionStatement[8215-8256]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8269-8282]:ReturnStatement[8269-8282]"
    }, {
      "left" : "passed = testLinkedQueue();",
      "right" : "passed = testLinkedQueue();",
      "info" : "ExpressionStatement[8302-8329]:ExpressionStatement[8302-8329]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8338-8437]:IfStatement[8338-8437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-8437]:Block[8351-8437]"
    }, {
      "left" : "System.err.println(\"Queue failed.\");",
      "right" : "System.err.println(\"Queue failed.\");",
      "info" : "ExpressionStatement[8365-8401]:ExpressionStatement[8365-8401]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8414-8427]:ReturnStatement[8414-8427]"
    }, {
      "left" : "passed = testJavaStack();",
      "right" : "passed = testJavaStack();",
      "info" : "ExpressionStatement[8466-8491]:ExpressionStatement[8466-8491]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8500-8604]:IfStatement[8500-8604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8513-8604]:Block[8513-8604]"
    }, {
      "left" : "System.err.println(\"Java Stack failed.\");",
      "right" : "System.err.println(\"Java Stack failed.\");",
      "info" : "ExpressionStatement[8527-8568]:ExpressionStatement[8527-8568]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8581-8594]:ReturnStatement[8581-8594]"
    }, {
      "left" : "passed = testArrayStack();",
      "right" : "passed = testArrayStack();",
      "info" : "ExpressionStatement[8614-8640]:ExpressionStatement[8614-8640]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8649-8748]:IfStatement[8649-8748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8662-8748]:Block[8662-8748]"
    }, {
      "left" : "System.err.println(\"Stack failed.\");",
      "right" : "System.err.println(\"Stack failed.\");",
      "info" : "ExpressionStatement[8676-8712]:ExpressionStatement[8676-8712]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8725-8738]:ReturnStatement[8725-8738]"
    }, {
      "left" : "passed = testLinkedStack();",
      "right" : "passed = testLinkedStack();",
      "info" : "ExpressionStatement[8758-8785]:ExpressionStatement[8758-8785]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8794-8893]:IfStatement[8794-8893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8807-8893]:Block[8807-8893]"
    }, {
      "left" : "System.err.println(\"Stack failed.\");",
      "right" : "System.err.println(\"Stack failed.\");",
      "info" : "ExpressionStatement[8821-8857]:ExpressionStatement[8821-8857]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8870-8883]:ReturnStatement[8870-8883]"
    }, {
      "left" : "passed = testJavaHashMap();",
      "right" : "passed = testJavaHashMap();",
      "info" : "ExpressionStatement[8920-8947]:ExpressionStatement[8920-8947]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[8956-9063]:IfStatement[8956-9063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8969-9063]:Block[8969-9063]"
    }, {
      "left" : "System.err.println(\"Java Hash Map failed.\");",
      "right" : "System.err.println(\"Java Hash Map failed.\");",
      "info" : "ExpressionStatement[8983-9027]:ExpressionStatement[8983-9027]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9040-9053]:ReturnStatement[9040-9053]"
    }, {
      "left" : "passed = testHashMap();",
      "right" : "passed = testHashMap();",
      "info" : "ExpressionStatement[9073-9096]:ExpressionStatement[9073-9096]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[9105-9207]:IfStatement[9105-9207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9118-9207]:Block[9118-9207]"
    }, {
      "left" : "System.err.println(\"Hash Map failed.\");",
      "right" : "System.err.println(\"Hash Map failed.\");",
      "info" : "ExpressionStatement[9132-9171]:ExpressionStatement[9132-9171]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9184-9197]:ReturnStatement[9184-9197]"
    }, {
      "left" : "passed = testJavaTreeMap();",
      "right" : "passed = testJavaTreeMap();",
      "info" : "ExpressionStatement[9217-9244]:ExpressionStatement[9217-9244]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[9253-9360]:IfStatement[9253-9360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9266-9360]:Block[9266-9360]"
    }, {
      "left" : "System.err.println(\"Java Tree Map failed.\");",
      "right" : "System.err.println(\"Java Tree Map failed.\");",
      "info" : "ExpressionStatement[9280-9324]:ExpressionStatement[9280-9324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9337-9350]:ReturnStatement[9337-9350]"
    }, {
      "left" : "passed = testTreeMap();",
      "right" : "passed = testTreeMap();",
      "info" : "ExpressionStatement[9370-9393]:ExpressionStatement[9370-9393]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[9402-9504]:IfStatement[9402-9504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9415-9504]:Block[9415-9504]"
    }, {
      "left" : "System.err.println(\"Tree Map failed.\");",
      "right" : "System.err.println(\"Tree Map failed.\");",
      "info" : "ExpressionStatement[9429-9468]:ExpressionStatement[9429-9468]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9481-9494]:ReturnStatement[9481-9494]"
    }, {
      "left" : "passed = testTrieMap();",
      "right" : "passed = testTrieMap();",
      "info" : "ExpressionStatement[9514-9537]:ExpressionStatement[9514-9537]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[9546-9648]:IfStatement[9546-9648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9559-9648]:Block[9559-9648]"
    }, {
      "left" : "System.err.println(\"Trie Map failed.\");",
      "right" : "System.err.println(\"Trie Map failed.\");",
      "info" : "ExpressionStatement[9573-9612]:ExpressionStatement[9573-9612]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9625-9638]:ReturnStatement[9625-9638]"
    }, {
      "left" : "passed = testRadixTrie();",
      "right" : "passed = testRadixTrie();",
      "info" : "ExpressionStatement[9658-9683]:ExpressionStatement[9658-9683]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[9692-9796]:IfStatement[9692-9796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9705-9796]:Block[9705-9796]"
    }, {
      "left" : "System.err.println(\"Radix Trie failed.\");",
      "right" : "System.err.println(\"Radix Trie failed.\");",
      "info" : "ExpressionStatement[9719-9760]:ExpressionStatement[9719-9760]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9773-9786]:ReturnStatement[9773-9786]"
    }, {
      "left" : "passed = testJavaSkipListMap();",
      "right" : "passed = testJavaSkipListMap();",
      "info" : "ExpressionStatement[9806-9837]:ExpressionStatement[9806-9837]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[9846-9960]:IfStatement[9846-9960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9859-9960]:Block[9859-9960]"
    }, {
      "left" : "System.err.println(\"Java's Skip List Map failed.\");",
      "right" : "System.err.println(\"Java's Skip List Map failed.\");",
      "info" : "ExpressionStatement[9873-9924]:ExpressionStatement[9873-9924]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9937-9950]:ReturnStatement[9937-9950]"
    }, {
      "left" : "passed = testSkipListMap();",
      "right" : "passed = testSkipListMap();",
      "info" : "ExpressionStatement[9970-9997]:ExpressionStatement[9970-9997]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[10006-10113]:IfStatement[10006-10113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10019-10113]:Block[10019-10113]"
    }, {
      "left" : "System.err.println(\"Skip List Map failed.\");",
      "right" : "System.err.println(\"Skip List Map failed.\");",
      "info" : "ExpressionStatement[10033-10077]:ExpressionStatement[10033-10077]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10090-10103]:ReturnStatement[10090-10103]"
    }, {
      "left" : "passed = testHAMT();",
      "right" : "passed = testHAMT();",
      "info" : "ExpressionStatement[10123-10143]:ExpressionStatement[10123-10143]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[10152-10250]:IfStatement[10152-10250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10165-10250]:Block[10165-10250]"
    }, {
      "left" : "System.err.println(\"HAMT failed.\");",
      "right" : "System.err.println(\"HAMT failed.\");",
      "info" : "ExpressionStatement[10179-10214]:ExpressionStatement[10179-10214]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10227-10240]:ReturnStatement[10227-10240]"
    }, {
      "left" : "if (debugTime && debugMemory)",
      "right" : "if (debugTime && debugMemory)",
      "info" : "IfStatement[10260-10423]:IfStatement[10260-10423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10290-10423]:Block[10290-10423]"
    }, {
      "left" : "String results = getTestResults(testNumber, testNames, testResults);",
      "right" : "String results = getTestResults(testNumber, testNames, testResults);",
      "info" : "VariableDeclarationStatement[10304-10372]:VariableDeclarationStatement[10304-10372]"
    }, {
      "left" : "System.out.println(results);",
      "right" : "System.out.println(results);",
      "info" : "ExpressionStatement[10385-10413]:ExpressionStatement[10385-10413]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10433-10445]:ReturnStatement[10433-10445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10457-10464]:Modifier[10457-10464]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10465-10471]:Modifier[10465-10471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10472-10476]:PrimitiveType[10472-10476]"
    }, {
      "left" : "handleError",
      "right" : "handleError",
      "info" : "SimpleName[10477-10488]:SimpleName[10477-10488]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[10489-10499]:SingleVariableDeclaration[10489-10499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10501-10642]:Block[10501-10642]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "System.err.println(string);",
      "info" : "ExpressionStatement[10511-10538]:ExpressionStatement[10511-10538]"
    }, {
      "left" : "System.err.println(obj.toString());",
      "right" : "System.err.println(obj.toString());",
      "info" : "ExpressionStatement[10547-10582]:ExpressionStatement[10547-10582]"
    }, {
      "left" : "throw new RuntimeException(\"Error in test.\");",
      "right" : "throw new RuntimeException(\"Error in test.\");",
      "info" : "ThrowStatement[10591-10636]:ThrowStatement[10591-10636]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10648-10655]:Modifier[10648-10655]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10656-10662]:Modifier[10656-10662]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10663-10670]:PrimitiveType[10663-10670]"
    }, {
      "left" : "testAVLTree",
      "right" : "testAVLTree",
      "info" : "SimpleName[10671-10682]:SimpleName[10671-10682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10685-10963]:Block[10685-10963]"
    }, {
      "left" : "String bstName = \"AVL Tree\";",
      "right" : "String bstName = \"AVL Tree\";",
      "info" : "VariableDeclarationStatement[10695-10723]:VariableDeclarationStatement[10695-10723]"
    }, {
      "left" : "BinarySearchTree<Integer> bst = new AVLTree<Integer>();",
      "right" : "BinarySearchTree<Integer> bst = new AVLTree<Integer>();",
      "info" : "VariableDeclarationStatement[10732-10787]:VariableDeclarationStatement[10732-10787]"
    }, {
      "left" : "Collection<Integer> bstCollection = bst.toCollection();",
      "right" : "Collection<Integer> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[10796-10851]:VariableDeclarationStatement[10796-10851]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "info" : "IfStatement[10861-10936]:IfStatement[10861-10936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10923-10936]:ReturnStatement[10923-10936]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10945-10957]:ReturnStatement[10945-10957]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10969-10976]:Modifier[10969-10976]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10977-10983]:Modifier[10977-10983]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10984-10991]:PrimitiveType[10984-10991]"
    }, {
      "left" : "testBTree",
      "right" : "testBTree",
      "info" : "SimpleName[10992-11001]:SimpleName[10992-11001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11004-11268]:Block[11004-11268]"
    }, {
      "left" : "String bstName = \"B-Tree\";",
      "right" : "String bstName = \"B-Tree\";",
      "info" : "VariableDeclarationStatement[11014-11040]:VariableDeclarationStatement[11014-11040]"
    }, {
      "left" : "BTree<Integer> bst = new BTree<Integer>(2);",
      "right" : "BTree<Integer> bst = new BTree<Integer>(2);",
      "info" : "VariableDeclarationStatement[11049-11092]:VariableDeclarationStatement[11049-11092]"
    }, {
      "left" : "Collection<Integer> bstCollection = bst.toCollection();",
      "right" : "Collection<Integer> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[11101-11156]:VariableDeclarationStatement[11101-11156]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "info" : "IfStatement[11166-11241]:IfStatement[11166-11241]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11228-11241]:ReturnStatement[11228-11241]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11250-11262]:ReturnStatement[11250-11262]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11274-11281]:Modifier[11274-11281]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11282-11288]:Modifier[11282-11288]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11289-11296]:PrimitiveType[11289-11296]"
    }, {
      "left" : "testBST",
      "right" : "testBST",
      "info" : "SimpleName[11297-11304]:SimpleName[11297-11304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11307-11589]:Block[11307-11589]"
    }, {
      "left" : "String bstName = \"BST\";",
      "right" : "String bstName = \"BST\";",
      "info" : "VariableDeclarationStatement[11317-11340]:VariableDeclarationStatement[11317-11340]"
    }, {
      "left" : "BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>();",
      "right" : "BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>();",
      "info" : "VariableDeclarationStatement[11349-11413]:VariableDeclarationStatement[11349-11413]"
    }, {
      "left" : "Collection<Integer> bstCollection = bst.toCollection();",
      "right" : "Collection<Integer> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[11422-11477]:VariableDeclarationStatement[11422-11477]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "info" : "IfStatement[11487-11562]:IfStatement[11487-11562]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11549-11562]:ReturnStatement[11549-11562]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11571-11583]:ReturnStatement[11571-11583]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11595-11602]:Modifier[11595-11602]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11603-11609]:Modifier[11603-11609]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11610-11617]:PrimitiveType[11610-11617]"
    }, {
      "left" : "testMinHeap",
      "right" : "testMinHeap",
      "info" : "SimpleName[11618-11629]:SimpleName[11618-11629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11632-12297]:Block[11632-12297]"
    }, {
      "left" : "String aNameMin = \"Min-Heap [array]\";",
      "right" : "String aNameMin = \"Min-Heap [array]\";",
      "info" : "VariableDeclarationStatement[11642-11679]:VariableDeclarationStatement[11642-11679]"
    }, {
      "left" : "BinaryHeap.BinaryHeapArray<Integer> aHeapMin = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MIN);",
      "right" : "BinaryHeap.BinaryHeapArray<Integer> aHeapMin = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MIN);",
      "info" : "VariableDeclarationStatement[11688-11796]:VariableDeclarationStatement[11688-11796]"
    }, {
      "left" : "Collection<Integer> aCollectionMin = aHeapMin.toCollection();",
      "right" : "Collection<Integer> aCollectionMin = aHeapMin.toCollection();",
      "info" : "VariableDeclarationStatement[11805-11866]:VariableDeclarationStatement[11805-11866]"
    }, {
      "left" : "if (!testJavaCollection(aCollectionMin,Integer.class,aNameMin))",
      "right" : "if (!testJavaCollection(aCollectionMin,Integer.class,aNameMin))",
      "info" : "IfStatement[11875-11952]:IfStatement[11875-11952]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11939-11952]:ReturnStatement[11939-11952]"
    }, {
      "left" : "String tNameMin = \"Min-Heap [tree]\";",
      "right" : "String tNameMin = \"Min-Heap [tree]\";",
      "info" : "VariableDeclarationStatement[11962-11998]:VariableDeclarationStatement[11962-11998]"
    }, {
      "left" : "BinaryHeap.BinaryHeapTree<Integer> tHeapMin = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MIN);",
      "right" : "BinaryHeap.BinaryHeapTree<Integer> tHeapMin = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MIN);",
      "info" : "VariableDeclarationStatement[12007-12113]:VariableDeclarationStatement[12007-12113]"
    }, {
      "left" : "Collection<Integer> tCollectionMin = tHeapMin.toCollection();",
      "right" : "Collection<Integer> tCollectionMin = tHeapMin.toCollection();",
      "info" : "VariableDeclarationStatement[12122-12183]:VariableDeclarationStatement[12122-12183]"
    }, {
      "left" : "if (!testJavaCollection(tCollectionMin,Integer.class,tNameMin))",
      "right" : "if (!testJavaCollection(tCollectionMin,Integer.class,tNameMin))",
      "info" : "IfStatement[12192-12269]:IfStatement[12192-12269]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12256-12269]:ReturnStatement[12256-12269]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12279-12291]:ReturnStatement[12279-12291]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12303-12310]:Modifier[12303-12310]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12311-12317]:Modifier[12311-12317]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12318-12325]:PrimitiveType[12318-12325]"
    }, {
      "left" : "testMaxHeap",
      "right" : "testMaxHeap",
      "info" : "SimpleName[12326-12337]:SimpleName[12326-12337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12340-13005]:Block[12340-13005]"
    }, {
      "left" : "String aNameMax = \"Max-Heap [array]\";",
      "right" : "String aNameMax = \"Max-Heap [array]\";",
      "info" : "VariableDeclarationStatement[12350-12387]:VariableDeclarationStatement[12350-12387]"
    }, {
      "left" : "BinaryHeap.BinaryHeapArray<Integer> aHeapMax = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MAX);",
      "right" : "BinaryHeap.BinaryHeapArray<Integer> aHeapMax = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MAX);",
      "info" : "VariableDeclarationStatement[12396-12504]:VariableDeclarationStatement[12396-12504]"
    }, {
      "left" : "Collection<Integer> aCollectionMax = aHeapMax.toCollection();",
      "right" : "Collection<Integer> aCollectionMax = aHeapMax.toCollection();",
      "info" : "VariableDeclarationStatement[12513-12574]:VariableDeclarationStatement[12513-12574]"
    }, {
      "left" : "if (!testJavaCollection(aCollectionMax,Integer.class,aNameMax))",
      "right" : "if (!testJavaCollection(aCollectionMax,Integer.class,aNameMax))",
      "info" : "IfStatement[12583-12660]:IfStatement[12583-12660]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12647-12660]:ReturnStatement[12647-12660]"
    }, {
      "left" : "String lNameMax = \"Max-Heap [tree]\";",
      "right" : "String lNameMax = \"Max-Heap [tree]\";",
      "info" : "VariableDeclarationStatement[12670-12706]:VariableDeclarationStatement[12670-12706]"
    }, {
      "left" : "BinaryHeap.BinaryHeapTree<Integer> tHeapMax = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MAX);",
      "right" : "BinaryHeap.BinaryHeapTree<Integer> tHeapMax = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MAX);",
      "info" : "VariableDeclarationStatement[12715-12821]:VariableDeclarationStatement[12715-12821]"
    }, {
      "left" : "Collection<Integer> tCollectionMax = tHeapMax.toCollection();",
      "right" : "Collection<Integer> tCollectionMax = tHeapMax.toCollection();",
      "info" : "VariableDeclarationStatement[12830-12891]:VariableDeclarationStatement[12830-12891]"
    }, {
      "left" : "if (!testJavaCollection(tCollectionMax,Integer.class,lNameMax))",
      "right" : "if (!testJavaCollection(tCollectionMax,Integer.class,lNameMax))",
      "info" : "IfStatement[12900-12977]:IfStatement[12900-12977]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12964-12977]:ReturnStatement[12964-12977]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12987-12999]:ReturnStatement[12987-12999]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13011-13018]:Modifier[13011-13018]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13019-13025]:Modifier[13019-13025]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13026-13033]:PrimitiveType[13026-13033]"
    }, {
      "left" : "testHashMap",
      "right" : "testHashMap",
      "info" : "SimpleName[13034-13045]:SimpleName[13034-13045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13048-13577]:Block[13048-13577]"
    }, {
      "left" : "String mapName = \"Probing HashMap\";",
      "right" : "String mapName = \"Probing HashMap\";",
      "info" : "VariableDeclarationStatement[13058-13093]:VariableDeclarationStatement[13058-13093]"
    }, {
      "left" : "HashMap<Integer,String> map = new HashMap<Integer,String>(HashMap.Type.PROBING, unsorted.length/2);",
      "right" : "HashMap<Integer,String> map = new HashMap<Integer,String>(HashMap.Type.PROBING, unsorted.length/2);",
      "info" : "VariableDeclarationStatement[13102-13201]:VariableDeclarationStatement[13102-13201]"
    }, {
      "left" : "java.util.Map<Integer,String> jMap = map.toMap();",
      "right" : "java.util.Map<Integer,String> jMap = map.toMap();",
      "info" : "VariableDeclarationStatement[13210-13259]:VariableDeclarationStatement[13210-13259]"
    }, {
      "left" : "if (!testJavaMap(jMap,Integer.class,mapName))",
      "right" : "if (!testJavaMap(jMap,Integer.class,mapName))",
      "info" : "IfStatement[13269-13328]:IfStatement[13269-13328]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13315-13328]:ReturnStatement[13315-13328]"
    }, {
      "left" : "mapName = \"Chaining HashMap\";",
      "right" : "mapName = \"Chaining HashMap\";",
      "info" : "ExpressionStatement[13338-13367]:ExpressionStatement[13338-13367]"
    }, {
      "left" : "map = new HashMap<Integer,String>(HashMap.Type.CHAINING, unsorted.length/2);",
      "right" : "map = new HashMap<Integer,String>(HashMap.Type.CHAINING, unsorted.length/2);",
      "info" : "ExpressionStatement[13376-13452]:ExpressionStatement[13376-13452]"
    }, {
      "left" : "jMap = map.toMap();",
      "right" : "jMap = map.toMap();",
      "info" : "ExpressionStatement[13461-13480]:ExpressionStatement[13461-13480]"
    }, {
      "left" : "if (!testJavaMap(jMap,Integer.class,mapName))",
      "right" : "if (!testJavaMap(jMap,Integer.class,mapName))",
      "info" : "IfStatement[13490-13549]:IfStatement[13490-13549]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13536-13549]:ReturnStatement[13536-13549]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13559-13571]:ReturnStatement[13559-13571]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13583-13590]:Modifier[13583-13590]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13591-13597]:Modifier[13591-13597]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13598-13605]:PrimitiveType[13598-13605]"
    }, {
      "left" : "testHAMT",
      "right" : "testHAMT",
      "info" : "SimpleName[13606-13614]:SimpleName[13606-13614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13617-13898]:Block[13617-13898]"
    }, {
      "left" : "String mapName = \"HAMT\";",
      "right" : "String mapName = \"HAMT\";",
      "info" : "VariableDeclarationStatement[13627-13651]:VariableDeclarationStatement[13627-13651]"
    }, {
      "left" : "HashArrayMappedTrie<Integer,String> map = new HashArrayMappedTrie<Integer,String>();",
      "right" : "HashArrayMappedTrie<Integer,String> map = new HashArrayMappedTrie<Integer,String>();",
      "info" : "VariableDeclarationStatement[13660-13744]:VariableDeclarationStatement[13660-13744]"
    }, {
      "left" : "java.util.Map<Integer,String> jMap = map.toMap();",
      "right" : "java.util.Map<Integer,String> jMap = map.toMap();",
      "info" : "VariableDeclarationStatement[13753-13802]:VariableDeclarationStatement[13753-13802]"
    }, {
      "left" : "if (!testJavaMap(jMap,Integer.class,mapName))",
      "right" : "if (!testJavaMap(jMap,Integer.class,mapName))",
      "info" : "IfStatement[13812-13871]:IfStatement[13812-13871]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13858-13871]:ReturnStatement[13858-13871]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13880-13892]:ReturnStatement[13880-13892]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13904-13911]:Modifier[13904-13911]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13912-13918]:Modifier[13912-13918]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13919-13926]:PrimitiveType[13919-13926]"
    }, {
      "left" : "testJavaHashMap",
      "right" : "testJavaHashMap",
      "info" : "SimpleName[13927-13942]:SimpleName[13927-13942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13945-14186]:Block[13945-14186]"
    }, {
      "left" : "String mapName = \"Java's HashMap\";",
      "right" : "String mapName = \"Java's HashMap\";",
      "info" : "VariableDeclarationStatement[13955-13989]:VariableDeclarationStatement[13955-13989]"
    }, {
      "left" : "java.util.Map<Integer,String> map = new java.util.HashMap<Integer,String>(unsorted.length/2);",
      "right" : "java.util.Map<Integer,String> map = new java.util.HashMap<Integer,String>(unsorted.length/2);",
      "info" : "VariableDeclarationStatement[13998-14091]:VariableDeclarationStatement[13998-14091]"
    }, {
      "left" : "if (!testJavaMap(map,Integer.class,mapName))",
      "right" : "if (!testJavaMap(map,Integer.class,mapName))",
      "info" : "IfStatement[14101-14159]:IfStatement[14101-14159]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14146-14159]:ReturnStatement[14146-14159]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14168-14180]:ReturnStatement[14168-14180]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14192-14199]:Modifier[14192-14199]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14200-14206]:Modifier[14200-14206]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14207-14214]:PrimitiveType[14207-14214]"
    }, {
      "left" : "testJavaMinHeap",
      "right" : "testJavaMinHeap",
      "info" : "SimpleName[14215-14230]:SimpleName[14215-14230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14233-14870]:Block[14233-14870]"
    }, {
      "left" : "java.util.PriorityQueue<Integer> minArrayHeap = new java.util.PriorityQueue<Integer>(10,\n                new Comparator<Integer>() {\n\n                    @Override\n                    public int compare(Integer arg0, Integer arg1) {\n                        if (arg0.compareTo(arg1) < 0)\n                            return -1;\n                        else if (arg1.compareTo(arg0) < 0)\n                            return 1;\n                        return 0;\n                    }\n                });",
      "right" : "java.util.PriorityQueue<Integer> minArrayHeap = new java.util.PriorityQueue<Integer>(10,\n                new Comparator<Integer>() {\n\n                    @Override\n                    public int compare(Integer arg0, Integer arg1) {\n                        if (arg0.compareTo(arg1) < 0)\n                            return -1;\n                        else if (arg1.compareTo(arg0) < 0)\n                            return 1;\n                        return 0;\n                    }\n                });",
      "info" : "VariableDeclarationStatement[14243-14741]:VariableDeclarationStatement[14243-14741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14397-14406]:MarkerAnnotation[14397-14406]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14427-14433]:Modifier[14427-14433]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14434-14437]:PrimitiveType[14434-14437]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[14438-14445]:SimpleName[14438-14445]"
    }, {
      "left" : "Integer arg0",
      "right" : "Integer arg0",
      "info" : "SingleVariableDeclaration[14446-14458]:SingleVariableDeclaration[14446-14458]"
    }, {
      "left" : "Integer arg1",
      "right" : "Integer arg1",
      "info" : "SingleVariableDeclaration[14460-14472]:SingleVariableDeclaration[14460-14472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14474-14721]:Block[14474-14721]"
    }, {
      "left" : "if (arg0.compareTo(arg1) < 0)",
      "right" : "if (arg0.compareTo(arg1) < 0)",
      "info" : "IfStatement[14500-14665]:IfStatement[14500-14665]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[14558-14568]:ReturnStatement[14558-14568]"
    }, {
      "left" : "if (arg1.compareTo(arg0) < 0)",
      "right" : "if (arg1.compareTo(arg0) < 0)",
      "info" : "IfStatement[14598-14665]:IfStatement[14598-14665]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[14656-14665]:ReturnStatement[14656-14665]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14690-14699]:ReturnStatement[14690-14699]"
    }, {
      "left" : "if (!testJavaCollection(minArrayHeap,Integer.class,\"Java's Min-Heap [array]\"))",
      "right" : "if (!testJavaCollection(minArrayHeap,Integer.class,\"Java's Min-Heap [array]\"))",
      "info" : "IfStatement[14750-14842]:IfStatement[14750-14842]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14829-14842]:ReturnStatement[14829-14842]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14852-14864]:ReturnStatement[14852-14864]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14876-14883]:Modifier[14876-14883]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14884-14890]:Modifier[14884-14890]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14891-14898]:PrimitiveType[14891-14898]"
    }, {
      "left" : "testJavaMaxHeap",
      "right" : "testJavaMaxHeap",
      "info" : "SimpleName[14899-14914]:SimpleName[14899-14914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14917-15553]:Block[14917-15553]"
    }, {
      "left" : "java.util.PriorityQueue<Integer> maxArrayHeap = new java.util.PriorityQueue<Integer>(10,\n                new Comparator<Integer>() {\n\n                    @Override\n                    public int compare(Integer arg0, Integer arg1) {\n                        if (arg0.compareTo(arg1) > 0)\n                            return -1;\n                        else if (arg1.compareTo(arg0) > 0)\n                            return 1;\n                        return 0;\n                    }\n                });",
      "right" : "java.util.PriorityQueue<Integer> maxArrayHeap = new java.util.PriorityQueue<Integer>(10,\n                new Comparator<Integer>() {\n\n                    @Override\n                    public int compare(Integer arg0, Integer arg1) {\n                        if (arg0.compareTo(arg1) > 0)\n                            return -1;\n                        else if (arg1.compareTo(arg0) > 0)\n                            return 1;\n                        return 0;\n                    }\n                });",
      "info" : "VariableDeclarationStatement[14927-15425]:VariableDeclarationStatement[14927-15425]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15081-15090]:MarkerAnnotation[15081-15090]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15111-15117]:Modifier[15111-15117]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15118-15121]:PrimitiveType[15118-15121]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[15122-15129]:SimpleName[15122-15129]"
    }, {
      "left" : "Integer arg0",
      "right" : "Integer arg0",
      "info" : "SingleVariableDeclaration[15130-15142]:SingleVariableDeclaration[15130-15142]"
    }, {
      "left" : "Integer arg1",
      "right" : "Integer arg1",
      "info" : "SingleVariableDeclaration[15144-15156]:SingleVariableDeclaration[15144-15156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15158-15405]:Block[15158-15405]"
    }, {
      "left" : "if (arg0.compareTo(arg1) > 0)",
      "right" : "if (arg0.compareTo(arg1) > 0)",
      "info" : "IfStatement[15184-15349]:IfStatement[15184-15349]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[15242-15252]:ReturnStatement[15242-15252]"
    }, {
      "left" : "if (arg1.compareTo(arg0) > 0)",
      "right" : "if (arg1.compareTo(arg0) > 0)",
      "info" : "IfStatement[15282-15349]:IfStatement[15282-15349]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[15340-15349]:ReturnStatement[15340-15349]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[15374-15383]:ReturnStatement[15374-15383]"
    }, {
      "left" : "if (!testJavaCollection(maxArrayHeap,Integer.class,\"Java's Max-Heap [array]\"))",
      "right" : "if (!testJavaCollection(maxArrayHeap,Integer.class,\"Java's Max-Heap [array]\"))",
      "info" : "IfStatement[15434-15526]:IfStatement[15434-15526]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15513-15526]:ReturnStatement[15513-15526]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15535-15547]:ReturnStatement[15535-15547]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15559-15566]:Modifier[15559-15566]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15567-15573]:Modifier[15567-15573]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15574-15581]:PrimitiveType[15574-15581]"
    }, {
      "left" : "testJavaArrayList",
      "right" : "testJavaArrayList",
      "info" : "SimpleName[15582-15599]:SimpleName[15582-15599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15602-15749]:Block[15602-15749]"
    }, {
      "left" : "if (!testJavaCollection(new java.util.ArrayList<Integer>(),Integer.class,\"Java's List [array]\"))",
      "right" : "if (!testJavaCollection(new java.util.ArrayList<Integer>(),Integer.class,\"Java's List [array]\"))",
      "info" : "IfStatement[15612-15722]:IfStatement[15612-15722]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15709-15722]:ReturnStatement[15709-15722]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15731-15743]:ReturnStatement[15731-15743]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15755-15762]:Modifier[15755-15762]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15763-15769]:Modifier[15763-15769]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15770-15777]:PrimitiveType[15770-15777]"
    }, {
      "left" : "testJavaLinkedList",
      "right" : "testJavaLinkedList",
      "info" : "SimpleName[15778-15796]:SimpleName[15778-15796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15799-15948]:Block[15799-15948]"
    }, {
      "left" : "if (!testJavaCollection(new java.util.LinkedList<Integer>(),Integer.class,\"Java's List [linked]\"))",
      "right" : "if (!testJavaCollection(new java.util.LinkedList<Integer>(),Integer.class,\"Java's List [linked]\"))",
      "info" : "IfStatement[15809-15921]:IfStatement[15809-15921]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15908-15921]:ReturnStatement[15908-15921]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15930-15942]:ReturnStatement[15930-15942]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15954-15961]:Modifier[15954-15961]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15962-15968]:Modifier[15962-15968]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15969-15976]:PrimitiveType[15969-15976]"
    }, {
      "left" : "testJavaArrayQueue",
      "right" : "testJavaArrayQueue",
      "info" : "SimpleName[15977-15995]:SimpleName[15977-15995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15998-16238]:Block[15998-16238]"
    }, {
      "left" : "String aName = \"Java's Queue [array]\";",
      "right" : "String aName = \"Java's Queue [array]\";",
      "info" : "VariableDeclarationStatement[16008-16046]:VariableDeclarationStatement[16008-16046]"
    }, {
      "left" : "java.util.Deque<Integer> aCollection = new java.util.ArrayDeque<Integer>();",
      "right" : "java.util.Deque<Integer> aCollection = new java.util.ArrayDeque<Integer>();",
      "info" : "VariableDeclarationStatement[16055-16130]:VariableDeclarationStatement[16055-16130]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "info" : "IfStatement[16140-16211]:IfStatement[16140-16211]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16198-16211]:ReturnStatement[16198-16211]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16220-16232]:ReturnStatement[16220-16232]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16244-16251]:Modifier[16244-16251]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16252-16258]:Modifier[16252-16258]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16259-16266]:PrimitiveType[16259-16266]"
    }, {
      "left" : "testJavaLinkedQueue",
      "right" : "testJavaLinkedQueue",
      "info" : "SimpleName[16267-16286]:SimpleName[16267-16286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16289-16530]:Block[16289-16530]"
    }, {
      "left" : "String lName = \"Java's Queue [linked]\";",
      "right" : "String lName = \"Java's Queue [linked]\";",
      "info" : "VariableDeclarationStatement[16299-16338]:VariableDeclarationStatement[16299-16338]"
    }, {
      "left" : "java.util.Deque<Integer> lCollection = new java.util.LinkedList<Integer>();",
      "right" : "java.util.Deque<Integer> lCollection = new java.util.LinkedList<Integer>();",
      "info" : "VariableDeclarationStatement[16347-16422]:VariableDeclarationStatement[16347-16422]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "info" : "IfStatement[16432-16503]:IfStatement[16432-16503]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16490-16503]:ReturnStatement[16490-16503]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16512-16524]:ReturnStatement[16512-16524]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16536-16543]:Modifier[16536-16543]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16544-16550]:Modifier[16544-16550]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16551-16558]:PrimitiveType[16551-16558]"
    }, {
      "left" : "testJavaRedBlackIntegerTree",
      "right" : "testJavaRedBlackIntegerTree",
      "info" : "SimpleName[16559-16586]:SimpleName[16559-16586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16589-16838]:Block[16589-16838]"
    }, {
      "left" : "String aName = \"Java's Red-Black Tree [Integer]\";",
      "right" : "String aName = \"Java's Red-Black Tree [Integer]\";",
      "info" : "VariableDeclarationStatement[16599-16648]:VariableDeclarationStatement[16599-16648]"
    }, {
      "left" : "java.util.TreeSet<Integer> aCollection = new java.util.TreeSet<Integer>();",
      "right" : "java.util.TreeSet<Integer> aCollection = new java.util.TreeSet<Integer>();",
      "info" : "VariableDeclarationStatement[16657-16731]:VariableDeclarationStatement[16657-16731]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "info" : "IfStatement[16740-16811]:IfStatement[16740-16811]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16798-16811]:ReturnStatement[16798-16811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16820-16832]:ReturnStatement[16820-16832]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16844-16851]:Modifier[16844-16851]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16852-16858]:Modifier[16852-16858]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16859-16866]:PrimitiveType[16859-16866]"
    }, {
      "left" : "testJavaRedBlackStringTree",
      "right" : "testJavaRedBlackStringTree",
      "info" : "SimpleName[16867-16893]:SimpleName[16867-16893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16896-17141]:Block[16896-17141]"
    }, {
      "left" : "String aName = \"Java's Red-Black Tree [String]\";",
      "right" : "String aName = \"Java's Red-Black Tree [String]\";",
      "info" : "VariableDeclarationStatement[16906-16954]:VariableDeclarationStatement[16906-16954]"
    }, {
      "left" : "java.util.TreeSet<String> aCollection = new java.util.TreeSet<String>();",
      "right" : "java.util.TreeSet<String> aCollection = new java.util.TreeSet<String>();",
      "info" : "VariableDeclarationStatement[16963-17035]:VariableDeclarationStatement[16963-17035]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,String.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,String.class,aName))",
      "info" : "IfStatement[17044-17114]:IfStatement[17044-17114]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17101-17114]:ReturnStatement[17101-17114]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17123-17135]:ReturnStatement[17123-17135]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17147-17154]:Modifier[17147-17154]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17155-17161]:Modifier[17155-17161]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17162-17169]:PrimitiveType[17162-17169]"
    }, {
      "left" : "testJavaStack",
      "right" : "testJavaStack",
      "info" : "SimpleName[17170-17183]:SimpleName[17170-17183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17186-17420]:Block[17186-17420]"
    }, {
      "left" : "String aName = \"Java's Stack [array]\";",
      "right" : "String aName = \"Java's Stack [array]\";",
      "info" : "VariableDeclarationStatement[17196-17234]:VariableDeclarationStatement[17196-17234]"
    }, {
      "left" : "java.util.Stack<Integer> aCollection = new java.util.Stack<Integer>();",
      "right" : "java.util.Stack<Integer> aCollection = new java.util.Stack<Integer>();",
      "info" : "VariableDeclarationStatement[17243-17313]:VariableDeclarationStatement[17243-17313]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "info" : "IfStatement[17322-17393]:IfStatement[17322-17393]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17380-17393]:ReturnStatement[17380-17393]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17402-17414]:ReturnStatement[17402-17414]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17426-17433]:Modifier[17426-17433]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17434-17440]:Modifier[17434-17440]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17441-17448]:PrimitiveType[17441-17448]"
    }, {
      "left" : "testJavaTreeMap",
      "right" : "testJavaTreeMap",
      "info" : "SimpleName[17449-17464]:SimpleName[17449-17464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17467-17690]:Block[17467-17690]"
    }, {
      "left" : "String mapName = \"Java's TreeMap\";",
      "right" : "String mapName = \"Java's TreeMap\";",
      "info" : "VariableDeclarationStatement[17477-17511]:VariableDeclarationStatement[17477-17511]"
    }, {
      "left" : "java.util.Map<String,Integer> map = new java.util.TreeMap<String,Integer>();",
      "right" : "java.util.Map<String,Integer> map = new java.util.TreeMap<String,Integer>();",
      "info" : "VariableDeclarationStatement[17520-17596]:VariableDeclarationStatement[17520-17596]"
    }, {
      "left" : "if (!testJavaMap(map,String.class,mapName))",
      "right" : "if (!testJavaMap(map,String.class,mapName))",
      "info" : "IfStatement[17606-17663]:IfStatement[17606-17663]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17650-17663]:ReturnStatement[17650-17663]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17672-17684]:ReturnStatement[17672-17684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17696-17703]:Modifier[17696-17703]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17704-17710]:Modifier[17704-17710]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17711-17718]:PrimitiveType[17711-17718]"
    }, {
      "left" : "testArrayList",
      "right" : "testArrayList",
      "info" : "SimpleName[17719-17732]:SimpleName[17719-17732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17735-18018]:Block[17735-18018]"
    }, {
      "left" : "String aName = \"List [array]\";",
      "right" : "String aName = \"List [array]\";",
      "info" : "VariableDeclarationStatement[17745-17775]:VariableDeclarationStatement[17745-17775]"
    }, {
      "left" : "List.ArrayList<Integer> aList = new List.ArrayList<Integer>();",
      "right" : "List.ArrayList<Integer> aList = new List.ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[17784-17846]:VariableDeclarationStatement[17784-17846]"
    }, {
      "left" : "Collection<Integer> aCollection = aList.toCollection();",
      "right" : "Collection<Integer> aCollection = aList.toCollection();",
      "info" : "VariableDeclarationStatement[17855-17910]:VariableDeclarationStatement[17855-17910]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "info" : "IfStatement[17920-17991]:IfStatement[17920-17991]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17978-17991]:ReturnStatement[17978-17991]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18000-18012]:ReturnStatement[18000-18012]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18024-18031]:Modifier[18024-18031]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18032-18038]:Modifier[18032-18038]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18039-18046]:PrimitiveType[18039-18046]"
    }, {
      "left" : "testLinkedList",
      "right" : "testLinkedList",
      "info" : "SimpleName[18047-18061]:SimpleName[18047-18061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18064-18350]:Block[18064-18350]"
    }, {
      "left" : "String lName = \"List [linked]\";",
      "right" : "String lName = \"List [linked]\";",
      "info" : "VariableDeclarationStatement[18074-18105]:VariableDeclarationStatement[18074-18105]"
    }, {
      "left" : "List.LinkedList<Integer> lList = new List.LinkedList<Integer>();",
      "right" : "List.LinkedList<Integer> lList = new List.LinkedList<Integer>();",
      "info" : "VariableDeclarationStatement[18114-18178]:VariableDeclarationStatement[18114-18178]"
    }, {
      "left" : "Collection<Integer> lCollection = lList.toCollection();",
      "right" : "Collection<Integer> lCollection = lList.toCollection();",
      "info" : "VariableDeclarationStatement[18187-18242]:VariableDeclarationStatement[18187-18242]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "info" : "IfStatement[18252-18323]:IfStatement[18252-18323]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18310-18323]:ReturnStatement[18310-18323]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18332-18344]:ReturnStatement[18332-18344]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18356-18363]:Modifier[18356-18363]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18364-18370]:Modifier[18364-18370]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18371-18378]:PrimitiveType[18371-18378]"
    }, {
      "left" : "testPatriciaTrie",
      "right" : "testPatriciaTrie",
      "info" : "SimpleName[18379-18395]:SimpleName[18379-18395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18398-18686]:Block[18398-18686]"
    }, {
      "left" : "String bstName = \"PatriciaTrie\";",
      "right" : "String bstName = \"PatriciaTrie\";",
      "info" : "VariableDeclarationStatement[18408-18440]:VariableDeclarationStatement[18408-18440]"
    }, {
      "left" : "PatriciaTrie<String> bst = new PatriciaTrie<String>();",
      "right" : "PatriciaTrie<String> bst = new PatriciaTrie<String>();",
      "info" : "VariableDeclarationStatement[18449-18503]:VariableDeclarationStatement[18449-18503]"
    }, {
      "left" : "Collection<String> bstCollection = bst.toCollection();",
      "right" : "Collection<String> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[18512-18566]:VariableDeclarationStatement[18512-18566]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,String.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,String.class,bstName))",
      "info" : "IfStatement[18585-18659]:IfStatement[18585-18659]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18646-18659]:ReturnStatement[18646-18659]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18668-18680]:ReturnStatement[18668-18680]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18692-18699]:Modifier[18692-18699]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18700-18706]:Modifier[18700-18706]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18707-18714]:PrimitiveType[18707-18714]"
    }, {
      "left" : "testArrayQueue",
      "right" : "testArrayQueue",
      "info" : "SimpleName[18715-18729]:SimpleName[18715-18729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18732-19022]:Block[18732-19022]"
    }, {
      "left" : "String aName = \"Queue [array]\";",
      "right" : "String aName = \"Queue [array]\";",
      "info" : "VariableDeclarationStatement[18742-18773]:VariableDeclarationStatement[18742-18773]"
    }, {
      "left" : "Queue.ArrayQueue<Integer> aQueue = new Queue.ArrayQueue<Integer>();",
      "right" : "Queue.ArrayQueue<Integer> aQueue = new Queue.ArrayQueue<Integer>();",
      "info" : "VariableDeclarationStatement[18782-18849]:VariableDeclarationStatement[18782-18849]"
    }, {
      "left" : "Collection<Integer> aCollection = aQueue.toCollection();",
      "right" : "Collection<Integer> aCollection = aQueue.toCollection();",
      "info" : "VariableDeclarationStatement[18858-18914]:VariableDeclarationStatement[18858-18914]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "info" : "IfStatement[18924-18995]:IfStatement[18924-18995]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18982-18995]:ReturnStatement[18982-18995]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19004-19016]:ReturnStatement[19004-19016]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19028-19035]:Modifier[19028-19035]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19036-19042]:Modifier[19036-19042]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19043-19050]:PrimitiveType[19043-19050]"
    }, {
      "left" : "testLinkedQueue",
      "right" : "testLinkedQueue",
      "info" : "SimpleName[19051-19066]:SimpleName[19051-19066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19069-19362]:Block[19069-19362]"
    }, {
      "left" : "String lName = \"Queue [linked]\";",
      "right" : "String lName = \"Queue [linked]\";",
      "info" : "VariableDeclarationStatement[19079-19111]:VariableDeclarationStatement[19079-19111]"
    }, {
      "left" : "Queue.LinkedQueue<Integer> lQueue = new Queue.LinkedQueue<Integer>();",
      "right" : "Queue.LinkedQueue<Integer> lQueue = new Queue.LinkedQueue<Integer>();",
      "info" : "VariableDeclarationStatement[19120-19189]:VariableDeclarationStatement[19120-19189]"
    }, {
      "left" : "Collection<Integer> lCollection = lQueue.toCollection();",
      "right" : "Collection<Integer> lCollection = lQueue.toCollection();",
      "info" : "VariableDeclarationStatement[19198-19254]:VariableDeclarationStatement[19198-19254]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "info" : "IfStatement[19264-19335]:IfStatement[19264-19335]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19322-19335]:ReturnStatement[19322-19335]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19344-19356]:ReturnStatement[19344-19356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19368-19375]:Modifier[19368-19375]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19376-19382]:Modifier[19376-19382]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19383-19390]:PrimitiveType[19383-19390]"
    }, {
      "left" : "testRadixTrie",
      "right" : "testRadixTrie",
      "info" : "SimpleName[19391-19404]:SimpleName[19391-19404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19407-19672]:Block[19407-19672]"
    }, {
      "left" : "String mapName = \"RadixTrie\";",
      "right" : "String mapName = \"RadixTrie\";",
      "info" : "VariableDeclarationStatement[19417-19446]:VariableDeclarationStatement[19417-19446]"
    }, {
      "left" : "RadixTrie<String,Integer> map = new RadixTrie<String,Integer>();",
      "right" : "RadixTrie<String,Integer> map = new RadixTrie<String,Integer>();",
      "info" : "VariableDeclarationStatement[19455-19519]:VariableDeclarationStatement[19455-19519]"
    }, {
      "left" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "right" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "info" : "VariableDeclarationStatement[19528-19577]:VariableDeclarationStatement[19528-19577]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,mapName))",
      "right" : "if (!testJavaMap(jMap,String.class,mapName))",
      "info" : "IfStatement[19587-19645]:IfStatement[19587-19645]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19632-19645]:ReturnStatement[19632-19645]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19654-19666]:ReturnStatement[19654-19666]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19678-19685]:Modifier[19678-19685]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19686-19692]:Modifier[19686-19692]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19693-19700]:PrimitiveType[19693-19700]"
    }, {
      "left" : "testRedBlackTree",
      "right" : "testRedBlackTree",
      "info" : "SimpleName[19701-19717]:SimpleName[19701-19717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19720-20005]:Block[19720-20005]"
    }, {
      "left" : "String bstName = \"Red-Black Tree\";",
      "right" : "String bstName = \"Red-Black Tree\";",
      "info" : "VariableDeclarationStatement[19730-19764]:VariableDeclarationStatement[19730-19764]"
    }, {
      "left" : "RedBlackTree<Integer> bst = new RedBlackTree<Integer>();",
      "right" : "RedBlackTree<Integer> bst = new RedBlackTree<Integer>();",
      "info" : "VariableDeclarationStatement[19773-19829]:VariableDeclarationStatement[19773-19829]"
    }, {
      "left" : "Collection<Integer> bstCollection = bst.toCollection();",
      "right" : "Collection<Integer> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[19838-19893]:VariableDeclarationStatement[19838-19893]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "info" : "IfStatement[19903-19978]:IfStatement[19903-19978]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19965-19978]:ReturnStatement[19965-19978]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19987-19999]:ReturnStatement[19987-19999]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20011-20018]:Modifier[20011-20018]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20019-20025]:Modifier[20019-20025]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20026-20033]:PrimitiveType[20026-20033]"
    }, {
      "left" : "testJavaSkipList",
      "right" : "testJavaSkipList",
      "info" : "SimpleName[20034-20050]:SimpleName[20034-20050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20053-20329]:Block[20053-20329]"
    }, {
      "left" : "String sName = \"Java's SkipList\";",
      "right" : "String sName = \"Java's SkipList\";",
      "info" : "VariableDeclarationStatement[20063-20096]:VariableDeclarationStatement[20063-20096]"
    }, {
      "left" : "NavigableSet<Integer> sList = new ConcurrentSkipListSet<Integer>();",
      "right" : "NavigableSet<Integer> sList = new ConcurrentSkipListSet<Integer>();",
      "info" : "VariableDeclarationStatement[20105-20172]:VariableDeclarationStatement[20105-20172]"
    }, {
      "left" : "Collection<Integer> lCollection = sList;",
      "right" : "Collection<Integer> lCollection = sList;",
      "info" : "VariableDeclarationStatement[20181-20221]:VariableDeclarationStatement[20181-20221]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,sName))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,sName))",
      "info" : "IfStatement[20231-20302]:IfStatement[20231-20302]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20289-20302]:ReturnStatement[20289-20302]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20311-20323]:ReturnStatement[20311-20323]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20335-20342]:Modifier[20335-20342]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20343-20349]:Modifier[20343-20349]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20350-20357]:PrimitiveType[20350-20357]"
    }, {
      "left" : "testSkipList",
      "right" : "testSkipList",
      "info" : "SimpleName[20358-20370]:SimpleName[20358-20370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20373-20640]:Block[20373-20640]"
    }, {
      "left" : "String sName = \"SkipList\";",
      "right" : "String sName = \"SkipList\";",
      "info" : "VariableDeclarationStatement[20383-20409]:VariableDeclarationStatement[20383-20409]"
    }, {
      "left" : "SkipList<Integer> sList = new SkipList<Integer>();",
      "right" : "SkipList<Integer> sList = new SkipList<Integer>();",
      "info" : "VariableDeclarationStatement[20418-20468]:VariableDeclarationStatement[20418-20468]"
    }, {
      "left" : "Collection<Integer> lCollection = sList.toCollection();",
      "right" : "Collection<Integer> lCollection = sList.toCollection();",
      "info" : "VariableDeclarationStatement[20477-20532]:VariableDeclarationStatement[20477-20532]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,sName))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,sName))",
      "info" : "IfStatement[20542-20613]:IfStatement[20542-20613]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20600-20613]:ReturnStatement[20600-20613]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20622-20634]:ReturnStatement[20622-20634]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20646-20653]:Modifier[20646-20653]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20654-20660]:Modifier[20654-20660]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20661-20668]:PrimitiveType[20661-20668]"
    }, {
      "left" : "testSplayTree",
      "right" : "testSplayTree",
      "info" : "SimpleName[20669-20682]:SimpleName[20669-20682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20685-20967]:Block[20685-20967]"
    }, {
      "left" : "String bstName = \"Splay Tree\";",
      "right" : "String bstName = \"Splay Tree\";",
      "info" : "VariableDeclarationStatement[20695-20725]:VariableDeclarationStatement[20695-20725]"
    }, {
      "left" : "BinarySearchTree<Integer> bst = new SplayTree<Integer>();",
      "right" : "BinarySearchTree<Integer> bst = new SplayTree<Integer>();",
      "info" : "VariableDeclarationStatement[20734-20791]:VariableDeclarationStatement[20734-20791]"
    }, {
      "left" : "Collection<Integer> bstCollection = bst.toCollection();",
      "right" : "Collection<Integer> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[20800-20855]:VariableDeclarationStatement[20800-20855]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "info" : "IfStatement[20865-20940]:IfStatement[20865-20940]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20927-20940]:ReturnStatement[20927-20940]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20949-20961]:ReturnStatement[20949-20961]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20973-20980]:Modifier[20973-20980]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20981-20987]:Modifier[20981-20987]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20988-20995]:PrimitiveType[20988-20995]"
    }, {
      "left" : "testArrayStack",
      "right" : "testArrayStack",
      "info" : "SimpleName[20996-21010]:SimpleName[20996-21010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21013-21303]:Block[21013-21303]"
    }, {
      "left" : "String aName = \"Stack [array]\";",
      "right" : "String aName = \"Stack [array]\";",
      "info" : "VariableDeclarationStatement[21023-21054]:VariableDeclarationStatement[21023-21054]"
    }, {
      "left" : "Stack.ArrayStack<Integer> aStack = new Stack.ArrayStack<Integer>();",
      "right" : "Stack.ArrayStack<Integer> aStack = new Stack.ArrayStack<Integer>();",
      "info" : "VariableDeclarationStatement[21063-21130]:VariableDeclarationStatement[21063-21130]"
    }, {
      "left" : "Collection<Integer> aCollection = aStack.toCollection();",
      "right" : "Collection<Integer> aCollection = aStack.toCollection();",
      "info" : "VariableDeclarationStatement[21139-21195]:VariableDeclarationStatement[21139-21195]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,aName))",
      "info" : "IfStatement[21205-21276]:IfStatement[21205-21276]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21263-21276]:ReturnStatement[21263-21276]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21285-21297]:ReturnStatement[21285-21297]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21309-21316]:Modifier[21309-21316]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21317-21323]:Modifier[21317-21323]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21324-21331]:PrimitiveType[21324-21331]"
    }, {
      "left" : "testLinkedStack",
      "right" : "testLinkedStack",
      "info" : "SimpleName[21332-21347]:SimpleName[21332-21347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21350-21643]:Block[21350-21643]"
    }, {
      "left" : "String lName = \"Stack [linked]\";",
      "right" : "String lName = \"Stack [linked]\";",
      "info" : "VariableDeclarationStatement[21360-21392]:VariableDeclarationStatement[21360-21392]"
    }, {
      "left" : "Stack.LinkedStack<Integer> lStack = new Stack.LinkedStack<Integer>();",
      "right" : "Stack.LinkedStack<Integer> lStack = new Stack.LinkedStack<Integer>();",
      "info" : "VariableDeclarationStatement[21401-21470]:VariableDeclarationStatement[21401-21470]"
    }, {
      "left" : "Collection<Integer> lCollection = lStack.toCollection();",
      "right" : "Collection<Integer> lCollection = lStack.toCollection();",
      "info" : "VariableDeclarationStatement[21479-21535]:VariableDeclarationStatement[21479-21535]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,lName))",
      "info" : "IfStatement[21545-21616]:IfStatement[21545-21616]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21603-21616]:ReturnStatement[21603-21616]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21625-21637]:ReturnStatement[21625-21637]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21649-21656]:Modifier[21649-21656]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21657-21663]:Modifier[21657-21663]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21664-21671]:PrimitiveType[21664-21671]"
    }, {
      "left" : "testTreap",
      "right" : "testTreap",
      "info" : "SimpleName[21672-21681]:SimpleName[21672-21681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21684-21957]:Block[21684-21957]"
    }, {
      "left" : "String bstName = \"Treap\";",
      "right" : "String bstName = \"Treap\";",
      "info" : "VariableDeclarationStatement[21694-21719]:VariableDeclarationStatement[21694-21719]"
    }, {
      "left" : "BinarySearchTree<Integer> bst = new Treap<Integer>();",
      "right" : "BinarySearchTree<Integer> bst = new Treap<Integer>();",
      "info" : "VariableDeclarationStatement[21728-21781]:VariableDeclarationStatement[21728-21781]"
    }, {
      "left" : "Collection<Integer> bstCollection = bst.toCollection();",
      "right" : "Collection<Integer> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[21790-21845]:VariableDeclarationStatement[21790-21845]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,bstName))",
      "info" : "IfStatement[21855-21930]:IfStatement[21855-21930]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21917-21930]:ReturnStatement[21917-21930]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21939-21951]:ReturnStatement[21939-21951]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21963-21970]:Modifier[21963-21970]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21971-21977]:Modifier[21971-21977]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21978-21985]:PrimitiveType[21978-21985]"
    }, {
      "left" : "testTreeMap",
      "right" : "testTreeMap",
      "info" : "SimpleName[21986-21997]:SimpleName[21986-21997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22000-22259]:Block[22000-22259]"
    }, {
      "left" : "String mapName = \"TreeMap\";",
      "right" : "String mapName = \"TreeMap\";",
      "info" : "VariableDeclarationStatement[22010-22037]:VariableDeclarationStatement[22010-22037]"
    }, {
      "left" : "TreeMap<String,Integer> map = new TreeMap<String,Integer>();",
      "right" : "TreeMap<String,Integer> map = new TreeMap<String,Integer>();",
      "info" : "VariableDeclarationStatement[22046-22106]:VariableDeclarationStatement[22046-22106]"
    }, {
      "left" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "right" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "info" : "VariableDeclarationStatement[22115-22164]:VariableDeclarationStatement[22115-22164]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,mapName))",
      "right" : "if (!testJavaMap(jMap,String.class,mapName))",
      "info" : "IfStatement[22174-22232]:IfStatement[22174-22232]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22219-22232]:ReturnStatement[22219-22232]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22241-22253]:ReturnStatement[22241-22253]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22265-22272]:Modifier[22265-22272]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22273-22279]:Modifier[22273-22279]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22280-22287]:PrimitiveType[22280-22287]"
    }, {
      "left" : "testTrie",
      "right" : "testTrie",
      "info" : "SimpleName[22288-22296]:SimpleName[22288-22296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22299-22554]:Block[22299-22554]"
    }, {
      "left" : "String bstName = \"Trie\";",
      "right" : "String bstName = \"Trie\";",
      "info" : "VariableDeclarationStatement[22309-22333]:VariableDeclarationStatement[22309-22333]"
    }, {
      "left" : "Trie<String> bst = new Trie<String>();",
      "right" : "Trie<String> bst = new Trie<String>();",
      "info" : "VariableDeclarationStatement[22342-22380]:VariableDeclarationStatement[22342-22380]"
    }, {
      "left" : "Collection<String> bstCollection = bst.toCollection();",
      "right" : "Collection<String> bstCollection = bst.toCollection();",
      "info" : "VariableDeclarationStatement[22389-22443]:VariableDeclarationStatement[22389-22443]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,String.class,bstName))",
      "right" : "if (!testJavaCollection(bstCollection,String.class,bstName))",
      "info" : "IfStatement[22453-22527]:IfStatement[22453-22527]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22514-22527]:ReturnStatement[22514-22527]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22536-22548]:ReturnStatement[22536-22548]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22560-22567]:Modifier[22560-22567]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22568-22574]:Modifier[22568-22574]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22575-22582]:PrimitiveType[22575-22582]"
    }, {
      "left" : "testTrieMap",
      "right" : "testTrieMap",
      "info" : "SimpleName[22583-22594]:SimpleName[22583-22594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22597-22856]:Block[22597-22856]"
    }, {
      "left" : "String mapName = \"TrieMap\";",
      "right" : "String mapName = \"TrieMap\";",
      "info" : "VariableDeclarationStatement[22607-22634]:VariableDeclarationStatement[22607-22634]"
    }, {
      "left" : "TrieMap<String,Integer> map = new TrieMap<String,Integer>();",
      "right" : "TrieMap<String,Integer> map = new TrieMap<String,Integer>();",
      "info" : "VariableDeclarationStatement[22643-22703]:VariableDeclarationStatement[22643-22703]"
    }, {
      "left" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "right" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "info" : "VariableDeclarationStatement[22712-22761]:VariableDeclarationStatement[22712-22761]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,mapName))",
      "right" : "if (!testJavaMap(jMap,String.class,mapName))",
      "info" : "IfStatement[22771-22829]:IfStatement[22771-22829]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22816-22829]:ReturnStatement[22816-22829]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22838-22850]:ReturnStatement[22838-22850]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22862-22869]:Modifier[22862-22869]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22870-22876]:Modifier[22870-22876]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22877-22884]:PrimitiveType[22877-22884]"
    }, {
      "left" : "testJavaSkipListMap",
      "right" : "testJavaSkipListMap",
      "info" : "SimpleName[22885-22904]:SimpleName[22885-22904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22907-23146]:Block[22907-23146]"
    }, {
      "left" : "String mapName = \"Java's SkipListMap\";",
      "right" : "String mapName = \"Java's SkipListMap\";",
      "info" : "VariableDeclarationStatement[22917-22955]:VariableDeclarationStatement[22917-22955]"
    }, {
      "left" : "ConcurrentSkipListMap<String,Integer> map = new ConcurrentSkipListMap<String,Integer>();",
      "right" : "ConcurrentSkipListMap<String,Integer> map = new ConcurrentSkipListMap<String,Integer>();",
      "info" : "VariableDeclarationStatement[22964-23052]:VariableDeclarationStatement[22964-23052]"
    }, {
      "left" : "if (!testJavaMap(map,String.class,mapName))",
      "right" : "if (!testJavaMap(map,String.class,mapName))",
      "info" : "IfStatement[23062-23119]:IfStatement[23062-23119]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23106-23119]:ReturnStatement[23106-23119]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23128-23140]:ReturnStatement[23128-23140]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23152-23159]:Modifier[23152-23159]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23160-23166]:Modifier[23160-23166]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23167-23174]:PrimitiveType[23167-23174]"
    }, {
      "left" : "testSkipListMap",
      "right" : "testSkipListMap",
      "info" : "SimpleName[23175-23190]:SimpleName[23175-23190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23193-23464]:Block[23193-23464]"
    }, {
      "left" : "String mapName = \"SkipListMap\";",
      "right" : "String mapName = \"SkipListMap\";",
      "info" : "VariableDeclarationStatement[23203-23234]:VariableDeclarationStatement[23203-23234]"
    }, {
      "left" : "SkipListMap<String,Integer> map = new SkipListMap<String,Integer>();",
      "right" : "SkipListMap<String,Integer> map = new SkipListMap<String,Integer>();",
      "info" : "VariableDeclarationStatement[23243-23311]:VariableDeclarationStatement[23243-23311]"
    }, {
      "left" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "right" : "java.util.Map<String,Integer> jMap = map.toMap();",
      "info" : "VariableDeclarationStatement[23320-23369]:VariableDeclarationStatement[23320-23369]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,mapName))",
      "right" : "if (!testJavaMap(jMap,String.class,mapName))",
      "info" : "IfStatement[23379-23437]:IfStatement[23379-23437]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23424-23437]:ReturnStatement[23424-23437]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23446-23458]:ReturnStatement[23446-23458]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23470-23477]:Modifier[23470-23477]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23478-23484]:Modifier[23478-23484]"
    }, {
      "left" : "T extends Comparable<T>",
      "right" : "T extends Comparable<T>",
      "info" : "TypeParameter[23486-23509]:TypeParameter[23486-23509]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23511-23518]:PrimitiveType[23511-23518]"
    }, {
      "left" : "testJavaCollection",
      "right" : "testJavaCollection",
      "info" : "SimpleName[23519-23537]:SimpleName[23519-23537]"
    }, {
      "left" : "Collection<T> collection",
      "right" : "Collection<T> collection",
      "info" : "SingleVariableDeclaration[23538-23562]:SingleVariableDeclaration[23538-23562]"
    }, {
      "left" : "Class<T> type",
      "right" : "Class<T> type",
      "info" : "SingleVariableDeclaration[23564-23577]:SingleVariableDeclaration[23564-23577]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[23579-23590]:SingleVariableDeclaration[23579-23590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23592-39755]:Block[23592-39755]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[23647-23815]:IfStatement[23647-23815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23674-23815]:Block[23674-23815]"
    }, {
      "left" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "right" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "info" : "ExpressionStatement[23688-23742]:ExpressionStatement[23688-23742]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[23755-23779]:ExpressionStatement[23755-23779]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23792-23805]:ReturnStatement[23792-23805]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[23824-23988]:IfStatement[23824-23988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23850-23988]:Block[23850-23988]"
    }, {
      "left" : "System.err.println(name+\" initial size() failed.\");",
      "right" : "System.err.println(name+\" initial size() failed.\");",
      "info" : "ExpressionStatement[23864-23915]:ExpressionStatement[23864-23915]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[23928-23952]:ExpressionStatement[23928-23952]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23965-23978]:ReturnStatement[23965-23978]"
    }, {
      "left" : "long sortedCount = 0;",
      "right" : "long sortedCount = 0;",
      "info" : "VariableDeclarationStatement[23998-24019]:VariableDeclarationStatement[23998-24019]"
    }, {
      "left" : "long unsortedCount = 0;",
      "right" : "long unsortedCount = 0;",
      "info" : "VariableDeclarationStatement[24028-24051]:VariableDeclarationStatement[24028-24051]"
    }, {
      "left" : "long addTime = 0L;",
      "right" : "long addTime = 0L;",
      "info" : "VariableDeclarationStatement[24061-24079]:VariableDeclarationStatement[24061-24079]"
    }, {
      "left" : "long removeTime = 0L;",
      "right" : "long removeTime = 0L;",
      "info" : "VariableDeclarationStatement[24088-24109]:VariableDeclarationStatement[24088-24109]"
    }, {
      "left" : "long beforeAddTime = 0L;",
      "right" : "long beforeAddTime = 0L;",
      "info" : "VariableDeclarationStatement[24119-24143]:VariableDeclarationStatement[24119-24143]"
    }, {
      "left" : "long afterAddTime = 0L;",
      "right" : "long afterAddTime = 0L;",
      "info" : "VariableDeclarationStatement[24152-24175]:VariableDeclarationStatement[24152-24175]"
    }, {
      "left" : "long beforeRemoveTime = 0L;",
      "right" : "long beforeRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[24184-24211]:VariableDeclarationStatement[24184-24211]"
    }, {
      "left" : "long afterRemoveTime = 0L;",
      "right" : "long afterRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[24220-24246]:VariableDeclarationStatement[24220-24246]"
    }, {
      "left" : "long memory = 0L;",
      "right" : "long memory = 0L;",
      "info" : "VariableDeclarationStatement[24256-24273]:VariableDeclarationStatement[24256-24273]"
    }, {
      "left" : "long beforeMemory = 0L;",
      "right" : "long beforeMemory = 0L;",
      "info" : "VariableDeclarationStatement[24283-24306]:VariableDeclarationStatement[24283-24306]"
    }, {
      "left" : "long afterMemory = 0L;",
      "right" : "long afterMemory = 0L;",
      "info" : "VariableDeclarationStatement[24315-24337]:VariableDeclarationStatement[24315-24337]"
    }, {
      "left" : "long lookupTime = 0L;",
      "right" : "long lookupTime = 0L;",
      "info" : "VariableDeclarationStatement[24347-24368]:VariableDeclarationStatement[24347-24368]"
    }, {
      "left" : "long beforeLookupTime = 0L;",
      "right" : "long beforeLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[24378-24405]:VariableDeclarationStatement[24378-24405]"
    }, {
      "left" : "long afterLookupTime = 0L;",
      "right" : "long afterLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[24414-24440]:VariableDeclarationStatement[24414-24440]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[24450-24490]:IfStatement[24450-24490]"
    }, {
      "left" : "System.out.println(name);",
      "right" : "System.out.println(name);",
      "info" : "ExpressionStatement[24465-24490]:ExpressionStatement[24465-24490]"
    }, {
      "left" : "testNames[testIndex] = name;",
      "right" : "testNames[testIndex] = name;",
      "info" : "ExpressionStatement[24499-24527]:ExpressionStatement[24499-24527]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[24537-24553]:ExpressionStatement[24537-24553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24562-28073]:Block[24562-28073]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[24643-24661]:ExpressionStatement[24643-24661]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[24674-24691]:ExpressionStatement[24674-24691]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[24704-24723]:ExpressionStatement[24704-24723]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[24736-24754]:ExpressionStatement[24736-24754]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[24767-24835]:IfStatement[24767-24835]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[24784-24835]:ExpressionStatement[24784-24835]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[24848-24897]:IfStatement[24848-24897]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[24863-24897]:ExpressionStatement[24863-24897]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[24910-25315]:ForStatement[24910-25315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24952-25315]:Block[24952-25315]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[24970-24998]:VariableDeclarationStatement[24970-24998]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[25015-25050]:VariableDeclarationStatement[25015-25050]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[25067-25104]:VariableDeclarationStatement[25067-25104]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[25121-25301]:IfStatement[25121-25301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25133-25301]:Block[25133-25301]"
    }, {
      "left" : "System.err.println(name+\" unsorted add failed.\");",
      "right" : "System.err.println(name+\" unsorted add failed.\");",
      "info" : "ExpressionStatement[25155-25204]:ExpressionStatement[25155-25204]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[25225-25249]:ExpressionStatement[25225-25249]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25270-25283]:ReturnStatement[25270-25283]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[25328-25582]:IfStatement[25328-25582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25343-25582]:Block[25343-25582]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[25361-25394]:ExpressionStatement[25361-25394]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[25411-25451]:ExpressionStatement[25411-25451]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[25468-25568]:IfStatement[25468-25568]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[25483-25568]:ExpressionStatement[25483-25568]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[25595-25883]:IfStatement[25595-25883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25612-25883]:Block[25612-25883]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[25630-25680]:ExpressionStatement[25630-25680]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[25697-25734]:ExpressionStatement[25697-25734]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[25751-25869]:IfStatement[25751-25869]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[25766-25869]:ExpressionStatement[25766-25869]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[25897-25954]:IfStatement[25897-25954]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[25912-25954]:ExpressionStatement[25912-25954]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[25968-25990]:ExpressionStatement[25968-25990]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[26003-26024]:ExpressionStatement[26003-26024]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[26037-26089]:IfStatement[26037-26089]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[26052-26089]:ExpressionStatement[26052-26089]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[26102-26523]:ForStatement[26102-26523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26144-26523]:Block[26144-26523]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[26162-26190]:VariableDeclarationStatement[26162-26190]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[26207-26242]:VariableDeclarationStatement[26207-26242]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[26259-26304]:VariableDeclarationStatement[26259-26304]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[26321-26509]:IfStatement[26321-26509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26336-26509]:Block[26336-26509]"
    }, {
      "left" : "System.err.println(name+\" unsorted contains failed.\");",
      "right" : "System.err.println(name+\" unsorted contains failed.\");",
      "info" : "ExpressionStatement[26358-26412]:ExpressionStatement[26358-26412]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[26433-26457]:ExpressionStatement[26433-26457]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26478-26491]:ReturnStatement[26478-26491]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[26536-26822]:IfStatement[26536-26822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26551-26822]:Block[26551-26822]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[26569-26605]:ExpressionStatement[26569-26605]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[26622-26671]:ExpressionStatement[26622-26671]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[26688-26808]:IfStatement[26688-26808]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[26703-26808]:ExpressionStatement[26703-26808]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[26836-26858]:ExpressionStatement[26836-26858]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[26871-26892]:ExpressionStatement[26871-26892]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[26905-26957]:IfStatement[26905-26957]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[26920-26957]:ExpressionStatement[26920-26957]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[26970-27385]:ForStatement[26970-27385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27012-27385]:Block[27012-27385]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[27030-27058]:VariableDeclarationStatement[27030-27058]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[27075-27110]:VariableDeclarationStatement[27075-27110]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[27127-27169]:VariableDeclarationStatement[27127-27169]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[27186-27371]:IfStatement[27186-27371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27200-27371]:Block[27200-27371]"
    }, {
      "left" : "System.err.println(name+\" unsorted remove failed.\");",
      "right" : "System.err.println(name+\" unsorted remove failed.\");",
      "info" : "ExpressionStatement[27222-27274]:ExpressionStatement[27222-27274]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[27295-27319]:ExpressionStatement[27295-27319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27340-27353]:ReturnStatement[27340-27353]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[27398-27670]:IfStatement[27398-27670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27413-27670]:Block[27413-27670]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[27431-27467]:ExpressionStatement[27431-27467]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[27484-27533]:ExpressionStatement[27484-27533]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[27550-27656]:IfStatement[27550-27656]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[27565-27656]:ExpressionStatement[27565-27656]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[27684-27869]:IfStatement[27684-27869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27711-27869]:Block[27711-27869]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[27729-27784]:ExpressionStatement[27729-27784]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[27801-27825]:ExpressionStatement[27801-27825]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27842-27855]:ReturnStatement[27842-27855]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[27882-28063]:IfStatement[27882-28063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27908-28063]:Block[27908-28063]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[27926-27978]:ExpressionStatement[27926-27978]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[27995-28019]:ExpressionStatement[27995-28019]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28036-28049]:ReturnStatement[28036-28049]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[28083-28099]:ExpressionStatement[28083-28099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28108-31676]:Block[28108-31676]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[28241-28259]:ExpressionStatement[28241-28259]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[28272-28289]:ExpressionStatement[28272-28289]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[28302-28321]:ExpressionStatement[28302-28321]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[28334-28352]:ExpressionStatement[28334-28352]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[28365-28433]:IfStatement[28365-28433]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[28382-28433]:ExpressionStatement[28382-28433]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[28446-28495]:IfStatement[28446-28495]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[28461-28495]:ExpressionStatement[28461-28495]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[28508-28918]:ForStatement[28508-28918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28555-28918]:Block[28555-28918]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[28573-28601]:VariableDeclarationStatement[28573-28601]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[28618-28653]:VariableDeclarationStatement[28618-28653]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[28670-28707]:VariableDeclarationStatement[28670-28707]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[28724-28904]:IfStatement[28724-28904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28736-28904]:Block[28736-28904]"
    }, {
      "left" : "System.err.println(name+\" unsorted add failed.\");",
      "right" : "System.err.println(name+\" unsorted add failed.\");",
      "info" : "ExpressionStatement[28758-28807]:ExpressionStatement[28758-28807]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[28828-28852]:ExpressionStatement[28828-28852]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28873-28886]:ReturnStatement[28873-28886]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[28931-29185]:IfStatement[28931-29185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28946-29185]:Block[28946-29185]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[28964-28997]:ExpressionStatement[28964-28997]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[29014-29054]:ExpressionStatement[29014-29054]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[29071-29171]:IfStatement[29071-29171]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[29086-29171]:ExpressionStatement[29086-29171]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[29198-29486]:IfStatement[29198-29486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29215-29486]:Block[29215-29486]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[29233-29283]:ExpressionStatement[29233-29283]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[29300-29337]:ExpressionStatement[29300-29337]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[29354-29472]:IfStatement[29354-29472]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[29369-29472]:ExpressionStatement[29369-29472]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[29500-29557]:IfStatement[29500-29557]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[29515-29557]:ExpressionStatement[29515-29557]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[29571-29593]:ExpressionStatement[29571-29593]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[29606-29627]:ExpressionStatement[29606-29627]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[29640-29692]:IfStatement[29640-29692]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[29655-29692]:ExpressionStatement[29655-29692]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[29705-30126]:ForStatement[29705-30126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29747-30126]:Block[29747-30126]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[29765-29793]:VariableDeclarationStatement[29765-29793]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[29810-29845]:VariableDeclarationStatement[29810-29845]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[29862-29907]:VariableDeclarationStatement[29862-29907]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[29924-30112]:IfStatement[29924-30112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29939-30112]:Block[29939-30112]"
    }, {
      "left" : "System.err.println(name+\" unsorted contains failed.\");",
      "right" : "System.err.println(name+\" unsorted contains failed.\");",
      "info" : "ExpressionStatement[29961-30015]:ExpressionStatement[29961-30015]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[30036-30060]:ExpressionStatement[30036-30060]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30081-30094]:ReturnStatement[30081-30094]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[30139-30425]:IfStatement[30139-30425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30154-30425]:Block[30154-30425]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[30172-30208]:ExpressionStatement[30172-30208]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[30225-30274]:ExpressionStatement[30225-30274]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[30291-30411]:IfStatement[30291-30411]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[30306-30411]:ExpressionStatement[30306-30411]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[30439-30461]:ExpressionStatement[30439-30461]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[30474-30495]:ExpressionStatement[30474-30495]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[30508-30560]:IfStatement[30508-30560]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[30523-30560]:ExpressionStatement[30523-30560]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[30573-30988]:ForStatement[30573-30988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30615-30988]:Block[30615-30988]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[30633-30661]:VariableDeclarationStatement[30633-30661]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[30678-30713]:VariableDeclarationStatement[30678-30713]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[30730-30772]:VariableDeclarationStatement[30730-30772]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[30789-30974]:IfStatement[30789-30974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30803-30974]:Block[30803-30974]"
    }, {
      "left" : "System.err.println(name+\" unsorted remove failed.\");",
      "right" : "System.err.println(name+\" unsorted remove failed.\");",
      "info" : "ExpressionStatement[30825-30877]:ExpressionStatement[30825-30877]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[30898-30922]:ExpressionStatement[30898-30922]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30943-30956]:ReturnStatement[30943-30956]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[31001-31273]:IfStatement[31001-31273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31016-31273]:Block[31016-31273]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[31034-31070]:ExpressionStatement[31034-31070]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[31087-31136]:ExpressionStatement[31087-31136]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[31153-31259]:IfStatement[31153-31259]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[31168-31259]:ExpressionStatement[31168-31259]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[31287-31472]:IfStatement[31287-31472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31314-31472]:Block[31314-31472]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[31332-31387]:ExpressionStatement[31332-31387]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[31404-31428]:ExpressionStatement[31404-31428]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31445-31458]:ReturnStatement[31445-31458]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[31485-31666]:IfStatement[31485-31666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31511-31666]:Block[31511-31666]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[31529-31581]:ExpressionStatement[31529-31581]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[31598-31622]:ExpressionStatement[31598-31622]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31639-31652]:ReturnStatement[31639-31652]"
    }, {
      "left" : "long addSortedTime = 0L;",
      "right" : "long addSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[31686-31710]:VariableDeclarationStatement[31686-31710]"
    }, {
      "left" : "long removeSortedTime = 0L;",
      "right" : "long removeSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[31719-31746]:VariableDeclarationStatement[31719-31746]"
    }, {
      "left" : "long beforeAddSortedTime = 0L;",
      "right" : "long beforeAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[31756-31786]:VariableDeclarationStatement[31756-31786]"
    }, {
      "left" : "long afterAddSortedTime = 0L;",
      "right" : "long afterAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[31795-31824]:VariableDeclarationStatement[31795-31824]"
    }, {
      "left" : "long beforeRemoveSortedTime = 0L;",
      "right" : "long beforeRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[31834-31867]:VariableDeclarationStatement[31834-31867]"
    }, {
      "left" : "long afterRemoveSortedTime = 0L;",
      "right" : "long afterRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[31876-31908]:VariableDeclarationStatement[31876-31908]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[31918-31932]:ExpressionStatement[31918-31932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31941-35514]:Block[31941-35514]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[32020-32038]:ExpressionStatement[32020-32038]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[32051-32068]:ExpressionStatement[32051-32068]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[32081-32106]:ExpressionStatement[32081-32106]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[32119-32143]:ExpressionStatement[32119-32143]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[32156-32224]:IfStatement[32156-32224]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[32173-32224]:ExpressionStatement[32173-32224]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[32237-32292]:IfStatement[32237-32292]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[32252-32292]:ExpressionStatement[32252-32292]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[32305-32706]:ForStatement[32305-32706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32345-32706]:Block[32345-32706]"
    }, {
      "left" : "Integer value = unsorted[i];",
      "right" : "Integer value = unsorted[i];",
      "info" : "VariableDeclarationStatement[32363-32391]:VariableDeclarationStatement[32363-32391]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[32408-32443]:VariableDeclarationStatement[32408-32443]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[32460-32497]:VariableDeclarationStatement[32460-32497]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[32514-32692]:IfStatement[32514-32692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32526-32692]:Block[32526-32692]"
    }, {
      "left" : "System.err.println(name+\" sorted add failed.\");",
      "right" : "System.err.println(name+\" sorted add failed.\");",
      "info" : "ExpressionStatement[32548-32595]:ExpressionStatement[32548-32595]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[32616-32640]:ExpressionStatement[32616-32640]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32661-32674]:ReturnStatement[32661-32674]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[32719-32999]:IfStatement[32719-32999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32734-32999]:Block[32734-32999]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[32752-32791]:ExpressionStatement[32752-32791]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[32808-32866]:ExpressionStatement[32808-32866]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[32883-32985]:IfStatement[32883-32985]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[32898-32985]:ExpressionStatement[32898-32985]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[33012-33298]:IfStatement[33012-33298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33029-33298]:Block[33029-33298]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[33047-33097]:ExpressionStatement[33047-33097]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[33114-33151]:ExpressionStatement[33114-33151]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[33168-33284]:IfStatement[33168-33284]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[33183-33284]:ExpressionStatement[33183-33284]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[33312-33369]:IfStatement[33312-33369]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[33327-33369]:ExpressionStatement[33327-33369]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[33383-33405]:ExpressionStatement[33383-33405]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[33418-33439]:ExpressionStatement[33418-33439]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[33452-33504]:IfStatement[33452-33504]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[33467-33504]:ExpressionStatement[33467-33504]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[33517-33932]:ForStatement[33517-33932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33557-33932]:Block[33557-33932]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "Integer value = sorted[i];",
      "info" : "VariableDeclarationStatement[33575-33601]:VariableDeclarationStatement[33575-33601]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[33618-33653]:VariableDeclarationStatement[33618-33653]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[33670-33715]:VariableDeclarationStatement[33670-33715]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[33732-33918]:IfStatement[33732-33918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33747-33918]:Block[33747-33918]"
    }, {
      "left" : "System.err.println(name+\" sorted contains failed.\");",
      "right" : "System.err.println(name+\" sorted contains failed.\");",
      "info" : "ExpressionStatement[33769-33821]:ExpressionStatement[33769-33821]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[33842-33866]:ExpressionStatement[33842-33866]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33887-33900]:ReturnStatement[33887-33900]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[33945-34229]:IfStatement[33945-34229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33960-34229]:Block[33960-34229]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[33978-34014]:ExpressionStatement[33978-34014]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[34031-34080]:ExpressionStatement[34031-34080]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[34097-34215]:IfStatement[34097-34215]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[34112-34215]:ExpressionStatement[34112-34215]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[34243-34271]:ExpressionStatement[34243-34271]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[34284-34311]:ExpressionStatement[34284-34311]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[34324-34382]:IfStatement[34324-34382]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[34339-34382]:ExpressionStatement[34339-34382]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[34395-34804]:ForStatement[34395-34804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34435-34804]:Block[34435-34804]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "Integer value = sorted[i];",
      "info" : "VariableDeclarationStatement[34453-34479]:VariableDeclarationStatement[34453-34479]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[34496-34531]:VariableDeclarationStatement[34496-34531]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[34548-34590]:VariableDeclarationStatement[34548-34590]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[34607-34790]:IfStatement[34607-34790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34621-34790]:Block[34621-34790]"
    }, {
      "left" : "System.err.println(name+\" sorted remove failed.\");",
      "right" : "System.err.println(name+\" sorted remove failed.\");",
      "info" : "ExpressionStatement[34643-34693]:ExpressionStatement[34643-34693]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[34714-34738]:ExpressionStatement[34714-34738]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34759-34772]:ReturnStatement[34759-34772]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[34817-35115]:IfStatement[34817-35115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34832-35115]:Block[34832-35115]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[34850-34892]:ExpressionStatement[34850-34892]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[34909-34976]:ExpressionStatement[34909-34976]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[34993-35101]:IfStatement[34993-35101]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[35008-35101]:ExpressionStatement[35008-35101]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[35129-35312]:IfStatement[35129-35312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35156-35312]:Block[35156-35312]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[35174-35227]:ExpressionStatement[35174-35227]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[35244-35268]:ExpressionStatement[35244-35268]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35285-35298]:ReturnStatement[35285-35298]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[35325-35504]:IfStatement[35325-35504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35351-35504]:Block[35351-35504]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[35369-35419]:ExpressionStatement[35369-35419]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[35436-35460]:ExpressionStatement[35436-35460]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35477-35490]:ReturnStatement[35477-35490]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[35524-35538]:ExpressionStatement[35524-35538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35547-39176]:Block[35547-39176]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[35679-35697]:ExpressionStatement[35679-35697]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[35710-35727]:ExpressionStatement[35710-35727]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[35740-35765]:ExpressionStatement[35740-35765]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[35778-35802]:ExpressionStatement[35778-35802]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[35815-35883]:IfStatement[35815-35883]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[35832-35883]:ExpressionStatement[35832-35883]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[35896-35951]:IfStatement[35896-35951]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[35911-35951]:ExpressionStatement[35911-35951]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[35964-36363]:ForStatement[35964-36363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36004-36363]:Block[36004-36363]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "Integer value = sorted[i];",
      "info" : "VariableDeclarationStatement[36022-36048]:VariableDeclarationStatement[36022-36048]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[36065-36100]:VariableDeclarationStatement[36065-36100]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[36117-36154]:VariableDeclarationStatement[36117-36154]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[36171-36349]:IfStatement[36171-36349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36183-36349]:Block[36183-36349]"
    }, {
      "left" : "System.err.println(name+\" sorted add failed.\");",
      "right" : "System.err.println(name+\" sorted add failed.\");",
      "info" : "ExpressionStatement[36205-36252]:ExpressionStatement[36205-36252]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[36273-36297]:ExpressionStatement[36273-36297]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36318-36331]:ReturnStatement[36318-36331]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[36376-36656]:IfStatement[36376-36656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36391-36656]:Block[36391-36656]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[36409-36448]:ExpressionStatement[36409-36448]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[36465-36523]:ExpressionStatement[36465-36523]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[36540-36642]:IfStatement[36540-36642]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[36555-36642]:ExpressionStatement[36555-36642]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[36669-36955]:IfStatement[36669-36955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36686-36955]:Block[36686-36955]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[36704-36754]:ExpressionStatement[36704-36754]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[36771-36808]:ExpressionStatement[36771-36808]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[36825-36941]:IfStatement[36825-36941]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[36840-36941]:ExpressionStatement[36840-36941]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[36969-37026]:IfStatement[36969-37026]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[36984-37026]:ExpressionStatement[36984-37026]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[37040-37062]:ExpressionStatement[37040-37062]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[37075-37096]:ExpressionStatement[37075-37096]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[37109-37161]:IfStatement[37109-37161]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[37124-37161]:ExpressionStatement[37124-37161]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[37174-37589]:ForStatement[37174-37589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37214-37589]:Block[37214-37589]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "Integer value = sorted[i];",
      "info" : "VariableDeclarationStatement[37232-37258]:VariableDeclarationStatement[37232-37258]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[37275-37310]:VariableDeclarationStatement[37275-37310]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[37327-37372]:VariableDeclarationStatement[37327-37372]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[37389-37575]:IfStatement[37389-37575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37404-37575]:Block[37404-37575]"
    }, {
      "left" : "System.err.println(name+\" sorted contains failed.\");",
      "right" : "System.err.println(name+\" sorted contains failed.\");",
      "info" : "ExpressionStatement[37426-37478]:ExpressionStatement[37426-37478]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[37499-37523]:ExpressionStatement[37499-37523]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37544-37557]:ReturnStatement[37544-37557]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[37602-37886]:IfStatement[37602-37886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37617-37886]:Block[37617-37886]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[37635-37671]:ExpressionStatement[37635-37671]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[37688-37737]:ExpressionStatement[37688-37737]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[37754-37872]:IfStatement[37754-37872]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[37769-37872]:ExpressionStatement[37769-37872]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[37900-37928]:ExpressionStatement[37900-37928]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[37941-37968]:ExpressionStatement[37941-37968]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[37981-38039]:IfStatement[37981-38039]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[37996-38039]:ExpressionStatement[37996-38039]"
    }, {
      "left" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[38052-38466]:ForStatement[38052-38466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38097-38466]:Block[38097-38466]"
    }, {
      "left" : "Integer value = sorted[i];",
      "right" : "Integer value = sorted[i];",
      "info" : "VariableDeclarationStatement[38115-38141]:VariableDeclarationStatement[38115-38141]"
    }, {
      "left" : "T item = Utils.parseT(value, type);",
      "right" : "T item = Utils.parseT(value, type);",
      "info" : "VariableDeclarationStatement[38158-38193]:VariableDeclarationStatement[38158-38193]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[38210-38252]:VariableDeclarationStatement[38210-38252]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[38269-38452]:IfStatement[38269-38452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38283-38452]:Block[38283-38452]"
    }, {
      "left" : "System.err.println(name+\" sorted remove failed.\");",
      "right" : "System.err.println(name+\" sorted remove failed.\");",
      "info" : "ExpressionStatement[38305-38355]:ExpressionStatement[38305-38355]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[38376-38400]:ExpressionStatement[38376-38400]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38421-38434]:ReturnStatement[38421-38434]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[38479-38777]:IfStatement[38479-38777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38494-38777]:Block[38494-38777]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[38512-38554]:ExpressionStatement[38512-38554]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[38571-38638]:ExpressionStatement[38571-38638]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[38655-38763]:IfStatement[38655-38763]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[38670-38763]:ExpressionStatement[38670-38763]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[38791-38974]:IfStatement[38791-38974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38818-38974]:Block[38818-38974]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[38836-38889]:ExpressionStatement[38836-38889]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[38906-38930]:ExpressionStatement[38906-38930]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38947-38960]:ReturnStatement[38947-38960]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[38987-39166]:IfStatement[38987-39166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39013-39166]:Block[39013-39166]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[39031-39081]:ExpressionStatement[39031-39081]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(collection);",
      "info" : "ExpressionStatement[39098-39122]:ExpressionStatement[39098-39122]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39139-39152]:ReturnStatement[39139-39152]"
    }, {
      "left" : "if (testResults[testIndex] == null)",
      "right" : "if (testResults[testIndex] == null)",
      "info" : "IfStatement[39186-39259]:IfStatement[39186-39259]"
    }, {
      "left" : "testResults[testIndex] = new long[6];",
      "right" : "testResults[testIndex] = new long[6];",
      "info" : "ExpressionStatement[39222-39259]:ExpressionStatement[39222-39259]"
    }, {
      "left" : "testResults[testIndex][0] += addTime / unsortedCount;",
      "right" : "testResults[testIndex][0] += addTime / unsortedCount;",
      "info" : "ExpressionStatement[39268-39321]:ExpressionStatement[39268-39321]"
    }, {
      "left" : "testResults[testIndex][1] += removeTime / unsortedCount;",
      "right" : "testResults[testIndex][1] += removeTime / unsortedCount;",
      "info" : "ExpressionStatement[39330-39386]:ExpressionStatement[39330-39386]"
    }, {
      "left" : "testResults[testIndex][2] += addSortedTime / sortedCount;",
      "right" : "testResults[testIndex][2] += addSortedTime / sortedCount;",
      "info" : "ExpressionStatement[39395-39452]:ExpressionStatement[39395-39452]"
    }, {
      "left" : "testResults[testIndex][3] += removeSortedTime / sortedCount;",
      "right" : "testResults[testIndex][3] += removeSortedTime / sortedCount;",
      "info" : "ExpressionStatement[39461-39521]:ExpressionStatement[39461-39521]"
    }, {
      "left" : "testResults[testIndex][4] += lookupTime / (unsortedCount + sortedCount);",
      "right" : "testResults[testIndex][4] += lookupTime / (unsortedCount + sortedCount);",
      "info" : "ExpressionStatement[39530-39602]:ExpressionStatement[39530-39602]"
    }, {
      "left" : "testResults[testIndex++][5] += memory / (unsortedCount + sortedCount);",
      "right" : "testResults[testIndex++][5] += memory / (unsortedCount + sortedCount);",
      "info" : "ExpressionStatement[39611-39681]:ExpressionStatement[39611-39681]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[39691-39727]:IfStatement[39691-39727]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[39706-39727]:ExpressionStatement[39706-39727]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39737-39749]:ReturnStatement[39737-39749]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[39761-39791]:SingleMemberAnnotation[39761-39791]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39796-39803]:Modifier[39796-39803]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39804-39810]:Modifier[39804-39810]"
    }, {
      "left" : "K extends Comparable<K>",
      "right" : "K extends Comparable<K>",
      "info" : "TypeParameter[39812-39835]:TypeParameter[39812-39835]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "TypeParameter[39836-39837]:TypeParameter[39836-39837]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39839-39846]:PrimitiveType[39839-39846]"
    }, {
      "left" : "testJavaMap",
      "right" : "testJavaMap",
      "info" : "SimpleName[39847-39858]:SimpleName[39847-39858]"
    }, {
      "left" : "java.util.Map<K,V> map",
      "right" : "java.util.Map<K,V> map",
      "info" : "SingleVariableDeclaration[39859-39881]:SingleVariableDeclaration[39859-39881]"
    }, {
      "left" : "Class<K> keyType",
      "right" : "Class<K> keyType",
      "info" : "SingleVariableDeclaration[39883-39899]:SingleVariableDeclaration[39883-39899]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[39901-39912]:SingleVariableDeclaration[39901-39912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39914-56433]:Block[39914-56433]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[39962-40116]:IfStatement[39962-40116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39982-40116]:Block[39982-40116]"
    }, {
      "left" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "right" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "info" : "ExpressionStatement[39996-40050]:ExpressionStatement[39996-40050]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[40063-40080]:ExpressionStatement[40063-40080]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40093-40106]:ReturnStatement[40093-40106]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[40125-40275]:IfStatement[40125-40275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40144-40275]:Block[40144-40275]"
    }, {
      "left" : "System.err.println(name+\" initial size() failed.\");",
      "right" : "System.err.println(name+\" initial size() failed.\");",
      "info" : "ExpressionStatement[40158-40209]:ExpressionStatement[40158-40209]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[40222-40239]:ExpressionStatement[40222-40239]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40252-40265]:ReturnStatement[40252-40265]"
    }, {
      "left" : "long sortedCount = 0;",
      "right" : "long sortedCount = 0;",
      "info" : "VariableDeclarationStatement[40285-40306]:VariableDeclarationStatement[40285-40306]"
    }, {
      "left" : "long unsortedCount = 0;",
      "right" : "long unsortedCount = 0;",
      "info" : "VariableDeclarationStatement[40315-40338]:VariableDeclarationStatement[40315-40338]"
    }, {
      "left" : "long addTime = 0L;",
      "right" : "long addTime = 0L;",
      "info" : "VariableDeclarationStatement[40348-40366]:VariableDeclarationStatement[40348-40366]"
    }, {
      "left" : "long removeTime = 0L;",
      "right" : "long removeTime = 0L;",
      "info" : "VariableDeclarationStatement[40375-40396]:VariableDeclarationStatement[40375-40396]"
    }, {
      "left" : "long beforeAddTime = 0L;",
      "right" : "long beforeAddTime = 0L;",
      "info" : "VariableDeclarationStatement[40406-40430]:VariableDeclarationStatement[40406-40430]"
    }, {
      "left" : "long afterAddTime = 0L;",
      "right" : "long afterAddTime = 0L;",
      "info" : "VariableDeclarationStatement[40439-40462]:VariableDeclarationStatement[40439-40462]"
    }, {
      "left" : "long beforeRemoveTime = 0L;",
      "right" : "long beforeRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[40471-40498]:VariableDeclarationStatement[40471-40498]"
    }, {
      "left" : "long afterRemoveTime = 0L;",
      "right" : "long afterRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[40507-40533]:VariableDeclarationStatement[40507-40533]"
    }, {
      "left" : "long memory = 0L;",
      "right" : "long memory = 0L;",
      "info" : "VariableDeclarationStatement[40543-40560]:VariableDeclarationStatement[40543-40560]"
    }, {
      "left" : "long beforeMemory = 0L;",
      "right" : "long beforeMemory = 0L;",
      "info" : "VariableDeclarationStatement[40570-40593]:VariableDeclarationStatement[40570-40593]"
    }, {
      "left" : "long afterMemory = 0L;",
      "right" : "long afterMemory = 0L;",
      "info" : "VariableDeclarationStatement[40602-40624]:VariableDeclarationStatement[40602-40624]"
    }, {
      "left" : "long lookupTime = 0L;",
      "right" : "long lookupTime = 0L;",
      "info" : "VariableDeclarationStatement[40634-40655]:VariableDeclarationStatement[40634-40655]"
    }, {
      "left" : "long beforeLookupTime = 0L;",
      "right" : "long beforeLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[40665-40692]:VariableDeclarationStatement[40665-40692]"
    }, {
      "left" : "long afterLookupTime = 0L;",
      "right" : "long afterLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[40701-40727]:VariableDeclarationStatement[40701-40727]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[40737-40777]:IfStatement[40737-40777]"
    }, {
      "left" : "System.out.println(name);",
      "right" : "System.out.println(name);",
      "info" : "ExpressionStatement[40752-40777]:ExpressionStatement[40752-40777]"
    }, {
      "left" : "testNames[testIndex] = name;",
      "right" : "testNames[testIndex] = name;",
      "info" : "ExpressionStatement[40786-40814]:ExpressionStatement[40786-40814]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[40824-40840]:ExpressionStatement[40824-40840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40849-44435]:Block[40849-44435]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[40863-40881]:ExpressionStatement[40863-40881]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[40894-40911]:ExpressionStatement[40894-40911]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[40924-40943]:ExpressionStatement[40924-40943]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[40956-40974]:ExpressionStatement[40956-40974]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[40987-41055]:IfStatement[40987-41055]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[41004-41055]:ExpressionStatement[41004-41055]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[41068-41117]:IfStatement[41068-41117]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[41083-41117]:ExpressionStatement[41083-41117]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[41130-41703]:ForStatement[41130-41703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41172-41703]:Block[41172-41703]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "Integer item = unsorted[i];",
      "info" : "VariableDeclarationStatement[41190-41217]:VariableDeclarationStatement[41190-41217]"
    }, {
      "left" : "K k = null;",
      "right" : "K k = null;",
      "info" : "VariableDeclarationStatement[41234-41245]:VariableDeclarationStatement[41234-41245]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = null;",
      "info" : "VariableDeclarationStatement[41262-41273]:VariableDeclarationStatement[41262-41273]"
    }, {
      "left" : "if (keyType.isAssignableFrom(Integer.class))",
      "right" : "if (keyType.isAssignableFrom(Integer.class))",
      "info" : "IfStatement[41290-41658]:IfStatement[41290-41658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41335-41471]:Block[41335-41471]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[41357-41392]:ExpressionStatement[41357-41392]"
    }, {
      "left" : "v = (V)Utils.parseT(item, String.class);",
      "right" : "v = (V)Utils.parseT(item, String.class);",
      "info" : "ExpressionStatement[41413-41453]:ExpressionStatement[41413-41453]"
    }, {
      "left" : "if (keyType.isAssignableFrom(String.class))",
      "right" : "if (keyType.isAssignableFrom(String.class))",
      "info" : "IfStatement[41477-41658]:IfStatement[41477-41658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41521-41658]:Block[41521-41658]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[41543-41578]:ExpressionStatement[41543-41578]"
    }, {
      "left" : "v = (V)Utils.parseT(item, Integer.class);",
      "right" : "v = (V)Utils.parseT(item, Integer.class);",
      "info" : "ExpressionStatement[41599-41640]:ExpressionStatement[41599-41640]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[41675-41689]:ExpressionStatement[41675-41689]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[41716-41970]:IfStatement[41716-41970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41731-41970]:Block[41731-41970]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[41749-41782]:ExpressionStatement[41749-41782]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[41799-41839]:ExpressionStatement[41799-41839]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[41856-41956]:IfStatement[41856-41956]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[41871-41956]:ExpressionStatement[41871-41956]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[41983-42271]:IfStatement[41983-42271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42000-42271]:Block[42000-42271]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[42018-42068]:ExpressionStatement[42018-42068]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[42085-42122]:ExpressionStatement[42085-42122]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[42139-42257]:IfStatement[42139-42257]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[42154-42257]:ExpressionStatement[42154-42257]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[42285-42335]:VariableDeclarationStatement[42285-42335]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[42348-42395]:VariableDeclarationStatement[42348-42395]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[42408-42443]:VariableDeclarationStatement[42408-42443]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[42456-42651]:IfStatement[42456-42651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42489-42651]:Block[42489-42651]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[42507-42607]:ExpressionStatement[42507-42607]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42624-42637]:ReturnStatement[42624-42637]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[42665-42715]:IfStatement[42665-42715]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[42680-42715]:ExpressionStatement[42680-42715]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[42729-42751]:ExpressionStatement[42729-42751]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[42764-42785]:ExpressionStatement[42764-42785]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[42798-42850]:IfStatement[42798-42850]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[42813-42850]:ExpressionStatement[42813-42850]"
    }, {
      "left" : "for (Integer item : unsorted)",
      "right" : "for (Integer item : unsorted)",
      "info" : "EnhancedForStatement[42863-42999]:EnhancedForStatement[42863-42999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42893-42999]:Block[42893-42999]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[42911-42949]:VariableDeclarationStatement[42911-42949]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[42966-42985]:ExpressionStatement[42966-42985]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[43012-43298]:IfStatement[43012-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43027-43298]:Block[43027-43298]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[43045-43081]:ExpressionStatement[43045-43081]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[43098-43147]:ExpressionStatement[43098-43147]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[43164-43284]:IfStatement[43164-43284]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[43179-43284]:ExpressionStatement[43179-43284]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[43312-43364]:IfStatement[43312-43364]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[43327-43364]:ExpressionStatement[43327-43364]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[43377-43775]:ForStatement[43377-43775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43419-43775]:Block[43419-43775]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "Integer item = unsorted[i];",
      "info" : "VariableDeclarationStatement[43437-43464]:VariableDeclarationStatement[43437-43464]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[43481-43519]:VariableDeclarationStatement[43481-43519]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[43536-43560]:ExpressionStatement[43536-43560]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[43577-43744]:IfStatement[43577-43744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43596-43744]:Block[43596-43744]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[43618-43692]:ExpressionStatement[43618-43692]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43713-43726]:ReturnStatement[43713-43726]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[43788-44060]:IfStatement[43788-44060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43803-44060]:Block[43803-44060]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[43821-43857]:ExpressionStatement[43821-43857]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[43874-43923]:ExpressionStatement[43874-43923]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[43940-44046]:IfStatement[43940-44046]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[43955-44046]:ExpressionStatement[43955-44046]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[44074-44245]:IfStatement[44074-44245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44094-44245]:Block[44094-44245]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[44112-44167]:ExpressionStatement[44112-44167]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[44184-44201]:ExpressionStatement[44184-44201]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44218-44231]:ReturnStatement[44218-44231]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[44258-44425]:IfStatement[44258-44425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44277-44425]:Block[44277-44425]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[44295-44347]:ExpressionStatement[44295-44347]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[44364-44381]:ExpressionStatement[44364-44381]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44398-44411]:ReturnStatement[44398-44411]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[44445-44461]:ExpressionStatement[44445-44461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44470-48118]:Block[44470-48118]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[44484-44502]:ExpressionStatement[44484-44502]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[44515-44532]:ExpressionStatement[44515-44532]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[44545-44564]:ExpressionStatement[44545-44564]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[44577-44595]:ExpressionStatement[44577-44595]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[44608-44676]:IfStatement[44608-44676]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[44625-44676]:ExpressionStatement[44625-44676]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[44689-44738]:IfStatement[44689-44738]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[44704-44738]:ExpressionStatement[44704-44738]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[44751-45329]:ForStatement[44751-45329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44798-45329]:Block[44798-45329]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "Integer item = unsorted[i];",
      "info" : "VariableDeclarationStatement[44816-44843]:VariableDeclarationStatement[44816-44843]"
    }, {
      "left" : "K k = null;",
      "right" : "K k = null;",
      "info" : "VariableDeclarationStatement[44860-44871]:VariableDeclarationStatement[44860-44871]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = null;",
      "info" : "VariableDeclarationStatement[44888-44899]:VariableDeclarationStatement[44888-44899]"
    }, {
      "left" : "if (keyType.isAssignableFrom(Integer.class))",
      "right" : "if (keyType.isAssignableFrom(Integer.class))",
      "info" : "IfStatement[44916-45284]:IfStatement[44916-45284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44961-45097]:Block[44961-45097]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[44983-45018]:ExpressionStatement[44983-45018]"
    }, {
      "left" : "v = (V)Utils.parseT(item, String.class);",
      "right" : "v = (V)Utils.parseT(item, String.class);",
      "info" : "ExpressionStatement[45039-45079]:ExpressionStatement[45039-45079]"
    }, {
      "left" : "if (keyType.isAssignableFrom(String.class))",
      "right" : "if (keyType.isAssignableFrom(String.class))",
      "info" : "IfStatement[45103-45284]:IfStatement[45103-45284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45147-45284]:Block[45147-45284]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[45169-45204]:ExpressionStatement[45169-45204]"
    }, {
      "left" : "v = (V)Utils.parseT(item, Integer.class);",
      "right" : "v = (V)Utils.parseT(item, Integer.class);",
      "info" : "ExpressionStatement[45225-45266]:ExpressionStatement[45225-45266]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[45301-45315]:ExpressionStatement[45301-45315]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[45342-45596]:IfStatement[45342-45596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45357-45596]:Block[45357-45596]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[45375-45408]:ExpressionStatement[45375-45408]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[45425-45465]:ExpressionStatement[45425-45465]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[45482-45582]:IfStatement[45482-45582]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[45497-45582]:ExpressionStatement[45497-45582]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[45609-45897]:IfStatement[45609-45897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45626-45897]:Block[45626-45897]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[45644-45694]:ExpressionStatement[45644-45694]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[45711-45748]:ExpressionStatement[45711-45748]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[45765-45883]:IfStatement[45765-45883]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[45780-45883]:ExpressionStatement[45780-45883]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[45911-45961]:VariableDeclarationStatement[45911-45961]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[45974-46021]:VariableDeclarationStatement[45974-46021]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[46034-46069]:VariableDeclarationStatement[46034-46069]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[46082-46277]:IfStatement[46082-46277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46115-46277]:Block[46115-46277]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[46133-46233]:ExpressionStatement[46133-46233]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46250-46263]:ReturnStatement[46250-46263]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[46291-46341]:IfStatement[46291-46341]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[46306-46341]:ExpressionStatement[46306-46341]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[46355-46377]:ExpressionStatement[46355-46377]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[46390-46411]:ExpressionStatement[46390-46411]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[46424-46476]:IfStatement[46424-46476]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[46439-46476]:ExpressionStatement[46439-46476]"
    }, {
      "left" : "for (Integer item : unsorted)",
      "right" : "for (Integer item : unsorted)",
      "info" : "EnhancedForStatement[46489-46625]:EnhancedForStatement[46489-46625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46519-46625]:Block[46519-46625]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[46537-46575]:VariableDeclarationStatement[46537-46575]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[46592-46611]:ExpressionStatement[46592-46611]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[46638-46924]:IfStatement[46638-46924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46653-46924]:Block[46653-46924]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[46671-46707]:ExpressionStatement[46671-46707]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[46724-46773]:ExpressionStatement[46724-46773]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[46790-46910]:IfStatement[46790-46910]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[46805-46910]:ExpressionStatement[46805-46910]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[46938-46960]:ExpressionStatement[46938-46960]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[46973-46994]:ExpressionStatement[46973-46994]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[47007-47059]:IfStatement[47007-47059]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[47022-47059]:ExpressionStatement[47022-47059]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[47072-47458]:ForStatement[47072-47458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47119-47458]:Block[47119-47458]"
    }, {
      "left" : "Integer item = unsorted[i];",
      "right" : "Integer item = unsorted[i];",
      "info" : "VariableDeclarationStatement[47137-47164]:VariableDeclarationStatement[47137-47164]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[47181-47219]:VariableDeclarationStatement[47181-47219]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[47236-47260]:ExpressionStatement[47236-47260]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[47277-47444]:IfStatement[47277-47444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47296-47444]:Block[47296-47444]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[47318-47392]:ExpressionStatement[47318-47392]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47413-47426]:ReturnStatement[47413-47426]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[47471-47743]:IfStatement[47471-47743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47486-47743]:Block[47486-47743]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[47504-47540]:ExpressionStatement[47504-47540]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[47557-47606]:ExpressionStatement[47557-47606]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[47623-47729]:IfStatement[47623-47729]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[47638-47729]:ExpressionStatement[47638-47729]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[47757-47928]:IfStatement[47757-47928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47777-47928]:Block[47777-47928]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[47795-47850]:ExpressionStatement[47795-47850]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[47867-47884]:ExpressionStatement[47867-47884]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47901-47914]:ReturnStatement[47901-47914]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[47941-48108]:IfStatement[47941-48108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47960-48108]:Block[47960-48108]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[47978-48030]:ExpressionStatement[47978-48030]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[48047-48064]:ExpressionStatement[48047-48064]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48081-48094]:ReturnStatement[48081-48094]"
    }, {
      "left" : "long addSortedTime = 0L;",
      "right" : "long addSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[48128-48152]:VariableDeclarationStatement[48128-48152]"
    }, {
      "left" : "long removeSortedTime = 0L;",
      "right" : "long removeSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[48161-48188]:VariableDeclarationStatement[48161-48188]"
    }, {
      "left" : "long beforeAddSortedTime = 0L;",
      "right" : "long beforeAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[48198-48228]:VariableDeclarationStatement[48198-48228]"
    }, {
      "left" : "long afterAddSortedTime = 0L;",
      "right" : "long afterAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[48237-48266]:VariableDeclarationStatement[48237-48266]"
    }, {
      "left" : "long beforeRemoveSortedTime = 0L;",
      "right" : "long beforeRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[48276-48309]:VariableDeclarationStatement[48276-48309]"
    }, {
      "left" : "long afterRemoveSortedTime = 0L;",
      "right" : "long afterRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[48318-48350]:VariableDeclarationStatement[48318-48350]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[48360-48374]:ExpressionStatement[48360-48374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48383-52099]:Block[48383-52099]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[48407-48425]:ExpressionStatement[48407-48425]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[48438-48455]:ExpressionStatement[48438-48455]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[48468-48493]:ExpressionStatement[48468-48493]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[48506-48530]:ExpressionStatement[48506-48530]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[48543-48611]:IfStatement[48543-48611]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[48560-48611]:ExpressionStatement[48560-48611]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[48624-48679]:IfStatement[48624-48679]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[48639-48679]:ExpressionStatement[48639-48679]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[48692-49261]:ForStatement[48692-49261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48732-49261]:Block[48732-49261]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "Integer item = sorted[i];",
      "info" : "VariableDeclarationStatement[48750-48775]:VariableDeclarationStatement[48750-48775]"
    }, {
      "left" : "K k = null;",
      "right" : "K k = null;",
      "info" : "VariableDeclarationStatement[48792-48803]:VariableDeclarationStatement[48792-48803]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = null;",
      "info" : "VariableDeclarationStatement[48820-48831]:VariableDeclarationStatement[48820-48831]"
    }, {
      "left" : "if (keyType.isAssignableFrom(Integer.class))",
      "right" : "if (keyType.isAssignableFrom(Integer.class))",
      "info" : "IfStatement[48848-49216]:IfStatement[48848-49216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48893-49029]:Block[48893-49029]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[48915-48950]:ExpressionStatement[48915-48950]"
    }, {
      "left" : "v = (V)Utils.parseT(item, String.class);",
      "right" : "v = (V)Utils.parseT(item, String.class);",
      "info" : "ExpressionStatement[48971-49011]:ExpressionStatement[48971-49011]"
    }, {
      "left" : "if (keyType.isAssignableFrom(String.class))",
      "right" : "if (keyType.isAssignableFrom(String.class))",
      "info" : "IfStatement[49035-49216]:IfStatement[49035-49216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49079-49216]:Block[49079-49216]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[49101-49136]:ExpressionStatement[49101-49136]"
    }, {
      "left" : "v = (V)Utils.parseT(item, Integer.class);",
      "right" : "v = (V)Utils.parseT(item, Integer.class);",
      "info" : "ExpressionStatement[49157-49198]:ExpressionStatement[49157-49198]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[49233-49247]:ExpressionStatement[49233-49247]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[49274-49554]:IfStatement[49274-49554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49289-49554]:Block[49289-49554]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[49307-49346]:ExpressionStatement[49307-49346]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[49363-49421]:ExpressionStatement[49363-49421]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[49438-49540]:IfStatement[49438-49540]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[49453-49540]:ExpressionStatement[49453-49540]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[49567-49853]:IfStatement[49567-49853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49584-49853]:Block[49584-49853]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[49602-49652]:ExpressionStatement[49602-49652]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[49669-49706]:ExpressionStatement[49669-49706]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[49723-49839]:IfStatement[49723-49839]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[49738-49839]:ExpressionStatement[49738-49839]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[49867-49917]:VariableDeclarationStatement[49867-49917]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[49930-49977]:VariableDeclarationStatement[49930-49977]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[49990-50025]:VariableDeclarationStatement[49990-50025]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[50038-50231]:IfStatement[50038-50231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50071-50231]:Block[50071-50231]"
    }, {
      "left" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[50089-50187]:ExpressionStatement[50089-50187]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50204-50217]:ReturnStatement[50204-50217]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[50245-50295]:IfStatement[50245-50295]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[50260-50295]:ExpressionStatement[50260-50295]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[50309-50331]:ExpressionStatement[50309-50331]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[50344-50365]:ExpressionStatement[50344-50365]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50378-50430]:IfStatement[50378-50430]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[50393-50430]:ExpressionStatement[50393-50430]"
    }, {
      "left" : "for (Integer item : sorted)",
      "right" : "for (Integer item : sorted)",
      "info" : "EnhancedForStatement[50443-50577]:EnhancedForStatement[50443-50577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50471-50577]:Block[50471-50577]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[50489-50527]:VariableDeclarationStatement[50489-50527]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[50544-50563]:ExpressionStatement[50544-50563]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50590-50874]:IfStatement[50590-50874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50605-50874]:Block[50605-50874]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[50623-50659]:ExpressionStatement[50623-50659]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[50676-50725]:ExpressionStatement[50676-50725]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[50742-50860]:IfStatement[50742-50860]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[50757-50860]:ExpressionStatement[50757-50860]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[50888-50916]:ExpressionStatement[50888-50916]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[50929-50956]:ExpressionStatement[50929-50956]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50969-51027]:IfStatement[50969-51027]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[50984-51027]:ExpressionStatement[50984-51027]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[51040-51417]:ForStatement[51040-51417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51080-51417]:Block[51080-51417]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "Integer item = sorted[i];",
      "info" : "VariableDeclarationStatement[51098-51123]:VariableDeclarationStatement[51098-51123]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[51140-51178]:VariableDeclarationStatement[51140-51178]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[51195-51219]:ExpressionStatement[51195-51219]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[51236-51403]:IfStatement[51236-51403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51255-51403]:Block[51255-51403]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[51277-51351]:ExpressionStatement[51277-51351]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51372-51385]:ReturnStatement[51372-51385]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[51430-51728]:IfStatement[51430-51728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51445-51728]:Block[51445-51728]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[51463-51505]:ExpressionStatement[51463-51505]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[51522-51589]:ExpressionStatement[51522-51589]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[51606-51714]:IfStatement[51606-51714]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[51621-51714]:ExpressionStatement[51621-51714]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[51742-51911]:IfStatement[51742-51911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51762-51911]:Block[51762-51911]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[51780-51833]:ExpressionStatement[51780-51833]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[51850-51867]:ExpressionStatement[51850-51867]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51884-51897]:ReturnStatement[51884-51897]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[51924-52089]:IfStatement[51924-52089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51943-52089]:Block[51943-52089]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[51961-52011]:ExpressionStatement[51961-52011]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[52028-52045]:ExpressionStatement[52028-52045]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52062-52075]:ReturnStatement[52062-52075]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[52109-52123]:ExpressionStatement[52109-52123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52132-55854]:Block[52132-55854]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[52156-52174]:ExpressionStatement[52156-52174]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[52187-52204]:ExpressionStatement[52187-52204]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[52217-52242]:ExpressionStatement[52217-52242]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[52255-52279]:ExpressionStatement[52255-52279]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[52292-52360]:IfStatement[52292-52360]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[52309-52360]:ExpressionStatement[52309-52360]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[52373-52428]:IfStatement[52373-52428]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[52388-52428]:ExpressionStatement[52388-52428]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[52441-53010]:ForStatement[52441-53010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52481-53010]:Block[52481-53010]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "Integer item = sorted[i];",
      "info" : "VariableDeclarationStatement[52499-52524]:VariableDeclarationStatement[52499-52524]"
    }, {
      "left" : "K k = null;",
      "right" : "K k = null;",
      "info" : "VariableDeclarationStatement[52541-52552]:VariableDeclarationStatement[52541-52552]"
    }, {
      "left" : "V v = null;",
      "right" : "V v = null;",
      "info" : "VariableDeclarationStatement[52569-52580]:VariableDeclarationStatement[52569-52580]"
    }, {
      "left" : "if (keyType.isAssignableFrom(Integer.class))",
      "right" : "if (keyType.isAssignableFrom(Integer.class))",
      "info" : "IfStatement[52597-52965]:IfStatement[52597-52965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52642-52778]:Block[52642-52778]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[52664-52699]:ExpressionStatement[52664-52699]"
    }, {
      "left" : "v = (V)Utils.parseT(item, String.class);",
      "right" : "v = (V)Utils.parseT(item, String.class);",
      "info" : "ExpressionStatement[52720-52760]:ExpressionStatement[52720-52760]"
    }, {
      "left" : "if (keyType.isAssignableFrom(String.class))",
      "right" : "if (keyType.isAssignableFrom(String.class))",
      "info" : "IfStatement[52784-52965]:IfStatement[52784-52965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52828-52965]:Block[52828-52965]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "k = (K)Utils.parseT(item, keyType);",
      "info" : "ExpressionStatement[52850-52885]:ExpressionStatement[52850-52885]"
    }, {
      "left" : "v = (V)Utils.parseT(item, Integer.class);",
      "right" : "v = (V)Utils.parseT(item, Integer.class);",
      "info" : "ExpressionStatement[52906-52947]:ExpressionStatement[52906-52947]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[52982-52996]:ExpressionStatement[52982-52996]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[53023-53303]:IfStatement[53023-53303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53038-53303]:Block[53038-53303]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[53056-53095]:ExpressionStatement[53056-53095]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[53112-53170]:ExpressionStatement[53112-53170]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[53187-53289]:IfStatement[53187-53289]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[53202-53289]:ExpressionStatement[53202-53289]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[53316-53602]:IfStatement[53316-53602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53333-53602]:Block[53333-53602]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[53351-53401]:ExpressionStatement[53351-53401]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[53418-53455]:ExpressionStatement[53418-53455]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[53472-53588]:IfStatement[53472-53588]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[53487-53588]:ExpressionStatement[53487-53588]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[53616-53666]:VariableDeclarationStatement[53616-53666]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[53679-53726]:VariableDeclarationStatement[53679-53726]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[53739-53774]:VariableDeclarationStatement[53739-53774]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[53787-53980]:IfStatement[53787-53980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53820-53980]:Block[53820-53980]"
    }, {
      "left" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[53838-53936]:ExpressionStatement[53838-53936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53953-53966]:ReturnStatement[53953-53966]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[53994-54044]:IfStatement[53994-54044]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[54009-54044]:ExpressionStatement[54009-54044]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[54058-54080]:ExpressionStatement[54058-54080]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[54093-54114]:ExpressionStatement[54093-54114]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[54127-54179]:IfStatement[54127-54179]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[54142-54179]:ExpressionStatement[54142-54179]"
    }, {
      "left" : "for (Integer item : sorted)",
      "right" : "for (Integer item : sorted)",
      "info" : "EnhancedForStatement[54192-54326]:EnhancedForStatement[54192-54326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54220-54326]:Block[54220-54326]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[54238-54276]:VariableDeclarationStatement[54238-54276]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[54293-54312]:ExpressionStatement[54293-54312]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[54339-54623]:IfStatement[54339-54623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54354-54623]:Block[54354-54623]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[54372-54408]:ExpressionStatement[54372-54408]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[54425-54474]:ExpressionStatement[54425-54474]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[54491-54609]:IfStatement[54491-54609]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[54506-54609]:ExpressionStatement[54506-54609]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[54637-54665]:ExpressionStatement[54637-54665]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[54678-54705]:ExpressionStatement[54678-54705]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[54718-54776]:IfStatement[54718-54776]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[54733-54776]:ExpressionStatement[54733-54776]"
    }, {
      "left" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[54789-55171]:ForStatement[54789-55171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54834-55171]:Block[54834-55171]"
    }, {
      "left" : "Integer item = sorted[i];",
      "right" : "Integer item = sorted[i];",
      "info" : "VariableDeclarationStatement[54852-54877]:VariableDeclarationStatement[54852-54877]"
    }, {
      "left" : "K k = (K) Utils.parseT(item, keyType);",
      "right" : "K k = (K) Utils.parseT(item, keyType);",
      "info" : "VariableDeclarationStatement[54894-54932]:VariableDeclarationStatement[54894-54932]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[54949-54973]:ExpressionStatement[54949-54973]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[54990-55157]:IfStatement[54990-55157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55009-55157]:Block[55009-55157]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[55031-55105]:ExpressionStatement[55031-55105]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55126-55139]:ReturnStatement[55126-55139]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[55184-55482]:IfStatement[55184-55482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55199-55482]:Block[55199-55482]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[55217-55259]:ExpressionStatement[55217-55259]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[55276-55343]:ExpressionStatement[55276-55343]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[55360-55468]:IfStatement[55360-55468]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[55375-55468]:ExpressionStatement[55375-55468]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[55496-55665]:IfStatement[55496-55665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55516-55665]:Block[55516-55665]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[55534-55587]:ExpressionStatement[55534-55587]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[55604-55621]:ExpressionStatement[55604-55621]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55638-55651]:ReturnStatement[55638-55651]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[55678-55843]:IfStatement[55678-55843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55697-55843]:Block[55697-55843]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[55715-55765]:ExpressionStatement[55715-55765]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(map);",
      "info" : "ExpressionStatement[55782-55799]:ExpressionStatement[55782-55799]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55816-55829]:ReturnStatement[55816-55829]"
    }, {
      "left" : "if (testResults[testIndex] == null)",
      "right" : "if (testResults[testIndex] == null)",
      "info" : "IfStatement[55864-55937]:IfStatement[55864-55937]"
    }, {
      "left" : "testResults[testIndex] = new long[6];",
      "right" : "testResults[testIndex] = new long[6];",
      "info" : "ExpressionStatement[55900-55937]:ExpressionStatement[55900-55937]"
    }, {
      "left" : "testResults[testIndex][0] += addTime / unsortedCount;",
      "right" : "testResults[testIndex][0] += addTime / unsortedCount;",
      "info" : "ExpressionStatement[55946-55999]:ExpressionStatement[55946-55999]"
    }, {
      "left" : "testResults[testIndex][1] += removeTime / unsortedCount;",
      "right" : "testResults[testIndex][1] += removeTime / unsortedCount;",
      "info" : "ExpressionStatement[56008-56064]:ExpressionStatement[56008-56064]"
    }, {
      "left" : "testResults[testIndex][2] += addSortedTime / sortedCount;",
      "right" : "testResults[testIndex][2] += addSortedTime / sortedCount;",
      "info" : "ExpressionStatement[56073-56130]:ExpressionStatement[56073-56130]"
    }, {
      "left" : "testResults[testIndex][3] += removeSortedTime / sortedCount;",
      "right" : "testResults[testIndex][3] += removeSortedTime / sortedCount;",
      "info" : "ExpressionStatement[56139-56199]:ExpressionStatement[56139-56199]"
    }, {
      "left" : "testResults[testIndex][4] += lookupTime / (unsortedCount + sortedCount);",
      "right" : "testResults[testIndex][4] += lookupTime / (unsortedCount + sortedCount);",
      "info" : "ExpressionStatement[56208-56280]:ExpressionStatement[56208-56280]"
    }, {
      "left" : "testResults[testIndex++][5] += memory / (unsortedCount + sortedCount);",
      "right" : "testResults[testIndex++][5] += memory / (unsortedCount + sortedCount);",
      "info" : "ExpressionStatement[56289-56359]:ExpressionStatement[56289-56359]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[56369-56405]:IfStatement[56369-56405]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[56384-56405]:ExpressionStatement[56384-56405]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56415-56427]:ReturnStatement[56415-56427]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56439-56446]:Modifier[56439-56446]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56447-56453]:Modifier[56447-56453]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[56454-56459]:Modifier[56454-56459]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[56460-56466]:SimpleType[56460-56466]"
    }, {
      "left" : "getTestResults",
      "right" : "getTestResults",
      "info" : "SimpleName[56467-56481]:SimpleName[56467-56481]"
    }, {
      "left" : "int number",
      "right" : "int number",
      "info" : "SingleVariableDeclaration[56482-56492]:SingleVariableDeclaration[56482-56492]"
    }, {
      "left" : "String[] names",
      "right" : "String[] names",
      "info" : "SingleVariableDeclaration[56494-56508]:SingleVariableDeclaration[56494-56508]"
    }, {
      "left" : "long[][] results",
      "right" : "long[][] results",
      "info" : "SingleVariableDeclaration[56510-56526]:SingleVariableDeclaration[56510-56526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56528-60982]:Block[56528-60982]"
    }, {
      "left" : "StringBuilder resultsBuilder = new StringBuilder();",
      "right" : "StringBuilder resultsBuilder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[56538-56589]:VariableDeclarationStatement[56538-56589]"
    }, {
      "left" : "String format = \"%-32s %-10s %-15s %-15s %-20s %-15s %-15s\\n\";",
      "right" : "String format = \"%-32s %-10s %-15s %-15s %-20s %-15s %-15s\\n\";",
      "info" : "VariableDeclarationStatement[56598-56660]:VariableDeclarationStatement[56598-56660]"
    }, {
      "left" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "right" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "info" : "VariableDeclarationStatement[56669-56732]:VariableDeclarationStatement[56669-56732]"
    }, {
      "left" : "formatter.format(format, \"Data Structure\", \"Add time\", \"Remove time\", \"Sorted add time\", \"Sorted remove time\", \"Lookup time\", \"Size\");",
      "right" : "formatter.format(format, \"Data Structure\", \"Add time\", \"Remove time\", \"Sorted add time\", \"Sorted remove time\", \"Lookup time\", \"Size\");",
      "info" : "ExpressionStatement[56741-56875]:ExpressionStatement[56741-56875]"
    }, {
      "left" : "double KB = 1000;",
      "right" : "double KB = 1000;",
      "info" : "VariableDeclarationStatement[56885-56902]:VariableDeclarationStatement[56885-56902]"
    }, {
      "left" : "double MB = 1000 * KB;",
      "right" : "double MB = 1000 * KB;",
      "info" : "VariableDeclarationStatement[56911-56933]:VariableDeclarationStatement[56911-56933]"
    }, {
      "left" : "double MILLIS = 1000000;",
      "right" : "double MILLIS = 1000000;",
      "info" : "VariableDeclarationStatement[56943-56967]:VariableDeclarationStatement[56943-56967]"
    }, {
      "left" : "double SECOND = 1000;",
      "right" : "double SECOND = 1000;",
      "info" : "VariableDeclarationStatement[56976-56997]:VariableDeclarationStatement[56976-56997]"
    }, {
      "left" : "double MINUTES = 60 * SECOND;",
      "right" : "double MINUTES = 60 * SECOND;",
      "info" : "VariableDeclarationStatement[57006-57035]:VariableDeclarationStatement[57006-57035]"
    }, {
      "left" : "for (int i=0; i<TESTS; i++)",
      "right" : "for (int i=0; i<TESTS; i++)",
      "info" : "ForStatement[57045-60906]:ForStatement[57045-60906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57073-60906]:Block[57073-60906]"
    }, {
      "left" : "String name = names[i];",
      "right" : "String name = names[i];",
      "info" : "VariableDeclarationStatement[57087-57110]:VariableDeclarationStatement[57087-57110]"
    }, {
      "left" : "long[] result = results[i];",
      "right" : "long[] result = results[i];",
      "info" : "VariableDeclarationStatement[57123-57150]:VariableDeclarationStatement[57123-57150]"
    }, {
      "left" : "if (name != null && result != null)",
      "right" : "if (name != null && result != null)",
      "info" : "IfStatement[57163-60896]:IfStatement[57163-60896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57199-60896]:Block[57199-60896]"
    }, {
      "left" : "double addTime = result[0] / MILLIS;",
      "right" : "double addTime = result[0] / MILLIS;",
      "info" : "VariableDeclarationStatement[57217-57253]:VariableDeclarationStatement[57217-57253]"
    }, {
      "left" : "addTime /= number;",
      "right" : "addTime /= number;",
      "info" : "ExpressionStatement[57270-57288]:ExpressionStatement[57270-57288]"
    }, {
      "left" : "String addTimeString = null;",
      "right" : "String addTimeString = null;",
      "info" : "VariableDeclarationStatement[57305-57333]:VariableDeclarationStatement[57305-57333]"
    }, {
      "left" : "if (addTime > MINUTES)",
      "right" : "if (addTime > MINUTES)",
      "info" : "IfStatement[57350-57745]:IfStatement[57350-57745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57373-57499]:Block[57373-57499]"
    }, {
      "left" : "addTime /= MINUTES;",
      "right" : "addTime /= MINUTES;",
      "info" : "ExpressionStatement[57395-57414]:ExpressionStatement[57395-57414]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" m\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" m\";",
      "info" : "ExpressionStatement[57435-57481]:ExpressionStatement[57435-57481]"
    }, {
      "left" : "if (addTime > SECOND)",
      "right" : "if (addTime > SECOND)",
      "info" : "IfStatement[57505-57745]:IfStatement[57505-57745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57527-57652]:Block[57527-57652]"
    }, {
      "left" : "addTime /= SECOND;",
      "right" : "addTime /= SECOND;",
      "info" : "ExpressionStatement[57549-57567]:ExpressionStatement[57549-57567]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" s\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" s\";",
      "info" : "ExpressionStatement[57588-57634]:ExpressionStatement[57588-57634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57658-57745]:Block[57658-57745]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" ms\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" ms\";",
      "info" : "ExpressionStatement[57680-57727]:ExpressionStatement[57680-57727]"
    }, {
      "left" : "double removeTime = result[1] / MILLIS;",
      "right" : "double removeTime = result[1] / MILLIS;",
      "info" : "VariableDeclarationStatement[57763-57802]:VariableDeclarationStatement[57763-57802]"
    }, {
      "left" : "removeTime /= number;",
      "right" : "removeTime /= number;",
      "info" : "ExpressionStatement[57819-57840]:ExpressionStatement[57819-57840]"
    }, {
      "left" : "String removeTimeString = null;",
      "right" : "String removeTimeString = null;",
      "info" : "VariableDeclarationStatement[57857-57888]:VariableDeclarationStatement[57857-57888]"
    }, {
      "left" : "if (removeTime > MINUTES)",
      "right" : "if (removeTime > MINUTES)",
      "info" : "IfStatement[57905-58330]:IfStatement[57905-58330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57931-58066]:Block[57931-58066]"
    }, {
      "left" : "removeTime /= MINUTES;",
      "right" : "removeTime /= MINUTES;",
      "info" : "ExpressionStatement[57953-57975]:ExpressionStatement[57953-57975]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" m\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" m\";",
      "info" : "ExpressionStatement[57996-58048]:ExpressionStatement[57996-58048]"
    }, {
      "left" : "if (removeTime > SECOND)",
      "right" : "if (removeTime > SECOND)",
      "info" : "IfStatement[58072-58330]:IfStatement[58072-58330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58097-58231]:Block[58097-58231]"
    }, {
      "left" : "removeTime /= SECOND;",
      "right" : "removeTime /= SECOND;",
      "info" : "ExpressionStatement[58119-58140]:ExpressionStatement[58119-58140]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" s\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" s\";",
      "info" : "ExpressionStatement[58161-58213]:ExpressionStatement[58161-58213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58237-58330]:Block[58237-58330]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" ms\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" ms\";",
      "info" : "ExpressionStatement[58259-58312]:ExpressionStatement[58259-58312]"
    }, {
      "left" : "double addSortedTime = result[2] / MILLIS;",
      "right" : "double addSortedTime = result[2] / MILLIS;",
      "info" : "VariableDeclarationStatement[58374-58416]:VariableDeclarationStatement[58374-58416]"
    }, {
      "left" : "addSortedTime /= number;",
      "right" : "addSortedTime /= number;",
      "info" : "ExpressionStatement[58433-58457]:ExpressionStatement[58433-58457]"
    }, {
      "left" : "String sortedAddTimeString = null;",
      "right" : "String sortedAddTimeString = null;",
      "info" : "VariableDeclarationStatement[58474-58508]:VariableDeclarationStatement[58474-58508]"
    }, {
      "left" : "if (addSortedTime > MINUTES)",
      "right" : "if (addSortedTime > MINUTES)",
      "info" : "IfStatement[58525-58980]:IfStatement[58525-58980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58554-58698]:Block[58554-58698]"
    }, {
      "left" : "addSortedTime /= MINUTES;",
      "right" : "addSortedTime /= MINUTES;",
      "info" : "ExpressionStatement[58576-58601]:ExpressionStatement[58576-58601]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" m\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" m\";",
      "info" : "ExpressionStatement[58622-58680]:ExpressionStatement[58622-58680]"
    }, {
      "left" : "if (addSortedTime > SECOND)",
      "right" : "if (addSortedTime > SECOND)",
      "info" : "IfStatement[58704-58980]:IfStatement[58704-58980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58732-58875]:Block[58732-58875]"
    }, {
      "left" : "addSortedTime /= SECOND;",
      "right" : "addSortedTime /= SECOND;",
      "info" : "ExpressionStatement[58754-58778]:ExpressionStatement[58754-58778]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" s\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" s\";",
      "info" : "ExpressionStatement[58799-58857]:ExpressionStatement[58799-58857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58881-58980]:Block[58881-58980]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" ms\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" ms\";",
      "info" : "ExpressionStatement[58903-58962]:ExpressionStatement[58903-58962]"
    }, {
      "left" : "double removeSortedTime = result[3] / MILLIS;",
      "right" : "double removeSortedTime = result[3] / MILLIS;",
      "info" : "VariableDeclarationStatement[58998-59043]:VariableDeclarationStatement[58998-59043]"
    }, {
      "left" : "removeSortedTime /= number;",
      "right" : "removeSortedTime /= number;",
      "info" : "ExpressionStatement[59060-59087]:ExpressionStatement[59060-59087]"
    }, {
      "left" : "String sortedRemoveTimeString = null;",
      "right" : "String sortedRemoveTimeString = null;",
      "info" : "VariableDeclarationStatement[59104-59141]:VariableDeclarationStatement[59104-59141]"
    }, {
      "left" : "if (removeSortedTime > MINUTES)",
      "right" : "if (removeSortedTime > MINUTES)",
      "info" : "IfStatement[59158-59643]:IfStatement[59158-59643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59190-59343]:Block[59190-59343]"
    }, {
      "left" : "removeSortedTime /= MINUTES;",
      "right" : "removeSortedTime /= MINUTES;",
      "info" : "ExpressionStatement[59212-59240]:ExpressionStatement[59212-59240]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" m\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" m\";",
      "info" : "ExpressionStatement[59261-59325]:ExpressionStatement[59261-59325]"
    }, {
      "left" : "if (removeSortedTime > SECOND)",
      "right" : "if (removeSortedTime > SECOND)",
      "info" : "IfStatement[59349-59643]:IfStatement[59349-59643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59380-59532]:Block[59380-59532]"
    }, {
      "left" : "removeSortedTime /= SECOND;",
      "right" : "removeSortedTime /= SECOND;",
      "info" : "ExpressionStatement[59402-59429]:ExpressionStatement[59402-59429]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" s\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" s\";",
      "info" : "ExpressionStatement[59450-59514]:ExpressionStatement[59450-59514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59538-59643]:Block[59538-59643]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" ms\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" ms\";",
      "info" : "ExpressionStatement[59560-59625]:ExpressionStatement[59560-59625]"
    }, {
      "left" : "double lookupTime = result[4] / MILLIS;",
      "right" : "double lookupTime = result[4] / MILLIS;",
      "info" : "VariableDeclarationStatement[59661-59700]:VariableDeclarationStatement[59661-59700]"
    }, {
      "left" : "lookupTime /= number;",
      "right" : "lookupTime /= number;",
      "info" : "ExpressionStatement[59717-59738]:ExpressionStatement[59717-59738]"
    }, {
      "left" : "String lookupTimeString = null;",
      "right" : "String lookupTimeString = null;",
      "info" : "VariableDeclarationStatement[59755-59786]:VariableDeclarationStatement[59755-59786]"
    }, {
      "left" : "if (lookupTime > MINUTES)",
      "right" : "if (lookupTime > MINUTES)",
      "info" : "IfStatement[59803-60228]:IfStatement[59803-60228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59829-59964]:Block[59829-59964]"
    }, {
      "left" : "lookupTime /= MINUTES;",
      "right" : "lookupTime /= MINUTES;",
      "info" : "ExpressionStatement[59851-59873]:ExpressionStatement[59851-59873]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" m\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" m\";",
      "info" : "ExpressionStatement[59894-59946]:ExpressionStatement[59894-59946]"
    }, {
      "left" : "if (lookupTime > SECOND)",
      "right" : "if (lookupTime > SECOND)",
      "info" : "IfStatement[59970-60228]:IfStatement[59970-60228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59995-60129]:Block[59995-60129]"
    }, {
      "left" : "lookupTime /= SECOND;",
      "right" : "lookupTime /= SECOND;",
      "info" : "ExpressionStatement[60017-60038]:ExpressionStatement[60017-60038]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" s\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" s\";",
      "info" : "ExpressionStatement[60059-60111]:ExpressionStatement[60059-60111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60135-60228]:Block[60135-60228]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" ms\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" ms\";",
      "info" : "ExpressionStatement[60157-60210]:ExpressionStatement[60157-60210]"
    }, {
      "left" : "double size = result[5];",
      "right" : "double size = result[5];",
      "info" : "VariableDeclarationStatement[60246-60270]:VariableDeclarationStatement[60246-60270]"
    }, {
      "left" : "size /= number;",
      "right" : "size /= number;",
      "info" : "ExpressionStatement[60287-60302]:ExpressionStatement[60287-60302]"
    }, {
      "left" : "String sizeString = null;",
      "right" : "String sizeString = null;",
      "info" : "VariableDeclarationStatement[60319-60344]:VariableDeclarationStatement[60319-60344]"
    }, {
      "left" : "if (size > MB)",
      "right" : "if (size > MB)",
      "info" : "IfStatement[60361-60725]:IfStatement[60361-60725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60376-60495]:Block[60376-60495]"
    }, {
      "left" : "size = size / MB;",
      "right" : "size = size / MB;",
      "info" : "ExpressionStatement[60398-60415]:ExpressionStatement[60398-60415]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" MB\";",
      "right" : "sizeString = FORMAT.format(size) + \" MB\";",
      "info" : "ExpressionStatement[60436-60477]:ExpressionStatement[60436-60477]"
    }, {
      "left" : "if (size > KB)",
      "right" : "if (size > KB)",
      "info" : "IfStatement[60501-60725]:IfStatement[60501-60725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60516-60635]:Block[60516-60635]"
    }, {
      "left" : "size = size / KB;",
      "right" : "size = size / KB;",
      "info" : "ExpressionStatement[60538-60555]:ExpressionStatement[60538-60555]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" KB\";",
      "right" : "sizeString = FORMAT.format(size) + \" KB\";",
      "info" : "ExpressionStatement[60576-60617]:ExpressionStatement[60576-60617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60641-60725]:Block[60641-60725]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" Bytes\";",
      "right" : "sizeString = FORMAT.format(size) + \" Bytes\";",
      "info" : "ExpressionStatement[60663-60707]:ExpressionStatement[60663-60707]"
    }, {
      "left" : "formatter.format(format, name, addTimeString, removeTimeString, sortedAddTimeString, sortedRemoveTimeString, lookupTimeString, sizeString);",
      "right" : "formatter.format(format, name, addTimeString, removeTimeString, sortedAddTimeString, sortedRemoveTimeString, lookupTimeString, sizeString);",
      "info" : "ExpressionStatement[60743-60882]:ExpressionStatement[60743-60882]"
    }, {
      "left" : "formatter.close();",
      "right" : "formatter.close();",
      "info" : "ExpressionStatement[60915-60933]:ExpressionStatement[60915-60933]"
    }, {
      "left" : "return resultsBuilder.toString();",
      "right" : "return resultsBuilder.toString();",
      "info" : "ReturnStatement[60943-60976]:ReturnStatement[60943-60976]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60988-60995]:Modifier[60988-60995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60996-61002]:Modifier[60996-61002]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[61003-61008]:Modifier[61003-61008]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[61009-61013]:PrimitiveType[61009-61013]"
    }, {
      "left" : "getMemoryUse",
      "right" : "getMemoryUse",
      "info" : "SimpleName[61014-61026]:SimpleName[61014-61026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61029-61261]:Block[61029-61261]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[61039-61058]:ExpressionStatement[61039-61058]"
    }, {
      "left" : "long totalMemory = Runtime.getRuntime().totalMemory();",
      "right" : "long totalMemory = Runtime.getRuntime().totalMemory();",
      "info" : "VariableDeclarationStatement[61067-61121]:VariableDeclarationStatement[61067-61121]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[61131-61150]:ExpressionStatement[61131-61150]"
    }, {
      "left" : "long freeMemory = Runtime.getRuntime().freeMemory();",
      "right" : "long freeMemory = Runtime.getRuntime().freeMemory();",
      "info" : "VariableDeclarationStatement[61159-61211]:VariableDeclarationStatement[61159-61211]"
    }, {
      "left" : "return (totalMemory - freeMemory);",
      "right" : "return (totalMemory - freeMemory);",
      "info" : "ReturnStatement[61221-61255]:ReturnStatement[61221-61255]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61267-61274]:Modifier[61267-61274]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61275-61281]:Modifier[61275-61281]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[61282-61287]:Modifier[61282-61287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61288-61292]:PrimitiveType[61288-61292]"
    }, {
      "left" : "putOutTheGarbage",
      "right" : "putOutTheGarbage",
      "info" : "SimpleName[61293-61309]:SimpleName[61293-61309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61312-61397]:Block[61312-61397]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[61322-61339]:ExpressionStatement[61322-61339]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[61348-61365]:ExpressionStatement[61348-61365]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[61374-61391]:ExpressionStatement[61374-61391]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61457-61464]:Modifier[61457-61464]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61465-61471]:Modifier[61465-61471]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[61472-61477]:Modifier[61472-61477]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61478-61482]:PrimitiveType[61478-61482]"
    }, {
      "left" : "collectGarbage",
      "right" : "collectGarbage",
      "info" : "SimpleName[61483-61497]:SimpleName[61483-61497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61500-61758]:Block[61500-61808]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[61510-61752]:TryStatement[61510-61802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61514-61674]:Block[61514-61724]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[61528-61540]:ExpressionStatement[61528-61540]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[61528-61540]:ExpressionStatement[61553-61565]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[61528-61540]:ExpressionStatement[61578-61590]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[61553-61583]:ExpressionStatement[61603-61633]"
    }, {
      "left" : "System.runFinalization();",
      "right" : "System.runFinalization();",
      "info" : "ExpressionStatement[61596-61621]:ExpressionStatement[61646-61671]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[61634-61664]:ExpressionStatement[61684-61714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61707-61752]:Block[61757-61802]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[61721-61742]:ExpressionStatement[61771-61792]"
    } ]
  },
  "interFileMappings" : { }
}