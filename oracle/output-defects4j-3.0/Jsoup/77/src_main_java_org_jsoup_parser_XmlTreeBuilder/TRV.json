{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ParseSettings defaultSettings()",
      "right" : "ParseSettings defaultSettings()",
      "info" : "MethodDeclaration[508-590]:MethodDeclaration[508-590]"
    }, {
      "left" : "Document parse(Reader input, String baseUri)",
      "right" : "Document parse(Reader input, String baseUri)",
      "info" : "MethodDeclaration[596-743]:MethodDeclaration[596-743]"
    }, {
      "left" : "Document parse(String input, String baseUri)",
      "right" : "Document parse(String input, String baseUri)",
      "info" : "MethodDeclaration[749-914]:MethodDeclaration[749-914]"
    }, {
      "left" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[920-1293]:MethodDeclaration[920-1293]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[1299-2142]:MethodDeclaration[1299-2142]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[2148-2234]:MethodDeclaration[2148-2234]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[2240-2824]:MethodDeclaration[2240-2824]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[2830-3708]:MethodDeclaration[2830-3708]"
    }, {
      "left" : "void insert(Token.Character token)",
      "right" : "void insert(Token.Character token)",
      "info" : "MethodDeclaration[3714-3881]:MethodDeclaration[3714-3881]"
    }, {
      "left" : "void insert(Token.Doctype d)",
      "right" : "void insert(Token.Doctype d)",
      "info" : "MethodDeclaration[3887-4147]:MethodDeclaration[3887-4147]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[4995-5251]:MethodDeclaration[5001-5257]"
    } ],
    "mappings" : [
 {
      "left" : "ParseSettings",
      "right" : "ParseSettings",
      "info" : "SimpleType[508-521]:SimpleType[508-521]"
    }, {
      "left" : "defaultSettings",
      "right" : "defaultSettings",
      "info" : "SimpleName[522-537]:SimpleName[522-537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[540-590]:Block[540-590]"
    }, {
      "left" : "return ParseSettings.preserveCase;",
      "right" : "return ParseSettings.preserveCase;",
      "info" : "ReturnStatement[550-584]:ReturnStatement[550-584]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[596-604]:SimpleType[596-604]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[605-610]:SimpleName[605-610]"
    }, {
      "left" : "Reader input",
      "right" : "Reader input",
      "info" : "SingleVariableDeclaration[611-623]:SingleVariableDeclaration[611-623]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[625-639]:SingleVariableDeclaration[625-639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[641-743]:Block[641-743]"
    }, {
      "left" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[651-737]:ReturnStatement[651-737]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[749-757]:SimpleType[749-757]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[758-763]:SimpleName[758-763]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[764-776]:SingleVariableDeclaration[764-776]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[778-792]:SingleVariableDeclaration[778-792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[794-914]:Block[794-914]"
    }, {
      "left" : "return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[804-908]:ReturnStatement[804-908]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[920-929]:MarkerAnnotation[920-929]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[934-943]:Modifier[934-943]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[944-948]:PrimitiveType[944-948]"
    }, {
      "left" : "initialiseParse",
      "right" : "initialiseParse",
      "info" : "SimpleName[949-964]:SimpleName[949-964]"
    }, {
      "left" : "Reader input",
      "right" : "Reader input",
      "info" : "SingleVariableDeclaration[965-977]:SingleVariableDeclaration[965-977]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[979-993]:SingleVariableDeclaration[979-993]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[995-1016]:SingleVariableDeclaration[995-1016]"
    }, {
      "left" : "ParseSettings settings",
      "right" : "ParseSettings settings",
      "info" : "SingleVariableDeclaration[1018-1040]:SingleVariableDeclaration[1018-1040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1042-1293]:Block[1042-1293]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors, settings);",
      "right" : "super.initialiseParse(input, baseUri, errors, settings);",
      "info" : "ExpressionStatement[1052-1108]:ExpressionStatement[1052-1108]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[1117-1132]:ExpressionStatement[1117-1132]"
    }, {
      "left" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "right" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "info" : "ExpressionStatement[1223-1287]:ExpressionStatement[1223-1287]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1299-1308]:MarkerAnnotation[1299-1308]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1313-1322]:Modifier[1313-1322]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1323-1330]:PrimitiveType[1323-1330]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1331-1338]:SimpleName[1331-1338]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[1339-1350]:SingleVariableDeclaration[1339-1350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1352-2142]:Block[1352-2142]"
    }, {
      "left" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "right" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "info" : "SwitchStatement[1426-2115]:SwitchStatement[1426-2115]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[1460-1474]:SwitchCase[1460-1474]"
    }, {
      "left" : "insert(token.asStartTag());",
      "right" : "insert(token.asStartTag());",
      "info" : "ExpressionStatement[1491-1518]:ExpressionStatement[1491-1518]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1535-1541]:BreakStatement[1535-1541]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[1554-1566]:SwitchCase[1554-1566]"
    }, {
      "left" : "popStackToClose(token.asEndTag());",
      "right" : "popStackToClose(token.asEndTag());",
      "info" : "ExpressionStatement[1583-1617]:ExpressionStatement[1583-1617]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1634-1640]:BreakStatement[1634-1640]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[1653-1666]:SwitchCase[1653-1666]"
    }, {
      "left" : "insert(token.asComment());",
      "right" : "insert(token.asComment());",
      "info" : "ExpressionStatement[1683-1709]:ExpressionStatement[1683-1709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1726-1732]:BreakStatement[1726-1732]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[1745-1760]:SwitchCase[1745-1760]"
    }, {
      "left" : "insert(token.asCharacter());",
      "right" : "insert(token.asCharacter());",
      "info" : "ExpressionStatement[1777-1805]:ExpressionStatement[1777-1805]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1822-1828]:BreakStatement[1822-1828]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[1841-1854]:SwitchCase[1841-1854]"
    }, {
      "left" : "insert(token.asDoctype());",
      "right" : "insert(token.asDoctype());",
      "info" : "ExpressionStatement[1871-1897]:ExpressionStatement[1871-1897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1914-1920]:BreakStatement[1914-1920]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[1933-1942]:SwitchCase[1933-1942]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2007-2013]:BreakStatement[2007-2013]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2026-2034]:SwitchCase[2026-2034]"
    }, {
      "left" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "right" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "info" : "ExpressionStatement[2051-2105]:ExpressionStatement[2051-2105]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2124-2136]:ReturnStatement[2124-2136]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2148-2155]:Modifier[2148-2155]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2156-2160]:PrimitiveType[2156-2160]"
    }, {
      "left" : "insertNode",
      "right" : "insertNode",
      "info" : "SimpleName[2161-2171]:SimpleName[2161-2171]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2172-2181]:SingleVariableDeclaration[2172-2181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2183-2234]:Block[2183-2234]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[2193-2228]:ExpressionStatement[2193-2228]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[2240-2247]:SimpleType[2240-2247]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[2248-2254]:SimpleName[2248-2254]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[2255-2278]:SingleVariableDeclaration[2255-2278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2280-2824]:Block[2280-2824]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[2290-2339]:VariableDeclarationStatement[2290-2339]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "right" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "info" : "VariableDeclarationStatement[2449-2539]:VariableDeclarationStatement[2449-2539]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[2548-2563]:ExpressionStatement[2548-2563]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[2572-2799]:IfStatement[2572-2799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2602-2755]:Block[2602-2755]"
    }, {
      "left" : "if (!tag.isKnownTag())",
      "right" : "if (!tag.isKnownTag())",
      "info" : "IfStatement[2616-2745]:IfStatement[2616-2745]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[2724-2745]:ExpressionStatement[2724-2745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2761-2799]:Block[2761-2799]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[2775-2789]:ExpressionStatement[2775-2789]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[2808-2818]:ReturnStatement[2808-2818]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2830-2834]:PrimitiveType[2830-2834]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[2835-2841]:SimpleName[2835-2841]"
    }, {
      "left" : "Token.Comment commentToken",
      "right" : "Token.Comment commentToken",
      "info" : "SingleVariableDeclaration[2842-2868]:SingleVariableDeclaration[2842-2868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2870-3708]:Block[2870-3708]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData());",
      "right" : "Comment comment = new Comment(commentToken.getData());",
      "info" : "VariableDeclarationStatement[2880-2934]:VariableDeclarationStatement[2880-2934]"
    }, {
      "left" : "Node insert = comment;",
      "right" : "Node insert = comment;",
      "info" : "VariableDeclarationStatement[2943-2965]:VariableDeclarationStatement[2943-2965]"
    }, {
      "left" : "if (commentToken.bogus)",
      "right" : "if (commentToken.bogus)",
      "info" : "IfStatement[2974-3674]:IfStatement[2974-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2998-3674]:Block[2998-3674]"
    }, {
      "left" : "String data = comment.getData();",
      "right" : "String data = comment.getData();",
      "info" : "VariableDeclarationStatement[3201-3233]:VariableDeclarationStatement[3201-3233]"
    }, {
      "left" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "right" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "info" : "IfStatement[3246-3664]:IfStatement[3246-3664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3319-3664]:Block[3319-3664]"
    }, {
      "left" : "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());",
      "right" : "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());",
      "info" : "VariableDeclarationStatement[3337-3442]:VariableDeclarationStatement[3337-3442]"
    }, {
      "left" : "Element el = doc.child(0);",
      "right" : "Element el = doc.child(0);",
      "info" : "VariableDeclarationStatement[3459-3485]:VariableDeclarationStatement[3459-3485]"
    }, {
      "left" : "insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));",
      "right" : "insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));",
      "info" : "ExpressionStatement[3502-3589]:ExpressionStatement[3502-3589]"
    }, {
      "left" : "insert.attributes().addAll(el.attributes());",
      "right" : "insert.attributes().addAll(el.attributes());",
      "info" : "ExpressionStatement[3606-3650]:ExpressionStatement[3606-3650]"
    }, {
      "left" : "insertNode(insert);",
      "right" : "insertNode(insert);",
      "info" : "ExpressionStatement[3683-3702]:ExpressionStatement[3683-3702]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3714-3718]:PrimitiveType[3714-3718]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[3719-3725]:SimpleName[3719-3725]"
    }, {
      "left" : "Token.Character token",
      "right" : "Token.Character token",
      "info" : "SingleVariableDeclaration[3726-3747]:SingleVariableDeclaration[3726-3747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3749-3881]:Block[3749-3881]"
    }, {
      "left" : "final String data = token.getData();",
      "right" : "final String data = token.getData();",
      "info" : "VariableDeclarationStatement[3759-3795]:VariableDeclarationStatement[3759-3795]"
    }, {
      "left" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
      "right" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
      "info" : "ExpressionStatement[3804-3875]:ExpressionStatement[3804-3875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3887-3891]:PrimitiveType[3887-3891]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[3892-3898]:SimpleName[3892-3898]"
    }, {
      "left" : "Token.Doctype d",
      "right" : "Token.Doctype d",
      "info" : "SingleVariableDeclaration[3899-3914]:SingleVariableDeclaration[3899-3914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3916-4147]:Block[3916-4147]"
    }, {
      "left" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "right" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "info" : "VariableDeclarationStatement[3926-4056]:VariableDeclarationStatement[3926-4056]"
    }, {
      "left" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
      "right" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
      "info" : "ExpressionStatement[4065-4108]:ExpressionStatement[4065-4108]"
    }, {
      "left" : "insertNode(doctypeNode);",
      "right" : "insertNode(doctypeNode);",
      "info" : "ExpressionStatement[4117-4141]:ExpressionStatement[4117-4141]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[4995-5005]:ParameterizedType[5001-5011]"
    }, {
      "left" : "parseFragment",
      "right" : "parseFragment",
      "info" : "SimpleName[5006-5019]:SimpleName[5012-5025]"
    }, {
      "left" : "String inputFragment",
      "right" : "String inputFragment",
      "info" : "SingleVariableDeclaration[5020-5040]:SingleVariableDeclaration[5026-5046]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[5042-5056]:SingleVariableDeclaration[5048-5062]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[5058-5079]:SingleVariableDeclaration[5064-5085]"
    }, {
      "left" : "ParseSettings settings",
      "right" : "ParseSettings settings",
      "info" : "SingleVariableDeclaration[5081-5103]:SingleVariableDeclaration[5087-5109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5105-5251]:Block[5111-5257]"
    }, {
      "left" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "right" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "info" : "ExpressionStatement[5115-5191]:ExpressionStatement[5121-5197]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[5200-5212]:ExpressionStatement[5206-5218]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[5221-5245]:ReturnStatement[5227-5251]"
    } ]
  },
  "interFileMappings" : { }
}