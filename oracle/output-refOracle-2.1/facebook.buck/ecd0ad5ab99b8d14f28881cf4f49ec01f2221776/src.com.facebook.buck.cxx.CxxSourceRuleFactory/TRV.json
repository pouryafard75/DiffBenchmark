{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Logger LOG = Logger.get(CxxSourceRuleFactory.class);",
      "right" : "private static final Logger LOG = Logger.get(CxxSourceRuleFactory.class);",
      "info" : "FieldDeclaration[2013-2086]:FieldDeclaration[2104-2177]"
    }, {
      "left" : "private static final String COMPILE_FLAVOR_PREFIX = \"compile-\";",
      "right" : "private static final String COMPILE_FLAVOR_PREFIX = \"compile-\";",
      "info" : "FieldDeclaration[2089-2152]:FieldDeclaration[2180-2243]"
    }, {
      "left" : "private static final String PREPROCESS_FLAVOR_PREFIX = \"preprocess-\";",
      "right" : "private static final String PREPROCESS_FLAVOR_PREFIX = \"preprocess-\";",
      "info" : "FieldDeclaration[2155-2224]:FieldDeclaration[2246-2315]"
    }, {
      "left" : "private final BuildRuleParams params;",
      "right" : "private final BuildRuleParams params;",
      "info" : "FieldDeclaration[2228-2265]:FieldDeclaration[2319-2356]"
    }, {
      "left" : "private final BuildRuleResolver resolver;",
      "right" : "private final BuildRuleResolver resolver;",
      "info" : "FieldDeclaration[2268-2309]:FieldDeclaration[2359-2400]"
    }, {
      "left" : "private final SourcePathResolver pathResolver;",
      "right" : "private final SourcePathResolver pathResolver;",
      "info" : "FieldDeclaration[2312-2358]:FieldDeclaration[2403-2449]"
    }, {
      "left" : "private final CxxPlatform cxxPlatform;",
      "right" : "private final CxxPlatform cxxPlatform;",
      "info" : "FieldDeclaration[2361-2399]:FieldDeclaration[2452-2490]"
    }, {
      "left" : "private final ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput;",
      "right" : "private final ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput;",
      "info" : "FieldDeclaration[2402-2473]:FieldDeclaration[2493-2564]"
    }, {
      "left" : "private final ImmutableList<String> compilerFlags;",
      "right" : "private final ImmutableList<String> compilerFlags;",
      "info" : "FieldDeclaration[2476-2526]:FieldDeclaration[2567-2617]"
    }, {
      "left" : "private final Supplier<ImmutableList<BuildRule>> preprocessDeps = Suppliers.memoize(\n      new Supplier<ImmutableList<BuildRule>>() {\n        @Override\n        public ImmutableList<BuildRule> get() {\n          ImmutableList.Builder<BuildRule> builder = ImmutableList.builder();\n\n          for (CxxPreprocessorInput input : cxxPreprocessorInput) {\n\n            // Depend on the rules that generate the sources and headers we're compiling.\n            builder.addAll(\n                pathResolver.filterBuildRuleInputs(\n                    ImmutableList.<SourcePath>builder()\n                        .addAll(input.getIncludes().getPrefixHeaders())\n                        .addAll(input.getIncludes().getNameToPathMap().values())\n                        .build()));\n\n            // Also add in extra deps from the preprocessor input, such as the symlink tree\n            // rules.\n            builder.addAll(\n                BuildRules.toBuildRulesFor(\n                    params.getBuildTarget(),\n                    resolver,\n                    input.getRules()));\n          }\n\n          return builder.build();\n        }\n      });",
      "right" : "private final Supplier<ImmutableList<BuildRule>> preprocessDeps = Suppliers.memoize(\n      new Supplier<ImmutableList<BuildRule>>() {\n        @Override\n        public ImmutableList<BuildRule> get() {\n          ImmutableList.Builder<BuildRule> builder = ImmutableList.builder();\n\n          for (CxxPreprocessorInput input : cxxPreprocessorInput) {\n\n            // Depend on the rules that generate the sources and headers we're compiling.\n            builder.addAll(\n                pathResolver.filterBuildRuleInputs(\n                    ImmutableList.<SourcePath>builder()\n                        .addAll(input.getIncludes().getPrefixHeaders())\n                        .addAll(input.getIncludes().getNameToPathMap().values())\n                        .build()));\n\n            // Also add in extra deps from the preprocessor input, such as the symlink tree\n            // rules.\n            builder.addAll(\n                BuildRules.toBuildRulesFor(\n                    params.getBuildTarget(),\n                    resolver,\n                    input.getRules()));\n          }\n\n          return builder.build();\n        }\n      });",
      "info" : "FieldDeclaration[2530-3661]:FieldDeclaration[2621-3752]"
    }, {
      "left" : "public ImmutableList<BuildRule> get()",
      "right" : "public ImmutableList<BuildRule> get()",
      "info" : "MethodDeclaration[2672-3651]:MethodDeclaration[2763-3742]"
    }, {
      "left" : "private final Supplier<ImmutableSet<Path>> includeRoots =\n      Suppliers.memoize(\n          new Supplier<ImmutableSet<Path>>() {\n            @Override\n            public ImmutableSet<Path> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_INCLUDE_ROOTS)\n                  .toSet();\n            }\n          });",
      "right" : "private final Supplier<ImmutableSet<Path>> includeRoots =\n      Suppliers.memoize(\n          new Supplier<ImmutableSet<Path>>() {\n            @Override\n            public ImmutableSet<Path> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_INCLUDE_ROOTS)\n                  .toSet();\n            }\n          });",
      "info" : "FieldDeclaration[3665-4059]:FieldDeclaration[3756-4150]"
    }, {
      "left" : "public ImmutableSet<Path> get()",
      "right" : "public ImmutableSet<Path> get()",
      "info" : "MethodDeclaration[3807-4045]:MethodDeclaration[3898-4136]"
    }, {
      "left" : "private final Supplier<ImmutableSet<Path>> systemIncludeRoots =\n      Suppliers.memoize(\n          new Supplier<ImmutableSet<Path>>() {\n            @Override\n            public ImmutableSet<Path> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_SYSTEM_INCLUDE_ROOTS)\n                  .toSet();\n            }\n          });",
      "right" : "private final Supplier<ImmutableSet<Path>> systemIncludeRoots =\n      Suppliers.memoize(\n          new Supplier<ImmutableSet<Path>>() {\n            @Override\n            public ImmutableSet<Path> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_SYSTEM_INCLUDE_ROOTS)\n                  .toSet();\n            }\n          });",
      "info" : "FieldDeclaration[4063-4470]:FieldDeclaration[4154-4561]"
    }, {
      "left" : "public ImmutableSet<Path> get()",
      "right" : "public ImmutableSet<Path> get()",
      "info" : "MethodDeclaration[4211-4456]:MethodDeclaration[4302-4547]"
    }, {
      "left" : "private final Supplier<ImmutableSet<Path>> frameworkRoots =\n      Suppliers.memoize(\n          new Supplier<ImmutableSet<Path>>() {\n            @Override\n            public ImmutableSet<Path> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_FRAMEWORK_ROOTS)\n                  .toSet();\n            }\n          });",
      "right" : "private final Supplier<ImmutableSet<Path>> frameworkRoots =\n      Suppliers.memoize(\n          new Supplier<ImmutableSet<Path>>() {\n            @Override\n            public ImmutableSet<Path> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_FRAMEWORK_ROOTS)\n                  .toSet();\n            }\n          });",
      "info" : "FieldDeclaration[4474-4872]:FieldDeclaration[4565-4963]"
    }, {
      "left" : "public ImmutableSet<Path> get()",
      "right" : "public ImmutableSet<Path> get()",
      "info" : "MethodDeclaration[4618-4858]:MethodDeclaration[4709-4949]"
    }, {
      "left" : "private final Supplier<ImmutableList<CxxHeaders>> includes =\n      Suppliers.memoize(\n          new Supplier<ImmutableList<CxxHeaders>>() {\n            @Override\n            public ImmutableList<CxxHeaders> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transform(CxxPreprocessorInput.GET_INCLUDES)\n                  .toList();\n            }\n          });",
      "right" : "private final Supplier<ImmutableList<CxxHeaders>> includes =\n      Suppliers.memoize(\n          new Supplier<ImmutableList<CxxHeaders>>() {\n            @Override\n            public ImmutableList<CxxHeaders> get() {\n              return FluentIterable.from(cxxPreprocessorInput)\n                  .transform(CxxPreprocessorInput.GET_INCLUDES)\n                  .toList();\n            }\n          });",
      "info" : "FieldDeclaration[4876-5274]:FieldDeclaration[4967-5365]"
    }, {
      "left" : "public ImmutableList<CxxHeaders> get()",
      "right" : "public ImmutableList<CxxHeaders> get()",
      "info" : "MethodDeclaration[5028-5260]:MethodDeclaration[5119-5351]"
    }, {
      "left" : "private final LoadingCache<CxxSource.Type, ImmutableList<String>> preprocessorFlags =\n      CacheBuilder.newBuilder()\n          .build(\n              new CacheLoader<CxxSource.Type, ImmutableList<String>>() {\n                @Override\n                public ImmutableList<String> load(@Nonnull CxxSource.Type type) {\n                  ImmutableList.Builder<String> builder = ImmutableList.builder();\n                  for (CxxPreprocessorInput input : cxxPreprocessorInput) {\n                    builder.addAll(input.getPreprocessorFlags().get(type));\n                  }\n                  return builder.build();\n                }\n              });",
      "right" : "private final LoadingCache<CxxSource.Type, ImmutableList<String>> preprocessorFlags =\n      CacheBuilder.newBuilder()\n          .build(\n              new CacheLoader<CxxSource.Type, ImmutableList<String>>() {\n                @Override\n                public ImmutableList<String> load(@Nonnull CxxSource.Type type) {\n                  ImmutableList.Builder<String> builder = ImmutableList.builder();\n                  for (CxxPreprocessorInput input : cxxPreprocessorInput) {\n                    builder.addAll(input.getPreprocessorFlags().get(type));\n                  }\n                  return builder.build();\n                }\n              });",
      "info" : "FieldDeclaration[5278-5927]:FieldDeclaration[5369-6018]"
    }, {
      "left" : "public ImmutableList<String> load(@Nonnull CxxSource.Type type)",
      "right" : "public ImmutableList<String> load(@Nonnull CxxSource.Type type)",
      "info" : "MethodDeclaration[5503-5909]:MethodDeclaration[5594-6000]"
    }, {
      "left" : "public CxxSourceRuleFactory(\n      BuildRuleParams params,\n      BuildRuleResolver resolver,\n      SourcePathResolver pathResolver,\n      CxxPlatform cxxPlatform,\n      ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput,\n      ImmutableList<String> compilerFlags)",
      "right" : "public CxxSourceRuleFactory(\n      BuildRuleParams params,\n      BuildRuleResolver resolver,\n      SourcePathResolver pathResolver,\n      CxxPlatform cxxPlatform,\n      ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput,\n      ImmutableList<String> compilerFlags)",
      "info" : "MethodDeclaration[5931-6451]:MethodDeclaration[6022-6542]"
    }, {
      "left" : "private String getPreprocessOutputName(CxxSource.Type type, String name)",
      "right" : "private String getPreprocessOutputName(CxxSource.Type type, String name)",
      "info" : "MethodDeclaration[6455-6762]:MethodDeclaration[6546-6853]"
    }, {
      "left" : "public BuildTarget createPreprocessBuildTarget(\n      String name,\n      CxxSource.Type type,\n      PicType pic)",
      "right" : "public BuildTarget createPreprocessBuildTarget(\n      String name,\n      CxxSource.Type type,\n      PicType pic)",
      "info" : "MethodDeclaration[6766-7485]:MethodDeclaration[6857-7576]"
    }, {
      "left" : "public static boolean isPreprocessFlavoredBuildTarget(BuildTarget target)",
      "right" : "public static boolean isPreprocessFlavoredBuildTarget(BuildTarget target)",
      "info" : "MethodDeclaration[7489-7771]:MethodDeclaration[7580-7862]"
    }, {
      "left" : "Path getPreprocessOutputPath(BuildTarget target, CxxSource.Type type, String name)",
      "right" : "Path getPreprocessOutputPath(BuildTarget target, CxxSource.Type type, String name)",
      "info" : "MethodDeclaration[7775-8085]:MethodDeclaration[7866-8176]"
    }, {
      "left" : "CxxPreprocessAndCompile requirePreprocessBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic)",
      "right" : "CxxPreprocessAndCompile requirePreprocessBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic)",
      "info" : "MethodDeclaration[10919-11455]:MethodDeclaration[9753-10289]"
    }, {
      "left" : "private String getCompileOutputName(String name)",
      "right" : "private String getCompileOutputName(String name)",
      "info" : "MethodDeclaration[11459-11610]:MethodDeclaration[10293-10444]"
    }, {
      "left" : "Path getCompileOutputPath(BuildTarget target, String name)",
      "right" : "Path getCompileOutputPath(BuildTarget target, String name)",
      "info" : "MethodDeclaration[11614-11891]:MethodDeclaration[10448-10725]"
    }, {
      "left" : "public BuildTarget createCompileBuildTarget(\n      String name,\n      PicType pic)",
      "right" : "public BuildTarget createCompileBuildTarget(\n      String name,\n      PicType pic)",
      "info" : "MethodDeclaration[11895-12568]:MethodDeclaration[10729-11402]"
    }, {
      "left" : "public static boolean isCompileFlavoredBuildTarget(BuildTarget target)",
      "right" : "public static boolean isCompileFlavoredBuildTarget(BuildTarget target)",
      "info" : "MethodDeclaration[12572-12848]:MethodDeclaration[11406-11682]"
    }, {
      "left" : "private Compiler getCompiler(CxxSource.Type type)",
      "right" : "private Compiler getCompiler(CxxSource.Type type)",
      "info" : "MethodDeclaration[12992-13158]:MethodDeclaration[11826-11992]"
    }, {
      "left" : "private ImmutableList<String> getPlatformCompileFlags(CxxSource.Type type)",
      "right" : "private ImmutableList<String> getPlatformCompileFlags(CxxSource.Type type)",
      "info" : "MethodDeclaration[13162-13974]:MethodDeclaration[11996-12808]"
    }, {
      "left" : "private ImmutableList<String> getRuleCompileFlags(CxxSource.Type type)",
      "right" : "private ImmutableList<String> getRuleCompileFlags(CxxSource.Type type)",
      "info" : "MethodDeclaration[13978-14455]:MethodDeclaration[12812-13289]"
    }, {
      "left" : "public CxxPreprocessAndCompile createCompileBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic)",
      "right" : "public CxxPreprocessAndCompile createCompileBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic)",
      "info" : "MethodDeclaration[14459-16652]:MethodDeclaration[13293-15486]"
    }, {
      "left" : "CxxPreprocessAndCompile requireCompileBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic)",
      "right" : "CxxPreprocessAndCompile requireCompileBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic)",
      "info" : "MethodDeclaration[16656-17165]:MethodDeclaration[15490-15999]"
    }, {
      "left" : "CxxPreprocessAndCompile requirePreprocessAndCompileBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic,\n      CxxPreprocessMode strategy)",
      "right" : "CxxPreprocessAndCompile requirePreprocessAndCompileBuildRule(\n      BuildRuleResolver resolver,\n      String name,\n      CxxSource source,\n      PicType pic,\n      CxxPreprocessMode strategy)",
      "info" : "MethodDeclaration[20051-20630]:MethodDeclaration[20450-21029]"
    }, {
      "left" : "private ImmutableMap<CxxPreprocessAndCompile, SourcePath> requirePreprocessAndCompileRules(\n      BuildRuleResolver resolver,\n      CxxPreprocessMode strategy,\n      ImmutableMap<String, CxxSource> sources,\n      PicType pic)",
      "right" : "private ImmutableMap<CxxPreprocessAndCompile, SourcePath> requirePreprocessAndCompileRules(\n      BuildRuleResolver resolver,\n      CxxPreprocessMode strategy,\n      ImmutableMap<String, CxxSource> sources,\n      PicType pic)",
      "info" : "MethodDeclaration[20634-23075]:MethodDeclaration[21033-23474]"
    }, {
      "left" : "public SourcePath apply(CxxPreprocessAndCompile input)",
      "right" : "public SourcePath apply(CxxPreprocessAndCompile input)",
      "info" : "MethodDeclaration[22901-23059]:MethodDeclaration[23300-23458]"
    }, {
      "left" : "public static ImmutableMap<CxxPreprocessAndCompile, SourcePath> requirePreprocessAndCompileRules(\n      BuildRuleParams params,\n      BuildRuleResolver resolver,\n      SourcePathResolver pathResolver,\n      CxxPlatform cxxPlatform,\n      ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput,\n      ImmutableList<String> compilerFlags,\n      CxxPreprocessMode strategy,\n      ImmutableMap<String, CxxSource> sources,\n      PicType pic)",
      "right" : "public static ImmutableMap<CxxPreprocessAndCompile, SourcePath> requirePreprocessAndCompileRules(\n      BuildRuleParams params,\n      BuildRuleResolver resolver,\n      SourcePathResolver pathResolver,\n      CxxPlatform cxxPlatform,\n      ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput,\n      ImmutableList<String> compilerFlags,\n      CxxPreprocessMode strategy,\n      ImmutableMap<String, CxxSource> sources,\n      PicType pic)",
      "info" : "MethodDeclaration[23079-23834]:MethodDeclaration[23478-24233]"
    }, {
      "left" : "enum : PicType",
      "right" : "enum : PicType",
      "info" : "EnumDeclaration[23838-24219]:EnumDeclaration[24237-24618]"
    }, {
      "left" : "private final ImmutableList<String> flags;",
      "right" : "private final ImmutableList<String> flags;",
      "info" : "FieldDeclaration[24013-24055]:FieldDeclaration[24412-24454]"
    }, {
      "left" : "PicType(String... flags)",
      "right" : "PicType(String... flags)",
      "info" : "MethodDeclaration[24061-24141]:MethodDeclaration[24460-24540]"
    }, {
      "left" : "public ImmutableList<String> getFlags()",
      "right" : "public ImmutableList<String> getFlags()",
      "info" : "MethodDeclaration[24147-24214]:MethodDeclaration[24546-24613]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2728-3651]:Block[2819-3742]"
    }, {
      "left" : "ImmutableList.Builder<BuildRule> builder = ImmutableList.builder();",
      "right" : "ImmutableList.Builder<BuildRule> builder = ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[2740-2807]:VariableDeclarationStatement[2831-2898]"
    }, {
      "left" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
      "right" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
      "info" : "EnhancedForStatement[2819-3606]:EnhancedForStatement[2910-3697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2875-3606]:Block[2966-3697]"
    }, {
      "left" : "builder.addAll(\n                pathResolver.filterBuildRuleInputs(\n                    ImmutableList.<SourcePath>builder()\n                        .addAll(input.getIncludes().getPrefixHeaders())\n                        .addAll(input.getIncludes().getNameToPathMap().values())\n                        .build()));",
      "right" : "builder.addAll(\n                pathResolver.filterBuildRuleInputs(\n                    ImmutableList.<SourcePath>builder()\n                        .addAll(input.getIncludes().getPrefixHeaders())\n                        .addAll(input.getIncludes().getNameToPathMap().values())\n                        .build()));",
      "info" : "ExpressionStatement[2980-3292]:ExpressionStatement[3071-3383]"
    }, {
      "left" : "builder.addAll(\n                BuildRules.toBuildRulesFor(\n                    params.getBuildTarget(),\n                    resolver,\n                    input.getRules()));",
      "right" : "builder.addAll(\n                BuildRules.toBuildRulesFor(\n                    params.getBuildTarget(),\n                    resolver,\n                    input.getRules()));",
      "info" : "ExpressionStatement[3420-3594]:ExpressionStatement[3511-3685]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[3618-3641]:ReturnStatement[3709-3732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3861-4045]:Block[3952-4136]"
    }, {
      "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_INCLUDE_ROOTS)\n                  .toSet();",
      "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_INCLUDE_ROOTS)\n                  .toSet();",
      "info" : "ReturnStatement[3877-4031]:ReturnStatement[3968-4122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4265-4456]:Block[4356-4547]"
    }, {
      "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_SYSTEM_INCLUDE_ROOTS)\n                  .toSet();",
      "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_SYSTEM_INCLUDE_ROOTS)\n                  .toSet();",
      "info" : "ReturnStatement[4281-4442]:ReturnStatement[4372-4533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4672-4858]:Block[4763-4949]"
    }, {
      "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_FRAMEWORK_ROOTS)\n                  .toSet();",
      "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transformAndConcat(CxxPreprocessorInput.GET_FRAMEWORK_ROOTS)\n                  .toSet();",
      "info" : "ReturnStatement[4688-4844]:ReturnStatement[4779-4935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5089-5260]:Block[5180-5351]"
    }, {
      "left" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transform(CxxPreprocessorInput.GET_INCLUDES)\n                  .toList();",
      "right" : "return FluentIterable.from(cxxPreprocessorInput)\n                  .transform(CxxPreprocessorInput.GET_INCLUDES)\n                  .toList();",
      "info" : "ReturnStatement[5105-5246]:ReturnStatement[5196-5337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5593-5909]:Block[5684-6000]"
    }, {
      "left" : "ImmutableList.Builder<String> builder = ImmutableList.builder();",
      "right" : "ImmutableList.Builder<String> builder = ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[5613-5677]:VariableDeclarationStatement[5704-5768]"
    }, {
      "left" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
      "right" : "for (CxxPreprocessorInput input : cxxPreprocessorInput)",
      "info" : "EnhancedForStatement[5696-5849]:EnhancedForStatement[5787-5940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5752-5849]:Block[5843-5940]"
    }, {
      "left" : "builder.addAll(input.getPreprocessorFlags().get(type));",
      "right" : "builder.addAll(input.getPreprocessorFlags().get(type));",
      "info" : "ExpressionStatement[5774-5829]:ExpressionStatement[5865-5920]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[5868-5891]:ReturnStatement[5959-5982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6222-6451]:Block[6313-6542]"
    }, {
      "left" : "this.params = params;",
      "right" : "this.params = params;",
      "info" : "ExpressionStatement[6228-6249]:ExpressionStatement[6319-6340]"
    }, {
      "left" : "this.resolver = resolver;",
      "right" : "this.resolver = resolver;",
      "info" : "ExpressionStatement[6254-6279]:ExpressionStatement[6345-6370]"
    }, {
      "left" : "this.pathResolver = pathResolver;",
      "right" : "this.pathResolver = pathResolver;",
      "info" : "ExpressionStatement[6284-6317]:ExpressionStatement[6375-6408]"
    }, {
      "left" : "this.cxxPlatform = cxxPlatform;",
      "right" : "this.cxxPlatform = cxxPlatform;",
      "info" : "ExpressionStatement[6322-6353]:ExpressionStatement[6413-6444]"
    }, {
      "left" : "this.cxxPreprocessorInput = cxxPreprocessorInput;",
      "right" : "this.cxxPreprocessorInput = cxxPreprocessorInput;",
      "info" : "ExpressionStatement[6358-6407]:ExpressionStatement[6449-6498]"
    }, {
      "left" : "this.compilerFlags = compilerFlags;",
      "right" : "this.compilerFlags = compilerFlags;",
      "info" : "ExpressionStatement[6412-6447]:ExpressionStatement[6503-6538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6607-6762]:Block[6698-6853]"
    }, {
      "left" : "CxxSource.Type outputType = CxxSourceTypes.getPreprocessorOutputType(type);",
      "right" : "CxxSource.Type outputType = CxxSourceTypes.getPreprocessorOutputType(type);",
      "info" : "VariableDeclarationStatement[6613-6688]:VariableDeclarationStatement[6704-6779]"
    }, {
      "left" : "return name + \".\" + Iterables.get(outputType.getExtensions(), 0);",
      "right" : "return name + \".\" + Iterables.get(outputType.getExtensions(), 0);",
      "info" : "ReturnStatement[6693-6758]:ReturnStatement[6784-6849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7031-7485]:Block[7122-7576]"
    }, {
      "left" : "String outputName = Flavor.replaceInvalidCharacters(getPreprocessOutputName(type, name));",
      "right" : "String outputName = Flavor.replaceInvalidCharacters(getPreprocessOutputName(type, name));",
      "info" : "VariableDeclarationStatement[7037-7126]:VariableDeclarationStatement[7128-7217]"
    }, {
      "left" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    PREPROCESS_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
      "right" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    PREPROCESS_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
      "info" : "ReturnStatement[7131-7481]:ReturnStatement[7222-7572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7563-7771]:Block[7654-7862]"
    }, {
      "left" : "Set<Flavor> flavors = target.getFlavors();",
      "right" : "Set<Flavor> flavors = target.getFlavors();",
      "info" : "VariableDeclarationStatement[7569-7611]:VariableDeclarationStatement[7660-7702]"
    }, {
      "left" : "for (Flavor flavor : flavors)",
      "right" : "for (Flavor flavor : flavors)",
      "info" : "EnhancedForStatement[7616-7749]:EnhancedForStatement[7707-7840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7646-7749]:Block[7737-7840]"
    }, {
      "left" : "if (flavor.getName().startsWith(PREPROCESS_FLAVOR_PREFIX))",
      "right" : "if (flavor.getName().startsWith(PREPROCESS_FLAVOR_PREFIX))",
      "info" : "IfStatement[7654-7743]:IfStatement[7745-7834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7713-7743]:Block[7804-7834]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7723-7735]:ReturnStatement[7814-7826]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7754-7767]:ReturnStatement[7845-7858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7985-8085]:Block[8076-8176]"
    }, {
      "left" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getPreprocessOutputName(type, name));",
      "right" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getPreprocessOutputName(type, name));",
      "info" : "ReturnStatement[7991-8081]:ReturnStatement[8082-8172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11088-11455]:Block[9922-10289]"
    }, {
      "left" : "BuildTarget target = createPreprocessBuildTarget(name, source.getType(), pic);",
      "right" : "BuildTarget target = createPreprocessBuildTarget(name, source.getType(), pic);",
      "info" : "VariableDeclarationStatement[11095-11173]:VariableDeclarationStatement[9929-10007]"
    }, {
      "left" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
      "right" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
      "info" : "VariableDeclarationStatement[11178-11308]:VariableDeclarationStatement[10012-10142]"
    }, {
      "left" : "if (existingRule.isPresent())",
      "right" : "if (existingRule.isPresent())",
      "info" : "IfStatement[11313-11383]:IfStatement[10147-10217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11343-11383]:Block[10177-10217]"
    }, {
      "left" : "return existingRule.get();",
      "right" : "return existingRule.get();",
      "info" : "ReturnStatement[11351-11377]:ReturnStatement[10185-10211]"
    }, {
      "left" : "return createPreprocessBuildRule(resolver, name, source, pic);",
      "right" : "return createPreprocessBuildRule(resolver, name, source, pic);",
      "info" : "ReturnStatement[11389-11451]:ReturnStatement[10223-10285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11581-11610]:Block[10415-10444]"
    }, {
      "left" : "return name + \".o\";",
      "right" : "return name + \".o\";",
      "info" : "ReturnStatement[11587-11606]:ReturnStatement[10421-10440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11800-11891]:Block[10634-10725]"
    }, {
      "left" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getCompileOutputName(name));",
      "right" : "return BuildTargets.getGenPath(target, \"%s\").resolve(getCompileOutputName(name));",
      "info" : "ReturnStatement[11806-11887]:ReturnStatement[10640-10721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12126-12568]:Block[10960-11402]"
    }, {
      "left" : "String outputName = Flavor.replaceInvalidCharacters(getCompileOutputName(name));",
      "right" : "String outputName = Flavor.replaceInvalidCharacters(getCompileOutputName(name));",
      "info" : "VariableDeclarationStatement[12132-12212]:VariableDeclarationStatement[10966-11046]"
    }, {
      "left" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    COMPILE_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
      "right" : "return BuildTarget\n        .builder(params.getBuildTarget())\n        .addFlavors(cxxPlatform.getFlavor())\n        .addFlavors(\n            ImmutableFlavor.of(\n                String.format(\n                    COMPILE_FLAVOR_PREFIX + \"%s%s\",\n                    pic == PicType.PIC ? \"pic-\" : \"\",\n                    outputName)))\n        .build();",
      "info" : "ReturnStatement[12217-12564]:ReturnStatement[11051-11398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12643-12848]:Block[11477-11682]"
    }, {
      "left" : "Set<Flavor> flavors = target.getFlavors();",
      "right" : "Set<Flavor> flavors = target.getFlavors();",
      "info" : "VariableDeclarationStatement[12649-12691]:VariableDeclarationStatement[11483-11525]"
    }, {
      "left" : "for (Flavor flavor : flavors)",
      "right" : "for (Flavor flavor : flavors)",
      "info" : "EnhancedForStatement[12696-12826]:EnhancedForStatement[11530-11660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12726-12826]:Block[11560-11660]"
    }, {
      "left" : "if (flavor.getName().startsWith(COMPILE_FLAVOR_PREFIX))",
      "right" : "if (flavor.getName().startsWith(COMPILE_FLAVOR_PREFIX))",
      "info" : "IfStatement[12734-12820]:IfStatement[11568-11654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12790-12820]:Block[11624-11654]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12800-12812]:ReturnStatement[11634-11646]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12831-12844]:ReturnStatement[11665-11678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13042-13158]:Block[11876-11992]"
    }, {
      "left" : "return CxxSourceTypes.needsCxxCompiler(type) ?\n        cxxPlatform.getCxx() :\n        cxxPlatform.getCc();",
      "right" : "return CxxSourceTypes.needsCxxCompiler(type) ?\n        cxxPlatform.getCxx() :\n        cxxPlatform.getCc();",
      "info" : "ReturnStatement[13048-13154]:ReturnStatement[11882-11988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13237-13974]:Block[12071-12808]"
    }, {
      "left" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
      "right" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[13243-13304]:VariableDeclarationStatement[12077-12138]"
    }, {
      "left" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT)",
      "right" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT)",
      "info" : "IfStatement[13407-13549]:IfStatement[12241-12383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13498-13549]:Block[12332-12383]"
    }, {
      "left" : "args.addAll(cxxPlatform.getCflags());",
      "right" : "args.addAll(cxxPlatform.getCflags());",
      "info" : "ExpressionStatement[13506-13543]:ExpressionStatement[12340-12377]"
    }, {
      "left" : "if (type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
      "right" : "if (type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
      "info" : "IfStatement[13663-13811]:IfStatement[12497-12645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13758-13811]:Block[12592-12645]"
    }, {
      "left" : "args.addAll(cxxPlatform.getCxxflags());",
      "right" : "args.addAll(cxxPlatform.getCxxflags());",
      "info" : "ExpressionStatement[13766-13805]:ExpressionStatement[12600-12639]"
    }, {
      "left" : "args.addAll(cxxPlatform.getAsflags());",
      "right" : "args.addAll(cxxPlatform.getAsflags());",
      "info" : "ExpressionStatement[13906-13944]:ExpressionStatement[12740-12778]"
    }, {
      "left" : "return args.build();",
      "right" : "return args.build();",
      "info" : "ReturnStatement[13950-13970]:ReturnStatement[12784-12804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14049-14455]:Block[12883-13289]"
    }, {
      "left" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
      "right" : "ImmutableList.Builder<String> args = ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[14055-14116]:VariableDeclarationStatement[12889-12950]"
    }, {
      "left" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT ||\n        type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
      "right" : "if (type == CxxSource.Type.C_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJC_CPP_OUTPUT ||\n        type == CxxSource.Type.CXX_CPP_OUTPUT ||\n        type == CxxSource.Type.OBJCXX_CPP_OUTPUT)",
      "info" : "IfStatement[14192-14425]:IfStatement[13026-13259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14384-14425]:Block[13218-13259]"
    }, {
      "left" : "args.addAll(compilerFlags);",
      "right" : "args.addAll(compilerFlags);",
      "info" : "ExpressionStatement[14392-14419]:ExpressionStatement[13226-13253]"
    }, {
      "left" : "return args.build();",
      "right" : "return args.build();",
      "info" : "ReturnStatement[14431-14451]:ReturnStatement[13265-13285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14775-16652]:Block[13609-15486]"
    }, {
      "left" : "Preconditions.checkArgument(CxxSourceTypes.isCompilableType(source.getType()));",
      "right" : "Preconditions.checkArgument(CxxSourceTypes.isCompilableType(source.getType()));",
      "info" : "ExpressionStatement[14782-14861]:ExpressionStatement[13616-13695]"
    }, {
      "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
      "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
      "info" : "VariableDeclarationStatement[14867-14924]:VariableDeclarationStatement[13701-13758]"
    }, {
      "left" : "Compiler compiler = getCompiler(source.getType());",
      "right" : "Compiler compiler = getCompiler(source.getType());",
      "info" : "VariableDeclarationStatement[14929-14979]:VariableDeclarationStatement[13763-13813]"
    }, {
      "left" : "ImmutableSortedSet<BuildRule> dependencies =\n        ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the compiler.\n            .addAll(compiler.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            .build();",
      "right" : "ImmutableSortedSet<BuildRule> dependencies =\n        ImmutableSortedSet.<BuildRule>naturalOrder()\n            // Add dependencies on any build rules used to create the compiler.\n            .addAll(compiler.getInputs(pathResolver))\n            // If a build rule generates our input source, add that as a dependency.\n            .addAll(pathResolver.filterBuildRuleInputs(source.getPath()))\n            .build();",
      "info" : "VariableDeclarationStatement[14985-15397]:VariableDeclarationStatement[13819-14231]"
    }, {
      "left" : "ImmutableList<String> platformFlags =\n        ImmutableList.<String>builder()\n            // If we're using pic, add in the appropriate flag.\n            .addAll(pic.getFlags())\n            // Add in the platform specific compiler flags.\n            .addAll(getPlatformCompileFlags(source.getType()))\n            .build();",
      "right" : "ImmutableList<String> platformFlags =\n        ImmutableList.<String>builder()\n            // If we're using pic, add in the appropriate flag.\n            .addAll(pic.getFlags())\n            // Add in the platform specific compiler flags.\n            .addAll(getPlatformCompileFlags(source.getType()))\n            .build();",
      "info" : "VariableDeclarationStatement[15447-15769]:VariableDeclarationStatement[14281-14603]"
    }, {
      "left" : "ImmutableList<String> ruleFlags =\n        ImmutableList.<String>builder()\n            // Add custom compiler flags.\n            .addAll(getRuleCompileFlags(source.getType()))\n            // Add custom per-file flags.\n            .addAll(source.getFlags())\n            .build();",
      "right" : "ImmutableList<String> ruleFlags =\n        ImmutableList.<String>builder()\n            // Add custom compiler flags.\n            .addAll(getRuleCompileFlags(source.getType()))\n            // Add custom per-file flags.\n            .addAll(source.getFlags())\n            .build();",
      "info" : "VariableDeclarationStatement[15775-16052]:VariableDeclarationStatement[14609-14886]"
    }, {
      "left" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.compile(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        compiler,\n        platformFlags,\n        ruleFlags,\n        getCompileOutputPath(target, name),\n        source.getPath(),\n        source.getType(),\n        cxxPlatform.getDebugPathSanitizer());",
      "right" : "CxxPreprocessAndCompile result = CxxPreprocessAndCompile.compile(\n        params.copyWithChanges(\n            target,\n            Suppliers.ofInstance(dependencies),\n            Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),\n        pathResolver,\n        compiler,\n        platformFlags,\n        ruleFlags,\n        getCompileOutputPath(target, name),\n        source.getPath(),\n        source.getType(),\n        cxxPlatform.getDebugPathSanitizer());",
      "info" : "VariableDeclarationStatement[16136-16596]:VariableDeclarationStatement[14970-15430]"
    }, {
      "left" : "resolver.addToIndex(result);",
      "right" : "resolver.addToIndex(result);",
      "info" : "ExpressionStatement[16601-16629]:ExpressionStatement[15435-15463]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[16634-16648]:ReturnStatement[15468-15482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16822-17165]:Block[15656-15999]"
    }, {
      "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
      "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
      "info" : "VariableDeclarationStatement[16829-16886]:VariableDeclarationStatement[15663-15720]"
    }, {
      "left" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
      "right" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
      "info" : "VariableDeclarationStatement[16891-17021]:VariableDeclarationStatement[15725-15855]"
    }, {
      "left" : "if (existingRule.isPresent())",
      "right" : "if (existingRule.isPresent())",
      "info" : "IfStatement[17026-17096]:IfStatement[15860-15930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17056-17096]:Block[15890-15930]"
    }, {
      "left" : "return existingRule.get();",
      "right" : "return existingRule.get();",
      "info" : "ReturnStatement[17064-17090]:ReturnStatement[15898-15924]"
    }, {
      "left" : "return createCompileBuildRule(resolver, name, source, pic);",
      "right" : "return createCompileBuildRule(resolver, name, source, pic);",
      "info" : "ReturnStatement[17102-17161]:ReturnStatement[15936-15995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20264-20630]:Block[20663-21029]"
    }, {
      "left" : "BuildTarget target = createCompileBuildTarget(name, pic);",
      "right" : "BuildTarget target = createCompileBuildTarget(name, pic);",
      "info" : "VariableDeclarationStatement[20271-20328]:VariableDeclarationStatement[20670-20727]"
    }, {
      "left" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
      "right" : "Optional<CxxPreprocessAndCompile> existingRule = resolver.getRuleOptionalWithType(\n        target, CxxPreprocessAndCompile.class);",
      "info" : "VariableDeclarationStatement[20333-20463]:VariableDeclarationStatement[20732-20862]"
    }, {
      "left" : "if (existingRule.isPresent())",
      "right" : "if (existingRule.isPresent())",
      "info" : "IfStatement[20468-20538]:IfStatement[20867-20937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20498-20538]:Block[20897-20937]"
    }, {
      "left" : "return existingRule.get();",
      "right" : "return existingRule.get();",
      "info" : "ReturnStatement[20506-20532]:ReturnStatement[20905-20931]"
    }, {
      "left" : "return createPreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
      "right" : "return createPreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
      "info" : "ReturnStatement[20544-20626]:ReturnStatement[20943-21025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20860-23075]:Block[21259-23474]"
    }, {
      "left" : "ImmutableList.Builder<CxxPreprocessAndCompile> objects = ImmutableList.builder();",
      "right" : "ImmutableList.Builder<CxxPreprocessAndCompile> objects = ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[20867-20948]:VariableDeclarationStatement[21266-21347]"
    }, {
      "left" : "for (Map.Entry<String, CxxSource> entry : sources.entrySet())",
      "right" : "for (Map.Entry<String, CxxSource> entry : sources.entrySet())",
      "info" : "EnhancedForStatement[20954-22763]:EnhancedForStatement[21353-23162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21016-22763]:Block[21415-23162]"
    }, {
      "left" : "String name = entry.getKey();",
      "right" : "String name = entry.getKey();",
      "info" : "VariableDeclarationStatement[21024-21053]:VariableDeclarationStatement[21423-21452]"
    }, {
      "left" : "CxxSource source = entry.getValue();",
      "right" : "CxxSource source = entry.getValue();",
      "info" : "VariableDeclarationStatement[21060-21096]:VariableDeclarationStatement[21459-21495]"
    }, {
      "left" : "Preconditions.checkState(\n          CxxSourceTypes.isPreprocessableType(source.getType()) ||\n              CxxSourceTypes.isCompilableType(source.getType()));",
      "right" : "Preconditions.checkState(\n          CxxSourceTypes.isPreprocessableType(source.getType()) ||\n              CxxSourceTypes.isCompilableType(source.getType()));",
      "info" : "ExpressionStatement[21104-21262]:ExpressionStatement[21503-21661]"
    }, {
      "left" : "switch (strategy) {\n\n        case PIPED:\n        case COMBINED: {\n          CxxPreprocessAndCompile rule;\n\n          // If it's a preprocessable source, use a combine preprocess-and-compile build rule.\n          // Otherwise, use a regular compile rule.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);\n          } else {\n            rule = requireCompileBuildRule(resolver, name, source, pic);\n          }\n\n          objects.add(rule);\n          break;\n        }\n\n        case SEPARATE: {\n\n          // If this is a preprocessable source, first create the preprocess build rule and\n          // update the source and name to represent its compilable output.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);\n            source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));\n          }\n\n          // Now build the compile build rule.\n          CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);\n          objects.add(rule);\n\n          break;\n        }\n\n        // $CASES-OMITTED$\n        default:\n          throw new IllegalStateException();\n      }",
      "right" : "switch (strategy) {\n\n        case PIPED:\n        case COMBINED: {\n          CxxPreprocessAndCompile rule;\n\n          // If it's a preprocessable source, use a combine preprocess-and-compile build rule.\n          // Otherwise, use a regular compile rule.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);\n          } else {\n            rule = requireCompileBuildRule(resolver, name, source, pic);\n          }\n\n          objects.add(rule);\n          break;\n        }\n\n        case SEPARATE: {\n\n          // If this is a preprocessable source, first create the preprocess build rule and\n          // update the source and name to represent its compilable output.\n          if (CxxSourceTypes.isPreprocessableType(source.getType())) {\n            CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);\n            source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));\n          }\n\n          // Now build the compile build rule.\n          CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);\n          objects.add(rule);\n\n          break;\n        }\n\n        // $CASES-OMITTED$\n        default:\n          throw new IllegalStateException();\n      }",
      "info" : "SwitchStatement[21270-22757]:SwitchStatement[21669-23156]"
    }, {
      "left" : "case PIPED:",
      "right" : "case PIPED:",
      "info" : "SwitchCase[21299-21310]:SwitchCase[21698-21709]"
    }, {
      "left" : "case COMBINED:",
      "right" : "case COMBINED:",
      "info" : "SwitchCase[21319-21333]:SwitchCase[21718-21732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21334-21851]:Block[21733-22250]"
    }, {
      "left" : "CxxPreprocessAndCompile rule;",
      "right" : "CxxPreprocessAndCompile rule;",
      "info" : "VariableDeclarationStatement[21346-21375]:VariableDeclarationStatement[21745-21774]"
    }, {
      "left" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
      "right" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
      "info" : "IfStatement[21534-21794]:IfStatement[21933-22193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21593-21702]:Block[21992-22101]"
    }, {
      "left" : "rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
      "right" : "rule = requirePreprocessAndCompileBuildRule(resolver, name, source, pic, strategy);",
      "info" : "ExpressionStatement[21607-21690]:ExpressionStatement[22006-22089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21708-21794]:Block[22107-22193]"
    }, {
      "left" : "rule = requireCompileBuildRule(resolver, name, source, pic);",
      "right" : "rule = requireCompileBuildRule(resolver, name, source, pic);",
      "info" : "ExpressionStatement[21722-21782]:ExpressionStatement[22121-22181]"
    }, {
      "left" : "objects.add(rule);",
      "right" : "objects.add(rule);",
      "info" : "ExpressionStatement[21806-21824]:ExpressionStatement[22205-22223]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21835-21841]:BreakStatement[22234-22240]"
    }, {
      "left" : "case SEPARATE:",
      "right" : "case SEPARATE:",
      "info" : "SwitchCase[21861-21875]:SwitchCase[22260-22274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21876-22659]:Block[22275-23058]"
    }, {
      "left" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
      "right" : "if (CxxSourceTypes.isPreprocessableType(source.getType()))",
      "info" : "IfStatement[22057-22459]:IfStatement[22456-22858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22116-22459]:Block[22515-22858]"
    }, {
      "left" : "CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);",
      "right" : "CxxPreprocessAndCompile rule = requirePreprocessBuildRule(resolver, name, source, pic);",
      "info" : "VariableDeclarationStatement[22130-22217]:VariableDeclarationStatement[22529-22616]"
    }, {
      "left" : "source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));",
      "right" : "source = CxxSource.copyOf(source)\n                .withType(CxxSourceTypes.getPreprocessorOutputType(source.getType()))\n                .withPath(\n                    new BuildTargetSourcePath(rule.getBuildTarget()));",
      "info" : "ExpressionStatement[22230-22447]:ExpressionStatement[22629-22846]"
    }, {
      "left" : "CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);",
      "right" : "CxxPreprocessAndCompile rule = requireCompileBuildRule(resolver, name, source, pic);",
      "info" : "VariableDeclarationStatement[22518-22602]:VariableDeclarationStatement[22917-23001]"
    }, {
      "left" : "objects.add(rule);",
      "right" : "objects.add(rule);",
      "info" : "ExpressionStatement[22613-22631]:ExpressionStatement[23012-23030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22643-22649]:BreakStatement[23042-23048]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22696-22704]:SwitchCase[23095-23103]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[22715-22749]:ThrowStatement[23114-23148]"
    }, {
      "left" : "return FluentIterable\n        .from(objects.build())\n        .toMap(new Function<CxxPreprocessAndCompile, SourcePath>() {\n          @Override\n          public SourcePath apply(CxxPreprocessAndCompile input) {\n            return new BuildTargetSourcePath(input.getBuildTarget());\n          }\n        });",
      "right" : "return FluentIterable\n        .from(objects.build())\n        .toMap(new Function<CxxPreprocessAndCompile, SourcePath>() {\n          @Override\n          public SourcePath apply(CxxPreprocessAndCompile input) {\n            return new BuildTargetSourcePath(input.getBuildTarget());\n          }\n        });",
      "info" : "ReturnStatement[22769-23071]:ReturnStatement[23168-23470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22976-23059]:Block[23375-23458]"
    }, {
      "left" : "return new BuildTargetSourcePath(input.getBuildTarget());",
      "right" : "return new BuildTargetSourcePath(input.getBuildTarget());",
      "info" : "ReturnStatement[22990-23047]:ReturnStatement[23389-23446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23518-23834]:Block[23917-24233]"
    }, {
      "left" : "CxxSourceRuleFactory factory =\n        new CxxSourceRuleFactory(\n            params,\n            resolver,\n            pathResolver,\n            cxxPlatform,\n            cxxPreprocessorInput,\n            compilerFlags);",
      "right" : "CxxSourceRuleFactory factory =\n        new CxxSourceRuleFactory(\n            params,\n            resolver,\n            pathResolver,\n            cxxPlatform,\n            cxxPreprocessorInput,\n            compilerFlags);",
      "info" : "VariableDeclarationStatement[23524-23743]:VariableDeclarationStatement[23923-24142]"
    }, {
      "left" : "return factory.requirePreprocessAndCompileRules(resolver, strategy, sources, pic);",
      "right" : "return factory.requirePreprocessAndCompileRules(resolver, strategy, sources, pic);",
      "info" : "ReturnStatement[23748-23830]:ReturnStatement[24147-24229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24086-24141]:Block[24485-24540]"
    }, {
      "left" : "this.flags = ImmutableList.copyOf(flags);",
      "right" : "this.flags = ImmutableList.copyOf(flags);",
      "info" : "ExpressionStatement[24094-24135]:ExpressionStatement[24493-24534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24187-24214]:Block[24586-24613]"
    }, {
      "left" : "return flags;",
      "right" : "return flags;",
      "info" : "ReturnStatement[24195-24208]:ReturnStatement[24594-24607]"
    } ]
  },
  "interFileMappings" : { }
}