{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeCheck",
      "right" : "TypeCheck",
      "info" : "TypeDeclaration[2156-58980]:TypeDeclaration[2156-59082]"
    }, {
      "left" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "right" : "static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
      "info" : "FieldDeclaration[2414-2582]:FieldDeclaration[2414-2582]"
    }, {
      "left" : "static final DiagnosticType BAD_DELETE =\n      // TODO(user): make this an error\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
      "right" : "static final DiagnosticType BAD_DELETE =\n      // TODO(user): make this an error\n      DiagnosticType.warning(\n          \"JSC_BAD_DELETE_OPERAND\",\n          \"delete operator needs a reference operand\");",
      "info" : "FieldDeclaration[2614-2816]:FieldDeclaration[2614-2816]"
    }, {
      "left" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "right" : "protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
      "info" : "FieldDeclaration[2851-2965]:FieldDeclaration[2851-2965]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3099-3315]:FieldDeclaration[3099-3315]"
    }, {
      "left" : "static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "right" : "static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST_NO_RESULT\",\n          \"condition always evaluates to the same value\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
      "info" : "FieldDeclaration[3319-3566]:FieldDeclaration[3319-3566]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "right" : "static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
      "info" : "FieldDeclaration[3570-3748]:FieldDeclaration[3570-3748]"
    }, {
      "left" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "right" : "static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
      "info" : "FieldDeclaration[3845-4010]:FieldDeclaration[3845-4010]"
    }, {
      "left" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "right" : "protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
      "info" : "FieldDeclaration[4014-4185]:FieldDeclaration[4014-4185]"
    }, {
      "left" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "right" : "static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
      "info" : "FieldDeclaration[4189-4358]:FieldDeclaration[4189-4358]"
    }, {
      "left" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "right" : "static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
      "info" : "FieldDeclaration[4362-4516]:FieldDeclaration[4362-4516]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
      "info" : "FieldDeclaration[4520-4718]:FieldDeclaration[4520-4718]"
    }, {
      "left" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "right" : "static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
      "info" : "FieldDeclaration[4722-4897]:FieldDeclaration[4722-4897]"
    }, {
      "left" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "right" : "static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
      "info" : "FieldDeclaration[4901-5074]:FieldDeclaration[4901-5074]"
    }, {
      "left" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "right" : "static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
      "info" : "FieldDeclaration[5078-5196]:FieldDeclaration[5078-5196]"
    }, {
      "left" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "right" : "static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
      "info" : "FieldDeclaration[5200-5357]:FieldDeclaration[5200-5357]"
    }, {
      "left" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "right" : "static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
      "info" : "FieldDeclaration[5361-5618]:FieldDeclaration[5361-5618]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "right" : "static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
      "info" : "FieldDeclaration[5622-5821]:FieldDeclaration[5622-5821]"
    }, {
      "left" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{0} cannot extend this type; \" +\n          \"a constructor can only extend objects \" +\n          \"and an interface can only extend interfaces\");",
      "right" : "static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{0} cannot extend this type; \" +\n          \"a constructor can only extend objects \" +\n          \"and an interface can only extend interfaces\");",
      "info" : "FieldDeclaration[5825-6108]:FieldDeclaration[5825-6108]"
    }, {
      "left" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "right" : "static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
      "info" : "FieldDeclaration[6112-6278]:FieldDeclaration[6112-6278]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6282-6518]:FieldDeclaration[6282-6518]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "right" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
      "info" : "FieldDeclaration[6522-6755]:FieldDeclaration[6522-6755]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "info" : "FieldDeclaration[6759-7081]:FieldDeclaration[6759-7081]"
    }, {
      "left" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from interface {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "right" : "static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from interface {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
      "info" : "FieldDeclaration[7085-7415]:FieldDeclaration[7085-7415]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "right" : "static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
      "info" : "FieldDeclaration[7419-7593]:FieldDeclaration[7419-7593]"
    }, {
      "left" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "right" : "static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
      "info" : "FieldDeclaration[7597-7801]:FieldDeclaration[7597-7801]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "right" : "static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
      "info" : "FieldDeclaration[7805-7968]:FieldDeclaration[7805-7968]"
    }, {
      "left" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "right" : "static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
      "info" : "FieldDeclaration[7972-8124]:FieldDeclaration[7972-8124]"
    }, {
      "left" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "right" : "static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
      "info" : "FieldDeclaration[8128-8365]:FieldDeclaration[8128-8365]"
    }, {
      "left" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "right" : "static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
      "info" : "FieldDeclaration[8369-8588]:FieldDeclaration[8369-8588]"
    }, {
      "left" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST);",
      "right" : "static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      DETERMINISTIC_TEST_NO_RESULT,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_EXTENDED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNKNOWN_EXPR_TYPE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST);",
      "info" : "FieldDeclaration[8592-9429]:FieldDeclaration[8592-9429]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[9433-9473]:FieldDeclaration[9433-9473]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[9476-9514]:FieldDeclaration[9476-9514]"
    }, {
      "left" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "right" : "private final ReverseAbstractInterpreter reverseInterpreter;",
      "info" : "FieldDeclaration[9518-9578]:FieldDeclaration[9518-9578]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[9582-9624]:FieldDeclaration[9582-9624]"
    }, {
      "left" : "private Scope topScope;",
      "right" : "private Scope topScope;",
      "info" : "FieldDeclaration[9627-9650]:FieldDeclaration[9627-9650]"
    }, {
      "left" : "private ScopeCreator scopeCreator;",
      "right" : "private ScopeCreator scopeCreator;",
      "info" : "FieldDeclaration[9654-9688]:FieldDeclaration[9654-9688]"
    }, {
      "left" : "private final CheckLevel reportMissingOverride;",
      "right" : "private final CheckLevel reportMissingOverride;",
      "info" : "FieldDeclaration[9692-9739]:FieldDeclaration[9692-9739]"
    }, {
      "left" : "private final CheckLevel reportUnknownTypes;",
      "right" : "private final CheckLevel reportUnknownTypes;",
      "info" : "FieldDeclaration[9742-9786]:FieldDeclaration[9742-9786]"
    }, {
      "left" : "private boolean reportMissingProperties = true;",
      "right" : "private boolean reportMissingProperties = true;",
      "info" : "FieldDeclaration[9886-9933]:FieldDeclaration[9886-9933]"
    }, {
      "left" : "private InferJSDocInfo inferJSDocInfo = null;",
      "right" : "private InferJSDocInfo inferJSDocInfo = null;",
      "info" : "FieldDeclaration[9937-9982]:FieldDeclaration[9937-9982]"
    }, {
      "left" : "private int typedCount = 0;",
      "right" : "private int typedCount = 0;",
      "info" : "FieldDeclaration[10063-10090]:FieldDeclaration[10063-10090]"
    }, {
      "left" : "private int nullCount = 0;",
      "right" : "private int nullCount = 0;",
      "info" : "FieldDeclaration[10093-10119]:FieldDeclaration[10093-10119]"
    }, {
      "left" : "private int unknownCount = 0;",
      "right" : "private int unknownCount = 0;",
      "info" : "FieldDeclaration[10122-10151]:FieldDeclaration[10122-10151]"
    }, {
      "left" : "private boolean inExterns;",
      "right" : "private boolean inExterns;",
      "info" : "FieldDeclaration[10154-10180]:FieldDeclaration[10154-10180]"
    }, {
      "left" : "private int noTypeCheckSection = 0;",
      "right" : "private int noTypeCheckSection = 0;",
      "info" : "FieldDeclaration[10271-10306]:FieldDeclaration[10271-10306]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "info" : "MethodDeclaration[10310-10977]:MethodDeclaration[10310-10977]"
    }, {
      "left" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "right" : "public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes)",
      "info" : "MethodDeclaration[10981-11312]:MethodDeclaration[10981-11312]"
    }, {
      "left" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "right" : "TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry)",
      "info" : "MethodDeclaration[11316-11557]:MethodDeclaration[11316-11557]"
    }, {
      "left" : "TypeCheck reportMissingProperties(boolean report)",
      "right" : "TypeCheck reportMissingProperties(boolean report)",
      "info" : "MethodDeclaration[11561-11748]:MethodDeclaration[11561-11748]"
    }, {
      "left" : "public void process(Node externsRoot, Node jsRoot)",
      "right" : "public void process(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[11752-12436]:MethodDeclaration[11752-12436]"
    }, {
      "left" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "right" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
      "info" : "MethodDeclaration[12440-13137]:MethodDeclaration[12440-13137]"
    }, {
      "left" : "public void check(Node node, boolean externs)",
      "right" : "public void check(Node node, boolean externs)",
      "info" : "MethodDeclaration[13142-13491]:MethodDeclaration[13142-13491]"
    }, {
      "left" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "right" : "private void checkNoTypeCheckSection(Node n, boolean enterSection)",
      "info" : "MethodDeclaration[13496-14033]:MethodDeclaration[13496-14033]"
    }, {
      "left" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "right" : "private void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n      String... arguments)",
      "info" : "MethodDeclaration[14037-14232]:MethodDeclaration[14037-14232]"
    }, {
      "left" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[14236-15479]:MethodDeclaration[14236-15479]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[15483-26039]:MethodDeclaration[15483-26039]"
    }, {
      "left" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "right" : "private void doPercentTypedAccounting(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[26043-26533]:MethodDeclaration[26043-26533]"
    }, {
      "left" : "private void visitAssign(NodeTraversal t, Node assign)",
      "right" : "private void visitAssign(NodeTraversal t, Node assign)",
      "info" : "MethodDeclaration[26537-30637]:MethodDeclaration[26537-30637]"
    }, {
      "left" : "private boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "right" : "private boolean propertyIsImplicitCast(ObjectType type, String prop)",
      "info" : "MethodDeclaration[30641-31064]:MethodDeclaration[30641-31064]"
    }, {
      "left" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "right" : "private void checkDeclaredPropertyInheritance(\n      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,\n      JSDocInfo info, JSType propertyType)",
      "info" : "MethodDeclaration[31068-35216]:MethodDeclaration[31068-35216]"
    }, {
      "left" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "right" : "private void visitInterfaceGetprop(NodeTraversal t, Node assign, Node object,\n      String property, Node lvalue, Node rvalue)",
      "info" : "MethodDeclaration[35220-36547]:MethodDeclaration[35220-36547]"
    }, {
      "left" : "private void visitAnnotatedAssignGetprop(NodeTraversal t,\n      Node assign, JSType type, Node object, String property, Node rvalue)",
      "right" : "private void visitAnnotatedAssignGetprop(NodeTraversal t,\n      Node assign, JSType type, Node object, String property, Node rvalue)",
      "info" : "MethodDeclaration[36551-37000]:MethodDeclaration[36551-37000]"
    }, {
      "left" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "right" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[37004-38409]:MethodDeclaration[37004-38409]"
    }, {
      "left" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "right" : "private void visitGetProp(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[38413-39731]:MethodDeclaration[38413-39731]"
    }, {
      "left" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "right" : "private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[39735-40826]:MethodDeclaration[39735-40826]"
    }, {
      "left" : "private boolean isPropertyTest(Node getProp)",
      "right" : "private boolean isPropertyTest(Node getProp)",
      "info" : "MethodDeclaration[40830-41800]:MethodDeclaration[40830-41800]"
    }, {
      "left" : "private void visitGetElem(NodeTraversal t, Node n)",
      "right" : "private void visitGetElem(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[41804-42252]:MethodDeclaration[41804-42252]"
    }, {
      "left" : "private void visitVar(NodeTraversal t, Node n)",
      "right" : "private void visitVar(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[42256-43814]:MethodDeclaration[42256-43814]"
    }, {
      "left" : "private void visitNew(NodeTraversal t, Node n)",
      "right" : "private void visitNew(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[43818-44717]:MethodDeclaration[43818-44717]"
    }, {
      "left" : "private void visitFunction(NodeTraversal t, Node n)",
      "right" : "private void visitFunction(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[44721-46529]:MethodDeclaration[44721-46529]"
    }, {
      "left" : "private void visitCall(NodeTraversal t, Node n)",
      "right" : "private void visitCall(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[46533-47876]:MethodDeclaration[46533-47876]"
    }, {
      "left" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "right" : "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType)",
      "info" : "MethodDeclaration[47880-49228]:MethodDeclaration[47880-49330]"
    }, {
      "left" : "private void visitReturn(NodeTraversal t, Node n)",
      "right" : "private void visitReturn(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[49232-50527]:MethodDeclaration[49334-50629]"
    }, {
      "left" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "right" : "private void visitBinaryOperator(int op, NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[50531-52610]:MethodDeclaration[50633-52712]"
    }, {
      "left" : "private void checkEnumInitializer(\n      NodeTraversal t, Node value, JSType primitiveType)",
      "right" : "private void checkEnumInitializer(\n      NodeTraversal t, Node value, JSType primitiveType)",
      "info" : "MethodDeclaration[52614-54726]:MethodDeclaration[52716-54828]"
    }, {
      "left" : "private static boolean isReference(Node n)",
      "right" : "private static boolean isReference(Node n)",
      "info" : "MethodDeclaration[54731-55211]:MethodDeclaration[54833-55313]"
    }, {
      "left" : "private JSType getJSType(Node n)",
      "right" : "private JSType getJSType(Node n)",
      "info" : "MethodDeclaration[55215-55782]:MethodDeclaration[55317-55884]"
    }, {
      "left" : "private FunctionType getFunctionType(Node n)",
      "right" : "private FunctionType getFunctionType(Node n)",
      "info" : "MethodDeclaration[55786-56223]:MethodDeclaration[55888-56325]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[56551-56769]:MethodDeclaration[56653-56871]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type)",
      "info" : "MethodDeclaration[56773-56891]:MethodDeclaration[56875-56993]"
    }, {
      "left" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "right" : "private void ensureTyped(NodeTraversal t, Node n, JSType type)",
      "info" : "MethodDeclaration[56895-58561]:MethodDeclaration[56997-58663]"
    }, {
      "left" : "double getTypedPercent()",
      "right" : "double getTypedPercent()",
      "info" : "MethodDeclaration[58565-58872]:MethodDeclaration[58667-58974]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative typeId)",
      "right" : "private JSType getNativeType(JSTypeNative typeId)",
      "info" : "MethodDeclaration[58876-58978]:MethodDeclaration[58978-59080]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10574-10977]:Block[10574-10977]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[10580-10605]:ExpressionStatement[10580-10605]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[10610-10655]:ExpressionStatement[10610-10655]"
    }, {
      "left" : "this.reverseInterpreter = reverseInterpreter;",
      "right" : "this.reverseInterpreter = reverseInterpreter;",
      "info" : "ExpressionStatement[10660-10705]:ExpressionStatement[10660-10705]"
    }, {
      "left" : "this.typeRegistry = typeRegistry;",
      "right" : "this.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[10710-10743]:ExpressionStatement[10710-10743]"
    }, {
      "left" : "this.topScope = topScope;",
      "right" : "this.topScope = topScope;",
      "info" : "ExpressionStatement[10748-10773]:ExpressionStatement[10748-10773]"
    }, {
      "left" : "this.scopeCreator = scopeCreator;",
      "right" : "this.scopeCreator = scopeCreator;",
      "info" : "ExpressionStatement[10778-10811]:ExpressionStatement[10778-10811]"
    }, {
      "left" : "this.reportMissingOverride = reportMissingOverride;",
      "right" : "this.reportMissingOverride = reportMissingOverride;",
      "info" : "ExpressionStatement[10816-10867]:ExpressionStatement[10816-10867]"
    }, {
      "left" : "this.reportUnknownTypes = reportUnknownTypes;",
      "right" : "this.reportUnknownTypes = reportUnknownTypes;",
      "info" : "ExpressionStatement[10872-10917]:ExpressionStatement[10872-10917]"
    }, {
      "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
      "info" : "ExpressionStatement[10922-10973]:ExpressionStatement[10922-10973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11190-11312]:Block[11190-11312]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
      "info" : "ConstructorInvocation[11196-11308]:ConstructorInvocation[11196-11308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11441-11557]:Block[11441-11557]"
    }, {
      "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
      "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
      "info" : "ConstructorInvocation[11447-11553]:ConstructorInvocation[11447-11553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11688-11748]:Block[11688-11748]"
    }, {
      "left" : "reportMissingProperties = report;",
      "right" : "reportMissingProperties = report;",
      "info" : "ExpressionStatement[11694-11727]:ExpressionStatement[11694-11727]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11732-11744]:ReturnStatement[11732-11744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12052-12436]:Block[12052-12436]"
    }, {
      "left" : "Preconditions.checkNotNull(scopeCreator);",
      "right" : "Preconditions.checkNotNull(scopeCreator);",
      "info" : "ExpressionStatement[12058-12099]:ExpressionStatement[12058-12099]"
    }, {
      "left" : "Preconditions.checkNotNull(topScope);",
      "right" : "Preconditions.checkNotNull(topScope);",
      "info" : "ExpressionStatement[12104-12141]:ExpressionStatement[12104-12141]"
    }, {
      "left" : "Node externsAndJs = jsRoot.getParent();",
      "right" : "Node externsAndJs = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[12147-12186]:VariableDeclarationStatement[12147-12186]"
    }, {
      "left" : "Preconditions.checkState(externsAndJs != null);",
      "right" : "Preconditions.checkState(externsAndJs != null);",
      "info" : "ExpressionStatement[12191-12238]:ExpressionStatement[12191-12238]"
    }, {
      "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
      "info" : "ExpressionStatement[12243-12336]:ExpressionStatement[12243-12336]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[12342-12406]:IfStatement[12342-12406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12367-12406]:Block[12367-12406]"
    }, {
      "left" : "check(externsRoot, true);",
      "right" : "check(externsRoot, true);",
      "info" : "ExpressionStatement[12375-12400]:ExpressionStatement[12375-12400]"
    }, {
      "left" : "check(jsRoot, false);",
      "right" : "check(jsRoot, false);",
      "info" : "ExpressionStatement[12411-12432]:ExpressionStatement[12411-12432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12560-13137]:Block[12560-13137]"
    }, {
      "left" : "Preconditions.checkState(scopeCreator == null);",
      "right" : "Preconditions.checkState(scopeCreator == null);",
      "info" : "ExpressionStatement[12566-12613]:ExpressionStatement[12566-12613]"
    }, {
      "left" : "Preconditions.checkState(topScope == null);",
      "right" : "Preconditions.checkState(topScope == null);",
      "info" : "ExpressionStatement[12618-12661]:ExpressionStatement[12618-12661]"
    }, {
      "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
      "info" : "ExpressionStatement[12667-12720]:ExpressionStatement[12667-12720]"
    }, {
      "left" : "Node externsAndJsRoot = jsRoot.getParent();",
      "right" : "Node externsAndJsRoot = jsRoot.getParent();",
      "info" : "VariableDeclarationStatement[12725-12768]:VariableDeclarationStatement[12725-12768]"
    }, {
      "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
      "info" : "ExpressionStatement[12774-12847]:ExpressionStatement[12774-12847]"
    }, {
      "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
      "info" : "ExpressionStatement[12852-12912]:ExpressionStatement[12852-12912]"
    }, {
      "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
      "info" : "VariableDeclarationStatement[12918-13032]:VariableDeclarationStatement[12918-13032]"
    }, {
      "left" : "inference.process(externsRoot, jsRoot);",
      "right" : "inference.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[13038-13077]:ExpressionStatement[13038-13077]"
    }, {
      "left" : "process(externsRoot, jsRoot);",
      "right" : "process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[13082-13111]:ExpressionStatement[13082-13111]"
    }, {
      "left" : "return topScope;",
      "right" : "return topScope;",
      "info" : "ReturnStatement[13117-13133]:ReturnStatement[13117-13133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13188-13491]:Block[13188-13491]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[13194-13227]:ExpressionStatement[13194-13227]"
    }, {
      "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
      "info" : "VariableDeclarationStatement[13233-13299]:VariableDeclarationStatement[13233-13299]"
    }, {
      "left" : "inExterns = externs;",
      "right" : "inExterns = externs;",
      "info" : "ExpressionStatement[13304-13324]:ExpressionStatement[13304-13324]"
    }, {
      "left" : "t.traverseWithScope(node, topScope);",
      "right" : "t.traverseWithScope(node, topScope);",
      "info" : "ExpressionStatement[13329-13365]:ExpressionStatement[13329-13365]"
    }, {
      "left" : "if (externs)",
      "right" : "if (externs)",
      "info" : "IfStatement[13370-13487]:IfStatement[13370-13487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13383-13432]:Block[13383-13432]"
    }, {
      "left" : "inferJSDocInfo.process(node, null);",
      "right" : "inferJSDocInfo.process(node, null);",
      "info" : "ExpressionStatement[13391-13426]:ExpressionStatement[13391-13426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13438-13487]:Block[13438-13487]"
    }, {
      "left" : "inferJSDocInfo.process(null, node);",
      "right" : "inferJSDocInfo.process(null, node);",
      "info" : "ExpressionStatement[13446-13481]:ExpressionStatement[13446-13481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13563-14033]:Block[13563-14033]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
      "info" : "SwitchStatement[13569-14029]:SwitchStatement[13569-14029]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[13598-13616]:SwitchCase[13598-13616]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[13623-13640]:SwitchCase[13623-13640]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[13647-13662]:SwitchCase[13647-13662]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[13669-13689]:SwitchCase[13669-13689]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[13696-13714]:SwitchCase[13696-13714]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[13723-13757]:VariableDeclarationStatement[13723-13757]"
    }, {
      "left" : "if (info != null && info.isNoTypeCheck())",
      "right" : "if (info != null && info.isNoTypeCheck())",
      "info" : "IfStatement[13766-13948]:IfStatement[13766-13948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13808-13948]:Block[13808-13948]"
    }, {
      "left" : "if (enterSection)",
      "right" : "if (enterSection)",
      "info" : "IfStatement[13820-13938]:IfStatement[13820-13938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13838-13885]:Block[13838-13885]"
    }, {
      "left" : "noTypeCheckSection++;",
      "right" : "noTypeCheckSection++;",
      "info" : "ExpressionStatement[13852-13873]:ExpressionStatement[13852-13873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13891-13938]:Block[13891-13938]"
    }, {
      "left" : "noTypeCheckSection--;",
      "right" : "noTypeCheckSection--;",
      "info" : "ExpressionStatement[13905-13926]:ExpressionStatement[13905-13926]"
    }, {
      "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
      "info" : "ExpressionStatement[13957-14008]:ExpressionStatement[13957-14008]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14017-14023]:BreakStatement[14017-14023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14140-14232]:Block[14140-14232]"
    }, {
      "left" : "if (noTypeCheckSection == 0)",
      "right" : "if (noTypeCheckSection == 0)",
      "info" : "IfStatement[14146-14228]:IfStatement[14146-14228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14175-14228]:Block[14175-14228]"
    }, {
      "left" : "t.report(n, diagnosticType, arguments);",
      "right" : "t.report(n, diagnosticType, arguments);",
      "info" : "ExpressionStatement[14183-14222]:ExpressionStatement[14183-14222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14311-15479]:Block[14311-15479]"
    }, {
      "left" : "checkNoTypeCheckSection(n, true);",
      "right" : "checkNoTypeCheckSection(n, true);",
      "info" : "ExpressionStatement[14317-14350]:ExpressionStatement[14317-14350]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
      "info" : "SwitchStatement[14355-15458]:SwitchStatement[14355-15458]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[14384-14404]:SwitchCase[14384-14404]"
    }, {
      "left" : "final TypeCheck outerThis = this;",
      "right" : "final TypeCheck outerThis = this;",
      "info" : "VariableDeclarationStatement[14445-14478]:VariableDeclarationStatement[14445-14478]"
    }, {
      "left" : "final Scope outerScope = t.getScope();",
      "right" : "final Scope outerScope = t.getScope();",
      "info" : "VariableDeclarationStatement[14487-14525]:VariableDeclarationStatement[14487-14525]"
    }, {
      "left" : "final FunctionType functionType = (FunctionType) n.getJSType();",
      "right" : "final FunctionType functionType = (FunctionType) n.getJSType();",
      "info" : "VariableDeclarationStatement[14534-14597]:VariableDeclarationStatement[14534-14597]"
    }, {
      "left" : "final String functionPrivateName = n.getFirstChild().getString();",
      "right" : "final String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[14606-14671]:VariableDeclarationStatement[14606-14671]"
    }, {
      "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
      "info" : "IfStatement[14680-15229]:IfStatement[14680-15229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15148-15229]:Block[15148-15229]"
    }, {
      "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
      "info" : "ExpressionStatement[15160-15219]:ExpressionStatement[15160-15219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15446-15452]:BreakStatement[15446-15452]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15463-15475]:ReturnStatement[15463-15475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15984-26039]:Block[15984-26039]"
    }, {
      "left" : "JSType childType;",
      "right" : "JSType childType;",
      "info" : "VariableDeclarationStatement[15990-16007]:VariableDeclarationStatement[15990-16007]"
    }, {
      "left" : "JSType leftType, rightType;",
      "right" : "JSType leftType, rightType;",
      "info" : "VariableDeclarationStatement[16012-16039]:VariableDeclarationStatement[16012-16039]"
    }, {
      "left" : "Node left, right;",
      "right" : "Node left, right;",
      "info" : "VariableDeclarationStatement[16044-16061]:VariableDeclarationStatement[16044-16061]"
    }, {
      "left" : "boolean typeable = true;",
      "right" : "boolean typeable = true;",
      "info" : "VariableDeclarationStatement[16132-16156]:VariableDeclarationStatement[16132-16156]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        if (n.getParent().getType() != Token.OBJECTLIT) {\n          ensureTyped(t, n, NUMBER_TYPE);\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.STRING:\n        if (n.getParent().getType() != Token.OBJECTLIT) {\n          ensureTyped(t, n, STRING_TYPE);\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotVoid(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotVoid(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        if (n.getParent().getType() != Token.OBJECTLIT) {\n          ensureTyped(t, n, NUMBER_TYPE);\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.STRING:\n        if (n.getParent().getType() != Token.OBJECTLIT) {\n          ensureTyped(t, n, STRING_TYPE);\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotVoid(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotVoid(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
      "info" : "SwitchStatement[16162-25813]:SwitchStatement[16162-25813]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[16191-16207]:SwitchCase[16191-16207]"
    }, {
      "left" : "typeable = visitName(t, n, parent);",
      "right" : "typeable = visitName(t, n, parent);",
      "info" : "ExpressionStatement[16216-16251]:ExpressionStatement[16216-16251]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16260-16266]:BreakStatement[16260-16266]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[16274-16288]:SwitchCase[16274-16288]"
    }, {
      "left" : "if (parent.getType() != Token.FUNCTION)",
      "right" : "if (parent.getType() != Token.FUNCTION)",
      "info" : "IfStatement[16401-16556]:IfStatement[16401-16556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16441-16511]:Block[16441-16511]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "info" : "ExpressionStatement[16453-16501]:ExpressionStatement[16453-16501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16517-16556]:Block[16517-16556]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[16529-16546]:ExpressionStatement[16529-16546]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16565-16571]:BreakStatement[16565-16571]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[16579-16596]:SwitchCase[16579-16596]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
      "info" : "ExpressionStatement[16605-16652]:ExpressionStatement[16605-16652]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16661-16667]:BreakStatement[16661-16667]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16675-16691]:SwitchCase[16675-16691]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[16698-16715]:SwitchCase[16698-16715]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[16724-16756]:ExpressionStatement[16724-16756]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16765-16771]:BreakStatement[16765-16771]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[16779-16795]:SwitchCase[16779-16795]"
    }, {
      "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
      "info" : "ExpressionStatement[16804-16852]:ExpressionStatement[16804-16852]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16861-16867]:BreakStatement[16861-16867]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[16875-16898]:SwitchCase[16875-16898]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[16907-16925]:ExpressionStatement[16907-16925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16934-16940]:BreakStatement[16934-16940]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[16948-16967]:SwitchCase[16948-16967]"
    }, {
      "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
      "info" : "ExpressionStatement[16976-17024]:ExpressionStatement[16976-17024]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17033-17039]:BreakStatement[17033-17039]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[17047-17063]:SwitchCase[17047-17063]"
    }, {
      "left" : "ensureTyped(t, n, NULL_TYPE);",
      "right" : "ensureTyped(t, n, NULL_TYPE);",
      "info" : "ExpressionStatement[17072-17101]:ExpressionStatement[17072-17101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17110-17116]:BreakStatement[17110-17116]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[17124-17142]:SwitchCase[17124-17142]"
    }, {
      "left" : "if (n.getParent().getType() != Token.OBJECTLIT)",
      "right" : "if (n.getParent().getType() != Token.OBJECTLIT)",
      "info" : "IfStatement[17151-17297]:IfStatement[17151-17297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17199-17252]:Block[17199-17252]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[17211-17242]:ExpressionStatement[17211-17242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17258-17297]:Block[17258-17297]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[17270-17287]:ExpressionStatement[17270-17287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17306-17312]:BreakStatement[17306-17312]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[17320-17340]:SwitchCase[17320-17340]"
    }, {
      "left" : "ensureTyped(t, n, ARRAY_TYPE);",
      "right" : "ensureTyped(t, n, ARRAY_TYPE);",
      "info" : "ExpressionStatement[17349-17379]:ExpressionStatement[17349-17379]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17388-17394]:BreakStatement[17388-17394]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[17402-17420]:SwitchCase[17402-17420]"
    }, {
      "left" : "if (n.getParent().getType() != Token.OBJECTLIT)",
      "right" : "if (n.getParent().getType() != Token.OBJECTLIT)",
      "info" : "IfStatement[17429-17575]:IfStatement[17429-17575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17477-17530]:Block[17477-17530]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[17489-17520]:ExpressionStatement[17489-17520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17536-17575]:Block[17536-17575]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[17548-17565]:ExpressionStatement[17548-17565]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17584-17590]:BreakStatement[17584-17590]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[17598-17616]:SwitchCase[17598-17616]"
    }, {
      "left" : "ensureTyped(t, n, REGEXP_TYPE);",
      "right" : "ensureTyped(t, n, REGEXP_TYPE);",
      "info" : "ExpressionStatement[17625-17656]:ExpressionStatement[17625-17656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17665-17671]:BreakStatement[17665-17671]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[17679-17698]:SwitchCase[17679-17698]"
    }, {
      "left" : "visitGetProp(t, n, parent);",
      "right" : "visitGetProp(t, n, parent);",
      "info" : "ExpressionStatement[17707-17734]:ExpressionStatement[17707-17734]"
    }, {
      "left" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
      "right" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
      "info" : "ExpressionStatement[17743-17842]:ExpressionStatement[17743-17842]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17851-17857]:BreakStatement[17851-17857]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[17865-17884]:SwitchCase[17865-17884]"
    }, {
      "left" : "visitGetElem(t, n);",
      "right" : "visitGetElem(t, n);",
      "info" : "ExpressionStatement[17893-17912]:ExpressionStatement[17893-17912]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18121-18138]:ExpressionStatement[18121-18138]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18147-18153]:BreakStatement[18147-18153]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[18161-18176]:SwitchCase[18161-18176]"
    }, {
      "left" : "visitVar(t, n);",
      "right" : "visitVar(t, n);",
      "info" : "ExpressionStatement[18185-18200]:ExpressionStatement[18185-18200]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18209-18226]:ExpressionStatement[18209-18226]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18235-18241]:BreakStatement[18235-18241]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[18249-18264]:SwitchCase[18249-18264]"
    }, {
      "left" : "visitNew(t, n);",
      "right" : "visitNew(t, n);",
      "info" : "ExpressionStatement[18273-18288]:ExpressionStatement[18273-18288]"
    }, {
      "left" : "typeable = true;",
      "right" : "typeable = true;",
      "info" : "ExpressionStatement[18297-18313]:ExpressionStatement[18297-18313]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18322-18328]:BreakStatement[18322-18328]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[18336-18352]:SwitchCase[18336-18352]"
    }, {
      "left" : "visitCall(t, n);",
      "right" : "visitCall(t, n);",
      "info" : "ExpressionStatement[18361-18377]:ExpressionStatement[18361-18377]"
    }, {
      "left" : "typeable = !NodeUtil.isExpressionNode(parent);",
      "right" : "typeable = !NodeUtil.isExpressionNode(parent);",
      "info" : "ExpressionStatement[18386-18432]:ExpressionStatement[18386-18432]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18441-18447]:BreakStatement[18441-18447]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[18455-18473]:SwitchCase[18455-18473]"
    }, {
      "left" : "visitReturn(t, n);",
      "right" : "visitReturn(t, n);",
      "info" : "ExpressionStatement[18482-18500]:ExpressionStatement[18482-18500]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[18509-18526]:ExpressionStatement[18509-18526]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18535-18541]:BreakStatement[18535-18541]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[18549-18564]:SwitchCase[18549-18564]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[18571-18586]:SwitchCase[18571-18586]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[18595-18620]:ExpressionStatement[18595-18620]"
    }, {
      "left" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
      "right" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
      "info" : "ExpressionStatement[18629-18714]:ExpressionStatement[18629-18714]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[18723-18754]:ExpressionStatement[18723-18754]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18763-18769]:BreakStatement[18763-18769]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[18777-18792]:SwitchCase[18777-18792]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[18801-18833]:ExpressionStatement[18801-18833]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18842-18848]:BreakStatement[18842-18848]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[18856-18872]:SwitchCase[18856-18872]"
    }, {
      "left" : "ensureTyped(t, n, VOID_TYPE);",
      "right" : "ensureTyped(t, n, VOID_TYPE);",
      "info" : "ExpressionStatement[18881-18910]:ExpressionStatement[18881-18910]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18919-18925]:BreakStatement[18919-18925]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[18933-18951]:SwitchCase[18933-18951]"
    }, {
      "left" : "ensureTyped(t, n, STRING_TYPE);",
      "right" : "ensureTyped(t, n, STRING_TYPE);",
      "info" : "ExpressionStatement[18960-18991]:ExpressionStatement[18960-18991]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19000-19006]:BreakStatement[19000-19006]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19014-19032]:SwitchCase[19014-19032]"
    }, {
      "left" : "childType = getJSType(n.getFirstChild());",
      "right" : "childType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[19041-19082]:ExpressionStatement[19041-19082]"
    }, {
      "left" : "if (!childType.matchesInt32Context())",
      "right" : "if (!childType.matchesInt32Context())",
      "info" : "IfStatement[19091-19246]:IfStatement[19091-19246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19129-19246]:Block[19129-19246]"
    }, {
      "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
      "info" : "ExpressionStatement[19141-19236]:ExpressionStatement[19141-19236]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[19255-19286]:ExpressionStatement[19255-19286]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19295-19301]:BreakStatement[19295-19301]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19309-19324]:SwitchCase[19309-19324]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19331-19346]:SwitchCase[19331-19346]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[19355-19380]:ExpressionStatement[19355-19380]"
    }, {
      "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
      "info" : "ExpressionStatement[19389-19455]:ExpressionStatement[19389-19455]"
    }, {
      "left" : "ensureTyped(t, n, NUMBER_TYPE);",
      "right" : "ensureTyped(t, n, NUMBER_TYPE);",
      "info" : "ExpressionStatement[19464-19495]:ExpressionStatement[19464-19495]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19504-19510]:BreakStatement[19504-19510]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19518-19532]:SwitchCase[19518-19532]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19539-19553]:SwitchCase[19539-19553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19554-20237]:Block[19554-20237]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[19564-19604]:ExpressionStatement[19564-19604]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[19613-19653]:ExpressionStatement[19613-19653]"
    }, {
      "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[19663-19731]:VariableDeclarationStatement[19663-19731]"
    }, {
      "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[19740-19810]:VariableDeclarationStatement[19740-19810]"
    }, {
      "left" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "right" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
      "info" : "VariableDeclarationStatement[19819-19909]:VariableDeclarationStatement[19819-19909]"
    }, {
      "left" : "if (result != TernaryValue.UNKNOWN)",
      "right" : "if (result != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[19918-20173]:IfStatement[19918-20173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19954-20173]:Block[19954-20173]"
    }, {
      "left" : "if (n.getType() == Token.NE)",
      "right" : "if (n.getType() == Token.NE)",
      "info" : "IfStatement[19966-20043]:IfStatement[19966-20043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19995-20043]:Block[19995-20043]"
    }, {
      "left" : "result = result.not();",
      "right" : "result = result.not();",
      "info" : "ExpressionStatement[20009-20031]:ExpressionStatement[20009-20031]"
    }, {
      "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
      "info" : "ExpressionStatement[20054-20163]:ExpressionStatement[20054-20163]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[20182-20214]:ExpressionStatement[20182-20214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20223-20229]:BreakStatement[20223-20229]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[20245-20261]:SwitchCase[20245-20261]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[20268-20284]:SwitchCase[20268-20284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20285-20829]:Block[20285-20829]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[20295-20335]:ExpressionStatement[20295-20335]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[20344-20384]:ExpressionStatement[20344-20384]"
    }, {
      "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[20394-20462]:VariableDeclarationStatement[20394-20462]"
    }, {
      "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[20471-20541]:VariableDeclarationStatement[20471-20541]"
    }, {
      "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
      "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
      "info" : "IfStatement[20550-20765]:IfStatement[20550-20765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20643-20765]:Block[20643-20765]"
    }, {
      "left" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
      "right" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
      "info" : "ExpressionStatement[20655-20755]:ExpressionStatement[20655-20755]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[20774-20806]:ExpressionStatement[20774-20806]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20815-20821]:BreakStatement[20815-20821]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[20837-20851]:SwitchCase[20837-20851]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[20858-20872]:SwitchCase[20858-20872]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[20879-20893]:SwitchCase[20879-20893]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[20900-20914]:SwitchCase[20900-20914]"
    }, {
      "left" : "leftType = getJSType(n.getFirstChild());",
      "right" : "leftType = getJSType(n.getFirstChild());",
      "info" : "ExpressionStatement[20923-20963]:ExpressionStatement[20923-20963]"
    }, {
      "left" : "rightType = getJSType(n.getLastChild());",
      "right" : "rightType = getJSType(n.getLastChild());",
      "info" : "ExpressionStatement[20972-21012]:ExpressionStatement[20972-21012]"
    }, {
      "left" : "if (rightType.isNumber())",
      "right" : "if (rightType.isNumber())",
      "info" : "IfStatement[21021-22072]:IfStatement[21021-22072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21047-21158]:Block[21047-21158]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
      "info" : "ExpressionStatement[21059-21148]:ExpressionStatement[21059-21148]"
    }, {
      "left" : "if (leftType.isNumber())",
      "right" : "if (leftType.isNumber())",
      "info" : "IfStatement[21164-22072]:IfStatement[21164-22072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21189-21302]:Block[21189-21302]"
    }, {
      "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
      "info" : "ExpressionStatement[21201-21292]:ExpressionStatement[21201-21292]"
    }, {
      "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
      "info" : "IfStatement[21308-22072]:IfStatement[21308-22072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21400-21428]:Block[21400-21428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21434-22072]:Block[21434-22072]"
    }, {
      "left" : "String message = \"left side of comparison\";",
      "right" : "String message = \"left side of comparison\";",
      "info" : "VariableDeclarationStatement[21645-21688]:VariableDeclarationStatement[21645-21688]"
    }, {
      "left" : "validator.expectString(t, n, leftType, message);",
      "right" : "validator.expectString(t, n, leftType, message);",
      "info" : "ExpressionStatement[21699-21747]:ExpressionStatement[21699-21747]"
    }, {
      "left" : "validator.expectNotVoid(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotVoid(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[21758-21850]:ExpressionStatement[21758-21850]"
    }, {
      "left" : "message = \"right side of comparison\";",
      "right" : "message = \"right side of comparison\";",
      "info" : "ExpressionStatement[21861-21898]:ExpressionStatement[21861-21898]"
    }, {
      "left" : "validator.expectString(t, n, rightType, message);",
      "right" : "validator.expectString(t, n, rightType, message);",
      "info" : "ExpressionStatement[21909-21958]:ExpressionStatement[21909-21958]"
    }, {
      "left" : "validator.expectNotVoid(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "right" : "validator.expectNotVoid(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[21969-22062]:ExpressionStatement[21969-22062]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[22081-22113]:ExpressionStatement[22081-22113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22122-22128]:BreakStatement[22122-22128]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[22136-22150]:SwitchCase[22136-22150]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[22159-22184]:ExpressionStatement[22159-22184]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[22193-22218]:ExpressionStatement[22193-22218]"
    }, {
      "left" : "leftType = getJSType(left);",
      "right" : "leftType = getJSType(left);",
      "info" : "ExpressionStatement[22227-22254]:ExpressionStatement[22227-22254]"
    }, {
      "left" : "rightType = getJSType(right);",
      "right" : "rightType = getJSType(right);",
      "info" : "ExpressionStatement[22263-22292]:ExpressionStatement[22263-22292]"
    }, {
      "left" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
      "right" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
      "info" : "ExpressionStatement[22301-22368]:ExpressionStatement[22301-22368]"
    }, {
      "left" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
      "right" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
      "info" : "ExpressionStatement[22377-22440]:ExpressionStatement[22377-22440]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[22449-22481]:ExpressionStatement[22449-22481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22490-22496]:BreakStatement[22490-22496]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[22504-22526]:SwitchCase[22504-22526]"
    }, {
      "left" : "left = n.getFirstChild();",
      "right" : "left = n.getFirstChild();",
      "info" : "ExpressionStatement[22535-22560]:ExpressionStatement[22535-22560]"
    }, {
      "left" : "right = n.getLastChild();",
      "right" : "right = n.getLastChild();",
      "info" : "ExpressionStatement[22569-22594]:ExpressionStatement[22569-22594]"
    }, {
      "left" : "leftType = getJSType(left);",
      "right" : "leftType = getJSType(left);",
      "info" : "ExpressionStatement[22603-22630]:ExpressionStatement[22603-22630]"
    }, {
      "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[22639-22699]:ExpressionStatement[22639-22699]"
    }, {
      "left" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
      "right" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
      "info" : "ExpressionStatement[22709-22808]:ExpressionStatement[22709-22808]"
    }, {
      "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
      "info" : "ExpressionStatement[22817-22913]:ExpressionStatement[22817-22913]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[22922-22954]:ExpressionStatement[22922-22954]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22963-22969]:BreakStatement[22963-22969]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[22977-22995]:SwitchCase[22977-22995]"
    }, {
      "left" : "visitAssign(t, n);",
      "right" : "visitAssign(t, n);",
      "info" : "ExpressionStatement[23004-23022]:ExpressionStatement[23004-23022]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[23031-23048]:ExpressionStatement[23031-23048]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23057-23063]:BreakStatement[23057-23063]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[23071-23093]:SwitchCase[23071-23093]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[23100-23122]:SwitchCase[23100-23122]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[23129-23152]:SwitchCase[23129-23152]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[23159-23181]:SwitchCase[23159-23181]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[23188-23210]:SwitchCase[23188-23210]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[23217-23241]:SwitchCase[23217-23241]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[23248-23273]:SwitchCase[23248-23273]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[23280-23305]:SwitchCase[23280-23305]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[23312-23334]:SwitchCase[23312-23334]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[23341-23363]:SwitchCase[23341-23363]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[23370-23392]:SwitchCase[23370-23392]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[23399-23414]:SwitchCase[23399-23414]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[23421-23436]:SwitchCase[23421-23436]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[23443-23459]:SwitchCase[23443-23459]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[23466-23481]:SwitchCase[23466-23481]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[23488-23503]:SwitchCase[23488-23503]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[23510-23527]:SwitchCase[23510-23527]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[23534-23552]:SwitchCase[23534-23552]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[23559-23577]:SwitchCase[23559-23577]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[23584-23599]:SwitchCase[23584-23599]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[23606-23621]:SwitchCase[23606-23621]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[23628-23643]:SwitchCase[23628-23643]"
    }, {
      "left" : "visitBinaryOperator(n.getType(), t, n);",
      "right" : "visitBinaryOperator(n.getType(), t, n);",
      "info" : "ExpressionStatement[23652-23691]:ExpressionStatement[23652-23691]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23700-23706]:BreakStatement[23700-23706]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[23714-23733]:SwitchCase[23714-23733]"
    }, {
      "left" : "if (!isReference(n.getFirstChild()))",
      "right" : "if (!isReference(n.getFirstChild()))",
      "info" : "IfStatement[23742-23826]:IfStatement[23742-23826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23779-23826]:Block[23779-23826]"
    }, {
      "left" : "report(t, n, BAD_DELETE);",
      "right" : "report(t, n, BAD_DELETE);",
      "info" : "ExpressionStatement[23791-23816]:ExpressionStatement[23791-23816]"
    }, {
      "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
      "info" : "ExpressionStatement[23835-23867]:ExpressionStatement[23835-23867]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23876-23882]:BreakStatement[23876-23882]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[23890-23906]:SwitchCase[23890-23906]"
    }, {
      "left" : "JSType switchType = getJSType(parent.getFirstChild());",
      "right" : "JSType switchType = getJSType(parent.getFirstChild());",
      "info" : "VariableDeclarationStatement[23915-23969]:VariableDeclarationStatement[23915-23969]"
    }, {
      "left" : "JSType caseType = getJSType(n.getFirstChild());",
      "right" : "JSType caseType = getJSType(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[23978-24025]:VariableDeclarationStatement[23978-24025]"
    }, {
      "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
      "info" : "ExpressionStatement[24034-24096]:ExpressionStatement[24034-24096]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[24105-24122]:ExpressionStatement[24105-24122]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24131-24137]:BreakStatement[24131-24137]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[24145-24161]:SwitchCase[24145-24161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24162-24383]:Block[24162-24383]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[24172-24203]:VariableDeclarationStatement[24172-24203]"
    }, {
      "left" : "childType = getJSType(child);",
      "right" : "childType = getJSType(child);",
      "info" : "ExpressionStatement[24212-24241]:ExpressionStatement[24212-24241]"
    }, {
      "left" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
      "right" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
      "info" : "ExpressionStatement[24250-24334]:ExpressionStatement[24250-24334]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[24343-24360]:ExpressionStatement[24343-24360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24369-24375]:BreakStatement[24369-24375]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[24391-24411]:SwitchCase[24391-24411]"
    }, {
      "left" : "visitFunction(t, n);",
      "right" : "visitFunction(t, n);",
      "info" : "ExpressionStatement[24420-24440]:ExpressionStatement[24420-24440]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24449-24455]:BreakStatement[24449-24455]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[24519-24536]:SwitchCase[24519-24536]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[24543-24565]:SwitchCase[24543-24565]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[24572-24590]:SwitchCase[24572-24590]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[24597-24614]:SwitchCase[24597-24614]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[24621-24638]:SwitchCase[24621-24638]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[24645-24660]:SwitchCase[24645-24660]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[24667-24685]:SwitchCase[24667-24685]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[24692-24715]:SwitchCase[24692-24715]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[24722-24739]:SwitchCase[24722-24739]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[24746-24763]:SwitchCase[24746-24763]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[24770-24789]:SwitchCase[24770-24789]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[24796-24816]:SwitchCase[24796-24816]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[24823-24843]:SwitchCase[24823-24843]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[24850-24867]:SwitchCase[24850-24867]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[24876-24893]:ExpressionStatement[24876-24893]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24902-24908]:BreakStatement[24902-24908]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[24965-24979]:SwitchCase[24965-24979]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[24986-25001]:SwitchCase[24986-25001]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[25008-25022]:SwitchCase[25008-25022]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[25029-25046]:SwitchCase[25029-25046]"
    }, {
      "left" : "typeable = false;",
      "right" : "typeable = false;",
      "info" : "ExpressionStatement[25055-25072]:ExpressionStatement[25055-25072]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25081-25087]:BreakStatement[25081-25087]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[25153-25168]:SwitchCase[25153-25168]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[25175-25191]:SwitchCase[25175-25191]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[25198-25219]:SwitchCase[25198-25219]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[25226-25240]:SwitchCase[25226-25240]"
    }, {
      "left" : "if (n.getJSType() != null)",
      "right" : "if (n.getJSType() != null)",
      "info" : "IfStatement[25249-25669]:IfStatement[25249-25669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25276-25352]:Block[25276-25352]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[25324-25342]:ExpressionStatement[25324-25342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25358-25669]:Block[25358-25669]"
    }, {
      "left" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
      "right" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
      "info" : "IfStatement[25449-25659]:IfStatement[25449-25659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25545-25609]:Block[25545-25609]"
    }, {
      "left" : "ensureTyped(t, n, parent.getJSType());",
      "right" : "ensureTyped(t, n, parent.getJSType());",
      "info" : "ExpressionStatement[25559-25597]:ExpressionStatement[25559-25597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25615-25659]:Block[25615-25659]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[25629-25647]:ExpressionStatement[25629-25647]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25678-25684]:BreakStatement[25678-25684]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25692-25700]:SwitchCase[25692-25700]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
      "info" : "ExpressionStatement[25709-25765]:ExpressionStatement[25709-25765]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[25774-25792]:ExpressionStatement[25774-25792]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25801-25807]:BreakStatement[25801-25807]"
    }, {
      "left" : "typeable = typeable && !inExterns;",
      "right" : "typeable = typeable && !inExterns;",
      "info" : "ExpressionStatement[25896-25930]:ExpressionStatement[25896-25930]"
    }, {
      "left" : "if (typeable)",
      "right" : "if (typeable)",
      "info" : "IfStatement[25936-25995]:IfStatement[25936-25995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25950-25995]:Block[25950-25995]"
    }, {
      "left" : "doPercentTypedAccounting(t, n);",
      "right" : "doPercentTypedAccounting(t, n);",
      "info" : "ExpressionStatement[25958-25989]:ExpressionStatement[25958-25989]"
    }, {
      "left" : "checkNoTypeCheckSection(n, false);",
      "right" : "checkNoTypeCheckSection(n, false);",
      "info" : "ExpressionStatement[26001-26035]:ExpressionStatement[26001-26035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26212-26533]:Block[26212-26533]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[26218-26246]:VariableDeclarationStatement[26218-26246]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[26251-26529]:IfStatement[26251-26529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26269-26295]:Block[26269-26295]"
    }, {
      "left" : "nullCount++;",
      "right" : "nullCount++;",
      "info" : "ExpressionStatement[26277-26289]:ExpressionStatement[26277-26289]"
    }, {
      "left" : "if (type.isUnknownType())",
      "right" : "if (type.isUnknownType())",
      "info" : "IfStatement[26301-26529]:IfStatement[26301-26529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26327-26496]:Block[26327-26496]"
    }, {
      "left" : "if (reportUnknownTypes.isOn())",
      "right" : "if (reportUnknownTypes.isOn())",
      "info" : "IfStatement[26335-26468]:IfStatement[26335-26468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26366-26468]:Block[26366-26468]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
      "right" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
      "info" : "ExpressionStatement[26376-26460]:ExpressionStatement[26376-26460]"
    }, {
      "left" : "unknownCount++;",
      "right" : "unknownCount++;",
      "info" : "ExpressionStatement[26475-26490]:ExpressionStatement[26475-26490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26502-26529]:Block[26502-26529]"
    }, {
      "left" : "typedCount++;",
      "right" : "typedCount++;",
      "info" : "ExpressionStatement[26510-26523]:ExpressionStatement[26510-26523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26927-30637]:Block[26927-30637]"
    }, {
      "left" : "JSDocInfo info = assign.getJSDocInfo();",
      "right" : "JSDocInfo info = assign.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[26933-26972]:VariableDeclarationStatement[26933-26972]"
    }, {
      "left" : "Node lvalue = assign.getFirstChild();",
      "right" : "Node lvalue = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[26977-27014]:VariableDeclarationStatement[26977-27014]"
    }, {
      "left" : "Node rvalue = assign.getLastChild();",
      "right" : "Node rvalue = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[27019-27055]:VariableDeclarationStatement[27019-27055]"
    }, {
      "left" : "if (lvalue.getType() == Token.GETPROP)",
      "right" : "if (lvalue.getType() == Token.GETPROP)",
      "info" : "IfStatement[27061-30287]:IfStatement[27061-30287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27100-29982]:Block[27100-29982]"
    }, {
      "left" : "Node object = lvalue.getFirstChild();",
      "right" : "Node object = lvalue.getFirstChild();",
      "info" : "VariableDeclarationStatement[27108-27145]:VariableDeclarationStatement[27108-27145]"
    }, {
      "left" : "JSType objectJsType = getJSType(object);",
      "right" : "JSType objectJsType = getJSType(object);",
      "info" : "VariableDeclarationStatement[27152-27192]:VariableDeclarationStatement[27152-27192]"
    }, {
      "left" : "String property = lvalue.getLastChild().getString();",
      "right" : "String property = lvalue.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[27199-27251]:VariableDeclarationStatement[27199-27251]"
    }, {
      "left" : "if (object.getType() == Token.GETPROP)",
      "right" : "if (object.getType() == Token.GETPROP)",
      "info" : "IfStatement[27379-27679]:IfStatement[27379-27679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27418-27679]:Block[27418-27679]"
    }, {
      "left" : "JSType jsType = getJSType(object.getFirstChild());",
      "right" : "JSType jsType = getJSType(object.getFirstChild());",
      "info" : "VariableDeclarationStatement[27428-27478]:VariableDeclarationStatement[27428-27478]"
    }, {
      "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[27487-27671]:IfStatement[27487-27671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27582-27671]:Block[27582-27671]"
    }, {
      "left" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
      "right" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
      "info" : "ExpressionStatement[27594-27661]:ExpressionStatement[27594-27661]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[27731-27943]:IfStatement[27731-27943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27767-27943]:Block[27767-27943]"
    }, {
      "left" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
      "right" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
      "info" : "ExpressionStatement[27777-27919]:ExpressionStatement[27777-27919]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27928-27935]:ReturnStatement[27928-27935]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[27995-28206]:IfStatement[27995-28206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28044-28206]:Block[28044-28206]"
    }, {
      "left" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
      "right" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
      "info" : "ExpressionStatement[28054-28182]:ExpressionStatement[28054-28182]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28191-28198]:ReturnStatement[28191-28198]"
    }, {
      "left" : "if (property.equals(\"prototype\"))",
      "right" : "if (property.equals(\"prototype\"))",
      "info" : "IfStatement[28247-28724]:IfStatement[28247-28724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28281-28724]:Block[28281-28724]"
    }, {
      "left" : "if (objectJsType instanceof FunctionType)",
      "right" : "if (objectJsType instanceof FunctionType)",
      "info" : "IfStatement[28291-28700]:IfStatement[28291-28700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28333-28634]:Block[28333-28634]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) objectJsType;",
      "right" : "FunctionType functionType = (FunctionType) objectJsType;",
      "info" : "VariableDeclarationStatement[28345-28401]:VariableDeclarationStatement[28345-28401]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[28412-28624]:IfStatement[28412-28624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28446-28624]:Block[28446-28624]"
    }, {
      "left" : "JSType rvalueType = rvalue.getJSType();",
      "right" : "JSType rvalueType = rvalue.getJSType();",
      "info" : "VariableDeclarationStatement[28460-28499]:VariableDeclarationStatement[28460-28499]"
    }, {
      "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
      "info" : "ExpressionStatement[28512-28612]:ExpressionStatement[28512-28612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28640-28700]:Block[28640-28700]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28709-28716]:ReturnStatement[28709-28716]"
    }, {
      "left" : "if (object.getType() == Token.GETPROP)",
      "right" : "if (object.getType() == Token.GETPROP)",
      "info" : "IfStatement[28774-29477]:IfStatement[28774-29477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28813-29477]:Block[28813-29477]"
    }, {
      "left" : "Node object2 = object.getFirstChild();",
      "right" : "Node object2 = object.getFirstChild();",
      "info" : "VariableDeclarationStatement[28823-28861]:VariableDeclarationStatement[28823-28861]"
    }, {
      "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
      "info" : "VariableDeclarationStatement[28870-28936]:VariableDeclarationStatement[28870-28936]"
    }, {
      "left" : "if (\"prototype\".equals(property2))",
      "right" : "if (\"prototype\".equals(property2))",
      "info" : "IfStatement[28946-29469]:IfStatement[28946-29469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28981-29469]:Block[28981-29469]"
    }, {
      "left" : "JSType jsType = object2.getJSType();",
      "right" : "JSType jsType = object2.getJSType();",
      "info" : "VariableDeclarationStatement[28993-29029]:VariableDeclarationStatement[28993-29029]"
    }, {
      "left" : "if (jsType instanceof FunctionType)",
      "right" : "if (jsType instanceof FunctionType)",
      "info" : "IfStatement[29040-29441]:IfStatement[29040-29441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29076-29371]:Block[29076-29371]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) jsType;",
      "right" : "FunctionType functionType = (FunctionType) jsType;",
      "info" : "VariableDeclarationStatement[29090-29140]:VariableDeclarationStatement[29090-29140]"
    }, {
      "left" : "if (functionType.isConstructor() || functionType.isInterface())",
      "right" : "if (functionType.isConstructor() || functionType.isInterface())",
      "info" : "IfStatement[29153-29359]:IfStatement[29153-29359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29217-29359]:Block[29217-29359]"
    }, {
      "left" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
      "right" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
      "info" : "ExpressionStatement[29233-29345]:ExpressionStatement[29233-29345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29377-29441]:Block[29377-29441]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29452-29459]:ReturnStatement[29452-29459]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
      "info" : "VariableDeclarationStatement[29517-29607]:VariableDeclarationStatement[29517-29607]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[29614-29976]:IfStatement[29614-29976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29632-29976]:Block[29632-29976]"
    }, {
      "left" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
      "right" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
      "info" : "IfStatement[29642-29952]:IfStatement[29642-29952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29783-29952]:Block[29783-29952]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
      "right" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
      "info" : "ExpressionStatement[29795-29942]:ExpressionStatement[29795-29942]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29961-29968]:ReturnStatement[29961-29968]"
    }, {
      "left" : "if (lvalue.getType() == Token.NAME)",
      "right" : "if (lvalue.getType() == Token.NAME)",
      "info" : "IfStatement[29988-30287]:IfStatement[29988-30287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30024-30287]:Block[30024-30287]"
    }, {
      "left" : "JSType rvalueType = getJSType(assign.getLastChild());",
      "right" : "JSType rvalueType = getJSType(assign.getLastChild());",
      "info" : "VariableDeclarationStatement[30074-30127]:VariableDeclarationStatement[30074-30127]"
    }, {
      "left" : "Var var = t.getScope().getVar(lvalue.getString());",
      "right" : "Var var = t.getScope().getVar(lvalue.getString());",
      "info" : "VariableDeclarationStatement[30134-30184]:VariableDeclarationStatement[30134-30184]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[30191-30281]:IfStatement[30191-30281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30208-30281]:Block[30208-30281]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[30218-30273]:IfStatement[30218-30273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30244-30273]:Block[30244-30273]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30256-30263]:ReturnStatement[30256-30263]"
    }, {
      "left" : "JSType leftType = getJSType(lvalue);",
      "right" : "JSType leftType = getJSType(lvalue);",
      "info" : "VariableDeclarationStatement[30318-30354]:VariableDeclarationStatement[30318-30354]"
    }, {
      "left" : "Node rightChild = assign.getLastChild();",
      "right" : "Node rightChild = assign.getLastChild();",
      "info" : "VariableDeclarationStatement[30359-30399]:VariableDeclarationStatement[30359-30399]"
    }, {
      "left" : "JSType rightType = getJSType(rightChild);",
      "right" : "JSType rightType = getJSType(rightChild);",
      "info" : "VariableDeclarationStatement[30404-30445]:VariableDeclarationStatement[30404-30445]"
    }, {
      "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
      "info" : "IfStatement[30450-30633]:IfStatement[30450-30633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30542-30590]:Block[30542-30590]"
    }, {
      "left" : "ensureTyped(t, assign, rightType);",
      "right" : "ensureTyped(t, assign, rightType);",
      "info" : "ExpressionStatement[30550-30584]:ExpressionStatement[30550-30584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30596-30633]:Block[30596-30633]"
    }, {
      "left" : "ensureTyped(t, assign);",
      "right" : "ensureTyped(t, assign);",
      "info" : "ExpressionStatement[30604-30627]:ExpressionStatement[30604-30627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30824-31064]:Block[30824-31064]"
    }, {
      "left" : "for (; type != null; type = type.getImplicitPrototype())",
      "right" : "for (; type != null; type = type.getImplicitPrototype())",
      "info" : "ForStatement[30830-31042]:ForStatement[30830-31042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30887-31042]:Block[30887-31042]"
    }, {
      "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
      "info" : "VariableDeclarationStatement[30895-30950]:VariableDeclarationStatement[30895-30950]"
    }, {
      "left" : "if (docInfo != null && docInfo.isImplicitCast())",
      "right" : "if (docInfo != null && docInfo.isImplicitCast())",
      "info" : "IfStatement[30957-31036]:IfStatement[30957-31036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31006-31036]:Block[31006-31036]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31016-31028]:ReturnStatement[31016-31028]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31047-31060]:ReturnStatement[31047-31060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31485-35216]:Block[31485-35216]"
    }, {
      "left" : "if (ctorType.hasUnknownSupertype())",
      "right" : "if (ctorType.hasUnknownSupertype())",
      "info" : "IfStatement[31830-31887]:IfStatement[31830-31887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31866-31887]:Block[31866-31887]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31874-31881]:ReturnStatement[31874-31881]"
    }, {
      "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[31893-31955]:VariableDeclarationStatement[31893-31955]"
    }, {
      "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
      "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[31960-32074]:VariableDeclarationStatement[31960-32074]"
    }, {
      "left" : "boolean declaredOverride = info != null && info.isOverride();",
      "right" : "boolean declaredOverride = info != null && info.isOverride();",
      "info" : "VariableDeclarationStatement[32079-32140]:VariableDeclarationStatement[32079-32140]"
    }, {
      "left" : "boolean foundInterfaceProperty = false;",
      "right" : "boolean foundInterfaceProperty = false;",
      "info" : "VariableDeclarationStatement[32146-32185]:VariableDeclarationStatement[32146-32185]"
    }, {
      "left" : "if (ctorType.isConstructor())",
      "right" : "if (ctorType.isConstructor())",
      "info" : "IfStatement[32190-33721]:IfStatement[32190-33721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32220-33721]:Block[32220-33721]"
    }, {
      "left" : "for (JSType implementedInterface : ctorType.getImplementedInterfaces())",
      "right" : "for (JSType implementedInterface : ctorType.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[32228-33715]:EnhancedForStatement[32228-33715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32300-33715]:Block[32300-33715]"
    }, {
      "left" : "if (implementedInterface.isUnknownType())",
      "right" : "if (implementedInterface.isUnknownType())",
      "info" : "IfStatement[32310-32383]:IfStatement[32310-32383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32352-32383]:Block[32352-32383]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[32364-32373]:ContinueStatement[32364-32373]"
    }, {
      "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
      "info" : "VariableDeclarationStatement[32392-32486]:VariableDeclarationStatement[32392-32486]"
    }, {
      "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
      "info" : "VariableDeclarationStatement[32495-32593]:VariableDeclarationStatement[32495-32593]"
    }, {
      "left" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
      "right" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
      "info" : "ExpressionStatement[32602-32674]:ExpressionStatement[32602-32674]"
    }, {
      "left" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
      "right" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
      "info" : "IfStatement[32683-33085]:IfStatement[32683-33085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32774-33085]:Block[32774-33085]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
      "info" : "ExpressionStatement[32888-33075]:ExpressionStatement[32888-33075]"
    }, {
      "left" : "if (!declaredOverride)",
      "right" : "if (!declaredOverride)",
      "info" : "IfStatement[33094-33148]:IfStatement[33094-33148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33117-33148]:Block[33117-33148]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33129-33138]:ContinueStatement[33129-33138]"
    }, {
      "left" : "if (interfaceHasProperty)",
      "right" : "if (interfaceHasProperty)",
      "info" : "IfStatement[33224-33707]:IfStatement[33224-33707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33250-33707]:Block[33250-33707]"
    }, {
      "left" : "JSType interfacePropType =\n              interfaceType.getPrototype().getPropertyType(propertyName);",
      "right" : "JSType interfacePropType =\n              interfaceType.getPrototype().getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[33262-33362]:VariableDeclarationStatement[33262-33362]"
    }, {
      "left" : "if (!propertyType.canAssignTo(interfacePropType))",
      "right" : "if (!propertyType.canAssignTo(interfacePropType))",
      "info" : "IfStatement[33373-33697]:IfStatement[33373-33697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33423-33697]:Block[33423-33697]"
    }, {
      "left" : "compiler.report(t.makeError(n,\n                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,\n                interfaceType.getTopMostDefiningType(propertyName).toString(),\n                interfacePropType.toString(), propertyType.toString()));",
      "right" : "compiler.report(t.makeError(n,\n                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,\n                interfaceType.getTopMostDefiningType(propertyName).toString(),\n                interfacePropType.toString(), propertyType.toString()));",
      "info" : "ExpressionStatement[33437-33685]:ExpressionStatement[33437-33685]"
    }, {
      "left" : "if (!declaredOverride && !superClassHasProperty)",
      "right" : "if (!declaredOverride && !superClassHasProperty)",
      "info" : "IfStatement[33727-33857]:IfStatement[33727-33857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33776-33857]:Block[33776-33857]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[33844-33851]:ReturnStatement[33844-33851]"
    }, {
      "left" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "right" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
      "info" : "VariableDeclarationStatement[33863-33975]:VariableDeclarationStatement[33863-33975]"
    }, {
      "left" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
      "right" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
      "info" : "IfStatement[33980-34349]:IfStatement[33980-34349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34096-34349]:Block[34096-34349]"
    }, {
      "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
      "info" : "ExpressionStatement[34198-34343]:ExpressionStatement[34198-34343]"
    }, {
      "left" : "if (!declaredOverride)",
      "right" : "if (!declaredOverride)",
      "info" : "IfStatement[34354-34437]:IfStatement[34354-34437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34377-34437]:Block[34377-34437]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34424-34431]:ReturnStatement[34424-34431]"
    }, {
      "left" : "if (superClassHasProperty)",
      "right" : "if (superClassHasProperty)",
      "info" : "IfStatement[34505-35212]:IfStatement[34505-35212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34532-34974]:Block[34532-34974]"
    }, {
      "left" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
      "right" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
      "info" : "VariableDeclarationStatement[34586-34680]:VariableDeclarationStatement[34586-34680]"
    }, {
      "left" : "if (!propertyType.canAssignTo(superClassPropType))",
      "right" : "if (!propertyType.canAssignTo(superClassPropType))",
      "info" : "IfStatement[34687-34968]:IfStatement[34687-34968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34738-34968]:Block[34738-34968]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
      "info" : "ExpressionStatement[34748-34960]:ExpressionStatement[34748-34960]"
    }, {
      "left" : "if (!foundInterfaceProperty)",
      "right" : "if (!foundInterfaceProperty)",
      "info" : "IfStatement[34980-35212]:IfStatement[34980-35212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35009-35212]:Block[35009-35212]"
    }, {
      "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
      "info" : "ExpressionStatement[35078-35206]:ExpressionStatement[35078-35206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35468-36547]:Block[35468-36547]"
    }, {
      "left" : "JSType rvalueType = getJSType(rvalue);",
      "right" : "JSType rvalueType = getJSType(rvalue);",
      "info" : "VariableDeclarationStatement[35475-35513]:VariableDeclarationStatement[35475-35513]"
    }, {
      "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
      "info" : "VariableDeclarationStatement[35712-35803]:VariableDeclarationStatement[35712-35803]"
    }, {
      "left" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
      "right" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
      "info" : "IfStatement[35808-36284]:IfStatement[35808-36284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35951-36284]:Block[35951-36284]"
    }, {
      "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
      "info" : "VariableDeclarationStatement[36034-36148]:VariableDeclarationStatement[36034-36148]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
      "info" : "ExpressionStatement[36155-36278]:ExpressionStatement[36155-36278]"
    }, {
      "left" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "right" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
      "info" : "IfStatement[36290-36543]:IfStatement[36290-36543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36417-36543]:Block[36417-36543]"
    }, {
      "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
      "info" : "ExpressionStatement[36425-36537]:ExpressionStatement[36425-36537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36836-37000]:Block[36836-37000]"
    }, {
      "left" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
      "right" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
      "info" : "ExpressionStatement[36896-36996]:ExpressionStatement[36896-36996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37377-38409]:Block[37377-38409]"
    }, {
      "left" : "int parentNodeType = parent.getType();",
      "right" : "int parentNodeType = parent.getType();",
      "info" : "VariableDeclarationStatement[37835-37873]:VariableDeclarationStatement[37835-37873]"
    }, {
      "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
      "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
      "info" : "IfStatement[37878-38061]:IfStatement[37878-38061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38034-38061]:Block[38034-38061]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38042-38055]:ReturnStatement[38042-38055]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[38067-38095]:VariableDeclarationStatement[38067-38095]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[38100-38359]:IfStatement[38100-38359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38118-38359]:Block[38118-38359]"
    }, {
      "left" : "type = getNativeType(UNKNOWN_TYPE);",
      "right" : "type = getNativeType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[38126-38161]:ExpressionStatement[38126-38161]"
    }, {
      "left" : "Var var = t.getScope().getVar(n.getString());",
      "right" : "Var var = t.getScope().getVar(n.getString());",
      "info" : "VariableDeclarationStatement[38168-38213]:VariableDeclarationStatement[38168-38213]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[38220-38353]:IfStatement[38220-38353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38237-38353]:Block[38237-38353]"
    }, {
      "left" : "JSType varType = var.getType();",
      "right" : "JSType varType = var.getType();",
      "info" : "VariableDeclarationStatement[38247-38278]:VariableDeclarationStatement[38247-38278]"
    }, {
      "left" : "if (varType != null)",
      "right" : "if (varType != null)",
      "info" : "IfStatement[38287-38345]:IfStatement[38287-38345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38308-38345]:Block[38308-38345]"
    }, {
      "left" : "type = varType;",
      "right" : "type = varType;",
      "info" : "ExpressionStatement[38320-38335]:ExpressionStatement[38320-38335]"
    }, {
      "left" : "ensureTyped(t, n, type);",
      "right" : "ensureTyped(t, n, type);",
      "info" : "ExpressionStatement[38364-38388]:ExpressionStatement[38364-38388]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38393-38405]:ReturnStatement[38393-38405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38751-39731]:Block[38751-39731]"
    }, {
      "left" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
      "right" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[38968-39052]:IfStatement[38968-39052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39031-39052]:Block[39031-39052]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39039-39046]:ReturnStatement[39039-39046]"
    }, {
      "left" : "Node property = n.getLastChild();",
      "right" : "Node property = n.getLastChild();",
      "info" : "VariableDeclarationStatement[39264-39297]:VariableDeclarationStatement[39264-39297]"
    }, {
      "left" : "Node objNode = n.getFirstChild();",
      "right" : "Node objNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[39302-39335]:VariableDeclarationStatement[39302-39335]"
    }, {
      "left" : "JSType childType = getJSType(objNode);",
      "right" : "JSType childType = getJSType(objNode);",
      "info" : "VariableDeclarationStatement[39340-39378]:VariableDeclarationStatement[39340-39378]"
    }, {
      "left" : "if (!validator.expectNotVoid(t, n, childType,\n            \"undefined has no properties\", getNativeType(OBJECT_TYPE)))",
      "right" : "if (!validator.expectNotVoid(t, n, childType,\n            \"undefined has no properties\", getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[39475-39639]:IfStatement[39475-39639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39593-39639]:Block[39593-39639]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[39601-39619]:ExpressionStatement[39601-39619]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39626-39633]:ReturnStatement[39626-39633]"
    }, {
      "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
      "info" : "ExpressionStatement[39645-39704]:ExpressionStatement[39645-39704]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[39709-39727]:ExpressionStatement[39709-39727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39901-40826]:Block[39901-40826]"
    }, {
      "left" : "ObjectType objectType = childType.dereference();",
      "right" : "ObjectType objectType = childType.dereference();",
      "info" : "VariableDeclarationStatement[39907-39955]:VariableDeclarationStatement[39907-39955]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[39960-40822]:IfStatement[39960-40822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39984-40672]:Block[39984-40672]"
    }, {
      "left" : "JSType propType = getJSType(n);",
      "right" : "JSType propType = getJSType(n);",
      "info" : "VariableDeclarationStatement[39992-40023]:VariableDeclarationStatement[39992-40023]"
    }, {
      "left" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "right" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
      "info" : "IfStatement[40030-40666]:IfStatement[40030-40666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40216-40666]:Block[40216-40666]"
    }, {
      "left" : "if (objectType instanceof EnumType)",
      "right" : "if (objectType instanceof EnumType)",
      "info" : "IfStatement[40226-40658]:IfStatement[40226-40658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40262-40332]:Block[40262-40332]"
    }, {
      "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
      "info" : "ExpressionStatement[40274-40322]:ExpressionStatement[40274-40322]"
    }, {
      "left" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
      "right" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
      "info" : "IfStatement[40338-40658]:IfStatement[40338-40658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40430-40658]:Block[40430-40658]"
    }, {
      "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
      "info" : "IfStatement[40442-40648]:IfStatement[40442-40648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40504-40648]:Block[40504-40648]"
    }, {
      "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
      "info" : "ExpressionStatement[40518-40636]:ExpressionStatement[40518-40636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40678-40822]:Block[40678-40822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41082-41800]:Block[41082-41800]"
    }, {
      "left" : "Node parent = getProp.getParent();",
      "right" : "Node parent = getProp.getParent();",
      "info" : "VariableDeclarationStatement[41088-41122]:VariableDeclarationStatement[41088-41122]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
      "info" : "SwitchStatement[41127-41778]:SwitchStatement[41127-41778]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[41161-41177]:SwitchCase[41161-41177]"
    }, {
      "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
      "info" : "ReturnStatement[41186-41304]:ReturnStatement[41186-41304]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[41312-41326]:SwitchCase[41312-41326]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[41333-41350]:SwitchCase[41333-41350]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[41357-41371]:SwitchCase[41357-41371]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[41378-41393]:SwitchCase[41378-41393]"
    }, {
      "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
      "info" : "ReturnStatement[41402-41460]:ReturnStatement[41402-41460]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[41468-41490]:SwitchCase[41468-41490]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[41497-41515]:SwitchCase[41497-41515]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41524-41536]:ReturnStatement[41524-41536]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[41544-41559]:SwitchCase[41544-41559]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[41566-41582]:SwitchCase[41566-41582]"
    }, {
      "left" : "return parent.getFirstChild() == getProp;",
      "right" : "return parent.getFirstChild() == getProp;",
      "info" : "ReturnStatement[41591-41632]:ReturnStatement[41591-41632]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[41640-41655]:SwitchCase[41640-41655]"
    }, {
      "left" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
      "right" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
      "info" : "ReturnStatement[41664-41772]:ReturnStatement[41664-41772]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41783-41796]:ReturnStatement[41783-41796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42081-42252]:Block[42081-42252]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[42087-42117]:VariableDeclarationStatement[42087-42117]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[42122-42152]:VariableDeclarationStatement[42122-42152]"
    }, {
      "left" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
      "right" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
      "info" : "ExpressionStatement[42157-42225]:ExpressionStatement[42157-42225]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[42230-42248]:ExpressionStatement[42230-42248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42525-43814]:Block[42525-43814]"
    }, {
      "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
      "info" : "VariableDeclarationStatement[42693-42755]:VariableDeclarationStatement[42693-42755]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[42760-43810]:EnhancedForStatement[42760-43810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42791-43810]:Block[42791-43810]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[42799-42833]:VariableDeclarationStatement[42799-42833]"
    }, {
      "left" : "Var var = t.getScope().getVar(name.getString());",
      "right" : "Var var = t.getScope().getVar(name.getString());",
      "info" : "VariableDeclarationStatement[42910-42958]:VariableDeclarationStatement[42910-42958]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[42966-43804]:IfStatement[42966-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42985-43804]:Block[42985-43804]"
    }, {
      "left" : "JSType valueType = getJSType(value);",
      "right" : "JSType valueType = getJSType(value);",
      "info" : "VariableDeclarationStatement[42995-43031]:VariableDeclarationStatement[42995-43031]"
    }, {
      "left" : "JSType nameType = var.getType();",
      "right" : "JSType nameType = var.getType();",
      "info" : "VariableDeclarationStatement[43040-43072]:VariableDeclarationStatement[43040-43072]"
    }, {
      "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
      "info" : "ExpressionStatement[43081-43152]:ExpressionStatement[43081-43152]"
    }, {
      "left" : "JSDocInfo info = name.getJSDocInfo();",
      "right" : "JSDocInfo info = name.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[43162-43199]:VariableDeclarationStatement[43162-43199]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[43208-43263]:IfStatement[43208-43263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43226-43263]:Block[43226-43263]"
    }, {
      "left" : "info = varInfo;",
      "right" : "info = varInfo;",
      "info" : "ExpressionStatement[43238-43253]:ExpressionStatement[43238-43253]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[43272-43796]:IfStatement[43272-43796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43321-43583]:Block[43321-43583]"
    }, {
      "left" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
      "right" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
      "info" : "ExpressionStatement[43447-43573]:ExpressionStatement[43447-43573]"
    }, {
      "left" : "if (var.isTypeInferred())",
      "right" : "if (var.isTypeInferred())",
      "info" : "IfStatement[43589-43796]:IfStatement[43589-43796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43615-43669]:Block[43615-43669]"
    }, {
      "left" : "ensureTyped(t, name, valueType);",
      "right" : "ensureTyped(t, name, valueType);",
      "info" : "ExpressionStatement[43627-43659]:ExpressionStatement[43627-43659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43675-43796]:Block[43675-43796]"
    }, {
      "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
      "info" : "ExpressionStatement[43687-43786]:ExpressionStatement[43687-43786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43901-44717]:Block[43901-44717]"
    }, {
      "left" : "Node constructor = n.getFirstChild();",
      "right" : "Node constructor = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[43907-43944]:VariableDeclarationStatement[43907-43944]"
    }, {
      "left" : "FunctionType type = getFunctionType(constructor);",
      "right" : "FunctionType type = getFunctionType(constructor);",
      "info" : "VariableDeclarationStatement[43949-43998]:VariableDeclarationStatement[43949-43998]"
    }, {
      "left" : "if (type != null && type.isConstructor())",
      "right" : "if (type != null && type.isConstructor())",
      "info" : "IfStatement[44003-44713]:IfStatement[44003-44713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44045-44139]:Block[44045-44139]"
    }, {
      "left" : "visitParameterList(t, n, type);",
      "right" : "visitParameterList(t, n, type);",
      "info" : "ExpressionStatement[44053-44084]:ExpressionStatement[44053-44084]"
    }, {
      "left" : "ensureTyped(t, n, type.getInstanceType());",
      "right" : "ensureTyped(t, n, type.getInstanceType());",
      "info" : "ExpressionStatement[44091-44133]:ExpressionStatement[44091-44133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44145-44713]:Block[44145-44713]"
    }, {
      "left" : "if (constructor.getType() != Token.GETPROP)",
      "right" : "if (constructor.getType() != Token.GETPROP)",
      "info" : "IfStatement[44210-44682]:IfStatement[44210-44682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44254-44682]:Block[44254-44682]"
    }, {
      "left" : "Node line;",
      "right" : "Node line;",
      "info" : "VariableDeclarationStatement[44469-44479]:VariableDeclarationStatement[44469-44479]"
    }, {
      "left" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
      "right" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
      "info" : "IfStatement[44488-44630]:IfStatement[44488-44630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44552-44583]:Block[44552-44583]"
    }, {
      "left" : "line = n;",
      "right" : "line = n;",
      "info" : "ExpressionStatement[44564-44573]:ExpressionStatement[44564-44573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44589-44630]:Block[44589-44630]"
    }, {
      "left" : "line = constructor;",
      "right" : "line = constructor;",
      "info" : "ExpressionStatement[44601-44620]:ExpressionStatement[44601-44620]"
    }, {
      "left" : "report(t, line, NOT_A_CONSTRUCTOR);",
      "right" : "report(t, line, NOT_A_CONSTRUCTOR);",
      "info" : "ExpressionStatement[44639-44674]:ExpressionStatement[44639-44674]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[44689-44707]:ExpressionStatement[44689-44707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45014-46529]:Block[45014-46529]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[45020-45054]:VariableDeclarationStatement[45020-45054]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) n.getJSType();",
      "right" : "FunctionType functionType = (FunctionType) n.getJSType();",
      "info" : "VariableDeclarationStatement[45060-45117]:VariableDeclarationStatement[45060-45117]"
    }, {
      "left" : "String functionPrivateName = n.getFirstChild().getString();",
      "right" : "String functionPrivateName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[45122-45181]:VariableDeclarationStatement[45122-45181]"
    }, {
      "left" : "if (functionType.isInterface() || functionType.isConstructor())",
      "right" : "if (functionType.isInterface() || functionType.isConstructor())",
      "info" : "IfStatement[45186-46525]:IfStatement[45186-46525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45250-46525]:Block[45250-46525]"
    }, {
      "left" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
      "right" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
      "info" : "VariableDeclarationStatement[45258-45368]:VariableDeclarationStatement[45258-45368]"
    }, {
      "left" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isConstructor() && functionType.isInterface() ||\n           baseConstructor.isInterface() && functionType.isConstructor()))",
      "right" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isConstructor() && functionType.isInterface() ||\n           baseConstructor.isInterface() && functionType.isConstructor()))",
      "info" : "IfStatement[45375-45736]:IfStatement[45375-45736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45625-45736]:Block[45625-45736]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
      "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
      "info" : "ExpressionStatement[45635-45728]:ExpressionStatement[45635-45728]"
    }, {
      "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
      "info" : "EnhancedForStatement[45744-46396]:EnhancedForStatement[45744-46396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45813-46396]:Block[45813-46396]"
    }, {
      "left" : "boolean badImplementedType = false;",
      "right" : "boolean badImplementedType = false;",
      "info" : "VariableDeclarationStatement[45823-45858]:VariableDeclarationStatement[45823-45858]"
    }, {
      "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
      "info" : "VariableDeclarationStatement[45867-45928]:VariableDeclarationStatement[45867-45928]"
    }, {
      "left" : "if (baseInterfaceObj != null)",
      "right" : "if (baseInterfaceObj != null)",
      "info" : "IfStatement[45937-46277]:IfStatement[45937-46277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45967-46223]:Block[45967-46223]"
    }, {
      "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
      "info" : "VariableDeclarationStatement[45979-46063]:VariableDeclarationStatement[45979-46063]"
    }, {
      "left" : "if (interfaceConstructor != null &&\n              !interfaceConstructor.isInterface())",
      "right" : "if (interfaceConstructor != null &&\n              !interfaceConstructor.isInterface())",
      "info" : "IfStatement[46074-46213]:IfStatement[46074-46213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46161-46213]:Block[46161-46213]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[46175-46201]:ExpressionStatement[46175-46201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46229-46277]:Block[46229-46277]"
    }, {
      "left" : "badImplementedType = true;",
      "right" : "badImplementedType = true;",
      "info" : "ExpressionStatement[46241-46267]:ExpressionStatement[46241-46267]"
    }, {
      "left" : "if (badImplementedType)",
      "right" : "if (badImplementedType)",
      "info" : "IfStatement[46286-46388]:IfStatement[46286-46388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46310-46388]:Block[46310-46388]"
    }, {
      "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
      "info" : "ExpressionStatement[46322-46378]:ExpressionStatement[46322-46378]"
    }, {
      "left" : "if (functionType.isConstructor())",
      "right" : "if (functionType.isConstructor())",
      "info" : "IfStatement[46403-46519]:IfStatement[46403-46519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46437-46519]:Block[46437-46519]"
    }, {
      "left" : "validator.expectAllInterfacePropertiesImplemented(functionType);",
      "right" : "validator.expectAllInterfacePropertiesImplemented(functionType);",
      "info" : "ExpressionStatement[46447-46511]:ExpressionStatement[46447-46511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46804-47876]:Block[46804-47876]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[46810-46841]:VariableDeclarationStatement[46810-46841]"
    }, {
      "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[46846-46913]:VariableDeclarationStatement[46846-46913]"
    }, {
      "left" : "if (!childType.canBeCalled())",
      "right" : "if (!childType.canBeCalled())",
      "info" : "IfStatement[46919-47051]:IfStatement[46919-47051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46949-47051]:Block[46949-47051]"
    }, {
      "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[46957-47006]:ExpressionStatement[46957-47006]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[47013-47031]:ExpressionStatement[47013-47031]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47038-47045]:ReturnStatement[47038-47045]"
    }, {
      "left" : "if (childType instanceof FunctionType)",
      "right" : "if (childType instanceof FunctionType)",
      "info" : "IfStatement[47182-47663]:IfStatement[47182-47663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47221-47625]:Block[47221-47625]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) childType;",
      "right" : "FunctionType functionType = (FunctionType) childType;",
      "info" : "VariableDeclarationStatement[47229-47282]:VariableDeclarationStatement[47229-47282]"
    }, {
      "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType())",
      "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType())",
      "info" : "IfStatement[47356-47517]:IfStatement[47356-47517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47438-47517]:Block[47438-47517]"
    }, {
      "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
      "info" : "ExpressionStatement[47448-47509]:ExpressionStatement[47448-47509]"
    }, {
      "left" : "visitParameterList(t, n, functionType);",
      "right" : "visitParameterList(t, n, functionType);",
      "info" : "ExpressionStatement[47525-47564]:ExpressionStatement[47525-47564]"
    }, {
      "left" : "ensureTyped(t, n, functionType.getReturnType());",
      "right" : "ensureTyped(t, n, functionType.getReturnType());",
      "info" : "ExpressionStatement[47571-47619]:ExpressionStatement[47571-47619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47631-47663]:Block[47631-47663]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[47639-47657]:ExpressionStatement[47639-47657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48037-49228]:Block[48037-49330]"
    }, {
      "left" : "Iterator<Node> arguments = call.children().iterator();",
      "right" : "Iterator<Node> arguments = call.children().iterator();",
      "info" : "VariableDeclarationStatement[48043-48097]:VariableDeclarationStatement[48043-48097]"
    }, {
      "left" : "arguments.next();",
      "right" : "arguments.next();",
      "info" : "ExpressionStatement[48102-48119]:ExpressionStatement[48102-48119]"
    }, {
      "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
      "info" : "VariableDeclarationStatement[48151-48219]:VariableDeclarationStatement[48151-48219]"
    }, {
      "left" : "int ordinal = 0;",
      "right" : "int ordinal = 0;",
      "info" : "VariableDeclarationStatement[48224-48240]:VariableDeclarationStatement[48224-48240]"
    }, {
      "left" : "Node parameter = null;",
      "right" : "Node parameter = null;",
      "info" : "VariableDeclarationStatement[48245-48267]:VariableDeclarationStatement[48245-48267]"
    }, {
      "left" : "Node argument = null;",
      "right" : "Node argument = null;",
      "info" : "VariableDeclarationStatement[48272-48293]:VariableDeclarationStatement[48272-48293]"
    }, {
      "left" : "while (arguments.hasNext() &&\n           parameters.hasNext())",
      "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
      "info" : "WhileStatement[48298-48725]:WhileStatement[48298-48827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48361-48725]:Block[48421-48827]"
    }, {
      "left" : "parameter = parameters.next();",
      "right" : "parameter = parameters.next();",
      "info" : "ExpressionStatement[48507-48537]:ExpressionStatement[48601-48631]"
    }, {
      "left" : "argument = arguments.next();",
      "right" : "argument = arguments.next();",
      "info" : "ExpressionStatement[48544-48572]:ExpressionStatement[48646-48674]"
    }, {
      "left" : "ordinal++;",
      "right" : "ordinal++;",
      "info" : "ExpressionStatement[48579-48589]:ExpressionStatement[48681-48691]"
    }, {
      "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
      "info" : "ExpressionStatement[48597-48719]:ExpressionStatement[48699-48821]"
    }, {
      "left" : "int numArgs = call.getChildCount() - 1;",
      "right" : "int numArgs = call.getChildCount() - 1;",
      "info" : "VariableDeclarationStatement[48731-48770]:VariableDeclarationStatement[48833-48872]"
    }, {
      "left" : "int minArgs = functionType.getMinArguments();",
      "right" : "int minArgs = functionType.getMinArguments();",
      "info" : "VariableDeclarationStatement[48775-48820]:VariableDeclarationStatement[48877-48922]"
    }, {
      "left" : "int maxArgs = functionType.getMaxArguments();",
      "right" : "int maxArgs = functionType.getMaxArguments();",
      "info" : "VariableDeclarationStatement[48825-48870]:VariableDeclarationStatement[48927-48972]"
    }, {
      "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
      "info" : "IfStatement[48875-49224]:IfStatement[48977-49326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48919-49224]:Block[49021-49326]"
    }, {
      "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
      "info" : "ExpressionStatement[48927-49218]:ExpressionStatement[49029-49320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49507-50527]:Block[49609-50629]"
    }, {
      "left" : "Node function = t.getEnclosingFunction();",
      "right" : "Node function = t.getEnclosingFunction();",
      "info" : "VariableDeclarationStatement[49513-49554]:VariableDeclarationStatement[49615-49656]"
    }, {
      "left" : "if (function == null)",
      "right" : "if (function == null)",
      "info" : "IfStatement[49654-49697]:IfStatement[49756-49799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49676-49697]:Block[49778-49799]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[49684-49691]:ReturnStatement[49786-49793]"
    }, {
      "left" : "JSType jsType = getJSType(function);",
      "right" : "JSType jsType = getJSType(function);",
      "info" : "VariableDeclarationStatement[49702-49738]:VariableDeclarationStatement[49804-49840]"
    }, {
      "left" : "if (jsType instanceof FunctionType)",
      "right" : "if (jsType instanceof FunctionType)",
      "info" : "IfStatement[49744-50523]:IfStatement[49846-50625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49780-50523]:Block[49882-50625]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) jsType;",
      "right" : "FunctionType functionType = (FunctionType) jsType;",
      "info" : "VariableDeclarationStatement[49788-49838]:VariableDeclarationStatement[49890-49940]"
    }, {
      "left" : "JSType returnType = functionType.getReturnType();",
      "right" : "JSType returnType = functionType.getReturnType();",
      "info" : "VariableDeclarationStatement[49846-49895]:VariableDeclarationStatement[49948-49997]"
    }, {
      "left" : "if (returnType == null)",
      "right" : "if (returnType == null)",
      "info" : "IfStatement[50003-50083]:IfStatement[50105-50185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50027-50083]:Block[50129-50185]"
    }, {
      "left" : "returnType = getNativeType(VOID_TYPE);",
      "right" : "returnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[50037-50075]:ExpressionStatement[50139-50177]"
    }, {
      "left" : "Node valueNode = n.getFirstChild();",
      "right" : "Node valueNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[50135-50170]:VariableDeclarationStatement[50237-50272]"
    }, {
      "left" : "JSType actualReturnType;",
      "right" : "JSType actualReturnType;",
      "info" : "VariableDeclarationStatement[50177-50201]:VariableDeclarationStatement[50279-50303]"
    }, {
      "left" : "if (valueNode == null)",
      "right" : "if (valueNode == null)",
      "info" : "IfStatement[50208-50380]:IfStatement[50310-50482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50231-50316]:Block[50333-50418]"
    }, {
      "left" : "actualReturnType = getNativeType(VOID_TYPE);",
      "right" : "actualReturnType = getNativeType(VOID_TYPE);",
      "info" : "ExpressionStatement[50241-50285]:ExpressionStatement[50343-50387]"
    }, {
      "left" : "valueNode = n;",
      "right" : "valueNode = n;",
      "info" : "ExpressionStatement[50294-50308]:ExpressionStatement[50396-50410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50322-50380]:Block[50424-50482]"
    }, {
      "left" : "actualReturnType = getJSType(valueNode);",
      "right" : "actualReturnType = getJSType(valueNode);",
      "info" : "ExpressionStatement[50332-50372]:ExpressionStatement[50434-50474]"
    }, {
      "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
      "info" : "ExpressionStatement[50407-50517]:ExpressionStatement[50509-50619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50988-52610]:Block[51090-52712]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[50994-51024]:VariableDeclarationStatement[51096-51126]"
    }, {
      "left" : "JSType leftType = getJSType(left);",
      "right" : "JSType leftType = getJSType(left);",
      "info" : "VariableDeclarationStatement[51029-51063]:VariableDeclarationStatement[51131-51165]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[51068-51098]:VariableDeclarationStatement[51170-51200]"
    }, {
      "left" : "JSType rightType = getJSType(right);",
      "right" : "JSType rightType = getJSType(right);",
      "info" : "VariableDeclarationStatement[51103-51139]:VariableDeclarationStatement[51205-51241]"
    }, {
      "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
      "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
      "info" : "SwitchStatement[51144-52583]:SwitchStatement[51246-52685]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[51164-51186]:SwitchCase[51266-51288]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[51193-51215]:SwitchCase[51295-51317]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[51222-51237]:SwitchCase[51324-51339]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[51244-51259]:SwitchCase[51346-51361]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[51266-51289]:SwitchCase[51368-51391]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[51296-51312]:SwitchCase[51398-51414]"
    }, {
      "left" : "if (!leftType.matchesInt32Context())",
      "right" : "if (!leftType.matchesInt32Context())",
      "info" : "IfStatement[51321-51482]:IfStatement[51423-51584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51358-51482]:Block[51460-51584]"
    }, {
      "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
      "info" : "ExpressionStatement[51370-51472]:ExpressionStatement[51472-51574]"
    }, {
      "left" : "if (!rightType.matchesUint32Context())",
      "right" : "if (!rightType.matchesUint32Context())",
      "info" : "IfStatement[51491-51656]:IfStatement[51593-51758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51530-51656]:Block[51632-51758]"
    }, {
      "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
      "info" : "ExpressionStatement[51542-51646]:ExpressionStatement[51644-51748]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51665-51671]:BreakStatement[51767-51773]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[51679-51701]:SwitchCase[51781-51803]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[51708-51730]:SwitchCase[51810-51832]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[51737-51759]:SwitchCase[51839-51861]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[51766-51788]:SwitchCase[51868-51890]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[51795-51810]:SwitchCase[51897-51912]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[51817-51832]:SwitchCase[51919-51934]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[51839-51854]:SwitchCase[51941-51956]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[51861-51876]:SwitchCase[51963-51978]"
    }, {
      "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
      "info" : "ExpressionStatement[51885-51943]:ExpressionStatement[51987-52045]"
    }, {
      "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
      "info" : "ExpressionStatement[51952-52013]:ExpressionStatement[52054-52115]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52022-52028]:BreakStatement[52124-52130]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[52036-52061]:SwitchCase[52138-52163]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[52068-52093]:SwitchCase[52170-52195]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[52100-52124]:SwitchCase[52202-52226]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[52131-52149]:SwitchCase[52233-52251]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[52156-52174]:SwitchCase[52258-52276]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[52181-52198]:SwitchCase[52283-52300]"
    }, {
      "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
      "info" : "ExpressionStatement[52207-52306]:ExpressionStatement[52309-52408]"
    }, {
      "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
      "info" : "ExpressionStatement[52315-52417]:ExpressionStatement[52417-52519]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52426-52432]:BreakStatement[52528-52534]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[52440-52462]:SwitchCase[52542-52564]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[52469-52484]:SwitchCase[52571-52586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52493-52499]:BreakStatement[52595-52601]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52507-52515]:SwitchCase[52609-52617]"
    }, {
      "left" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
      "right" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
      "info" : "ExpressionStatement[52524-52577]:ExpressionStatement[52626-52679]"
    }, {
      "left" : "ensureTyped(t, n);",
      "right" : "ensureTyped(t, n);",
      "info" : "ExpressionStatement[52588-52606]:ExpressionStatement[52690-52708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53369-54726]:Block[53471-54828]"
    }, {
      "left" : "if (value.getType() == Token.OBJECTLIT)",
      "right" : "if (value.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[53375-54722]:IfStatement[53477-54824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53415-53958]:Block[53517-54060]"
    }, {
      "left" : "value = value.getFirstChild();",
      "right" : "value = value.getFirstChild();",
      "info" : "ExpressionStatement[53502-53532]:ExpressionStatement[53604-53634]"
    }, {
      "left" : "value = (value == null) ? null : value.getNext();",
      "right" : "value = (value == null) ? null : value.getNext();",
      "info" : "ExpressionStatement[53539-53588]:ExpressionStatement[53641-53690]"
    }, {
      "left" : "while (value != null)",
      "right" : "while (value != null)",
      "info" : "WhileStatement[53595-53952]:WhileStatement[53697-54054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53617-53952]:Block[53719-54054]"
    }, {
      "left" : "validator.expectCanAssignTo(t, value, getJSType(value), primitiveType,\n            \"element type must match enum's type\");",
      "right" : "validator.expectCanAssignTo(t, value, getJSType(value), primitiveType,\n            \"element type must match enum's type\");",
      "info" : "ExpressionStatement[53703-53825]:ExpressionStatement[53805-53927]"
    }, {
      "left" : "value = value.getNext();",
      "right" : "value = value.getNext();",
      "info" : "ExpressionStatement[53862-53886]:ExpressionStatement[53964-53988]"
    }, {
      "left" : "value = (value == null) ? null : value.getNext();",
      "right" : "value = (value == null) ? null : value.getNext();",
      "info" : "ExpressionStatement[53895-53944]:ExpressionStatement[53997-54046]"
    }, {
      "left" : "if (value.getJSType() instanceof EnumType)",
      "right" : "if (value.getJSType() instanceof EnumType)",
      "info" : "IfStatement[53964-54722]:IfStatement[54066-54824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54007-54647]:Block[54109-54749]"
    }, {
      "left" : "EnumType valueEnumType = (EnumType) value.getJSType();",
      "right" : "EnumType valueEnumType = (EnumType) value.getJSType();",
      "info" : "VariableDeclarationStatement[54358-54412]:VariableDeclarationStatement[54460-54514]"
    }, {
      "left" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
      "right" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
      "info" : "VariableDeclarationStatement[54419-54512]:VariableDeclarationStatement[54521-54614]"
    }, {
      "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
      "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
      "info" : "ExpressionStatement[54519-54641]:ExpressionStatement[54621-54743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54653-54722]:Block[54755-54824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55038-55211]:Block[55140-55313]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[55044-55206]:SwitchStatement[55146-55308]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[55073-55092]:SwitchCase[55175-55194]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[55099-55118]:SwitchCase[55201-55220]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[55125-55141]:SwitchCase[55227-55243]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[55150-55162]:ReturnStatement[55252-55264]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55170-55178]:SwitchCase[55272-55280]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55187-55200]:ReturnStatement[55289-55302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55354-55782]:Block[55456-55884]"
    }, {
      "left" : "JSType jsType = n.getJSType();",
      "right" : "JSType jsType = n.getJSType();",
      "info" : "VariableDeclarationStatement[55360-55390]:VariableDeclarationStatement[55462-55492]"
    }, {
      "left" : "if (jsType == null)",
      "right" : "if (jsType == null)",
      "info" : "IfStatement[55395-55778]:IfStatement[55497-55880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55415-55744]:Block[55517-55846]"
    }, {
      "left" : "return getNativeType(UNKNOWN_TYPE);",
      "right" : "return getNativeType(UNKNOWN_TYPE);",
      "info" : "ReturnStatement[55703-55738]:ReturnStatement[55805-55840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55750-55778]:Block[55852-55880]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[55758-55772]:ReturnStatement[55860-55874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55933-56223]:Block[56035-56325]"
    }, {
      "left" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
      "right" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
      "info" : "VariableDeclarationStatement[55939-55997]:VariableDeclarationStatement[56041-56099]"
    }, {
      "left" : "if (type.isUnknownType())",
      "right" : "if (type.isUnknownType())",
      "info" : "IfStatement[56002-56219]:IfStatement[56104-56321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56028-56106]:Block[56130-56208]"
    }, {
      "left" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
      "right" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
      "info" : "ReturnStatement[56036-56100]:ReturnStatement[56138-56202]"
    }, {
      "left" : "if (type instanceof FunctionType)",
      "right" : "if (type instanceof FunctionType)",
      "info" : "IfStatement[56112-56219]:IfStatement[56214-56321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56146-56187]:Block[56248-56289]"
    }, {
      "left" : "return (FunctionType) type;",
      "right" : "return (FunctionType) type;",
      "info" : "ReturnStatement[56154-56181]:ReturnStatement[56256-56283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56193-56219]:Block[56295-56321]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[56201-56213]:ReturnStatement[56303-56315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56712-56769]:Block[56814-56871]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
      "info" : "ExpressionStatement[56718-56765]:ExpressionStatement[56820-56867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56842-56891]:Block[56944-56993]"
    }, {
      "left" : "ensureTyped(t, n, getNativeType(type));",
      "right" : "ensureTyped(t, n, getNativeType(type));",
      "info" : "ExpressionStatement[56848-56887]:ExpressionStatement[56950-56989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57770-58561]:Block[57872-58663]"
    }, {
      "left" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
      "right" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
      "info" : "ExpressionStatement[57834-57970]:ExpressionStatement[57936-58072]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[57975-58009]:VariableDeclarationStatement[58077-58111]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[58014-58492]:IfStatement[58116-58594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58032-58492]:Block[58134-58594]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[58040-58228]:IfStatement[58142-58330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58060-58228]:Block[58162-58330]"
    }, {
      "left" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
      "right" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
      "info" : "VariableDeclarationStatement[58070-58140]:VariableDeclarationStatement[58172-58242]"
    }, {
      "left" : "validator.expectCanCast(t, n, infoType, type);",
      "right" : "validator.expectCanCast(t, n, infoType, type);",
      "info" : "ExpressionStatement[58149-58195]:ExpressionStatement[58251-58297]"
    }, {
      "left" : "type = infoType;",
      "right" : "type = infoType;",
      "info" : "ExpressionStatement[58204-58220]:ExpressionStatement[58306-58322]"
    }, {
      "left" : "if (info.isImplicitCast() && !inExterns)",
      "right" : "if (info.isImplicitCast() && !inExterns)",
      "info" : "IfStatement[58236-58486]:IfStatement[58338-58588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58277-58486]:Block[58379-58588]"
    }, {
      "left" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
      "right" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
      "info" : "VariableDeclarationStatement[58287-58391]:VariableDeclarationStatement[58389-58493]"
    }, {
      "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
      "info" : "ExpressionStatement[58400-58478]:ExpressionStatement[58502-58580]"
    }, {
      "left" : "if (n.getJSType() == null)",
      "right" : "if (n.getJSType() == null)",
      "info" : "IfStatement[58498-58557]:IfStatement[58600-58659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58525-58557]:Block[58627-58659]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[58533-58551]:ExpressionStatement[58635-58653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58710-58872]:Block[58812-58974]"
    }, {
      "left" : "int total = nullCount + unknownCount + typedCount;",
      "right" : "int total = nullCount + unknownCount + typedCount;",
      "info" : "VariableDeclarationStatement[58716-58766]:VariableDeclarationStatement[58818-58868]"
    }, {
      "left" : "if (total == 0)",
      "right" : "if (total == 0)",
      "info" : "IfStatement[58771-58868]:IfStatement[58873-58970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58787-58812]:Block[58889-58914]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[58795-58806]:ReturnStatement[58897-58908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58818-58868]:Block[58920-58970]"
    }, {
      "left" : "return (100.0 * typedCount) / total;",
      "right" : "return (100.0 * typedCount) / total;",
      "info" : "ReturnStatement[58826-58862]:ReturnStatement[58928-58964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58926-58978]:Block[59028-59080]"
    }, {
      "left" : "return typeRegistry.getNativeType(typeId);",
      "right" : "return typeRegistry.getNativeType(typeId);",
      "info" : "ReturnStatement[58932-58974]:ReturnStatement[59034-59076]"
    } ]
  },
  "interFileMappings" : { }
}