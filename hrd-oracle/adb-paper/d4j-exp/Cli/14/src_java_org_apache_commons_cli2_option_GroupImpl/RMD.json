{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GroupImpl",
      "right" : "GroupImpl",
      "info" : "TypeDeclaration[1532-15724]:TypeDeclaration[1532-15711]"
    }, {
      "left" : "private final String name;",
      "right" : "private final String name;",
      "info" : "FieldDeclaration[1639-1665]:FieldDeclaration[1639-1665]"
    }, {
      "left" : "private final String description;",
      "right" : "private final String description;",
      "info" : "FieldDeclaration[1670-1703]:FieldDeclaration[1670-1703]"
    }, {
      "left" : "private final List options;",
      "right" : "private final List options;",
      "info" : "FieldDeclaration[1708-1735]:FieldDeclaration[1708-1735]"
    }, {
      "left" : "private final int minimum;",
      "right" : "private final int minimum;",
      "info" : "FieldDeclaration[1740-1766]:FieldDeclaration[1740-1766]"
    }, {
      "left" : "private final int maximum;",
      "right" : "private final int maximum;",
      "info" : "FieldDeclaration[1771-1797]:FieldDeclaration[1771-1797]"
    }, {
      "left" : "private final List anonymous;",
      "right" : "private final List anonymous;",
      "info" : "FieldDeclaration[1802-1831]:FieldDeclaration[1802-1831]"
    }, {
      "left" : "private final SortedMap optionMap;",
      "right" : "private final SortedMap optionMap;",
      "info" : "FieldDeclaration[1836-1870]:FieldDeclaration[1836-1870]"
    }, {
      "left" : "private final Set prefixes;",
      "right" : "private final Set prefixes;",
      "info" : "FieldDeclaration[1875-1902]:FieldDeclaration[1875-1902]"
    }, {
      "left" : "public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum)",
      "right" : "public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum)",
      "info" : "MethodDeclaration[1908-4000]:MethodDeclaration[1908-4000]"
    }, {
      "left" : "public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg)",
      "right" : "public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg)",
      "info" : "MethodDeclaration[4006-4910]:MethodDeclaration[4006-4910]"
    }, {
      "left" : "public Set getPrefixes()",
      "right" : "public Set getPrefixes()",
      "info" : "MethodDeclaration[4916-4973]:MethodDeclaration[4916-4973]"
    }, {
      "left" : "public Set getTriggers()",
      "right" : "public Set getTriggers()",
      "info" : "MethodDeclaration[4979-5046]:MethodDeclaration[4979-5046]"
    }, {
      "left" : "public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException",
      "right" : "public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException",
      "info" : "MethodDeclaration[5052-8099]:MethodDeclaration[5052-8099]"
    }, {
      "left" : "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException",
      "right" : "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException",
      "info" : "MethodDeclaration[8105-9576]:MethodDeclaration[8105-9563]"
    }, {
      "left" : "public String getPreferredName()",
      "right" : "public String getPreferredName()",
      "info" : "MethodDeclaration[9582-9643]:MethodDeclaration[9569-9630]"
    }, {
      "left" : "public String getDescription()",
      "right" : "public String getDescription()",
      "info" : "MethodDeclaration[9649-9715]:MethodDeclaration[9636-9702]"
    }, {
      "left" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)",
      "right" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)",
      "info" : "MethodDeclaration[9721-9936]:MethodDeclaration[9708-9923]"
    }, {
      "left" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)",
      "right" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)",
      "info" : "MethodDeclaration[9942-12828]:MethodDeclaration[9929-12815]"
    }, {
      "left" : "public List helpLines(final int depth,\n                          final Set helpSettings,\n                          final Comparator comp)",
      "right" : "public List helpLines(final int depth,\n                          final Set helpSettings,\n                          final Comparator comp)",
      "info" : "MethodDeclaration[12834-14285]:MethodDeclaration[12821-14272]"
    }, {
      "left" : "public List getOptions()",
      "right" : "public List getOptions()",
      "info" : "MethodDeclaration[14291-14515]:MethodDeclaration[14278-14502]"
    }, {
      "left" : "public List getAnonymous()",
      "right" : "public List getAnonymous()",
      "info" : "MethodDeclaration[14521-14698]:MethodDeclaration[14508-14685]"
    }, {
      "left" : "public Option findOption(final String trigger)",
      "right" : "public Option findOption(final String trigger)",
      "info" : "MethodDeclaration[14704-15065]:MethodDeclaration[14691-15052]"
    }, {
      "left" : "public int getMinimum()",
      "right" : "public int getMinimum()",
      "info" : "MethodDeclaration[15071-15126]:MethodDeclaration[15058-15113]"
    }, {
      "left" : "public int getMaximum()",
      "right" : "public int getMaximum()",
      "info" : "MethodDeclaration[15132-15187]:MethodDeclaration[15119-15174]"
    }, {
      "left" : "public boolean isRequired()",
      "right" : "public boolean isRequired()",
      "info" : "MethodDeclaration[15193-15261]:MethodDeclaration[15180-15248]"
    }, {
      "left" : "public void defaults(final WriteableCommandLine commandLine)",
      "right" : "public void defaults(final WriteableCommandLine commandLine)",
      "info" : "MethodDeclaration[15267-15722]:MethodDeclaration[15254-15709]"
    }, {
      "left" : "ReverseStringComparator",
      "right" : "ReverseStringComparator",
      "info" : "TypeDeclaration[15727-16360]:TypeDeclaration[15714-16347]"
    }, {
      "left" : "private static final Comparator instance = new ReverseStringComparator();",
      "right" : "private static final Comparator instance = new ReverseStringComparator();",
      "info" : "FieldDeclaration[15785-15858]:FieldDeclaration[15772-15845]"
    }, {
      "left" : "private ReverseStringComparator()",
      "right" : "private ReverseStringComparator()",
      "info" : "MethodDeclaration[15864-15957]:MethodDeclaration[15851-15944]"
    }, {
      "left" : "public static final Comparator getInstance()",
      "right" : "public static final Comparator getInstance()",
      "info" : "MethodDeclaration[15963-16156]:MethodDeclaration[15950-16143]"
    }, {
      "left" : "public int compare(final Object o1,\n                       final Object o2)",
      "right" : "public int compare(final Object o1,\n                       final Object o2)",
      "info" : "MethodDeclaration[16162-16358]:MethodDeclaration[16149-16345]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1570-1576]:Modifier[1570-1576]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1577-1582]:TYPE_DECLARATION_KIND[1577-1582]"
    }, {
      "left" : "GroupImpl",
      "right" : "GroupImpl",
      "info" : "SimpleName[1583-1592]:SimpleName[1583-1592]"
    }, {
      "left" : "OptionImpl",
      "right" : "OptionImpl",
      "info" : "SimpleType[1605-1615]:SimpleType[1605-1615]"
    }, {
      "left" : "Group",
      "right" : "Group",
      "info" : "SimpleType[1627-1632]:SimpleType[1627-1632]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2322-2328]:Modifier[2322-2328]"
    }, {
      "left" : "GroupImpl",
      "right" : "GroupImpl",
      "info" : "SimpleName[2329-2338]:SimpleName[2329-2338]"
    }, {
      "left" : "final List options",
      "right" : "final List options",
      "info" : "SingleVariableDeclaration[2339-2357]:SingleVariableDeclaration[2339-2357]"
    }, {
      "left" : "final String name",
      "right" : "final String name",
      "info" : "SingleVariableDeclaration[2380-2397]:SingleVariableDeclaration[2380-2397]"
    }, {
      "left" : "final String description",
      "right" : "final String description",
      "info" : "SingleVariableDeclaration[2420-2444]:SingleVariableDeclaration[2420-2444]"
    }, {
      "left" : "final int minimum",
      "right" : "final int minimum",
      "info" : "SingleVariableDeclaration[2467-2484]:SingleVariableDeclaration[2467-2484]"
    }, {
      "left" : "final int maximum",
      "right" : "final int maximum",
      "info" : "SingleVariableDeclaration[2507-2524]:SingleVariableDeclaration[2507-2524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2526-4000]:Block[2526-4000]"
    }, {
      "left" : "super(0, false);",
      "right" : "super(0, false);",
      "info" : "SuperConstructorInvocation[2536-2552]:SuperConstructorInvocation[2536-2552]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[2562-2579]:ExpressionStatement[2562-2579]"
    }, {
      "left" : "this.description = description;",
      "right" : "this.description = description;",
      "info" : "ExpressionStatement[2588-2619]:ExpressionStatement[2588-2619]"
    }, {
      "left" : "this.minimum = minimum;",
      "right" : "this.minimum = minimum;",
      "info" : "ExpressionStatement[2628-2651]:ExpressionStatement[2628-2651]"
    }, {
      "left" : "this.maximum = maximum;",
      "right" : "this.maximum = maximum;",
      "info" : "ExpressionStatement[2660-2683]:ExpressionStatement[2660-2683]"
    }, {
      "left" : "this.options = Collections.unmodifiableList(options);",
      "right" : "this.options = Collections.unmodifiableList(options);",
      "info" : "ExpressionStatement[2774-2827]:ExpressionStatement[2774-2827]"
    }, {
      "left" : "final List newAnonymous = new ArrayList();",
      "right" : "final List newAnonymous = new ArrayList();",
      "info" : "VariableDeclarationStatement[2885-2927]:VariableDeclarationStatement[2885-2927]"
    }, {
      "left" : "final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());",
      "right" : "final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());",
      "info" : "VariableDeclarationStatement[2999-3081]:VariableDeclarationStatement[2999-3081]"
    }, {
      "left" : "final Set newPrefixes = new HashSet();",
      "right" : "final Set newPrefixes = new HashSet();",
      "info" : "VariableDeclarationStatement[3129-3167]:VariableDeclarationStatement[3129-3167]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[3208-3784]:ForStatement[3208-3784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3266-3784]:Block[3266-3784]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[3280-3320]:VariableDeclarationStatement[3280-3320]"
    }, {
      "left" : "if (option instanceof Argument)",
      "right" : "if (option instanceof Argument)",
      "info" : "IfStatement[3334-3774]:IfStatement[3334-3774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3366-3451]:Block[3366-3451]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[3384-3395]:ExpressionStatement[3384-3395]"
    }, {
      "left" : "newAnonymous.add(option);",
      "right" : "newAnonymous.add(option);",
      "info" : "ExpressionStatement[3412-3437]:ExpressionStatement[3412-3437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3457-3774]:Block[3457-3774]"
    }, {
      "left" : "final Set triggers = option.getTriggers();",
      "right" : "final Set triggers = option.getTriggers();",
      "info" : "VariableDeclarationStatement[3475-3517]:VariableDeclarationStatement[3475-3517]"
    }, {
      "left" : "for (Iterator j = triggers.iterator(); j.hasNext())",
      "right" : "for (Iterator j = triggers.iterator(); j.hasNext())",
      "info" : "ForStatement[3535-3663]:ForStatement[3535-3663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3588-3663]:Block[3588-3663]"
    }, {
      "left" : "newOptionMap.put(j.next(), option);",
      "right" : "newOptionMap.put(j.next(), option);",
      "info" : "ExpressionStatement[3610-3645]:ExpressionStatement[3610-3645]"
    }, {
      "left" : "newPrefixes.addAll(option.getPrefixes());",
      "right" : "newPrefixes.addAll(option.getPrefixes());",
      "info" : "ExpressionStatement[3719-3760]:ExpressionStatement[3719-3760]"
    }, {
      "left" : "this.anonymous = Collections.unmodifiableList(newAnonymous);",
      "right" : "this.anonymous = Collections.unmodifiableList(newAnonymous);",
      "info" : "ExpressionStatement[3794-3854]:ExpressionStatement[3794-3854]"
    }, {
      "left" : "this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);",
      "right" : "this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);",
      "info" : "ExpressionStatement[3863-3928]:ExpressionStatement[3863-3928]"
    }, {
      "left" : "this.prefixes = Collections.unmodifiableSet(newPrefixes);",
      "right" : "this.prefixes = Collections.unmodifiableSet(newPrefixes);",
      "info" : "ExpressionStatement[3937-3994]:ExpressionStatement[3937-3994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4006-4012]:Modifier[4006-4012]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4013-4020]:PrimitiveType[4013-4020]"
    }, {
      "left" : "canProcess",
      "right" : "canProcess",
      "info" : "SimpleName[4021-4031]:SimpleName[4021-4031]"
    }, {
      "left" : "final WriteableCommandLine commandLine",
      "right" : "final WriteableCommandLine commandLine",
      "info" : "SingleVariableDeclaration[4032-4070]:SingleVariableDeclaration[4032-4070]"
    }, {
      "left" : "final String arg",
      "right" : "final String arg",
      "info" : "SingleVariableDeclaration[4102-4118]:SingleVariableDeclaration[4102-4118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4120-4910]:Block[4120-4910]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[4130-4184]:IfStatement[4130-4184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4147-4184]:Block[4147-4184]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4161-4174]:ReturnStatement[4161-4174]"
    }, {
      "left" : "if (optionMap.containsKey(arg))",
      "right" : "if (optionMap.containsKey(arg))",
      "info" : "IfStatement[4238-4306]:IfStatement[4238-4306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4270-4306]:Block[4270-4306]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4284-4296]:ReturnStatement[4284-4296]"
    }, {
      "left" : "final Map tailMap = optionMap.tailMap(arg);",
      "right" : "final Map tailMap = optionMap.tailMap(arg);",
      "info" : "VariableDeclarationStatement[4334-4377]:VariableDeclarationStatement[4334-4377]"
    }, {
      "left" : "for (final Iterator iter = tailMap.values().iterator(); iter.hasNext())",
      "right" : "for (final Iterator iter = tailMap.values().iterator(); iter.hasNext())",
      "info" : "ForStatement[4428-4667]:ForStatement[4428-4667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4501-4667]:Block[4501-4667]"
    }, {
      "left" : "final Option option = (Option) iter.next();",
      "right" : "final Option option = (Option) iter.next();",
      "info" : "VariableDeclarationStatement[4515-4558]:VariableDeclarationStatement[4515-4558]"
    }, {
      "left" : "if (option.canProcess(commandLine, arg))",
      "right" : "if (option.canProcess(commandLine, arg))",
      "info" : "IfStatement[4572-4657]:IfStatement[4572-4657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4613-4657]:Block[4613-4657]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4631-4643]:ReturnStatement[4631-4643]"
    }, {
      "left" : "if (commandLine.looksLikeOption(arg))",
      "right" : "if (commandLine.looksLikeOption(arg))",
      "info" : "IfStatement[4677-4752]:IfStatement[4677-4752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4715-4752]:Block[4715-4752]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4729-4742]:ReturnStatement[4729-4742]"
    }, {
      "left" : "if (anonymous.size() > 0)",
      "right" : "if (anonymous.size() > 0)",
      "info" : "IfStatement[4819-4881]:IfStatement[4819-4881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4845-4881]:Block[4845-4881]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4859-4871]:ReturnStatement[4859-4871]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4891-4904]:ReturnStatement[4891-4904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4916-4922]:Modifier[4916-4922]"
    }, {
      "left" : "Set",
      "right" : "Set",
      "info" : "SimpleType[4923-4926]:SimpleType[4923-4926]"
    }, {
      "left" : "getPrefixes",
      "right" : "getPrefixes",
      "info" : "SimpleName[4927-4938]:SimpleName[4927-4938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-4973]:Block[4941-4973]"
    }, {
      "left" : "return prefixes;",
      "right" : "return prefixes;",
      "info" : "ReturnStatement[4951-4967]:ReturnStatement[4951-4967]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4979-4985]:Modifier[4979-4985]"
    }, {
      "left" : "Set",
      "right" : "Set",
      "info" : "SimpleType[4986-4989]:SimpleType[4986-4989]"
    }, {
      "left" : "getTriggers",
      "right" : "getTriggers",
      "info" : "SimpleName[4990-5001]:SimpleName[4990-5001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5004-5046]:Block[5004-5046]"
    }, {
      "left" : "return optionMap.keySet();",
      "right" : "return optionMap.keySet();",
      "info" : "ReturnStatement[5014-5040]:ReturnStatement[5014-5040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5052-5058]:Modifier[5052-5058]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5059-5063]:PrimitiveType[5059-5063]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5064-5071]:SimpleName[5064-5071]"
    }, {
      "left" : "final WriteableCommandLine commandLine",
      "right" : "final WriteableCommandLine commandLine",
      "info" : "SingleVariableDeclaration[5072-5110]:SingleVariableDeclaration[5072-5110]"
    }, {
      "left" : "final ListIterator arguments",
      "right" : "final ListIterator arguments",
      "info" : "SingleVariableDeclaration[5136-5164]:SingleVariableDeclaration[5136-5164]"
    }, {
      "left" : "OptionException",
      "right" : "OptionException",
      "info" : "SimpleType[5181-5196]:SimpleType[5181-5196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-8099]:Block[5197-8099]"
    }, {
      "left" : "String previous = null;",
      "right" : "String previous = null;",
      "info" : "VariableDeclarationStatement[5207-5230]:VariableDeclarationStatement[5207-5230]"
    }, {
      "left" : "while (arguments.hasNext())",
      "right" : "while (arguments.hasNext())",
      "info" : "WhileStatement[5290-8053]:WhileStatement[5290-8053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5318-8053]:Block[5318-8053]"
    }, {
      "left" : "final String arg = (String) arguments.next();",
      "right" : "final String arg = (String) arguments.next();",
      "info" : "VariableDeclarationStatement[5370-5415]:VariableDeclarationStatement[5370-5415]"
    }, {
      "left" : "if (arg == previous)",
      "right" : "if (arg == previous)",
      "info" : "IfStatement[5491-5627]:IfStatement[5491-5627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5512-5627]:Block[5512-5627]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[5568-5589]:ExpressionStatement[5568-5589]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5607-5613]:BreakStatement[5607-5613]"
    }, {
      "left" : "previous = arg;",
      "right" : "previous = arg;",
      "info" : "ExpressionStatement[5689-5704]:ExpressionStatement[5689-5704]"
    }, {
      "left" : "final Option opt = (Option) optionMap.get(arg);",
      "right" : "final Option opt = (Option) optionMap.get(arg);",
      "info" : "VariableDeclarationStatement[5718-5765]:VariableDeclarationStatement[5718-5765]"
    }, {
      "left" : "if (opt != null)",
      "right" : "if (opt != null)",
      "info" : "IfStatement[5807-8018]:IfStatement[5807-8018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5824-5930]:Block[5824-5930]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[5842-5863]:ExpressionStatement[5842-5863]"
    }, {
      "left" : "opt.process(commandLine, arguments);",
      "right" : "opt.process(commandLine, arguments);",
      "info" : "ExpressionStatement[5880-5916]:ExpressionStatement[5880-5916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5987-8018]:Block[5987-8018]"
    }, {
      "left" : "if (commandLine.looksLikeOption(arg))",
      "right" : "if (commandLine.looksLikeOption(arg))",
      "info" : "IfStatement[6126-7970]:IfStatement[6126-7970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6164-7024]:Block[6164-7024]"
    }, {
      "left" : "final Collection values = optionMap.tailMap(arg).values();",
      "right" : "final Collection values = optionMap.tailMap(arg).values();",
      "info" : "VariableDeclarationStatement[6227-6285]:VariableDeclarationStatement[6227-6285]"
    }, {
      "left" : "boolean foundMemberOption = false;",
      "right" : "boolean foundMemberOption = false;",
      "info" : "VariableDeclarationStatement[6307-6341]:VariableDeclarationStatement[6307-6341]"
    }, {
      "left" : "for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption)",
      "right" : "for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption)",
      "info" : "ForStatement[6363-6790]:ForStatement[6363-6790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6436-6790]:Block[6436-6790]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[6462-6502]:VariableDeclarationStatement[6462-6502]"
    }, {
      "left" : "if (option.canProcess(commandLine, arg))",
      "right" : "if (option.canProcess(commandLine, arg))",
      "info" : "IfStatement[6528-6768]:IfStatement[6528-6768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6569-6768]:Block[6569-6768]"
    }, {
      "left" : "foundMemberOption = true;",
      "right" : "foundMemberOption = true;",
      "info" : "ExpressionStatement[6599-6624]:ExpressionStatement[6599-6624]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[6653-6674]:ExpressionStatement[6653-6674]"
    }, {
      "left" : "option.process(commandLine, arguments);",
      "right" : "option.process(commandLine, arguments);",
      "info" : "ExpressionStatement[6703-6742]:ExpressionStatement[6703-6742]"
    }, {
      "left" : "if (!foundMemberOption)",
      "right" : "if (!foundMemberOption)",
      "info" : "IfStatement[6880-7006]:IfStatement[6880-7006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6904-7006]:Block[6904-7006]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[6930-6951]:ExpressionStatement[6930-6951]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6977-6984]:ReturnStatement[6977-6984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7970]:Block[7133-7970]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[7221-7242]:ExpressionStatement[7221-7242]"
    }, {
      "left" : "if (anonymous.isEmpty())",
      "right" : "if (anonymous.isEmpty())",
      "info" : "IfStatement[7389-7468]:IfStatement[7389-7468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7414-7468]:Block[7414-7468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7440-7446]:BreakStatement[7440-7446]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[7626-7952]:ForStatement[7626-7952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7686-7952]:Block[7686-7952]"
    }, {
      "left" : "final Argument argument = (Argument) i.next();",
      "right" : "final Argument argument = (Argument) i.next();",
      "info" : "VariableDeclarationStatement[7712-7758]:VariableDeclarationStatement[7712-7758]"
    }, {
      "left" : "if (argument.canProcess(commandLine, arguments))",
      "right" : "if (argument.canProcess(commandLine, arguments))",
      "info" : "IfStatement[7784-7930]:IfStatement[7784-7930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7833-7930]:Block[7833-7930]"
    }, {
      "left" : "argument.process(commandLine, arguments);",
      "right" : "argument.process(commandLine, arguments);",
      "info" : "ExpressionStatement[7863-7904]:ExpressionStatement[7863-7904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8105-8111]:Modifier[8105-8111]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8112-8116]:PrimitiveType[8112-8116]"
    }, {
      "left" : "validate",
      "right" : "validate",
      "info" : "SimpleName[8117-8125]:SimpleName[8117-8125]"
    }, {
      "left" : "final WriteableCommandLine commandLine",
      "right" : "final WriteableCommandLine commandLine",
      "info" : "SingleVariableDeclaration[8126-8164]:SingleVariableDeclaration[8126-8164]"
    }, {
      "left" : "OptionException",
      "right" : "OptionException",
      "info" : "SimpleType[8181-8196]:SimpleType[8181-8196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8197-9576]:Block[8197-9563]"
    }, {
      "left" : "int present = 0;",
      "right" : "int present = 0;",
      "info" : "VariableDeclarationStatement[8242-8258]:VariableDeclarationStatement[8242-8258]"
    }, {
      "left" : "Option unexpected = null;",
      "right" : "Option unexpected = null;",
      "info" : "VariableDeclarationStatement[8316-8341]:VariableDeclarationStatement[8316-8341]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[8351-8978]:ForStatement[8351-8965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8409-8978]:Block[8409-8965]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[8423-8463]:VariableDeclarationStatement[8423-8463]"
    }, {
      "left" : "boolean validate = option.isRequired() || option instanceof Group;",
      "right" : "boolean validate = option.isRequired() || option instanceof Group;",
      "info" : "VariableDeclarationStatement[8510-8576]:VariableDeclarationStatement[8510-8576]"
    }, {
      "left" : "if (validate)",
      "right" : "if (validate)",
      "info" : "IfStatement[8589-8664]:IfStatement[8880-8955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8603-8664]:Block[8894-8955]"
    }, {
      "left" : "option.validate(commandLine);",
      "right" : "option.validate(commandLine);",
      "info" : "ExpressionStatement[8621-8650]:ExpressionStatement[8912-8941]"
    }, {
      "left" : "if (commandLine.hasOption(option))",
      "right" : "if (commandLine.hasOption(option))",
      "info" : "IfStatement[8741-8968]:IfStatement[8653-8866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8776-8968]:Block[8688-8866]"
    }, {
      "left" : "if (++present > maximum)",
      "right" : "if (++present > maximum)",
      "info" : "IfStatement[8794-8907]:IfStatement[8706-8819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8819-8907]:Block[8731-8819]"
    }, {
      "left" : "unexpected = option;",
      "right" : "unexpected = option;",
      "info" : "ExpressionStatement[8841-8861]:ExpressionStatement[8753-8773]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8883-8889]:BreakStatement[8795-8801]"
    }, {
      "left" : "if (unexpected != null)",
      "right" : "if (unexpected != null)",
      "info" : "IfStatement[9016-9201]:IfStatement[9003-9188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9040-9201]:Block[9027-9188]"
    }, {
      "left" : "throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());",
      "right" : "throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());",
      "info" : "ThrowStatement[9054-9191]:ThrowStatement[9041-9178]"
    }, {
      "left" : "if (present < minimum)",
      "right" : "if (present < minimum)",
      "info" : "IfStatement[9237-9350]:IfStatement[9224-9337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9260-9350]:Block[9247-9337]"
    }, {
      "left" : "throw new OptionException(this, ResourceConstants.MISSING_OPTION);",
      "right" : "throw new OptionException(this, ResourceConstants.MISSING_OPTION);",
      "info" : "ThrowStatement[9274-9340]:ThrowStatement[9261-9327]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[9404-9570]:ForStatement[9391-9557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9464-9570]:Block[9451-9557]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[9478-9518]:VariableDeclarationStatement[9465-9505]"
    }, {
      "left" : "option.validate(commandLine);",
      "right" : "option.validate(commandLine);",
      "info" : "ExpressionStatement[9531-9560]:ExpressionStatement[9518-9547]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9582-9588]:Modifier[9569-9575]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9589-9595]:SimpleType[9576-9582]"
    }, {
      "left" : "getPreferredName",
      "right" : "getPreferredName",
      "info" : "SimpleName[9596-9612]:SimpleName[9583-9599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9615-9643]:Block[9602-9630]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[9625-9637]:ReturnStatement[9612-9624]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9649-9655]:Modifier[9636-9642]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9656-9662]:SimpleType[9643-9649]"
    }, {
      "left" : "getDescription",
      "right" : "getDescription",
      "info" : "SimpleName[9663-9677]:SimpleName[9650-9664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9680-9715]:Block[9667-9702]"
    }, {
      "left" : "return description;",
      "right" : "return description;",
      "info" : "ReturnStatement[9690-9709]:ReturnStatement[9677-9696]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9721-9727]:Modifier[9708-9714]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9728-9732]:PrimitiveType[9715-9719]"
    }, {
      "left" : "appendUsage",
      "right" : "appendUsage",
      "info" : "SimpleName[9733-9744]:SimpleName[9720-9731]"
    }, {
      "left" : "final StringBuffer buffer",
      "right" : "final StringBuffer buffer",
      "info" : "SingleVariableDeclaration[9745-9770]:SingleVariableDeclaration[9732-9757]"
    }, {
      "left" : "final Set helpSettings",
      "right" : "final Set helpSettings",
      "info" : "SingleVariableDeclaration[9800-9822]:SingleVariableDeclaration[9787-9809]"
    }, {
      "left" : "final Comparator comp",
      "right" : "final Comparator comp",
      "info" : "SingleVariableDeclaration[9852-9873]:SingleVariableDeclaration[9839-9860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9875-9936]:Block[9862-9923]"
    }, {
      "left" : "appendUsage(buffer, helpSettings, comp, \"|\");",
      "right" : "appendUsage(buffer, helpSettings, comp, \"|\");",
      "info" : "ExpressionStatement[9885-9930]:ExpressionStatement[9872-9917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9942-9948]:Modifier[9929-9935]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9949-9953]:PrimitiveType[9936-9940]"
    }, {
      "left" : "appendUsage",
      "right" : "appendUsage",
      "info" : "SimpleName[9954-9965]:SimpleName[9941-9952]"
    }, {
      "left" : "final StringBuffer buffer",
      "right" : "final StringBuffer buffer",
      "info" : "SingleVariableDeclaration[9966-9991]:SingleVariableDeclaration[9953-9978]"
    }, {
      "left" : "final Set helpSettings",
      "right" : "final Set helpSettings",
      "info" : "SingleVariableDeclaration[10021-10043]:SingleVariableDeclaration[10008-10030]"
    }, {
      "left" : "final Comparator comp",
      "right" : "final Comparator comp",
      "info" : "SingleVariableDeclaration[10073-10094]:SingleVariableDeclaration[10060-10081]"
    }, {
      "left" : "final String separator",
      "right" : "final String separator",
      "info" : "SingleVariableDeclaration[10124-10146]:SingleVariableDeclaration[10111-10133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10148-12828]:Block[10135-12815]"
    }, {
      "left" : "final Set helpSettingsCopy = new HashSet(helpSettings);",
      "right" : "final Set helpSettingsCopy = new HashSet(helpSettings);",
      "info" : "VariableDeclarationStatement[10158-10213]:VariableDeclarationStatement[10145-10200]"
    }, {
      "left" : "final boolean optional =\n            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);",
      "right" : "final boolean optional =\n            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);",
      "info" : "VariableDeclarationStatement[10223-10337]:VariableDeclarationStatement[10210-10324]"
    }, {
      "left" : "final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);",
      "right" : "final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);",
      "info" : "VariableDeclarationStatement[10347-10467]:VariableDeclarationStatement[10334-10454]"
    }, {
      "left" : "final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));",
      "right" : "final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));",
      "info" : "VariableDeclarationStatement[10477-10617]:VariableDeclarationStatement[10464-10604]"
    }, {
      "left" : "final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);",
      "right" : "final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);",
      "info" : "VariableDeclarationStatement[10627-10718]:VariableDeclarationStatement[10614-10705]"
    }, {
      "left" : "final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "right" : "final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "info" : "VariableDeclarationStatement[10728-10812]:VariableDeclarationStatement[10715-10799]"
    }, {
      "left" : "helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "right" : "helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "info" : "ExpressionStatement[10822-10882]:ExpressionStatement[10809-10869]"
    }, {
      "left" : "final boolean both = named && expanded;",
      "right" : "final boolean both = named && expanded;",
      "info" : "VariableDeclarationStatement[10892-10931]:VariableDeclarationStatement[10879-10918]"
    }, {
      "left" : "if (optional)",
      "right" : "if (optional)",
      "info" : "IfStatement[10941-10998]:IfStatement[10928-10985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10955-10998]:Block[10942-10985]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[10969-10988]:ExpressionStatement[10956-10975]"
    }, {
      "left" : "if (named)",
      "right" : "if (named)",
      "info" : "IfStatement[11008-11063]:IfStatement[10995-11050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11019-11063]:Block[11006-11050]"
    }, {
      "left" : "buffer.append(name);",
      "right" : "buffer.append(name);",
      "info" : "ExpressionStatement[11033-11053]:ExpressionStatement[11020-11040]"
    }, {
      "left" : "if (both)",
      "right" : "if (both)",
      "info" : "IfStatement[11073-11127]:IfStatement[11060-11114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11083-11127]:Block[11070-11114]"
    }, {
      "left" : "buffer.append(\" (\");",
      "right" : "buffer.append(\" (\");",
      "info" : "ExpressionStatement[11097-11117]:ExpressionStatement[11084-11104]"
    }, {
      "left" : "if (expanded)",
      "right" : "if (expanded)",
      "info" : "IfStatement[11137-12320]:IfStatement[11124-12307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11151-12320]:Block[11138-12307]"
    }, {
      "left" : "final Set childSettings;",
      "right" : "final Set childSettings;",
      "info" : "VariableDeclarationStatement[11165-11189]:VariableDeclarationStatement[11152-11176]"
    }, {
      "left" : "if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "right" : "if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "info" : "IfStatement[11203-11497]:IfStatement[11190-11484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11274-11342]:Block[11261-11329]"
    }, {
      "left" : "childSettings = DisplaySetting.NONE;",
      "right" : "childSettings = DisplaySetting.NONE;",
      "info" : "ExpressionStatement[11292-11328]:ExpressionStatement[11279-11315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11348-11497]:Block[11335-11484]"
    }, {
      "left" : "childSettings = new HashSet(helpSettingsCopy);",
      "right" : "childSettings = new HashSet(helpSettingsCopy);",
      "info" : "ExpressionStatement[11366-11412]:ExpressionStatement[11353-11399]"
    }, {
      "left" : "childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);",
      "right" : "childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);",
      "info" : "ExpressionStatement[11429-11483]:ExpressionStatement[11416-11470]"
    }, {
      "left" : "final List list;",
      "right" : "final List list;",
      "info" : "VariableDeclarationStatement[11562-11578]:VariableDeclarationStatement[11549-11565]"
    }, {
      "left" : "if (comp == null)",
      "right" : "if (comp == null)",
      "info" : "IfStatement[11592-11883]:IfStatement[11579-11870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11610-11711]:Block[11597-11698]"
    }, {
      "left" : "list = options;",
      "right" : "list = options;",
      "info" : "ExpressionStatement[11682-11697]:ExpressionStatement[11669-11684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11717-11883]:Block[11704-11870]"
    }, {
      "left" : "list = new ArrayList(options);",
      "right" : "list = new ArrayList(options);",
      "info" : "ExpressionStatement[11793-11823]:ExpressionStatement[11780-11810]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[11840-11869]:ExpressionStatement[11827-11856]"
    }, {
      "left" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "info" : "ForStatement[11929-12310]:ForStatement[11916-12297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11984-12310]:Block[11971-12297]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[12002-12042]:VariableDeclarationStatement[11989-12029]"
    }, {
      "left" : "option.appendUsage(buffer, childSettings, comp);",
      "right" : "option.appendUsage(buffer, childSettings, comp);",
      "info" : "ExpressionStatement[12104-12152]:ExpressionStatement[12091-12139]"
    }, {
      "left" : "if (i.hasNext())",
      "right" : "if (i.hasNext())",
      "info" : "IfStatement[12214-12296]:IfStatement[12201-12283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12231-12296]:Block[12218-12283]"
    }, {
      "left" : "buffer.append(separator);",
      "right" : "buffer.append(separator);",
      "info" : "ExpressionStatement[12253-12278]:ExpressionStatement[12240-12265]"
    }, {
      "left" : "if (both)",
      "right" : "if (both)",
      "info" : "IfStatement[12330-12383]:IfStatement[12317-12370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12340-12383]:Block[12327-12370]"
    }, {
      "left" : "buffer.append(')');",
      "right" : "buffer.append(')');",
      "info" : "ExpressionStatement[12354-12373]:ExpressionStatement[12341-12360]"
    }, {
      "left" : "if (optional && outer)",
      "right" : "if (optional && outer)",
      "info" : "IfStatement[12393-12459]:IfStatement[12380-12446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12416-12459]:Block[12403-12446]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[12430-12449]:ExpressionStatement[12417-12436]"
    }, {
      "left" : "if (arguments)",
      "right" : "if (arguments)",
      "info" : "IfStatement[12469-12745]:IfStatement[12456-12732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12484-12745]:Block[12471-12732]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[12498-12735]:ForStatement[12485-12722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12558-12735]:Block[12545-12722]"
    }, {
      "left" : "buffer.append(' ');",
      "right" : "buffer.append(' ');",
      "info" : "ExpressionStatement[12576-12595]:ExpressionStatement[12563-12582]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[12613-12653]:VariableDeclarationStatement[12600-12640]"
    }, {
      "left" : "option.appendUsage(buffer, helpSettingsCopy, comp);",
      "right" : "option.appendUsage(buffer, helpSettingsCopy, comp);",
      "info" : "ExpressionStatement[12670-12721]:ExpressionStatement[12657-12708]"
    }, {
      "left" : "if (optional && !outer)",
      "right" : "if (optional && !outer)",
      "info" : "IfStatement[12755-12822]:IfStatement[12742-12809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12779-12822]:Block[12766-12809]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[12793-12812]:ExpressionStatement[12780-12799]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12834-12840]:Modifier[12821-12827]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[12841-12845]:SimpleType[12828-12832]"
    }, {
      "left" : "helpLines",
      "right" : "helpLines",
      "info" : "SimpleName[12846-12855]:SimpleName[12833-12842]"
    }, {
      "left" : "final int depth",
      "right" : "final int depth",
      "info" : "SingleVariableDeclaration[12856-12871]:SingleVariableDeclaration[12843-12858]"
    }, {
      "left" : "final Set helpSettings",
      "right" : "final Set helpSettings",
      "info" : "SingleVariableDeclaration[12899-12921]:SingleVariableDeclaration[12886-12908]"
    }, {
      "left" : "final Comparator comp",
      "right" : "final Comparator comp",
      "info" : "SingleVariableDeclaration[12949-12970]:SingleVariableDeclaration[12936-12957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12972-14285]:Block[12959-14272]"
    }, {
      "left" : "final List helpLines = new ArrayList();",
      "right" : "final List helpLines = new ArrayList();",
      "info" : "VariableDeclarationStatement[12982-13021]:VariableDeclarationStatement[12969-13008]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME))",
      "info" : "IfStatement[13031-13210]:IfStatement[13018-13197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13093-13210]:Block[13080-13197]"
    }, {
      "left" : "final HelpLine helpLine = new HelpLineImpl(this, depth);",
      "right" : "final HelpLine helpLine = new HelpLineImpl(this, depth);",
      "info" : "VariableDeclarationStatement[13107-13163]:VariableDeclarationStatement[13094-13150]"
    }, {
      "left" : "helpLines.add(helpLine);",
      "right" : "helpLines.add(helpLine);",
      "info" : "ExpressionStatement[13176-13200]:ExpressionStatement[13163-13187]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "info" : "IfStatement[13220-13937]:IfStatement[13207-13924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13286-13937]:Block[13273-13924]"
    }, {
      "left" : "final List list;",
      "right" : "final List list;",
      "info" : "VariableDeclarationStatement[13351-13367]:VariableDeclarationStatement[13338-13354]"
    }, {
      "left" : "if (comp == null)",
      "right" : "if (comp == null)",
      "info" : "IfStatement[13381-13672]:IfStatement[13368-13659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13399-13500]:Block[13386-13487]"
    }, {
      "left" : "list = options;",
      "right" : "list = options;",
      "info" : "ExpressionStatement[13471-13486]:ExpressionStatement[13458-13473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13506-13672]:Block[13493-13659]"
    }, {
      "left" : "list = new ArrayList(options);",
      "right" : "list = new ArrayList(options);",
      "info" : "ExpressionStatement[13582-13612]:ExpressionStatement[13569-13599]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[13629-13658]:ExpressionStatement[13616-13645]"
    }, {
      "left" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "info" : "ForStatement[13717-13927]:ForStatement[13704-13914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13772-13927]:Block[13759-13914]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[13790-13830]:VariableDeclarationStatement[13777-13817]"
    }, {
      "left" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "right" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "info" : "ExpressionStatement[13847-13913]:ExpressionStatement[13834-13900]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT))",
      "info" : "IfStatement[13947-14252]:IfStatement[13934-14239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14013-14252]:Block[14000-14239]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[14027-14242]:ForStatement[14014-14229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14087-14242]:Block[14074-14229]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[14105-14145]:VariableDeclarationStatement[14092-14132]"
    }, {
      "left" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "right" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "info" : "ExpressionStatement[14162-14228]:ExpressionStatement[14149-14215]"
    }, {
      "left" : "return helpLines;",
      "right" : "return helpLines;",
      "info" : "ReturnStatement[14262-14279]:ReturnStatement[14249-14266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14459-14465]:Modifier[14446-14452]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[14466-14470]:SimpleType[14453-14457]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[14471-14481]:SimpleName[14458-14468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14484-14515]:Block[14471-14502]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[14494-14509]:ReturnStatement[14481-14496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14638-14644]:Modifier[14625-14631]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[14645-14649]:SimpleType[14632-14636]"
    }, {
      "left" : "getAnonymous",
      "right" : "getAnonymous",
      "info" : "SimpleName[14650-14662]:SimpleName[14637-14649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14665-14698]:Block[14652-14685]"
    }, {
      "left" : "return anonymous;",
      "right" : "return anonymous;",
      "info" : "ReturnStatement[14675-14692]:ReturnStatement[14662-14679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14704-14710]:Modifier[14691-14697]"
    }, {
      "left" : "Option",
      "right" : "Option",
      "info" : "SimpleType[14711-14717]:SimpleType[14698-14704]"
    }, {
      "left" : "findOption",
      "right" : "findOption",
      "info" : "SimpleName[14718-14728]:SimpleName[14705-14715]"
    }, {
      "left" : "final String trigger",
      "right" : "final String trigger",
      "info" : "SingleVariableDeclaration[14729-14749]:SingleVariableDeclaration[14716-14736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14751-15065]:Block[14738-15052]"
    }, {
      "left" : "final Iterator i = getOptions().iterator();",
      "right" : "final Iterator i = getOptions().iterator();",
      "info" : "VariableDeclarationStatement[14761-14804]:VariableDeclarationStatement[14748-14791]"
    }, {
      "left" : "while (i.hasNext())",
      "right" : "while (i.hasNext())",
      "info" : "WhileStatement[14814-15037]:WhileStatement[14801-15024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14834-15037]:Block[14821-15024]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[14848-14888]:VariableDeclarationStatement[14835-14875]"
    }, {
      "left" : "final Option found = option.findOption(trigger);",
      "right" : "final Option found = option.findOption(trigger);",
      "info" : "VariableDeclarationStatement[14901-14949]:VariableDeclarationStatement[14888-14936]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[14963-15027]:IfStatement[14950-15014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14982-15027]:Block[14969-15014]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[15000-15013]:ReturnStatement[14987-15000]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15047-15059]:ReturnStatement[15034-15046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15071-15077]:Modifier[15058-15064]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15078-15081]:PrimitiveType[15065-15068]"
    }, {
      "left" : "getMinimum",
      "right" : "getMinimum",
      "info" : "SimpleName[15082-15092]:SimpleName[15069-15079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15095-15126]:Block[15082-15113]"
    }, {
      "left" : "return minimum;",
      "right" : "return minimum;",
      "info" : "ReturnStatement[15105-15120]:ReturnStatement[15092-15107]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15132-15138]:Modifier[15119-15125]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15139-15142]:PrimitiveType[15126-15129]"
    }, {
      "left" : "getMaximum",
      "right" : "getMaximum",
      "info" : "SimpleName[15143-15153]:SimpleName[15130-15140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15156-15187]:Block[15143-15174]"
    }, {
      "left" : "return maximum;",
      "right" : "return maximum;",
      "info" : "ReturnStatement[15166-15181]:ReturnStatement[15153-15168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15193-15199]:Modifier[15180-15186]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15200-15207]:PrimitiveType[15187-15194]"
    }, {
      "left" : "isRequired",
      "right" : "isRequired",
      "info" : "SimpleName[15208-15218]:SimpleName[15195-15205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15221-15261]:Block[15208-15248]"
    }, {
      "left" : "return getMinimum() > 0;",
      "right" : "return getMinimum() > 0;",
      "info" : "ReturnStatement[15231-15255]:ReturnStatement[15218-15242]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15267-15273]:Modifier[15254-15260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15274-15278]:PrimitiveType[15261-15265]"
    }, {
      "left" : "defaults",
      "right" : "defaults",
      "info" : "SimpleName[15279-15287]:SimpleName[15266-15274]"
    }, {
      "left" : "final WriteableCommandLine commandLine",
      "right" : "final WriteableCommandLine commandLine",
      "info" : "SingleVariableDeclaration[15288-15326]:SingleVariableDeclaration[15275-15313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15328-15722]:Block[15315-15709]"
    }, {
      "left" : "super.defaults(commandLine);",
      "right" : "super.defaults(commandLine);",
      "info" : "ExpressionStatement[15338-15366]:ExpressionStatement[15325-15353]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[15376-15540]:ForStatement[15363-15527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15434-15540]:Block[15421-15527]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[15448-15488]:VariableDeclarationStatement[15435-15475]"
    }, {
      "left" : "option.defaults(commandLine);",
      "right" : "option.defaults(commandLine);",
      "info" : "ExpressionStatement[15501-15530]:ExpressionStatement[15488-15517]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[15550-15716]:ForStatement[15537-15703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15610-15716]:Block[15597-15703]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[15624-15664]:VariableDeclarationStatement[15611-15651]"
    }, {
      "left" : "option.defaults(commandLine);",
      "right" : "option.defaults(commandLine);",
      "info" : "ExpressionStatement[15677-15706]:ExpressionStatement[15664-15693]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15727-15732]:TYPE_DECLARATION_KIND[15714-15719]"
    }, {
      "left" : "ReverseStringComparator",
      "right" : "ReverseStringComparator",
      "info" : "SimpleName[15733-15756]:SimpleName[15720-15743]"
    }, {
      "left" : "Comparator",
      "right" : "Comparator",
      "info" : "SimpleType[15768-15778]:SimpleType[15755-15765]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15864-15871]:Modifier[15851-15858]"
    }, {
      "left" : "ReverseStringComparator",
      "right" : "ReverseStringComparator",
      "info" : "SimpleName[15872-15895]:SimpleName[15859-15882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15898-15957]:Block[15885-15944]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16079-16085]:Modifier[16066-16072]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16086-16092]:Modifier[16073-16079]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16093-16098]:Modifier[16080-16085]"
    }, {
      "left" : "Comparator",
      "right" : "Comparator",
      "info" : "SimpleType[16099-16109]:SimpleType[16086-16096]"
    }, {
      "left" : "getInstance",
      "right" : "getInstance",
      "info" : "SimpleName[16110-16121]:SimpleName[16097-16108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16124-16156]:Block[16111-16143]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[16134-16150]:ReturnStatement[16121-16137]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16162-16168]:Modifier[16149-16155]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16169-16172]:PrimitiveType[16156-16159]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[16173-16180]:SimpleName[16160-16167]"
    }, {
      "left" : "final Object o1",
      "right" : "final Object o1",
      "info" : "SingleVariableDeclaration[16181-16196]:SingleVariableDeclaration[16168-16183]"
    }, {
      "left" : "final Object o2",
      "right" : "final Object o2",
      "info" : "SingleVariableDeclaration[16221-16236]:SingleVariableDeclaration[16208-16223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16238-16358]:Block[16225-16345]"
    }, {
      "left" : "final String s1 = (String) o1;",
      "right" : "final String s1 = (String) o1;",
      "info" : "VariableDeclarationStatement[16248-16278]:VariableDeclarationStatement[16235-16265]"
    }, {
      "left" : "final String s2 = (String) o2;",
      "right" : "final String s2 = (String) o2;",
      "info" : "VariableDeclarationStatement[16287-16317]:VariableDeclarationStatement[16274-16304]"
    }, {
      "left" : "return -s1.compareTo(s2);",
      "right" : "return -s1.compareTo(s2);",
      "info" : "ReturnStatement[16327-16352]:ReturnStatement[16314-16339]"
    } ]
  },
  "interFileMappings" : { }
}