{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "@Rule public final CompilationRule compilation = new CompilationRule();",
      "right" : "@Rule public final CompilationRule compilation = new CompilationRule();",
      "info" : "FieldDeclaration[1411-1482]:FieldDeclaration[928-999]"
    } ],
    "mappings" : [
 {
      "left" : "package com.squareup.javapoet;",
      "right" : "package com.squareup.javapoet;",
      "info" : "PackageDeclaration[596-626]:PackageDeclaration[596-626]"
    }, {
      "left" : "compilation.getElements()",
      "right" : "compilation.getElements()",
      "info" : "MethodInvocation[1546-1571]:MethodInvocation[1061-1086]"
    }, {
      "left" : "compilation.getTypes()",
      "right" : "compilation.getTypes()",
      "info" : "MethodInvocation[6960-6982]:MethodInvocation[1147-1169]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: src/test/java/com/squareup/javapoet/AbstractTypesTest.java" : {
      "matchedElements" : [
 {
        "left" : "TypesTest",
        "right" : "AbstractTypesTest",
        "info" : "TypeDeclaration[1355-9106]:TypeDeclaration[1355-8904]"
      }, {
        "left" : "private TypeElement getElement(Class<?> clazz)",
        "right" : "private TypeElement getElement(Class<?> clazz)",
        "info" : "MethodDeclaration[1486-1617]:MethodDeclaration[1484-1603]"
      }, {
        "left" : "private TypeMirror getMirror(Class<?> clazz)",
        "right" : "private TypeMirror getMirror(Class<?> clazz)",
        "info" : "MethodDeclaration[1621-1710]:MethodDeclaration[1607-1696]"
      }, {
        "left" : "public void getBasicTypeMirror()",
        "right" : "public void getBasicTypeMirror()",
        "info" : "MethodDeclaration[1714-2075]:MethodDeclaration[1700-2077]"
      }, {
        "left" : "public void getParameterizedTypeMirror()",
        "right" : "public void getParameterizedTypeMirror()",
        "info" : "MethodDeclaration[2079-2383]:MethodDeclaration[2081-2373]"
      }, {
        "left" : "Parameterized",
        "right" : "Parameterized",
        "info" : "TypeDeclaration[2387-2659]:TypeDeclaration[2377-2649]"
      }, {
        "left" : "public void getTypeVariableTypeMirror()",
        "right" : "public void getTypeVariableTypeMirror()",
        "info" : "MethodDeclaration[2663-4021]:MethodDeclaration[2653-4011]"
      }, {
        "left" : "public void getPrimitiveTypeMirror()",
        "right" : "public void getPrimitiveTypeMirror()",
        "info" : "MethodDeclaration[4025-5045]:MethodDeclaration[4015-4939]"
      }, {
        "left" : "public void getArrayTypeMirror()",
        "right" : "public void getArrayTypeMirror()",
        "info" : "MethodDeclaration[5049-5240]:MethodDeclaration[4943-5122]"
      }, {
        "left" : "public void getVoidTypeMirror()",
        "right" : "public void getVoidTypeMirror()",
        "info" : "MethodDeclaration[5244-5400]:MethodDeclaration[5126-5270]"
      }, {
        "left" : "public void getNullTypeMirror()",
        "right" : "public void getNullTypeMirror()",
        "info" : "MethodDeclaration[5404-5585]:MethodDeclaration[5274-5443]"
      }, {
        "left" : "public void parameterizedType() throws Exception",
        "right" : "public void parameterizedType() throws Exception",
        "info" : "MethodDeclaration[5589-5840]:MethodDeclaration[5447-5698]"
      }, {
        "left" : "public void arrayType() throws Exception",
        "right" : "public void arrayType() throws Exception",
        "info" : "MethodDeclaration[5844-6018]:MethodDeclaration[5702-5876]"
      }, {
        "left" : "public void wildcardExtendsType() throws Exception",
        "right" : "public void wildcardExtendsType() throws Exception",
        "info" : "MethodDeclaration[6022-6239]:MethodDeclaration[5880-6097]"
      }, {
        "left" : "public void wildcardExtendsObject() throws Exception",
        "right" : "public void wildcardExtendsObject() throws Exception",
        "info" : "MethodDeclaration[6243-6425]:MethodDeclaration[6101-6283]"
      }, {
        "left" : "public void wildcardSuperType() throws Exception",
        "right" : "public void wildcardSuperType() throws Exception",
        "info" : "MethodDeclaration[6429-6632]:MethodDeclaration[6287-6490]"
      }, {
        "left" : "public void wildcardMirrorNoBounds() throws Exception",
        "right" : "public void wildcardMirrorNoBounds() throws Exception",
        "info" : "MethodDeclaration[6636-6873]:MethodDeclaration[6494-6719]"
      }, {
        "left" : "public void wildcardMirrorExtendsType() throws Exception",
        "right" : "public void wildcardMirrorExtendsType() throws Exception",
        "info" : "MethodDeclaration[6877-7326]:MethodDeclaration[6723-7148]"
      }, {
        "left" : "public void wildcardMirrorSuperType() throws Exception",
        "right" : "public void wildcardMirrorSuperType() throws Exception",
        "info" : "MethodDeclaration[7330-7751]:MethodDeclaration[7152-7549]"
      }, {
        "left" : "public void typeVariable() throws Exception",
        "right" : "public void typeVariable() throws Exception",
        "info" : "MethodDeclaration[7755-7978]:MethodDeclaration[7553-7776]"
      }, {
        "left" : "public void box() throws Exception",
        "right" : "public void box() throws Exception",
        "info" : "MethodDeclaration[7982-8512]:MethodDeclaration[7780-8310]"
      }, {
        "left" : "public void unbox() throws Exception",
        "right" : "public void unbox() throws Exception",
        "info" : "MethodDeclaration[8516-9104]:MethodDeclaration[8314-8902]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1533-1617]:Block[1531-1603]"
      }, {
        "left" : "return compilation.getElements().getTypeElement(clazz.getCanonicalName());",
        "right" : "return getElements().getTypeElement(clazz.getCanonicalName());",
        "info" : "ReturnStatement[1539-1613]:ReturnStatement[1537-1599]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1666-1710]:Block[1652-1696]"
      }, {
        "left" : "return getElement(clazz).asType();",
        "right" : "return getElement(clazz).asType();",
        "info" : "ReturnStatement[1672-1706]:ReturnStatement[1658-1692]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1753-2075]:Block[1739-2077]"
      }, {
        "left" : "assertThat(TypeName.get(getMirror(Object.class)))\n        .isEqualTo(ClassName.get(Object.class));",
        "right" : "assertThat(TypeName.get(getMirror(Object.class)))\n        .isEqualTo(ClassName.get(Object.class));",
        "info" : "ExpressionStatement[1759-1857]:ExpressionStatement[1745-1843]"
      }, {
        "left" : "assertThat(TypeName.get(getMirror(Charset.class)))\n        .isEqualTo(ClassName.get(Charset.class));",
        "right" : "assertThat(TypeName.get(getMirror(Charset.class)))\n        .isEqualTo(ClassName.get(Charset.class));",
        "info" : "ExpressionStatement[1862-1962]:ExpressionStatement[1848-1948]"
      }, {
        "left" : "assertThat(TypeName.get(getMirror(TypesTest.class)))\n        .isEqualTo(ClassName.get(TypesTest.class));",
        "right" : "assertThat(TypeName.get(getMirror(AbstractTypesTest.class)))\n        .isEqualTo(ClassName.get(AbstractTypesTest.class));",
        "info" : "ExpressionStatement[1967-2071]:ExpressionStatement[1953-2073]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2126-2383]:Block[2128-2373]"
      }, {
        "left" : "DeclaredType setType =\n        compilation.getTypes().getDeclaredType(getElement(Set.class), getMirror(Object.class));",
        "right" : "DeclaredType setType =\n        getTypes().getDeclaredType(getElement(Set.class), getMirror(Object.class));",
        "info" : "VariableDeclarationStatement[2132-2250]:VariableDeclarationStatement[2134-2240]"
      }, {
        "left" : "assertThat(TypeName.get(setType))\n        .isEqualTo(ParameterizedTypeName.get(ClassName.get(Set.class), ClassName.OBJECT));",
        "right" : "assertThat(TypeName.get(setType))\n        .isEqualTo(ParameterizedTypeName.get(ClassName.get(Set.class), ClassName.OBJECT));",
        "info" : "ExpressionStatement[2255-2379]:ExpressionStatement[2245-2369]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2709-4021]:Block[2699-4011]"
      }, {
        "left" : "List<? extends TypeParameterElement> typeVariables =\n        getElement(Parameterized.class).getTypeParameters();",
        "right" : "List<? extends TypeParameterElement> typeVariables =\n        getElement(Parameterized.class).getTypeParameters();",
        "info" : "VariableDeclarationStatement[2715-2828]:VariableDeclarationStatement[2705-2818]"
      }, {
        "left" : "ClassName number = ClassName.get(Number.class);",
        "right" : "ClassName number = ClassName.get(Number.class);",
        "info" : "VariableDeclarationStatement[2900-2947]:VariableDeclarationStatement[2890-2937]"
      }, {
        "left" : "ClassName runnable = ClassName.get(Runnable.class);",
        "right" : "ClassName runnable = ClassName.get(Runnable.class);",
        "info" : "VariableDeclarationStatement[2952-3003]:VariableDeclarationStatement[2942-2993]"
      }, {
        "left" : "ClassName serializable = ClassName.get(Serializable.class);",
        "right" : "ClassName serializable = ClassName.get(Serializable.class);",
        "info" : "VariableDeclarationStatement[3008-3067]:VariableDeclarationStatement[2998-3057]"
      }, {
        "left" : "assertThat(TypeName.get(typeVariables.get(0).asType()))\n        .isEqualTo(TypeVariableName.get(\"Simple\"));",
        "right" : "assertThat(TypeName.get(typeVariables.get(0).asType()))\n        .isEqualTo(TypeVariableName.get(\"Simple\"));",
        "info" : "ExpressionStatement[3073-3180]:ExpressionStatement[3063-3170]"
      }, {
        "left" : "assertThat(TypeName.get(typeVariables.get(1).asType()))\n        .isEqualTo(TypeVariableName.get(\"ExtendsClass\", number));",
        "right" : "assertThat(TypeName.get(typeVariables.get(1).asType()))\n        .isEqualTo(TypeVariableName.get(\"ExtendsClass\", number));",
        "info" : "ExpressionStatement[3185-3306]:ExpressionStatement[3175-3296]"
      }, {
        "left" : "assertThat(TypeName.get(typeVariables.get(2).asType()))\n        .isEqualTo(TypeVariableName.get(\"ExtendsInterface\", runnable));",
        "right" : "assertThat(TypeName.get(typeVariables.get(2).asType()))\n        .isEqualTo(TypeVariableName.get(\"ExtendsInterface\", runnable));",
        "info" : "ExpressionStatement[3311-3438]:ExpressionStatement[3301-3428]"
      }, {
        "left" : "assertThat(TypeName.get(typeVariables.get(3).asType()))\n        .isEqualTo(TypeVariableName.get(\"ExtendsTypeVariable\", TypeVariableName.get(\"Simple\")));",
        "right" : "assertThat(TypeName.get(typeVariables.get(3).asType()))\n        .isEqualTo(TypeVariableName.get(\"ExtendsTypeVariable\", TypeVariableName.get(\"Simple\")));",
        "info" : "ExpressionStatement[3443-3595]:ExpressionStatement[3433-3585]"
      }, {
        "left" : "assertThat(TypeName.get(typeVariables.get(4).asType()))\n        .isEqualTo(TypeVariableName.get(\"Intersection\", number, runnable));",
        "right" : "assertThat(TypeName.get(typeVariables.get(4).asType()))\n        .isEqualTo(TypeVariableName.get(\"Intersection\", number, runnable));",
        "info" : "ExpressionStatement[3600-3731]:ExpressionStatement[3590-3721]"
      }, {
        "left" : "assertThat(TypeName.get(typeVariables.get(5).asType()))\n        .isEqualTo(TypeVariableName.get(\"IntersectionOfInterfaces\", runnable, serializable));",
        "right" : "assertThat(TypeName.get(typeVariables.get(5).asType()))\n        .isEqualTo(TypeVariableName.get(\"IntersectionOfInterfaces\", runnable, serializable));",
        "info" : "ExpressionStatement[3736-3885]:ExpressionStatement[3726-3875]"
      }, {
        "left" : "assertThat(((TypeVariableName) TypeName.get(typeVariables.get(4).asType())).bounds)\n        .containsExactly(number, runnable);",
        "right" : "assertThat(((TypeVariableName) TypeName.get(typeVariables.get(4).asType())).bounds)\n        .containsExactly(number, runnable);",
        "info" : "ExpressionStatement[3890-4017]:ExpressionStatement[3880-4007]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4068-5045]:Block[4058-4939]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.BOOLEAN)))\n        .isEqualTo(TypeName.BOOLEAN);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.BOOLEAN)))\n        .isEqualTo(TypeName.BOOLEAN);",
        "info" : "ExpressionStatement[4074-4195]:ExpressionStatement[4064-4173]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.BYTE)))\n        .isEqualTo(TypeName.BYTE);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.BYTE)))\n        .isEqualTo(TypeName.BYTE);",
        "info" : "ExpressionStatement[4200-4315]:ExpressionStatement[4178-4281]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.SHORT)))\n        .isEqualTo(TypeName.SHORT);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.SHORT)))\n        .isEqualTo(TypeName.SHORT);",
        "info" : "ExpressionStatement[4320-4437]:ExpressionStatement[4286-4391]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.INT)))\n        .isEqualTo(TypeName.INT);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.INT)))\n        .isEqualTo(TypeName.INT);",
        "info" : "ExpressionStatement[4442-4555]:ExpressionStatement[4396-4497]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.LONG)))\n        .isEqualTo(TypeName.LONG);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.LONG)))\n        .isEqualTo(TypeName.LONG);",
        "info" : "ExpressionStatement[4560-4675]:ExpressionStatement[4502-4605]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.CHAR)))\n        .isEqualTo(TypeName.CHAR);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.CHAR)))\n        .isEqualTo(TypeName.CHAR);",
        "info" : "ExpressionStatement[4680-4795]:ExpressionStatement[4610-4713]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.FLOAT)))\n        .isEqualTo(TypeName.FLOAT);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.FLOAT)))\n        .isEqualTo(TypeName.FLOAT);",
        "info" : "ExpressionStatement[4800-4917]:ExpressionStatement[4718-4823]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getPrimitiveType(TypeKind.DOUBLE)))\n        .isEqualTo(TypeName.DOUBLE);",
        "right" : "assertThat(TypeName.get(getTypes().getPrimitiveType(TypeKind.DOUBLE)))\n        .isEqualTo(TypeName.DOUBLE);",
        "info" : "ExpressionStatement[4922-5041]:ExpressionStatement[4828-4935]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5088-5240]:Block[4982-5122]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getArrayType(getMirror(Object.class))))\n        .isEqualTo(ArrayTypeName.of(ClassName.OBJECT));",
        "right" : "assertThat(TypeName.get(getTypes().getArrayType(getMirror(Object.class))))\n        .isEqualTo(ArrayTypeName.of(ClassName.OBJECT));",
        "info" : "ExpressionStatement[5094-5236]:ExpressionStatement[4988-5118]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5282-5400]:Block[5164-5270]"
      }, {
        "left" : "assertThat(TypeName.get(compilation.getTypes().getNoType(TypeKind.VOID)))\n        .isEqualTo(TypeName.VOID);",
        "right" : "assertThat(TypeName.get(getTypes().getNoType(TypeKind.VOID)))\n        .isEqualTo(TypeName.VOID);",
        "info" : "ExpressionStatement[5288-5396]:ExpressionStatement[5170-5266]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5442-5585]:Block[5312-5443]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[5448-5581]:TryStatement[5318-5439]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5452-5531]:Block[5322-5389]"
      }, {
        "left" : "fail();",
        "right" : "fail();",
        "info" : "ExpressionStatement[5518-5525]:ExpressionStatement[5376-5383]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5574-5581]:Block[5432-5439]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5644-5840]:Block[5502-5698]"
      }, {
        "left" : "ParameterizedTypeName type = ParameterizedTypeName.get(Map.class, String.class, Long.class);",
        "right" : "ParameterizedTypeName type = ParameterizedTypeName.get(Map.class, String.class, Long.class);",
        "info" : "VariableDeclarationStatement[5650-5742]:VariableDeclarationStatement[5508-5600]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"java.util.Map<java.lang.String, java.lang.Long>\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"java.util.Map<java.lang.String, java.lang.Long>\");",
        "info" : "ExpressionStatement[5747-5836]:ExpressionStatement[5605-5694]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5891-6018]:Block[5749-5876]"
      }, {
        "left" : "ArrayTypeName type = ArrayTypeName.of(String.class);",
        "right" : "ArrayTypeName type = ArrayTypeName.of(String.class);",
        "info" : "VariableDeclarationStatement[5897-5949]:VariableDeclarationStatement[5755-5807]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"java.lang.String[]\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"java.lang.String[]\");",
        "info" : "ExpressionStatement[5954-6014]:ExpressionStatement[5812-5872]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6079-6239]:Block[5937-6097]"
      }, {
        "left" : "WildcardTypeName type = WildcardTypeName.subtypeOf(CharSequence.class);",
        "right" : "WildcardTypeName type = WildcardTypeName.subtypeOf(CharSequence.class);",
        "info" : "VariableDeclarationStatement[6085-6156]:VariableDeclarationStatement[5943-6014]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");",
        "info" : "ExpressionStatement[6161-6235]:ExpressionStatement[6019-6093]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6302-6425]:Block[6160-6283]"
      }, {
        "left" : "WildcardTypeName type = WildcardTypeName.subtypeOf(Object.class);",
        "right" : "WildcardTypeName type = WildcardTypeName.subtypeOf(Object.class);",
        "info" : "VariableDeclarationStatement[6308-6373]:VariableDeclarationStatement[6166-6231]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"?\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"?\");",
        "info" : "ExpressionStatement[6378-6421]:ExpressionStatement[6236-6279]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6484-6632]:Block[6342-6490]"
      }, {
        "left" : "WildcardTypeName type = WildcardTypeName.supertypeOf(String.class);",
        "right" : "WildcardTypeName type = WildcardTypeName.supertypeOf(String.class);",
        "info" : "VariableDeclarationStatement[6490-6557]:VariableDeclarationStatement[6348-6415]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"? super java.lang.String\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"? super java.lang.String\");",
        "info" : "ExpressionStatement[6562-6628]:ExpressionStatement[6420-6486]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6696-6873]:Block[6554-6719]"
      }, {
        "left" : "WildcardType wildcard = compilation.getTypes().getWildcardType(null, null);",
        "right" : "WildcardType wildcard = getTypes().getWildcardType(null, null);",
        "info" : "VariableDeclarationStatement[6702-6777]:VariableDeclarationStatement[6560-6623]"
      }, {
        "left" : "TypeName type = TypeName.get(wildcard);",
        "right" : "TypeName type = TypeName.get(wildcard);",
        "info" : "VariableDeclarationStatement[6782-6821]:VariableDeclarationStatement[6628-6667]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"?\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"?\");",
        "info" : "ExpressionStatement[6826-6869]:ExpressionStatement[6672-6715]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[6940-7326]:Block[6786-7148]"
      }, {
        "left" : "TypeMirror charSequence = elements.getTypeElement(CharSequence.class.getName()).asType();",
        "right" : "TypeMirror charSequence = elements.getTypeElement(CharSequence.class.getName()).asType();",
        "info" : "VariableDeclarationStatement[7039-7128]:VariableDeclarationStatement[6861-6950]"
      }, {
        "left" : "WildcardType wildcard = types.getWildcardType(charSequence, null);",
        "right" : "WildcardType wildcard = types.getWildcardType(charSequence, null);",
        "info" : "VariableDeclarationStatement[7133-7199]:VariableDeclarationStatement[6955-7021]"
      }, {
        "left" : "TypeName type = TypeName.get(wildcard);",
        "right" : "TypeName type = TypeName.get(wildcard);",
        "info" : "VariableDeclarationStatement[7204-7243]:VariableDeclarationStatement[7026-7065]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"? extends java.lang.CharSequence\");",
        "info" : "ExpressionStatement[7248-7322]:ExpressionStatement[7070-7144]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7391-7751]:Block[7213-7549]"
      }, {
        "left" : "TypeMirror string = elements.getTypeElement(String.class.getName()).asType();",
        "right" : "TypeMirror string = elements.getTypeElement(String.class.getName()).asType();",
        "info" : "VariableDeclarationStatement[7490-7567]:VariableDeclarationStatement[7288-7365]"
      }, {
        "left" : "WildcardType wildcard = types.getWildcardType(null, string);",
        "right" : "WildcardType wildcard = types.getWildcardType(null, string);",
        "info" : "VariableDeclarationStatement[7572-7632]:VariableDeclarationStatement[7370-7430]"
      }, {
        "left" : "TypeName type = TypeName.get(wildcard);",
        "right" : "TypeName type = TypeName.get(wildcard);",
        "info" : "VariableDeclarationStatement[7637-7676]:VariableDeclarationStatement[7435-7474]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"? super java.lang.String\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"? super java.lang.String\");",
        "info" : "ExpressionStatement[7681-7747]:ExpressionStatement[7479-7545]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[7805-7978]:Block[7603-7776]"
      }, {
        "left" : "TypeVariableName type = TypeVariableName.get(\"T\", CharSequence.class);",
        "right" : "TypeVariableName type = TypeVariableName.get(\"T\", CharSequence.class);",
        "info" : "VariableDeclarationStatement[7811-7881]:VariableDeclarationStatement[7609-7679]"
      }, {
        "left" : "assertThat(type.toString()).isEqualTo(\"T\");",
        "right" : "assertThat(type.toString()).isEqualTo(\"T\");",
        "info" : "ExpressionStatement[7886-7929]:ExpressionStatement[7684-7727]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[8023-8512]:Block[7821-8310]"
      }, {
        "left" : "assertThat(TypeName.INT.box()).isEqualTo(ClassName.get(Integer.class));",
        "right" : "assertThat(TypeName.INT.box()).isEqualTo(ClassName.get(Integer.class));",
        "info" : "ExpressionStatement[8029-8100]:ExpressionStatement[7827-7898]"
      }, {
        "left" : "assertThat(TypeName.VOID.box()).isEqualTo(ClassName.get(Void.class));",
        "right" : "assertThat(TypeName.VOID.box()).isEqualTo(ClassName.get(Void.class));",
        "info" : "ExpressionStatement[8105-8174]:ExpressionStatement[7903-7972]"
      }, {
        "left" : "assertThat(ClassName.get(Integer.class).box()).isEqualTo(ClassName.get(Integer.class));",
        "right" : "assertThat(ClassName.get(Integer.class).box()).isEqualTo(ClassName.get(Integer.class));",
        "info" : "ExpressionStatement[8179-8266]:ExpressionStatement[7977-8064]"
      }, {
        "left" : "assertThat(ClassName.get(Void.class).box()).isEqualTo(ClassName.get(Void.class));",
        "right" : "assertThat(ClassName.get(Void.class).box()).isEqualTo(ClassName.get(Void.class));",
        "info" : "ExpressionStatement[8271-8352]:ExpressionStatement[8069-8150]"
      }, {
        "left" : "assertThat(TypeName.OBJECT.box()).isEqualTo(TypeName.OBJECT);",
        "right" : "assertThat(TypeName.OBJECT.box()).isEqualTo(TypeName.OBJECT);",
        "info" : "ExpressionStatement[8357-8418]:ExpressionStatement[8155-8216]"
      }, {
        "left" : "assertThat(ClassName.get(String.class).box()).isEqualTo(ClassName.get(String.class));",
        "right" : "assertThat(ClassName.get(String.class).box()).isEqualTo(ClassName.get(String.class));",
        "info" : "ExpressionStatement[8423-8508]:ExpressionStatement[8221-8306]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[8559-9104]:Block[8357-8902]"
      }, {
        "left" : "assertThat(TypeName.INT).isEqualTo(TypeName.INT.unbox());",
        "right" : "assertThat(TypeName.INT).isEqualTo(TypeName.INT.unbox());",
        "info" : "ExpressionStatement[8565-8622]:ExpressionStatement[8363-8420]"
      }, {
        "left" : "assertThat(TypeName.VOID).isEqualTo(TypeName.VOID.unbox());",
        "right" : "assertThat(TypeName.VOID).isEqualTo(TypeName.VOID.unbox());",
        "info" : "ExpressionStatement[8627-8686]:ExpressionStatement[8425-8484]"
      }, {
        "left" : "assertThat(ClassName.get(Integer.class).unbox()).isEqualTo(TypeName.INT.unbox());",
        "right" : "assertThat(ClassName.get(Integer.class).unbox()).isEqualTo(TypeName.INT.unbox());",
        "info" : "ExpressionStatement[8691-8772]:ExpressionStatement[8489-8570]"
      }, {
        "left" : "assertThat(ClassName.get(Void.class).unbox()).isEqualTo(TypeName.VOID.unbox());",
        "right" : "assertThat(ClassName.get(Void.class).unbox()).isEqualTo(TypeName.VOID.unbox());",
        "info" : "ExpressionStatement[8777-8856]:ExpressionStatement[8575-8654]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[8861-8972]:TryStatement[8659-8770]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[8865-8917]:Block[8663-8715]"
      }, {
        "left" : "TypeName.OBJECT.unbox();",
        "right" : "TypeName.OBJECT.unbox();",
        "info" : "ExpressionStatement[8873-8897]:ExpressionStatement[8671-8695]"
      }, {
        "left" : "fail();",
        "right" : "fail();",
        "info" : "ExpressionStatement[8904-8911]:ExpressionStatement[8702-8709]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[8965-8972]:Block[8763-8770]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[8977-9100]:TryStatement[8775-8898]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[8981-9045]:Block[8779-8843]"
      }, {
        "left" : "ClassName.get(String.class).unbox();",
        "right" : "ClassName.get(String.class).unbox();",
        "info" : "ExpressionStatement[8989-9025]:ExpressionStatement[8787-8823]"
      }, {
        "left" : "fail();",
        "right" : "fail();",
        "info" : "ExpressionStatement[9032-9039]:ExpressionStatement[8830-8837]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[9093-9100]:Block[8891-8898]"
      } ]
    }
  }
}