{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Base64",
      "right" : "Base64",
      "info" : "TypeDeclaration[1073-41150]:TypeDeclaration[1073-41151]"
    }, {
      "left" : "private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;",
      "right" : "private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;",
      "info" : "FieldDeclaration[2206-2264]:FieldDeclaration[2206-2264]"
    }, {
      "left" : "private static final int DEFAULT_BUFFER_SIZE = 8192;",
      "right" : "private static final int DEFAULT_BUFFER_SIZE = 8192;",
      "info" : "FieldDeclaration[2270-2322]:FieldDeclaration[2270-2322]"
    }, {
      "left" : "public static final int MIME_CHUNK_SIZE = 76;",
      "right" : "public static final int MIME_CHUNK_SIZE = 76;",
      "info" : "FieldDeclaration[2328-2698]:FieldDeclaration[2328-2698]"
    }, {
      "left" : "public static final int PEM_CHUNK_SIZE = 64;",
      "right" : "public static final int PEM_CHUNK_SIZE = 64;",
      "info" : "FieldDeclaration[2704-3078]:FieldDeclaration[2704-3078]"
    }, {
      "left" : "static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
      "right" : "static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};",
      "info" : "FieldDeclaration[3084-3409]:FieldDeclaration[3084-3409]"
    }, {
      "left" : "private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };",
      "right" : "private static final byte[] STANDARD_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n    };",
      "info" : "FieldDeclaration[3415-4197]:FieldDeclaration[3415-4197]"
    }, {
      "left" : "private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };",
      "right" : "private static final byte[] URL_SAFE_ENCODE_TABLE = {\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'\n    };",
      "info" : "FieldDeclaration[4203-4887]:FieldDeclaration[4203-4887]"
    }, {
      "left" : "private static final byte PAD = '=';",
      "right" : "private static final byte PAD = '=';",
      "info" : "FieldDeclaration[4893-4977]:FieldDeclaration[4893-4977]"
    }, {
      "left" : "private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };",
      "right" : "private static final byte[] DECODE_TABLE = {\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54,\n            55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n            5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n            24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n    };",
      "info" : "FieldDeclaration[4983-6320]:FieldDeclaration[4983-6320]"
    }, {
      "left" : "private static final int MASK_6BITS = 0x3f;",
      "right" : "private static final int MASK_6BITS = 0x3f;",
      "info" : "FieldDeclaration[6326-6428]:FieldDeclaration[6326-6428]"
    }, {
      "left" : "private static final int MASK_8BITS = 0xff;",
      "right" : "private static final int MASK_8BITS = 0xff;",
      "info" : "FieldDeclaration[6434-6547]:FieldDeclaration[6434-6547]"
    }, {
      "left" : "private final byte[] encodeTable;",
      "right" : "private final byte[] encodeTable;",
      "info" : "FieldDeclaration[6817-7132]:FieldDeclaration[6817-7132]"
    }, {
      "left" : "private final int lineLength;",
      "right" : "private final int lineLength;",
      "info" : "FieldDeclaration[7138-7319]:FieldDeclaration[7138-7319]"
    }, {
      "left" : "private final byte[] lineSeparator;",
      "right" : "private final byte[] lineSeparator;",
      "info" : "FieldDeclaration[7325-7465]:FieldDeclaration[7325-7465]"
    }, {
      "left" : "private final int decodeSize;",
      "right" : "private final int decodeSize;",
      "info" : "FieldDeclaration[7471-7688]:FieldDeclaration[7471-7688]"
    }, {
      "left" : "private final int encodeSize;",
      "right" : "private final int encodeSize;",
      "info" : "FieldDeclaration[7694-7911]:FieldDeclaration[7694-7911]"
    }, {
      "left" : "private byte[] buffer;",
      "right" : "private byte[] buffer;",
      "info" : "FieldDeclaration[7917-7984]:FieldDeclaration[7917-7984]"
    }, {
      "left" : "private int pos;",
      "right" : "private int pos;",
      "info" : "FieldDeclaration[7990-8092]:FieldDeclaration[7990-8092]"
    }, {
      "left" : "private int readPos;",
      "right" : "private int readPos;",
      "info" : "FieldDeclaration[8098-8203]:FieldDeclaration[8098-8203]"
    }, {
      "left" : "private int currentLinePos;",
      "right" : "private int currentLinePos;",
      "info" : "FieldDeclaration[8209-8457]:FieldDeclaration[8209-8457]"
    }, {
      "left" : "private int modulus;",
      "right" : "private int modulus;",
      "info" : "FieldDeclaration[8463-8644]:FieldDeclaration[8463-8644]"
    }, {
      "left" : "private boolean eof;",
      "right" : "private boolean eof;",
      "info" : "FieldDeclaration[8650-8839]:FieldDeclaration[8650-8839]"
    }, {
      "left" : "private int x;",
      "right" : "private int x;",
      "info" : "FieldDeclaration[8845-9048]:FieldDeclaration[8845-9048]"
    }, {
      "left" : "public Base64()",
      "right" : "public Base64()",
      "info" : "MethodDeclaration[9054-9412]:MethodDeclaration[9054-9412]"
    }, {
      "left" : "public Base64(boolean urlSafe)",
      "right" : "public Base64(boolean urlSafe)",
      "info" : "MethodDeclaration[9418-10043]:MethodDeclaration[9418-10043]"
    }, {
      "left" : "public Base64(int lineLength)",
      "right" : "public Base64(int lineLength)",
      "info" : "MethodDeclaration[10049-10915]:MethodDeclaration[10049-10915]"
    }, {
      "left" : "public Base64(int lineLength, byte[] lineSeparator)",
      "right" : "public Base64(int lineLength, byte[] lineSeparator)",
      "info" : "MethodDeclaration[10921-12047]:MethodDeclaration[10921-12047]"
    }, {
      "left" : "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
      "right" : "public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)",
      "info" : "MethodDeclaration[12053-14285]:MethodDeclaration[12053-14285]"
    }, {
      "left" : "public boolean isUrlSafe()",
      "right" : "public boolean isUrlSafe()",
      "info" : "MethodDeclaration[14291-14570]:MethodDeclaration[14291-14570]"
    }, {
      "left" : "boolean hasData()",
      "right" : "boolean hasData()",
      "info" : "MethodDeclaration[14576-14809]:MethodDeclaration[14576-14809]"
    }, {
      "left" : "int avail()",
      "right" : "int avail()",
      "info" : "MethodDeclaration[14815-15041]:MethodDeclaration[14815-15041]"
    }, {
      "left" : "private void resizeBuffer()",
      "right" : "private void resizeBuffer()",
      "info" : "MethodDeclaration[15047-15433]:MethodDeclaration[15047-15433]"
    }, {
      "left" : "int readResults(byte[] b, int bPos, int bAvail)",
      "right" : "int readResults(byte[] b, int bPos, int bAvail)",
      "info" : "MethodDeclaration[15439-16623]:MethodDeclaration[15439-16623]"
    }, {
      "left" : "void setInitialBuffer(byte[] out, int outPos, int outAvail)",
      "right" : "void setInitialBuffer(byte[] out, int outPos, int outAvail)",
      "info" : "MethodDeclaration[16629-17457]:MethodDeclaration[16629-17457]"
    }, {
      "left" : "void encode(byte[] in, int inPos, int inAvail)",
      "right" : "void encode(byte[] in, int inPos, int inAvail)",
      "info" : "MethodDeclaration[17463-20850]:MethodDeclaration[17463-20850]"
    }, {
      "left" : "void decode(byte[] in, int inPos, int inAvail)",
      "right" : "void decode(byte[] in, int inPos, int inAvail)",
      "info" : "MethodDeclaration[20856-23898]:MethodDeclaration[20856-23898]"
    }, {
      "left" : "public static boolean isBase64(byte octet)",
      "right" : "public static boolean isBase64(byte octet)",
      "info" : "MethodDeclaration[23904-24354]:MethodDeclaration[23904-24354]"
    }, {
      "left" : "public static boolean isArrayByteBase64(byte[] arrayOctet)",
      "right" : "public static boolean isArrayByteBase64(byte[] arrayOctet)",
      "info" : "MethodDeclaration[24360-25030]:MethodDeclaration[24360-25030]"
    }, {
      "left" : "private static boolean containsBase64Byte(byte[] arrayOctet)",
      "right" : "private static boolean containsBase64Byte(byte[] arrayOctet)",
      "info" : "MethodDeclaration[25036-25570]:MethodDeclaration[25036-25570]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData)",
      "info" : "MethodDeclaration[25576-25940]:MethodDeclaration[25576-25940]"
    }, {
      "left" : "public static String encodeBase64String(byte[] binaryData)",
      "right" : "public static String encodeBase64String(byte[] binaryData)",
      "info" : "MethodDeclaration[25946-26346]:MethodDeclaration[25946-26347]"
    }, {
      "left" : "public static byte[] encodeBase64URLSafe(byte[] binaryData)",
      "right" : "public static byte[] encodeBase64URLSafe(byte[] binaryData)",
      "info" : "MethodDeclaration[26356-26850]:MethodDeclaration[26357-26851]"
    }, {
      "left" : "public static String encodeBase64URLSafeString(byte[] binaryData)",
      "right" : "public static String encodeBase64URLSafeString(byte[] binaryData)",
      "info" : "MethodDeclaration[26856-27355]:MethodDeclaration[26857-27356]"
    }, {
      "left" : "public static byte[] encodeBase64Chunked(byte[] binaryData)",
      "right" : "public static byte[] encodeBase64Chunked(byte[] binaryData)",
      "info" : "MethodDeclaration[27365-27741]:MethodDeclaration[27366-27742]"
    }, {
      "left" : "public Object decode(Object pObject) throws DecoderException",
      "right" : "public Object decode(Object pObject) throws DecoderException",
      "info" : "MethodDeclaration[27747-28674]:MethodDeclaration[27748-28675]"
    }, {
      "left" : "public byte[] decode(String pArray)",
      "right" : "public byte[] decode(String pArray)",
      "info" : "MethodDeclaration[28680-29023]:MethodDeclaration[28681-29024]"
    }, {
      "left" : "public byte[] decode(byte[] pArray)",
      "right" : "public byte[] decode(byte[] pArray)",
      "info" : "MethodDeclaration[29029-30102]:MethodDeclaration[29030-30103]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)",
      "info" : "MethodDeclaration[30108-30778]:MethodDeclaration[30109-30779]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)",
      "info" : "MethodDeclaration[30784-31643]:MethodDeclaration[30785-31644]"
    }, {
      "left" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
      "right" : "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)",
      "info" : "MethodDeclaration[31649-33115]:MethodDeclaration[31650-33116]"
    }, {
      "left" : "public static byte[] decodeBase64(String base64String)",
      "right" : "public static byte[] decodeBase64(String base64String)",
      "info" : "MethodDeclaration[33121-33438]:MethodDeclaration[33122-33439]"
    }, {
      "left" : "public static byte[] decodeBase64(byte[] base64Data)",
      "right" : "public static byte[] decodeBase64(byte[] base64Data)",
      "info" : "MethodDeclaration[33444-33738]:MethodDeclaration[33445-33739]"
    }, {
      "left" : "static byte[] discardWhitespace(byte[] data)",
      "right" : "static byte[] discardWhitespace(byte[] data)",
      "info" : "MethodDeclaration[33744-34637]:MethodDeclaration[33745-34638]"
    }, {
      "left" : "private static boolean isWhiteSpace(byte byteToCheck)",
      "right" : "private static boolean isWhiteSpace(byte byteToCheck)",
      "info" : "MethodDeclaration[34643-35118]:MethodDeclaration[34644-35119]"
    }, {
      "left" : "public Object encode(Object pObject) throws EncoderException",
      "right" : "public Object encode(Object pObject) throws EncoderException",
      "info" : "MethodDeclaration[35172-35957]:MethodDeclaration[35173-35958]"
    }, {
      "left" : "public String encodeToString(byte[] pArray)",
      "right" : "public String encodeToString(byte[] pArray)",
      "info" : "MethodDeclaration[35963-36362]:MethodDeclaration[35964-36363]"
    }, {
      "left" : "public byte[] encode(byte[] pArray)",
      "right" : "public byte[] encode(byte[] pArray)",
      "info" : "MethodDeclaration[36368-37550]:MethodDeclaration[36369-37551]"
    }, {
      "left" : "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator)",
      "right" : "private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator)",
      "info" : "MethodDeclaration[37556-38729]:MethodDeclaration[37557-38730]"
    }, {
      "left" : "public static BigInteger decodeInteger(byte[] pArray)",
      "right" : "public static BigInteger decodeInteger(byte[] pArray)",
      "info" : "MethodDeclaration[38793-39163]:MethodDeclaration[38794-39164]"
    }, {
      "left" : "public static byte[] encodeInteger(BigInteger bigInt)",
      "right" : "public static byte[] encodeInteger(BigInteger bigInt)",
      "info" : "MethodDeclaration[39169-39750]:MethodDeclaration[39170-39751]"
    }, {
      "left" : "static byte[] toIntegerBytes(BigInteger bigInt)",
      "right" : "static byte[] toIntegerBytes(BigInteger bigInt)",
      "info" : "MethodDeclaration[39756-40893]:MethodDeclaration[39757-40894]"
    }, {
      "left" : "private void reset()",
      "right" : "private void reset()",
      "info" : "MethodDeclaration[40899-41147]:MethodDeclaration[40900-41148]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9388-9412]:Block[9388-9412]"
    }, {
      "left" : "this(0);",
      "right" : "this(0);",
      "info" : "ConstructorInvocation[9398-9406]:ConstructorInvocation[9398-9406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9979-10043]:Block[9979-10043]"
    }, {
      "left" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
      "right" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
      "info" : "ConstructorInvocation[9989-10037]:ConstructorInvocation[9989-10037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10865-10915]:Block[10865-10915]"
    }, {
      "left" : "this(lineLength, CHUNK_SEPARATOR);",
      "right" : "this(lineLength, CHUNK_SEPARATOR);",
      "info" : "ConstructorInvocation[10875-10909]:ConstructorInvocation[10875-10909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11992-12047]:Block[11992-12047]"
    }, {
      "left" : "this(lineLength, lineSeparator, false);",
      "right" : "this(lineLength, lineSeparator, false);",
      "info" : "ConstructorInvocation[12002-12041]:ConstructorInvocation[12002-12041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13365-14285]:Block[13365-14285]"
    }, {
      "left" : "if (lineSeparator == null)",
      "right" : "if (lineSeparator == null)",
      "info" : "IfStatement[13375-13542]:IfStatement[13375-13542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13402-13542]:Block[13402-13542]"
    }, {
      "left" : "lineLength = 0;",
      "right" : "lineLength = 0;",
      "info" : "ExpressionStatement[13416-13431]:ExpressionStatement[13416-13431]"
    }, {
      "left" : "lineSeparator = CHUNK_SEPARATOR;",
      "right" : "lineSeparator = CHUNK_SEPARATOR;",
      "info" : "ExpressionStatement[13473-13505]:ExpressionStatement[13473-13505]"
    }, {
      "left" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
      "right" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
      "info" : "ExpressionStatement[13551-13611]:ExpressionStatement[13551-13611]"
    }, {
      "left" : "this.lineSeparator = new byte[lineSeparator.length];",
      "right" : "this.lineSeparator = new byte[lineSeparator.length];",
      "info" : "ExpressionStatement[13620-13672]:ExpressionStatement[13620-13672]"
    }, {
      "left" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
      "right" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
      "info" : "ExpressionStatement[13681-13761]:ExpressionStatement[13681-13761]"
    }, {
      "left" : "if (lineLength > 0)",
      "right" : "if (lineLength > 0)",
      "info" : "IfStatement[13770-13907]:IfStatement[13770-13907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13790-13857]:Block[13790-13857]"
    }, {
      "left" : "this.encodeSize = 4 + lineSeparator.length;",
      "right" : "this.encodeSize = 4 + lineSeparator.length;",
      "info" : "ExpressionStatement[13804-13847]:ExpressionStatement[13804-13847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13863-13907]:Block[13863-13907]"
    }, {
      "left" : "this.encodeSize = 4;",
      "right" : "this.encodeSize = 4;",
      "info" : "ExpressionStatement[13877-13897]:ExpressionStatement[13877-13897]"
    }, {
      "left" : "this.decodeSize = this.encodeSize - 1;",
      "right" : "this.decodeSize = this.encodeSize - 1;",
      "info" : "ExpressionStatement[13916-13954]:ExpressionStatement[13916-13954]"
    }, {
      "left" : "if (containsBase64Byte(lineSeparator))",
      "right" : "if (containsBase64Byte(lineSeparator))",
      "info" : "IfStatement[13963-14195]:IfStatement[13963-14195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14002-14195]:Block[14002-14195]"
    }, {
      "left" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
      "right" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
      "info" : "VariableDeclarationStatement[14016-14070]:VariableDeclarationStatement[14016-14070]"
    }, {
      "left" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
      "right" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
      "info" : "ThrowStatement[14083-14185]:ThrowStatement[14083-14185]"
    }, {
      "left" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
      "right" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
      "info" : "ExpressionStatement[14204-14279]:ExpressionStatement[14204-14279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14505-14570]:Block[14505-14570]"
    }, {
      "left" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
      "right" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
      "info" : "ReturnStatement[14515-14564]:ReturnStatement[14515-14564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14766-14809]:Block[14766-14809]"
    }, {
      "left" : "return this.buffer != null;",
      "right" : "return this.buffer != null;",
      "info" : "ReturnStatement[14776-14803]:ReturnStatement[14776-14803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14983-15041]:Block[14983-15041]"
    }, {
      "left" : "return buffer != null ? pos - readPos : 0;",
      "right" : "return buffer != null ? pos - readPos : 0;",
      "info" : "ReturnStatement[14993-15035]:ReturnStatement[14993-15035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15106-15433]:Block[15106-15433]"
    }, {
      "left" : "if (buffer == null)",
      "right" : "if (buffer == null)",
      "info" : "IfStatement[15116-15427]:IfStatement[15116-15427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15136-15245]:Block[15136-15245]"
    }, {
      "left" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
      "right" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
      "info" : "ExpressionStatement[15150-15189]:ExpressionStatement[15150-15189]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[15202-15210]:ExpressionStatement[15202-15210]"
    }, {
      "left" : "readPos = 0;",
      "right" : "readPos = 0;",
      "info" : "ExpressionStatement[15223-15235]:ExpressionStatement[15223-15235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15251-15427]:Block[15251-15427]"
    }, {
      "left" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
      "right" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
      "info" : "VariableDeclarationStatement[15265-15331]:VariableDeclarationStatement[15265-15331]"
    }, {
      "left" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
      "right" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
      "info" : "ExpressionStatement[15344-15393]:ExpressionStatement[15344-15393]"
    }, {
      "left" : "buffer = b;",
      "right" : "buffer = b;",
      "info" : "ExpressionStatement[15406-15417]:ExpressionStatement[15406-15417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16074-16623]:Block[16074-16623]"
    }, {
      "left" : "if (buffer != null)",
      "right" : "if (buffer != null)",
      "info" : "IfStatement[16084-16588]:IfStatement[16084-16588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16104-16588]:Block[16104-16588]"
    }, {
      "left" : "int len = Math.min(avail(), bAvail);",
      "right" : "int len = Math.min(avail(), bAvail);",
      "info" : "VariableDeclarationStatement[16118-16154]:VariableDeclarationStatement[16118-16154]"
    }, {
      "left" : "if (buffer != b)",
      "right" : "if (buffer != b)",
      "info" : "IfStatement[16167-16554]:IfStatement[16167-16554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16184-16387]:Block[16184-16387]"
    }, {
      "left" : "System.arraycopy(buffer, readPos, b, bPos, len);",
      "right" : "System.arraycopy(buffer, readPos, b, bPos, len);",
      "info" : "ExpressionStatement[16202-16250]:ExpressionStatement[16202-16250]"
    }, {
      "left" : "readPos += len;",
      "right" : "readPos += len;",
      "info" : "ExpressionStatement[16267-16282]:ExpressionStatement[16267-16282]"
    }, {
      "left" : "if (readPos >= pos)",
      "right" : "if (readPos >= pos)",
      "info" : "IfStatement[16299-16373]:IfStatement[16299-16373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16319-16373]:Block[16319-16373]"
    }, {
      "left" : "buffer = null;",
      "right" : "buffer = null;",
      "info" : "ExpressionStatement[16341-16355]:ExpressionStatement[16341-16355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16393-16554]:Block[16393-16554]"
    }, {
      "left" : "buffer = null;",
      "right" : "buffer = null;",
      "info" : "ExpressionStatement[16526-16540]:ExpressionStatement[16526-16540]"
    }, {
      "left" : "return len;",
      "right" : "return len;",
      "info" : "ReturnStatement[16567-16578]:ReturnStatement[16567-16578]"
    }, {
      "left" : "return eof ? -1 : 0;",
      "right" : "return eof ? -1 : 0;",
      "info" : "ReturnStatement[16597-16617]:ReturnStatement[16597-16617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17172-17457]:Block[17172-17457]"
    }, {
      "left" : "if (out != null && out.length == outAvail)",
      "right" : "if (out != null && out.length == outAvail)",
      "info" : "IfStatement[17315-17451]:IfStatement[17315-17451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17358-17451]:Block[17358-17451]"
    }, {
      "left" : "buffer = out;",
      "right" : "buffer = out;",
      "info" : "ExpressionStatement[17372-17385]:ExpressionStatement[17372-17385]"
    }, {
      "left" : "pos = outPos;",
      "right" : "pos = outPos;",
      "info" : "ExpressionStatement[17398-17411]:ExpressionStatement[17398-17411]"
    }, {
      "left" : "readPos = outPos;",
      "right" : "readPos = outPos;",
      "info" : "ExpressionStatement[17424-17441]:ExpressionStatement[17424-17441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18294-20850]:Block[18294-20850]"
    }, {
      "left" : "if (eof)",
      "right" : "if (eof)",
      "info" : "IfStatement[18304-18344]:IfStatement[18304-18344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18313-18344]:Block[18313-18344]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[18327-18334]:ReturnStatement[18327-18334]"
    }, {
      "left" : "if (inAvail < 0)",
      "right" : "if (inAvail < 0)",
      "info" : "IfStatement[18455-20844]:IfStatement[18455-20844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18472-19780]:Block[18472-19780]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[18486-18497]:ExpressionStatement[18486-18497]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "info" : "IfStatement[18510-18613]:IfStatement[18510-18613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18566-18613]:Block[18566-18613]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[18584-18599]:ExpressionStatement[18584-18599]"
    }, {
      "left" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
      "right" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[18626-19579]:SwitchStatement[18626-19579]"
    }, {
      "left" : "case 1 :",
      "right" : "case 1 :",
      "info" : "SwitchCase[18661-18669]:SwitchCase[18661-18669]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
      "info" : "ExpressionStatement[18690-18741]:ExpressionStatement[18690-18741]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
      "info" : "ExpressionStatement[18762-18813]:ExpressionStatement[18762-18813]"
    }, {
      "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "info" : "IfStatement[18908-19063]:IfStatement[18908-19063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18950-19063]:Block[18950-19063]"
    }, {
      "left" : "buffer[pos++] = PAD;",
      "right" : "buffer[pos++] = PAD;",
      "info" : "ExpressionStatement[18976-18996]:ExpressionStatement[18976-18996]"
    }, {
      "left" : "buffer[pos++] = PAD;",
      "right" : "buffer[pos++] = PAD;",
      "info" : "ExpressionStatement[19021-19041]:ExpressionStatement[19021-19041]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19084-19090]:BreakStatement[19084-19090]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[19108-19116]:SwitchCase[19108-19116]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
      "info" : "ExpressionStatement[19137-19189]:ExpressionStatement[19137-19189]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
      "info" : "ExpressionStatement[19210-19261]:ExpressionStatement[19210-19261]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
      "info" : "ExpressionStatement[19282-19333]:ExpressionStatement[19282-19333]"
    }, {
      "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
      "info" : "IfStatement[19428-19538]:IfStatement[19428-19538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19470-19538]:Block[19470-19538]"
    }, {
      "left" : "buffer[pos++] = PAD;",
      "right" : "buffer[pos++] = PAD;",
      "info" : "ExpressionStatement[19496-19516]:ExpressionStatement[19496-19516]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19559-19565]:BreakStatement[19559-19565]"
    }, {
      "left" : "if (lineLength > 0 && pos > 0)",
      "right" : "if (lineLength > 0 && pos > 0)",
      "info" : "IfStatement[19592-19770]:IfStatement[19592-19770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-19770]:Block[19623-19770]"
    }, {
      "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "info" : "ExpressionStatement[19641-19711]:ExpressionStatement[19641-19711]"
    }, {
      "left" : "pos += lineSeparator.length;",
      "right" : "pos += lineSeparator.length;",
      "info" : "ExpressionStatement[19728-19756]:ExpressionStatement[19728-19756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19786-20844]:Block[19786-20844]"
    }, {
      "left" : "for (int i = 0; i < inAvail; i++)",
      "right" : "for (int i = 0; i < inAvail; i++)",
      "info" : "ForStatement[19800-20834]:ForStatement[19800-20834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19834-20834]:Block[19834-20834]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
      "info" : "IfStatement[19852-19963]:IfStatement[19852-19963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19908-19963]:Block[19908-19963]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[19930-19945]:ExpressionStatement[19930-19945]"
    }, {
      "left" : "modulus = (++modulus) % 3;",
      "right" : "modulus = (++modulus) % 3;",
      "info" : "ExpressionStatement[19980-20006]:ExpressionStatement[19980-20006]"
    }, {
      "left" : "int b = in[inPos++];",
      "right" : "int b = in[inPos++];",
      "info" : "VariableDeclarationStatement[20023-20043]:VariableDeclarationStatement[20023-20043]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[20060-20120]:IfStatement[20060-20120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20071-20120]:Block[20071-20120]"
    }, {
      "left" : "b += 256;",
      "right" : "b += 256;",
      "info" : "ExpressionStatement[20093-20102]:ExpressionStatement[20093-20102]"
    }, {
      "left" : "x = (x << 8) + b;",
      "right" : "x = (x << 8) + b;",
      "info" : "ExpressionStatement[20137-20154]:ExpressionStatement[20137-20154]"
    }, {
      "left" : "if (0 == modulus)",
      "right" : "if (0 == modulus)",
      "info" : "IfStatement[20171-20820]:IfStatement[20171-20820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20189-20820]:Block[20189-20820]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
      "info" : "ExpressionStatement[20211-20263]:ExpressionStatement[20211-20263]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
      "info" : "ExpressionStatement[20284-20336]:ExpressionStatement[20284-20336]"
    }, {
      "left" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
      "info" : "ExpressionStatement[20357-20408]:ExpressionStatement[20357-20408]"
    }, {
      "left" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
      "right" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
      "info" : "ExpressionStatement[20429-20473]:ExpressionStatement[20429-20473]"
    }, {
      "left" : "currentLinePos += 4;",
      "right" : "currentLinePos += 4;",
      "info" : "ExpressionStatement[20494-20514]:ExpressionStatement[20494-20514]"
    }, {
      "left" : "if (lineLength > 0 && lineLength <= currentLinePos)",
      "right" : "if (lineLength > 0 && lineLength <= currentLinePos)",
      "info" : "IfStatement[20535-20802]:IfStatement[20535-20802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20587-20802]:Block[20587-20802]"
    }, {
      "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
      "info" : "ExpressionStatement[20613-20683]:ExpressionStatement[20613-20683]"
    }, {
      "left" : "pos += lineSeparator.length;",
      "right" : "pos += lineSeparator.length;",
      "info" : "ExpressionStatement[20708-20736]:ExpressionStatement[20708-20736]"
    }, {
      "left" : "currentLinePos = 0;",
      "right" : "currentLinePos = 0;",
      "info" : "ExpressionStatement[20761-20780]:ExpressionStatement[20761-20780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22042-23898]:Block[22042-23898]"
    }, {
      "left" : "if (eof)",
      "right" : "if (eof)",
      "info" : "IfStatement[22052-22092]:IfStatement[22052-22092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22061-22092]:Block[22061-22092]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22075-22082]:ReturnStatement[22075-22082]"
    }, {
      "left" : "if (inAvail < 0)",
      "right" : "if (inAvail < 0)",
      "info" : "IfStatement[22101-22153]:IfStatement[22101-22153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22118-22153]:Block[22118-22153]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[22132-22143]:ExpressionStatement[22132-22143]"
    }, {
      "left" : "for (int i = 0; i < inAvail; i++)",
      "right" : "for (int i = 0; i < inAvail; i++)",
      "info" : "ForStatement[22162-23078]:ForStatement[22162-23078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22196-23078]:Block[22196-23078]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "info" : "IfStatement[22210-22313]:IfStatement[22210-22313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22266-22313]:Block[22266-22313]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[22284-22299]:ExpressionStatement[22284-22299]"
    }, {
      "left" : "byte b = in[inPos++];",
      "right" : "byte b = in[inPos++];",
      "info" : "VariableDeclarationStatement[22326-22347]:VariableDeclarationStatement[22326-22347]"
    }, {
      "left" : "if (b == PAD)",
      "right" : "if (b == PAD)",
      "info" : "IfStatement[22360-23068]:IfStatement[22360-23068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22374-22471]:Block[22374-22471]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[22423-22434]:ExpressionStatement[22423-22434]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22451-22457]:BreakStatement[22451-22457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22477-23068]:Block[22477-23068]"
    }, {
      "left" : "if (b >= 0 && b < DECODE_TABLE.length)",
      "right" : "if (b >= 0 && b < DECODE_TABLE.length)",
      "info" : "IfStatement[22495-23054]:IfStatement[22495-23054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22534-23054]:Block[22534-23054]"
    }, {
      "left" : "int result = DECODE_TABLE[b];",
      "right" : "int result = DECODE_TABLE[b];",
      "info" : "VariableDeclarationStatement[22556-22585]:VariableDeclarationStatement[22556-22585]"
    }, {
      "left" : "if (result >= 0)",
      "right" : "if (result >= 0)",
      "info" : "IfStatement[22606-23036]:IfStatement[22606-23036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22623-23036]:Block[22623-23036]"
    }, {
      "left" : "modulus = (++modulus) % 4;",
      "right" : "modulus = (++modulus) % 4;",
      "info" : "ExpressionStatement[22649-22675]:ExpressionStatement[22649-22675]"
    }, {
      "left" : "x = (x << 6) + result;",
      "right" : "x = (x << 6) + result;",
      "info" : "ExpressionStatement[22700-22722]:ExpressionStatement[22700-22722]"
    }, {
      "left" : "if (modulus == 0)",
      "right" : "if (modulus == 0)",
      "info" : "IfStatement[22747-23014]:IfStatement[22747-23014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22765-23014]:Block[22765-23014]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "info" : "ExpressionStatement[22795-22843]:ExpressionStatement[22795-22843]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "info" : "ExpressionStatement[22872-22919]:ExpressionStatement[22872-22919]"
    }, {
      "left" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
      "info" : "ExpressionStatement[22948-22988]:ExpressionStatement[22948-22988]"
    }, {
      "left" : "if (eof && modulus != 0)",
      "right" : "if (eof && modulus != 0)",
      "info" : "IfStatement[23316-23892]:IfStatement[23316-23892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23341-23892]:Block[23341-23892]"
    }, {
      "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
      "info" : "IfStatement[23355-23458]:IfStatement[23355-23458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23411-23458]:Block[23411-23458]"
    }, {
      "left" : "resizeBuffer();",
      "right" : "resizeBuffer();",
      "info" : "ExpressionStatement[23429-23444]:ExpressionStatement[23429-23444]"
    }, {
      "left" : "x = x << 6;",
      "right" : "x = x << 6;",
      "info" : "ExpressionStatement[23484-23495]:ExpressionStatement[23484-23495]"
    }, {
      "left" : "switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
      "right" : "switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
      "info" : "SwitchStatement[23508-23882]:SwitchStatement[23508-23882]"
    }, {
      "left" : "case 2 :",
      "right" : "case 2 :",
      "info" : "SwitchCase[23543-23551]:SwitchCase[23543-23551]"
    }, {
      "left" : "x = x << 6;",
      "right" : "x = x << 6;",
      "info" : "ExpressionStatement[23572-23583]:ExpressionStatement[23572-23583]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "info" : "ExpressionStatement[23604-23652]:ExpressionStatement[23604-23652]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23673-23679]:BreakStatement[23673-23679]"
    }, {
      "left" : "case 3 :",
      "right" : "case 3 :",
      "info" : "SwitchCase[23696-23704]:SwitchCase[23696-23704]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
      "info" : "ExpressionStatement[23725-23773]:ExpressionStatement[23725-23773]"
    }, {
      "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
      "info" : "ExpressionStatement[23794-23841]:ExpressionStatement[23794-23841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23862-23868]:BreakStatement[23862-23868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24242-24354]:Block[24242-24354]"
    }, {
      "left" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
      "right" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
      "info" : "ReturnStatement[24252-24348]:ReturnStatement[24252-24348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24818-25030]:Block[24818-25030]"
    }, {
      "left" : "for (int i = 0; i < arrayOctet.length; i++)",
      "right" : "for (int i = 0; i < arrayOctet.length; i++)",
      "info" : "ForStatement[24828-25003]:ForStatement[24828-25003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24872-25003]:Block[24872-25003]"
    }, {
      "left" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
      "right" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
      "info" : "IfStatement[24886-24993]:IfStatement[24886-24993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24948-24993]:Block[24948-24993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24966-24979]:ReturnStatement[24966-24979]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25012-25024]:ReturnStatement[25012-25024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25391-25570]:Block[25391-25570]"
    }, {
      "left" : "for (int i = 0; i < arrayOctet.length; i++)",
      "right" : "for (int i = 0; i < arrayOctet.length; i++)",
      "info" : "ForStatement[25401-25542]:ForStatement[25401-25542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25445-25542]:Block[25445-25542]"
    }, {
      "left" : "if (isBase64(arrayOctet[i]))",
      "right" : "if (isBase64(arrayOctet[i]))",
      "info" : "IfStatement[25459-25532]:IfStatement[25459-25532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25488-25532]:Block[25488-25532]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25506-25518]:ReturnStatement[25506-25518]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25551-25564]:ReturnStatement[25551-25564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25885-25940]:Block[25885-25940]"
    }, {
      "left" : "return encodeBase64(binaryData, false);",
      "right" : "return encodeBase64(binaryData, false);",
      "info" : "ReturnStatement[25895-25934]:ReturnStatement[25895-25934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26265-26346]:Block[26265-26347]"
    }, {
      "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
      "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
      "info" : "ReturnStatement[26275-26340]:ReturnStatement[26275-26341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26789-26850]:Block[26790-26851]"
    }, {
      "left" : "return encodeBase64(binaryData, false, true);",
      "right" : "return encodeBase64(binaryData, false, true);",
      "info" : "ReturnStatement[26799-26844]:ReturnStatement[26800-26845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27267-27355]:Block[27268-27356]"
    }, {
      "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
      "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
      "info" : "ReturnStatement[27277-27349]:ReturnStatement[27278-27350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27687-27741]:Block[27688-27742]"
    }, {
      "left" : "return encodeBase64(binaryData, true);",
      "right" : "return encodeBase64(binaryData, true);",
      "info" : "ReturnStatement[27697-27735]:ReturnStatement[27698-27736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28346-28674]:Block[28347-28675]"
    }, {
      "left" : "if (pObject instanceof byte[])",
      "right" : "if (pObject instanceof byte[])",
      "info" : "IfStatement[28364-28668]:IfStatement[28365-28669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28395-28451]:Block[28396-28452]"
    }, {
      "left" : "return decode((byte[]) pObject);",
      "right" : "return decode((byte[]) pObject);",
      "info" : "ReturnStatement[28409-28441]:ReturnStatement[28410-28442]"
    }, {
      "left" : "if (pObject instanceof String)",
      "right" : "if (pObject instanceof String)",
      "info" : "IfStatement[28457-28668]:IfStatement[28458-28669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28488-28544]:Block[28489-28545]"
    }, {
      "left" : "return decode((String) pObject);",
      "right" : "return decode((String) pObject);",
      "info" : "ReturnStatement[28502-28534]:ReturnStatement[28503-28535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28550-28668]:Block[28551-28669]"
    }, {
      "left" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
      "right" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
      "info" : "ThrowStatement[28564-28658]:ThrowStatement[28565-28659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28959-29023]:Block[28960-29024]"
    }, {
      "left" : "return decode(StringUtils.getBytesUtf8(pArray));",
      "right" : "return decode(StringUtils.getBytesUtf8(pArray));",
      "info" : "ReturnStatement[28969-29017]:ReturnStatement[28970-29018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29295-30102]:Block[29296-30103]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[29305-29313]:ExpressionStatement[29306-29314]"
    }, {
      "left" : "if (pArray == null || pArray.length == 0)",
      "right" : "if (pArray == null || pArray.length == 0)",
      "info" : "IfStatement[29322-29402]:IfStatement[29323-29403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29364-29402]:Block[29365-29403]"
    }, {
      "left" : "return pArray;",
      "right" : "return pArray;",
      "info" : "ReturnStatement[29378-29392]:ReturnStatement[29379-29393]"
    }, {
      "left" : "long len = (pArray.length * 3) / 4;",
      "right" : "long len = (pArray.length * 3) / 4;",
      "info" : "VariableDeclarationStatement[29411-29446]:VariableDeclarationStatement[29412-29447]"
    }, {
      "left" : "byte[] buf = new byte[(int) len];",
      "right" : "byte[] buf = new byte[(int) len];",
      "info" : "VariableDeclarationStatement[29455-29488]:VariableDeclarationStatement[29456-29489]"
    }, {
      "left" : "setInitialBuffer(buf, 0, buf.length);",
      "right" : "setInitialBuffer(buf, 0, buf.length);",
      "info" : "ExpressionStatement[29497-29534]:ExpressionStatement[29498-29535]"
    }, {
      "left" : "decode(pArray, 0, pArray.length);",
      "right" : "decode(pArray, 0, pArray.length);",
      "info" : "ExpressionStatement[29543-29576]:ExpressionStatement[29544-29577]"
    }, {
      "left" : "decode(pArray, 0, -1);",
      "right" : "decode(pArray, 0, -1);",
      "info" : "ExpressionStatement[29585-29607]:ExpressionStatement[29586-29608]"
    }, {
      "left" : "byte[] result = new byte[pos];",
      "right" : "byte[] result = new byte[pos];",
      "info" : "VariableDeclarationStatement[29996-30026]:VariableDeclarationStatement[29997-30027]"
    }, {
      "left" : "readResults(result, 0, result.length);",
      "right" : "readResults(result, 0, result.length);",
      "info" : "ExpressionStatement[30035-30073]:ExpressionStatement[30036-30074]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30082-30096]:ReturnStatement[30083-30097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30712-30778]:Block[30713-30779]"
    }, {
      "left" : "return encodeBase64(binaryData, isChunked, false);",
      "right" : "return encodeBase64(binaryData, isChunked, false);",
      "info" : "ReturnStatement[30722-30772]:ReturnStatement[30723-30773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31556-31643]:Block[31557-31644]"
    }, {
      "left" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
      "right" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
      "info" : "ReturnStatement[31566-31637]:ReturnStatement[31567-31638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32509-33115]:Block[32510-33116]"
    }, {
      "left" : "if (binaryData == null || binaryData.length == 0)",
      "right" : "if (binaryData == null || binaryData.length == 0)",
      "info" : "IfStatement[32519-32611]:IfStatement[32520-32612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32569-32611]:Block[32570-32612]"
    }, {
      "left" : "return binaryData;",
      "right" : "return binaryData;",
      "info" : "ReturnStatement[32583-32601]:ReturnStatement[32584-32602]"
    }, {
      "left" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
      "right" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
      "info" : "VariableDeclarationStatement[32621-32694]:VariableDeclarationStatement[32622-32695]"
    }, {
      "left" : "if (len > maxResultSize)",
      "right" : "if (len > maxResultSize)",
      "info" : "IfStatement[32703-32957]:IfStatement[32704-32958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32728-32957]:Block[32729-32958]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
      "right" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
      "info" : "ThrowStatement[32742-32947]:ThrowStatement[32743-32948]"
    }, {
      "left" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
      "right" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
      "info" : "VariableDeclarationStatement[32983-33070]:VariableDeclarationStatement[32984-33071]"
    }, {
      "left" : "return b64.encode(binaryData);",
      "right" : "return b64.encode(binaryData);",
      "info" : "ReturnStatement[33079-33109]:ReturnStatement[33080-33110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33381-33438]:Block[33382-33439]"
    }, {
      "left" : "return new Base64().decode(base64String);",
      "right" : "return new Base64().decode(base64String);",
      "info" : "ReturnStatement[33391-33432]:ReturnStatement[33392-33433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33683-33738]:Block[33684-33739]"
    }, {
      "left" : "return new Base64().decode(base64Data);",
      "right" : "return new Base64().decode(base64Data);",
      "info" : "ReturnStatement[33693-33732]:ReturnStatement[33694-33733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34076-34637]:Block[34077-34638]"
    }, {
      "left" : "byte groomedData[] = new byte[data.length];",
      "right" : "byte groomedData[] = new byte[data.length];",
      "info" : "VariableDeclarationStatement[34086-34129]:VariableDeclarationStatement[34087-34130]"
    }, {
      "left" : "int bytesCopied = 0;",
      "right" : "int bytesCopied = 0;",
      "info" : "VariableDeclarationStatement[34138-34158]:VariableDeclarationStatement[34139-34159]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[34167-34483]:ForStatement[34168-34484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34205-34483]:Block[34206-34484]"
    }, {
      "left" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
      "right" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
      "info" : "SwitchStatement[34219-34473]:SwitchStatement[34220-34474]"
    }, {
      "left" : "case ' ' :",
      "right" : "case ' ' :",
      "info" : "SwitchCase[34254-34264]:SwitchCase[34255-34265]"
    }, {
      "left" : "case '\\n' :",
      "right" : "case '\\n' :",
      "info" : "SwitchCase[34281-34292]:SwitchCase[34282-34293]"
    }, {
      "left" : "case '\\r' :",
      "right" : "case '\\r' :",
      "info" : "SwitchCase[34309-34320]:SwitchCase[34310-34321]"
    }, {
      "left" : "case '\\t' :",
      "right" : "case '\\t' :",
      "info" : "SwitchCase[34337-34348]:SwitchCase[34338-34349]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34369-34375]:BreakStatement[34370-34376]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[34392-34401]:SwitchCase[34393-34402]"
    }, {
      "left" : "groomedData[bytesCopied++] = data[i];",
      "right" : "groomedData[bytesCopied++] = data[i];",
      "info" : "ExpressionStatement[34422-34459]:ExpressionStatement[34423-34460]"
    }, {
      "left" : "byte packedData[] = new byte[bytesCopied];",
      "right" : "byte packedData[] = new byte[bytesCopied];",
      "info" : "VariableDeclarationStatement[34492-34534]:VariableDeclarationStatement[34493-34535]"
    }, {
      "left" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
      "right" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
      "info" : "ExpressionStatement[34543-34604]:ExpressionStatement[34544-34605]"
    }, {
      "left" : "return packedData;",
      "right" : "return packedData;",
      "info" : "ReturnStatement[34613-34631]:ReturnStatement[34614-34632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34894-35118]:Block[34895-35119]"
    }, {
      "left" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
      "right" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
      "info" : "SwitchStatement[34904-35112]:SwitchStatement[34905-35113]"
    }, {
      "left" : "case ' ' :",
      "right" : "case ' ' :",
      "info" : "SwitchCase[34939-34949]:SwitchCase[34940-34950]"
    }, {
      "left" : "case '\\n' :",
      "right" : "case '\\n' :",
      "info" : "SwitchCase[34962-34973]:SwitchCase[34963-34974]"
    }, {
      "left" : "case '\\r' :",
      "right" : "case '\\r' :",
      "info" : "SwitchCase[34986-34997]:SwitchCase[34987-34998]"
    }, {
      "left" : "case '\\t' :",
      "right" : "case '\\t' :",
      "info" : "SwitchCase[35010-35021]:SwitchCase[35011-35022]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35038-35050]:ReturnStatement[35039-35051]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[35063-35072]:SwitchCase[35064-35073]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35089-35102]:ReturnStatement[35090-35103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35760-35957]:Block[35761-35958]"
    }, {
      "left" : "if (!(pObject instanceof byte[]))",
      "right" : "if (!(pObject instanceof byte[]))",
      "info" : "IfStatement[35770-35910]:IfStatement[35771-35911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35804-35910]:Block[35805-35911]"
    }, {
      "left" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
      "right" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
      "info" : "ThrowStatement[35818-35900]:ThrowStatement[35819-35901]"
    }, {
      "left" : "return encode((byte[]) pObject);",
      "right" : "return encode((byte[]) pObject);",
      "info" : "ReturnStatement[35919-35951]:ReturnStatement[35920-35952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36297-36362]:Block[36298-36363]"
    }, {
      "left" : "return StringUtils.newStringUtf8(encode(pArray));",
      "right" : "return StringUtils.newStringUtf8(encode(pArray));",
      "info" : "ReturnStatement[36307-36356]:ReturnStatement[36308-36357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36677-37550]:Block[36678-37551]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[36687-36695]:ExpressionStatement[36688-36696]"
    }, {
      "left" : "if (pArray == null || pArray.length == 0)",
      "right" : "if (pArray == null || pArray.length == 0)",
      "info" : "IfStatement[36712-36792]:IfStatement[36713-36793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36754-36792]:Block[36755-36793]"
    }, {
      "left" : "return pArray;",
      "right" : "return pArray;",
      "info" : "ReturnStatement[36768-36782]:ReturnStatement[36769-36783]"
    }, {
      "left" : "long len = getEncodeLength(pArray, lineLength, lineSeparator);",
      "right" : "long len = getEncodeLength(pArray, lineLength, lineSeparator);",
      "info" : "VariableDeclarationStatement[36801-36863]:VariableDeclarationStatement[36802-36864]"
    }, {
      "left" : "byte[] buf = new byte[(int) len];",
      "right" : "byte[] buf = new byte[(int) len];",
      "info" : "VariableDeclarationStatement[36872-36905]:VariableDeclarationStatement[36873-36906]"
    }, {
      "left" : "setInitialBuffer(buf, 0, buf.length);",
      "right" : "setInitialBuffer(buf, 0, buf.length);",
      "info" : "ExpressionStatement[36914-36951]:ExpressionStatement[36915-36952]"
    }, {
      "left" : "encode(pArray, 0, pArray.length);",
      "right" : "encode(pArray, 0, pArray.length);",
      "info" : "ExpressionStatement[36960-36993]:ExpressionStatement[36961-36994]"
    }, {
      "left" : "encode(pArray, 0, -1);",
      "right" : "encode(pArray, 0, -1);",
      "info" : "ExpressionStatement[37002-37024]:ExpressionStatement[37003-37025]"
    }, {
      "left" : "if (buffer != buf)",
      "right" : "if (buffer != buf)",
      "info" : "IfStatement[37130-37205]:IfStatement[37131-37206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37149-37205]:Block[37150-37206]"
    }, {
      "left" : "readResults(buf, 0, buf.length);",
      "right" : "readResults(buf, 0, buf.length);",
      "info" : "ExpressionStatement[37163-37195]:ExpressionStatement[37164-37196]"
    }, {
      "left" : "if (isUrlSafe() && pos < buf.length)",
      "right" : "if (isUrlSafe() && pos < buf.length)",
      "info" : "IfStatement[37333-37516]:IfStatement[37334-37517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37370-37516]:Block[37371-37517]"
    }, {
      "left" : "byte[] smallerBuf = new byte[pos];",
      "right" : "byte[] smallerBuf = new byte[pos];",
      "info" : "VariableDeclarationStatement[37384-37418]:VariableDeclarationStatement[37385-37419]"
    }, {
      "left" : "System.arraycopy(buf, 0, smallerBuf, 0, pos);",
      "right" : "System.arraycopy(buf, 0, smallerBuf, 0, pos);",
      "info" : "ExpressionStatement[37431-37476]:ExpressionStatement[37432-37477]"
    }, {
      "left" : "buf = smallerBuf;",
      "right" : "buf = smallerBuf;",
      "info" : "ExpressionStatement[37489-37506]:ExpressionStatement[37490-37507]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[37525-37536]:ReturnStatement[37526-37537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38211-38729]:Block[38212-38730]"
    }, {
      "left" : "chunkSize = (chunkSize / 4) * 4;",
      "right" : "chunkSize = (chunkSize / 4) * 4;",
      "info" : "ExpressionStatement[38273-38305]:ExpressionStatement[38274-38306]"
    }, {
      "left" : "long len = (pArray.length * 4) / 3;",
      "right" : "long len = (pArray.length * 4) / 3;",
      "info" : "VariableDeclarationStatement[38315-38350]:VariableDeclarationStatement[38316-38351]"
    }, {
      "left" : "long mod = len % 4;",
      "right" : "long mod = len % 4;",
      "info" : "VariableDeclarationStatement[38359-38378]:VariableDeclarationStatement[38360-38379]"
    }, {
      "left" : "if (mod != 0)",
      "right" : "if (mod != 0)",
      "info" : "IfStatement[38387-38440]:IfStatement[38388-38441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38401-38440]:Block[38402-38441]"
    }, {
      "left" : "len += 4 - mod;",
      "right" : "len += 4 - mod;",
      "info" : "ExpressionStatement[38415-38430]:ExpressionStatement[38416-38431]"
    }, {
      "left" : "if (chunkSize > 0)",
      "right" : "if (chunkSize > 0)",
      "info" : "IfStatement[38449-38703]:IfStatement[38450-38704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38468-38703]:Block[38469-38704]"
    }, {
      "left" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
      "right" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
      "info" : "VariableDeclarationStatement[38482-38532]:VariableDeclarationStatement[38483-38533]"
    }, {
      "left" : "len += (len / chunkSize) * chunkSeparator.length;",
      "right" : "len += (len / chunkSize) * chunkSeparator.length;",
      "info" : "ExpressionStatement[38545-38594]:ExpressionStatement[38546-38595]"
    }, {
      "left" : "if (!lenChunksPerfectly)",
      "right" : "if (!lenChunksPerfectly)",
      "info" : "IfStatement[38607-38693]:IfStatement[38608-38694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38632-38693]:Block[38633-38694]"
    }, {
      "left" : "len += chunkSeparator.length;",
      "right" : "len += chunkSeparator.length;",
      "info" : "ExpressionStatement[38650-38679]:ExpressionStatement[38651-38680]"
    }, {
      "left" : "return len;",
      "right" : "return len;",
      "info" : "ReturnStatement[38712-38723]:ReturnStatement[38713-38724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39100-39163]:Block[39101-39164]"
    }, {
      "left" : "return new BigInteger(1, decodeBase64(pArray));",
      "right" : "return new BigInteger(1, decodeBase64(pArray));",
      "info" : "ReturnStatement[39110-39157]:ReturnStatement[39111-39158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39555-39750]:Block[39556-39751]"
    }, {
      "left" : "if (bigInt == null)",
      "right" : "if (bigInt == null)",
      "info" : "IfStatement[39565-39684]:IfStatement[39566-39685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39585-39684]:Block[39586-39685]"
    }, {
      "left" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
      "right" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
      "info" : "ThrowStatement[39599-39674]:ThrowStatement[39600-39675]"
    }, {
      "left" : "return encodeBase64(toIntegerBytes(bigInt), false);",
      "right" : "return encodeBase64(toIntegerBytes(bigInt), false);",
      "info" : "ReturnStatement[39693-39744]:ReturnStatement[39694-39745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40068-40893]:Block[40069-40894]"
    }, {
      "left" : "int bitlen = bigInt.bitLength();",
      "right" : "int bitlen = bigInt.bitLength();",
      "info" : "VariableDeclarationStatement[40078-40110]:VariableDeclarationStatement[40079-40111]"
    }, {
      "left" : "bitlen = ((bitlen + 7) >> 3) << 3;",
      "right" : "bitlen = ((bitlen + 7) >> 3) << 3;",
      "info" : "ExpressionStatement[40143-40177]:ExpressionStatement[40144-40178]"
    }, {
      "left" : "byte[] bigBytes = bigInt.toByteArray();",
      "right" : "byte[] bigBytes = bigInt.toByteArray();",
      "info" : "VariableDeclarationStatement[40186-40225]:VariableDeclarationStatement[40187-40226]"
    }, {
      "left" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
      "right" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
      "info" : "IfStatement[40235-40364]:IfStatement[40236-40365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40324-40364]:Block[40325-40365]"
    }, {
      "left" : "return bigBytes;",
      "right" : "return bigBytes;",
      "info" : "ReturnStatement[40338-40354]:ReturnStatement[40339-40355]"
    }, {
      "left" : "int startSrc = 0;",
      "right" : "int startSrc = 0;",
      "info" : "VariableDeclarationStatement[40434-40451]:VariableDeclarationStatement[40435-40452]"
    }, {
      "left" : "int len = bigBytes.length;",
      "right" : "int len = bigBytes.length;",
      "info" : "VariableDeclarationStatement[40460-40486]:VariableDeclarationStatement[40461-40487]"
    }, {
      "left" : "if ((bigInt.bitLength() % 8) == 0)",
      "right" : "if ((bigInt.bitLength() % 8) == 0)",
      "info" : "IfStatement[40568-40659]:IfStatement[40569-40660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40603-40659]:Block[40604-40660]"
    }, {
      "left" : "startSrc = 1;",
      "right" : "startSrc = 1;",
      "info" : "ExpressionStatement[40617-40630]:ExpressionStatement[40618-40631]"
    }, {
      "left" : "len--;",
      "right" : "len--;",
      "info" : "ExpressionStatement[40643-40649]:ExpressionStatement[40644-40650]"
    }, {
      "left" : "int startDst = bitlen / 8 - len;",
      "right" : "int startDst = bitlen / 8 - len;",
      "info" : "VariableDeclarationStatement[40668-40700]:VariableDeclarationStatement[40669-40701]"
    }, {
      "left" : "byte[] resizedBytes = new byte[bitlen / 8];",
      "right" : "byte[] resizedBytes = new byte[bitlen / 8];",
      "info" : "VariableDeclarationStatement[40740-40783]:VariableDeclarationStatement[40741-40784]"
    }, {
      "left" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
      "right" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
      "info" : "ExpressionStatement[40792-40858]:ExpressionStatement[40793-40859]"
    }, {
      "left" : "return resizedBytes;",
      "right" : "return resizedBytes;",
      "info" : "ReturnStatement[40867-40887]:ReturnStatement[40868-40888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41009-41147]:Block[41010-41148]"
    }, {
      "left" : "buffer = null;",
      "right" : "buffer = null;",
      "info" : "ExpressionStatement[41019-41033]:ExpressionStatement[41020-41034]"
    }, {
      "left" : "pos = 0;",
      "right" : "pos = 0;",
      "info" : "ExpressionStatement[41042-41050]:ExpressionStatement[41043-41051]"
    }, {
      "left" : "readPos = 0;",
      "right" : "readPos = 0;",
      "info" : "ExpressionStatement[41059-41071]:ExpressionStatement[41060-41072]"
    }, {
      "left" : "currentLinePos = 0;",
      "right" : "currentLinePos = 0;",
      "info" : "ExpressionStatement[41080-41099]:ExpressionStatement[41081-41100]"
    }, {
      "left" : "modulus = 0;",
      "right" : "modulus = 0;",
      "info" : "ExpressionStatement[41108-41120]:ExpressionStatement[41109-41121]"
    }, {
      "left" : "eof = false;",
      "right" : "eof = false;",
      "info" : "ExpressionStatement[41129-41141]:ExpressionStatement[41130-41142]"
    } ]
  },
  "interFileMappings" : { }
}