{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "TypeDeclaration[1391-17890]:TypeDeclaration[1391-17908]"
    }, {
      "left" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[4493-5712]:MethodDeclaration[4493-5712]"
    }, {
      "left" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[5718-6462]:MethodDeclaration[5718-6462]"
    }, {
      "left" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[6468-7553]:MethodDeclaration[6468-7553]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[7618-7649]:FieldDeclaration[7618-7649]"
    }, {
      "left" : "private final Map<String, Integer> headerMap;",
      "right" : "private final Map<String, Integer> headerMap;",
      "info" : "FieldDeclaration[7655-7755]:FieldDeclaration[7655-7755]"
    }, {
      "left" : "private final Lexer lexer;",
      "right" : "private final Lexer lexer;",
      "info" : "FieldDeclaration[7761-7787]:FieldDeclaration[7761-7787]"
    }, {
      "left" : "private final List<String> record = new ArrayList<String>();",
      "right" : "private final List<String> record = new ArrayList<String>();",
      "info" : "FieldDeclaration[7793-7931]:FieldDeclaration[7793-7931]"
    }, {
      "left" : "private long recordNumber;",
      "right" : "private long recordNumber;",
      "info" : "FieldDeclaration[7937-7963]:FieldDeclaration[7937-7963]"
    }, {
      "left" : "private final Token reusableToken = new Token();",
      "right" : "private final Token reusableToken = new Token();",
      "info" : "FieldDeclaration[7969-8017]:FieldDeclaration[7969-8017]"
    }, {
      "left" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "right" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[8023-9092]:MethodDeclaration[8023-9092]"
    }, {
      "left" : "private void addRecordValue()",
      "right" : "private void addRecordValue()",
      "info" : "MethodDeclaration[9098-9443]:MethodDeclaration[9098-9443]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[9449-9688]:MethodDeclaration[9449-9688]"
    }, {
      "left" : "public long getCurrentLineNumber()",
      "right" : "public long getCurrentLineNumber()",
      "info" : "MethodDeclaration[9694-10079]:MethodDeclaration[9694-10079]"
    }, {
      "left" : "public Map<String, Integer> getHeaderMap()",
      "right" : "public Map<String, Integer> getHeaderMap()",
      "info" : "MethodDeclaration[10085-10489]:MethodDeclaration[10085-10489]"
    }, {
      "left" : "public long getRecordNumber()",
      "right" : "public long getRecordNumber()",
      "info" : "MethodDeclaration[10495-10859]:MethodDeclaration[10495-10859]"
    }, {
      "left" : "public List<CSVRecord> getRecords() throws IOException",
      "right" : "public List<CSVRecord> getRecords() throws IOException",
      "info" : "MethodDeclaration[10865-11396]:MethodDeclaration[10865-11396]"
    }, {
      "left" : "public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException",
      "right" : "public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException",
      "info" : "MethodDeclaration[11402-12178]:MethodDeclaration[11402-12178]"
    }, {
      "left" : "private Map<String, Integer> initializeHeader() throws IOException",
      "right" : "private Map<String, Integer> initializeHeader() throws IOException",
      "info" : "MethodDeclaration[12184-14050]:MethodDeclaration[12184-14068]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[14056-14127]:MethodDeclaration[14074-14145]"
    }, {
      "left" : "public Iterator<CSVRecord> iterator()",
      "right" : "public Iterator<CSVRecord> iterator()",
      "info" : "MethodDeclaration[14133-15922]:MethodDeclaration[14151-15940]"
    }, {
      "left" : "private CSVRecord current;",
      "right" : "private CSVRecord current;",
      "info" : "FieldDeclaration[14494-14520]:FieldDeclaration[14512-14538]"
    }, {
      "left" : "private CSVRecord getNextRecord()",
      "right" : "private CSVRecord getNextRecord()",
      "info" : "MethodDeclaration[14534-14848]:MethodDeclaration[14552-14866]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[14862-15168]:MethodDeclaration[14880-15186]"
    }, {
      "left" : "public CSVRecord next()",
      "right" : "public CSVRecord next()",
      "info" : "MethodDeclaration[15182-15796]:MethodDeclaration[15200-15814]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[15810-15905]:MethodDeclaration[15828-15923]"
    }, {
      "left" : "CSVRecord nextRecord() throws IOException",
      "right" : "CSVRecord nextRecord() throws IOException",
      "info" : "MethodDeclaration[15928-17887]:MethodDeclaration[15946-17905]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5361-5367]:Modifier[5361-5367]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5368-5374]:Modifier[5368-5374]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[5375-5384]:SimpleType[5375-5384]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[5385-5390]:SimpleName[5385-5390]"
    }, {
      "left" : "final File file",
      "right" : "final File file",
      "info" : "SingleVariableDeclaration[5391-5406]:SingleVariableDeclaration[5391-5406]"
    }, {
      "left" : "final Charset charset",
      "right" : "final Charset charset",
      "info" : "SingleVariableDeclaration[5408-5429]:SingleVariableDeclaration[5408-5429]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[5431-5453]:SingleVariableDeclaration[5431-5453]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5462-5473]:SimpleType[5462-5473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5474-5712]:Block[5474-5712]"
    }, {
      "left" : "Assertions.notNull(file, \"file\");",
      "right" : "Assertions.notNull(file, \"file\");",
      "info" : "ExpressionStatement[5484-5517]:ExpressionStatement[5484-5517]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[5526-5563]:ExpressionStatement[5526-5563]"
    }, {
      "left" : "return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
      "right" : "return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
      "info" : "ReturnStatement[5618-5706]:ReturnStatement[5618-5706]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6204-6210]:Modifier[6204-6210]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6211-6217]:Modifier[6211-6217]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[6218-6227]:SimpleType[6218-6227]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[6228-6233]:SimpleName[6228-6233]"
    }, {
      "left" : "final String string",
      "right" : "final String string",
      "info" : "SingleVariableDeclaration[6234-6253]:SingleVariableDeclaration[6234-6253]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[6255-6277]:SingleVariableDeclaration[6255-6277]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6286-6297]:SimpleType[6286-6297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6298-6462]:Block[6298-6462]"
    }, {
      "left" : "Assertions.notNull(string, \"string\");",
      "right" : "Assertions.notNull(string, \"string\");",
      "info" : "ExpressionStatement[6308-6345]:ExpressionStatement[6308-6345]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[6354-6391]:ExpressionStatement[6354-6391]"
    }, {
      "left" : "return new CSVParser(new StringReader(string), format);",
      "right" : "return new CSVParser(new StringReader(string), format);",
      "info" : "ReturnStatement[6401-6456]:ReturnStatement[6401-6456]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7212-7218]:Modifier[7212-7218]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7219-7225]:Modifier[7219-7225]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[7226-7235]:SimpleType[7226-7235]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[7236-7241]:SimpleName[7236-7241]"
    }, {
      "left" : "final URL url",
      "right" : "final URL url",
      "info" : "SingleVariableDeclaration[7242-7255]:SingleVariableDeclaration[7242-7255]"
    }, {
      "left" : "final Charset charset",
      "right" : "final Charset charset",
      "info" : "SingleVariableDeclaration[7257-7278]:SingleVariableDeclaration[7257-7278]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[7280-7302]:SingleVariableDeclaration[7280-7302]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7311-7322]:SimpleType[7311-7322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7323-7553]:Block[7323-7553]"
    }, {
      "left" : "Assertions.notNull(url, \"url\");",
      "right" : "Assertions.notNull(url, \"url\");",
      "info" : "ExpressionStatement[7333-7364]:ExpressionStatement[7333-7364]"
    }, {
      "left" : "Assertions.notNull(charset, \"charset\");",
      "right" : "Assertions.notNull(charset, \"charset\");",
      "info" : "ExpressionStatement[7373-7412]:ExpressionStatement[7373-7412]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[7421-7458]:ExpressionStatement[7421-7458]"
    }, {
      "left" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
      "right" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
      "info" : "ReturnStatement[7468-7547]:ReturnStatement[7468-7547]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8755-8761]:Modifier[8755-8761]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleName[8762-8771]:SimpleName[8762-8771]"
    }, {
      "left" : "final Reader reader",
      "right" : "final Reader reader",
      "info" : "SingleVariableDeclaration[8772-8791]:SingleVariableDeclaration[8772-8791]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[8793-8815]:SingleVariableDeclaration[8793-8815]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8824-8835]:SimpleType[8824-8835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8836-9092]:Block[8836-9092]"
    }, {
      "left" : "Assertions.notNull(reader, \"reader\");",
      "right" : "Assertions.notNull(reader, \"reader\");",
      "info" : "ExpressionStatement[8846-8883]:ExpressionStatement[8846-8883]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[8892-8929]:ExpressionStatement[8892-8929]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[8939-8960]:ExpressionStatement[8939-8960]"
    }, {
      "left" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
      "right" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
      "info" : "ExpressionStatement[8969-9036]:ExpressionStatement[8969-9036]"
    }, {
      "left" : "this.headerMap = this.initializeHeader();",
      "right" : "this.headerMap = this.initializeHeader();",
      "info" : "ExpressionStatement[9045-9086]:ExpressionStatement[9045-9086]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9098-9105]:Modifier[9098-9105]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9106-9110]:PrimitiveType[9106-9110]"
    }, {
      "left" : "addRecordValue",
      "right" : "addRecordValue",
      "info" : "SimpleName[9111-9125]:SimpleName[9111-9125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9128-9443]:Block[9128-9443]"
    }, {
      "left" : "final String input = this.reusableToken.content.toString();",
      "right" : "final String input = this.reusableToken.content.toString();",
      "info" : "VariableDeclarationStatement[9138-9197]:VariableDeclarationStatement[9138-9197]"
    }, {
      "left" : "final String nullString = this.format.getNullString();",
      "right" : "final String nullString = this.format.getNullString();",
      "info" : "VariableDeclarationStatement[9206-9260]:VariableDeclarationStatement[9206-9260]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[9269-9437]:IfStatement[9269-9437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9293-9340]:Block[9293-9340]"
    }, {
      "left" : "this.record.add(input);",
      "right" : "this.record.add(input);",
      "info" : "ExpressionStatement[9307-9330]:ExpressionStatement[9307-9330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9346-9437]:Block[9346-9437]"
    }, {
      "left" : "this.record.add(input.equalsIgnoreCase(nullString) ? null : input);",
      "right" : "this.record.add(input.equalsIgnoreCase(nullString) ? null : input);",
      "info" : "ExpressionStatement[9360-9427]:ExpressionStatement[9360-9427]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9566-9572]:Modifier[9566-9572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9573-9577]:PrimitiveType[9573-9577]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[9578-9583]:SimpleName[9578-9583]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9593-9604]:SimpleType[9593-9604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9605-9688]:Block[9605-9688]"
    }, {
      "left" : "if (this.lexer != null)",
      "right" : "if (this.lexer != null)",
      "info" : "IfStatement[9615-9682]:IfStatement[9615-9682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9639-9682]:Block[9639-9682]"
    }, {
      "left" : "this.lexer.close();",
      "right" : "this.lexer.close();",
      "info" : "ExpressionStatement[9653-9672]:ExpressionStatement[9653-9672]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9987-9993]:Modifier[9987-9993]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[9994-9998]:PrimitiveType[9994-9998]"
    }, {
      "left" : "getCurrentLineNumber",
      "right" : "getCurrentLineNumber",
      "info" : "SimpleName[9999-10019]:SimpleName[9999-10019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10022-10079]:Block[10022-10079]"
    }, {
      "left" : "return this.lexer.getCurrentLineNumber();",
      "right" : "return this.lexer.getCurrentLineNumber();",
      "info" : "ReturnStatement[10032-10073]:ReturnStatement[10032-10073]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10340-10346]:Modifier[10340-10346]"
    }, {
      "left" : "Map<String, Integer>",
      "right" : "Map<String, Integer>",
      "info" : "ParameterizedType[10347-10367]:ParameterizedType[10347-10367]"
    }, {
      "left" : "getHeaderMap",
      "right" : "getHeaderMap",
      "info" : "SimpleName[10368-10380]:SimpleName[10368-10380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10383-10489]:Block[10383-10489]"
    }, {
      "left" : "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);",
      "right" : "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);",
      "info" : "ReturnStatement[10393-10483]:ReturnStatement[10393-10483]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10788-10794]:Modifier[10788-10794]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[10795-10799]:PrimitiveType[10795-10799]"
    }, {
      "left" : "getRecordNumber",
      "right" : "getRecordNumber",
      "info" : "SimpleName[10800-10815]:SimpleName[10800-10815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10818-10859]:Block[10818-10859]"
    }, {
      "left" : "return this.recordNumber;",
      "right" : "return this.recordNumber;",
      "info" : "ReturnStatement[10828-10853]:ReturnStatement[10828-10853]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11279-11285]:Modifier[11279-11285]"
    }, {
      "left" : "List<CSVRecord>",
      "right" : "List<CSVRecord>",
      "info" : "ParameterizedType[11286-11301]:ParameterizedType[11286-11301]"
    }, {
      "left" : "getRecords",
      "right" : "getRecords",
      "info" : "SimpleName[11302-11312]:SimpleName[11302-11312]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11322-11333]:SimpleType[11322-11333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11334-11396]:Block[11334-11396]"
    }, {
      "left" : "return getRecords(new ArrayList<CSVRecord>());",
      "right" : "return getRecords(new ArrayList<CSVRecord>());",
      "info" : "ReturnStatement[11344-11390]:ReturnStatement[11344-11390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11942-11948]:Modifier[11942-11948]"
    }, {
      "left" : "T extends Collection<CSVRecord>",
      "right" : "T extends Collection<CSVRecord>",
      "info" : "TypeParameter[11950-11981]:TypeParameter[11950-11981]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[11983-11984]:SimpleType[11983-11984]"
    }, {
      "left" : "getRecords",
      "right" : "getRecords",
      "info" : "SimpleName[11985-11995]:SimpleName[11985-11995]"
    }, {
      "left" : "final T records",
      "right" : "final T records",
      "info" : "SingleVariableDeclaration[11996-12011]:SingleVariableDeclaration[11996-12011]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12020-12031]:SimpleType[12020-12031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12032-12178]:Block[12032-12178]"
    }, {
      "left" : "CSVRecord rec;",
      "right" : "CSVRecord rec;",
      "info" : "VariableDeclarationStatement[12042-12056]:VariableDeclarationStatement[12042-12056]"
    }, {
      "left" : "while ((rec = this.nextRecord()) != null)",
      "right" : "while ((rec = this.nextRecord()) != null)",
      "info" : "WhileStatement[12065-12148]:WhileStatement[12065-12148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12107-12148]:Block[12107-12148]"
    }, {
      "left" : "records.add(rec);",
      "right" : "records.add(rec);",
      "info" : "ExpressionStatement[12121-12138]:ExpressionStatement[12121-12138]"
    }, {
      "left" : "return records;",
      "right" : "return records;",
      "info" : "ReturnStatement[12157-12172]:ReturnStatement[12157-12172]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12430-12437]:Modifier[12430-12437]"
    }, {
      "left" : "Map<String, Integer>",
      "right" : "Map<String, Integer>",
      "info" : "ParameterizedType[12438-12458]:ParameterizedType[12438-12458]"
    }, {
      "left" : "initializeHeader",
      "right" : "initializeHeader",
      "info" : "SimpleName[12459-12475]:SimpleName[12459-12475]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12485-12496]:SimpleType[12485-12496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12497-14050]:Block[12497-14068]"
    }, {
      "left" : "Map<String, Integer> hdrMap = null;",
      "right" : "Map<String, Integer> hdrMap = null;",
      "info" : "VariableDeclarationStatement[12507-12542]:VariableDeclarationStatement[12507-12542]"
    }, {
      "left" : "final String[] formatHeader = this.format.getHeader();",
      "right" : "final String[] formatHeader = this.format.getHeader();",
      "info" : "VariableDeclarationStatement[12551-12605]:VariableDeclarationStatement[12551-12605]"
    }, {
      "left" : "if (formatHeader != null)",
      "right" : "if (formatHeader != null)",
      "info" : "IfStatement[12614-14021]:IfStatement[12614-14039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12640-14021]:Block[12640-14039]"
    }, {
      "left" : "hdrMap = new LinkedHashMap<String, Integer>();",
      "right" : "hdrMap = new LinkedHashMap<String, Integer>();",
      "info" : "ExpressionStatement[12654-12700]:ExpressionStatement[12654-12700]"
    }, {
      "left" : "String[] headerRecord = null;",
      "right" : "String[] headerRecord = null;",
      "info" : "VariableDeclarationStatement[12714-12743]:VariableDeclarationStatement[12714-12743]"
    }, {
      "left" : "if (formatHeader.length == 0)",
      "right" : "if (formatHeader.length == 0)",
      "info" : "IfStatement[12756-13228]:IfStatement[12756-13228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12786-13048]:Block[12786-13048]"
    }, {
      "left" : "final CSVRecord nextRecord = this.nextRecord();",
      "right" : "final CSVRecord nextRecord = this.nextRecord();",
      "info" : "VariableDeclarationStatement[12871-12918]:VariableDeclarationStatement[12871-12918]"
    }, {
      "left" : "if (nextRecord != null)",
      "right" : "if (nextRecord != null)",
      "info" : "IfStatement[12935-13034]:IfStatement[12935-13034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12959-13034]:Block[12959-13034]"
    }, {
      "left" : "headerRecord = nextRecord.values();",
      "right" : "headerRecord = nextRecord.values();",
      "info" : "ExpressionStatement[12981-13016]:ExpressionStatement[12981-13016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13054-13228]:Block[13054-13228]"
    }, {
      "left" : "if (this.format.getSkipHeaderRecord())",
      "right" : "if (this.format.getSkipHeaderRecord())",
      "info" : "IfStatement[13072-13169]:IfStatement[13072-13169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13111-13169]:Block[13111-13169]"
    }, {
      "left" : "this.nextRecord();",
      "right" : "this.nextRecord();",
      "info" : "ExpressionStatement[13133-13151]:ExpressionStatement[13133-13151]"
    }, {
      "left" : "headerRecord = formatHeader;",
      "right" : "headerRecord = formatHeader;",
      "info" : "ExpressionStatement[13186-13214]:ExpressionStatement[13186-13214]"
    }, {
      "left" : "if (headerRecord != null)",
      "right" : "if (headerRecord != null)",
      "info" : "IfStatement[13290-14011]:IfStatement[13290-14029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13316-14011]:Block[13316-14029]"
    }, {
      "left" : "for (int i = 0; i < headerRecord.length; i++)",
      "right" : "for (int i = 0; i < headerRecord.length; i++)",
      "info" : "ForStatement[13334-13997]:ForStatement[13334-14015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13380-13997]:Block[13380-14015]"
    }, {
      "left" : "final String header = headerRecord[i];",
      "right" : "final String header = headerRecord[i];",
      "info" : "VariableDeclarationStatement[13402-13440]:VariableDeclarationStatement[13402-13440]"
    }, {
      "left" : "final boolean containsHeader = hdrMap.containsKey(header);",
      "right" : "final boolean containsHeader = hdrMap.containsKey(header);",
      "info" : "VariableDeclarationStatement[13461-13519]:VariableDeclarationStatement[13461-13519]"
    }, {
      "left" : "final boolean emptyHeader = header.trim().isEmpty();",
      "right" : "final boolean emptyHeader = header == null || header.trim().isEmpty();",
      "info" : "VariableDeclarationStatement[13540-13592]:VariableDeclarationStatement[13540-13610]"
    }, {
      "left" : "header.trim().isEmpty()",
      "right" : "header.trim().isEmpty()",
      "info" : "MethodInvocation[13568-13591]:MethodInvocation[13586-13609]"
    }, {
      "left" : "if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders())))",
      "right" : "if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders())))",
      "info" : "IfStatement[13613-13919]:IfStatement[13631-13937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13708-13919]:Block[13726-13937]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));",
      "right" : "throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));",
      "info" : "ThrowStatement[13734-13897]:ThrowStatement[13752-13915]"
    }, {
      "left" : "hdrMap.put(header, Integer.valueOf(i));",
      "right" : "hdrMap.put(header, Integer.valueOf(i));",
      "info" : "ExpressionStatement[13940-13979]:ExpressionStatement[13958-13997]"
    }, {
      "left" : "return hdrMap;",
      "right" : "return hdrMap;",
      "info" : "ReturnStatement[14030-14044]:ReturnStatement[14048-14062]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14056-14062]:Modifier[14074-14080]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14063-14070]:PrimitiveType[14081-14088]"
    }, {
      "left" : "isClosed",
      "right" : "isClosed",
      "info" : "SimpleName[14071-14079]:SimpleName[14089-14097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14082-14127]:Block[14100-14145]"
    }, {
      "left" : "return this.lexer.isClosed();",
      "right" : "return this.lexer.isClosed();",
      "info" : "ReturnStatement[14092-14121]:ReturnStatement[14110-14139]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14399-14405]:Modifier[14417-14423]"
    }, {
      "left" : "Iterator<CSVRecord>",
      "right" : "Iterator<CSVRecord>",
      "info" : "ParameterizedType[14406-14425]:ParameterizedType[14424-14443]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[14426-14434]:SimpleName[14444-14452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14437-15922]:Block[14455-15940]"
    }, {
      "left" : "return new Iterator<CSVRecord>() {\n            private CSVRecord current;\n\n            private CSVRecord getNextRecord() {\n                try {\n                    return CSVParser.this.nextRecord();\n                } catch (final IOException e) {\n                    // TODO: This is not great, throw an ISE instead?\n                    throw new RuntimeException(e);\n                }\n            }\n\n            public boolean hasNext() {\n                if (CSVParser.this.isClosed()) {\n                    return false;\n                }\n                if (this.current == null) {\n                    this.current = this.getNextRecord();\n                }\n\n                return this.current != null;\n            }\n\n            public CSVRecord next() {\n                if (CSVParser.this.isClosed()) {\n                    throw new NoSuchElementException(\"CSVParser has been closed\");\n                }\n                CSVRecord next = this.current;\n                this.current = null;\n\n                if (next == null) {\n                    // hasNext() wasn't called before\n                    next = this.getNextRecord();\n                    if (next == null) {\n                        throw new NoSuchElementException(\"No more CSV records available\");\n                    }\n                }\n\n                return next;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
      "right" : "return new Iterator<CSVRecord>() {\n            private CSVRecord current;\n\n            private CSVRecord getNextRecord() {\n                try {\n                    return CSVParser.this.nextRecord();\n                } catch (final IOException e) {\n                    // TODO: This is not great, throw an ISE instead?\n                    throw new RuntimeException(e);\n                }\n            }\n\n            public boolean hasNext() {\n                if (CSVParser.this.isClosed()) {\n                    return false;\n                }\n                if (this.current == null) {\n                    this.current = this.getNextRecord();\n                }\n\n                return this.current != null;\n            }\n\n            public CSVRecord next() {\n                if (CSVParser.this.isClosed()) {\n                    throw new NoSuchElementException(\"CSVParser has been closed\");\n                }\n                CSVRecord next = this.current;\n                this.current = null;\n\n                if (next == null) {\n                    // hasNext() wasn't called before\n                    next = this.getNextRecord();\n                    if (next == null) {\n                        throw new NoSuchElementException(\"No more CSV records available\");\n                    }\n                }\n\n                return next;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
      "info" : "ReturnStatement[14447-15916]:ReturnStatement[14465-15934]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14534-14541]:Modifier[14552-14559]"
    }, {
      "left" : "CSVRecord",
      "right" : "CSVRecord",
      "info" : "SimpleType[14542-14551]:SimpleType[14560-14569]"
    }, {
      "left" : "getNextRecord",
      "right" : "getNextRecord",
      "info" : "SimpleName[14552-14565]:SimpleName[14570-14583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14568-14848]:Block[14586-14866]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14586-14834]:TryStatement[14604-14852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14590-14665]:Block[14608-14683]"
    }, {
      "left" : "return CSVParser.this.nextRecord();",
      "right" : "return CSVParser.this.nextRecord();",
      "info" : "ReturnStatement[14612-14647]:ReturnStatement[14630-14665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14694-14834]:Block[14712-14852]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[14786-14816]:ThrowStatement[14804-14834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14862-14868]:Modifier[14880-14886]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14869-14876]:PrimitiveType[14887-14894]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[14877-14884]:SimpleName[14895-14902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14887-15168]:Block[14905-15186]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[14905-14989]:IfStatement[14923-15007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14936-14989]:Block[14954-15007]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14958-14971]:ReturnStatement[14976-14989]"
    }, {
      "left" : "if (this.current == null)",
      "right" : "if (this.current == null)",
      "info" : "IfStatement[15006-15108]:IfStatement[15024-15126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15032-15108]:Block[15050-15126]"
    }, {
      "left" : "this.current = this.getNextRecord();",
      "right" : "this.current = this.getNextRecord();",
      "info" : "ExpressionStatement[15054-15090]:ExpressionStatement[15072-15108]"
    }, {
      "left" : "return this.current != null;",
      "right" : "return this.current != null;",
      "info" : "ReturnStatement[15126-15154]:ReturnStatement[15144-15172]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15182-15188]:Modifier[15200-15206]"
    }, {
      "left" : "CSVRecord",
      "right" : "CSVRecord",
      "info" : "SimpleType[15189-15198]:SimpleType[15207-15216]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[15199-15203]:SimpleName[15217-15221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15206-15796]:Block[15224-15814]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[15224-15357]:IfStatement[15242-15375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15255-15357]:Block[15273-15375]"
    }, {
      "left" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "right" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "info" : "ThrowStatement[15277-15339]:ThrowStatement[15295-15357]"
    }, {
      "left" : "CSVRecord next = this.current;",
      "right" : "CSVRecord next = this.current;",
      "info" : "VariableDeclarationStatement[15374-15404]:VariableDeclarationStatement[15392-15422]"
    }, {
      "left" : "this.current = null;",
      "right" : "this.current = null;",
      "info" : "ExpressionStatement[15421-15441]:ExpressionStatement[15439-15459]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[15459-15752]:IfStatement[15477-15770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15477-15752]:Block[15495-15770]"
    }, {
      "left" : "next = this.getNextRecord();",
      "right" : "next = this.getNextRecord();",
      "info" : "ExpressionStatement[15553-15581]:ExpressionStatement[15571-15599]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[15602-15734]:IfStatement[15620-15752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15620-15734]:Block[15638-15752]"
    }, {
      "left" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "right" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "info" : "ThrowStatement[15646-15712]:ThrowStatement[15664-15730]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[15770-15782]:ReturnStatement[15788-15800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15810-15816]:Modifier[15828-15834]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15817-15821]:PrimitiveType[15835-15839]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[15822-15828]:SimpleName[15840-15846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15831-15905]:Block[15849-15923]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[15849-15891]:ThrowStatement[15867-15909]"
    }, {
      "left" : "CSVRecord",
      "right" : "CSVRecord",
      "info" : "SimpleType[16210-16219]:SimpleType[16228-16237]"
    }, {
      "left" : "nextRecord",
      "right" : "nextRecord",
      "info" : "SimpleName[16220-16230]:SimpleName[16238-16248]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16240-16251]:SimpleType[16258-16269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16252-17887]:Block[16270-17905]"
    }, {
      "left" : "CSVRecord result = null;",
      "right" : "CSVRecord result = null;",
      "info" : "VariableDeclarationStatement[16262-16286]:VariableDeclarationStatement[16280-16304]"
    }, {
      "left" : "this.record.clear();",
      "right" : "this.record.clear();",
      "info" : "ExpressionStatement[16295-16315]:ExpressionStatement[16313-16333]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[16324-16348]:VariableDeclarationStatement[16342-16366]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[16357-17553]:DoStatement[16375-17571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16360-17511]:Block[16378-17529]"
    }, {
      "left" : "this.reusableToken.reset();",
      "right" : "this.reusableToken.reset();",
      "info" : "ExpressionStatement[16374-16401]:ExpressionStatement[16392-16419]"
    }, {
      "left" : "this.lexer.nextToken(this.reusableToken);",
      "right" : "this.lexer.nextToken(this.reusableToken);",
      "info" : "ExpressionStatement[16414-16455]:ExpressionStatement[16432-16473]"
    }, {
      "left" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue();\n                break;\n            case EORECORD:\n                this.addRecordValue();\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue();\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
      "right" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue();\n                break;\n            case EORECORD:\n                this.addRecordValue();\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue();\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
      "info" : "SwitchStatement[16468-17501]:SwitchStatement[16486-17519]"
    }, {
      "left" : "case TOKEN:",
      "right" : "case TOKEN:",
      "info" : "SwitchCase[16515-16526]:SwitchCase[16533-16544]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[16543-16565]:ExpressionStatement[16561-16583]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16582-16588]:BreakStatement[16600-16606]"
    }, {
      "left" : "case EORECORD:",
      "right" : "case EORECORD:",
      "info" : "SwitchCase[16601-16615]:SwitchCase[16619-16633]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[16632-16654]:ExpressionStatement[16650-16672]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16671-16677]:BreakStatement[16689-16695]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[16690-16699]:SwitchCase[16708-16717]"
    }, {
      "left" : "if (this.reusableToken.isReady)",
      "right" : "if (this.reusableToken.isReady)",
      "info" : "IfStatement[16716-16810]:IfStatement[16734-16828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16748-16810]:Block[16766-16828]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[16770-16792]:ExpressionStatement[16788-16810]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16827-16833]:BreakStatement[16845-16851]"
    }, {
      "left" : "case INVALID:",
      "right" : "case INVALID:",
      "info" : "SwitchCase[16846-16859]:SwitchCase[16864-16877]"
    }, {
      "left" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "right" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "info" : "ThrowStatement[16876-16967]:ThrowStatement[16894-16985]"
    }, {
      "left" : "case COMMENT:",
      "right" : "case COMMENT:",
      "info" : "SwitchCase[16980-16993]:SwitchCase[16998-17011]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[17031-17215]:IfStatement[17049-17233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17047-17145]:Block[17065-17163]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[17102-17127]:ExpressionStatement[17120-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17151-17215]:Block[17169-17233]"
    }, {
      "left" : "sb.append(Constants.LF);",
      "right" : "sb.append(Constants.LF);",
      "info" : "ExpressionStatement[17173-17197]:ExpressionStatement[17191-17215]"
    }, {
      "left" : "sb.append(this.reusableToken.content);",
      "right" : "sb.append(this.reusableToken.content);",
      "info" : "ExpressionStatement[17232-17270]:ExpressionStatement[17250-17288]"
    }, {
      "left" : "this.reusableToken.type = TOKEN;",
      "right" : "this.reusableToken.type = TOKEN;",
      "info" : "ExpressionStatement[17287-17319]:ExpressionStatement[17305-17337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17358-17364]:BreakStatement[17376-17382]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17377-17385]:SwitchCase[17395-17403]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
      "right" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
      "info" : "ThrowStatement[17402-17487]:ThrowStatement[17420-17505]"
    }, {
      "left" : "if (!this.record.isEmpty())",
      "right" : "if (!this.record.isEmpty())",
      "info" : "IfStatement[17563-17858]:IfStatement[17581-17876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17591-17858]:Block[17609-17876]"
    }, {
      "left" : "this.recordNumber++;",
      "right" : "this.recordNumber++;",
      "info" : "ExpressionStatement[17605-17625]:ExpressionStatement[17623-17643]"
    }, {
      "left" : "final String comment = sb == null ? null : sb.toString();",
      "right" : "final String comment = sb == null ? null : sb.toString();",
      "info" : "VariableDeclarationStatement[17638-17695]:VariableDeclarationStatement[17656-17713]"
    }, {
      "left" : "result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n                    this.recordNumber);",
      "right" : "result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n                    this.recordNumber);",
      "info" : "ExpressionStatement[17708-17848]:ExpressionStatement[17726-17866]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17867-17881]:ReturnStatement[17885-17899]"
    } ]
  },
  "interFileMappings" : { }
}