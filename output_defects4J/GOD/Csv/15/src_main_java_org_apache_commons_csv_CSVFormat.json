{
  "matchedElements" : [
 {
    "left" : "class : CSVFormat",
    "right" : "class : CSVFormat",
    "info" : "TypeDeclaration[1889-70688]:TypeDeclaration[1889-70540]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "FieldDeclaration[5714-5745]:FieldDeclaration[5714-5745]"
  }, {
    "left" : "package Predefined(format )",
    "right" : "package Predefined(format )",
    "info" : "MethodDeclaration[5755-5835]:MethodDeclaration[5755-5835]"
  }, {
    "left" : "public getFormat() : ",
    "right" : "public getFormat() : ",
    "info" : "MethodDeclaration[5845-6006]:MethodDeclaration[5845-6006]"
  }, {
    "left" : "DEFAULT",
    "right" : "DEFAULT",
    "info" : "FieldDeclaration[6018-6580]:FieldDeclaration[6018-6580]"
  }, {
    "left" : "EXCEL",
    "right" : "EXCEL",
    "info" : "FieldDeclaration[6586-7881]:FieldDeclaration[6586-7881]"
  }, {
    "left" : "INFORMIX_UNLOAD",
    "right" : "INFORMIX_UNLOAD",
    "info" : "FieldDeclaration[7908-9011]:FieldDeclaration[7908-9011]"
  }, {
    "left" : "INFORMIX_UNLOAD_CSV",
    "right" : "INFORMIX_UNLOAD_CSV",
    "info" : "FieldDeclaration[9038-10101]:FieldDeclaration[9038-10101]"
  }, {
    "left" : "MYSQL",
    "right" : "MYSQL",
    "info" : "FieldDeclaration[10128-11355]:FieldDeclaration[10128-11355]"
  }, {
    "left" : "POSTGRESQL_CSV",
    "right" : "POSTGRESQL_CSV",
    "info" : "FieldDeclaration[11383-12621]:FieldDeclaration[11383-12621]"
  }, {
    "left" : "POSTGRESQL_TEXT",
    "right" : "POSTGRESQL_TEXT",
    "info" : "FieldDeclaration[12649-13892]:FieldDeclaration[12649-13892]"
  }, {
    "left" : "RFC4180",
    "right" : "RFC4180",
    "info" : "FieldDeclaration[13920-14383]:FieldDeclaration[13920-14383]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[14389-14437]:FieldDeclaration[14389-14437]"
  }, {
    "left" : "TDF",
    "right" : "TDF",
    "info" : "FieldDeclaration[14443-14900]:FieldDeclaration[14443-14900]"
  }, {
    "left" : "private isLineBreak(c char) : boolean",
    "right" : "private isLineBreak(c char) : boolean",
    "info" : "MethodDeclaration[14927-15239]:MethodDeclaration[14927-15239]"
  }, {
    "left" : "private isLineBreak(c ) : boolean",
    "right" : "private isLineBreak(c ) : boolean",
    "info" : "MethodDeclaration[15245-15611]:MethodDeclaration[15245-15611]"
  }, {
    "left" : "public newFormat(delimiter char) : ",
    "right" : "public newFormat(delimiter char) : ",
    "info" : "MethodDeclaration[15617-16452]:MethodDeclaration[15617-16452]"
  }, {
    "left" : "public valueOf(format ) : ",
    "right" : "public valueOf(format ) : ",
    "info" : "MethodDeclaration[16458-16790]:MethodDeclaration[16458-16790]"
  }, {
    "left" : "allowMissingColumnNames",
    "right" : "allowMissingColumnNames",
    "info" : "FieldDeclaration[16796-16842]:FieldDeclaration[16796-16842]"
  }, {
    "left" : "commentMarker",
    "right" : "commentMarker",
    "info" : "FieldDeclaration[16848-16886]:FieldDeclaration[16848-16886]"
  }, {
    "left" : "delimiter",
    "right" : "delimiter",
    "info" : "FieldDeclaration[16926-16955]:FieldDeclaration[16926-16955]"
  }, {
    "left" : "escapeCharacter",
    "right" : "escapeCharacter",
    "info" : "FieldDeclaration[16961-17001]:FieldDeclaration[16961-17001]"
  }, {
    "left" : "header",
    "right" : "header",
    "info" : "FieldDeclaration[17039-17069]:FieldDeclaration[17039-17069]"
  }, {
    "left" : "headerComments",
    "right" : "headerComments",
    "info" : "FieldDeclaration[17107-17145]:FieldDeclaration[17107-17145]"
  }, {
    "left" : "ignoreEmptyLines",
    "right" : "ignoreEmptyLines",
    "info" : "FieldDeclaration[17184-17223]:FieldDeclaration[17184-17223]"
  }, {
    "left" : "ignoreHeaderCase",
    "right" : "ignoreHeaderCase",
    "info" : "FieldDeclaration[17229-17268]:FieldDeclaration[17229-17268]"
  }, {
    "left" : "ignoreSurroundingSpaces",
    "right" : "ignoreSurroundingSpaces",
    "info" : "FieldDeclaration[17309-17355]:FieldDeclaration[17309-17355]"
  }, {
    "left" : "nullString",
    "right" : "nullString",
    "info" : "FieldDeclaration[17421-17453]:FieldDeclaration[17421-17453]"
  }, {
    "left" : "quoteCharacter",
    "right" : "quoteCharacter",
    "info" : "FieldDeclaration[17500-17539]:FieldDeclaration[17500-17539]"
  }, {
    "left" : "quoteMode",
    "right" : "quoteMode",
    "info" : "FieldDeclaration[17576-17610]:FieldDeclaration[17576-17610]"
  }, {
    "left" : "recordSeparator",
    "right" : "recordSeparator",
    "info" : "FieldDeclaration[17616-17653]:FieldDeclaration[17616-17653]"
  }, {
    "left" : "skipHeaderRecord",
    "right" : "skipHeaderRecord",
    "info" : "FieldDeclaration[17674-17713]:FieldDeclaration[17674-17713]"
  }, {
    "left" : "trailingDelimiter",
    "right" : "trailingDelimiter",
    "info" : "FieldDeclaration[17719-17759]:FieldDeclaration[17719-17759]"
  }, {
    "left" : "trim",
    "right" : "trim",
    "info" : "FieldDeclaration[17765-17792]:FieldDeclaration[17765-17792]"
  }, {
    "left" : "autoFlush",
    "right" : "autoFlush",
    "info" : "FieldDeclaration[17798-17830]:FieldDeclaration[17798-17830]"
  }, {
    "left" : "private CSVFormat(delimiter char, quoteChar , quoteMode , commentStart , escape , ignoreSurroundingSpaces boolean, ignoreEmptyLines boolean, recordSeparator , nullString , headerComments , header , skipHeaderRecord boolean, allowMissingColumnNames boolean, ignoreHeaderCase boolean, trim boolean, trailingDelimiter boolean, autoFlush boolean)",
    "right" : "private CSVFormat(delimiter char, quoteChar , quoteMode , commentStart , escape , ignoreSurroundingSpaces boolean, ignoreEmptyLines boolean, recordSeparator , nullString , headerComments , header , skipHeaderRecord boolean, allowMissingColumnNames boolean, ignoreHeaderCase boolean, trim boolean, trailingDelimiter boolean, autoFlush boolean)",
    "info" : "MethodDeclaration[17836-20832]:MethodDeclaration[17836-20832]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[20838-22872]:MethodDeclaration[20838-22872]"
  }, {
    "left" : "public format() : ",
    "right" : "public format() : ",
    "info" : "MethodDeclaration[22878-23467]:MethodDeclaration[22878-23467]"
  }, {
    "left" : "public getAllowMissingColumnNames() : boolean",
    "right" : "public getAllowMissingColumnNames() : boolean",
    "info" : "MethodDeclaration[23473-23844]:MethodDeclaration[23473-23844]"
  }, {
    "left" : "public getCommentMarker() : ",
    "right" : "public getCommentMarker() : ",
    "info" : "MethodDeclaration[23850-24073]:MethodDeclaration[23850-24073]"
  }, {
    "left" : "public getDelimiter() : char",
    "right" : "public getDelimiter() : char",
    "info" : "MethodDeclaration[24079-24282]:MethodDeclaration[24079-24282]"
  }, {
    "left" : "public getEscapeCharacter() : ",
    "right" : "public getEscapeCharacter() : ",
    "info" : "MethodDeclaration[24288-24482]:MethodDeclaration[24288-24482]"
  }, {
    "left" : "public getHeader() : ",
    "right" : "public getHeader() : ",
    "info" : "MethodDeclaration[24488-24757]:MethodDeclaration[24488-24757]"
  }, {
    "left" : "public getHeaderComments() : ",
    "right" : "public getHeaderComments() : ",
    "info" : "MethodDeclaration[24763-25028]:MethodDeclaration[24763-25028]"
  }, {
    "left" : "public getIgnoreEmptyLines() : boolean",
    "right" : "public getIgnoreEmptyLines() : boolean",
    "info" : "MethodDeclaration[25034-25359]:MethodDeclaration[25034-25359]"
  }, {
    "left" : "public getIgnoreHeaderCase() : boolean",
    "right" : "public getIgnoreHeaderCase() : boolean",
    "info" : "MethodDeclaration[25365-25658]:MethodDeclaration[25365-25658]"
  }, {
    "left" : "public getIgnoreSurroundingSpaces() : boolean",
    "right" : "public getIgnoreSurroundingSpaces() : boolean",
    "info" : "MethodDeclaration[25664-25977]:MethodDeclaration[25664-25977]"
  }, {
    "left" : "public getNullString() : ",
    "right" : "public getNullString() : ",
    "info" : "MethodDeclaration[25983-26515]:MethodDeclaration[25983-26515]"
  }, {
    "left" : "public getQuoteCharacter() : ",
    "right" : "public getQuoteCharacter() : ",
    "info" : "MethodDeclaration[26521-26766]:MethodDeclaration[26521-26766]"
  }, {
    "left" : "public getQuoteMode() : ",
    "right" : "public getQuoteMode() : ",
    "info" : "MethodDeclaration[26772-26939]:MethodDeclaration[26772-26939]"
  }, {
    "left" : "public getRecordSeparator() : ",
    "right" : "public getRecordSeparator() : ",
    "info" : "MethodDeclaration[26945-27141]:MethodDeclaration[26945-27141]"
  }, {
    "left" : "public getSkipHeaderRecord() : boolean",
    "right" : "public getSkipHeaderRecord() : boolean",
    "info" : "MethodDeclaration[27147-27347]:MethodDeclaration[27147-27347]"
  }, {
    "left" : "public getTrailingDelimiter() : boolean",
    "right" : "public getTrailingDelimiter() : boolean",
    "info" : "MethodDeclaration[27353-27577]:MethodDeclaration[27353-27577]"
  }, {
    "left" : "public getTrim() : boolean",
    "right" : "public getTrim() : boolean",
    "info" : "MethodDeclaration[27583-27779]:MethodDeclaration[27583-27779]"
  }, {
    "left" : "public getAutoFlush() : boolean",
    "right" : "public getAutoFlush() : boolean",
    "info" : "MethodDeclaration[27785-27973]:MethodDeclaration[27785-27973]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[27979-29031]:MethodDeclaration[27979-29031]"
  }, {
    "left" : "public isCommentMarkerSet() : boolean",
    "right" : "public isCommentMarkerSet() : boolean",
    "info" : "MethodDeclaration[29037-29384]:MethodDeclaration[29037-29384]"
  }, {
    "left" : "public isEscapeCharacterSet() : boolean",
    "right" : "public isEscapeCharacterSet() : boolean",
    "info" : "MethodDeclaration[29390-29602]:MethodDeclaration[29390-29602]"
  }, {
    "left" : "public isNullStringSet() : boolean",
    "right" : "public isNullStringSet() : boolean",
    "info" : "MethodDeclaration[29608-29815]:MethodDeclaration[29608-29815]"
  }, {
    "left" : "public isQuoteCharacterSet() : boolean",
    "right" : "public isQuoteCharacterSet() : boolean",
    "info" : "MethodDeclaration[29821-30034]:MethodDeclaration[29821-30034]"
  }, {
    "left" : "public parse(in ) : ",
    "right" : "public parse(in ) : ",
    "info" : "MethodDeclaration[30040-30489]:MethodDeclaration[30040-30489]"
  }, {
    "left" : "public print(out ) : ",
    "right" : "public print(out ) : ",
    "info" : "MethodDeclaration[30495-30919]:MethodDeclaration[30495-30919]"
  }, {
    "left" : "public printer() : ",
    "right" : "public printer() : ",
    "info" : "MethodDeclaration[30925-31319]:MethodDeclaration[30925-31319]"
  }, {
    "left" : "public print(out , charset ) : ",
    "right" : "public print(out , charset ) : ",
    "info" : "MethodDeclaration[31325-31985]:MethodDeclaration[31325-31985]"
  }, {
    "left" : "public print(out , charset ) : ",
    "right" : "public print(out , charset ) : ",
    "info" : "MethodDeclaration[31991-32520]:MethodDeclaration[31991-32520]"
  }, {
    "left" : "public print(value , out , newRecord boolean) : void",
    "right" : "public print(value , out , newRecord boolean) : void",
    "info" : "MethodDeclaration[32526-33987]:MethodDeclaration[32526-33987]"
  }, {
    "left" : "private print(object , value , offset int, len int, out , newRecord boolean) : void",
    "right" : "private print(object , value , offset int, len int, out , newRecord boolean) : void",
    "info" : "MethodDeclaration[33993-34676]:MethodDeclaration[33993-34676]"
  }, {
    "left" : "private printAndEscape(value , offset int, len int, out ) : void",
    "right" : "private printAndEscape(value , offset int, len int, out ) : void",
    "info" : "MethodDeclaration[34782-35869]:MethodDeclaration[34782-35869]"
  }, {
    "left" : "private printAndQuote(object , value , offset int, len int, out , newRecord boolean) : void",
    "right" : "private printAndQuote(object , value , offset int, len int, out , newRecord boolean) : void",
    "info" : "MethodDeclaration[36035-40051]:MethodDeclaration[36035-39903]"
  }, {
    "left" : "public println(out ) : void",
    "right" : "public println(out ) : void",
    "info" : "MethodDeclaration[40057-40554]:MethodDeclaration[39909-40406]"
  }, {
    "left" : "public printRecord(out , ) : void",
    "right" : "public printRecord(out , ) : void",
    "info" : "MethodDeclaration[40560-41411]:MethodDeclaration[40412-41263]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[41417-43010]:MethodDeclaration[41269-42862]"
  }, {
    "left" : "private toStringArray(values ...) : ",
    "right" : "private toStringArray(values ...) : ",
    "info" : "MethodDeclaration[43016-43396]:MethodDeclaration[42868-43248]"
  }, {
    "left" : "private trim(charSequence ) : ",
    "right" : "private trim(charSequence ) : ",
    "info" : "MethodDeclaration[43402-43948]:MethodDeclaration[43254-43800]"
  }, {
    "left" : "private validate() : void",
    "right" : "private validate() : void",
    "info" : "MethodDeclaration[43954-46178]:MethodDeclaration[43806-46030]"
  }, {
    "left" : "public withAllowMissingColumnNames() : ",
    "right" : "public withAllowMissingColumnNames() : ",
    "info" : "MethodDeclaration[46184-46603]:MethodDeclaration[46036-46455]"
  }, {
    "left" : "public withAllowMissingColumnNames(allowMissingColumnNames boolean) : ",
    "right" : "public withAllowMissingColumnNames(allowMissingColumnNames boolean) : ",
    "info" : "MethodDeclaration[46609-47516]:MethodDeclaration[46461-47368]"
  }, {
    "left" : "public withCommentMarker(commentMarker char) : ",
    "right" : "public withCommentMarker(commentMarker char) : ",
    "info" : "MethodDeclaration[47522-48189]:MethodDeclaration[47374-48041]"
  }, {
    "left" : "public withCommentMarker(commentMarker ) : ",
    "right" : "public withCommentMarker(commentMarker ) : ",
    "info" : "MethodDeclaration[48195-49314]:MethodDeclaration[48047-49166]"
  }, {
    "left" : "public withDelimiter(delimiter char) : ",
    "right" : "public withDelimiter(delimiter char) : ",
    "info" : "MethodDeclaration[49320-50238]:MethodDeclaration[49172-50090]"
  }, {
    "left" : "public withEscape(escape char) : ",
    "right" : "public withEscape(escape char) : ",
    "info" : "MethodDeclaration[50244-50764]:MethodDeclaration[50096-50616]"
  }, {
    "left" : "public withEscape(escape ) : ",
    "right" : "public withEscape(escape ) : ",
    "info" : "MethodDeclaration[50770-51727]:MethodDeclaration[50622-51579]"
  }, {
    "left" : "public withFirstRecordAsHeader() : ",
    "right" : "public withFirstRecordAsHeader() : ",
    "info" : "MethodDeclaration[51733-52306]:MethodDeclaration[51585-52158]"
  }, {
    "left" : "public withHeader(headerEnum ) : ",
    "right" : "public withHeader(headerEnum ) : ",
    "info" : "MethodDeclaration[52312-53514]:MethodDeclaration[52164-53366]"
  }, {
    "left" : "public withHeader(resultSet ) : ",
    "right" : "public withHeader(resultSet ) : ",
    "info" : "MethodDeclaration[53520-54606]:MethodDeclaration[53372-54458]"
  }, {
    "left" : "public withHeader(metaData ) : ",
    "right" : "public withHeader(metaData ) : ",
    "info" : "MethodDeclaration[54612-55967]:MethodDeclaration[54464-55819]"
  }, {
    "left" : "public withHeader() : ",
    "right" : "public withHeader() : ",
    "info" : "MethodDeclaration[55973-57161]:MethodDeclaration[55825-57013]"
  }, {
    "left" : "public withHeaderComments() : ",
    "right" : "public withHeaderComments() : ",
    "info" : "MethodDeclaration[57167-58227]:MethodDeclaration[57019-58079]"
  }, {
    "left" : "public withIgnoreEmptyLines() : ",
    "right" : "public withIgnoreEmptyLines() : ",
    "info" : "MethodDeclaration[58233-58640]:MethodDeclaration[58085-58492]"
  }, {
    "left" : "public withIgnoreEmptyLines(ignoreEmptyLines boolean) : ",
    "right" : "public withIgnoreEmptyLines(ignoreEmptyLines boolean) : ",
    "info" : "MethodDeclaration[58646-59510]:MethodDeclaration[58498-59362]"
  }, {
    "left" : "public withIgnoreHeaderCase() : ",
    "right" : "public withIgnoreHeaderCase() : ",
    "info" : "MethodDeclaration[59516-59858]:MethodDeclaration[59368-59710]"
  }, {
    "left" : "public withIgnoreHeaderCase(ignoreHeaderCase boolean) : ",
    "right" : "public withIgnoreHeaderCase(ignoreHeaderCase boolean) : ",
    "info" : "MethodDeclaration[59864-60672]:MethodDeclaration[59716-60524]"
  }, {
    "left" : "public withIgnoreSurroundingSpaces() : ",
    "right" : "public withIgnoreSurroundingSpaces() : ",
    "info" : "MethodDeclaration[60678-61074]:MethodDeclaration[60530-60926]"
  }, {
    "left" : "public withIgnoreSurroundingSpaces(ignoreSurroundingSpaces boolean) : ",
    "right" : "public withIgnoreSurroundingSpaces(ignoreSurroundingSpaces boolean) : ",
    "info" : "MethodDeclaration[61080-61903]:MethodDeclaration[60932-61755]"
  }, {
    "left" : "public withNullString(nullString ) : ",
    "right" : "public withNullString(nullString ) : ",
    "info" : "MethodDeclaration[61909-62947]:MethodDeclaration[61761-62799]"
  }, {
    "left" : "public withQuote(quoteChar char) : ",
    "right" : "public withQuote(quoteChar char) : ",
    "info" : "MethodDeclaration[62953-63466]:MethodDeclaration[62805-63318]"
  }, {
    "left" : "public withQuote(quoteChar ) : ",
    "right" : "public withQuote(quoteChar ) : ",
    "info" : "MethodDeclaration[63472-64419]:MethodDeclaration[63324-64271]"
  }, {
    "left" : "public withQuoteMode(quoteModePolicy ) : ",
    "right" : "public withQuoteMode(quoteModePolicy ) : ",
    "info" : "MethodDeclaration[64425-65140]:MethodDeclaration[64277-64992]"
  }, {
    "left" : "public withRecordSeparator(recordSeparator char) : ",
    "right" : "public withRecordSeparator(recordSeparator char) : ",
    "info" : "MethodDeclaration[65146-65821]:MethodDeclaration[64998-65673]"
  }, {
    "left" : "public withRecordSeparator(recordSeparator ) : ",
    "right" : "public withRecordSeparator(recordSeparator ) : ",
    "info" : "MethodDeclaration[65827-66861]:MethodDeclaration[65679-66713]"
  }, {
    "left" : "public withSkipHeaderRecord() : ",
    "right" : "public withSkipHeaderRecord() : ",
    "info" : "MethodDeclaration[66867-67279]:MethodDeclaration[66719-67131]"
  }, {
    "left" : "public withSkipHeaderRecord(skipHeaderRecord boolean) : ",
    "right" : "public withSkipHeaderRecord(skipHeaderRecord boolean) : ",
    "info" : "MethodDeclaration[67285-68021]:MethodDeclaration[67137-67873]"
  }, {
    "left" : "public withTrailingDelimiter() : ",
    "right" : "public withTrailingDelimiter() : ",
    "info" : "MethodDeclaration[68027-68322]:MethodDeclaration[67879-68174]"
  }, {
    "left" : "public withTrailingDelimiter(trailingDelimiter boolean) : ",
    "right" : "public withTrailingDelimiter(trailingDelimiter boolean) : ",
    "info" : "MethodDeclaration[68328-69052]:MethodDeclaration[68180-68904]"
  }, {
    "left" : "public withTrim() : ",
    "right" : "public withTrim() : ",
    "info" : "MethodDeclaration[69058-69324]:MethodDeclaration[68910-69176]"
  }, {
    "left" : "public withTrim(trim boolean) : ",
    "right" : "public withTrim(trim boolean) : ",
    "info" : "MethodDeclaration[69330-70017]:MethodDeclaration[69182-69869]"
  }, {
    "left" : "public withAutoFlush(autoFlush boolean) : ",
    "right" : "public withAutoFlush(autoFlush boolean) : ",
    "info" : "MethodDeclaration[70023-70686]:MethodDeclaration[69875-70538]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4556-4562]:Modifier[4556-4562]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4563-4568]:Modifier[4563-4568]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4569-4574]:TYPE_DECLARATION_KIND[4569-4574]"
  }, {
    "left" : "Predefined",
    "right" : "Predefined",
    "info" : "SimpleName[5755-5765]:SimpleName[5755-5765]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[5766-5788]:SingleVariableDeclaration[5766-5788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5790-5835]:Block[5790-5835]"
  }, {
    "left" : "this.format = format;",
    "right" : "this.format = format;",
    "info" : "ExpressionStatement[5804-5825]:ExpressionStatement[5804-5825]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5939-5945]:Modifier[5939-5945]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[5946-5955]:SimpleType[5946-5955]"
  }, {
    "left" : "getFormat",
    "right" : "getFormat",
    "info" : "SimpleName[5956-5965]:SimpleName[5956-5965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5968-6006]:Block[5968-6006]"
  }, {
    "left" : "return format;",
    "right" : "return format;",
    "info" : "ReturnStatement[5982-5996]:ReturnStatement[5982-5996]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15148-15155]:Modifier[15148-15155]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15156-15162]:Modifier[15156-15162]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15163-15170]:PrimitiveType[15163-15170]"
  }, {
    "left" : "isLineBreak",
    "right" : "isLineBreak",
    "info" : "SimpleName[15171-15182]:SimpleName[15171-15182]"
  }, {
    "left" : "final char c",
    "right" : "final char c",
    "info" : "SingleVariableDeclaration[15183-15195]:SingleVariableDeclaration[15183-15195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15197-15239]:Block[15197-15239]"
  }, {
    "left" : "return c == LF || c == CR;",
    "right" : "return c == LF || c == CR;",
    "info" : "ReturnStatement[15207-15233]:ReturnStatement[15207-15233]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15494-15501]:Modifier[15494-15501]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15502-15508]:Modifier[15502-15508]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15509-15516]:PrimitiveType[15509-15516]"
  }, {
    "left" : "isLineBreak",
    "right" : "isLineBreak",
    "info" : "SimpleName[15517-15528]:SimpleName[15517-15528]"
  }, {
    "left" : "final Character c",
    "right" : "final Character c",
    "info" : "SingleVariableDeclaration[15529-15546]:SingleVariableDeclaration[15529-15546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15548-15611]:Block[15548-15611]"
  }, {
    "left" : "return c != null && isLineBreak(c.charValue());",
    "right" : "return c != null && isLineBreak(c.charValue());",
    "info" : "ReturnStatement[15558-15605]:ReturnStatement[15558-15605]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16228-16234]:Modifier[16228-16234]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[16235-16241]:Modifier[16235-16241]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[16242-16251]:SimpleType[16242-16251]"
  }, {
    "left" : "newFormat",
    "right" : "newFormat",
    "info" : "SimpleName[16252-16261]:SimpleName[16252-16261]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[16262-16282]:SingleVariableDeclaration[16262-16282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16284-16452]:Block[16284-16452]"
  }, {
    "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n                false, false, false, false);",
    "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n                false, false, false, false);",
    "info" : "ReturnStatement[16294-16446]:ReturnStatement[16294-16446]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16665-16671]:Modifier[16665-16671]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[16672-16678]:Modifier[16672-16678]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[16679-16688]:SimpleType[16679-16688]"
  }, {
    "left" : "valueOf",
    "right" : "valueOf",
    "info" : "SimpleName[16689-16696]:SimpleName[16689-16696]"
  }, {
    "left" : "final String format",
    "right" : "final String format",
    "info" : "SingleVariableDeclaration[16697-16716]:SingleVariableDeclaration[16697-16716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16718-16790]:Block[16718-16790]"
  }, {
    "left" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
    "right" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
    "info" : "ReturnStatement[16728-16784]:ReturnStatement[16728-16784]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19390-19397]:Modifier[19390-19397]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleName[19398-19407]:SimpleName[19398-19407]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[19408-19428]:SingleVariableDeclaration[19408-19428]"
  }, {
    "left" : "final Character quoteChar",
    "right" : "final Character quoteChar",
    "info" : "SingleVariableDeclaration[19430-19455]:SingleVariableDeclaration[19430-19455]"
  }, {
    "left" : "final QuoteMode quoteMode",
    "right" : "final QuoteMode quoteMode",
    "info" : "SingleVariableDeclaration[19457-19482]:SingleVariableDeclaration[19457-19482]"
  }, {
    "left" : "final Character commentStart",
    "right" : "final Character commentStart",
    "info" : "SingleVariableDeclaration[19506-19534]:SingleVariableDeclaration[19506-19534]"
  }, {
    "left" : "final Character escape",
    "right" : "final Character escape",
    "info" : "SingleVariableDeclaration[19536-19558]:SingleVariableDeclaration[19536-19558]"
  }, {
    "left" : "final boolean ignoreSurroundingSpaces",
    "right" : "final boolean ignoreSurroundingSpaces",
    "info" : "SingleVariableDeclaration[19560-19597]:SingleVariableDeclaration[19560-19597]"
  }, {
    "left" : "final boolean ignoreEmptyLines",
    "right" : "final boolean ignoreEmptyLines",
    "info" : "SingleVariableDeclaration[19621-19651]:SingleVariableDeclaration[19621-19651]"
  }, {
    "left" : "final String recordSeparator",
    "right" : "final String recordSeparator",
    "info" : "SingleVariableDeclaration[19653-19681]:SingleVariableDeclaration[19653-19681]"
  }, {
    "left" : "final String nullString",
    "right" : "final String nullString",
    "info" : "SingleVariableDeclaration[19683-19706]:SingleVariableDeclaration[19683-19706]"
  }, {
    "left" : "final Object[] headerComments",
    "right" : "final Object[] headerComments",
    "info" : "SingleVariableDeclaration[19730-19759]:SingleVariableDeclaration[19730-19759]"
  }, {
    "left" : "final String[] header",
    "right" : "final String[] header",
    "info" : "SingleVariableDeclaration[19761-19782]:SingleVariableDeclaration[19761-19782]"
  }, {
    "left" : "final boolean skipHeaderRecord",
    "right" : "final boolean skipHeaderRecord",
    "info" : "SingleVariableDeclaration[19784-19814]:SingleVariableDeclaration[19784-19814]"
  }, {
    "left" : "final boolean allowMissingColumnNames",
    "right" : "final boolean allowMissingColumnNames",
    "info" : "SingleVariableDeclaration[19838-19875]:SingleVariableDeclaration[19838-19875]"
  }, {
    "left" : "final boolean ignoreHeaderCase",
    "right" : "final boolean ignoreHeaderCase",
    "info" : "SingleVariableDeclaration[19877-19907]:SingleVariableDeclaration[19877-19907]"
  }, {
    "left" : "final boolean trim",
    "right" : "final boolean trim",
    "info" : "SingleVariableDeclaration[19909-19927]:SingleVariableDeclaration[19909-19927]"
  }, {
    "left" : "final boolean trailingDelimiter",
    "right" : "final boolean trailingDelimiter",
    "info" : "SingleVariableDeclaration[19951-19982]:SingleVariableDeclaration[19951-19982]"
  }, {
    "left" : "final boolean autoFlush",
    "right" : "final boolean autoFlush",
    "info" : "SingleVariableDeclaration[19984-20007]:SingleVariableDeclaration[19984-20007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20009-20832]:Block[20009-20832]"
  }, {
    "left" : "this.delimiter = delimiter;",
    "right" : "this.delimiter = delimiter;",
    "info" : "ExpressionStatement[20019-20046]:ExpressionStatement[20019-20046]"
  }, {
    "left" : "this.quoteCharacter = quoteChar;",
    "right" : "this.quoteCharacter = quoteChar;",
    "info" : "ExpressionStatement[20055-20087]:ExpressionStatement[20055-20087]"
  }, {
    "left" : "this.quoteMode = quoteMode;",
    "right" : "this.quoteMode = quoteMode;",
    "info" : "ExpressionStatement[20096-20123]:ExpressionStatement[20096-20123]"
  }, {
    "left" : "this.commentMarker = commentStart;",
    "right" : "this.commentMarker = commentStart;",
    "info" : "ExpressionStatement[20132-20166]:ExpressionStatement[20132-20166]"
  }, {
    "left" : "this.escapeCharacter = escape;",
    "right" : "this.escapeCharacter = escape;",
    "info" : "ExpressionStatement[20175-20205]:ExpressionStatement[20175-20205]"
  }, {
    "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
    "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
    "info" : "ExpressionStatement[20214-20269]:ExpressionStatement[20214-20269]"
  }, {
    "left" : "this.allowMissingColumnNames = allowMissingColumnNames;",
    "right" : "this.allowMissingColumnNames = allowMissingColumnNames;",
    "info" : "ExpressionStatement[20278-20333]:ExpressionStatement[20278-20333]"
  }, {
    "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
    "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
    "info" : "ExpressionStatement[20342-20383]:ExpressionStatement[20342-20383]"
  }, {
    "left" : "this.recordSeparator = recordSeparator;",
    "right" : "this.recordSeparator = recordSeparator;",
    "info" : "ExpressionStatement[20392-20431]:ExpressionStatement[20392-20431]"
  }, {
    "left" : "this.nullString = nullString;",
    "right" : "this.nullString = nullString;",
    "info" : "ExpressionStatement[20440-20469]:ExpressionStatement[20440-20469]"
  }, {
    "left" : "this.headerComments = toStringArray(headerComments);",
    "right" : "this.headerComments = toStringArray(headerComments);",
    "info" : "ExpressionStatement[20478-20530]:ExpressionStatement[20478-20530]"
  }, {
    "left" : "this.header = header == null ? null : header.clone();",
    "right" : "this.header = header == null ? null : header.clone();",
    "info" : "ExpressionStatement[20539-20592]:ExpressionStatement[20539-20592]"
  }, {
    "left" : "this.skipHeaderRecord = skipHeaderRecord;",
    "right" : "this.skipHeaderRecord = skipHeaderRecord;",
    "info" : "ExpressionStatement[20601-20642]:ExpressionStatement[20601-20642]"
  }, {
    "left" : "this.ignoreHeaderCase = ignoreHeaderCase;",
    "right" : "this.ignoreHeaderCase = ignoreHeaderCase;",
    "info" : "ExpressionStatement[20651-20692]:ExpressionStatement[20651-20692]"
  }, {
    "left" : "this.trailingDelimiter = trailingDelimiter;",
    "right" : "this.trailingDelimiter = trailingDelimiter;",
    "info" : "ExpressionStatement[20701-20744]:ExpressionStatement[20701-20744]"
  }, {
    "left" : "this.trim = trim;",
    "right" : "this.trim = trim;",
    "info" : "ExpressionStatement[20753-20770]:ExpressionStatement[20753-20770]"
  }, {
    "left" : "this.autoFlush = autoFlush;",
    "right" : "this.autoFlush = autoFlush;",
    "info" : "ExpressionStatement[20779-20806]:ExpressionStatement[20779-20806]"
  }, {
    "left" : "validate();",
    "right" : "validate();",
    "info" : "ExpressionStatement[20815-20826]:ExpressionStatement[20815-20826]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20838-20847]:MarkerAnnotation[20838-20847]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20852-20858]:Modifier[20852-20858]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20859-20866]:PrimitiveType[20859-20866]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[20867-20873]:SimpleName[20867-20873]"
  }, {
    "left" : "final Object obj",
    "right" : "final Object obj",
    "info" : "SingleVariableDeclaration[20874-20890]:SingleVariableDeclaration[20874-20890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20892-22872]:Block[20892-22872]"
  }, {
    "left" : "if (this == obj)",
    "right" : "if (this == obj)",
    "info" : "IfStatement[20902-20955]:IfStatement[20902-20955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20919-20955]:Block[20919-20955]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[20933-20945]:ReturnStatement[20933-20945]"
  }, {
    "left" : "if (obj == null)",
    "right" : "if (obj == null)",
    "info" : "IfStatement[20964-21018]:IfStatement[20964-21018]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20981-21018]:Block[20981-21018]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[20995-21008]:ReturnStatement[20995-21008]"
  }, {
    "left" : "if (getClass() != obj.getClass())",
    "right" : "if (getClass() != obj.getClass())",
    "info" : "IfStatement[21027-21098]:IfStatement[21027-21098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21061-21098]:Block[21061-21098]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21075-21088]:ReturnStatement[21075-21088]"
  }, {
    "left" : "final CSVFormat other = (CSVFormat) obj;",
    "right" : "final CSVFormat other = (CSVFormat) obj;",
    "info" : "VariableDeclarationStatement[21108-21148]:VariableDeclarationStatement[21108-21148]"
  }, {
    "left" : "if (delimiter != other.delimiter)",
    "right" : "if (delimiter != other.delimiter)",
    "info" : "IfStatement[21157-21228]:IfStatement[21157-21228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21191-21228]:Block[21191-21228]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21205-21218]:ReturnStatement[21205-21218]"
  }, {
    "left" : "if (quoteMode != other.quoteMode)",
    "right" : "if (quoteMode != other.quoteMode)",
    "info" : "IfStatement[21237-21308]:IfStatement[21237-21308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21271-21308]:Block[21271-21308]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21285-21298]:ReturnStatement[21285-21298]"
  }, {
    "left" : "if (quoteCharacter == null)",
    "right" : "if (quoteCharacter == null)",
    "info" : "IfStatement[21317-21541]:IfStatement[21317-21541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21345-21448]:Block[21345-21448]"
  }, {
    "left" : "if (other.quoteCharacter != null)",
    "right" : "if (other.quoteCharacter != null)",
    "info" : "IfStatement[21359-21438]:IfStatement[21359-21438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21393-21438]:Block[21393-21438]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21411-21424]:ReturnStatement[21411-21424]"
  }, {
    "left" : "if (!quoteCharacter.equals(other.quoteCharacter))",
    "right" : "if (!quoteCharacter.equals(other.quoteCharacter))",
    "info" : "IfStatement[21454-21541]:IfStatement[21454-21541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21504-21541]:Block[21504-21541]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21518-21531]:ReturnStatement[21518-21531]"
  }, {
    "left" : "if (commentMarker == null)",
    "right" : "if (commentMarker == null)",
    "info" : "IfStatement[21550-21770]:IfStatement[21550-21770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21577-21679]:Block[21577-21679]"
  }, {
    "left" : "if (other.commentMarker != null)",
    "right" : "if (other.commentMarker != null)",
    "info" : "IfStatement[21591-21669]:IfStatement[21591-21669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21624-21669]:Block[21624-21669]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21642-21655]:ReturnStatement[21642-21655]"
  }, {
    "left" : "if (!commentMarker.equals(other.commentMarker))",
    "right" : "if (!commentMarker.equals(other.commentMarker))",
    "info" : "IfStatement[21685-21770]:IfStatement[21685-21770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21733-21770]:Block[21733-21770]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21747-21760]:ReturnStatement[21747-21760]"
  }, {
    "left" : "if (escapeCharacter == null)",
    "right" : "if (escapeCharacter == null)",
    "info" : "IfStatement[21779-22007]:IfStatement[21779-22007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21808-21912]:Block[21808-21912]"
  }, {
    "left" : "if (other.escapeCharacter != null)",
    "right" : "if (other.escapeCharacter != null)",
    "info" : "IfStatement[21822-21902]:IfStatement[21822-21902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21857-21902]:Block[21857-21902]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21875-21888]:ReturnStatement[21875-21888]"
  }, {
    "left" : "if (!escapeCharacter.equals(other.escapeCharacter))",
    "right" : "if (!escapeCharacter.equals(other.escapeCharacter))",
    "info" : "IfStatement[21918-22007]:IfStatement[21918-22007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21970-22007]:Block[21970-22007]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21984-21997]:ReturnStatement[21984-21997]"
  }, {
    "left" : "if (nullString == null)",
    "right" : "if (nullString == null)",
    "info" : "IfStatement[22016-22224]:IfStatement[22016-22224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22040-22139]:Block[22040-22139]"
  }, {
    "left" : "if (other.nullString != null)",
    "right" : "if (other.nullString != null)",
    "info" : "IfStatement[22054-22129]:IfStatement[22054-22129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22084-22129]:Block[22084-22129]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22102-22115]:ReturnStatement[22102-22115]"
  }, {
    "left" : "if (!nullString.equals(other.nullString))",
    "right" : "if (!nullString.equals(other.nullString))",
    "info" : "IfStatement[22145-22224]:IfStatement[22145-22224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22187-22224]:Block[22187-22224]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22201-22214]:ReturnStatement[22201-22214]"
  }, {
    "left" : "if (!Arrays.equals(header, other.header))",
    "right" : "if (!Arrays.equals(header, other.header))",
    "info" : "IfStatement[22233-22312]:IfStatement[22233-22312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22275-22312]:Block[22275-22312]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22289-22302]:ReturnStatement[22289-22302]"
  }, {
    "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
    "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
    "info" : "IfStatement[22321-22420]:IfStatement[22321-22420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22383-22420]:Block[22383-22420]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22397-22410]:ReturnStatement[22397-22410]"
  }, {
    "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
    "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
    "info" : "IfStatement[22429-22514]:IfStatement[22429-22514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22477-22514]:Block[22477-22514]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22491-22504]:ReturnStatement[22491-22504]"
  }, {
    "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
    "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
    "info" : "IfStatement[22523-22608]:IfStatement[22523-22608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22571-22608]:Block[22571-22608]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22585-22598]:ReturnStatement[22585-22598]"
  }, {
    "left" : "if (recordSeparator == null)",
    "right" : "if (recordSeparator == null)",
    "info" : "IfStatement[22617-22845]:IfStatement[22617-22845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22646-22750]:Block[22646-22750]"
  }, {
    "left" : "if (other.recordSeparator != null)",
    "right" : "if (other.recordSeparator != null)",
    "info" : "IfStatement[22660-22740]:IfStatement[22660-22740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22695-22740]:Block[22695-22740]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22713-22726]:ReturnStatement[22713-22726]"
  }, {
    "left" : "if (!recordSeparator.equals(other.recordSeparator))",
    "right" : "if (!recordSeparator.equals(other.recordSeparator))",
    "info" : "IfStatement[22756-22845]:IfStatement[22756-22845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22808-22845]:Block[22808-22845]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22822-22835]:ReturnStatement[22822-22835]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[22854-22866]:ReturnStatement[22854-22866]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23034-23040]:Modifier[23034-23040]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[23041-23047]:SimpleType[23041-23047]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[23048-23054]:SimpleName[23048-23054]"
  }, {
    "left" : "final Object... values",
    "right" : "final Object... values",
    "info" : "SingleVariableDeclaration[23055-23077]:SingleVariableDeclaration[23055-23077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23079-23467]:Block[23079-23467]"
  }, {
    "left" : "final StringWriter out = new StringWriter();",
    "right" : "final StringWriter out = new StringWriter();",
    "info" : "VariableDeclarationStatement[23089-23133]:VariableDeclarationStatement[23089-23133]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[23142-23461]:TryStatement[23142-23461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23204-23301]:Block[23204-23301]"
  }, {
    "left" : "csvPrinter.printRecord(values);",
    "right" : "csvPrinter.printRecord(values);",
    "info" : "ExpressionStatement[23218-23249]:ExpressionStatement[23218-23249]"
  }, {
    "left" : "return out.toString().trim();",
    "right" : "return out.toString().trim();",
    "info" : "ReturnStatement[23262-23291]:ReturnStatement[23262-23291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23330-23461]:Block[23330-23461]"
  }, {
    "left" : "throw new IllegalStateException(e);",
    "right" : "throw new IllegalStateException(e);",
    "info" : "ThrowStatement[23416-23451]:ThrowStatement[23416-23451]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23753-23759]:Modifier[23753-23759]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23760-23767]:PrimitiveType[23760-23767]"
  }, {
    "left" : "getAllowMissingColumnNames",
    "right" : "getAllowMissingColumnNames",
    "info" : "SimpleName[23768-23794]:SimpleName[23768-23794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23797-23844]:Block[23797-23844]"
  }, {
    "left" : "return allowMissingColumnNames;",
    "right" : "return allowMissingColumnNames;",
    "info" : "ReturnStatement[23807-23838]:ReturnStatement[23807-23838]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24000-24006]:Modifier[24000-24006]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[24007-24016]:SimpleType[24007-24016]"
  }, {
    "left" : "getCommentMarker",
    "right" : "getCommentMarker",
    "info" : "SimpleName[24017-24033]:SimpleName[24017-24033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24036-24073]:Block[24036-24073]"
  }, {
    "left" : "return commentMarker;",
    "right" : "return commentMarker;",
    "info" : "ReturnStatement[24046-24067]:ReturnStatement[24046-24067]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24222-24228]:Modifier[24222-24228]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[24229-24233]:PrimitiveType[24229-24233]"
  }, {
    "left" : "getDelimiter",
    "right" : "getDelimiter",
    "info" : "SimpleName[24234-24246]:SimpleName[24234-24246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24249-24282]:Block[24249-24282]"
  }, {
    "left" : "return delimiter;",
    "right" : "return delimiter;",
    "info" : "ReturnStatement[24259-24276]:ReturnStatement[24259-24276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24405-24411]:Modifier[24405-24411]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[24412-24421]:SimpleType[24412-24421]"
  }, {
    "left" : "getEscapeCharacter",
    "right" : "getEscapeCharacter",
    "info" : "SimpleName[24422-24440]:SimpleName[24422-24440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24443-24482]:Block[24443-24482]"
  }, {
    "left" : "return escapeCharacter;",
    "right" : "return escapeCharacter;",
    "info" : "ReturnStatement[24453-24476]:ReturnStatement[24453-24476]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24667-24673]:Modifier[24667-24673]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[24674-24682]:ArrayType[24674-24682]"
  }, {
    "left" : "getHeader",
    "right" : "getHeader",
    "info" : "SimpleName[24683-24692]:SimpleName[24683-24692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24695-24757]:Block[24695-24757]"
  }, {
    "left" : "return header != null ? header.clone() : null;",
    "right" : "return header != null ? header.clone() : null;",
    "info" : "ReturnStatement[24705-24751]:ReturnStatement[24705-24751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24914-24920]:Modifier[24914-24920]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[24921-24929]:ArrayType[24921-24929]"
  }, {
    "left" : "getHeaderComments",
    "right" : "getHeaderComments",
    "info" : "SimpleName[24930-24947]:SimpleName[24930-24947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24950-25028]:Block[24950-25028]"
  }, {
    "left" : "return headerComments != null ? headerComments.clone() : null;",
    "right" : "return headerComments != null ? headerComments.clone() : null;",
    "info" : "ReturnStatement[24960-25022]:ReturnStatement[24960-25022]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25282-25288]:Modifier[25282-25288]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25289-25296]:PrimitiveType[25289-25296]"
  }, {
    "left" : "getIgnoreEmptyLines",
    "right" : "getIgnoreEmptyLines",
    "info" : "SimpleName[25297-25316]:SimpleName[25297-25316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25319-25359]:Block[25319-25359]"
  }, {
    "left" : "return ignoreEmptyLines;",
    "right" : "return ignoreEmptyLines;",
    "info" : "ReturnStatement[25329-25353]:ReturnStatement[25329-25353]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25581-25587]:Modifier[25581-25587]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25588-25595]:PrimitiveType[25588-25595]"
  }, {
    "left" : "getIgnoreHeaderCase",
    "right" : "getIgnoreHeaderCase",
    "info" : "SimpleName[25596-25615]:SimpleName[25596-25615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25618-25658]:Block[25618-25658]"
  }, {
    "left" : "return ignoreHeaderCase;",
    "right" : "return ignoreHeaderCase;",
    "info" : "ReturnStatement[25628-25652]:ReturnStatement[25628-25652]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25886-25892]:Modifier[25886-25892]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25893-25900]:PrimitiveType[25893-25900]"
  }, {
    "left" : "getIgnoreSurroundingSpaces",
    "right" : "getIgnoreSurroundingSpaces",
    "info" : "SimpleName[25901-25927]:SimpleName[25901-25927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25930-25977]:Block[25930-25977]"
  }, {
    "left" : "return ignoreSurroundingSpaces;",
    "right" : "return ignoreSurroundingSpaces;",
    "info" : "ReturnStatement[25940-25971]:ReturnStatement[25940-25971]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26451-26457]:Modifier[26451-26457]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26458-26464]:SimpleType[26458-26464]"
  }, {
    "left" : "getNullString",
    "right" : "getNullString",
    "info" : "SimpleName[26465-26478]:SimpleName[26465-26478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26481-26515]:Block[26481-26515]"
  }, {
    "left" : "return nullString;",
    "right" : "return nullString;",
    "info" : "ReturnStatement[26491-26509]:ReturnStatement[26491-26509]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26691-26697]:Modifier[26691-26697]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[26698-26707]:SimpleType[26698-26707]"
  }, {
    "left" : "getQuoteCharacter",
    "right" : "getQuoteCharacter",
    "info" : "SimpleName[26708-26725]:SimpleName[26708-26725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26728-26766]:Block[26728-26766]"
  }, {
    "left" : "return quoteCharacter;",
    "right" : "return quoteCharacter;",
    "info" : "ReturnStatement[26738-26760]:ReturnStatement[26738-26760]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26874-26880]:Modifier[26874-26880]"
  }, {
    "left" : "QuoteMode",
    "right" : "QuoteMode",
    "info" : "SimpleType[26881-26890]:SimpleType[26881-26890]"
  }, {
    "left" : "getQuoteMode",
    "right" : "getQuoteMode",
    "info" : "SimpleName[26891-26903]:SimpleName[26891-26903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26906-26939]:Block[26906-26939]"
  }, {
    "left" : "return quoteMode;",
    "right" : "return quoteMode;",
    "info" : "ReturnStatement[26916-26933]:ReturnStatement[26916-26933]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27067-27073]:Modifier[27067-27073]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27074-27080]:SimpleType[27074-27080]"
  }, {
    "left" : "getRecordSeparator",
    "right" : "getRecordSeparator",
    "info" : "SimpleName[27081-27099]:SimpleName[27081-27099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27102-27141]:Block[27102-27141]"
  }, {
    "left" : "return recordSeparator;",
    "right" : "return recordSeparator;",
    "info" : "ReturnStatement[27112-27135]:ReturnStatement[27112-27135]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27270-27276]:Modifier[27270-27276]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27277-27284]:PrimitiveType[27277-27284]"
  }, {
    "left" : "getSkipHeaderRecord",
    "right" : "getSkipHeaderRecord",
    "info" : "SimpleName[27285-27304]:SimpleName[27285-27304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27307-27347]:Block[27307-27347]"
  }, {
    "left" : "return skipHeaderRecord;",
    "right" : "return skipHeaderRecord;",
    "info" : "ReturnStatement[27317-27341]:ReturnStatement[27317-27341]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27498-27504]:Modifier[27498-27504]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27505-27512]:PrimitiveType[27505-27512]"
  }, {
    "left" : "getTrailingDelimiter",
    "right" : "getTrailingDelimiter",
    "info" : "SimpleName[27513-27533]:SimpleName[27513-27533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27536-27577]:Block[27536-27577]"
  }, {
    "left" : "return trailingDelimiter;",
    "right" : "return trailingDelimiter;",
    "info" : "ReturnStatement[27546-27571]:ReturnStatement[27546-27571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27726-27732]:Modifier[27726-27732]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27733-27740]:PrimitiveType[27733-27740]"
  }, {
    "left" : "getTrim",
    "right" : "getTrim",
    "info" : "SimpleName[27741-27748]:SimpleName[27741-27748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27751-27779]:Block[27751-27779]"
  }, {
    "left" : "return trim;",
    "right" : "return trim;",
    "info" : "ReturnStatement[27761-27773]:ReturnStatement[27761-27773]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27910-27916]:Modifier[27910-27916]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27917-27924]:PrimitiveType[27917-27924]"
  }, {
    "left" : "getAutoFlush",
    "right" : "getAutoFlush",
    "info" : "SimpleName[27925-27937]:SimpleName[27925-27937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27940-27973]:Block[27940-27973]"
  }, {
    "left" : "return autoFlush;",
    "right" : "return autoFlush;",
    "info" : "ReturnStatement[27950-27967]:ReturnStatement[27950-27967]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27979-27988]:MarkerAnnotation[27979-27988]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27993-27999]:Modifier[27993-27999]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[28000-28003]:PrimitiveType[28000-28003]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[28004-28012]:SimpleName[28004-28012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28015-29031]:Block[28015-29031]"
  }, {
    "left" : "final int prime = 31;",
    "right" : "final int prime = 31;",
    "info" : "VariableDeclarationStatement[28025-28046]:VariableDeclarationStatement[28025-28046]"
  }, {
    "left" : "int result = 1;",
    "right" : "int result = 1;",
    "info" : "VariableDeclarationStatement[28055-28070]:VariableDeclarationStatement[28055-28070]"
  }, {
    "left" : "result = prime * result + delimiter;",
    "right" : "result = prime * result + delimiter;",
    "info" : "ExpressionStatement[28080-28116]:ExpressionStatement[28080-28116]"
  }, {
    "left" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
    "right" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
    "info" : "ExpressionStatement[28125-28200]:ExpressionStatement[28125-28200]"
  }, {
    "left" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
    "right" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
    "info" : "ExpressionStatement[28209-28294]:ExpressionStatement[28209-28294]"
  }, {
    "left" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
    "right" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
    "info" : "ExpressionStatement[28303-28386]:ExpressionStatement[28303-28386]"
  }, {
    "left" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
    "right" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
    "info" : "ExpressionStatement[28395-28482]:ExpressionStatement[28395-28482]"
  }, {
    "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
    "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
    "info" : "ExpressionStatement[28491-28568]:ExpressionStatement[28491-28568]"
  }, {
    "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
    "info" : "ExpressionStatement[28577-28643]:ExpressionStatement[28577-28643]"
  }, {
    "left" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
    "info" : "ExpressionStatement[28652-28711]:ExpressionStatement[28652-28711]"
  }, {
    "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
    "info" : "ExpressionStatement[28720-28779]:ExpressionStatement[28720-28779]"
  }, {
    "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
    "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
    "info" : "ExpressionStatement[28788-28847]:ExpressionStatement[28788-28847]"
  }, {
    "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
    "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
    "info" : "ExpressionStatement[28856-28943]:ExpressionStatement[28856-28943]"
  }, {
    "left" : "result = prime * result + Arrays.hashCode(header);",
    "right" : "result = prime * result + Arrays.hashCode(header);",
    "info" : "ExpressionStatement[28952-29002]:ExpressionStatement[28952-29002]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[29011-29025]:ReturnStatement[29011-29025]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29303-29309]:Modifier[29303-29309]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29310-29317]:PrimitiveType[29310-29317]"
  }, {
    "left" : "isCommentMarkerSet",
    "right" : "isCommentMarkerSet",
    "info" : "SimpleName[29318-29336]:SimpleName[29318-29336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29339-29384]:Block[29339-29384]"
  }, {
    "left" : "return commentMarker != null;",
    "right" : "return commentMarker != null;",
    "info" : "ReturnStatement[29349-29378]:ReturnStatement[29349-29378]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29517-29523]:Modifier[29517-29523]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29524-29531]:PrimitiveType[29524-29531]"
  }, {
    "left" : "isEscapeCharacterSet",
    "right" : "isEscapeCharacterSet",
    "info" : "SimpleName[29532-29552]:SimpleName[29532-29552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29555-29602]:Block[29555-29602]"
  }, {
    "left" : "return escapeCharacter != null;",
    "right" : "return escapeCharacter != null;",
    "info" : "ReturnStatement[29565-29596]:ReturnStatement[29565-29596]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29740-29746]:Modifier[29740-29746]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29747-29754]:PrimitiveType[29747-29754]"
  }, {
    "left" : "isNullStringSet",
    "right" : "isNullStringSet",
    "info" : "SimpleName[29755-29770]:SimpleName[29755-29770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29773-29815]:Block[29773-29815]"
  }, {
    "left" : "return nullString != null;",
    "right" : "return nullString != null;",
    "info" : "ReturnStatement[29783-29809]:ReturnStatement[29783-29809]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29951-29957]:Modifier[29951-29957]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29958-29965]:PrimitiveType[29958-29965]"
  }, {
    "left" : "isQuoteCharacterSet",
    "right" : "isQuoteCharacterSet",
    "info" : "SimpleName[29966-29985]:SimpleName[29966-29985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29988-30034]:Block[29988-30034]"
  }, {
    "left" : "return quoteCharacter != null;",
    "right" : "return quoteCharacter != null;",
    "info" : "ReturnStatement[29998-30028]:ReturnStatement[29998-30028]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30383-30389]:Modifier[30383-30389]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[30390-30399]:SimpleType[30390-30399]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[30400-30405]:SimpleName[30400-30405]"
  }, {
    "left" : "final Reader in",
    "right" : "final Reader in",
    "info" : "SingleVariableDeclaration[30406-30421]:SingleVariableDeclaration[30406-30421]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[30430-30441]:SimpleType[30430-30441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30442-30489]:Block[30442-30489]"
  }, {
    "left" : "return new CSVParser(in, this);",
    "right" : "return new CSVParser(in, this);",
    "info" : "ReturnStatement[30452-30483]:ReturnStatement[30452-30483]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30805-30811]:Modifier[30805-30811]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[30812-30822]:SimpleType[30812-30822]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[30823-30828]:SimpleName[30823-30828]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[30829-30849]:SingleVariableDeclaration[30829-30849]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[30858-30869]:SimpleType[30858-30869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30870-30919]:Block[30870-30919]"
  }, {
    "left" : "return new CSVPrinter(out, this);",
    "right" : "return new CSVPrinter(out, this);",
    "info" : "ReturnStatement[30880-30913]:ReturnStatement[30880-30913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31216-31222]:Modifier[31216-31222]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[31223-31233]:SimpleType[31223-31233]"
  }, {
    "left" : "printer",
    "right" : "printer",
    "info" : "SimpleName[31234-31241]:SimpleName[31234-31241]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[31251-31262]:SimpleType[31251-31262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31263-31319]:Block[31263-31319]"
  }, {
    "left" : "return new CSVPrinter(System.out, this);",
    "right" : "return new CSVPrinter(System.out, this);",
    "info" : "ReturnStatement[31273-31313]:ReturnStatement[31273-31313]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[31704-31733]:SingleMemberAnnotation[31704-31733]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31738-31744]:Modifier[31738-31744]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[31745-31755]:SimpleType[31745-31755]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[31756-31761]:SimpleName[31756-31761]"
  }, {
    "left" : "final File out",
    "right" : "final File out",
    "info" : "SingleVariableDeclaration[31762-31776]:SingleVariableDeclaration[31762-31776]"
  }, {
    "left" : "final Charset charset",
    "right" : "final Charset charset",
    "info" : "SingleVariableDeclaration[31778-31799]:SingleVariableDeclaration[31778-31799]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[31808-31819]:SimpleType[31808-31819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31820-31985]:Block[31820-31985]"
  }, {
    "left" : "return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
    "right" : "return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);",
    "info" : "ReturnStatement[31891-31979]:ReturnStatement[31891-31979]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32370-32376]:Modifier[32370-32376]"
  }, {
    "left" : "CSVPrinter",
    "right" : "CSVPrinter",
    "info" : "SimpleType[32377-32387]:SimpleType[32377-32387]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[32388-32393]:SimpleName[32388-32393]"
  }, {
    "left" : "final Path out",
    "right" : "final Path out",
    "info" : "SingleVariableDeclaration[32394-32408]:SingleVariableDeclaration[32394-32408]"
  }, {
    "left" : "final Charset charset",
    "right" : "final Charset charset",
    "info" : "SingleVariableDeclaration[32410-32431]:SingleVariableDeclaration[32410-32431]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[32440-32451]:SimpleType[32440-32451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32452-32520]:Block[32452-32520]"
  }, {
    "left" : "return print(Files.newBufferedWriter(out, charset));",
    "right" : "return print(Files.newBufferedWriter(out, charset));",
    "info" : "ReturnStatement[32462-32514]:ReturnStatement[32462-32514]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33009-33015]:Modifier[33009-33015]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33016-33020]:PrimitiveType[33016-33020]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[33021-33026]:SimpleName[33021-33026]"
  }, {
    "left" : "final Object value",
    "right" : "final Object value",
    "info" : "SingleVariableDeclaration[33027-33045]:SingleVariableDeclaration[33027-33045]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[33047-33067]:SingleVariableDeclaration[33047-33067]"
  }, {
    "left" : "final boolean newRecord",
    "right" : "final boolean newRecord",
    "info" : "SingleVariableDeclaration[33069-33092]:SingleVariableDeclaration[33069-33092]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[33101-33112]:SimpleType[33101-33112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33113-33987]:Block[33113-33987]"
  }, {
    "left" : "CharSequence charSequence;",
    "right" : "CharSequence charSequence;",
    "info" : "VariableDeclarationStatement[33253-33279]:VariableDeclarationStatement[33253-33279]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[33288-33828]:IfStatement[33288-33828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33307-33711]:Block[33307-33711]"
  }, {
    "left" : "if (null == nullString)",
    "right" : "if (null == nullString)",
    "info" : "IfStatement[33382-33701]:IfStatement[33382-33701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33406-33459]:Block[33406-33459]"
  }, {
    "left" : "charSequence = EMPTY;",
    "right" : "charSequence = EMPTY;",
    "info" : "ExpressionStatement[33424-33445]:ExpressionStatement[33424-33445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33465-33701]:Block[33465-33701]"
  }, {
    "left" : "if (QuoteMode.ALL == quoteMode)",
    "right" : "if (QuoteMode.ALL == quoteMode)",
    "info" : "IfStatement[33483-33687]:IfStatement[33483-33687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33515-33615]:Block[33515-33615]"
  }, {
    "left" : "charSequence = quoteCharacter + nullString + quoteCharacter;",
    "right" : "charSequence = quoteCharacter + nullString + quoteCharacter;",
    "info" : "ExpressionStatement[33537-33597]:ExpressionStatement[33537-33597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33621-33687]:Block[33621-33687]"
  }, {
    "left" : "charSequence = nullString;",
    "right" : "charSequence = nullString;",
    "info" : "ExpressionStatement[33643-33669]:ExpressionStatement[33643-33669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33717-33828]:Block[33717-33828]"
  }, {
    "left" : "charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
    "right" : "charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();",
    "info" : "ExpressionStatement[33731-33818]:ExpressionStatement[33731-33818]"
  }, {
    "left" : "charSequence = getTrim() ? trim(charSequence) : charSequence;",
    "right" : "charSequence = getTrim() ? trim(charSequence) : charSequence;",
    "info" : "ExpressionStatement[33837-33898]:ExpressionStatement[33837-33898]"
  }, {
    "left" : "this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
    "right" : "this.print(value, charSequence, 0, charSequence.length(), out, newRecord);",
    "info" : "ExpressionStatement[33907-33981]:ExpressionStatement[33907-33981]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33993-34000]:Modifier[33993-34000]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34001-34005]:PrimitiveType[34001-34005]"
  }, {
    "left" : "print",
    "right" : "print",
    "info" : "SimpleName[34006-34011]:SimpleName[34006-34011]"
  }, {
    "left" : "final Object object",
    "right" : "final Object object",
    "info" : "SingleVariableDeclaration[34012-34031]:SingleVariableDeclaration[34012-34031]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[34033-34057]:SingleVariableDeclaration[34033-34057]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[34059-34075]:SingleVariableDeclaration[34059-34075]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[34077-34090]:SingleVariableDeclaration[34077-34090]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[34104-34124]:SingleVariableDeclaration[34104-34124]"
  }, {
    "left" : "final boolean newRecord",
    "right" : "final boolean newRecord",
    "info" : "SingleVariableDeclaration[34126-34149]:SingleVariableDeclaration[34126-34149]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[34158-34169]:SimpleType[34158-34169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34170-34676]:Block[34170-34676]"
  }, {
    "left" : "if (!newRecord)",
    "right" : "if (!newRecord)",
    "info" : "IfStatement[34180-34247]:IfStatement[34180-34247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34196-34247]:Block[34196-34247]"
  }, {
    "left" : "out.append(getDelimiter());",
    "right" : "out.append(getDelimiter());",
    "info" : "ExpressionStatement[34210-34237]:ExpressionStatement[34210-34237]"
  }, {
    "left" : "if (object == null)",
    "right" : "if (object == null)",
    "info" : "IfStatement[34256-34670]:IfStatement[34256-34670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34276-34318]:Block[34276-34318]"
  }, {
    "left" : "out.append(value);",
    "right" : "out.append(value);",
    "info" : "ExpressionStatement[34290-34308]:ExpressionStatement[34290-34308]"
  }, {
    "left" : "if (isQuoteCharacterSet())",
    "right" : "if (isQuoteCharacterSet())",
    "info" : "IfStatement[34324-34670]:IfStatement[34324-34670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34351-34502]:Block[34351-34502]"
  }, {
    "left" : "printAndQuote(object, value, offset, len, out, newRecord);",
    "right" : "printAndQuote(object, value, offset, len, out, newRecord);",
    "info" : "ExpressionStatement[34434-34492]:ExpressionStatement[34434-34492]"
  }, {
    "left" : "if (isEscapeCharacterSet())",
    "right" : "if (isEscapeCharacterSet())",
    "info" : "IfStatement[34508-34670]:IfStatement[34508-34670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34536-34600]:Block[34536-34600]"
  }, {
    "left" : "printAndEscape(value, offset, len, out);",
    "right" : "printAndEscape(value, offset, len, out);",
    "info" : "ExpressionStatement[34550-34590]:ExpressionStatement[34550-34590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34606-34670]:Block[34606-34670]"
  }, {
    "left" : "out.append(value, offset, offset + len);",
    "right" : "out.append(value, offset, offset + len);",
    "info" : "ExpressionStatement[34620-34660]:ExpressionStatement[34620-34660]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34782-34789]:Modifier[34782-34789]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34790-34794]:PrimitiveType[34790-34794]"
  }, {
    "left" : "printAndEscape",
    "right" : "printAndEscape",
    "info" : "SimpleName[34795-34809]:SimpleName[34795-34809]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[34810-34834]:SingleVariableDeclaration[34810-34834]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[34836-34852]:SingleVariableDeclaration[34836-34852]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[34854-34867]:SingleVariableDeclaration[34854-34867]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[34869-34889]:SingleVariableDeclaration[34869-34889]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[34910-34921]:SimpleType[34910-34921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34922-35869]:Block[34922-35869]"
  }, {
    "left" : "int start = offset;",
    "right" : "int start = offset;",
    "info" : "VariableDeclarationStatement[34932-34951]:VariableDeclarationStatement[34932-34951]"
  }, {
    "left" : "int pos = offset;",
    "right" : "int pos = offset;",
    "info" : "VariableDeclarationStatement[34960-34977]:VariableDeclarationStatement[34960-34977]"
  }, {
    "left" : "final int end = offset + len;",
    "right" : "final int end = offset + len;",
    "info" : "VariableDeclarationStatement[34986-35015]:VariableDeclarationStatement[34986-35015]"
  }, {
    "left" : "final char delim = getDelimiter();",
    "right" : "final char delim = getDelimiter();",
    "info" : "VariableDeclarationStatement[35025-35059]:VariableDeclarationStatement[35025-35059]"
  }, {
    "left" : "final char escape = getEscapeCharacter().charValue();",
    "right" : "final char escape = getEscapeCharacter().charValue();",
    "info" : "VariableDeclarationStatement[35068-35121]:VariableDeclarationStatement[35068-35121]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[35131-35752]:WhileStatement[35131-35752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35149-35752]:Block[35149-35752]"
  }, {
    "left" : "char c = value.charAt(pos);",
    "right" : "char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[35163-35190]:VariableDeclarationStatement[35163-35190]"
  }, {
    "left" : "if (c == CR || c == LF || c == delim || c == escape)",
    "right" : "if (c == CR || c == LF || c == delim || c == escape)",
    "info" : "IfStatement[35203-35722]:IfStatement[35203-35722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35256-35722]:Block[35256-35722]"
  }, {
    "left" : "if (pos > start)",
    "right" : "if (pos > start)",
    "info" : "IfStatement[35330-35417]:IfStatement[35330-35417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35347-35417]:Block[35347-35417]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[35369-35399]:ExpressionStatement[35369-35399]"
  }, {
    "left" : "if (c == LF)",
    "right" : "if (c == LF)",
    "info" : "IfStatement[35434-35562]:IfStatement[35434-35562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35447-35495]:Block[35447-35495]"
  }, {
    "left" : "c = 'n';",
    "right" : "c = 'n';",
    "info" : "ExpressionStatement[35469-35477]:ExpressionStatement[35469-35477]"
  }, {
    "left" : "if (c == CR)",
    "right" : "if (c == CR)",
    "info" : "IfStatement[35501-35562]:IfStatement[35501-35562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35514-35562]:Block[35514-35562]"
  }, {
    "left" : "c = 'r';",
    "right" : "c = 'r';",
    "info" : "ExpressionStatement[35536-35544]:ExpressionStatement[35536-35544]"
  }, {
    "left" : "out.append(escape);",
    "right" : "out.append(escape);",
    "info" : "ExpressionStatement[35580-35599]:ExpressionStatement[35580-35599]"
  }, {
    "left" : "out.append(c);",
    "right" : "out.append(c);",
    "info" : "ExpressionStatement[35616-35630]:ExpressionStatement[35616-35630]"
  }, {
    "left" : "start = pos + 1;",
    "right" : "start = pos + 1;",
    "info" : "ExpressionStatement[35648-35664]:ExpressionStatement[35648-35664]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[35736-35742]:ExpressionStatement[35736-35742]"
  }, {
    "left" : "if (pos > start)",
    "right" : "if (pos > start)",
    "info" : "IfStatement[35792-35863]:IfStatement[35792-35863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35809-35863]:Block[35809-35863]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[35823-35853]:ExpressionStatement[35823-35853]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36035-36042]:Modifier[36035-36042]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36043-36047]:PrimitiveType[36043-36047]"
  }, {
    "left" : "printAndQuote",
    "right" : "printAndQuote",
    "info" : "SimpleName[36048-36061]:SimpleName[36048-36061]"
  }, {
    "left" : "final Object object",
    "right" : "final Object object",
    "info" : "SingleVariableDeclaration[36062-36081]:SingleVariableDeclaration[36062-36081]"
  }, {
    "left" : "final CharSequence value",
    "right" : "final CharSequence value",
    "info" : "SingleVariableDeclaration[36083-36107]:SingleVariableDeclaration[36083-36107]"
  }, {
    "left" : "final int offset",
    "right" : "final int offset",
    "info" : "SingleVariableDeclaration[36109-36125]:SingleVariableDeclaration[36109-36125]"
  }, {
    "left" : "final int len",
    "right" : "final int len",
    "info" : "SingleVariableDeclaration[36127-36140]:SingleVariableDeclaration[36127-36140]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[36154-36174]:SingleVariableDeclaration[36154-36174]"
  }, {
    "left" : "final boolean newRecord",
    "right" : "final boolean newRecord",
    "info" : "SingleVariableDeclaration[36176-36199]:SingleVariableDeclaration[36176-36199]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36208-36219]:SimpleType[36208-36219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36220-40051]:Block[36220-39903]"
  }, {
    "left" : "boolean quote = false;",
    "right" : "boolean quote = false;",
    "info" : "VariableDeclarationStatement[36230-36252]:VariableDeclarationStatement[36230-36252]"
  }, {
    "left" : "int start = offset;",
    "right" : "int start = offset;",
    "info" : "VariableDeclarationStatement[36261-36280]:VariableDeclarationStatement[36261-36280]"
  }, {
    "left" : "int pos = offset;",
    "right" : "int pos = offset;",
    "info" : "VariableDeclarationStatement[36289-36306]:VariableDeclarationStatement[36289-36306]"
  }, {
    "left" : "final int end = offset + len;",
    "right" : "final int end = offset + len;",
    "info" : "VariableDeclarationStatement[36315-36344]:VariableDeclarationStatement[36315-36344]"
  }, {
    "left" : "final char delimChar = getDelimiter();",
    "right" : "final char delimChar = getDelimiter();",
    "info" : "VariableDeclarationStatement[36354-36392]:VariableDeclarationStatement[36354-36392]"
  }, {
    "left" : "final char quoteChar = getQuoteCharacter().charValue();",
    "right" : "final char quoteChar = getQuoteCharacter().charValue();",
    "info" : "VariableDeclarationStatement[36401-36456]:VariableDeclarationStatement[36401-36456]"
  }, {
    "left" : "QuoteMode quoteModePolicy = getQuoteMode();",
    "right" : "QuoteMode quoteModePolicy = getQuoteMode();",
    "info" : "VariableDeclarationStatement[36466-36509]:VariableDeclarationStatement[36466-36509]"
  }, {
    "left" : "if (quoteModePolicy == null)",
    "right" : "if (quoteModePolicy == null)",
    "info" : "IfStatement[36518-36607]:IfStatement[36518-36607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36547-36607]:Block[36547-36607]"
  }, {
    "left" : "quoteModePolicy = QuoteMode.MINIMAL;",
    "right" : "quoteModePolicy = QuoteMode.MINIMAL;",
    "info" : "ExpressionStatement[36561-36597]:ExpressionStatement[36561-36597]"
  }, {
    "left" : "switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                    quote = true;\n                } else if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }",
    "right" : "switch (quoteModePolicy) {\n        case ALL:\n        case ALL_NON_NULL:\n            quote = true;\n            break;\n        case NON_NUMERIC:\n            quote = !(object instanceof Number);\n            break;\n        case NONE:\n            // Use the existing escaping code\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len <= 0) {\n                // always quote an empty token that is the first\n                // on the line, as it may be the only thing on the\n                // line. If it were not quoted in that case,\n                // an empty line has no tokens.\n                if (newRecord) {\n                    quote = true;\n                }\n            } else {\n                char c = value.charAt(pos);\n\n                if (c <= COMMENT) {\n                    // Some other chars at the start of a value caused the parser to fail, so for now\n                    // encapsulate if we start in anything less than '#'. We are being conservative\n                    // by including the default comment char too.\n                    quote = true;\n                } else {\n                    while (pos < end) {\n                        c = value.charAt(pos);\n                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                            quote = true;\n                            break;\n                        }\n                        pos++;\n                    }\n\n                    if (!quote) {\n                        pos = end - 1;\n                        c = value.charAt(pos);\n                        // Some other chars at the end caused the parser to fail, so for now\n                        // encapsulate if we end in anything less than ' '\n                        if (c <= SP) {\n                            quote = true;\n                        }\n                    }\n                }\n            }\n\n            if (!quote) {\n                // no encapsulation needed - write out the original value\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n        }",
    "info" : "SwitchStatement[36616-39019]:SwitchStatement[36616-38871]"
  }, {
    "left" : "case ALL:",
    "right" : "case ALL:",
    "info" : "SwitchCase[36651-36660]:SwitchCase[36651-36660]"
  }, {
    "left" : "case ALL_NON_NULL:",
    "right" : "case ALL_NON_NULL:",
    "info" : "SwitchCase[36669-36687]:SwitchCase[36669-36687]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[36700-36713]:ExpressionStatement[36700-36713]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[36726-36732]:BreakStatement[36726-36732]"
  }, {
    "left" : "case NON_NUMERIC:",
    "right" : "case NON_NUMERIC:",
    "info" : "SwitchCase[36741-36758]:SwitchCase[36741-36758]"
  }, {
    "left" : "quote = !(object instanceof Number);",
    "right" : "quote = !(object instanceof Number);",
    "info" : "ExpressionStatement[36771-36807]:ExpressionStatement[36771-36807]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[36820-36826]:BreakStatement[36820-36826]"
  }, {
    "left" : "case NONE:",
    "right" : "case NONE:",
    "info" : "SwitchCase[36835-36845]:SwitchCase[36835-36845]"
  }, {
    "left" : "printAndEscape(value, offset, len, out);",
    "right" : "printAndEscape(value, offset, len, out);",
    "info" : "ExpressionStatement[36904-36944]:ExpressionStatement[36904-36944]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36957-36964]:ReturnStatement[36957-36964]"
  }, {
    "left" : "case MINIMAL:",
    "right" : "case MINIMAL:",
    "info" : "SwitchCase[36973-36986]:SwitchCase[36973-36986]"
  }, {
    "left" : "if (len <= 0)",
    "right" : "if (len <= 0)",
    "info" : "IfStatement[36999-38696]:IfStatement[36999-38548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37013-37354]:Block[37013-37354]"
  }, {
    "left" : "if (newRecord)",
    "right" : "if (newRecord)",
    "info" : "IfStatement[37272-37340]:IfStatement[37272-37340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37287-37340]:Block[37287-37340]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[37309-37322]:ExpressionStatement[37309-37322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37360-38696]:Block[37360-38548]"
  }, {
    "left" : "char c = value.charAt(pos);",
    "right" : "char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[37378-37405]:VariableDeclarationStatement[37378-37405]"
  }, {
    "left" : "if (c <= COMMENT)",
    "right" : "if (c <= COMMENT)",
    "info" : "IfStatement[37571-38682]:IfStatement[37423-38534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37589-37910]:Block[37441-37762]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[37879-37892]:ExpressionStatement[37731-37744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37916-38682]:Block[37768-38534]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[37938-38246]:WhileStatement[37790-38098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37956-38246]:Block[37808-38098]"
  }, {
    "left" : "c = value.charAt(pos);",
    "right" : "c = value.charAt(pos);",
    "info" : "ExpressionStatement[37982-38004]:ExpressionStatement[37834-37856]"
  }, {
    "left" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
    "right" : "if (c == LF || c == CR || c == quoteChar || c == delimChar)",
    "info" : "IfStatement[38029-38193]:IfStatement[37881-38045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38089-38193]:Block[37941-38045]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[38119-38132]:ExpressionStatement[37971-37984]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38161-38167]:BreakStatement[38013-38019]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[38218-38224]:ExpressionStatement[38070-38076]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[38268-38664]:IfStatement[38120-38516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38280-38664]:Block[38132-38516]"
  }, {
    "left" : "pos = end - 1;",
    "right" : "pos = end - 1;",
    "info" : "ExpressionStatement[38306-38320]:ExpressionStatement[38158-38172]"
  }, {
    "left" : "c = value.charAt(pos);",
    "right" : "c = value.charAt(pos);",
    "info" : "ExpressionStatement[38345-38367]:ExpressionStatement[38197-38219]"
  }, {
    "left" : "if (c <= SP)",
    "right" : "if (c <= SP)",
    "info" : "IfStatement[38560-38642]:IfStatement[38412-38494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38573-38642]:Block[38425-38494]"
  }, {
    "left" : "quote = true;",
    "right" : "quote = true;",
    "info" : "ExpressionStatement[38603-38616]:ExpressionStatement[38455-38468]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[38710-38882]:IfStatement[38562-38734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38722-38882]:Block[38574-38734]"
  }, {
    "left" : "out.append(value, start, end);",
    "right" : "out.append(value, start, end);",
    "info" : "ExpressionStatement[38814-38844]:ExpressionStatement[38666-38696]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[38861-38868]:ReturnStatement[38713-38720]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38895-38901]:BreakStatement[38747-38753]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[38910-38918]:SwitchCase[38762-38770]"
  }, {
    "left" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
    "right" : "throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);",
    "info" : "ThrowStatement[38931-39009]:ThrowStatement[38783-38861]"
  }, {
    "left" : "if (!quote)",
    "right" : "if (!quote)",
    "info" : "IfStatement[39029-39185]:IfStatement[38881-39037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39041-39185]:Block[38893-39037]"
  }, {
    "left" : "out.append(value, start, end);",
    "right" : "out.append(value, start, end);",
    "info" : "ExpressionStatement[39125-39155]:ExpressionStatement[38977-39007]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39168-39175]:ReturnStatement[39020-39027]"
  }, {
    "left" : "out.append(quoteChar);",
    "right" : "out.append(quoteChar);",
    "info" : "ExpressionStatement[39249-39271]:ExpressionStatement[39101-39123]"
  }, {
    "left" : "while (pos < end)",
    "right" : "while (pos < end)",
    "info" : "WhileStatement[39418-39940]:WhileStatement[39270-39792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39436-39940]:Block[39288-39792]"
  }, {
    "left" : "final char c = value.charAt(pos);",
    "right" : "final char c = value.charAt(pos);",
    "info" : "VariableDeclarationStatement[39450-39483]:VariableDeclarationStatement[39302-39335]"
  }, {
    "left" : "if (c == quoteChar)",
    "right" : "if (c == quoteChar)",
    "info" : "IfStatement[39496-39911]:IfStatement[39348-39763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39516-39911]:Block[39368-39763]"
  }, {
    "left" : "out.append(value, start, pos + 1);",
    "right" : "out.append(value, start, pos + 1);",
    "info" : "ExpressionStatement[39668-39702]:ExpressionStatement[39520-39554]"
  }, {
    "left" : "start = pos;",
    "right" : "start = pos;",
    "info" : "ExpressionStatement[39885-39897]:ExpressionStatement[39737-39749]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[39924-39930]:ExpressionStatement[39776-39782]"
  }, {
    "left" : "out.append(value, start, pos);",
    "right" : "out.append(value, start, pos);",
    "info" : "ExpressionStatement[39984-40014]:ExpressionStatement[39836-39866]"
  }, {
    "left" : "out.append(quoteChar);",
    "right" : "out.append(quoteChar);",
    "info" : "ExpressionStatement[40023-40045]:ExpressionStatement[39875-39897]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40308-40314]:Modifier[40160-40166]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40315-40319]:PrimitiveType[40167-40171]"
  }, {
    "left" : "println",
    "right" : "println",
    "info" : "SimpleName[40320-40327]:SimpleName[40172-40179]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[40328-40348]:SingleVariableDeclaration[40180-40200]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[40357-40368]:SimpleType[40209-40220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40369-40554]:Block[40221-40406]"
  }, {
    "left" : "if (getTrailingDelimiter())",
    "right" : "if (getTrailingDelimiter())",
    "info" : "IfStatement[40379-40458]:IfStatement[40231-40310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40407-40458]:Block[40259-40310]"
  }, {
    "left" : "out.append(getDelimiter());",
    "right" : "out.append(getDelimiter());",
    "info" : "ExpressionStatement[40421-40448]:ExpressionStatement[40273-40300]"
  }, {
    "left" : "if (recordSeparator != null)",
    "right" : "if (recordSeparator != null)",
    "info" : "IfStatement[40467-40548]:IfStatement[40319-40400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40496-40548]:Block[40348-40400]"
  }, {
    "left" : "out.append(recordSeparator);",
    "right" : "out.append(recordSeparator);",
    "info" : "ExpressionStatement[40510-40538]:ExpressionStatement[40362-40390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41190-41196]:Modifier[41042-41048]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41197-41201]:PrimitiveType[41049-41053]"
  }, {
    "left" : "printRecord",
    "right" : "printRecord",
    "info" : "SimpleName[41202-41213]:SimpleName[41054-41065]"
  }, {
    "left" : "final Appendable out",
    "right" : "final Appendable out",
    "info" : "SingleVariableDeclaration[41214-41234]:SingleVariableDeclaration[41066-41086]"
  }, {
    "left" : "final Object... values",
    "right" : "final Object... values",
    "info" : "SingleVariableDeclaration[41236-41258]:SingleVariableDeclaration[41088-41110]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[41267-41278]:SimpleType[41119-41130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41279-41411]:Block[41131-41263]"
  }, {
    "left" : "for (int i = 0; i < values.length; i++)",
    "right" : "for (int i = 0; i < values.length; i++)",
    "info" : "ForStatement[41289-41383]:ForStatement[41141-41235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41329-41383]:Block[41181-41235]"
  }, {
    "left" : "print(values[i], out, i == 0);",
    "right" : "print(values[i], out, i == 0);",
    "info" : "ExpressionStatement[41343-41373]:ExpressionStatement[41195-41225]"
  }, {
    "left" : "println(out);",
    "right" : "println(out);",
    "info" : "ExpressionStatement[41392-41405]:ExpressionStatement[41244-41257]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[41417-41426]:MarkerAnnotation[41269-41278]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41431-41437]:Modifier[41283-41289]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[41438-41444]:SimpleType[41290-41296]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[41445-41453]:SimpleName[41297-41305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41456-43010]:Block[41308-42862]"
  }, {
    "left" : "final StringBuilder sb = new StringBuilder();",
    "right" : "final StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[41466-41511]:VariableDeclarationStatement[41318-41363]"
  }, {
    "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
    "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
    "info" : "ExpressionStatement[41520-41575]:ExpressionStatement[41372-41427]"
  }, {
    "left" : "if (isEscapeCharacterSet())",
    "right" : "if (isEscapeCharacterSet())",
    "info" : "IfStatement[41584-41722]:IfStatement[41436-41574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41612-41722]:Block[41464-41574]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[41626-41641]:ExpressionStatement[41478-41493]"
  }, {
    "left" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
    "right" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
    "info" : "ExpressionStatement[41654-41712]:ExpressionStatement[41506-41564]"
  }, {
    "left" : "if (isQuoteCharacterSet())",
    "right" : "if (isQuoteCharacterSet())",
    "info" : "IfStatement[41731-41870]:IfStatement[41583-41722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41758-41870]:Block[41610-41722]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[41772-41787]:ExpressionStatement[41624-41639]"
  }, {
    "left" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
    "right" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
    "info" : "ExpressionStatement[41800-41860]:ExpressionStatement[41652-41712]"
  }, {
    "left" : "if (isCommentMarkerSet())",
    "right" : "if (isCommentMarkerSet())",
    "info" : "IfStatement[41879-42019]:IfStatement[41731-41871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41905-42019]:Block[41757-41871]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[41919-41934]:ExpressionStatement[41771-41786]"
  }, {
    "left" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
    "right" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
    "info" : "ExpressionStatement[41947-42009]:ExpressionStatement[41799-41861]"
  }, {
    "left" : "if (isNullStringSet())",
    "right" : "if (isNullStringSet())",
    "info" : "IfStatement[42028-42160]:IfStatement[41880-42012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42051-42160]:Block[41903-42012]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[42065-42080]:ExpressionStatement[41917-41932]"
  }, {
    "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
    "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
    "info" : "ExpressionStatement[42093-42150]:ExpressionStatement[41945-42002]"
  }, {
    "left" : "if (recordSeparator != null)",
    "right" : "if (recordSeparator != null)",
    "info" : "IfStatement[42169-42317]:IfStatement[42021-42169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42198-42317]:Block[42050-42169]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[42212-42227]:ExpressionStatement[42064-42079]"
  }, {
    "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
    "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
    "info" : "ExpressionStatement[42240-42307]:ExpressionStatement[42092-42159]"
  }, {
    "left" : "if (getIgnoreEmptyLines())",
    "right" : "if (getIgnoreEmptyLines())",
    "info" : "IfStatement[42326-42410]:IfStatement[42178-42262]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42353-42410]:Block[42205-42262]"
  }, {
    "left" : "sb.append(\" EmptyLines:ignored\");",
    "right" : "sb.append(\" EmptyLines:ignored\");",
    "info" : "ExpressionStatement[42367-42400]:ExpressionStatement[42219-42252]"
  }, {
    "left" : "if (getIgnoreSurroundingSpaces())",
    "right" : "if (getIgnoreSurroundingSpaces())",
    "info" : "IfStatement[42419-42517]:IfStatement[42271-42369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42453-42517]:Block[42305-42369]"
  }, {
    "left" : "sb.append(\" SurroundingSpaces:ignored\");",
    "right" : "sb.append(\" SurroundingSpaces:ignored\");",
    "info" : "ExpressionStatement[42467-42507]:ExpressionStatement[42319-42359]"
  }, {
    "left" : "if (getIgnoreHeaderCase())",
    "right" : "if (getIgnoreHeaderCase())",
    "info" : "IfStatement[42526-42616]:IfStatement[42378-42468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42553-42616]:Block[42405-42468]"
  }, {
    "left" : "sb.append(\" IgnoreHeaderCase:ignored\");",
    "right" : "sb.append(\" IgnoreHeaderCase:ignored\");",
    "info" : "ExpressionStatement[42567-42606]:ExpressionStatement[42419-42458]"
  }, {
    "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
    "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
    "info" : "ExpressionStatement[42625-42682]:ExpressionStatement[42477-42534]"
  }, {
    "left" : "if (headerComments != null)",
    "right" : "if (headerComments != null)",
    "info" : "IfStatement[42691-42840]:IfStatement[42543-42692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42719-42840]:Block[42571-42692]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[42733-42748]:ExpressionStatement[42585-42600]"
  }, {
    "left" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
    "right" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
    "info" : "ExpressionStatement[42761-42830]:ExpressionStatement[42613-42682]"
  }, {
    "left" : "if (header != null)",
    "right" : "if (header != null)",
    "info" : "IfStatement[42849-42974]:IfStatement[42701-42826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42869-42974]:Block[42721-42826]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[42883-42898]:ExpressionStatement[42735-42750]"
  }, {
    "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
    "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
    "info" : "ExpressionStatement[42911-42964]:ExpressionStatement[42763-42816]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[42983-43004]:ReturnStatement[42835-42856]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43016-43023]:Modifier[42868-42875]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[43024-43032]:ArrayType[42876-42884]"
  }, {
    "left" : "toStringArray",
    "right" : "toStringArray",
    "info" : "SimpleName[43033-43046]:SimpleName[42885-42898]"
  }, {
    "left" : "final Object[] values",
    "right" : "final Object[] values",
    "info" : "SingleVariableDeclaration[43047-43068]:SingleVariableDeclaration[42899-42920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43070-43396]:Block[42922-43248]"
  }, {
    "left" : "if (values == null)",
    "right" : "if (values == null)",
    "info" : "IfStatement[43080-43136]:IfStatement[42932-42988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43100-43136]:Block[42952-42988]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[43114-43126]:ReturnStatement[42966-42978]"
  }, {
    "left" : "final String[] strings = new String[values.length];",
    "right" : "final String[] strings = new String[values.length];",
    "info" : "VariableDeclarationStatement[43145-43196]:VariableDeclarationStatement[42997-43048]"
  }, {
    "left" : "for (int i = 0; i < values.length; i++)",
    "right" : "for (int i = 0; i < values.length; i++)",
    "info" : "ForStatement[43205-43366]:ForStatement[43057-43218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43245-43366]:Block[43097-43218]"
  }, {
    "left" : "final Object value = values[i];",
    "right" : "final Object value = values[i];",
    "info" : "VariableDeclarationStatement[43259-43290]:VariableDeclarationStatement[43111-43142]"
  }, {
    "left" : "strings[i] = value == null ? null : value.toString();",
    "right" : "strings[i] = value == null ? null : value.toString();",
    "info" : "ExpressionStatement[43303-43356]:ExpressionStatement[43155-43208]"
  }, {
    "left" : "return strings;",
    "right" : "return strings;",
    "info" : "ReturnStatement[43375-43390]:ReturnStatement[43227-43242]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43402-43409]:Modifier[43254-43261]"
  }, {
    "left" : "CharSequence",
    "right" : "CharSequence",
    "info" : "SimpleType[43410-43422]:SimpleType[43262-43274]"
  }, {
    "left" : "trim",
    "right" : "trim",
    "info" : "SimpleName[43423-43427]:SimpleName[43275-43279]"
  }, {
    "left" : "final CharSequence charSequence",
    "right" : "final CharSequence charSequence",
    "info" : "SingleVariableDeclaration[43428-43459]:SingleVariableDeclaration[43280-43311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43461-43948]:Block[43313-43800]"
  }, {
    "left" : "if (charSequence instanceof String)",
    "right" : "if (charSequence instanceof String)",
    "info" : "IfStatement[43471-43569]:IfStatement[43323-43421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43507-43569]:Block[43359-43421]"
  }, {
    "left" : "return ((String) charSequence).trim();",
    "right" : "return ((String) charSequence).trim();",
    "info" : "ReturnStatement[43521-43559]:ReturnStatement[43373-43411]"
  }, {
    "left" : "final int count = charSequence.length();",
    "right" : "final int count = charSequence.length();",
    "info" : "VariableDeclarationStatement[43578-43618]:VariableDeclarationStatement[43430-43470]"
  }, {
    "left" : "int len = count;",
    "right" : "int len = count;",
    "info" : "VariableDeclarationStatement[43627-43643]:VariableDeclarationStatement[43479-43495]"
  }, {
    "left" : "int pos = 0;",
    "right" : "int pos = 0;",
    "info" : "VariableDeclarationStatement[43652-43664]:VariableDeclarationStatement[43504-43516]"
  }, {
    "left" : "while (pos < len && charSequence.charAt(pos) <= SP)",
    "right" : "while (pos < len && charSequence.charAt(pos) <= SP)",
    "info" : "WhileStatement[43674-43756]:WhileStatement[43526-43608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43726-43756]:Block[43578-43608]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[43740-43746]:ExpressionStatement[43592-43598]"
  }, {
    "left" : "while (pos < len && charSequence.charAt(len - 1) <= SP)",
    "right" : "while (pos < len && charSequence.charAt(len - 1) <= SP)",
    "info" : "WhileStatement[43765-43851]:WhileStatement[43617-43703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43821-43851]:Block[43673-43703]"
  }, {
    "left" : "len--;",
    "right" : "len--;",
    "info" : "ExpressionStatement[43835-43841]:ExpressionStatement[43687-43693]"
  }, {
    "left" : "return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
    "right" : "return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;",
    "info" : "ReturnStatement[43860-43942]:ReturnStatement[43712-43794]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44120-44127]:Modifier[43972-43979]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44128-44132]:PrimitiveType[43980-43984]"
  }, {
    "left" : "validate",
    "right" : "validate",
    "info" : "SimpleName[44133-44141]:SimpleName[43985-43993]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[44151-44175]:SimpleType[44003-44027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44176-46178]:Block[44028-46030]"
  }, {
    "left" : "if (isLineBreak(delimiter))",
    "right" : "if (isLineBreak(delimiter))",
    "info" : "IfStatement[44186-44313]:IfStatement[44038-44165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44214-44313]:Block[44066-44165]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "info" : "ThrowStatement[44228-44303]:ThrowStatement[44080-44155]"
  }, {
    "left" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
    "right" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
    "info" : "IfStatement[44323-44565]:IfStatement[44175-44417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44394-44565]:Block[44246-44417]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\");",
    "info" : "ThrowStatement[44408-44555]:ThrowStatement[44260-44407]"
  }, {
    "left" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
    "right" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
    "info" : "IfStatement[44575-44817]:IfStatement[44427-44669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44648-44817]:Block[44500-44669]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\");",
    "info" : "ThrowStatement[44662-44807]:ThrowStatement[44514-44659]"
  }, {
    "left" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
    "right" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
    "info" : "IfStatement[44827-45070]:IfStatement[44679-44922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44896-45070]:Block[44748-44922]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\");",
    "info" : "ThrowStatement[44910-45060]:ThrowStatement[44762-44912]"
  }, {
    "left" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
    "right" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
    "info" : "IfStatement[45080-45322]:IfStatement[44932-45174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45148-45322]:Block[45000-45174]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\");",
    "info" : "ThrowStatement[45162-45312]:ThrowStatement[45014-45164]"
  }, {
    "left" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
    "right" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
    "info" : "IfStatement[45332-45573]:IfStatement[45184-45425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45402-45573]:Block[45254-45425]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
    "right" : "throw new IllegalArgumentException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentMarker + \"')\");",
    "info" : "ThrowStatement[45416-45563]:ThrowStatement[45268-45415]"
  }, {
    "left" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
    "right" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
    "info" : "IfStatement[45583-45755]:IfStatement[45435-45607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45643-45755]:Block[45495-45607]"
  }, {
    "left" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
    "right" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
    "info" : "ThrowStatement[45657-45745]:ThrowStatement[45509-45597]"
  }, {
    "left" : "if (header != null)",
    "right" : "if (header != null)",
    "info" : "IfStatement[45792-46172]:IfStatement[45644-46024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45812-46172]:Block[45664-46024]"
  }, {
    "left" : "final Set<String> dupCheck = new HashSet<>();",
    "right" : "final Set<String> dupCheck = new HashSet<>();",
    "info" : "VariableDeclarationStatement[45826-45871]:VariableDeclarationStatement[45678-45723]"
  }, {
    "left" : "for (final String hdr : header)",
    "right" : "for (final String hdr : header)",
    "info" : "EnhancedForStatement[45884-46162]:EnhancedForStatement[45736-46014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45916-46162]:Block[45768-46014]"
  }, {
    "left" : "if (!dupCheck.add(hdr))",
    "right" : "if (!dupCheck.add(hdr))",
    "info" : "IfStatement[45934-46148]:IfStatement[45786-46000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45958-46148]:Block[45810-46000]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
    "right" : "throw new IllegalArgumentException(\n                            \"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
    "info" : "ThrowStatement[45980-46130]:ThrowStatement[45832-45982]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46494-46500]:Modifier[46346-46352]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[46501-46510]:SimpleType[46353-46362]"
  }, {
    "left" : "withAllowMissingColumnNames",
    "right" : "withAllowMissingColumnNames",
    "info" : "SimpleName[46511-46538]:SimpleName[46363-46390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46541-46603]:Block[46393-46455]"
  }, {
    "left" : "return this.withAllowMissingColumnNames(true);",
    "right" : "return this.withAllowMissingColumnNames(true);",
    "info" : "ReturnStatement[46551-46597]:ReturnStatement[46403-46449]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47100-47106]:Modifier[46952-46958]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[47107-47116]:SimpleType[46959-46968]"
  }, {
    "left" : "withAllowMissingColumnNames",
    "right" : "withAllowMissingColumnNames",
    "info" : "SimpleName[47117-47144]:SimpleName[46969-46996]"
  }, {
    "left" : "final boolean allowMissingColumnNames",
    "right" : "final boolean allowMissingColumnNames",
    "info" : "SingleVariableDeclaration[47145-47182]:SingleVariableDeclaration[46997-47034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47184-47516]:Block[47036-47368]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[47194-47510]:ReturnStatement[47046-47362]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48053-48059]:Modifier[47905-47911]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[48060-48069]:SimpleType[47912-47921]"
  }, {
    "left" : "withCommentMarker",
    "right" : "withCommentMarker",
    "info" : "SimpleName[48070-48087]:SimpleName[47922-47939]"
  }, {
    "left" : "final char commentMarker",
    "right" : "final char commentMarker",
    "info" : "SingleVariableDeclaration[48088-48112]:SingleVariableDeclaration[47940-47964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48114-48189]:Block[47966-48041]"
  }, {
    "left" : "return withCommentMarker(Character.valueOf(commentMarker));",
    "right" : "return withCommentMarker(Character.valueOf(commentMarker));",
    "info" : "ReturnStatement[48124-48183]:ReturnStatement[47976-48035]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48755-48761]:Modifier[48607-48613]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[48762-48771]:SimpleType[48614-48623]"
  }, {
    "left" : "withCommentMarker",
    "right" : "withCommentMarker",
    "info" : "SimpleName[48772-48789]:SimpleName[48624-48641]"
  }, {
    "left" : "final Character commentMarker",
    "right" : "final Character commentMarker",
    "info" : "SingleVariableDeclaration[48790-48819]:SingleVariableDeclaration[48642-48671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48821-49314]:Block[48673-49166]"
  }, {
    "left" : "if (isLineBreak(commentMarker))",
    "right" : "if (isLineBreak(commentMarker))",
    "info" : "IfStatement[48831-48983]:IfStatement[48683-48835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48863-48983]:Block[48715-48835]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
    "info" : "ThrowStatement[48877-48973]:ThrowStatement[48729-48825]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[48992-49308]:ReturnStatement[48844-49160]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49717-49723]:Modifier[49569-49575]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[49724-49733]:SimpleType[49576-49585]"
  }, {
    "left" : "withDelimiter",
    "right" : "withDelimiter",
    "info" : "SimpleName[49734-49747]:SimpleName[49586-49599]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[49748-49768]:SingleVariableDeclaration[49600-49620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49770-50238]:Block[49622-50090]"
  }, {
    "left" : "if (isLineBreak(delimiter))",
    "right" : "if (isLineBreak(delimiter))",
    "info" : "IfStatement[49780-49907]:IfStatement[49632-49759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49808-49907]:Block[49660-49759]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "info" : "ThrowStatement[49822-49897]:ThrowStatement[49674-49749]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[49916-50232]:ReturnStatement[49768-50084]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50656-50662]:Modifier[50508-50514]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[50663-50672]:SimpleType[50515-50524]"
  }, {
    "left" : "withEscape",
    "right" : "withEscape",
    "info" : "SimpleName[50673-50683]:SimpleName[50525-50535]"
  }, {
    "left" : "final char escape",
    "right" : "final char escape",
    "info" : "SingleVariableDeclaration[50684-50701]:SingleVariableDeclaration[50536-50553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50703-50764]:Block[50555-50616]"
  }, {
    "left" : "return withEscape(Character.valueOf(escape));",
    "right" : "return withEscape(Character.valueOf(escape));",
    "info" : "ReturnStatement[50713-50758]:ReturnStatement[50565-50610]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[51212-51218]:Modifier[51064-51070]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[51219-51228]:SimpleType[51071-51080]"
  }, {
    "left" : "withEscape",
    "right" : "withEscape",
    "info" : "SimpleName[51229-51239]:SimpleName[51081-51091]"
  }, {
    "left" : "final Character escape",
    "right" : "final Character escape",
    "info" : "SingleVariableDeclaration[51240-51262]:SingleVariableDeclaration[51092-51114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51264-51727]:Block[51116-51579]"
  }, {
    "left" : "if (isLineBreak(escape))",
    "right" : "if (isLineBreak(escape))",
    "info" : "IfStatement[51274-51405]:IfStatement[51126-51257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51299-51405]:Block[51151-51257]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
    "info" : "ThrowStatement[51313-51395]:ThrowStatement[51165-51247]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[51414-51721]:ReturnStatement[51266-51573]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[52204-52210]:Modifier[52056-52062]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[52211-52220]:SimpleType[52063-52072]"
  }, {
    "left" : "withFirstRecordAsHeader",
    "right" : "withFirstRecordAsHeader",
    "info" : "SimpleName[52221-52244]:SimpleName[52073-52096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52247-52306]:Block[52099-52158]"
  }, {
    "left" : "return withHeader().withSkipHeaderRecord();",
    "right" : "return withHeader().withSkipHeaderRecord();",
    "info" : "ReturnStatement[52257-52300]:ReturnStatement[52109-52152]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53079-53085]:Modifier[52931-52937]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[53086-53095]:SimpleType[52938-52947]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[53096-53106]:SimpleName[52948-52958]"
  }, {
    "left" : "final Class<? extends Enum<?>> headerEnum",
    "right" : "final Class<? extends Enum<?>> headerEnum",
    "info" : "SingleVariableDeclaration[53107-53148]:SingleVariableDeclaration[52959-53000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53150-53514]:Block[53002-53366]"
  }, {
    "left" : "String[] header = null;",
    "right" : "String[] header = null;",
    "info" : "VariableDeclarationStatement[53160-53183]:VariableDeclarationStatement[53012-53035]"
  }, {
    "left" : "if (headerEnum != null)",
    "right" : "if (headerEnum != null)",
    "info" : "IfStatement[53192-53473]:IfStatement[53044-53325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53216-53473]:Block[53068-53325]"
  }, {
    "left" : "final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
    "right" : "final Enum<?>[] enumValues = headerEnum.getEnumConstants();",
    "info" : "VariableDeclarationStatement[53230-53289]:VariableDeclarationStatement[53082-53141]"
  }, {
    "left" : "header = new String[enumValues.length];",
    "right" : "header = new String[enumValues.length];",
    "info" : "ExpressionStatement[53302-53341]:ExpressionStatement[53154-53193]"
  }, {
    "left" : "for (int i = 0; i < enumValues.length; i++)",
    "right" : "for (int i = 0; i < enumValues.length; i++)",
    "info" : "ForStatement[53354-53463]:ForStatement[53206-53315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53398-53463]:Block[53250-53315]"
  }, {
    "left" : "header[i] = enumValues[i].name();",
    "right" : "header[i] = enumValues[i].name();",
    "info" : "ExpressionStatement[53416-53449]:ExpressionStatement[53268-53301]"
  }, {
    "left" : "return withHeader(header);",
    "right" : "return withHeader(header);",
    "info" : "ReturnStatement[53482-53508]:ReturnStatement[53334-53360]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54445-54451]:Modifier[54297-54303]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[54452-54461]:SimpleType[54304-54313]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[54462-54472]:SimpleName[54314-54324]"
  }, {
    "left" : "final ResultSet resultSet",
    "right" : "final ResultSet resultSet",
    "info" : "SingleVariableDeclaration[54473-54498]:SingleVariableDeclaration[54325-54350]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[54507-54519]:SimpleType[54359-54371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54520-54606]:Block[54372-54458]"
  }, {
    "left" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
    "right" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
    "info" : "ReturnStatement[54530-54600]:ReturnStatement[54382-54452]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55534-55540]:Modifier[55386-55392]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[55541-55550]:SimpleType[55393-55402]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[55551-55561]:SimpleName[55403-55413]"
  }, {
    "left" : "final ResultSetMetaData metaData",
    "right" : "final ResultSetMetaData metaData",
    "info" : "SingleVariableDeclaration[55562-55594]:SingleVariableDeclaration[55414-55446]"
  }, {
    "left" : "SQLException",
    "right" : "SQLException",
    "info" : "SimpleType[55603-55615]:SimpleType[55455-55467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55616-55967]:Block[55468-55819]"
  }, {
    "left" : "String[] labels = null;",
    "right" : "String[] labels = null;",
    "info" : "VariableDeclarationStatement[55626-55649]:VariableDeclarationStatement[55478-55501]"
  }, {
    "left" : "if (metaData != null)",
    "right" : "if (metaData != null)",
    "info" : "IfStatement[55658-55926]:IfStatement[55510-55778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55680-55926]:Block[55532-55778]"
  }, {
    "left" : "final int columnCount = metaData.getColumnCount();",
    "right" : "final int columnCount = metaData.getColumnCount();",
    "info" : "VariableDeclarationStatement[55694-55744]:VariableDeclarationStatement[55546-55596]"
  }, {
    "left" : "labels = new String[columnCount];",
    "right" : "labels = new String[columnCount];",
    "info" : "ExpressionStatement[55757-55790]:ExpressionStatement[55609-55642]"
  }, {
    "left" : "for (int i = 0; i < columnCount; i++)",
    "right" : "for (int i = 0; i < columnCount; i++)",
    "info" : "ForStatement[55803-55916]:ForStatement[55655-55768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55841-55916]:Block[55693-55768]"
  }, {
    "left" : "labels[i] = metaData.getColumnLabel(i + 1);",
    "right" : "labels[i] = metaData.getColumnLabel(i + 1);",
    "info" : "ExpressionStatement[55859-55902]:ExpressionStatement[55711-55754]"
  }, {
    "left" : "return withHeader(labels);",
    "right" : "return withHeader(labels);",
    "info" : "ReturnStatement[55935-55961]:ReturnStatement[55787-55813]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56777-56783]:Modifier[56629-56635]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[56784-56793]:SimpleType[56636-56645]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[56794-56804]:SimpleName[56646-56656]"
  }, {
    "left" : "final String... header",
    "right" : "final String... header",
    "info" : "SingleVariableDeclaration[56805-56827]:SingleVariableDeclaration[56657-56679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56829-57161]:Block[56681-57013]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[56839-57155]:ReturnStatement[56691-57007]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[57827-57833]:Modifier[57679-57685]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[57834-57843]:SimpleType[57686-57695]"
  }, {
    "left" : "withHeaderComments",
    "right" : "withHeaderComments",
    "info" : "SimpleName[57844-57862]:SimpleName[57696-57714]"
  }, {
    "left" : "final Object... headerComments",
    "right" : "final Object... headerComments",
    "info" : "SingleVariableDeclaration[57863-57893]:SingleVariableDeclaration[57715-57745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57895-58227]:Block[57747-58079]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[57905-58221]:ReturnStatement[57757-58073]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[58545-58551]:Modifier[58397-58403]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[58552-58561]:SimpleType[58404-58413]"
  }, {
    "left" : "withIgnoreEmptyLines",
    "right" : "withIgnoreEmptyLines",
    "info" : "SimpleName[58562-58582]:SimpleName[58414-58434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58585-58640]:Block[58437-58492]"
  }, {
    "left" : "return this.withIgnoreEmptyLines(true);",
    "right" : "return this.withIgnoreEmptyLines(true);",
    "info" : "ReturnStatement[58595-58634]:ReturnStatement[58447-58486]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59108-59114]:Modifier[58960-58966]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[59115-59124]:SimpleType[58967-58976]"
  }, {
    "left" : "withIgnoreEmptyLines",
    "right" : "withIgnoreEmptyLines",
    "info" : "SimpleName[59125-59145]:SimpleName[58977-58997]"
  }, {
    "left" : "final boolean ignoreEmptyLines",
    "right" : "final boolean ignoreEmptyLines",
    "info" : "SingleVariableDeclaration[59146-59176]:SingleVariableDeclaration[58998-59028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59178-59510]:Block[59030-59362]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[59188-59504]:ReturnStatement[59040-59356]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59763-59769]:Modifier[59615-59621]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[59770-59779]:SimpleType[59622-59631]"
  }, {
    "left" : "withIgnoreHeaderCase",
    "right" : "withIgnoreHeaderCase",
    "info" : "SimpleName[59780-59800]:SimpleName[59632-59652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59803-59858]:Block[59655-59710]"
  }, {
    "left" : "return this.withIgnoreHeaderCase(true);",
    "right" : "return this.withIgnoreHeaderCase(true);",
    "info" : "ReturnStatement[59813-59852]:ReturnStatement[59665-59704]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60270-60276]:Modifier[60122-60128]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[60277-60286]:SimpleType[60129-60138]"
  }, {
    "left" : "withIgnoreHeaderCase",
    "right" : "withIgnoreHeaderCase",
    "info" : "SimpleName[60287-60307]:SimpleName[60139-60159]"
  }, {
    "left" : "final boolean ignoreHeaderCase",
    "right" : "final boolean ignoreHeaderCase",
    "info" : "SingleVariableDeclaration[60308-60338]:SingleVariableDeclaration[60160-60190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60340-60672]:Block[60192-60524]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[60350-60666]:ReturnStatement[60202-60518]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60965-60971]:Modifier[60817-60823]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[60972-60981]:SimpleType[60824-60833]"
  }, {
    "left" : "withIgnoreSurroundingSpaces",
    "right" : "withIgnoreSurroundingSpaces",
    "info" : "SimpleName[60982-61009]:SimpleName[60834-60861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61012-61074]:Block[60864-60926]"
  }, {
    "left" : "return this.withIgnoreSurroundingSpaces(true);",
    "right" : "return this.withIgnoreSurroundingSpaces(true);",
    "info" : "ReturnStatement[61022-61068]:ReturnStatement[60874-60920]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[61487-61493]:Modifier[61339-61345]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[61494-61503]:SimpleType[61346-61355]"
  }, {
    "left" : "withIgnoreSurroundingSpaces",
    "right" : "withIgnoreSurroundingSpaces",
    "info" : "SimpleName[61504-61531]:SimpleName[61356-61383]"
  }, {
    "left" : "final boolean ignoreSurroundingSpaces",
    "right" : "final boolean ignoreSurroundingSpaces",
    "info" : "SingleVariableDeclaration[61532-61569]:SingleVariableDeclaration[61384-61421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61571-61903]:Block[61423-61755]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[61581-61897]:ReturnStatement[61433-61749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62558-62564]:Modifier[62410-62416]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[62565-62574]:SimpleType[62417-62426]"
  }, {
    "left" : "withNullString",
    "right" : "withNullString",
    "info" : "SimpleName[62575-62589]:SimpleName[62427-62441]"
  }, {
    "left" : "final String nullString",
    "right" : "final String nullString",
    "info" : "SingleVariableDeclaration[62590-62613]:SingleVariableDeclaration[62442-62465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62615-62947]:Block[62467-62799]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[62625-62941]:ReturnStatement[62477-62793]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63354-63360]:Modifier[63206-63212]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[63361-63370]:SimpleType[63213-63222]"
  }, {
    "left" : "withQuote",
    "right" : "withQuote",
    "info" : "SimpleName[63371-63380]:SimpleName[63223-63232]"
  }, {
    "left" : "final char quoteChar",
    "right" : "final char quoteChar",
    "info" : "SingleVariableDeclaration[63381-63401]:SingleVariableDeclaration[63233-63253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63403-63466]:Block[63255-63318]"
  }, {
    "left" : "return withQuote(Character.valueOf(quoteChar));",
    "right" : "return withQuote(Character.valueOf(quoteChar));",
    "info" : "ReturnStatement[63413-63460]:ReturnStatement[63265-63312]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63902-63908]:Modifier[63754-63760]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[63909-63918]:SimpleType[63761-63770]"
  }, {
    "left" : "withQuote",
    "right" : "withQuote",
    "info" : "SimpleName[63919-63928]:SimpleName[63771-63780]"
  }, {
    "left" : "final Character quoteChar",
    "right" : "final Character quoteChar",
    "info" : "SingleVariableDeclaration[63929-63954]:SingleVariableDeclaration[63781-63806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63956-64419]:Block[63808-64271]"
  }, {
    "left" : "if (isLineBreak(quoteChar))",
    "right" : "if (isLineBreak(quoteChar))",
    "info" : "IfStatement[63966-64093]:IfStatement[63818-63945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63994-64093]:Block[63846-63945]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
    "info" : "ThrowStatement[64008-64083]:ThrowStatement[63860-63935]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[64102-64413]:ReturnStatement[63954-64265]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[64738-64744]:Modifier[64590-64596]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[64745-64754]:SimpleType[64597-64606]"
  }, {
    "left" : "withQuoteMode",
    "right" : "withQuoteMode",
    "info" : "SimpleName[64755-64768]:SimpleName[64607-64620]"
  }, {
    "left" : "final QuoteMode quoteModePolicy",
    "right" : "final QuoteMode quoteModePolicy",
    "info" : "SingleVariableDeclaration[64769-64800]:SingleVariableDeclaration[64621-64652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64802-65140]:Block[64654-64992]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[64812-65134]:ReturnStatement[64664-64986]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[65680-65686]:Modifier[65532-65538]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[65687-65696]:SimpleType[65539-65548]"
  }, {
    "left" : "withRecordSeparator",
    "right" : "withRecordSeparator",
    "info" : "SimpleName[65697-65716]:SimpleName[65549-65568]"
  }, {
    "left" : "final char recordSeparator",
    "right" : "final char recordSeparator",
    "info" : "SingleVariableDeclaration[65717-65743]:SingleVariableDeclaration[65569-65595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65745-65821]:Block[65597-65673]"
  }, {
    "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
    "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
    "info" : "ReturnStatement[65755-65815]:ReturnStatement[65607-65667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66462-66468]:Modifier[66314-66320]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[66469-66478]:SimpleType[66321-66330]"
  }, {
    "left" : "withRecordSeparator",
    "right" : "withRecordSeparator",
    "info" : "SimpleName[66479-66498]:SimpleName[66331-66350]"
  }, {
    "left" : "final String recordSeparator",
    "right" : "final String recordSeparator",
    "info" : "SingleVariableDeclaration[66499-66527]:SingleVariableDeclaration[66351-66379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66529-66861]:Block[66381-66713]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[66539-66855]:ReturnStatement[66391-66707]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67184-67190]:Modifier[67036-67042]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[67191-67200]:SimpleType[67043-67052]"
  }, {
    "left" : "withSkipHeaderRecord",
    "right" : "withSkipHeaderRecord",
    "info" : "SimpleName[67201-67221]:SimpleName[67053-67073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67224-67279]:Block[67076-67131]"
  }, {
    "left" : "return this.withSkipHeaderRecord(true);",
    "right" : "return this.withSkipHeaderRecord(true);",
    "info" : "ReturnStatement[67234-67273]:ReturnStatement[67086-67125]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67619-67625]:Modifier[67471-67477]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[67626-67635]:SimpleType[67478-67487]"
  }, {
    "left" : "withSkipHeaderRecord",
    "right" : "withSkipHeaderRecord",
    "info" : "SimpleName[67636-67656]:SimpleName[67488-67508]"
  }, {
    "left" : "final boolean skipHeaderRecord",
    "right" : "final boolean skipHeaderRecord",
    "info" : "SingleVariableDeclaration[67657-67687]:SingleVariableDeclaration[67509-67539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67689-68021]:Block[67541-67873]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[67699-68015]:ReturnStatement[67551-67867]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[68230-68236]:Modifier[68082-68088]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[68237-68246]:SimpleType[68089-68098]"
  }, {
    "left" : "withTrailingDelimiter",
    "right" : "withTrailingDelimiter",
    "info" : "SimpleName[68247-68268]:SimpleName[68099-68120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68271-68322]:Block[68123-68174]"
  }, {
    "left" : "return withTrailingDelimiter(true);",
    "right" : "return withTrailingDelimiter(true);",
    "info" : "ReturnStatement[68281-68316]:ReturnStatement[68133-68168]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[68648-68654]:Modifier[68500-68506]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[68655-68664]:SimpleType[68507-68516]"
  }, {
    "left" : "withTrailingDelimiter",
    "right" : "withTrailingDelimiter",
    "info" : "SimpleName[68665-68686]:SimpleName[68517-68538]"
  }, {
    "left" : "final boolean trailingDelimiter",
    "right" : "final boolean trailingDelimiter",
    "info" : "SingleVariableDeclaration[68687-68718]:SingleVariableDeclaration[68539-68570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68720-69052]:Block[68572-68904]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[68730-69046]:ReturnStatement[68582-68898]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[69258-69264]:Modifier[69110-69116]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[69265-69274]:SimpleType[69117-69126]"
  }, {
    "left" : "withTrim",
    "right" : "withTrim",
    "info" : "SimpleName[69275-69283]:SimpleName[69127-69135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69286-69324]:Block[69138-69176]"
  }, {
    "left" : "return withTrim(true);",
    "right" : "return withTrim(true);",
    "info" : "ReturnStatement[69296-69318]:ReturnStatement[69148-69170]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[69639-69645]:Modifier[69491-69497]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[69646-69655]:SimpleType[69498-69507]"
  }, {
    "left" : "withTrim",
    "right" : "withTrim",
    "info" : "SimpleName[69656-69664]:SimpleName[69508-69516]"
  }, {
    "left" : "final boolean trim",
    "right" : "final boolean trim",
    "info" : "SingleVariableDeclaration[69665-69683]:SingleVariableDeclaration[69517-69535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69685-70017]:Block[69537-69869]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[69695-70011]:ReturnStatement[69547-69863]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[70306-70312]:Modifier[70158-70164]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[70313-70322]:SimpleType[70165-70174]"
  }, {
    "left" : "withAutoFlush",
    "right" : "withAutoFlush",
    "info" : "SimpleName[70323-70336]:SimpleName[70175-70188]"
  }, {
    "left" : "final boolean autoFlush",
    "right" : "final boolean autoFlush",
    "info" : "SingleVariableDeclaration[70337-70360]:SingleVariableDeclaration[70189-70212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70362-70686]:Block[70214-70538]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n            ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n            skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n            ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n            skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);",
    "info" : "ReturnStatement[70372-70680]:ReturnStatement[70224-70532]"
  } ]
}