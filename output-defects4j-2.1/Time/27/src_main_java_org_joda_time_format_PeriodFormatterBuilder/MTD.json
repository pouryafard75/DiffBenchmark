{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeriodFormatterBuilder",
      "right" : "PeriodFormatterBuilder",
      "info" : "TypeDeclaration[1024-68713]:TypeDeclaration[1024-68800]"
    }, {
      "left" : "private static final int PRINT_ZERO_RARELY_FIRST = 1;",
      "right" : "private static final int PRINT_ZERO_RARELY_FIRST = 1;",
      "info" : "FieldDeclaration[2260-2313]:FieldDeclaration[2260-2313]"
    }, {
      "left" : "private static final int PRINT_ZERO_RARELY_LAST = 2;",
      "right" : "private static final int PRINT_ZERO_RARELY_LAST = 2;",
      "info" : "FieldDeclaration[2318-2370]:FieldDeclaration[2318-2370]"
    }, {
      "left" : "private static final int PRINT_ZERO_IF_SUPPORTED = 3;",
      "right" : "private static final int PRINT_ZERO_IF_SUPPORTED = 3;",
      "info" : "FieldDeclaration[2375-2428]:FieldDeclaration[2375-2428]"
    }, {
      "left" : "private static final int PRINT_ZERO_ALWAYS = 4;",
      "right" : "private static final int PRINT_ZERO_ALWAYS = 4;",
      "info" : "FieldDeclaration[2433-2480]:FieldDeclaration[2433-2480]"
    }, {
      "left" : "private static final int PRINT_ZERO_NEVER = 5;",
      "right" : "private static final int PRINT_ZERO_NEVER = 5;",
      "info" : "FieldDeclaration[2485-2531]:FieldDeclaration[2485-2531]"
    }, {
      "left" : "private static final int YEARS = 0;",
      "right" : "private static final int YEARS = 0;",
      "info" : "FieldDeclaration[2541-2576]:FieldDeclaration[2541-2576]"
    }, {
      "left" : "private static final int MONTHS = 1;",
      "right" : "private static final int MONTHS = 1;",
      "info" : "FieldDeclaration[2581-2617]:FieldDeclaration[2581-2617]"
    }, {
      "left" : "private static final int WEEKS = 2;",
      "right" : "private static final int WEEKS = 2;",
      "info" : "FieldDeclaration[2622-2657]:FieldDeclaration[2622-2657]"
    }, {
      "left" : "private static final int DAYS = 3;",
      "right" : "private static final int DAYS = 3;",
      "info" : "FieldDeclaration[2662-2696]:FieldDeclaration[2662-2696]"
    }, {
      "left" : "private static final int HOURS = 4;",
      "right" : "private static final int HOURS = 4;",
      "info" : "FieldDeclaration[2701-2736]:FieldDeclaration[2701-2736]"
    }, {
      "left" : "private static final int MINUTES = 5;",
      "right" : "private static final int MINUTES = 5;",
      "info" : "FieldDeclaration[2741-2778]:FieldDeclaration[2741-2778]"
    }, {
      "left" : "private static final int SECONDS = 6;",
      "right" : "private static final int SECONDS = 6;",
      "info" : "FieldDeclaration[2783-2820]:FieldDeclaration[2783-2820]"
    }, {
      "left" : "private static final int MILLIS = 7;",
      "right" : "private static final int MILLIS = 7;",
      "info" : "FieldDeclaration[2825-2861]:FieldDeclaration[2825-2861]"
    }, {
      "left" : "private static final int SECONDS_MILLIS = 8;",
      "right" : "private static final int SECONDS_MILLIS = 8;",
      "info" : "FieldDeclaration[2866-2910]:FieldDeclaration[2866-2910]"
    }, {
      "left" : "private static final int SECONDS_OPTIONAL_MILLIS = 9;",
      "right" : "private static final int SECONDS_OPTIONAL_MILLIS = 9;",
      "info" : "FieldDeclaration[2915-2968]:FieldDeclaration[2915-2968]"
    }, {
      "left" : "private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;",
      "right" : "private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;",
      "info" : "FieldDeclaration[2973-3034]:FieldDeclaration[2973-3034]"
    }, {
      "left" : "private int iMinPrintedDigits;",
      "right" : "private int iMinPrintedDigits;",
      "info" : "FieldDeclaration[3040-3070]:FieldDeclaration[3040-3070]"
    }, {
      "left" : "private int iPrintZeroSetting;",
      "right" : "private int iPrintZeroSetting;",
      "info" : "FieldDeclaration[3075-3105]:FieldDeclaration[3075-3105]"
    }, {
      "left" : "private int iMaxParsedDigits;",
      "right" : "private int iMaxParsedDigits;",
      "info" : "FieldDeclaration[3110-3139]:FieldDeclaration[3110-3139]"
    }, {
      "left" : "private boolean iRejectSignedValues;",
      "right" : "private boolean iRejectSignedValues;",
      "info" : "FieldDeclaration[3144-3180]:FieldDeclaration[3144-3180]"
    }, {
      "left" : "private PeriodFieldAffix iPrefix;",
      "right" : "private PeriodFieldAffix iPrefix;",
      "info" : "FieldDeclaration[3186-3219]:FieldDeclaration[3186-3219]"
    }, {
      "left" : "private List<Object> iElementPairs;",
      "right" : "private List<Object> iElementPairs;",
      "info" : "FieldDeclaration[3294-3329]:FieldDeclaration[3294-3329]"
    }, {
      "left" : "private boolean iNotPrinter;",
      "right" : "private boolean iNotPrinter;",
      "info" : "FieldDeclaration[3334-3420]:FieldDeclaration[3334-3420]"
    }, {
      "left" : "private boolean iNotParser;",
      "right" : "private boolean iNotParser;",
      "info" : "FieldDeclaration[3425-3509]:FieldDeclaration[3425-3509]"
    }, {
      "left" : "private FieldFormatter[] iFieldFormatters;",
      "right" : "private FieldFormatter[] iFieldFormatters;",
      "info" : "FieldDeclaration[3572-3614]:FieldDeclaration[3572-3614]"
    }, {
      "left" : "public PeriodFormatterBuilder()",
      "right" : "public PeriodFormatterBuilder()",
      "info" : "MethodDeclaration[3620-3676]:MethodDeclaration[3620-3676]"
    }, {
      "left" : "public PeriodFormatter toFormatter()",
      "right" : "public PeriodFormatter toFormatter()",
      "info" : "MethodDeclaration[3760-4689]:MethodDeclaration[3760-4689]"
    }, {
      "left" : "public PeriodPrinter toPrinter()",
      "right" : "public PeriodPrinter toPrinter()",
      "info" : "MethodDeclaration[4695-5309]:MethodDeclaration[4695-5309]"
    }, {
      "left" : "public PeriodParser toParser()",
      "right" : "public PeriodParser toParser()",
      "info" : "MethodDeclaration[5315-5921]:MethodDeclaration[5315-5921]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[6005-6564]:MethodDeclaration[6005-6564]"
    }, {
      "left" : "public PeriodFormatterBuilder append(PeriodFormatter formatter)",
      "right" : "public PeriodFormatterBuilder append(PeriodFormatter formatter)",
      "info" : "MethodDeclaration[6570-6965]:MethodDeclaration[6570-6965]"
    }, {
      "left" : "public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser)",
      "right" : "public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser)",
      "info" : "MethodDeclaration[6971-7796]:MethodDeclaration[6971-7796]"
    }, {
      "left" : "public PeriodFormatterBuilder appendLiteral(String text)",
      "right" : "public PeriodFormatterBuilder appendLiteral(String text)",
      "info" : "MethodDeclaration[7802-8346]:MethodDeclaration[7802-8346]"
    }, {
      "left" : "public PeriodFormatterBuilder minimumPrintedDigits(int minDigits)",
      "right" : "public PeriodFormatterBuilder minimumPrintedDigits(int minDigits)",
      "info" : "MethodDeclaration[8352-8776]:MethodDeclaration[8352-8776]"
    }, {
      "left" : "public PeriodFormatterBuilder maximumParsedDigits(int maxDigits)",
      "right" : "public PeriodFormatterBuilder maximumParsedDigits(int maxDigits)",
      "info" : "MethodDeclaration[8782-9113]:MethodDeclaration[8782-9113]"
    }, {
      "left" : "public PeriodFormatterBuilder rejectSignedValues(boolean v)",
      "right" : "public PeriodFormatterBuilder rejectSignedValues(boolean v)",
      "info" : "MethodDeclaration[9119-9387]:MethodDeclaration[9119-9387]"
    }, {
      "left" : "public PeriodFormatterBuilder printZeroRarelyLast()",
      "right" : "public PeriodFormatterBuilder printZeroRarelyLast()",
      "info" : "MethodDeclaration[9393-9863]:MethodDeclaration[9393-9863]"
    }, {
      "left" : "public PeriodFormatterBuilder printZeroRarelyFirst()",
      "right" : "public PeriodFormatterBuilder printZeroRarelyFirst()",
      "info" : "MethodDeclaration[9869-10289]:MethodDeclaration[9869-10289]"
    }, {
      "left" : "public PeriodFormatterBuilder printZeroIfSupported()",
      "right" : "public PeriodFormatterBuilder printZeroIfSupported()",
      "info" : "MethodDeclaration[10295-10601]:MethodDeclaration[10295-10601]"
    }, {
      "left" : "public PeriodFormatterBuilder printZeroAlways()",
      "right" : "public PeriodFormatterBuilder printZeroAlways()",
      "info" : "MethodDeclaration[10607-10987]:MethodDeclaration[10607-10987]"
    }, {
      "left" : "public PeriodFormatterBuilder printZeroNever()",
      "right" : "public PeriodFormatterBuilder printZeroNever()",
      "info" : "MethodDeclaration[10993-11452]:MethodDeclaration[10993-11452]"
    }, {
      "left" : "public PeriodFormatterBuilder appendPrefix(String text)",
      "right" : "public PeriodFormatterBuilder appendPrefix(String text)",
      "info" : "MethodDeclaration[11536-12037]:MethodDeclaration[11536-12037]"
    }, {
      "left" : "public PeriodFormatterBuilder appendPrefix(String singularText,\n                                                 String pluralText)",
      "right" : "public PeriodFormatterBuilder appendPrefix(String singularText,\n                                                 String pluralText)",
      "info" : "MethodDeclaration[12043-12865]:MethodDeclaration[12043-12865]"
    }, {
      "left" : "private PeriodFormatterBuilder appendPrefix(PeriodFieldAffix prefix)",
      "right" : "private PeriodFormatterBuilder appendPrefix(PeriodFieldAffix prefix)",
      "info" : "MethodDeclaration[12871-13445]:MethodDeclaration[12871-13445]"
    }, {
      "left" : "public PeriodFormatterBuilder appendYears()",
      "right" : "public PeriodFormatterBuilder appendYears()",
      "info" : "MethodDeclaration[13529-13932]:MethodDeclaration[13529-13932]"
    }, {
      "left" : "public PeriodFormatterBuilder appendMonths()",
      "right" : "public PeriodFormatterBuilder appendMonths()",
      "info" : "MethodDeclaration[13938-14344]:MethodDeclaration[13938-14344]"
    }, {
      "left" : "public PeriodFormatterBuilder appendWeeks()",
      "right" : "public PeriodFormatterBuilder appendWeeks()",
      "info" : "MethodDeclaration[14350-14753]:MethodDeclaration[14350-14753]"
    }, {
      "left" : "public PeriodFormatterBuilder appendDays()",
      "right" : "public PeriodFormatterBuilder appendDays()",
      "info" : "MethodDeclaration[14759-15159]:MethodDeclaration[14759-15159]"
    }, {
      "left" : "public PeriodFormatterBuilder appendHours()",
      "right" : "public PeriodFormatterBuilder appendHours()",
      "info" : "MethodDeclaration[15165-15568]:MethodDeclaration[15165-15568]"
    }, {
      "left" : "public PeriodFormatterBuilder appendMinutes()",
      "right" : "public PeriodFormatterBuilder appendMinutes()",
      "info" : "MethodDeclaration[15574-15983]:MethodDeclaration[15574-15983]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSeconds()",
      "right" : "public PeriodFormatterBuilder appendSeconds()",
      "info" : "MethodDeclaration[15989-16398]:MethodDeclaration[15989-16398]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSecondsWithMillis()",
      "right" : "public PeriodFormatterBuilder appendSecondsWithMillis()",
      "info" : "MethodDeclaration[16404-16778]:MethodDeclaration[16404-16778]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSecondsWithOptionalMillis()",
      "right" : "public PeriodFormatterBuilder appendSecondsWithOptionalMillis()",
      "info" : "MethodDeclaration[16784-17185]:MethodDeclaration[16784-17185]"
    }, {
      "left" : "public PeriodFormatterBuilder appendMillis()",
      "right" : "public PeriodFormatterBuilder appendMillis()",
      "info" : "MethodDeclaration[17191-17597]:MethodDeclaration[17191-17597]"
    }, {
      "left" : "public PeriodFormatterBuilder appendMillis3Digit()",
      "right" : "public PeriodFormatterBuilder appendMillis3Digit()",
      "info" : "MethodDeclaration[17603-17954]:MethodDeclaration[17603-17954]"
    }, {
      "left" : "private void appendField(int type)",
      "right" : "private void appendField(int type)",
      "info" : "MethodDeclaration[17960-18048]:MethodDeclaration[17960-18048]"
    }, {
      "left" : "private void appendField(int type, int minPrinted)",
      "right" : "private void appendField(int type, int minPrinted)",
      "info" : "MethodDeclaration[18054-18379]:MethodDeclaration[18054-18379]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSuffix(String text)",
      "right" : "public PeriodFormatterBuilder appendSuffix(String text)",
      "info" : "MethodDeclaration[18463-19032]:MethodDeclaration[18463-19032]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSuffix(String singularText,\n                                               String pluralText)",
      "right" : "public PeriodFormatterBuilder appendSuffix(String singularText,\n                                               String pluralText)",
      "info" : "MethodDeclaration[19038-19927]:MethodDeclaration[19038-19927]"
    }, {
      "left" : "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix)",
      "right" : "private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix)",
      "info" : "MethodDeclaration[19933-21309]:MethodDeclaration[19933-21309]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSeparator(String text)",
      "right" : "public PeriodFormatterBuilder appendSeparator(String text)",
      "info" : "MethodDeclaration[21393-22180]:MethodDeclaration[21393-22180]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text)",
      "right" : "public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text)",
      "info" : "MethodDeclaration[22186-22974]:MethodDeclaration[22186-22974]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSeparatorIfFieldsBefore(String text)",
      "right" : "public PeriodFormatterBuilder appendSeparatorIfFieldsBefore(String text)",
      "info" : "MethodDeclaration[22980-23770]:MethodDeclaration[22980-23770]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSeparator(String text, String finalText)",
      "right" : "public PeriodFormatterBuilder appendSeparator(String text, String finalText)",
      "info" : "MethodDeclaration[23776-24895]:MethodDeclaration[23776-24895]"
    }, {
      "left" : "public PeriodFormatterBuilder appendSeparator(String text, String finalText,\n                                                  String[] variants)",
      "right" : "public PeriodFormatterBuilder appendSeparator(String text, String finalText,\n                                                  String[] variants)",
      "info" : "MethodDeclaration[24901-26174]:MethodDeclaration[24901-26174]"
    }, {
      "left" : "private PeriodFormatterBuilder appendSeparator(String text, String finalText,\n                                                   String[] variants,\n                                                   boolean useBefore, boolean useAfter)",
      "right" : "private PeriodFormatterBuilder appendSeparator(String text, String finalText,\n                                                   String[] variants,\n                                                   boolean useBefore, boolean useAfter)",
      "info" : "MethodDeclaration[26180-27997]:MethodDeclaration[26180-27997]"
    }, {
      "left" : "private void clearPrefix() throws IllegalStateException",
      "right" : "private void clearPrefix() throws IllegalStateException",
      "info" : "MethodDeclaration[28081-28286]:MethodDeclaration[28081-28286]"
    }, {
      "left" : "private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser)",
      "right" : "private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser)",
      "info" : "MethodDeclaration[28292-28556]:MethodDeclaration[28292-28556]"
    }, {
      "left" : "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser)",
      "right" : "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser)",
      "info" : "MethodDeclaration[28640-29676]:MethodDeclaration[28640-29763]"
    }, {
      "left" : "private static Object[] createComposite(List<Object> elementPairs)",
      "right" : "private static Object[] createComposite(List<Object> elementPairs)",
      "info" : "MethodDeclaration[29682-30126]:MethodDeclaration[29769-30213]"
    }, {
      "left" : "PeriodFieldAffix",
      "right" : "PeriodFieldAffix",
      "info" : "TypeDeclaration[30210-30898]:TypeDeclaration[30297-30985]"
    }, {
      "left" : "int calculatePrintedLength(int value);",
      "right" : "int calculatePrintedLength(int value);",
      "info" : "MethodDeclaration[30402-30440]:MethodDeclaration[30489-30527]"
    }, {
      "left" : "void printTo(StringBuffer buf, int value);",
      "right" : "void printTo(StringBuffer buf, int value);",
      "info" : "MethodDeclaration[30458-30500]:MethodDeclaration[30545-30587]"
    }, {
      "left" : "void printTo(Writer out, int value) throws IOException;",
      "right" : "void printTo(Writer out, int value) throws IOException;",
      "info" : "MethodDeclaration[30518-30573]:MethodDeclaration[30605-30660]"
    }, {
      "left" : "int parse(String periodStr, int position);",
      "right" : "int parse(String periodStr, int position);",
      "info" : "MethodDeclaration[30591-30734]:MethodDeclaration[30678-30821]"
    }, {
      "left" : "int scan(String periodStr, int position);",
      "right" : "int scan(String periodStr, int position);",
      "info" : "MethodDeclaration[30744-30892]:MethodDeclaration[30831-30979]"
    }, {
      "left" : "SimpleAffix",
      "right" : "SimpleAffix",
      "info" : "TypeDeclaration[30982-32755]:TypeDeclaration[31069-32842]"
    }, {
      "left" : "private final String iText;",
      "right" : "private final String iText;",
      "info" : "FieldDeclaration[31132-31159]:FieldDeclaration[31219-31246]"
    }, {
      "left" : "SimpleAffix(String text)",
      "right" : "SimpleAffix(String text)",
      "info" : "MethodDeclaration[31169-31231]:MethodDeclaration[31256-31318]"
    }, {
      "left" : "public int calculatePrintedLength(int value)",
      "right" : "public int calculatePrintedLength(int value)",
      "info" : "MethodDeclaration[31241-31332]:MethodDeclaration[31328-31419]"
    }, {
      "left" : "public void printTo(StringBuffer buf, int value)",
      "right" : "public void printTo(StringBuffer buf, int value)",
      "info" : "MethodDeclaration[31342-31433]:MethodDeclaration[31429-31520]"
    }, {
      "left" : "public void printTo(Writer out, int value) throws IOException",
      "right" : "public void printTo(Writer out, int value) throws IOException",
      "info" : "MethodDeclaration[31443-31546]:MethodDeclaration[31530-31633]"
    }, {
      "left" : "public int parse(String periodStr, int position)",
      "right" : "public int parse(String periodStr, int position)",
      "info" : "MethodDeclaration[31556-31863]:MethodDeclaration[31643-31950]"
    }, {
      "left" : "public int scan(String periodStr, final int position)",
      "right" : "public int scan(String periodStr, final int position)",
      "info" : "MethodDeclaration[31873-32749]:MethodDeclaration[31960-32836]"
    }, {
      "left" : "PluralAffix",
      "right" : "PluralAffix",
      "info" : "TypeDeclaration[32839-35352]:TypeDeclaration[32926-35439]"
    }, {
      "left" : "private final String iSingularText;",
      "right" : "private final String iSingularText;",
      "info" : "FieldDeclaration[33054-33089]:FieldDeclaration[33141-33176]"
    }, {
      "left" : "private final String iPluralText;",
      "right" : "private final String iPluralText;",
      "info" : "FieldDeclaration[33098-33131]:FieldDeclaration[33185-33218]"
    }, {
      "left" : "PluralAffix(String singularText, String pluralText)",
      "right" : "PluralAffix(String singularText, String pluralText)",
      "info" : "MethodDeclaration[33141-33284]:MethodDeclaration[33228-33371]"
    }, {
      "left" : "public int calculatePrintedLength(int value)",
      "right" : "public int calculatePrintedLength(int value)",
      "info" : "MethodDeclaration[33294-33422]:MethodDeclaration[33381-33509]"
    }, {
      "left" : "public void printTo(StringBuffer buf, int value)",
      "right" : "public void printTo(StringBuffer buf, int value)",
      "info" : "MethodDeclaration[33432-33558]:MethodDeclaration[33519-33645]"
    }, {
      "left" : "public void printTo(Writer out, int value) throws IOException",
      "right" : "public void printTo(Writer out, int value) throws IOException",
      "info" : "MethodDeclaration[33568-33706]:MethodDeclaration[33655-33793]"
    }, {
      "left" : "public int parse(String periodStr, int position)",
      "right" : "public int parse(String periodStr, int position)",
      "info" : "MethodDeclaration[33716-34447]:MethodDeclaration[33803-34534]"
    }, {
      "left" : "public int scan(String periodStr, final int position)",
      "right" : "public int scan(String periodStr, final int position)",
      "info" : "MethodDeclaration[34457-35346]:MethodDeclaration[34544-35433]"
    }, {
      "left" : "CompositeAffix",
      "right" : "CompositeAffix",
      "info" : "TypeDeclaration[35436-36828]:TypeDeclaration[35523-36915]"
    }, {
      "left" : "private final PeriodFieldAffix iLeft;",
      "right" : "private final PeriodFieldAffix iLeft;",
      "info" : "FieldDeclaration[35594-35631]:FieldDeclaration[35681-35718]"
    }, {
      "left" : "private final PeriodFieldAffix iRight;",
      "right" : "private final PeriodFieldAffix iRight;",
      "info" : "FieldDeclaration[35640-35678]:FieldDeclaration[35727-35765]"
    }, {
      "left" : "CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right)",
      "right" : "CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right)",
      "info" : "MethodDeclaration[35688-35815]:MethodDeclaration[35775-35902]"
    }, {
      "left" : "public int calculatePrintedLength(int value)",
      "right" : "public int calculatePrintedLength(int value)",
      "info" : "MethodDeclaration[35825-35992]:MethodDeclaration[35912-36079]"
    }, {
      "left" : "public void printTo(StringBuffer buf, int value)",
      "right" : "public void printTo(StringBuffer buf, int value)",
      "info" : "MethodDeclaration[36002-36141]:MethodDeclaration[36089-36228]"
    }, {
      "left" : "public void printTo(Writer out, int value) throws IOException",
      "right" : "public void printTo(Writer out, int value) throws IOException",
      "info" : "MethodDeclaration[36151-36303]:MethodDeclaration[36238-36390]"
    }, {
      "left" : "public int parse(String periodStr, int position)",
      "right" : "public int parse(String periodStr, int position)",
      "info" : "MethodDeclaration[36313-36568]:MethodDeclaration[36400-36655]"
    }, {
      "left" : "public int scan(String periodStr, final int position)",
      "right" : "public int scan(String periodStr, final int position)",
      "info" : "MethodDeclaration[36578-36822]:MethodDeclaration[36665-36909]"
    }, {
      "left" : "FieldFormatter",
      "right" : "FieldFormatter",
      "info" : "TypeDeclaration[36912-56330]:TypeDeclaration[36999-56417]"
    }, {
      "left" : "private final int iMinPrintedDigits;",
      "right" : "private final int iMinPrintedDigits;",
      "info" : "FieldDeclaration[37094-37130]:FieldDeclaration[37181-37217]"
    }, {
      "left" : "private final int iPrintZeroSetting;",
      "right" : "private final int iPrintZeroSetting;",
      "info" : "FieldDeclaration[37139-37175]:FieldDeclaration[37226-37262]"
    }, {
      "left" : "private final int iMaxParsedDigits;",
      "right" : "private final int iMaxParsedDigits;",
      "info" : "FieldDeclaration[37184-37219]:FieldDeclaration[37271-37306]"
    }, {
      "left" : "private final boolean iRejectSignedValues;",
      "right" : "private final boolean iRejectSignedValues;",
      "info" : "FieldDeclaration[37228-37270]:FieldDeclaration[37315-37357]"
    }, {
      "left" : "private final int iFieldType;",
      "right" : "private final int iFieldType;",
      "info" : "FieldDeclaration[37288-37374]:FieldDeclaration[37375-37461]"
    }, {
      "left" : "private final FieldFormatter[] iFieldFormatters;",
      "right" : "private final FieldFormatter[] iFieldFormatters;",
      "info" : "FieldDeclaration[37383-37596]:FieldDeclaration[37470-37683]"
    }, {
      "left" : "private final PeriodFieldAffix iPrefix;",
      "right" : "private final PeriodFieldAffix iPrefix;",
      "info" : "FieldDeclaration[37614-37653]:FieldDeclaration[37701-37740]"
    }, {
      "left" : "private final PeriodFieldAffix iSuffix;",
      "right" : "private final PeriodFieldAffix iSuffix;",
      "info" : "FieldDeclaration[37662-37701]:FieldDeclaration[37749-37788]"
    }, {
      "left" : "FieldFormatter(int minPrintedDigits, int printZeroSetting,\n                       int maxParsedDigits, boolean rejectSignedValues,\n                       int fieldType, FieldFormatter[] fieldFormatters,\n                       PeriodFieldAffix prefix, PeriodFieldAffix suffix)",
      "right" : "FieldFormatter(int minPrintedDigits, int printZeroSetting,\n                       int maxParsedDigits, boolean rejectSignedValues,\n                       int fieldType, FieldFormatter[] fieldFormatters,\n                       PeriodFieldAffix prefix, PeriodFieldAffix suffix)",
      "info" : "MethodDeclaration[37711-38344]:MethodDeclaration[37798-38431]"
    }, {
      "left" : "FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix)",
      "right" : "FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix)",
      "info" : "MethodDeclaration[38354-38945]:MethodDeclaration[38441-39032]"
    }, {
      "left" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "right" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "info" : "MethodDeclaration[38955-39280]:MethodDeclaration[39042-39367]"
    }, {
      "left" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "right" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[39290-40623]:MethodDeclaration[39377-40710]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[40641-41825]:MethodDeclaration[40728-41912]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "info" : "MethodDeclaration[41835-43028]:MethodDeclaration[41922-43115]"
    }, {
      "left" : "public int parseInto(\n                ReadWritablePeriod period, String text, \n                int position, Locale locale)",
      "right" : "public int parseInto(\n                ReadWritablePeriod period, String text, \n                int position, Locale locale)",
      "info" : "MethodDeclaration[43038-49436]:MethodDeclaration[43125-49523]"
    }, {
      "left" : "private int parseInt(String text, int position, int length)",
      "right" : "private int parseInt(String text, int position, int length)",
      "info" : "MethodDeclaration[49446-50584]:MethodDeclaration[49533-50671]"
    }, {
      "left" : "long getFieldValue(ReadablePeriod period)",
      "right" : "long getFieldValue(ReadablePeriod period)",
      "info" : "MethodDeclaration[50594-53964]:MethodDeclaration[50681-54051]"
    }, {
      "left" : "boolean isZero(ReadablePeriod period)",
      "right" : "boolean isZero(ReadablePeriod period)",
      "info" : "MethodDeclaration[53974-54230]:MethodDeclaration[54061-54317]"
    }, {
      "left" : "boolean isSupported(PeriodType type, int field)",
      "right" : "boolean isSupported(PeriodType type, int field)",
      "info" : "MethodDeclaration[54240-55371]:MethodDeclaration[54327-55458]"
    }, {
      "left" : "void setFieldValue(ReadWritablePeriod period, int field, int value)",
      "right" : "void setFieldValue(ReadWritablePeriod period, int field, int value)",
      "info" : "MethodDeclaration[55381-56253]:MethodDeclaration[55468-56340]"
    }, {
      "left" : "int getFieldType()",
      "right" : "int getFieldType()",
      "info" : "MethodDeclaration[56263-56324]:MethodDeclaration[56350-56411]"
    }, {
      "left" : "Literal",
      "right" : "Literal",
      "info" : "TypeDeclaration[56414-57561]:TypeDeclaration[56501-57648]"
    }, {
      "left" : "static final Literal EMPTY = new Literal(\"\");",
      "right" : "static final Literal EMPTY = new Literal(\"\");",
      "info" : "FieldDeclaration[56559-56604]:FieldDeclaration[56646-56691]"
    }, {
      "left" : "private final String iText;",
      "right" : "private final String iText;",
      "info" : "FieldDeclaration[56613-56640]:FieldDeclaration[56700-56727]"
    }, {
      "left" : "Literal(String text)",
      "right" : "Literal(String text)",
      "info" : "MethodDeclaration[56650-56708]:MethodDeclaration[56737-56795]"
    }, {
      "left" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "right" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "info" : "MethodDeclaration[56718-56831]:MethodDeclaration[56805-56918]"
    }, {
      "left" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "right" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[56841-56959]:MethodDeclaration[56928-57046]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[56969-57087]:MethodDeclaration[57056-57174]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "info" : "MethodDeclaration[57097-57227]:MethodDeclaration[57184-57314]"
    }, {
      "left" : "public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale)",
      "right" : "public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale)",
      "info" : "MethodDeclaration[57237-57555]:MethodDeclaration[57324-57642]"
    }, {
      "left" : "Separator",
      "right" : "Separator",
      "info" : "TypeDeclaration[57645-64604]:TypeDeclaration[57732-64691]"
    }, {
      "left" : "private final String iText;",
      "right" : "private final String iText;",
      "info" : "FieldDeclaration[57870-57897]:FieldDeclaration[57957-57984]"
    }, {
      "left" : "private final String iFinalText;",
      "right" : "private final String iFinalText;",
      "info" : "FieldDeclaration[57906-57938]:FieldDeclaration[57993-58025]"
    }, {
      "left" : "private final String[] iParsedForms;",
      "right" : "private final String[] iParsedForms;",
      "info" : "FieldDeclaration[57947-57983]:FieldDeclaration[58034-58070]"
    }, {
      "left" : "private final boolean iUseBefore;",
      "right" : "private final boolean iUseBefore;",
      "info" : "FieldDeclaration[57993-58026]:FieldDeclaration[58080-58113]"
    }, {
      "left" : "private final boolean iUseAfter;",
      "right" : "private final boolean iUseAfter;",
      "info" : "FieldDeclaration[58035-58067]:FieldDeclaration[58122-58154]"
    }, {
      "left" : "private final PeriodPrinter iBeforePrinter;",
      "right" : "private final PeriodPrinter iBeforePrinter;",
      "info" : "FieldDeclaration[58077-58120]:FieldDeclaration[58164-58207]"
    }, {
      "left" : "private volatile PeriodPrinter iAfterPrinter;",
      "right" : "private volatile PeriodPrinter iAfterPrinter;",
      "info" : "FieldDeclaration[58129-58174]:FieldDeclaration[58216-58261]"
    }, {
      "left" : "private final PeriodParser iBeforeParser;",
      "right" : "private final PeriodParser iBeforeParser;",
      "info" : "FieldDeclaration[58183-58224]:FieldDeclaration[58270-58311]"
    }, {
      "left" : "private volatile PeriodParser iAfterParser;",
      "right" : "private volatile PeriodParser iAfterParser;",
      "info" : "FieldDeclaration[58233-58276]:FieldDeclaration[58320-58363]"
    }, {
      "left" : "Separator(String text, String finalText, String[] variants,\n                PeriodPrinter beforePrinter, PeriodParser beforeParser,\n                boolean useBefore, boolean useAfter)",
      "right" : "Separator(String text, String finalText, String[] variants,\n                PeriodPrinter beforePrinter, PeriodParser beforeParser,\n                boolean useBefore, boolean useAfter)",
      "info" : "MethodDeclaration[58286-59557]:MethodDeclaration[58373-59644]"
    }, {
      "left" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "right" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "info" : "MethodDeclaration[59567-59890]:MethodDeclaration[59654-59977]"
    }, {
      "left" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "right" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[59900-60918]:MethodDeclaration[59987-61005]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[60928-61847]:MethodDeclaration[61015-61934]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "info" : "MethodDeclaration[61857-62786]:MethodDeclaration[61944-62873]"
    }, {
      "left" : "public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale)",
      "right" : "public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale)",
      "info" : "MethodDeclaration[62796-64399]:MethodDeclaration[62883-64486]"
    }, {
      "left" : "Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser)",
      "right" : "Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser)",
      "info" : "MethodDeclaration[64409-64598]:MethodDeclaration[64496-64685]"
    }, {
      "left" : "Composite",
      "right" : "Composite",
      "info" : "TypeDeclaration[64688-68710]:TypeDeclaration[64775-68797]"
    }, {
      "left" : "private final PeriodPrinter[] iPrinters;",
      "right" : "private final PeriodPrinter[] iPrinters;",
      "info" : "FieldDeclaration[64880-64920]:FieldDeclaration[64967-65007]"
    }, {
      "left" : "private final PeriodParser[] iParsers;",
      "right" : "private final PeriodParser[] iParsers;",
      "info" : "FieldDeclaration[64929-64967]:FieldDeclaration[65016-65054]"
    }, {
      "left" : "Composite(List<Object> elementPairs)",
      "right" : "Composite(List<Object> elementPairs)",
      "info" : "MethodDeclaration[64977-65661]:MethodDeclaration[65064-65748]"
    }, {
      "left" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "right" : "public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale)",
      "info" : "MethodDeclaration[65671-66033]:MethodDeclaration[65758-66120]"
    }, {
      "left" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "right" : "public int calculatePrintedLength(ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[66043-66366]:MethodDeclaration[66130-66453]"
    }, {
      "left" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "right" : "public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale)",
      "info" : "MethodDeclaration[66376-66664]:MethodDeclaration[66463-66751]"
    }, {
      "left" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "right" : "public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException",
      "info" : "MethodDeclaration[66674-66975]:MethodDeclaration[66761-67062]"
    }, {
      "left" : "public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale)",
      "right" : "public int parseInto(\n                ReadWritablePeriod period, String periodStr,\n                int position, Locale locale)",
      "info" : "MethodDeclaration[66985-67504]:MethodDeclaration[67072-67591]"
    }, {
      "left" : "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList)",
      "right" : "private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList)",
      "info" : "MethodDeclaration[67514-68462]:MethodDeclaration[67601-68549]"
    }, {
      "left" : "private void addArrayToList(List<Object> list, Object[] array)",
      "right" : "private void addArrayToList(List<Object> list, Object[] array)",
      "info" : "MethodDeclaration[68472-68704]:MethodDeclaration[68559-68791]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3652-3676]:Block[3652-3676]"
    }, {
      "left" : "clear();",
      "right" : "clear();",
      "info" : "ExpressionStatement[3662-3670]:ExpressionStatement[3662-3670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4495-4689]:Block[4495-4689]"
    }, {
      "left" : "PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);",
      "right" : "PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);",
      "info" : "VariableDeclarationStatement[4505-4585]:VariableDeclarationStatement[4505-4585]"
    }, {
      "left" : "iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();",
      "right" : "iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();",
      "info" : "ExpressionStatement[4594-4657]:ExpressionStatement[4594-4657]"
    }, {
      "left" : "return formatter;",
      "right" : "return formatter;",
      "info" : "ReturnStatement[4666-4683]:ReturnStatement[4666-4683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5197-5309]:Block[5197-5309]"
    }, {
      "left" : "if (iNotPrinter)",
      "right" : "if (iNotPrinter)",
      "info" : "IfStatement[5207-5260]:IfStatement[5207-5260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5224-5260]:Block[5224-5260]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5238-5250]:ReturnStatement[5238-5250]"
    }, {
      "left" : "return toFormatter().getPrinter();",
      "right" : "return toFormatter().getPrinter();",
      "info" : "ReturnStatement[5269-5303]:ReturnStatement[5269-5303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5811-5921]:Block[5811-5921]"
    }, {
      "left" : "if (iNotParser)",
      "right" : "if (iNotParser)",
      "info" : "IfStatement[5821-5873]:IfStatement[5821-5873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5837-5873]:Block[5837-5873]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5851-5863]:ReturnStatement[5851-5863]"
    }, {
      "left" : "return toFormatter().getParser();",
      "right" : "return toFormatter().getParser();",
      "info" : "ReturnStatement[5882-5915]:ReturnStatement[5882-5915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6122-6564]:Block[6122-6564]"
    }, {
      "left" : "iMinPrintedDigits = 1;",
      "right" : "iMinPrintedDigits = 1;",
      "info" : "ExpressionStatement[6132-6154]:ExpressionStatement[6132-6154]"
    }, {
      "left" : "iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;",
      "right" : "iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;",
      "info" : "ExpressionStatement[6163-6206]:ExpressionStatement[6163-6206]"
    }, {
      "left" : "iMaxParsedDigits = 10;",
      "right" : "iMaxParsedDigits = 10;",
      "info" : "ExpressionStatement[6215-6237]:ExpressionStatement[6215-6237]"
    }, {
      "left" : "iRejectSignedValues = false;",
      "right" : "iRejectSignedValues = false;",
      "info" : "ExpressionStatement[6246-6274]:ExpressionStatement[6246-6274]"
    }, {
      "left" : "iPrefix = null;",
      "right" : "iPrefix = null;",
      "info" : "ExpressionStatement[6283-6298]:ExpressionStatement[6283-6298]"
    }, {
      "left" : "if (iElementPairs == null)",
      "right" : "if (iElementPairs == null)",
      "info" : "IfStatement[6307-6450]:IfStatement[6307-6450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6334-6398]:Block[6334-6398]"
    }, {
      "left" : "iElementPairs = new ArrayList<Object>();",
      "right" : "iElementPairs = new ArrayList<Object>();",
      "info" : "ExpressionStatement[6348-6388]:ExpressionStatement[6348-6388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6404-6450]:Block[6404-6450]"
    }, {
      "left" : "iElementPairs.clear();",
      "right" : "iElementPairs.clear();",
      "info" : "ExpressionStatement[6418-6440]:ExpressionStatement[6418-6440]"
    }, {
      "left" : "iNotPrinter = false;",
      "right" : "iNotPrinter = false;",
      "info" : "ExpressionStatement[6459-6479]:ExpressionStatement[6459-6479]"
    }, {
      "left" : "iNotParser = false;",
      "right" : "iNotParser = false;",
      "info" : "ExpressionStatement[6488-6507]:ExpressionStatement[6488-6507]"
    }, {
      "left" : "iFieldFormatters = new FieldFormatter[10];",
      "right" : "iFieldFormatters = new FieldFormatter[10];",
      "info" : "ExpressionStatement[6516-6558]:ExpressionStatement[6516-6558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6734-6965]:Block[6734-6965]"
    }, {
      "left" : "if (formatter == null)",
      "right" : "if (formatter == null)",
      "info" : "IfStatement[6744-6851]:IfStatement[6744-6851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6767-6851]:Block[6767-6851]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No formatter supplied\");",
      "right" : "throw new IllegalArgumentException(\"No formatter supplied\");",
      "info" : "ThrowStatement[6781-6841]:ThrowStatement[6781-6841]"
    }, {
      "left" : "clearPrefix();",
      "right" : "clearPrefix();",
      "info" : "ExpressionStatement[6860-6874]:ExpressionStatement[6860-6874]"
    }, {
      "left" : "append0(formatter.getPrinter(), formatter.getParser());",
      "right" : "append0(formatter.getPrinter(), formatter.getParser());",
      "info" : "ExpressionStatement[6883-6938]:ExpressionStatement[6883-6938]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6947-6959]:ReturnStatement[6947-6959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7571-7796]:Block[7571-7796]"
    }, {
      "left" : "if (printer == null && parser == null)",
      "right" : "if (printer == null && parser == null)",
      "info" : "IfStatement[7581-7712]:IfStatement[7581-7712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7620-7712]:Block[7620-7712]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No printer or parser supplied\");",
      "right" : "throw new IllegalArgumentException(\"No printer or parser supplied\");",
      "info" : "ThrowStatement[7634-7702]:ThrowStatement[7634-7702]"
    }, {
      "left" : "clearPrefix();",
      "right" : "clearPrefix();",
      "info" : "ExpressionStatement[7721-7735]:ExpressionStatement[7721-7735]"
    }, {
      "left" : "append0(printer, parser);",
      "right" : "append0(printer, parser);",
      "info" : "ExpressionStatement[7744-7769]:ExpressionStatement[7744-7769]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7778-7790]:ReturnStatement[7778-7790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8101-8346]:Block[8101-8346]"
    }, {
      "left" : "if (text == null)",
      "right" : "if (text == null)",
      "info" : "IfStatement[8111-8216]:IfStatement[8111-8216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8129-8216]:Block[8129-8216]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Literal must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Literal must not be null\");",
      "info" : "ThrowStatement[8143-8206]:ThrowStatement[8143-8206]"
    }, {
      "left" : "clearPrefix();",
      "right" : "clearPrefix();",
      "info" : "ExpressionStatement[8225-8239]:ExpressionStatement[8225-8239]"
    }, {
      "left" : "Literal literal = new Literal(text);",
      "right" : "Literal literal = new Literal(text);",
      "info" : "VariableDeclarationStatement[8248-8284]:VariableDeclarationStatement[8248-8284]"
    }, {
      "left" : "append0(literal, literal);",
      "right" : "append0(literal, literal);",
      "info" : "ExpressionStatement[8293-8319]:ExpressionStatement[8293-8319]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8328-8340]:ReturnStatement[8328-8340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8709-8776]:Block[8709-8776]"
    }, {
      "left" : "iMinPrintedDigits = minDigits;",
      "right" : "iMinPrintedDigits = minDigits;",
      "info" : "ExpressionStatement[8719-8749]:ExpressionStatement[8719-8749]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8758-8770]:ReturnStatement[8758-8770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9047-9113]:Block[9047-9113]"
    }, {
      "left" : "iMaxParsedDigits = maxDigits;",
      "right" : "iMaxParsedDigits = maxDigits;",
      "info" : "ExpressionStatement[9057-9086]:ExpressionStatement[9057-9086]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9095-9107]:ReturnStatement[9095-9107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9326-9387]:Block[9326-9387]"
    }, {
      "left" : "iRejectSignedValues = v;",
      "right" : "iRejectSignedValues = v;",
      "info" : "ExpressionStatement[9336-9360]:ExpressionStatement[9336-9360]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9369-9381]:ReturnStatement[9369-9381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9783-9863]:Block[9783-9863]"
    }, {
      "left" : "iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;",
      "right" : "iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;",
      "info" : "ExpressionStatement[9793-9836]:ExpressionStatement[9793-9836]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9845-9857]:ReturnStatement[9845-9857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10208-10289]:Block[10208-10289]"
    }, {
      "left" : "iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST;",
      "right" : "iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST;",
      "info" : "ExpressionStatement[10218-10262]:ExpressionStatement[10218-10262]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10271-10283]:ReturnStatement[10271-10283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10520-10601]:Block[10520-10601]"
    }, {
      "left" : "iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED;",
      "right" : "iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED;",
      "info" : "ExpressionStatement[10530-10574]:ExpressionStatement[10530-10574]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10583-10595]:ReturnStatement[10583-10595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10912-10987]:Block[10912-10987]"
    }, {
      "left" : "iPrintZeroSetting = PRINT_ZERO_ALWAYS;",
      "right" : "iPrintZeroSetting = PRINT_ZERO_ALWAYS;",
      "info" : "ExpressionStatement[10922-10960]:ExpressionStatement[10922-10960]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[10969-10981]:ReturnStatement[10969-10981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11378-11452]:Block[11378-11452]"
    }, {
      "left" : "iPrintZeroSetting = PRINT_ZERO_NEVER;",
      "right" : "iPrintZeroSetting = PRINT_ZERO_NEVER;",
      "info" : "ExpressionStatement[11388-11425]:ExpressionStatement[11388-11425]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[11434-11446]:ReturnStatement[11434-11446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11890-12037]:Block[11890-12037]"
    }, {
      "left" : "if (text == null)",
      "right" : "if (text == null)",
      "info" : "IfStatement[11900-11979]:IfStatement[11900-11979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11918-11979]:Block[11918-11979]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[11932-11969]:ThrowStatement[11932-11969]"
    }, {
      "left" : "return appendPrefix(new SimpleAffix(text));",
      "right" : "return appendPrefix(new SimpleAffix(text));",
      "info" : "ReturnStatement[11988-12031]:ReturnStatement[11988-12031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12668-12865]:Block[12668-12865]"
    }, {
      "left" : "if (singularText == null || pluralText == null)",
      "right" : "if (singularText == null || pluralText == null)",
      "info" : "IfStatement[12678-12787]:IfStatement[12678-12787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12726-12787]:Block[12726-12787]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[12740-12777]:ThrowStatement[12740-12777]"
    }, {
      "left" : "return appendPrefix(new PluralAffix(singularText, pluralText));",
      "right" : "return appendPrefix(new PluralAffix(singularText, pluralText));",
      "info" : "ReturnStatement[12796-12859]:ReturnStatement[12796-12859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13202-13445]:Block[13202-13445]"
    }, {
      "left" : "if (prefix == null)",
      "right" : "if (prefix == null)",
      "info" : "IfStatement[13212-13293]:IfStatement[13212-13293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13232-13293]:Block[13232-13293]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[13246-13283]:ThrowStatement[13246-13283]"
    }, {
      "left" : "if (iPrefix != null)",
      "right" : "if (iPrefix != null)",
      "info" : "IfStatement[13302-13392]:IfStatement[13302-13392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13323-13392]:Block[13323-13392]"
    }, {
      "left" : "prefix = new CompositeAffix(iPrefix, prefix);",
      "right" : "prefix = new CompositeAffix(iPrefix, prefix);",
      "info" : "ExpressionStatement[13337-13382]:ExpressionStatement[13337-13382]"
    }, {
      "left" : "iPrefix = prefix;",
      "right" : "iPrefix = prefix;",
      "info" : "ExpressionStatement[13401-13418]:ExpressionStatement[13401-13418]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13427-13439]:ReturnStatement[13427-13439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13876-13932]:Block[13876-13932]"
    }, {
      "left" : "appendField(YEARS);",
      "right" : "appendField(YEARS);",
      "info" : "ExpressionStatement[13886-13905]:ExpressionStatement[13886-13905]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[13914-13926]:ReturnStatement[13914-13926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14287-14344]:Block[14287-14344]"
    }, {
      "left" : "appendField(MONTHS);",
      "right" : "appendField(MONTHS);",
      "info" : "ExpressionStatement[14297-14317]:ExpressionStatement[14297-14317]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14326-14338]:ReturnStatement[14326-14338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14697-14753]:Block[14697-14753]"
    }, {
      "left" : "appendField(WEEKS);",
      "right" : "appendField(WEEKS);",
      "info" : "ExpressionStatement[14707-14726]:ExpressionStatement[14707-14726]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14735-14747]:ReturnStatement[14735-14747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15104-15159]:Block[15104-15159]"
    }, {
      "left" : "appendField(DAYS);",
      "right" : "appendField(DAYS);",
      "info" : "ExpressionStatement[15114-15132]:ExpressionStatement[15114-15132]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15141-15153]:ReturnStatement[15141-15153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15512-15568]:Block[15512-15568]"
    }, {
      "left" : "appendField(HOURS);",
      "right" : "appendField(HOURS);",
      "info" : "ExpressionStatement[15522-15541]:ExpressionStatement[15522-15541]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15550-15562]:ReturnStatement[15550-15562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15925-15983]:Block[15925-15983]"
    }, {
      "left" : "appendField(MINUTES);",
      "right" : "appendField(MINUTES);",
      "info" : "ExpressionStatement[15935-15956]:ExpressionStatement[15935-15956]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15965-15977]:ReturnStatement[15965-15977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16340-16398]:Block[16340-16398]"
    }, {
      "left" : "appendField(SECONDS);",
      "right" : "appendField(SECONDS);",
      "info" : "ExpressionStatement[16350-16371]:ExpressionStatement[16350-16371]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16380-16392]:ReturnStatement[16380-16392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16713-16778]:Block[16713-16778]"
    }, {
      "left" : "appendField(SECONDS_MILLIS);",
      "right" : "appendField(SECONDS_MILLIS);",
      "info" : "ExpressionStatement[16723-16751]:ExpressionStatement[16723-16751]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16760-16772]:ReturnStatement[16760-16772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17111-17185]:Block[17111-17185]"
    }, {
      "left" : "appendField(SECONDS_OPTIONAL_MILLIS);",
      "right" : "appendField(SECONDS_OPTIONAL_MILLIS);",
      "info" : "ExpressionStatement[17121-17158]:ExpressionStatement[17121-17158]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17167-17179]:ReturnStatement[17167-17179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17540-17597]:Block[17540-17597]"
    }, {
      "left" : "appendField(MILLIS);",
      "right" : "appendField(MILLIS);",
      "info" : "ExpressionStatement[17550-17570]:ExpressionStatement[17550-17570]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17579-17591]:ReturnStatement[17579-17591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17899-17954]:Block[17899-17954]"
    }, {
      "left" : "appendField(7, 3);",
      "right" : "appendField(7, 3);",
      "info" : "ExpressionStatement[17909-17927]:ExpressionStatement[17909-17927]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[17936-17948]:ReturnStatement[17936-17948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17995-18048]:Block[17995-18048]"
    }, {
      "left" : "appendField(type, iMinPrintedDigits);",
      "right" : "appendField(type, iMinPrintedDigits);",
      "info" : "ExpressionStatement[18005-18042]:ExpressionStatement[18005-18042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18105-18379]:Block[18105-18379]"
    }, {
      "left" : "FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n            iMaxParsedDigits, iRejectSignedValues, type, iFieldFormatters, iPrefix, null);",
      "right" : "FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n            iMaxParsedDigits, iRejectSignedValues, type, iFieldFormatters, iPrefix, null);",
      "info" : "VariableDeclarationStatement[18115-18278]:VariableDeclarationStatement[18115-18278]"
    }, {
      "left" : "append0(field, field);",
      "right" : "append0(field, field);",
      "info" : "ExpressionStatement[18287-18309]:ExpressionStatement[18287-18309]"
    }, {
      "left" : "iFieldFormatters[type] = field;",
      "right" : "iFieldFormatters[type] = field;",
      "info" : "ExpressionStatement[18318-18349]:ExpressionStatement[18318-18349]"
    }, {
      "left" : "iPrefix = null;",
      "right" : "iPrefix = null;",
      "info" : "ExpressionStatement[18358-18373]:ExpressionStatement[18358-18373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18885-19032]:Block[18885-19032]"
    }, {
      "left" : "if (text == null)",
      "right" : "if (text == null)",
      "info" : "IfStatement[18895-18974]:IfStatement[18895-18974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18913-18974]:Block[18913-18974]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[18927-18964]:ThrowStatement[18927-18964]"
    }, {
      "left" : "return appendSuffix(new SimpleAffix(text));",
      "right" : "return appendSuffix(new SimpleAffix(text));",
      "info" : "ReturnStatement[18983-19026]:ReturnStatement[18983-19026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19730-19927]:Block[19730-19927]"
    }, {
      "left" : "if (singularText == null || pluralText == null)",
      "right" : "if (singularText == null || pluralText == null)",
      "info" : "IfStatement[19740-19849]:IfStatement[19740-19849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19788-19849]:Block[19788-19849]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[19802-19839]:ThrowStatement[19802-19839]"
    }, {
      "left" : "return appendSuffix(new PluralAffix(singularText, pluralText));",
      "right" : "return appendSuffix(new PluralAffix(singularText, pluralText));",
      "info" : "ReturnStatement[19858-19921]:ReturnStatement[19858-19921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20333-21309]:Block[20333-21309]"
    }, {
      "left" : "final Object originalPrinter;",
      "right" : "final Object originalPrinter;",
      "info" : "VariableDeclarationStatement[20343-20372]:VariableDeclarationStatement[20343-20372]"
    }, {
      "left" : "final Object originalParser;",
      "right" : "final Object originalParser;",
      "info" : "VariableDeclarationStatement[20381-20409]:VariableDeclarationStatement[20381-20409]"
    }, {
      "left" : "if (iElementPairs.size() > 0)",
      "right" : "if (iElementPairs.size() > 0)",
      "info" : "IfStatement[20418-20696]:IfStatement[20418-20696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20448-20608]:Block[20448-20608]"
    }, {
      "left" : "originalPrinter = iElementPairs.get(iElementPairs.size() - 2);",
      "right" : "originalPrinter = iElementPairs.get(iElementPairs.size() - 2);",
      "info" : "ExpressionStatement[20462-20524]:ExpressionStatement[20462-20524]"
    }, {
      "left" : "originalParser = iElementPairs.get(iElementPairs.size() - 1);",
      "right" : "originalParser = iElementPairs.get(iElementPairs.size() - 1);",
      "info" : "ExpressionStatement[20537-20598]:ExpressionStatement[20537-20598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20614-20696]:Block[20614-20696]"
    }, {
      "left" : "originalPrinter = null;",
      "right" : "originalPrinter = null;",
      "info" : "ExpressionStatement[20628-20651]:ExpressionStatement[20628-20651]"
    }, {
      "left" : "originalParser = null;",
      "right" : "originalParser = null;",
      "info" : "ExpressionStatement[20664-20686]:ExpressionStatement[20664-20686]"
    }, {
      "left" : "if (originalPrinter == null || originalParser == null ||\n                originalPrinter != originalParser ||\n                !(originalPrinter instanceof FieldFormatter))",
      "right" : "if (originalPrinter == null || originalParser == null ||\n                originalPrinter != originalParser ||\n                !(originalPrinter instanceof FieldFormatter))",
      "info" : "IfStatement[20706-20965]:IfStatement[20706-20965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20878-20965]:Block[20878-20965]"
    }, {
      "left" : "throw new IllegalStateException(\"No field to apply suffix to\");",
      "right" : "throw new IllegalStateException(\"No field to apply suffix to\");",
      "info" : "ThrowStatement[20892-20955]:ThrowStatement[20892-20955]"
    }, {
      "left" : "clearPrefix();",
      "right" : "clearPrefix();",
      "info" : "ExpressionStatement[20975-20989]:ExpressionStatement[20975-20989]"
    }, {
      "left" : "FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",
      "right" : "FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",
      "info" : "VariableDeclarationStatement[20998-21085]:VariableDeclarationStatement[20998-21085]"
    }, {
      "left" : "iElementPairs.set(iElementPairs.size() - 2, newField);",
      "right" : "iElementPairs.set(iElementPairs.size() - 2, newField);",
      "info" : "ExpressionStatement[21094-21148]:ExpressionStatement[21094-21148]"
    }, {
      "left" : "iElementPairs.set(iElementPairs.size() - 1, newField);",
      "right" : "iElementPairs.set(iElementPairs.size() - 1, newField);",
      "info" : "ExpressionStatement[21157-21211]:ExpressionStatement[21157-21211]"
    }, {
      "left" : "iFieldFormatters[newField.getFieldType()] = newField;",
      "right" : "iFieldFormatters[newField.getFieldType()] = newField;",
      "info" : "ExpressionStatement[21220-21273]:ExpressionStatement[21220-21273]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[21291-21303]:ReturnStatement[21291-21303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22111-22180]:Block[22111-22180]"
    }, {
      "left" : "return appendSeparator(text, text, null, true, true);",
      "right" : "return appendSeparator(text, text, null, true, true);",
      "info" : "ReturnStatement[22121-22174]:ReturnStatement[22121-22174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22904-22974]:Block[22904-22974]"
    }, {
      "left" : "return appendSeparator(text, text, null, false, true);",
      "right" : "return appendSeparator(text, text, null, false, true);",
      "info" : "ReturnStatement[22914-22968]:ReturnStatement[22914-22968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23700-23770]:Block[23700-23770]"
    }, {
      "left" : "return appendSeparator(text, text, null, true, false);",
      "right" : "return appendSeparator(text, text, null, true, false);",
      "info" : "ReturnStatement[23710-23764]:ReturnStatement[23710-23764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24821-24895]:Block[24821-24895]"
    }, {
      "left" : "return appendSeparator(text, finalText, null, true, true);",
      "right" : "return appendSeparator(text, finalText, null, true, true);",
      "info" : "ReturnStatement[24831-24889]:ReturnStatement[24831-24889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26096-26174]:Block[26096-26174]"
    }, {
      "left" : "return appendSeparator(text, finalText, variants, true, true);",
      "right" : "return appendSeparator(text, finalText, variants, true, true);",
      "info" : "ReturnStatement[26106-26168]:ReturnStatement[26106-26168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26416-27997]:Block[26416-27997]"
    }, {
      "left" : "if (text == null || finalText == null)",
      "right" : "if (text == null || finalText == null)",
      "info" : "IfStatement[26426-26526]:IfStatement[26426-26526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26465-26526]:Block[26465-26526]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[26479-26516]:ThrowStatement[26479-26516]"
    }, {
      "left" : "clearPrefix();",
      "right" : "clearPrefix();",
      "info" : "ExpressionStatement[26536-26550]:ExpressionStatement[26536-26550]"
    }, {
      "left" : "List<Object> pairs = iElementPairs;",
      "right" : "List<Object> pairs = iElementPairs;",
      "info" : "VariableDeclarationStatement[26608-26643]:VariableDeclarationStatement[26608-26643]"
    }, {
      "left" : "if (pairs.size() == 0)",
      "right" : "if (pairs.size() == 0)",
      "info" : "IfStatement[26652-27002]:IfStatement[26652-27002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26675-27002]:Block[26675-27002]"
    }, {
      "left" : "if (useAfter && useBefore == false)",
      "right" : "if (useAfter && useBefore == false)",
      "info" : "IfStatement[26689-26967]:IfStatement[26689-26967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26725-26967]:Block[26725-26967]"
    }, {
      "left" : "Separator separator = new Separator(\n                        text, finalText, variants,\n                        Literal.EMPTY, Literal.EMPTY, useBefore, useAfter);",
      "right" : "Separator separator = new Separator(\n                        text, finalText, variants,\n                        Literal.EMPTY, Literal.EMPTY, useBefore, useAfter);",
      "info" : "VariableDeclarationStatement[26743-26906]:VariableDeclarationStatement[26743-26906]"
    }, {
      "left" : "append0(separator, separator);",
      "right" : "append0(separator, separator);",
      "info" : "ExpressionStatement[26923-26953]:ExpressionStatement[26923-26953]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[26980-26992]:ReturnStatement[26980-26992]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[27061-27067]:VariableDeclarationStatement[27061-27067]"
    }, {
      "left" : "Separator lastSeparator = null;",
      "right" : "Separator lastSeparator = null;",
      "info" : "VariableDeclarationStatement[27076-27107]:VariableDeclarationStatement[27076-27107]"
    }, {
      "left" : "for (i=pairs.size(); --i>=0)",
      "right" : "for (i=pairs.size(); --i>=0)",
      "info" : "ForStatement[27116-27401]:ForStatement[27116-27401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27147-27401]:Block[27147-27401]"
    }, {
      "left" : "if (pairs.get(i) instanceof Separator)",
      "right" : "if (pairs.get(i) instanceof Separator)",
      "info" : "IfStatement[27161-27356]:IfStatement[27161-27356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27200-27356]:Block[27200-27356]"
    }, {
      "left" : "lastSeparator = (Separator) pairs.get(i);",
      "right" : "lastSeparator = (Separator) pairs.get(i);",
      "info" : "ExpressionStatement[27218-27259]:ExpressionStatement[27218-27259]"
    }, {
      "left" : "pairs = pairs.subList(i + 1, pairs.size());",
      "right" : "pairs = pairs.subList(i + 1, pairs.size());",
      "info" : "ExpressionStatement[27276-27319]:ExpressionStatement[27276-27319]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27336-27342]:BreakStatement[27336-27342]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[27369-27373]:ExpressionStatement[27369-27373]"
    }, {
      "left" : "if (lastSeparator != null && pairs.size() == 0)",
      "right" : "if (lastSeparator != null && pairs.size() == 0)",
      "info" : "IfStatement[27447-27961]:IfStatement[27447-27961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27495-27590]:Block[27495-27590]"
    }, {
      "left" : "throw new IllegalStateException(\"Cannot have two adjacent separators\");",
      "right" : "throw new IllegalStateException(\"Cannot have two adjacent separators\");",
      "info" : "ThrowStatement[27509-27580]:ThrowStatement[27509-27580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27596-27961]:Block[27596-27961]"
    }, {
      "left" : "Object[] comp = createComposite(pairs);",
      "right" : "Object[] comp = createComposite(pairs);",
      "info" : "VariableDeclarationStatement[27610-27649]:VariableDeclarationStatement[27610-27649]"
    }, {
      "left" : "pairs.clear();",
      "right" : "pairs.clear();",
      "info" : "ExpressionStatement[27662-27676]:ExpressionStatement[27662-27676]"
    }, {
      "left" : "Separator separator = new Separator(\n                    text, finalText, variants,\n                    (PeriodPrinter) comp[0], (PeriodParser) comp[1],\n                    useBefore, useAfter);",
      "right" : "Separator separator = new Separator(\n                    text, finalText, variants,\n                    (PeriodPrinter) comp[0], (PeriodParser) comp[1],\n                    useBefore, useAfter);",
      "info" : "VariableDeclarationStatement[27689-27883]:VariableDeclarationStatement[27689-27883]"
    }, {
      "left" : "pairs.add(separator);",
      "right" : "pairs.add(separator);",
      "info" : "ExpressionStatement[27896-27917]:ExpressionStatement[27896-27917]"
    }, {
      "left" : "pairs.add(separator);",
      "right" : "pairs.add(separator);",
      "info" : "ExpressionStatement[27930-27951]:ExpressionStatement[27930-27951]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[27979-27991]:ReturnStatement[27979-27991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28137-28286]:Block[28137-28286]"
    }, {
      "left" : "if (iPrefix != null)",
      "right" : "if (iPrefix != null)",
      "info" : "IfStatement[28147-28256]:IfStatement[28147-28256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28168-28256]:Block[28168-28256]"
    }, {
      "left" : "throw new IllegalStateException(\"Prefix not followed by field\");",
      "right" : "throw new IllegalStateException(\"Prefix not followed by field\");",
      "info" : "ThrowStatement[28182-28246]:ThrowStatement[28182-28246]"
    }, {
      "left" : "iPrefix = null;",
      "right" : "iPrefix = null;",
      "info" : "ExpressionStatement[28265-28280]:ExpressionStatement[28265-28280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28375-28556]:Block[28375-28556]"
    }, {
      "left" : "iElementPairs.add(printer);",
      "right" : "iElementPairs.add(printer);",
      "info" : "ExpressionStatement[28385-28412]:ExpressionStatement[28385-28412]"
    }, {
      "left" : "iElementPairs.add(parser);",
      "right" : "iElementPairs.add(parser);",
      "info" : "ExpressionStatement[28421-28447]:ExpressionStatement[28421-28447]"
    }, {
      "left" : "iNotPrinter |= (printer == null);",
      "right" : "iNotPrinter |= (printer == null);",
      "info" : "ExpressionStatement[28456-28489]:ExpressionStatement[28456-28489]"
    }, {
      "left" : "iNotParser |= (parser == null);",
      "right" : "iNotParser |= (parser == null);",
      "info" : "ExpressionStatement[28498-28529]:ExpressionStatement[28498-28529]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[28538-28550]:ReturnStatement[28538-28550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28749-29676]:Block[28749-29763]"
    }, {
      "left" : "if (notPrinter && notParser)",
      "right" : "if (notPrinter && notParser)",
      "info" : "IfStatement[28759-28898]:IfStatement[28759-28898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28788-28898]:Block[28788-28898]"
    }, {
      "left" : "throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");",
      "right" : "throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");",
      "info" : "ThrowStatement[28802-28888]:ThrowStatement[28802-28888]"
    }, {
      "left" : "int size = elementPairs.size();",
      "right" : "int size = elementPairs.size();",
      "info" : "VariableDeclarationStatement[28907-28938]:VariableDeclarationStatement[28907-28938]"
    }, {
      "left" : "if (size >= 2 && elementPairs.get(0) instanceof Separator)",
      "right" : "if (size >= 2 && elementPairs.get(0) instanceof Separator)",
      "info" : "IfStatement[28947-29300]:IfStatement[28947-29387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29006-29300]:Block[29140-29377]"
    }, {
      "left" : "Separator sep = (Separator) elementPairs.get(0);",
      "right" : "Separator sep = (Separator) elementPairs.get(0);",
      "info" : "VariableDeclarationStatement[29020-29068]:VariableDeclarationStatement[29020-29068]"
    }, {
      "left" : "PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",
      "right" : "PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",
      "info" : "VariableDeclarationStatement[29085-29171]:VariableDeclarationStatement[29158-29244]"
    }, {
      "left" : "sep = sep.finish(f.getPrinter(), f.getParser());",
      "right" : "sep = sep.finish(f.getPrinter(), f.getParser());",
      "info" : "ExpressionStatement[29188-29236]:ExpressionStatement[29261-29309]"
    }, {
      "left" : "return new PeriodFormatter(sep, sep);",
      "right" : "return new PeriodFormatter(sep, sep);",
      "info" : "ReturnStatement[29253-29290]:ReturnStatement[29326-29363]"
    }, {
      "left" : "Object[] comp = createComposite(elementPairs);",
      "right" : "Object[] comp = createComposite(elementPairs);",
      "info" : "VariableDeclarationStatement[29309-29355]:VariableDeclarationStatement[29396-29442]"
    }, {
      "left" : "if (notPrinter)",
      "right" : "if (notPrinter)",
      "info" : "IfStatement[29364-29670]:IfStatement[29451-29757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29380-29461]:Block[29467-29548]"
    }, {
      "left" : "return new PeriodFormatter(null, (PeriodParser) comp[1]);",
      "right" : "return new PeriodFormatter(null, (PeriodParser) comp[1]);",
      "info" : "ReturnStatement[29394-29451]:ReturnStatement[29481-29538]"
    }, {
      "left" : "if (notParser)",
      "right" : "if (notParser)",
      "info" : "IfStatement[29467-29670]:IfStatement[29554-29757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29482-29564]:Block[29569-29651]"
    }, {
      "left" : "return new PeriodFormatter((PeriodPrinter) comp[0], null);",
      "right" : "return new PeriodFormatter((PeriodPrinter) comp[0], null);",
      "info" : "ReturnStatement[29496-29554]:ReturnStatement[29583-29641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29570-29670]:Block[29657-29757]"
    }, {
      "left" : "return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);",
      "right" : "return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);",
      "info" : "ReturnStatement[29584-29660]:ReturnStatement[29671-29747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29749-30126]:Block[29836-30213]"
    }, {
      "left" : "switch (elementPairs.size()) {\n            case 0:\n                return new Object[] {Literal.EMPTY, Literal.EMPTY};\n            case 1:\n                return new Object[] {elementPairs.get(0), elementPairs.get(1)};\n            default:\n                Composite comp = new Composite(elementPairs);\n                return new Object[] {comp, comp};\n        }",
      "right" : "switch (elementPairs.size()) {\n            case 0:\n                return new Object[] {Literal.EMPTY, Literal.EMPTY};\n            case 1:\n                return new Object[] {elementPairs.get(0), elementPairs.get(1)};\n            default:\n                Composite comp = new Composite(elementPairs);\n                return new Object[] {comp, comp};\n        }",
      "info" : "SwitchStatement[29759-30120]:SwitchStatement[29846-30207]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[29802-29809]:SwitchCase[29889-29896]"
    }, {
      "left" : "return new Object[] {Literal.EMPTY, Literal.EMPTY};",
      "right" : "return new Object[] {Literal.EMPTY, Literal.EMPTY};",
      "info" : "ReturnStatement[29826-29877]:ReturnStatement[29913-29964]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[29890-29897]:SwitchCase[29977-29984]"
    }, {
      "left" : "return new Object[] {elementPairs.get(0), elementPairs.get(1)};",
      "right" : "return new Object[] {elementPairs.get(0), elementPairs.get(1)};",
      "info" : "ReturnStatement[29914-29977]:ReturnStatement[30001-30064]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29990-29998]:SwitchCase[30077-30085]"
    }, {
      "left" : "Composite comp = new Composite(elementPairs);",
      "right" : "Composite comp = new Composite(elementPairs);",
      "info" : "VariableDeclarationStatement[30015-30060]:VariableDeclarationStatement[30102-30147]"
    }, {
      "left" : "return new Object[] {comp, comp};",
      "right" : "return new Object[] {comp, comp};",
      "info" : "ReturnStatement[30077-30110]:ReturnStatement[30164-30197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31194-31231]:Block[31281-31318]"
    }, {
      "left" : "iText = text;",
      "right" : "iText = text;",
      "info" : "ExpressionStatement[31208-31221]:ExpressionStatement[31295-31308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31286-31332]:Block[31373-31419]"
    }, {
      "left" : "return iText.length();",
      "right" : "return iText.length();",
      "info" : "ReturnStatement[31300-31322]:ReturnStatement[31387-31409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31391-31433]:Block[31478-31520]"
    }, {
      "left" : "buf.append(iText);",
      "right" : "buf.append(iText);",
      "info" : "ExpressionStatement[31405-31423]:ExpressionStatement[31492-31510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31505-31546]:Block[31592-31633]"
    }, {
      "left" : "out.write(iText);",
      "right" : "out.write(iText);",
      "info" : "ExpressionStatement[31519-31536]:ExpressionStatement[31606-31623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31605-31863]:Block[31692-31950]"
    }, {
      "left" : "String text = iText;",
      "right" : "String text = iText;",
      "info" : "VariableDeclarationStatement[31619-31639]:VariableDeclarationStatement[31706-31726]"
    }, {
      "left" : "int textLength = text.length();",
      "right" : "int textLength = text.length();",
      "info" : "VariableDeclarationStatement[31652-31683]:VariableDeclarationStatement[31739-31770]"
    }, {
      "left" : "if (periodStr.regionMatches(true, position, text, 0, textLength))",
      "right" : "if (periodStr.regionMatches(true, position, text, 0, textLength))",
      "info" : "IfStatement[31696-31823]:IfStatement[31783-31910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31762-31823]:Block[31849-31910]"
    }, {
      "left" : "return position + textLength;",
      "right" : "return position + textLength;",
      "info" : "ReturnStatement[31780-31809]:ReturnStatement[31867-31896]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[31836-31853]:ReturnStatement[31923-31940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31927-32749]:Block[32014-32836]"
    }, {
      "left" : "String text = iText;",
      "right" : "String text = iText;",
      "info" : "VariableDeclarationStatement[31941-31961]:VariableDeclarationStatement[32028-32048]"
    }, {
      "left" : "int textLength = text.length();",
      "right" : "int textLength = text.length();",
      "info" : "VariableDeclarationStatement[31974-32005]:VariableDeclarationStatement[32061-32092]"
    }, {
      "left" : "int sourceLength = periodStr.length();",
      "right" : "int sourceLength = periodStr.length();",
      "info" : "VariableDeclarationStatement[32018-32056]:VariableDeclarationStatement[32105-32143]"
    }, {
      "left" : "search:\n            for (int pos = position; pos < sourceLength; pos++) {\n                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {\n                    return pos;\n                }\n                // Only allow number characters to be skipped in search of suffix.\n                switch (periodStr.charAt(pos)) {\n                case '0': case '1': case '2': case '3': case '4':\n                case '5': case '6': case '7': case '8': case '9':\n                case '.': case ',': case '+': case '-':\n                    break;\n                default:\n                    break search;\n                }\n            }",
      "right" : "search:\n            for (int pos = position; pos < sourceLength; pos++) {\n                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {\n                    return pos;\n                }\n                // Only allow number characters to be skipped in search of suffix.\n                switch (periodStr.charAt(pos)) {\n                case '0': case '1': case '2': case '3': case '4':\n                case '5': case '6': case '7': case '8': case '9':\n                case '.': case ',': case '+': case '-':\n                    break;\n                default:\n                    break search;\n                }\n            }",
      "info" : "LabeledStatement[32069-32709]:LabeledStatement[32156-32796]"
    }, {
      "left" : "for (int pos = position; pos < sourceLength; pos++)",
      "right" : "for (int pos = position; pos < sourceLength; pos++)",
      "info" : "ForStatement[32089-32709]:ForStatement[32176-32796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32141-32709]:Block[32228-32796]"
    }, {
      "left" : "if (periodStr.regionMatches(true, pos, text, 0, textLength))",
      "right" : "if (periodStr.regionMatches(true, pos, text, 0, textLength))",
      "info" : "IfStatement[32159-32271]:IfStatement[32246-32358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32220-32271]:Block[32307-32358]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[32242-32253]:ReturnStatement[32329-32340]"
    }, {
      "left" : "switch (periodStr.charAt(pos)) {\n                case '0': case '1': case '2': case '3': case '4':\n                case '5': case '6': case '7': case '8': case '9':\n                case '.': case ',': case '+': case '-':\n                    break;\n                default:\n                    break search;\n                }",
      "right" : "switch (periodStr.charAt(pos)) {\n                case '0': case '1': case '2': case '3': case '4':\n                case '5': case '6': case '7': case '8': case '9':\n                case '.': case ',': case '+': case '-':\n                    break;\n                default:\n                    break search;\n                }",
      "info" : "SwitchStatement[32371-32695]:SwitchStatement[32458-32782]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[32420-32429]:SwitchCase[32507-32516]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[32430-32439]:SwitchCase[32517-32526]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[32440-32449]:SwitchCase[32527-32536]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[32450-32459]:SwitchCase[32537-32546]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[32460-32469]:SwitchCase[32547-32556]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[32486-32495]:SwitchCase[32573-32582]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[32496-32505]:SwitchCase[32583-32592]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[32506-32515]:SwitchCase[32593-32602]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[32516-32525]:SwitchCase[32603-32612]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[32526-32535]:SwitchCase[32613-32622]"
    }, {
      "left" : "case '.':",
      "right" : "case '.':",
      "info" : "SwitchCase[32552-32561]:SwitchCase[32639-32648]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[32562-32571]:SwitchCase[32649-32658]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[32572-32581]:SwitchCase[32659-32668]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[32582-32591]:SwitchCase[32669-32678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32612-32618]:BreakStatement[32699-32705]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32635-32643]:SwitchCase[32722-32730]"
    }, {
      "left" : "break search;",
      "right" : "break search;",
      "info" : "BreakStatement[32664-32677]:BreakStatement[32751-32764]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[32722-32739]:ReturnStatement[32809-32826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33193-33284]:Block[33280-33371]"
    }, {
      "left" : "iSingularText = singularText;",
      "right" : "iSingularText = singularText;",
      "info" : "ExpressionStatement[33207-33236]:ExpressionStatement[33294-33323]"
    }, {
      "left" : "iPluralText = pluralText;",
      "right" : "iPluralText = pluralText;",
      "info" : "ExpressionStatement[33249-33274]:ExpressionStatement[33336-33361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33339-33422]:Block[33426-33509]"
    }, {
      "left" : "return (value == 1 ? iSingularText : iPluralText).length();",
      "right" : "return (value == 1 ? iSingularText : iPluralText).length();",
      "info" : "ReturnStatement[33353-33412]:ReturnStatement[33440-33499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33481-33558]:Block[33568-33645]"
    }, {
      "left" : "buf.append(value == 1 ? iSingularText : iPluralText);",
      "right" : "buf.append(value == 1 ? iSingularText : iPluralText);",
      "info" : "ExpressionStatement[33495-33548]:ExpressionStatement[33582-33635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33630-33706]:Block[33717-33793]"
    }, {
      "left" : "out.write(value == 1 ? iSingularText : iPluralText);",
      "right" : "out.write(value == 1 ? iSingularText : iPluralText);",
      "info" : "ExpressionStatement[33644-33696]:ExpressionStatement[33731-33783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33765-34447]:Block[33852-34534]"
    }, {
      "left" : "String text1 = iPluralText;",
      "right" : "String text1 = iPluralText;",
      "info" : "VariableDeclarationStatement[33779-33806]:VariableDeclarationStatement[33866-33893]"
    }, {
      "left" : "String text2 = iSingularText;",
      "right" : "String text2 = iSingularText;",
      "info" : "VariableDeclarationStatement[33819-33848]:VariableDeclarationStatement[33906-33935]"
    }, {
      "left" : "if (text1.length() < text2.length())",
      "right" : "if (text1.length() < text2.length())",
      "info" : "IfStatement[33863-34073]:IfStatement[33950-34160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33900-34073]:Block[33987-34160]"
    }, {
      "left" : "String temp = text1;",
      "right" : "String temp = text1;",
      "info" : "VariableDeclarationStatement[33978-33998]:VariableDeclarationStatement[34065-34085]"
    }, {
      "left" : "text1 = text2;",
      "right" : "text1 = text2;",
      "info" : "ExpressionStatement[34015-34029]:ExpressionStatement[34102-34116]"
    }, {
      "left" : "text2 = temp;",
      "right" : "text2 = temp;",
      "info" : "ExpressionStatement[34046-34059]:ExpressionStatement[34133-34146]"
    }, {
      "left" : "if (periodStr.regionMatches\n                (true, position, text1, 0, text1.length()))",
      "right" : "if (periodStr.regionMatches\n                (true, position, text1, 0, text1.length()))",
      "info" : "IfStatement[34087-34240]:IfStatement[34174-34327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34175-34240]:Block[34262-34327]"
    }, {
      "left" : "return position + text1.length();",
      "right" : "return position + text1.length();",
      "info" : "ReturnStatement[34193-34226]:ReturnStatement[34280-34313]"
    }, {
      "left" : "if (periodStr.regionMatches\n                (true, position, text2, 0, text2.length()))",
      "right" : "if (periodStr.regionMatches\n                (true, position, text2, 0, text2.length()))",
      "info" : "IfStatement[34253-34406]:IfStatement[34340-34493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34341-34406]:Block[34428-34493]"
    }, {
      "left" : "return position + text2.length();",
      "right" : "return position + text2.length();",
      "info" : "ReturnStatement[34359-34392]:ReturnStatement[34446-34479]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[34420-34437]:ReturnStatement[34507-34524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34511-35346]:Block[34598-35433]"
    }, {
      "left" : "String text1 = iPluralText;",
      "right" : "String text1 = iPluralText;",
      "info" : "VariableDeclarationStatement[34525-34552]:VariableDeclarationStatement[34612-34639]"
    }, {
      "left" : "String text2 = iSingularText;",
      "right" : "String text2 = iSingularText;",
      "info" : "VariableDeclarationStatement[34565-34594]:VariableDeclarationStatement[34652-34681]"
    }, {
      "left" : "if (text1.length() < text2.length())",
      "right" : "if (text1.length() < text2.length())",
      "info" : "IfStatement[34609-34819]:IfStatement[34696-34906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34646-34819]:Block[34733-34906]"
    }, {
      "left" : "String temp = text1;",
      "right" : "String temp = text1;",
      "info" : "VariableDeclarationStatement[34724-34744]:VariableDeclarationStatement[34811-34831]"
    }, {
      "left" : "text1 = text2;",
      "right" : "text1 = text2;",
      "info" : "ExpressionStatement[34761-34775]:ExpressionStatement[34848-34862]"
    }, {
      "left" : "text2 = temp;",
      "right" : "text2 = temp;",
      "info" : "ExpressionStatement[34792-34805]:ExpressionStatement[34879-34892]"
    }, {
      "left" : "int textLength1 = text1.length();",
      "right" : "int textLength1 = text1.length();",
      "info" : "VariableDeclarationStatement[34833-34866]:VariableDeclarationStatement[34920-34953]"
    }, {
      "left" : "int textLength2 = text2.length();",
      "right" : "int textLength2 = text2.length();",
      "info" : "VariableDeclarationStatement[34879-34912]:VariableDeclarationStatement[34966-34999]"
    }, {
      "left" : "int sourceLength = periodStr.length();",
      "right" : "int sourceLength = periodStr.length();",
      "info" : "VariableDeclarationStatement[34926-34964]:VariableDeclarationStatement[35013-35051]"
    }, {
      "left" : "for (int pos = position; pos < sourceLength; pos++)",
      "right" : "for (int pos = position; pos < sourceLength; pos++)",
      "info" : "ForStatement[34977-35306]:ForStatement[35064-35393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35029-35306]:Block[35116-35393]"
    }, {
      "left" : "if (periodStr.regionMatches(true, pos, text1, 0, textLength1))",
      "right" : "if (periodStr.regionMatches(true, pos, text1, 0, textLength1))",
      "info" : "IfStatement[35047-35161]:IfStatement[35134-35248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35110-35161]:Block[35197-35248]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[35132-35143]:ReturnStatement[35219-35230]"
    }, {
      "left" : "if (periodStr.regionMatches(true, pos, text2, 0, textLength2))",
      "right" : "if (periodStr.regionMatches(true, pos, text2, 0, textLength2))",
      "info" : "IfStatement[35178-35292]:IfStatement[35265-35379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35241-35292]:Block[35328-35379]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[35263-35274]:ReturnStatement[35350-35361]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[35319-35336]:ReturnStatement[35406-35423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35750-35815]:Block[35837-35902]"
    }, {
      "left" : "iLeft = left;",
      "right" : "iLeft = left;",
      "info" : "ExpressionStatement[35764-35777]:ExpressionStatement[35851-35864]"
    }, {
      "left" : "iRight = right;",
      "right" : "iRight = right;",
      "info" : "ExpressionStatement[35790-35805]:ExpressionStatement[35877-35892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35870-35992]:Block[35957-36079]"
    }, {
      "left" : "return iLeft.calculatePrintedLength(value)\n                + iRight.calculatePrintedLength(value);",
      "right" : "return iLeft.calculatePrintedLength(value)\n                + iRight.calculatePrintedLength(value);",
      "info" : "ReturnStatement[35884-35982]:ReturnStatement[35971-36069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36051-36141]:Block[36138-36228]"
    }, {
      "left" : "iLeft.printTo(buf, value);",
      "right" : "iLeft.printTo(buf, value);",
      "info" : "ExpressionStatement[36065-36091]:ExpressionStatement[36152-36178]"
    }, {
      "left" : "iRight.printTo(buf, value);",
      "right" : "iRight.printTo(buf, value);",
      "info" : "ExpressionStatement[36104-36131]:ExpressionStatement[36191-36218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36213-36303]:Block[36300-36390]"
    }, {
      "left" : "iLeft.printTo(out, value);",
      "right" : "iLeft.printTo(out, value);",
      "info" : "ExpressionStatement[36227-36253]:ExpressionStatement[36314-36340]"
    }, {
      "left" : "iRight.printTo(out, value);",
      "right" : "iRight.printTo(out, value);",
      "info" : "ExpressionStatement[36266-36293]:ExpressionStatement[36353-36380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36362-36568]:Block[36449-36655]"
    }, {
      "left" : "position = iLeft.parse(periodStr, position);",
      "right" : "position = iLeft.parse(periodStr, position);",
      "info" : "ExpressionStatement[36376-36420]:ExpressionStatement[36463-36507]"
    }, {
      "left" : "if (position >= 0)",
      "right" : "if (position >= 0)",
      "info" : "IfStatement[36433-36529]:IfStatement[36520-36616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36452-36529]:Block[36539-36616]"
    }, {
      "left" : "position = iRight.parse(periodStr, position);",
      "right" : "position = iRight.parse(periodStr, position);",
      "info" : "ExpressionStatement[36470-36515]:ExpressionStatement[36557-36602]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[36542-36558]:ReturnStatement[36629-36645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36632-36822]:Block[36719-36909]"
    }, {
      "left" : "int pos = iLeft.scan(periodStr, position);",
      "right" : "int pos = iLeft.scan(periodStr, position);",
      "info" : "VariableDeclarationStatement[36646-36688]:VariableDeclarationStatement[36733-36775]"
    }, {
      "left" : "if (pos >= 0)",
      "right" : "if (pos >= 0)",
      "info" : "IfStatement[36701-36782]:IfStatement[36788-36869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36715-36782]:Block[36802-36869]"
    }, {
      "left" : "return iRight.scan(periodStr, pos);",
      "right" : "return iRight.scan(periodStr, pos);",
      "info" : "ReturnStatement[36733-36768]:ReturnStatement[36820-36855]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[36795-36812]:ReturnStatement[36882-36899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37987-38344]:Block[38074-38431]"
    }, {
      "left" : "iMinPrintedDigits = minPrintedDigits;",
      "right" : "iMinPrintedDigits = minPrintedDigits;",
      "info" : "ExpressionStatement[38001-38038]:ExpressionStatement[38088-38125]"
    }, {
      "left" : "iPrintZeroSetting = printZeroSetting;",
      "right" : "iPrintZeroSetting = printZeroSetting;",
      "info" : "ExpressionStatement[38051-38088]:ExpressionStatement[38138-38175]"
    }, {
      "left" : "iMaxParsedDigits = maxParsedDigits;",
      "right" : "iMaxParsedDigits = maxParsedDigits;",
      "info" : "ExpressionStatement[38101-38136]:ExpressionStatement[38188-38223]"
    }, {
      "left" : "iRejectSignedValues = rejectSignedValues;",
      "right" : "iRejectSignedValues = rejectSignedValues;",
      "info" : "ExpressionStatement[38149-38190]:ExpressionStatement[38236-38277]"
    }, {
      "left" : "iFieldType = fieldType;",
      "right" : "iFieldType = fieldType;",
      "info" : "ExpressionStatement[38203-38226]:ExpressionStatement[38290-38313]"
    }, {
      "left" : "iFieldFormatters = fieldFormatters;",
      "right" : "iFieldFormatters = fieldFormatters;",
      "info" : "ExpressionStatement[38239-38274]:ExpressionStatement[38326-38361]"
    }, {
      "left" : "iPrefix = prefix;",
      "right" : "iPrefix = prefix;",
      "info" : "ExpressionStatement[38287-38304]:ExpressionStatement[38374-38391]"
    }, {
      "left" : "iSuffix = suffix;",
      "right" : "iSuffix = suffix;",
      "info" : "ExpressionStatement[38317-38334]:ExpressionStatement[38404-38421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38416-38945]:Block[38503-39032]"
    }, {
      "left" : "iMinPrintedDigits = field.iMinPrintedDigits;",
      "right" : "iMinPrintedDigits = field.iMinPrintedDigits;",
      "info" : "ExpressionStatement[38430-38474]:ExpressionStatement[38517-38561]"
    }, {
      "left" : "iPrintZeroSetting = field.iPrintZeroSetting;",
      "right" : "iPrintZeroSetting = field.iPrintZeroSetting;",
      "info" : "ExpressionStatement[38487-38531]:ExpressionStatement[38574-38618]"
    }, {
      "left" : "iMaxParsedDigits = field.iMaxParsedDigits;",
      "right" : "iMaxParsedDigits = field.iMaxParsedDigits;",
      "info" : "ExpressionStatement[38544-38586]:ExpressionStatement[38631-38673]"
    }, {
      "left" : "iRejectSignedValues = field.iRejectSignedValues;",
      "right" : "iRejectSignedValues = field.iRejectSignedValues;",
      "info" : "ExpressionStatement[38599-38647]:ExpressionStatement[38686-38734]"
    }, {
      "left" : "iFieldType = field.iFieldType;",
      "right" : "iFieldType = field.iFieldType;",
      "info" : "ExpressionStatement[38660-38690]:ExpressionStatement[38747-38777]"
    }, {
      "left" : "iFieldFormatters = field.iFieldFormatters;",
      "right" : "iFieldFormatters = field.iFieldFormatters;",
      "info" : "ExpressionStatement[38703-38745]:ExpressionStatement[38790-38832]"
    }, {
      "left" : "iPrefix = field.iPrefix;",
      "right" : "iPrefix = field.iPrefix;",
      "info" : "ExpressionStatement[38758-38782]:ExpressionStatement[38845-38869]"
    }, {
      "left" : "if (field.iSuffix != null)",
      "right" : "if (field.iSuffix != null)",
      "info" : "IfStatement[38795-38905]:IfStatement[38882-38992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38822-38905]:Block[38909-38992]"
    }, {
      "left" : "suffix = new CompositeAffix(field.iSuffix, suffix);",
      "right" : "suffix = new CompositeAffix(field.iSuffix, suffix);",
      "info" : "ExpressionStatement[38840-38891]:ExpressionStatement[38927-38978]"
    }, {
      "left" : "iSuffix = suffix;",
      "right" : "iSuffix = suffix;",
      "info" : "ExpressionStatement[38918-38935]:ExpressionStatement[39005-39022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39035-39280]:Block[39122-39367]"
    }, {
      "left" : "if (stopAt <= 0)",
      "right" : "if (stopAt <= 0)",
      "info" : "IfStatement[39049-39107]:IfStatement[39136-39194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39066-39107]:Block[39153-39194]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[39084-39093]:ReturnStatement[39171-39180]"
    }, {
      "left" : "if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE)",
      "right" : "if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE)",
      "info" : "IfStatement[39120-39248]:IfStatement[39207-39335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39207-39248]:Block[39294-39335]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[39225-39234]:ReturnStatement[39312-39321]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[39261-39270]:ReturnStatement[39348-39357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39362-40623]:Block[39449-40710]"
    }, {
      "left" : "long valueLong = getFieldValue(period);",
      "right" : "long valueLong = getFieldValue(period);",
      "info" : "VariableDeclarationStatement[39376-39415]:VariableDeclarationStatement[39463-39502]"
    }, {
      "left" : "if (valueLong == Long.MAX_VALUE)",
      "right" : "if (valueLong == Long.MAX_VALUE)",
      "info" : "IfStatement[39428-39502]:IfStatement[39515-39589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39461-39502]:Block[39548-39589]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[39479-39488]:ReturnStatement[39566-39575]"
    }, {
      "left" : "int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",
      "right" : "int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",
      "info" : "VariableDeclarationStatement[39516-39598]:VariableDeclarationStatement[39603-39685]"
    }, {
      "left" : "if (iFieldType >= SECONDS_MILLIS)",
      "right" : "if (iFieldType >= SECONDS_MILLIS)",
      "info" : "IfStatement[39611-40324]:IfStatement[39698-40411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39645-40324]:Block[39732-40411]"
    }, {
      "left" : "sum = Math.max(sum, 4);",
      "right" : "sum = Math.max(sum, 4);",
      "info" : "ExpressionStatement[39797-39820]:ExpressionStatement[39884-39907]"
    }, {
      "left" : "sum++;",
      "right" : "sum++;",
      "info" : "ExpressionStatement[39887-39893]:ExpressionStatement[39974-39980]"
    }, {
      "left" : "if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0)",
      "right" : "if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0)",
      "info" : "IfStatement[39910-40135]:IfStatement[39997-40222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40045-40135]:Block[40132-40222]"
    }, {
      "left" : "sum -= 4;",
      "right" : "sum -= 4;",
      "info" : "ExpressionStatement[40067-40076]:ExpressionStatement[40154-40163]"
    }, {
      "left" : "valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[40250-40310]:ExpressionStatement[40337-40397]"
    }, {
      "left" : "int value = (int) valueLong;",
      "right" : "int value = (int) valueLong;",
      "info" : "VariableDeclarationStatement[40337-40365]:VariableDeclarationStatement[40424-40452]"
    }, {
      "left" : "if (iPrefix != null)",
      "right" : "if (iPrefix != null)",
      "info" : "IfStatement[40379-40477]:IfStatement[40466-40564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40400-40477]:Block[40487-40564]"
    }, {
      "left" : "sum += iPrefix.calculatePrintedLength(value);",
      "right" : "sum += iPrefix.calculatePrintedLength(value);",
      "info" : "ExpressionStatement[40418-40463]:ExpressionStatement[40505-40550]"
    }, {
      "left" : "if (iSuffix != null)",
      "right" : "if (iSuffix != null)",
      "info" : "IfStatement[40490-40588]:IfStatement[40577-40675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40511-40588]:Block[40598-40675]"
    }, {
      "left" : "sum += iSuffix.calculatePrintedLength(value);",
      "right" : "sum += iSuffix.calculatePrintedLength(value);",
      "info" : "ExpressionStatement[40529-40574]:ExpressionStatement[40616-40661]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[40602-40613]:ReturnStatement[40689-40700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40717-41825]:Block[40804-41912]"
    }, {
      "left" : "long valueLong = getFieldValue(period);",
      "right" : "long valueLong = getFieldValue(period);",
      "info" : "VariableDeclarationStatement[40731-40770]:VariableDeclarationStatement[40818-40857]"
    }, {
      "left" : "if (valueLong == Long.MAX_VALUE)",
      "right" : "if (valueLong == Long.MAX_VALUE)",
      "info" : "IfStatement[40783-40855]:IfStatement[40870-40942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40816-40855]:Block[40903-40942]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[40834-40841]:ReturnStatement[40921-40928]"
    }, {
      "left" : "int value = (int) valueLong;",
      "right" : "int value = (int) valueLong;",
      "info" : "VariableDeclarationStatement[40868-40896]:VariableDeclarationStatement[40955-40983]"
    }, {
      "left" : "if (iFieldType >= SECONDS_MILLIS)",
      "right" : "if (iFieldType >= SECONDS_MILLIS)",
      "info" : "IfStatement[40909-41039]:IfStatement[40996-41126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40943-41039]:Block[41030-41126]"
    }, {
      "left" : "value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);",
      "right" : "value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);",
      "info" : "ExpressionStatement[40961-41025]:ExpressionStatement[41048-41112]"
    }, {
      "left" : "if (iPrefix != null)",
      "right" : "if (iPrefix != null)",
      "info" : "IfStatement[41053-41134]:IfStatement[41140-41221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41074-41134]:Block[41161-41221]"
    }, {
      "left" : "iPrefix.printTo(buf, value);",
      "right" : "iPrefix.printTo(buf, value);",
      "info" : "ExpressionStatement[41092-41120]:ExpressionStatement[41179-41207]"
    }, {
      "left" : "int minDigits = iMinPrintedDigits;",
      "right" : "int minDigits = iMinPrintedDigits;",
      "info" : "VariableDeclarationStatement[41147-41181]:VariableDeclarationStatement[41234-41268]"
    }, {
      "left" : "if (minDigits <= 1)",
      "right" : "if (minDigits <= 1)",
      "info" : "IfStatement[41194-41385]:IfStatement[41281-41472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41214-41292]:Block[41301-41379]"
    }, {
      "left" : "FormatUtils.appendUnpaddedInteger(buf, value);",
      "right" : "FormatUtils.appendUnpaddedInteger(buf, value);",
      "info" : "ExpressionStatement[41232-41278]:ExpressionStatement[41319-41365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41298-41385]:Block[41385-41472]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, value, minDigits);",
      "right" : "FormatUtils.appendPaddedInteger(buf, value, minDigits);",
      "info" : "ExpressionStatement[41316-41371]:ExpressionStatement[41403-41458]"
    }, {
      "left" : "if (iFieldType >= SECONDS_MILLIS)",
      "right" : "if (iFieldType >= SECONDS_MILLIS)",
      "info" : "IfStatement[41398-41721]:IfStatement[41485-41808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41432-41721]:Block[41519-41808]"
    }, {
      "left" : "int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);",
      "right" : "int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);",
      "info" : "VariableDeclarationStatement[41450-41525]:VariableDeclarationStatement[41537-41612]"
    }, {
      "left" : "if (iFieldType == SECONDS_MILLIS || dp > 0)",
      "right" : "if (iFieldType == SECONDS_MILLIS || dp > 0)",
      "info" : "IfStatement[41542-41707]:IfStatement[41629-41794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41586-41707]:Block[41673-41794]"
    }, {
      "left" : "buf.append('.');",
      "right" : "buf.append('.');",
      "info" : "ExpressionStatement[41608-41624]:ExpressionStatement[41695-41711]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, dp, 3);",
      "right" : "FormatUtils.appendPaddedInteger(buf, dp, 3);",
      "info" : "ExpressionStatement[41645-41689]:ExpressionStatement[41732-41776]"
    }, {
      "left" : "if (iSuffix != null)",
      "right" : "if (iSuffix != null)",
      "info" : "IfStatement[41734-41815]:IfStatement[41821-41902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41755-41815]:Block[41842-41902]"
    }, {
      "left" : "iSuffix.printTo(buf, value);",
      "right" : "iSuffix.printTo(buf, value);",
      "info" : "ExpressionStatement[41773-41801]:ExpressionStatement[41860-41888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41924-43028]:Block[42011-43115]"
    }, {
      "left" : "long valueLong = getFieldValue(period);",
      "right" : "long valueLong = getFieldValue(period);",
      "info" : "VariableDeclarationStatement[41938-41977]:VariableDeclarationStatement[42025-42064]"
    }, {
      "left" : "if (valueLong == Long.MAX_VALUE)",
      "right" : "if (valueLong == Long.MAX_VALUE)",
      "info" : "IfStatement[41990-42062]:IfStatement[42077-42149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42023-42062]:Block[42110-42149]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42041-42048]:ReturnStatement[42128-42135]"
    }, {
      "left" : "int value = (int) valueLong;",
      "right" : "int value = (int) valueLong;",
      "info" : "VariableDeclarationStatement[42075-42103]:VariableDeclarationStatement[42162-42190]"
    }, {
      "left" : "if (iFieldType >= SECONDS_MILLIS)",
      "right" : "if (iFieldType >= SECONDS_MILLIS)",
      "info" : "IfStatement[42116-42246]:IfStatement[42203-42333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42150-42246]:Block[42237-42333]"
    }, {
      "left" : "value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);",
      "right" : "value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);",
      "info" : "ExpressionStatement[42168-42232]:ExpressionStatement[42255-42319]"
    }, {
      "left" : "if (iPrefix != null)",
      "right" : "if (iPrefix != null)",
      "info" : "IfStatement[42260-42341]:IfStatement[42347-42428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42281-42341]:Block[42368-42428]"
    }, {
      "left" : "iPrefix.printTo(out, value);",
      "right" : "iPrefix.printTo(out, value);",
      "info" : "ExpressionStatement[42299-42327]:ExpressionStatement[42386-42414]"
    }, {
      "left" : "int minDigits = iMinPrintedDigits;",
      "right" : "int minDigits = iMinPrintedDigits;",
      "info" : "VariableDeclarationStatement[42354-42388]:VariableDeclarationStatement[42441-42475]"
    }, {
      "left" : "if (minDigits <= 1)",
      "right" : "if (minDigits <= 1)",
      "info" : "IfStatement[42401-42590]:IfStatement[42488-42677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42421-42498]:Block[42508-42585]"
    }, {
      "left" : "FormatUtils.writeUnpaddedInteger(out, value);",
      "right" : "FormatUtils.writeUnpaddedInteger(out, value);",
      "info" : "ExpressionStatement[42439-42484]:ExpressionStatement[42526-42571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42504-42590]:Block[42591-42677]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, value, minDigits);",
      "right" : "FormatUtils.writePaddedInteger(out, value, minDigits);",
      "info" : "ExpressionStatement[42522-42576]:ExpressionStatement[42609-42663]"
    }, {
      "left" : "if (iFieldType >= SECONDS_MILLIS)",
      "right" : "if (iFieldType >= SECONDS_MILLIS)",
      "info" : "IfStatement[42603-42924]:IfStatement[42690-43011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42637-42924]:Block[42724-43011]"
    }, {
      "left" : "int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);",
      "right" : "int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);",
      "info" : "VariableDeclarationStatement[42655-42730]:VariableDeclarationStatement[42742-42817]"
    }, {
      "left" : "if (iFieldType == SECONDS_MILLIS || dp > 0)",
      "right" : "if (iFieldType == SECONDS_MILLIS || dp > 0)",
      "info" : "IfStatement[42747-42910]:IfStatement[42834-42997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42791-42910]:Block[42878-42997]"
    }, {
      "left" : "out.write('.');",
      "right" : "out.write('.');",
      "info" : "ExpressionStatement[42813-42828]:ExpressionStatement[42900-42915]"
    }, {
      "left" : "FormatUtils.writePaddedInteger(out, dp, 3);",
      "right" : "FormatUtils.writePaddedInteger(out, dp, 3);",
      "info" : "ExpressionStatement[42849-42892]:ExpressionStatement[42936-42979]"
    }, {
      "left" : "if (iSuffix != null)",
      "right" : "if (iSuffix != null)",
      "info" : "IfStatement[42937-43018]:IfStatement[43024-43105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42958-43018]:Block[43045-43105]"
    }, {
      "left" : "iSuffix.printTo(out, value);",
      "right" : "iSuffix.printTo(out, value);",
      "info" : "ExpressionStatement[42976-43004]:ExpressionStatement[43063-43091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43162-49436]:Block[43249-49523]"
    }, {
      "left" : "boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);",
      "right" : "boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);",
      "info" : "VariableDeclarationStatement[43177-43238]:VariableDeclarationStatement[43264-43325]"
    }, {
      "left" : "if (position >= text.length())",
      "right" : "if (position >= text.length())",
      "info" : "IfStatement[43282-43385]:IfStatement[43369-43472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43313-43385]:Block[43400-43472]"
    }, {
      "left" : "return mustParse ? ~position : position;",
      "right" : "return mustParse ? ~position : position;",
      "info" : "ReturnStatement[43331-43371]:ReturnStatement[43418-43458]"
    }, {
      "left" : "if (iPrefix != null)",
      "right" : "if (iPrefix != null)",
      "info" : "IfStatement[43399-44088]:IfStatement[43486-44175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43420-44088]:Block[43507-44175]"
    }, {
      "left" : "position = iPrefix.parse(text, position);",
      "right" : "position = iPrefix.parse(text, position);",
      "info" : "ExpressionStatement[43438-43479]:ExpressionStatement[43525-43566]"
    }, {
      "left" : "if (position >= 0)",
      "right" : "if (position >= 0)",
      "info" : "IfStatement[43496-44074]:IfStatement[43583-44161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43515-43643]:Block[43602-43730]"
    }, {
      "left" : "mustParse = true;",
      "right" : "mustParse = true;",
      "info" : "ExpressionStatement[43608-43625]:ExpressionStatement[43695-43712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43649-44074]:Block[43736-44161]"
    }, {
      "left" : "if (!mustParse)",
      "right" : "if (!mustParse)",
      "info" : "IfStatement[43721-44019]:IfStatement[43808-44106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43737-44019]:Block[43824-44106]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[43980-43997]:ReturnStatement[44067-44084]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[44040-44056]:ReturnStatement[44127-44143]"
    }, {
      "left" : "int suffixPos = -1;",
      "right" : "int suffixPos = -1;",
      "info" : "VariableDeclarationStatement[44102-44121]:VariableDeclarationStatement[44189-44208]"
    }, {
      "left" : "if (iSuffix != null && !mustParse)",
      "right" : "if (iSuffix != null && !mustParse)",
      "info" : "IfStatement[44134-44943]:IfStatement[44221-45030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44169-44943]:Block[44256-45030]"
    }, {
      "left" : "suffixPos = iSuffix.scan(text, position);",
      "right" : "suffixPos = iSuffix.scan(text, position);",
      "info" : "ExpressionStatement[44294-44335]:ExpressionStatement[44381-44422]"
    }, {
      "left" : "if (suffixPos >= 0)",
      "right" : "if (suffixPos >= 0)",
      "info" : "IfStatement[44352-44929]:IfStatement[44439-45016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44372-44496]:Block[44459-44583]"
    }, {
      "left" : "mustParse = true;",
      "right" : "mustParse = true;",
      "info" : "ExpressionStatement[44461-44478]:ExpressionStatement[44548-44565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44502-44929]:Block[44589-45016]"
    }, {
      "left" : "if (!mustParse)",
      "right" : "if (!mustParse)",
      "info" : "IfStatement[44574-44873]:IfStatement[44661-44960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44590-44873]:Block[44677-44960]"
    }, {
      "left" : "return ~suffixPos;",
      "right" : "return ~suffixPos;",
      "info" : "ReturnStatement[44833-44851]:ReturnStatement[44920-44938]"
    }, {
      "left" : "return suffixPos;",
      "right" : "return suffixPos;",
      "info" : "ReturnStatement[44894-44911]:ReturnStatement[44981-44998]"
    }, {
      "left" : "if (!mustParse && !isSupported(period.getPeriodType(), iFieldType))",
      "right" : "if (!mustParse && !isSupported(period.getPeriodType(), iFieldType))",
      "info" : "IfStatement[44957-45226]:IfStatement[45044-45313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45025-45226]:Block[45112-45313]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[45196-45212]:ReturnStatement[45283-45299]"
    }, {
      "left" : "int limit;",
      "right" : "int limit;",
      "info" : "VariableDeclarationStatement[45240-45250]:VariableDeclarationStatement[45327-45337]"
    }, {
      "left" : "if (suffixPos > 0)",
      "right" : "if (suffixPos > 0)",
      "info" : "IfStatement[45263-45470]:IfStatement[45350-45557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45282-45371]:Block[45369-45458]"
    }, {
      "left" : "limit = Math.min(iMaxParsedDigits, suffixPos - position);",
      "right" : "limit = Math.min(iMaxParsedDigits, suffixPos - position);",
      "info" : "ExpressionStatement[45300-45357]:ExpressionStatement[45387-45444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45377-45470]:Block[45464-45557]"
    }, {
      "left" : "limit = Math.min(iMaxParsedDigits, text.length() - position);",
      "right" : "limit = Math.min(iMaxParsedDigits, text.length() - position);",
      "info" : "ExpressionStatement[45395-45456]:ExpressionStatement[45482-45543]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[45521-45536]:VariableDeclarationStatement[45608-45623]"
    }, {
      "left" : "int fractPos = -1;",
      "right" : "int fractPos = -1;",
      "info" : "VariableDeclarationStatement[45549-45567]:VariableDeclarationStatement[45636-45654]"
    }, {
      "left" : "boolean hasDigits = false;",
      "right" : "boolean hasDigits = false;",
      "info" : "VariableDeclarationStatement[45580-45606]:VariableDeclarationStatement[45667-45693]"
    }, {
      "left" : "while (length < limit)",
      "right" : "while (length < limit)",
      "info" : "WhileStatement[45619-47349]:WhileStatement[45706-47436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45642-47349]:Block[45729-47436]"
    }, {
      "left" : "char c = text.charAt(position + length);",
      "right" : "char c = text.charAt(position + length);",
      "info" : "VariableDeclarationStatement[45660-45700]:VariableDeclarationStatement[45747-45787]"
    }, {
      "left" : "if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues)",
      "right" : "if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues)",
      "info" : "IfStatement[45749-46547]:IfStatement[45836-46634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45816-46547]:Block[45903-46634]"
    }, {
      "left" : "boolean negative = c == '-';",
      "right" : "boolean negative = c == '-';",
      "info" : "VariableDeclarationStatement[45838-45866]:VariableDeclarationStatement[45925-45953]"
    }, {
      "left" : "if (length + 1 >= limit || \n                        (c = text.charAt(position + length + 1)) < '0' || c > '9')",
      "right" : "if (length + 1 >= limit || \n                        (c = text.charAt(position + length + 1)) < '0' || c > '9')",
      "info" : "IfStatement[45943-46128]:IfStatement[46030-46215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46074-46128]:Block[46161-46215]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46100-46106]:BreakStatement[46187-46193]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[46150-46351]:IfStatement[46237-46438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46164-46221]:Block[46251-46308]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[46190-46199]:ExpressionStatement[46277-46286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46227-46351]:Block[46314-46438]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[46318-46329]:ExpressionStatement[46405-46416]"
    }, {
      "left" : "limit = Math.min(limit + 1, text.length() - position);",
      "right" : "limit = Math.min(limit + 1, text.length() - position);",
      "info" : "ExpressionStatement[46445-46499]:ExpressionStatement[46532-46586]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[46520-46529]:ContinueStatement[46607-46616]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[46595-47309]:IfStatement[46682-47396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46621-46678]:Block[46708-46765]"
    }, {
      "left" : "hasDigits = true;",
      "right" : "hasDigits = true;",
      "info" : "ExpressionStatement[46643-46660]:ExpressionStatement[46730-46747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46684-47309]:Block[46771-47396]"
    }, {
      "left" : "if ((c == '.' || c == ',')\n                         && (iFieldType == SECONDS_MILLIS || iFieldType == SECONDS_OPTIONAL_MILLIS))",
      "right" : "if ((c == '.' || c == ',')\n                         && (iFieldType == SECONDS_MILLIS || iFieldType == SECONDS_OPTIONAL_MILLIS))",
      "info" : "IfStatement[46706-47291]:IfStatement[46793-47378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46834-47231]:Block[46921-47318]"
    }, {
      "left" : "if (fractPos >= 0)",
      "right" : "if (fractPos >= 0)",
      "info" : "IfStatement[46860-46996]:IfStatement[46947-47083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46879-46996]:Block[46966-47083]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46964-46970]:BreakStatement[47051-47057]"
    }, {
      "left" : "fractPos = position + length + 1;",
      "right" : "fractPos = position + length + 1;",
      "info" : "ExpressionStatement[47021-47054]:ExpressionStatement[47108-47141]"
    }, {
      "left" : "limit = Math.min(limit + 1, text.length() - position);",
      "right" : "limit = Math.min(limit + 1, text.length() - position);",
      "info" : "ExpressionStatement[47155-47209]:ExpressionStatement[47242-47296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47237-47291]:Block[47324-47378]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47263-47269]:BreakStatement[47350-47356]"
    }, {
      "left" : "length++;",
      "right" : "length++;",
      "info" : "ExpressionStatement[47326-47335]:ExpressionStatement[47413-47422]"
    }, {
      "left" : "if (!hasDigits)",
      "right" : "if (!hasDigits)",
      "info" : "IfStatement[47363-47428]:IfStatement[47450-47515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47379-47428]:Block[47466-47515]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[47397-47414]:ReturnStatement[47484-47501]"
    }, {
      "left" : "if (suffixPos >= 0 && position + length != suffixPos)",
      "right" : "if (suffixPos >= 0 && position + length != suffixPos)",
      "info" : "IfStatement[47442-47830]:IfStatement[47529-47917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47496-47830]:Block[47583-47917]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[47800-47816]:ReturnStatement[47887-47903]"
    }, {
      "left" : "if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS)",
      "right" : "if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS)",
      "info" : "IfStatement[47844-49206]:IfStatement[47931-49293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47919-48058]:Block[48006-48145]"
    }, {
      "left" : "setFieldValue(period, iFieldType, parseInt(text, position, length));",
      "right" : "setFieldValue(period, iFieldType, parseInt(text, position, length));",
      "info" : "ExpressionStatement[47976-48044]:ExpressionStatement[48063-48131]"
    }, {
      "left" : "if (fractPos < 0)",
      "right" : "if (fractPos < 0)",
      "info" : "IfStatement[48064-49206]:IfStatement[48151-49293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48082-48229]:Block[48169-48316]"
    }, {
      "left" : "setFieldValue(period, SECONDS, parseInt(text, position, length));",
      "right" : "setFieldValue(period, SECONDS, parseInt(text, position, length));",
      "info" : "ExpressionStatement[48100-48165]:ExpressionStatement[48187-48252]"
    }, {
      "left" : "setFieldValue(period, MILLIS, 0);",
      "right" : "setFieldValue(period, MILLIS, 0);",
      "info" : "ExpressionStatement[48182-48215]:ExpressionStatement[48269-48302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48235-49206]:Block[48322-49293]"
    }, {
      "left" : "int wholeValue = parseInt(text, position, fractPos - position - 1);",
      "right" : "int wholeValue = parseInt(text, position, fractPos - position - 1);",
      "info" : "VariableDeclarationStatement[48253-48320]:VariableDeclarationStatement[48340-48407]"
    }, {
      "left" : "setFieldValue(period, SECONDS, wholeValue);",
      "right" : "setFieldValue(period, SECONDS, wholeValue);",
      "info" : "ExpressionStatement[48337-48380]:ExpressionStatement[48424-48467]"
    }, {
      "left" : "int fractLen = position + length - fractPos;",
      "right" : "int fractLen = position + length - fractPos;",
      "info" : "VariableDeclarationStatement[48398-48442]:VariableDeclarationStatement[48485-48529]"
    }, {
      "left" : "int fractValue;",
      "right" : "int fractValue;",
      "info" : "VariableDeclarationStatement[48459-48474]:VariableDeclarationStatement[48546-48561]"
    }, {
      "left" : "if (fractLen <= 0)",
      "right" : "if (fractLen <= 0)",
      "info" : "IfStatement[48491-49132]:IfStatement[48578-49219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48510-48565]:Block[48597-48652]"
    }, {
      "left" : "fractValue = 0;",
      "right" : "fractValue = 0;",
      "info" : "ExpressionStatement[48532-48547]:ExpressionStatement[48619-48634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48571-49132]:Block[48658-49219]"
    }, {
      "left" : "if (fractLen >= 3)",
      "right" : "if (fractLen >= 3)",
      "info" : "IfStatement[48593-49000]:IfStatement[48680-49087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48612-48701]:Block[48699-48788]"
    }, {
      "left" : "fractValue = parseInt(text, fractPos, 3);",
      "right" : "fractValue = parseInt(text, fractPos, 3);",
      "info" : "ExpressionStatement[48638-48679]:ExpressionStatement[48725-48766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48707-49000]:Block[48794-49087]"
    }, {
      "left" : "fractValue = parseInt(text, fractPos, fractLen);",
      "right" : "fractValue = parseInt(text, fractPos, fractLen);",
      "info" : "ExpressionStatement[48733-48781]:ExpressionStatement[48820-48868]"
    }, {
      "left" : "if (fractLen == 1)",
      "right" : "if (fractLen == 1)",
      "info" : "IfStatement[48806-48978]:IfStatement[48893-49065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48825-48899]:Block[48912-48986]"
    }, {
      "left" : "fractValue *= 100;",
      "right" : "fractValue *= 100;",
      "info" : "ExpressionStatement[48855-48873]:ExpressionStatement[48942-48960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48905-48978]:Block[48992-49065]"
    }, {
      "left" : "fractValue *= 10;",
      "right" : "fractValue *= 10;",
      "info" : "ExpressionStatement[48935-48952]:ExpressionStatement[49022-49039]"
    }, {
      "left" : "if (wholeValue < 0)",
      "right" : "if (wholeValue < 0)",
      "info" : "IfStatement[49021-49114]:IfStatement[49108-49201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49041-49114]:Block[49128-49201]"
    }, {
      "left" : "fractValue = -fractValue;",
      "right" : "fractValue = -fractValue;",
      "info" : "ExpressionStatement[49067-49092]:ExpressionStatement[49154-49179]"
    }, {
      "left" : "setFieldValue(period, MILLIS, fractValue);",
      "right" : "setFieldValue(period, MILLIS, fractValue);",
      "info" : "ExpressionStatement[49150-49192]:ExpressionStatement[49237-49279]"
    }, {
      "left" : "position += length;",
      "right" : "position += length;",
      "info" : "ExpressionStatement[49236-49255]:ExpressionStatement[49323-49342]"
    }, {
      "left" : "if (position >= 0 && iSuffix != null)",
      "right" : "if (position >= 0 && iSuffix != null)",
      "info" : "IfStatement[49269-49380]:IfStatement[49356-49467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49307-49380]:Block[49394-49467]"
    }, {
      "left" : "position = iSuffix.parse(text, position);",
      "right" : "position = iSuffix.parse(text, position);",
      "info" : "ExpressionStatement[49325-49366]:ExpressionStatement[49412-49453]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[49410-49426]:ReturnStatement[49497-49513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49707-50584]:Block[49794-50671]"
    }, {
      "left" : "if (length >= 10)",
      "right" : "if (length >= 10)",
      "info" : "IfStatement[49721-49927]:IfStatement[49808-50014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49739-49927]:Block[49826-50014]"
    }, {
      "left" : "return Integer.parseInt(text.substring(position, position + length));",
      "right" : "return Integer.parseInt(text.substring(position, position + length));",
      "info" : "ReturnStatement[49844-49913]:ReturnStatement[49931-50000]"
    }, {
      "left" : "if (length <= 0)",
      "right" : "if (length <= 0)",
      "info" : "IfStatement[49940-49998]:IfStatement[50027-50085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49957-49998]:Block[50044-50085]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[49975-49984]:ReturnStatement[50062-50071]"
    }, {
      "left" : "int value = text.charAt(position++);",
      "right" : "int value = text.charAt(position++);",
      "info" : "VariableDeclarationStatement[50011-50047]:VariableDeclarationStatement[50098-50134]"
    }, {
      "left" : "length--;",
      "right" : "length--;",
      "info" : "ExpressionStatement[50060-50069]:ExpressionStatement[50147-50156]"
    }, {
      "left" : "boolean negative;",
      "right" : "boolean negative;",
      "info" : "VariableDeclarationStatement[50082-50099]:VariableDeclarationStatement[50169-50186]"
    }, {
      "left" : "if (value == '-')",
      "right" : "if (value == '-')",
      "info" : "IfStatement[50112-50366]:IfStatement[50199-50453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50130-50311]:Block[50217-50398]"
    }, {
      "left" : "if (--length < 0)",
      "right" : "if (--length < 0)",
      "info" : "IfStatement[50148-50215]:IfStatement[50235-50302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50166-50215]:Block[50253-50302]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[50188-50197]:ReturnStatement[50275-50284]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[50232-50248]:ExpressionStatement[50319-50335]"
    }, {
      "left" : "value = text.charAt(position++);",
      "right" : "value = text.charAt(position++);",
      "info" : "ExpressionStatement[50265-50297]:ExpressionStatement[50352-50384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50317-50366]:Block[50404-50453]"
    }, {
      "left" : "negative = false;",
      "right" : "negative = false;",
      "info" : "ExpressionStatement[50335-50352]:ExpressionStatement[50422-50439]"
    }, {
      "left" : "value -= '0';",
      "right" : "value -= '0';",
      "info" : "ExpressionStatement[50379-50392]:ExpressionStatement[50466-50479]"
    }, {
      "left" : "while (length-- > 0)",
      "right" : "while (length-- > 0)",
      "info" : "WhileStatement[50405-50528]:WhileStatement[50492-50615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50426-50528]:Block[50513-50615]"
    }, {
      "left" : "value = ((value << 3) + (value << 1)) + text.charAt(position++) - '0';",
      "right" : "value = ((value << 3) + (value << 1)) + text.charAt(position++) - '0';",
      "info" : "ExpressionStatement[50444-50514]:ExpressionStatement[50531-50601]"
    }, {
      "left" : "return negative ? -value : value;",
      "right" : "return negative ? -value : value;",
      "info" : "ReturnStatement[50541-50574]:ReturnStatement[50628-50661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50731-53964]:Block[50818-54051]"
    }, {
      "left" : "PeriodType type;",
      "right" : "PeriodType type;",
      "info" : "VariableDeclarationStatement[50745-50761]:VariableDeclarationStatement[50832-50848]"
    }, {
      "left" : "if (iPrintZeroSetting == PRINT_ZERO_ALWAYS)",
      "right" : "if (iPrintZeroSetting == PRINT_ZERO_ALWAYS)",
      "info" : "IfStatement[50774-50967]:IfStatement[50861-51054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50818-50899]:Block[50905-50986]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[50836-50848]:ExpressionStatement[50923-50935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50905-50967]:Block[50992-51054]"
    }, {
      "left" : "type = period.getPeriodType();",
      "right" : "type = period.getPeriodType();",
      "info" : "ExpressionStatement[50923-50953]:ExpressionStatement[51010-51040]"
    }, {
      "left" : "if (type != null && isSupported(type, iFieldType) == false)",
      "right" : "if (type != null && isSupported(type, iFieldType) == false)",
      "info" : "IfStatement[50980-51094]:IfStatement[51067-51181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51040-51094]:Block[51127-51181]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[51058-51080]:ReturnStatement[51145-51167]"
    }, {
      "left" : "long value;",
      "right" : "long value;",
      "info" : "VariableDeclarationStatement[51108-51119]:VariableDeclarationStatement[51195-51206]"
    }, {
      "left" : "switch (iFieldType) {\n            default:\n                return Long.MAX_VALUE;\n            case YEARS:\n                value = period.get(DurationFieldType.years());\n                break;\n            case MONTHS:\n                value = period.get(DurationFieldType.months());\n                break;\n            case WEEKS:\n                value = period.get(DurationFieldType.weeks());\n                break;\n            case DAYS:\n                value = period.get(DurationFieldType.days());\n                break;\n            case HOURS:\n                value = period.get(DurationFieldType.hours());\n                break;\n            case MINUTES:\n                value = period.get(DurationFieldType.minutes());\n                break;\n            case SECONDS:\n                value = period.get(DurationFieldType.seconds());\n                break;\n            case MILLIS:\n                value = period.get(DurationFieldType.millis());\n                break;\n            case SECONDS_MILLIS: // drop through\n            case SECONDS_OPTIONAL_MILLIS:\n                int seconds = period.get(DurationFieldType.seconds());\n                int millis = period.get(DurationFieldType.millis());\n                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;\n                break;\n            }",
      "right" : "switch (iFieldType) {\n            default:\n                return Long.MAX_VALUE;\n            case YEARS:\n                value = period.get(DurationFieldType.years());\n                break;\n            case MONTHS:\n                value = period.get(DurationFieldType.months());\n                break;\n            case WEEKS:\n                value = period.get(DurationFieldType.weeks());\n                break;\n            case DAYS:\n                value = period.get(DurationFieldType.days());\n                break;\n            case HOURS:\n                value = period.get(DurationFieldType.hours());\n                break;\n            case MINUTES:\n                value = period.get(DurationFieldType.minutes());\n                break;\n            case SECONDS:\n                value = period.get(DurationFieldType.seconds());\n                break;\n            case MILLIS:\n                value = period.get(DurationFieldType.millis());\n                break;\n            case SECONDS_MILLIS: // drop through\n            case SECONDS_OPTIONAL_MILLIS:\n                int seconds = period.get(DurationFieldType.seconds());\n                int millis = period.get(DurationFieldType.millis());\n                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;\n                break;\n            }",
      "info" : "SwitchStatement[51133-52461]:SwitchStatement[51220-52548]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51167-51175]:SwitchCase[51254-51262]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[51192-51214]:ReturnStatement[51279-51301]"
    }, {
      "left" : "case YEARS:",
      "right" : "case YEARS:",
      "info" : "SwitchCase[51227-51238]:SwitchCase[51314-51325]"
    }, {
      "left" : "value = period.get(DurationFieldType.years());",
      "right" : "value = period.get(DurationFieldType.years());",
      "info" : "ExpressionStatement[51255-51301]:ExpressionStatement[51342-51388]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51318-51324]:BreakStatement[51405-51411]"
    }, {
      "left" : "case MONTHS:",
      "right" : "case MONTHS:",
      "info" : "SwitchCase[51337-51349]:SwitchCase[51424-51436]"
    }, {
      "left" : "value = period.get(DurationFieldType.months());",
      "right" : "value = period.get(DurationFieldType.months());",
      "info" : "ExpressionStatement[51366-51413]:ExpressionStatement[51453-51500]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51430-51436]:BreakStatement[51517-51523]"
    }, {
      "left" : "case WEEKS:",
      "right" : "case WEEKS:",
      "info" : "SwitchCase[51449-51460]:SwitchCase[51536-51547]"
    }, {
      "left" : "value = period.get(DurationFieldType.weeks());",
      "right" : "value = period.get(DurationFieldType.weeks());",
      "info" : "ExpressionStatement[51477-51523]:ExpressionStatement[51564-51610]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51540-51546]:BreakStatement[51627-51633]"
    }, {
      "left" : "case DAYS:",
      "right" : "case DAYS:",
      "info" : "SwitchCase[51559-51569]:SwitchCase[51646-51656]"
    }, {
      "left" : "value = period.get(DurationFieldType.days());",
      "right" : "value = period.get(DurationFieldType.days());",
      "info" : "ExpressionStatement[51586-51631]:ExpressionStatement[51673-51718]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51648-51654]:BreakStatement[51735-51741]"
    }, {
      "left" : "case HOURS:",
      "right" : "case HOURS:",
      "info" : "SwitchCase[51667-51678]:SwitchCase[51754-51765]"
    }, {
      "left" : "value = period.get(DurationFieldType.hours());",
      "right" : "value = period.get(DurationFieldType.hours());",
      "info" : "ExpressionStatement[51695-51741]:ExpressionStatement[51782-51828]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51758-51764]:BreakStatement[51845-51851]"
    }, {
      "left" : "case MINUTES:",
      "right" : "case MINUTES:",
      "info" : "SwitchCase[51777-51790]:SwitchCase[51864-51877]"
    }, {
      "left" : "value = period.get(DurationFieldType.minutes());",
      "right" : "value = period.get(DurationFieldType.minutes());",
      "info" : "ExpressionStatement[51807-51855]:ExpressionStatement[51894-51942]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51872-51878]:BreakStatement[51959-51965]"
    }, {
      "left" : "case SECONDS:",
      "right" : "case SECONDS:",
      "info" : "SwitchCase[51891-51904]:SwitchCase[51978-51991]"
    }, {
      "left" : "value = period.get(DurationFieldType.seconds());",
      "right" : "value = period.get(DurationFieldType.seconds());",
      "info" : "ExpressionStatement[51921-51969]:ExpressionStatement[52008-52056]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51986-51992]:BreakStatement[52073-52079]"
    }, {
      "left" : "case MILLIS:",
      "right" : "case MILLIS:",
      "info" : "SwitchCase[52005-52017]:SwitchCase[52092-52104]"
    }, {
      "left" : "value = period.get(DurationFieldType.millis());",
      "right" : "value = period.get(DurationFieldType.millis());",
      "info" : "ExpressionStatement[52034-52081]:ExpressionStatement[52121-52168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52098-52104]:BreakStatement[52185-52191]"
    }, {
      "left" : "case SECONDS_MILLIS:",
      "right" : "case SECONDS_MILLIS:",
      "info" : "SwitchCase[52117-52137]:SwitchCase[52204-52224]"
    }, {
      "left" : "case SECONDS_OPTIONAL_MILLIS:",
      "right" : "case SECONDS_OPTIONAL_MILLIS:",
      "info" : "SwitchCase[52166-52195]:SwitchCase[52253-52282]"
    }, {
      "left" : "int seconds = period.get(DurationFieldType.seconds());",
      "right" : "int seconds = period.get(DurationFieldType.seconds());",
      "info" : "VariableDeclarationStatement[52212-52266]:VariableDeclarationStatement[52299-52353]"
    }, {
      "left" : "int millis = period.get(DurationFieldType.millis());",
      "right" : "int millis = period.get(DurationFieldType.millis());",
      "info" : "VariableDeclarationStatement[52283-52335]:VariableDeclarationStatement[52370-52422]"
    }, {
      "left" : "value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;",
      "right" : "value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;",
      "info" : "ExpressionStatement[52352-52424]:ExpressionStatement[52439-52511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52441-52447]:BreakStatement[52528-52534]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[52545-53927]:IfStatement[52632-54014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52561-53927]:Block[52648-54014]"
    }, {
      "left" : "switch (iPrintZeroSetting) {\n                case PRINT_ZERO_NEVER:\n                    return Long.MAX_VALUE;\n                case PRINT_ZERO_RARELY_LAST:\n                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n                        for (int i = iFieldType + 1; i <= MAX_FIELD; i++) {\n                            if (isSupported(type, i) && iFieldFormatters[i] != null) {\n                                return Long.MAX_VALUE;\n                            }\n                        }\n                    } else {\n                        return Long.MAX_VALUE;\n                    }\n                    break;\n                case PRINT_ZERO_RARELY_FIRST:\n                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n                        int i = Math.min(iFieldType, 8);  // line split out for IBM JDK\n                        i--;                              // see bug 1660490\n                        for (; i >= 0 && i <= MAX_FIELD; i--) {\n                            if (isSupported(type, i) && iFieldFormatters[i] != null) {\n                                return Long.MAX_VALUE;\n                            }\n                        }\n                    } else {\n                        return Long.MAX_VALUE;\n                    }\n                    break;\n                }",
      "right" : "switch (iPrintZeroSetting) {\n                case PRINT_ZERO_NEVER:\n                    return Long.MAX_VALUE;\n                case PRINT_ZERO_RARELY_LAST:\n                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n                        for (int i = iFieldType + 1; i <= MAX_FIELD; i++) {\n                            if (isSupported(type, i) && iFieldFormatters[i] != null) {\n                                return Long.MAX_VALUE;\n                            }\n                        }\n                    } else {\n                        return Long.MAX_VALUE;\n                    }\n                    break;\n                case PRINT_ZERO_RARELY_FIRST:\n                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n                        int i = Math.min(iFieldType, 8);  // line split out for IBM JDK\n                        i--;                              // see bug 1660490\n                        for (; i >= 0 && i <= MAX_FIELD; i--) {\n                            if (isSupported(type, i) && iFieldFormatters[i] != null) {\n                                return Long.MAX_VALUE;\n                            }\n                        }\n                    } else {\n                        return Long.MAX_VALUE;\n                    }\n                    break;\n                }",
      "info" : "SwitchStatement[52579-53913]:SwitchStatement[52666-54000]"
    }, {
      "left" : "case PRINT_ZERO_NEVER:",
      "right" : "case PRINT_ZERO_NEVER:",
      "info" : "SwitchCase[52624-52646]:SwitchCase[52711-52733]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[52667-52689]:ReturnStatement[52754-52776]"
    }, {
      "left" : "case PRINT_ZERO_RARELY_LAST:",
      "right" : "case PRINT_ZERO_RARELY_LAST:",
      "info" : "SwitchCase[52706-52734]:SwitchCase[52793-52821]"
    }, {
      "left" : "if (isZero(period) && iFieldFormatters[iFieldType] == this)",
      "right" : "if (isZero(period) && iFieldFormatters[iFieldType] == this)",
      "info" : "IfStatement[52755-53188]:IfStatement[52842-53275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52815-53112]:Block[52902-53199]"
    }, {
      "left" : "for (int i = iFieldType + 1; i <= MAX_FIELD; i++)",
      "right" : "for (int i = iFieldType + 1; i <= MAX_FIELD; i++)",
      "info" : "ForStatement[52841-53090]:ForStatement[52928-53177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52891-53090]:Block[52978-53177]"
    }, {
      "left" : "if (isSupported(type, i) && iFieldFormatters[i] != null)",
      "right" : "if (isSupported(type, i) && iFieldFormatters[i] != null)",
      "info" : "IfStatement[52921-53064]:IfStatement[53008-53151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52978-53064]:Block[53065-53151]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[53012-53034]:ReturnStatement[53099-53121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53118-53188]:Block[53205-53275]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[53144-53166]:ReturnStatement[53231-53253]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53209-53215]:BreakStatement[53296-53302]"
    }, {
      "left" : "case PRINT_ZERO_RARELY_FIRST:",
      "right" : "case PRINT_ZERO_RARELY_FIRST:",
      "info" : "SwitchCase[53232-53261]:SwitchCase[53319-53348]"
    }, {
      "left" : "if (isZero(period) && iFieldFormatters[iFieldType] == this)",
      "right" : "if (isZero(period) && iFieldFormatters[iFieldType] == this)",
      "info" : "IfStatement[53282-53868]:IfStatement[53369-53955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53342-53792]:Block[53429-53879]"
    }, {
      "left" : "int i = Math.min(iFieldType, 8);",
      "right" : "int i = Math.min(iFieldType, 8);",
      "info" : "VariableDeclarationStatement[53368-53400]:VariableDeclarationStatement[53455-53487]"
    }, {
      "left" : "i--;",
      "right" : "i--;",
      "info" : "ExpressionStatement[53456-53460]:ExpressionStatement[53543-53547]"
    }, {
      "left" : "for (; i >= 0 && i <= MAX_FIELD; i--)",
      "right" : "for (; i >= 0 && i <= MAX_FIELD; i--)",
      "info" : "ForStatement[53533-53770]:ForStatement[53620-53857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53571-53770]:Block[53658-53857]"
    }, {
      "left" : "if (isSupported(type, i) && iFieldFormatters[i] != null)",
      "right" : "if (isSupported(type, i) && iFieldFormatters[i] != null)",
      "info" : "IfStatement[53601-53744]:IfStatement[53688-53831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53658-53744]:Block[53745-53831]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[53692-53714]:ReturnStatement[53779-53801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53798-53868]:Block[53885-53955]"
    }, {
      "left" : "return Long.MAX_VALUE;",
      "right" : "return Long.MAX_VALUE;",
      "info" : "ReturnStatement[53824-53846]:ReturnStatement[53911-53933]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53889-53895]:BreakStatement[53976-53982]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[53941-53954]:ReturnStatement[54028-54041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54012-54230]:Block[54099-54317]"
    }, {
      "left" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "right" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "info" : "ForStatement[54026-54195]:ForStatement[54113-54282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54081-54195]:Block[54168-54282]"
    }, {
      "left" : "if (period.getValue(i) != 0)",
      "right" : "if (period.getValue(i) != 0)",
      "info" : "IfStatement[54099-54181]:IfStatement[54186-54268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54128-54181]:Block[54215-54268]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54150-54163]:ReturnStatement[54237-54250]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54208-54220]:ReturnStatement[54295-54307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54288-55371]:Block[54375-55458]"
    }, {
      "left" : "switch (field) {\n            default:\n                return false;\n            case YEARS:\n                return type.isSupported(DurationFieldType.years());\n            case MONTHS:\n                return type.isSupported(DurationFieldType.months());\n            case WEEKS:\n                return type.isSupported(DurationFieldType.weeks());\n            case DAYS:\n                return type.isSupported(DurationFieldType.days());\n            case HOURS:\n                return type.isSupported(DurationFieldType.hours());\n            case MINUTES:\n                return type.isSupported(DurationFieldType.minutes());\n            case SECONDS:\n                return type.isSupported(DurationFieldType.seconds());\n            case MILLIS:\n                return type.isSupported(DurationFieldType.millis());\n            case SECONDS_MILLIS: // drop through\n            case SECONDS_OPTIONAL_MILLIS:\n                return type.isSupported(DurationFieldType.seconds()) ||\n                       type.isSupported(DurationFieldType.millis());\n            }",
      "right" : "switch (field) {\n            default:\n                return false;\n            case YEARS:\n                return type.isSupported(DurationFieldType.years());\n            case MONTHS:\n                return type.isSupported(DurationFieldType.months());\n            case WEEKS:\n                return type.isSupported(DurationFieldType.weeks());\n            case DAYS:\n                return type.isSupported(DurationFieldType.days());\n            case HOURS:\n                return type.isSupported(DurationFieldType.hours());\n            case MINUTES:\n                return type.isSupported(DurationFieldType.minutes());\n            case SECONDS:\n                return type.isSupported(DurationFieldType.seconds());\n            case MILLIS:\n                return type.isSupported(DurationFieldType.millis());\n            case SECONDS_MILLIS: // drop through\n            case SECONDS_OPTIONAL_MILLIS:\n                return type.isSupported(DurationFieldType.seconds()) ||\n                       type.isSupported(DurationFieldType.millis());\n            }",
      "info" : "SwitchStatement[54302-55361]:SwitchStatement[54389-55448]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54331-54339]:SwitchCase[54418-54426]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54356-54369]:ReturnStatement[54443-54456]"
    }, {
      "left" : "case YEARS:",
      "right" : "case YEARS:",
      "info" : "SwitchCase[54382-54393]:SwitchCase[54469-54480]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.years());",
      "right" : "return type.isSupported(DurationFieldType.years());",
      "info" : "ReturnStatement[54410-54461]:ReturnStatement[54497-54548]"
    }, {
      "left" : "case MONTHS:",
      "right" : "case MONTHS:",
      "info" : "SwitchCase[54474-54486]:SwitchCase[54561-54573]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.months());",
      "right" : "return type.isSupported(DurationFieldType.months());",
      "info" : "ReturnStatement[54503-54555]:ReturnStatement[54590-54642]"
    }, {
      "left" : "case WEEKS:",
      "right" : "case WEEKS:",
      "info" : "SwitchCase[54568-54579]:SwitchCase[54655-54666]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.weeks());",
      "right" : "return type.isSupported(DurationFieldType.weeks());",
      "info" : "ReturnStatement[54596-54647]:ReturnStatement[54683-54734]"
    }, {
      "left" : "case DAYS:",
      "right" : "case DAYS:",
      "info" : "SwitchCase[54660-54670]:SwitchCase[54747-54757]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.days());",
      "right" : "return type.isSupported(DurationFieldType.days());",
      "info" : "ReturnStatement[54687-54737]:ReturnStatement[54774-54824]"
    }, {
      "left" : "case HOURS:",
      "right" : "case HOURS:",
      "info" : "SwitchCase[54750-54761]:SwitchCase[54837-54848]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.hours());",
      "right" : "return type.isSupported(DurationFieldType.hours());",
      "info" : "ReturnStatement[54778-54829]:ReturnStatement[54865-54916]"
    }, {
      "left" : "case MINUTES:",
      "right" : "case MINUTES:",
      "info" : "SwitchCase[54842-54855]:SwitchCase[54929-54942]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.minutes());",
      "right" : "return type.isSupported(DurationFieldType.minutes());",
      "info" : "ReturnStatement[54872-54925]:ReturnStatement[54959-55012]"
    }, {
      "left" : "case SECONDS:",
      "right" : "case SECONDS:",
      "info" : "SwitchCase[54938-54951]:SwitchCase[55025-55038]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.seconds());",
      "right" : "return type.isSupported(DurationFieldType.seconds());",
      "info" : "ReturnStatement[54968-55021]:ReturnStatement[55055-55108]"
    }, {
      "left" : "case MILLIS:",
      "right" : "case MILLIS:",
      "info" : "SwitchCase[55034-55046]:SwitchCase[55121-55133]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.millis());",
      "right" : "return type.isSupported(DurationFieldType.millis());",
      "info" : "ReturnStatement[55063-55115]:ReturnStatement[55150-55202]"
    }, {
      "left" : "case SECONDS_MILLIS:",
      "right" : "case SECONDS_MILLIS:",
      "info" : "SwitchCase[55128-55148]:SwitchCase[55215-55235]"
    }, {
      "left" : "case SECONDS_OPTIONAL_MILLIS:",
      "right" : "case SECONDS_OPTIONAL_MILLIS:",
      "info" : "SwitchCase[55177-55206]:SwitchCase[55264-55293]"
    }, {
      "left" : "return type.isSupported(DurationFieldType.seconds()) ||\n                       type.isSupported(DurationFieldType.millis());",
      "right" : "return type.isSupported(DurationFieldType.seconds()) ||\n                       type.isSupported(DurationFieldType.millis());",
      "info" : "ReturnStatement[55223-55347]:ReturnStatement[55310-55434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55449-56253]:Block[55536-56340]"
    }, {
      "left" : "switch (field) {\n            default:\n                break;\n            case YEARS:\n                period.setYears(value);\n                break;\n            case MONTHS:\n                period.setMonths(value);\n                break;\n            case WEEKS:\n                period.setWeeks(value);\n                break;\n            case DAYS:\n                period.setDays(value);\n                break;\n            case HOURS:\n                period.setHours(value);\n                break;\n            case MINUTES:\n                period.setMinutes(value);\n                break;\n            case SECONDS:\n                period.setSeconds(value);\n                break;\n            case MILLIS:\n                period.setMillis(value);\n                break;\n            }",
      "right" : "switch (field) {\n            default:\n                break;\n            case YEARS:\n                period.setYears(value);\n                break;\n            case MONTHS:\n                period.setMonths(value);\n                break;\n            case WEEKS:\n                period.setWeeks(value);\n                break;\n            case DAYS:\n                period.setDays(value);\n                break;\n            case HOURS:\n                period.setHours(value);\n                break;\n            case MINUTES:\n                period.setMinutes(value);\n                break;\n            case SECONDS:\n                period.setSeconds(value);\n                break;\n            case MILLIS:\n                period.setMillis(value);\n                break;\n            }",
      "info" : "SwitchStatement[55463-56243]:SwitchStatement[55550-56330]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55492-55500]:SwitchCase[55579-55587]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55517-55523]:BreakStatement[55604-55610]"
    }, {
      "left" : "case YEARS:",
      "right" : "case YEARS:",
      "info" : "SwitchCase[55536-55547]:SwitchCase[55623-55634]"
    }, {
      "left" : "period.setYears(value);",
      "right" : "period.setYears(value);",
      "info" : "ExpressionStatement[55564-55587]:ExpressionStatement[55651-55674]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55604-55610]:BreakStatement[55691-55697]"
    }, {
      "left" : "case MONTHS:",
      "right" : "case MONTHS:",
      "info" : "SwitchCase[55623-55635]:SwitchCase[55710-55722]"
    }, {
      "left" : "period.setMonths(value);",
      "right" : "period.setMonths(value);",
      "info" : "ExpressionStatement[55652-55676]:ExpressionStatement[55739-55763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55693-55699]:BreakStatement[55780-55786]"
    }, {
      "left" : "case WEEKS:",
      "right" : "case WEEKS:",
      "info" : "SwitchCase[55712-55723]:SwitchCase[55799-55810]"
    }, {
      "left" : "period.setWeeks(value);",
      "right" : "period.setWeeks(value);",
      "info" : "ExpressionStatement[55740-55763]:ExpressionStatement[55827-55850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55780-55786]:BreakStatement[55867-55873]"
    }, {
      "left" : "case DAYS:",
      "right" : "case DAYS:",
      "info" : "SwitchCase[55799-55809]:SwitchCase[55886-55896]"
    }, {
      "left" : "period.setDays(value);",
      "right" : "period.setDays(value);",
      "info" : "ExpressionStatement[55826-55848]:ExpressionStatement[55913-55935]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55865-55871]:BreakStatement[55952-55958]"
    }, {
      "left" : "case HOURS:",
      "right" : "case HOURS:",
      "info" : "SwitchCase[55884-55895]:SwitchCase[55971-55982]"
    }, {
      "left" : "period.setHours(value);",
      "right" : "period.setHours(value);",
      "info" : "ExpressionStatement[55912-55935]:ExpressionStatement[55999-56022]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55952-55958]:BreakStatement[56039-56045]"
    }, {
      "left" : "case MINUTES:",
      "right" : "case MINUTES:",
      "info" : "SwitchCase[55971-55984]:SwitchCase[56058-56071]"
    }, {
      "left" : "period.setMinutes(value);",
      "right" : "period.setMinutes(value);",
      "info" : "ExpressionStatement[56001-56026]:ExpressionStatement[56088-56113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56043-56049]:BreakStatement[56130-56136]"
    }, {
      "left" : "case SECONDS:",
      "right" : "case SECONDS:",
      "info" : "SwitchCase[56062-56075]:SwitchCase[56149-56162]"
    }, {
      "left" : "period.setSeconds(value);",
      "right" : "period.setSeconds(value);",
      "info" : "ExpressionStatement[56092-56117]:ExpressionStatement[56179-56204]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56134-56140]:BreakStatement[56221-56227]"
    }, {
      "left" : "case MILLIS:",
      "right" : "case MILLIS:",
      "info" : "SwitchCase[56153-56165]:SwitchCase[56240-56252]"
    }, {
      "left" : "period.setMillis(value);",
      "right" : "period.setMillis(value);",
      "info" : "ExpressionStatement[56182-56206]:ExpressionStatement[56269-56293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56223-56229]:BreakStatement[56310-56316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56282-56324]:Block[56369-56411]"
    }, {
      "left" : "return iFieldType;",
      "right" : "return iFieldType;",
      "info" : "ReturnStatement[56296-56314]:ReturnStatement[56383-56401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56671-56708]:Block[56758-56795]"
    }, {
      "left" : "iText = text;",
      "right" : "iText = text;",
      "info" : "ExpressionStatement[56685-56698]:ExpressionStatement[56772-56785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56798-56831]:Block[56885-56918]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[56812-56821]:ReturnStatement[56899-56908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56913-56959]:Block[57000-57046]"
    }, {
      "left" : "return iText.length();",
      "right" : "return iText.length();",
      "info" : "ReturnStatement[56927-56949]:ReturnStatement[57014-57036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57045-57087]:Block[57132-57174]"
    }, {
      "left" : "buf.append(iText);",
      "right" : "buf.append(iText);",
      "info" : "ExpressionStatement[57059-57077]:ExpressionStatement[57146-57164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57186-57227]:Block[57273-57314]"
    }, {
      "left" : "out.write(iText);",
      "right" : "out.write(iText);",
      "info" : "ExpressionStatement[57200-57217]:ExpressionStatement[57287-57304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57365-57555]:Block[57452-57642]"
    }, {
      "left" : "if (periodStr.regionMatches(true, position, iText, 0, iText.length()))",
      "right" : "if (periodStr.regionMatches(true, position, iText, 0, iText.length()))",
      "info" : "IfStatement[57379-57515]:IfStatement[57466-57602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57450-57515]:Block[57537-57602]"
    }, {
      "left" : "return position + iText.length();",
      "right" : "return position + iText.length();",
      "info" : "ReturnStatement[57468-57501]:ReturnStatement[57555-57588]"
    }, {
      "left" : "return ~position;",
      "right" : "return ~position;",
      "info" : "ReturnStatement[57528-57545]:ReturnStatement[57615-57632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58471-59557]:Block[58558-59644]"
    }, {
      "left" : "iText = text;",
      "right" : "iText = text;",
      "info" : "ExpressionStatement[58485-58498]:ExpressionStatement[58572-58585]"
    }, {
      "left" : "iFinalText = finalText;",
      "right" : "iFinalText = finalText;",
      "info" : "ExpressionStatement[58511-58534]:ExpressionStatement[58598-58621]"
    }, {
      "left" : "if ((finalText == null || text.equals(finalText)) &&\n                (variants == null || variants.length == 0))",
      "right" : "if ((finalText == null || text.equals(finalText)) &&\n                (variants == null || variants.length == 0))",
      "info" : "IfStatement[58548-59390]:IfStatement[58635-59477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58661-58729]:Block[58748-58816]"
    }, {
      "left" : "iParsedForms = new String[] {text};",
      "right" : "iParsedForms = new String[] {text};",
      "info" : "ExpressionStatement[58680-58715]:ExpressionStatement[58767-58802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58735-59390]:Block[58822-59477]"
    }, {
      "left" : "TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);",
      "right" : "TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);",
      "info" : "VariableDeclarationStatement[58814-58893]:VariableDeclarationStatement[58901-58980]"
    }, {
      "left" : "parsedSet.add(text);",
      "right" : "parsedSet.add(text);",
      "info" : "ExpressionStatement[58910-58930]:ExpressionStatement[58997-59017]"
    }, {
      "left" : "parsedSet.add(finalText);",
      "right" : "parsedSet.add(finalText);",
      "info" : "ExpressionStatement[58947-58972]:ExpressionStatement[59034-59059]"
    }, {
      "left" : "if (variants != null)",
      "right" : "if (variants != null)",
      "info" : "IfStatement[58989-59164]:IfStatement[59076-59251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59011-59164]:Block[59098-59251]"
    }, {
      "left" : "for (int i=variants.length; --i>=0)",
      "right" : "for (int i=variants.length; --i>=0)",
      "info" : "ForStatement[59033-59146]:ForStatement[59120-59233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59071-59146]:Block[59158-59233]"
    }, {
      "left" : "parsedSet.add(variants[i]);",
      "right" : "parsedSet.add(variants[i]);",
      "info" : "ExpressionStatement[59097-59124]:ExpressionStatement[59184-59211]"
    }, {
      "left" : "ArrayList<String> parsedList = new ArrayList<String>(parsedSet);",
      "right" : "ArrayList<String> parsedList = new ArrayList<String>(parsedSet);",
      "info" : "VariableDeclarationStatement[59181-59245]:VariableDeclarationStatement[59268-59332]"
    }, {
      "left" : "Collections.reverse(parsedList);",
      "right" : "Collections.reverse(parsedList);",
      "info" : "ExpressionStatement[59262-59294]:ExpressionStatement[59349-59381]"
    }, {
      "left" : "iParsedForms = parsedList.toArray(new String[parsedList.size()]);",
      "right" : "iParsedForms = parsedList.toArray(new String[parsedList.size()]);",
      "info" : "ExpressionStatement[59311-59376]:ExpressionStatement[59398-59463]"
    }, {
      "left" : "iBeforePrinter = beforePrinter;",
      "right" : "iBeforePrinter = beforePrinter;",
      "info" : "ExpressionStatement[59404-59435]:ExpressionStatement[59491-59522]"
    }, {
      "left" : "iBeforeParser = beforeParser;",
      "right" : "iBeforeParser = beforeParser;",
      "info" : "ExpressionStatement[59448-59477]:ExpressionStatement[59535-59564]"
    }, {
      "left" : "iUseBefore = useBefore;",
      "right" : "iUseBefore = useBefore;",
      "info" : "ExpressionStatement[59490-59513]:ExpressionStatement[59577-59600]"
    }, {
      "left" : "iUseAfter = useAfter;",
      "right" : "iUseAfter = useAfter;",
      "info" : "ExpressionStatement[59526-59547]:ExpressionStatement[59613-59634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59647-59890]:Block[59734-59977]"
    }, {
      "left" : "int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale);",
      "right" : "int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale);",
      "info" : "VariableDeclarationStatement[59661-59729]:VariableDeclarationStatement[59748-59816]"
    }, {
      "left" : "if (sum < stopAt)",
      "right" : "if (sum < stopAt)",
      "info" : "IfStatement[59742-59856]:IfStatement[59829-59943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59760-59856]:Block[59847-59943]"
    }, {
      "left" : "sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale);",
      "right" : "sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale);",
      "info" : "ExpressionStatement[59778-59842]:ExpressionStatement[59865-59929]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[59869-59880]:ReturnStatement[59956-59967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59972-60918]:Block[60059-61005]"
    }, {
      "left" : "PeriodPrinter before = iBeforePrinter;",
      "right" : "PeriodPrinter before = iBeforePrinter;",
      "info" : "VariableDeclarationStatement[59986-60024]:VariableDeclarationStatement[60073-60111]"
    }, {
      "left" : "PeriodPrinter after = iAfterPrinter;",
      "right" : "PeriodPrinter after = iAfterPrinter;",
      "info" : "VariableDeclarationStatement[60037-60073]:VariableDeclarationStatement[60124-60160]"
    }, {
      "left" : "int sum = before.calculatePrintedLength(period, locale)\n                    + after.calculatePrintedLength(period, locale);",
      "right" : "int sum = before.calculatePrintedLength(period, locale)\n                    + after.calculatePrintedLength(period, locale);",
      "info" : "VariableDeclarationStatement[60099-60222]:VariableDeclarationStatement[60186-60309]"
    }, {
      "left" : "if (iUseBefore)",
      "right" : "if (iUseBefore)",
      "info" : "IfStatement[60248-60871]:IfStatement[60335-60958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60264-60745]:Block[60351-60832]"
    }, {
      "left" : "if (before.countFieldsToPrint(period, 1, locale) > 0)",
      "right" : "if (before.countFieldsToPrint(period, 1, locale) > 0)",
      "info" : "IfStatement[60282-60731]:IfStatement[60369-60818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60336-60731]:Block[60423-60818]"
    }, {
      "left" : "if (iUseAfter)",
      "right" : "if (iUseAfter)",
      "info" : "IfStatement[60358-60713]:IfStatement[60445-60800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60373-60637]:Block[60460-60724]"
    }, {
      "left" : "int afterCount = after.countFieldsToPrint(period, 2, locale);",
      "right" : "int afterCount = after.countFieldsToPrint(period, 2, locale);",
      "info" : "VariableDeclarationStatement[60399-60460]:VariableDeclarationStatement[60486-60547]"
    }, {
      "left" : "if (afterCount > 0)",
      "right" : "if (afterCount > 0)",
      "info" : "IfStatement[60485-60615]:IfStatement[60572-60702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60505-60615]:Block[60592-60702]"
    }, {
      "left" : "sum += (afterCount > 1 ? iText : iFinalText).length();",
      "right" : "sum += (afterCount > 1 ? iText : iFinalText).length();",
      "info" : "ExpressionStatement[60535-60589]:ExpressionStatement[60622-60676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60643-60713]:Block[60730-60800]"
    }, {
      "left" : "sum += iText.length();",
      "right" : "sum += iText.length();",
      "info" : "ExpressionStatement[60669-60691]:ExpressionStatement[60756-60778]"
    }, {
      "left" : "if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0)",
      "right" : "if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0)",
      "info" : "IfStatement[60751-60871]:IfStatement[60838-60958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60817-60871]:Block[60904-60958]"
    }, {
      "left" : "sum += iText.length();",
      "right" : "sum += iText.length();",
      "info" : "ExpressionStatement[60835-60857]:ExpressionStatement[60922-60944]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[60897-60908]:ReturnStatement[60984-60995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61004-61847]:Block[61091-61934]"
    }, {
      "left" : "PeriodPrinter before = iBeforePrinter;",
      "right" : "PeriodPrinter before = iBeforePrinter;",
      "info" : "VariableDeclarationStatement[61018-61056]:VariableDeclarationStatement[61105-61143]"
    }, {
      "left" : "PeriodPrinter after = iAfterPrinter;",
      "right" : "PeriodPrinter after = iAfterPrinter;",
      "info" : "VariableDeclarationStatement[61069-61105]:VariableDeclarationStatement[61156-61192]"
    }, {
      "left" : "before.printTo(buf, period, locale);",
      "right" : "before.printTo(buf, period, locale);",
      "info" : "ExpressionStatement[61131-61167]:ExpressionStatement[61218-61254]"
    }, {
      "left" : "if (iUseBefore)",
      "right" : "if (iUseBefore)",
      "info" : "IfStatement[61180-61789]:IfStatement[61267-61876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61196-61667]:Block[61283-61754]"
    }, {
      "left" : "if (before.countFieldsToPrint(period, 1, locale) > 0)",
      "right" : "if (before.countFieldsToPrint(period, 1, locale) > 0)",
      "info" : "IfStatement[61214-61653]:IfStatement[61301-61740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61268-61653]:Block[61355-61740]"
    }, {
      "left" : "if (iUseAfter)",
      "right" : "if (iUseAfter)",
      "info" : "IfStatement[61290-61635]:IfStatement[61377-61722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61305-61563]:Block[61392-61650]"
    }, {
      "left" : "int afterCount = after.countFieldsToPrint(period, 2, locale);",
      "right" : "int afterCount = after.countFieldsToPrint(period, 2, locale);",
      "info" : "VariableDeclarationStatement[61331-61392]:VariableDeclarationStatement[61418-61479]"
    }, {
      "left" : "if (afterCount > 0)",
      "right" : "if (afterCount > 0)",
      "info" : "IfStatement[61417-61541]:IfStatement[61504-61628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61437-61541]:Block[61524-61628]"
    }, {
      "left" : "buf.append(afterCount > 1 ? iText : iFinalText);",
      "right" : "buf.append(afterCount > 1 ? iText : iFinalText);",
      "info" : "ExpressionStatement[61467-61515]:ExpressionStatement[61554-61602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61569-61635]:Block[61656-61722]"
    }, {
      "left" : "buf.append(iText);",
      "right" : "buf.append(iText);",
      "info" : "ExpressionStatement[61595-61613]:ExpressionStatement[61682-61700]"
    }, {
      "left" : "if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0)",
      "right" : "if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0)",
      "info" : "IfStatement[61673-61789]:IfStatement[61760-61876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61739-61789]:Block[61826-61876]"
    }, {
      "left" : "buf.append(iText);",
      "right" : "buf.append(iText);",
      "info" : "ExpressionStatement[61757-61775]:ExpressionStatement[61844-61862]"
    }, {
      "left" : "after.printTo(buf, period, locale);",
      "right" : "after.printTo(buf, period, locale);",
      "info" : "ExpressionStatement[61802-61837]:ExpressionStatement[61889-61924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61946-62786]:Block[62033-62873]"
    }, {
      "left" : "PeriodPrinter before = iBeforePrinter;",
      "right" : "PeriodPrinter before = iBeforePrinter;",
      "info" : "VariableDeclarationStatement[61960-61998]:VariableDeclarationStatement[62047-62085]"
    }, {
      "left" : "PeriodPrinter after = iAfterPrinter;",
      "right" : "PeriodPrinter after = iAfterPrinter;",
      "info" : "VariableDeclarationStatement[62011-62047]:VariableDeclarationStatement[62098-62134]"
    }, {
      "left" : "before.printTo(out, period, locale);",
      "right" : "before.printTo(out, period, locale);",
      "info" : "ExpressionStatement[62073-62109]:ExpressionStatement[62160-62196]"
    }, {
      "left" : "if (iUseBefore)",
      "right" : "if (iUseBefore)",
      "info" : "IfStatement[62122-62728]:IfStatement[62209-62815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62138-62607]:Block[62225-62694]"
    }, {
      "left" : "if (before.countFieldsToPrint(period, 1, locale) > 0)",
      "right" : "if (before.countFieldsToPrint(period, 1, locale) > 0)",
      "info" : "IfStatement[62156-62593]:IfStatement[62243-62680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62210-62593]:Block[62297-62680]"
    }, {
      "left" : "if (iUseAfter)",
      "right" : "if (iUseAfter)",
      "info" : "IfStatement[62232-62575]:IfStatement[62319-62662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62247-62504]:Block[62334-62591]"
    }, {
      "left" : "int afterCount = after.countFieldsToPrint(period, 2, locale);",
      "right" : "int afterCount = after.countFieldsToPrint(period, 2, locale);",
      "info" : "VariableDeclarationStatement[62273-62334]:VariableDeclarationStatement[62360-62421]"
    }, {
      "left" : "if (afterCount > 0)",
      "right" : "if (afterCount > 0)",
      "info" : "IfStatement[62359-62482]:IfStatement[62446-62569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62379-62482]:Block[62466-62569]"
    }, {
      "left" : "out.write(afterCount > 1 ? iText : iFinalText);",
      "right" : "out.write(afterCount > 1 ? iText : iFinalText);",
      "info" : "ExpressionStatement[62409-62456]:ExpressionStatement[62496-62543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62510-62575]:Block[62597-62662]"
    }, {
      "left" : "out.write(iText);",
      "right" : "out.write(iText);",
      "info" : "ExpressionStatement[62536-62553]:ExpressionStatement[62623-62640]"
    }, {
      "left" : "if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0)",
      "right" : "if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0)",
      "info" : "IfStatement[62613-62728]:IfStatement[62700-62815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62679-62728]:Block[62766-62815]"
    }, {
      "left" : "out.write(iText);",
      "right" : "out.write(iText);",
      "info" : "ExpressionStatement[62697-62714]:ExpressionStatement[62784-62801]"
    }, {
      "left" : "after.printTo(out, period, locale);",
      "right" : "after.printTo(out, period, locale);",
      "info" : "ExpressionStatement[62741-62776]:ExpressionStatement[62828-62863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62924-64399]:Block[63011-64486]"
    }, {
      "left" : "int oldPos = position;",
      "right" : "int oldPos = position;",
      "info" : "VariableDeclarationStatement[62938-62960]:VariableDeclarationStatement[63025-63047]"
    }, {
      "left" : "position = iBeforeParser.parseInto(period, periodStr, position, locale);",
      "right" : "position = iBeforeParser.parseInto(period, periodStr, position, locale);",
      "info" : "ExpressionStatement[62973-63045]:ExpressionStatement[63060-63132]"
    }, {
      "left" : "if (position < 0)",
      "right" : "if (position < 0)",
      "info" : "IfStatement[63059-63125]:IfStatement[63146-63212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63077-63125]:Block[63164-63212]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[63095-63111]:ReturnStatement[63182-63198]"
    }, {
      "left" : "boolean found = false;",
      "right" : "boolean found = false;",
      "info" : "VariableDeclarationStatement[63139-63161]:VariableDeclarationStatement[63226-63248]"
    }, {
      "left" : "if (position > oldPos)",
      "right" : "if (position > oldPos)",
      "info" : "IfStatement[63174-63857]:IfStatement[63261-63944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63197-63857]:Block[63284-63944]"
    }, {
      "left" : "String[] parsedForms = iParsedForms;",
      "right" : "String[] parsedForms = iParsedForms;",
      "info" : "VariableDeclarationStatement[63258-63294]:VariableDeclarationStatement[63345-63381]"
    }, {
      "left" : "int length = parsedForms.length;",
      "right" : "int length = parsedForms.length;",
      "info" : "VariableDeclarationStatement[63311-63343]:VariableDeclarationStatement[63398-63430]"
    }, {
      "left" : "for (int i=0; i < length; i++)",
      "right" : "for (int i=0; i < length; i++)",
      "info" : "ForStatement[63360-63843]:ForStatement[63447-63930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63391-63843]:Block[63478-63930]"
    }, {
      "left" : "String parsedForm = parsedForms[i];",
      "right" : "String parsedForm = parsedForms[i];",
      "info" : "VariableDeclarationStatement[63413-63448]:VariableDeclarationStatement[63500-63535]"
    }, {
      "left" : "if ((parsedForm == null || parsedForm.length() == 0) ||\n                        periodStr.regionMatches\n                        (true, position, parsedForm, 0, parsedForm.length()))",
      "right" : "if ((parsedForm == null || parsedForm.length() == 0) ||\n                        periodStr.regionMatches\n                        (true, position, parsedForm, 0, parsedForm.length()))",
      "info" : "IfStatement[63469-63825]:IfStatement[63556-63912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63651-63825]:Block[63738-63912]"
    }, {
      "left" : "position += parsedForm.length();",
      "right" : "position += parsedForm.length();",
      "info" : "ExpressionStatement[63702-63734]:ExpressionStatement[63789-63821]"
    }, {
      "left" : "found = true;",
      "right" : "found = true;",
      "info" : "ExpressionStatement[63759-63772]:ExpressionStatement[63846-63859]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63797-63803]:BreakStatement[63884-63890]"
    }, {
      "left" : "oldPos = position;",
      "right" : "oldPos = position;",
      "info" : "ExpressionStatement[63871-63889]:ExpressionStatement[63958-63976]"
    }, {
      "left" : "position = iAfterParser.parseInto(period, periodStr, position, locale);",
      "right" : "position = iAfterParser.parseInto(period, periodStr, position, locale);",
      "info" : "ExpressionStatement[63902-63973]:ExpressionStatement[63989-64060]"
    }, {
      "left" : "if (position < 0)",
      "right" : "if (position < 0)",
      "info" : "IfStatement[63987-64053]:IfStatement[64074-64140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64005-64053]:Block[64092-64140]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[64023-64039]:ReturnStatement[64110-64126]"
    }, {
      "left" : "if (found && position == oldPos)",
      "right" : "if (found && position == oldPos)",
      "info" : "IfStatement[64067-64207]:IfStatement[64154-64294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64100-64207]:Block[64187-64294]"
    }, {
      "left" : "return ~oldPos;",
      "right" : "return ~oldPos;",
      "info" : "ReturnStatement[64178-64193]:ReturnStatement[64265-64280]"
    }, {
      "left" : "if (position > oldPos && !found && !iUseBefore)",
      "right" : "if (position > oldPos && !found && !iUseBefore)",
      "info" : "IfStatement[64221-64359]:IfStatement[64308-64446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64269-64359]:Block[64356-64446]"
    }, {
      "left" : "return ~oldPos;",
      "right" : "return ~oldPos;",
      "info" : "ReturnStatement[64330-64345]:ReturnStatement[64417-64432]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[64373-64389]:ReturnStatement[64460-64476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64480-64598]:Block[64567-64685]"
    }, {
      "left" : "iAfterPrinter = afterPrinter;",
      "right" : "iAfterPrinter = afterPrinter;",
      "info" : "ExpressionStatement[64494-64523]:ExpressionStatement[64581-64610]"
    }, {
      "left" : "iAfterParser = afterParser;",
      "right" : "iAfterParser = afterParser;",
      "info" : "ExpressionStatement[64536-64563]:ExpressionStatement[64623-64650]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[64576-64588]:ReturnStatement[64663-64675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65014-65661]:Block[65101-65748]"
    }, {
      "left" : "List<Object> printerList = new ArrayList<Object>();",
      "right" : "List<Object> printerList = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[65028-65079]:VariableDeclarationStatement[65115-65166]"
    }, {
      "left" : "List<Object> parserList = new ArrayList<Object>();",
      "right" : "List<Object> parserList = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[65092-65142]:VariableDeclarationStatement[65179-65229]"
    }, {
      "left" : "decompose(elementPairs, printerList, parserList);",
      "right" : "decompose(elementPairs, printerList, parserList);",
      "info" : "ExpressionStatement[65156-65205]:ExpressionStatement[65243-65292]"
    }, {
      "left" : "if (printerList.size() <= 0)",
      "right" : "if (printerList.size() <= 0)",
      "info" : "IfStatement[65219-65431]:IfStatement[65306-65518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65248-65297]:Block[65335-65384]"
    }, {
      "left" : "iPrinters = null;",
      "right" : "iPrinters = null;",
      "info" : "ExpressionStatement[65266-65283]:ExpressionStatement[65353-65370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65303-65431]:Block[65390-65518]"
    }, {
      "left" : "iPrinters = printerList.toArray(\n                        new PeriodPrinter[printerList.size()]);",
      "right" : "iPrinters = printerList.toArray(\n                        new PeriodPrinter[printerList.size()]);",
      "info" : "ExpressionStatement[65321-65417]:ExpressionStatement[65408-65504]"
    }, {
      "left" : "if (parserList.size() <= 0)",
      "right" : "if (parserList.size() <= 0)",
      "info" : "IfStatement[65445-65651]:IfStatement[65532-65738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65473-65521]:Block[65560-65608]"
    }, {
      "left" : "iParsers = null;",
      "right" : "iParsers = null;",
      "info" : "ExpressionStatement[65491-65507]:ExpressionStatement[65578-65594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65527-65651]:Block[65614-65738]"
    }, {
      "left" : "iParsers = parserList.toArray(\n                        new PeriodParser[parserList.size()]);",
      "right" : "iParsers = parserList.toArray(\n                        new PeriodParser[parserList.size()]);",
      "info" : "ExpressionStatement[65545-65637]:ExpressionStatement[65632-65724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65751-66033]:Block[65838-66120]"
    }, {
      "left" : "int sum = 0;",
      "right" : "int sum = 0;",
      "info" : "VariableDeclarationStatement[65765-65777]:VariableDeclarationStatement[65852-65864]"
    }, {
      "left" : "PeriodPrinter[] printers = iPrinters;",
      "right" : "PeriodPrinter[] printers = iPrinters;",
      "info" : "VariableDeclarationStatement[65790-65827]:VariableDeclarationStatement[65877-65914]"
    }, {
      "left" : "for (int i=printers.length; sum < stopAt && --i>=0)",
      "right" : "for (int i=printers.length; sum < stopAt && --i>=0)",
      "info" : "ForStatement[65840-65999]:ForStatement[65927-66086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65894-65999]:Block[65981-66086]"
    }, {
      "left" : "sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",
      "right" : "sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",
      "info" : "ExpressionStatement[65912-65985]:ExpressionStatement[65999-66072]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[66012-66023]:ReturnStatement[66099-66110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66115-66366]:Block[66202-66453]"
    }, {
      "left" : "int sum = 0;",
      "right" : "int sum = 0;",
      "info" : "VariableDeclarationStatement[66129-66141]:VariableDeclarationStatement[66216-66228]"
    }, {
      "left" : "PeriodPrinter[] printers = iPrinters;",
      "right" : "PeriodPrinter[] printers = iPrinters;",
      "info" : "VariableDeclarationStatement[66154-66191]:VariableDeclarationStatement[66241-66278]"
    }, {
      "left" : "for (int i=printers.length; --i>=0)",
      "right" : "for (int i=printers.length; --i>=0)",
      "info" : "ForStatement[66204-66332]:ForStatement[66291-66419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66242-66332]:Block[66329-66419]"
    }, {
      "left" : "sum += printers[i].calculatePrintedLength(period, locale);",
      "right" : "sum += printers[i].calculatePrintedLength(period, locale);",
      "info" : "ExpressionStatement[66260-66318]:ExpressionStatement[66347-66405]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[66345-66356]:ReturnStatement[66432-66443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66452-66664]:Block[66539-66751]"
    }, {
      "left" : "PeriodPrinter[] printers = iPrinters;",
      "right" : "PeriodPrinter[] printers = iPrinters;",
      "info" : "VariableDeclarationStatement[66466-66503]:VariableDeclarationStatement[66553-66590]"
    }, {
      "left" : "int len = printers.length;",
      "right" : "int len = printers.length;",
      "info" : "VariableDeclarationStatement[66516-66542]:VariableDeclarationStatement[66603-66629]"
    }, {
      "left" : "for (int i=0; i<len; i++)",
      "right" : "for (int i=0; i<len; i++)",
      "info" : "ForStatement[66555-66654]:ForStatement[66642-66741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66581-66654]:Block[66668-66741]"
    }, {
      "left" : "printers[i].printTo(buf, period, locale);",
      "right" : "printers[i].printTo(buf, period, locale);",
      "info" : "ExpressionStatement[66599-66640]:ExpressionStatement[66686-66727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66763-66975]:Block[66850-67062]"
    }, {
      "left" : "PeriodPrinter[] printers = iPrinters;",
      "right" : "PeriodPrinter[] printers = iPrinters;",
      "info" : "VariableDeclarationStatement[66777-66814]:VariableDeclarationStatement[66864-66901]"
    }, {
      "left" : "int len = printers.length;",
      "right" : "int len = printers.length;",
      "info" : "VariableDeclarationStatement[66827-66853]:VariableDeclarationStatement[66914-66940]"
    }, {
      "left" : "for (int i=0; i<len; i++)",
      "right" : "for (int i=0; i<len; i++)",
      "info" : "ForStatement[66866-66965]:ForStatement[66953-67052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66892-66965]:Block[66979-67052]"
    }, {
      "left" : "printers[i].printTo(out, period, locale);",
      "right" : "printers[i].printTo(out, period, locale);",
      "info" : "ExpressionStatement[66910-66951]:ExpressionStatement[66997-67038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67113-67504]:Block[67200-67591]"
    }, {
      "left" : "PeriodParser[] parsers = iParsers;",
      "right" : "PeriodParser[] parsers = iParsers;",
      "info" : "VariableDeclarationStatement[67127-67161]:VariableDeclarationStatement[67214-67248]"
    }, {
      "left" : "if (parsers == null)",
      "right" : "if (parsers == null)",
      "info" : "IfStatement[67174-67269]:IfStatement[67261-67356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67195-67269]:Block[67282-67356]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[67213-67255]:ThrowStatement[67300-67342]"
    }, {
      "left" : "int len = parsers.length;",
      "right" : "int len = parsers.length;",
      "info" : "VariableDeclarationStatement[67283-67308]:VariableDeclarationStatement[67370-67395]"
    }, {
      "left" : "for (int i=0; i<len && position >= 0; i++)",
      "right" : "for (int i=0; i<len && position >= 0; i++)",
      "info" : "ForStatement[67321-67465]:ForStatement[67408-67552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67364-67465]:Block[67451-67552]"
    }, {
      "left" : "position = parsers[i].parseInto(period, periodStr, position, locale);",
      "right" : "position = parsers[i].parseInto(period, periodStr, position, locale);",
      "info" : "ExpressionStatement[67382-67451]:ExpressionStatement[67469-67538]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[67478-67494]:ReturnStatement[67565-67581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67615-68462]:Block[67702-68549]"
    }, {
      "left" : "int size = elementPairs.size();",
      "right" : "int size = elementPairs.size();",
      "info" : "VariableDeclarationStatement[67629-67660]:VariableDeclarationStatement[67716-67747]"
    }, {
      "left" : "for (int i=0; i<size; i+=2)",
      "right" : "for (int i=0; i<size; i+=2)",
      "info" : "ForStatement[67673-68452]:ForStatement[67760-68539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67701-68452]:Block[67788-68539]"
    }, {
      "left" : "Object element = elementPairs.get(i);",
      "right" : "Object element = elementPairs.get(i);",
      "info" : "VariableDeclarationStatement[67719-67756]:VariableDeclarationStatement[67806-67843]"
    }, {
      "left" : "if (element instanceof PeriodPrinter)",
      "right" : "if (element instanceof PeriodPrinter)",
      "info" : "IfStatement[67773-68073]:IfStatement[67860-68160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67811-68073]:Block[67898-68160]"
    }, {
      "left" : "if (element instanceof Composite)",
      "right" : "if (element instanceof Composite)",
      "info" : "IfStatement[67833-68055]:IfStatement[67920-68142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67867-67976]:Block[67954-68063]"
    }, {
      "left" : "addArrayToList(printerList, ((Composite) element).iPrinters);",
      "right" : "addArrayToList(printerList, ((Composite) element).iPrinters);",
      "info" : "ExpressionStatement[67893-67954]:ExpressionStatement[67980-68041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67982-68055]:Block[68069-68142]"
    }, {
      "left" : "printerList.add(element);",
      "right" : "printerList.add(element);",
      "info" : "ExpressionStatement[68008-68033]:ExpressionStatement[68095-68120]"
    }, {
      "left" : "element = elementPairs.get(i + 1);",
      "right" : "element = elementPairs.get(i + 1);",
      "info" : "ExpressionStatement[68091-68125]:ExpressionStatement[68178-68212]"
    }, {
      "left" : "if (element instanceof PeriodParser)",
      "right" : "if (element instanceof PeriodParser)",
      "info" : "IfStatement[68142-68438]:IfStatement[68229-68525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68179-68438]:Block[68266-68525]"
    }, {
      "left" : "if (element instanceof Composite)",
      "right" : "if (element instanceof Composite)",
      "info" : "IfStatement[68201-68420]:IfStatement[68288-68507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68235-68342]:Block[68322-68429]"
    }, {
      "left" : "addArrayToList(parserList, ((Composite) element).iParsers);",
      "right" : "addArrayToList(parserList, ((Composite) element).iParsers);",
      "info" : "ExpressionStatement[68261-68320]:ExpressionStatement[68348-68407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68348-68420]:Block[68435-68507]"
    }, {
      "left" : "parserList.add(element);",
      "right" : "parserList.add(element);",
      "info" : "ExpressionStatement[68374-68398]:ExpressionStatement[68461-68485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68535-68704]:Block[68622-68791]"
    }, {
      "left" : "if (array != null)",
      "right" : "if (array != null)",
      "info" : "IfStatement[68549-68694]:IfStatement[68636-68781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68568-68694]:Block[68655-68781]"
    }, {
      "left" : "for (int i=0; i<array.length; i++)",
      "right" : "for (int i=0; i<array.length; i++)",
      "info" : "ForStatement[68586-68680]:ForStatement[68673-68767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68621-68680]:Block[68708-68767]"
    }, {
      "left" : "list.add(array[i]);",
      "right" : "list.add(array[i]);",
      "info" : "ExpressionStatement[68643-68662]:ExpressionStatement[68730-68749]"
    } ]
  },
  "interFileMappings" : { }
}