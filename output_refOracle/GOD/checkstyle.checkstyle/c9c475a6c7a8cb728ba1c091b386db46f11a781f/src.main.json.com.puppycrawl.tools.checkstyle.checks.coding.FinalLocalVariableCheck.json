{
  "matchedElements" : [
 {
    "left" : "class : FinalLocalVariableCheck",
    "right" : "class : FinalLocalVariableCheck",
    "info" : "TypeDeclaration[1429-12322]:TypeDeclaration[1429-12521]"
  }, {
    "left" : "MSG_KEY",
    "right" : "MSG_KEY",
    "info" : "FieldDeclaration[2642-2803]:FieldDeclaration[2642-2803]"
  }, {
    "left" : "scopeStack",
    "right" : "scopeStack",
    "info" : "FieldDeclaration[2809-2908]:FieldDeclaration[2809-2908]"
  }, {
    "left" : "validateEnhancedForLoopVariable",
    "right" : "validateEnhancedForLoopVariable",
    "info" : "FieldDeclaration[2914-3027]:FieldDeclaration[2914-3027]"
  }, {
    "left" : "public setValidateEnhancedForLoopVariable(validateEnhancedForLoopVariable boolean) : void",
    "right" : "public setValidateEnhancedForLoopVariable(validateEnhancedForLoopVariable boolean) : void",
    "info" : "MethodDeclaration[3033-3370]:MethodDeclaration[3033-3370]"
  }, {
    "left" : "public getDefaultTokens() : ",
    "right" : "public getDefaultTokens() : ",
    "info" : "MethodDeclaration[3376-3775]:MethodDeclaration[3376-3775]"
  }, {
    "left" : "public getAcceptableTokens() : ",
    "right" : "public getAcceptableTokens() : ",
    "info" : "MethodDeclaration[3781-4221]:MethodDeclaration[3781-4221]"
  }, {
    "left" : "public getRequiredTokens() : ",
    "right" : "public getRequiredTokens() : ",
    "info" : "MethodDeclaration[4227-4590]:MethodDeclaration[4227-4590]"
  }, {
    "left" : "public visitToken(ast ) : void",
    "right" : "public visitToken(ast ) : void",
    "info" : "MethodDeclaration[4596-6003]:MethodDeclaration[4596-6116]"
  }, {
    "left" : "private isAssignOperator(parentType int) : boolean",
    "right" : "private isAssignOperator(parentType int) : boolean",
    "info" : "MethodDeclaration[6009-7072]:MethodDeclaration[6122-7185]"
  }, {
    "left" : "private shouldCheckEnhancedForLoopVariable(ast ) : boolean",
    "right" : "private shouldCheckEnhancedForLoopVariable(ast ) : boolean",
    "info" : "MethodDeclaration[7078-7476]:MethodDeclaration[7191-7589]"
  }, {
    "left" : "private isVariableInForInit(variableDef ) : boolean",
    "right" : "private isVariableInForInit(variableDef ) : boolean",
    "info" : "MethodDeclaration[7482-8075]:MethodDeclaration[7595-8188]"
  }, {
    "left" : "private inAbstractOrNativeMethod(ast ) : boolean",
    "right" : "private inAbstractOrNativeMethod(ast ) : boolean",
    "info" : "MethodDeclaration[8081-8844]:MethodDeclaration[8194-9043]"
  }, {
    "left" : "private inLambda(paramDef ) : boolean",
    "right" : "private inLambda(paramDef ) : boolean",
    "info" : "MethodDeclaration[8850-9179]:MethodDeclaration[9049-9378]"
  }, {
    "left" : "private findClassOrConstructorOrMethodInWhichItIsDefined(ast ) : ",
    "right" : "private findClassOrConstructorOrMethodInWhichItIsDefined(ast ) : ",
    "info" : "MethodDeclaration[9185-9855]:MethodDeclaration[9384-10054]"
  }, {
    "left" : "private isSameVariables(ast1 , ast2 ) : boolean",
    "right" : "private isSameVariables(ast1 , ast2 ) : boolean",
    "info" : "MethodDeclaration[9861-10664]:MethodDeclaration[10060-10863]"
  }, {
    "left" : "private insertVariable(ast ) : void",
    "right" : "private insertVariable(ast ) : void",
    "info" : "MethodDeclaration[10670-11013]:MethodDeclaration[10869-11212]"
  }, {
    "left" : "private removeVariable(ast ) : void",
    "right" : "private removeVariable(ast ) : void",
    "info" : "MethodDeclaration[11019-11605]:MethodDeclaration[11218-11804]"
  }, {
    "left" : "public leaveToken(ast ) : void",
    "right" : "public leaveToken(ast ) : void",
    "info" : "MethodDeclaration[11611-12320]:MethodDeclaration[11810-12519]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2584-2590]:Modifier[2584-2590]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2591-2596]:TYPE_DECLARATION_KIND[2591-2596]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3189-3195]:Modifier[3189-3195]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3196-3201]:Modifier[3196-3201]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3202-3206]:PrimitiveType[3202-3206]"
  }, {
    "left" : "setValidateEnhancedForLoopVariable",
    "right" : "setValidateEnhancedForLoopVariable",
    "info" : "SimpleName[3207-3241]:SimpleName[3207-3241]"
  }, {
    "left" : "boolean validateEnhancedForLoopVariable",
    "right" : "boolean validateEnhancedForLoopVariable",
    "info" : "SingleVariableDeclaration[3242-3281]:SingleVariableDeclaration[3242-3281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3283-3370]:Block[3283-3370]"
  }, {
    "left" : "this.validateEnhancedForLoopVariable = validateEnhancedForLoopVariable;",
    "right" : "this.validateEnhancedForLoopVariable = validateEnhancedForLoopVariable;",
    "info" : "ExpressionStatement[3293-3364]:ExpressionStatement[3293-3364]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3376-3385]:MarkerAnnotation[3376-3385]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3390-3396]:Modifier[3390-3396]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[3397-3402]:ArrayType[3397-3402]"
  }, {
    "left" : "getDefaultTokens",
    "right" : "getDefaultTokens",
    "info" : "SimpleName[3403-3419]:SimpleName[3403-3419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3422-3775]:Block[3422-3775]"
  }, {
    "left" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
    "right" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
    "info" : "ReturnStatement[3432-3769]:ReturnStatement[3432-3769]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3781-3790]:MarkerAnnotation[3781-3790]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3795-3801]:Modifier[3795-3801]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[3802-3807]:ArrayType[3802-3807]"
  }, {
    "left" : "getAcceptableTokens",
    "right" : "getAcceptableTokens",
    "info" : "SimpleName[3808-3827]:SimpleName[3808-3827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3830-4221]:Block[3830-4221]"
  }, {
    "left" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n            TokenTypes.PARAMETER_DEF,\n        };",
    "right" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.VARIABLE_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n            TokenTypes.PARAMETER_DEF,\n        };",
    "info" : "ReturnStatement[3840-4215]:ReturnStatement[3840-4215]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4227-4236]:MarkerAnnotation[4227-4236]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4241-4247]:Modifier[4241-4247]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[4248-4253]:ArrayType[4248-4253]"
  }, {
    "left" : "getRequiredTokens",
    "right" : "getRequiredTokens",
    "info" : "SimpleName[4254-4271]:SimpleName[4254-4271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4274-4590]:Block[4274-4590]"
  }, {
    "left" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
    "right" : "return new int[] {\n            TokenTypes.IDENT,\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.INSTANCE_INIT,\n            TokenTypes.STATIC_INIT,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.SLIST,\n            TokenTypes.OBJBLOCK,\n        };",
    "info" : "ReturnStatement[4284-4584]:ReturnStatement[4284-4584]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4596-4605]:MarkerAnnotation[4596-4605]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4610-4616]:Modifier[4610-4616]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4617-4621]:PrimitiveType[4617-4621]"
  }, {
    "left" : "visitToken",
    "right" : "visitToken",
    "info" : "SimpleName[4622-4632]:SimpleName[4622-4632]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[4633-4646]:SingleVariableDeclaration[4633-4646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4648-6003]:Block[4648-6116]"
  }, {
    "left" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.METHOD_DEF:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n                scopeStack.push(new HashMap<String, DetailAST>());\n                break;\n\n            case TokenTypes.PARAMETER_DEF:\n                if (ScopeUtils.inInterfaceBlock(ast)\n                    || inAbstractOrNativeMethod(ast)\n                    || inLambda(ast)) {\n                    break;\n                }\n            case TokenTypes.VARIABLE_DEF:\n                if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && isVariableInForInit(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)) {\n                    insertVariable(ast);\n                }\n                break;\n\n            case TokenTypes.IDENT:\n                final int parentType = ast.getParent().getType();\n                if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n                break;\n\n            default:\n        }",
    "right" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.METHOD_DEF:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n                scopeStack.push(new HashMap<String, DetailAST>());\n                break;\n\n            case TokenTypes.PARAMETER_DEF:\n                if (!inLambda(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)\n                        && !inAbstractOrNativeMethod(ast)\n                        && !ScopeUtils.inInterfaceBlock(ast)) {\n                    insertVariable(ast);\n                }\n                break;\n            case TokenTypes.VARIABLE_DEF:\n                if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && isVariableInForInit(ast)\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)) {\n                    insertVariable(ast);\n                }\n                break;\n\n            case TokenTypes.IDENT:\n                final int parentType = ast.getParent().getType();\n                if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast) {\n                    removeVariable(ast);\n                }\n                break;\n\n            default:\n        }",
    "info" : "SwitchStatement[4658-5997]:SwitchStatement[4658-6110]"
  }, {
    "left" : "case TokenTypes.OBJBLOCK:",
    "right" : "case TokenTypes.OBJBLOCK:",
    "info" : "SwitchCase[4695-4720]:SwitchCase[4695-4720]"
  }, {
    "left" : "case TokenTypes.SLIST:",
    "right" : "case TokenTypes.SLIST:",
    "info" : "SwitchCase[4733-4755]:SwitchCase[4733-4755]"
  }, {
    "left" : "case TokenTypes.LITERAL_FOR:",
    "right" : "case TokenTypes.LITERAL_FOR:",
    "info" : "SwitchCase[4768-4796]:SwitchCase[4768-4796]"
  }, {
    "left" : "case TokenTypes.METHOD_DEF:",
    "right" : "case TokenTypes.METHOD_DEF:",
    "info" : "SwitchCase[4809-4836]:SwitchCase[4809-4836]"
  }, {
    "left" : "case TokenTypes.CTOR_DEF:",
    "right" : "case TokenTypes.CTOR_DEF:",
    "info" : "SwitchCase[4849-4874]:SwitchCase[4849-4874]"
  }, {
    "left" : "case TokenTypes.STATIC_INIT:",
    "right" : "case TokenTypes.STATIC_INIT:",
    "info" : "SwitchCase[4887-4915]:SwitchCase[4887-4915]"
  }, {
    "left" : "case TokenTypes.INSTANCE_INIT:",
    "right" : "case TokenTypes.INSTANCE_INIT:",
    "info" : "SwitchCase[4928-4958]:SwitchCase[4928-4958]"
  }, {
    "left" : "scopeStack.push(new HashMap<String, DetailAST>());",
    "right" : "scopeStack.push(new HashMap<String, DetailAST>());",
    "info" : "ExpressionStatement[4975-5025]:ExpressionStatement[4975-5025]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5042-5048]:BreakStatement[5042-5048]"
  }, {
    "left" : "case TokenTypes.PARAMETER_DEF:",
    "right" : "case TokenTypes.PARAMETER_DEF:",
    "info" : "SwitchCase[5062-5092]:SwitchCase[5062-5092]"
  }, {
    "left" : "if (ScopeUtils.inInterfaceBlock(ast)\n                    || inAbstractOrNativeMethod(ast)\n                    || inLambda(ast))",
    "right" : "if (!inLambda(ast)\n                        && !ast.branchContains(TokenTypes.FINAL)\n                        && !inAbstractOrNativeMethod(ast)\n                        && !ScopeUtils.inInterfaceBlock(ast))",
    "info" : "IfStatement[5109-5283]:IfStatement[5109-5373]"
  }, {
    "left" : "ScopeUtils.inInterfaceBlock(ast)",
    "right" : "ScopeUtils.inInterfaceBlock(ast)",
    "info" : "MethodInvocation[5113-5145]:MethodInvocation[5279-5311]"
  }, {
    "left" : "||",
    "right" : "&&",
    "info" : "INFIX_EXPRESSION_OPERATOR[5166-5168]:INFIX_EXPRESSION_OPERATOR[5152-5154]"
  }, {
    "left" : "inAbstractOrNativeMethod(ast)",
    "right" : "inAbstractOrNativeMethod(ast)",
    "info" : "MethodInvocation[5169-5198]:MethodInvocation[5221-5250]"
  }, {
    "left" : "inLambda(ast)",
    "right" : "inLambda(ast)",
    "info" : "MethodInvocation[5222-5235]:MethodInvocation[5114-5127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5237-5283]:Block[5313-5373]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5259-5265]:BreakStatement[5390-5396]"
  }, {
    "left" : "case TokenTypes.VARIABLE_DEF:",
    "right" : "case TokenTypes.VARIABLE_DEF:",
    "info" : "SwitchCase[5296-5325]:SwitchCase[5409-5438]"
  }, {
    "left" : "if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && isVariableInForInit(ast)\n                        && !ast.branchContains(TokenTypes.FINAL))",
    "right" : "if (ast.getParent().getType() != TokenTypes.OBJBLOCK\n                        && isVariableInForInit(ast)\n                        && shouldCheckEnhancedForLoopVariable(ast)\n                        && !ast.branchContains(TokenTypes.FINAL))",
    "info" : "IfStatement[5342-5640]:IfStatement[5455-5753]"
  }, {
    "left" : "shouldCheckEnhancedForLoopVariable(ast)",
    "right" : "shouldCheckEnhancedForLoopVariable(ast)",
    "info" : "MethodInvocation[5422-5461]:MethodInvocation[5587-5626]"
  }, {
    "left" : "isVariableInForInit(ast)",
    "right" : "isVariableInForInit(ast)",
    "info" : "MethodInvocation[5489-5513]:MethodInvocation[5535-5559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5580-5640]:Block[5693-5753]"
  }, {
    "left" : "insertVariable(ast);",
    "right" : "insertVariable(ast);",
    "info" : "ExpressionStatement[5602-5622]:ExpressionStatement[5715-5735]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5657-5663]:BreakStatement[5770-5776]"
  }, {
    "left" : "case TokenTypes.IDENT:",
    "right" : "case TokenTypes.IDENT:",
    "info" : "SwitchCase[5677-5699]:SwitchCase[5790-5812]"
  }, {
    "left" : "final int parentType = ast.getParent().getType();",
    "right" : "final int parentType = ast.getParent().getType();",
    "info" : "VariableDeclarationStatement[5716-5765]:VariableDeclarationStatement[5829-5878]"
  }, {
    "left" : "if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast)",
    "right" : "if (isAssignOperator(parentType)\n                        && ast.getParent().getFirstChild() == ast)",
    "info" : "IfStatement[5782-5942]:IfStatement[5895-6055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5882-5942]:Block[5995-6055]"
  }, {
    "left" : "removeVariable(ast);",
    "right" : "removeVariable(ast);",
    "info" : "ExpressionStatement[5904-5924]:ExpressionStatement[6017-6037]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5959-5965]:BreakStatement[6072-6078]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[5979-5987]:SwitchCase[6092-6100]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6150-6157]:Modifier[6263-6270]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6158-6164]:Modifier[6271-6277]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6165-6172]:PrimitiveType[6278-6285]"
  }, {
    "left" : "isAssignOperator",
    "right" : "isAssignOperator",
    "info" : "SimpleName[6173-6189]:SimpleName[6286-6302]"
  }, {
    "left" : "int parentType",
    "right" : "int parentType",
    "info" : "SingleVariableDeclaration[6190-6204]:SingleVariableDeclaration[6303-6317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6206-7072]:Block[6319-7185]"
  }, {
    "left" : "return TokenTypes.POST_DEC == parentType\n                || TokenTypes.DEC == parentType\n                || TokenTypes.POST_INC == parentType\n                || TokenTypes.INC == parentType\n                || TokenTypes.ASSIGN == parentType\n                || TokenTypes.PLUS_ASSIGN == parentType\n                || TokenTypes.MINUS_ASSIGN == parentType\n                || TokenTypes.DIV_ASSIGN == parentType\n                || TokenTypes.STAR_ASSIGN == parentType\n                || TokenTypes.MOD_ASSIGN == parentType\n                || TokenTypes.SR_ASSIGN == parentType\n                || TokenTypes.BSR_ASSIGN == parentType\n                || TokenTypes.SL_ASSIGN == parentType\n                || TokenTypes.BXOR_ASSIGN == parentType\n                || TokenTypes.BOR_ASSIGN == parentType\n                || TokenTypes.BAND_ASSIGN == parentType;",
    "right" : "return TokenTypes.POST_DEC == parentType\n                || TokenTypes.DEC == parentType\n                || TokenTypes.POST_INC == parentType\n                || TokenTypes.INC == parentType\n                || TokenTypes.ASSIGN == parentType\n                || TokenTypes.PLUS_ASSIGN == parentType\n                || TokenTypes.MINUS_ASSIGN == parentType\n                || TokenTypes.DIV_ASSIGN == parentType\n                || TokenTypes.STAR_ASSIGN == parentType\n                || TokenTypes.MOD_ASSIGN == parentType\n                || TokenTypes.SR_ASSIGN == parentType\n                || TokenTypes.BSR_ASSIGN == parentType\n                || TokenTypes.SL_ASSIGN == parentType\n                || TokenTypes.BXOR_ASSIGN == parentType\n                || TokenTypes.BOR_ASSIGN == parentType\n                || TokenTypes.BAND_ASSIGN == parentType;",
    "info" : "ReturnStatement[6216-7066]:ReturnStatement[6329-7179]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7280-7287]:Modifier[7393-7400]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7288-7295]:PrimitiveType[7401-7408]"
  }, {
    "left" : "shouldCheckEnhancedForLoopVariable",
    "right" : "shouldCheckEnhancedForLoopVariable",
    "info" : "SimpleName[7296-7330]:SimpleName[7409-7443]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[7331-7344]:SingleVariableDeclaration[7444-7457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7346-7476]:Block[7459-7589]"
  }, {
    "left" : "return validateEnhancedForLoopVariable\n                || ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE;",
    "right" : "return validateEnhancedForLoopVariable\n                || ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE;",
    "info" : "ReturnStatement[7356-7470]:ReturnStatement[7469-7583]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7929-7936]:Modifier[8042-8049]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7937-7943]:Modifier[8050-8056]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7944-7951]:PrimitiveType[8057-8064]"
  }, {
    "left" : "isVariableInForInit",
    "right" : "isVariableInForInit",
    "info" : "SimpleName[7952-7971]:SimpleName[8065-8084]"
  }, {
    "left" : "DetailAST variableDef",
    "right" : "DetailAST variableDef",
    "info" : "SingleVariableDeclaration[7972-7993]:SingleVariableDeclaration[8085-8106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7995-8075]:Block[8108-8188]"
  }, {
    "left" : "return variableDef.getParent().getType() != TokenTypes.FOR_INIT;",
    "right" : "return variableDef.getParent().getType() != TokenTypes.FOR_INIT;",
    "info" : "ReturnStatement[8005-8069]:ReturnStatement[8118-8182]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8291-8298]:Modifier[8404-8411]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8299-8305]:Modifier[8412-8418]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8306-8313]:PrimitiveType[8419-8426]"
  }, {
    "left" : "inAbstractOrNativeMethod",
    "right" : "inAbstractOrNativeMethod",
    "info" : "SimpleName[8314-8338]:SimpleName[8427-8451]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[8339-8352]:SingleVariableDeclaration[8452-8465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8354-8844]:Block[8467-9043]"
  }, {
    "left" : "DetailAST parent = ast.getParent();",
    "right" : "DetailAST parent = ast.getParent();",
    "info" : "VariableDeclarationStatement[8364-8399]:VariableDeclarationStatement[8519-8554]"
  }, {
    "left" : "while (parent != null)",
    "right" : "while (parent != null && !abstractOrNative)",
    "info" : "WhileStatement[8408-8816]:WhileStatement[8563-9004]"
  }, {
    "left" : "parent != null",
    "right" : "parent != null",
    "info" : "InfixExpression[8415-8429]:InfixExpression[8570-8584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8431-8816]:Block[8607-9004]"
  }, {
    "left" : "if (parent.getType() == TokenTypes.METHOD_DEF)",
    "right" : "if (parent.getType() == TokenTypes.METHOD_DEF)",
    "info" : "IfStatement[8445-8765]:IfStatement[8621-8953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8492-8765]:Block[8668-8953]"
  }, {
    "left" : "final DetailAST modifiers =\n                    parent.findFirstToken(TokenTypes.MODIFIERS);",
    "right" : "final DetailAST modifiers =\n                    parent.findFirstToken(TokenTypes.MODIFIERS);",
    "info" : "VariableDeclarationStatement[8510-8602]:VariableDeclarationStatement[8686-8778]"
  }, {
    "left" : "modifiers.branchContains(TokenTypes.ABSTRACT)\n                        || modifiers.branchContains(TokenTypes.LITERAL_NATIVE)",
    "right" : "modifiers.branchContains(TokenTypes.ABSTRACT)\n                        || modifiers.branchContains(TokenTypes.LITERAL_NATIVE)",
    "info" : "InfixExpression[8626-8750]:InfixExpression[8814-8938]"
  }, {
    "left" : "parent = parent.getParent();",
    "right" : "parent = parent.getParent();",
    "info" : "ExpressionStatement[8778-8806]:ExpressionStatement[8966-8994]"
  }, {
    "left" : "return false;",
    "right" : "return abstractOrNative;",
    "info" : "ReturnStatement[8825-8838]:ReturnStatement[9013-9037]"
  }, {
    "left" : "false",
    "right" : "false",
    "info" : "BooleanLiteral[8832-8837]:BooleanLiteral[8504-8509]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9040-9047]:Modifier[9239-9246]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9048-9054]:Modifier[9247-9253]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9055-9062]:PrimitiveType[9254-9261]"
  }, {
    "left" : "inLambda",
    "right" : "inLambda",
    "info" : "SimpleName[9063-9071]:SimpleName[9262-9270]"
  }, {
    "left" : "DetailAST paramDef",
    "right" : "DetailAST paramDef",
    "info" : "SingleVariableDeclaration[9072-9090]:SingleVariableDeclaration[9271-9289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9092-9179]:Block[9291-9378]"
  }, {
    "left" : "return paramDef.getParent().getParent().getType() == TokenTypes.LAMBDA;",
    "right" : "return paramDef.getParent().getParent().getType() == TokenTypes.LAMBDA;",
    "info" : "ReturnStatement[9102-9173]:ReturnStatement[9301-9372]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9436-9443]:Modifier[9635-9642]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9444-9450]:Modifier[9643-9649]"
  }, {
    "left" : "DetailAST",
    "right" : "DetailAST",
    "info" : "SimpleType[9451-9460]:SimpleType[9650-9659]"
  }, {
    "left" : "findClassOrConstructorOrMethodInWhichItIsDefined",
    "right" : "findClassOrConstructorOrMethodInWhichItIsDefined",
    "info" : "SimpleName[9461-9509]:SimpleName[9660-9708]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[9510-9523]:SingleVariableDeclaration[9709-9722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9525-9855]:Block[9724-10054]"
  }, {
    "left" : "DetailAST astTraverse = ast;",
    "right" : "DetailAST astTraverse = ast;",
    "info" : "VariableDeclarationStatement[9535-9563]:VariableDeclarationStatement[9734-9762]"
  }, {
    "left" : "while (!(astTraverse.getType() == TokenTypes.METHOD_DEF\n                || astTraverse.getType() == TokenTypes.CLASS_DEF\n                || astTraverse.getType() == TokenTypes.CTOR_DEF))",
    "right" : "while (!(astTraverse.getType() == TokenTypes.METHOD_DEF\n                || astTraverse.getType() == TokenTypes.CLASS_DEF\n                || astTraverse.getType() == TokenTypes.CTOR_DEF))",
    "info" : "WhileStatement[9572-9821]:WhileStatement[9771-10020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9759-9821]:Block[9958-10020]"
  }, {
    "left" : "astTraverse = astTraverse.getParent();",
    "right" : "astTraverse = astTraverse.getParent();",
    "info" : "ExpressionStatement[9773-9811]:ExpressionStatement[9972-10010]"
  }, {
    "left" : "return astTraverse;",
    "right" : "return astTraverse;",
    "info" : "ReturnStatement[9830-9849]:ReturnStatement[10029-10048]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10066-10073]:Modifier[10265-10272]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10074-10080]:Modifier[10273-10279]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10081-10088]:PrimitiveType[10280-10287]"
  }, {
    "left" : "isSameVariables",
    "right" : "isSameVariables",
    "info" : "SimpleName[10089-10104]:SimpleName[10288-10303]"
  }, {
    "left" : "DetailAST ast1",
    "right" : "DetailAST ast1",
    "info" : "SingleVariableDeclaration[10105-10119]:SingleVariableDeclaration[10304-10318]"
  }, {
    "left" : "DetailAST ast2",
    "right" : "DetailAST ast2",
    "info" : "SingleVariableDeclaration[10121-10135]:SingleVariableDeclaration[10320-10334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10137-10664]:Block[10336-10863]"
  }, {
    "left" : "final DetailAST classOrMethodOfAst1 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast1);",
    "right" : "final DetailAST classOrMethodOfAst1 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast1);",
    "info" : "VariableDeclarationStatement[10147-10252]:VariableDeclarationStatement[10346-10451]"
  }, {
    "left" : "final DetailAST classOrMethodOfAst2 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast2);",
    "right" : "final DetailAST classOrMethodOfAst2 =\n            findClassOrConstructorOrMethodInWhichItIsDefined(ast2);",
    "info" : "VariableDeclarationStatement[10261-10366]:VariableDeclarationStatement[10460-10565]"
  }, {
    "left" : "final String identifierOfAst1 =\n            classOrMethodOfAst1.findFirstToken(TokenTypes.IDENT).getText();",
    "right" : "final String identifierOfAst1 =\n            classOrMethodOfAst1.findFirstToken(TokenTypes.IDENT).getText();",
    "info" : "VariableDeclarationStatement[10376-10483]:VariableDeclarationStatement[10575-10682]"
  }, {
    "left" : "final String identifierOfAst2 =\n            classOrMethodOfAst2.findFirstToken(TokenTypes.IDENT).getText();",
    "right" : "final String identifierOfAst2 =\n            classOrMethodOfAst2.findFirstToken(TokenTypes.IDENT).getText();",
    "info" : "VariableDeclarationStatement[10492-10599]:VariableDeclarationStatement[10691-10798]"
  }, {
    "left" : "return identifierOfAst1.equals(identifierOfAst2);",
    "right" : "return identifierOfAst1.equals(identifierOfAst2);",
    "info" : "ReturnStatement[10609-10658]:ReturnStatement[10808-10857]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10780-10787]:Modifier[10979-10986]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10788-10792]:PrimitiveType[10987-10991]"
  }, {
    "left" : "insertVariable",
    "right" : "insertVariable",
    "info" : "SimpleName[10793-10807]:SimpleName[10992-11006]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[10808-10821]:SingleVariableDeclaration[11007-11020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10823-11013]:Block[11022-11212]"
  }, {
    "left" : "final Map<String, DetailAST> state = scopeStack.peek();",
    "right" : "final Map<String, DetailAST> state = scopeStack.peek();",
    "info" : "VariableDeclarationStatement[10833-10888]:VariableDeclarationStatement[11032-11087]"
  }, {
    "left" : "final DetailAST astNode = ast.findFirstToken(TokenTypes.IDENT);",
    "right" : "final DetailAST astNode = ast.findFirstToken(TokenTypes.IDENT);",
    "info" : "VariableDeclarationStatement[10897-10960]:VariableDeclarationStatement[11096-11159]"
  }, {
    "left" : "state.put(astNode.getText(), astNode);",
    "right" : "state.put(astNode.getText(), astNode);",
    "info" : "ExpressionStatement[10969-11007]:ExpressionStatement[11168-11206]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11116-11123]:Modifier[11315-11322]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11124-11128]:PrimitiveType[11323-11327]"
  }, {
    "left" : "removeVariable",
    "right" : "removeVariable",
    "info" : "SimpleName[11129-11143]:SimpleName[11328-11342]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[11144-11157]:SingleVariableDeclaration[11343-11356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11159-11605]:Block[11358-11804]"
  }, {
    "left" : "final Iterator<Map<String, DetailAST>> iterator = scopeStack.descendingIterator();",
    "right" : "final Iterator<Map<String, DetailAST>> iterator = scopeStack.descendingIterator();",
    "info" : "VariableDeclarationStatement[11169-11251]:VariableDeclarationStatement[11368-11450]"
  }, {
    "left" : "while (iterator.hasNext())",
    "right" : "while (iterator.hasNext())",
    "info" : "WhileStatement[11260-11599]:WhileStatement[11459-11798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11287-11599]:Block[11486-11798]"
  }, {
    "left" : "final Map<String, DetailAST> state = iterator.next();",
    "right" : "final Map<String, DetailAST> state = iterator.next();",
    "info" : "VariableDeclarationStatement[11301-11354]:VariableDeclarationStatement[11500-11553]"
  }, {
    "left" : "final DetailAST storedVariable = state.get(ast.getText());",
    "right" : "final DetailAST storedVariable = state.get(ast.getText());",
    "info" : "VariableDeclarationStatement[11367-11425]:VariableDeclarationStatement[11566-11624]"
  }, {
    "left" : "if (storedVariable != null && isSameVariables(storedVariable, ast))",
    "right" : "if (storedVariable != null && isSameVariables(storedVariable, ast))",
    "info" : "IfStatement[11438-11589]:IfStatement[11637-11788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11506-11589]:Block[11705-11788]"
  }, {
    "left" : "state.remove(ast.getText());",
    "right" : "state.remove(ast.getText());",
    "info" : "ExpressionStatement[11524-11552]:ExpressionStatement[11723-11751]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11569-11575]:BreakStatement[11768-11774]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11611-11620]:MarkerAnnotation[11810-11819]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11625-11631]:Modifier[11824-11830]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11632-11636]:PrimitiveType[11831-11835]"
  }, {
    "left" : "leaveToken",
    "right" : "leaveToken",
    "info" : "SimpleName[11637-11647]:SimpleName[11836-11846]"
  }, {
    "left" : "DetailAST ast",
    "right" : "DetailAST ast",
    "info" : "SingleVariableDeclaration[11648-11661]:SingleVariableDeclaration[11847-11860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11663-12320]:Block[11862-12519]"
  }, {
    "left" : "super.leaveToken(ast);",
    "right" : "super.leaveToken(ast);",
    "info" : "ExpressionStatement[11673-11695]:ExpressionStatement[11872-11894]"
  }, {
    "left" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n            case TokenTypes.METHOD_DEF:\n                final Map<String, DetailAST> state = scopeStack.pop();\n                for (DetailAST var : state.values()) {\n                    log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());\n                }\n                break;\n\n            default:\n        }",
    "right" : "switch (ast.getType()) {\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.STATIC_INIT:\n            case TokenTypes.INSTANCE_INIT:\n            case TokenTypes.METHOD_DEF:\n                final Map<String, DetailAST> state = scopeStack.pop();\n                for (DetailAST var : state.values()) {\n                    log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());\n                }\n                break;\n\n            default:\n        }",
    "info" : "SwitchStatement[11705-12314]:SwitchStatement[11904-12513]"
  }, {
    "left" : "case TokenTypes.OBJBLOCK:",
    "right" : "case TokenTypes.OBJBLOCK:",
    "info" : "SwitchCase[11742-11767]:SwitchCase[11941-11966]"
  }, {
    "left" : "case TokenTypes.SLIST:",
    "right" : "case TokenTypes.SLIST:",
    "info" : "SwitchCase[11780-11802]:SwitchCase[11979-12001]"
  }, {
    "left" : "case TokenTypes.LITERAL_FOR:",
    "right" : "case TokenTypes.LITERAL_FOR:",
    "info" : "SwitchCase[11815-11843]:SwitchCase[12014-12042]"
  }, {
    "left" : "case TokenTypes.CTOR_DEF:",
    "right" : "case TokenTypes.CTOR_DEF:",
    "info" : "SwitchCase[11856-11881]:SwitchCase[12055-12080]"
  }, {
    "left" : "case TokenTypes.STATIC_INIT:",
    "right" : "case TokenTypes.STATIC_INIT:",
    "info" : "SwitchCase[11894-11922]:SwitchCase[12093-12121]"
  }, {
    "left" : "case TokenTypes.INSTANCE_INIT:",
    "right" : "case TokenTypes.INSTANCE_INIT:",
    "info" : "SwitchCase[11935-11965]:SwitchCase[12134-12164]"
  }, {
    "left" : "case TokenTypes.METHOD_DEF:",
    "right" : "case TokenTypes.METHOD_DEF:",
    "info" : "SwitchCase[11978-12005]:SwitchCase[12177-12204]"
  }, {
    "left" : "final Map<String, DetailAST> state = scopeStack.pop();",
    "right" : "final Map<String, DetailAST> state = scopeStack.pop();",
    "info" : "VariableDeclarationStatement[12022-12076]:VariableDeclarationStatement[12221-12275]"
  }, {
    "left" : "for (DetailAST var : state.values())",
    "right" : "for (DetailAST var : state.values())",
    "info" : "EnhancedForStatement[12093-12259]:EnhancedForStatement[12292-12458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12130-12259]:Block[12329-12458]"
  }, {
    "left" : "log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());",
    "right" : "log(var.getLineNo(), var.getColumnNo(), MSG_KEY, var\n                        .getText());",
    "info" : "ExpressionStatement[12152-12241]:ExpressionStatement[12351-12440]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12276-12282]:BreakStatement[12475-12481]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[12296-12304]:SwitchCase[12495-12503]"
  } ]
}