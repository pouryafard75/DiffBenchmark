{
  "matchedElements" : [
 {
    "left" : "class : CharacterReader",
    "right" : "class : CharacterReader",
    "info" : "TypeDeclaration[232-15400]:TypeDeclaration[232-15829]"
  }, {
    "left" : "EOF",
    "right" : "EOF",
    "info" : "FieldDeclaration[378-412]:FieldDeclaration[378-412]"
  }, {
    "left" : "maxStringCacheLen",
    "right" : "maxStringCacheLen",
    "info" : "FieldDeclaration[417-465]:FieldDeclaration[417-465]"
  }, {
    "left" : "maxBufferLen",
    "right" : "maxBufferLen",
    "info" : "FieldDeclaration[470-512]:FieldDeclaration[470-512]"
  }, {
    "left" : "readAheadLimit",
    "right" : "readAheadLimit",
    "info" : "FieldDeclaration[540-610]:FieldDeclaration[540-610]"
  }, {
    "left" : "charBuf",
    "right" : "charBuf",
    "info" : "FieldDeclaration[616-645]:FieldDeclaration[616-645]"
  }, {
    "left" : "reader",
    "right" : "reader",
    "info" : "FieldDeclaration[650-678]:FieldDeclaration[650-678]"
  }, {
    "left" : "bufLength",
    "right" : "bufLength",
    "info" : "FieldDeclaration[683-705]:FieldDeclaration[683-705]"
  }, {
    "left" : "bufSplitPoint",
    "right" : "bufSplitPoint",
    "info" : "FieldDeclaration[710-736]:FieldDeclaration[710-736]"
  }, {
    "left" : "bufPos",
    "right" : "bufPos",
    "info" : "FieldDeclaration[741-760]:FieldDeclaration[741-760]"
  }, {
    "left" : "readerPos",
    "right" : "readerPos",
    "info" : "FieldDeclaration[765-787]:FieldDeclaration[765-787]"
  }, {
    "left" : "bufMark",
    "right" : "bufMark",
    "info" : "FieldDeclaration[792-817]:FieldDeclaration[792-817]"
  }, {
    "left" : "stringCache",
    "right" : "stringCache",
    "info" : "FieldDeclaration[822-875]:FieldDeclaration[822-875]"
  }, {
    "left" : "public CharacterReader(input , sz int)",
    "right" : "public CharacterReader(input , sz int)",
    "info" : "MethodDeclaration[936-1181]:MethodDeclaration[936-1296]"
  }, {
    "left" : "public CharacterReader(input )",
    "right" : "public CharacterReader(input )",
    "info" : "MethodDeclaration[1187-1266]:MethodDeclaration[1302-1381]"
  }, {
    "left" : "public CharacterReader(input )",
    "right" : "public CharacterReader(input )",
    "info" : "MethodDeclaration[1272-1371]:MethodDeclaration[1387-1486]"
  }, {
    "left" : "private bufferUp() : void",
    "right" : "private bufferUp() : void",
    "info" : "MethodDeclaration[1377-2006]:MethodDeclaration[1492-2121]"
  }, {
    "left" : "public pos() : int",
    "right" : "public pos() : int",
    "info" : "MethodDeclaration[2012-2175]:MethodDeclaration[2127-2290]"
  }, {
    "left" : "public isEmpty() : boolean",
    "right" : "public isEmpty() : boolean",
    "info" : "MethodDeclaration[2181-2377]:MethodDeclaration[2296-2492]"
  }, {
    "left" : "private isEmptyNoBufferUp() : boolean",
    "right" : "private isEmptyNoBufferUp() : boolean",
    "info" : "MethodDeclaration[2383-2462]:MethodDeclaration[2498-2577]"
  }, {
    "left" : "public current() : char",
    "right" : "public current() : char",
    "info" : "MethodDeclaration[2468-2658]:MethodDeclaration[2583-2773]"
  }, {
    "left" : "package consume() : char",
    "right" : "package consume() : char",
    "info" : "MethodDeclaration[2664-2808]:MethodDeclaration[2779-2923]"
  }, {
    "left" : "package unconsume() : void",
    "right" : "package unconsume() : void",
    "info" : "MethodDeclaration[2814-2973]:MethodDeclaration[2929-3088]"
  }, {
    "left" : "public advance() : void",
    "right" : "public advance() : void",
    "info" : "MethodDeclaration[2979-3084]:MethodDeclaration[3094-3199]"
  }, {
    "left" : "package mark() : void",
    "right" : "package mark() : void",
    "info" : "MethodDeclaration[3090-3253]:MethodDeclaration[3205-3368]"
  }, {
    "left" : "package rewindToMark() : void",
    "right" : "package rewindToMark() : void",
    "info" : "MethodDeclaration[3259-3417]:MethodDeclaration[3374-3532]"
  }, {
    "left" : "package nextIndexOf(c char) : int",
    "right" : "package nextIndexOf(c char) : int",
    "info" : "MethodDeclaration[3423-3918]:MethodDeclaration[3538-4033]"
  }, {
    "left" : "package nextIndexOf(seq ) : int",
    "right" : "package nextIndexOf(seq ) : int",
    "info" : "MethodDeclaration[3924-4964]:MethodDeclaration[4039-5079]"
  }, {
    "left" : "public consumeTo(c char) : ",
    "right" : "public consumeTo(c char) : ",
    "info" : "MethodDeclaration[4970-5401]:MethodDeclaration[5085-5516]"
  }, {
    "left" : "package consumeTo(seq ) : ",
    "right" : "package consumeTo(seq ) : ",
    "info" : "MethodDeclaration[5407-5712]:MethodDeclaration[5522-5827]"
  }, {
    "left" : "public consumeToAny() : ",
    "right" : "public consumeToAny() : ",
    "info" : "MethodDeclaration[5718-6485]:MethodDeclaration[5833-6600]"
  }, {
    "left" : "package consumeToAnySorted() : ",
    "right" : "package consumeToAnySorted() : ",
    "info" : "MethodDeclaration[6491-6958]:MethodDeclaration[6606-7073]"
  }, {
    "left" : "package consumeData() : ",
    "right" : "package consumeData() : ",
    "info" : "MethodDeclaration[6964-7607]:MethodDeclaration[7079-7722]"
  }, {
    "left" : "package consumeTagName() : ",
    "right" : "package consumeTagName() : ",
    "info" : "MethodDeclaration[7613-8442]:MethodDeclaration[7728-8557]"
  }, {
    "left" : "package consumeToEnd() : ",
    "right" : "package consumeToEnd() : ",
    "info" : "MethodDeclaration[8448-8631]:MethodDeclaration[8563-8746]"
  }, {
    "left" : "package consumeLetterSequence() : ",
    "right" : "package consumeLetterSequence() : ",
    "info" : "MethodDeclaration[8637-9039]:MethodDeclaration[8752-9154]"
  }, {
    "left" : "package consumeLetterThenDigitSequence() : ",
    "right" : "package consumeLetterThenDigitSequence() : ",
    "info" : "MethodDeclaration[9045-9647]:MethodDeclaration[9160-9762]"
  }, {
    "left" : "package consumeHexSequence() : ",
    "right" : "package consumeHexSequence() : ",
    "info" : "MethodDeclaration[9653-10052]:MethodDeclaration[9768-10167]"
  }, {
    "left" : "package consumeDigitSequence() : ",
    "right" : "package consumeDigitSequence() : ",
    "info" : "MethodDeclaration[10058-10405]:MethodDeclaration[10173-10520]"
  }, {
    "left" : "package matches(c char) : boolean",
    "right" : "package matches(c char) : boolean",
    "info" : "MethodDeclaration[10411-10494]:MethodDeclaration[10526-10609]"
  }, {
    "left" : "package matches(seq ) : boolean",
    "right" : "package matches(seq ) : boolean",
    "info" : "MethodDeclaration[10500-10840]:MethodDeclaration[10615-10955]"
  }, {
    "left" : "package matchesIgnoreCase(seq ) : boolean",
    "right" : "package matchesIgnoreCase(seq ) : boolean",
    "info" : "MethodDeclaration[10846-11327]:MethodDeclaration[10961-11442]"
  }, {
    "left" : "package matchesAny() : boolean",
    "right" : "package matchesAny() : boolean",
    "info" : "MethodDeclaration[11333-11596]:MethodDeclaration[11448-11711]"
  }, {
    "left" : "package matchesAnySorted(seq ) : boolean",
    "right" : "package matchesAnySorted(seq ) : boolean",
    "info" : "MethodDeclaration[11602-11743]:MethodDeclaration[11717-11858]"
  }, {
    "left" : "package matchesLetter() : boolean",
    "right" : "package matchesLetter() : boolean",
    "info" : "MethodDeclaration[11749-11953]:MethodDeclaration[11864-12068]"
  }, {
    "left" : "package matchesDigit() : boolean",
    "right" : "package matchesDigit() : boolean",
    "info" : "MethodDeclaration[11959-12111]:MethodDeclaration[12074-12226]"
  }, {
    "left" : "package matchConsume(seq ) : boolean",
    "right" : "package matchConsume(seq ) : boolean",
    "info" : "MethodDeclaration[12117-12319]:MethodDeclaration[12232-12434]"
  }, {
    "left" : "package matchConsumeIgnoreCase(seq ) : boolean",
    "right" : "package matchConsumeIgnoreCase(seq ) : boolean",
    "info" : "MethodDeclaration[12325-12527]:MethodDeclaration[12440-12642]"
  }, {
    "left" : "package containsIgnoreCase(seq ) : boolean",
    "right" : "package containsIgnoreCase(seq ) : boolean",
    "info" : "MethodDeclaration[12533-12851]:MethodDeclaration[12648-12966]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[12858-13171]:MethodDeclaration[13490-13600]"
  }, {
    "left" : "private cacheString(charBuf , stringCache , start int, count int) : ",
    "right" : "private cacheString(charBuf , stringCache , start int, count int) : ",
    "info" : "MethodDeclaration[13177-14742]:MethodDeclaration[13606-15171]"
  }, {
    "left" : "package rangeEquals(charBuf , start int, count int, cached ) : boolean",
    "right" : "package rangeEquals(charBuf , start int, count int, cached ) : boolean",
    "info" : "MethodDeclaration[14748-15222]:MethodDeclaration[15177-15651]"
  }, {
    "left" : "package rangeEquals(start int, count int, cached ) : boolean",
    "right" : "package rangeEquals(start int, count int, cached ) : boolean",
    "info" : "MethodDeclaration[15257-15398]:MethodDeclaration[15686-15827]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[337-343]:Modifier[337-343]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[344-349]:Modifier[344-349]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[350-355]:TYPE_DECLARATION_KIND[350-355]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[936-942]:Modifier[936-942]"
  }, {
    "left" : "CharacterReader",
    "right" : "CharacterReader",
    "info" : "SimpleName[943-958]:SimpleName[943-958]"
  }, {
    "left" : "Reader input",
    "right" : "Reader input",
    "info" : "SingleVariableDeclaration[959-971]:SingleVariableDeclaration[959-971]"
  }, {
    "left" : "int sz",
    "right" : "int sz",
    "info" : "SingleVariableDeclaration[973-979]:SingleVariableDeclaration[973-979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[981-1181]:Block[981-1296]"
  }, {
    "left" : "Validate.notNull(input);",
    "right" : "Validate.notNull(input);",
    "info" : "ExpressionStatement[991-1015]:ExpressionStatement[991-1015]"
  }, {
    "left" : "Validate.isTrue(input.markSupported());",
    "right" : "Validate.isTrue(input.markSupported());",
    "info" : "ExpressionStatement[1024-1063]:ExpressionStatement[1024-1063]"
  }, {
    "left" : "reader = input;",
    "right" : "reader = input;",
    "info" : "ExpressionStatement[1072-1087]:ExpressionStatement[1072-1087]"
  }, {
    "left" : "charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];",
    "right" : "charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];",
    "info" : "ExpressionStatement[1096-1154]:ExpressionStatement[1096-1154]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[1163-1174]:ExpressionStatement[1163-1174]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1187-1193]:Modifier[1302-1308]"
  }, {
    "left" : "CharacterReader",
    "right" : "CharacterReader",
    "info" : "SimpleName[1194-1209]:SimpleName[1309-1324]"
  }, {
    "left" : "Reader input",
    "right" : "Reader input",
    "info" : "SingleVariableDeclaration[1210-1222]:SingleVariableDeclaration[1325-1337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1224-1266]:Block[1339-1381]"
  }, {
    "left" : "this(input, maxBufferLen);",
    "right" : "this(input, maxBufferLen);",
    "info" : "ConstructorInvocation[1234-1260]:ConstructorInvocation[1349-1375]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1272-1278]:Modifier[1387-1393]"
  }, {
    "left" : "CharacterReader",
    "right" : "CharacterReader",
    "info" : "SimpleName[1279-1294]:SimpleName[1394-1409]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[1295-1307]:SingleVariableDeclaration[1410-1422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1309-1371]:Block[1424-1486]"
  }, {
    "left" : "this(new StringReader(input), input.length());",
    "right" : "this(new StringReader(input), input.length());",
    "info" : "ConstructorInvocation[1319-1365]:ConstructorInvocation[1434-1480]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[1377-1384]:Modifier[1492-1499]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1385-1389]:PrimitiveType[1500-1504]"
  }, {
    "left" : "bufferUp",
    "right" : "bufferUp",
    "info" : "SimpleName[1390-1398]:SimpleName[1505-1513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1401-2006]:Block[1516-2121]"
  }, {
    "left" : "final int pos = bufPos;",
    "right" : "final int pos = bufPos;",
    "info" : "VariableDeclarationStatement[1411-1434]:VariableDeclarationStatement[1526-1549]"
  }, {
    "left" : "if (pos < bufSplitPoint)",
    "right" : "if (pos < bufSplitPoint)",
    "info" : "IfStatement[1443-1487]:IfStatement[1558-1602]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[1480-1487]:ReturnStatement[1595-1602]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[1497-2000]:TryStatement[1612-2115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1501-1919]:Block[1616-2034]"
  }, {
    "left" : "reader.skip(pos);",
    "right" : "reader.skip(pos);",
    "info" : "ExpressionStatement[1515-1532]:ExpressionStatement[1630-1647]"
  }, {
    "left" : "reader.mark(maxBufferLen);",
    "right" : "reader.mark(maxBufferLen);",
    "info" : "ExpressionStatement[1545-1571]:ExpressionStatement[1660-1686]"
  }, {
    "left" : "final int read = reader.read(charBuf);",
    "right" : "final int read = reader.read(charBuf);",
    "info" : "VariableDeclarationStatement[1584-1622]:VariableDeclarationStatement[1699-1737]"
  }, {
    "left" : "reader.reset();",
    "right" : "reader.reset();",
    "info" : "ExpressionStatement[1635-1650]:ExpressionStatement[1750-1765]"
  }, {
    "left" : "if (read != -1)",
    "right" : "if (read != -1)",
    "info" : "IfStatement[1663-1909]:IfStatement[1778-2024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1679-1909]:Block[1794-2024]"
  }, {
    "left" : "bufLength = read;",
    "right" : "bufLength = read;",
    "info" : "ExpressionStatement[1697-1714]:ExpressionStatement[1812-1829]"
  }, {
    "left" : "readerPos += pos;",
    "right" : "readerPos += pos;",
    "info" : "ExpressionStatement[1731-1748]:ExpressionStatement[1846-1863]"
  }, {
    "left" : "bufPos = 0;",
    "right" : "bufPos = 0;",
    "info" : "ExpressionStatement[1765-1776]:ExpressionStatement[1880-1891]"
  }, {
    "left" : "bufMark = -1;",
    "right" : "bufMark = -1;",
    "info" : "ExpressionStatement[1793-1806]:ExpressionStatement[1908-1921]"
  }, {
    "left" : "bufSplitPoint = bufLength > readAheadLimit ? readAheadLimit : bufLength;",
    "right" : "bufSplitPoint = bufLength > readAheadLimit ? readAheadLimit : bufLength;",
    "info" : "ExpressionStatement[1823-1895]:ExpressionStatement[1938-2010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1942-2000]:Block[2057-2115]"
  }, {
    "left" : "throw new UncheckedIOException(e);",
    "right" : "throw new UncheckedIOException(e);",
    "info" : "ThrowStatement[1956-1990]:ThrowStatement[2071-2105]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2116-2122]:Modifier[2231-2237]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[2123-2126]:PrimitiveType[2238-2241]"
  }, {
    "left" : "pos",
    "right" : "pos",
    "info" : "SimpleName[2127-2130]:SimpleName[2242-2245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2133-2175]:Block[2248-2290]"
  }, {
    "left" : "return readerPos + bufPos;",
    "right" : "return readerPos + bufPos;",
    "info" : "ReturnStatement[2143-2169]:ReturnStatement[2258-2284]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2289-2295]:Modifier[2404-2410]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2296-2303]:PrimitiveType[2411-2418]"
  }, {
    "left" : "isEmpty",
    "right" : "isEmpty",
    "info" : "SimpleName[2304-2311]:SimpleName[2419-2426]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2314-2377]:Block[2429-2492]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[2324-2335]:ExpressionStatement[2439-2450]"
  }, {
    "left" : "return bufPos >= bufLength;",
    "right" : "return bufPos >= bufLength;",
    "info" : "ReturnStatement[2344-2371]:ReturnStatement[2459-2486]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2383-2390]:Modifier[2498-2505]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2391-2398]:PrimitiveType[2506-2513]"
  }, {
    "left" : "isEmptyNoBufferUp",
    "right" : "isEmptyNoBufferUp",
    "info" : "SimpleName[2399-2416]:SimpleName[2514-2531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2419-2462]:Block[2534-2577]"
  }, {
    "left" : "return bufPos >= bufLength;",
    "right" : "return bufPos >= bufLength;",
    "info" : "ReturnStatement[2429-2456]:ReturnStatement[2544-2571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2549-2555]:Modifier[2664-2670]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[2556-2560]:PrimitiveType[2671-2675]"
  }, {
    "left" : "current",
    "right" : "current",
    "info" : "SimpleName[2561-2568]:SimpleName[2676-2683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2571-2658]:Block[2686-2773]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[2581-2592]:ExpressionStatement[2696-2707]"
  }, {
    "left" : "return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];",
    "right" : "return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];",
    "info" : "ReturnStatement[2601-2652]:ReturnStatement[2716-2767]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[2664-2668]:PrimitiveType[2779-2783]"
  }, {
    "left" : "consume",
    "right" : "consume",
    "info" : "SimpleName[2669-2676]:SimpleName[2784-2791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2679-2808]:Block[2794-2923]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[2689-2700]:ExpressionStatement[2804-2815]"
  }, {
    "left" : "char val = isEmptyNoBufferUp() ? EOF : charBuf[bufPos];",
    "right" : "char val = isEmptyNoBufferUp() ? EOF : charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[2709-2764]:VariableDeclarationStatement[2824-2879]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[2773-2782]:ExpressionStatement[2888-2897]"
  }, {
    "left" : "return val;",
    "right" : "return val;",
    "info" : "ReturnStatement[2791-2802]:ReturnStatement[2906-2917]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2814-2818]:PrimitiveType[2929-2933]"
  }, {
    "left" : "unconsume",
    "right" : "unconsume",
    "info" : "SimpleName[2819-2828]:SimpleName[2934-2943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2831-2973]:Block[2946-3088]"
  }, {
    "left" : "if (bufPos < 1)",
    "right" : "if (bufPos < 1)",
    "info" : "IfStatement[2841-2948]:IfStatement[2956-3063]"
  }, {
    "left" : "throw new UncheckedIOException(new IOException(\"No buffer left to unconsume\"));",
    "right" : "throw new UncheckedIOException(new IOException(\"No buffer left to unconsume\"));",
    "info" : "ThrowStatement[2869-2948]:ThrowStatement[2984-3063]"
  }, {
    "left" : "bufPos--;",
    "right" : "bufPos--;",
    "info" : "ExpressionStatement[2958-2967]:ExpressionStatement[3073-3082]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3037-3043]:Modifier[3152-3158]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3044-3048]:PrimitiveType[3159-3163]"
  }, {
    "left" : "advance",
    "right" : "advance",
    "info" : "SimpleName[3049-3056]:SimpleName[3164-3171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3059-3084]:Block[3174-3199]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[3069-3078]:ExpressionStatement[3184-3193]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3090-3094]:PrimitiveType[3205-3209]"
  }, {
    "left" : "mark",
    "right" : "mark",
    "info" : "SimpleName[3095-3099]:SimpleName[3210-3214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3102-3253]:Block[3217-3368]"
  }, {
    "left" : "bufSplitPoint = 0;",
    "right" : "bufSplitPoint = 0;",
    "info" : "ExpressionStatement[3183-3201]:ExpressionStatement[3298-3316]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[3210-3221]:ExpressionStatement[3325-3336]"
  }, {
    "left" : "bufMark = bufPos;",
    "right" : "bufMark = bufPos;",
    "info" : "ExpressionStatement[3230-3247]:ExpressionStatement[3345-3362]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3259-3263]:PrimitiveType[3374-3378]"
  }, {
    "left" : "rewindToMark",
    "right" : "rewindToMark",
    "info" : "SimpleName[3264-3276]:SimpleName[3379-3391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3279-3417]:Block[3394-3532]"
  }, {
    "left" : "if (bufMark == -1)",
    "right" : "if (bufMark == -1)",
    "info" : "IfStatement[3289-3384]:IfStatement[3404-3499]"
  }, {
    "left" : "throw new UncheckedIOException(new IOException(\"Mark invalid\"));",
    "right" : "throw new UncheckedIOException(new IOException(\"Mark invalid\"));",
    "info" : "ThrowStatement[3320-3384]:ThrowStatement[3435-3499]"
  }, {
    "left" : "bufPos = bufMark;",
    "right" : "bufPos = bufMark;",
    "info" : "ExpressionStatement[3394-3411]:ExpressionStatement[3509-3526]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[3669-3672]:PrimitiveType[3784-3787]"
  }, {
    "left" : "nextIndexOf",
    "right" : "nextIndexOf",
    "info" : "SimpleName[3673-3684]:SimpleName[3788-3799]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[3685-3691]:SingleVariableDeclaration[3800-3806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3693-3918]:Block[3808-4033]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[3753-3764]:ExpressionStatement[3868-3879]"
  }, {
    "left" : "for (int i = bufPos; i < bufLength; i++)",
    "right" : "for (int i = bufPos; i < bufLength; i++)",
    "info" : "ForStatement[3773-3893]:ForStatement[3888-4008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3814-3893]:Block[3929-4008]"
  }, {
    "left" : "if (c == charBuf[i])",
    "right" : "if (c == charBuf[i])",
    "info" : "IfStatement[3828-3883]:IfStatement[3943-3998]"
  }, {
    "left" : "return i - bufPos;",
    "right" : "return i - bufPos;",
    "info" : "ReturnStatement[3865-3883]:ReturnStatement[3980-3998]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[3902-3912]:ReturnStatement[4017-4027]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[4183-4186]:PrimitiveType[4298-4301]"
  }, {
    "left" : "nextIndexOf",
    "right" : "nextIndexOf",
    "info" : "SimpleName[4187-4198]:SimpleName[4302-4313]"
  }, {
    "left" : "CharSequence seq",
    "right" : "CharSequence seq",
    "info" : "SingleVariableDeclaration[4199-4215]:SingleVariableDeclaration[4314-4330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4217-4964]:Block[4332-5079]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[4227-4238]:ExpressionStatement[4342-4353]"
  }, {
    "left" : "char startChar = seq.charAt(0);",
    "right" : "char startChar = seq.charAt(0);",
    "info" : "VariableDeclarationStatement[4297-4328]:VariableDeclarationStatement[4412-4443]"
  }, {
    "left" : "for (int offset = bufPos; offset < bufLength; offset++)",
    "right" : "for (int offset = bufPos; offset < bufLength; offset++)",
    "info" : "ForStatement[4337-4939]:ForStatement[4452-5054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4393-4939]:Block[4508-5054]"
  }, {
    "left" : "if (startChar != charBuf[offset])",
    "right" : "if (startChar != charBuf[offset])",
    "info" : "IfStatement[4459-4584]:IfStatement[4574-4699]"
  }, {
    "left" : "while(++offset < bufLength && startChar != charBuf[offset])",
    "right" : "while(++offset < bufLength && startChar != charBuf[offset])",
    "info" : "WhileStatement[4509-4584]:WhileStatement[4624-4699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4569-4584]:Block[4684-4699]"
  }, {
    "left" : "int i = offset + 1;",
    "right" : "int i = offset + 1;",
    "info" : "VariableDeclarationStatement[4597-4616]:VariableDeclarationStatement[4712-4731]"
  }, {
    "left" : "int last = i + seq.length()-1;",
    "right" : "int last = i + seq.length()-1;",
    "info" : "VariableDeclarationStatement[4629-4659]:VariableDeclarationStatement[4744-4774]"
  }, {
    "left" : "if (offset < bufLength && last <= bufLength)",
    "right" : "if (offset < bufLength && last <= bufLength)",
    "info" : "IfStatement[4672-4929]:IfStatement[4787-5044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4717-4929]:Block[4832-5044]"
  }, {
    "left" : "for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++)",
    "right" : "for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++)",
    "info" : "ForStatement[4735-4817]:ForStatement[4850-4932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4802-4817]:Block[4917-4932]"
  }, {
    "left" : "if (i == last)",
    "right" : "if (i == last)",
    "info" : "IfStatement[4834-4915]:IfStatement[4949-5030]"
  }, {
    "left" : "return offset - bufPos;",
    "right" : "return offset - bufPos;",
    "info" : "ReturnStatement[4892-4915]:ReturnStatement[5007-5030]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[4948-4958]:ReturnStatement[5063-5073]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5095-5101]:Modifier[5210-5216]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5102-5108]:SimpleType[5217-5223]"
  }, {
    "left" : "consumeTo",
    "right" : "consumeTo",
    "info" : "SimpleName[5109-5118]:SimpleName[5224-5233]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[5119-5125]:SingleVariableDeclaration[5234-5240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5127-5401]:Block[5242-5516]"
  }, {
    "left" : "int offset = nextIndexOf(c);",
    "right" : "int offset = nextIndexOf(c);",
    "info" : "VariableDeclarationStatement[5137-5165]:VariableDeclarationStatement[5252-5280]"
  }, {
    "left" : "if (offset != -1)",
    "right" : "if (offset != -1)",
    "info" : "IfStatement[5174-5395]:IfStatement[5289-5510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5192-5343]:Block[5307-5458]"
  }, {
    "left" : "String consumed = cacheString(charBuf, stringCache, bufPos, offset);",
    "right" : "String consumed = cacheString(charBuf, stringCache, bufPos, offset);",
    "info" : "VariableDeclarationStatement[5206-5274]:VariableDeclarationStatement[5321-5389]"
  }, {
    "left" : "bufPos += offset;",
    "right" : "bufPos += offset;",
    "info" : "ExpressionStatement[5287-5304]:ExpressionStatement[5402-5419]"
  }, {
    "left" : "return consumed;",
    "right" : "return consumed;",
    "info" : "ReturnStatement[5317-5333]:ReturnStatement[5432-5448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5349-5395]:Block[5464-5510]"
  }, {
    "left" : "return consumeToEnd();",
    "right" : "return consumeToEnd();",
    "info" : "ReturnStatement[5363-5385]:ReturnStatement[5478-5500]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5407-5413]:SimpleType[5522-5528]"
  }, {
    "left" : "consumeTo",
    "right" : "consumeTo",
    "info" : "SimpleName[5414-5423]:SimpleName[5529-5538]"
  }, {
    "left" : "String seq",
    "right" : "String seq",
    "info" : "SingleVariableDeclaration[5424-5434]:SingleVariableDeclaration[5539-5549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5436-5712]:Block[5551-5827]"
  }, {
    "left" : "int offset = nextIndexOf(seq);",
    "right" : "int offset = nextIndexOf(seq);",
    "info" : "VariableDeclarationStatement[5446-5476]:VariableDeclarationStatement[5561-5591]"
  }, {
    "left" : "if (offset != -1)",
    "right" : "if (offset != -1)",
    "info" : "IfStatement[5485-5706]:IfStatement[5600-5821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5503-5654]:Block[5618-5769]"
  }, {
    "left" : "String consumed = cacheString(charBuf, stringCache, bufPos, offset);",
    "right" : "String consumed = cacheString(charBuf, stringCache, bufPos, offset);",
    "info" : "VariableDeclarationStatement[5517-5585]:VariableDeclarationStatement[5632-5700]"
  }, {
    "left" : "bufPos += offset;",
    "right" : "bufPos += offset;",
    "info" : "ExpressionStatement[5598-5615]:ExpressionStatement[5713-5730]"
  }, {
    "left" : "return consumed;",
    "right" : "return consumed;",
    "info" : "ReturnStatement[5628-5644]:ReturnStatement[5743-5759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5660-5706]:Block[5775-5821]"
  }, {
    "left" : "return consumeToEnd();",
    "right" : "return consumeToEnd();",
    "info" : "ReturnStatement[5674-5696]:ReturnStatement[5789-5811]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5904-5910]:Modifier[6019-6025]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5911-5917]:SimpleType[6026-6032]"
  }, {
    "left" : "consumeToAny",
    "right" : "consumeToAny",
    "info" : "SimpleName[5918-5930]:SimpleName[6033-6045]"
  }, {
    "left" : "final char... chars",
    "right" : "final char... chars",
    "info" : "SingleVariableDeclaration[5931-5950]:SingleVariableDeclaration[6046-6065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5952-6485]:Block[6067-6600]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[5962-5973]:ExpressionStatement[6077-6088]"
  }, {
    "left" : "int pos = bufPos;",
    "right" : "int pos = bufPos;",
    "info" : "VariableDeclarationStatement[5982-5999]:VariableDeclarationStatement[6097-6114]"
  }, {
    "left" : "final int start = pos;",
    "right" : "final int start = pos;",
    "info" : "VariableDeclarationStatement[6008-6030]:VariableDeclarationStatement[6123-6145]"
  }, {
    "left" : "final int remaining = bufLength;",
    "right" : "final int remaining = bufLength;",
    "info" : "VariableDeclarationStatement[6039-6071]:VariableDeclarationStatement[6154-6186]"
  }, {
    "left" : "final char[] val = charBuf;",
    "right" : "final char[] val = charBuf;",
    "info" : "VariableDeclarationStatement[6080-6107]:VariableDeclarationStatement[6195-6222]"
  }, {
    "left" : "final int charLen = chars.length;",
    "right" : "final int charLen = chars.length;",
    "info" : "VariableDeclarationStatement[6116-6149]:VariableDeclarationStatement[6231-6264]"
  }, {
    "left" : "int i;",
    "right" : "int i;",
    "info" : "VariableDeclarationStatement[6158-6164]:VariableDeclarationStatement[6273-6279]"
  }, {
    "left" : "OUTER: while (pos < remaining) {\n            for (i = 0; i < charLen; i++) {\n                if (val[pos] == chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }",
    "right" : "OUTER: while (pos < remaining) {\n            for (i = 0; i < charLen; i++) {\n                if (val[pos] == chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }",
    "info" : "LabeledStatement[6174-6368]:LabeledStatement[6289-6483]"
  }, {
    "left" : "while (pos < remaining)",
    "right" : "while (pos < remaining)",
    "info" : "WhileStatement[6181-6368]:WhileStatement[6296-6483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6205-6368]:Block[6320-6483]"
  }, {
    "left" : "for (i = 0; i < charLen; i++)",
    "right" : "for (i = 0; i < charLen; i++)",
    "info" : "ForStatement[6219-6339]:ForStatement[6334-6454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6249-6339]:Block[6364-6454]"
  }, {
    "left" : "if (val[pos] == chars[i])",
    "right" : "if (val[pos] == chars[i])",
    "info" : "IfStatement[6267-6325]:IfStatement[6382-6440]"
  }, {
    "left" : "break OUTER;",
    "right" : "break OUTER;",
    "info" : "BreakStatement[6313-6325]:BreakStatement[6428-6440]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[6352-6358]:ExpressionStatement[6467-6473]"
  }, {
    "left" : "bufPos = pos;",
    "right" : "bufPos = pos;",
    "info" : "ExpressionStatement[6378-6391]:ExpressionStatement[6493-6506]"
  }, {
    "left" : "return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "right" : "return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "info" : "ReturnStatement[6400-6479]:ReturnStatement[6515-6594]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6491-6497]:SimpleType[6606-6612]"
  }, {
    "left" : "consumeToAnySorted",
    "right" : "consumeToAnySorted",
    "info" : "SimpleName[6498-6516]:SimpleName[6613-6631]"
  }, {
    "left" : "final char... chars",
    "right" : "final char... chars",
    "info" : "SingleVariableDeclaration[6517-6536]:SingleVariableDeclaration[6632-6651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6538-6958]:Block[6653-7073]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[6548-6559]:ExpressionStatement[6663-6674]"
  }, {
    "left" : "int pos = bufPos;",
    "right" : "int pos = bufPos;",
    "info" : "VariableDeclarationStatement[6568-6585]:VariableDeclarationStatement[6683-6700]"
  }, {
    "left" : "final int start = pos;",
    "right" : "final int start = pos;",
    "info" : "VariableDeclarationStatement[6594-6616]:VariableDeclarationStatement[6709-6731]"
  }, {
    "left" : "final int remaining = bufLength;",
    "right" : "final int remaining = bufLength;",
    "info" : "VariableDeclarationStatement[6625-6657]:VariableDeclarationStatement[6740-6772]"
  }, {
    "left" : "final char[] val = charBuf;",
    "right" : "final char[] val = charBuf;",
    "info" : "VariableDeclarationStatement[6666-6693]:VariableDeclarationStatement[6781-6808]"
  }, {
    "left" : "while (pos < remaining)",
    "right" : "while (pos < remaining)",
    "info" : "WhileStatement[6703-6839]:WhileStatement[6818-6954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6727-6839]:Block[6842-6954]"
  }, {
    "left" : "if (Arrays.binarySearch(chars, val[pos]) >= 0)",
    "right" : "if (Arrays.binarySearch(chars, val[pos]) >= 0)",
    "info" : "IfStatement[6741-6810]:IfStatement[6856-6925]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6804-6810]:BreakStatement[6919-6925]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[6823-6829]:ExpressionStatement[6938-6944]"
  }, {
    "left" : "bufPos = pos;",
    "right" : "bufPos = pos;",
    "info" : "ExpressionStatement[6848-6861]:ExpressionStatement[6963-6976]"
  }, {
    "left" : "return bufPos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "right" : "return bufPos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "info" : "ReturnStatement[6870-6952]:ReturnStatement[6985-7067]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[6964-6970]:SimpleType[7079-7085]"
  }, {
    "left" : "consumeData",
    "right" : "consumeData",
    "info" : "SimpleName[6971-6982]:SimpleName[7086-7097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6985-7607]:Block[7100-7722]"
  }, {
    "left" : "int pos = bufPos;",
    "right" : "int pos = bufPos;",
    "info" : "VariableDeclarationStatement[7085-7102]:VariableDeclarationStatement[7200-7217]"
  }, {
    "left" : "final int start = pos;",
    "right" : "final int start = pos;",
    "info" : "VariableDeclarationStatement[7111-7133]:VariableDeclarationStatement[7226-7248]"
  }, {
    "left" : "final int remaining = bufLength;",
    "right" : "final int remaining = bufLength;",
    "info" : "VariableDeclarationStatement[7142-7174]:VariableDeclarationStatement[7257-7289]"
  }, {
    "left" : "final char[] val = charBuf;",
    "right" : "final char[] val = charBuf;",
    "info" : "VariableDeclarationStatement[7183-7210]:VariableDeclarationStatement[7298-7325]"
  }, {
    "left" : "OUTER: while (pos < remaining) {\n            switch (val[pos]) {\n                case '&':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n                default:\n                    pos++;\n            }\n        }",
    "right" : "OUTER: while (pos < remaining) {\n            switch (val[pos]) {\n                case '&':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n                default:\n                    pos++;\n            }\n        }",
    "info" : "LabeledStatement[7220-7491]:LabeledStatement[7335-7606]"
  }, {
    "left" : "while (pos < remaining)",
    "right" : "while (pos < remaining)",
    "info" : "WhileStatement[7227-7491]:WhileStatement[7342-7606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7251-7491]:Block[7366-7606]"
  }, {
    "left" : "switch (val[pos]) {\n                case '&':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n                default:\n                    pos++;\n            }",
    "right" : "switch (val[pos]) {\n                case '&':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n                default:\n                    pos++;\n            }",
    "info" : "SwitchStatement[7265-7481]:SwitchStatement[7380-7596]"
  }, {
    "left" : "case '&':",
    "right" : "case '&':",
    "info" : "SwitchCase[7301-7310]:SwitchCase[7416-7425]"
  }, {
    "left" : "case '<':",
    "right" : "case '<':",
    "info" : "SwitchCase[7327-7336]:SwitchCase[7442-7451]"
  }, {
    "left" : "case TokeniserState.nullChar:",
    "right" : "case TokeniserState.nullChar:",
    "info" : "SwitchCase[7353-7382]:SwitchCase[7468-7497]"
  }, {
    "left" : "break OUTER;",
    "right" : "break OUTER;",
    "info" : "BreakStatement[7403-7415]:BreakStatement[7518-7530]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[7432-7440]:SwitchCase[7547-7555]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[7461-7467]:ExpressionStatement[7576-7582]"
  }, {
    "left" : "bufPos = pos;",
    "right" : "bufPos = pos;",
    "info" : "ExpressionStatement[7500-7513]:ExpressionStatement[7615-7628]"
  }, {
    "left" : "return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "right" : "return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "info" : "ReturnStatement[7522-7601]:ReturnStatement[7637-7716]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7613-7619]:SimpleType[7728-7734]"
  }, {
    "left" : "consumeTagName",
    "right" : "consumeTagName",
    "info" : "SimpleName[7620-7634]:SimpleName[7735-7749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7637-8442]:Block[7752-8557]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[7772-7783]:ExpressionStatement[7887-7898]"
  }, {
    "left" : "int pos = bufPos;",
    "right" : "int pos = bufPos;",
    "info" : "VariableDeclarationStatement[7792-7809]:VariableDeclarationStatement[7907-7924]"
  }, {
    "left" : "final int start = pos;",
    "right" : "final int start = pos;",
    "info" : "VariableDeclarationStatement[7818-7840]:VariableDeclarationStatement[7933-7955]"
  }, {
    "left" : "final int remaining = bufLength;",
    "right" : "final int remaining = bufLength;",
    "info" : "VariableDeclarationStatement[7849-7881]:VariableDeclarationStatement[7964-7996]"
  }, {
    "left" : "final char[] val = charBuf;",
    "right" : "final char[] val = charBuf;",
    "info" : "VariableDeclarationStatement[7890-7917]:VariableDeclarationStatement[8005-8032]"
  }, {
    "left" : "OUTER: while (pos < remaining) {\n            switch (val[pos]) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n            }\n            pos++;\n        }",
    "right" : "OUTER: while (pos < remaining) {\n            switch (val[pos]) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n            }\n            pos++;\n        }",
    "info" : "LabeledStatement[7927-8325]:LabeledStatement[8042-8440]"
  }, {
    "left" : "while (pos < remaining)",
    "right" : "while (pos < remaining)",
    "info" : "WhileStatement[7934-8325]:WhileStatement[8049-8440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7958-8325]:Block[8073-8440]"
  }, {
    "left" : "switch (val[pos]) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n            }",
    "right" : "switch (val[pos]) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                case '<':\n                case TokeniserState.nullChar:\n                    break OUTER;\n            }",
    "info" : "SwitchStatement[7972-8296]:SwitchStatement[8087-8411]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[8008-8018]:SwitchCase[8123-8133]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[8035-8045]:SwitchCase[8150-8160]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[8062-8072]:SwitchCase[8177-8187]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[8089-8099]:SwitchCase[8204-8214]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[8116-8125]:SwitchCase[8231-8240]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[8142-8151]:SwitchCase[8257-8266]"
  }, {
    "left" : "case '>':",
    "right" : "case '>':",
    "info" : "SwitchCase[8168-8177]:SwitchCase[8283-8292]"
  }, {
    "left" : "case '<':",
    "right" : "case '<':",
    "info" : "SwitchCase[8194-8203]:SwitchCase[8309-8318]"
  }, {
    "left" : "case TokeniserState.nullChar:",
    "right" : "case TokeniserState.nullChar:",
    "info" : "SwitchCase[8220-8249]:SwitchCase[8335-8364]"
  }, {
    "left" : "break OUTER;",
    "right" : "break OUTER;",
    "info" : "BreakStatement[8270-8282]:BreakStatement[8385-8397]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[8309-8315]:ExpressionStatement[8424-8430]"
  }, {
    "left" : "bufPos = pos;",
    "right" : "bufPos = pos;",
    "info" : "ExpressionStatement[8335-8348]:ExpressionStatement[8450-8463]"
  }, {
    "left" : "return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "right" : "return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";",
    "info" : "ReturnStatement[8357-8436]:ReturnStatement[8472-8551]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8448-8454]:SimpleType[8563-8569]"
  }, {
    "left" : "consumeToEnd",
    "right" : "consumeToEnd",
    "info" : "SimpleName[8455-8467]:SimpleName[8570-8582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8470-8631]:Block[8585-8746]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[8480-8491]:ExpressionStatement[8595-8606]"
  }, {
    "left" : "String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);",
    "right" : "String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);",
    "info" : "VariableDeclarationStatement[8500-8576]:VariableDeclarationStatement[8615-8691]"
  }, {
    "left" : "bufPos = bufLength;",
    "right" : "bufPos = bufLength;",
    "info" : "ExpressionStatement[8585-8604]:ExpressionStatement[8700-8719]"
  }, {
    "left" : "return data;",
    "right" : "return data;",
    "info" : "ReturnStatement[8613-8625]:ReturnStatement[8728-8740]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8637-8643]:SimpleType[8752-8758]"
  }, {
    "left" : "consumeLetterSequence",
    "right" : "consumeLetterSequence",
    "info" : "SimpleName[8644-8665]:SimpleName[8759-8780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8668-9039]:Block[8783-9154]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[8678-8689]:ExpressionStatement[8793-8804]"
  }, {
    "left" : "int start = bufPos;",
    "right" : "int start = bufPos;",
    "info" : "VariableDeclarationStatement[8698-8717]:VariableDeclarationStatement[8813-8832]"
  }, {
    "left" : "while (bufPos < bufLength)",
    "right" : "while (bufPos < bufLength)",
    "info" : "WhileStatement[8726-8959]:WhileStatement[8841-9074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8753-8959]:Block[8868-9074]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[8767-8792]:VariableDeclarationStatement[8882-8907]"
  }, {
    "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))",
    "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))",
    "info" : "IfStatement[8805-8949]:IfStatement[8920-9064]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[8900-8909]:ExpressionStatement[9015-9024]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[8943-8949]:BreakStatement[9058-9064]"
  }, {
    "left" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "right" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "info" : "ReturnStatement[8969-9033]:ReturnStatement[9084-9148]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[9045-9051]:SimpleType[9160-9166]"
  }, {
    "left" : "consumeLetterThenDigitSequence",
    "right" : "consumeLetterThenDigitSequence",
    "info" : "SimpleName[9052-9082]:SimpleName[9167-9197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9085-9647]:Block[9200-9762]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[9095-9106]:ExpressionStatement[9210-9221]"
  }, {
    "left" : "int start = bufPos;",
    "right" : "int start = bufPos;",
    "info" : "VariableDeclarationStatement[9115-9134]:VariableDeclarationStatement[9230-9249]"
  }, {
    "left" : "while (bufPos < bufLength)",
    "right" : "while (bufPos < bufLength)",
    "info" : "WhileStatement[9143-9376]:WhileStatement[9258-9491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9170-9376]:Block[9285-9491]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[9184-9209]:VariableDeclarationStatement[9299-9324]"
  }, {
    "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))",
    "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))",
    "info" : "IfStatement[9222-9366]:IfStatement[9337-9481]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[9317-9326]:ExpressionStatement[9432-9441]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9360-9366]:BreakStatement[9475-9481]"
  }, {
    "left" : "while (!isEmptyNoBufferUp())",
    "right" : "while (!isEmptyNoBufferUp())",
    "info" : "WhileStatement[9385-9567]:WhileStatement[9500-9682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9414-9567]:Block[9529-9682]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[9428-9453]:VariableDeclarationStatement[9543-9568]"
  }, {
    "left" : "if (c >= '0' && c <= '9')",
    "right" : "if (c >= '0' && c <= '9')",
    "info" : "IfStatement[9466-9557]:IfStatement[9581-9672]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[9508-9517]:ExpressionStatement[9623-9632]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9551-9557]:BreakStatement[9666-9672]"
  }, {
    "left" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "right" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "info" : "ReturnStatement[9577-9641]:ReturnStatement[9692-9756]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[9653-9659]:SimpleType[9768-9774]"
  }, {
    "left" : "consumeHexSequence",
    "right" : "consumeHexSequence",
    "info" : "SimpleName[9660-9678]:SimpleName[9775-9793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9681-10052]:Block[9796-10167]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[9691-9702]:ExpressionStatement[9806-9817]"
  }, {
    "left" : "int start = bufPos;",
    "right" : "int start = bufPos;",
    "info" : "VariableDeclarationStatement[9711-9730]:VariableDeclarationStatement[9826-9845]"
  }, {
    "left" : "while (bufPos < bufLength)",
    "right" : "while (bufPos < bufLength)",
    "info" : "WhileStatement[9739-9973]:WhileStatement[9854-10088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9766-9973]:Block[9881-10088]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[9780-9805]:VariableDeclarationStatement[9895-9920]"
  }, {
    "left" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
    "right" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
    "info" : "IfStatement[9818-9963]:IfStatement[9933-10078]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[9914-9923]:ExpressionStatement[10029-10038]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9957-9963]:BreakStatement[10072-10078]"
  }, {
    "left" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "right" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "info" : "ReturnStatement[9982-10046]:ReturnStatement[10097-10161]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10058-10064]:SimpleType[10173-10179]"
  }, {
    "left" : "consumeDigitSequence",
    "right" : "consumeDigitSequence",
    "info" : "SimpleName[10065-10085]:SimpleName[10180-10200]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10088-10405]:Block[10203-10520]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[10098-10109]:ExpressionStatement[10213-10224]"
  }, {
    "left" : "int start = bufPos;",
    "right" : "int start = bufPos;",
    "info" : "VariableDeclarationStatement[10118-10137]:VariableDeclarationStatement[10233-10252]"
  }, {
    "left" : "while (bufPos < bufLength)",
    "right" : "while (bufPos < bufLength)",
    "info" : "WhileStatement[10146-10326]:WhileStatement[10261-10441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10173-10326]:Block[10288-10441]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[10187-10212]:VariableDeclarationStatement[10302-10327]"
  }, {
    "left" : "if (c >= '0' && c <= '9')",
    "right" : "if (c >= '0' && c <= '9')",
    "info" : "IfStatement[10225-10316]:IfStatement[10340-10431]"
  }, {
    "left" : "bufPos++;",
    "right" : "bufPos++;",
    "info" : "ExpressionStatement[10267-10276]:ExpressionStatement[10382-10391]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10310-10316]:BreakStatement[10425-10431]"
  }, {
    "left" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "right" : "return cacheString(charBuf, stringCache, start, bufPos - start);",
    "info" : "ReturnStatement[10335-10399]:ReturnStatement[10450-10514]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10411-10418]:PrimitiveType[10526-10533]"
  }, {
    "left" : "matches",
    "right" : "matches",
    "info" : "SimpleName[10419-10426]:SimpleName[10534-10541]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[10427-10433]:SingleVariableDeclaration[10542-10548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10435-10494]:Block[10550-10609]"
  }, {
    "left" : "return !isEmpty() && charBuf[bufPos] == c;",
    "right" : "return !isEmpty() && charBuf[bufPos] == c;",
    "info" : "ReturnStatement[10445-10487]:ReturnStatement[10560-10602]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10500-10507]:PrimitiveType[10615-10622]"
  }, {
    "left" : "matches",
    "right" : "matches",
    "info" : "SimpleName[10508-10515]:SimpleName[10623-10630]"
  }, {
    "left" : "String seq",
    "right" : "String seq",
    "info" : "SingleVariableDeclaration[10516-10526]:SingleVariableDeclaration[10631-10641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10528-10840]:Block[10643-10955]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[10538-10549]:ExpressionStatement[10653-10664]"
  }, {
    "left" : "int scanLength = seq.length();",
    "right" : "int scanLength = seq.length();",
    "info" : "VariableDeclarationStatement[10558-10588]:VariableDeclarationStatement[10673-10703]"
  }, {
    "left" : "if (scanLength > bufLength - bufPos)",
    "right" : "if (scanLength > bufLength - bufPos)",
    "info" : "IfStatement[10597-10659]:IfStatement[10712-10774]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10646-10659]:ReturnStatement[10761-10774]"
  }, {
    "left" : "for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != charBuf[bufPos +offset])\n                return false;",
    "right" : "for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != charBuf[bufPos +offset])\n                return false;",
    "info" : "ForStatement[10669-10813]:ForStatement[10784-10928]"
  }, {
    "left" : "if (seq.charAt(offset) != charBuf[bufPos +offset])",
    "right" : "if (seq.charAt(offset) != charBuf[bufPos +offset])",
    "info" : "IfStatement[10733-10813]:IfStatement[10848-10928]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10800-10813]:ReturnStatement[10915-10928]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10822-10834]:ReturnStatement[10937-10949]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10846-10853]:PrimitiveType[10961-10968]"
  }, {
    "left" : "matchesIgnoreCase",
    "right" : "matchesIgnoreCase",
    "info" : "SimpleName[10854-10871]:SimpleName[10969-10986]"
  }, {
    "left" : "String seq",
    "right" : "String seq",
    "info" : "SingleVariableDeclaration[10872-10882]:SingleVariableDeclaration[10987-10997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10884-11327]:Block[10999-11442]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[10894-10905]:ExpressionStatement[11009-11020]"
  }, {
    "left" : "int scanLength = seq.length();",
    "right" : "int scanLength = seq.length();",
    "info" : "VariableDeclarationStatement[10914-10944]:VariableDeclarationStatement[11029-11059]"
  }, {
    "left" : "if (scanLength > bufLength - bufPos)",
    "right" : "if (scanLength > bufLength - bufPos)",
    "info" : "IfStatement[10953-11015]:IfStatement[11068-11130]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11002-11015]:ReturnStatement[11117-11130]"
  }, {
    "left" : "for (int offset = 0; offset < scanLength; offset++)",
    "right" : "for (int offset = 0; offset < scanLength; offset++)",
    "info" : "ForStatement[11025-11300]:ForStatement[11140-11415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11077-11300]:Block[11192-11415]"
  }, {
    "left" : "char upScan = Character.toUpperCase(seq.charAt(offset));",
    "right" : "char upScan = Character.toUpperCase(seq.charAt(offset));",
    "info" : "VariableDeclarationStatement[11091-11147]:VariableDeclarationStatement[11206-11262]"
  }, {
    "left" : "char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);",
    "right" : "char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);",
    "info" : "VariableDeclarationStatement[11160-11224]:VariableDeclarationStatement[11275-11339]"
  }, {
    "left" : "if (upScan != upTarget)",
    "right" : "if (upScan != upTarget)",
    "info" : "IfStatement[11237-11290]:IfStatement[11352-11405]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11277-11290]:ReturnStatement[11392-11405]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11309-11321]:ReturnStatement[11424-11436]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11333-11340]:PrimitiveType[11448-11455]"
  }, {
    "left" : "matchesAny",
    "right" : "matchesAny",
    "info" : "SimpleName[11341-11351]:SimpleName[11456-11466]"
  }, {
    "left" : "char... seq",
    "right" : "char... seq",
    "info" : "SingleVariableDeclaration[11352-11363]:SingleVariableDeclaration[11467-11478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11365-11596]:Block[11480-11711]"
  }, {
    "left" : "if (isEmpty())",
    "right" : "if (isEmpty())",
    "info" : "IfStatement[11375-11415]:IfStatement[11490-11530]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11402-11415]:ReturnStatement[11517-11530]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[11425-11436]:ExpressionStatement[11540-11551]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[11445-11470]:VariableDeclarationStatement[11560-11585]"
  }, {
    "left" : "for (char seek : seq)",
    "right" : "for (char seek : seq)",
    "info" : "EnhancedForStatement[11479-11568]:EnhancedForStatement[11594-11683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11501-11568]:Block[11616-11683]"
  }, {
    "left" : "if (seek == c)",
    "right" : "if (seek == c)",
    "info" : "IfStatement[11515-11558]:IfStatement[11630-11673]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11546-11558]:ReturnStatement[11661-11673]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11577-11590]:ReturnStatement[11692-11705]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11602-11609]:PrimitiveType[11717-11724]"
  }, {
    "left" : "matchesAnySorted",
    "right" : "matchesAnySorted",
    "info" : "SimpleName[11610-11626]:SimpleName[11725-11741]"
  }, {
    "left" : "char[] seq",
    "right" : "char[] seq",
    "info" : "SingleVariableDeclaration[11627-11637]:SingleVariableDeclaration[11742-11752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11639-11743]:Block[11754-11858]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[11649-11660]:ExpressionStatement[11764-11775]"
  }, {
    "left" : "return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;",
    "right" : "return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;",
    "info" : "ReturnStatement[11669-11737]:ReturnStatement[11784-11852]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11749-11756]:PrimitiveType[11864-11871]"
  }, {
    "left" : "matchesLetter",
    "right" : "matchesLetter",
    "info" : "SimpleName[11757-11770]:SimpleName[11872-11885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11773-11953]:Block[11888-12068]"
  }, {
    "left" : "if (isEmpty())",
    "right" : "if (isEmpty())",
    "info" : "IfStatement[11783-11823]:IfStatement[11898-11938]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11810-11823]:ReturnStatement[11925-11938]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[11832-11857]:VariableDeclarationStatement[11947-11972]"
  }, {
    "left" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);",
    "right" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);",
    "info" : "ReturnStatement[11866-11947]:ReturnStatement[11981-12062]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11959-11966]:PrimitiveType[12074-12081]"
  }, {
    "left" : "matchesDigit",
    "right" : "matchesDigit",
    "info" : "SimpleName[11967-11979]:SimpleName[12082-12094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11982-12111]:Block[12097-12226]"
  }, {
    "left" : "if (isEmpty())",
    "right" : "if (isEmpty())",
    "info" : "IfStatement[11992-12032]:IfStatement[12107-12147]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12019-12032]:ReturnStatement[12134-12147]"
  }, {
    "left" : "char c = charBuf[bufPos];",
    "right" : "char c = charBuf[bufPos];",
    "info" : "VariableDeclarationStatement[12041-12066]:VariableDeclarationStatement[12156-12181]"
  }, {
    "left" : "return (c >= '0' && c <= '9');",
    "right" : "return (c >= '0' && c <= '9');",
    "info" : "ReturnStatement[12075-12105]:ReturnStatement[12190-12220]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12117-12124]:PrimitiveType[12232-12239]"
  }, {
    "left" : "matchConsume",
    "right" : "matchConsume",
    "info" : "SimpleName[12125-12137]:SimpleName[12240-12252]"
  }, {
    "left" : "String seq",
    "right" : "String seq",
    "info" : "SingleVariableDeclaration[12138-12148]:SingleVariableDeclaration[12253-12263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12150-12319]:Block[12265-12434]"
  }, {
    "left" : "bufferUp();",
    "right" : "bufferUp();",
    "info" : "ExpressionStatement[12160-12171]:ExpressionStatement[12275-12286]"
  }, {
    "left" : "if (matches(seq))",
    "right" : "if (matches(seq))",
    "info" : "IfStatement[12180-12313]:IfStatement[12295-12428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12198-12270]:Block[12313-12385]"
  }, {
    "left" : "bufPos += seq.length();",
    "right" : "bufPos += seq.length();",
    "info" : "ExpressionStatement[12212-12235]:ExpressionStatement[12327-12350]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12248-12260]:ReturnStatement[12363-12375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12276-12313]:Block[12391-12428]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12290-12303]:ReturnStatement[12405-12418]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12325-12332]:PrimitiveType[12440-12447]"
  }, {
    "left" : "matchConsumeIgnoreCase",
    "right" : "matchConsumeIgnoreCase",
    "info" : "SimpleName[12333-12355]:SimpleName[12448-12470]"
  }, {
    "left" : "String seq",
    "right" : "String seq",
    "info" : "SingleVariableDeclaration[12356-12366]:SingleVariableDeclaration[12471-12481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12368-12527]:Block[12483-12642]"
  }, {
    "left" : "if (matchesIgnoreCase(seq))",
    "right" : "if (matchesIgnoreCase(seq))",
    "info" : "IfStatement[12378-12521]:IfStatement[12493-12636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12406-12478]:Block[12521-12593]"
  }, {
    "left" : "bufPos += seq.length();",
    "right" : "bufPos += seq.length();",
    "info" : "ExpressionStatement[12420-12443]:ExpressionStatement[12535-12558]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12456-12468]:ReturnStatement[12571-12583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12484-12521]:Block[12599-12636]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12498-12511]:ReturnStatement[12613-12626]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12533-12540]:PrimitiveType[12648-12655]"
  }, {
    "left" : "containsIgnoreCase",
    "right" : "containsIgnoreCase",
    "info" : "SimpleName[12541-12559]:SimpleName[12656-12674]"
  }, {
    "left" : "String seq",
    "right" : "String seq",
    "info" : "SingleVariableDeclaration[12560-12570]:SingleVariableDeclaration[12675-12685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12572-12851]:Block[12687-12966]"
  }, {
    "left" : "String loScan = seq.toLowerCase(Locale.ENGLISH);",
    "right" : "String loScan = seq.toLowerCase(Locale.ENGLISH);",
    "info" : "VariableDeclarationStatement[12667-12715]:VariableDeclarationStatement[12782-12830]"
  }, {
    "left" : "String hiScan = seq.toUpperCase(Locale.ENGLISH);",
    "right" : "String hiScan = seq.toUpperCase(Locale.ENGLISH);",
    "info" : "VariableDeclarationStatement[12724-12772]:VariableDeclarationStatement[12839-12887]"
  }, {
    "left" : "return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);",
    "right" : "return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);",
    "info" : "ReturnStatement[12781-12845]:ReturnStatement[12896-12960]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13061-13070]:MarkerAnnotation[13490-13499]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13075-13081]:Modifier[13504-13510]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13082-13088]:SimpleType[13511-13517]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[13089-13097]:SimpleName[13518-13526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13100-13171]:Block[13529-13600]"
  }, {
    "left" : "return new String(charBuf, bufPos, bufLength - bufPos);",
    "right" : "return new String(charBuf, bufPos, bufLength - bufPos);",
    "info" : "ReturnStatement[13110-13165]:ReturnStatement[13539-13594]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13578-13585]:Modifier[14007-14014]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13586-13592]:Modifier[14015-14021]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13593-13599]:SimpleType[14022-14028]"
  }, {
    "left" : "cacheString",
    "right" : "cacheString",
    "info" : "SimpleName[13600-13611]:SimpleName[14029-14040]"
  }, {
    "left" : "final char[] charBuf",
    "right" : "final char[] charBuf",
    "info" : "SingleVariableDeclaration[13612-13632]:SingleVariableDeclaration[14041-14061]"
  }, {
    "left" : "final String[] stringCache",
    "right" : "final String[] stringCache",
    "info" : "SingleVariableDeclaration[13634-13660]:SingleVariableDeclaration[14063-14089]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[13662-13677]:SingleVariableDeclaration[14091-14106]"
  }, {
    "left" : "final int count",
    "right" : "final int count",
    "info" : "SingleVariableDeclaration[13679-13694]:SingleVariableDeclaration[14108-14123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13696-14742]:Block[14125-15171]"
  }, {
    "left" : "if (count > maxStringCacheLen)",
    "right" : "if (count > maxStringCacheLen)",
    "info" : "IfStatement[13735-13819]:IfStatement[14164-14248]"
  }, {
    "left" : "return new String(charBuf, start, count);",
    "right" : "return new String(charBuf, start, count);",
    "info" : "ReturnStatement[13778-13819]:ReturnStatement[14207-14248]"
  }, {
    "left" : "if (count < 1)",
    "right" : "if (count < 1)",
    "info" : "IfStatement[13828-13865]:IfStatement[14257-14294]"
  }, {
    "left" : "return \"\";",
    "right" : "return \"\";",
    "info" : "ReturnStatement[13855-13865]:ReturnStatement[14284-14294]"
  }, {
    "left" : "int hash = 0;",
    "right" : "int hash = 0;",
    "info" : "VariableDeclarationStatement[13902-13915]:VariableDeclarationStatement[14331-14344]"
  }, {
    "left" : "int offset = start;",
    "right" : "int offset = start;",
    "info" : "VariableDeclarationStatement[13924-13943]:VariableDeclarationStatement[14353-14372]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[13952-14045]:ForStatement[14381-14474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13984-14045]:Block[14413-14474]"
  }, {
    "left" : "hash = 31 * hash + charBuf[offset++];",
    "right" : "hash = 31 * hash + charBuf[offset++];",
    "info" : "ExpressionStatement[13998-14035]:ExpressionStatement[14427-14464]"
  }, {
    "left" : "final int index = hash & stringCache.length - 1;",
    "right" : "final int index = hash & stringCache.length - 1;",
    "info" : "VariableDeclarationStatement[14081-14129]:VariableDeclarationStatement[14510-14558]"
  }, {
    "left" : "String cached = stringCache[index];",
    "right" : "String cached = stringCache[index];",
    "info" : "VariableDeclarationStatement[14138-14173]:VariableDeclarationStatement[14567-14602]"
  }, {
    "left" : "if (cached == null)",
    "right" : "if (cached == null)",
    "info" : "IfStatement[14183-14713]:IfStatement[14612-15142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14203-14324]:Block[14632-14753]"
  }, {
    "left" : "cached = new String(charBuf, start, count);",
    "right" : "cached = new String(charBuf, start, count);",
    "info" : "ExpressionStatement[14230-14273]:ExpressionStatement[14659-14702]"
  }, {
    "left" : "stringCache[index] = cached;",
    "right" : "stringCache[index] = cached;",
    "info" : "ExpressionStatement[14286-14314]:ExpressionStatement[14715-14743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14330-14713]:Block[14759-15142]"
  }, {
    "left" : "if (rangeEquals(charBuf, start, count, cached))",
    "right" : "if (rangeEquals(charBuf, start, count, cached))",
    "info" : "IfStatement[14376-14703]:IfStatement[14805-15132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14424-14477]:Block[14853-14906]"
  }, {
    "left" : "return cached;",
    "right" : "return cached;",
    "info" : "ReturnStatement[14449-14463]:ReturnStatement[14878-14892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14483-14703]:Block[14912-15132]"
  }, {
    "left" : "cached = new String(charBuf, start, count);",
    "right" : "cached = new String(charBuf, start, count);",
    "info" : "ExpressionStatement[14522-14565]:ExpressionStatement[14951-14994]"
  }, {
    "left" : "stringCache[index] = cached;",
    "right" : "stringCache[index] = cached;",
    "info" : "ExpressionStatement[14582-14610]:ExpressionStatement[15011-15039]"
  }, {
    "left" : "return cached;",
    "right" : "return cached;",
    "info" : "ReturnStatement[14722-14736]:ReturnStatement[15151-15165]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14831-14837]:Modifier[15260-15266]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14838-14845]:PrimitiveType[15267-15274]"
  }, {
    "left" : "rangeEquals",
    "right" : "rangeEquals",
    "info" : "SimpleName[14846-14857]:SimpleName[15275-15286]"
  }, {
    "left" : "final char[] charBuf",
    "right" : "final char[] charBuf",
    "info" : "SingleVariableDeclaration[14858-14878]:SingleVariableDeclaration[15287-15307]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[14880-14895]:SingleVariableDeclaration[15309-15324]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[14897-14906]:SingleVariableDeclaration[15326-15335]"
  }, {
    "left" : "final String cached",
    "right" : "final String cached",
    "info" : "SingleVariableDeclaration[14908-14927]:SingleVariableDeclaration[15337-15356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14929-15222]:Block[15358-15651]"
  }, {
    "left" : "if (count == cached.length())",
    "right" : "if (count == cached.length())",
    "info" : "IfStatement[14939-15194]:IfStatement[15368-15623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14969-15194]:Block[15398-15623]"
  }, {
    "left" : "int i = start;",
    "right" : "int i = start;",
    "info" : "VariableDeclarationStatement[14983-14997]:VariableDeclarationStatement[15412-15426]"
  }, {
    "left" : "int j = 0;",
    "right" : "int j = 0;",
    "info" : "VariableDeclarationStatement[15010-15020]:VariableDeclarationStatement[15439-15449]"
  }, {
    "left" : "while (count-- != 0)",
    "right" : "while (count-- != 0)",
    "info" : "WhileStatement[15033-15159]:WhileStatement[15462-15588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15054-15159]:Block[15483-15588]"
  }, {
    "left" : "if (charBuf[i++] != cached.charAt(j++))",
    "right" : "if (charBuf[i++] != cached.charAt(j++))",
    "info" : "IfStatement[15072-15145]:IfStatement[15501-15574]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15132-15145]:ReturnStatement[15561-15574]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[15172-15184]:ReturnStatement[15601-15613]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15203-15216]:ReturnStatement[15632-15645]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15257-15264]:PrimitiveType[15686-15693]"
  }, {
    "left" : "rangeEquals",
    "right" : "rangeEquals",
    "info" : "SimpleName[15265-15276]:SimpleName[15694-15705]"
  }, {
    "left" : "final int start",
    "right" : "final int start",
    "info" : "SingleVariableDeclaration[15277-15292]:SingleVariableDeclaration[15706-15721]"
  }, {
    "left" : "final int count",
    "right" : "final int count",
    "info" : "SingleVariableDeclaration[15294-15309]:SingleVariableDeclaration[15723-15738]"
  }, {
    "left" : "final String cached",
    "right" : "final String cached",
    "info" : "SingleVariableDeclaration[15311-15330]:SingleVariableDeclaration[15740-15759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15332-15398]:Block[15761-15827]"
  }, {
    "left" : "return rangeEquals(charBuf, start, count, cached);",
    "right" : "return rangeEquals(charBuf, start, count, cached);",
    "info" : "ReturnStatement[15342-15392]:ReturnStatement[15771-15821]"
  } ]
}