{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsonTreeWriter",
      "right" : "JsonTreeWriter",
      "info" : "TypeDeclaration[962-5796]:TypeDeclaration[962-5981]"
    }, {
      "left" : "private static final Writer UNWRITABLE_WRITER = new Writer() {\n    @Override public void write(char[] buffer, int offset, int counter) {\n      throw new AssertionError();\n    }\n    @Override public void flush() throws IOException {\n      throw new AssertionError();\n    }\n    @Override public void close() throws IOException {\n      throw new AssertionError();\n    }\n  };",
      "right" : "private static final Writer UNWRITABLE_WRITER = new Writer() {\n    @Override public void write(char[] buffer, int offset, int counter) {\n      throw new AssertionError();\n    }\n    @Override public void flush() throws IOException {\n      throw new AssertionError();\n    }\n    @Override public void close() throws IOException {\n      throw new AssertionError();\n    }\n  };",
      "info" : "FieldDeclaration[1065-1436]:FieldDeclaration[1065-1436]"
    }, {
      "left" : "public void write(char[] buffer, int offset, int counter)",
      "right" : "public void write(char[] buffer, int offset, int counter)",
      "info" : "MethodDeclaration[1132-1241]:MethodDeclaration[1132-1241]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[1246-1336]:MethodDeclaration[1246-1336]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[1341-1431]:MethodDeclaration[1341-1431]"
    }, {
      "left" : "private static final JsonPrimitive SENTINEL_CLOSED = new JsonPrimitive(\"closed\");",
      "right" : "private static final JsonPrimitive SENTINEL_CLOSED = new JsonPrimitive(\"closed\");",
      "info" : "FieldDeclaration[1439-1618]:FieldDeclaration[1439-1618]"
    }, {
      "left" : "private final List<JsonElement> stack = new ArrayList<JsonElement>();",
      "right" : "private final List<JsonElement> stack = new ArrayList<JsonElement>();",
      "info" : "FieldDeclaration[1622-1776]:FieldDeclaration[1622-1776]"
    }, {
      "left" : "private String pendingName;",
      "right" : "private String pendingName;",
      "info" : "FieldDeclaration[1780-1908]:FieldDeclaration[1780-1908]"
    }, {
      "left" : "private JsonElement product = JsonNull.INSTANCE;",
      "right" : "private JsonElement product = JsonNull.INSTANCE;",
      "info" : "FieldDeclaration[1912-2014]:FieldDeclaration[1912-2014]"
    }, {
      "left" : "public JsonTreeWriter()",
      "right" : "public JsonTreeWriter()",
      "info" : "MethodDeclaration[2057-2116]:MethodDeclaration[2057-2116]"
    }, {
      "left" : "public JsonElement get()",
      "right" : "public JsonElement get()",
      "info" : "MethodDeclaration[2120-2360]:MethodDeclaration[2120-2360]"
    }, {
      "left" : "private JsonElement peek()",
      "right" : "private JsonElement peek()",
      "info" : "MethodDeclaration[2364-2436]:MethodDeclaration[2364-2436]"
    }, {
      "left" : "private void put(JsonElement value)",
      "right" : "private void put(JsonElement value)",
      "info" : "MethodDeclaration[2440-2953]:MethodDeclaration[2440-2953]"
    }, {
      "left" : "public JsonWriter beginArray() throws IOException",
      "right" : "public JsonWriter beginArray() throws IOException",
      "info" : "MethodDeclaration[2957-3116]:MethodDeclaration[2957-3116]"
    }, {
      "left" : "public JsonWriter endArray() throws IOException",
      "right" : "public JsonWriter endArray() throws IOException",
      "info" : "MethodDeclaration[3120-3456]:MethodDeclaration[3120-3456]"
    }, {
      "left" : "public JsonWriter beginObject() throws IOException",
      "right" : "public JsonWriter beginObject() throws IOException",
      "info" : "MethodDeclaration[3460-3625]:MethodDeclaration[3460-3625]"
    }, {
      "left" : "public JsonWriter endObject() throws IOException",
      "right" : "public JsonWriter endObject() throws IOException",
      "info" : "MethodDeclaration[3629-3967]:MethodDeclaration[3629-3967]"
    }, {
      "left" : "public JsonWriter name(String name) throws IOException",
      "right" : "public JsonWriter name(String name) throws IOException",
      "info" : "MethodDeclaration[3971-4303]:MethodDeclaration[3971-4303]"
    }, {
      "left" : "public JsonWriter value(String value) throws IOException",
      "right" : "public JsonWriter value(String value) throws IOException",
      "info" : "MethodDeclaration[4307-4488]:MethodDeclaration[4307-4488]"
    }, {
      "left" : "public JsonWriter nullValue() throws IOException",
      "right" : "public JsonWriter nullValue() throws IOException",
      "info" : "MethodDeclaration[4492-4601]:MethodDeclaration[4492-4601]"
    }, {
      "left" : "public JsonWriter value(boolean value) throws IOException",
      "right" : "public JsonWriter value(boolean value) throws IOException",
      "info" : "MethodDeclaration[4605-4730]:MethodDeclaration[4605-4730]"
    }, {
      "left" : "public JsonWriter value(double value) throws IOException",
      "right" : "public JsonWriter value(double value) throws IOException",
      "info" : "MethodDeclaration[4735-5029]:MethodDeclaration[4920-5214]"
    }, {
      "left" : "public JsonWriter value(long value) throws IOException",
      "right" : "public JsonWriter value(long value) throws IOException",
      "info" : "MethodDeclaration[5033-5155]:MethodDeclaration[5218-5340]"
    }, {
      "left" : "public JsonWriter value(Number value) throws IOException",
      "right" : "public JsonWriter value(Number value) throws IOException",
      "info" : "MethodDeclaration[5159-5560]:MethodDeclaration[5344-5745]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[5564-5618]:MethodDeclaration[5749-5803]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[5622-5794]:MethodDeclaration[5807-5979]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1008-1014]:Modifier[1008-1014]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1015-1020]:Modifier[1015-1020]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1021-1026]:TYPE_DECLARATION_KIND[1021-1026]"
    }, {
      "left" : "JsonTreeWriter",
      "right" : "JsonTreeWriter",
      "info" : "SimpleName[1027-1041]:SimpleName[1027-1041]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[1050-1060]:SimpleType[1050-1060]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1132-1141]:MarkerAnnotation[1132-1141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1142-1148]:Modifier[1142-1148]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1149-1153]:PrimitiveType[1149-1153]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[1154-1159]:SimpleName[1154-1159]"
    }, {
      "left" : "char[] buffer",
      "right" : "char[] buffer",
      "info" : "SingleVariableDeclaration[1160-1173]:SingleVariableDeclaration[1160-1173]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[1175-1185]:SingleVariableDeclaration[1175-1185]"
    }, {
      "left" : "int counter",
      "right" : "int counter",
      "info" : "SingleVariableDeclaration[1187-1198]:SingleVariableDeclaration[1187-1198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1200-1241]:Block[1200-1241]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[1208-1235]:ThrowStatement[1208-1235]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1246-1255]:MarkerAnnotation[1246-1255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1256-1262]:Modifier[1256-1262]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1263-1267]:PrimitiveType[1263-1267]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[1268-1273]:SimpleName[1268-1273]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1283-1294]:SimpleType[1283-1294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1295-1336]:Block[1295-1336]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[1303-1330]:ThrowStatement[1303-1330]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1341-1350]:MarkerAnnotation[1341-1350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1351-1357]:Modifier[1351-1357]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1358-1362]:PrimitiveType[1358-1362]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[1363-1368]:SimpleName[1363-1368]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1378-1389]:SimpleType[1378-1389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1390-1431]:Block[1390-1431]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[1398-1425]:ThrowStatement[1398-1425]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2057-2063]:Modifier[2057-2063]"
    }, {
      "left" : "JsonTreeWriter",
      "right" : "JsonTreeWriter",
      "info" : "SimpleName[2064-2078]:SimpleName[2064-2078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2081-2116]:Block[2081-2116]"
    }, {
      "left" : "super(UNWRITABLE_WRITER);",
      "right" : "super(UNWRITABLE_WRITER);",
      "info" : "SuperConstructorInvocation[2087-2112]:SuperConstructorInvocation[2087-2112]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2191-2197]:Modifier[2191-2197]"
    }, {
      "left" : "JsonElement",
      "right" : "JsonElement",
      "info" : "SimpleType[2198-2209]:SimpleType[2198-2209]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[2210-2213]:SimpleName[2210-2213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2216-2360]:Block[2216-2360]"
    }, {
      "left" : "if (!stack.isEmpty())",
      "right" : "if (!stack.isEmpty())",
      "info" : "IfStatement[2222-2336]:IfStatement[2222-2336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2244-2336]:Block[2244-2336]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected one JSON element but was \" + stack);",
      "right" : "throw new IllegalStateException(\"Expected one JSON element but was \" + stack);",
      "info" : "ThrowStatement[2252-2330]:ThrowStatement[2252-2330]"
    }, {
      "left" : "return product;",
      "right" : "return product;",
      "info" : "ReturnStatement[2341-2356]:ReturnStatement[2341-2356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2364-2371]:Modifier[2364-2371]"
    }, {
      "left" : "JsonElement",
      "right" : "JsonElement",
      "info" : "SimpleType[2372-2383]:SimpleType[2372-2383]"
    }, {
      "left" : "peek",
      "right" : "peek",
      "info" : "SimpleName[2384-2388]:SimpleName[2384-2388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2391-2436]:Block[2391-2436]"
    }, {
      "left" : "return stack.get(stack.size() - 1);",
      "right" : "return stack.get(stack.size() - 1);",
      "info" : "ReturnStatement[2397-2432]:ReturnStatement[2397-2432]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2440-2447]:Modifier[2440-2447]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2448-2452]:PrimitiveType[2448-2452]"
    }, {
      "left" : "put",
      "right" : "put",
      "info" : "SimpleName[2453-2456]:SimpleName[2453-2456]"
    }, {
      "left" : "JsonElement value",
      "right" : "JsonElement value",
      "info" : "SingleVariableDeclaration[2457-2474]:SingleVariableDeclaration[2457-2474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2476-2953]:Block[2476-2953]"
    }, {
      "left" : "if (pendingName != null)",
      "right" : "if (pendingName != null)",
      "info" : "IfStatement[2482-2949]:IfStatement[2482-2949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2507-2693]:Block[2507-2693]"
    }, {
      "left" : "if (!value.isJsonNull() || getSerializeNulls())",
      "right" : "if (!value.isJsonNull() || getSerializeNulls())",
      "info" : "IfStatement[2515-2661]:IfStatement[2515-2661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2563-2661]:Block[2563-2661]"
    }, {
      "left" : "JsonObject object = (JsonObject) peek();",
      "right" : "JsonObject object = (JsonObject) peek();",
      "info" : "VariableDeclarationStatement[2573-2613]:VariableDeclarationStatement[2573-2613]"
    }, {
      "left" : "object.add(pendingName, value);",
      "right" : "object.add(pendingName, value);",
      "info" : "ExpressionStatement[2622-2653]:ExpressionStatement[2622-2653]"
    }, {
      "left" : "pendingName = null;",
      "right" : "pendingName = null;",
      "info" : "ExpressionStatement[2668-2687]:ExpressionStatement[2668-2687]"
    }, {
      "left" : "if (stack.isEmpty())",
      "right" : "if (stack.isEmpty())",
      "info" : "IfStatement[2699-2949]:IfStatement[2699-2949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2720-2750]:Block[2720-2750]"
    }, {
      "left" : "product = value;",
      "right" : "product = value;",
      "info" : "ExpressionStatement[2728-2744]:ExpressionStatement[2728-2744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2756-2949]:Block[2756-2949]"
    }, {
      "left" : "JsonElement element = peek();",
      "right" : "JsonElement element = peek();",
      "info" : "VariableDeclarationStatement[2764-2793]:VariableDeclarationStatement[2764-2793]"
    }, {
      "left" : "if (element instanceof JsonArray)",
      "right" : "if (element instanceof JsonArray)",
      "info" : "IfStatement[2800-2943]:IfStatement[2800-2943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2834-2885]:Block[2834-2885]"
    }, {
      "left" : "((JsonArray) element).add(value);",
      "right" : "((JsonArray) element).add(value);",
      "info" : "ExpressionStatement[2844-2877]:ExpressionStatement[2844-2877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2891-2943]:Block[2891-2943]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[2901-2935]:ThrowStatement[2901-2935]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2957-2966]:MarkerAnnotation[2957-2966]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2967-2973]:Modifier[2967-2973]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[2974-2984]:SimpleType[2974-2984]"
    }, {
      "left" : "beginArray",
      "right" : "beginArray",
      "info" : "SimpleName[2985-2995]:SimpleName[2985-2995]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3005-3016]:SimpleType[3005-3016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3017-3116]:Block[3017-3116]"
    }, {
      "left" : "JsonArray array = new JsonArray();",
      "right" : "JsonArray array = new JsonArray();",
      "info" : "VariableDeclarationStatement[3023-3057]:VariableDeclarationStatement[3023-3057]"
    }, {
      "left" : "put(array);",
      "right" : "put(array);",
      "info" : "ExpressionStatement[3062-3073]:ExpressionStatement[3062-3073]"
    }, {
      "left" : "stack.add(array);",
      "right" : "stack.add(array);",
      "info" : "ExpressionStatement[3078-3095]:ExpressionStatement[3078-3095]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3100-3112]:ReturnStatement[3100-3112]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3120-3129]:MarkerAnnotation[3120-3129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3130-3136]:Modifier[3130-3136]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[3137-3147]:SimpleType[3137-3147]"
    }, {
      "left" : "endArray",
      "right" : "endArray",
      "info" : "SimpleName[3148-3156]:SimpleName[3148-3156]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3166-3177]:SimpleType[3166-3177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3178-3456]:Block[3178-3456]"
    }, {
      "left" : "if (stack.isEmpty() || pendingName != null)",
      "right" : "if (stack.isEmpty() || pendingName != null)",
      "info" : "IfStatement[3184-3276]:IfStatement[3184-3276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3228-3276]:Block[3228-3276]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3236-3270]:ThrowStatement[3236-3270]"
    }, {
      "left" : "JsonElement element = peek();",
      "right" : "JsonElement element = peek();",
      "info" : "VariableDeclarationStatement[3281-3310]:VariableDeclarationStatement[3281-3310]"
    }, {
      "left" : "if (element instanceof JsonArray)",
      "right" : "if (element instanceof JsonArray)",
      "info" : "IfStatement[3315-3413]:IfStatement[3315-3413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3349-3413]:Block[3349-3413]"
    }, {
      "left" : "stack.remove(stack.size() - 1);",
      "right" : "stack.remove(stack.size() - 1);",
      "info" : "ExpressionStatement[3357-3388]:ExpressionStatement[3357-3388]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3395-3407]:ReturnStatement[3395-3407]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3418-3452]:ThrowStatement[3418-3452]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3460-3469]:MarkerAnnotation[3460-3469]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3470-3476]:Modifier[3470-3476]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[3477-3487]:SimpleType[3477-3487]"
    }, {
      "left" : "beginObject",
      "right" : "beginObject",
      "info" : "SimpleName[3488-3499]:SimpleName[3488-3499]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3509-3520]:SimpleType[3509-3520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3521-3625]:Block[3521-3625]"
    }, {
      "left" : "JsonObject object = new JsonObject();",
      "right" : "JsonObject object = new JsonObject();",
      "info" : "VariableDeclarationStatement[3527-3564]:VariableDeclarationStatement[3527-3564]"
    }, {
      "left" : "put(object);",
      "right" : "put(object);",
      "info" : "ExpressionStatement[3569-3581]:ExpressionStatement[3569-3581]"
    }, {
      "left" : "stack.add(object);",
      "right" : "stack.add(object);",
      "info" : "ExpressionStatement[3586-3604]:ExpressionStatement[3586-3604]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3609-3621]:ReturnStatement[3609-3621]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3629-3638]:MarkerAnnotation[3629-3638]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3639-3645]:Modifier[3639-3645]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[3646-3656]:SimpleType[3646-3656]"
    }, {
      "left" : "endObject",
      "right" : "endObject",
      "info" : "SimpleName[3657-3666]:SimpleName[3657-3666]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3676-3687]:SimpleType[3676-3687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3688-3967]:Block[3688-3967]"
    }, {
      "left" : "if (stack.isEmpty() || pendingName != null)",
      "right" : "if (stack.isEmpty() || pendingName != null)",
      "info" : "IfStatement[3694-3786]:IfStatement[3694-3786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3738-3786]:Block[3738-3786]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3746-3780]:ThrowStatement[3746-3780]"
    }, {
      "left" : "JsonElement element = peek();",
      "right" : "JsonElement element = peek();",
      "info" : "VariableDeclarationStatement[3791-3820]:VariableDeclarationStatement[3791-3820]"
    }, {
      "left" : "if (element instanceof JsonObject)",
      "right" : "if (element instanceof JsonObject)",
      "info" : "IfStatement[3825-3924]:IfStatement[3825-3924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3860-3924]:Block[3860-3924]"
    }, {
      "left" : "stack.remove(stack.size() - 1);",
      "right" : "stack.remove(stack.size() - 1);",
      "info" : "ExpressionStatement[3868-3899]:ExpressionStatement[3868-3899]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[3906-3918]:ReturnStatement[3906-3918]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3929-3963]:ThrowStatement[3929-3963]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3971-3980]:MarkerAnnotation[3971-3980]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3981-3987]:Modifier[3981-3987]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[3988-3998]:SimpleType[3988-3998]"
    }, {
      "left" : "name",
      "right" : "name",
      "info" : "SimpleName[3999-4003]:SimpleName[3999-4003]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[4004-4015]:SingleVariableDeclaration[4004-4015]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4024-4035]:SimpleType[4024-4035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4036-4303]:Block[4036-4303]"
    }, {
      "left" : "if (stack.isEmpty() || pendingName != null)",
      "right" : "if (stack.isEmpty() || pendingName != null)",
      "info" : "IfStatement[4042-4134]:IfStatement[4042-4134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4086-4134]:Block[4086-4134]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[4094-4128]:ThrowStatement[4094-4128]"
    }, {
      "left" : "JsonElement element = peek();",
      "right" : "JsonElement element = peek();",
      "info" : "VariableDeclarationStatement[4139-4168]:VariableDeclarationStatement[4139-4168]"
    }, {
      "left" : "if (element instanceof JsonObject)",
      "right" : "if (element instanceof JsonObject)",
      "info" : "IfStatement[4173-4260]:IfStatement[4173-4260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4208-4260]:Block[4208-4260]"
    }, {
      "left" : "pendingName = name;",
      "right" : "pendingName = name;",
      "info" : "ExpressionStatement[4216-4235]:ExpressionStatement[4216-4235]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4242-4254]:ReturnStatement[4242-4254]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[4265-4299]:ThrowStatement[4265-4299]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4307-4316]:MarkerAnnotation[4307-4316]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4317-4323]:Modifier[4317-4323]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[4324-4334]:SimpleType[4324-4334]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[4335-4340]:SimpleName[4335-4340]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[4341-4353]:SingleVariableDeclaration[4341-4353]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4362-4373]:SimpleType[4362-4373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4374-4488]:Block[4374-4488]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[4380-4432]:IfStatement[4380-4432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4399-4432]:Block[4399-4432]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[4407-4426]:ReturnStatement[4407-4426]"
    }, {
      "left" : "put(new JsonPrimitive(value));",
      "right" : "put(new JsonPrimitive(value));",
      "info" : "ExpressionStatement[4437-4467]:ExpressionStatement[4437-4467]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4472-4484]:ReturnStatement[4472-4484]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4492-4501]:MarkerAnnotation[4492-4501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4502-4508]:Modifier[4502-4508]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[4509-4519]:SimpleType[4509-4519]"
    }, {
      "left" : "nullValue",
      "right" : "nullValue",
      "info" : "SimpleName[4520-4529]:SimpleName[4520-4529]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4539-4550]:SimpleType[4539-4550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4551-4601]:Block[4551-4601]"
    }, {
      "left" : "put(JsonNull.INSTANCE);",
      "right" : "put(JsonNull.INSTANCE);",
      "info" : "ExpressionStatement[4557-4580]:ExpressionStatement[4557-4580]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4585-4597]:ReturnStatement[4585-4597]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4605-4614]:MarkerAnnotation[4605-4614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4615-4621]:Modifier[4615-4621]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[4622-4632]:SimpleType[4622-4632]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[4633-4638]:SimpleName[4633-4638]"
    }, {
      "left" : "boolean value",
      "right" : "boolean value",
      "info" : "SingleVariableDeclaration[4639-4652]:SingleVariableDeclaration[4639-4652]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4661-4672]:SimpleType[4661-4672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4673-4730]:Block[4673-4730]"
    }, {
      "left" : "put(new JsonPrimitive(value));",
      "right" : "put(new JsonPrimitive(value));",
      "info" : "ExpressionStatement[4679-4709]:ExpressionStatement[4679-4709]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[4714-4726]:ReturnStatement[4714-4726]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4735-4744]:MarkerAnnotation[4920-4929]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4745-4751]:Modifier[4930-4936]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[4752-4762]:SimpleType[4937-4947]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[4763-4768]:SimpleName[4948-4953]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[4769-4781]:SingleVariableDeclaration[4954-4966]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4790-4801]:SimpleType[4975-4986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4802-5029]:Block[4987-5214]"
    }, {
      "left" : "if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value)))",
      "right" : "if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value)))",
      "info" : "IfStatement[4808-4973]:IfStatement[4993-5158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4879-4973]:Block[5064-5158]"
    }, {
      "left" : "throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);",
      "right" : "throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);",
      "info" : "ThrowStatement[4887-4967]:ThrowStatement[5072-5152]"
    }, {
      "left" : "put(new JsonPrimitive(value));",
      "right" : "put(new JsonPrimitive(value));",
      "info" : "ExpressionStatement[4978-5008]:ExpressionStatement[5163-5193]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5013-5025]:ReturnStatement[5198-5210]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5033-5042]:MarkerAnnotation[5218-5227]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5043-5049]:Modifier[5228-5234]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[5050-5060]:SimpleType[5235-5245]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[5061-5066]:SimpleName[5246-5251]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[5067-5077]:SingleVariableDeclaration[5252-5262]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5086-5097]:SimpleType[5271-5282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5098-5155]:Block[5283-5340]"
    }, {
      "left" : "put(new JsonPrimitive(value));",
      "right" : "put(new JsonPrimitive(value));",
      "info" : "ExpressionStatement[5104-5134]:ExpressionStatement[5289-5319]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5139-5151]:ReturnStatement[5324-5336]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5159-5168]:MarkerAnnotation[5344-5353]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5169-5175]:Modifier[5354-5360]"
    }, {
      "left" : "JsonWriter",
      "right" : "JsonWriter",
      "info" : "SimpleType[5176-5186]:SimpleType[5361-5371]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[5187-5192]:SimpleName[5372-5377]"
    }, {
      "left" : "Number value",
      "right" : "Number value",
      "info" : "SingleVariableDeclaration[5193-5205]:SingleVariableDeclaration[5378-5390]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5214-5225]:SimpleType[5399-5410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5226-5560]:Block[5411-5745]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[5232-5284]:IfStatement[5417-5469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5251-5284]:Block[5436-5469]"
    }, {
      "left" : "return nullValue();",
      "right" : "return nullValue();",
      "info" : "ReturnStatement[5259-5278]:ReturnStatement[5444-5463]"
    }, {
      "left" : "if (!isLenient())",
      "right" : "if (!isLenient())",
      "info" : "IfStatement[5290-5503]:IfStatement[5475-5688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5308-5503]:Block[5493-5688]"
    }, {
      "left" : "double d = value.doubleValue();",
      "right" : "double d = value.doubleValue();",
      "info" : "VariableDeclarationStatement[5316-5347]:VariableDeclarationStatement[5501-5532]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[5354-5497]:IfStatement[5539-5682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5399-5497]:Block[5584-5682]"
    }, {
      "left" : "throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);",
      "right" : "throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);",
      "info" : "ThrowStatement[5409-5489]:ThrowStatement[5594-5674]"
    }, {
      "left" : "put(new JsonPrimitive(value));",
      "right" : "put(new JsonPrimitive(value));",
      "info" : "ExpressionStatement[5509-5539]:ExpressionStatement[5694-5724]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5544-5556]:ReturnStatement[5729-5741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5564-5573]:MarkerAnnotation[5749-5758]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5574-5580]:Modifier[5759-5765]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5581-5585]:PrimitiveType[5766-5770]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[5586-5591]:SimpleName[5771-5776]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5601-5612]:SimpleType[5786-5797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-5618]:Block[5798-5803]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5622-5631]:MarkerAnnotation[5807-5816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5632-5638]:Modifier[5817-5823]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5639-5643]:PrimitiveType[5824-5828]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[5644-5649]:SimpleName[5829-5834]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5659-5670]:SimpleType[5844-5855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5671-5794]:Block[5856-5979]"
    }, {
      "left" : "if (!stack.isEmpty())",
      "right" : "if (!stack.isEmpty())",
      "info" : "IfStatement[5677-5758]:IfStatement[5862-5943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5699-5758]:Block[5884-5943]"
    }, {
      "left" : "throw new IOException(\"Incomplete document\");",
      "right" : "throw new IOException(\"Incomplete document\");",
      "info" : "ThrowStatement[5707-5752]:ThrowStatement[5892-5937]"
    }, {
      "left" : "stack.add(SENTINEL_CLOSED);",
      "right" : "stack.add(SENTINEL_CLOSED);",
      "info" : "ExpressionStatement[5763-5790]:ExpressionStatement[5948-5975]"
    } ]
  },
  "interFileMappings" : {
    "Moved from File: gson_src_main_java_com_google_gson_internal_bind_TypeAdapters.java" : {
      "matchedElements" : [
 ],
      "mappings" : [
 {
        "left" : "if (value == null)",
        "right" : "if (value == null)",
        "info" : "IfStatement[5183-5252]:IfStatement[4808-4860]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[5202-5252]:Block[4827-4860]"
      }, {
        "left" : "return;",
        "right" : "return nullValue();",
        "info" : "ReturnStatement[5237-5244]:ReturnStatement[4835-4854]"
      } ]
    }
  }
}