{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String BZIP2 = \"bzip2\";",
      "right" : "public static final String BZIP2 = \"bzip2\";",
      "info" : "FieldDeclaration[3345-3505]:FieldDeclaration[3345-3505]"
    }, {
      "left" : "public static final String GZIP = \"gz\";",
      "right" : "public static final String GZIP = \"gz\";",
      "info" : "FieldDeclaration[3511-3713]:FieldDeclaration[3511-3713]"
    }, {
      "left" : "public static final String PACK200 = \"pack200\";",
      "right" : "public static final String PACK200 = \"pack200\";",
      "info" : "FieldDeclaration[3718-3884]:FieldDeclaration[3718-3884]"
    }, {
      "left" : "public static final String XZ = \"xz\";",
      "right" : "public static final String XZ = \"xz\";",
      "info" : "FieldDeclaration[3890-4038]:FieldDeclaration[3890-4038]"
    }, {
      "left" : "public static final String LZMA = \"lzma\";",
      "right" : "public static final String LZMA = \"lzma\";",
      "info" : "FieldDeclaration[4044-4245]:FieldDeclaration[4044-4245]"
    }, {
      "left" : "public static final String SNAPPY_FRAMED = \"snappy-framed\";",
      "right" : "public static final String SNAPPY_FRAMED = \"snappy-framed\";",
      "info" : "FieldDeclaration[4251-4481]:FieldDeclaration[4251-4481]"
    }, {
      "left" : "public static final String SNAPPY_RAW = \"snappy-raw\";",
      "right" : "public static final String SNAPPY_RAW = \"snappy-raw\";",
      "info" : "FieldDeclaration[4487-4708]:FieldDeclaration[4487-4708]"
    }, {
      "left" : "public static final String Z = \"z\";",
      "right" : "public static final String Z = \"z\";",
      "info" : "FieldDeclaration[4714-4918]:FieldDeclaration[4714-4918]"
    }, {
      "left" : "public static final String DEFLATE = \"deflate\";",
      "right" : "public static final String DEFLATE = \"deflate\";",
      "info" : "FieldDeclaration[4924-5084]:FieldDeclaration[4924-5084]"
    }, {
      "left" : "private final Boolean decompressUntilEOF;",
      "right" : "private final Boolean decompressUntilEOF;",
      "info" : "FieldDeclaration[5090-5327]:FieldDeclaration[5090-5327]"
    }, {
      "left" : "private volatile boolean decompressConcatenated = false;",
      "right" : "private volatile boolean decompressConcatenated = false;",
      "info" : "FieldDeclaration[5527-5780]:FieldDeclaration[5527-5780]"
    }, {
      "left" : "public CompressorStreamFactory()",
      "right" : "public CompressorStreamFactory()",
      "info" : "MethodDeclaration[5786-5964]:MethodDeclaration[5786-5964]"
    }, {
      "left" : "public CompressorStreamFactory(boolean decompressUntilEOF)",
      "right" : "public CompressorStreamFactory(boolean decompressUntilEOF)",
      "info" : "MethodDeclaration[5970-6771]:MethodDeclaration[5970-6771]"
    }, {
      "left" : "public void setDecompressConcatenated(boolean decompressConcatenated)",
      "right" : "public void setDecompressConcatenated(boolean decompressConcatenated)",
      "info" : "MethodDeclaration[6777-7910]:MethodDeclaration[6777-7910]"
    }, {
      "left" : "public CompressorInputStream createCompressorInputStream(final String name,\n            final InputStream in) throws CompressorException",
      "right" : "public CompressorInputStream createCompressorInputStream(final String name,\n            final InputStream in) throws CompressorException",
      "info" : "MethodDeclaration[10432-12730]:MethodDeclaration[10591-12889]"
    }, {
      "left" : "public CompressorOutputStream createCompressorOutputStream(\n            final String name, final OutputStream out)\n            throws CompressorException",
      "right" : "public CompressorOutputStream createCompressorOutputStream(\n            final String name, final OutputStream out)\n            throws CompressorException",
      "info" : "MethodDeclaration[12736-14421]:MethodDeclaration[12895-14580]"
    }, {
      "left" : "boolean getDecompressConcatenated()",
      "right" : "boolean getDecompressConcatenated()",
      "info" : "MethodDeclaration[14449-14531]:MethodDeclaration[14608-14690]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5882-5888]:Modifier[5882-5888]"
    }, {
      "left" : "CompressorStreamFactory",
      "right" : "CompressorStreamFactory",
      "info" : "SimpleName[5889-5912]:SimpleName[5889-5912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5915-5964]:Block[5915-5964]"
    }, {
      "left" : "this.decompressUntilEOF = null;",
      "right" : "this.decompressUntilEOF = null;",
      "info" : "ExpressionStatement[5925-5956]:ExpressionStatement[5925-5956]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6485-6491]:Modifier[6485-6491]"
    }, {
      "left" : "CompressorStreamFactory",
      "right" : "CompressorStreamFactory",
      "info" : "SimpleName[6492-6515]:SimpleName[6492-6515]"
    }, {
      "left" : "boolean decompressUntilEOF",
      "right" : "boolean decompressUntilEOF",
      "info" : "SingleVariableDeclaration[6516-6542]:SingleVariableDeclaration[6516-6542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6544-6771]:Block[6544-6771]"
    }, {
      "left" : "this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);",
      "right" : "this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);",
      "info" : "ExpressionStatement[6554-6616]:ExpressionStatement[6554-6616]"
    }, {
      "left" : "this.decompressConcatenated = decompressUntilEOF;",
      "right" : "this.decompressConcatenated = decompressUntilEOF;",
      "info" : "ExpressionStatement[6716-6765]:ExpressionStatement[6716-6765]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[7595-7606]:MarkerAnnotation[7595-7606]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7611-7617]:Modifier[7611-7617]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7618-7622]:PrimitiveType[7618-7622]"
    }, {
      "left" : "setDecompressConcatenated",
      "right" : "setDecompressConcatenated",
      "info" : "SimpleName[7623-7648]:SimpleName[7623-7648]"
    }, {
      "left" : "boolean decompressConcatenated",
      "right" : "boolean decompressConcatenated",
      "info" : "SingleVariableDeclaration[7649-7679]:SingleVariableDeclaration[7649-7679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7681-7910]:Block[7681-7910]"
    }, {
      "left" : "if (this.decompressUntilEOF != null)",
      "right" : "if (this.decompressUntilEOF != null)",
      "info" : "IfStatement[7691-7842]:IfStatement[7691-7842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7728-7842]:Block[7728-7842]"
    }, {
      "left" : "throw new IllegalStateException(\"Cannot override the setting defined by the constructor\");",
      "right" : "throw new IllegalStateException(\"Cannot override the setting defined by the constructor\");",
      "info" : "ThrowStatement[7742-7832]:ThrowStatement[7742-7832]"
    }, {
      "left" : "this.decompressConcatenated = decompressConcatenated;",
      "right" : "this.decompressConcatenated = decompressConcatenated;",
      "info" : "ExpressionStatement[7851-7904]:ExpressionStatement[7851-7904]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10988-10994]:Modifier[11147-11153]"
    }, {
      "left" : "CompressorInputStream",
      "right" : "CompressorInputStream",
      "info" : "SimpleType[10995-11016]:SimpleType[11154-11175]"
    }, {
      "left" : "createCompressorInputStream",
      "right" : "createCompressorInputStream",
      "info" : "SimpleName[11017-11044]:SimpleName[11176-11203]"
    }, {
      "left" : "final String name",
      "right" : "final String name",
      "info" : "SingleVariableDeclaration[11045-11062]:SingleVariableDeclaration[11204-11221]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[11076-11096]:SingleVariableDeclaration[11235-11255]"
    }, {
      "left" : "CompressorException",
      "right" : "CompressorException",
      "info" : "SimpleType[11105-11124]:SimpleType[11264-11283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11125-12730]:Block[11284-12889]"
    }, {
      "left" : "if (name == null || in == null)",
      "right" : "if (name == null || in == null)",
      "info" : "IfStatement[11135-11295]:IfStatement[11294-11454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11167-11295]:Block[11326-11454]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "info" : "ThrowStatement[11181-11285]:ThrowStatement[11340-11444]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11305-12646]:TryStatement[11464-12805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11309-12502]:Block[11468-12661]"
    }, {
      "left" : "if (GZIP.equalsIgnoreCase(name))",
      "right" : "if (GZIP.equalsIgnoreCase(name))",
      "info" : "IfStatement[11324-11454]:IfStatement[11483-11613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11357-11454]:Block[11516-11613]"
    }, {
      "left" : "return new GzipCompressorInputStream(in, decompressConcatenated);",
      "right" : "return new GzipCompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[11375-11440]:ReturnStatement[11534-11599]"
    }, {
      "left" : "if (BZIP2.equalsIgnoreCase(name))",
      "right" : "if (BZIP2.equalsIgnoreCase(name))",
      "info" : "IfStatement[11468-11600]:IfStatement[11627-11759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11502-11600]:Block[11661-11759]"
    }, {
      "left" : "return new BZip2CompressorInputStream(in, decompressConcatenated);",
      "right" : "return new BZip2CompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[11520-11586]:ReturnStatement[11679-11745]"
    }, {
      "left" : "if (XZ.equalsIgnoreCase(name))",
      "right" : "if (XZ.equalsIgnoreCase(name))",
      "info" : "IfStatement[11614-11740]:IfStatement[11773-11899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11645-11740]:Block[11804-11899]"
    }, {
      "left" : "return new XZCompressorInputStream(in, decompressConcatenated);",
      "right" : "return new XZCompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[11663-11726]:ReturnStatement[11822-11885]"
    }, {
      "left" : "if (LZMA.equalsIgnoreCase(name))",
      "right" : "if (LZMA.equalsIgnoreCase(name))",
      "info" : "IfStatement[11754-11860]:IfStatement[11913-12019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11787-11860]:Block[11946-12019]"
    }, {
      "left" : "return new LZMACompressorInputStream(in);",
      "right" : "return new LZMACompressorInputStream(in);",
      "info" : "ReturnStatement[11805-11846]:ReturnStatement[11964-12005]"
    }, {
      "left" : "if (PACK200.equalsIgnoreCase(name))",
      "right" : "if (PACK200.equalsIgnoreCase(name))",
      "info" : "IfStatement[11874-11986]:IfStatement[12033-12145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11910-11986]:Block[12069-12145]"
    }, {
      "left" : "return new Pack200CompressorInputStream(in);",
      "right" : "return new Pack200CompressorInputStream(in);",
      "info" : "ReturnStatement[11928-11972]:ReturnStatement[12087-12131]"
    }, {
      "left" : "if (SNAPPY_RAW.equalsIgnoreCase(name))",
      "right" : "if (SNAPPY_RAW.equalsIgnoreCase(name))",
      "info" : "IfStatement[12000-12114]:IfStatement[12159-12273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12039-12114]:Block[12198-12273]"
    }, {
      "left" : "return new SnappyCompressorInputStream(in);",
      "right" : "return new SnappyCompressorInputStream(in);",
      "info" : "ReturnStatement[12057-12100]:ReturnStatement[12216-12259]"
    }, {
      "left" : "if (SNAPPY_FRAMED.equalsIgnoreCase(name))",
      "right" : "if (SNAPPY_FRAMED.equalsIgnoreCase(name))",
      "info" : "IfStatement[12128-12251]:IfStatement[12287-12410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12170-12251]:Block[12329-12410]"
    }, {
      "left" : "return new FramedSnappyCompressorInputStream(in);",
      "right" : "return new FramedSnappyCompressorInputStream(in);",
      "info" : "ReturnStatement[12188-12237]:ReturnStatement[12347-12396]"
    }, {
      "left" : "if (Z.equalsIgnoreCase(name))",
      "right" : "if (Z.equalsIgnoreCase(name))",
      "info" : "IfStatement[12265-12365]:IfStatement[12424-12524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12295-12365]:Block[12454-12524]"
    }, {
      "left" : "return new ZCompressorInputStream(in);",
      "right" : "return new ZCompressorInputStream(in);",
      "info" : "ReturnStatement[12313-12351]:ReturnStatement[12472-12510]"
    }, {
      "left" : "if (DEFLATE.equalsIgnoreCase(name))",
      "right" : "if (DEFLATE.equalsIgnoreCase(name))",
      "info" : "IfStatement[12379-12491]:IfStatement[12538-12650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12415-12491]:Block[12574-12650]"
    }, {
      "left" : "return new DeflateCompressorInputStream(in);",
      "right" : "return new DeflateCompressorInputStream(in);",
      "info" : "ReturnStatement[12433-12477]:ReturnStatement[12592-12636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12525-12646]:Block[12684-12805]"
    }, {
      "left" : "throw new CompressorException(\n                    \"Could not create CompressorInputStream.\", e);",
      "right" : "throw new CompressorException(\n                    \"Could not create CompressorInputStream.\", e);",
      "info" : "ThrowStatement[12539-12636]:ThrowStatement[12698-12795]"
    }, {
      "left" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "right" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "info" : "ThrowStatement[12655-12724]:ThrowStatement[12814-12883]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13222-13228]:Modifier[13381-13387]"
    }, {
      "left" : "CompressorOutputStream",
      "right" : "CompressorOutputStream",
      "info" : "SimpleType[13229-13251]:SimpleType[13388-13410]"
    }, {
      "left" : "createCompressorOutputStream",
      "right" : "createCompressorOutputStream",
      "info" : "SimpleName[13252-13280]:SimpleName[13411-13439]"
    }, {
      "left" : "final String name",
      "right" : "final String name",
      "info" : "SingleVariableDeclaration[13294-13311]:SingleVariableDeclaration[13453-13470]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[13313-13335]:SingleVariableDeclaration[13472-13494]"
    }, {
      "left" : "CompressorException",
      "right" : "CompressorException",
      "info" : "SimpleType[13356-13375]:SimpleType[13515-13534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13376-14421]:Block[13535-14580]"
    }, {
      "left" : "if (name == null || out == null)",
      "right" : "if (name == null || out == null)",
      "info" : "IfStatement[13386-13547]:IfStatement[13545-13706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13419-13547]:Block[13578-13706]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "info" : "ThrowStatement[13433-13537]:ThrowStatement[13592-13696]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13557-14337]:TryStatement[13716-14496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13561-14193]:Block[13720-14352]"
    }, {
      "left" : "if (GZIP.equalsIgnoreCase(name))",
      "right" : "if (GZIP.equalsIgnoreCase(name))",
      "info" : "IfStatement[13576-13684]:IfStatement[13735-13843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13609-13684]:Block[13768-13843]"
    }, {
      "left" : "return new GzipCompressorOutputStream(out);",
      "right" : "return new GzipCompressorOutputStream(out);",
      "info" : "ReturnStatement[13627-13670]:ReturnStatement[13786-13829]"
    }, {
      "left" : "if (BZIP2.equalsIgnoreCase(name))",
      "right" : "if (BZIP2.equalsIgnoreCase(name))",
      "info" : "IfStatement[13698-13808]:IfStatement[13857-13967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-13808]:Block[13891-13967]"
    }, {
      "left" : "return new BZip2CompressorOutputStream(out);",
      "right" : "return new BZip2CompressorOutputStream(out);",
      "info" : "ReturnStatement[13750-13794]:ReturnStatement[13909-13953]"
    }, {
      "left" : "if (XZ.equalsIgnoreCase(name))",
      "right" : "if (XZ.equalsIgnoreCase(name))",
      "info" : "IfStatement[13822-13926]:IfStatement[13981-14085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13853-13926]:Block[14012-14085]"
    }, {
      "left" : "return new XZCompressorOutputStream(out);",
      "right" : "return new XZCompressorOutputStream(out);",
      "info" : "ReturnStatement[13871-13912]:ReturnStatement[14030-14071]"
    }, {
      "left" : "if (PACK200.equalsIgnoreCase(name))",
      "right" : "if (PACK200.equalsIgnoreCase(name))",
      "info" : "IfStatement[13940-14054]:IfStatement[14099-14213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13976-14054]:Block[14135-14213]"
    }, {
      "left" : "return new Pack200CompressorOutputStream(out);",
      "right" : "return new Pack200CompressorOutputStream(out);",
      "info" : "ReturnStatement[13994-14040]:ReturnStatement[14153-14199]"
    }, {
      "left" : "if (DEFLATE.equalsIgnoreCase(name))",
      "right" : "if (DEFLATE.equalsIgnoreCase(name))",
      "info" : "IfStatement[14068-14182]:IfStatement[14227-14341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14104-14182]:Block[14263-14341]"
    }, {
      "left" : "return new DeflateCompressorOutputStream(out);",
      "right" : "return new DeflateCompressorOutputStream(out);",
      "info" : "ReturnStatement[14122-14168]:ReturnStatement[14281-14327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14216-14337]:Block[14375-14496]"
    }, {
      "left" : "throw new CompressorException(\n                    \"Could not create CompressorOutputStream\", e);",
      "right" : "throw new CompressorException(\n                    \"Could not create CompressorOutputStream\", e);",
      "info" : "ThrowStatement[14230-14327]:ThrowStatement[14389-14486]"
    }, {
      "left" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "right" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "info" : "ThrowStatement[14346-14415]:ThrowStatement[14505-14574]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14449-14456]:PrimitiveType[14608-14615]"
    }, {
      "left" : "getDecompressConcatenated",
      "right" : "getDecompressConcatenated",
      "info" : "SimpleName[14457-14482]:SimpleName[14616-14641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14485-14531]:Block[14644-14690]"
    }, {
      "left" : "return decompressConcatenated;",
      "right" : "return decompressConcatenated;",
      "info" : "ReturnStatement[14495-14525]:ReturnStatement[14654-14684]"
    } ]
  },
  "interFileMappings" : { }
}