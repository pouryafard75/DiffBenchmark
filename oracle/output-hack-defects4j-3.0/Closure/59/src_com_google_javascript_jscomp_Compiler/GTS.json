{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "TypeDeclaration[2156-60994]:TypeDeclaration[2156-61053]"
    }, {
      "left" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "right" : "static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
      "info" : "FieldDeclaration[2702-2918]:FieldDeclaration[2702-2918]"
    }, {
      "left" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "right" : "static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
      "info" : "FieldDeclaration[2922-3080]:FieldDeclaration[2922-3080]"
    }, {
      "left" : "CompilerOptions options = null;",
      "right" : "CompilerOptions options = null;",
      "info" : "FieldDeclaration[3084-3115]:FieldDeclaration[3084-3115]"
    }, {
      "left" : "private PassConfig passes = null;",
      "right" : "private PassConfig passes = null;",
      "info" : "FieldDeclaration[3119-3152]:FieldDeclaration[3119-3152]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[3180-3216]:FieldDeclaration[3180-3216]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[3247-3278]:FieldDeclaration[3247-3278]"
    }, {
      "left" : "private JSModuleGraph moduleGraph;",
      "right" : "private JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[3432-3466]:FieldDeclaration[3432-3466]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[3496-3531]:FieldDeclaration[3496-3531]"
    }, {
      "left" : "private ErrorManager errorManager;",
      "right" : "private ErrorManager errorManager;",
      "info" : "FieldDeclaration[3593-3627]:FieldDeclaration[3593-3627]"
    }, {
      "left" : "private WarningsGuard warningsGuard;",
      "right" : "private WarningsGuard warningsGuard;",
      "info" : "FieldDeclaration[3675-3711]:FieldDeclaration[3675-3711]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[3742-3759]:FieldDeclaration[3742-3759]"
    }, {
      "left" : "Node jsRoot;",
      "right" : "Node jsRoot;",
      "info" : "FieldDeclaration[3762-3774]:FieldDeclaration[3762-3774]"
    }, {
      "left" : "Node externAndJsRoot;",
      "right" : "Node externAndJsRoot;",
      "info" : "FieldDeclaration[3777-3798]:FieldDeclaration[3777-3798]"
    }, {
      "left" : "private Map<String, CompilerInput> inputsByName;",
      "right" : "private Map<String, CompilerInput> inputsByName;",
      "info" : "FieldDeclaration[3802-3850]:FieldDeclaration[3802-3850]"
    }, {
      "left" : "private SourceMap sourceMap;",
      "right" : "private SourceMap sourceMap;",
      "info" : "FieldDeclaration[3854-3911]:FieldDeclaration[3854-3911]"
    }, {
      "left" : "private String externExports = null;",
      "right" : "private String externExports = null;",
      "info" : "FieldDeclaration[3915-3999]:FieldDeclaration[3915-3999]"
    }, {
      "left" : "private int uniqueNameId = 0;",
      "right" : "private int uniqueNameId = 0;",
      "info" : "FieldDeclaration[4003-4123]:FieldDeclaration[4003-4123]"
    }, {
      "left" : "private boolean useThreads = true;",
      "right" : "private boolean useThreads = true;",
      "info" : "FieldDeclaration[4127-4194]:FieldDeclaration[4127-4194]"
    }, {
      "left" : "private boolean hasRegExpGlobalReferences = true;",
      "right" : "private boolean hasRegExpGlobalReferences = true;",
      "info" : "FieldDeclaration[4198-4348]:FieldDeclaration[4198-4348]"
    }, {
      "left" : "private FunctionInformationMap functionInformationMap;",
      "right" : "private FunctionInformationMap functionInformationMap;",
      "info" : "FieldDeclaration[4352-4444]:FieldDeclaration[4352-4444]"
    }, {
      "left" : "private final StringBuilder debugLog = new StringBuilder();",
      "right" : "private final StringBuilder debugLog = new StringBuilder();",
      "info" : "FieldDeclaration[4448-4538]:FieldDeclaration[4448-4538]"
    }, {
      "left" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "right" : "CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
      "info" : "FieldDeclaration[4542-4668]:FieldDeclaration[4542-4668]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[4672-4708]:FieldDeclaration[4672-4708]"
    }, {
      "left" : "private Config parserConfig = null;",
      "right" : "private Config parserConfig = null;",
      "info" : "FieldDeclaration[4711-4746]:FieldDeclaration[4711-4746]"
    }, {
      "left" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "right" : "private ReverseAbstractInterpreter abstractInterpreter;",
      "info" : "FieldDeclaration[4750-4805]:FieldDeclaration[4750-4805]"
    }, {
      "left" : "private TypeValidator typeValidator;",
      "right" : "private TypeValidator typeValidator;",
      "info" : "FieldDeclaration[4808-4844]:FieldDeclaration[4808-4844]"
    }, {
      "left" : "public PerformanceTracker tracker;",
      "right" : "public PerformanceTracker tracker;",
      "info" : "FieldDeclaration[4848-4882]:FieldDeclaration[4848-4882]"
    }, {
      "left" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "right" : "private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
      "info" : "FieldDeclaration[4965-5083]:FieldDeclaration[4965-5083]"
    }, {
      "left" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "right" : "private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
      "info" : "FieldDeclaration[5161-5255]:FieldDeclaration[5161-5255]"
    }, {
      "left" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "right" : "public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
      "info" : "FieldDeclaration[5259-5483]:FieldDeclaration[5259-5483]"
    }, {
      "left" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "right" : "public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
      "info" : "FieldDeclaration[5486-5665]:FieldDeclaration[5486-5665]"
    }, {
      "left" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "right" : "private static final long COMPILER_STACK_SIZE = 1048576L;",
      "info" : "FieldDeclaration[5669-5726]:FieldDeclaration[5669-5726]"
    }, {
      "left" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "right" : "private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
      "info" : "FieldDeclaration[5731-6006]:FieldDeclaration[5731-6006]"
    }, {
      "left" : "private final PrintStream outStream;",
      "right" : "private final PrintStream outStream;",
      "info" : "FieldDeclaration[6010-6046]:FieldDeclaration[6010-6046]"
    }, {
      "left" : "private GlobalVarReferenceMap globalRefMap = null;",
      "right" : "private GlobalVarReferenceMap globalRefMap = null;",
      "info" : "FieldDeclaration[6050-6100]:FieldDeclaration[6050-6100]"
    }, {
      "left" : "public Compiler()",
      "right" : "public Compiler()",
      "info" : "MethodDeclaration[6104-6241]:MethodDeclaration[6104-6241]"
    }, {
      "left" : "public Compiler(PrintStream stream)",
      "right" : "public Compiler(PrintStream stream)",
      "info" : "MethodDeclaration[6245-6441]:MethodDeclaration[6245-6441]"
    }, {
      "left" : "public Compiler(ErrorManager errorManager)",
      "right" : "public Compiler(ErrorManager errorManager)",
      "info" : "MethodDeclaration[6445-6610]:MethodDeclaration[6445-6610]"
    }, {
      "left" : "public void setErrorManager(ErrorManager errorManager)",
      "right" : "public void setErrorManager(ErrorManager errorManager)",
      "info" : "MethodDeclaration[6614-6919]:MethodDeclaration[6614-6919]"
    }, {
      "left" : "private MessageFormatter createMessageFormatter()",
      "right" : "private MessageFormatter createMessageFormatter()",
      "info" : "MethodDeclaration[6923-7212]:MethodDeclaration[6923-7212]"
    }, {
      "left" : "public void initOptions(CompilerOptions options)",
      "right" : "public void initOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[7216-9655]:MethodDeclaration[7216-9714]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[9659-9945]:MethodDeclaration[9718-10004]"
    }, {
      "left" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "right" : "public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[9949-10317]:MethodDeclaration[10008-10376]"
    }, {
      "left" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "right" : "public void init(JSSourceFile[] externs, JSModule[] modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10321-10644]:MethodDeclaration[10380-10703]"
    }, {
      "left" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "right" : "public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[10648-11726]:MethodDeclaration[10707-11785]"
    }, {
      "left" : "private void initBasedOnOptions()",
      "right" : "private void initBasedOnOptions()",
      "info" : "MethodDeclaration[11730-12074]:MethodDeclaration[11789-12133]"
    }, {
      "left" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "right" : "private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern)",
      "info" : "MethodDeclaration[12078-12351]:MethodDeclaration[12137-12410]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "right" : "private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
      "info" : "FieldDeclaration[12355-12525]:FieldDeclaration[12414-12584]"
    }, {
      "left" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "right" : "private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
      "info" : "FieldDeclaration[12529-12724]:FieldDeclaration[12588-12783]"
    }, {
      "left" : "private void checkFirstModule(List<JSModule> modules)",
      "right" : "private void checkFirstModule(List<JSModule> modules)",
      "info" : "MethodDeclaration[12728-13247]:MethodDeclaration[12787-13306]"
    }, {
      "left" : "private static void fillEmptyModules(List<JSModule> modules)",
      "right" : "private static void fillEmptyModules(List<JSModule> modules)",
      "info" : "MethodDeclaration[13251-13600]:MethodDeclaration[13310-13659]"
    }, {
      "left" : "public void rebuildInputsFromModules()",
      "right" : "public void rebuildInputsFromModules()",
      "info" : "MethodDeclaration[13604-13964]:MethodDeclaration[13663-14023]"
    }, {
      "left" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "right" : "private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules)",
      "info" : "MethodDeclaration[13968-14697]:MethodDeclaration[14027-14756]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
      "info" : "FieldDeclaration[14701-14821]:FieldDeclaration[14760-14880]"
    }, {
      "left" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "right" : "static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
      "info" : "FieldDeclaration[14824-14975]:FieldDeclaration[14883-15034]"
    }, {
      "left" : "void initInputsByNameMap()",
      "right" : "void initInputsByNameMap()",
      "info" : "MethodDeclaration[14979-15676]:MethodDeclaration[15038-15735]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
      "info" : "MethodDeclaration[15680-15848]:MethodDeclaration[15739-15907]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options)",
      "info" : "MethodDeclaration[15852-16022]:MethodDeclaration[15911-16081]"
    }, {
      "left" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "right" : "public Result compile(\n      JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
      "info" : "MethodDeclaration[16026-16196]:MethodDeclaration[16085-16255]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSSourceFile[] inputs,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[16200-16521]:MethodDeclaration[16259-16580]"
    }, {
      "left" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "right" : "public Result compile(List<JSSourceFile> externs,\n      List<JSSourceFile> inputs, CompilerOptions options)",
      "info" : "MethodDeclaration[16525-17060]:MethodDeclaration[16584-17119]"
    }, {
      "left" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "right" : "public Result compile(JSSourceFile[] externs,\n                        JSModule[] modules,\n                        CompilerOptions options)",
      "info" : "MethodDeclaration[17064-17387]:MethodDeclaration[17123-17446]"
    }, {
      "left" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "right" : "public Result compileModules(List<JSSourceFile> externs,\n      List<JSModule> modules, CompilerOptions options)",
      "info" : "MethodDeclaration[17391-17939]:MethodDeclaration[17450-17998]"
    }, {
      "left" : "private Result compile()",
      "right" : "private Result compile()",
      "info" : "MethodDeclaration[17943-18146]:MethodDeclaration[18002-18205]"
    }, {
      "left" : "public Result call() throws Exception",
      "right" : "public Result call() throws Exception",
      "info" : "MethodDeclaration[18032-18134]:MethodDeclaration[18091-18193]"
    }, {
      "left" : "public void disableThreads()",
      "right" : "public void disableThreads()",
      "info" : "MethodDeclaration[18150-18313]:MethodDeclaration[18209-18372]"
    }, {
      "left" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "right" : "private <T> T runInCompilerThread(final Callable<T> callable)",
      "info" : "MethodDeclaration[18317-18453]:MethodDeclaration[18376-18512]"
    }, {
      "left" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "right" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
      "info" : "MethodDeclaration[18457-18576]:MethodDeclaration[18516-18635]"
    }, {
      "left" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "right" : "static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
      "info" : "MethodDeclaration[18580-20159]:MethodDeclaration[18639-20218]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[19286-19643]:MethodDeclaration[19345-19702]"
    }, {
      "left" : "private void compileInternal()",
      "right" : "private void compileInternal()",
      "info" : "MethodDeclaration[20163-20991]:MethodDeclaration[20222-21050]"
    }, {
      "left" : "public void parse()",
      "right" : "public void parse()",
      "info" : "MethodDeclaration[20995-21039]:MethodDeclaration[21054-21098]"
    }, {
      "left" : "PassConfig getPassConfig()",
      "right" : "PassConfig getPassConfig()",
      "info" : "MethodDeclaration[21043-21169]:MethodDeclaration[21102-21228]"
    }, {
      "left" : "PassConfig createPassConfigInternal()",
      "right" : "PassConfig createPassConfigInternal()",
      "info" : "MethodDeclaration[21173-21368]:MethodDeclaration[21232-21427]"
    }, {
      "left" : "public void setPassConfig(PassConfig passes)",
      "right" : "public void setPassConfig(PassConfig passes)",
      "info" : "MethodDeclaration[21372-22116]:MethodDeclaration[21431-22175]"
    }, {
      "left" : "boolean precheck()",
      "right" : "boolean precheck()",
      "info" : "MethodDeclaration[22120-22356]:MethodDeclaration[22179-22415]"
    }, {
      "left" : "public void check()",
      "right" : "public void check()",
      "info" : "MethodDeclaration[22360-23436]:MethodDeclaration[22419-23495]"
    }, {
      "left" : "private void externExports()",
      "right" : "private void externExports()",
      "info" : "MethodDeclaration[23440-23702]:MethodDeclaration[23499-23761]"
    }, {
      "left" : "void process(CompilerPass p)",
      "right" : "void process(CompilerPass p)",
      "info" : "MethodDeclaration[23706-23788]:MethodDeclaration[23765-23847]"
    }, {
      "left" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "right" : "private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
      "info" : "FieldDeclaration[23792-24013]:FieldDeclaration[23851-24072]"
    }, {
      "left" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "right" : "protected CompilerPass createInternal(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[23882-24008]:MethodDeclaration[23941-24067]"
    }, {
      "left" : "private void maybeSanityCheck()",
      "right" : "private void maybeSanityCheck()",
      "info" : "MethodDeclaration[24017-24133]:MethodDeclaration[24076-24192]"
    }, {
      "left" : "private void runSanityCheck()",
      "right" : "private void runSanityCheck()",
      "info" : "MethodDeclaration[24137-24231]:MethodDeclaration[24196-24290]"
    }, {
      "left" : "void removeTryCatchFinally()",
      "right" : "void removeTryCatchFinally()",
      "info" : "MethodDeclaration[24235-24510]:MethodDeclaration[24294-24569]"
    }, {
      "left" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "right" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
      "info" : "MethodDeclaration[24514-25095]:MethodDeclaration[24573-25154]"
    }, {
      "left" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "right" : "private void runCustomPasses(CustomPassExecutionTime executionTime)",
      "info" : "MethodDeclaration[25099-25535]:MethodDeclaration[25158-25594]"
    }, {
      "left" : "private Tracer currentTracer = null;",
      "right" : "private Tracer currentTracer = null;",
      "info" : "FieldDeclaration[25539-25575]:FieldDeclaration[25598-25634]"
    }, {
      "left" : "private String currentPassName = null;",
      "right" : "private String currentPassName = null;",
      "info" : "FieldDeclaration[25578-25616]:FieldDeclaration[25637-25675]"
    }, {
      "left" : "void startPass(String passName)",
      "right" : "void startPass(String passName)",
      "info" : "MethodDeclaration[25620-25831]:MethodDeclaration[25679-25890]"
    }, {
      "left" : "void endPass()",
      "right" : "void endPass()",
      "info" : "MethodDeclaration[25835-26178]:MethodDeclaration[25894-26237]"
    }, {
      "left" : "Tracer newTracer(String passName)",
      "right" : "Tracer newTracer(String passName)",
      "info" : "MethodDeclaration[26182-26515]:MethodDeclaration[26241-26574]"
    }, {
      "left" : "void stopTracer(Tracer t, String passName)",
      "right" : "void stopTracer(Tracer t, String passName)",
      "info" : "MethodDeclaration[26519-26682]:MethodDeclaration[26578-26741]"
    }, {
      "left" : "public Result getResult()",
      "right" : "public Result getResult()",
      "info" : "MethodDeclaration[26686-27113]:MethodDeclaration[26745-27172]"
    }, {
      "left" : "public JSError[] getMessages()",
      "right" : "public JSError[] getMessages()",
      "info" : "MethodDeclaration[27117-27257]:MethodDeclaration[27176-27316]"
    }, {
      "left" : "public JSError[] getErrors()",
      "right" : "public JSError[] getErrors()",
      "info" : "MethodDeclaration[27261-27391]:MethodDeclaration[27320-27450]"
    }, {
      "left" : "public JSError[] getWarnings()",
      "right" : "public JSError[] getWarnings()",
      "info" : "MethodDeclaration[27395-27531]:MethodDeclaration[27454-27590]"
    }, {
      "left" : "public Node getRoot()",
      "right" : "public Node getRoot()",
      "info" : "MethodDeclaration[27535-27602]:MethodDeclaration[27594-27661]"
    }, {
      "left" : "private int nextUniqueNameId()",
      "right" : "private int nextUniqueNameId()",
      "info" : "MethodDeclaration[27606-27728]:MethodDeclaration[27665-27787]"
    }, {
      "left" : "void resetUniqueNameId()",
      "right" : "void resetUniqueNameId()",
      "info" : "MethodDeclaration[27732-27856]:MethodDeclaration[27791-27915]"
    }, {
      "left" : "Supplier<String> getUniqueNameIdSupplier()",
      "right" : "Supplier<String> getUniqueNameIdSupplier()",
      "info" : "MethodDeclaration[27860-28087]:MethodDeclaration[27919-28146]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[27991-28076]:MethodDeclaration[28050-28135]"
    }, {
      "left" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "right" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
      "info" : "MethodDeclaration[28091-28454]:MethodDeclaration[28150-28513]"
    }, {
      "left" : "public CompilerInput getInput(String name)",
      "right" : "public CompilerInput getInput(String name)",
      "info" : "MethodDeclaration[28765-28860]:MethodDeclaration[28824-28919]"
    }, {
      "left" : "protected void removeExternInput(String name)",
      "right" : "protected void removeExternInput(String name)",
      "info" : "MethodDeclaration[28864-29362]:MethodDeclaration[28923-29421]"
    }, {
      "left" : "public CompilerInput newExternInput(String name)",
      "right" : "public CompilerInput newExternInput(String name)",
      "info" : "MethodDeclaration[29366-29800]:MethodDeclaration[29425-29859]"
    }, {
      "left" : "void addIncrementalSourceAst(JsAst ast)",
      "right" : "void addIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[29804-30159]:MethodDeclaration[29863-30218]"
    }, {
      "left" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "right" : "boolean replaceIncrementalSourceAst(JsAst ast)",
      "info" : "MethodDeclaration[30163-31254]:MethodDeclaration[30222-31313]"
    }, {
      "left" : "JSModuleGraph getModuleGraph()",
      "right" : "JSModuleGraph getModuleGraph()",
      "info" : "MethodDeclaration[31258-31330]:MethodDeclaration[31317-31389]"
    }, {
      "left" : "public JSTypeRegistry getTypeRegistry()",
      "right" : "public JSTypeRegistry getTypeRegistry()",
      "info" : "MethodDeclaration[31334-31533]:MethodDeclaration[31393-31592]"
    }, {
      "left" : "MemoizedScopeCreator getTypedScopeCreator()",
      "right" : "MemoizedScopeCreator getTypedScopeCreator()",
      "info" : "MethodDeclaration[31537-31649]:MethodDeclaration[31596-31708]"
    }, {
      "left" : "DefaultPassConfig ensureDefaultPassConfig()",
      "right" : "DefaultPassConfig ensureDefaultPassConfig()",
      "info" : "MethodDeclaration[31653-31975]:MethodDeclaration[31712-32034]"
    }, {
      "left" : "SymbolTable buildKnownSymbolTable()",
      "right" : "SymbolTable buildKnownSymbolTable()",
      "info" : "MethodDeclaration[31979-32447]:MethodDeclaration[32038-32506]"
    }, {
      "left" : "public Scope getTopScope()",
      "right" : "public Scope getTopScope()",
      "info" : "MethodDeclaration[32451-32537]:MethodDeclaration[32510-32596]"
    }, {
      "left" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "right" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
      "info" : "MethodDeclaration[32541-33106]:MethodDeclaration[32600-33165]"
    }, {
      "left" : "TypeValidator getTypeValidator()",
      "right" : "TypeValidator getTypeValidator()",
      "info" : "MethodDeclaration[33110-33272]:MethodDeclaration[33169-33331]"
    }, {
      "left" : "Node parseInputs()",
      "right" : "Node parseInputs()",
      "info" : "MethodDeclaration[33444-37730]:MethodDeclaration[33503-37789]"
    }, {
      "left" : "public Node parse(JSSourceFile file)",
      "right" : "public Node parse(JSSourceFile file)",
      "info" : "MethodDeclaration[37734-37906]:MethodDeclaration[37793-37965]"
    }, {
      "left" : "Node parseSyntheticCode(String js)",
      "right" : "Node parseSyntheticCode(String js)",
      "info" : "MethodDeclaration[37910-38141]:MethodDeclaration[37969-38200]"
    }, {
      "left" : "void initCompilerOptionsIfTesting()",
      "right" : "void initCompilerOptionsIfTesting()",
      "info" : "MethodDeclaration[38145-38365]:MethodDeclaration[38204-38424]"
    }, {
      "left" : "Node parseSyntheticCode(String fileName, String js)",
      "right" : "Node parseSyntheticCode(String fileName, String js)",
      "info" : "MethodDeclaration[38369-38529]:MethodDeclaration[38428-38588]"
    }, {
      "left" : "Node parseTestCode(String js)",
      "right" : "Node parseTestCode(String js)",
      "info" : "MethodDeclaration[38533-38872]:MethodDeclaration[38592-38931]"
    }, {
      "left" : "ErrorReporter getDefaultErrorReporter()",
      "right" : "ErrorReporter getDefaultErrorReporter()",
      "info" : "MethodDeclaration[38876-38966]:MethodDeclaration[38935-39025]"
    }, {
      "left" : "public String toSource()",
      "right" : "public String toSource()",
      "info" : "MethodDeclaration[39158-39856]:MethodDeclaration[39217-39915]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[39310-39844]:MethodDeclaration[39369-39903]"
    }, {
      "left" : "public String[] toSourceArray()",
      "right" : "public String[] toSourceArray()",
      "info" : "MethodDeclaration[39860-40636]:MethodDeclaration[39919-40695]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[40031-40624]:MethodDeclaration[40090-40683]"
    }, {
      "left" : "public String toSource(final JSModule module)",
      "right" : "public String toSource(final JSModule module)",
      "info" : "MethodDeclaration[40640-41423]:MethodDeclaration[40699-41482]"
    }, {
      "left" : "public String call() throws Exception",
      "right" : "public String call() throws Exception",
      "info" : "MethodDeclaration[40821-41411]:MethodDeclaration[40880-41470]"
    }, {
      "left" : "public String[] toSourceArray(final JSModule module)",
      "right" : "public String[] toSourceArray(final JSModule module)",
      "info" : "MethodDeclaration[41428-42366]:MethodDeclaration[41487-42425]"
    }, {
      "left" : "public String[] call() throws Exception",
      "right" : "public String[] call() throws Exception",
      "info" : "MethodDeclaration[41632-42354]:MethodDeclaration[41691-42413]"
    }, {
      "left" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "right" : "public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root)",
      "info" : "MethodDeclaration[42370-45042]:MethodDeclaration[42429-45101]"
    }, {
      "left" : "public Void call() throws Exception",
      "right" : "public Void call() throws Exception",
      "info" : "MethodDeclaration[42907-45030]:MethodDeclaration[42966-45089]"
    }, {
      "left" : "String toSource(Node n)",
      "right" : "String toSource(Node n)",
      "info" : "MethodDeclaration[45046-45260]:MethodDeclaration[45105-45319]"
    }, {
      "left" : "private String toSource(Node n, SourceMap sourceMap, boolean firstOutput)",
      "right" : "private String toSource(Node n, SourceMap sourceMap, boolean firstOutput)",
      "info" : "MethodDeclaration[45264-46020]:MethodDeclaration[45323-46079]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "TypeDeclaration[46024-47769]:TypeDeclaration[46083-47828]"
    }, {
      "left" : "private final StringBuilder sb = new StringBuilder();",
      "right" : "private final StringBuilder sb = new StringBuilder();",
      "info" : "FieldDeclaration[46221-46274]:FieldDeclaration[46280-46333]"
    }, {
      "left" : "private int lineCount = 0;",
      "right" : "private int lineCount = 0;",
      "info" : "FieldDeclaration[46279-46305]:FieldDeclaration[46338-46364]"
    }, {
      "left" : "private int colCount = 0;",
      "right" : "private int colCount = 0;",
      "info" : "FieldDeclaration[46310-46335]:FieldDeclaration[46369-46394]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[46341-46450]:MethodDeclaration[46400-46509]"
    }, {
      "left" : "CodeBuilder append(String str)",
      "right" : "CodeBuilder append(String str)",
      "info" : "MethodDeclaration[46456-47022]:MethodDeclaration[46515-47081]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[47028-47150]:MethodDeclaration[47087-47209]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[47156-47262]:MethodDeclaration[47215-47321]"
    }, {
      "left" : "int getLineIndex()",
      "right" : "int getLineIndex()",
      "info" : "MethodDeclaration[47268-47397]:MethodDeclaration[47327-47456]"
    }, {
      "left" : "int getColumnIndex()",
      "right" : "int getColumnIndex()",
      "info" : "MethodDeclaration[47403-47535]:MethodDeclaration[47462-47594]"
    }, {
      "left" : "boolean endsWith(String suffix)",
      "right" : "boolean endsWith(String suffix)",
      "info" : "MethodDeclaration[47541-47765]:MethodDeclaration[47600-47824]"
    }, {
      "left" : "public void optimize()",
      "right" : "public void optimize()",
      "info" : "MethodDeclaration[47947-48593]:MethodDeclaration[48006-48652]"
    }, {
      "left" : "void setCssRenamingMap(CssRenamingMap map)",
      "right" : "void setCssRenamingMap(CssRenamingMap map)",
      "info" : "MethodDeclaration[48597-48691]:MethodDeclaration[48656-48750]"
    }, {
      "left" : "CssRenamingMap getCssRenamingMap()",
      "right" : "CssRenamingMap getCssRenamingMap()",
      "info" : "MethodDeclaration[48695-48782]:MethodDeclaration[48754-48841]"
    }, {
      "left" : "public void processDefines()",
      "right" : "public void processDefines()",
      "info" : "MethodDeclaration[48786-49273]:MethodDeclaration[48845-49332]"
    }, {
      "left" : "boolean isInliningForbidden()",
      "right" : "boolean isInliningForbidden()",
      "info" : "MethodDeclaration[49277-49480]:MethodDeclaration[49336-49539]"
    }, {
      "left" : "ControlFlowGraph<Node> computeCFG()",
      "right" : "ControlFlowGraph<Node> computeCFG()",
      "info" : "MethodDeclaration[49484-49806]:MethodDeclaration[49543-49865]"
    }, {
      "left" : "public void normalize()",
      "right" : "public void normalize()",
      "info" : "MethodDeclaration[49810-49955]:MethodDeclaration[49869-50014]"
    }, {
      "left" : "void prepareAst(Node root)",
      "right" : "void prepareAst(Node root)",
      "info" : "MethodDeclaration[49959-50162]:MethodDeclaration[50018-50221]"
    }, {
      "left" : "void recordFunctionInformation()",
      "right" : "void recordFunctionInformation()",
      "info" : "MethodDeclaration[50166-50580]:MethodDeclaration[50225-50639]"
    }, {
      "left" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "right" : "protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
      "info" : "FieldDeclaration[50584-50689]:FieldDeclaration[50643-50748]"
    }, {
      "left" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "right" : "private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
      "info" : "FieldDeclaration[50692-50797]:FieldDeclaration[50751-50856]"
    }, {
      "left" : "void addChangeHandler(CodeChangeHandler handler)",
      "right" : "void addChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[50801-50904]:MethodDeclaration[50860-50963]"
    }, {
      "left" : "void removeChangeHandler(CodeChangeHandler handler)",
      "right" : "void removeChangeHandler(CodeChangeHandler handler)",
      "info" : "MethodDeclaration[50908-51017]:MethodDeclaration[50967-51076]"
    }, {
      "left" : "public void reportCodeChange()",
      "right" : "public void reportCodeChange()",
      "info" : "MethodDeclaration[51021-51355]:MethodDeclaration[51080-51414]"
    }, {
      "left" : "public CodingConvention getCodingConvention()",
      "right" : "public CodingConvention getCodingConvention()",
      "info" : "MethodDeclaration[51359-51586]:MethodDeclaration[51418-51645]"
    }, {
      "left" : "public boolean isIdeMode()",
      "right" : "public boolean isIdeMode()",
      "info" : "MethodDeclaration[51590-51662]:MethodDeclaration[51649-51721]"
    }, {
      "left" : "public boolean acceptEcmaScript5()",
      "right" : "public boolean acceptEcmaScript5()",
      "info" : "MethodDeclaration[51666-51857]:MethodDeclaration[51725-51916]"
    }, {
      "left" : "public LanguageMode languageMode()",
      "right" : "public LanguageMode languageMode()",
      "info" : "MethodDeclaration[51861-51937]:MethodDeclaration[51920-51996]"
    }, {
      "left" : "public boolean acceptConstKeyword()",
      "right" : "public boolean acceptConstKeyword()",
      "info" : "MethodDeclaration[51941-52033]:MethodDeclaration[52000-52092]"
    }, {
      "left" : "Config getParserConfig()",
      "right" : "Config getParserConfig()",
      "info" : "MethodDeclaration[52037-52757]:MethodDeclaration[52096-52816]"
    }, {
      "left" : "public boolean isTypeCheckingEnabled()",
      "right" : "public boolean isTypeCheckingEnabled()",
      "info" : "MethodDeclaration[52761-52848]:MethodDeclaration[52820-52907]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[53029-53260]:MethodDeclaration[53088-53319]"
    }, {
      "left" : "public void report(JSError error)",
      "right" : "public void report(JSError error)",
      "info" : "MethodDeclaration[53264-53582]:MethodDeclaration[53323-53641]"
    }, {
      "left" : "public CheckLevel getErrorLevel(JSError error)",
      "right" : "public CheckLevel getErrorLevel(JSError error)",
      "info" : "MethodDeclaration[53586-53730]:MethodDeclaration[53645-53789]"
    }, {
      "left" : "void throwInternalError(String message, Exception cause)",
      "right" : "void throwInternalError(String message, Exception cause)",
      "info" : "MethodDeclaration[53734-54122]:MethodDeclaration[53793-54181]"
    }, {
      "left" : "public int getErrorCount()",
      "right" : "public int getErrorCount()",
      "info" : "MethodDeclaration[54127-54244]:MethodDeclaration[54186-54303]"
    }, {
      "left" : "public int getWarningCount()",
      "right" : "public int getWarningCount()",
      "info" : "MethodDeclaration[54248-54371]:MethodDeclaration[54307-54430]"
    }, {
      "left" : "boolean hasHaltingErrors()",
      "right" : "boolean hasHaltingErrors()",
      "info" : "MethodDeclaration[54375-54467]:MethodDeclaration[54434-54526]"
    }, {
      "left" : "public boolean hasErrors()",
      "right" : "public boolean hasErrors()",
      "info" : "MethodDeclaration[54471-54952]:MethodDeclaration[54530-55011]"
    }, {
      "left" : "void addToDebugLog(String str)",
      "right" : "void addToDebugLog(String str)",
      "info" : "MethodDeclaration[54956-55137]:MethodDeclaration[55015-55196]"
    }, {
      "left" : "private SourceFile getSourceFileByName(String sourceName)",
      "right" : "private SourceFile getSourceFileByName(String sourceName)",
      "info" : "MethodDeclaration[55141-55334]:MethodDeclaration[55200-55393]"
    }, {
      "left" : "public String getSourceLine(String sourceName, int lineNumber)",
      "right" : "public String getSourceLine(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[55338-55601]:MethodDeclaration[55397-55660]"
    }, {
      "left" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "right" : "public Region getSourceRegion(String sourceName, int lineNumber)",
      "info" : "MethodDeclaration[55605-55872]:MethodDeclaration[55664-55931]"
    }, {
      "left" : "Node getNodeForCodeInsertion(JSModule module)",
      "right" : "Node getNodeForCodeInsertion(JSModule module)",
      "info" : "MethodDeclaration[56060-56511]:MethodDeclaration[56119-56570]"
    }, {
      "left" : "public SourceMap getSourceMap()",
      "right" : "public SourceMap getSourceMap()",
      "info" : "MethodDeclaration[56515-56574]:MethodDeclaration[56574-56633]"
    }, {
      "left" : "VariableMap getVariableMap()",
      "right" : "VariableMap getVariableMap()",
      "info" : "MethodDeclaration[56578-56675]:MethodDeclaration[56637-56734]"
    }, {
      "left" : "VariableMap getPropertyMap()",
      "right" : "VariableMap getPropertyMap()",
      "info" : "MethodDeclaration[56679-56776]:MethodDeclaration[56738-56835]"
    }, {
      "left" : "CompilerOptions getOptions()",
      "right" : "CompilerOptions getOptions()",
      "info" : "MethodDeclaration[56780-56834]:MethodDeclaration[56839-56893]"
    }, {
      "left" : "FunctionInformationMap getFunctionalInformationMap()",
      "right" : "FunctionInformationMap getFunctionalInformationMap()",
      "info" : "MethodDeclaration[56838-56931]:MethodDeclaration[56897-56990]"
    }, {
      "left" : "public static void setLoggingLevel(Level level)",
      "right" : "public static void setLoggingLevel(Level level)",
      "info" : "MethodDeclaration[56935-57102]:MethodDeclaration[56994-57161]"
    }, {
      "left" : "public String getAstDotGraph() throws IOException",
      "right" : "public String getAstDotGraph() throws IOException",
      "info" : "MethodDeclaration[57106-57463]:MethodDeclaration[57165-57522]"
    }, {
      "left" : "public ErrorManager getErrorManager()",
      "right" : "public ErrorManager getErrorManager()",
      "info" : "MethodDeclaration[57467-57622]:MethodDeclaration[57526-57681]"
    }, {
      "left" : "List<CompilerInput> getInputsInOrder()",
      "right" : "List<CompilerInput> getInputsInOrder()",
      "info" : "MethodDeclaration[57626-57746]:MethodDeclaration[57685-57805]"
    }, {
      "left" : "List<CompilerInput> getExternsInOrder()",
      "right" : "List<CompilerInput> getExternsInOrder()",
      "info" : "MethodDeclaration[57750-57942]:MethodDeclaration[57809-58001]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "TypeDeclaration[57946-59012]:TypeDeclaration[58005-59071]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[58612-58660]:FieldDeclaration[58671-58719]"
    }, {
      "left" : "Node externsRoot;",
      "right" : "Node externsRoot;",
      "info" : "FieldDeclaration[58666-58683]:FieldDeclaration[58725-58742]"
    }, {
      "left" : "private Node jsRoot;",
      "right" : "private Node jsRoot;",
      "info" : "FieldDeclaration[58688-58708]:FieldDeclaration[58747-58767]"
    }, {
      "left" : "private List<CompilerInput> externs;",
      "right" : "private List<CompilerInput> externs;",
      "info" : "FieldDeclaration[58713-58749]:FieldDeclaration[58772-58808]"
    }, {
      "left" : "private List<CompilerInput> inputs;",
      "right" : "private List<CompilerInput> inputs;",
      "info" : "FieldDeclaration[58754-58789]:FieldDeclaration[58813-58848]"
    }, {
      "left" : "private List<JSModule> modules;",
      "right" : "private List<JSModule> modules;",
      "info" : "FieldDeclaration[58794-58825]:FieldDeclaration[58853-58884]"
    }, {
      "left" : "private PassConfig.State passConfigState;",
      "right" : "private PassConfig.State passConfigState;",
      "info" : "FieldDeclaration[58830-58871]:FieldDeclaration[58889-58930]"
    }, {
      "left" : "private JSTypeRegistry typeRegistry;",
      "right" : "private JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[58876-58912]:FieldDeclaration[58935-58971]"
    }, {
      "left" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "right" : "private AbstractCompiler.LifeCycleStage lifeCycleStage;",
      "info" : "FieldDeclaration[58917-58972]:FieldDeclaration[58976-59031]"
    }, {
      "left" : "private IntermediateState()",
      "right" : "private IntermediateState()",
      "info" : "MethodDeclaration[58978-59008]:MethodDeclaration[59037-59067]"
    }, {
      "left" : "public IntermediateState getState()",
      "right" : "public IntermediateState getState()",
      "info" : "MethodDeclaration[59016-59527]:MethodDeclaration[59075-59586]"
    }, {
      "left" : "public void setState(IntermediateState state)",
      "right" : "public void setState(IntermediateState state)",
      "info" : "MethodDeclaration[59531-60054]:MethodDeclaration[59590-60113]"
    }, {
      "left" : "List<CompilerInput> getInputsForTesting()",
      "right" : "List<CompilerInput> getInputsForTesting()",
      "info" : "MethodDeclaration[60058-60145]:MethodDeclaration[60117-60204]"
    }, {
      "left" : "List<CompilerInput> getExternsForTesting()",
      "right" : "List<CompilerInput> getExternsForTesting()",
      "info" : "MethodDeclaration[60149-60238]:MethodDeclaration[60208-60297]"
    }, {
      "left" : "boolean hasRegExpGlobalReferences()",
      "right" : "boolean hasRegExpGlobalReferences()",
      "info" : "MethodDeclaration[60242-60333]:MethodDeclaration[60301-60392]"
    }, {
      "left" : "void setHasRegExpGlobalReferences(boolean references)",
      "right" : "void setHasRegExpGlobalReferences(boolean references)",
      "info" : "MethodDeclaration[60337-60452]:MethodDeclaration[60396-60511]"
    }, {
      "left" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "right" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot)",
      "info" : "MethodDeclaration[60456-60907]:MethodDeclaration[60515-60966]"
    }, {
      "left" : "ReferenceMap getGlobalVarReferences()",
      "right" : "ReferenceMap getGlobalVarReferences()",
      "info" : "MethodDeclaration[60911-60991]:MethodDeclaration[60970-61050]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2650-2656]:Modifier[2650-2656]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2657-2662]:TYPE_DECLARATION_KIND[2657-2662]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[2663-2671]:SimpleName[2663-2671]"
    }, {
      "left" : "AbstractCompiler",
      "right" : "AbstractCompiler",
      "info" : "SimpleType[2680-2696]:SimpleType[2680-2696]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6188-6194]:Modifier[6188-6194]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[6195-6203]:SimpleName[6195-6203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-6241]:Block[6206-6241]"
    }, {
      "left" : "this((PrintStream) null);",
      "right" : "this((PrintStream) null);",
      "info" : "ConstructorInvocation[6212-6237]:ConstructorInvocation[6212-6237]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6340-6346]:Modifier[6340-6346]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[6347-6355]:SimpleName[6347-6355]"
    }, {
      "left" : "PrintStream stream",
      "right" : "PrintStream stream",
      "info" : "SingleVariableDeclaration[6356-6374]:SingleVariableDeclaration[6356-6374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6376-6441]:Block[6376-6441]"
    }, {
      "left" : "addChangeHandler(recentChange);",
      "right" : "addChangeHandler(recentChange);",
      "info" : "ExpressionStatement[6382-6413]:ExpressionStatement[6382-6413]"
    }, {
      "left" : "outStream = stream;",
      "right" : "outStream = stream;",
      "info" : "ExpressionStatement[6418-6437]:ExpressionStatement[6418-6437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6515-6521]:Modifier[6515-6521]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleName[6522-6530]:SimpleName[6522-6530]"
    }, {
      "left" : "ErrorManager errorManager",
      "right" : "ErrorManager errorManager",
      "info" : "SingleVariableDeclaration[6531-6556]:SingleVariableDeclaration[6531-6556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6610]:Block[6558-6610]"
    }, {
      "left" : "this();",
      "right" : "this();",
      "info" : "ConstructorInvocation[6564-6571]:ConstructorInvocation[6564-6571]"
    }, {
      "left" : "setErrorManager(errorManager);",
      "right" : "setErrorManager(errorManager);",
      "info" : "ExpressionStatement[6576-6606]:ExpressionStatement[6576-6606]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6730-6736]:Modifier[6730-6736]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6737-6741]:PrimitiveType[6737-6741]"
    }, {
      "left" : "setErrorManager",
      "right" : "setErrorManager",
      "info" : "SimpleName[6742-6757]:SimpleName[6742-6757]"
    }, {
      "left" : "ErrorManager errorManager",
      "right" : "ErrorManager errorManager",
      "info" : "SingleVariableDeclaration[6758-6783]:SingleVariableDeclaration[6758-6783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6785-6919]:Block[6785-6919]"
    }, {
      "left" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "right" : "Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");",
      "info" : "ExpressionStatement[6791-6877]:ExpressionStatement[6791-6877]"
    }, {
      "left" : "this.errorManager = errorManager;",
      "right" : "this.errorManager = errorManager;",
      "info" : "ExpressionStatement[6882-6915]:ExpressionStatement[6882-6915]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7037-7044]:Modifier[7037-7044]"
    }, {
      "left" : "MessageFormatter",
      "right" : "MessageFormatter",
      "info" : "SimpleType[7045-7061]:SimpleType[7045-7061]"
    }, {
      "left" : "createMessageFormatter",
      "right" : "createMessageFormatter",
      "info" : "SimpleName[7062-7084]:SimpleName[7062-7084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7087-7212]:Block[7087-7212]"
    }, {
      "left" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "right" : "boolean colorize = options.shouldColorizeErrorOutput();",
      "info" : "VariableDeclarationStatement[7093-7148]:VariableDeclarationStatement[7093-7148]"
    }, {
      "left" : "return options.errorFormat.toFormatter(this, colorize);",
      "right" : "return options.errorFormat.toFormatter(this, colorize);",
      "info" : "ReturnStatement[7153-7208]:ReturnStatement[7153-7208]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7330-7336]:Modifier[7330-7336]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7337-7341]:PrimitiveType[7337-7341]"
    }, {
      "left" : "initOptions",
      "right" : "initOptions",
      "info" : "SimpleName[7342-7353]:SimpleName[7342-7353]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[7354-7377]:SingleVariableDeclaration[7354-7377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7379-9655]:Block[7379-9714]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[7385-7408]:ExpressionStatement[7385-7408]"
    }, {
      "left" : "if (errorManager == null)",
      "right" : "if (errorManager == null)",
      "info" : "IfStatement[7413-7817]:IfStatement[7413-7817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7439-7817]:Block[7439-7817]"
    }, {
      "left" : "if (outStream == null)",
      "right" : "if (outStream == null)",
      "info" : "IfStatement[7447-7811]:IfStatement[7447-7811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7470-7575]:Block[7470-7575]"
    }, {
      "left" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "right" : "setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));",
      "info" : "ExpressionStatement[7480-7567]:ExpressionStatement[7480-7567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7581-7811]:Block[7581-7811]"
    }, {
      "left" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "right" : "PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);",
      "info" : "VariableDeclarationStatement[7591-7702]:VariableDeclarationStatement[7591-7702]"
    }, {
      "left" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "right" : "printer.setSummaryDetailLevel(options.summaryDetailLevel);",
      "info" : "ExpressionStatement[7711-7769]:ExpressionStatement[7711-7769]"
    }, {
      "left" : "setErrorManager(printer);",
      "right" : "setErrorManager(printer);",
      "info" : "ExpressionStatement[7778-7803]:ExpressionStatement[7778-7803]"
    }, {
      "left" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.enables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[7885-8418]:IfStatement[7885-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7936-7976]:Block[7936-7976]"
    }, {
      "left" : "options.checkTypes = true;",
      "right" : "options.checkTypes = true;",
      "info" : "ExpressionStatement[7944-7970]:ExpressionStatement[7944-7970]"
    }, {
      "left" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "right" : "if (options.disables(DiagnosticGroups.CHECK_TYPES))",
      "info" : "IfStatement[7982-8418]:IfStatement[7982-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8075]:Block[8034-8075]"
    }, {
      "left" : "options.checkTypes = false;",
      "right" : "options.checkTypes = false;",
      "info" : "ExpressionStatement[8042-8069]:ExpressionStatement[8042-8069]"
    }, {
      "left" : "if (!options.checkTypes)",
      "right" : "if (!options.checkTypes)",
      "info" : "IfStatement[8081-8418]:IfStatement[8081-8418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8106-8418]:Block[8106-8418]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);",
      "info" : "ExpressionStatement[8274-8412]:ExpressionStatement[8274-8412]"
    }, {
      "left" : "if (options.checkGlobalThisLevel.isOn())",
      "right" : "if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS))",
      "info" : "IfStatement[8424-8584]:IfStatement[8424-8643]"
    }, {
      "left" : "options.checkGlobalThisLevel.isOn()",
      "right" : "options.checkGlobalThisLevel.isOn()",
      "info" : "MethodInvocation[8428-8463]:MethodInvocation[8428-8463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8584]:Block[8524-8643]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);",
      "info" : "ExpressionStatement[8473-8578]:ExpressionStatement[8532-8637]"
    }, {
      "left" : "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT)",
      "right" : "if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT)",
      "info" : "IfStatement[8590-8760]:IfStatement[8649-8819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8654-8760]:Block[8713-8819]"
    }, {
      "left" : "options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);",
      "right" : "options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);",
      "info" : "ExpressionStatement[8662-8754]:ExpressionStatement[8721-8813]"
    }, {
      "left" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "right" : "List<WarningsGuard> guards = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[8804-8854]:VariableDeclarationStatement[8863-8913]"
    }, {
      "left" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "right" : "guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));",
      "info" : "ExpressionStatement[8859-8967]:ExpressionStatement[8918-9026]"
    }, {
      "left" : "guards.add(options.getWarningsGuard());",
      "right" : "guards.add(options.getWarningsGuard());",
      "info" : "ExpressionStatement[8972-9011]:ExpressionStatement[9031-9070]"
    }, {
      "left" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
      "right" : "ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);",
      "info" : "VariableDeclarationStatement[9017-9088]:VariableDeclarationStatement[9076-9147]"
    }, {
      "left" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "right" : "if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES))",
      "info" : "IfStatement[9380-9609]:IfStatement[9439-9668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9476-9609]:Block[9535-9668]"
    }, {
      "left" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "right" : "composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));",
      "info" : "ExpressionStatement[9484-9603]:ExpressionStatement[9543-9662]"
    }, {
      "left" : "this.warningsGuard = composedGuards;",
      "right" : "this.warningsGuard = composedGuards;",
      "info" : "ExpressionStatement[9615-9651]:ExpressionStatement[9674-9710]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9733-9739]:Modifier[9792-9798]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9740-9744]:PrimitiveType[9799-9803]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[9745-9749]:SimpleName[9804-9808]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[9750-9772]:SingleVariableDeclaration[9809-9831]"
    }, {
      "left" : "JSSourceFile[] inputs",
      "right" : "JSSourceFile[] inputs",
      "info" : "SingleVariableDeclaration[9774-9795]:SingleVariableDeclaration[9833-9854]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[9803-9826]:SingleVariableDeclaration[9862-9885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9828-9945]:Block[9887-10004]"
    }, {
      "left" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "right" : "init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);",
      "info" : "ExpressionStatement[9834-9941]:ExpressionStatement[9893-10000]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10023-10029]:Modifier[10082-10088]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10030-10034]:PrimitiveType[10089-10093]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[10035-10039]:SimpleName[10094-10098]"
    }, {
      "left" : "List<JSSourceFile> externs",
      "right" : "List<JSSourceFile> externs",
      "info" : "SingleVariableDeclaration[10040-10066]:SingleVariableDeclaration[10099-10125]"
    }, {
      "left" : "List<JSSourceFile> inputs",
      "right" : "List<JSSourceFile> inputs",
      "info" : "SingleVariableDeclaration[10068-10093]:SingleVariableDeclaration[10127-10152]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[10101-10124]:SingleVariableDeclaration[10160-10183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10126-10317]:Block[10185-10376]"
    }, {
      "left" : "JSModule module = new JSModule(\"[singleton]\");",
      "right" : "JSModule module = new JSModule(\"[singleton]\");",
      "info" : "VariableDeclarationStatement[10132-10178]:VariableDeclarationStatement[10191-10237]"
    }, {
      "left" : "for (JSSourceFile input : inputs)",
      "right" : "for (JSSourceFile input : inputs)",
      "info" : "EnhancedForStatement[10183-10249]:EnhancedForStatement[10242-10308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10217-10249]:Block[10276-10308]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[10225-10243]:ExpressionStatement[10284-10302]"
    }, {
      "left" : "initModules(externs, Lists.newArrayList(module), options);",
      "right" : "initModules(externs, Lists.newArrayList(module), options);",
      "info" : "ExpressionStatement[10255-10313]:ExpressionStatement[10314-10372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10430-10436]:Modifier[10489-10495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10437-10441]:PrimitiveType[10496-10500]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[10442-10446]:SimpleName[10501-10505]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[10447-10469]:SingleVariableDeclaration[10506-10528]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[10471-10489]:SingleVariableDeclaration[10530-10548]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[10497-10520]:SingleVariableDeclaration[10556-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10522-10644]:Block[10581-10703]"
    }, {
      "left" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "right" : "initModules(Lists.<JSSourceFile>newArrayList(externs),\n         Lists.<JSModule>newArrayList(modules), options);",
      "info" : "ExpressionStatement[10528-10640]:ExpressionStatement[10587-10699]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10757-10763]:Modifier[10816-10822]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10764-10768]:PrimitiveType[10823-10827]"
    }, {
      "left" : "initModules",
      "right" : "initModules",
      "info" : "SimpleName[10769-10780]:SimpleName[10828-10839]"
    }, {
      "left" : "List<JSSourceFile> externs",
      "right" : "List<JSSourceFile> externs",
      "info" : "SingleVariableDeclaration[10788-10814]:SingleVariableDeclaration[10847-10873]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[10816-10838]:SingleVariableDeclaration[10875-10897]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[10846-10869]:SingleVariableDeclaration[10905-10928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10871-11726]:Block[10930-11785]"
    }, {
      "left" : "initOptions(options);",
      "right" : "initOptions(options);",
      "info" : "ExpressionStatement[10877-10898]:ExpressionStatement[10936-10957]"
    }, {
      "left" : "checkFirstModule(modules);",
      "right" : "checkFirstModule(modules);",
      "info" : "ExpressionStatement[10904-10930]:ExpressionStatement[10963-10989]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[10935-10961]:ExpressionStatement[10994-11020]"
    }, {
      "left" : "this.externs = makeCompilerInput(externs, true);",
      "right" : "this.externs = makeCompilerInput(externs, true);",
      "info" : "ExpressionStatement[10967-11015]:ExpressionStatement[11026-11074]"
    }, {
      "left" : "this.modules = modules;",
      "right" : "this.modules = modules;",
      "info" : "ExpressionStatement[11123-11146]:ExpressionStatement[11182-11205]"
    }, {
      "left" : "if (modules.size() > 1)",
      "right" : "if (modules.size() > 1)",
      "info" : "IfStatement[11151-11615]:IfStatement[11210-11674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11175-11571]:Block[11234-11630]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11183-11565]:TryStatement[11242-11624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11187-11251]:Block[11246-11310]"
    }, {
      "left" : "this.moduleGraph = new JSModuleGraph(modules);",
      "right" : "this.moduleGraph = new JSModuleGraph(modules);",
      "info" : "ExpressionStatement[11197-11243]:ExpressionStatement[11256-11302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11302-11565]:Block[11361-11624]"
    }, {
      "left" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "right" : "report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));",
      "info" : "ExpressionStatement[11420-11541]:ExpressionStatement[11479-11600]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11550-11557]:ReturnStatement[11609-11616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11577-11615]:Block[11636-11674]"
    }, {
      "left" : "this.moduleGraph = null;",
      "right" : "this.moduleGraph = null;",
      "info" : "ExpressionStatement[11585-11609]:ExpressionStatement[11644-11668]"
    }, {
      "left" : "this.inputs = getAllInputsFromModules(modules);",
      "right" : "this.inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[11621-11668]:ExpressionStatement[11680-11727]"
    }, {
      "left" : "initBasedOnOptions();",
      "right" : "initBasedOnOptions();",
      "info" : "ExpressionStatement[11673-11694]:ExpressionStatement[11732-11753]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[11700-11722]:ExpressionStatement[11759-11781]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11812-11819]:Modifier[11871-11878]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11820-11824]:PrimitiveType[11879-11883]"
    }, {
      "left" : "initBasedOnOptions",
      "right" : "initBasedOnOptions",
      "info" : "SimpleName[11825-11843]:SimpleName[11884-11902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11846-12074]:Block[11905-12133]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[11895-12070]:IfStatement[11954-12129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11936-12070]:Block[11995-12129]"
    }, {
      "left" : "sourceMap = options.sourceMapFormat.getInstance();",
      "right" : "sourceMap = options.sourceMapFormat.getInstance();",
      "info" : "ExpressionStatement[11944-11994]:ExpressionStatement[12003-12053]"
    }, {
      "left" : "sourceMap.setPrefixMappings(options.sourceMapLocationMappings);",
      "right" : "sourceMap.setPrefixMappings(options.sourceMapLocationMappings);",
      "info" : "ExpressionStatement[12001-12064]:ExpressionStatement[12060-12123]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12078-12085]:Modifier[12137-12144]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[12086-12105]:ParameterizedType[12145-12164]"
    }, {
      "left" : "makeCompilerInput",
      "right" : "makeCompilerInput",
      "info" : "SimpleName[12106-12123]:SimpleName[12165-12182]"
    }, {
      "left" : "List<JSSourceFile> files",
      "right" : "List<JSSourceFile> files",
      "info" : "SingleVariableDeclaration[12131-12155]:SingleVariableDeclaration[12190-12214]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[12157-12173]:SingleVariableDeclaration[12216-12232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12175-12351]:Block[12234-12410]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[12181-12231]:VariableDeclarationStatement[12240-12290]"
    }, {
      "left" : "for (JSSourceFile file : files)",
      "right" : "for (JSSourceFile file : files)",
      "info" : "EnhancedForStatement[12236-12328]:EnhancedForStatement[12295-12387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12268-12328]:Block[12327-12387]"
    }, {
      "left" : "inputs.add(new CompilerInput(file, isExtern));",
      "right" : "inputs.add(new CompilerInput(file, isExtern));",
      "info" : "ExpressionStatement[12276-12322]:ExpressionStatement[12335-12381]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[12333-12347]:ReturnStatement[12392-12406]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12861-12868]:Modifier[12920-12927]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12869-12873]:PrimitiveType[12928-12932]"
    }, {
      "left" : "checkFirstModule",
      "right" : "checkFirstModule",
      "info" : "SimpleName[12874-12890]:SimpleName[12933-12949]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[12891-12913]:SingleVariableDeclaration[12950-12972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12915-13247]:Block[12974-13306]"
    }, {
      "left" : "if (modules.isEmpty())",
      "right" : "if (modules.isEmpty())",
      "info" : "IfStatement[12921-13243]:IfStatement[12980-13302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12944-13004]:Block[13003-13063]"
    }, {
      "left" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "right" : "report(JSError.make(EMPTY_MODULE_LIST_ERROR));",
      "info" : "ExpressionStatement[12952-12998]:ExpressionStatement[13011-13057]"
    }, {
      "left" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "right" : "if (modules.get(0).getInputs().isEmpty() && modules.size() > 1)",
      "info" : "IfStatement[13010-13243]:IfStatement[13069-13302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13074-13243]:Block[13133-13302]"
    }, {
      "left" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "right" : "report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));",
      "info" : "ExpressionStatement[13155-13237]:ExpressionStatement[13214-13296]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13363-13370]:Modifier[13422-13429]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13371-13377]:Modifier[13430-13436]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13378-13382]:PrimitiveType[13437-13441]"
    }, {
      "left" : "fillEmptyModules",
      "right" : "fillEmptyModules",
      "info" : "SimpleName[13383-13399]:SimpleName[13442-13458]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[13400-13422]:SingleVariableDeclaration[13459-13481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13424-13600]:Block[13483-13659]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[13430-13596]:EnhancedForStatement[13489-13655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13462-13596]:Block[13521-13655]"
    }, {
      "left" : "if (module.getInputs().isEmpty())",
      "right" : "if (module.getInputs().isEmpty())",
      "info" : "IfStatement[13470-13590]:IfStatement[13529-13649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13504-13590]:Block[13563-13649]"
    }, {
      "left" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "right" : "module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));",
      "info" : "ExpressionStatement[13514-13582]:ExpressionStatement[13573-13641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13846-13852]:Modifier[13905-13911]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13853-13857]:PrimitiveType[13912-13916]"
    }, {
      "left" : "rebuildInputsFromModules",
      "right" : "rebuildInputsFromModules",
      "info" : "SimpleName[13858-13882]:SimpleName[13917-13941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13885-13964]:Block[13944-14023]"
    }, {
      "left" : "inputs = getAllInputsFromModules(modules);",
      "right" : "inputs = getAllInputsFromModules(modules);",
      "info" : "ExpressionStatement[13891-13933]:ExpressionStatement[13950-13992]"
    }, {
      "left" : "initInputsByNameMap();",
      "right" : "initInputsByNameMap();",
      "info" : "ExpressionStatement[13938-13960]:ExpressionStatement[13997-14019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14074-14081]:Modifier[14133-14140]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14082-14088]:Modifier[14141-14147]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[14089-14108]:ParameterizedType[14148-14167]"
    }, {
      "left" : "getAllInputsFromModules",
      "right" : "getAllInputsFromModules",
      "info" : "SimpleName[14109-14132]:SimpleName[14168-14191]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[14140-14162]:SingleVariableDeclaration[14199-14221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14164-14697]:Block[14223-14756]"
    }, {
      "left" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "right" : "List<CompilerInput> inputs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[14170-14220]:VariableDeclarationStatement[14229-14279]"
    }, {
      "left" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "right" : "Map<String, JSModule> inputMap = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[14225-14276]:VariableDeclarationStatement[14284-14335]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[14281-14674]:EnhancedForStatement[14340-14733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14313-14674]:Block[14372-14733]"
    }, {
      "left" : "for (CompilerInput input : module.getInputs())",
      "right" : "for (CompilerInput input : module.getInputs())",
      "info" : "EnhancedForStatement[14321-14668]:EnhancedForStatement[14380-14727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14368-14668]:Block[14427-14727]"
    }, {
      "left" : "String inputName = input.getName();",
      "right" : "String inputName = input.getName();",
      "info" : "VariableDeclarationStatement[14378-14413]:VariableDeclarationStatement[14437-14472]"
    }, {
      "left" : "inputs.add(input);",
      "right" : "inputs.add(input);",
      "info" : "ExpressionStatement[14601-14619]:ExpressionStatement[14660-14678]"
    }, {
      "left" : "inputMap.put(inputName, module);",
      "right" : "inputMap.put(inputName, module);",
      "info" : "ExpressionStatement[14628-14660]:ExpressionStatement[14687-14719]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[14679-14693]:ReturnStatement[14738-14752]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15091-15095]:PrimitiveType[15150-15154]"
    }, {
      "left" : "initInputsByNameMap",
      "right" : "initInputsByNameMap",
      "info" : "SimpleName[15096-15115]:SimpleName[15155-15174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15118-15676]:Block[15177-15735]"
    }, {
      "left" : "inputsByName = new HashMap<String, CompilerInput>();",
      "right" : "inputsByName = new HashMap<String, CompilerInput>();",
      "info" : "ExpressionStatement[15124-15176]:ExpressionStatement[15183-15235]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[15181-15428]:EnhancedForStatement[15240-15487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15217-15428]:Block[15276-15487]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[15225-15255]:VariableDeclarationStatement[15284-15314]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[15262-15422]:IfStatement[15321-15481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15299-15347]:Block[15358-15406]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[15309-15339]:ExpressionStatement[15368-15398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15353-15422]:Block[15412-15481]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_EXTERN_INPUT, name));",
      "info" : "ExpressionStatement[15363-15414]:ExpressionStatement[15422-15473]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[15433-15672]:EnhancedForStatement[15492-15731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15468-15672]:Block[15527-15731]"
    }, {
      "left" : "String name = input.getName();",
      "right" : "String name = input.getName();",
      "info" : "VariableDeclarationStatement[15476-15506]:VariableDeclarationStatement[15535-15565]"
    }, {
      "left" : "if (!inputsByName.containsKey(name))",
      "right" : "if (!inputsByName.containsKey(name))",
      "info" : "IfStatement[15513-15666]:IfStatement[15572-15725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15550-15598]:Block[15609-15657]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[15560-15590]:ExpressionStatement[15619-15649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15604-15666]:Block[15663-15725]"
    }, {
      "left" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "right" : "report(JSError.make(DUPLICATE_INPUT, name));",
      "info" : "ExpressionStatement[15614-15658]:ExpressionStatement[15673-15717]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15680-15686]:Modifier[15739-15745]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[15687-15693]:SimpleType[15746-15752]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[15694-15701]:SimpleName[15753-15760]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[15709-15728]:SingleVariableDeclaration[15768-15787]"
    }, {
      "left" : "JSSourceFile input",
      "right" : "JSSourceFile input",
      "info" : "SingleVariableDeclaration[15730-15748]:SingleVariableDeclaration[15789-15807]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[15750-15773]:SingleVariableDeclaration[15809-15832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15775-15848]:Block[15834-15907]"
    }, {
      "left" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "right" : "return compile(extern, new JSSourceFile[] { input }, options);",
      "info" : "ReturnStatement[15782-15844]:ReturnStatement[15841-15903]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15852-15858]:Modifier[15911-15917]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[15859-15865]:SimpleType[15918-15924]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[15866-15873]:SimpleName[15925-15932]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[15881-15900]:SingleVariableDeclaration[15940-15959]"
    }, {
      "left" : "JSSourceFile[] input",
      "right" : "JSSourceFile[] input",
      "info" : "SingleVariableDeclaration[15902-15922]:SingleVariableDeclaration[15961-15981]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[15924-15947]:SingleVariableDeclaration[15983-16006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15949-16022]:Block[16008-16081]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, input, options);",
      "info" : "ReturnStatement[15956-16018]:ReturnStatement[16015-16077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16026-16032]:Modifier[16085-16091]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[16033-16039]:SimpleType[16092-16098]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[16040-16047]:SimpleName[16099-16106]"
    }, {
      "left" : "JSSourceFile extern",
      "right" : "JSSourceFile extern",
      "info" : "SingleVariableDeclaration[16055-16074]:SingleVariableDeclaration[16114-16133]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[16076-16094]:SingleVariableDeclaration[16135-16153]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[16096-16119]:SingleVariableDeclaration[16155-16178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16121-16196]:Block[16180-16255]"
    }, {
      "left" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "right" : "return compile(new JSSourceFile[] { extern }, modules, options);",
      "info" : "ReturnStatement[16128-16192]:ReturnStatement[16187-16251]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16244-16250]:Modifier[16303-16309]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[16251-16257]:SimpleType[16310-16316]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[16258-16265]:SimpleName[16317-16324]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[16266-16288]:SingleVariableDeclaration[16325-16347]"
    }, {
      "left" : "JSSourceFile[] inputs",
      "right" : "JSSourceFile[] inputs",
      "info" : "SingleVariableDeclaration[16314-16335]:SingleVariableDeclaration[16373-16394]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[16361-16384]:SingleVariableDeclaration[16420-16443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16386-16521]:Block[16445-16580]"
    }, {
      "left" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "right" : "return compile(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs),\n        options);",
      "info" : "ReturnStatement[16392-16517]:ReturnStatement[16451-16576]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16569-16575]:Modifier[16628-16634]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[16576-16582]:SimpleType[16635-16641]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[16583-16590]:SimpleName[16642-16649]"
    }, {
      "left" : "List<JSSourceFile> externs",
      "right" : "List<JSSourceFile> externs",
      "info" : "SingleVariableDeclaration[16591-16617]:SingleVariableDeclaration[16650-16676]"
    }, {
      "left" : "List<JSSourceFile> inputs",
      "right" : "List<JSSourceFile> inputs",
      "info" : "SingleVariableDeclaration[16625-16650]:SingleVariableDeclaration[16684-16709]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[16652-16675]:SingleVariableDeclaration[16711-16734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16677-17060]:Block[16736-17119]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[16737-16778]:ExpressionStatement[16796-16837]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16784-17056]:TryStatement[16843-17115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16788-16918]:Block[16847-16977]"
    }, {
      "left" : "init(externs, inputs, options);",
      "right" : "init(externs, inputs, options);",
      "info" : "ExpressionStatement[16796-16827]:ExpressionStatement[16855-16886]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[16834-16888]:IfStatement[16893-16947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16851-16888]:Block[16910-16947]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[16861-16880]:ReturnStatement[16920-16939]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[16895-16912]:ReturnStatement[16954-16971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16927-17056]:Block[16986-17115]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[16935-16974]:VariableDeclarationStatement[16994-17033]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[16981-17011]:ExpressionStatement[17040-17070]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[17018-17050]:ExpressionStatement[17077-17109]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17109-17115]:Modifier[17168-17174]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17116-17122]:SimpleType[17175-17181]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[17123-17130]:SimpleName[17182-17189]"
    }, {
      "left" : "JSSourceFile[] externs",
      "right" : "JSSourceFile[] externs",
      "info" : "SingleVariableDeclaration[17131-17153]:SingleVariableDeclaration[17190-17212]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[17179-17197]:SingleVariableDeclaration[17238-17256]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[17223-17246]:SingleVariableDeclaration[17282-17305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17248-17387]:Block[17307-17446]"
    }, {
      "left" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "right" : "return compileModules(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSModule>newArrayList(modules),\n        options);",
      "info" : "ReturnStatement[17254-17383]:ReturnStatement[17313-17442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17436-17442]:Modifier[17495-17501]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17443-17449]:SimpleType[17502-17508]"
    }, {
      "left" : "compileModules",
      "right" : "compileModules",
      "info" : "SimpleName[17450-17464]:SimpleName[17509-17523]"
    }, {
      "left" : "List<JSSourceFile> externs",
      "right" : "List<JSSourceFile> externs",
      "info" : "SingleVariableDeclaration[17465-17491]:SingleVariableDeclaration[17524-17550]"
    }, {
      "left" : "List<JSModule> modules",
      "right" : "List<JSModule> modules",
      "info" : "SingleVariableDeclaration[17499-17521]:SingleVariableDeclaration[17558-17580]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[17523-17546]:SingleVariableDeclaration[17582-17605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17548-17939]:Block[17607-17998]"
    }, {
      "left" : "Preconditions.checkState(jsRoot == null);",
      "right" : "Preconditions.checkState(jsRoot == null);",
      "info" : "ExpressionStatement[17608-17649]:ExpressionStatement[17667-17708]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17655-17935]:TryStatement[17714-17994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17659-17797]:Block[17718-17856]"
    }, {
      "left" : "initModules(externs, modules, options);",
      "right" : "initModules(externs, modules, options);",
      "info" : "ExpressionStatement[17667-17706]:ExpressionStatement[17726-17765]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[17713-17767]:IfStatement[17772-17826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17730-17767]:Block[17789-17826]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[17740-17759]:ReturnStatement[17799-17818]"
    }, {
      "left" : "return compile();",
      "right" : "return compile();",
      "info" : "ReturnStatement[17774-17791]:ReturnStatement[17833-17850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17806-17935]:Block[17865-17994]"
    }, {
      "left" : "Tracer t = newTracer(\"generateReport\");",
      "right" : "Tracer t = newTracer(\"generateReport\");",
      "info" : "VariableDeclarationStatement[17814-17853]:VariableDeclarationStatement[17873-17912]"
    }, {
      "left" : "errorManager.generateReport();",
      "right" : "errorManager.generateReport();",
      "info" : "ExpressionStatement[17860-17890]:ExpressionStatement[17919-17949]"
    }, {
      "left" : "stopTracer(t, \"generateReport\");",
      "right" : "stopTracer(t, \"generateReport\");",
      "info" : "ExpressionStatement[17897-17929]:ExpressionStatement[17956-17988]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17943-17950]:Modifier[18002-18009]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[17951-17957]:SimpleType[18010-18016]"
    }, {
      "left" : "compile",
      "right" : "compile",
      "info" : "SimpleName[17958-17965]:SimpleName[18017-18024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17968-18146]:Block[18027-18205]"
    }, {
      "left" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<Result>() {\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });",
      "info" : "ReturnStatement[17974-18142]:ReturnStatement[18033-18201]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18032-18038]:Modifier[18091-18097]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[18039-18045]:SimpleType[18098-18104]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[18046-18050]:SimpleName[18105-18109]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[18060-18069]:SimpleType[18119-18128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18070-18134]:Block[18129-18193]"
    }, {
      "left" : "compileInternal();",
      "right" : "compileInternal();",
      "info" : "ExpressionStatement[18080-18098]:ExpressionStatement[18139-18157]"
    }, {
      "left" : "return getResult();",
      "right" : "return getResult();",
      "info" : "ReturnStatement[18107-18126]:ReturnStatement[18166-18185]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18255-18261]:Modifier[18314-18320]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18262-18266]:PrimitiveType[18321-18325]"
    }, {
      "left" : "disableThreads",
      "right" : "disableThreads",
      "info" : "SimpleName[18267-18281]:SimpleName[18326-18340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18284-18313]:Block[18343-18372]"
    }, {
      "left" : "useThreads = false;",
      "right" : "useThreads = false;",
      "info" : "ExpressionStatement[18290-18309]:ExpressionStatement[18349-18368]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18317-18324]:Modifier[18376-18383]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[18326-18327]:TypeParameter[18385-18386]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[18329-18330]:SimpleType[18388-18389]"
    }, {
      "left" : "runInCompilerThread",
      "right" : "runInCompilerThread",
      "info" : "SimpleName[18331-18350]:SimpleName[18390-18409]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[18351-18377]:SingleVariableDeclaration[18410-18436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18379-18453]:Block[18438-18512]"
    }, {
      "left" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "right" : "return runCallable(callable, useThreads, options.tracer.isOn());",
      "info" : "ReturnStatement[18385-18449]:ReturnStatement[18444-18508]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18457-18463]:Modifier[18516-18522]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[18465-18466]:TypeParameter[18524-18525]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[18468-18469]:SimpleType[18527-18528]"
    }, {
      "left" : "runCallableWithLargeStack",
      "right" : "runCallableWithLargeStack",
      "info" : "SimpleName[18470-18495]:SimpleName[18529-18554]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[18496-18522]:SingleVariableDeclaration[18555-18581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18524-18576]:Block[18583-18635]"
    }, {
      "left" : "return runCallable(callable, true, false);",
      "right" : "return runCallable(callable, true, false);",
      "info" : "ReturnStatement[18530-18572]:ReturnStatement[18589-18631]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[18580-18610]:SingleMemberAnnotation[18639-18669]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18613-18619]:Modifier[18672-18678]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[18621-18622]:TypeParameter[18680-18681]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[18624-18625]:SimpleType[18683-18684]"
    }, {
      "left" : "runCallable",
      "right" : "runCallable",
      "info" : "SimpleName[18626-18637]:SimpleName[18685-18696]"
    }, {
      "left" : "final Callable<T> callable",
      "right" : "final Callable<T> callable",
      "info" : "SingleVariableDeclaration[18645-18671]:SingleVariableDeclaration[18704-18730]"
    }, {
      "left" : "boolean useLargeStackThread",
      "right" : "boolean useLargeStackThread",
      "info" : "SingleVariableDeclaration[18673-18700]:SingleVariableDeclaration[18732-18759]"
    }, {
      "left" : "boolean trace",
      "right" : "boolean trace",
      "info" : "SingleVariableDeclaration[18702-18715]:SingleVariableDeclaration[18761-18774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18717-20159]:Block[18776-20218]"
    }, {
      "left" : "final boolean dumpTraceReport = trace;",
      "right" : "final boolean dumpTraceReport = trace;",
      "info" : "VariableDeclarationStatement[19105-19143]:VariableDeclarationStatement[19164-19202]"
    }, {
      "left" : "final Object[] result = new Object[1];",
      "right" : "final Object[] result = new Object[1];",
      "info" : "VariableDeclarationStatement[19148-19186]:VariableDeclarationStatement[19207-19245]"
    }, {
      "left" : "final Throwable[] exception = new Throwable[1];",
      "right" : "final Throwable[] exception = new Throwable[1];",
      "info" : "VariableDeclarationStatement[19191-19238]:VariableDeclarationStatement[19250-19297]"
    }, {
      "left" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "right" : "Runnable runnable = new Runnable() {\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };",
      "info" : "VariableDeclarationStatement[19243-19650]:VariableDeclarationStatement[19302-19709]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19286-19292]:Modifier[19345-19351]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19293-19297]:PrimitiveType[19352-19356]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[19298-19301]:SimpleName[19357-19360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19304-19643]:Block[19363-19702]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19314-19635]:TryStatement[19373-19694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19318-19458]:Block[19377-19517]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[19330-19409]:IfStatement[19389-19468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19351-19409]:Block[19410-19468]"
    }, {
      "left" : "Tracer.initCurrentThreadTrace();",
      "right" : "Tracer.initCurrentThreadTrace();",
      "info" : "ExpressionStatement[19365-19397]:ExpressionStatement[19424-19456]"
    }, {
      "left" : "result[0] = callable.call();",
      "right" : "result[0] = callable.call();",
      "info" : "ExpressionStatement[19420-19448]:ExpressionStatement[19479-19507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19479-19518]:Block[19538-19577]"
    }, {
      "left" : "exception[0] = e;",
      "right" : "exception[0] = e;",
      "info" : "ExpressionStatement[19491-19508]:ExpressionStatement[19550-19567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19527-19635]:Block[19586-19694]"
    }, {
      "left" : "if (dumpTraceReport)",
      "right" : "if (dumpTraceReport)",
      "info" : "IfStatement[19539-19625]:IfStatement[19598-19684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19560-19625]:Block[19619-19684]"
    }, {
      "left" : "Tracer.logAndClearCurrentThreadTrace();",
      "right" : "Tracer.logAndClearCurrentThreadTrace();",
      "info" : "ExpressionStatement[19574-19613]:ExpressionStatement[19633-19672]"
    }, {
      "left" : "if (useLargeStackThread)",
      "right" : "if (useLargeStackThread)",
      "info" : "IfStatement[19656-19981]:IfStatement[19715-20040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19681-19946]:Block[19740-20005]"
    }, {
      "left" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "right" : "Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);",
      "info" : "VariableDeclarationStatement[19689-19763]:VariableDeclarationStatement[19748-19822]"
    }, {
      "left" : "th.start();",
      "right" : "th.start();",
      "info" : "ExpressionStatement[19770-19781]:ExpressionStatement[19829-19840]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[19788-19940]:WhileStatement[19847-19999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19801-19940]:Block[19860-19999]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19811-19932]:TryStatement[19870-19991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19815-19864]:Block[19874-19923]"
    }, {
      "left" : "th.join();",
      "right" : "th.join();",
      "info" : "ExpressionStatement[19827-19837]:ExpressionStatement[19886-19896]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19848-19854]:BreakStatement[19907-19913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19901-19932]:Block[19960-19991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19952-19981]:Block[20011-20040]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[19960-19975]:ExpressionStatement[20019-20034]"
    }, {
      "left" : "if (exception[0] != null)",
      "right" : "if (exception[0] != null)",
      "info" : "IfStatement[20047-20128]:IfStatement[20106-20187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20073-20128]:Block[20132-20187]"
    }, {
      "left" : "throw new RuntimeException(exception[0]);",
      "right" : "throw new RuntimeException(exception[0]);",
      "info" : "ThrowStatement[20081-20122]:ThrowStatement[20140-20181]"
    }, {
      "left" : "return (T) result[0];",
      "right" : "return (T) result[0];",
      "info" : "ReturnStatement[20134-20155]:ReturnStatement[20193-20214]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20163-20170]:Modifier[20222-20229]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20171-20175]:PrimitiveType[20230-20234]"
    }, {
      "left" : "compileInternal",
      "right" : "compileInternal",
      "info" : "SimpleName[20176-20191]:SimpleName[20235-20250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20194-20991]:Block[20253-21050]"
    }, {
      "left" : "parse();",
      "right" : "parse();",
      "info" : "ExpressionStatement[20200-20208]:ExpressionStatement[20259-20267]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[20213-20251]:IfStatement[20272-20310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20230-20251]:Block[20289-20310]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20238-20245]:ReturnStatement[20297-20304]"
    }, {
      "left" : "if (!precheck())",
      "right" : "if (!precheck())",
      "info" : "IfStatement[20257-20295]:IfStatement[20316-20354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20274-20295]:Block[20333-20354]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20282-20289]:ReturnStatement[20341-20348]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[20301-20448]:IfStatement[20360-20507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20341-20448]:Block[20400-20507]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[20420-20428]:ExpressionStatement[20479-20487]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20435-20442]:ReturnStatement[20494-20501]"
    }, {
      "left" : "if (!options.skipAllPasses)",
      "right" : "if (!options.skipAllPasses)",
      "info" : "IfStatement[20454-20817]:IfStatement[20513-20876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20482-20817]:Block[20541-20876]"
    }, {
      "left" : "check();",
      "right" : "check();",
      "info" : "ExpressionStatement[20490-20498]:ExpressionStatement[20549-20557]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[20505-20547]:IfStatement[20564-20606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20522-20547]:Block[20581-20606]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20532-20539]:ReturnStatement[20591-20598]"
    }, {
      "left" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "right" : "if (options.isExternExportsEnabled()\n          || options.externExportsPath != null)",
      "info" : "IfStatement[20555-20674]:IfStatement[20614-20733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20640-20674]:Block[20699-20733]"
    }, {
      "left" : "externExports();",
      "right" : "externExports();",
      "info" : "ExpressionStatement[20650-20666]:ExpressionStatement[20709-20725]"
    }, {
      "left" : "if (!options.ideMode)",
      "right" : "if (!options.ideMode)",
      "info" : "IfStatement[20760-20811]:IfStatement[20819-20870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20782-20811]:Block[20841-20870]"
    }, {
      "left" : "optimize();",
      "right" : "optimize();",
      "info" : "ExpressionStatement[20792-20803]:ExpressionStatement[20851-20862]"
    }, {
      "left" : "if (options.recordFunctionInformation)",
      "right" : "if (options.recordFunctionInformation)",
      "info" : "IfStatement[20823-20904]:IfStatement[20882-20963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20862-20904]:Block[20921-20963]"
    }, {
      "left" : "recordFunctionInformation();",
      "right" : "recordFunctionInformation();",
      "info" : "ExpressionStatement[20870-20898]:ExpressionStatement[20929-20957]"
    }, {
      "left" : "if (options.devMode == DevMode.START_AND_END)",
      "right" : "if (options.devMode == DevMode.START_AND_END)",
      "info" : "IfStatement[20910-20987]:IfStatement[20969-21046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20956-20987]:Block[21015-21046]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[20964-20981]:ExpressionStatement[21023-21040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20995-21001]:Modifier[21054-21060]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21002-21006]:PrimitiveType[21061-21065]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[21007-21012]:SimpleName[21066-21071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21015-21039]:Block[21074-21098]"
    }, {
      "left" : "parseInputs();",
      "right" : "parseInputs();",
      "info" : "ExpressionStatement[21021-21035]:ExpressionStatement[21080-21094]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[21043-21053]:SimpleType[21102-21112]"
    }, {
      "left" : "getPassConfig",
      "right" : "getPassConfig",
      "info" : "SimpleName[21054-21067]:SimpleName[21113-21126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21070-21169]:Block[21129-21228]"
    }, {
      "left" : "if (passes == null)",
      "right" : "if (passes == null)",
      "info" : "IfStatement[21076-21146]:IfStatement[21135-21205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21096-21146]:Block[21155-21205]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[21104-21140]:ExpressionStatement[21163-21199]"
    }, {
      "left" : "return passes;",
      "right" : "return passes;",
      "info" : "ReturnStatement[21151-21165]:ReturnStatement[21210-21224]"
    }, {
      "left" : "PassConfig",
      "right" : "PassConfig",
      "info" : "SimpleType[21282-21292]:SimpleType[21341-21351]"
    }, {
      "left" : "createPassConfigInternal",
      "right" : "createPassConfigInternal",
      "info" : "SimpleName[21293-21317]:SimpleName[21352-21376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21320-21368]:Block[21379-21427]"
    }, {
      "left" : "return new DefaultPassConfig(options);",
      "right" : "return new DefaultPassConfig(options);",
      "info" : "ReturnStatement[21326-21364]:ReturnStatement[21385-21423]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21573-21579]:Modifier[21632-21638]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21580-21584]:PrimitiveType[21639-21643]"
    }, {
      "left" : "setPassConfig",
      "right" : "setPassConfig",
      "info" : "SimpleName[21585-21598]:SimpleName[21644-21657]"
    }, {
      "left" : "PassConfig passes",
      "right" : "PassConfig passes",
      "info" : "SingleVariableDeclaration[21599-21616]:SingleVariableDeclaration[21658-21675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21618-22116]:Block[21677-22175]"
    }, {
      "left" : "Preconditions.checkNotNull(passes);",
      "right" : "Preconditions.checkNotNull(passes);",
      "info" : "ExpressionStatement[21933-21968]:ExpressionStatement[21992-22027]"
    }, {
      "left" : "if (this.passes != null)",
      "right" : "if (this.passes != null)",
      "info" : "IfStatement[21974-22086]:IfStatement[22033-22145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21999-22086]:Block[22058-22145]"
    }, {
      "left" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "right" : "throw new IllegalStateException(\"this.passes has already been assigned\");",
      "info" : "ThrowStatement[22007-22080]:ThrowStatement[22066-22139]"
    }, {
      "left" : "this.passes = passes;",
      "right" : "this.passes = passes;",
      "info" : "ExpressionStatement[22091-22112]:ExpressionStatement[22150-22171]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22315-22322]:PrimitiveType[22374-22381]"
    }, {
      "left" : "precheck",
      "right" : "precheck",
      "info" : "SimpleName[22323-22331]:SimpleName[22382-22390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22334-22356]:Block[22393-22415]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22340-22352]:ReturnStatement[22399-22411]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22360-22366]:Modifier[22419-22425]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22367-22371]:PrimitiveType[22426-22430]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[22372-22377]:SimpleName[22431-22436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22380-23436]:Block[22439-23495]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);",
      "info" : "ExpressionStatement[22386-22441]:ExpressionStatement[22445-22500]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[22447-22513]:VariableDeclarationStatement[22506-22572]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[22518-22618]:IfStatement[22577-22677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22561-22618]:Block[22620-22677]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[22569-22612]:ExpressionStatement[22628-22671]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "right" : "phaseOptimizer.consume(getPassConfig().getChecks());",
      "info" : "ExpressionStatement[22623-22675]:ExpressionStatement[22682-22734]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[22680-22724]:ExpressionStatement[22739-22783]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[22729-22767]:IfStatement[22788-22826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22746-22767]:Block[22805-22826]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22754-22761]:ReturnStatement[22813-22820]"
    }, {
      "left" : "if (options.nameAnonymousFunctionsOnly)",
      "right" : "if (options.nameAnonymousFunctionsOnly)",
      "info" : "IfStatement[22850-22911]:IfStatement[22909-22970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22890-22911]:Block[22949-22970]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22898-22905]:ReturnStatement[22957-22964]"
    }, {
      "left" : "if (options.removeTryCatchFinally)",
      "right" : "if (options.removeTryCatchFinally)",
      "info" : "IfStatement[22917-22990]:IfStatement[22976-23049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22952-22990]:Block[23011-23049]"
    }, {
      "left" : "removeTryCatchFinally();",
      "right" : "removeTryCatchFinally();",
      "info" : "ExpressionStatement[22960-22984]:ExpressionStatement[23019-23043]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "right" : "if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty())",
      "info" : "IfStatement[22996-23364]:IfStatement[23055-23423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23229-23364]:Block[23288-23423]"
    }, {
      "left" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "right" : "stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);",
      "info" : "ExpressionStatement[23237-23358]:ExpressionStatement[23296-23417]"
    }, {
      "left" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "right" : "runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);",
      "info" : "ExpressionStatement[23370-23432]:ExpressionStatement[23429-23491]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23440-23447]:Modifier[23499-23506]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23448-23452]:PrimitiveType[23507-23511]"
    }, {
      "left" : "externExports",
      "right" : "externExports",
      "info" : "SimpleName[23453-23466]:SimpleName[23512-23525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23469-23702]:Block[23528-23761]"
    }, {
      "left" : "logger.info(\"Creating extern file for exports\");",
      "right" : "logger.info(\"Creating extern file for exports\");",
      "info" : "ExpressionStatement[23475-23523]:ExpressionStatement[23534-23582]"
    }, {
      "left" : "startPass(\"externExports\");",
      "right" : "startPass(\"externExports\");",
      "info" : "ExpressionStatement[23528-23555]:ExpressionStatement[23587-23614]"
    }, {
      "left" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "right" : "ExternExportsPass pass = new ExternExportsPass(this);",
      "info" : "VariableDeclarationStatement[23561-23614]:VariableDeclarationStatement[23620-23673]"
    }, {
      "left" : "process(pass);",
      "right" : "process(pass);",
      "info" : "ExpressionStatement[23619-23633]:ExpressionStatement[23678-23692]"
    }, {
      "left" : "externExports = pass.getGeneratedExterns();",
      "right" : "externExports = pass.getGeneratedExterns();",
      "info" : "ExpressionStatement[23639-23682]:ExpressionStatement[23698-23741]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[23688-23698]:ExpressionStatement[23747-23757]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23706-23715]:MarkerAnnotation[23765-23774]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23718-23722]:PrimitiveType[23777-23781]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[23723-23730]:SimpleName[23782-23789]"
    }, {
      "left" : "CompilerPass p",
      "right" : "CompilerPass p",
      "info" : "SingleVariableDeclaration[23731-23745]:SingleVariableDeclaration[23790-23804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23747-23788]:Block[23806-23847]"
    }, {
      "left" : "p.process(externsRoot, jsRoot);",
      "right" : "p.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[23753-23784]:ExpressionStatement[23812-23843]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23882-23891]:MarkerAnnotation[23941-23950]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23896-23905]:Modifier[23955-23964]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[23906-23918]:SimpleType[23965-23977]"
    }, {
      "left" : "createInternal",
      "right" : "createInternal",
      "info" : "SimpleName[23919-23933]:SimpleName[23978-23992]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[23934-23959]:SingleVariableDeclaration[23993-24018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23961-24008]:Block[24020-24067]"
    }, {
      "left" : "return new SanityCheck(compiler);",
      "right" : "return new SanityCheck(compiler);",
      "info" : "ReturnStatement[23969-24002]:ReturnStatement[24028-24061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24017-24024]:Modifier[24076-24083]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24025-24029]:PrimitiveType[24084-24088]"
    }, {
      "left" : "maybeSanityCheck",
      "right" : "maybeSanityCheck",
      "info" : "SimpleName[24030-24046]:SimpleName[24089-24105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24049-24133]:Block[24108-24192]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[24055-24129]:IfStatement[24114-24188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24098-24129]:Block[24157-24188]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[24106-24123]:ExpressionStatement[24165-24182]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24137-24144]:Modifier[24196-24203]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24145-24149]:PrimitiveType[24204-24208]"
    }, {
      "left" : "runSanityCheck",
      "right" : "runSanityCheck",
      "info" : "SimpleName[24150-24164]:SimpleName[24209-24223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24167-24231]:Block[24226-24290]"
    }, {
      "left" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "right" : "sanityCheck.create(this).process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[24173-24227]:ExpressionStatement[24232-24286]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24311-24315]:PrimitiveType[24370-24374]"
    }, {
      "left" : "removeTryCatchFinally",
      "right" : "removeTryCatchFinally",
      "info" : "SimpleName[24316-24337]:SimpleName[24375-24396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24340-24510]:Block[24399-24569]"
    }, {
      "left" : "logger.info(\"Remove try/catch/finally\");",
      "right" : "logger.info(\"Remove try/catch/finally\");",
      "info" : "ExpressionStatement[24346-24386]:ExpressionStatement[24405-24445]"
    }, {
      "left" : "startPass(\"removeTryCatchFinally\");",
      "right" : "startPass(\"removeTryCatchFinally\");",
      "info" : "ExpressionStatement[24391-24426]:ExpressionStatement[24450-24485]"
    }, {
      "left" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "right" : "RemoveTryCatch r = new RemoveTryCatch(this);",
      "info" : "VariableDeclarationStatement[24431-24475]:VariableDeclarationStatement[24490-24534]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[24480-24491]:ExpressionStatement[24539-24550]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[24496-24506]:ExpressionStatement[24555-24565]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24654-24658]:PrimitiveType[24713-24717]"
    }, {
      "left" : "stripCode",
      "right" : "stripCode",
      "info" : "SimpleName[24659-24668]:SimpleName[24718-24727]"
    }, {
      "left" : "Set<String> stripTypes",
      "right" : "Set<String> stripTypes",
      "info" : "SingleVariableDeclaration[24669-24691]:SingleVariableDeclaration[24728-24750]"
    }, {
      "left" : "Set<String> stripNameSuffixes",
      "right" : "Set<String> stripNameSuffixes",
      "info" : "SingleVariableDeclaration[24693-24722]:SingleVariableDeclaration[24752-24781]"
    }, {
      "left" : "Set<String> stripTypePrefixes",
      "right" : "Set<String> stripTypePrefixes",
      "info" : "SingleVariableDeclaration[24730-24759]:SingleVariableDeclaration[24789-24818]"
    }, {
      "left" : "Set<String> stripNamePrefixes",
      "right" : "Set<String> stripNamePrefixes",
      "info" : "SingleVariableDeclaration[24761-24790]:SingleVariableDeclaration[24820-24849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24792-25095]:Block[24851-25154]"
    }, {
      "left" : "logger.info(\"Strip code\");",
      "right" : "logger.info(\"Strip code\");",
      "info" : "ExpressionStatement[24798-24824]:ExpressionStatement[24857-24883]"
    }, {
      "left" : "startPass(\"stripCode\");",
      "right" : "startPass(\"stripCode\");",
      "info" : "ExpressionStatement[24829-24852]:ExpressionStatement[24888-24911]"
    }, {
      "left" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "right" : "StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n        stripTypePrefixes, stripNamePrefixes);",
      "info" : "VariableDeclarationStatement[24857-24968]:VariableDeclarationStatement[24916-25027]"
    }, {
      "left" : "if (options.getTweakProcessing().shouldStrip())",
      "right" : "if (options.getTweakProcessing().shouldStrip())",
      "info" : "IfStatement[24973-25060]:IfStatement[25032-25119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25021-25060]:Block[25080-25119]"
    }, {
      "left" : "r.enableTweakStripping();",
      "right" : "r.enableTweakStripping();",
      "info" : "ExpressionStatement[25029-25054]:ExpressionStatement[25088-25113]"
    }, {
      "left" : "process(r);",
      "right" : "process(r);",
      "info" : "ExpressionStatement[25065-25076]:ExpressionStatement[25124-25135]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[25081-25091]:ExpressionStatement[25140-25150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25184-25191]:Modifier[25243-25250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25192-25196]:PrimitiveType[25251-25255]"
    }, {
      "left" : "runCustomPasses",
      "right" : "runCustomPasses",
      "info" : "SimpleName[25197-25212]:SimpleName[25256-25271]"
    }, {
      "left" : "CustomPassExecutionTime executionTime",
      "right" : "CustomPassExecutionTime executionTime",
      "info" : "SingleVariableDeclaration[25213-25250]:SingleVariableDeclaration[25272-25309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25252-25535]:Block[25311-25594]"
    }, {
      "left" : "if (options.customPasses != null)",
      "right" : "if (options.customPasses != null)",
      "info" : "IfStatement[25258-25531]:IfStatement[25317-25590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25292-25531]:Block[25351-25590]"
    }, {
      "left" : "Tracer t = newTracer(\"runCustomPasses\");",
      "right" : "Tracer t = newTracer(\"runCustomPasses\");",
      "info" : "VariableDeclarationStatement[25300-25340]:VariableDeclarationStatement[25359-25399]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25347-25525]:TryStatement[25406-25584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25351-25465]:Block[25410-25524]"
    }, {
      "left" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "right" : "for (CompilerPass p : options.customPasses.get(executionTime))",
      "info" : "EnhancedForStatement[25361-25457]:EnhancedForStatement[25420-25516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25424-25457]:Block[25483-25516]"
    }, {
      "left" : "process(p);",
      "right" : "process(p);",
      "info" : "ExpressionStatement[25436-25447]:ExpressionStatement[25495-25506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25474-25525]:Block[25533-25584]"
    }, {
      "left" : "stopTracer(t, \"runCustomPasses\");",
      "right" : "stopTracer(t, \"runCustomPasses\");",
      "info" : "ExpressionStatement[25484-25517]:ExpressionStatement[25543-25576]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25668-25672]:PrimitiveType[25727-25731]"
    }, {
      "left" : "startPass",
      "right" : "startPass",
      "info" : "SimpleName[25673-25682]:SimpleName[25732-25741]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[25683-25698]:SingleVariableDeclaration[25742-25757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25700-25831]:Block[25759-25890]"
    }, {
      "left" : "Preconditions.checkState(currentTracer == null);",
      "right" : "Preconditions.checkState(currentTracer == null);",
      "info" : "ExpressionStatement[25706-25754]:ExpressionStatement[25765-25813]"
    }, {
      "left" : "currentPassName = passName;",
      "right" : "currentPassName = passName;",
      "info" : "ExpressionStatement[25759-25786]:ExpressionStatement[25818-25845]"
    }, {
      "left" : "currentTracer = newTracer(passName);",
      "right" : "currentTracer = newTracer(passName);",
      "info" : "ExpressionStatement[25791-25827]:ExpressionStatement[25850-25886]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25877-25881]:PrimitiveType[25936-25940]"
    }, {
      "left" : "endPass",
      "right" : "endPass",
      "info" : "SimpleName[25882-25889]:SimpleName[25941-25948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25892-26178]:Block[25951-26237]"
    }, {
      "left" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "right" : "Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");",
      "info" : "ExpressionStatement[25898-26005]:ExpressionStatement[25957-26064]"
    }, {
      "left" : "stopTracer(currentTracer, currentPassName);",
      "right" : "stopTracer(currentTracer, currentPassName);",
      "info" : "ExpressionStatement[26010-26053]:ExpressionStatement[26069-26112]"
    }, {
      "left" : "String passToCheck = currentPassName;",
      "right" : "String passToCheck = currentPassName;",
      "info" : "VariableDeclarationStatement[26058-26095]:VariableDeclarationStatement[26117-26154]"
    }, {
      "left" : "currentPassName = null;",
      "right" : "currentPassName = null;",
      "info" : "ExpressionStatement[26100-26123]:ExpressionStatement[26159-26182]"
    }, {
      "left" : "currentTracer = null;",
      "right" : "currentTracer = null;",
      "info" : "ExpressionStatement[26128-26149]:ExpressionStatement[26187-26208]"
    }, {
      "left" : "maybeSanityCheck();",
      "right" : "maybeSanityCheck();",
      "info" : "ExpressionStatement[26155-26174]:ExpressionStatement[26214-26233]"
    }, {
      "left" : "Tracer",
      "right" : "Tracer",
      "info" : "SimpleType[26245-26251]:SimpleType[26304-26310]"
    }, {
      "left" : "newTracer",
      "right" : "newTracer",
      "info" : "SimpleName[26252-26261]:SimpleName[26311-26320]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[26262-26277]:SingleVariableDeclaration[26321-26336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26279-26515]:Block[26338-26574]"
    }, {
      "left" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "right" : "String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");",
      "info" : "VariableDeclarationStatement[26285-26387]:VariableDeclarationStatement[26344-26446]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[26392-26467]:IfStatement[26451-26526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26419-26467]:Block[26478-26526]"
    }, {
      "left" : "tracker.recordPassStart(passName);",
      "right" : "tracker.recordPassStart(passName);",
      "info" : "ExpressionStatement[26427-26461]:ExpressionStatement[26486-26520]"
    }, {
      "left" : "return new Tracer(\"Compiler\", comment);",
      "right" : "return new Tracer(\"Compiler\", comment);",
      "info" : "ReturnStatement[26472-26511]:ReturnStatement[26531-26570]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26519-26523]:PrimitiveType[26578-26582]"
    }, {
      "left" : "stopTracer",
      "right" : "stopTracer",
      "info" : "SimpleName[26524-26534]:SimpleName[26583-26593]"
    }, {
      "left" : "Tracer t",
      "right" : "Tracer t",
      "info" : "SingleVariableDeclaration[26535-26543]:SingleVariableDeclaration[26594-26602]"
    }, {
      "left" : "String passName",
      "right" : "String passName",
      "info" : "SingleVariableDeclaration[26545-26560]:SingleVariableDeclaration[26604-26619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26562-26682]:Block[26621-26741]"
    }, {
      "left" : "long result = t.stop();",
      "right" : "long result = t.stop();",
      "info" : "VariableDeclarationStatement[26568-26591]:VariableDeclarationStatement[26627-26650]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[26596-26678]:IfStatement[26655-26737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26623-26678]:Block[26682-26737]"
    }, {
      "left" : "tracker.recordPassStop(passName, result);",
      "right" : "tracker.recordPassStop(passName, result);",
      "info" : "ExpressionStatement[26631-26672]:ExpressionStatement[26690-26731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26742-26748]:Modifier[26801-26807]"
    }, {
      "left" : "Result",
      "right" : "Result",
      "info" : "SimpleType[26749-26755]:SimpleType[26808-26814]"
    }, {
      "left" : "getResult",
      "right" : "getResult",
      "info" : "SimpleName[26756-26765]:SimpleName[26815-26824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26768-27113]:Block[26827-27172]"
    }, {
      "left" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "right" : "PassConfig.State state = getPassConfig().getIntermediateState();",
      "info" : "VariableDeclarationStatement[26774-26838]:VariableDeclarationStatement[26833-26897]"
    }, {
      "left" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "right" : "return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);",
      "info" : "ReturnStatement[26843-27109]:ReturnStatement[26902-27168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27197-27203]:Modifier[27256-27262]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[27204-27213]:ArrayType[27263-27272]"
    }, {
      "left" : "getMessages",
      "right" : "getMessages",
      "info" : "SimpleName[27214-27225]:SimpleName[27273-27284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27228-27257]:Block[27287-27316]"
    }, {
      "left" : "return getErrors();",
      "right" : "return getErrors();",
      "info" : "ReturnStatement[27234-27253]:ReturnStatement[27293-27312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27320-27326]:Modifier[27379-27385]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[27327-27336]:ArrayType[27386-27395]"
    }, {
      "left" : "getErrors",
      "right" : "getErrors",
      "info" : "SimpleName[27337-27346]:SimpleName[27396-27405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27349-27391]:Block[27408-27450]"
    }, {
      "left" : "return errorManager.getErrors();",
      "right" : "return errorManager.getErrors();",
      "info" : "ReturnStatement[27355-27387]:ReturnStatement[27414-27446]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27456-27462]:Modifier[27515-27521]"
    }, {
      "left" : "JSError[]",
      "right" : "JSError[]",
      "info" : "ArrayType[27463-27472]:ArrayType[27522-27531]"
    }, {
      "left" : "getWarnings",
      "right" : "getWarnings",
      "info" : "SimpleName[27473-27484]:SimpleName[27532-27543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27487-27531]:Block[27546-27590]"
    }, {
      "left" : "return errorManager.getWarnings();",
      "right" : "return errorManager.getWarnings();",
      "info" : "ReturnStatement[27493-27527]:ReturnStatement[27552-27586]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27535-27544]:MarkerAnnotation[27594-27603]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27547-27553]:Modifier[27606-27612]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27554-27558]:SimpleType[27613-27617]"
    }, {
      "left" : "getRoot",
      "right" : "getRoot",
      "info" : "SimpleName[27559-27566]:SimpleName[27618-27625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27569-27602]:Block[27628-27661]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[27575-27598]:ReturnStatement[27634-27657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27665-27672]:Modifier[27724-27731]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27673-27676]:PrimitiveType[27732-27735]"
    }, {
      "left" : "nextUniqueNameId",
      "right" : "nextUniqueNameId",
      "info" : "SimpleName[27677-27693]:SimpleName[27736-27752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27696-27728]:Block[27755-27787]"
    }, {
      "left" : "return uniqueNameId++;",
      "right" : "return uniqueNameId++;",
      "info" : "ReturnStatement[27702-27724]:ReturnStatement[27761-27783]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[27783-27801]:MarkerAnnotation[27842-27860]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27804-27808]:PrimitiveType[27863-27867]"
    }, {
      "left" : "resetUniqueNameId",
      "right" : "resetUniqueNameId",
      "info" : "SimpleName[27809-27826]:SimpleName[27868-27885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27829-27856]:Block[27888-27915]"
    }, {
      "left" : "uniqueNameId = 0;",
      "right" : "uniqueNameId = 0;",
      "info" : "ExpressionStatement[27835-27852]:ExpressionStatement[27894-27911]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27860-27869]:MarkerAnnotation[27919-27928]"
    }, {
      "left" : "Supplier<String>",
      "right" : "Supplier<String>",
      "info" : "ParameterizedType[27872-27888]:ParameterizedType[27931-27947]"
    }, {
      "left" : "getUniqueNameIdSupplier",
      "right" : "getUniqueNameIdSupplier",
      "info" : "SimpleName[27889-27912]:SimpleName[27948-27971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27915-28087]:Block[27974-28146]"
    }, {
      "left" : "final Compiler self = this;",
      "right" : "final Compiler self = this;",
      "info" : "VariableDeclarationStatement[27921-27948]:VariableDeclarationStatement[27980-28007]"
    }, {
      "left" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "right" : "return new Supplier<String>() {\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };",
      "info" : "ReturnStatement[27953-28083]:ReturnStatement[28012-28142]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27991-27997]:Modifier[28050-28056]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27998-28004]:SimpleType[28057-28063]"
    }, {
      "left" : "get",
      "right" : "get",
      "info" : "SimpleName[28005-28008]:SimpleName[28064-28067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28011-28076]:Block[28070-28135]"
    }, {
      "left" : "return String.valueOf(self.nextUniqueNameId());",
      "right" : "return String.valueOf(self.nextUniqueNameId());",
      "info" : "ReturnStatement[28021-28068]:ReturnStatement[28080-28127]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28091-28100]:MarkerAnnotation[28150-28159]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28103-28110]:PrimitiveType[28162-28169]"
    }, {
      "left" : "areNodesEqualForInlining",
      "right" : "areNodesEqualForInlining",
      "info" : "SimpleName[28111-28135]:SimpleName[28170-28194]"
    }, {
      "left" : "Node n1",
      "right" : "Node n1",
      "info" : "SingleVariableDeclaration[28136-28143]:SingleVariableDeclaration[28195-28202]"
    }, {
      "left" : "Node n2",
      "right" : "Node n2",
      "info" : "SingleVariableDeclaration[28145-28152]:SingleVariableDeclaration[28204-28211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28154-28454]:Block[28213-28513]"
    }, {
      "left" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "right" : "if (options.ambiguateProperties ||\n        options.disambiguateProperties)",
      "info" : "IfStatement[28160-28450]:IfStatement[28219-28509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28235-28401]:Block[28294-28460]"
    }, {
      "left" : "return n1.isEquivalentToTyped(n2);",
      "right" : "return n1.isEquivalentToTyped(n2);",
      "info" : "ReturnStatement[28361-28395]:ReturnStatement[28420-28454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28407-28450]:Block[28466-28509]"
    }, {
      "left" : "return n1.isEquivalentTo(n2);",
      "right" : "return n1.isEquivalentTo(n2);",
      "info" : "ReturnStatement[28415-28444]:ReturnStatement[28474-28503]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28765-28774]:MarkerAnnotation[28824-28833]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28777-28783]:Modifier[28836-28842]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[28784-28797]:SimpleType[28843-28856]"
    }, {
      "left" : "getInput",
      "right" : "getInput",
      "info" : "SimpleName[28798-28806]:SimpleName[28857-28865]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[28807-28818]:SingleVariableDeclaration[28866-28877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28820-28860]:Block[28879-28919]"
    }, {
      "left" : "return inputsByName.get(name);",
      "right" : "return inputsByName.get(name);",
      "info" : "ReturnStatement[28826-28856]:ReturnStatement[28885-28915]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[28966-28975]:Modifier[29025-29034]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28976-28980]:PrimitiveType[29035-29039]"
    }, {
      "left" : "removeExternInput",
      "right" : "removeExternInput",
      "info" : "SimpleName[28981-28998]:SimpleName[29040-29057]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[28999-29010]:SingleVariableDeclaration[29058-29069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29012-29362]:Block[29071-29421]"
    }, {
      "left" : "CompilerInput input = getInput(name);",
      "right" : "CompilerInput input = getInput(name);",
      "info" : "VariableDeclarationStatement[29018-29055]:VariableDeclarationStatement[29077-29114]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[29060-29100]:IfStatement[29119-29159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29079-29100]:Block[29138-29159]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29087-29094]:ReturnStatement[29146-29153]"
    }, {
      "left" : "Preconditions.checkState(input.isExtern(), \"Not an extern input: \"\n        + input.getName());",
      "right" : "Preconditions.checkState(input.isExtern(), \"Not an extern input: \"\n        + input.getName());",
      "info" : "ExpressionStatement[29105-29199]:ExpressionStatement[29164-29258]"
    }, {
      "left" : "inputsByName.remove(name);",
      "right" : "inputsByName.remove(name);",
      "info" : "ExpressionStatement[29204-29230]:ExpressionStatement[29263-29289]"
    }, {
      "left" : "externs.remove(input);",
      "right" : "externs.remove(input);",
      "info" : "ExpressionStatement[29235-29257]:ExpressionStatement[29294-29316]"
    }, {
      "left" : "Node root = input.getAstRoot(this);",
      "right" : "Node root = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[29262-29297]:VariableDeclarationStatement[29321-29356]"
    }, {
      "left" : "if (root != null)",
      "right" : "if (root != null)",
      "info" : "IfStatement[29302-29358]:IfStatement[29361-29417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29320-29358]:Block[29379-29417]"
    }, {
      "left" : "root.detachFromParent();",
      "right" : "root.detachFromParent();",
      "info" : "ExpressionStatement[29328-29352]:ExpressionStatement[29387-29411]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29366-29375]:MarkerAnnotation[29425-29434]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29378-29384]:Modifier[29437-29443]"
    }, {
      "left" : "CompilerInput",
      "right" : "CompilerInput",
      "info" : "SimpleType[29385-29398]:SimpleType[29444-29457]"
    }, {
      "left" : "newExternInput",
      "right" : "newExternInput",
      "info" : "SimpleName[29399-29413]:SimpleName[29458-29472]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[29414-29425]:SingleVariableDeclaration[29473-29484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29427-29800]:Block[29486-29859]"
    }, {
      "left" : "if (inputsByName.containsKey(name))",
      "right" : "if (inputsByName.containsKey(name))",
      "info" : "IfStatement[29433-29555]:IfStatement[29492-29614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29469-29555]:Block[29528-29614]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "right" : "throw new IllegalArgumentException(\"Conflicting externs name: \" + name);",
      "info" : "ThrowStatement[29477-29549]:ThrowStatement[29536-29608]"
    }, {
      "left" : "SourceAst ast = new SyntheticAst(name);",
      "right" : "SourceAst ast = new SyntheticAst(name);",
      "info" : "VariableDeclarationStatement[29560-29599]:VariableDeclarationStatement[29619-29658]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "right" : "CompilerInput input = new CompilerInput(ast, name, true);",
      "info" : "VariableDeclarationStatement[29604-29661]:VariableDeclarationStatement[29663-29720]"
    }, {
      "left" : "inputsByName.put(name, input);",
      "right" : "inputsByName.put(name, input);",
      "info" : "ExpressionStatement[29666-29696]:ExpressionStatement[29725-29755]"
    }, {
      "left" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "right" : "externsRoot.addChildToFront(ast.getAstRoot(this));",
      "info" : "ExpressionStatement[29701-29751]:ExpressionStatement[29760-29810]"
    }, {
      "left" : "externs.add(0, input);",
      "right" : "externs.add(0, input);",
      "info" : "ExpressionStatement[29756-29778]:ExpressionStatement[29815-29837]"
    }, {
      "left" : "return input;",
      "right" : "return input;",
      "info" : "ReturnStatement[29783-29796]:ReturnStatement[29842-29855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29883-29887]:PrimitiveType[29942-29946]"
    }, {
      "left" : "addIncrementalSourceAst",
      "right" : "addIncrementalSourceAst",
      "info" : "SimpleName[29888-29911]:SimpleName[29947-29970]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[29912-29921]:SingleVariableDeclaration[29971-29980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29923-30159]:Block[29982-30218]"
    }, {
      "left" : "String intputName = ast.getSourceFile().getName();",
      "right" : "String intputName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[29929-29979]:VariableDeclarationStatement[29988-30038]"
    }, {
      "left" : "Preconditions.checkState(\n        getInput(intputName) == null,\n        \"Duplicate input of name \" + intputName);",
      "right" : "Preconditions.checkState(\n        getInput(intputName) == null,\n        \"Duplicate input of name \" + intputName);",
      "info" : "ExpressionStatement[29984-30097]:ExpressionStatement[30043-30156]"
    }, {
      "left" : "inputsByName.put(intputName, new CompilerInput(ast));",
      "right" : "inputsByName.put(intputName, new CompilerInput(ast));",
      "info" : "ExpressionStatement[30102-30155]:ExpressionStatement[30161-30214]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30434-30441]:PrimitiveType[30493-30500]"
    }, {
      "left" : "replaceIncrementalSourceAst",
      "right" : "replaceIncrementalSourceAst",
      "info" : "SimpleName[30442-30469]:SimpleName[30501-30528]"
    }, {
      "left" : "JsAst ast",
      "right" : "JsAst ast",
      "info" : "SingleVariableDeclaration[30470-30479]:SingleVariableDeclaration[30529-30538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30481-31254]:Block[30540-31313]"
    }, {
      "left" : "String inputName = ast.getSourceFile().getName();",
      "right" : "String inputName = ast.getSourceFile().getName();",
      "info" : "VariableDeclarationStatement[30487-30536]:VariableDeclarationStatement[30546-30595]"
    }, {
      "left" : "CompilerInput oldInput =\n        Preconditions.checkNotNull(\n            getInput(inputName),\n            \"No input to replace: \" + inputName);",
      "right" : "CompilerInput oldInput =\n        Preconditions.checkNotNull(\n            getInput(inputName),\n            \"No input to replace: \" + inputName);",
      "info" : "VariableDeclarationStatement[30541-30684]:VariableDeclarationStatement[30600-30743]"
    }, {
      "left" : "Node newRoot = ast.getAstRoot(this);",
      "right" : "Node newRoot = ast.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30689-30725]:VariableDeclarationStatement[30748-30784]"
    }, {
      "left" : "if (newRoot == null)",
      "right" : "if (newRoot == null)",
      "info" : "IfStatement[30730-30778]:IfStatement[30789-30837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30751-30778]:Block[30810-30837]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30759-30772]:ReturnStatement[30818-30831]"
    }, {
      "left" : "Node oldRoot = oldInput.getAstRoot(this);",
      "right" : "Node oldRoot = oldInput.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[30784-30825]:VariableDeclarationStatement[30843-30884]"
    }, {
      "left" : "if (oldRoot != null)",
      "right" : "if (oldRoot != null)",
      "info" : "IfStatement[30830-30985]:IfStatement[30889-31044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30851-30916]:Block[30910-30975]"
    }, {
      "left" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "right" : "oldRoot.getParent().replaceChild(oldRoot, newRoot);",
      "info" : "ExpressionStatement[30859-30910]:ExpressionStatement[30918-30969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30922-30985]:Block[30981-31044]"
    }, {
      "left" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "right" : "getRoot().getLastChild().addChildToBack(newRoot);",
      "info" : "ExpressionStatement[30930-30979]:ExpressionStatement[30989-31038]"
    }, {
      "left" : "CompilerInput newInput = new CompilerInput(ast);",
      "right" : "CompilerInput newInput = new CompilerInput(ast);",
      "info" : "VariableDeclarationStatement[30991-31039]:VariableDeclarationStatement[31050-31098]"
    }, {
      "left" : "inputsByName.put(inputName, newInput);",
      "right" : "inputsByName.put(inputName, newInput);",
      "info" : "ExpressionStatement[31044-31082]:ExpressionStatement[31103-31141]"
    }, {
      "left" : "JSModule module = oldInput.getModule();",
      "right" : "JSModule module = oldInput.getModule();",
      "info" : "VariableDeclarationStatement[31088-31127]:VariableDeclarationStatement[31147-31186]"
    }, {
      "left" : "if (module != null)",
      "right" : "if (module != null)",
      "info" : "IfStatement[31132-31233]:IfStatement[31191-31292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31152-31233]:Block[31211-31292]"
    }, {
      "left" : "module.addAfter(newInput, oldInput);",
      "right" : "module.addAfter(newInput, oldInput);",
      "info" : "ExpressionStatement[31160-31196]:ExpressionStatement[31219-31255]"
    }, {
      "left" : "module.remove(oldInput);",
      "right" : "module.remove(oldInput);",
      "info" : "ExpressionStatement[31203-31227]:ExpressionStatement[31262-31286]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31238-31250]:ReturnStatement[31297-31309]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31258-31267]:MarkerAnnotation[31317-31326]"
    }, {
      "left" : "JSModuleGraph",
      "right" : "JSModuleGraph",
      "info" : "SimpleType[31270-31283]:SimpleType[31329-31342]"
    }, {
      "left" : "getModuleGraph",
      "right" : "getModuleGraph",
      "info" : "SimpleName[31284-31298]:SimpleName[31343-31357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31301-31330]:Block[31360-31389]"
    }, {
      "left" : "return moduleGraph;",
      "right" : "return moduleGraph;",
      "info" : "ReturnStatement[31307-31326]:ReturnStatement[31366-31385]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31334-31343]:MarkerAnnotation[31393-31402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31346-31352]:Modifier[31405-31411]"
    }, {
      "left" : "JSTypeRegistry",
      "right" : "JSTypeRegistry",
      "info" : "SimpleType[31353-31367]:SimpleType[31412-31426]"
    }, {
      "left" : "getTypeRegistry",
      "right" : "getTypeRegistry",
      "info" : "SimpleName[31368-31383]:SimpleName[31427-31442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31386-31533]:Block[31445-31592]"
    }, {
      "left" : "if (typeRegistry == null)",
      "right" : "if (typeRegistry == null)",
      "info" : "IfStatement[31392-31504]:IfStatement[31451-31563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31418-31504]:Block[31477-31563]"
    }, {
      "left" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "right" : "typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);",
      "info" : "ExpressionStatement[31426-31498]:ExpressionStatement[31485-31557]"
    }, {
      "left" : "return typeRegistry;",
      "right" : "return typeRegistry;",
      "info" : "ReturnStatement[31509-31529]:ReturnStatement[31568-31588]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31537-31546]:MarkerAnnotation[31596-31605]"
    }, {
      "left" : "MemoizedScopeCreator",
      "right" : "MemoizedScopeCreator",
      "info" : "SimpleType[31549-31569]:SimpleType[31608-31628]"
    }, {
      "left" : "getTypedScopeCreator",
      "right" : "getTypedScopeCreator",
      "info" : "SimpleName[31570-31590]:SimpleName[31629-31649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31593-31649]:Block[31652-31708]"
    }, {
      "left" : "return getPassConfig().getTypedScopeCreator();",
      "right" : "return getPassConfig().getTypedScopeCreator();",
      "info" : "ReturnStatement[31599-31645]:ReturnStatement[31658-31704]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[31653-31683]:SingleMemberAnnotation[31712-31742]"
    }, {
      "left" : "DefaultPassConfig",
      "right" : "DefaultPassConfig",
      "info" : "SimpleType[31686-31703]:SimpleType[31745-31762]"
    }, {
      "left" : "ensureDefaultPassConfig",
      "right" : "ensureDefaultPassConfig",
      "info" : "SimpleName[31704-31727]:SimpleName[31763-31786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31730-31975]:Block[31789-32034]"
    }, {
      "left" : "PassConfig passes = getPassConfig().getBasePassConfig();",
      "right" : "PassConfig passes = getPassConfig().getBasePassConfig();",
      "info" : "VariableDeclarationStatement[31736-31792]:VariableDeclarationStatement[31795-31851]"
    }, {
      "left" : "Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");",
      "right" : "Preconditions.checkState(passes instanceof DefaultPassConfig,\n        \"PassConfigs must eventually delegate to the DefaultPassConfig\");",
      "info" : "ExpressionStatement[31797-31932]:ExpressionStatement[31856-31991]"
    }, {
      "left" : "return (DefaultPassConfig) passes;",
      "right" : "return (DefaultPassConfig) passes;",
      "info" : "ReturnStatement[31937-31971]:ReturnStatement[31996-32030]"
    }, {
      "left" : "SymbolTable",
      "right" : "SymbolTable",
      "info" : "SimpleType[31979-31990]:SimpleType[32038-32049]"
    }, {
      "left" : "buildKnownSymbolTable",
      "right" : "buildKnownSymbolTable",
      "info" : "SimpleName[31991-32012]:SimpleName[32050-32071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32015-32447]:Block[32074-32506]"
    }, {
      "left" : "SymbolTable symbolTable = new SymbolTable();",
      "right" : "SymbolTable symbolTable = new SymbolTable();",
      "info" : "VariableDeclarationStatement[32021-32065]:VariableDeclarationStatement[32080-32124]"
    }, {
      "left" : "MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();",
      "right" : "MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();",
      "info" : "VariableDeclarationStatement[32071-32135]:VariableDeclarationStatement[32130-32194]"
    }, {
      "left" : "if (typedScopeCreator != null)",
      "right" : "if (typedScopeCreator != null)",
      "info" : "IfStatement[32140-32231]:IfStatement[32199-32290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32171-32231]:Block[32230-32290]"
    }, {
      "left" : "symbolTable.addSymbolsFrom(typedScopeCreator);",
      "right" : "symbolTable.addSymbolsFrom(typedScopeCreator);",
      "info" : "ExpressionStatement[32179-32225]:ExpressionStatement[32238-32284]"
    }, {
      "left" : "GlobalNamespace globalNamespace =\n        ensureDefaultPassConfig().getGlobalNamespace();",
      "right" : "GlobalNamespace globalNamespace =\n        ensureDefaultPassConfig().getGlobalNamespace();",
      "info" : "VariableDeclarationStatement[32237-32326]:VariableDeclarationStatement[32296-32385]"
    }, {
      "left" : "if (globalNamespace != null)",
      "right" : "if (globalNamespace != null)",
      "info" : "IfStatement[32331-32418]:IfStatement[32390-32477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32360-32418]:Block[32419-32477]"
    }, {
      "left" : "symbolTable.addSymbolsFrom(globalNamespace);",
      "right" : "symbolTable.addSymbolsFrom(globalNamespace);",
      "info" : "ExpressionStatement[32368-32412]:ExpressionStatement[32427-32471]"
    }, {
      "left" : "return symbolTable;",
      "right" : "return symbolTable;",
      "info" : "ReturnStatement[32424-32443]:ReturnStatement[32483-32502]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32451-32460]:MarkerAnnotation[32510-32519]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32463-32469]:Modifier[32522-32528]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[32470-32475]:SimpleType[32529-32534]"
    }, {
      "left" : "getTopScope",
      "right" : "getTopScope",
      "info" : "SimpleName[32476-32487]:SimpleName[32535-32546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32490-32537]:Block[32549-32596]"
    }, {
      "left" : "return getPassConfig().getTopScope();",
      "right" : "return getPassConfig().getTopScope();",
      "info" : "ReturnStatement[32496-32533]:ReturnStatement[32555-32592]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32541-32550]:MarkerAnnotation[32600-32609]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32553-32559]:Modifier[32612-32618]"
    }, {
      "left" : "ReverseAbstractInterpreter",
      "right" : "ReverseAbstractInterpreter",
      "info" : "SimpleType[32560-32586]:SimpleType[32619-32645]"
    }, {
      "left" : "getReverseAbstractInterpreter",
      "right" : "getReverseAbstractInterpreter",
      "info" : "SimpleName[32587-32616]:SimpleName[32646-32675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32619-33106]:Block[32678-33165]"
    }, {
      "left" : "if (abstractInterpreter == null)",
      "right" : "if (abstractInterpreter == null)",
      "info" : "IfStatement[32625-33070]:IfStatement[32684-33129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32658-33070]:Block[32717-33129]"
    }, {
      "left" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "right" : "ChainableReverseAbstractInterpreter interpreter =\n          new SemanticReverseAbstractInterpreter(\n              getCodingConvention(), getTypeRegistry());",
      "info" : "VariableDeclarationStatement[32666-32822]:VariableDeclarationStatement[32725-32881]"
    }, {
      "left" : "if (options.closurePass)",
      "right" : "if (options.closurePass)",
      "info" : "IfStatement[32829-33023]:IfStatement[32888-33082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32854-33023]:Block[32913-33082]"
    }, {
      "left" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "right" : "interpreter = new ClosureReverseAbstractInterpreter(\n            getCodingConvention(), getTypeRegistry())\n            .append(interpreter).getFirst();",
      "info" : "ExpressionStatement[32864-33015]:ExpressionStatement[32923-33074]"
    }, {
      "left" : "abstractInterpreter = interpreter;",
      "right" : "abstractInterpreter = interpreter;",
      "info" : "ExpressionStatement[33030-33064]:ExpressionStatement[33089-33123]"
    }, {
      "left" : "return abstractInterpreter;",
      "right" : "return abstractInterpreter;",
      "info" : "ReturnStatement[33075-33102]:ReturnStatement[33134-33161]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33110-33119]:MarkerAnnotation[33169-33178]"
    }, {
      "left" : "TypeValidator",
      "right" : "TypeValidator",
      "info" : "SimpleType[33122-33135]:SimpleType[33181-33194]"
    }, {
      "left" : "getTypeValidator",
      "right" : "getTypeValidator",
      "info" : "SimpleName[33136-33152]:SimpleName[33195-33211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33155-33272]:Block[33214-33331]"
    }, {
      "left" : "if (typeValidator == null)",
      "right" : "if (typeValidator == null)",
      "info" : "IfStatement[33161-33242]:IfStatement[33220-33301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33188-33242]:Block[33247-33301]"
    }, {
      "left" : "typeValidator = new TypeValidator(this);",
      "right" : "typeValidator = new TypeValidator(this);",
      "info" : "ExpressionStatement[33196-33236]:ExpressionStatement[33255-33295]"
    }, {
      "left" : "return typeValidator;",
      "right" : "return typeValidator;",
      "info" : "ReturnStatement[33247-33268]:ReturnStatement[33306-33327]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[33604-33608]:SimpleType[33663-33667]"
    }, {
      "left" : "parseInputs",
      "right" : "parseInputs",
      "info" : "SimpleName[33609-33620]:SimpleName[33668-33679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33623-37730]:Block[33682-37789]"
    }, {
      "left" : "boolean devMode = options.devMode != DevMode.OFF;",
      "right" : "boolean devMode = options.devMode != DevMode.OFF;",
      "info" : "VariableDeclarationStatement[33629-33678]:VariableDeclarationStatement[33688-33737]"
    }, {
      "left" : "if (externsRoot != null)",
      "right" : "if (externsRoot != null)",
      "info" : "IfStatement[33797-33865]:IfStatement[33856-33924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33822-33865]:Block[33881-33924]"
    }, {
      "left" : "externsRoot.detachChildren();",
      "right" : "externsRoot.detachChildren();",
      "info" : "ExpressionStatement[33830-33859]:ExpressionStatement[33889-33918]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[33870-33928]:IfStatement[33929-33987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33890-33928]:Block[33949-33987]"
    }, {
      "left" : "jsRoot.detachChildren();",
      "right" : "jsRoot.detachChildren();",
      "info" : "ExpressionStatement[33898-33922]:ExpressionStatement[33957-33981]"
    }, {
      "left" : "jsRoot = new Node(Token.BLOCK);",
      "right" : "jsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[33964-33995]:ExpressionStatement[34023-34054]"
    }, {
      "left" : "jsRoot.setIsSyntheticBlock(true);",
      "right" : "jsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[34000-34033]:ExpressionStatement[34059-34092]"
    }, {
      "left" : "externsRoot = new Node(Token.BLOCK);",
      "right" : "externsRoot = new Node(Token.BLOCK);",
      "info" : "ExpressionStatement[34039-34075]:ExpressionStatement[34098-34134]"
    }, {
      "left" : "externsRoot.setIsSyntheticBlock(true);",
      "right" : "externsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[34080-34118]:ExpressionStatement[34139-34177]"
    }, {
      "left" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "right" : "externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);",
      "info" : "ExpressionStatement[34124-34185]:ExpressionStatement[34183-34244]"
    }, {
      "left" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "right" : "externAndJsRoot.setIsSyntheticBlock(true);",
      "info" : "ExpressionStatement[34190-34232]:ExpressionStatement[34249-34291]"
    }, {
      "left" : "if (options.tracer.isOn())",
      "right" : "if (options.tracer.isOn())",
      "info" : "IfStatement[34238-34420]:IfStatement[34297-34479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34265-34420]:Block[34324-34479]"
    }, {
      "left" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "right" : "tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);",
      "info" : "ExpressionStatement[34273-34358]:ExpressionStatement[34332-34417]"
    }, {
      "left" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "right" : "addChangeHandler(tracker.getCodeChangeHandler());",
      "info" : "ExpressionStatement[34365-34414]:ExpressionStatement[34424-34473]"
    }, {
      "left" : "Tracer tracer = newTracer(\"parseInputs\");",
      "right" : "Tracer tracer = newTracer(\"parseInputs\");",
      "info" : "VariableDeclarationStatement[34426-34467]:VariableDeclarationStatement[34485-34526]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34473-37726]:TryStatement[34532-37785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34477-37669]:Block[34536-37728]"
    }, {
      "left" : "for (CompilerInput input : externs)",
      "right" : "for (CompilerInput input : externs)",
      "info" : "EnhancedForStatement[34517-34702]:EnhancedForStatement[34576-34761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34553-34702]:Block[34612-34761]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[34563-34595]:VariableDeclarationStatement[34622-34654]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[34604-34655]:IfStatement[34663-34714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34621-34655]:Block[34680-34714]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34633-34645]:ReturnStatement[34692-34704]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[34664-34694]:ExpressionStatement[34723-34753]"
    }, {
      "left" : "if (options.manageClosureDependencies)",
      "right" : "if (options.manageClosureDependencies)",
      "info" : "IfStatement[34763-35722]:IfStatement[34822-35781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34802-35722]:Block[34861-35781]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[34812-35158]:EnhancedForStatement[34871-35217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34847-35158]:Block[34906-35217]"
    }, {
      "left" : "input.setCompiler(this);",
      "right" : "input.setCompiler(this);",
      "info" : "ExpressionStatement[34859-34883]:ExpressionStatement[34918-34942]"
    }, {
      "left" : "for (String provide : input.getProvides())",
      "right" : "for (String provide : input.getProvides())",
      "info" : "EnhancedForStatement[35033-35148]:EnhancedForStatement[35092-35207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35076-35148]:Block[35135-35207]"
    }, {
      "left" : "getTypeRegistry().forwardDeclareType(provide);",
      "right" : "getTypeRegistry().forwardDeclareType(provide);",
      "info" : "ExpressionStatement[35090-35136]:ExpressionStatement[35149-35195]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35168-35714]:TryStatement[35227-35773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35172-35389]:Block[35231-35448]"
    }, {
      "left" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);",
      "right" : "inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);",
      "info" : "ExpressionStatement[35184-35379]:ExpressionStatement[35243-35438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35428-35561]:Block[35487-35620]"
    }, {
      "left" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[35440-35528]:ExpressionStatement[35499-35587]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35539-35551]:ReturnStatement[35598-35610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35596-35714]:Block[35655-35773]"
    }, {
      "left" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "right" : "report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));",
      "info" : "ExpressionStatement[35608-35681]:ExpressionStatement[35667-35740]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[35692-35704]:ReturnStatement[35751-35763]"
    }, {
      "left" : "boolean staleInputs = false;",
      "right" : "boolean staleInputs = false;",
      "info" : "VariableDeclarationStatement[35788-35816]:VariableDeclarationStatement[35847-35875]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[35823-36667]:EnhancedForStatement[35882-36726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35858-36667]:Block[35917-36726]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[35868-35900]:VariableDeclarationStatement[35927-35959]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[35970-36016]:IfStatement[36029-36075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35985-36016]:Block[36044-36075]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[35997-36006]:ContinueStatement[36056-36065]"
    }, {
      "left" : "if (n.getJSDocInfo() != null)",
      "right" : "if (n.getJSDocInfo() != null)",
      "info" : "IfStatement[36026-36659]:IfStatement[36085-36718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36056-36659]:Block[36115-36718]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[36068-36102]:VariableDeclarationStatement[36127-36161]"
    }, {
      "left" : "if (info.isExterns())",
      "right" : "if (info.isExterns())",
      "info" : "IfStatement[36113-36649]:IfStatement[36172-36708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36135-36529]:Block[36194-36588]"
    }, {
      "left" : "externsRoot.addChildToBack(n);",
      "right" : "externsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[36339-36369]:ExpressionStatement[36398-36428]"
    }, {
      "left" : "input.setIsExtern(true);",
      "right" : "input.setIsExtern(true);",
      "info" : "ExpressionStatement[36382-36406]:ExpressionStatement[36441-36465]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[36420-36452]:ExpressionStatement[36479-36511]"
    }, {
      "left" : "externs.add(input);",
      "right" : "externs.add(input);",
      "info" : "ExpressionStatement[36466-36485]:ExpressionStatement[36525-36544]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[36498-36517]:ExpressionStatement[36557-36576]"
    }, {
      "left" : "if (info.isNoCompile())",
      "right" : "if (info.isNoCompile())",
      "info" : "IfStatement[36535-36649]:IfStatement[36594-36708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36559-36649]:Block[36618-36708]"
    }, {
      "left" : "input.getModule().remove(input);",
      "right" : "input.getModule().remove(input);",
      "info" : "ExpressionStatement[36573-36605]:ExpressionStatement[36632-36664]"
    }, {
      "left" : "staleInputs = true;",
      "right" : "staleInputs = true;",
      "info" : "ExpressionStatement[36618-36637]:ExpressionStatement[36677-36696]"
    }, {
      "left" : "if (staleInputs)",
      "right" : "if (staleInputs)",
      "info" : "IfStatement[36675-36772]:IfStatement[36734-36831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36692-36772]:Block[36751-36831]"
    }, {
      "left" : "fillEmptyModules(modules);",
      "right" : "fillEmptyModules(modules);",
      "info" : "ExpressionStatement[36702-36728]:ExpressionStatement[36761-36787]"
    }, {
      "left" : "rebuildInputsFromModules();",
      "right" : "rebuildInputsFromModules();",
      "info" : "ExpressionStatement[36737-36764]:ExpressionStatement[36796-36823]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[36804-37578]:EnhancedForStatement[36863-37637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36839-37578]:Block[36898-37637]"
    }, {
      "left" : "Node n = input.getAstRoot(this);",
      "right" : "Node n = input.getAstRoot(this);",
      "info" : "VariableDeclarationStatement[36849-36881]:VariableDeclarationStatement[36908-36940]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[36890-36936]:IfStatement[36949-36995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36905-36936]:Block[36964-36995]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[36917-36926]:ContinueStatement[36976-36985]"
    }, {
      "left" : "if (devMode)",
      "right" : "if (devMode)",
      "info" : "IfStatement[36946-37064]:IfStatement[37005-37123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36959-37064]:Block[37018-37123]"
    }, {
      "left" : "runSanityCheck();",
      "right" : "runSanityCheck();",
      "info" : "ExpressionStatement[36971-36988]:ExpressionStatement[37030-37047]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[36999-37054]:IfStatement[37058-37113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37016-37054]:Block[37075-37113]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37030-37042]:ReturnStatement[37089-37101]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "right" : "if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null)",
      "info" : "IfStatement[37074-37535]:IfStatement[37133-37594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37170-37535]:Block[37229-37594]"
    }, {
      "left" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "right" : "SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);",
      "info" : "VariableDeclarationStatement[37331-37477]:VariableDeclarationStatement[37390-37536]"
    }, {
      "left" : "NodeTraversal.traverse(this, n, sia);",
      "right" : "NodeTraversal.traverse(this, n, sia);",
      "info" : "ExpressionStatement[37488-37525]:ExpressionStatement[37547-37584]"
    }, {
      "left" : "jsRoot.addChildToBack(n);",
      "right" : "jsRoot.addChildToBack(n);",
      "info" : "ExpressionStatement[37545-37570]:ExpressionStatement[37604-37629]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[37586-37633]:IfStatement[37645-37692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37603-37633]:Block[37662-37692]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[37613-37625]:ReturnStatement[37672-37684]"
    }, {
      "left" : "return externAndJsRoot;",
      "right" : "return externAndJsRoot;",
      "info" : "ReturnStatement[37640-37663]:ReturnStatement[37699-37722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37678-37726]:Block[37737-37785]"
    }, {
      "left" : "stopTracer(tracer, \"parseInputs\");",
      "right" : "stopTracer(tracer, \"parseInputs\");",
      "info" : "ExpressionStatement[37686-37720]:ExpressionStatement[37745-37779]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37734-37740]:Modifier[37793-37799]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[37741-37745]:SimpleType[37800-37804]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[37746-37751]:SimpleName[37805-37810]"
    }, {
      "left" : "JSSourceFile file",
      "right" : "JSSourceFile file",
      "info" : "SingleVariableDeclaration[37752-37769]:SingleVariableDeclaration[37811-37828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37771-37906]:Block[37830-37965]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[37777-37808]:ExpressionStatement[37836-37867]"
    }, {
      "left" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "right" : "addToDebugLog(\"Parsing: \" + file.getName());",
      "info" : "ExpressionStatement[37813-37857]:ExpressionStatement[37872-37916]"
    }, {
      "left" : "return new JsAst(file).getAstRoot(this);",
      "right" : "return new JsAst(file).getAstRoot(this);",
      "info" : "ReturnStatement[37862-37902]:ReturnStatement[37921-37961]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37910-37919]:MarkerAnnotation[37969-37978]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[37922-37926]:SimpleType[37981-37985]"
    }, {
      "left" : "parseSyntheticCode",
      "right" : "parseSyntheticCode",
      "info" : "SimpleName[37927-37945]:SimpleName[37986-38004]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[37946-37955]:SingleVariableDeclaration[38005-38014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37957-38141]:Block[38016-38200]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [synthetic] \", js));",
      "info" : "VariableDeclarationStatement[37963-38056]:VariableDeclarationStatement[38022-38115]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[38061-38102]:ExpressionStatement[38120-38161]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[38107-38137]:ReturnStatement[38166-38196]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38145-38149]:PrimitiveType[38204-38208]"
    }, {
      "left" : "initCompilerOptionsIfTesting",
      "right" : "initCompilerOptionsIfTesting",
      "info" : "SimpleName[38150-38178]:SimpleName[38209-38237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38181-38365]:Block[38240-38424]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[38187-38361]:IfStatement[38246-38420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38208-38361]:Block[38267-38420]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[38320-38355]:ExpressionStatement[38379-38414]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38369-38378]:MarkerAnnotation[38428-38437]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[38381-38385]:SimpleType[38440-38444]"
    }, {
      "left" : "parseSyntheticCode",
      "right" : "parseSyntheticCode",
      "info" : "SimpleName[38386-38404]:SimpleName[38445-38463]"
    }, {
      "left" : "String fileName",
      "right" : "String fileName",
      "info" : "SingleVariableDeclaration[38405-38420]:SingleVariableDeclaration[38464-38479]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[38422-38431]:SingleVariableDeclaration[38481-38490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38433-38529]:Block[38492-38588]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[38439-38470]:ExpressionStatement[38498-38529]"
    }, {
      "left" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "right" : "return parse(JSSourceFile.fromCode(fileName, js));",
      "info" : "ReturnStatement[38475-38525]:ReturnStatement[38534-38584]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38533-38542]:MarkerAnnotation[38592-38601]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[38545-38549]:SimpleType[38604-38608]"
    }, {
      "left" : "parseTestCode",
      "right" : "parseTestCode",
      "info" : "SimpleName[38550-38563]:SimpleName[38609-38622]"
    }, {
      "left" : "String js",
      "right" : "String js",
      "info" : "SingleVariableDeclaration[38564-38573]:SingleVariableDeclaration[38623-38632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38575-38872]:Block[38634-38931]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[38581-38612]:ExpressionStatement[38640-38671]"
    }, {
      "left" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "right" : "CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));",
      "info" : "VariableDeclarationStatement[38617-38709]:VariableDeclarationStatement[38676-38768]"
    }, {
      "left" : "if (inputsByName == null)",
      "right" : "if (inputsByName == null)",
      "info" : "IfStatement[38714-38787]:IfStatement[38773-38846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38740-38787]:Block[38799-38846]"
    }, {
      "left" : "inputsByName = Maps.newHashMap();",
      "right" : "inputsByName = Maps.newHashMap();",
      "info" : "ExpressionStatement[38748-38781]:ExpressionStatement[38807-38840]"
    }, {
      "left" : "inputsByName.put(input.getName(), input);",
      "right" : "inputsByName.put(input.getName(), input);",
      "info" : "ExpressionStatement[38792-38833]:ExpressionStatement[38851-38892]"
    }, {
      "left" : "return input.getAstRoot(this);",
      "right" : "return input.getAstRoot(this);",
      "info" : "ReturnStatement[38838-38868]:ReturnStatement[38897-38927]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38876-38885]:MarkerAnnotation[38935-38944]"
    }, {
      "left" : "ErrorReporter",
      "right" : "ErrorReporter",
      "info" : "SimpleType[38888-38901]:SimpleType[38947-38960]"
    }, {
      "left" : "getDefaultErrorReporter",
      "right" : "getDefaultErrorReporter",
      "info" : "SimpleName[38902-38925]:SimpleName[38961-38984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38928-38966]:Block[38987-39025]"
    }, {
      "left" : "return defaultErrorReporter;",
      "right" : "return defaultErrorReporter;",
      "info" : "ReturnStatement[38934-38962]:ReturnStatement[38993-39021]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39221-39227]:Modifier[39280-39286]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39228-39234]:SimpleType[39287-39293]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[39235-39243]:SimpleName[39294-39302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39246-39856]:Block[39305-39915]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[39252-39852]:ReturnStatement[39311-39911]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39310-39316]:Modifier[39369-39375]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39317-39323]:SimpleType[39376-39382]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[39324-39328]:SimpleName[39383-39387]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[39338-39347]:SimpleType[39397-39406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39348-39844]:Block[39407-39903]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSource\");",
      "right" : "Tracer tracer = newTracer(\"toSource\");",
      "info" : "VariableDeclarationStatement[39358-39396]:VariableDeclarationStatement[39417-39455]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[39405-39836]:TryStatement[39464-39895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39409-39774]:Block[39468-39833]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[39421-39456]:VariableDeclarationStatement[39480-39515]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[39467-39732]:IfStatement[39526-39791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39487-39732]:Block[39546-39791]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[39501-39511]:VariableDeclarationStatement[39560-39570]"
    }, {
      "left" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "right" : "for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext())",
      "info" : "ForStatement[39524-39720]:ForStatement[39583-39779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39660-39720]:Block[39719-39779]"
    }, {
      "left" : "toSource(cb, i++, scriptNode);",
      "right" : "toSource(cb, i++, scriptNode);",
      "info" : "ExpressionStatement[39676-39706]:ExpressionStatement[39735-39765]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[39743-39764]:ReturnStatement[39802-39823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39783-39836]:Block[39842-39895]"
    }, {
      "left" : "stopTracer(tracer, \"toSource\");",
      "right" : "stopTracer(tracer, \"toSource\");",
      "info" : "ExpressionStatement[39795-39826]:ExpressionStatement[39854-39885]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39933-39939]:Modifier[39992-39998]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[39940-39948]:ArrayType[39999-40007]"
    }, {
      "left" : "toSourceArray",
      "right" : "toSourceArray",
      "info" : "SimpleName[39949-39962]:SimpleName[40008-40021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39965-40636]:Block[40024-40695]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        Tracer tracer = newTracer(\"toSourceArray\");\n        try {\n          int numInputs = inputs.size();\n          String[] sources = new String[numInputs];\n          CodeBuilder cb = new CodeBuilder();\n          for (int i = 0; i < numInputs; i++) {\n            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n            cb.reset();\n            toSource(cb, i, scriptNode);\n            sources[i] = cb.toString();\n          }\n          return sources;\n        } finally {\n          stopTracer(tracer, \"toSourceArray\");\n        }\n      }\n    });",
      "info" : "ReturnStatement[39971-40632]:ReturnStatement[40030-40691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40031-40037]:Modifier[40090-40096]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[40038-40046]:ArrayType[40097-40105]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[40047-40051]:SimpleName[40106-40110]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[40061-40070]:SimpleType[40120-40129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40071-40624]:Block[40130-40683]"
    }, {
      "left" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "right" : "Tracer tracer = newTracer(\"toSourceArray\");",
      "info" : "VariableDeclarationStatement[40081-40124]:VariableDeclarationStatement[40140-40183]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[40133-40616]:TryStatement[40192-40675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40137-40549]:Block[40196-40608]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[40149-40179]:VariableDeclarationStatement[40208-40238]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[40190-40231]:VariableDeclarationStatement[40249-40290]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[40242-40277]:VariableDeclarationStatement[40301-40336]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[40288-40513]:ForStatement[40347-40572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40324-40513]:Block[40383-40572]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[40338-40396]:VariableDeclarationStatement[40397-40455]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[40409-40420]:ExpressionStatement[40468-40479]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[40433-40461]:ExpressionStatement[40492-40520]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[40474-40501]:ExpressionStatement[40533-40560]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[40524-40539]:ReturnStatement[40583-40598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40558-40616]:Block[40617-40675]"
    }, {
      "left" : "stopTracer(tracer, \"toSourceArray\");",
      "right" : "stopTracer(tracer, \"toSourceArray\");",
      "info" : "ExpressionStatement[40570-40606]:ExpressionStatement[40629-40665]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40711-40717]:Modifier[40770-40776]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40718-40724]:SimpleType[40777-40783]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[40725-40733]:SimpleName[40784-40792]"
    }, {
      "left" : "final JSModule module",
      "right" : "final JSModule module",
      "info" : "SingleVariableDeclaration[40734-40755]:SingleVariableDeclaration[40793-40814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40757-41423]:Block[40816-41482]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String>() {\n      public String call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return \"\";\n        }\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());\n          }\n          toSource(cb, i, scriptNode);\n        }\n        return cb.toString();\n      }\n    });",
      "info" : "ReturnStatement[40763-41419]:ReturnStatement[40822-41478]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40821-40827]:Modifier[40880-40886]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40828-40834]:SimpleType[40887-40893]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[40835-40839]:SimpleName[40894-40898]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[40849-40858]:SimpleType[40908-40917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40859-41411]:Block[40918-41470]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[40869-40917]:VariableDeclarationStatement[40928-40976]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[40926-40956]:VariableDeclarationStatement[40985-41015]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[40965-41017]:IfStatement[41024-41076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40985-41017]:Block[41044-41076]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[40997-41007]:ReturnStatement[41056-41066]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[41026-41061]:VariableDeclarationStatement[41085-41120]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[41070-41373]:ForStatement[41129-41432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41106-41373]:Block[41165-41432]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[41118-41176]:VariableDeclarationStatement[41177-41235]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[41187-41324]:IfStatement[41246-41383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41211-41324]:Block[41270-41383]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module: \" + module.getName());",
      "info" : "ThrowStatement[41225-41312]:ThrowStatement[41284-41371]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[41335-41363]:ExpressionStatement[41394-41422]"
    }, {
      "left" : "return cb.toString();",
      "right" : "return cb.toString();",
      "info" : "ReturnStatement[41382-41403]:ReturnStatement[41441-41462]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41513-41519]:Modifier[41572-41578]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[41520-41528]:ArrayType[41579-41587]"
    }, {
      "left" : "toSourceArray",
      "right" : "toSourceArray",
      "info" : "SimpleName[41529-41542]:SimpleName[41588-41601]"
    }, {
      "left" : "final JSModule module",
      "right" : "final JSModule module",
      "info" : "SingleVariableDeclaration[41543-41564]:SingleVariableDeclaration[41602-41623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41566-42366]:Block[41625-42425]"
    }, {
      "left" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "right" : "return runInCompilerThread(new Callable<String[]>() {\n      public String[] call() throws Exception {\n        List<CompilerInput> inputs = module.getInputs();\n        int numInputs = inputs.size();\n        if (numInputs == 0) {\n          return new String[0];\n        }\n\n        String[] sources = new String[numInputs];\n        CodeBuilder cb = new CodeBuilder();\n        for (int i = 0; i < numInputs; i++) {\n          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);\n          if (scriptNode == null) {\n            throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());\n          }\n\n          cb.reset();\n          toSource(cb, i, scriptNode);\n          sources[i] = cb.toString();\n        }\n        return sources;\n      }\n    });",
      "info" : "ReturnStatement[41572-42362]:ReturnStatement[41631-42421]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41632-41638]:Modifier[41691-41697]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[41639-41647]:ArrayType[41698-41706]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[41648-41652]:SimpleName[41707-41711]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[41662-41671]:SimpleType[41721-41730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41672-42354]:Block[41731-42413]"
    }, {
      "left" : "List<CompilerInput> inputs = module.getInputs();",
      "right" : "List<CompilerInput> inputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[41682-41730]:VariableDeclarationStatement[41741-41789]"
    }, {
      "left" : "int numInputs = inputs.size();",
      "right" : "int numInputs = inputs.size();",
      "info" : "VariableDeclarationStatement[41739-41769]:VariableDeclarationStatement[41798-41828]"
    }, {
      "left" : "if (numInputs == 0)",
      "right" : "if (numInputs == 0)",
      "info" : "IfStatement[41778-41841]:IfStatement[41837-41900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41798-41841]:Block[41857-41900]"
    }, {
      "left" : "return new String[0];",
      "right" : "return new String[0];",
      "info" : "ReturnStatement[41810-41831]:ReturnStatement[41869-41890]"
    }, {
      "left" : "String[] sources = new String[numInputs];",
      "right" : "String[] sources = new String[numInputs];",
      "info" : "VariableDeclarationStatement[41851-41892]:VariableDeclarationStatement[41910-41951]"
    }, {
      "left" : "CodeBuilder cb = new CodeBuilder();",
      "right" : "CodeBuilder cb = new CodeBuilder();",
      "info" : "VariableDeclarationStatement[41901-41936]:VariableDeclarationStatement[41960-41995]"
    }, {
      "left" : "for (int i = 0; i < numInputs; i++)",
      "right" : "for (int i = 0; i < numInputs; i++)",
      "info" : "ForStatement[41945-42322]:ForStatement[42004-42381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41981-42322]:Block[42040-42381]"
    }, {
      "left" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "right" : "Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);",
      "info" : "VariableDeclarationStatement[41993-42051]:VariableDeclarationStatement[42052-42110]"
    }, {
      "left" : "if (scriptNode == null)",
      "right" : "if (scriptNode == null)",
      "info" : "IfStatement[42062-42212]:IfStatement[42121-42271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42086-42212]:Block[42145-42271]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "right" : "throw new IllegalArgumentException(\n                \"Bad module input: \" + inputs.get(i).getName());",
      "info" : "ThrowStatement[42100-42200]:ThrowStatement[42159-42259]"
    }, {
      "left" : "cb.reset();",
      "right" : "cb.reset();",
      "info" : "ExpressionStatement[42224-42235]:ExpressionStatement[42283-42294]"
    }, {
      "left" : "toSource(cb, i, scriptNode);",
      "right" : "toSource(cb, i, scriptNode);",
      "info" : "ExpressionStatement[42246-42274]:ExpressionStatement[42305-42333]"
    }, {
      "left" : "sources[i] = cb.toString();",
      "right" : "sources[i] = cb.toString();",
      "info" : "ExpressionStatement[42285-42312]:ExpressionStatement[42344-42371]"
    }, {
      "left" : "return sources;",
      "right" : "return sources;",
      "info" : "ReturnStatement[42331-42346]:ReturnStatement[42390-42405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42723-42729]:Modifier[42782-42788]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42730-42734]:PrimitiveType[42789-42793]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[42735-42743]:SimpleName[42794-42802]"
    }, {
      "left" : "final CodeBuilder cb",
      "right" : "final CodeBuilder cb",
      "info" : "SingleVariableDeclaration[42744-42764]:SingleVariableDeclaration[42803-42823]"
    }, {
      "left" : "final int inputSeqNum",
      "right" : "final int inputSeqNum",
      "info" : "SingleVariableDeclaration[42789-42810]:SingleVariableDeclaration[42848-42869]"
    }, {
      "left" : "final Node root",
      "right" : "final Node root",
      "info" : "SingleVariableDeclaration[42835-42850]:SingleVariableDeclaration[42894-42909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42852-45042]:Block[42911-45101]"
    }, {
      "left" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "right" : "runInCompilerThread(new Callable<Void>() {\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.getType() == Token.SCRIPT);\n\n          String delimiter = options.inputDelimiter;\n\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });",
      "info" : "ExpressionStatement[42858-45038]:ExpressionStatement[42917-45097]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42907-42913]:Modifier[42966-42972]"
    }, {
      "left" : "Void",
      "right" : "Void",
      "info" : "SimpleType[42914-42918]:SimpleType[42973-42977]"
    }, {
      "left" : "call",
      "right" : "call",
      "info" : "SimpleName[42919-42923]:SimpleName[42978-42982]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[42933-42942]:SimpleType[42992-43001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42943-45030]:Block[43002-45089]"
    }, {
      "left" : "if (options.printInputDelimiter)",
      "right" : "if (options.printInputDelimiter)",
      "info" : "IfStatement[42953-43630]:IfStatement[43012-43689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42986-43630]:Block[43045-43689]"
    }, {
      "left" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "right" : "if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\"))",
      "info" : "IfStatement[42998-43138]:IfStatement[43057-43197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43046-43138]:Block[43105-43197]"
    }, {
      "left" : "cb.append(\"\\n\");",
      "right" : "cb.append(\"\\n\");",
      "info" : "ExpressionStatement[43060-43076]:ExpressionStatement[43119-43135]"
    }, {
      "left" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(root.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[43149-43206]:ExpressionStatement[43208-43265]"
    }, {
      "left" : "String delimiter = options.inputDelimiter;",
      "right" : "String delimiter = options.inputDelimiter;",
      "info" : "VariableDeclarationStatement[43218-43260]:VariableDeclarationStatement[43277-43319]"
    }, {
      "left" : "String sourceName = root.getSourceFileName();",
      "right" : "String sourceName = root.getSourceFileName();",
      "info" : "VariableDeclarationStatement[43272-43317]:VariableDeclarationStatement[43331-43376]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[43328-43373]:ExpressionStatement[43387-43432]"
    }, {
      "left" : "Preconditions.checkState(!sourceName.isEmpty());",
      "right" : "Preconditions.checkState(!sourceName.isEmpty());",
      "info" : "ExpressionStatement[43384-43432]:ExpressionStatement[43443-43491]"
    }, {
      "left" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "right" : "delimiter = delimiter.replaceAll(\"%name%\", sourceName)\n            .replaceAll(\"%num%\", String.valueOf(inputSeqNum));",
      "info" : "ExpressionStatement[43444-43561]:ExpressionStatement[43503-43620]"
    }, {
      "left" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "right" : "cb.append(delimiter)\n            .append(\"\\n\");",
      "info" : "ExpressionStatement[43573-43620]:ExpressionStatement[43632-43679]"
    }, {
      "left" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "right" : "if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null)",
      "info" : "IfStatement[43639-43850]:IfStatement[43698-43909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43728-43850]:Block[43787-43909]"
    }, {
      "left" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "right" : "cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");",
      "info" : "ExpressionStatement[43740-43840]:ExpressionStatement[43799-43899]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[44019-44167]:IfStatement[44078-44226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44060-44167]:Block[44119-44226]"
    }, {
      "left" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "right" : "sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());",
      "info" : "ExpressionStatement[44072-44157]:ExpressionStatement[44131-44216]"
    }, {
      "left" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
      "right" : "String code = toSource(root, sourceMap, inputSeqNum == 0);",
      "info" : "VariableDeclarationStatement[44287-44345]:VariableDeclarationStatement[44346-44404]"
    }, {
      "left" : "if (!code.isEmpty())",
      "right" : "if (!code.isEmpty())",
      "info" : "IfStatement[44354-45001]:IfStatement[44413-45060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44375-45001]:Block[44434-45060]"
    }, {
      "left" : "cb.append(code);",
      "right" : "cb.append(code);",
      "info" : "ExpressionStatement[44387-44403]:ExpressionStatement[44446-44462]"
    }, {
      "left" : "int length = code.length();",
      "right" : "int length = code.length();",
      "info" : "VariableDeclarationStatement[44639-44666]:VariableDeclarationStatement[44698-44725]"
    }, {
      "left" : "char lastChar = code.charAt(length - 1);",
      "right" : "char lastChar = code.charAt(length - 1);",
      "info" : "VariableDeclarationStatement[44677-44717]:VariableDeclarationStatement[44736-44776]"
    }, {
      "left" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "right" : "char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';",
      "info" : "VariableDeclarationStatement[44728-44809]:VariableDeclarationStatement[44787-44868]"
    }, {
      "left" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "right" : "boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');",
      "info" : "VariableDeclarationStatement[44820-44920]:VariableDeclarationStatement[44879-44979]"
    }, {
      "left" : "if (!hasSemiColon)",
      "right" : "if (!hasSemiColon)",
      "info" : "IfStatement[44931-44991]:IfStatement[44990-45050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44950-44991]:Block[45009-45050]"
    }, {
      "left" : "cb.append(\";\");",
      "right" : "cb.append(\";\");",
      "info" : "ExpressionStatement[44964-44979]:ExpressionStatement[45023-45038]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[45010-45022]:ReturnStatement[45069-45081]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45147-45156]:MarkerAnnotation[45206-45215]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[45159-45165]:SimpleType[45218-45224]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[45166-45174]:SimpleName[45225-45233]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45175-45181]:SingleVariableDeclaration[45234-45240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45183-45260]:Block[45242-45319]"
    }, {
      "left" : "initCompilerOptionsIfTesting();",
      "right" : "initCompilerOptionsIfTesting();",
      "info" : "ExpressionStatement[45189-45220]:ExpressionStatement[45248-45279]"
    }, {
      "left" : "return toSource(n, null, true);",
      "right" : "return toSource(n, null, true);",
      "info" : "ReturnStatement[45225-45256]:ReturnStatement[45284-45315]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45326-45333]:Modifier[45385-45392]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[45334-45340]:SimpleType[45393-45399]"
    }, {
      "left" : "toSource",
      "right" : "toSource",
      "info" : "SimpleName[45341-45349]:SimpleName[45400-45408]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[45350-45356]:SingleVariableDeclaration[45409-45415]"
    }, {
      "left" : "SourceMap sourceMap",
      "right" : "SourceMap sourceMap",
      "info" : "SingleVariableDeclaration[45358-45377]:SingleVariableDeclaration[45417-45436]"
    }, {
      "left" : "boolean firstOutput",
      "right" : "boolean firstOutput",
      "info" : "SingleVariableDeclaration[45379-45398]:SingleVariableDeclaration[45438-45457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45400-46020]:Block[45459-46079]"
    }, {
      "left" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "right" : "CodePrinter.Builder builder = new CodePrinter.Builder(n);",
      "info" : "VariableDeclarationStatement[45406-45463]:VariableDeclarationStatement[45465-45522]"
    }, {
      "left" : "builder.setPrettyPrint(options.prettyPrint);",
      "right" : "builder.setPrettyPrint(options.prettyPrint);",
      "info" : "ExpressionStatement[45468-45512]:ExpressionStatement[45527-45571]"
    }, {
      "left" : "builder.setLineBreak(options.lineBreak);",
      "right" : "builder.setLineBreak(options.lineBreak);",
      "info" : "ExpressionStatement[45517-45557]:ExpressionStatement[45576-45616]"
    }, {
      "left" : "builder.setSourceMap(sourceMap);",
      "right" : "builder.setSourceMap(sourceMap);",
      "info" : "ExpressionStatement[45562-45594]:ExpressionStatement[45621-45653]"
    }, {
      "left" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "right" : "builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);",
      "info" : "ExpressionStatement[45599-45661]:ExpressionStatement[45658-45720]"
    }, {
      "left" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "right" : "builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);",
      "info" : "ExpressionStatement[45666-45773]:ExpressionStatement[45725-45832]"
    }, {
      "left" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "right" : "builder.setLineLengthThreshold(options.lineLengthThreshold);",
      "info" : "ExpressionStatement[45778-45838]:ExpressionStatement[45837-45897]"
    }, {
      "left" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "right" : "Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;",
      "info" : "VariableDeclarationStatement[45844-45948]:VariableDeclarationStatement[45903-46007]"
    }, {
      "left" : "builder.setOutputCharset(charset);",
      "right" : "builder.setOutputCharset(charset);",
      "info" : "ExpressionStatement[45953-45987]:ExpressionStatement[46012-46046]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[45993-46016]:ReturnStatement[46052-46075]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46183-46189]:Modifier[46242-46248]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46190-46196]:Modifier[46249-46255]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[46197-46202]:TYPE_DECLARATION_KIND[46256-46261]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "SimpleName[46203-46214]:SimpleName[46262-46273]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46407-46411]:PrimitiveType[46466-46470]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[46412-46417]:SimpleName[46471-46476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46420-46450]:Block[46479-46509]"
    }, {
      "left" : "sb.setLength(0);",
      "right" : "sb.setLength(0);",
      "info" : "ExpressionStatement[46428-46444]:ExpressionStatement[46487-46503]"
    }, {
      "left" : "CodeBuilder",
      "right" : "CodeBuilder",
      "info" : "SimpleType[46512-46523]:SimpleType[46571-46582]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[46524-46530]:SimpleName[46583-46589]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[46531-46541]:SingleVariableDeclaration[46590-46600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46543-47022]:Block[46602-47081]"
    }, {
      "left" : "sb.append(str);",
      "right" : "sb.append(str);",
      "info" : "ExpressionStatement[46551-46566]:ExpressionStatement[46610-46625]"
    }, {
      "left" : "int index = -1;",
      "right" : "int index = -1;",
      "info" : "VariableDeclarationStatement[46640-46655]:VariableDeclarationStatement[46699-46714]"
    }, {
      "left" : "int lastIndex = index;",
      "right" : "int lastIndex = index;",
      "info" : "VariableDeclarationStatement[46662-46684]:VariableDeclarationStatement[46721-46743]"
    }, {
      "left" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "right" : "while ((index = str.indexOf('\\n', index + 1)) >= 0)",
      "info" : "WhileStatement[46691-46800]:WhileStatement[46750-46859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46743-46800]:Block[46802-46859]"
    }, {
      "left" : "++lineCount;",
      "right" : "++lineCount;",
      "info" : "ExpressionStatement[46753-46765]:ExpressionStatement[46812-46824]"
    }, {
      "left" : "lastIndex = index;",
      "right" : "lastIndex = index;",
      "info" : "ExpressionStatement[46774-46792]:ExpressionStatement[46833-46851]"
    }, {
      "left" : "if (lastIndex == -1)",
      "right" : "if (lastIndex == -1)",
      "info" : "IfStatement[46808-46996]:IfStatement[46867-47055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46829-46930]:Block[46888-46989]"
    }, {
      "left" : "colCount += str.length();",
      "right" : "colCount += str.length();",
      "info" : "ExpressionStatement[46897-46922]:ExpressionStatement[46956-46981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46936-46996]:Block[46995-47055]"
    }, {
      "left" : "colCount = str.length() - (lastIndex + 1);",
      "right" : "colCount = str.length() - (lastIndex + 1);",
      "info" : "ExpressionStatement[46946-46988]:ExpressionStatement[47005-47047]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[47004-47016]:ReturnStatement[47063-47075]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47076-47085]:MarkerAnnotation[47135-47144]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47090-47096]:Modifier[47149-47155]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[47097-47103]:SimpleType[47156-47162]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[47104-47112]:SimpleName[47163-47171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47115-47150]:Block[47174-47209]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[47123-47144]:ReturnStatement[47182-47203]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47206-47212]:Modifier[47265-47271]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[47213-47216]:PrimitiveType[47272-47275]"
    }, {
      "left" : "getLength",
      "right" : "getLength",
      "info" : "SimpleName[47217-47226]:SimpleName[47276-47285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47229-47262]:Block[47288-47321]"
    }, {
      "left" : "return sb.length();",
      "right" : "return sb.length();",
      "info" : "ReturnStatement[47237-47256]:ReturnStatement[47296-47315]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[47347-47350]:PrimitiveType[47406-47409]"
    }, {
      "left" : "getLineIndex",
      "right" : "getLineIndex",
      "info" : "SimpleName[47351-47363]:SimpleName[47410-47422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47366-47397]:Block[47425-47456]"
    }, {
      "left" : "return lineCount;",
      "right" : "return lineCount;",
      "info" : "ReturnStatement[47374-47391]:ReturnStatement[47433-47450]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[47484-47487]:PrimitiveType[47543-47546]"
    }, {
      "left" : "getColumnIndex",
      "right" : "getColumnIndex",
      "info" : "SimpleName[47488-47502]:SimpleName[47547-47561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47505-47535]:Block[47564-47594]"
    }, {
      "left" : "return colCount;",
      "right" : "return colCount;",
      "info" : "ReturnStatement[47513-47529]:ReturnStatement[47572-47588]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47608-47615]:PrimitiveType[47667-47674]"
    }, {
      "left" : "endsWith",
      "right" : "endsWith",
      "info" : "SimpleName[47616-47624]:SimpleName[47675-47683]"
    }, {
      "left" : "String suffix",
      "right" : "String suffix",
      "info" : "SingleVariableDeclaration[47625-47638]:SingleVariableDeclaration[47684-47697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47640-47765]:Block[47699-47824]"
    }, {
      "left" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "right" : "return (sb.length() > suffix.length())\n          && suffix.equals(sb.substring(sb.length() - suffix.length()));",
      "info" : "ReturnStatement[47648-47759]:ReturnStatement[47707-47818]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47947-47953]:Modifier[48006-48012]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47954-47958]:PrimitiveType[48013-48017]"
    }, {
      "left" : "optimize",
      "right" : "optimize",
      "info" : "SimpleName[47959-47967]:SimpleName[48018-48026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47970-48593]:Block[48029-48652]"
    }, {
      "left" : "normalize();",
      "right" : "normalize();",
      "info" : "ExpressionStatement[48244-48256]:ExpressionStatement[48303-48315]"
    }, {
      "left" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "right" : "PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);",
      "info" : "VariableDeclarationStatement[48262-48328]:VariableDeclarationStatement[48321-48387]"
    }, {
      "left" : "if (options.devMode == DevMode.EVERY_PASS)",
      "right" : "if (options.devMode == DevMode.EVERY_PASS)",
      "info" : "IfStatement[48333-48433]:IfStatement[48392-48492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48376-48433]:Block[48435-48492]"
    }, {
      "left" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "right" : "phaseOptimizer.setSanityCheck(sanityCheck);",
      "info" : "ExpressionStatement[48384-48427]:ExpressionStatement[48443-48486]"
    }, {
      "left" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "right" : "phaseOptimizer.consume(getPassConfig().getOptimizations());",
      "info" : "ExpressionStatement[48438-48497]:ExpressionStatement[48497-48556]"
    }, {
      "left" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "right" : "phaseOptimizer.process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[48502-48546]:ExpressionStatement[48561-48605]"
    }, {
      "left" : "if (hasErrors())",
      "right" : "if (hasErrors())",
      "info" : "IfStatement[48551-48589]:IfStatement[48610-48648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48568-48589]:Block[48627-48648]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48576-48583]:ReturnStatement[48635-48642]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48597-48606]:MarkerAnnotation[48656-48665]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48609-48613]:PrimitiveType[48668-48672]"
    }, {
      "left" : "setCssRenamingMap",
      "right" : "setCssRenamingMap",
      "info" : "SimpleName[48614-48631]:SimpleName[48673-48690]"
    }, {
      "left" : "CssRenamingMap map",
      "right" : "CssRenamingMap map",
      "info" : "SingleVariableDeclaration[48632-48650]:SingleVariableDeclaration[48691-48709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48652-48691]:Block[48711-48750]"
    }, {
      "left" : "options.cssRenamingMap = map;",
      "right" : "options.cssRenamingMap = map;",
      "info" : "ExpressionStatement[48658-48687]:ExpressionStatement[48717-48746]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48695-48704]:MarkerAnnotation[48754-48763]"
    }, {
      "left" : "CssRenamingMap",
      "right" : "CssRenamingMap",
      "info" : "SimpleType[48707-48721]:SimpleType[48766-48780]"
    }, {
      "left" : "getCssRenamingMap",
      "right" : "getCssRenamingMap",
      "info" : "SimpleName[48722-48739]:SimpleName[48781-48798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48742-48782]:Block[48801-48841]"
    }, {
      "left" : "return options.cssRenamingMap;",
      "right" : "return options.cssRenamingMap;",
      "info" : "ReturnStatement[48748-48778]:ReturnStatement[48807-48837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49135-49141]:Modifier[49194-49200]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49142-49146]:PrimitiveType[49201-49205]"
    }, {
      "left" : "processDefines",
      "right" : "processDefines",
      "info" : "SimpleName[49147-49161]:SimpleName[49206-49220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49164-49273]:Block[49223-49332]"
    }, {
      "left" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "right" : "(new DefaultPassConfig(options)).processDefines.create(this)\n        .process(externsRoot, jsRoot);",
      "info" : "ExpressionStatement[49170-49269]:ExpressionStatement[49229-49328]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[49277-49284]:PrimitiveType[49336-49343]"
    }, {
      "left" : "isInliningForbidden",
      "right" : "isInliningForbidden",
      "info" : "SimpleName[49285-49304]:SimpleName[49344-49363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49307-49480]:Block[49366-49539]"
    }, {
      "left" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "right" : "return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;",
      "info" : "ReturnStatement[49313-49476]:ReturnStatement[49372-49535]"
    }, {
      "left" : "ControlFlowGraph<Node>",
      "right" : "ControlFlowGraph<Node>",
      "info" : "ParameterizedType[49516-49538]:ParameterizedType[49575-49597]"
    }, {
      "left" : "computeCFG",
      "right" : "computeCFG",
      "info" : "SimpleName[49539-49549]:SimpleName[49598-49608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49552-49806]:Block[49611-49865]"
    }, {
      "left" : "logger.info(\"Computing Control Flow Graph\");",
      "right" : "logger.info(\"Computing Control Flow Graph\");",
      "info" : "ExpressionStatement[49558-49602]:ExpressionStatement[49617-49661]"
    }, {
      "left" : "Tracer tracer = newTracer(\"computeCFG\");",
      "right" : "Tracer tracer = newTracer(\"computeCFG\");",
      "info" : "VariableDeclarationStatement[49607-49647]:VariableDeclarationStatement[49666-49706]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[49652-49721]:VariableDeclarationStatement[49711-49780]"
    }, {
      "left" : "process(cfa);",
      "right" : "process(cfa);",
      "info" : "ExpressionStatement[49726-49739]:ExpressionStatement[49785-49798]"
    }, {
      "left" : "stopTracer(tracer, \"computeCFG\");",
      "right" : "stopTracer(tracer, \"computeCFG\");",
      "info" : "ExpressionStatement[49744-49777]:ExpressionStatement[49803-49836]"
    }, {
      "left" : "return cfa.getCfg();",
      "right" : "return cfa.getCfg();",
      "info" : "ReturnStatement[49782-49802]:ReturnStatement[49841-49861]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49810-49816]:Modifier[49869-49875]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49817-49821]:PrimitiveType[49876-49880]"
    }, {
      "left" : "normalize",
      "right" : "normalize",
      "info" : "SimpleName[49822-49831]:SimpleName[49881-49890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49834-49955]:Block[49893-50014]"
    }, {
      "left" : "logger.info(\"Normalizing\");",
      "right" : "logger.info(\"Normalizing\");",
      "info" : "ExpressionStatement[49840-49867]:ExpressionStatement[49899-49926]"
    }, {
      "left" : "startPass(\"normalize\");",
      "right" : "startPass(\"normalize\");",
      "info" : "ExpressionStatement[49872-49895]:ExpressionStatement[49931-49954]"
    }, {
      "left" : "process(new Normalize(this, false));",
      "right" : "process(new Normalize(this, false));",
      "info" : "ExpressionStatement[49900-49936]:ExpressionStatement[49959-49995]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[49941-49951]:ExpressionStatement[50000-50010]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49959-49968]:MarkerAnnotation[50018-50027]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49971-49975]:PrimitiveType[50030-50034]"
    }, {
      "left" : "prepareAst",
      "right" : "prepareAst",
      "info" : "SimpleName[49976-49986]:SimpleName[50035-50045]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[49987-49996]:SingleVariableDeclaration[50046-50055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49998-50162]:Block[50057-50221]"
    }, {
      "left" : "Tracer tracer = newTracer(\"prepareAst\");",
      "right" : "Tracer tracer = newTracer(\"prepareAst\");",
      "info" : "VariableDeclarationStatement[50004-50044]:VariableDeclarationStatement[50063-50103]"
    }, {
      "left" : "CompilerPass pass = new PrepareAst(this);",
      "right" : "CompilerPass pass = new PrepareAst(this);",
      "info" : "VariableDeclarationStatement[50049-50090]:VariableDeclarationStatement[50108-50149]"
    }, {
      "left" : "pass.process(null, root);",
      "right" : "pass.process(null, root);",
      "info" : "ExpressionStatement[50095-50120]:ExpressionStatement[50154-50179]"
    }, {
      "left" : "stopTracer(tracer, \"prepareAst\");",
      "right" : "stopTracer(tracer, \"prepareAst\");",
      "info" : "ExpressionStatement[50125-50158]:ExpressionStatement[50184-50217]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50166-50170]:PrimitiveType[50225-50229]"
    }, {
      "left" : "recordFunctionInformation",
      "right" : "recordFunctionInformation",
      "info" : "SimpleName[50171-50196]:SimpleName[50230-50255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50199-50580]:Block[50258-50639]"
    }, {
      "left" : "logger.info(\"Recording function information\");",
      "right" : "logger.info(\"Recording function information\");",
      "info" : "ExpressionStatement[50205-50251]:ExpressionStatement[50264-50310]"
    }, {
      "left" : "startPass(\"recordFunctionInformation\");",
      "right" : "startPass(\"recordFunctionInformation\");",
      "info" : "ExpressionStatement[50256-50295]:ExpressionStatement[50315-50354]"
    }, {
      "left" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "right" : "RecordFunctionInformation recordFunctionInfoPass =\n        new RecordFunctionInformation(\n            this, getPassConfig().getIntermediateState().functionNames);",
      "info" : "VariableDeclarationStatement[50300-50462]:VariableDeclarationStatement[50359-50521]"
    }, {
      "left" : "process(recordFunctionInfoPass);",
      "right" : "process(recordFunctionInfoPass);",
      "info" : "ExpressionStatement[50467-50499]:ExpressionStatement[50526-50558]"
    }, {
      "left" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "right" : "functionInformationMap = recordFunctionInfoPass.getMap();",
      "info" : "ExpressionStatement[50504-50561]:ExpressionStatement[50563-50620]"
    }, {
      "left" : "endPass();",
      "right" : "endPass();",
      "info" : "ExpressionStatement[50566-50576]:ExpressionStatement[50625-50635]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50801-50810]:MarkerAnnotation[50860-50869]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50813-50817]:PrimitiveType[50872-50876]"
    }, {
      "left" : "addChangeHandler",
      "right" : "addChangeHandler",
      "info" : "SimpleName[50818-50834]:SimpleName[50877-50893]"
    }, {
      "left" : "CodeChangeHandler handler",
      "right" : "CodeChangeHandler handler",
      "info" : "SingleVariableDeclaration[50835-50860]:SingleVariableDeclaration[50894-50919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50862-50904]:Block[50921-50963]"
    }, {
      "left" : "codeChangeHandlers.add(handler);",
      "right" : "codeChangeHandlers.add(handler);",
      "info" : "ExpressionStatement[50868-50900]:ExpressionStatement[50927-50959]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50908-50917]:MarkerAnnotation[50967-50976]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50920-50924]:PrimitiveType[50979-50983]"
    }, {
      "left" : "removeChangeHandler",
      "right" : "removeChangeHandler",
      "info" : "SimpleName[50925-50944]:SimpleName[50984-51003]"
    }, {
      "left" : "CodeChangeHandler handler",
      "right" : "CodeChangeHandler handler",
      "info" : "SingleVariableDeclaration[50945-50970]:SingleVariableDeclaration[51004-51029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50972-51017]:Block[51031-51076]"
    }, {
      "left" : "codeChangeHandlers.remove(handler);",
      "right" : "codeChangeHandlers.remove(handler);",
      "info" : "ExpressionStatement[50978-51013]:ExpressionStatement[51037-51072]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51212-51221]:MarkerAnnotation[51271-51280]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51224-51230]:Modifier[51283-51289]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51231-51235]:PrimitiveType[51290-51294]"
    }, {
      "left" : "reportCodeChange",
      "right" : "reportCodeChange",
      "info" : "SimpleName[51236-51252]:SimpleName[51295-51311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51255-51355]:Block[51314-51414]"
    }, {
      "left" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "right" : "for (CodeChangeHandler handler : codeChangeHandlers)",
      "info" : "EnhancedForStatement[51261-51351]:EnhancedForStatement[51320-51410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51314-51351]:Block[51373-51410]"
    }, {
      "left" : "handler.reportChange();",
      "right" : "handler.reportChange();",
      "info" : "ExpressionStatement[51322-51345]:ExpressionStatement[51381-51404]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51359-51368]:MarkerAnnotation[51418-51427]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51371-51377]:Modifier[51430-51436]"
    }, {
      "left" : "CodingConvention",
      "right" : "CodingConvention",
      "info" : "SimpleType[51378-51394]:SimpleType[51437-51453]"
    }, {
      "left" : "getCodingConvention",
      "right" : "getCodingConvention",
      "info" : "SimpleName[51395-51414]:SimpleName[51454-51473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51417-51586]:Block[51476-51645]"
    }, {
      "left" : "CodingConvention convention = options.getCodingConvention();",
      "right" : "CodingConvention convention = options.getCodingConvention();",
      "info" : "VariableDeclarationStatement[51423-51483]:VariableDeclarationStatement[51482-51542]"
    }, {
      "left" : "convention = convention != null ? convention : defaultCodingConvention;",
      "right" : "convention = convention != null ? convention : defaultCodingConvention;",
      "info" : "ExpressionStatement[51488-51559]:ExpressionStatement[51547-51618]"
    }, {
      "left" : "return convention;",
      "right" : "return convention;",
      "info" : "ReturnStatement[51564-51582]:ReturnStatement[51623-51641]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51590-51599]:MarkerAnnotation[51649-51658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51602-51608]:Modifier[51661-51667]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51609-51616]:PrimitiveType[51668-51675]"
    }, {
      "left" : "isIdeMode",
      "right" : "isIdeMode",
      "info" : "SimpleName[51617-51626]:SimpleName[51676-51685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51629-51662]:Block[51688-51721]"
    }, {
      "left" : "return options.ideMode;",
      "right" : "return options.ideMode;",
      "info" : "ReturnStatement[51635-51658]:ReturnStatement[51694-51717]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51666-51675]:MarkerAnnotation[51725-51734]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51678-51684]:Modifier[51737-51743]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51685-51692]:PrimitiveType[51744-51751]"
    }, {
      "left" : "acceptEcmaScript5",
      "right" : "acceptEcmaScript5",
      "info" : "SimpleName[51693-51710]:SimpleName[51752-51769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51713-51857]:Block[51772-51916]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "right" : "switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }",
      "info" : "SwitchStatement[51719-51835]:SwitchStatement[51778-51894]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[51760-51777]:SwitchCase[51819-51836]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[51784-51808]:SwitchCase[51843-51867]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51817-51829]:ReturnStatement[51876-51888]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51840-51853]:ReturnStatement[51899-51912]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51861-51867]:Modifier[51920-51926]"
    }, {
      "left" : "LanguageMode",
      "right" : "LanguageMode",
      "info" : "SimpleType[51868-51880]:SimpleType[51927-51939]"
    }, {
      "left" : "languageMode",
      "right" : "languageMode",
      "info" : "SimpleName[51881-51893]:SimpleName[51940-51952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51896-51937]:Block[51955-51996]"
    }, {
      "left" : "return options.getLanguageIn();",
      "right" : "return options.getLanguageIn();",
      "info" : "ReturnStatement[51902-51933]:ReturnStatement[51961-51992]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51941-51950]:MarkerAnnotation[52000-52009]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51953-51959]:Modifier[52012-52018]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51960-51967]:PrimitiveType[52019-52026]"
    }, {
      "left" : "acceptConstKeyword",
      "right" : "acceptConstKeyword",
      "info" : "SimpleName[51968-51986]:SimpleName[52027-52045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51989-52033]:Block[52048-52092]"
    }, {
      "left" : "return options.acceptConstKeyword;",
      "right" : "return options.acceptConstKeyword;",
      "info" : "ReturnStatement[51995-52029]:ReturnStatement[52054-52088]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52037-52046]:MarkerAnnotation[52096-52105]"
    }, {
      "left" : "Config",
      "right" : "Config",
      "info" : "SimpleType[52049-52055]:SimpleType[52108-52114]"
    }, {
      "left" : "getParserConfig",
      "right" : "getParserConfig",
      "info" : "SimpleName[52056-52071]:SimpleName[52115-52130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52074-52757]:Block[52133-52816]"
    }, {
      "left" : "if (parserConfig == null)",
      "right" : "if (parserConfig == null)",
      "info" : "IfStatement[52080-52728]:IfStatement[52139-52787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52106-52728]:Block[52165-52787]"
    }, {
      "left" : "Config.LanguageMode mode;",
      "right" : "Config.LanguageMode mode;",
      "info" : "VariableDeclarationStatement[52114-52139]:VariableDeclarationStatement[52173-52198]"
    }, {
      "left" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "right" : "switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }",
      "info" : "SwitchStatement[52146-52569]:SwitchStatement[52205-52628]"
    }, {
      "left" : "case ECMASCRIPT3:",
      "right" : "case ECMASCRIPT3:",
      "info" : "SwitchCase[52189-52206]:SwitchCase[52248-52265]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT3;",
      "info" : "ExpressionStatement[52217-52256]:ExpressionStatement[52276-52315]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52267-52273]:BreakStatement[52326-52332]"
    }, {
      "left" : "case ECMASCRIPT5:",
      "right" : "case ECMASCRIPT5:",
      "info" : "SwitchCase[52282-52299]:SwitchCase[52341-52358]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5;",
      "info" : "ExpressionStatement[52310-52349]:ExpressionStatement[52369-52408]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52360-52366]:BreakStatement[52419-52425]"
    }, {
      "left" : "case ECMASCRIPT5_STRICT:",
      "right" : "case ECMASCRIPT5_STRICT:",
      "info" : "SwitchCase[52375-52399]:SwitchCase[52434-52458]"
    }, {
      "left" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "right" : "mode = Config.LanguageMode.ECMASCRIPT5_STRICT;",
      "info" : "ExpressionStatement[52410-52456]:ExpressionStatement[52469-52515]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52467-52473]:BreakStatement[52526-52532]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[52482-52490]:SwitchCase[52541-52549]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected language mode\");",
      "right" : "throw new IllegalStateException(\"unexpected language mode\");",
      "info" : "ThrowStatement[52501-52561]:ThrowStatement[52560-52620]"
    }, {
      "left" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);",
      "right" : "parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);",
      "info" : "ExpressionStatement[52577-52722]:ExpressionStatement[52636-52781]"
    }, {
      "left" : "return parserConfig;",
      "right" : "return parserConfig;",
      "info" : "ReturnStatement[52733-52753]:ReturnStatement[52792-52812]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52761-52770]:MarkerAnnotation[52820-52829]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52773-52779]:Modifier[52832-52838]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52780-52787]:PrimitiveType[52839-52846]"
    }, {
      "left" : "isTypeCheckingEnabled",
      "right" : "isTypeCheckingEnabled",
      "info" : "SimpleName[52788-52809]:SimpleName[52847-52868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52812-52848]:Block[52871-52907]"
    }, {
      "left" : "return options.checkTypes;",
      "right" : "return options.checkTypes;",
      "info" : "ReturnStatement[52818-52844]:ReturnStatement[52877-52903]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[53171-53180]:Modifier[53230-53239]"
    }, {
      "left" : "DiagnosticGroups",
      "right" : "DiagnosticGroups",
      "info" : "SimpleType[53181-53197]:SimpleType[53240-53256]"
    }, {
      "left" : "getDiagnosticGroups",
      "right" : "getDiagnosticGroups",
      "info" : "SimpleName[53198-53217]:SimpleName[53257-53276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53220-53260]:Block[53279-53319]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[53226-53256]:ReturnStatement[53285-53315]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53264-53273]:MarkerAnnotation[53323-53332]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53276-53282]:Modifier[53335-53341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53283-53287]:PrimitiveType[53342-53346]"
    }, {
      "left" : "report",
      "right" : "report",
      "info" : "SimpleName[53288-53294]:SimpleName[53347-53353]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[53295-53308]:SingleVariableDeclaration[53354-53367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53310-53582]:Block[53369-53641]"
    }, {
      "left" : "CheckLevel level = error.level;",
      "right" : "CheckLevel level = error.level;",
      "info" : "VariableDeclarationStatement[53316-53347]:VariableDeclarationStatement[53375-53406]"
    }, {
      "left" : "if (warningsGuard != null)",
      "right" : "if (warningsGuard != null)",
      "info" : "IfStatement[53352-53506]:IfStatement[53411-53565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53379-53506]:Block[53438-53565]"
    }, {
      "left" : "CheckLevel newLevel = warningsGuard.level(error);",
      "right" : "CheckLevel newLevel = warningsGuard.level(error);",
      "info" : "VariableDeclarationStatement[53387-53436]:VariableDeclarationStatement[53446-53495]"
    }, {
      "left" : "if (newLevel != null)",
      "right" : "if (newLevel != null)",
      "info" : "IfStatement[53443-53500]:IfStatement[53502-53559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53465-53500]:Block[53524-53559]"
    }, {
      "left" : "level = newLevel;",
      "right" : "level = newLevel;",
      "info" : "ExpressionStatement[53475-53492]:ExpressionStatement[53534-53551]"
    }, {
      "left" : "if (level.isOn())",
      "right" : "if (level.isOn())",
      "info" : "IfStatement[53512-53578]:IfStatement[53571-53637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53530-53578]:Block[53589-53637]"
    }, {
      "left" : "errorManager.report(level, error);",
      "right" : "errorManager.report(level, error);",
      "info" : "ExpressionStatement[53538-53572]:ExpressionStatement[53597-53631]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53586-53595]:MarkerAnnotation[53645-53654]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53598-53604]:Modifier[53657-53663]"
    }, {
      "left" : "CheckLevel",
      "right" : "CheckLevel",
      "info" : "SimpleType[53605-53615]:SimpleType[53664-53674]"
    }, {
      "left" : "getErrorLevel",
      "right" : "getErrorLevel",
      "info" : "SimpleName[53616-53629]:SimpleName[53675-53688]"
    }, {
      "left" : "JSError error",
      "right" : "JSError error",
      "info" : "SingleVariableDeclaration[53630-53643]:SingleVariableDeclaration[53689-53702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53645-53730]:Block[53704-53789]"
    }, {
      "left" : "Preconditions.checkNotNull(options);",
      "right" : "Preconditions.checkNotNull(options);",
      "info" : "ExpressionStatement[53651-53687]:ExpressionStatement[53710-53746]"
    }, {
      "left" : "return warningsGuard.level(error);",
      "right" : "return warningsGuard.level(error);",
      "info" : "ReturnStatement[53692-53726]:ReturnStatement[53751-53785]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53777-53786]:MarkerAnnotation[53836-53845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53789-53793]:PrimitiveType[53848-53852]"
    }, {
      "left" : "throwInternalError",
      "right" : "throwInternalError",
      "info" : "SimpleName[53794-53812]:SimpleName[53853-53871]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[53813-53827]:SingleVariableDeclaration[53872-53886]"
    }, {
      "left" : "Exception cause",
      "right" : "Exception cause",
      "info" : "SingleVariableDeclaration[53829-53844]:SingleVariableDeclaration[53888-53903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53846-54122]:Block[53905-54181]"
    }, {
      "left" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "right" : "String finalMessage =\n      \"INTERNAL COMPILER ERROR.\\n\" +\n      \"Please report this problem.\\n\" + message;",
      "info" : "VariableDeclarationStatement[53852-53959]:VariableDeclarationStatement[53911-54018]"
    }, {
      "left" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "right" : "RuntimeException e = new RuntimeException(finalMessage, cause);",
      "info" : "VariableDeclarationStatement[53965-54028]:VariableDeclarationStatement[54024-54087]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[54033-54105]:IfStatement[54092-54164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54052-54105]:Block[54111-54164]"
    }, {
      "left" : "e.setStackTrace(cause.getStackTrace());",
      "right" : "e.setStackTrace(cause.getStackTrace());",
      "info" : "ExpressionStatement[54060-54099]:ExpressionStatement[54119-54158]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[54110-54118]:ThrowStatement[54169-54177]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54171-54177]:Modifier[54230-54236]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[54178-54181]:PrimitiveType[54237-54240]"
    }, {
      "left" : "getErrorCount",
      "right" : "getErrorCount",
      "info" : "SimpleName[54182-54195]:SimpleName[54241-54254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54198-54244]:Block[54257-54303]"
    }, {
      "left" : "return errorManager.getErrorCount();",
      "right" : "return errorManager.getErrorCount();",
      "info" : "ReturnStatement[54204-54240]:ReturnStatement[54263-54299]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54294-54300]:Modifier[54353-54359]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[54301-54304]:PrimitiveType[54360-54363]"
    }, {
      "left" : "getWarningCount",
      "right" : "getWarningCount",
      "info" : "SimpleName[54305-54320]:SimpleName[54364-54379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54323-54371]:Block[54382-54430]"
    }, {
      "left" : "return errorManager.getWarningCount();",
      "right" : "return errorManager.getWarningCount();",
      "info" : "ReturnStatement[54329-54367]:ReturnStatement[54388-54426]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[54375-54384]:MarkerAnnotation[54434-54443]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54387-54394]:PrimitiveType[54446-54453]"
    }, {
      "left" : "hasHaltingErrors",
      "right" : "hasHaltingErrors",
      "info" : "SimpleName[54395-54411]:SimpleName[54454-54470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54414-54467]:Block[54473-54526]"
    }, {
      "left" : "return !isIdeMode() && getErrorCount() > 0;",
      "right" : "return !isIdeMode() && getErrorCount() > 0;",
      "info" : "ReturnStatement[54420-54463]:ReturnStatement[54479-54522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54889-54895]:Modifier[54948-54954]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54896-54903]:PrimitiveType[54955-54962]"
    }, {
      "left" : "hasErrors",
      "right" : "hasErrors",
      "info" : "SimpleName[54904-54913]:SimpleName[54963-54972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54916-54952]:Block[54975-55011]"
    }, {
      "left" : "return hasHaltingErrors();",
      "right" : "return hasHaltingErrors();",
      "info" : "ReturnStatement[54922-54948]:ReturnStatement[54981-55007]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[55014-55023]:MarkerAnnotation[55073-55082]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55026-55030]:PrimitiveType[55085-55089]"
    }, {
      "left" : "addToDebugLog",
      "right" : "addToDebugLog",
      "info" : "SimpleName[55031-55044]:SimpleName[55090-55103]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[55045-55055]:SingleVariableDeclaration[55104-55114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55057-55137]:Block[55116-55196]"
    }, {
      "left" : "debugLog.append(str);",
      "right" : "debugLog.append(str);",
      "info" : "ExpressionStatement[55063-55084]:ExpressionStatement[55122-55143]"
    }, {
      "left" : "debugLog.append('\\n');",
      "right" : "debugLog.append('\\n');",
      "info" : "ExpressionStatement[55089-55111]:ExpressionStatement[55148-55170]"
    }, {
      "left" : "logger.fine(str);",
      "right" : "logger.fine(str);",
      "info" : "ExpressionStatement[55116-55133]:ExpressionStatement[55175-55192]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55141-55148]:Modifier[55200-55207]"
    }, {
      "left" : "SourceFile",
      "right" : "SourceFile",
      "info" : "SimpleType[55149-55159]:SimpleType[55208-55218]"
    }, {
      "left" : "getSourceFileByName",
      "right" : "getSourceFileByName",
      "info" : "SimpleName[55160-55179]:SimpleName[55219-55238]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[55180-55197]:SingleVariableDeclaration[55239-55256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55199-55334]:Block[55258-55393]"
    }, {
      "left" : "if (inputsByName.containsKey(sourceName))",
      "right" : "if (inputsByName.containsKey(sourceName))",
      "info" : "IfStatement[55205-55313]:IfStatement[55264-55372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55247-55313]:Block[55306-55372]"
    }, {
      "left" : "return inputsByName.get(sourceName).getSourceFile();",
      "right" : "return inputsByName.get(sourceName).getSourceFile();",
      "info" : "ReturnStatement[55255-55307]:ReturnStatement[55314-55366]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55318-55330]:ReturnStatement[55377-55389]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55338-55344]:Modifier[55397-55403]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[55345-55351]:SimpleType[55404-55410]"
    }, {
      "left" : "getSourceLine",
      "right" : "getSourceLine",
      "info" : "SimpleName[55352-55365]:SimpleName[55411-55424]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[55366-55383]:SingleVariableDeclaration[55425-55442]"
    }, {
      "left" : "int lineNumber",
      "right" : "int lineNumber",
      "info" : "SingleVariableDeclaration[55385-55399]:SingleVariableDeclaration[55444-55458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55401-55601]:Block[55460-55660]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[55407-55453]:IfStatement[55466-55512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55427-55453]:Block[55486-55512]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55435-55447]:ReturnStatement[55494-55506]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[55458-55509]:VariableDeclarationStatement[55517-55568]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[55514-55580]:IfStatement[55573-55639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55533-55580]:Block[55592-55639]"
    }, {
      "left" : "return input.getLine(lineNumber);",
      "right" : "return input.getLine(lineNumber);",
      "info" : "ReturnStatement[55541-55574]:ReturnStatement[55600-55633]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55585-55597]:ReturnStatement[55644-55656]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55605-55611]:Modifier[55664-55670]"
    }, {
      "left" : "Region",
      "right" : "Region",
      "info" : "SimpleType[55612-55618]:SimpleType[55671-55677]"
    }, {
      "left" : "getSourceRegion",
      "right" : "getSourceRegion",
      "info" : "SimpleName[55619-55634]:SimpleName[55678-55693]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[55635-55652]:SingleVariableDeclaration[55694-55711]"
    }, {
      "left" : "int lineNumber",
      "right" : "int lineNumber",
      "info" : "SingleVariableDeclaration[55654-55668]:SingleVariableDeclaration[55713-55727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55670-55872]:Block[55729-55931]"
    }, {
      "left" : "if (lineNumber < 1)",
      "right" : "if (lineNumber < 1)",
      "info" : "IfStatement[55676-55722]:IfStatement[55735-55781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55696-55722]:Block[55755-55781]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55704-55716]:ReturnStatement[55763-55775]"
    }, {
      "left" : "SourceFile input = getSourceFileByName(sourceName);",
      "right" : "SourceFile input = getSourceFileByName(sourceName);",
      "info" : "VariableDeclarationStatement[55727-55778]:VariableDeclarationStatement[55786-55837]"
    }, {
      "left" : "if (input != null)",
      "right" : "if (input != null)",
      "info" : "IfStatement[55783-55851]:IfStatement[55842-55910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55802-55851]:Block[55861-55910]"
    }, {
      "left" : "return input.getRegion(lineNumber);",
      "right" : "return input.getRegion(lineNumber);",
      "info" : "ReturnStatement[55810-55845]:ReturnStatement[55869-55904]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[55856-55868]:ReturnStatement[55915-55927]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[56060-56069]:MarkerAnnotation[56119-56128]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[56072-56076]:SimpleType[56131-56135]"
    }, {
      "left" : "getNodeForCodeInsertion",
      "right" : "getNodeForCodeInsertion",
      "info" : "SimpleName[56077-56100]:SimpleName[56136-56159]"
    }, {
      "left" : "JSModule module",
      "right" : "JSModule module",
      "info" : "SingleVariableDeclaration[56101-56116]:SingleVariableDeclaration[56160-56175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56118-56511]:Block[56177-56570]"
    }, {
      "left" : "if (module == null)",
      "right" : "if (module == null)",
      "info" : "IfStatement[56124-56289]:IfStatement[56183-56348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56144-56289]:Block[56203-56348]"
    }, {
      "left" : "if (inputs.isEmpty())",
      "right" : "if (inputs.isEmpty())",
      "info" : "IfStatement[56152-56237]:IfStatement[56211-56296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56174-56237]:Block[56233-56296]"
    }, {
      "left" : "throw new IllegalStateException(\"No inputs\");",
      "right" : "throw new IllegalStateException(\"No inputs\");",
      "info" : "ThrowStatement[56184-56229]:ThrowStatement[56243-56288]"
    }, {
      "left" : "return inputs.get(0).getAstRoot(this);",
      "right" : "return inputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[56245-56283]:ReturnStatement[56304-56342]"
    }, {
      "left" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "right" : "List<CompilerInput> moduleInputs = module.getInputs();",
      "info" : "VariableDeclarationStatement[56295-56349]:VariableDeclarationStatement[56354-56408]"
    }, {
      "left" : "if (moduleInputs.size() > 0)",
      "right" : "if (moduleInputs.size() > 0)",
      "info" : "IfStatement[56354-56441]:IfStatement[56413-56500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56383-56441]:Block[56442-56500]"
    }, {
      "left" : "return moduleInputs.get(0).getAstRoot(this);",
      "right" : "return moduleInputs.get(0).getAstRoot(this);",
      "info" : "ReturnStatement[56391-56435]:ReturnStatement[56450-56494]"
    }, {
      "left" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "right" : "throw new IllegalStateException(\"Root module has no inputs\");",
      "info" : "ThrowStatement[56446-56507]:ThrowStatement[56505-56566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56515-56521]:Modifier[56574-56580]"
    }, {
      "left" : "SourceMap",
      "right" : "SourceMap",
      "info" : "SimpleType[56522-56531]:SimpleType[56581-56590]"
    }, {
      "left" : "getSourceMap",
      "right" : "getSourceMap",
      "info" : "SimpleName[56532-56544]:SimpleName[56591-56603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56547-56574]:Block[56606-56633]"
    }, {
      "left" : "return sourceMap;",
      "right" : "return sourceMap;",
      "info" : "ReturnStatement[56553-56570]:ReturnStatement[56612-56629]"
    }, {
      "left" : "VariableMap",
      "right" : "VariableMap",
      "info" : "SimpleType[56578-56589]:SimpleType[56637-56648]"
    }, {
      "left" : "getVariableMap",
      "right" : "getVariableMap",
      "info" : "SimpleName[56590-56604]:SimpleName[56649-56663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56607-56675]:Block[56666-56734]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().variableMap;",
      "right" : "return getPassConfig().getIntermediateState().variableMap;",
      "info" : "ReturnStatement[56613-56671]:ReturnStatement[56672-56730]"
    }, {
      "left" : "VariableMap",
      "right" : "VariableMap",
      "info" : "SimpleType[56679-56690]:SimpleType[56738-56749]"
    }, {
      "left" : "getPropertyMap",
      "right" : "getPropertyMap",
      "info" : "SimpleName[56691-56705]:SimpleName[56750-56764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56708-56776]:Block[56767-56835]"
    }, {
      "left" : "return getPassConfig().getIntermediateState().propertyMap;",
      "right" : "return getPassConfig().getIntermediateState().propertyMap;",
      "info" : "ReturnStatement[56714-56772]:ReturnStatement[56773-56831]"
    }, {
      "left" : "CompilerOptions",
      "right" : "CompilerOptions",
      "info" : "SimpleType[56780-56795]:SimpleType[56839-56854]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[56796-56806]:SimpleName[56855-56865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56809-56834]:Block[56868-56893]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[56815-56830]:ReturnStatement[56874-56889]"
    }, {
      "left" : "FunctionInformationMap",
      "right" : "FunctionInformationMap",
      "info" : "SimpleType[56838-56860]:SimpleType[56897-56919]"
    }, {
      "left" : "getFunctionalInformationMap",
      "right" : "getFunctionalInformationMap",
      "info" : "SimpleName[56861-56888]:SimpleName[56920-56947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56891-56931]:Block[56950-56990]"
    }, {
      "left" : "return functionInformationMap;",
      "right" : "return functionInformationMap;",
      "info" : "ReturnStatement[56897-56927]:ReturnStatement[56956-56986]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57021-57027]:Modifier[57080-57086]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57028-57034]:Modifier[57087-57093]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57035-57039]:PrimitiveType[57094-57098]"
    }, {
      "left" : "setLoggingLevel",
      "right" : "setLoggingLevel",
      "info" : "SimpleName[57040-57055]:SimpleName[57099-57114]"
    }, {
      "left" : "Level level",
      "right" : "Level level",
      "info" : "SingleVariableDeclaration[57056-57067]:SingleVariableDeclaration[57115-57126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57069-57102]:Block[57128-57161]"
    }, {
      "left" : "logger.setLevel(level);",
      "right" : "logger.setLevel(level);",
      "info" : "ExpressionStatement[57075-57098]:ExpressionStatement[57134-57157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57182-57188]:Modifier[57241-57247]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[57189-57195]:SimpleType[57248-57254]"
    }, {
      "left" : "getAstDotGraph",
      "right" : "getAstDotGraph",
      "info" : "SimpleName[57196-57210]:SimpleName[57255-57269]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[57220-57231]:SimpleType[57279-57290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57232-57463]:Block[57291-57522]"
    }, {
      "left" : "if (jsRoot != null)",
      "right" : "if (jsRoot != null)",
      "info" : "IfStatement[57238-57459]:IfStatement[57297-57518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57258-57429]:Block[57317-57488]"
    }, {
      "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);",
      "info" : "VariableDeclarationStatement[57266-57335]:VariableDeclarationStatement[57325-57394]"
    }, {
      "left" : "cfa.process(null, jsRoot);",
      "right" : "cfa.process(null, jsRoot);",
      "info" : "ExpressionStatement[57342-57368]:ExpressionStatement[57401-57427]"
    }, {
      "left" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "right" : "return DotFormatter.toDot(jsRoot, cfa.getCfg());",
      "info" : "ReturnStatement[57375-57423]:ReturnStatement[57434-57482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57435-57459]:Block[57494-57518]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[57443-57453]:ReturnStatement[57502-57512]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57467-57476]:MarkerAnnotation[57526-57535]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[57479-57485]:Modifier[57538-57544]"
    }, {
      "left" : "ErrorManager",
      "right" : "ErrorManager",
      "info" : "SimpleType[57486-57498]:SimpleType[57545-57557]"
    }, {
      "left" : "getErrorManager",
      "right" : "getErrorManager",
      "info" : "SimpleName[57499-57514]:SimpleName[57558-57573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57517-57622]:Block[57576-57681]"
    }, {
      "left" : "if (options == null)",
      "right" : "if (options == null)",
      "info" : "IfStatement[57523-57593]:IfStatement[57582-57652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57544-57593]:Block[57603-57652]"
    }, {
      "left" : "initOptions(new CompilerOptions());",
      "right" : "initOptions(new CompilerOptions());",
      "info" : "ExpressionStatement[57552-57587]:ExpressionStatement[57611-57646]"
    }, {
      "left" : "return errorManager;",
      "right" : "return errorManager;",
      "info" : "ReturnStatement[57598-57618]:ReturnStatement[57657-57677]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[57626-57635]:MarkerAnnotation[57685-57694]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[57638-57657]:ParameterizedType[57697-57716]"
    }, {
      "left" : "getInputsInOrder",
      "right" : "getInputsInOrder",
      "info" : "SimpleName[57658-57674]:SimpleName[57717-57733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57677-57746]:Block[57736-57805]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(inputs);",
      "info" : "ReturnStatement[57683-57742]:ReturnStatement[57742-57801]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[57832-57851]:ParameterizedType[57891-57910]"
    }, {
      "left" : "getExternsInOrder",
      "right" : "getExternsInOrder",
      "info" : "SimpleName[57852-57869]:SimpleName[57911-57928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57872-57942]:Block[57931-58001]"
    }, {
      "left" : "return Collections.<CompilerInput>unmodifiableList(externs);",
      "right" : "return Collections.<CompilerInput>unmodifiableList(externs);",
      "info" : "ReturnStatement[57878-57938]:ReturnStatement[57937-57997]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58544-58550]:Modifier[58603-58609]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58551-58557]:Modifier[58610-58616]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[58558-58563]:TYPE_DECLARATION_KIND[58617-58622]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleName[58564-58581]:SimpleName[58623-58640]"
    }, {
      "left" : "Serializable",
      "right" : "Serializable",
      "info" : "SimpleType[58593-58605]:SimpleType[58652-58664]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58978-58985]:Modifier[59037-59044]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleName[58986-59003]:SimpleName[59045-59062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59006-59008]:Block[59065-59067]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59108-59114]:Modifier[59167-59173]"
    }, {
      "left" : "IntermediateState",
      "right" : "IntermediateState",
      "info" : "SimpleType[59115-59132]:SimpleType[59174-59191]"
    }, {
      "left" : "getState",
      "right" : "getState",
      "info" : "SimpleName[59133-59141]:SimpleName[59192-59200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59144-59527]:Block[59203-59586]"
    }, {
      "left" : "IntermediateState state = new IntermediateState();",
      "right" : "IntermediateState state = new IntermediateState();",
      "info" : "VariableDeclarationStatement[59150-59200]:VariableDeclarationStatement[59209-59259]"
    }, {
      "left" : "state.externsRoot = externsRoot;",
      "right" : "state.externsRoot = externsRoot;",
      "info" : "ExpressionStatement[59205-59237]:ExpressionStatement[59264-59296]"
    }, {
      "left" : "state.jsRoot = jsRoot;",
      "right" : "state.jsRoot = jsRoot;",
      "info" : "ExpressionStatement[59242-59264]:ExpressionStatement[59301-59323]"
    }, {
      "left" : "state.externs = externs;",
      "right" : "state.externs = externs;",
      "info" : "ExpressionStatement[59269-59293]:ExpressionStatement[59328-59352]"
    }, {
      "left" : "state.inputs = inputs;",
      "right" : "state.inputs = inputs;",
      "info" : "ExpressionStatement[59298-59320]:ExpressionStatement[59357-59379]"
    }, {
      "left" : "state.modules = modules;",
      "right" : "state.modules = modules;",
      "info" : "ExpressionStatement[59325-59349]:ExpressionStatement[59384-59408]"
    }, {
      "left" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "right" : "state.passConfigState = getPassConfig().getIntermediateState();",
      "info" : "ExpressionStatement[59354-59417]:ExpressionStatement[59413-59476]"
    }, {
      "left" : "state.typeRegistry = typeRegistry;",
      "right" : "state.typeRegistry = typeRegistry;",
      "info" : "ExpressionStatement[59422-59456]:ExpressionStatement[59481-59515]"
    }, {
      "left" : "state.lifeCycleStage = getLifeCycleStage();",
      "right" : "state.lifeCycleStage = getLifeCycleStage();",
      "info" : "ExpressionStatement[59461-59504]:ExpressionStatement[59520-59563]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[59510-59523]:ReturnStatement[59569-59582]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59664-59670]:Modifier[59723-59729]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59671-59675]:PrimitiveType[59730-59734]"
    }, {
      "left" : "setState",
      "right" : "setState",
      "info" : "SimpleName[59676-59684]:SimpleName[59735-59743]"
    }, {
      "left" : "IntermediateState state",
      "right" : "IntermediateState state",
      "info" : "SingleVariableDeclaration[59685-59708]:SingleVariableDeclaration[59744-59767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59710-60054]:Block[59769-60113]"
    }, {
      "left" : "externsRoot = state.externsRoot;",
      "right" : "externsRoot = state.externsRoot;",
      "info" : "ExpressionStatement[59716-59748]:ExpressionStatement[59775-59807]"
    }, {
      "left" : "jsRoot = state.jsRoot;",
      "right" : "jsRoot = state.jsRoot;",
      "info" : "ExpressionStatement[59753-59775]:ExpressionStatement[59812-59834]"
    }, {
      "left" : "externs = state.externs;",
      "right" : "externs = state.externs;",
      "info" : "ExpressionStatement[59780-59804]:ExpressionStatement[59839-59863]"
    }, {
      "left" : "inputs = state.inputs;",
      "right" : "inputs = state.inputs;",
      "info" : "ExpressionStatement[59809-59831]:ExpressionStatement[59868-59890]"
    }, {
      "left" : "modules = state.modules;",
      "right" : "modules = state.modules;",
      "info" : "ExpressionStatement[59836-59860]:ExpressionStatement[59895-59919]"
    }, {
      "left" : "passes = createPassConfigInternal();",
      "right" : "passes = createPassConfigInternal();",
      "info" : "ExpressionStatement[59865-59901]:ExpressionStatement[59924-59960]"
    }, {
      "left" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "right" : "getPassConfig().setIntermediateState(state.passConfigState);",
      "info" : "ExpressionStatement[59906-59966]:ExpressionStatement[59965-60025]"
    }, {
      "left" : "typeRegistry = state.typeRegistry;",
      "right" : "typeRegistry = state.typeRegistry;",
      "info" : "ExpressionStatement[59971-60005]:ExpressionStatement[60030-60064]"
    }, {
      "left" : "setLifeCycleStage(state.lifeCycleStage);",
      "right" : "setLifeCycleStage(state.lifeCycleStage);",
      "info" : "ExpressionStatement[60010-60050]:ExpressionStatement[60069-60109]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[60058-60076]:MarkerAnnotation[60117-60135]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[60079-60098]:ParameterizedType[60138-60157]"
    }, {
      "left" : "getInputsForTesting",
      "right" : "getInputsForTesting",
      "info" : "SimpleName[60099-60118]:SimpleName[60158-60177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60121-60145]:Block[60180-60204]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[60127-60141]:ReturnStatement[60186-60200]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[60149-60167]:MarkerAnnotation[60208-60226]"
    }, {
      "left" : "List<CompilerInput>",
      "right" : "List<CompilerInput>",
      "info" : "ParameterizedType[60170-60189]:ParameterizedType[60229-60248]"
    }, {
      "left" : "getExternsForTesting",
      "right" : "getExternsForTesting",
      "info" : "SimpleName[60190-60210]:SimpleName[60249-60269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60213-60238]:Block[60272-60297]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[60219-60234]:ReturnStatement[60278-60293]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60242-60251]:MarkerAnnotation[60301-60310]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60254-60261]:PrimitiveType[60313-60320]"
    }, {
      "left" : "hasRegExpGlobalReferences",
      "right" : "hasRegExpGlobalReferences",
      "info" : "SimpleName[60262-60287]:SimpleName[60321-60346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60290-60333]:Block[60349-60392]"
    }, {
      "left" : "return hasRegExpGlobalReferences;",
      "right" : "return hasRegExpGlobalReferences;",
      "info" : "ReturnStatement[60296-60329]:ReturnStatement[60355-60388]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60337-60346]:MarkerAnnotation[60396-60405]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60349-60353]:PrimitiveType[60408-60412]"
    }, {
      "left" : "setHasRegExpGlobalReferences",
      "right" : "setHasRegExpGlobalReferences",
      "info" : "SimpleName[60354-60382]:SimpleName[60413-60441]"
    }, {
      "left" : "boolean references",
      "right" : "boolean references",
      "info" : "SingleVariableDeclaration[60383-60401]:SingleVariableDeclaration[60442-60460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60403-60452]:Block[60462-60511]"
    }, {
      "left" : "hasRegExpGlobalReferences = references;",
      "right" : "hasRegExpGlobalReferences = references;",
      "info" : "ExpressionStatement[60409-60448]:ExpressionStatement[60468-60507]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60456-60465]:MarkerAnnotation[60515-60524]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60468-60472]:PrimitiveType[60527-60531]"
    }, {
      "left" : "updateGlobalVarReferences",
      "right" : "updateGlobalVarReferences",
      "info" : "SimpleName[60473-60498]:SimpleName[60532-60557]"
    }, {
      "left" : "Map<Var, ReferenceCollection> refMapPatch",
      "right" : "Map<Var, ReferenceCollection> refMapPatch",
      "info" : "SingleVariableDeclaration[60499-60540]:SingleVariableDeclaration[60558-60599]"
    }, {
      "left" : "Node collectionRoot",
      "right" : "Node collectionRoot",
      "info" : "SingleVariableDeclaration[60548-60567]:SingleVariableDeclaration[60607-60626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60569-60907]:Block[60628-60966]"
    }, {
      "left" : "Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT\n        || collectionRoot.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT\n        || collectionRoot.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[60575-60693]:ExpressionStatement[60634-60752]"
    }, {
      "left" : "if (globalRefMap == null)",
      "right" : "if (globalRefMap == null)",
      "info" : "IfStatement[60698-60830]:IfStatement[60757-60889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60724-60830]:Block[60783-60889]"
    }, {
      "left" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());",
      "right" : "globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());",
      "info" : "ExpressionStatement[60732-60824]:ExpressionStatement[60791-60883]"
    }, {
      "left" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "right" : "globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);",
      "info" : "ExpressionStatement[60835-60903]:ExpressionStatement[60894-60962]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60911-60920]:MarkerAnnotation[60970-60979]"
    }, {
      "left" : "ReferenceMap",
      "right" : "ReferenceMap",
      "info" : "SimpleType[60923-60935]:SimpleType[60982-60994]"
    }, {
      "left" : "getGlobalVarReferences",
      "right" : "getGlobalVarReferences",
      "info" : "SimpleName[60936-60958]:SimpleName[60995-61017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60961-60991]:Block[61020-61050]"
    }, {
      "left" : "return globalRefMap;",
      "right" : "return globalRefMap;",
      "info" : "ReturnStatement[60967-60987]:ReturnStatement[61026-61046]"
    } ]
  },
  "interFileMappings" : { }
}