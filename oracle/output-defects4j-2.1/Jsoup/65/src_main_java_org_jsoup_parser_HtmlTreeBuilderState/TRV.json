{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[297-1378]:MethodDeclaration[297-1378]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[1411-2273]:MethodDeclaration[1411-2273]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2283-2464]:MethodDeclaration[2283-2464]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2497-3622]:MethodDeclaration[2497-3622]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[3651-6609]:MethodDeclaration[3651-6609]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6619-6756]:MethodDeclaration[6619-6756]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[6793-7866]:MethodDeclaration[6793-7866]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[7876-8063]:MethodDeclaration[7876-8063]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8095-9874]:MethodDeclaration[8095-9874]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[9884-10060]:MethodDeclaration[9884-10060]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10089-38329]:MethodDeclaration[10089-38329]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38339-39199]:MethodDeclaration[38339-39199]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39289-39935]:MethodDeclaration[39289-39935]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39965-43854]:MethodDeclaration[39965-43854]"
    }, {
      "left" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[43864-44345]:MethodDeclaration[43864-44345]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[44379-46166]:MethodDeclaration[44379-46166]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[46198-47760]:MethodDeclaration[46198-47760]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[47796-49634]:MethodDeclaration[47796-49634]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[49644-49890]:MethodDeclaration[49644-49890]"
    }, {
      "left" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[51925-52364]:MethodDeclaration[52028-52467]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[54623-54859]:MethodDeclaration[54821-55057]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54888-56830]:MethodDeclaration[55086-57028]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56840-56951]:MethodDeclaration[57038-57149]"
    }, {
      "left" : "private void closeCell(HtmlTreeBuilder tb)",
      "right" : "private void closeCell(HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56961-57185]:MethodDeclaration[57159-57383]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[57216-61232]:MethodDeclaration[57414-61430]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61242-61365]:MethodDeclaration[61440-61563]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61403-62196]:MethodDeclaration[61601-62394]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[62228-63237]:MethodDeclaration[62426-63435]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[63270-65067]:MethodDeclaration[63468-65265]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65103-66035]:MethodDeclaration[65301-66233]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66072-66614]:MethodDeclaration[66270-66812]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66655-67287]:MethodDeclaration[66853-67485]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67324-67463]:MethodDeclaration[67522-67661]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67476-67536]:FieldDeclaration[67674-67734]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67542-67596]:MethodDeclaration[67740-67794]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67602-67809]:MethodDeclaration[67800-68007]"
    }, {
      "left" : "private static boolean isWhitespace(String data)",
      "right" : "private static boolean isWhitespace(String data)",
      "info" : "MethodDeclaration[67815-68138]:MethodDeclaration[68013-68336]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68144-68375]:MethodDeclaration[68342-68573]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68381-68614]:MethodDeclaration[68579-68812]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "TypeDeclaration[68784-71227]:TypeDeclaration[68982-71425]"
    }, {
      "left" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "right" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "info" : "FieldDeclaration[68831-68992]:FieldDeclaration[69029-69190]"
    }, {
      "left" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[69001-69304]:FieldDeclaration[69199-69502]"
    }, {
      "left" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "right" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "info" : "FieldDeclaration[69313-69403]:FieldDeclaration[69511-69601]"
    }, {
      "left" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "right" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "info" : "FieldDeclaration[69412-69497]:FieldDeclaration[69610-69695]"
    }, {
      "left" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "right" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "info" : "FieldDeclaration[69506-69596]:FieldDeclaration[69704-69794]"
    }, {
      "left" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "right" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "info" : "FieldDeclaration[69605-69667]:FieldDeclaration[69803-69865]"
    }, {
      "left" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[69676-69816]:FieldDeclaration[69874-70014]"
    }, {
      "left" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "right" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[69825-69920]:FieldDeclaration[70023-70118]"
    }, {
      "left" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "right" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "info" : "FieldDeclaration[69929-70048]:FieldDeclaration[70127-70246]"
    }, {
      "left" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "right" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "info" : "FieldDeclaration[70057-70147]:FieldDeclaration[70255-70345]"
    }, {
      "left" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "right" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "info" : "FieldDeclaration[70156-70253]:FieldDeclaration[70354-70451]"
    }, {
      "left" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[70262-70348]:FieldDeclaration[70460-70546]"
    }, {
      "left" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "right" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "info" : "FieldDeclaration[70357-70430]:FieldDeclaration[70555-70628]"
    }, {
      "left" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70439-70592]:FieldDeclaration[70637-70790]"
    }, {
      "left" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[70601-70924]:FieldDeclaration[70799-71122]"
    }, {
      "left" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[70933-71103]:FieldDeclaration[71131-71301]"
    }, {
      "left" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[71112-71221]:FieldDeclaration[71310-71419]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[342-1378]:Block[342-1378]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[356-1343]:IfStatement[356-1343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[377-442]:Block[377-442]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[395-407]:ReturnStatement[395-407]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[448-1343]:IfStatement[448-1343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[467-524]:Block[467-524]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[485-510]:ExpressionStatement[485-510]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[530-1343]:IfStatement[530-1343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[549-1172]:Block[549-1172]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[689-721]:VariableDeclarationStatement[689-721]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "right" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "info" : "VariableDeclarationStatement[738-888]:VariableDeclarationStatement[738-888]"
    }, {
      "left" : "doctype.setPubSysKey(d.getPubSysKey());",
      "right" : "doctype.setPubSysKey(d.getPubSysKey());",
      "info" : "ExpressionStatement[905-944]:ExpressionStatement[905-944]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[961-999]:ExpressionStatement[961-999]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[1016-1115]:IfStatement[1016-1115]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1059-1115]:ExpressionStatement[1059-1115]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1132-1158]:ExpressionStatement[1132-1158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1178-1343]:Block[1178-1343]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1245-1271]:ExpressionStatement[1245-1271]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1288-1309]:ReturnStatement[1288-1309]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1356-1368]:ReturnStatement[1356-1368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1456-2273]:Block[1456-2273]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1470-2238]:IfStatement[1470-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1489-1566]:Block[1489-1566]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1507-1522]:ExpressionStatement[1507-1522]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1539-1552]:ReturnStatement[1539-1552]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1572-2238]:IfStatement[1572-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1591-1648]:Block[1591-1648]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1609-1634]:ExpressionStatement[1609-1634]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1654-2238]:IfStatement[1654-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1675-1740]:Block[1675-1740]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1693-1705]:ReturnStatement[1693-1705]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[1746-2238]:IfStatement[1746-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1812-1913]:Block[1812-1913]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1830-1856]:ExpressionStatement[1830-1856]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1873-1899]:ExpressionStatement[1873-1899]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1919-2238]:IfStatement[1919-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2013-2072]:Block[2013-2072]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2031-2058]:ReturnStatement[2031-2058]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2078-2238]:IfStatement[2078-2238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2096-2173]:Block[2096-2173]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2114-2129]:ExpressionStatement[2114-2129]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2146-2159]:ReturnStatement[2146-2159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2179-2238]:Block[2179-2238]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2197-2224]:ReturnStatement[2197-2224]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2251-2263]:ReturnStatement[2251-2263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2341-2464]:Block[2341-2464]"
    }, {
      "left" : "tb.insertStartTag(\"html\");",
      "right" : "tb.insertStartTag(\"html\");",
      "info" : "ExpressionStatement[2355-2381]:ExpressionStatement[2355-2381]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2394-2420]:ExpressionStatement[2394-2420]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2433-2454]:ReturnStatement[2433-2454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2542-3622]:Block[2542-3622]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2556-3587]:IfStatement[2556-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2577-2621]:Block[2577-2621]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2595-2607]:ReturnStatement[2595-2607]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2627-3587]:IfStatement[2627-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2646-2703]:Block[2646-2703]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2664-2689]:ExpressionStatement[2664-2689]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2709-3587]:IfStatement[2709-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2728-2805]:Block[2728-2805]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2746-2761]:ExpressionStatement[2746-2761]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2778-2791]:ReturnStatement[2778-2791]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[2811-3587]:IfStatement[2811-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2877-2961]:Block[2877-2961]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2895-2924]:ReturnStatement[2895-2924]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
      "info" : "IfStatement[2967-3587]:IfStatement[2967-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3033-3186]:Block[3033-3186]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[3051-3092]:VariableDeclarationStatement[3051-3092]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3109-3133]:ExpressionStatement[3109-3133]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3150-3172]:ExpressionStatement[3150-3172]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3192-3587]:IfStatement[3192-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3286-3383]:Block[3286-3383]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3304-3331]:ExpressionStatement[3304-3331]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3348-3369]:ReturnStatement[3348-3369]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3389-3587]:IfStatement[3389-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3407-3484]:Block[3407-3484]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3425-3440]:ExpressionStatement[3425-3440]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3457-3470]:ReturnStatement[3457-3470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3490-3587]:Block[3490-3587]"
    }, {
      "left" : "tb.processStartTag(\"head\");",
      "right" : "tb.processStartTag(\"head\");",
      "info" : "ExpressionStatement[3508-3535]:ExpressionStatement[3508-3535]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3552-3573]:ReturnStatement[3552-3573]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3600-3612]:ReturnStatement[3600-3612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3696-6609]:Block[3696-6609]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3710-3819]:IfStatement[3710-3819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3731-3819]:Block[3731-3819]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3749-3776]:ExpressionStatement[3749-3776]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3793-3805]:ReturnStatement[3793-3805]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3832-6574]:SwitchStatement[3832-6574]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3866-3879]:SwitchCase[3866-3879]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3900-3925]:ExpressionStatement[3900-3925]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3946-3952]:BreakStatement[3946-3952]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3969-3982]:SwitchCase[3969-3982]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[4003-4018]:ExpressionStatement[4003-4018]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4039-4052]:ReturnStatement[4039-4052]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4069-4083]:SwitchCase[4069-4083]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4104-4142]:VariableDeclarationStatement[4104-4142]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[4163-4196]:VariableDeclarationStatement[4163-4196]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4217-5918]:IfStatement[4217-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4242-4319]:Block[4242-4319]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4268-4297]:ReturnStatement[4268-4297]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4325-5918]:IfStatement[4325-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4400-4686]:Block[4400-4686]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4426-4461]:VariableDeclarationStatement[4426-4461]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4566-4664]:IfStatement[4566-4664]"
    }, {
      "left" : "tb.maybeSetBaseUri(el);",
      "right" : "tb.maybeSetBaseUri(el);",
      "info" : "ExpressionStatement[4641-4664]:ExpressionStatement[4641-4664]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4692-5918]:IfStatement[4692-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4717-4852]:Block[4717-4852]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4743-4780]:VariableDeclarationStatement[4743-4780]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4858-5918]:IfStatement[4858-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4884-4956]:Block[4884-4956]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4910-4934]:ExpressionStatement[4910-4934]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4962-5918]:IfStatement[4962-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5008-5081]:Block[5008-5081]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5034-5059]:ExpressionStatement[5034-5059]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5087-5918]:IfStatement[5087-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5116-5364]:Block[5116-5364]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5270-5287]:ExpressionStatement[5270-5287]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5312-5342]:ExpressionStatement[5312-5342]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5370-5918]:IfStatement[5370-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5397-5705]:Block[5397-5705]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5497-5548]:ExpressionStatement[5497-5548]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5573-5596]:ExpressionStatement[5573-5596]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5621-5641]:ExpressionStatement[5621-5641]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5666-5683]:ExpressionStatement[5666-5683]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5711-5918]:IfStatement[5711-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5736-5837]:Block[5736-5837]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5762-5777]:ExpressionStatement[5762-5777]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5802-5815]:ReturnStatement[5802-5815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5843-5918]:Block[5843-5918]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5869-5896]:ReturnStatement[5869-5896]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5939-5945]:BreakStatement[5939-5945]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5962-5974]:SwitchCase[5962-5974]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5995-6027]:VariableDeclarationStatement[5995-6027]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[6048-6072]:ExpressionStatement[6048-6072]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6093-6460]:IfStatement[6093-6460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6118-6225]:Block[6118-6225]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6144-6153]:ExpressionStatement[6144-6153]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6178-6203]:ExpressionStatement[6178-6203]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6231-6460]:IfStatement[6231-6460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6278-6353]:Block[6278-6353]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6304-6331]:ReturnStatement[6304-6331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6359-6460]:Block[6359-6460]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6385-6400]:ExpressionStatement[6385-6400]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6425-6438]:ReturnStatement[6425-6438]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6481-6487]:BreakStatement[6481-6487]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6504-6512]:SwitchCase[6504-6512]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6533-6560]:ReturnStatement[6533-6560]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6587-6599]:ReturnStatement[6587-6599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6673-6756]:Block[6673-6756]"
    }, {
      "left" : "tb.processEndTag(\"head\");",
      "right" : "tb.processEndTag(\"head\");",
      "info" : "ExpressionStatement[6687-6712]:ExpressionStatement[6687-6712]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6725-6746]:ReturnStatement[6725-6746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6838-7866]:Block[6838-7866]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6852-7831]:IfStatement[6852-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6871-6918]:Block[6871-6918]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6889-6904]:ExpressionStatement[6889-6904]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[6924-7831]:IfStatement[6924-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6990-7051]:Block[6990-7051]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[7008-7037]:ReturnStatement[7008-7037]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
      "info" : "IfStatement[7057-7831]:IfStatement[7057-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7123-7203]:Block[7123-7203]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7141-7150]:ExpressionStatement[7141-7150]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7167-7189]:ExpressionStatement[7167-7189]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7209-7831]:IfStatement[7209-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7393-7454]:Block[7393-7454]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7411-7440]:ReturnStatement[7411-7440]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
      "info" : "IfStatement[7460-7831]:IfStatement[7460-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7520-7579]:Block[7520-7579]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7538-7565]:ReturnStatement[7538-7565]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7585-7831]:IfStatement[7585-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7689-7766]:Block[7689-7766]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7707-7722]:ExpressionStatement[7707-7722]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7739-7752]:ReturnStatement[7739-7752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7772-7831]:Block[7772-7831]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7790-7817]:ReturnStatement[7790-7817]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7844-7856]:ReturnStatement[7844-7856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7934-8063]:Block[7934-8063]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7948-7963]:ExpressionStatement[7948-7963]"
    }, {
      "left" : "tb.insert(new Token.Character().data(t.toString()));",
      "right" : "tb.insert(new Token.Character().data(t.toString()));",
      "info" : "ExpressionStatement[7976-8028]:ExpressionStatement[7976-8028]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8041-8053]:ReturnStatement[8041-8053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8140-9874]:Block[8140-9874]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8154-9839]:IfStatement[8154-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8175-8234]:Block[8175-8234]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8193-8220]:ExpressionStatement[8193-8220]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8240-9839]:IfStatement[8240-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8259-8316]:Block[8259-8316]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8277-8302]:ExpressionStatement[8277-8302]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8322-9839]:IfStatement[8322-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8341-8388]:Block[8341-8388]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8359-8374]:ExpressionStatement[8359-8374]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8394-9839]:IfStatement[8394-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8414-9508]:Block[8414-9508]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8432-8473]:VariableDeclarationStatement[8432-8473]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[8490-8526]:VariableDeclarationStatement[8490-8526]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8543-9494]:IfStatement[8543-9494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8568-8637]:Block[8568-8637]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8590-8619]:ReturnStatement[8590-8619]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8643-9494]:IfStatement[8643-9494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8668-8813]:Block[8668-8813]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8690-8710]:ExpressionStatement[8690-8710]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8731-8752]:ExpressionStatement[8731-8752]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8773-8795]:ExpressionStatement[8773-8795]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8819-9494]:IfStatement[8819-9494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8848-8955]:Block[8848-8955]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8870-8890]:ExpressionStatement[8870-8890]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8911-8937]:ExpressionStatement[8911-8937]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8961-9494]:IfStatement[8961-9494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9073-9308]:Block[9073-9308]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9095-9110]:ExpressionStatement[9095-9110]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9131-9166]:VariableDeclarationStatement[9131-9166]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9187-9201]:ExpressionStatement[9187-9201]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9222-9244]:ExpressionStatement[9222-9244]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9265-9290]:ExpressionStatement[9265-9290]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9314-9494]:IfStatement[9314-9494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9339-9428]:Block[9339-9428]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9361-9376]:ExpressionStatement[9361-9376]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9397-9410]:ReturnStatement[9397-9410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9434-9494]:Block[9434-9494]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9456-9476]:ExpressionStatement[9456-9476]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9514-9839]:IfStatement[9514-9839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9532-9781]:Block[9532-9781]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
      "info" : "IfStatement[9550-9767]:IfStatement[9550-9767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9612-9672]:Block[9612-9672]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9634-9654]:ExpressionStatement[9634-9654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9678-9767]:Block[9678-9767]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9700-9715]:ExpressionStatement[9700-9715]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9736-9749]:ReturnStatement[9736-9749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9787-9839]:Block[9787-9839]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9805-9825]:ExpressionStatement[9805-9825]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9852-9864]:ReturnStatement[9852-9864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9942-10060]:Block[9942-10060]"
    }, {
      "left" : "tb.processStartTag(\"body\");",
      "right" : "tb.processStartTag(\"body\");",
      "info" : "ExpressionStatement[9956-9983]:ExpressionStatement[9956-9983]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9996-10016]:ExpressionStatement[9996-10016]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[10029-10050]:ReturnStatement[10029-10050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10134-38329]:Block[10134-38329]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10148-38294]:SwitchStatement[10148-38294]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10182-10197]:SwitchCase[10182-10197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10198-10904]:Block[10198-10904]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10220-10256]:VariableDeclarationStatement[10220-10256]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10277-10859]:IfStatement[10277-10859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10313-10465]:Block[10313-10465]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10390-10405]:ExpressionStatement[10390-10405]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10430-10443]:ReturnStatement[10430-10443]"
    }, {
      "left" : "if (tb.framesetOk() && isWhitespace(c))",
      "right" : "if (tb.framesetOk() && isWhitespace(c))",
      "info" : "IfStatement[10471-10859]:IfStatement[10471-10859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10511-10686]:Block[10511-10686]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10591-10626]:ExpressionStatement[10591-10626]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10651-10664]:ExpressionStatement[10651-10664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10692-10859]:Block[10692-10859]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10718-10753]:ExpressionStatement[10718-10753]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10778-10791]:ExpressionStatement[10778-10791]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10816-10837]:ExpressionStatement[10816-10837]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10880-10886]:BreakStatement[10880-10886]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10921-10934]:SwitchCase[10921-10934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10935-11027]:Block[10935-11027]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10957-10982]:ExpressionStatement[10957-10982]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11003-11009]:BreakStatement[11003-11009]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[11044-11057]:SwitchCase[11044-11057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11058-11147]:Block[11058-11147]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11080-11095]:ExpressionStatement[11080-11095]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11116-11129]:ReturnStatement[11116-11129]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11164-11178]:SwitchCase[11164-11178]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11199-11240]:VariableDeclarationStatement[11199-11240]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[11322-11358]:VariableDeclarationStatement[11322-11358]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[11379-26699]:IfStatement[11379-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11401-12146]:Block[11401-12146]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[11427-11947]:IfStatement[11427-11947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11475-11947]:Block[11475-11947]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11505-11520]:ExpressionStatement[11505-11520]"
    }, {
      "left" : "tb.processEndTag(\"a\");",
      "right" : "tb.processEndTag(\"a\");",
      "info" : "ExpressionStatement[11549-11571]:ExpressionStatement[11549-11571]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[11648-11690]:VariableDeclarationStatement[11648-11690]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[11719-11921]:IfStatement[11719-11921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11743-11921]:Block[11743-11921]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[11777-11827]:ExpressionStatement[11777-11827]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[11860-11891]:ExpressionStatement[11860-11891]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[11972-12007]:ExpressionStatement[11972-12007]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[12032-12064]:VariableDeclarationStatement[12032-12064]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[12089-12124]:ExpressionStatement[12089-12124]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
      "info" : "IfStatement[12152-26699]:IfStatement[12152-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12221-12400]:Block[12221-12400]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12247-12282]:ExpressionStatement[12247-12282]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[12307-12332]:ExpressionStatement[12307-12332]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12357-12378]:ExpressionStatement[12357-12378]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
      "info" : "IfStatement[12406-26699]:IfStatement[12406-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12468-12666]:Block[12468-12666]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[12494-12599]:IfStatement[12494-12599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12521-12599]:Block[12521-12599]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[12551-12573]:ExpressionStatement[12551-12573]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12624-12644]:ExpressionStatement[12624-12644]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[12672-26699]:IfStatement[12672-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12697-12906]:Block[12697-12906]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[12804-12839]:ExpressionStatement[12804-12839]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[12864-12884]:ExpressionStatement[12864-12884]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[12912-26699]:IfStatement[12912-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12935-13743]:Block[12935-13743]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12961-12982]:ExpressionStatement[12961-12982]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[13007-13048]:VariableDeclarationStatement[13007-13048]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[13073-13546]:ForStatement[13073-13546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13116-13546]:Block[13116-13546]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[13146-13172]:VariableDeclarationStatement[13146-13172]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[13201-13359]:IfStatement[13201-13359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13233-13359]:Block[13233-13359]"
    }, {
      "left" : "tb.processEndTag(\"li\");",
      "right" : "tb.processEndTag(\"li\");",
      "info" : "ExpressionStatement[13267-13290]:ExpressionStatement[13267-13290]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13323-13329]:BreakStatement[13323-13329]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[13388-13520]:IfStatement[13388-13520]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13514-13520]:BreakStatement[13514-13520]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13571-13676]:IfStatement[13571-13676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13598-13676]:Block[13598-13676]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[13628-13650]:ExpressionStatement[13628-13650]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13701-13721]:ExpressionStatement[13701-13721]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[13749-26699]:IfStatement[13749-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13774-14195]:Block[13774-14195]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[13800-13815]:ExpressionStatement[13800-13815]"
    }, {
      "left" : "Element html = tb.getStack().get(0);",
      "right" : "Element html = tb.getStack().get(0);",
      "info" : "VariableDeclarationStatement[13899-13935]:VariableDeclarationStatement[13899-13935]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[13960-14173]:EnhancedForStatement[13960-14173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14013-14173]:Block[14013-14173]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14043-14147]:IfStatement[14043-14147]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[14114-14147]:ExpressionStatement[14114-14147]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
      "info" : "IfStatement[14201-26699]:IfStatement[14201-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14261-14338]:Block[14261-14338]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[14287-14316]:ReturnStatement[14287-14316]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[14344-26699]:IfStatement[14344-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14369-15137]:Block[14369-15137]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14395-14410]:ExpressionStatement[14395-14410]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[14435-14476]:VariableDeclarationStatement[14435-14476]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[14501-15115]:IfStatement[14501-15115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14589-14721]:Block[14589-14721]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14672-14685]:ReturnStatement[14672-14685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14727-15115]:Block[14727-15115]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14757-14778]:ExpressionStatement[14757-14778]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[14807-14835]:VariableDeclarationStatement[14807-14835]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[14864-15089]:EnhancedForStatement[14864-15089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14917-15089]:Block[14917-15089]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[14951-15059]:IfStatement[14951-15059]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[15026-15059]:ExpressionStatement[15026-15059]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[15143-26699]:IfStatement[15143-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15172-16133]:Block[15172-16133]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[15198-15213]:ExpressionStatement[15198-15213]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15238-15279]:VariableDeclarationStatement[15238-15279]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[15304-16111]:IfStatement[15304-16111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15392-15524]:Block[15392-15524]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15475-15488]:ReturnStatement[15475-15488]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[15530-16111]:IfStatement[15530-16111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15552-15640]:Block[15552-15640]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15582-15595]:ReturnStatement[15582-15595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15646-16111]:Block[15646-16111]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[15676-15706]:VariableDeclarationStatement[15676-15706]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[15735-15812]:IfStatement[15735-15812]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[15796-15812]:ExpressionStatement[15796-15812]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
      "info" : "WhileStatement[15895-15981]:WhileStatement[15895-15981]"
    }, {
      "left" : "stack.remove(stack.size()-1);",
      "right" : "stack.remove(stack.size()-1);",
      "info" : "ExpressionStatement[15952-15981]:ExpressionStatement[15952-15981]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16010-16030]:ExpressionStatement[16010-16030]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[16059-16085]:ExpressionStatement[16059-16085]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[16139-26699]:IfStatement[16139-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16190-16599]:Block[16190-16599]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16216-16321]:IfStatement[16216-16321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16243-16321]:Block[16243-16321]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16273-16295]:ExpressionStatement[16273-16295]"
    }, {
      "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "right" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
      "info" : "IfStatement[16346-16532]:IfStatement[16346-16532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16423-16532]:Block[16423-16532]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[16453-16468]:ExpressionStatement[16453-16468]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[16497-16506]:ExpressionStatement[16497-16506]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16557-16577]:ExpressionStatement[16557-16577]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
      "info" : "IfStatement[16605-26699]:IfStatement[16605-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16669-16970]:Block[16669-16970]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16695-16800]:IfStatement[16695-16800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16722-16800]:Block[16722-16800]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[16752-16774]:ExpressionStatement[16752-16774]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16825-16845]:ExpressionStatement[16825-16845]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16927-16948]:ExpressionStatement[16927-16948]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[16976-26699]:IfStatement[16976-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17001-17380]:Block[17001-17380]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[17027-17173]:IfStatement[17027-17173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17060-17173]:Block[17060-17173]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17090-17105]:ExpressionStatement[17090-17105]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17134-17147]:ReturnStatement[17134-17147]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[17198-17303]:IfStatement[17198-17303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17225-17303]:Block[17225-17303]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[17255-17277]:ExpressionStatement[17255-17277]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[17328-17358]:ExpressionStatement[17328-17358]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[17386-26699]:IfStatement[17386-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17433-18274]:Block[17433-18274]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17459-17480]:ExpressionStatement[17459-17480]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[17505-17546]:VariableDeclarationStatement[17505-17546]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[17571-18077]:ForStatement[17571-18077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17614-18077]:Block[17614-18077]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[17644-17670]:VariableDeclarationStatement[17644-17670]"
    }, {
      "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
      "info" : "IfStatement[17699-17890]:IfStatement[17699-17890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17755-17890]:Block[17755-17890]"
    }, {
      "left" : "tb.processEndTag(el.nodeName());",
      "right" : "tb.processEndTag(el.nodeName());",
      "info" : "ExpressionStatement[17789-17821]:ExpressionStatement[17789-17821]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17854-17860]:BreakStatement[17854-17860]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[17919-18051]:IfStatement[17919-18051]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18045-18051]:BreakStatement[18045-18051]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18102-18207]:IfStatement[18102-18207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18129-18207]:Block[18129-18207]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18159-18181]:ExpressionStatement[18159-18181]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18232-18252]:ExpressionStatement[18232-18252]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[18280-26699]:IfStatement[18280-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18310-18610]:Block[18310-18610]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[18336-18441]:IfStatement[18336-18441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18363-18441]:Block[18363-18441]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[18393-18415]:ExpressionStatement[18393-18415]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[18466-18486]:ExpressionStatement[18466-18486]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[18511-18561]:ExpressionStatement[18511-18561]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[18616-26699]:IfStatement[18616-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18643-19147]:Block[18643-19147]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[18669-19125]:IfStatement[18669-19125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18701-18929]:Block[18701-18929]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18782-18797]:ExpressionStatement[18782-18797]"
    }, {
      "left" : "tb.processEndTag(\"button\");",
      "right" : "tb.processEndTag(\"button\");",
      "info" : "ExpressionStatement[18826-18853]:ExpressionStatement[18826-18853]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[18882-18903]:ExpressionStatement[18882-18903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18935-19125]:Block[18935-19125]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18965-19000]:ExpressionStatement[18965-19000]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19029-19049]:ExpressionStatement[19029-19049]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19078-19099]:ExpressionStatement[19078-19099]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
      "info" : "IfStatement[19153-26699]:IfStatement[19153-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19206-19408]:Block[19206-19408]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19232-19267]:ExpressionStatement[19232-19267]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19292-19325]:VariableDeclarationStatement[19292-19325]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19350-19386]:ExpressionStatement[19350-19386]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[19414-26699]:IfStatement[19414-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19439-19879]:Block[19439-19879]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19465-19500]:ExpressionStatement[19465-19500]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[19525-19738]:IfStatement[19525-19738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19549-19738]:Block[19549-19738]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[19579-19594]:ExpressionStatement[19579-19594]"
    }, {
      "left" : "tb.processEndTag(\"nobr\");",
      "right" : "tb.processEndTag(\"nobr\");",
      "info" : "ExpressionStatement[19623-19648]:ExpressionStatement[19623-19648]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19677-19712]:ExpressionStatement[19677-19712]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19763-19796]:VariableDeclarationStatement[19763-19796]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19821-19857]:ExpressionStatement[19821-19857]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[19885-26699]:IfStatement[19885-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19946-20183]:Block[19946-20183]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19972-20007]:ExpressionStatement[19972-20007]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20032-20052]:ExpressionStatement[20032-20052]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[20077-20115]:ExpressionStatement[20077-20115]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20140-20161]:ExpressionStatement[20140-20161]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[20189-26699]:IfStatement[20189-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20215-20570]:Block[20215-20570]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20241-20409]:IfStatement[20241-20409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20331-20409]:Block[20331-20409]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[20361-20383]:ExpressionStatement[20361-20383]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[20434-20454]:ExpressionStatement[20434-20454]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20479-20500]:ExpressionStatement[20479-20500]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[20525-20548]:ExpressionStatement[20525-20548]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20576-26699]:IfStatement[20576-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20602-20871]:Block[20602-20871]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20628-20663]:ExpressionStatement[20628-20663]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20688-20726]:VariableDeclarationStatement[20688-20726]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20751-20849]:IfStatement[20751-20849]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20828-20849]:ExpressionStatement[20828-20849]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
      "info" : "IfStatement[20877-26699]:IfStatement[20877-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20936-21009]:Block[20936-21009]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20962-20987]:ExpressionStatement[20962-20987]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[21015-26699]:IfStatement[21015-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21038-21287]:Block[21038-21287]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[21064-21169]:IfStatement[21064-21169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21091-21169]:Block[21091-21169]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[21121-21143]:ExpressionStatement[21121-21143]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[21194-21219]:ExpressionStatement[21194-21219]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[21244-21265]:ExpressionStatement[21244-21265]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[21293-26699]:IfStatement[21293-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21319-21591]:Block[21319-21591]"
    }, {
      "left" : "if (tb.getFromStack(\"svg\") == null)",
      "right" : "if (tb.getFromStack(\"svg\") == null)",
      "info" : "IfStatement[21345-21569]:IfStatement[21345-21569]"
    }, {
      "left" : "return tb.process(startTag.name(\"img\"));",
      "right" : "return tb.process(startTag.name(\"img\"));",
      "info" : "ReturnStatement[21409-21449]:ReturnStatement[21409-21449]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[21549-21569]:ExpressionStatement[21549-21569]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21597-26699]:IfStatement[21597-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21625-23246]:Block[21625-23246]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21719-21734]:ExpressionStatement[21719-21734]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21759-21833]:IfStatement[21759-21833]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21820-21833]:ReturnStatement[21820-21833]"
    }, {
      "left" : "tb.processStartTag(\"form\");",
      "right" : "tb.processStartTag(\"form\");",
      "info" : "ExpressionStatement[21859-21886]:ExpressionStatement[21859-21886]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[21911-22128]:IfStatement[21911-22128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21953-22128]:Block[21953-22128]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[21983-22018]:VariableDeclarationStatement[21983-22018]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[22047-22102]:ExpressionStatement[22047-22102]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[22153-22178]:ExpressionStatement[22153-22178]"
    }, {
      "left" : "tb.processStartTag(\"label\");",
      "right" : "tb.processStartTag(\"label\");",
      "info" : "ExpressionStatement[22203-22231]:ExpressionStatement[22203-22231]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[22306-22515]:VariableDeclarationStatement[22306-22515]"
    }, {
      "left" : "tb.process(new Token.Character().data(prompt));",
      "right" : "tb.process(new Token.Character().data(prompt));",
      "info" : "ExpressionStatement[22541-22588]:ExpressionStatement[22541-22588]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22647-22690]:VariableDeclarationStatement[22647-22690]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22715-22945]:EnhancedForStatement[22715-22945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22758-22945]:Block[22758-22945]"
    }, {
      "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "info" : "IfStatement[22788-22919]:IfStatement[22788-22919]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22896-22919]:ExpressionStatement[22896-22919]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[22970-23006]:ExpressionStatement[22970-23006]"
    }, {
      "left" : "tb.processStartTag(\"input\", inputAttribs);",
      "right" : "tb.processStartTag(\"input\", inputAttribs);",
      "info" : "ExpressionStatement[23031-23073]:ExpressionStatement[23031-23073]"
    }, {
      "left" : "tb.processEndTag(\"label\");",
      "right" : "tb.processEndTag(\"label\");",
      "info" : "ExpressionStatement[23098-23124]:ExpressionStatement[23098-23124]"
    }, {
      "left" : "tb.processStartTag(\"hr\");",
      "right" : "tb.processStartTag(\"hr\");",
      "info" : "ExpressionStatement[23149-23174]:ExpressionStatement[23149-23174]"
    }, {
      "left" : "tb.processEndTag(\"form\");",
      "right" : "tb.processEndTag(\"form\");",
      "info" : "ExpressionStatement[23199-23224]:ExpressionStatement[23199-23224]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[23252-26699]:IfStatement[23252-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23281-23793]:Block[23281-23793]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[23307-23327]:ExpressionStatement[23307-23327]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23585-23632]:ExpressionStatement[23585-23632]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23657-23680]:ExpressionStatement[23657-23680]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23705-23726]:ExpressionStatement[23705-23726]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23751-23771]:ExpressionStatement[23751-23771]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23799-26699]:IfStatement[23799-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23823-24135]:Block[23823-24135]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23849-23954]:IfStatement[23849-23954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23876-23954]:Block[23876-23954]"
    }, {
      "left" : "tb.processEndTag(\"p\");",
      "right" : "tb.processEndTag(\"p\");",
      "info" : "ExpressionStatement[23906-23928]:ExpressionStatement[23906-23928]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[23979-24014]:ExpressionStatement[23979-24014]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24039-24060]:ExpressionStatement[24039-24060]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24085-24113]:ExpressionStatement[24085-24113]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[24141-26699]:IfStatement[24141-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24168-24290]:Block[24168-24290]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24194-24215]:ExpressionStatement[24194-24215]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24240-24268]:ExpressionStatement[24240-24268]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[24296-26699]:IfStatement[24296-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24324-24466]:Block[24324-24466]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24416-24444]:ExpressionStatement[24416-24444]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24472-26699]:IfStatement[24472-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24499-25035]:Block[24499-25035]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24525-24560]:ExpressionStatement[24525-24560]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24585-24605]:ExpressionStatement[24585-24605]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24630-24651]:ExpressionStatement[24630-24651]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24677-24717]:VariableDeclarationStatement[24677-24717]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24742-25013]:IfStatement[24742-25013]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[24900-24931]:ExpressionStatement[24900-24931]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[24989-25013]:ExpressionStatement[24989-25013]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
      "info" : "IfStatement[25041-26699]:IfStatement[25041-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25102-25363]:Block[25102-25363]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[25128-25236]:IfStatement[25128-25236]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[25209-25236]:ExpressionStatement[25209-25236]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25261-25296]:ExpressionStatement[25261-25296]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25321-25341]:ExpressionStatement[25321-25341]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
      "info" : "IfStatement[25369-26699]:IfStatement[25369-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25427-25894]:Block[25427-25894]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25453-25872]:IfStatement[25453-25872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25477-25872]:Block[25477-25872]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25507-25535]:ExpressionStatement[25507-25535]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25564-25797]:IfStatement[25564-25797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25616-25797]:Block[25616-25797]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25650-25665]:ExpressionStatement[25650-25665]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25698-25726]:ExpressionStatement[25698-25726]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25826-25846]:ExpressionStatement[25826-25846]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[25900-26699]:IfStatement[25900-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25925-26153]:Block[25925-26153]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25951-25986]:ExpressionStatement[25951-25986]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26111-26131]:ExpressionStatement[26111-26131]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[26159-26699]:IfStatement[26159-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26183-26400]:Block[26183-26400]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26209-26244]:ExpressionStatement[26209-26244]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26358-26378]:ExpressionStatement[26358-26378]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
      "info" : "IfStatement[26406-26699]:IfStatement[26406-26699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26464-26565]:Block[26464-26565]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26490-26505]:ExpressionStatement[26490-26505]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26530-26543]:ReturnStatement[26530-26543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26571-26699]:Block[26571-26699]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26597-26632]:ExpressionStatement[26597-26632]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26657-26677]:ExpressionStatement[26657-26677]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26720-26726]:BreakStatement[26720-26726]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[26744-26756]:SwitchCase[26744-26756]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[26777-26812]:VariableDeclarationStatement[26777-26812]"
    }, {
      "left" : "name = endTag.normalName();",
      "right" : "name = endTag.normalName();",
      "info" : "ExpressionStatement[26833-26860]:ExpressionStatement[26833-26860]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
      "info" : "IfStatement[26881-38037]:IfStatement[26881-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26951-32663]:Block[26951-32663]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[27031-32641]:ForStatement[27031-32641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27059-32641]:Block[27059-32641]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[27089-27144]:VariableDeclarationStatement[27089-27144]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[27173-27781]:IfStatement[27173-27781]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[27227-27256]:ReturnStatement[27227-27256]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[27290-27781]:IfStatement[27290-27781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27317-27522]:Block[27317-27522]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27351-27366]:ExpressionStatement[27351-27366]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[27399-27447]:ExpressionStatement[27399-27447]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27480-27492]:ReturnStatement[27480-27492]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[27528-27781]:IfStatement[27528-27781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27566-27691]:Block[27566-27691]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27600-27615]:ExpressionStatement[27600-27615]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27648-27661]:ReturnStatement[27648-27661]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[27697-27781]:IfStatement[27697-27781]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27766-27781]:ExpressionStatement[27766-27781]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[27811-27840]:VariableDeclarationStatement[27811-27840]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[27869-27899]:VariableDeclarationStatement[27869-27899]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[27928-27966]:VariableDeclarationStatement[27928-27966]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[27995-28036]:VariableDeclarationStatement[27995-28036]"
    }, {
      "left" : "final int stackSize = stack.size();",
      "right" : "final int stackSize = stack.size();",
      "info" : "VariableDeclarationStatement[28227-28262]:VariableDeclarationStatement[28227-28262]"
    }, {
      "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "info" : "ForStatement[28291-28845]:ForStatement[28291-28845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28341-28845]:Block[28341-28845]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[28375-28402]:VariableDeclarationStatement[28375-28402]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[28435-28815]:IfStatement[28435-28815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28455-28628]:Block[28455-28628]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[28493-28528]:ExpressionStatement[28493-28528]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[28565-28594]:ExpressionStatement[28565-28594]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[28634-28815]:IfStatement[28634-28815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28681-28815]:Block[28681-28815]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[28719-28738]:ExpressionStatement[28719-28738]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28775-28781]:BreakStatement[28775-28781]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[28874-29131]:IfStatement[28874-29131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28901-29131]:Block[28901-29131]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[28935-28975]:ExpressionStatement[28935-28975]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[29008-29056]:ExpressionStatement[29008-29056]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29089-29101]:ReturnStatement[29089-29101]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[29435-29464]:VariableDeclarationStatement[29435-29464]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[29493-29526]:VariableDeclarationStatement[29493-29526]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[29555-31112]:ForStatement[29555-31112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29583-31112]:Block[29583-31112]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[29617-29704]:IfStatement[29617-29704]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[29675-29704]:ExpressionStatement[29675-29704]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[29737-30020]:IfStatement[29737-30020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29781-29950]:Block[29781-29950]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[29845-29870]:ExpressionStatement[29845-29870]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29907-29916]:ContinueStatement[29907-29916]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[29956-30020]:IfStatement[29956-30020]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30014-30020]:BreakStatement[30014-30020]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[30054-30163]:VariableDeclarationStatement[30054-30163]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[30293-30346]:ExpressionStatement[30293-30346]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[30379-30416]:ExpressionStatement[30379-30416]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[30449-30468]:ExpressionStatement[30449-30468]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[30502-30854]:IfStatement[30502-30854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30533-30854]:Block[30533-30854]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[30887-30972]:IfStatement[30887-30972]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[30954-30972]:ExpressionStatement[30954-30972]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[31005-31032]:ExpressionStatement[31005-31032]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[31066-31082]:ExpressionStatement[31066-31082]"
    }, {
      "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "right" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "info" : "IfStatement[31142-31668]:IfStatement[31142-31668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31227-31443]:Block[31227-31443]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31261-31346]:IfStatement[31261-31346]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31328-31346]:ExpressionStatement[31328-31346]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[31379-31413]:ExpressionStatement[31379-31413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31449-31668]:Block[31449-31668]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[31483-31568]:IfStatement[31483-31568]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[31550-31568]:ExpressionStatement[31550-31568]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[31601-31638]:ExpressionStatement[31601-31638]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[31698-31761]:VariableDeclarationStatement[31698-31761]"
    }, {
      "left" : "adopter.attributes().addAll(formatEl.attributes());",
      "right" : "adopter.attributes().addAll(formatEl.attributes());",
      "info" : "ExpressionStatement[31790-31841]:ExpressionStatement[31790-31841]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[31870-31966]:VariableDeclarationStatement[31870-31966]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[31995-32189]:EnhancedForStatement[31995-32189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32029-32189]:Block[32029-32189]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[32063-32094]:ExpressionStatement[32063-32094]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[32218-32253]:ExpressionStatement[32218-32253]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[32282-32330]:ExpressionStatement[32282-32330]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[32511-32540]:ExpressionStatement[32511-32540]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[32569-32615]:ExpressionStatement[32569-32615]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
      "info" : "IfStatement[32669-38037]:IfStatement[32669-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32728-33230]:Block[32728-33230]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[32754-33208]:IfStatement[32754-33208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32777-32938]:Block[32777-32938]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[32855-32870]:ExpressionStatement[32855-32870]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32899-32912]:ReturnStatement[32899-32912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32944-33208]:Block[32944-33208]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[32974-33002]:ExpressionStatement[32974-33002]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33031-33128]:IfStatement[33031-33128]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33113-33128]:ExpressionStatement[33113-33128]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33157-33182]:ExpressionStatement[33157-33182]"
    }, {
      "left" : "if (name.equals(\"span\"))",
      "right" : "if (name.equals(\"span\"))",
      "info" : "IfStatement[33236-38037]:IfStatement[33236-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33261-33417]:Block[33261-33417]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[33366-33395]:ReturnStatement[33366-33395]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[33423-38037]:IfStatement[33423-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33446-33912]:Block[33446-33912]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[33472-33890]:IfStatement[33472-33890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33503-33616]:Block[33503-33616]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33533-33548]:ExpressionStatement[33533-33548]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33577-33590]:ReturnStatement[33577-33590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33622-33890]:Block[33622-33890]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[33652-33684]:ExpressionStatement[33652-33684]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[33713-33810]:IfStatement[33713-33810]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[33795-33810]:ExpressionStatement[33795-33810]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[33839-33864]:ExpressionStatement[33839-33864]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[33918-38037]:IfStatement[33918-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33943-34376]:Block[33943-34376]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[33969-34354]:IfStatement[33969-34354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33994-34107]:Block[33994-34107]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34024-34039]:ExpressionStatement[34024-34039]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34068-34081]:ReturnStatement[34068-34081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34113-34354]:Block[34113-34354]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[34303-34328]:ExpressionStatement[34303-34328]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[34382-38037]:IfStatement[34382-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34407-34596]:Block[34407-34596]"
    }, {
      "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
      "info" : "VariableDeclarationStatement[34433-34479]:VariableDeclarationStatement[34433-34479]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[34504-34574]:IfStatement[34504-34574]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[34548-34574]:ReturnStatement[34548-34574]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[34602-38037]:IfStatement[34602-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34627-35319]:Block[34627-35319]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[34653-34695]:VariableDeclarationStatement[34653-34695]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[34720-34744]:ExpressionStatement[34720-34744]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[34769-35297]:IfStatement[34769-35297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34815-34928]:Block[34815-34928]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[34845-34860]:ExpressionStatement[34845-34860]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34889-34902]:ReturnStatement[34889-34902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34934-35297]:Block[34934-35297]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[34964-34992]:ExpressionStatement[34964-34992]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35021-35118]:IfStatement[35021-35118]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35103-35118]:ExpressionStatement[35103-35118]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[35239-35271]:ExpressionStatement[35239-35271]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[35325-38037]:IfStatement[35325-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35347-35924]:Block[35347-35924]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[35373-35902]:IfStatement[35373-35902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35402-35628]:Block[35402-35628]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35432-35447]:ExpressionStatement[35432-35447]"
    }, {
      "left" : "tb.processStartTag(name);",
      "right" : "tb.processStartTag(name);",
      "info" : "ExpressionStatement[35476-35501]:ExpressionStatement[35476-35501]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[35576-35602]:ReturnStatement[35576-35602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35634-35902]:Block[35634-35902]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[35664-35696]:ExpressionStatement[35664-35696]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[35725-35822]:IfStatement[35725-35822]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[35807-35822]:ExpressionStatement[35807-35822]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[35851-35876]:ExpressionStatement[35851-35876]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
      "info" : "IfStatement[35930-38037]:IfStatement[35930-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35977-36435]:Block[35977-36435]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[36003-36413]:IfStatement[36003-36413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36026-36139]:Block[36026-36139]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36056-36071]:ExpressionStatement[36056-36071]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36100-36113]:ReturnStatement[36100-36113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36145-36413]:Block[36145-36413]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36175-36207]:ExpressionStatement[36175-36207]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36236-36333]:IfStatement[36236-36333]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36318-36333]:ExpressionStatement[36318-36333]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[36362-36387]:ExpressionStatement[36362-36387]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
      "info" : "IfStatement[36441-38037]:IfStatement[36441-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36492-36978]:Block[36492-36978]"
    }, {
      "left" : "if (!tb.inScope(Constants.Headings))",
      "right" : "if (!tb.inScope(Constants.Headings))",
      "info" : "IfStatement[36518-36956]:IfStatement[36518-36956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36555-36668]:Block[36555-36668]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36585-36600]:ExpressionStatement[36585-36600]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36629-36642]:ReturnStatement[36629-36642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36674-36956]:Block[36674-36956]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[36704-36736]:ExpressionStatement[36704-36736]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[36765-36862]:IfStatement[36765-36862]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36847-36862]:ExpressionStatement[36847-36862]"
    }, {
      "left" : "tb.popStackToClose(Constants.Headings);",
      "right" : "tb.popStackToClose(Constants.Headings);",
      "info" : "ExpressionStatement[36891-36930]:ExpressionStatement[36891-36930]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[36984-38037]:IfStatement[36984-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37012-37123]:Block[37012-37123]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37072-37101]:ReturnStatement[37072-37101]"
    }, {
      "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[37129-38037]:IfStatement[37129-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37190-37774]:Block[37190-37774]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[37216-37752]:IfStatement[37216-37752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37241-37752]:Block[37241-37752]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[37271-37419]:IfStatement[37271-37419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37294-37419]:Block[37294-37419]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37328-37343]:ExpressionStatement[37328-37343]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37376-37389]:ReturnStatement[37376-37389]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[37448-37476]:ExpressionStatement[37448-37476]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37505-37602]:IfStatement[37505-37602]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37587-37602]:ExpressionStatement[37587-37602]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37631-37656]:ExpressionStatement[37631-37656]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37685-37726]:ExpressionStatement[37685-37726]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[37780-38037]:IfStatement[37780-38037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37803-37954]:Block[37803-37954]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37829-37844]:ExpressionStatement[37829-37844]"
    }, {
      "left" : "tb.processStartTag(\"br\");",
      "right" : "tb.processStartTag(\"br\");",
      "info" : "ExpressionStatement[37869-37894]:ExpressionStatement[37869-37894]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37919-37932]:ReturnStatement[37919-37932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37960-38037]:Block[37960-38037]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37986-38015]:ReturnStatement[37986-38015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38059-38065]:BreakStatement[38059-38065]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[38082-38091]:SwitchCase[38082-38091]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38274-38280]:BreakStatement[38274-38280]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38307-38319]:ReturnStatement[38307-38319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38391-39199]:Block[38391-39199]"
    }, {
      "left" : "String name = tb.settings.normalizeTag(t.asEndTag().name());",
      "right" : "String name = tb.settings.normalizeTag(t.asEndTag().name());",
      "info" : "VariableDeclarationStatement[38405-38465]:VariableDeclarationStatement[38405-38465]"
    }, {
      "left" : "ArrayList<Element> stack = tb.getStack();",
      "right" : "ArrayList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38522-38563]:VariableDeclarationStatement[38522-38563]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[38576-39164]:ForStatement[38576-39164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38625-39164]:Block[38625-39164]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[38643-38673]:VariableDeclarationStatement[38643-38673]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38690-39150]:IfStatement[38690-39150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38724-38979]:Block[38724-38979]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38746-38778]:ExpressionStatement[38746-38778]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[38799-38888]:IfStatement[38799-38888]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38873-38888]:ExpressionStatement[38873-38888]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[38909-38934]:ExpressionStatement[38909-38934]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38955-38961]:BreakStatement[38955-38961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38985-39150]:Block[38985-39150]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39007-39132]:IfStatement[39007-39132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39031-39132]:Block[39031-39132]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39057-39072]:ExpressionStatement[39057-39072]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39097-39110]:ReturnStatement[39097-39110]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39177-39189]:ReturnStatement[39177-39189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39334-39935]:Block[39334-39935]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39348-39900]:IfStatement[39348-39900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39369-39428]:Block[39369-39428]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[39387-39414]:ExpressionStatement[39387-39414]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[39434-39900]:IfStatement[39434-39900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39449-39673]:Block[39449-39673]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39467-39482]:ExpressionStatement[39467-39482]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39561-39570]:ExpressionStatement[39561-39570]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39587-39621]:ExpressionStatement[39587-39621]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39638-39659]:ReturnStatement[39638-39659]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39679-39900]:IfStatement[39679-39900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39697-39900]:Block[39697-39900]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39826-39835]:ExpressionStatement[39826-39835]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39852-39886]:ExpressionStatement[39852-39886]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39913-39925]:ReturnStatement[39913-39925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40010-43854]:Block[40010-43854]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[40024-43804]:IfStatement[40024-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40045-40230]:Block[40045-40230]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[40063-40094]:ExpressionStatement[40063-40094]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[40111-40134]:ExpressionStatement[40111-40134]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[40151-40178]:ExpressionStatement[40151-40178]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40195-40216]:ReturnStatement[40195-40216]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[40236-43804]:IfStatement[40236-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40255-40341]:Block[40255-40341]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[40273-40298]:ExpressionStatement[40273-40298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40315-40327]:ReturnStatement[40315-40327]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[40347-43804]:IfStatement[40347-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40366-40443]:Block[40366-40443]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[40384-40399]:ExpressionStatement[40384-40399]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40416-40429]:ReturnStatement[40416-40429]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[40449-43804]:IfStatement[40449-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40469-42777]:Block[40469-42777]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40487-40528]:VariableDeclarationStatement[40487-40528]"
    }, {
      "left" : "String name = startTag.normalName();",
      "right" : "String name = startTag.normalName();",
      "info" : "VariableDeclarationStatement[40545-40581]:VariableDeclarationStatement[40545-40581]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40598-42588]:IfStatement[40598-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40626-40842]:Block[40626-40842]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40648-40678]:ExpressionStatement[40648-40678]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40699-40737]:ExpressionStatement[40699-40737]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40758-40778]:ExpressionStatement[40758-40778]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[40799-40824]:ExpressionStatement[40799-40824]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[40848-42588]:IfStatement[40848-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40877-41038]:Block[40877-41038]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40899-40929]:ExpressionStatement[40899-40929]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40950-40970]:ExpressionStatement[40950-40970]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[40991-41020]:ExpressionStatement[40991-41020]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[41044-42588]:IfStatement[41044-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41068-41181]:Block[41068-41181]"
    }, {
      "left" : "tb.processStartTag(\"colgroup\");",
      "right" : "tb.processStartTag(\"colgroup\");",
      "info" : "ExpressionStatement[41090-41121]:ExpressionStatement[41090-41121]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41142-41163]:ReturnStatement[41142-41163]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[41187-42588]:IfStatement[41187-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41239-41398]:Block[41239-41398]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[41261-41291]:ExpressionStatement[41261-41291]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[41312-41332]:ExpressionStatement[41312-41332]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[41353-41380]:ExpressionStatement[41353-41380]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[41404-42588]:IfStatement[41404-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41447-41557]:Block[41447-41557]"
    }, {
      "left" : "tb.processStartTag(\"tbody\");",
      "right" : "tb.processStartTag(\"tbody\");",
      "info" : "ExpressionStatement[41469-41497]:ExpressionStatement[41469-41497]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41518-41539]:ReturnStatement[41518-41539]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41563-42588]:IfStatement[41563-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41589-41823]:Block[41589-41823]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41611-41626]:ExpressionStatement[41611-41626]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"table\");",
      "right" : "boolean processed = tb.processEndTag(\"table\");",
      "info" : "VariableDeclarationStatement[41647-41693]:VariableDeclarationStatement[41647-41693]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41714-41805]:IfStatement[41714-41805]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41784-41805]:ReturnStatement[41784-41805]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[41829-42588]:IfStatement[41829-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41873-41942]:Block[41873-41942]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[41895-41924]:ReturnStatement[41895-41924]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[41948-42588]:IfStatement[41948-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41974-42233]:Block[41974-42233]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[41996-42215]:IfStatement[41996-42215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42061-42136]:Block[42061-42136]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42087-42114]:ReturnStatement[42087-42114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42142-42215]:Block[42142-42215]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[42168-42193]:ExpressionStatement[42168-42193]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[42239-42588]:IfStatement[42239-42588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42264-42515]:Block[42264-42515]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42286-42301]:ExpressionStatement[42286-42301]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[42322-42497]:IfStatement[42322-42497]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42379-42392]:ReturnStatement[42379-42392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42418-42497]:Block[42418-42497]"
    }, {
      "left" : "tb.insertForm(startTag, false);",
      "right" : "tb.insertForm(startTag, false);",
      "info" : "ExpressionStatement[42444-42475]:ExpressionStatement[42444-42475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42521-42588]:Block[42521-42588]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42543-42570]:ReturnStatement[42543-42570]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42605-42617]:ReturnStatement[42605-42617]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42783-43804]:IfStatement[42783-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42801-43619]:Block[42801-43619]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42819-42854]:VariableDeclarationStatement[42819-42854]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[42871-42905]:VariableDeclarationStatement[42871-42905]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[42923-43553]:IfStatement[42923-43553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42949-43245]:Block[42949-43245]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[42971-43182]:IfStatement[42971-43182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42999-43100]:Block[42999-43100]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43025-43040]:ExpressionStatement[43025-43040]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43065-43078]:ReturnStatement[43065-43078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43106-43182]:Block[43106-43182]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[43132-43160]:ExpressionStatement[43132-43160]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[43203-43227]:ExpressionStatement[43203-43227]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43251-43553]:IfStatement[43251-43553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43391-43480]:Block[43391-43480]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43413-43428]:ExpressionStatement[43413-43428]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43449-43462]:ReturnStatement[43449-43462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43486-43553]:Block[43486-43553]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43508-43535]:ReturnStatement[43508-43535]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43570-43582]:ReturnStatement[43570-43582]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43625-43804]:IfStatement[43625-43804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43640-43804]:Block[43640-43804]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[43658-43744]:IfStatement[43658-43744]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43729-43744]:ExpressionStatement[43729-43744]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43761-43773]:ReturnStatement[43761-43773]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43817-43844]:ReturnStatement[43817-43844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43914-44345]:Block[43914-44345]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43928-43943]:ExpressionStatement[43928-43943]"
    }, {
      "left" : "boolean processed;",
      "right" : "boolean processed;",
      "info" : "VariableDeclarationStatement[43956-43974]:VariableDeclarationStatement[43956-43974]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43987-44305]:IfStatement[43987-44305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44080-44233]:Block[44080-44233]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44098-44124]:ExpressionStatement[44098-44124]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44141-44175]:ExpressionStatement[44141-44175]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[44192-44219]:ExpressionStatement[44192-44219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44239-44305]:Block[44239-44305]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[44257-44291]:ExpressionStatement[44257-44291]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[44318-44335]:ReturnStatement[44318-44335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44424-46166]:Block[44424-46166]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[44438-46131]:SwitchStatement[44438-46131]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44472-44487]:SwitchCase[44472-44487]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44508-44544]:VariableDeclarationStatement[44508-44544]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44565-44804]:IfStatement[44565-44804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44601-44702]:Block[44601-44702]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44627-44642]:ExpressionStatement[44627-44642]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44667-44680]:ReturnStatement[44667-44680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44708-44804]:Block[44708-44804]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c.getData());",
      "right" : "tb.getPendingTableCharacters().add(c.getData());",
      "info" : "ExpressionStatement[44734-44782]:ExpressionStatement[44734-44782]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44825-44831]:BreakStatement[44825-44831]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44848-44856]:SwitchCase[44848-44856]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[44976-46020]:IfStatement[44976-46020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45023-46020]:Block[45023-46020]"
    }, {
      "left" : "for (String character : tb.getPendingTableCharacters())",
      "right" : "for (String character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[45049-45942]:EnhancedForStatement[45049-45942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45105-45942]:Block[45105-45942]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[45135-45916]:IfStatement[45135-45916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45165-45829]:Block[45165-45829]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45265-45280]:ExpressionStatement[45265-45280]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[45313-45799]:IfStatement[45313-45799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45406-45663]:Block[45406-45663]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[45444-45470]:ExpressionStatement[45444-45470]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45507-45565]:ExpressionStatement[45507-45565]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45602-45629]:ExpressionStatement[45602-45629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45669-45799]:Block[45669-45799]"
    }, {
      "left" : "tb.process(new Token.Character().data(character), InBody);",
      "right" : "tb.process(new Token.Character().data(character), InBody);",
      "info" : "ExpressionStatement[45707-45765]:ExpressionStatement[45707-45765]"
    }, {
      "left" : "tb.insert(new Token.Character().data(character));",
      "right" : "tb.insert(new Token.Character().data(character));",
      "info" : "ExpressionStatement[45867-45916]:ExpressionStatement[45867-45916]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[45967-45998]:ExpressionStatement[45967-45998]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[46041-46075]:ExpressionStatement[46041-46075]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[46096-46117]:ReturnStatement[46096-46117]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46144-46156]:ReturnStatement[46144-46156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46243-47760]:Block[46243-47760]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
      "info" : "IfStatement[46257-47725]:IfStatement[46257-47725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46322-46920]:Block[46322-46920]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[46340-46375]:VariableDeclarationStatement[46340-46375]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[46392-46426]:VariableDeclarationStatement[46392-46426]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[46443-46906]:IfStatement[46443-46906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46471-46560]:Block[46471-46560]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46493-46508]:ExpressionStatement[46493-46508]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46529-46542]:ReturnStatement[46529-46542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46566-46906]:Block[46566-46906]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[46588-46616]:ExpressionStatement[46588-46616]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[46637-46731]:IfStatement[46637-46731]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46716-46731]:ExpressionStatement[46716-46731]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46752-46782]:ExpressionStatement[46752-46782]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46803-46844]:ExpressionStatement[46803-46844]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[46865-46888]:ExpressionStatement[46865-46888]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
      "info" : "IfStatement[46926-47725]:IfStatement[46926-47725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47228-47413]:Block[47228-47413]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47246-47261]:ExpressionStatement[47246-47261]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"caption\");",
      "right" : "boolean processed = tb.processEndTag(\"caption\");",
      "info" : "VariableDeclarationStatement[47278-47326]:VariableDeclarationStatement[47278-47326]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[47343-47399]:IfStatement[47343-47399]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[47378-47399]:ReturnStatement[47378-47399]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[47419-47725]:IfStatement[47419-47725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47581-47658]:Block[47581-47658]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47599-47614]:ExpressionStatement[47599-47614]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47631-47644]:ReturnStatement[47631-47644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47664-47725]:Block[47664-47725]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47682-47711]:ReturnStatement[47682-47711]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47738-47750]:ReturnStatement[47738-47750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47841-49634]:Block[47841-49634]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[47855-47964]:IfStatement[47855-47964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47876-47964]:Block[47876-47964]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[47894-47921]:ExpressionStatement[47894-47921]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47938-47950]:ReturnStatement[47938-47950]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[47977-49599]:SwitchStatement[47977-49599]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[48011-48024]:SwitchCase[48011-48024]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[48045-48070]:ExpressionStatement[48045-48070]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48091-48097]:BreakStatement[48091-48097]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[48114-48127]:SwitchCase[48114-48127]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48148-48163]:ExpressionStatement[48148-48163]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48184-48190]:BreakStatement[48184-48190]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[48207-48221]:SwitchCase[48207-48221]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[48242-48283]:VariableDeclarationStatement[48242-48283]"
    }, {
      "left" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "right" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "info" : "SwitchStatement[48304-48667]:SwitchStatement[48304-48667]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[48361-48373]:SwitchCase[48361-48373]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[48402-48431]:ReturnStatement[48402-48431]"
    }, {
      "left" : "case \"col\":",
      "right" : "case \"col\":",
      "info" : "SwitchCase[48456-48467]:SwitchCase[48456-48467]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[48496-48521]:ExpressionStatement[48496-48521]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48550-48556]:BreakStatement[48550-48556]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48581-48589]:SwitchCase[48581-48589]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48618-48645]:ReturnStatement[48618-48645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48688-48694]:BreakStatement[48688-48694]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48711-48723]:SwitchCase[48711-48723]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48744-48779]:VariableDeclarationStatement[48744-48779]"
    }, {
      "left" : "if (endTag.normalName.equals(\"colgroup\"))",
      "right" : "if (endTag.normalName.equals(\"colgroup\"))",
      "info" : "IfStatement[48800-49247]:IfStatement[48800-49247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48842-49190]:Block[48842-49190]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48868-49168]:IfStatement[48868-49168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48919-49045]:Block[48919-49045]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48962-48977]:ExpressionStatement[48962-48977]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49006-49019]:ReturnStatement[49006-49019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49051-49168]:Block[49051-49168]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[49081-49090]:ExpressionStatement[49081-49090]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[49119-49142]:ExpressionStatement[49119-49142]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49220-49247]:ReturnStatement[49220-49247]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49268-49274]:BreakStatement[49268-49274]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[49291-49300]:SwitchCase[49291-49300]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[49321-49512]:IfStatement[49321-49512]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49396-49408]:ReturnStatement[49396-49408]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49485-49512]:ReturnStatement[49485-49512]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49529-49537]:SwitchCase[49529-49537]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[49558-49585]:ReturnStatement[49558-49585]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49612-49624]:ReturnStatement[49612-49624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49698-49890]:Block[49698-49890]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "right" : "boolean processed = tb.processEndTag(\"colgroup\");",
      "info" : "VariableDeclarationStatement[49712-49761]:VariableDeclarationStatement[49712-49761]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49774-49855]:IfStatement[49774-49855]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49834-49855]:ReturnStatement[49834-49855]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49868-49880]:ReturnStatement[49868-49880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51984-52364]:Block[52087-52467]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[51998-52188]:IfStatement[52101-52291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52082-52188]:Block[52185-52291]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[52129-52144]:ExpressionStatement[52232-52247]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52161-52174]:ReturnStatement[52264-52277]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[52201-52235]:ExpressionStatement[52304-52338]"
    }, {
      "left" : "tb.processEndTag(tb.currentElement().nodeName());",
      "right" : "tb.processEndTag(tb.currentElement().nodeName());",
      "info" : "ExpressionStatement[52248-52297]:ExpressionStatement[52351-52400]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[52333-52354]:ReturnStatement[52436-52457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54680-54859]:Block[54878-55057]"
    }, {
      "left" : "boolean processed = tb.processEndTag(\"tr\");",
      "right" : "boolean processed = tb.processEndTag(\"tr\");",
      "info" : "VariableDeclarationStatement[54694-54737]:VariableDeclarationStatement[54892-54935]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54750-54849]:IfStatement[54948-55047]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54781-54802]:ReturnStatement[54979-55000]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54836-54849]:ReturnStatement[55034-55047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54933-56830]:Block[55131-57028]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[54947-56795]:IfStatement[55145-56993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54965-56290]:Block[55163-56488]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[54983-55018]:VariableDeclarationStatement[55181-55216]"
    }, {
      "left" : "String name = endTag.normalName();",
      "right" : "String name = endTag.normalName();",
      "info" : "VariableDeclarationStatement[55035-55069]:VariableDeclarationStatement[55233-55267]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[55087-56276]:IfStatement[55285-56474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55124-55718]:Block[55322-55916]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55146-55391]:IfStatement[55344-55589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55174-55391]:Block[55372-55589]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55200-55215]:ExpressionStatement[55398-55413]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55240-55261]:ExpressionStatement[55438-55459]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55356-55369]:ReturnStatement[55554-55567]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[55412-55440]:ExpressionStatement[55610-55638]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[55461-55550]:IfStatement[55659-55748]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55535-55550]:ExpressionStatement[55733-55748]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[55571-55596]:ExpressionStatement[55769-55794]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[55617-55658]:ExpressionStatement[55815-55856]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55679-55700]:ExpressionStatement[55877-55898]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55724-56276]:IfStatement[55922-56474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55795-55884]:Block[55993-56082]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55817-55832]:ExpressionStatement[56015-56030]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55853-55866]:ReturnStatement[56051-56064]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55890-56276]:IfStatement[56088-56474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55957-56203]:Block[56155-56401]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55979-56108]:IfStatement[56177-56306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56007-56108]:Block[56205-56306]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56033-56048]:ExpressionStatement[56231-56246]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56073-56086]:ReturnStatement[56271-56284]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56129-56143]:ExpressionStatement[56327-56341]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56164-56185]:ReturnStatement[56362-56383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56209-56276]:Block[56407-56474]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56231-56258]:ReturnStatement[56429-56456]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[56296-56795]:IfStatement[56494-56993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56485-56730]:Block[56683-56928]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[56503-56647]:IfStatement[56701-56845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56558-56647]:Block[56756-56845]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56580-56595]:ExpressionStatement[56778-56793]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56616-56629]:ReturnStatement[56814-56827]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56664-56678]:ExpressionStatement[56862-56876]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56695-56716]:ReturnStatement[56893-56914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56736-56795]:Block[56934-56993]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56754-56781]:ReturnStatement[56952-56979]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56808-56820]:ReturnStatement[57006-57018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56898-56951]:Block[57096-57149]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[56912-56941]:ReturnStatement[57110-57139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57004-57185]:Block[57202-57383]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[57018-57141]:IfStatement[57216-57339]"
    }, {
      "left" : "tb.processEndTag(\"td\");",
      "right" : "tb.processEndTag(\"td\");",
      "info" : "ExpressionStatement[57061-57084]:ExpressionStatement[57259-57282]"
    }, {
      "left" : "tb.processEndTag(\"th\");",
      "right" : "tb.processEndTag(\"th\");",
      "info" : "ExpressionStatement[57118-57141]:ExpressionStatement[57316-57339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57261-61232]:Block[57459-61430]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[57275-61197]:SwitchStatement[57473-61395]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[57309-57324]:SwitchCase[57507-57522]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[57345-57381]:VariableDeclarationStatement[57543-57579]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[57402-57606]:IfStatement[57600-57804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57438-57539]:Block[57636-57737]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57464-57479]:ExpressionStatement[57662-57677]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57504-57517]:ReturnStatement[57702-57715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57545-57606]:Block[57743-57804]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[57571-57584]:ExpressionStatement[57769-57782]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57627-57633]:BreakStatement[57825-57831]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57650-57663]:SwitchCase[57848-57861]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57684-57709]:ExpressionStatement[57882-57907]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57730-57736]:BreakStatement[57928-57934]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57753-57766]:SwitchCase[57951-57964]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57787-57802]:ExpressionStatement[57985-58000]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57823-57836]:ReturnStatement[58021-58034]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[57853-57867]:SwitchCase[58051-58065]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[57888-57926]:VariableDeclarationStatement[58086-58124]"
    }, {
      "left" : "String name = start.normalName();",
      "right" : "String name = start.normalName();",
      "info" : "VariableDeclarationStatement[57947-57980]:VariableDeclarationStatement[58145-58178]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[58001-59389]:IfStatement[58199-59587]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[58050-58083]:ReturnStatement[58248-58281]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[58109-59389]:IfStatement[58307-59587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58136-58334]:Block[58334-58532]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58162-58270]:IfStatement[58360-58468]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58243-58270]:ExpressionStatement[58441-58468]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58295-58312]:ExpressionStatement[58493-58510]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58340-59389]:IfStatement[58538-59587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58369-58709]:Block[58567-58907]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[58395-58645]:IfStatement[58593-58843]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[58476-58503]:ExpressionStatement[58674-58701]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58533-58645]:IfStatement[58731-58843]"
    }, {
      "left" : "tb.processEndTag(\"optgroup\");",
      "right" : "tb.processEndTag(\"optgroup\");",
      "info" : "ExpressionStatement[58616-58645]:ExpressionStatement[58814-58843]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[58670-58687]:ExpressionStatement[58868-58885]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58715-59389]:IfStatement[58913-59587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58742-58864]:Block[58940-59062]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58768-58783]:ExpressionStatement[58966-58981]"
    }, {
      "left" : "return tb.processEndTag(\"select\");",
      "right" : "return tb.processEndTag(\"select\");",
      "info" : "ReturnStatement[58808-58842]:ReturnStatement[59006-59040]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[58870-59389]:IfStatement[59068-59587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58926-59198]:Block[59124-59396]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58952-58967]:ExpressionStatement[59150-59165]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[58992-59066]:IfStatement[59190-59264]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59053-59066]:ReturnStatement[59251-59264]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[59099-59126]:ExpressionStatement[59297-59324]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[59151-59176]:ReturnStatement[59349-59374]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[59204-59389]:IfStatement[59402-59587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59231-59308]:Block[59429-59506]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[59257-59286]:ReturnStatement[59455-59484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59314-59389]:Block[59512-59587]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[59340-59367]:ReturnStatement[59538-59565]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59410-59416]:BreakStatement[59608-59614]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[59433-59445]:SwitchCase[59631-59643]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[59466-59498]:VariableDeclarationStatement[59664-59696]"
    }, {
      "left" : "name = end.normalName();",
      "right" : "name = end.normalName();",
      "info" : "ExpressionStatement[59519-59543]:ExpressionStatement[59717-59741]"
    }, {
      "left" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "right" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
      "info" : "SwitchStatement[59564-60918]:SwitchStatement[59762-61116]"
    }, {
      "left" : "case \"optgroup\":",
      "right" : "case \"optgroup\":",
      "info" : "SwitchCase[59604-59620]:SwitchCase[59802-59818]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59649-59879]:IfStatement[59847-60077]"
    }, {
      "left" : "tb.processEndTag(\"option\");",
      "right" : "tb.processEndTag(\"option\");",
      "info" : "ExpressionStatement[59852-59879]:ExpressionStatement[60050-60077]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59908-60085]:IfStatement[60106-60283]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59995-60004]:ExpressionStatement[60193-60202]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60070-60085]:ExpressionStatement[60268-60283]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60114-60120]:BreakStatement[60312-60318]"
    }, {
      "left" : "case \"option\":",
      "right" : "case \"option\":",
      "info" : "SwitchCase[60145-60159]:SwitchCase[60343-60357]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[60188-60363]:IfStatement[60386-60561]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[60273-60282]:ExpressionStatement[60471-60480]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60348-60363]:ExpressionStatement[60546-60561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60392-60398]:BreakStatement[60590-60596]"
    }, {
      "left" : "case \"select\":",
      "right" : "case \"select\":",
      "info" : "SwitchCase[60423-60437]:SwitchCase[60621-60635]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[60466-60772]:IfStatement[60664-60970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60495-60620]:Block[60693-60818]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60529-60544]:ExpressionStatement[60727-60742]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60577-60590]:ReturnStatement[60775-60788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60626-60772]:Block[60824-60970]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[60660-60685]:ExpressionStatement[60858-60883]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[60718-60742]:ExpressionStatement[60916-60940]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60801-60807]:BreakStatement[60999-61005]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60832-60840]:SwitchCase[61030-61038]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60869-60896]:ReturnStatement[61067-61094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60939-60945]:BreakStatement[61137-61143]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60962-60971]:SwitchCase[61160-61169]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[60992-61083]:IfStatement[61190-61281]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61068-61083]:ExpressionStatement[61266-61281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[61104-61110]:BreakStatement[61302-61308]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[61127-61135]:SwitchCase[61325-61333]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[61156-61183]:ReturnStatement[61354-61381]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61210-61222]:ReturnStatement[61408-61420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61300-61365]:Block[61498-61563]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61314-61329]:ExpressionStatement[61512-61527]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61342-61355]:ReturnStatement[61540-61553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61448-62196]:Block[61646-62394]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61462-62186]:IfStatement[61660-62384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61593-61722]:Block[61791-61920]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61611-61626]:ExpressionStatement[61809-61824]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61643-61670]:ExpressionStatement[61841-61868]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[61687-61708]:ReturnStatement[61885-61906]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[61728-62186]:IfStatement[61926-62384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61855-62117]:Block[62053-62315]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61873-61888]:ExpressionStatement[62071-62086]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "right" : "if (tb.inTableScope(t.asEndTag().normalName()))",
      "info" : "IfStatement[61905-62103]:IfStatement[62103-62301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61953-62064]:Block[62151-62262]"
    }, {
      "left" : "tb.processEndTag(\"select\");",
      "right" : "tb.processEndTag(\"select\");",
      "info" : "ExpressionStatement[61975-62002]:ExpressionStatement[62173-62200]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[62023-62046]:ReturnStatement[62221-62244]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62090-62103]:ReturnStatement[62288-62301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62123-62186]:Block[62321-62384]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[62141-62172]:ReturnStatement[62339-62370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62273-63237]:Block[62471-63435]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62287-63202]:IfStatement[62485-63400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62308-62369]:Block[62506-62567]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62326-62355]:ReturnStatement[62524-62553]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62375-63202]:IfStatement[62573-63400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62394-62469]:Block[62592-62667]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62412-62437]:ExpressionStatement[62610-62635]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62475-63202]:IfStatement[62673-63400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62494-62571]:Block[62692-62769]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62512-62527]:ExpressionStatement[62710-62725]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62544-62557]:ReturnStatement[62742-62755]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62577-63202]:IfStatement[62775-63400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62643-62704]:Block[62841-62902]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[62661-62690]:ReturnStatement[62859-62888]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[62710-63202]:IfStatement[62908-63400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62772-62997]:Block[62970-63195]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[62790-62983]:IfStatement[62988-63181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62818-62907]:Block[63016-63105]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62840-62855]:ExpressionStatement[63038-63053]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62876-62889]:ReturnStatement[63074-63087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62913-62983]:Block[63111-63181]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62935-62965]:ExpressionStatement[63133-63163]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[63003-63202]:IfStatement[63201-63400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63018-63072]:Block[63216-63270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63078-63202]:Block[63276-63400]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63096-63111]:ExpressionStatement[63294-63309]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[63128-63150]:ExpressionStatement[63326-63348]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[63167-63188]:ReturnStatement[63365-63386]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63215-63227]:ReturnStatement[63413-63425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63315-65067]:Block[63513-65265]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[63329-65032]:IfStatement[63527-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63350-63409]:Block[63548-63607]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[63368-63395]:ExpressionStatement[63566-63593]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[63415-65032]:IfStatement[63613-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63434-63491]:Block[63632-63689]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[63452-63477]:ExpressionStatement[63650-63675]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[63497-65032]:IfStatement[63695-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63516-63593]:Block[63714-63791]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63534-63549]:ExpressionStatement[63732-63747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63566-63579]:ReturnStatement[63764-63777]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[63599-65032]:IfStatement[63797-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63619-64268]:Block[63817-64466]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[63637-63675]:VariableDeclarationStatement[63835-63873]"
    }, {
      "left" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
      "right" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
      "info" : "SwitchStatement[63692-64254]:SwitchStatement[63890-64452]"
    }, {
      "left" : "case \"html\":",
      "right" : "case \"html\":",
      "info" : "SwitchCase[63742-63754]:SwitchCase[63940-63952]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[63779-63812]:ReturnStatement[63977-64010]"
    }, {
      "left" : "case \"frameset\":",
      "right" : "case \"frameset\":",
      "info" : "SwitchCase[63833-63849]:SwitchCase[64031-64047]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63874-63891]:ExpressionStatement[64072-64089]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63916-63922]:BreakStatement[64114-64120]"
    }, {
      "left" : "case \"frame\":",
      "right" : "case \"frame\":",
      "info" : "SwitchCase[63943-63956]:SwitchCase[64141-64154]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63981-64003]:ExpressionStatement[64179-64201]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64028-64034]:BreakStatement[64226-64232]"
    }, {
      "left" : "case \"noframes\":",
      "right" : "case \"noframes\":",
      "info" : "SwitchCase[64055-64071]:SwitchCase[64253-64269]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[64096-64129]:ReturnStatement[64294-64327]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[64150-64158]:SwitchCase[64348-64356]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64183-64198]:ExpressionStatement[64381-64396]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64223-64236]:ReturnStatement[64421-64434]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
      "info" : "IfStatement[64274-65032]:IfStatement[64472-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64340-64756]:Block[64538-64954]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64358-64742]:IfStatement[64556-64940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64409-64506]:Block[64607-64704]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64439-64454]:ExpressionStatement[64637-64652]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64475-64488]:ReturnStatement[64673-64686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64512-64742]:Block[64710-64940]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[64534-64543]:ExpressionStatement[64732-64741]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[64564-64724]:IfStatement[64762-64922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64647-64724]:Block[64845-64922]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[64673-64702]:ExpressionStatement[64871-64900]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64762-65032]:IfStatement[64960-65230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64777-64949]:Block[64975-65147]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[64795-64935]:IfStatement[64993-65133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64847-64935]:Block[65045-65133]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64869-64884]:ExpressionStatement[65067-65082]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64905-64917]:ReturnStatement[65103-65115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64955-65032]:Block[65153-65230]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64973-64988]:ExpressionStatement[65171-65186]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65005-65018]:ReturnStatement[65203-65216]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65045-65057]:ReturnStatement[65243-65255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65148-66035]:Block[65346-66233]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[65162-66000]:IfStatement[65360-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65183-65242]:Block[65381-65440]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[65201-65228]:ExpressionStatement[65399-65426]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65248-66000]:IfStatement[65446-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65267-65324]:Block[65465-65522]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65285-65310]:ExpressionStatement[65483-65508]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[65330-66000]:IfStatement[65528-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65349-65426]:Block[65547-65624]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65367-65382]:ExpressionStatement[65565-65580]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65399-65412]:ReturnStatement[65597-65610]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65432-66000]:IfStatement[65630-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65498-65559]:Block[65696-65757]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65516-65545]:ReturnStatement[65714-65743]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
      "info" : "IfStatement[65565-66000]:IfStatement[65763-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65627-65693]:Block[65825-65891]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[65645-65679]:ExpressionStatement[65843-65877]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[65699-66000]:IfStatement[65897-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65769-65830]:Block[65967-66028]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[65787-65816]:ReturnStatement[65985-66014]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65836-66000]:IfStatement[66034-66198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65851-65917]:Block[66049-66115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65923-66000]:Block[66121-66198]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65941-65956]:ExpressionStatement[66139-66154]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65973-65986]:ReturnStatement[66171-66184]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66013-66025]:ReturnStatement[66211-66223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66117-66614]:Block[66315-66812]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66131-66579]:IfStatement[66329-66777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66150-66207]:Block[66348-66405]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66168-66193]:ExpressionStatement[66366-66391]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[66213-66579]:IfStatement[66411-66777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66317-66378]:Block[66515-66576]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66335-66364]:ReturnStatement[66533-66562]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66384-66579]:IfStatement[66582-66777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66399-66449]:Block[66597-66647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66455-66579]:Block[66653-66777]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66473-66488]:ExpressionStatement[66671-66686]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[66505-66527]:ExpressionStatement[66703-66725]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[66544-66565]:ReturnStatement[66742-66763]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66592-66604]:ReturnStatement[66790-66802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66700-67287]:Block[66898-67485]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[66714-67252]:IfStatement[66912-67450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66733-66790]:Block[66931-66988]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[66751-66776]:ExpressionStatement[66949-66974]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
      "info" : "IfStatement[66796-67252]:IfStatement[66994-67450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66900-66961]:Block[67098-67159]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[66918-66947]:ReturnStatement[67116-67145]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66967-67252]:IfStatement[67165-67450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66982-67032]:Block[67180-67230]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
      "info" : "IfStatement[67038-67252]:IfStatement[67236-67450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67108-67169]:Block[67306-67367]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[67126-67155]:ReturnStatement[67324-67353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67175-67252]:Block[67373-67450]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[67193-67208]:ExpressionStatement[67391-67406]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67225-67238]:ReturnStatement[67423-67436]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67265-67277]:ReturnStatement[67463-67475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67369-67463]:Block[67567-67661]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67383-67395]:ReturnStatement[67581-67593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67647-67809]:Block[67845-68007]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67657-67781]:IfStatement[67855-67979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67678-67781]:Block[67876-67979]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67692-67732]:VariableDeclarationStatement[67890-67930]"
    }, {
      "left" : "return isWhitespace(data);",
      "right" : "return isWhitespace(data);",
      "info" : "ReturnStatement[67745-67771]:ReturnStatement[67943-67969]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67790-67803]:ReturnStatement[67988-68001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67864-68138]:Block[68062-68336]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67948-68111]:ForStatement[68146-68309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67988-68111]:Block[68186-68309]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[68002-68026]:VariableDeclarationStatement[68200-68224]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[68039-68101]:IfStatement[68237-68299]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[68088-68101]:ReturnStatement[68286-68299]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[68120-68132]:ReturnStatement[68318-68330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68222-68375]:Block[68420-68573]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[68232-68279]:ExpressionStatement[68430-68477]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68288-68311]:ExpressionStatement[68486-68509]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68320-68340]:ExpressionStatement[68518-68538]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68349-68369]:ExpressionStatement[68547-68567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68460-68614]:Block[68658-68812]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68470-68518]:ExpressionStatement[68668-68716]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68527-68550]:ExpressionStatement[68725-68748]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68559-68579]:ExpressionStatement[68757-68777]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68588-68608]:ExpressionStatement[68786-68806]"
    } ]
  },
  "interFileMappings" : { }
}