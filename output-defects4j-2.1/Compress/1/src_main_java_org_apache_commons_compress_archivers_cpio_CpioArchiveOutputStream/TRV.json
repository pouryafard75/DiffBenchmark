{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private CpioArchiveEntry cpioEntry;",
      "right" : "private CpioArchiveEntry cpioEntry;",
      "info" : "FieldDeclaration[2345-2380]:FieldDeclaration[2345-2380]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2386-2417]:FieldDeclaration[2386-2417]"
    }, {
      "left" : "private boolean finished;",
      "right" : "private boolean finished;",
      "info" : "FieldDeclaration[2423-2448]:FieldDeclaration[2423-2448]"
    }, {
      "left" : "private short entryFormat = FORMAT_NEW;",
      "right" : "private short entryFormat = FORMAT_NEW;",
      "info" : "FieldDeclaration[2454-2493]:FieldDeclaration[2454-2493]"
    }, {
      "left" : "private final HashMap names = new HashMap();",
      "right" : "private final HashMap names = new HashMap();",
      "info" : "FieldDeclaration[2499-2543]:FieldDeclaration[2499-2543]"
    }, {
      "left" : "private long crc = 0;",
      "right" : "private long crc = 0;",
      "info" : "FieldDeclaration[2549-2570]:FieldDeclaration[2549-2570]"
    }, {
      "left" : "private long written;",
      "right" : "private long written;",
      "info" : "FieldDeclaration[2576-2597]:FieldDeclaration[2576-2597]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[2603-2634]:FieldDeclaration[2603-2634]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out, final short format)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out, final short format)",
      "info" : "MethodDeclaration[2640-3001]:MethodDeclaration[2640-3001]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out)",
      "info" : "MethodDeclaration[3007-3276]:MethodDeclaration[3007-3276]"
    }, {
      "left" : "private void ensureOpen() throws IOException",
      "right" : "private void ensureOpen() throws IOException",
      "info" : "MethodDeclaration[3282-3588]:MethodDeclaration[3282-3588]"
    }, {
      "left" : "private void setFormat(final short format)",
      "right" : "private void setFormat(final short format)",
      "info" : "MethodDeclaration[3594-4188]:MethodDeclaration[3594-4188]"
    }, {
      "left" : "public void putNextEntry(final CpioArchiveEntry e) throws IOException",
      "right" : "public void putNextEntry(final CpioArchiveEntry e) throws IOException",
      "info" : "MethodDeclaration[4194-5444]:MethodDeclaration[4194-5444]"
    }, {
      "left" : "private void writeHeader(final CpioArchiveEntry e) throws IOException",
      "right" : "private void writeHeader(final CpioArchiveEntry e) throws IOException",
      "info" : "MethodDeclaration[5450-6158]:MethodDeclaration[5450-6158]"
    }, {
      "left" : "private void writeNewEntry(final CpioArchiveEntry entry) throws IOException",
      "right" : "private void writeNewEntry(final CpioArchiveEntry entry) throws IOException",
      "info" : "MethodDeclaration[6164-7035]:MethodDeclaration[6164-7035]"
    }, {
      "left" : "private void writeOldAsciiEntry(final CpioArchiveEntry entry)\n            throws IOException",
      "right" : "private void writeOldAsciiEntry(final CpioArchiveEntry entry)\n            throws IOException",
      "info" : "MethodDeclaration[7041-7683]:MethodDeclaration[7041-7683]"
    }, {
      "left" : "private void writeOldBinaryEntry(final CpioArchiveEntry entry,\n            final boolean swapHalfWord) throws IOException",
      "right" : "private void writeOldBinaryEntry(final CpioArchiveEntry entry,\n            final boolean swapHalfWord) throws IOException",
      "info" : "MethodDeclaration[7689-8548]:MethodDeclaration[7689-8548]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[8695-9585]:MethodDeclaration[8695-9585]"
    }, {
      "left" : "public void write(final byte[] b, final int off, final int len)\n            throws IOException",
      "right" : "public void write(final byte[] b, final int off, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[9591-10879]:MethodDeclaration[9591-10879]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[10885-11714]:MethodDeclaration[10885-11714]"
    }, {
      "left" : "private void pad(final long count, final int border) throws IOException",
      "right" : "private void pad(final long count, final int border) throws IOException",
      "info" : "MethodDeclaration[12099-12334]:MethodDeclaration[12126-12361]"
    }, {
      "left" : "private void writeBinaryLong(final long number, final int length,\n            final boolean swapHalfWord) throws IOException",
      "right" : "private void writeBinaryLong(final long number, final int length,\n            final boolean swapHalfWord) throws IOException",
      "info" : "MethodDeclaration[12340-12572]:MethodDeclaration[12367-12599]"
    }, {
      "left" : "private void writeAsciiLong(final long number, final int length,\n            final int radix) throws IOException",
      "right" : "private void writeAsciiLong(final long number, final int length,\n            final int radix) throws IOException",
      "info" : "MethodDeclaration[12578-13368]:MethodDeclaration[12605-13395]"
    }, {
      "left" : "private void writeCString(final String str) throws IOException",
      "right" : "private void writeCString(final String str) throws IOException",
      "info" : "MethodDeclaration[13374-13504]:MethodDeclaration[13401-13531]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry entry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry entry) throws IOException",
      "info" : "MethodDeclaration[13707-13834]:MethodDeclaration[13734-13861]"
    }, {
      "left" : "public void write(int b) throws IOException",
      "right" : "public void write(int b) throws IOException",
      "info" : "MethodDeclaration[13928-14001]:MethodDeclaration[13955-14028]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2919-3001]:Block[2919-3001]"
    }, {
      "left" : "this.out = new FilterOutputStream(out);",
      "right" : "this.out = new FilterOutputStream(out);",
      "info" : "ExpressionStatement[2929-2968]:ExpressionStatement[2929-2968]"
    }, {
      "left" : "setFormat(format);",
      "right" : "setFormat(format);",
      "info" : "ExpressionStatement[2977-2995]:ExpressionStatement[2977-2995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3238-3276]:Block[3238-3276]"
    }, {
      "left" : "this(out, FORMAT_NEW);",
      "right" : "this(out, FORMAT_NEW);",
      "info" : "ConstructorInvocation[3248-3270]:ConstructorInvocation[3248-3270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3492-3588]:Block[3492-3588]"
    }, {
      "left" : "if (this.closed)",
      "right" : "if (this.closed)",
      "info" : "IfStatement[3502-3582]:IfStatement[3502-3582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3519-3582]:Block[3519-3582]"
    }, {
      "left" : "throw new IOException(\"Stream closed\");",
      "right" : "throw new IOException(\"Stream closed\");",
      "info" : "ThrowStatement[3533-3572]:ThrowStatement[3533-3572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3841-4188]:Block[3841-4188]"
    }, {
      "left" : "switch (format) {\n        case FORMAT_NEW:\n        case FORMAT_NEW_CRC:\n        case FORMAT_OLD_ASCII:\n        case FORMAT_OLD_BINARY:\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown header type\");\n\n        }",
      "right" : "switch (format) {\n        case FORMAT_NEW:\n        case FORMAT_NEW_CRC:\n        case FORMAT_OLD_ASCII:\n        case FORMAT_OLD_BINARY:\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unknown header type\");\n\n        }",
      "info" : "SwitchStatement[3851-4103]:SwitchStatement[3851-4103]"
    }, {
      "left" : "case FORMAT_NEW:",
      "right" : "case FORMAT_NEW:",
      "info" : "SwitchCase[3877-3893]:SwitchCase[3877-3893]"
    }, {
      "left" : "case FORMAT_NEW_CRC:",
      "right" : "case FORMAT_NEW_CRC:",
      "info" : "SwitchCase[3902-3922]:SwitchCase[3902-3922]"
    }, {
      "left" : "case FORMAT_OLD_ASCII:",
      "right" : "case FORMAT_OLD_ASCII:",
      "info" : "SwitchCase[3931-3953]:SwitchCase[3931-3953]"
    }, {
      "left" : "case FORMAT_OLD_BINARY:",
      "right" : "case FORMAT_OLD_BINARY:",
      "info" : "SwitchCase[3962-3985]:SwitchCase[3962-3985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3998-4004]:BreakStatement[3998-4004]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4013-4021]:SwitchCase[4013-4021]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown header type\");",
      "right" : "throw new IllegalArgumentException(\"Unknown header type\");",
      "info" : "ThrowStatement[4034-4092]:ThrowStatement[4034-4092]"
    }, {
      "left" : "synchronized (this) {\n            this.entryFormat = format;\n        }",
      "right" : "synchronized (this) {\n            this.entryFormat = format;\n        }",
      "info" : "SynchronizedStatement[4112-4182]:SynchronizedStatement[4112-4182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4132-4182]:Block[4132-4182]"
    }, {
      "left" : "this.entryFormat = format;",
      "right" : "this.entryFormat = format;",
      "info" : "ExpressionStatement[4146-4172]:ExpressionStatement[4146-4172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4818-5444]:Block[4818-5444]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[4828-4841]:ExpressionStatement[4828-4841]"
    }, {
      "left" : "if (this.cpioEntry != null)",
      "right" : "if (this.cpioEntry != null)",
      "info" : "IfStatement[4850-4946]:IfStatement[4850-4946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4878-4946]:Block[4878-4946]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[4892-4912]:ExpressionStatement[4892-4912]"
    }, {
      "left" : "if (e.getTime() == -1)",
      "right" : "if (e.getTime() == -1)",
      "info" : "IfStatement[4955-5040]:IfStatement[4955-5040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4978-5040]:Block[4978-5040]"
    }, {
      "left" : "e.setTime(System.currentTimeMillis());",
      "right" : "e.setTime(System.currentTimeMillis());",
      "info" : "ExpressionStatement[4992-5030]:ExpressionStatement[4992-5030]"
    }, {
      "left" : "if (e.getFormat() == -1)",
      "right" : "if (e.getFormat() == -1)",
      "info" : "IfStatement[5145-5224]:IfStatement[5145-5224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5170-5224]:Block[5170-5224]"
    }, {
      "left" : "e.setFormat(this.entryFormat);",
      "right" : "e.setFormat(this.entryFormat);",
      "info" : "ExpressionStatement[5184-5214]:ExpressionStatement[5184-5214]"
    }, {
      "left" : "if (this.names.put(e.getName(), e) != null)",
      "right" : "if (this.names.put(e.getName(), e) != null)",
      "info" : "IfStatement[5234-5359]:IfStatement[5234-5359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5278-5359]:Block[5278-5359]"
    }, {
      "left" : "throw new IOException(\"duplicate entry: \" + e.getName());",
      "right" : "throw new IOException(\"duplicate entry: \" + e.getName());",
      "info" : "ThrowStatement[5292-5349]:ThrowStatement[5292-5349]"
    }, {
      "left" : "writeHeader(e);",
      "right" : "writeHeader(e);",
      "info" : "ExpressionStatement[5369-5384]:ExpressionStatement[5369-5384]"
    }, {
      "left" : "this.cpioEntry = e;",
      "right" : "this.cpioEntry = e;",
      "info" : "ExpressionStatement[5393-5412]:ExpressionStatement[5393-5412]"
    }, {
      "left" : "this.written = 0;",
      "right" : "this.written = 0;",
      "info" : "ExpressionStatement[5421-5438]:ExpressionStatement[5421-5438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5520-6158]:Block[5520-6158]"
    }, {
      "left" : "switch (e.getFormat()) {\n        case FORMAT_NEW:\n            out.write(MAGIC_NEW.getBytes());\n            writeNewEntry(e);\n            break;\n        case FORMAT_NEW_CRC:\n            out.write(MAGIC_NEW_CRC.getBytes());\n            writeNewEntry(e);\n            break;\n        case FORMAT_OLD_ASCII:\n            out.write(MAGIC_OLD_ASCII.getBytes());\n            writeOldAsciiEntry(e);\n            break;\n        case FORMAT_OLD_BINARY:\n            boolean swapHalfWord = true;\n            writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);\n            writeOldBinaryEntry(e, swapHalfWord);\n            break;\n        }",
      "right" : "switch (e.getFormat()) {\n        case FORMAT_NEW:\n            out.write(MAGIC_NEW.getBytes());\n            writeNewEntry(e);\n            break;\n        case FORMAT_NEW_CRC:\n            out.write(MAGIC_NEW_CRC.getBytes());\n            writeNewEntry(e);\n            break;\n        case FORMAT_OLD_ASCII:\n            out.write(MAGIC_OLD_ASCII.getBytes());\n            writeOldAsciiEntry(e);\n            break;\n        case FORMAT_OLD_BINARY:\n            boolean swapHalfWord = true;\n            writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);\n            writeOldBinaryEntry(e, swapHalfWord);\n            break;\n        }",
      "info" : "SwitchStatement[5530-6152]:SwitchStatement[5530-6152]"
    }, {
      "left" : "case FORMAT_NEW:",
      "right" : "case FORMAT_NEW:",
      "info" : "SwitchCase[5563-5579]:SwitchCase[5563-5579]"
    }, {
      "left" : "out.write(MAGIC_NEW.getBytes());",
      "right" : "out.write(MAGIC_NEW.getBytes());",
      "info" : "ExpressionStatement[5592-5624]:ExpressionStatement[5592-5624]"
    }, {
      "left" : "writeNewEntry(e);",
      "right" : "writeNewEntry(e);",
      "info" : "ExpressionStatement[5637-5654]:ExpressionStatement[5637-5654]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5667-5673]:BreakStatement[5667-5673]"
    }, {
      "left" : "case FORMAT_NEW_CRC:",
      "right" : "case FORMAT_NEW_CRC:",
      "info" : "SwitchCase[5682-5702]:SwitchCase[5682-5702]"
    }, {
      "left" : "out.write(MAGIC_NEW_CRC.getBytes());",
      "right" : "out.write(MAGIC_NEW_CRC.getBytes());",
      "info" : "ExpressionStatement[5715-5751]:ExpressionStatement[5715-5751]"
    }, {
      "left" : "writeNewEntry(e);",
      "right" : "writeNewEntry(e);",
      "info" : "ExpressionStatement[5764-5781]:ExpressionStatement[5764-5781]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5794-5800]:BreakStatement[5794-5800]"
    }, {
      "left" : "case FORMAT_OLD_ASCII:",
      "right" : "case FORMAT_OLD_ASCII:",
      "info" : "SwitchCase[5809-5831]:SwitchCase[5809-5831]"
    }, {
      "left" : "out.write(MAGIC_OLD_ASCII.getBytes());",
      "right" : "out.write(MAGIC_OLD_ASCII.getBytes());",
      "info" : "ExpressionStatement[5844-5882]:ExpressionStatement[5844-5882]"
    }, {
      "left" : "writeOldAsciiEntry(e);",
      "right" : "writeOldAsciiEntry(e);",
      "info" : "ExpressionStatement[5895-5917]:ExpressionStatement[5895-5917]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5930-5936]:BreakStatement[5930-5936]"
    }, {
      "left" : "case FORMAT_OLD_BINARY:",
      "right" : "case FORMAT_OLD_BINARY:",
      "info" : "SwitchCase[5945-5968]:SwitchCase[5945-5968]"
    }, {
      "left" : "boolean swapHalfWord = true;",
      "right" : "boolean swapHalfWord = true;",
      "info" : "VariableDeclarationStatement[5981-6009]:VariableDeclarationStatement[5981-6009]"
    }, {
      "left" : "writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);",
      "right" : "writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);",
      "info" : "ExpressionStatement[6022-6073]:ExpressionStatement[6022-6073]"
    }, {
      "left" : "writeOldBinaryEntry(e, swapHalfWord);",
      "right" : "writeOldBinaryEntry(e, swapHalfWord);",
      "info" : "ExpressionStatement[6086-6123]:ExpressionStatement[6086-6123]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6136-6142]:BreakStatement[6136-6142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6240-7035]:Block[6240-7035]"
    }, {
      "left" : "writeAsciiLong(entry.getInode(), 8, 16);",
      "right" : "writeAsciiLong(entry.getInode(), 8, 16);",
      "info" : "ExpressionStatement[6250-6290]:ExpressionStatement[6250-6290]"
    }, {
      "left" : "writeAsciiLong(entry.getMode(), 8, 16);",
      "right" : "writeAsciiLong(entry.getMode(), 8, 16);",
      "info" : "ExpressionStatement[6299-6338]:ExpressionStatement[6299-6338]"
    }, {
      "left" : "writeAsciiLong(entry.getUID(), 8, 16);",
      "right" : "writeAsciiLong(entry.getUID(), 8, 16);",
      "info" : "ExpressionStatement[6347-6385]:ExpressionStatement[6347-6385]"
    }, {
      "left" : "writeAsciiLong(entry.getGID(), 8, 16);",
      "right" : "writeAsciiLong(entry.getGID(), 8, 16);",
      "info" : "ExpressionStatement[6394-6432]:ExpressionStatement[6394-6432]"
    }, {
      "left" : "writeAsciiLong(entry.getNumberOfLinks(), 8, 16);",
      "right" : "writeAsciiLong(entry.getNumberOfLinks(), 8, 16);",
      "info" : "ExpressionStatement[6441-6489]:ExpressionStatement[6441-6489]"
    }, {
      "left" : "writeAsciiLong(entry.getTime(), 8, 16);",
      "right" : "writeAsciiLong(entry.getTime(), 8, 16);",
      "info" : "ExpressionStatement[6498-6537]:ExpressionStatement[6498-6537]"
    }, {
      "left" : "writeAsciiLong(entry.getSize(), 8, 16);",
      "right" : "writeAsciiLong(entry.getSize(), 8, 16);",
      "info" : "ExpressionStatement[6546-6585]:ExpressionStatement[6546-6585]"
    }, {
      "left" : "writeAsciiLong(entry.getDeviceMaj(), 8, 16);",
      "right" : "writeAsciiLong(entry.getDeviceMaj(), 8, 16);",
      "info" : "ExpressionStatement[6594-6638]:ExpressionStatement[6594-6638]"
    }, {
      "left" : "writeAsciiLong(entry.getDeviceMin(), 8, 16);",
      "right" : "writeAsciiLong(entry.getDeviceMin(), 8, 16);",
      "info" : "ExpressionStatement[6647-6691]:ExpressionStatement[6647-6691]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);",
      "right" : "writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);",
      "info" : "ExpressionStatement[6700-6750]:ExpressionStatement[6700-6750]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);",
      "right" : "writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);",
      "info" : "ExpressionStatement[6759-6809]:ExpressionStatement[6759-6809]"
    }, {
      "left" : "writeAsciiLong(entry.getName().length() + 1, 8, 16);",
      "right" : "writeAsciiLong(entry.getName().length() + 1, 8, 16);",
      "info" : "ExpressionStatement[6818-6870]:ExpressionStatement[6818-6870]"
    }, {
      "left" : "writeAsciiLong(entry.getChksum(), 8, 16);",
      "right" : "writeAsciiLong(entry.getChksum(), 8, 16);",
      "info" : "ExpressionStatement[6879-6920]:ExpressionStatement[6879-6920]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[6929-6959]:ExpressionStatement[6929-6959]"
    }, {
      "left" : "pad(entry.getHeaderSize() + entry.getName().length() + 1, 4);",
      "right" : "pad(entry.getHeaderSize() + entry.getName().length() + 1, 4);",
      "info" : "ExpressionStatement[6968-7029]:ExpressionStatement[6968-7029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7134-7683]:Block[7134-7683]"
    }, {
      "left" : "writeAsciiLong(entry.getDevice(), 6, 8);",
      "right" : "writeAsciiLong(entry.getDevice(), 6, 8);",
      "info" : "ExpressionStatement[7144-7184]:ExpressionStatement[7144-7184]"
    }, {
      "left" : "writeAsciiLong(entry.getInode(), 6, 8);",
      "right" : "writeAsciiLong(entry.getInode(), 6, 8);",
      "info" : "ExpressionStatement[7193-7232]:ExpressionStatement[7193-7232]"
    }, {
      "left" : "writeAsciiLong(entry.getMode(), 6, 8);",
      "right" : "writeAsciiLong(entry.getMode(), 6, 8);",
      "info" : "ExpressionStatement[7241-7279]:ExpressionStatement[7241-7279]"
    }, {
      "left" : "writeAsciiLong(entry.getUID(), 6, 8);",
      "right" : "writeAsciiLong(entry.getUID(), 6, 8);",
      "info" : "ExpressionStatement[7288-7325]:ExpressionStatement[7288-7325]"
    }, {
      "left" : "writeAsciiLong(entry.getGID(), 6, 8);",
      "right" : "writeAsciiLong(entry.getGID(), 6, 8);",
      "info" : "ExpressionStatement[7334-7371]:ExpressionStatement[7334-7371]"
    }, {
      "left" : "writeAsciiLong(entry.getNumberOfLinks(), 6, 8);",
      "right" : "writeAsciiLong(entry.getNumberOfLinks(), 6, 8);",
      "info" : "ExpressionStatement[7380-7427]:ExpressionStatement[7380-7427]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDevice(), 6, 8);",
      "right" : "writeAsciiLong(entry.getRemoteDevice(), 6, 8);",
      "info" : "ExpressionStatement[7436-7482]:ExpressionStatement[7436-7482]"
    }, {
      "left" : "writeAsciiLong(entry.getTime(), 11, 8);",
      "right" : "writeAsciiLong(entry.getTime(), 11, 8);",
      "info" : "ExpressionStatement[7491-7530]:ExpressionStatement[7491-7530]"
    }, {
      "left" : "writeAsciiLong(entry.getName().length() + 1, 6, 8);",
      "right" : "writeAsciiLong(entry.getName().length() + 1, 6, 8);",
      "info" : "ExpressionStatement[7539-7590]:ExpressionStatement[7539-7590]"
    }, {
      "left" : "writeAsciiLong(entry.getSize(), 11, 8);",
      "right" : "writeAsciiLong(entry.getSize(), 11, 8);",
      "info" : "ExpressionStatement[7599-7638]:ExpressionStatement[7599-7638]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[7647-7677]:ExpressionStatement[7647-7677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7811-8548]:Block[7811-8548]"
    }, {
      "left" : "writeBinaryLong(entry.getDevice(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getDevice(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[7821-7873]:ExpressionStatement[7821-7873]"
    }, {
      "left" : "writeBinaryLong(entry.getInode(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getInode(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[7882-7933]:ExpressionStatement[7882-7933]"
    }, {
      "left" : "writeBinaryLong(entry.getMode(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getMode(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[7942-7992]:ExpressionStatement[7942-7992]"
    }, {
      "left" : "writeBinaryLong(entry.getUID(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getUID(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8001-8050]:ExpressionStatement[8001-8050]"
    }, {
      "left" : "writeBinaryLong(entry.getGID(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getGID(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8059-8108]:ExpressionStatement[8059-8108]"
    }, {
      "left" : "writeBinaryLong(entry.getNumberOfLinks(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getNumberOfLinks(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8117-8176]:ExpressionStatement[8117-8176]"
    }, {
      "left" : "writeBinaryLong(entry.getRemoteDevice(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getRemoteDevice(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[8185-8243]:ExpressionStatement[8185-8243]"
    }, {
      "left" : "writeBinaryLong(entry.getTime(), 4, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getTime(), 4, swapHalfWord);",
      "info" : "ExpressionStatement[8252-8302]:ExpressionStatement[8252-8302]"
    }, {
      "left" : "writeBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);",
      "info" : "ExpressionStatement[8311-8374]:ExpressionStatement[8311-8374]"
    }, {
      "left" : "writeBinaryLong(entry.getSize(), 4, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getSize(), 4, swapHalfWord);",
      "info" : "ExpressionStatement[8383-8433]:ExpressionStatement[8383-8433]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[8442-8472]:ExpressionStatement[8442-8472]"
    }, {
      "left" : "pad(entry.getHeaderSize() + entry.getName().length() + 1, 2);",
      "right" : "pad(entry.getHeaderSize() + entry.getName().length() + 1, 2);",
      "info" : "ExpressionStatement[8481-8542]:ExpressionStatement[8481-8542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8746-9585]:Block[8746-9585]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[8756-8769]:ExpressionStatement[8756-8769]"
    }, {
      "left" : "if (this.cpioEntry.getSize() != this.written)",
      "right" : "if (this.cpioEntry.getSize() != this.written)",
      "info" : "IfStatement[8779-9012]:IfStatement[8779-9012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8825-9012]:Block[8825-9012]"
    }, {
      "left" : "throw new IOException(\"invalid entry size (expected \"\n                    + this.cpioEntry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");",
      "right" : "throw new IOException(\"invalid entry size (expected \"\n                    + this.cpioEntry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");",
      "info" : "ThrowStatement[8839-9002]:ThrowStatement[8839-9002]"
    }, {
      "left" : "if ((this.cpioEntry.getFormat() | FORMAT_NEW_MASK) == FORMAT_NEW_MASK)",
      "right" : "if ((this.cpioEntry.getFormat() | FORMAT_NEW_MASK) == FORMAT_NEW_MASK)",
      "info" : "IfStatement[9021-9287]:IfStatement[9021-9287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9092-9149]:Block[9092-9149]"
    }, {
      "left" : "pad(this.cpioEntry.getSize(), 4);",
      "right" : "pad(this.cpioEntry.getSize(), 4);",
      "info" : "ExpressionStatement[9106-9139]:ExpressionStatement[9106-9139]"
    }, {
      "left" : "if ((this.cpioEntry.getFormat() | FORMAT_OLD_BINARY) == FORMAT_OLD_BINARY)",
      "right" : "if ((this.cpioEntry.getFormat() | FORMAT_OLD_BINARY) == FORMAT_OLD_BINARY)",
      "info" : "IfStatement[9155-9287]:IfStatement[9155-9287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9230-9287]:Block[9230-9287]"
    }, {
      "left" : "pad(this.cpioEntry.getSize(), 2);",
      "right" : "pad(this.cpioEntry.getSize(), 2);",
      "info" : "ExpressionStatement[9244-9277]:ExpressionStatement[9244-9277]"
    }, {
      "left" : "if ((this.cpioEntry.getFormat() | FORMAT_NEW_CRC) == FORMAT_NEW_CRC)",
      "right" : "if ((this.cpioEntry.getFormat() | FORMAT_NEW_CRC) == FORMAT_NEW_CRC)",
      "info" : "IfStatement[9296-9500]:IfStatement[9296-9500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9365-9500]:Block[9365-9500]"
    }, {
      "left" : "if (this.crc != this.cpioEntry.getChksum())",
      "right" : "if (this.crc != this.cpioEntry.getChksum())",
      "info" : "IfStatement[9379-9490]:IfStatement[9379-9490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9423-9490]:Block[9423-9490]"
    }, {
      "left" : "throw new IOException(\"CRC Error\");",
      "right" : "throw new IOException(\"CRC Error\");",
      "info" : "ThrowStatement[9441-9476]:ThrowStatement[9441-9476]"
    }, {
      "left" : "this.cpioEntry = null;",
      "right" : "this.cpioEntry = null;",
      "info" : "ExpressionStatement[9509-9531]:ExpressionStatement[9509-9531]"
    }, {
      "left" : "this.crc = 0;",
      "right" : "this.crc = 0;",
      "info" : "ExpressionStatement[9540-9553]:ExpressionStatement[9540-9553]"
    }, {
      "left" : "this.written = 0;",
      "right" : "this.written = 0;",
      "info" : "ExpressionStatement[9562-9579]:ExpressionStatement[9562-9579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10163-10879]:Block[10163-10879]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[10173-10186]:ExpressionStatement[10173-10186]"
    }, {
      "left" : "if (off < 0 || len < 0 || off > b.length - len)",
      "right" : "if (off < 0 || len < 0 || off > b.length - len)",
      "info" : "IfStatement[10195-10356]:IfStatement[10195-10356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10243-10305]:Block[10243-10305]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[10257-10295]:ThrowStatement[10257-10295]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[10311-10356]:IfStatement[10311-10356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10325-10356]:Block[10325-10356]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10339-10346]:ReturnStatement[10339-10346]"
    }, {
      "left" : "if (this.cpioEntry == null)",
      "right" : "if (this.cpioEntry == null)",
      "info" : "IfStatement[10366-10465]:IfStatement[10366-10465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10394-10465]:Block[10394-10465]"
    }, {
      "left" : "throw new IOException(\"no current CPIO entry\");",
      "right" : "throw new IOException(\"no current CPIO entry\");",
      "info" : "ThrowStatement[10408-10455]:ThrowStatement[10408-10455]"
    }, {
      "left" : "if (this.written + len > this.cpioEntry.getSize())",
      "right" : "if (this.written + len > this.cpioEntry.getSize())",
      "info" : "IfStatement[10474-10616]:IfStatement[10474-10616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10525-10616]:Block[10525-10616]"
    }, {
      "left" : "throw new IOException(\"attempt to write past end of STORED entry\");",
      "right" : "throw new IOException(\"attempt to write past end of STORED entry\");",
      "info" : "ThrowStatement[10539-10606]:ThrowStatement[10539-10606]"
    }, {
      "left" : "out.write(b, off, len);",
      "right" : "out.write(b, off, len);",
      "info" : "ExpressionStatement[10625-10648]:ExpressionStatement[10625-10648]"
    }, {
      "left" : "this.written += len;",
      "right" : "this.written += len;",
      "info" : "ExpressionStatement[10657-10677]:ExpressionStatement[10657-10677]"
    }, {
      "left" : "if ((this.cpioEntry.getFormat() | FORMAT_NEW_CRC) == FORMAT_NEW_CRC)",
      "right" : "if ((this.cpioEntry.getFormat() | FORMAT_NEW_CRC) == FORMAT_NEW_CRC)",
      "info" : "IfStatement[10686-10873]:IfStatement[10686-10873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10755-10873]:Block[10755-10873]"
    }, {
      "left" : "for (int pos = 0; pos < len; pos++)",
      "right" : "for (int pos = 0; pos < len; pos++)",
      "info" : "ForStatement[10769-10863]:ForStatement[10769-10863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10805-10863]:Block[10805-10863]"
    }, {
      "left" : "this.crc += b[pos] & 0xFF;",
      "right" : "this.crc += b[pos] & 0xFF;",
      "info" : "ExpressionStatement[10823-10849]:ExpressionStatement[10823-10849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11288-11714]:Block[11288-11714]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[11298-11311]:ExpressionStatement[11298-11311]"
    }, {
      "left" : "if (this.finished)",
      "right" : "if (this.finished)",
      "info" : "IfStatement[11321-11371]:IfStatement[11321-11371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11340-11371]:Block[11340-11371]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11354-11361]:ReturnStatement[11354-11361]"
    }, {
      "left" : "if (this.cpioEntry != null)",
      "right" : "if (this.cpioEntry != null)",
      "info" : "IfStatement[11380-11452]:IfStatement[11380-11452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11408-11452]:Block[11408-11452]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[11422-11442]:ExpressionStatement[11422-11442]"
    }, {
      "left" : "this.cpioEntry = new CpioArchiveEntry(this.entryFormat);",
      "right" : "this.cpioEntry = new CpioArchiveEntry(this.entryFormat);",
      "info" : "ExpressionStatement[11461-11517]:ExpressionStatement[11461-11517]"
    }, {
      "left" : "this.cpioEntry.setMode(0);",
      "right" : "this.cpioEntry.setMode(0);",
      "info" : "ExpressionStatement[11526-11552]:ExpressionStatement[11526-11552]"
    }, {
      "left" : "this.cpioEntry.setName(\"TRAILER!!!\");",
      "right" : "this.cpioEntry.setName(\"TRAILER!!!\");",
      "info" : "ExpressionStatement[11561-11598]:ExpressionStatement[11561-11598]"
    }, {
      "left" : "this.cpioEntry.setNumberOfLinks(1);",
      "right" : "this.cpioEntry.setNumberOfLinks(1);",
      "info" : "ExpressionStatement[11607-11642]:ExpressionStatement[11607-11642]"
    }, {
      "left" : "writeHeader(this.cpioEntry);",
      "right" : "writeHeader(this.cpioEntry);",
      "info" : "ExpressionStatement[11651-11679]:ExpressionStatement[11651-11679]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[11688-11708]:ExpressionStatement[11688-11708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12171-12334]:Block[12198-12361]"
    }, {
      "left" : "long skip = count % border;",
      "right" : "long skip = count % border;",
      "info" : "VariableDeclarationStatement[12181-12208]:VariableDeclarationStatement[12208-12235]"
    }, {
      "left" : "if (skip > 0)",
      "right" : "if (skip > 0)",
      "info" : "IfStatement[12217-12328]:IfStatement[12244-12355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12231-12328]:Block[12258-12355]"
    }, {
      "left" : "byte tmp[] = new byte[(int) (border - skip)];",
      "right" : "byte tmp[] = new byte[(int) (border - skip)];",
      "info" : "VariableDeclarationStatement[12245-12290]:VariableDeclarationStatement[12272-12317]"
    }, {
      "left" : "out.write(tmp);",
      "right" : "out.write(tmp);",
      "info" : "ExpressionStatement[12303-12318]:ExpressionStatement[12330-12345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12465-12572]:Block[12492-12599]"
    }, {
      "left" : "byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);",
      "right" : "byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);",
      "info" : "VariableDeclarationStatement[12475-12542]:VariableDeclarationStatement[12502-12569]"
    }, {
      "left" : "out.write(tmp);",
      "right" : "out.write(tmp);",
      "info" : "ExpressionStatement[12551-12566]:ExpressionStatement[12578-12593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12691-13368]:Block[12718-13395]"
    }, {
      "left" : "StringBuffer tmp = new StringBuffer();",
      "right" : "StringBuffer tmp = new StringBuffer();",
      "info" : "VariableDeclarationStatement[12701-12739]:VariableDeclarationStatement[12728-12766]"
    }, {
      "left" : "String tmpStr;",
      "right" : "String tmpStr;",
      "info" : "VariableDeclarationStatement[12748-12762]:VariableDeclarationStatement[12775-12789]"
    }, {
      "left" : "if (radix == 16)",
      "right" : "if (radix == 16)",
      "info" : "IfStatement[12771-12998]:IfStatement[12798-13025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12788-12849]:Block[12815-12876]"
    }, {
      "left" : "tmp.append(Long.toHexString(number));",
      "right" : "tmp.append(Long.toHexString(number));",
      "info" : "ExpressionStatement[12802-12839]:ExpressionStatement[12829-12866]"
    }, {
      "left" : "if (radix == 8)",
      "right" : "if (radix == 8)",
      "info" : "IfStatement[12855-12998]:IfStatement[12882-13025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12871-12934]:Block[12898-12961]"
    }, {
      "left" : "tmp.append(Long.toOctalString(number));",
      "right" : "tmp.append(Long.toOctalString(number));",
      "info" : "ExpressionStatement[12885-12924]:ExpressionStatement[12912-12951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12940-12998]:Block[12967-13025]"
    }, {
      "left" : "tmp.append(Long.toString(number));",
      "right" : "tmp.append(Long.toString(number));",
      "info" : "ExpressionStatement[12954-12988]:ExpressionStatement[12981-13015]"
    }, {
      "left" : "if (tmp.length() <= length)",
      "right" : "if (tmp.length() <= length)",
      "info" : "IfStatement[13008-13324]:IfStatement[13035-13351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13036-13248]:Block[13063-13275]"
    }, {
      "left" : "long insertLength = length - tmp.length();",
      "right" : "long insertLength = length - tmp.length();",
      "info" : "VariableDeclarationStatement[13050-13092]:VariableDeclarationStatement[13077-13119]"
    }, {
      "left" : "for (int pos = 0; pos < insertLength; pos++)",
      "right" : "for (int pos = 0; pos < insertLength; pos++)",
      "info" : "ForStatement[13105-13201]:ForStatement[13132-13228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13150-13201]:Block[13177-13228]"
    }, {
      "left" : "tmp.insert(0, \"0\");",
      "right" : "tmp.insert(0, \"0\");",
      "info" : "ExpressionStatement[13168-13187]:ExpressionStatement[13195-13214]"
    }, {
      "left" : "tmpStr = tmp.toString();",
      "right" : "tmpStr = tmp.toString();",
      "info" : "ExpressionStatement[13214-13238]:ExpressionStatement[13241-13265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13254-13324]:Block[13281-13351]"
    }, {
      "left" : "tmpStr = tmp.substring(tmp.length() - length);",
      "right" : "tmpStr = tmp.substring(tmp.length() - length);",
      "info" : "ExpressionStatement[13268-13314]:ExpressionStatement[13295-13341]"
    }, {
      "left" : "out.write(tmpStr.getBytes());",
      "right" : "out.write(tmpStr.getBytes());",
      "info" : "ExpressionStatement[13333-13362]:ExpressionStatement[13360-13389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13437-13504]:Block[13464-13531]"
    }, {
      "left" : "out.write(str.getBytes());",
      "right" : "out.write(str.getBytes());",
      "info" : "ExpressionStatement[13447-13473]:ExpressionStatement[13474-13500]"
    }, {
      "left" : "out.write('\\0');",
      "right" : "out.write('\\0');",
      "info" : "ExpressionStatement[13482-13498]:ExpressionStatement[13509-13525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13774-13834]:Block[13801-13861]"
    }, {
      "left" : "this.putNextEntry((CpioArchiveEntry) entry);",
      "right" : "this.putNextEntry((CpioArchiveEntry) entry);",
      "info" : "ExpressionStatement[13784-13828]:ExpressionStatement[13811-13855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13972-14001]:Block[13999-14028]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[13982-13995]:ExpressionStatement[14009-14022]"
    } ]
  },
  "interFileMappings" : { }
}