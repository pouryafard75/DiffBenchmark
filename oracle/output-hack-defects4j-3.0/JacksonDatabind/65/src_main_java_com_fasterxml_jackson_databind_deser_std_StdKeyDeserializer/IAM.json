{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "TypeDeclaration[645-15254]:TypeDeclaration[645-15304]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1100-1148]:FieldDeclaration[1100-1148]"
    }, {
      "left" : "public final static int TYPE_BOOLEAN = 1;",
      "right" : "public final static int TYPE_BOOLEAN = 1;",
      "info" : "FieldDeclaration[1154-1195]:FieldDeclaration[1154-1195]"
    }, {
      "left" : "public final static int TYPE_BYTE = 2;",
      "right" : "public final static int TYPE_BYTE = 2;",
      "info" : "FieldDeclaration[1200-1238]:FieldDeclaration[1200-1238]"
    }, {
      "left" : "public final static int TYPE_SHORT = 3;",
      "right" : "public final static int TYPE_SHORT = 3;",
      "info" : "FieldDeclaration[1243-1282]:FieldDeclaration[1243-1282]"
    }, {
      "left" : "public final static int TYPE_CHAR = 4;",
      "right" : "public final static int TYPE_CHAR = 4;",
      "info" : "FieldDeclaration[1287-1325]:FieldDeclaration[1287-1325]"
    }, {
      "left" : "public final static int TYPE_INT = 5;",
      "right" : "public final static int TYPE_INT = 5;",
      "info" : "FieldDeclaration[1330-1367]:FieldDeclaration[1330-1367]"
    }, {
      "left" : "public final static int TYPE_LONG = 6;",
      "right" : "public final static int TYPE_LONG = 6;",
      "info" : "FieldDeclaration[1372-1410]:FieldDeclaration[1372-1410]"
    }, {
      "left" : "public final static int TYPE_FLOAT = 7;",
      "right" : "public final static int TYPE_FLOAT = 7;",
      "info" : "FieldDeclaration[1415-1454]:FieldDeclaration[1415-1454]"
    }, {
      "left" : "public final static int TYPE_DOUBLE = 8;",
      "right" : "public final static int TYPE_DOUBLE = 8;",
      "info" : "FieldDeclaration[1459-1499]:FieldDeclaration[1459-1499]"
    }, {
      "left" : "public final static int TYPE_LOCALE = 9;",
      "right" : "public final static int TYPE_LOCALE = 9;",
      "info" : "FieldDeclaration[1504-1544]:FieldDeclaration[1504-1544]"
    }, {
      "left" : "public final static int TYPE_DATE = 10;",
      "right" : "public final static int TYPE_DATE = 10;",
      "info" : "FieldDeclaration[1549-1588]:FieldDeclaration[1549-1588]"
    }, {
      "left" : "public final static int TYPE_CALENDAR = 11;",
      "right" : "public final static int TYPE_CALENDAR = 11;",
      "info" : "FieldDeclaration[1593-1636]:FieldDeclaration[1593-1636]"
    }, {
      "left" : "public final static int TYPE_UUID = 12;",
      "right" : "public final static int TYPE_UUID = 12;",
      "info" : "FieldDeclaration[1641-1680]:FieldDeclaration[1641-1680]"
    }, {
      "left" : "public final static int TYPE_URI = 13;",
      "right" : "public final static int TYPE_URI = 13;",
      "info" : "FieldDeclaration[1685-1723]:FieldDeclaration[1685-1723]"
    }, {
      "left" : "public final static int TYPE_URL = 14;",
      "right" : "public final static int TYPE_URL = 14;",
      "info" : "FieldDeclaration[1728-1766]:FieldDeclaration[1728-1766]"
    }, {
      "left" : "public final static int TYPE_CLASS = 15;",
      "right" : "public final static int TYPE_CLASS = 15;",
      "info" : "FieldDeclaration[1771-1811]:FieldDeclaration[1771-1811]"
    }, {
      "left" : "public final static int TYPE_CURRENCY = 16;",
      "right" : "public final static int TYPE_CURRENCY = 16;",
      "info" : "FieldDeclaration[1816-1859]:FieldDeclaration[1816-1859]"
    }, {
      "left" : "final protected int _kind;",
      "right" : "final protected int _kind;",
      "info" : "FieldDeclaration[1865-1891]:FieldDeclaration[1865-1891]"
    }, {
      "left" : "final protected Class<?> _keyClass;",
      "right" : "final protected Class<?> _keyClass;",
      "info" : "FieldDeclaration[1896-1931]:FieldDeclaration[1896-1931]"
    }, {
      "left" : "protected final FromStringDeserializer<?> _deser;",
      "right" : "protected final FromStringDeserializer<?> _deser;",
      "info" : "FieldDeclaration[1937-2071]:FieldDeclaration[1937-2071]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "info" : "MethodDeclaration[2081-2172]:MethodDeclaration[2081-2172]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "info" : "MethodDeclaration[2178-2342]:MethodDeclaration[2178-2342]"
    }, {
      "left" : "public static StdKeyDeserializer forType(Class<?> raw)",
      "right" : "public static StdKeyDeserializer forType(Class<?> raw)",
      "info" : "MethodDeclaration[2348-4137]:MethodDeclaration[2348-4137]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[4143-4892]:MethodDeclaration[4143-4942]"
    }, {
      "left" : "public Class<?> getKeyClass()",
      "right" : "public Class<?> getKeyClass()",
      "info" : "MethodDeclaration[4898-4949]:MethodDeclaration[4948-4999]"
    }, {
      "left" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[4955-8551]:MethodDeclaration[5005-8601]"
    }, {
      "left" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "right" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8739-8852]:MethodDeclaration[8789-8902]"
    }, {
      "left" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "right" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8858-8971]:MethodDeclaration[8908-9021]"
    }, {
      "left" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "right" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8977-9103]:MethodDeclaration[9027-9153]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "TypeDeclaration[9312-10182]:TypeDeclaration[9362-10232]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[9401-9449]:FieldDeclaration[9451-9499]"
    }, {
      "left" : "private final static StringKD sString = new StringKD(String.class);",
      "right" : "private final static StringKD sString = new StringKD(String.class);",
      "info" : "FieldDeclaration[9458-9525]:FieldDeclaration[9508-9575]"
    }, {
      "left" : "private final static StringKD sObject = new StringKD(Object.class);",
      "right" : "private final static StringKD sObject = new StringKD(Object.class);",
      "info" : "FieldDeclaration[9534-9601]:FieldDeclaration[9584-9651]"
    }, {
      "left" : "private StringKD(Class<?> nominalType)",
      "right" : "private StringKD(Class<?> nominalType)",
      "info" : "MethodDeclaration[9619-9685]:MethodDeclaration[9669-9735]"
    }, {
      "left" : "public static StringKD forType(Class<?> nominalType)",
      "right" : "public static StringKD forType(Class<?> nominalType)",
      "info" : "MethodDeclaration[9695-9999]:MethodDeclaration[9745-10049]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "info" : "MethodDeclaration[10009-10176]:MethodDeclaration[10059-10226]"
    }, {
      "left" : "DelegatingKD",
      "right" : "DelegatingKD",
      "info" : "TypeDeclaration[10383-11897]:TypeDeclaration[10433-11947]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[10711-10759]:FieldDeclaration[10761-10809]"
    }, {
      "left" : "final protected Class<?> _keyClass;",
      "right" : "final protected Class<?> _keyClass;",
      "info" : "FieldDeclaration[10769-10804]:FieldDeclaration[10819-10854]"
    }, {
      "left" : "protected final JsonDeserializer<?> _delegate;",
      "right" : "protected final JsonDeserializer<?> _delegate;",
      "info" : "FieldDeclaration[10814-10860]:FieldDeclaration[10864-10910]"
    }, {
      "left" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "right" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "info" : "MethodDeclaration[10878-11013]:MethodDeclaration[10928-11063]"
    }, {
      "left" : "public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException",
      "right" : "public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException, JsonProcessingException",
      "info" : "MethodDeclaration[11023-11830]:MethodDeclaration[11073-11880]"
    }, {
      "left" : "public Class<?> getKeyClass()",
      "right" : "public Class<?> getKeyClass()",
      "info" : "MethodDeclaration[11840-11891]:MethodDeclaration[11890-11941]"
    }, {
      "left" : "EnumKD",
      "right" : "EnumKD",
      "info" : "TypeDeclaration[11908-13976]:TypeDeclaration[11958-14026]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[11995-12043]:FieldDeclaration[12045-12093]"
    }, {
      "left" : "protected final EnumResolver _byNameResolver;",
      "right" : "protected final EnumResolver _byNameResolver;",
      "info" : "FieldDeclaration[12053-12098]:FieldDeclaration[12103-12148]"
    }, {
      "left" : "protected final AnnotatedMethod _factory;",
      "right" : "protected final AnnotatedMethod _factory;",
      "info" : "FieldDeclaration[12108-12149]:FieldDeclaration[12158-12199]"
    }, {
      "left" : "protected EnumResolver _byToStringResolver;",
      "right" : "protected EnumResolver _byToStringResolver;",
      "info" : "FieldDeclaration[12159-12378]:FieldDeclaration[12209-12428]"
    }, {
      "left" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "right" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "info" : "MethodDeclaration[12396-12574]:MethodDeclaration[12446-12624]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws IOException",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[12584-13530]:MethodDeclaration[12634-13580]"
    }, {
      "left" : "private EnumResolver _getToStringResolver(DeserializationContext ctxt)",
      "right" : "private EnumResolver _getToStringResolver(DeserializationContext ctxt)",
      "info" : "MethodDeclaration[13540-13970]:MethodDeclaration[13590-14020]"
    }, {
      "left" : "StringCtorKeyDeserializer",
      "right" : "StringCtorKeyDeserializer",
      "info" : "TypeDeclaration[13986-14615]:TypeDeclaration[14036-14665]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[14195-14243]:FieldDeclaration[14245-14293]"
    }, {
      "left" : "protected final Constructor<?> _ctor;",
      "right" : "protected final Constructor<?> _ctor;",
      "info" : "FieldDeclaration[14253-14290]:FieldDeclaration[14303-14340]"
    }, {
      "left" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "right" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "info" : "MethodDeclaration[14300-14440]:MethodDeclaration[14350-14490]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[14450-14609]:MethodDeclaration[14500-14659]"
    }, {
      "left" : "StringFactoryKeyDeserializer",
      "right" : "StringFactoryKeyDeserializer",
      "info" : "TypeDeclaration[14621-15252]:TypeDeclaration[14671-15302]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[14833-14881]:FieldDeclaration[14883-14931]"
    }, {
      "left" : "final Method _factoryMethod;",
      "right" : "final Method _factoryMethod;",
      "info" : "FieldDeclaration[14891-14919]:FieldDeclaration[14941-14969]"
    }, {
      "left" : "public StringFactoryKeyDeserializer(Method fm)",
      "right" : "public StringFactoryKeyDeserializer(Method fm)",
      "info" : "MethodDeclaration[14929-15067]:MethodDeclaration[14979-15117]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[15077-15246]:MethodDeclaration[15127-15296]"
    } ],
    "mappings" : [
 {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[986-1001]:MarkerAnnotation[986-1001]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1002-1008]:Modifier[1002-1008]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1009-1014]:TYPE_DECLARATION_KIND[1009-1014]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleName[1015-1033]:SimpleName[1015-1033]"
    }, {
      "left" : "KeyDeserializer",
      "right" : "KeyDeserializer",
      "info" : "SimpleType[1042-1057]:SimpleType[1042-1057]"
    }, {
      "left" : "java.io.Serializable",
      "right" : "java.io.Serializable",
      "info" : "SimpleType[1073-1093]:SimpleType[1073-1093]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2081-2090]:Modifier[2081-2090]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleName[2091-2109]:SimpleName[2091-2109]"
    }, {
      "left" : "int kind",
      "right" : "int kind",
      "info" : "SingleVariableDeclaration[2110-2118]:SingleVariableDeclaration[2110-2118]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[2120-2132]:SingleVariableDeclaration[2120-2132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2134-2172]:Block[2134-2172]"
    }, {
      "left" : "this(kind, cls, null);",
      "right" : "this(kind, cls, null);",
      "info" : "ConstructorInvocation[2144-2166]:ConstructorInvocation[2144-2166]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2178-2187]:Modifier[2178-2187]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleName[2188-2206]:SimpleName[2188-2206]"
    }, {
      "left" : "int kind",
      "right" : "int kind",
      "info" : "SingleVariableDeclaration[2207-2215]:SingleVariableDeclaration[2207-2215]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[2217-2229]:SingleVariableDeclaration[2217-2229]"
    }, {
      "left" : "FromStringDeserializer<?> deser",
      "right" : "FromStringDeserializer<?> deser",
      "info" : "SingleVariableDeclaration[2231-2262]:SingleVariableDeclaration[2231-2262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2264-2342]:Block[2264-2342]"
    }, {
      "left" : "_kind = kind;",
      "right" : "_kind = kind;",
      "info" : "ExpressionStatement[2274-2287]:ExpressionStatement[2274-2287]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[2296-2312]:ExpressionStatement[2296-2312]"
    }, {
      "left" : "_deser = deser;",
      "right" : "_deser = deser;",
      "info" : "ExpressionStatement[2321-2336]:ExpressionStatement[2321-2336]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2348-2354]:Modifier[2348-2354]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2355-2361]:Modifier[2355-2361]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleType[2362-2380]:SimpleType[2362-2380]"
    }, {
      "left" : "forType",
      "right" : "forType",
      "info" : "SimpleName[2381-2388]:SimpleName[2381-2388]"
    }, {
      "left" : "Class<?> raw",
      "right" : "Class<?> raw",
      "info" : "SingleVariableDeclaration[2389-2401]:SingleVariableDeclaration[2389-2401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2407-4137]:Block[2407-4137]"
    }, {
      "left" : "int kind;",
      "right" : "int kind;",
      "info" : "VariableDeclarationStatement[2417-2426]:VariableDeclarationStatement[2417-2426]"
    }, {
      "left" : "if (raw == String.class || raw == Object.class)",
      "right" : "if (raw == String.class || raw == Object.class)",
      "info" : "IfStatement[2467-4081]:IfStatement[2467-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2515-2568]:Block[2515-2568]"
    }, {
      "left" : "return StringKD.forType(raw);",
      "right" : "return StringKD.forType(raw);",
      "info" : "ReturnStatement[2529-2558]:ReturnStatement[2529-2558]"
    }, {
      "left" : "if (raw == UUID.class)",
      "right" : "if (raw == UUID.class)",
      "info" : "IfStatement[2574-4081]:IfStatement[2574-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2597-2638]:Block[2597-2638]"
    }, {
      "left" : "kind = TYPE_UUID;",
      "right" : "kind = TYPE_UUID;",
      "info" : "ExpressionStatement[2611-2628]:ExpressionStatement[2611-2628]"
    }, {
      "left" : "if (raw == Integer.class)",
      "right" : "if (raw == Integer.class)",
      "info" : "IfStatement[2644-4081]:IfStatement[2644-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2670-2710]:Block[2670-2710]"
    }, {
      "left" : "kind = TYPE_INT;",
      "right" : "kind = TYPE_INT;",
      "info" : "ExpressionStatement[2684-2700]:ExpressionStatement[2684-2700]"
    }, {
      "left" : "if (raw == Long.class)",
      "right" : "if (raw == Long.class)",
      "info" : "IfStatement[2716-4081]:IfStatement[2716-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2739-2780]:Block[2739-2780]"
    }, {
      "left" : "kind = TYPE_LONG;",
      "right" : "kind = TYPE_LONG;",
      "info" : "ExpressionStatement[2753-2770]:ExpressionStatement[2753-2770]"
    }, {
      "left" : "if (raw == Date.class)",
      "right" : "if (raw == Date.class)",
      "info" : "IfStatement[2786-4081]:IfStatement[2786-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2809-2850]:Block[2809-2850]"
    }, {
      "left" : "kind = TYPE_DATE;",
      "right" : "kind = TYPE_DATE;",
      "info" : "ExpressionStatement[2823-2840]:ExpressionStatement[2823-2840]"
    }, {
      "left" : "if (raw == Calendar.class)",
      "right" : "if (raw == Calendar.class)",
      "info" : "IfStatement[2856-4081]:IfStatement[2856-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2883-2964]:Block[2883-2964]"
    }, {
      "left" : "kind = TYPE_CALENDAR;",
      "right" : "kind = TYPE_CALENDAR;",
      "info" : "ExpressionStatement[2897-2918]:ExpressionStatement[2897-2918]"
    }, {
      "left" : "if (raw == Boolean.class)",
      "right" : "if (raw == Boolean.class)",
      "info" : "IfStatement[2970-4081]:IfStatement[2970-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2996-3040]:Block[2996-3040]"
    }, {
      "left" : "kind = TYPE_BOOLEAN;",
      "right" : "kind = TYPE_BOOLEAN;",
      "info" : "ExpressionStatement[3010-3030]:ExpressionStatement[3010-3030]"
    }, {
      "left" : "if (raw == Byte.class)",
      "right" : "if (raw == Byte.class)",
      "info" : "IfStatement[3046-4081]:IfStatement[3046-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3069-3110]:Block[3069-3110]"
    }, {
      "left" : "kind = TYPE_BYTE;",
      "right" : "kind = TYPE_BYTE;",
      "info" : "ExpressionStatement[3083-3100]:ExpressionStatement[3083-3100]"
    }, {
      "left" : "if (raw == Character.class)",
      "right" : "if (raw == Character.class)",
      "info" : "IfStatement[3116-4081]:IfStatement[3116-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3144-3185]:Block[3144-3185]"
    }, {
      "left" : "kind = TYPE_CHAR;",
      "right" : "kind = TYPE_CHAR;",
      "info" : "ExpressionStatement[3158-3175]:ExpressionStatement[3158-3175]"
    }, {
      "left" : "if (raw == Short.class)",
      "right" : "if (raw == Short.class)",
      "info" : "IfStatement[3191-4081]:IfStatement[3191-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3215-3257]:Block[3215-3257]"
    }, {
      "left" : "kind = TYPE_SHORT;",
      "right" : "kind = TYPE_SHORT;",
      "info" : "ExpressionStatement[3229-3247]:ExpressionStatement[3229-3247]"
    }, {
      "left" : "if (raw == Float.class)",
      "right" : "if (raw == Float.class)",
      "info" : "IfStatement[3263-4081]:IfStatement[3263-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3287-3329]:Block[3287-3329]"
    }, {
      "left" : "kind = TYPE_FLOAT;",
      "right" : "kind = TYPE_FLOAT;",
      "info" : "ExpressionStatement[3301-3319]:ExpressionStatement[3301-3319]"
    }, {
      "left" : "if (raw == Double.class)",
      "right" : "if (raw == Double.class)",
      "info" : "IfStatement[3335-4081]:IfStatement[3335-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3360-3403]:Block[3360-3403]"
    }, {
      "left" : "kind = TYPE_DOUBLE;",
      "right" : "kind = TYPE_DOUBLE;",
      "info" : "ExpressionStatement[3374-3393]:ExpressionStatement[3374-3393]"
    }, {
      "left" : "if (raw == URI.class)",
      "right" : "if (raw == URI.class)",
      "info" : "IfStatement[3409-4081]:IfStatement[3409-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3471]:Block[3431-3471]"
    }, {
      "left" : "kind = TYPE_URI;",
      "right" : "kind = TYPE_URI;",
      "info" : "ExpressionStatement[3445-3461]:ExpressionStatement[3445-3461]"
    }, {
      "left" : "if (raw == URL.class)",
      "right" : "if (raw == URL.class)",
      "info" : "IfStatement[3477-4081]:IfStatement[3477-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3499-3539]:Block[3499-3539]"
    }, {
      "left" : "kind = TYPE_URL;",
      "right" : "kind = TYPE_URL;",
      "info" : "ExpressionStatement[3513-3529]:ExpressionStatement[3513-3529]"
    }, {
      "left" : "if (raw == Class.class)",
      "right" : "if (raw == Class.class)",
      "info" : "IfStatement[3545-4081]:IfStatement[3545-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3569-3611]:Block[3569-3611]"
    }, {
      "left" : "kind = TYPE_CLASS;",
      "right" : "kind = TYPE_CLASS;",
      "info" : "ExpressionStatement[3583-3601]:ExpressionStatement[3583-3601]"
    }, {
      "left" : "if (raw == Locale.class)",
      "right" : "if (raw == Locale.class)",
      "info" : "IfStatement[3617-4081]:IfStatement[3617-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3642-3822]:Block[3642-3822]"
    }, {
      "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
      "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
      "info" : "VariableDeclarationStatement[3656-3744]:VariableDeclarationStatement[3656-3744]"
    }, {
      "left" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
      "right" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
      "info" : "ReturnStatement[3757-3812]:ReturnStatement[3757-3812]"
    }, {
      "left" : "if (raw == Currency.class)",
      "right" : "if (raw == Currency.class)",
      "info" : "IfStatement[3828-4081]:IfStatement[3828-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3855-4039]:Block[3855-4039]"
    }, {
      "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
      "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
      "info" : "VariableDeclarationStatement[3869-3959]:VariableDeclarationStatement[3869-3959]"
    }, {
      "left" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
      "right" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
      "info" : "ReturnStatement[3972-4029]:ReturnStatement[3972-4029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4045-4081]:Block[4045-4081]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4059-4071]:ReturnStatement[4059-4071]"
    }, {
      "left" : "return new StdKeyDeserializer(kind, raw);",
      "right" : "return new StdKeyDeserializer(kind, raw);",
      "info" : "ReturnStatement[4090-4131]:ReturnStatement[4090-4131]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4143-4152]:MarkerAnnotation[4143-4152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4157-4163]:Modifier[4157-4163]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[4164-4170]:SimpleType[4164-4170]"
    }, {
      "left" : "deserializeKey",
      "right" : "deserializeKey",
      "info" : "SimpleName[4171-4185]:SimpleName[4171-4185]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[4186-4196]:SingleVariableDeclaration[4186-4196]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[4198-4225]:SingleVariableDeclaration[4198-4225]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4242-4253]:SimpleType[4242-4253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4258-4892]:Block[4258-4942]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[4268-4349]:IfStatement[4268-4349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4285-4349]:Block[4285-4349]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4327-4339]:ReturnStatement[4327-4339]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4358-4648]:TryStatement[4358-4698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4362-4499]:Block[4362-4499]"
    }, {
      "left" : "Object result = _parse(key, ctxt);",
      "right" : "Object result = _parse(key, ctxt);",
      "info" : "VariableDeclarationStatement[4376-4410]:VariableDeclarationStatement[4376-4410]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[4423-4489]:IfStatement[4423-4489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4443-4489]:Block[4443-4489]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4461-4475]:ReturnStatement[4461-4475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4521-4648]:Block[4521-4698]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\",\n                    re.getClass().getName(), re.getMessage());",
      "info" : "ReturnStatement[4535-4638]:ReturnStatement[4535-4688]"
    }, {
      "left" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[4657-4804]:IfStatement[4707-4854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4768-4804]:Block[4818-4854]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4782-4794]:ReturnStatement[4832-4844]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "info" : "ReturnStatement[4813-4886]:ReturnStatement[4863-4936]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4898-4904]:Modifier[4948-4954]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[4905-4913]:ParameterizedType[4955-4963]"
    }, {
      "left" : "getKeyClass",
      "right" : "getKeyClass",
      "info" : "SimpleName[4914-4925]:SimpleName[4964-4975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4928-4949]:Block[4978-4999]"
    }, {
      "left" : "return _keyClass;",
      "right" : "return _keyClass;",
      "info" : "ReturnStatement[4930-4947]:ReturnStatement[4980-4997]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4955-4964]:Modifier[5005-5014]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[4965-4971]:SimpleType[5015-5021]"
    }, {
      "left" : "_parse",
      "right" : "_parse",
      "info" : "SimpleName[4972-4978]:SimpleName[5022-5028]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[4979-4989]:SingleVariableDeclaration[5029-5039]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[4991-5018]:SingleVariableDeclaration[5041-5068]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[5027-5036]:SimpleType[5077-5086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5041-8551]:Block[5091-8601]"
    }, {
      "left" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
      "right" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IOException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            java.util.Date date = ctxt.parseDate(key);\n            return (date == null)  ? null : ctxt.constructCalendar(date);\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
      "info" : "SwitchStatement[5051-8545]:SwitchStatement[5101-8595]"
    }, {
      "left" : "case TYPE_BOOLEAN:",
      "right" : "case TYPE_BOOLEAN:",
      "info" : "SwitchCase[5076-5094]:SwitchCase[5126-5144]"
    }, {
      "left" : "if (\"true\".equals(key))",
      "right" : "if (\"true\".equals(key))",
      "info" : "IfStatement[5107-5183]:IfStatement[5157-5233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5131-5183]:Block[5181-5233]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[5149-5169]:ReturnStatement[5199-5219]"
    }, {
      "left" : "if (\"false\".equals(key))",
      "right" : "if (\"false\".equals(key))",
      "info" : "IfStatement[5196-5274]:IfStatement[5246-5324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5221-5274]:Block[5271-5324]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[5239-5260]:ReturnStatement[5289-5310]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
      "info" : "ReturnStatement[5287-5361]:ReturnStatement[5337-5411]"
    }, {
      "left" : "case TYPE_BYTE:",
      "right" : "case TYPE_BYTE:",
      "info" : "SwitchCase[5370-5385]:SwitchCase[5420-5435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5398-5789]:Block[5448-5839]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5416-5443]:VariableDeclarationStatement[5466-5493]"
    }, {
      "left" : "if (value < Byte.MIN_VALUE || value > 255)",
      "right" : "if (value < Byte.MIN_VALUE || value > 255)",
      "info" : "IfStatement[5541-5724]:IfStatement[5591-5774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5584-5724]:Block[5634-5774]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");",
      "info" : "ReturnStatement[5606-5706]:ReturnStatement[5656-5756]"
    }, {
      "left" : "return Byte.valueOf((byte) value);",
      "right" : "return Byte.valueOf((byte) value);",
      "info" : "ReturnStatement[5741-5775]:ReturnStatement[5791-5825]"
    }, {
      "left" : "case TYPE_SHORT:",
      "right" : "case TYPE_SHORT:",
      "info" : "SwitchCase[5798-5814]:SwitchCase[5848-5864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5827-6213]:Block[5877-6263]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5845-5872]:VariableDeclarationStatement[5895-5922]"
    }, {
      "left" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "right" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "info" : "IfStatement[5889-6146]:IfStatement[5939-6196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5945-6146]:Block[5995-6196]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value can not be represented as 16-bit value\");",
      "info" : "ReturnStatement[5967-6068]:ReturnStatement[6017-6118]"
    }, {
      "left" : "return Short.valueOf((short) value);",
      "right" : "return Short.valueOf((short) value);",
      "info" : "ReturnStatement[6163-6199]:ReturnStatement[6213-6249]"
    }, {
      "left" : "case TYPE_CHAR:",
      "right" : "case TYPE_CHAR:",
      "info" : "SwitchCase[6222-6237]:SwitchCase[6272-6287]"
    }, {
      "left" : "if (key.length() == 1)",
      "right" : "if (key.length() == 1)",
      "info" : "IfStatement[6250-6345]:IfStatement[6300-6395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6273-6345]:Block[6323-6395]"
    }, {
      "left" : "return Character.valueOf(key.charAt(0));",
      "right" : "return Character.valueOf(key.charAt(0));",
      "info" : "ReturnStatement[6291-6331]:ReturnStatement[6341-6381]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
      "info" : "ReturnStatement[6358-6441]:ReturnStatement[6408-6491]"
    }, {
      "left" : "case TYPE_INT:",
      "right" : "case TYPE_INT:",
      "info" : "SwitchCase[6450-6464]:SwitchCase[6500-6514]"
    }, {
      "left" : "return _parseInt(key);",
      "right" : "return _parseInt(key);",
      "info" : "ReturnStatement[6477-6499]:ReturnStatement[6527-6549]"
    }, {
      "left" : "case TYPE_LONG:",
      "right" : "case TYPE_LONG:",
      "info" : "SwitchCase[6509-6524]:SwitchCase[6559-6574]"
    }, {
      "left" : "return _parseLong(key);",
      "right" : "return _parseLong(key);",
      "info" : "ReturnStatement[6537-6560]:ReturnStatement[6587-6610]"
    }, {
      "left" : "case TYPE_FLOAT:",
      "right" : "case TYPE_FLOAT:",
      "info" : "SwitchCase[6570-6586]:SwitchCase[6620-6636]"
    }, {
      "left" : "return Float.valueOf((float) _parseDouble(key));",
      "right" : "return Float.valueOf((float) _parseDouble(key));",
      "info" : "ReturnStatement[6691-6739]:ReturnStatement[6741-6789]"
    }, {
      "left" : "case TYPE_DOUBLE:",
      "right" : "case TYPE_DOUBLE:",
      "info" : "SwitchCase[6748-6765]:SwitchCase[6798-6815]"
    }, {
      "left" : "return _parseDouble(key);",
      "right" : "return _parseDouble(key);",
      "info" : "ReturnStatement[6778-6803]:ReturnStatement[6828-6853]"
    }, {
      "left" : "case TYPE_LOCALE:",
      "right" : "case TYPE_LOCALE:",
      "info" : "SwitchCase[6812-6829]:SwitchCase[6862-6879]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6842-7047]:TryStatement[6892-7097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6846-6916]:Block[6896-6966]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[6864-6902]:ReturnStatement[6914-6952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6939-7047]:Block[6989-7097]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as locale\");",
      "info" : "ReturnStatement[6957-7033]:ReturnStatement[7007-7083]"
    }, {
      "left" : "case TYPE_CURRENCY:",
      "right" : "case TYPE_CURRENCY:",
      "info" : "SwitchCase[7056-7075]:SwitchCase[7106-7125]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7088-7295]:TryStatement[7138-7345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7092-7162]:Block[7142-7212]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[7110-7148]:ReturnStatement[7160-7198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7185-7295]:Block[7235-7345]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as currency\");",
      "info" : "ReturnStatement[7203-7281]:ReturnStatement[7253-7331]"
    }, {
      "left" : "case TYPE_DATE:",
      "right" : "case TYPE_DATE:",
      "info" : "SwitchCase[7304-7319]:SwitchCase[7354-7369]"
    }, {
      "left" : "return ctxt.parseDate(key);",
      "right" : "return ctxt.parseDate(key);",
      "info" : "ReturnStatement[7332-7359]:ReturnStatement[7382-7409]"
    }, {
      "left" : "case TYPE_CALENDAR:",
      "right" : "case TYPE_CALENDAR:",
      "info" : "SwitchCase[7368-7387]:SwitchCase[7418-7437]"
    }, {
      "left" : "java.util.Date date = ctxt.parseDate(key);",
      "right" : "java.util.Date date = ctxt.parseDate(key);",
      "info" : "VariableDeclarationStatement[7400-7442]:VariableDeclarationStatement[7450-7492]"
    }, {
      "left" : "return (date == null)  ? null : ctxt.constructCalendar(date);",
      "right" : "return (date == null)  ? null : ctxt.constructCalendar(date);",
      "info" : "ReturnStatement[7455-7516]:ReturnStatement[7505-7566]"
    }, {
      "left" : "case TYPE_UUID:",
      "right" : "case TYPE_UUID:",
      "info" : "SwitchCase[7525-7540]:SwitchCase[7575-7590]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7553-7744]:TryStatement[7603-7794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7557-7617]:Block[7607-7667]"
    }, {
      "left" : "return UUID.fromString(key);",
      "right" : "return UUID.fromString(key);",
      "info" : "ReturnStatement[7575-7603]:ReturnStatement[7625-7653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7638-7744]:Block[7688-7794]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "info" : "ReturnStatement[7656-7730]:ReturnStatement[7706-7780]"
    }, {
      "left" : "case TYPE_URI:",
      "right" : "case TYPE_URI:",
      "info" : "SwitchCase[7753-7767]:SwitchCase[7803-7817]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7780-7966]:TryStatement[7830-8016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7784-7839]:Block[7834-7889]"
    }, {
      "left" : "return URI.create(key);",
      "right" : "return URI.create(key);",
      "info" : "ReturnStatement[7802-7825]:ReturnStatement[7852-7875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7860-7966]:Block[7910-8016]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "info" : "ReturnStatement[7878-7952]:ReturnStatement[7928-8002]"
    }, {
      "left" : "case TYPE_URL:",
      "right" : "case TYPE_URL:",
      "info" : "SwitchCase[7975-7989]:SwitchCase[8025-8039]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8002-8197]:TryStatement[8052-8247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8006-8058]:Block[8056-8108]"
    }, {
      "left" : "return new URL(key);",
      "right" : "return new URL(key);",
      "info" : "ReturnStatement[8024-8044]:ReturnStatement[8074-8094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8091-8197]:Block[8141-8247]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage());",
      "info" : "ReturnStatement[8109-8183]:ReturnStatement[8159-8233]"
    }, {
      "left" : "case TYPE_CLASS:",
      "right" : "case TYPE_CLASS:",
      "info" : "SwitchCase[8206-8222]:SwitchCase[8256-8272]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8235-8426]:TryStatement[8285-8476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8239-8298]:Block[8289-8348]"
    }, {
      "left" : "return ctxt.findClass(key);",
      "right" : "return ctxt.findClass(key);",
      "info" : "ReturnStatement[8257-8284]:ReturnStatement[8307-8334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8319-8426]:Block[8369-8476]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
      "info" : "ReturnStatement[8337-8412]:ReturnStatement[8387-8462]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8435-8443]:SwitchCase[8485-8493]"
    }, {
      "left" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
      "right" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
      "info" : "ThrowStatement[8456-8535]:ThrowStatement[8506-8585]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8739-8748]:Modifier[8789-8798]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[8749-8752]:PrimitiveType[8799-8802]"
    }, {
      "left" : "_parseInt",
      "right" : "_parseInt",
      "info" : "SimpleName[8753-8762]:SimpleName[8803-8812]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[8763-8773]:SingleVariableDeclaration[8813-8823]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[8782-8806]:SimpleType[8832-8856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8807-8852]:Block[8857-8902]"
    }, {
      "left" : "return Integer.parseInt(key);",
      "right" : "return Integer.parseInt(key);",
      "info" : "ReturnStatement[8817-8846]:ReturnStatement[8867-8896]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8858-8867]:Modifier[8908-8917]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[8868-8872]:PrimitiveType[8918-8922]"
    }, {
      "left" : "_parseLong",
      "right" : "_parseLong",
      "info" : "SimpleName[8873-8883]:SimpleName[8923-8933]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[8884-8894]:SingleVariableDeclaration[8934-8944]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[8903-8927]:SimpleType[8953-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8928-8971]:Block[8978-9021]"
    }, {
      "left" : "return Long.parseLong(key);",
      "right" : "return Long.parseLong(key);",
      "info" : "ReturnStatement[8938-8965]:ReturnStatement[8988-9015]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8977-8986]:Modifier[9027-9036]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8987-8993]:PrimitiveType[9037-9043]"
    }, {
      "left" : "_parseDouble",
      "right" : "_parseDouble",
      "info" : "SimpleName[8994-9006]:SimpleName[9044-9056]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[9007-9017]:SingleVariableDeclaration[9057-9067]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[9026-9050]:SimpleType[9076-9100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9051-9103]:Block[9101-9153]"
    }, {
      "left" : "return NumberInput.parseDouble(key);",
      "right" : "return NumberInput.parseDouble(key);",
      "info" : "ReturnStatement[9061-9097]:ReturnStatement[9111-9147]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[9312-9327]:MarkerAnnotation[9362-9377]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[9332-9337]:Modifier[9382-9387]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9338-9344]:Modifier[9388-9394]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[9345-9350]:TYPE_DECLARATION_KIND[9395-9400]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "SimpleName[9351-9359]:SimpleName[9401-9409]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleType[9368-9386]:SimpleType[9418-9436]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9619-9626]:Modifier[9669-9676]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "SimpleName[9627-9635]:SimpleName[9677-9685]"
    }, {
      "left" : "Class<?> nominalType",
      "right" : "Class<?> nominalType",
      "info" : "SingleVariableDeclaration[9636-9656]:SingleVariableDeclaration[9686-9706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9658-9685]:Block[9708-9735]"
    }, {
      "left" : "super(-1, nominalType);",
      "right" : "super(-1, nominalType);",
      "info" : "SuperConstructorInvocation[9660-9683]:SuperConstructorInvocation[9710-9733]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9695-9701]:Modifier[9745-9751]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9702-9708]:Modifier[9752-9758]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "SimpleType[9709-9717]:SimpleType[9759-9767]"
    }, {
      "left" : "forType",
      "right" : "forType",
      "info" : "SimpleName[9718-9725]:SimpleName[9768-9775]"
    }, {
      "left" : "Class<?> nominalType",
      "right" : "Class<?> nominalType",
      "info" : "SingleVariableDeclaration[9726-9746]:SingleVariableDeclaration[9776-9796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9756-9999]:Block[9806-10049]"
    }, {
      "left" : "if (nominalType == String.class)",
      "right" : "if (nominalType == String.class)",
      "info" : "IfStatement[9770-9850]:IfStatement[9820-9900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-9850]:Block[9853-9900]"
    }, {
      "left" : "return sString;",
      "right" : "return sString;",
      "info" : "ReturnStatement[9821-9836]:ReturnStatement[9871-9886]"
    }, {
      "left" : "if (nominalType == Object.class)",
      "right" : "if (nominalType == Object.class)",
      "info" : "IfStatement[9863-9943]:IfStatement[9913-9993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9896-9943]:Block[9946-9993]"
    }, {
      "left" : "return sObject;",
      "right" : "return sObject;",
      "info" : "ReturnStatement[9914-9929]:ReturnStatement[9964-9979]"
    }, {
      "left" : "return new StringKD(nominalType);",
      "right" : "return new StringKD(nominalType);",
      "info" : "ReturnStatement[9956-9989]:ReturnStatement[10006-10039]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10009-10018]:MarkerAnnotation[10059-10068]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10027-10033]:Modifier[10077-10083]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[10034-10040]:SimpleType[10084-10090]"
    }, {
      "left" : "deserializeKey",
      "right" : "deserializeKey",
      "info" : "SimpleName[10041-10055]:SimpleName[10091-10105]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[10056-10066]:SingleVariableDeclaration[10106-10116]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[10068-10095]:SingleVariableDeclaration[10118-10145]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10104-10115]:SimpleType[10154-10165]"
    }, {
      "left" : "JsonProcessingException",
      "right" : "JsonProcessingException",
      "info" : "SimpleType[10117-10140]:SimpleType[10167-10190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10141-10176]:Block[10191-10226]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[10155-10166]:ReturnStatement[10205-10216]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10568-10573]:Modifier[10618-10623]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10574-10580]:Modifier[10624-10630]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10581-10586]:TYPE_DECLARATION_KIND[10631-10636]"
    }, {
      "left" : "DelegatingKD",
      "right" : "DelegatingKD",
      "info" : "SimpleName[10587-10599]:SimpleName[10637-10649]"
    }, {
      "left" : "KeyDeserializer",
      "right" : "KeyDeserializer",
      "info" : "SimpleType[10616-10631]:SimpleType[10666-10681]"
    }, {
      "left" : "java.io.Serializable",
      "right" : "java.io.Serializable",
      "info" : "SimpleType[10676-10696]:SimpleType[10726-10746]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10878-10887]:Modifier[10928-10937]"
    }, {
      "left" : "DelegatingKD",
      "right" : "DelegatingKD",
      "info" : "SimpleName[10888-10900]:SimpleName[10938-10950]"
    }, {
      "left" : "Class<?> cls",
      "right" : "Class<?> cls",
      "info" : "SingleVariableDeclaration[10901-10913]:SingleVariableDeclaration[10951-10963]"
    }, {
      "left" : "JsonDeserializer<?> deser",
      "right" : "JsonDeserializer<?> deser",
      "info" : "SingleVariableDeclaration[10915-10940]:SingleVariableDeclaration[10965-10990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10942-11013]:Block[10992-11063]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[10956-10972]:ExpressionStatement[11006-11022]"
    }, {
      "left" : "_delegate = deser;",
      "right" : "_delegate = deser;",
      "info" : "ExpressionStatement[10985-11003]:ExpressionStatement[11035-11053]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11023-11032]:MarkerAnnotation[11073-11082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11041-11047]:Modifier[11091-11097]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11048-11053]:Modifier[11098-11103]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[11054-11060]:SimpleType[11104-11110]"
    }, {
      "left" : "deserializeKey",
      "right" : "deserializeKey",
      "info" : "SimpleName[11061-11075]:SimpleName[11111-11125]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11076-11086]:SingleVariableDeclaration[11126-11136]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[11088-11115]:SingleVariableDeclaration[11138-11165]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11136-11147]:SimpleType[11186-11197]"
    }, {
      "left" : "JsonProcessingException",
      "right" : "JsonProcessingException",
      "info" : "SimpleType[11149-11172]:SimpleType[11199-11222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11181-11830]:Block[11231-11880]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[11195-11284]:IfStatement[11245-11334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11212-11284]:Block[11262-11334]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11258-11270]:ReturnStatement[11308-11320]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11297-11820]:TryStatement[11347-11870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11301-11672]:Block[11351-11722]"
    }, {
      "left" : "Object result = _delegate.deserialize(ctxt.getParser(), ctxt);",
      "right" : "Object result = _delegate.deserialize(ctxt.getParser(), ctxt);",
      "info" : "VariableDeclarationStatement[11415-11477]:VariableDeclarationStatement[11465-11527]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[11494-11568]:IfStatement[11544-11618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11514-11568]:Block[11564-11618]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11536-11550]:ReturnStatement[11586-11600]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "info" : "ReturnStatement[11585-11658]:ReturnStatement[11635-11708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11694-11820]:Block[11744-11870]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());",
      "info" : "ReturnStatement[11712-11806]:ReturnStatement[11762-11856]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11840-11846]:Modifier[11890-11896]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[11847-11855]:ParameterizedType[11897-11905]"
    }, {
      "left" : "getKeyClass",
      "right" : "getKeyClass",
      "info" : "SimpleName[11856-11867]:SimpleName[11906-11917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11870-11891]:Block[11920-11941]"
    }, {
      "left" : "return _keyClass;",
      "right" : "return _keyClass;",
      "info" : "ReturnStatement[11872-11889]:ReturnStatement[11922-11939]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[11908-11923]:MarkerAnnotation[11958-11973]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11928-11933]:Modifier[11978-11983]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11934-11940]:Modifier[11984-11990]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11941-11946]:TYPE_DECLARATION_KIND[11991-11996]"
    }, {
      "left" : "EnumKD",
      "right" : "EnumKD",
      "info" : "SimpleName[11947-11953]:SimpleName[11997-12003]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleType[11962-11980]:SimpleType[12012-12030]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[12396-12405]:Modifier[12446-12455]"
    }, {
      "left" : "EnumKD",
      "right" : "EnumKD",
      "info" : "SimpleName[12406-12412]:SimpleName[12456-12462]"
    }, {
      "left" : "EnumResolver er",
      "right" : "EnumResolver er",
      "info" : "SingleVariableDeclaration[12413-12428]:SingleVariableDeclaration[12463-12478]"
    }, {
      "left" : "AnnotatedMethod factory",
      "right" : "AnnotatedMethod factory",
      "info" : "SingleVariableDeclaration[12430-12453]:SingleVariableDeclaration[12480-12503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12455-12574]:Block[12505-12624]"
    }, {
      "left" : "super(-1, er.getEnumClass());",
      "right" : "super(-1, er.getEnumClass());",
      "info" : "SuperConstructorInvocation[12469-12498]:SuperConstructorInvocation[12519-12548]"
    }, {
      "left" : "_byNameResolver = er;",
      "right" : "_byNameResolver = er;",
      "info" : "ExpressionStatement[12511-12532]:ExpressionStatement[12561-12582]"
    }, {
      "left" : "_factory = factory;",
      "right" : "_factory = factory;",
      "info" : "ExpressionStatement[12545-12564]:ExpressionStatement[12595-12614]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12584-12593]:MarkerAnnotation[12634-12643]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12602-12608]:Modifier[12652-12658]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[12609-12615]:SimpleType[12659-12665]"
    }, {
      "left" : "_parse",
      "right" : "_parse",
      "info" : "SimpleName[12616-12622]:SimpleName[12666-12672]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[12623-12633]:SingleVariableDeclaration[12673-12683]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[12635-12662]:SingleVariableDeclaration[12685-12712]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12671-12682]:SimpleType[12721-12732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12691-13530]:Block[12741-13580]"
    }, {
      "left" : "if (_factory != null)",
      "right" : "if (_factory != null)",
      "info" : "IfStatement[12705-12924]:IfStatement[12755-12974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12727-12924]:Block[12777-12974]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12745-12910]:TryStatement[12795-12960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12749-12816]:Block[12799-12866]"
    }, {
      "left" : "return _factory.call1(key);",
      "right" : "return _factory.call1(key);",
      "info" : "ReturnStatement[12771-12798]:ReturnStatement[12821-12848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12837-12910]:Block[12887-12960]"
    }, {
      "left" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "right" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "info" : "ExpressionStatement[12859-12892]:ExpressionStatement[12909-12942]"
    }, {
      "left" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
      "right" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
      "info" : "VariableDeclarationStatement[12937-13089]:VariableDeclarationStatement[12987-13139]"
    }, {
      "left" : "Enum<?> e = res.findEnum(key);",
      "right" : "Enum<?> e = res.findEnum(key);",
      "info" : "VariableDeclarationStatement[13102-13132]:VariableDeclarationStatement[13152-13182]"
    }, {
      "left" : "if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if ((e == null) && !ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[13145-13498]:IfStatement[13195-13548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13250-13498]:Block[13300-13548]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
      "info" : "ReturnStatement[13268-13402]:ReturnStatement[13318-13452]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[13511-13520]:ReturnStatement[13561-13570]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13540-13547]:Modifier[13590-13597]"
    }, {
      "left" : "EnumResolver",
      "right" : "EnumResolver",
      "info" : "SimpleType[13548-13560]:SimpleType[13598-13610]"
    }, {
      "left" : "_getToStringResolver",
      "right" : "_getToStringResolver",
      "info" : "SimpleName[13561-13581]:SimpleName[13611-13631]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[13582-13609]:SingleVariableDeclaration[13632-13659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13619-13970]:Block[13669-14020]"
    }, {
      "left" : "EnumResolver res = _byToStringResolver;",
      "right" : "EnumResolver res = _byToStringResolver;",
      "info" : "VariableDeclarationStatement[13633-13672]:VariableDeclarationStatement[13683-13722]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[13685-13936]:IfStatement[13735-13986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13702-13936]:Block[13752-13986]"
    }, {
      "left" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
      "right" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
      "info" : "SynchronizedStatement[13720-13922]:SynchronizedStatement[13770-13972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13740-13922]:Block[13790-13972]"
    }, {
      "left" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
      "right" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
      "info" : "ExpressionStatement[13762-13904]:ExpressionStatement[13812-13954]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[13949-13960]:ReturnStatement[13999-14010]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14109-14114]:Modifier[14159-14164]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14115-14121]:Modifier[14165-14171]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14122-14127]:TYPE_DECLARATION_KIND[14172-14177]"
    }, {
      "left" : "StringCtorKeyDeserializer",
      "right" : "StringCtorKeyDeserializer",
      "info" : "SimpleName[14128-14153]:SimpleName[14178-14203]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleType[14162-14180]:SimpleType[14212-14230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14300-14306]:Modifier[14350-14356]"
    }, {
      "left" : "StringCtorKeyDeserializer",
      "right" : "StringCtorKeyDeserializer",
      "info" : "SimpleName[14307-14332]:SimpleName[14357-14382]"
    }, {
      "left" : "Constructor<?> ctor",
      "right" : "Constructor<?> ctor",
      "info" : "SingleVariableDeclaration[14333-14352]:SingleVariableDeclaration[14383-14402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14354-14440]:Block[14404-14490]"
    }, {
      "left" : "super(-1, ctor.getDeclaringClass());",
      "right" : "super(-1, ctor.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[14368-14404]:SuperConstructorInvocation[14418-14454]"
    }, {
      "left" : "_ctor = ctor;",
      "right" : "_ctor = ctor;",
      "info" : "ExpressionStatement[14417-14430]:ExpressionStatement[14467-14480]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14450-14459]:MarkerAnnotation[14500-14509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14468-14474]:Modifier[14518-14524]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[14475-14481]:SimpleType[14525-14531]"
    }, {
      "left" : "_parse",
      "right" : "_parse",
      "info" : "SimpleName[14482-14488]:SimpleName[14532-14538]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[14489-14499]:SingleVariableDeclaration[14539-14549]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[14501-14528]:SingleVariableDeclaration[14551-14578]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14537-14546]:SimpleType[14587-14596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14555-14609]:Block[14605-14659]"
    }, {
      "left" : "return _ctor.newInstance(key);",
      "right" : "return _ctor.newInstance(key);",
      "info" : "ReturnStatement[14569-14599]:ReturnStatement[14619-14649]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[14744-14749]:Modifier[14794-14799]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14750-14756]:Modifier[14800-14806]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14757-14762]:TYPE_DECLARATION_KIND[14807-14812]"
    }, {
      "left" : "StringFactoryKeyDeserializer",
      "right" : "StringFactoryKeyDeserializer",
      "info" : "SimpleName[14763-14791]:SimpleName[14813-14841]"
    }, {
      "left" : "StdKeyDeserializer",
      "right" : "StdKeyDeserializer",
      "info" : "SimpleType[14800-14818]:SimpleType[14850-14868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14929-14935]:Modifier[14979-14985]"
    }, {
      "left" : "StringFactoryKeyDeserializer",
      "right" : "StringFactoryKeyDeserializer",
      "info" : "SimpleName[14936-14964]:SimpleName[14986-15014]"
    }, {
      "left" : "Method fm",
      "right" : "Method fm",
      "info" : "SingleVariableDeclaration[14965-14974]:SingleVariableDeclaration[15015-15024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14976-15067]:Block[15026-15117]"
    }, {
      "left" : "super(-1, fm.getDeclaringClass());",
      "right" : "super(-1, fm.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[14990-15024]:SuperConstructorInvocation[15040-15074]"
    }, {
      "left" : "_factoryMethod = fm;",
      "right" : "_factoryMethod = fm;",
      "info" : "ExpressionStatement[15037-15057]:ExpressionStatement[15087-15107]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15077-15086]:MarkerAnnotation[15127-15136]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15095-15101]:Modifier[15145-15151]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[15102-15108]:SimpleType[15152-15158]"
    }, {
      "left" : "_parse",
      "right" : "_parse",
      "info" : "SimpleName[15109-15115]:SimpleName[15159-15165]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[15116-15126]:SingleVariableDeclaration[15166-15176]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[15128-15155]:SingleVariableDeclaration[15178-15205]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[15164-15173]:SimpleType[15214-15223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15182-15246]:Block[15232-15296]"
    }, {
      "left" : "return _factoryMethod.invoke(null, key);",
      "right" : "return _factoryMethod.invoke(null, key);",
      "info" : "ReturnStatement[15196-15236]:ReturnStatement[15246-15286]"
    } ]
  },
  "interFileMappings" : { }
}