{
  "matchedElements" : [
 {
    "left" : "class : CMAESOptimizer",
    "right" : "class : CMAESOptimizer",
    "info" : "TypeDeclaration[2177-55009]:TypeDeclaration[2177-55101]"
  }, {
    "left" : "DEFAULT_CHECKFEASABLECOUNT",
    "right" : "DEFAULT_CHECKFEASABLECOUNT",
    "info" : "FieldDeclaration[4809-4932]:FieldDeclaration[4809-4932]"
  }, {
    "left" : "DEFAULT_STOPFITNESS",
    "right" : "DEFAULT_STOPFITNESS",
    "info" : "FieldDeclaration[4937-5049]:FieldDeclaration[4937-5049]"
  }, {
    "left" : "DEFAULT_ISACTIVECMA",
    "right" : "DEFAULT_ISACTIVECMA",
    "info" : "FieldDeclaration[5054-5170]:FieldDeclaration[5054-5170]"
  }, {
    "left" : "DEFAULT_MAXITERATIONS",
    "right" : "DEFAULT_MAXITERATIONS",
    "info" : "FieldDeclaration[5175-5292]:FieldDeclaration[5175-5292]"
  }, {
    "left" : "DEFAULT_DIAGONALONLY",
    "right" : "DEFAULT_DIAGONALONLY",
    "info" : "FieldDeclaration[5297-5408]:FieldDeclaration[5297-5408]"
  }, {
    "left" : "DEFAULT_RANDOMGENERATOR",
    "right" : "DEFAULT_RANDOMGENERATOR",
    "info" : "FieldDeclaration[5413-5543]:FieldDeclaration[5413-5543]"
  }, {
    "left" : "lambda",
    "right" : "lambda",
    "info" : "FieldDeclaration[5581-6008]:FieldDeclaration[5581-6008]"
  }, {
    "left" : "isActiveCMA",
    "right" : "isActiveCMA",
    "info" : "FieldDeclaration[6032-6411]:FieldDeclaration[6032-6411]"
  }, {
    "left" : "checkFeasableCount",
    "right" : "checkFeasableCount",
    "info" : "FieldDeclaration[6416-6648]:FieldDeclaration[6416-6648]"
  }, {
    "left" : "boundaries",
    "right" : "boundaries",
    "info" : "FieldDeclaration[6653-6808]:FieldDeclaration[6653-6808]"
  }, {
    "left" : "inputSigma",
    "right" : "inputSigma",
    "info" : "FieldDeclaration[6813-7082]:FieldDeclaration[6813-7082]"
  }, {
    "left" : "dimension",
    "right" : "dimension",
    "info" : "FieldDeclaration[7087-7168]:FieldDeclaration[7087-7168]"
  }, {
    "left" : "diagonalOnly",
    "right" : "diagonalOnly",
    "info" : "FieldDeclaration[7173-7683]:FieldDeclaration[7173-7683]"
  }, {
    "left" : "isMinimize",
    "right" : "isMinimize",
    "info" : "FieldDeclaration[7688-7781]:FieldDeclaration[7688-7781]"
  }, {
    "left" : "generateStatistics",
    "right" : "generateStatistics",
    "info" : "FieldDeclaration[7786-7887]:FieldDeclaration[7786-7887]"
  }, {
    "left" : "maxIterations",
    "right" : "maxIterations",
    "info" : "FieldDeclaration[7921-7996]:FieldDeclaration[7921-7996]"
  }, {
    "left" : "stopFitness",
    "right" : "stopFitness",
    "info" : "FieldDeclaration[8001-8064]:FieldDeclaration[8001-8064]"
  }, {
    "left" : "stopTolUpX",
    "right" : "stopTolUpX",
    "info" : "FieldDeclaration[8069-8143]:FieldDeclaration[8069-8143]"
  }, {
    "left" : "stopTolX",
    "right" : "stopTolX",
    "info" : "FieldDeclaration[8148-8218]:FieldDeclaration[8148-8218]"
  }, {
    "left" : "stopTolFun",
    "right" : "stopTolFun",
    "info" : "FieldDeclaration[8223-8300]:FieldDeclaration[8223-8300]"
  }, {
    "left" : "stopTolHistFun",
    "right" : "stopTolHistFun",
    "info" : "FieldDeclaration[8305-8395]:FieldDeclaration[8305-8395]"
  }, {
    "left" : "mu",
    "right" : "mu",
    "info" : "FieldDeclaration[8438-8508]:FieldDeclaration[8438-8508]"
  }, {
    "left" : "logMu2",
    "right" : "logMu2",
    "info" : "FieldDeclaration[8516-8587]:FieldDeclaration[8516-8587]"
  }, {
    "left" : "weights",
    "right" : "weights",
    "info" : "FieldDeclaration[8592-8664]:FieldDeclaration[8592-8664]"
  }, {
    "left" : "mueff",
    "right" : "mueff",
    "info" : "FieldDeclaration[8669-8740]:FieldDeclaration[8669-8740]"
  }, {
    "left" : "sigma",
    "right" : "sigma",
    "info" : "FieldDeclaration[8798-8874]:FieldDeclaration[8798-8874]"
  }, {
    "left" : "cc",
    "right" : "cc",
    "info" : "FieldDeclaration[8879-8929]:FieldDeclaration[8879-8929]"
  }, {
    "left" : "cs",
    "right" : "cs",
    "info" : "FieldDeclaration[8934-8998]:FieldDeclaration[8934-8998]"
  }, {
    "left" : "damps",
    "right" : "damps",
    "info" : "FieldDeclaration[9003-9058]:FieldDeclaration[9003-9058]"
  }, {
    "left" : "ccov1",
    "right" : "ccov1",
    "info" : "FieldDeclaration[9063-9130]:FieldDeclaration[9063-9130]"
  }, {
    "left" : "ccovmu",
    "right" : "ccovmu",
    "info" : "FieldDeclaration[9135-9202]:FieldDeclaration[9135-9202]"
  }, {
    "left" : "chiN",
    "right" : "chiN",
    "info" : "FieldDeclaration[9207-9285]:FieldDeclaration[9207-9285]"
  }, {
    "left" : "ccov1Sep",
    "right" : "ccov1Sep",
    "info" : "FieldDeclaration[9290-9374]:FieldDeclaration[9290-9374]"
  }, {
    "left" : "ccovmuSep",
    "right" : "ccovmuSep",
    "info" : "FieldDeclaration[9379-9463]:FieldDeclaration[9379-9463]"
  }, {
    "left" : "xmean",
    "right" : "xmean",
    "info" : "FieldDeclaration[9522-9579]:FieldDeclaration[9522-9579]"
  }, {
    "left" : "pc",
    "right" : "pc",
    "info" : "FieldDeclaration[9584-9633]:FieldDeclaration[9584-9633]"
  }, {
    "left" : "ps",
    "right" : "ps",
    "info" : "FieldDeclaration[9638-9697]:FieldDeclaration[9638-9697]"
  }, {
    "left" : "normps",
    "right" : "normps",
    "info" : "FieldDeclaration[9702-9770]:FieldDeclaration[9702-9770]"
  }, {
    "left" : "B",
    "right" : "B",
    "info" : "FieldDeclaration[9775-9826]:FieldDeclaration[9775-9826]"
  }, {
    "left" : "D",
    "right" : "D",
    "info" : "FieldDeclaration[9831-9872]:FieldDeclaration[9831-9872]"
  }, {
    "left" : "BD",
    "right" : "BD",
    "info" : "FieldDeclaration[9877-9938]:FieldDeclaration[9877-9938]"
  }, {
    "left" : "diagD",
    "right" : "diagD",
    "info" : "FieldDeclaration[9943-10023]:FieldDeclaration[9943-10023]"
  }, {
    "left" : "C",
    "right" : "C",
    "info" : "FieldDeclaration[10028-10079]:FieldDeclaration[10028-10079]"
  }, {
    "left" : "diagC",
    "right" : "diagC",
    "info" : "FieldDeclaration[10084-10158]:FieldDeclaration[10084-10158]"
  }, {
    "left" : "iterations",
    "right" : "iterations",
    "info" : "FieldDeclaration[10163-10237]:FieldDeclaration[10163-10237]"
  }, {
    "left" : "fitnessHistory",
    "right" : "fitnessHistory",
    "info" : "FieldDeclaration[10243-10316]:FieldDeclaration[10243-10316]"
  }, {
    "left" : "historySize",
    "right" : "historySize",
    "info" : "FieldDeclaration[10321-10394]:FieldDeclaration[10321-10394]"
  }, {
    "left" : "random",
    "right" : "random",
    "info" : "FieldDeclaration[10400-10460]:FieldDeclaration[10400-10460]"
  }, {
    "left" : "statisticsSigmaHistory",
    "right" : "statisticsSigmaHistory",
    "info" : "FieldDeclaration[10466-10572]:FieldDeclaration[10466-10572]"
  }, {
    "left" : "statisticsMeanHistory",
    "right" : "statisticsMeanHistory",
    "info" : "FieldDeclaration[10577-10689]:FieldDeclaration[10577-10689]"
  }, {
    "left" : "statisticsFitnessHistory",
    "right" : "statisticsFitnessHistory",
    "info" : "FieldDeclaration[10694-10804]:FieldDeclaration[10694-10804]"
  }, {
    "left" : "statisticsDHistory",
    "right" : "statisticsDHistory",
    "info" : "FieldDeclaration[10809-10915]:FieldDeclaration[10809-10915]"
  }, {
    "left" : "public CMAESOptimizer()",
    "right" : "public CMAESOptimizer()",
    "info" : "MethodDeclaration[10921-11037]:MethodDeclaration[10921-11037]"
  }, {
    "left" : "public CMAESOptimizer(lambda int)",
    "right" : "public CMAESOptimizer(lambda int)",
    "info" : "MethodDeclaration[11043-11339]:MethodDeclaration[11043-11339]"
  }, {
    "left" : "public CMAESOptimizer(lambda int, inputSigma )",
    "right" : "public CMAESOptimizer(lambda int, inputSigma )",
    "info" : "MethodDeclaration[11345-11756]:MethodDeclaration[11345-11756]"
  }, {
    "left" : "public CMAESOptimizer(lambda int, inputSigma , maxIterations int, stopFitness double, isActiveCMA boolean, diagonalOnly int, checkFeasableCount int, random , generateStatistics boolean)",
    "right" : "public CMAESOptimizer(lambda int, inputSigma , maxIterations int, stopFitness double, isActiveCMA boolean, diagonalOnly int, checkFeasableCount int, random , generateStatistics boolean)",
    "info" : "MethodDeclaration[11762-13074]:MethodDeclaration[11762-13074]"
  }, {
    "left" : "public CMAESOptimizer(lambda int, inputSigma , maxIterations int, stopFitness double, isActiveCMA boolean, diagonalOnly int, checkFeasableCount int, random , generateStatistics boolean, checker )",
    "right" : "public CMAESOptimizer(lambda int, inputSigma , maxIterations int, stopFitness double, isActiveCMA boolean, diagonalOnly int, checkFeasableCount int, random , generateStatistics boolean, checker )",
    "info" : "MethodDeclaration[13080-14672]:MethodDeclaration[13080-14672]"
  }, {
    "left" : "public getStatisticsSigmaHistory() : ",
    "right" : "public getStatisticsSigmaHistory() : ",
    "info" : "MethodDeclaration[14678-14828]:MethodDeclaration[14678-14828]"
  }, {
    "left" : "public getStatisticsMeanHistory() : ",
    "right" : "public getStatisticsMeanHistory() : ",
    "info" : "MethodDeclaration[14834-14985]:MethodDeclaration[14834-14985]"
  }, {
    "left" : "public getStatisticsFitnessHistory() : ",
    "right" : "public getStatisticsFitnessHistory() : ",
    "info" : "MethodDeclaration[14991-15147]:MethodDeclaration[14991-15147]"
  }, {
    "left" : "public getStatisticsDHistory() : ",
    "right" : "public getStatisticsDHistory() : ",
    "info" : "MethodDeclaration[15153-15295]:MethodDeclaration[15153-15295]"
  }, {
    "left" : "protected doOptimize() : ",
    "right" : "protected doOptimize() : ",
    "info" : "MethodDeclaration[15301-22695]:MethodDeclaration[15301-22695]"
  }, {
    "left" : "private checkParameters() : void",
    "right" : "private checkParameters() : void",
    "info" : "MethodDeclaration[22701-25761]:MethodDeclaration[22701-25761]"
  }, {
    "left" : "private initializeCMA(guess ) : void",
    "right" : "private initializeCMA(guess ) : void",
    "info" : "MethodDeclaration[25767-29244]:MethodDeclaration[25767-29244]"
  }, {
    "left" : "private updateEvolutionPaths(zmean , xold ) : boolean",
    "right" : "private updateEvolutionPaths(zmean , xold ) : boolean",
    "info" : "MethodDeclaration[29250-30191]:MethodDeclaration[29250-30191]"
  }, {
    "left" : "private updateCovarianceDiagonalOnly(hsig boolean, bestArz , xold ) : void",
    "right" : "private updateCovarianceDiagonalOnly(hsig boolean, bestArz , xold ) : void",
    "info" : "MethodDeclaration[30197-31486]:MethodDeclaration[30197-31486]"
  }, {
    "left" : "private updateCovariance(hsig boolean, bestArx , arz , arindex , xold ) : void",
    "right" : "private updateCovariance(hsig boolean, bestArx , arz , arindex , xold ) : void",
    "info" : "MethodDeclaration[31492-35635]:MethodDeclaration[31492-35635]"
  }, {
    "left" : "private updateBD(negccov double) : void",
    "right" : "private updateBD(negccov double) : void",
    "info" : "MethodDeclaration[35641-37180]:MethodDeclaration[35641-37180]"
  }, {
    "left" : "private push(vals , val double) : void",
    "right" : "private push(vals , val double) : void",
    "info" : "MethodDeclaration[37186-37529]:MethodDeclaration[37186-37529]"
  }, {
    "left" : "private sortedIndices(doubles ...) : ",
    "right" : "private sortedIndices(doubles ...) : ",
    "info" : "MethodDeclaration[37535-38136]:MethodDeclaration[37535-38136]"
  }, {
    "left" : "class : DoubleIndex",
    "right" : "class : DoubleIndex",
    "info" : "TypeDeclaration[38142-39399]:TypeDeclaration[38142-39399]"
  }, {
    "left" : "value",
    "right" : "value",
    "info" : "FieldDeclaration[38325-38379]:FieldDeclaration[38325-38379]"
  }, {
    "left" : "index",
    "right" : "index",
    "info" : "FieldDeclaration[38388-38446]:FieldDeclaration[38388-38446]"
  }, {
    "left" : "package DoubleIndex(value double, index int)",
    "right" : "package DoubleIndex(value double, index int)",
    "info" : "MethodDeclaration[38456-38683]:MethodDeclaration[38456-38683]"
  }, {
    "left" : "public compareTo(o ) : int",
    "right" : "public compareTo(o ) : int",
    "info" : "MethodDeclaration[38693-38820]:MethodDeclaration[38693-38820]"
  }, {
    "left" : "public equals(other ) : boolean",
    "right" : "public equals(other ) : boolean",
    "info" : "MethodDeclaration[38830-39172]:MethodDeclaration[38830-39172]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[39182-39392]:MethodDeclaration[39182-39392]"
  }, {
    "left" : "class : FitnessFunction",
    "right" : "class : FitnessFunction",
    "info" : "TypeDeclaration[39405-44001]:TypeDeclaration[39405-44093]"
  }, {
    "left" : "valueRange",
    "right" : "valueRange",
    "info" : "FieldDeclaration[39633-39721]:FieldDeclaration[39633-39721]"
  }, {
    "left" : "isRepairMode",
    "right" : "isRepairMode",
    "info" : "FieldDeclaration[39730-39893]:FieldDeclaration[39730-39893]"
  }, {
    "left" : "public FitnessFunction()",
    "right" : "public FitnessFunction()",
    "info" : "MethodDeclaration[39903-40046]:MethodDeclaration[39903-40046]"
  }, {
    "left" : "public encode(x ) : ",
    "right" : "public encode(x ) : ",
    "info" : "MethodDeclaration[40056-40577]:MethodDeclaration[40056-40556]"
  }, {
    "left" : "public repairAndDecode(x ) : ",
    "right" : "public repairAndDecode(x ) : ",
    "info" : "MethodDeclaration[40587-40915]:MethodDeclaration[40566-40894]"
  }, {
    "left" : "public decode(x ) : ",
    "right" : "public decode(x ) : ",
    "info" : "MethodDeclaration[40925-41444]:MethodDeclaration[40904-41404]"
  }, {
    "left" : "public value(point ) : double",
    "right" : "public value(point ) : double",
    "info" : "MethodDeclaration[41454-42139]:MethodDeclaration[41414-42099]"
  }, {
    "left" : "public isFeasible(x ) : boolean",
    "right" : "public isFeasible(x ) : boolean",
    "info" : "MethodDeclaration[42149-42667]:MethodDeclaration[42109-42759]"
  }, {
    "left" : "public setValueRange(valueRange double) : void",
    "right" : "public setValueRange(valueRange double) : void",
    "info" : "MethodDeclaration[42677-42861]:MethodDeclaration[42769-42953]"
  }, {
    "left" : "private repair(x ) : ",
    "right" : "private repair(x ) : ",
    "info" : "MethodDeclaration[42871-43447]:MethodDeclaration[42963-43539]"
  }, {
    "left" : "private penalty(x , repaired ) : double",
    "right" : "private penalty(x , repaired ) : double",
    "info" : "MethodDeclaration[43457-43995]:MethodDeclaration[43549-44087]"
  }, {
    "left" : "private log(m ) : ",
    "right" : "private log(m ) : ",
    "info" : "MethodDeclaration[44092-44590]:MethodDeclaration[44184-44682]"
  }, {
    "left" : "private sqrt(m ) : ",
    "right" : "private sqrt(m ) : ",
    "info" : "MethodDeclaration[44596-45116]:MethodDeclaration[44688-45208]"
  }, {
    "left" : "private square(m ) : ",
    "right" : "private square(m ) : ",
    "info" : "MethodDeclaration[45122-45649]:MethodDeclaration[45214-45741]"
  }, {
    "left" : "private times(m , n ) : ",
    "right" : "private times(m , n ) : ",
    "info" : "MethodDeclaration[45655-46236]:MethodDeclaration[45747-46328]"
  }, {
    "left" : "private divide(m , n ) : ",
    "right" : "private divide(m , n ) : ",
    "info" : "MethodDeclaration[46242-46817]:MethodDeclaration[46334-46909]"
  }, {
    "left" : "private selectColumns(m , cols ...) : ",
    "right" : "private selectColumns(m , cols ...) : ",
    "info" : "MethodDeclaration[46823-47351]:MethodDeclaration[46915-47443]"
  }, {
    "left" : "private triu(m , k int) : ",
    "right" : "private triu(m , k int) : ",
    "info" : "MethodDeclaration[47357-47886]:MethodDeclaration[47449-47978]"
  }, {
    "left" : "private sumRows(m ) : ",
    "right" : "private sumRows(m ) : ",
    "info" : "MethodDeclaration[47892-48412]:MethodDeclaration[47984-48504]"
  }, {
    "left" : "private diag(m ) : ",
    "right" : "private diag(m ) : ",
    "info" : "MethodDeclaration[48418-49230]:MethodDeclaration[48510-49322]"
  }, {
    "left" : "private copyColumn(m1 , col1 int, m2 , col2 int) : void",
    "right" : "private copyColumn(m1 , col1 int, m2 , col2 int) : void",
    "info" : "MethodDeclaration[49236-49648]:MethodDeclaration[49328-49740]"
  }, {
    "left" : "private ones(n int, m int) : ",
    "right" : "private ones(n int, m int) : ",
    "info" : "MethodDeclaration[49654-50009]:MethodDeclaration[49746-50101]"
  }, {
    "left" : "private eye(n int, m int) : ",
    "right" : "private eye(n int, m int) : ",
    "info" : "MethodDeclaration[50015-50426]:MethodDeclaration[50107-50518]"
  }, {
    "left" : "private zeros(n int, m int) : ",
    "right" : "private zeros(n int, m int) : ",
    "info" : "MethodDeclaration[50432-50659]:MethodDeclaration[50524-50751]"
  }, {
    "left" : "private repmat(mat , n int, m int) : ",
    "right" : "private repmat(mat , n int, m int) : ",
    "info" : "MethodDeclaration[50665-51309]:MethodDeclaration[50757-51401]"
  }, {
    "left" : "private sequence(start double, end double, step double) : ",
    "right" : "private sequence(start double, end double, step double) : ",
    "info" : "MethodDeclaration[51315-51833]:MethodDeclaration[51407-51925]"
  }, {
    "left" : "private max(m ) : double",
    "right" : "private max(m ) : double",
    "info" : "MethodDeclaration[51839-52321]:MethodDeclaration[51931-52413]"
  }, {
    "left" : "private min(m ) : double",
    "right" : "private min(m ) : double",
    "info" : "MethodDeclaration[52327-52808]:MethodDeclaration[52419-52900]"
  }, {
    "left" : "private max(m ) : double",
    "right" : "private max(m ) : double",
    "info" : "MethodDeclaration[52814-53145]:MethodDeclaration[52906-53237]"
  }, {
    "left" : "private min(m ) : double",
    "right" : "private min(m ) : double",
    "info" : "MethodDeclaration[53151-53481]:MethodDeclaration[53243-53573]"
  }, {
    "left" : "private inverse(indices ...) : ",
    "right" : "private inverse(indices ...) : ",
    "info" : "MethodDeclaration[53487-53834]:MethodDeclaration[53579-53926]"
  }, {
    "left" : "private reverse(indices ...) : ",
    "right" : "private reverse(indices ...) : ",
    "info" : "MethodDeclaration[53840-54207]:MethodDeclaration[53932-54299]"
  }, {
    "left" : "private randn(size int) : ",
    "right" : "private randn(size int) : ",
    "info" : "MethodDeclaration[54213-54526]:MethodDeclaration[54305-54618]"
  }, {
    "left" : "private randn1(size int, popSize int) : ",
    "right" : "private randn1(size int, popSize int) : ",
    "info" : "MethodDeclaration[54532-55007]:MethodDeclaration[54624-55099]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4658-4664]:Modifier[4658-4664]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4665-4670]:TYPE_DECLARATION_KIND[4665-4670]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10989-10995]:Modifier[10989-10995]"
  }, {
    "left" : "CMAESOptimizer",
    "right" : "CMAESOptimizer",
    "info" : "SimpleName[10996-11010]:SimpleName[10996-11010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11013-11037]:Block[11013-11037]"
  }, {
    "left" : "this(0);",
    "right" : "this(0);",
    "info" : "ConstructorInvocation[11023-11031]:ConstructorInvocation[11023-11031]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11097-11103]:Modifier[11097-11103]"
  }, {
    "left" : "CMAESOptimizer",
    "right" : "CMAESOptimizer",
    "info" : "SimpleName[11104-11118]:SimpleName[11104-11118]"
  }, {
    "left" : "int lambda",
    "right" : "int lambda",
    "info" : "SingleVariableDeclaration[11119-11129]:SingleVariableDeclaration[11119-11129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11131-11339]:Block[11131-11339]"
  }, {
    "left" : "this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
    "right" : "this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
    "info" : "ConstructorInvocation[11141-11333]:ConstructorInvocation[11141-11333]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11487-11493]:Modifier[11487-11493]"
  }, {
    "left" : "CMAESOptimizer",
    "right" : "CMAESOptimizer",
    "info" : "SimpleName[11494-11508]:SimpleName[11494-11508]"
  }, {
    "left" : "int lambda",
    "right" : "int lambda",
    "info" : "SingleVariableDeclaration[11509-11519]:SingleVariableDeclaration[11509-11519]"
  }, {
    "left" : "double[] inputSigma",
    "right" : "double[] inputSigma",
    "info" : "SingleVariableDeclaration[11521-11540]:SingleVariableDeclaration[11521-11540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11542-11756]:Block[11542-11756]"
  }, {
    "left" : "this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
    "right" : "this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n             DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n             DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",
    "info" : "ConstructorInvocation[11552-11750]:ConstructorInvocation[11552-11750]"
  }, {
    "left" : "@Deprecated",
    "right" : "@Deprecated",
    "info" : "MarkerAnnotation[12575-12586]:MarkerAnnotation[12575-12586]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12591-12597]:Modifier[12591-12597]"
  }, {
    "left" : "CMAESOptimizer",
    "right" : "CMAESOptimizer",
    "info" : "SimpleName[12598-12612]:SimpleName[12598-12612]"
  }, {
    "left" : "int lambda",
    "right" : "int lambda",
    "info" : "SingleVariableDeclaration[12613-12623]:SingleVariableDeclaration[12613-12623]"
  }, {
    "left" : "double[] inputSigma",
    "right" : "double[] inputSigma",
    "info" : "SingleVariableDeclaration[12625-12644]:SingleVariableDeclaration[12625-12644]"
  }, {
    "left" : "int maxIterations",
    "right" : "int maxIterations",
    "info" : "SingleVariableDeclaration[12672-12689]:SingleVariableDeclaration[12672-12689]"
  }, {
    "left" : "double stopFitness",
    "right" : "double stopFitness",
    "info" : "SingleVariableDeclaration[12691-12709]:SingleVariableDeclaration[12691-12709]"
  }, {
    "left" : "boolean isActiveCMA",
    "right" : "boolean isActiveCMA",
    "info" : "SingleVariableDeclaration[12737-12756]:SingleVariableDeclaration[12737-12756]"
  }, {
    "left" : "int diagonalOnly",
    "right" : "int diagonalOnly",
    "info" : "SingleVariableDeclaration[12758-12774]:SingleVariableDeclaration[12758-12774]"
  }, {
    "left" : "int checkFeasableCount",
    "right" : "int checkFeasableCount",
    "info" : "SingleVariableDeclaration[12776-12798]:SingleVariableDeclaration[12776-12798]"
  }, {
    "left" : "RandomGenerator random",
    "right" : "RandomGenerator random",
    "info" : "SingleVariableDeclaration[12826-12848]:SingleVariableDeclaration[12826-12848]"
  }, {
    "left" : "boolean generateStatistics",
    "right" : "boolean generateStatistics",
    "info" : "SingleVariableDeclaration[12850-12876]:SingleVariableDeclaration[12850-12876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12878-13074]:Block[12878-13074]"
  }, {
    "left" : "this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,\n             diagonalOnly, checkFeasableCount, random, generateStatistics,\n             new SimpleValueChecker());",
    "right" : "this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,\n             diagonalOnly, checkFeasableCount, random, generateStatistics,\n             new SimpleValueChecker());",
    "info" : "ConstructorInvocation[12888-13068]:ConstructorInvocation[12888-13068]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13865-13871]:Modifier[13865-13871]"
  }, {
    "left" : "CMAESOptimizer",
    "right" : "CMAESOptimizer",
    "info" : "SimpleName[13872-13886]:SimpleName[13872-13886]"
  }, {
    "left" : "int lambda",
    "right" : "int lambda",
    "info" : "SingleVariableDeclaration[13887-13897]:SingleVariableDeclaration[13887-13897]"
  }, {
    "left" : "double[] inputSigma",
    "right" : "double[] inputSigma",
    "info" : "SingleVariableDeclaration[13899-13918]:SingleVariableDeclaration[13899-13918]"
  }, {
    "left" : "int maxIterations",
    "right" : "int maxIterations",
    "info" : "SingleVariableDeclaration[13946-13963]:SingleVariableDeclaration[13946-13963]"
  }, {
    "left" : "double stopFitness",
    "right" : "double stopFitness",
    "info" : "SingleVariableDeclaration[13965-13983]:SingleVariableDeclaration[13965-13983]"
  }, {
    "left" : "boolean isActiveCMA",
    "right" : "boolean isActiveCMA",
    "info" : "SingleVariableDeclaration[14011-14030]:SingleVariableDeclaration[14011-14030]"
  }, {
    "left" : "int diagonalOnly",
    "right" : "int diagonalOnly",
    "info" : "SingleVariableDeclaration[14032-14048]:SingleVariableDeclaration[14032-14048]"
  }, {
    "left" : "int checkFeasableCount",
    "right" : "int checkFeasableCount",
    "info" : "SingleVariableDeclaration[14050-14072]:SingleVariableDeclaration[14050-14072]"
  }, {
    "left" : "RandomGenerator random",
    "right" : "RandomGenerator random",
    "info" : "SingleVariableDeclaration[14100-14122]:SingleVariableDeclaration[14100-14122]"
  }, {
    "left" : "boolean generateStatistics",
    "right" : "boolean generateStatistics",
    "info" : "SingleVariableDeclaration[14124-14150]:SingleVariableDeclaration[14124-14150]"
  }, {
    "left" : "ConvergenceChecker<PointValuePair> checker",
    "right" : "ConvergenceChecker<PointValuePair> checker",
    "info" : "SingleVariableDeclaration[14178-14220]:SingleVariableDeclaration[14178-14220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14222-14672]:Block[14222-14672]"
  }, {
    "left" : "super(checker);",
    "right" : "super(checker);",
    "info" : "SuperConstructorInvocation[14232-14247]:SuperConstructorInvocation[14232-14247]"
  }, {
    "left" : "this.lambda = lambda;",
    "right" : "this.lambda = lambda;",
    "info" : "ExpressionStatement[14256-14277]:ExpressionStatement[14256-14277]"
  }, {
    "left" : "this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();",
    "right" : "this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();",
    "info" : "ExpressionStatement[14286-14362]:ExpressionStatement[14286-14362]"
  }, {
    "left" : "this.maxIterations = maxIterations;",
    "right" : "this.maxIterations = maxIterations;",
    "info" : "ExpressionStatement[14371-14406]:ExpressionStatement[14371-14406]"
  }, {
    "left" : "this.stopFitness = stopFitness;",
    "right" : "this.stopFitness = stopFitness;",
    "info" : "ExpressionStatement[14415-14446]:ExpressionStatement[14415-14446]"
  }, {
    "left" : "this.isActiveCMA = isActiveCMA;",
    "right" : "this.isActiveCMA = isActiveCMA;",
    "info" : "ExpressionStatement[14455-14486]:ExpressionStatement[14455-14486]"
  }, {
    "left" : "this.diagonalOnly = diagonalOnly;",
    "right" : "this.diagonalOnly = diagonalOnly;",
    "info" : "ExpressionStatement[14495-14528]:ExpressionStatement[14495-14528]"
  }, {
    "left" : "this.checkFeasableCount = checkFeasableCount;",
    "right" : "this.checkFeasableCount = checkFeasableCount;",
    "info" : "ExpressionStatement[14537-14582]:ExpressionStatement[14537-14582]"
  }, {
    "left" : "this.random = random;",
    "right" : "this.random = random;",
    "info" : "ExpressionStatement[14591-14612]:ExpressionStatement[14591-14612]"
  }, {
    "left" : "this.generateStatistics = generateStatistics;",
    "right" : "this.generateStatistics = generateStatistics;",
    "info" : "ExpressionStatement[14621-14666]:ExpressionStatement[14621-14666]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14734-14740]:Modifier[14734-14740]"
  }, {
    "left" : "List<Double>",
    "right" : "List<Double>",
    "info" : "ParameterizedType[14741-14753]:ParameterizedType[14741-14753]"
  }, {
    "left" : "getStatisticsSigmaHistory",
    "right" : "getStatisticsSigmaHistory",
    "info" : "SimpleName[14754-14779]:SimpleName[14754-14779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14782-14828]:Block[14782-14828]"
  }, {
    "left" : "return statisticsSigmaHistory;",
    "right" : "return statisticsSigmaHistory;",
    "info" : "ReturnStatement[14792-14822]:ReturnStatement[14792-14822]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14889-14895]:Modifier[14889-14895]"
  }, {
    "left" : "List<RealMatrix>",
    "right" : "List<RealMatrix>",
    "info" : "ParameterizedType[14896-14912]:ParameterizedType[14896-14912]"
  }, {
    "left" : "getStatisticsMeanHistory",
    "right" : "getStatisticsMeanHistory",
    "info" : "SimpleName[14913-14937]:SimpleName[14913-14937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14940-14985]:Block[14940-14985]"
  }, {
    "left" : "return statisticsMeanHistory;",
    "right" : "return statisticsMeanHistory;",
    "info" : "ReturnStatement[14950-14979]:ReturnStatement[14950-14979]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15049-15055]:Modifier[15049-15055]"
  }, {
    "left" : "List<Double>",
    "right" : "List<Double>",
    "info" : "ParameterizedType[15056-15068]:ParameterizedType[15056-15068]"
  }, {
    "left" : "getStatisticsFitnessHistory",
    "right" : "getStatisticsFitnessHistory",
    "info" : "SimpleName[15069-15096]:SimpleName[15069-15096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15099-15147]:Block[15099-15147]"
  }, {
    "left" : "return statisticsFitnessHistory;",
    "right" : "return statisticsFitnessHistory;",
    "info" : "ReturnStatement[15109-15141]:ReturnStatement[15109-15141]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15205-15211]:Modifier[15205-15211]"
  }, {
    "left" : "List<RealMatrix>",
    "right" : "List<RealMatrix>",
    "info" : "ParameterizedType[15212-15228]:ParameterizedType[15212-15228]"
  }, {
    "left" : "getStatisticsDHistory",
    "right" : "getStatisticsDHistory",
    "info" : "SimpleName[15229-15250]:SimpleName[15229-15250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15253-15295]:Block[15253-15295]"
  }, {
    "left" : "return statisticsDHistory;",
    "right" : "return statisticsDHistory;",
    "info" : "ReturnStatement[15263-15289]:ReturnStatement[15263-15289]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15326-15335]:MarkerAnnotation[15326-15335]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[15340-15349]:Modifier[15340-15349]"
  }, {
    "left" : "PointValuePair",
    "right" : "PointValuePair",
    "info" : "SimpleType[15350-15364]:SimpleType[15350-15364]"
  }, {
    "left" : "doOptimize",
    "right" : "doOptimize",
    "info" : "SimpleName[15365-15375]:SimpleName[15365-15375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15378-22695]:Block[15378-22695]"
  }, {
    "left" : "checkParameters();",
    "right" : "checkParameters();",
    "info" : "ExpressionStatement[15388-15406]:ExpressionStatement[15388-15406]"
  }, {
    "left" : "isMinimize = getGoalType().equals(GoalType.MINIMIZE);",
    "right" : "isMinimize = getGoalType().equals(GoalType.MINIMIZE);",
    "info" : "ExpressionStatement[15496-15549]:ExpressionStatement[15496-15549]"
  }, {
    "left" : "final FitnessFunction fitfun = new FitnessFunction();",
    "right" : "final FitnessFunction fitfun = new FitnessFunction();",
    "info" : "VariableDeclarationStatement[15558-15611]:VariableDeclarationStatement[15558-15611]"
  }, {
    "left" : "final double[] guess = fitfun.encode(getStartPoint());",
    "right" : "final double[] guess = fitfun.encode(getStartPoint());",
    "info" : "VariableDeclarationStatement[15620-15674]:VariableDeclarationStatement[15620-15674]"
  }, {
    "left" : "dimension = guess.length;",
    "right" : "dimension = guess.length;",
    "info" : "ExpressionStatement[15742-15767]:ExpressionStatement[15742-15767]"
  }, {
    "left" : "initializeCMA(guess);",
    "right" : "initializeCMA(guess);",
    "info" : "ExpressionStatement[15776-15797]:ExpressionStatement[15776-15797]"
  }, {
    "left" : "iterations = 0;",
    "right" : "iterations = 0;",
    "info" : "ExpressionStatement[15806-15821]:ExpressionStatement[15806-15821]"
  }, {
    "left" : "double bestValue = fitfun.value(guess);",
    "right" : "double bestValue = fitfun.value(guess);",
    "info" : "VariableDeclarationStatement[15830-15869]:VariableDeclarationStatement[15830-15869]"
  }, {
    "left" : "push(fitnessHistory, bestValue);",
    "right" : "push(fitnessHistory, bestValue);",
    "info" : "ExpressionStatement[15878-15910]:ExpressionStatement[15878-15910]"
  }, {
    "left" : "PointValuePair optimum = new PointValuePair(getStartPoint(),\n                isMinimize ? bestValue : -bestValue);",
    "right" : "PointValuePair optimum = new PointValuePair(getStartPoint(),\n                isMinimize ? bestValue : -bestValue);",
    "info" : "VariableDeclarationStatement[15919-16033]:VariableDeclarationStatement[15919-16033]"
  }, {
    "left" : "PointValuePair lastResult = null;",
    "right" : "PointValuePair lastResult = null;",
    "info" : "VariableDeclarationStatement[16042-16075]:VariableDeclarationStatement[16042-16075]"
  }, {
    "left" : "generationLoop:\n            for (iterations = 1; iterations <= maxIterations; iterations++) {\n                // Generate and evaluate lambda offspring\n                RealMatrix arz = randn1(dimension, lambda);\n                RealMatrix arx = zeros(dimension, lambda);\n                double[] fitness = new double[lambda];\n                // generate random offspring\n                for (int k = 0; k < lambda; k++) {\n                    RealMatrix arxk = null;\n                    for (int i = 0; i < checkFeasableCount+1; i++) {\n                        if (diagonalOnly <= 0) {\n                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                        } else {\n                            arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));\n                        }\n                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {\n                            break;\n                        }\n                        // regenerate random arguments for row\n                        arz.setColumn(k, randn(dimension));\n                    }\n                    copyColumn(arxk, 0, arx, k);\n                    try {\n                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                    } catch (TooManyEvaluationsException e) {\n                        break generationLoop;\n                    }\n                }\n                // Sort by fitness and compute weighted mean into xmean\n                int[] arindex = sortedIndices(fitness);\n                // Calculate new xmean, this is selection and recombination\n                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n                xmean = bestArx.multiply(weights);\n                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n                RealMatrix zmean = bestArz.multiply(weights);\n                boolean hsig = updateEvolutionPaths(zmean, xold);\n                if (diagonalOnly <= 0) {\n                    updateCovariance(hsig, bestArx, arz, arindex, xold);\n                } else {\n                    updateCovarianceDiagonalOnly(hsig, bestArz, xold);\n                }\n                // Adapt step size sigma - Eq. (5)\n                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));\n                double bestFitness = fitness[arindex[0]];\n                double worstFitness = fitness[arindex[arindex.length-1]];\n                if (bestValue > bestFitness) {\n                    bestValue = bestFitness;\n                    lastResult = optimum;\n                    optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);\n                    if (getConvergenceChecker() != null && lastResult != null) {\n                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                            break generationLoop;\n                        }\n                    }\n                }\n                // handle termination criteria\n                // Break, if fitness is good enough\n                if (stopFitness != 0) { // only if stopFitness is defined\n                    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                        break generationLoop;\n                    }\n                }\n                double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n                double[] pcCol = pc.getColumn(0);\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {\n                        break;\n                    }\n                    if (i >= dimension-1) {\n                        break generationLoop;\n                    }\n                }\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*sqrtDiagC[i] > stopTolUpX) {\n                        break generationLoop;\n                    }\n                }\n                double historyBest = min(fitnessHistory);\n                double historyWorst = max(fitnessHistory);\n                if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun) {\n                    break generationLoop;\n                }\n                if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun) {\n                    break generationLoop;\n                }\n                // condition number of the covariance matrix exceeds 1e14\n                if (max(diagD)/min(diagD) > 1e7) {\n                    break generationLoop;\n                }\n                // user defined termination\n                if (getConvergenceChecker() != null) {\n                    PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);\n                    if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult)) {\n                        break generationLoop;\n                    }\n                    lastResult = current;\n                }\n                // Adjust step size in case of equal function values (flat fitness)\n                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                // store best in history\n                push(fitnessHistory,bestFitness);\n                fitfun.setValueRange(worstFitness-bestFitness);\n                if (generateStatistics) {\n                    statisticsSigmaHistory.add(sigma);\n                    statisticsFitnessHistory.add(bestFitness);\n                    statisticsMeanHistory.add(xmean.transpose());\n                    statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n                }\n            }",
    "right" : "generationLoop:\n            for (iterations = 1; iterations <= maxIterations; iterations++) {\n                // Generate and evaluate lambda offspring\n                RealMatrix arz = randn1(dimension, lambda);\n                RealMatrix arx = zeros(dimension, lambda);\n                double[] fitness = new double[lambda];\n                // generate random offspring\n                for (int k = 0; k < lambda; k++) {\n                    RealMatrix arxk = null;\n                    for (int i = 0; i < checkFeasableCount+1; i++) {\n                        if (diagonalOnly <= 0) {\n                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                        } else {\n                            arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));\n                        }\n                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {\n                            break;\n                        }\n                        // regenerate random arguments for row\n                        arz.setColumn(k, randn(dimension));\n                    }\n                    copyColumn(arxk, 0, arx, k);\n                    try {\n                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                    } catch (TooManyEvaluationsException e) {\n                        break generationLoop;\n                    }\n                }\n                // Sort by fitness and compute weighted mean into xmean\n                int[] arindex = sortedIndices(fitness);\n                // Calculate new xmean, this is selection and recombination\n                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n                xmean = bestArx.multiply(weights);\n                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n                RealMatrix zmean = bestArz.multiply(weights);\n                boolean hsig = updateEvolutionPaths(zmean, xold);\n                if (diagonalOnly <= 0) {\n                    updateCovariance(hsig, bestArx, arz, arindex, xold);\n                } else {\n                    updateCovarianceDiagonalOnly(hsig, bestArz, xold);\n                }\n                // Adapt step size sigma - Eq. (5)\n                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));\n                double bestFitness = fitness[arindex[0]];\n                double worstFitness = fitness[arindex[arindex.length-1]];\n                if (bestValue > bestFitness) {\n                    bestValue = bestFitness;\n                    lastResult = optimum;\n                    optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);\n                    if (getConvergenceChecker() != null && lastResult != null) {\n                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                            break generationLoop;\n                        }\n                    }\n                }\n                // handle termination criteria\n                // Break, if fitness is good enough\n                if (stopFitness != 0) { // only if stopFitness is defined\n                    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                        break generationLoop;\n                    }\n                }\n                double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n                double[] pcCol = pc.getColumn(0);\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {\n                        break;\n                    }\n                    if (i >= dimension-1) {\n                        break generationLoop;\n                    }\n                }\n                for (int i = 0; i < dimension; i++) {\n                    if (sigma*sqrtDiagC[i] > stopTolUpX) {\n                        break generationLoop;\n                    }\n                }\n                double historyBest = min(fitnessHistory);\n                double historyWorst = max(fitnessHistory);\n                if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun) {\n                    break generationLoop;\n                }\n                if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun) {\n                    break generationLoop;\n                }\n                // condition number of the covariance matrix exceeds 1e14\n                if (max(diagD)/min(diagD) > 1e7) {\n                    break generationLoop;\n                }\n                // user defined termination\n                if (getConvergenceChecker() != null) {\n                    PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);\n                    if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult)) {\n                        break generationLoop;\n                    }\n                    lastResult = current;\n                }\n                // Adjust step size in case of equal function values (flat fitness)\n                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0) {\n                    sigma = sigma * Math.exp(0.2+cs/damps);\n                }\n                // store best in history\n                push(fitnessHistory,bestFitness);\n                fitfun.setValueRange(worstFitness-bestFitness);\n                if (generateStatistics) {\n                    statisticsSigmaHistory.add(sigma);\n                    statisticsFitnessHistory.add(bestFitness);\n                    statisticsMeanHistory.add(xmean.transpose());\n                    statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n                }\n            }",
    "info" : "LabeledStatement[16167-22665]:LabeledStatement[16167-22665]"
  }, {
    "left" : "for (iterations = 1; iterations <= maxIterations; iterations++)",
    "right" : "for (iterations = 1; iterations <= maxIterations; iterations++)",
    "info" : "ForStatement[16195-22665]:ForStatement[16195-22665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16259-22665]:Block[16259-22665]"
  }, {
    "left" : "RealMatrix arz = randn1(dimension, lambda);",
    "right" : "RealMatrix arz = randn1(dimension, lambda);",
    "info" : "VariableDeclarationStatement[16335-16378]:VariableDeclarationStatement[16335-16378]"
  }, {
    "left" : "RealMatrix arx = zeros(dimension, lambda);",
    "right" : "RealMatrix arx = zeros(dimension, lambda);",
    "info" : "VariableDeclarationStatement[16395-16437]:VariableDeclarationStatement[16395-16437]"
  }, {
    "left" : "double[] fitness = new double[lambda];",
    "right" : "double[] fitness = new double[lambda];",
    "info" : "VariableDeclarationStatement[16454-16492]:VariableDeclarationStatement[16454-16492]"
  }, {
    "left" : "for (int k = 0; k < lambda; k++)",
    "right" : "for (int k = 0; k < lambda; k++)",
    "info" : "ForStatement[16554-17730]:ForStatement[16554-17730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16587-17730]:Block[16587-17730]"
  }, {
    "left" : "RealMatrix arxk = null;",
    "right" : "RealMatrix arxk = null;",
    "info" : "VariableDeclarationStatement[16609-16632]:VariableDeclarationStatement[16609-16632]"
  }, {
    "left" : "for (int i = 0; i < checkFeasableCount+1; i++)",
    "right" : "for (int i = 0; i < checkFeasableCount+1; i++)",
    "info" : "ForStatement[16653-17419]:ForStatement[16653-17419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16700-17419]:Block[16700-17419]"
  }, {
    "left" : "if (diagonalOnly <= 0)",
    "right" : "if (diagonalOnly <= 0)",
    "info" : "IfStatement[16726-17118]:IfStatement[16726-17118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16749-16943]:Block[16749-16943]"
  }, {
    "left" : "arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
    "right" : "arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
    "info" : "ExpressionStatement[16779-16892]:ExpressionStatement[16779-16892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16949-17118]:Block[16949-17118]"
  }, {
    "left" : "arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
    "right" : "arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                    .scalarMultiply(sigma));",
    "info" : "ExpressionStatement[16979-17092]:ExpressionStatement[16979-17092]"
  }, {
    "left" : "if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0)))",
    "right" : "if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0)))",
    "info" : "IfStatement[17143-17274]:IfStatement[17143-17274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17212-17274]:Block[17212-17274]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17242-17248]:BreakStatement[17242-17248]"
  }, {
    "left" : "arz.setColumn(k, randn(dimension));",
    "right" : "arz.setColumn(k, randn(dimension));",
    "info" : "ExpressionStatement[17362-17397]:ExpressionStatement[17362-17397]"
  }, {
    "left" : "copyColumn(arxk, 0, arx, k);",
    "right" : "copyColumn(arxk, 0, arx, k);",
    "info" : "ExpressionStatement[17440-17468]:ExpressionStatement[17440-17468]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[17489-17712]:TryStatement[17489-17712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17493-17604]:Block[17493-17604]"
  }, {
    "left" : "fitness[k] = fitfun.value(arx.getColumn(k));",
    "right" : "fitness[k] = fitfun.value(arx.getColumn(k));",
    "info" : "ExpressionStatement[17519-17563]:ExpressionStatement[17519-17563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17643-17712]:Block[17643-17712]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[17669-17690]:BreakStatement[17669-17690]"
  }, {
    "left" : "int[] arindex = sortedIndices(fitness);",
    "right" : "int[] arindex = sortedIndices(fitness);",
    "info" : "VariableDeclarationStatement[17819-17858]:VariableDeclarationStatement[17819-17858]"
  }, {
    "left" : "RealMatrix xold = xmean;",
    "right" : "RealMatrix xold = xmean;",
    "info" : "VariableDeclarationStatement[17951-17975]:VariableDeclarationStatement[17951-17975]"
  }, {
    "left" : "RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",
    "right" : "RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",
    "info" : "VariableDeclarationStatement[18027-18099]:VariableDeclarationStatement[18027-18099]"
  }, {
    "left" : "xmean = bestArx.multiply(weights);",
    "right" : "xmean = bestArx.multiply(weights);",
    "info" : "ExpressionStatement[18116-18150]:ExpressionStatement[18116-18150]"
  }, {
    "left" : "RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",
    "right" : "RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",
    "info" : "VariableDeclarationStatement[18167-18239]:VariableDeclarationStatement[18167-18239]"
  }, {
    "left" : "RealMatrix zmean = bestArz.multiply(weights);",
    "right" : "RealMatrix zmean = bestArz.multiply(weights);",
    "info" : "VariableDeclarationStatement[18256-18301]:VariableDeclarationStatement[18256-18301]"
  }, {
    "left" : "boolean hsig = updateEvolutionPaths(zmean, xold);",
    "right" : "boolean hsig = updateEvolutionPaths(zmean, xold);",
    "info" : "VariableDeclarationStatement[18318-18367]:VariableDeclarationStatement[18318-18367]"
  }, {
    "left" : "if (diagonalOnly <= 0)",
    "right" : "if (diagonalOnly <= 0)",
    "info" : "IfStatement[18384-18595]:IfStatement[18384-18595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18407-18499]:Block[18407-18499]"
  }, {
    "left" : "updateCovariance(hsig, bestArx, arz, arindex, xold);",
    "right" : "updateCovariance(hsig, bestArx, arz, arindex, xold);",
    "info" : "ExpressionStatement[18429-18481]:ExpressionStatement[18429-18481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18505-18595]:Block[18505-18595]"
  }, {
    "left" : "updateCovarianceDiagonalOnly(hsig, bestArz, xold);",
    "right" : "updateCovarianceDiagonalOnly(hsig, bestArz, xold);",
    "info" : "ExpressionStatement[18527-18577]:ExpressionStatement[18527-18577]"
  }, {
    "left" : "sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",
    "right" : "sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",
    "info" : "ExpressionStatement[18663-18724]:ExpressionStatement[18663-18724]"
  }, {
    "left" : "double bestFitness = fitness[arindex[0]];",
    "right" : "double bestFitness = fitness[arindex[0]];",
    "info" : "VariableDeclarationStatement[18741-18782]:VariableDeclarationStatement[18741-18782]"
  }, {
    "left" : "double worstFitness = fitness[arindex[arindex.length-1]];",
    "right" : "double worstFitness = fitness[arindex[arindex.length-1]];",
    "info" : "VariableDeclarationStatement[18799-18856]:VariableDeclarationStatement[18799-18856]"
  }, {
    "left" : "if (bestValue > bestFitness)",
    "right" : "if (bestValue > bestFitness)",
    "info" : "IfStatement[18873-19479]:IfStatement[18873-19479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18902-19479]:Block[18902-19479]"
  }, {
    "left" : "bestValue = bestFitness;",
    "right" : "bestValue = bestFitness;",
    "info" : "ExpressionStatement[18924-18948]:ExpressionStatement[18924-18948]"
  }, {
    "left" : "lastResult = optimum;",
    "right" : "lastResult = optimum;",
    "info" : "ExpressionStatement[18969-18990]:ExpressionStatement[18969-18990]"
  }, {
    "left" : "optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);",
    "right" : "optimum = new PointValuePair(\n                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                            isMinimize ? bestFitness : -bestFitness);",
    "info" : "ExpressionStatement[19011-19184]:ExpressionStatement[19011-19184]"
  }, {
    "left" : "if (getConvergenceChecker() != null && lastResult != null)",
    "right" : "if (getConvergenceChecker() != null && lastResult != null)",
    "info" : "IfStatement[19205-19461]:IfStatement[19205-19461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19264-19461]:Block[19264-19461]"
  }, {
    "left" : "if (getConvergenceChecker().converged(iterations, optimum, lastResult))",
    "right" : "if (getConvergenceChecker().converged(iterations, optimum, lastResult))",
    "info" : "IfStatement[19290-19439]:IfStatement[19290-19439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19362-19439]:Block[19362-19439]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[19392-19413]:BreakStatement[19392-19413]"
  }, {
    "left" : "if (stopFitness != 0)",
    "right" : "if (stopFitness != 0)",
    "info" : "IfStatement[19595-19821]:IfStatement[19595-19821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19617-19821]:Block[19617-19821]"
  }, {
    "left" : "if (bestFitness < (isMinimize ? stopFitness : -stopFitness))",
    "right" : "if (bestFitness < (isMinimize ? stopFitness : -stopFitness))",
    "info" : "IfStatement[19673-19803]:IfStatement[19673-19803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19734-19803]:Block[19734-19803]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[19760-19781]:BreakStatement[19760-19781]"
  }, {
    "left" : "double[] sqrtDiagC = sqrt(diagC).getColumn(0);",
    "right" : "double[] sqrtDiagC = sqrt(diagC).getColumn(0);",
    "info" : "VariableDeclarationStatement[19838-19884]:VariableDeclarationStatement[19838-19884]"
  }, {
    "left" : "double[] pcCol = pc.getColumn(0);",
    "right" : "double[] pcCol = pc.getColumn(0);",
    "info" : "VariableDeclarationStatement[19901-19934]:VariableDeclarationStatement[19901-19934]"
  }, {
    "left" : "for (int i = 0; i < dimension; i++)",
    "right" : "for (int i = 0; i < dimension; i++)",
    "info" : "ForStatement[19951-20260]:ForStatement[19951-20260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19987-20260]:Block[19987-20260]"
  }, {
    "left" : "if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX)",
    "right" : "if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX)",
    "info" : "IfStatement[20009-20130]:IfStatement[20009-20130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20076-20130]:Block[20076-20130]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20102-20108]:BreakStatement[20102-20108]"
  }, {
    "left" : "if (i >= dimension-1)",
    "right" : "if (i >= dimension-1)",
    "info" : "IfStatement[20151-20242]:IfStatement[20151-20242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20173-20242]:Block[20173-20242]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[20199-20220]:BreakStatement[20199-20220]"
  }, {
    "left" : "for (int i = 0; i < dimension; i++)",
    "right" : "for (int i = 0; i < dimension; i++)",
    "info" : "ForStatement[20277-20459]:ForStatement[20277-20459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20313-20459]:Block[20313-20459]"
  }, {
    "left" : "if (sigma*sqrtDiagC[i] > stopTolUpX)",
    "right" : "if (sigma*sqrtDiagC[i] > stopTolUpX)",
    "info" : "IfStatement[20335-20441]:IfStatement[20335-20441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20372-20441]:Block[20372-20441]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[20398-20419]:BreakStatement[20398-20419]"
  }, {
    "left" : "double historyBest = min(fitnessHistory);",
    "right" : "double historyBest = min(fitnessHistory);",
    "info" : "VariableDeclarationStatement[20476-20517]:VariableDeclarationStatement[20476-20517]"
  }, {
    "left" : "double historyWorst = max(fitnessHistory);",
    "right" : "double historyWorst = max(fitnessHistory);",
    "info" : "VariableDeclarationStatement[20534-20576]:VariableDeclarationStatement[20534-20576]"
  }, {
    "left" : "if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun)",
    "right" : "if (iterations > 2 && Math.max(historyWorst, worstFitness) -\n                        Math.min(historyBest, bestFitness) < stopTolFun)",
    "info" : "IfStatement[20593-20788]:IfStatement[20593-20788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20727-20788]:Block[20727-20788]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[20749-20770]:BreakStatement[20749-20770]"
  }, {
    "left" : "if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun)",
    "right" : "if (iterations > fitnessHistory.length &&\n                        historyWorst-historyBest < stopTolHistFun)",
    "info" : "IfStatement[20805-20975]:IfStatement[20805-20975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20914-20975]:Block[20914-20975]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[20936-20957]:BreakStatement[20936-20957]"
  }, {
    "left" : "if (max(diagD)/min(diagD) > 1e7)",
    "right" : "if (max(diagD)/min(diagD) > 1e7)",
    "info" : "IfStatement[21066-21160]:IfStatement[21066-21160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21099-21160]:Block[21099-21160]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[21121-21142]:BreakStatement[21121-21142]"
  }, {
    "left" : "if (getConvergenceChecker() != null)",
    "right" : "if (getConvergenceChecker() != null)",
    "info" : "IfStatement[21221-21711]:IfStatement[21221-21711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21258-21711]:Block[21258-21711]"
  }, {
    "left" : "PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);",
    "right" : "PointValuePair current =\n                        new PointValuePair(bestArx.getColumn(0),\n                                isMinimize ? bestFitness : -bestFitness);",
    "info" : "VariableDeclarationStatement[21280-21443]:VariableDeclarationStatement[21280-21443]"
  }, {
    "left" : "if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult))",
    "right" : "if (lastResult != null &&\n                        getConvergenceChecker().converged(iterations, current, lastResult))",
    "info" : "IfStatement[21464-21651]:IfStatement[21464-21651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21582-21651]:Block[21582-21651]"
  }, {
    "left" : "break generationLoop;",
    "right" : "break generationLoop;",
    "info" : "BreakStatement[21608-21629]:BreakStatement[21608-21629]"
  }, {
    "left" : "lastResult = current;",
    "right" : "lastResult = current;",
    "info" : "ExpressionStatement[21672-21693]:ExpressionStatement[21672-21693]"
  }, {
    "left" : "if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]])",
    "right" : "if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]])",
    "info" : "IfStatement[21812-21948]:IfStatement[21812-21948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21869-21948]:Block[21869-21948]"
  }, {
    "left" : "sigma = sigma * Math.exp(0.2+cs/damps);",
    "right" : "sigma = sigma * Math.exp(0.2+cs/damps);",
    "info" : "ExpressionStatement[21891-21930]:ExpressionStatement[21891-21930]"
  }, {
    "left" : "if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0)",
    "right" : "if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                        Math.min(historyBest, bestFitness) == 0)",
    "info" : "IfStatement[21965-22169]:IfStatement[21965-22169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22090-22169]:Block[22090-22169]"
  }, {
    "left" : "sigma = sigma * Math.exp(0.2+cs/damps);",
    "right" : "sigma = sigma * Math.exp(0.2+cs/damps);",
    "info" : "ExpressionStatement[22112-22151]:ExpressionStatement[22112-22151]"
  }, {
    "left" : "push(fitnessHistory,bestFitness);",
    "right" : "push(fitnessHistory,bestFitness);",
    "info" : "ExpressionStatement[22227-22260]:ExpressionStatement[22227-22260]"
  }, {
    "left" : "fitfun.setValueRange(worstFitness-bestFitness);",
    "right" : "fitfun.setValueRange(worstFitness-bestFitness);",
    "info" : "ExpressionStatement[22277-22324]:ExpressionStatement[22277-22324]"
  }, {
    "left" : "if (generateStatistics)",
    "right" : "if (generateStatistics)",
    "info" : "IfStatement[22341-22651]:IfStatement[22341-22651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22365-22651]:Block[22365-22651]"
  }, {
    "left" : "statisticsSigmaHistory.add(sigma);",
    "right" : "statisticsSigmaHistory.add(sigma);",
    "info" : "ExpressionStatement[22387-22421]:ExpressionStatement[22387-22421]"
  }, {
    "left" : "statisticsFitnessHistory.add(bestFitness);",
    "right" : "statisticsFitnessHistory.add(bestFitness);",
    "info" : "ExpressionStatement[22442-22484]:ExpressionStatement[22442-22484]"
  }, {
    "left" : "statisticsMeanHistory.add(xmean.transpose());",
    "right" : "statisticsMeanHistory.add(xmean.transpose());",
    "info" : "ExpressionStatement[22505-22550]:ExpressionStatement[22505-22550]"
  }, {
    "left" : "statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));",
    "right" : "statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));",
    "info" : "ExpressionStatement[22571-22633]:ExpressionStatement[22571-22633]"
  }, {
    "left" : "return optimum;",
    "right" : "return optimum;",
    "info" : "ReturnStatement[22674-22689]:ReturnStatement[22674-22689]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22794-22801]:Modifier[22794-22801]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22802-22806]:PrimitiveType[22802-22806]"
  }, {
    "left" : "checkParameters",
    "right" : "checkParameters",
    "info" : "SimpleName[22807-22822]:SimpleName[22807-22822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22825-25761]:Block[22825-25761]"
  }, {
    "left" : "final double[] init = getStartPoint();",
    "right" : "final double[] init = getStartPoint();",
    "info" : "VariableDeclarationStatement[22835-22873]:VariableDeclarationStatement[22835-22873]"
  }, {
    "left" : "final double[] lB = getLowerBound();",
    "right" : "final double[] lB = getLowerBound();",
    "info" : "VariableDeclarationStatement[22882-22918]:VariableDeclarationStatement[22882-22918]"
  }, {
    "left" : "final double[] uB = getUpperBound();",
    "right" : "final double[] uB = getUpperBound();",
    "info" : "VariableDeclarationStatement[22927-22963]:VariableDeclarationStatement[22927-22963]"
  }, {
    "left" : "boolean hasFiniteBounds = false;",
    "right" : "boolean hasFiniteBounds = false;",
    "info" : "VariableDeclarationStatement[23041-23073]:VariableDeclarationStatement[23041-23073]"
  }, {
    "left" : "for (int i = 0; i < lB.length; i++)",
    "right" : "for (int i = 0; i < lB.length; i++)",
    "info" : "ForStatement[23082-23296]:ForStatement[23082-23296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23118-23296]:Block[23118-23296]"
  }, {
    "left" : "if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i]))",
    "right" : "if (!Double.isInfinite(lB[i]) ||\n                !Double.isInfinite(uB[i]))",
    "info" : "IfStatement[23132-23286]:IfStatement[23132-23286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23208-23286]:Block[23208-23286]"
  }, {
    "left" : "hasFiniteBounds = true;",
    "right" : "hasFiniteBounds = true;",
    "info" : "ExpressionStatement[23226-23249]:ExpressionStatement[23226-23249]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23266-23272]:BreakStatement[23266-23272]"
  }, {
    "left" : "boolean hasInfiniteBounds = false;",
    "right" : "boolean hasInfiniteBounds = false;",
    "info" : "VariableDeclarationStatement[23375-23409]:VariableDeclarationStatement[23375-23409]"
  }, {
    "left" : "if (hasFiniteBounds)",
    "right" : "if (hasFiniteBounds)",
    "info" : "IfStatement[23418-25095]:IfStatement[23418-25095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23439-24984]:Block[23439-24984]"
  }, {
    "left" : "for (int i = 0; i < lB.length; i++)",
    "right" : "for (int i = 0; i < lB.length; i++)",
    "info" : "ForStatement[23453-23691]:ForStatement[23453-23691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23489-23691]:Block[23489-23691]"
  }, {
    "left" : "if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i]))",
    "right" : "if (Double.isInfinite(lB[i]) ||\n                    Double.isInfinite(uB[i]))",
    "info" : "IfStatement[23507-23677]:IfStatement[23507-23677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23585-23677]:Block[23585-23677]"
  }, {
    "left" : "hasInfiniteBounds = true;",
    "right" : "hasInfiniteBounds = true;",
    "info" : "ExpressionStatement[23607-23632]:ExpressionStatement[23607-23632]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23653-23659]:BreakStatement[23653-23659]"
  }, {
    "left" : "if (hasInfiniteBounds)",
    "right" : "if (hasInfiniteBounds)",
    "info" : "IfStatement[23705-24974]:IfStatement[23705-24974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23728-23964]:Block[23728-23964]"
  }, {
    "left" : "throw new MathUnsupportedOperationException();",
    "right" : "throw new MathUnsupportedOperationException();",
    "info" : "ThrowStatement[23904-23950]:ThrowStatement[23904-23950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23970-24974]:Block[23970-24974]"
  }, {
    "left" : "boundaries = new double[2][];",
    "right" : "boundaries = new double[2][];",
    "info" : "ExpressionStatement[24055-24084]:ExpressionStatement[24055-24084]"
  }, {
    "left" : "boundaries[0] = lB;",
    "right" : "boundaries[0] = lB;",
    "info" : "ExpressionStatement[24101-24120]:ExpressionStatement[24101-24120]"
  }, {
    "left" : "boundaries[1] = uB;",
    "right" : "boundaries[1] = uB;",
    "info" : "ExpressionStatement[24137-24156]:ExpressionStatement[24137-24156]"
  }, {
    "left" : "for (int i = 0; i < lB.length; i++)",
    "right" : "for (int i = 0; i < lB.length; i++)",
    "info" : "ForStatement[24263-24960]:ForStatement[24263-24960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24299-24960]:Block[24299-24960]"
  }, {
    "left" : "if (Double.isInfinite(boundaries[1][i] - boundaries[0][i]))",
    "right" : "if (Double.isInfinite(boundaries[1][i] - boundaries[0][i]))",
    "info" : "IfStatement[24321-24942]:IfStatement[24321-24942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24381-24942]:Block[24381-24942]"
  }, {
    "left" : "final double max = Double.MAX_VALUE + boundaries[0][i];",
    "right" : "final double max = Double.MAX_VALUE + boundaries[0][i];",
    "info" : "VariableDeclarationStatement[24407-24462]:VariableDeclarationStatement[24407-24462]"
  }, {
    "left" : "final NumberIsTooLargeException e\n                            = new NumberIsTooLargeException(boundaries[1][i],\n                                                            max,\n                                                            true);",
    "right" : "final NumberIsTooLargeException e\n                            = new NumberIsTooLargeException(boundaries[1][i],\n                                                            max,\n                                                            true);",
    "info" : "VariableDeclarationStatement[24487-24730]:VariableDeclarationStatement[24487-24730]"
  }, {
    "left" : "e.getContext().addMessage(LocalizedFormats.OVERFLOW);",
    "right" : "e.getContext().addMessage(LocalizedFormats.OVERFLOW);",
    "info" : "ExpressionStatement[24755-24808]:ExpressionStatement[24755-24808]"
  }, {
    "left" : "e.getContext().addMessage(LocalizedFormats.INDEX, i);",
    "right" : "e.getContext().addMessage(LocalizedFormats.INDEX, i);",
    "info" : "ExpressionStatement[24833-24886]:ExpressionStatement[24833-24886]"
  }, {
    "left" : "throw e;",
    "right" : "throw e;",
    "info" : "ThrowStatement[24912-24920]:ThrowStatement[24912-24920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24990-25095]:Block[24990-25095]"
  }, {
    "left" : "boundaries = null;",
    "right" : "boundaries = null;",
    "info" : "ExpressionStatement[25067-25085]:ExpressionStatement[25067-25085]"
  }, {
    "left" : "if (inputSigma != null)",
    "right" : "if (inputSigma != null)",
    "info" : "IfStatement[25105-25755]:IfStatement[25105-25755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25129-25755]:Block[25129-25755]"
  }, {
    "left" : "if (inputSigma.length != init.length)",
    "right" : "if (inputSigma.length != init.length)",
    "info" : "IfStatement[25143-25282]:IfStatement[25143-25282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25181-25282]:Block[25181-25282]"
  }, {
    "left" : "throw new DimensionMismatchException(inputSigma.length, init.length);",
    "right" : "throw new DimensionMismatchException(inputSigma.length, init.length);",
    "info" : "ThrowStatement[25199-25268]:ThrowStatement[25199-25268]"
  }, {
    "left" : "for (int i = 0; i < init.length; i++)",
    "right" : "for (int i = 0; i < init.length; i++)",
    "info" : "ForStatement[25295-25745]:ForStatement[25295-25745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25333-25745]:Block[25333-25745]"
  }, {
    "left" : "if (inputSigma[i] < 0)",
    "right" : "if (inputSigma[i] < 0)",
    "info" : "IfStatement[25351-25460]:IfStatement[25351-25460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25374-25460]:Block[25374-25460]"
  }, {
    "left" : "throw new NotPositiveException(inputSigma[i]);",
    "right" : "throw new NotPositiveException(inputSigma[i]);",
    "info" : "ThrowStatement[25396-25442]:ThrowStatement[25396-25442]"
  }, {
    "left" : "if (boundaries != null)",
    "right" : "if (boundaries != null)",
    "info" : "IfStatement[25477-25731]:IfStatement[25477-25731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25501-25731]:Block[25501-25731]"
  }, {
    "left" : "if (inputSigma[i] > boundaries[1][i] - boundaries[0][i])",
    "right" : "if (inputSigma[i] > boundaries[1][i] - boundaries[0][i])",
    "info" : "IfStatement[25523-25713]:IfStatement[25523-25713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25580-25713]:Block[25580-25713]"
  }, {
    "left" : "throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);",
    "right" : "throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);",
    "info" : "ThrowStatement[25606-25691]:ThrowStatement[25606-25691]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25922-25929]:Modifier[25922-25929]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25930-25934]:PrimitiveType[25930-25934]"
  }, {
    "left" : "initializeCMA",
    "right" : "initializeCMA",
    "info" : "SimpleName[25935-25948]:SimpleName[25935-25948]"
  }, {
    "left" : "double[] guess",
    "right" : "double[] guess",
    "info" : "SingleVariableDeclaration[25949-25963]:SingleVariableDeclaration[25949-25963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25965-29244]:Block[25965-29244]"
  }, {
    "left" : "if (lambda <= 0)",
    "right" : "if (lambda <= 0)",
    "info" : "IfStatement[25975-26062]:IfStatement[25975-26062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25992-26062]:Block[25992-26062]"
  }, {
    "left" : "lambda = 4 + (int) (3. * Math.log(dimension));",
    "right" : "lambda = 4 + (int) (3. * Math.log(dimension));",
    "info" : "ExpressionStatement[26006-26052]:ExpressionStatement[26006-26052]"
  }, {
    "left" : "double[][] sigmaArray = new double[guess.length][1];",
    "right" : "double[][] sigmaArray = new double[guess.length][1];",
    "info" : "VariableDeclarationStatement[26099-26151]:VariableDeclarationStatement[26099-26151]"
  }, {
    "left" : "for (int i = 0; i < guess.length; i++)",
    "right" : "for (int i = 0; i < guess.length; i++)",
    "info" : "ForStatement[26160-26394]:ForStatement[26160-26394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26199-26394]:Block[26199-26394]"
  }, {
    "left" : "final double range = (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];",
    "right" : "final double range = (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];",
    "info" : "VariableDeclarationStatement[26213-26299]:VariableDeclarationStatement[26213-26299]"
  }, {
    "left" : "sigmaArray[i][0] = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;",
    "right" : "sigmaArray[i][0] = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;",
    "info" : "ExpressionStatement[26312-26384]:ExpressionStatement[26312-26384]"
  }, {
    "left" : "RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",
    "right" : "RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",
    "info" : "VariableDeclarationStatement[26403-26468]:VariableDeclarationStatement[26403-26468]"
  }, {
    "left" : "sigma = max(insigma);",
    "right" : "sigma = max(insigma);",
    "info" : "ExpressionStatement[26477-26498]:ExpressionStatement[26477-26498]"
  }, {
    "left" : "stopTolUpX = 1e3 * max(insigma);",
    "right" : "stopTolUpX = 1e3 * max(insigma);",
    "info" : "ExpressionStatement[26581-26613]:ExpressionStatement[26581-26613]"
  }, {
    "left" : "stopTolX = 1e-11 * max(insigma);",
    "right" : "stopTolX = 1e-11 * max(insigma);",
    "info" : "ExpressionStatement[26622-26654]:ExpressionStatement[26622-26654]"
  }, {
    "left" : "stopTolFun = 1e-12;",
    "right" : "stopTolFun = 1e-12;",
    "info" : "ExpressionStatement[26663-26682]:ExpressionStatement[26663-26682]"
  }, {
    "left" : "stopTolHistFun = 1e-13;",
    "right" : "stopTolHistFun = 1e-13;",
    "info" : "ExpressionStatement[26691-26714]:ExpressionStatement[26691-26714]"
  }, {
    "left" : "mu = lambda / 2;",
    "right" : "mu = lambda / 2;",
    "info" : "ExpressionStatement[26776-26792]:ExpressionStatement[26776-26792]"
  }, {
    "left" : "logMu2 = Math.log(mu + 0.5);",
    "right" : "logMu2 = Math.log(mu + 0.5);",
    "info" : "ExpressionStatement[26847-26875]:ExpressionStatement[26847-26875]"
  }, {
    "left" : "weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",
    "right" : "weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",
    "info" : "ExpressionStatement[26884-26956]:ExpressionStatement[26884-26956]"
  }, {
    "left" : "double sumw = 0;",
    "right" : "double sumw = 0;",
    "info" : "VariableDeclarationStatement[26965-26981]:VariableDeclarationStatement[26965-26981]"
  }, {
    "left" : "double sumwq = 0;",
    "right" : "double sumwq = 0;",
    "info" : "VariableDeclarationStatement[26990-27007]:VariableDeclarationStatement[26990-27007]"
  }, {
    "left" : "for (int i = 0; i < mu; i++)",
    "right" : "for (int i = 0; i < mu; i++)",
    "info" : "ForStatement[27016-27154]:ForStatement[27016-27154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27045-27154]:Block[27045-27154]"
  }, {
    "left" : "double w = weights.getEntry(i, 0);",
    "right" : "double w = weights.getEntry(i, 0);",
    "info" : "VariableDeclarationStatement[27059-27093]:VariableDeclarationStatement[27059-27093]"
  }, {
    "left" : "sumw += w;",
    "right" : "sumw += w;",
    "info" : "ExpressionStatement[27106-27116]:ExpressionStatement[27106-27116]"
  }, {
    "left" : "sumwq += w * w;",
    "right" : "sumwq += w * w;",
    "info" : "ExpressionStatement[27129-27144]:ExpressionStatement[27129-27144]"
  }, {
    "left" : "weights = weights.scalarMultiply(1. / sumw);",
    "right" : "weights = weights.scalarMultiply(1. / sumw);",
    "info" : "ExpressionStatement[27163-27207]:ExpressionStatement[27163-27207]"
  }, {
    "left" : "mueff = sumw * sumw / sumwq;",
    "right" : "mueff = sumw * sumw / sumwq;",
    "info" : "ExpressionStatement[27216-27244]:ExpressionStatement[27216-27244]"
  }, {
    "left" : "cc = (4. + mueff / dimension) /\n                (dimension + 4. + 2. * mueff / dimension);",
    "right" : "cc = (4. + mueff / dimension) /\n                (dimension + 4. + 2. * mueff / dimension);",
    "info" : "ExpressionStatement[27359-27449]:ExpressionStatement[27359-27449]"
  }, {
    "left" : "cs = (mueff + 2.) / (dimension + mueff + 3.);",
    "right" : "cs = (mueff + 2.) / (dimension + mueff + 3.);",
    "info" : "ExpressionStatement[27458-27503]:ExpressionStatement[27458-27503]"
  }, {
    "left" : "damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /\n                (dimension + 1.)) - 1.)) *\n                Math.max(0.3, 1. - dimension /\n                        (1e-6 + Math.min(maxIterations, getMaxEvaluations() /\n                                lambda))) + cs;",
    "right" : "damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /\n                (dimension + 1.)) - 1.)) *\n                Math.max(0.3, 1. - dimension /\n                        (1e-6 + Math.min(maxIterations, getMaxEvaluations() /\n                                lambda))) + cs;",
    "info" : "ExpressionStatement[27512-27783]:ExpressionStatement[27512-27783]"
  }, {
    "left" : "ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);",
    "right" : "ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);",
    "info" : "ExpressionStatement[27811-27872]:ExpressionStatement[27811-27872]"
  }, {
    "left" : "ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /\n                ((dimension + 2.) * (dimension + 2.) + mueff));",
    "right" : "ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /\n                ((dimension + 2.) * (dimension + 2.) + mueff));",
    "info" : "ExpressionStatement[27881-28006]:ExpressionStatement[27881-28006]"
  }, {
    "left" : "ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",
    "right" : "ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",
    "info" : "ExpressionStatement[28015-28070]:ExpressionStatement[28015-28070]"
  }, {
    "left" : "ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",
    "right" : "ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",
    "info" : "ExpressionStatement[28079-28144]:ExpressionStatement[28079-28144]"
  }, {
    "left" : "chiN = Math.sqrt(dimension) *\n                (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));",
    "right" : "chiN = Math.sqrt(dimension) *\n                (1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));",
    "info" : "ExpressionStatement[28153-28264]:ExpressionStatement[28153-28264]"
  }, {
    "left" : "xmean = MatrixUtils.createColumnRealMatrix(guess);",
    "right" : "xmean = MatrixUtils.createColumnRealMatrix(guess);",
    "info" : "ExpressionStatement[28340-28390]:ExpressionStatement[28340-28390]"
  }, {
    "left" : "diagD = insigma.scalarMultiply(1. / sigma);",
    "right" : "diagD = insigma.scalarMultiply(1. / sigma);",
    "info" : "ExpressionStatement[28484-28527]:ExpressionStatement[28484-28527]"
  }, {
    "left" : "diagC = square(diagD);",
    "right" : "diagC = square(diagD);",
    "info" : "ExpressionStatement[28536-28558]:ExpressionStatement[28536-28558]"
  }, {
    "left" : "pc = zeros(dimension, 1);",
    "right" : "pc = zeros(dimension, 1);",
    "info" : "ExpressionStatement[28567-28592]:ExpressionStatement[28567-28592]"
  }, {
    "left" : "ps = zeros(dimension, 1);",
    "right" : "ps = zeros(dimension, 1);",
    "info" : "ExpressionStatement[28636-28661]:ExpressionStatement[28636-28661]"
  }, {
    "left" : "normps = ps.getFrobeniusNorm();",
    "right" : "normps = ps.getFrobeniusNorm();",
    "info" : "ExpressionStatement[28705-28736]:ExpressionStatement[28705-28736]"
  }, {
    "left" : "B = eye(dimension, dimension);",
    "right" : "B = eye(dimension, dimension);",
    "info" : "ExpressionStatement[28746-28776]:ExpressionStatement[28746-28776]"
  }, {
    "left" : "D = ones(dimension, 1);",
    "right" : "D = ones(dimension, 1);",
    "info" : "ExpressionStatement[28785-28808]:ExpressionStatement[28785-28808]"
  }, {
    "left" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
    "right" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
    "info" : "ExpressionStatement[28851-28906]:ExpressionStatement[28851-28906]"
  }, {
    "left" : "C = B.multiply(diag(square(D)).multiply(B.transpose()));",
    "right" : "C = B.multiply(diag(square(D)).multiply(B.transpose()));",
    "info" : "ExpressionStatement[28915-28971]:ExpressionStatement[28915-28971]"
  }, {
    "left" : "historySize = 10 + (int) (3. * 10. * dimension / lambda);",
    "right" : "historySize = 10 + (int) (3. * 10. * dimension / lambda);",
    "info" : "ExpressionStatement[28994-29051]:ExpressionStatement[28994-29051]"
  }, {
    "left" : "fitnessHistory = new double[historySize];",
    "right" : "fitnessHistory = new double[historySize];",
    "info" : "ExpressionStatement[29060-29101]:ExpressionStatement[29060-29101]"
  }, {
    "left" : "for (int i = 0; i < historySize; i++)",
    "right" : "for (int i = 0; i < historySize; i++)",
    "info" : "ForStatement[29139-29238]:ForStatement[29139-29238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29177-29238]:Block[29177-29238]"
  }, {
    "left" : "fitnessHistory[i] = Double.MAX_VALUE;",
    "right" : "fitnessHistory[i] = Double.MAX_VALUE;",
    "info" : "ExpressionStatement[29191-29228]:ExpressionStatement[29191-29228]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29549-29556]:Modifier[29549-29556]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29557-29564]:PrimitiveType[29557-29564]"
  }, {
    "left" : "updateEvolutionPaths",
    "right" : "updateEvolutionPaths",
    "info" : "SimpleName[29565-29585]:SimpleName[29565-29585]"
  }, {
    "left" : "RealMatrix zmean",
    "right" : "RealMatrix zmean",
    "info" : "SingleVariableDeclaration[29586-29602]:SingleVariableDeclaration[29586-29602]"
  }, {
    "left" : "RealMatrix xold",
    "right" : "RealMatrix xold",
    "info" : "SingleVariableDeclaration[29604-29619]:SingleVariableDeclaration[29604-29619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29621-30191]:Block[29621-30191]"
  }, {
    "left" : "ps = ps.scalarMultiply(1. - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        Math.sqrt(cs * (2. - cs) * mueff)));",
    "right" : "ps = ps.scalarMultiply(1. - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        Math.sqrt(cs * (2. - cs) * mueff)));",
    "info" : "ExpressionStatement[29631-29778]:ExpressionStatement[29631-29778]"
  }, {
    "left" : "normps = ps.getFrobeniusNorm();",
    "right" : "normps = ps.getFrobeniusNorm();",
    "info" : "ExpressionStatement[29787-29818]:ExpressionStatement[29787-29818]"
  }, {
    "left" : "boolean hsig = normps /\n            Math.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /\n                chiN < 1.4 + 2. / (dimension + 1.);",
    "right" : "boolean hsig = normps /\n            Math.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /\n                chiN < 1.4 + 2. / (dimension + 1.);",
    "info" : "VariableDeclarationStatement[29827-29967]:VariableDeclarationStatement[29827-29967]"
  }, {
    "left" : "pc = pc.scalarMultiply(1. - cc);",
    "right" : "pc = pc.scalarMultiply(1. - cc);",
    "info" : "ExpressionStatement[29976-30008]:ExpressionStatement[29976-30008]"
  }, {
    "left" : "if (hsig)",
    "right" : "if (hsig)",
    "info" : "IfStatement[30017-30164]:IfStatement[30017-30164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30027-30164]:Block[30027-30164]"
  }, {
    "left" : "pc = pc.add(xmean.subtract(xold).scalarMultiply(\n                    Math.sqrt(cc * (2. - cc) * mueff) / sigma));",
    "right" : "pc = pc.add(xmean.subtract(xold).scalarMultiply(\n                    Math.sqrt(cc * (2. - cc) * mueff) / sigma));",
    "info" : "ExpressionStatement[30041-30154]:ExpressionStatement[30041-30154]"
  }, {
    "left" : "return hsig;",
    "right" : "return hsig;",
    "info" : "ReturnStatement[30173-30185]:ReturnStatement[30173-30185]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30504-30511]:Modifier[30504-30511]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30512-30516]:PrimitiveType[30512-30516]"
  }, {
    "left" : "updateCovarianceDiagonalOnly",
    "right" : "updateCovarianceDiagonalOnly",
    "info" : "SimpleName[30517-30545]:SimpleName[30517-30545]"
  }, {
    "left" : "boolean hsig",
    "right" : "boolean hsig",
    "info" : "SingleVariableDeclaration[30546-30558]:SingleVariableDeclaration[30546-30558]"
  }, {
    "left" : "final RealMatrix bestArz",
    "right" : "final RealMatrix bestArz",
    "info" : "SingleVariableDeclaration[30606-30630]:SingleVariableDeclaration[30606-30630]"
  }, {
    "left" : "final RealMatrix xold",
    "right" : "final RealMatrix xold",
    "info" : "SingleVariableDeclaration[30678-30699]:SingleVariableDeclaration[30678-30699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30701-31486]:Block[30701-31486]"
  }, {
    "left" : "double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);",
    "right" : "double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);",
    "info" : "VariableDeclarationStatement[30754-30807]:VariableDeclarationStatement[30754-30807]"
  }, {
    "left" : "oldFac += 1. - ccov1Sep - ccovmuSep;",
    "right" : "oldFac += 1. - ccov1Sep - ccovmuSep;",
    "info" : "ExpressionStatement[30816-30852]:ExpressionStatement[30816-30852]"
  }, {
    "left" : "diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n                // plus rank one update\n                .add(square(pc).scalarMultiply(ccov1Sep))\n                // plus rank mu update\n                .add((times(diagC, square(bestArz).multiply(weights)))\n                        .scalarMultiply(ccovmuSep));",
    "right" : "diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n                // plus rank one update\n                .add(square(pc).scalarMultiply(ccov1Sep))\n                // plus rank mu update\n                .add((times(diagC, square(bestArz).multiply(weights)))\n                        .scalarMultiply(ccovmuSep));",
    "info" : "ExpressionStatement[30861-31179]:ExpressionStatement[30861-31179]"
  }, {
    "left" : "diagD = sqrt(diagC);",
    "right" : "diagD = sqrt(diagC);",
    "info" : "ExpressionStatement[31188-31208]:ExpressionStatement[31188-31208]"
  }, {
    "left" : "if (diagonalOnly > 1 && iterations > diagonalOnly)",
    "right" : "if (diagonalOnly > 1 && iterations > diagonalOnly)",
    "info" : "IfStatement[31236-31480]:IfStatement[31236-31480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31287-31480]:Block[31287-31480]"
  }, {
    "left" : "diagonalOnly = 0;",
    "right" : "diagonalOnly = 0;",
    "info" : "ExpressionStatement[31351-31368]:ExpressionStatement[31351-31368]"
  }, {
    "left" : "B = eye(dimension, dimension);",
    "right" : "B = eye(dimension, dimension);",
    "info" : "ExpressionStatement[31381-31411]:ExpressionStatement[31381-31411]"
  }, {
    "left" : "BD = diag(diagD);",
    "right" : "BD = diag(diagD);",
    "info" : "ExpressionStatement[31424-31441]:ExpressionStatement[31424-31441]"
  }, {
    "left" : "C = diag(diagC);",
    "right" : "C = diag(diagC);",
    "info" : "ExpressionStatement[31454-31470]:ExpressionStatement[31454-31470]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31970-31977]:Modifier[31970-31977]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31978-31982]:PrimitiveType[31978-31982]"
  }, {
    "left" : "updateCovariance",
    "right" : "updateCovariance",
    "info" : "SimpleName[31983-31999]:SimpleName[31983-31999]"
  }, {
    "left" : "boolean hsig",
    "right" : "boolean hsig",
    "info" : "SingleVariableDeclaration[32000-32012]:SingleVariableDeclaration[32000-32012]"
  }, {
    "left" : "final RealMatrix bestArx",
    "right" : "final RealMatrix bestArx",
    "info" : "SingleVariableDeclaration[32014-32038]:SingleVariableDeclaration[32014-32038]"
  }, {
    "left" : "final RealMatrix arz",
    "right" : "final RealMatrix arz",
    "info" : "SingleVariableDeclaration[32052-32072]:SingleVariableDeclaration[32052-32072]"
  }, {
    "left" : "final int[] arindex",
    "right" : "final int[] arindex",
    "info" : "SingleVariableDeclaration[32074-32093]:SingleVariableDeclaration[32074-32093]"
  }, {
    "left" : "final RealMatrix xold",
    "right" : "final RealMatrix xold",
    "info" : "SingleVariableDeclaration[32095-32116]:SingleVariableDeclaration[32095-32116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32118-35635]:Block[32118-35635]"
  }, {
    "left" : "double negccov = 0;",
    "right" : "double negccov = 0;",
    "info" : "VariableDeclarationStatement[32128-32147]:VariableDeclarationStatement[32128-32147]"
  }, {
    "left" : "if (ccov1 + ccovmu > 0)",
    "right" : "if (ccov1 + ccovmu > 0)",
    "info" : "IfStatement[32156-35602]:IfStatement[32156-35602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32180-35602]:Block[32180-35602]"
  }, {
    "left" : "RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                    .scalarMultiply(1. / sigma);",
    "right" : "RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                    .scalarMultiply(1. / sigma);",
    "info" : "VariableDeclarationStatement[32194-32299]:VariableDeclarationStatement[32194-32299]"
  }, {
    "left" : "RealMatrix roneu = pc.multiply(pc.transpose())\n                    .scalarMultiply(ccov1);",
    "right" : "RealMatrix roneu = pc.multiply(pc.transpose())\n                    .scalarMultiply(ccov1);",
    "info" : "VariableDeclarationStatement[32337-32427]:VariableDeclarationStatement[32337-32427]"
  }, {
    "left" : "double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);",
    "right" : "double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);",
    "info" : "VariableDeclarationStatement[32506-32556]:VariableDeclarationStatement[32506-32556]"
  }, {
    "left" : "oldFac += 1. - ccov1 - ccovmu;",
    "right" : "oldFac += 1. - ccov1 - ccovmu;",
    "info" : "ExpressionStatement[32569-32599]:ExpressionStatement[32569-32599]"
  }, {
    "left" : "if (isActiveCMA)",
    "right" : "if (isActiveCMA)",
    "info" : "IfStatement[32612-35592]:IfStatement[32612-35592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32629-35093]:Block[32629-35093]"
  }, {
    "left" : "negccov = (1. - ccovmu) * 0.25 * mueff /\n                (Math.pow(dimension + 2., 1.5) + 2. * mueff);",
    "right" : "negccov = (1. - ccovmu) * 0.25 * mueff /\n                (Math.pow(dimension + 2., 1.5) + 2. * mueff);",
    "info" : "ExpressionStatement[32703-32805]:ExpressionStatement[32703-32805]"
  }, {
    "left" : "double negminresidualvariance = 0.66;",
    "right" : "double negminresidualvariance = 0.66;",
    "info" : "VariableDeclarationStatement[32822-32859]:VariableDeclarationStatement[32822-32859]"
  }, {
    "left" : "double negalphaold = 0.5;",
    "right" : "double negalphaold = 0.5;",
    "info" : "VariableDeclarationStatement[32984-33009]:VariableDeclarationStatement[32984-33009]"
  }, {
    "left" : "int[] arReverseIndex = reverse(arindex);",
    "right" : "int[] arReverseIndex = reverse(arindex);",
    "info" : "VariableDeclarationStatement[33188-33228]:VariableDeclarationStatement[33188-33228]"
  }, {
    "left" : "RealMatrix arzneg\n                    = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",
    "right" : "RealMatrix arzneg\n                    = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",
    "info" : "VariableDeclarationStatement[33245-33343]:VariableDeclarationStatement[33245-33343]"
  }, {
    "left" : "RealMatrix arnorms = sqrt(sumRows(square(arzneg)));",
    "right" : "RealMatrix arnorms = sqrt(sumRows(square(arzneg)));",
    "info" : "VariableDeclarationStatement[33360-33411]:VariableDeclarationStatement[33360-33411]"
  }, {
    "left" : "int[] idxnorms = sortedIndices(arnorms.getRow(0));",
    "right" : "int[] idxnorms = sortedIndices(arnorms.getRow(0));",
    "info" : "VariableDeclarationStatement[33428-33478]:VariableDeclarationStatement[33428-33478]"
  }, {
    "left" : "RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",
    "right" : "RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",
    "info" : "VariableDeclarationStatement[33495-33555]:VariableDeclarationStatement[33495-33555]"
  }, {
    "left" : "int[] idxReverse = reverse(idxnorms);",
    "right" : "int[] idxReverse = reverse(idxnorms);",
    "info" : "VariableDeclarationStatement[33572-33609]:VariableDeclarationStatement[33572-33609]"
  }, {
    "left" : "RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",
    "right" : "RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",
    "info" : "VariableDeclarationStatement[33626-33689]:VariableDeclarationStatement[33626-33689]"
  }, {
    "left" : "arnorms = divide(arnormsReverse, arnormsSorted);",
    "right" : "arnorms = divide(arnormsReverse, arnormsSorted);",
    "info" : "ExpressionStatement[33706-33754]:ExpressionStatement[33706-33754]"
  }, {
    "left" : "int[] idxInv = inverse(idxnorms);",
    "right" : "int[] idxInv = inverse(idxnorms);",
    "info" : "VariableDeclarationStatement[33771-33804]:VariableDeclarationStatement[33771-33804]"
  }, {
    "left" : "RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",
    "right" : "RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",
    "info" : "VariableDeclarationStatement[33821-33876]:VariableDeclarationStatement[33821-33876]"
  }, {
    "left" : "double negcovMax = (1. - negminresidualvariance) /\n                        square(arnormsInv).multiply(weights).getEntry(0, 0);",
    "right" : "double negcovMax = (1. - negminresidualvariance) /\n                        square(arnormsInv).multiply(weights).getEntry(0, 0);",
    "info" : "VariableDeclarationStatement[33948-34075]:VariableDeclarationStatement[33948-34075]"
  }, {
    "left" : "if (negccov > negcovMax)",
    "right" : "if (negccov > negcovMax)",
    "info" : "IfStatement[34092-34177]:IfStatement[34092-34177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34117-34177]:Block[34117-34177]"
  }, {
    "left" : "negccov = negcovMax;",
    "right" : "negccov = negcovMax;",
    "info" : "ExpressionStatement[34139-34159]:ExpressionStatement[34139-34159]"
  }, {
    "left" : "arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",
    "right" : "arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",
    "info" : "ExpressionStatement[34194-34251]:ExpressionStatement[34194-34251]"
  }, {
    "left" : "RealMatrix artmp = BD.multiply(arzneg);",
    "right" : "RealMatrix artmp = BD.multiply(arzneg);",
    "info" : "VariableDeclarationStatement[34268-34307]:VariableDeclarationStatement[34268-34307]"
  }, {
    "left" : "RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(\n                        artmp.transpose());",
    "right" : "RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(\n                        artmp.transpose());",
    "info" : "VariableDeclarationStatement[34324-34425]:VariableDeclarationStatement[34324-34425]"
  }, {
    "left" : "oldFac += negalphaold * negccov;",
    "right" : "oldFac += negalphaold * negccov;",
    "info" : "ExpressionStatement[34442-34474]:ExpressionStatement[34442-34474]"
  }, {
    "left" : "C = C.scalarMultiply(oldFac)\n                        // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(\n                                // plus rank mu update\n                                ccovmu + (1. - negalphaold) * negccov)\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())))\n                        .subtract(Cneg.scalarMultiply(negccov));",
    "right" : "C = C.scalarMultiply(oldFac)\n                        // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(\n                                // plus rank mu update\n                                ccovmu + (1. - negalphaold) * negccov)\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())))\n                        .subtract(Cneg.scalarMultiply(negccov));",
    "info" : "ExpressionStatement[34491-35079]:ExpressionStatement[34491-35079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35099-35592]:Block[35099-35592]"
  }, {
    "left" : "C = C.scalarMultiply(oldFac) // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())));",
    "right" : "C = C.scalarMultiply(oldFac) // regard old matrix\n                        .add(roneu)\n                        // plus rank one update\n                        .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                                .multiply(\n                                        times(repmat(weights, 1, dimension),\n                                                arpos.transpose())));",
    "info" : "ExpressionStatement[35174-35578]:ExpressionStatement[35174-35578]"
  }, {
    "left" : "updateBD(negccov);",
    "right" : "updateBD(negccov);",
    "info" : "ExpressionStatement[35611-35629]:ExpressionStatement[35611-35629]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35744-35751]:Modifier[35744-35751]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35752-35756]:PrimitiveType[35752-35756]"
  }, {
    "left" : "updateBD",
    "right" : "updateBD",
    "info" : "SimpleName[35757-35765]:SimpleName[35757-35765]"
  }, {
    "left" : "double negccov",
    "right" : "double negccov",
    "info" : "SingleVariableDeclaration[35766-35780]:SingleVariableDeclaration[35766-35780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35782-37180]:Block[35782-37180]"
  }, {
    "left" : "if (ccov1 + ccovmu + negccov > 0 &&\n                (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.)",
    "right" : "if (ccov1 + ccovmu + negccov > 0 &&\n                (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.)",
    "info" : "IfStatement[35792-37174]:IfStatement[35792-37174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35915-37174]:Block[35915-37174]"
  }, {
    "left" : "C = triu(C, 0).add(triu(C, 1).transpose());",
    "right" : "C = triu(C, 0).add(triu(C, 1).transpose());",
    "info" : "ExpressionStatement[35962-36005]:ExpressionStatement[35962-36005]"
  }, {
    "left" : "EigenDecomposition eig = new EigenDecomposition(C);",
    "right" : "EigenDecomposition eig = new EigenDecomposition(C);",
    "info" : "VariableDeclarationStatement[36077-36128]:VariableDeclarationStatement[36077-36128]"
  }, {
    "left" : "B = eig.getV();",
    "right" : "B = eig.getV();",
    "info" : "ExpressionStatement[36141-36156]:ExpressionStatement[36141-36156]"
  }, {
    "left" : "D = eig.getD();",
    "right" : "D = eig.getD();",
    "info" : "ExpressionStatement[36220-36235]:ExpressionStatement[36220-36235]"
  }, {
    "left" : "diagD = diag(D);",
    "right" : "diagD = diag(D);",
    "info" : "ExpressionStatement[36248-36264]:ExpressionStatement[36248-36264]"
  }, {
    "left" : "if (min(diagD) <= 0)",
    "right" : "if (min(diagD) <= 0)",
    "info" : "IfStatement[36277-36709]:IfStatement[36277-36709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36298-36709]:Block[36298-36709]"
  }, {
    "left" : "for (int i = 0; i < dimension; i++)",
    "right" : "for (int i = 0; i < dimension; i++)",
    "info" : "ForStatement[36316-36495]:ForStatement[36316-36495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36352-36495]:Block[36352-36495]"
  }, {
    "left" : "if (diagD.getEntry(i, 0) < 0)",
    "right" : "if (diagD.getEntry(i, 0) < 0)",
    "info" : "IfStatement[36374-36477]:IfStatement[36374-36477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36404-36477]:Block[36404-36477]"
  }, {
    "left" : "diagD.setEntry(i, 0, 0.);",
    "right" : "diagD.setEntry(i, 0, 0.);",
    "info" : "ExpressionStatement[36430-36455]:ExpressionStatement[36430-36455]"
  }, {
    "left" : "double tfac = max(diagD) / 1e14;",
    "right" : "double tfac = max(diagD) / 1e14;",
    "info" : "VariableDeclarationStatement[36512-36544]:VariableDeclarationStatement[36512-36544]"
  }, {
    "left" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
    "right" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
    "info" : "ExpressionStatement[36561-36619]:ExpressionStatement[36561-36619]"
  }, {
    "left" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
    "right" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
    "info" : "ExpressionStatement[36636-36695]:ExpressionStatement[36636-36695]"
  }, {
    "left" : "if (max(diagD) > 1e14 * min(diagD))",
    "right" : "if (max(diagD) > 1e14 * min(diagD))",
    "info" : "IfStatement[36722-36986]:IfStatement[36722-36986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36758-36986]:Block[36758-36986]"
  }, {
    "left" : "double tfac = max(diagD) / 1e14 - min(diagD);",
    "right" : "double tfac = max(diagD) / 1e14 - min(diagD);",
    "info" : "VariableDeclarationStatement[36776-36821]:VariableDeclarationStatement[36776-36821]"
  }, {
    "left" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
    "right" : "C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",
    "info" : "ExpressionStatement[36838-36896]:ExpressionStatement[36838-36896]"
  }, {
    "left" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
    "right" : "diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",
    "info" : "ExpressionStatement[36913-36972]:ExpressionStatement[36913-36972]"
  }, {
    "left" : "diagC = diag(C);",
    "right" : "diagC = diag(C);",
    "info" : "ExpressionStatement[36999-37015]:ExpressionStatement[36999-37015]"
  }, {
    "left" : "diagD = sqrt(diagD);",
    "right" : "diagD = sqrt(diagD);",
    "info" : "ExpressionStatement[37028-37048]:ExpressionStatement[37028-37048]"
  }, {
    "left" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
    "right" : "BD = times(B, repmat(diagD.transpose(), dimension, 1));",
    "info" : "ExpressionStatement[37099-37154]:ExpressionStatement[37099-37154]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37354-37361]:Modifier[37354-37361]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37362-37368]:Modifier[37362-37368]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37369-37373]:PrimitiveType[37369-37373]"
  }, {
    "left" : "push",
    "right" : "push",
    "info" : "SimpleName[37374-37378]:SimpleName[37374-37378]"
  }, {
    "left" : "double[] vals",
    "right" : "double[] vals",
    "info" : "SingleVariableDeclaration[37379-37392]:SingleVariableDeclaration[37379-37392]"
  }, {
    "left" : "double val",
    "right" : "double val",
    "info" : "SingleVariableDeclaration[37394-37404]:SingleVariableDeclaration[37394-37404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37406-37529]:Block[37406-37529]"
  }, {
    "left" : "for (int i = vals.length-1; i > 0; i--)",
    "right" : "for (int i = vals.length-1; i > 0; i--)",
    "info" : "ForStatement[37416-37500]:ForStatement[37416-37500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37456-37500]:Block[37456-37500]"
  }, {
    "left" : "vals[i] = vals[i-1];",
    "right" : "vals[i] = vals[i-1];",
    "info" : "ExpressionStatement[37470-37490]:ExpressionStatement[37470-37490]"
  }, {
    "left" : "vals[0] = val;",
    "right" : "vals[0] = val;",
    "info" : "ExpressionStatement[37509-37523]:ExpressionStatement[37509-37523]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37703-37710]:Modifier[37703-37710]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[37711-37716]:ArrayType[37711-37716]"
  }, {
    "left" : "sortedIndices",
    "right" : "sortedIndices",
    "info" : "SimpleName[37717-37730]:SimpleName[37717-37730]"
  }, {
    "left" : "final double[] doubles",
    "right" : "final double[] doubles",
    "info" : "SingleVariableDeclaration[37731-37753]:SingleVariableDeclaration[37731-37753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37755-38136]:Block[37755-38136]"
  }, {
    "left" : "DoubleIndex[] dis = new DoubleIndex[doubles.length];",
    "right" : "DoubleIndex[] dis = new DoubleIndex[doubles.length];",
    "info" : "VariableDeclarationStatement[37765-37817]:VariableDeclarationStatement[37765-37817]"
  }, {
    "left" : "for (int i = 0; i < doubles.length; i++)",
    "right" : "for (int i = 0; i < doubles.length; i++)",
    "info" : "ForStatement[37826-37931]:ForStatement[37826-37931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37867-37931]:Block[37867-37931]"
  }, {
    "left" : "dis[i] = new DoubleIndex(doubles[i], i);",
    "right" : "dis[i] = new DoubleIndex(doubles[i], i);",
    "info" : "ExpressionStatement[37881-37921]:ExpressionStatement[37881-37921]"
  }, {
    "left" : "Arrays.sort(dis);",
    "right" : "Arrays.sort(dis);",
    "info" : "ExpressionStatement[37940-37957]:ExpressionStatement[37940-37957]"
  }, {
    "left" : "int[] indices = new int[doubles.length];",
    "right" : "int[] indices = new int[doubles.length];",
    "info" : "VariableDeclarationStatement[37966-38006]:VariableDeclarationStatement[37966-38006]"
  }, {
    "left" : "for (int i = 0; i < doubles.length; i++)",
    "right" : "for (int i = 0; i < doubles.length; i++)",
    "info" : "ForStatement[38015-38106]:ForStatement[38015-38106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38056-38106]:Block[38056-38106]"
  }, {
    "left" : "indices[i] = dis[i].index;",
    "right" : "indices[i] = dis[i].index;",
    "info" : "ExpressionStatement[38070-38096]:ExpressionStatement[38070-38096]"
  }, {
    "left" : "return indices;",
    "right" : "return indices;",
    "info" : "ReturnStatement[38115-38130]:ReturnStatement[38115-38130]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38247-38254]:Modifier[38247-38254]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38255-38261]:Modifier[38255-38261]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[38262-38267]:TYPE_DECLARATION_KIND[38262-38267]"
  }, {
    "left" : "DoubleIndex",
    "right" : "DoubleIndex",
    "info" : "SimpleName[38571-38582]:SimpleName[38571-38582]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[38583-38595]:SingleVariableDeclaration[38583-38595]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[38597-38606]:SingleVariableDeclaration[38597-38606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38608-38683]:Block[38608-38683]"
  }, {
    "left" : "this.value = value;",
    "right" : "this.value = value;",
    "info" : "ExpressionStatement[38622-38641]:ExpressionStatement[38622-38641]"
  }, {
    "left" : "this.index = index;",
    "right" : "this.index = index;",
    "info" : "ExpressionStatement[38654-38673]:ExpressionStatement[38654-38673]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38722-38728]:Modifier[38722-38728]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[38729-38732]:PrimitiveType[38729-38732]"
  }, {
    "left" : "compareTo",
    "right" : "compareTo",
    "info" : "SimpleName[38733-38742]:SimpleName[38733-38742]"
  }, {
    "left" : "DoubleIndex o",
    "right" : "DoubleIndex o",
    "info" : "SingleVariableDeclaration[38743-38756]:SingleVariableDeclaration[38743-38756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38758-38820]:Block[38758-38820]"
  }, {
    "left" : "return Double.compare(value, o.value);",
    "right" : "return Double.compare(value, o.value);",
    "info" : "ReturnStatement[38772-38810]:ReturnStatement[38772-38810]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[38859-38868]:MarkerAnnotation[38859-38868]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38877-38883]:Modifier[38877-38883]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38884-38891]:PrimitiveType[38884-38891]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[38892-38898]:SimpleName[38892-38898]"
  }, {
    "left" : "Object other",
    "right" : "Object other",
    "info" : "SingleVariableDeclaration[38899-38911]:SingleVariableDeclaration[38899-38911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38913-39172]:Block[38913-39172]"
  }, {
    "left" : "if (this == other)",
    "right" : "if (this == other)",
    "info" : "IfStatement[38928-38991]:IfStatement[38928-38991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38947-38991]:Block[38947-38991]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38965-38977]:ReturnStatement[38965-38977]"
  }, {
    "left" : "if (other instanceof DoubleIndex)",
    "right" : "if (other instanceof DoubleIndex)",
    "info" : "IfStatement[39005-39134]:IfStatement[39005-39134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39039-39134]:Block[39039-39134]"
  }, {
    "left" : "return Double.compare(value, ((DoubleIndex) other).value) == 0;",
    "right" : "return Double.compare(value, ((DoubleIndex) other).value) == 0;",
    "info" : "ReturnStatement[39057-39120]:ReturnStatement[39057-39120]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39148-39161]:ReturnStatement[39148-39161]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[39211-39220]:MarkerAnnotation[39211-39220]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39229-39235]:Modifier[39229-39235]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[39236-39239]:PrimitiveType[39236-39239]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[39240-39248]:SimpleName[39240-39248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39251-39392]:Block[39251-39392]"
  }, {
    "left" : "long bits = Double.doubleToLongBits(value);",
    "right" : "long bits = Double.doubleToLongBits(value);",
    "info" : "VariableDeclarationStatement[39265-39308]:VariableDeclarationStatement[39265-39308]"
  }, {
    "left" : "return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);",
    "right" : "return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);",
    "info" : "ReturnStatement[39321-39382]:ReturnStatement[39321-39382]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39593-39600]:Modifier[39593-39600]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[39601-39606]:TYPE_DECLARATION_KIND[39601-39606]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39947-39953]:Modifier[39947-39953]"
  }, {
    "left" : "FitnessFunction",
    "right" : "FitnessFunction",
    "info" : "SimpleName[39954-39969]:SimpleName[39954-39969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39972-40046]:Block[39972-40046]"
  }, {
    "left" : "valueRange = 1.0;",
    "right" : "valueRange = 1.0;",
    "info" : "ExpressionStatement[39986-40003]:ExpressionStatement[39986-40003]"
  }, {
    "left" : "isRepairMode = true;",
    "right" : "isRepairMode = true;",
    "info" : "ExpressionStatement[40016-40036]:ExpressionStatement[40016-40036]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40185-40191]:Modifier[40185-40191]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[40192-40200]:ArrayType[40192-40200]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[40201-40207]:SimpleName[40201-40207]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[40208-40224]:SingleVariableDeclaration[40208-40224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40226-40577]:Block[40226-40556]"
  }, {
    "left" : "if (boundaries == null)",
    "right" : "if (boundaries == null)",
    "info" : "IfStatement[40240-40305]:IfStatement[40240-40305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40264-40305]:Block[40264-40305]"
  }, {
    "left" : "return x;",
    "right" : "return x;",
    "info" : "ReturnStatement[40282-40291]:ReturnStatement[40282-40291]"
  }, {
    "left" : "double[] res = new double[x.length];",
    "right" : "double[] res = new double[x.length];",
    "info" : "VariableDeclarationStatement[40318-40354]:VariableDeclarationStatement[40318-40354]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++)",
    "right" : "for (int i = 0; i < x.length; i++)",
    "info" : "ForStatement[40367-40543]:ForStatement[40367-40522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40402-40543]:Block[40402-40522]"
  }, {
    "left" : "double diff = boundaries[1][i] - boundaries[0][i];",
    "right" : "double diff = boundaries[1][i] - boundaries[0][i];",
    "info" : "VariableDeclarationStatement[40420-40470]:VariableDeclarationStatement[40420-40470]"
  }, {
    "left" : "res[i] = (x[i] - boundaries[0][i]) / diff;",
    "right" : "res[i] = x[i] / diff;",
    "info" : "ExpressionStatement[40487-40529]:ExpressionStatement[40487-40508]"
  }, {
    "left" : "x[i] - boundaries[0][i]",
    "right" : "x[i] / diff",
    "info" : "InfixExpression[40497-40520]:InfixExpression[40496-40507]"
  }, {
    "left" : "/",
    "right" : "/",
    "info" : "INFIX_EXPRESSION_OPERATOR[40522-40523]:INFIX_EXPRESSION_OPERATOR[40501-40502]"
  }, {
    "left" : "diff",
    "right" : "diff",
    "info" : "SimpleName[40524-40528]:SimpleName[40503-40507]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[40556-40567]:ReturnStatement[40535-40546]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40735-40741]:Modifier[40714-40720]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[40742-40750]:ArrayType[40721-40729]"
  }, {
    "left" : "repairAndDecode",
    "right" : "repairAndDecode",
    "info" : "SimpleName[40751-40766]:SimpleName[40730-40745]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[40767-40783]:SingleVariableDeclaration[40746-40762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40785-40915]:Block[40764-40894]"
  }, {
    "left" : "return boundaries != null && isRepairMode ?\n                decode(repair(x)) :\n                decode(x);",
    "right" : "return boundaries != null && isRepairMode ?\n                decode(repair(x)) :\n                decode(x);",
    "info" : "ReturnStatement[40799-40905]:ReturnStatement[40778-40884]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41054-41060]:Modifier[41033-41039]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[41061-41069]:ArrayType[41040-41048]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[41070-41076]:SimpleName[41049-41055]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[41077-41093]:SingleVariableDeclaration[41056-41072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41095-41444]:Block[41074-41404]"
  }, {
    "left" : "if (boundaries == null)",
    "right" : "if (boundaries == null)",
    "info" : "IfStatement[41109-41174]:IfStatement[41088-41153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41133-41174]:Block[41112-41153]"
  }, {
    "left" : "return x;",
    "right" : "return x;",
    "info" : "ReturnStatement[41151-41160]:ReturnStatement[41130-41139]"
  }, {
    "left" : "double[] res = new double[x.length];",
    "right" : "double[] res = new double[x.length];",
    "info" : "VariableDeclarationStatement[41187-41223]:VariableDeclarationStatement[41166-41202]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++)",
    "right" : "for (int i = 0; i < x.length; i++)",
    "info" : "ForStatement[41236-41410]:ForStatement[41215-41370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41271-41410]:Block[41250-41370]"
  }, {
    "left" : "double diff = boundaries[1][i] - boundaries[0][i];",
    "right" : "double diff = boundaries[1][i] - boundaries[0][i];",
    "info" : "VariableDeclarationStatement[41289-41339]:VariableDeclarationStatement[41268-41318]"
  }, {
    "left" : "res[i] = diff * x[i] + boundaries[0][i];",
    "right" : "res[i] = diff * x[i];",
    "info" : "ExpressionStatement[41356-41396]:ExpressionStatement[41335-41356]"
  }, {
    "left" : "diff * x[i]",
    "right" : "diff * x[i]",
    "info" : "InfixExpression[41365-41376]:InfixExpression[41344-41355]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[41423-41434]:ReturnStatement[41383-41394]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41604-41610]:Modifier[41564-41570]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[41611-41617]:PrimitiveType[41571-41577]"
  }, {
    "left" : "value",
    "right" : "value",
    "info" : "SimpleName[41618-41623]:SimpleName[41578-41583]"
  }, {
    "left" : "final double[] point",
    "right" : "final double[] point",
    "info" : "SingleVariableDeclaration[41624-41644]:SingleVariableDeclaration[41584-41604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41646-42139]:Block[41606-42099]"
  }, {
    "left" : "double value;",
    "right" : "double value;",
    "info" : "VariableDeclarationStatement[41660-41673]:VariableDeclarationStatement[41620-41633]"
  }, {
    "left" : "if (boundaries != null && isRepairMode)",
    "right" : "if (boundaries != null && isRepairMode)",
    "info" : "IfStatement[41686-42081]:IfStatement[41646-42041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41726-41953]:Block[41686-41913]"
  }, {
    "left" : "double[] repaired = repair(point);",
    "right" : "double[] repaired = repair(point);",
    "info" : "VariableDeclarationStatement[41744-41778]:VariableDeclarationStatement[41704-41738]"
  }, {
    "left" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(repaired)) +\n                        penalty(point, repaired);",
    "right" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(repaired)) +\n                        penalty(point, repaired);",
    "info" : "ExpressionStatement[41795-41939]:ExpressionStatement[41755-41899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41959-42081]:Block[41919-42041]"
  }, {
    "left" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(point));",
    "right" : "value = CMAESOptimizer.this\n                        .computeObjectiveValue(decode(point));",
    "info" : "ExpressionStatement[41977-42067]:ExpressionStatement[41937-42027]"
  }, {
    "left" : "return isMinimize ? value : -value;",
    "right" : "return isMinimize ? value : -value;",
    "info" : "ReturnStatement[42094-42129]:ReturnStatement[42054-42089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42271-42277]:Modifier[42231-42237]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42278-42285]:PrimitiveType[42238-42245]"
  }, {
    "left" : "isFeasible",
    "right" : "isFeasible",
    "info" : "SimpleName[42286-42296]:SimpleName[42246-42256]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[42297-42313]:SingleVariableDeclaration[42257-42273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42315-42667]:Block[42275-42759]"
  }, {
    "left" : "if (boundaries == null)",
    "right" : "if (boundaries == null)",
    "info" : "IfStatement[42329-42397]:IfStatement[42289-42357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42353-42397]:Block[42313-42357]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42371-42383]:ReturnStatement[42331-42343]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++)",
    "right" : "for (int i = 0; i < x.length; i++)",
    "info" : "ForStatement[42412-42632]:ForStatement[42490-42724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42447-42632]:Block[42525-42724]"
  }, {
    "left" : "if (x[i] < 0)",
    "right" : "if (x[i] < bLoEnc[i])",
    "info" : "IfStatement[42465-42532]:IfStatement[42543-42618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42479-42532]:Block[42565-42618]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[42501-42514]:ReturnStatement[42587-42600]"
  }, {
    "left" : "if (x[i] > 1.0)",
    "right" : "if (x[i] > bHiEnc[i])",
    "info" : "IfStatement[42549-42618]:IfStatement[42635-42710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42565-42618]:Block[42657-42710]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[42587-42600]:ReturnStatement[42679-42692]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42645-42657]:ReturnStatement[42737-42749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42763-42769]:Modifier[42855-42861]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42770-42774]:PrimitiveType[42862-42866]"
  }, {
    "left" : "setValueRange",
    "right" : "setValueRange",
    "info" : "SimpleName[42775-42788]:SimpleName[42867-42880]"
  }, {
    "left" : "double valueRange",
    "right" : "double valueRange",
    "info" : "SingleVariableDeclaration[42789-42806]:SingleVariableDeclaration[42881-42898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42808-42861]:Block[42900-42953]"
  }, {
    "left" : "this.valueRange = valueRange;",
    "right" : "this.valueRange = valueRange;",
    "info" : "ExpressionStatement[42822-42851]:ExpressionStatement[42914-42943]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43016-43023]:Modifier[43108-43115]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[43024-43032]:ArrayType[43116-43124]"
  }, {
    "left" : "repair",
    "right" : "repair",
    "info" : "SimpleName[43033-43039]:SimpleName[43125-43131]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[43040-43056]:SingleVariableDeclaration[43132-43148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43058-43447]:Block[43150-43539]"
  }, {
    "left" : "double[] repaired = new double[x.length];",
    "right" : "double[] repaired = new double[x.length];",
    "info" : "VariableDeclarationStatement[43072-43113]:VariableDeclarationStatement[43164-43205]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++)",
    "right" : "for (int i = 0; i < x.length; i++)",
    "info" : "ForStatement[43126-43408]:ForStatement[43218-43500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43161-43408]:Block[43253-43500]"
  }, {
    "left" : "if (x[i] < 0)",
    "right" : "if (x[i] < 0)",
    "info" : "IfStatement[43179-43394]:IfStatement[43271-43486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43193-43249]:Block[43285-43341]"
  }, {
    "left" : "repaired[i] = 0;",
    "right" : "repaired[i] = 0;",
    "info" : "ExpressionStatement[43215-43231]:ExpressionStatement[43307-43323]"
  }, {
    "left" : "if (x[i] > 1.0)",
    "right" : "if (x[i] > 1.0)",
    "info" : "IfStatement[43255-43394]:IfStatement[43347-43486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43271-43329]:Block[43363-43421]"
  }, {
    "left" : "repaired[i] = 1.0;",
    "right" : "repaired[i] = 1.0;",
    "info" : "ExpressionStatement[43293-43311]:ExpressionStatement[43385-43403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43335-43394]:Block[43427-43486]"
  }, {
    "left" : "repaired[i] = x[i];",
    "right" : "repaired[i] = x[i];",
    "info" : "ExpressionStatement[43357-43376]:ExpressionStatement[43449-43468]"
  }, {
    "left" : "return repaired;",
    "right" : "return repaired;",
    "info" : "ReturnStatement[43421-43437]:ReturnStatement[43513-43529]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43665-43672]:Modifier[43757-43764]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[43673-43679]:PrimitiveType[43765-43771]"
  }, {
    "left" : "penalty",
    "right" : "penalty",
    "info" : "SimpleName[43680-43687]:SimpleName[43772-43779]"
  }, {
    "left" : "final double[] x",
    "right" : "final double[] x",
    "info" : "SingleVariableDeclaration[43688-43704]:SingleVariableDeclaration[43780-43796]"
  }, {
    "left" : "final double[] repaired",
    "right" : "final double[] repaired",
    "info" : "SingleVariableDeclaration[43706-43729]:SingleVariableDeclaration[43798-43821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43731-43995]:Block[43823-44087]"
  }, {
    "left" : "double penalty = 0;",
    "right" : "double penalty = 0;",
    "info" : "VariableDeclarationStatement[43745-43764]:VariableDeclarationStatement[43837-43856]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++)",
    "right" : "for (int i = 0; i < x.length; i++)",
    "info" : "ForStatement[43777-43933]:ForStatement[43869-44025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43812-43933]:Block[43904-44025]"
  }, {
    "left" : "double diff = Math.abs(x[i] - repaired[i]);",
    "right" : "double diff = Math.abs(x[i] - repaired[i]);",
    "info" : "VariableDeclarationStatement[43830-43873]:VariableDeclarationStatement[43922-43965]"
  }, {
    "left" : "penalty += diff * valueRange;",
    "right" : "penalty += diff * valueRange;",
    "info" : "ExpressionStatement[43890-43919]:ExpressionStatement[43982-44011]"
  }, {
    "left" : "return isMinimize ? penalty : -penalty;",
    "right" : "return isMinimize ? penalty : -penalty;",
    "info" : "ReturnStatement[43946-43985]:ReturnStatement[44038-44077]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44205-44212]:Modifier[44297-44304]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44213-44219]:Modifier[44305-44311]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[44220-44230]:SimpleType[44312-44322]"
  }, {
    "left" : "log",
    "right" : "log",
    "info" : "SimpleName[44231-44234]:SimpleName[44323-44326]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[44235-44253]:SingleVariableDeclaration[44327-44345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44255-44590]:Block[44347-44682]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[44265-44336]:VariableDeclarationStatement[44357-44428]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[44345-44533]:ForStatement[44437-44625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44391-44533]:Block[44483-44625]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[44405-44523]:ForStatement[44497-44615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44454-44523]:Block[44546-44615]"
  }, {
    "left" : "d[r][c] = Math.log(m.getEntry(r, c));",
    "right" : "d[r][c] = Math.log(m.getEntry(r, c));",
    "info" : "ExpressionStatement[44472-44509]:ExpressionStatement[44564-44601]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[44542-44584]:ReturnStatement[44634-44676]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44729-44736]:Modifier[44821-44828]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44737-44743]:Modifier[44829-44835]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[44744-44754]:SimpleType[44836-44846]"
  }, {
    "left" : "sqrt",
    "right" : "sqrt",
    "info" : "SimpleName[44755-44759]:SimpleName[44847-44851]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[44760-44778]:SingleVariableDeclaration[44852-44870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44780-45116]:Block[44872-45208]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[44790-44861]:VariableDeclarationStatement[44882-44953]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[44870-45059]:ForStatement[44962-45151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44916-45059]:Block[45008-45151]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[44930-45049]:ForStatement[45022-45141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44979-45049]:Block[45071-45141]"
  }, {
    "left" : "d[r][c] = Math.sqrt(m.getEntry(r, c));",
    "right" : "d[r][c] = Math.sqrt(m.getEntry(r, c));",
    "info" : "ExpressionStatement[44997-45035]:ExpressionStatement[45089-45127]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[45068-45110]:ReturnStatement[45160-45202]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45237-45244]:Modifier[45329-45336]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45245-45251]:Modifier[45337-45343]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[45252-45262]:SimpleType[45344-45354]"
  }, {
    "left" : "square",
    "right" : "square",
    "info" : "SimpleName[45263-45269]:SimpleName[45355-45361]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[45270-45288]:SingleVariableDeclaration[45362-45380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45290-45649]:Block[45382-45741]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[45300-45371]:VariableDeclarationStatement[45392-45463]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[45380-45592]:ForStatement[45472-45684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45426-45592]:Block[45518-45684]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[45440-45582]:ForStatement[45532-45674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45489-45582]:Block[45581-45674]"
  }, {
    "left" : "double e = m.getEntry(r, c);",
    "right" : "double e = m.getEntry(r, c);",
    "info" : "VariableDeclarationStatement[45507-45535]:VariableDeclarationStatement[45599-45627]"
  }, {
    "left" : "d[r][c] = e * e;",
    "right" : "d[r][c] = e * e;",
    "info" : "ExpressionStatement[45552-45568]:ExpressionStatement[45644-45660]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[45601-45643]:ReturnStatement[45693-45735]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45820-45827]:Modifier[45912-45919]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45828-45834]:Modifier[45920-45926]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[45835-45845]:SimpleType[45927-45937]"
  }, {
    "left" : "times",
    "right" : "times",
    "info" : "SimpleName[45846-45851]:SimpleName[45938-45943]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[45852-45870]:SingleVariableDeclaration[45944-45962]"
  }, {
    "left" : "final RealMatrix n",
    "right" : "final RealMatrix n",
    "info" : "SingleVariableDeclaration[45872-45890]:SingleVariableDeclaration[45964-45982]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45892-46236]:Block[45984-46328]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[45902-45973]:VariableDeclarationStatement[45994-46065]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[45982-46179]:ForStatement[46074-46271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46028-46179]:Block[46120-46271]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[46042-46169]:ForStatement[46134-46261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46091-46169]:Block[46183-46261]"
  }, {
    "left" : "d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",
    "right" : "d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",
    "info" : "ExpressionStatement[46109-46155]:ExpressionStatement[46201-46247]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[46188-46230]:ReturnStatement[46280-46322]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46400-46407]:Modifier[46492-46499]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46408-46414]:Modifier[46500-46506]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[46415-46425]:SimpleType[46507-46517]"
  }, {
    "left" : "divide",
    "right" : "divide",
    "info" : "SimpleName[46426-46432]:SimpleName[46518-46524]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[46433-46451]:SingleVariableDeclaration[46525-46543]"
  }, {
    "left" : "final RealMatrix n",
    "right" : "final RealMatrix n",
    "info" : "SingleVariableDeclaration[46453-46471]:SingleVariableDeclaration[46545-46563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46473-46817]:Block[46565-46909]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[46483-46554]:VariableDeclarationStatement[46575-46646]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[46563-46760]:ForStatement[46655-46852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46609-46760]:Block[46701-46852]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[46623-46750]:ForStatement[46715-46842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46672-46750]:Block[46764-46842]"
  }, {
    "left" : "d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",
    "right" : "d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",
    "info" : "ExpressionStatement[46690-46736]:ExpressionStatement[46782-46828]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[46769-46811]:ReturnStatement[46861-46903]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46964-46971]:Modifier[47056-47063]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46972-46978]:Modifier[47064-47070]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[46979-46989]:SimpleType[47071-47081]"
  }, {
    "left" : "selectColumns",
    "right" : "selectColumns",
    "info" : "SimpleName[46990-47003]:SimpleName[47082-47095]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[47004-47022]:SingleVariableDeclaration[47096-47114]"
  }, {
    "left" : "final int[] cols",
    "right" : "final int[] cols",
    "info" : "SingleVariableDeclaration[47024-47040]:SingleVariableDeclaration[47116-47132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47042-47351]:Block[47134-47443]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][cols.length];",
    "right" : "double[][] d = new double[m.getRowDimension()][cols.length];",
    "info" : "VariableDeclarationStatement[47052-47112]:VariableDeclarationStatement[47144-47204]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[47121-47294]:ForStatement[47213-47386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47167-47294]:Block[47259-47386]"
  }, {
    "left" : "for (int c = 0; c < cols.length; c++)",
    "right" : "for (int c = 0; c < cols.length; c++)",
    "info" : "ForStatement[47181-47284]:ForStatement[47273-47376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47219-47284]:Block[47311-47376]"
  }, {
    "left" : "d[r][c] = m.getEntry(r, cols[c]);",
    "right" : "d[r][c] = m.getEntry(r, cols[c]);",
    "info" : "ExpressionStatement[47237-47270]:ExpressionStatement[47329-47362]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[47303-47345]:ReturnStatement[47395-47437]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47486-47493]:Modifier[47578-47585]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47494-47500]:Modifier[47586-47592]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[47501-47511]:SimpleType[47593-47603]"
  }, {
    "left" : "triu",
    "right" : "triu",
    "info" : "SimpleName[47512-47516]:SimpleName[47604-47608]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[47517-47535]:SingleVariableDeclaration[47609-47627]"
  }, {
    "left" : "int k",
    "right" : "int k",
    "info" : "SingleVariableDeclaration[47537-47542]:SingleVariableDeclaration[47629-47634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47544-47886]:Block[47636-47978]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[47554-47625]:VariableDeclarationStatement[47646-47717]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[47634-47829]:ForStatement[47726-47921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47680-47829]:Block[47772-47921]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[47694-47819]:ForStatement[47786-47911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47743-47819]:Block[47835-47911]"
  }, {
    "left" : "d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",
    "right" : "d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",
    "info" : "ExpressionStatement[47761-47805]:ExpressionStatement[47853-47897]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[47838-47880]:ReturnStatement[47930-47972]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47999-48006]:Modifier[48091-48098]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48007-48013]:Modifier[48099-48105]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[48014-48024]:SimpleType[48106-48116]"
  }, {
    "left" : "sumRows",
    "right" : "sumRows",
    "info" : "SimpleName[48025-48032]:SimpleName[48117-48124]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[48033-48051]:SingleVariableDeclaration[48125-48143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48053-48412]:Block[48145-48504]"
  }, {
    "left" : "double[][] d = new double[1][m.getColumnDimension()];",
    "right" : "double[][] d = new double[1][m.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[48063-48116]:VariableDeclarationStatement[48155-48208]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[48125-48355]:ForStatement[48217-48447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48174-48355]:Block[48266-48447]"
  }, {
    "left" : "double sum = 0;",
    "right" : "double sum = 0;",
    "info" : "VariableDeclarationStatement[48188-48203]:VariableDeclarationStatement[48280-48295]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[48216-48318]:ForStatement[48308-48410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48262-48318]:Block[48354-48410]"
  }, {
    "left" : "sum += m.getEntry(r, c);",
    "right" : "sum += m.getEntry(r, c);",
    "info" : "ExpressionStatement[48280-48304]:ExpressionStatement[48372-48396]"
  }, {
    "left" : "d[0][c] = sum;",
    "right" : "d[0][c] = sum;",
    "info" : "ExpressionStatement[48331-48345]:ExpressionStatement[48423-48437]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[48364-48406]:ReturnStatement[48456-48498]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48609-48616]:Modifier[48701-48708]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48617-48623]:Modifier[48709-48715]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[48624-48634]:SimpleType[48716-48726]"
  }, {
    "left" : "diag",
    "right" : "diag",
    "info" : "SimpleName[48635-48639]:SimpleName[48727-48731]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[48640-48658]:SingleVariableDeclaration[48732-48750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48660-49230]:Block[48752-49322]"
  }, {
    "left" : "if (m.getColumnDimension() == 1)",
    "right" : "if (m.getColumnDimension() == 1)",
    "info" : "IfStatement[48670-49224]:IfStatement[48762-49316]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48703-48968]:Block[48795-49060]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][m.getRowDimension()];",
    "right" : "double[][] d = new double[m.getRowDimension()][m.getRowDimension()];",
    "info" : "VariableDeclarationStatement[48717-48785]:VariableDeclarationStatement[48809-48877]"
  }, {
    "left" : "for (int i = 0; i < m.getRowDimension(); i++)",
    "right" : "for (int i = 0; i < m.getRowDimension(); i++)",
    "info" : "ForStatement[48798-48903]:ForStatement[48890-48995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48844-48903]:Block[48936-48995]"
  }, {
    "left" : "d[i][i] = m.getEntry(i, 0);",
    "right" : "d[i][i] = m.getEntry(i, 0);",
    "info" : "ExpressionStatement[48862-48889]:ExpressionStatement[48954-48981]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[48916-48958]:ReturnStatement[49008-49050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48974-49224]:Block[49066-49316]"
  }, {
    "left" : "double[][] d = new double[m.getRowDimension()][1];",
    "right" : "double[][] d = new double[m.getRowDimension()][1];",
    "info" : "VariableDeclarationStatement[48988-49038]:VariableDeclarationStatement[49080-49130]"
  }, {
    "left" : "for (int i = 0; i < m.getColumnDimension(); i++)",
    "right" : "for (int i = 0; i < m.getColumnDimension(); i++)",
    "info" : "ForStatement[49051-49159]:ForStatement[49143-49251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49100-49159]:Block[49192-49251]"
  }, {
    "left" : "d[i][0] = m.getEntry(i, i);",
    "right" : "d[i][0] = m.getEntry(i, i);",
    "info" : "ExpressionStatement[49118-49145]:ExpressionStatement[49210-49237]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[49172-49214]:ReturnStatement[49264-49306]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49431-49438]:Modifier[49523-49530]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49439-49445]:Modifier[49531-49537]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49446-49450]:PrimitiveType[49538-49542]"
  }, {
    "left" : "copyColumn",
    "right" : "copyColumn",
    "info" : "SimpleName[49451-49461]:SimpleName[49543-49553]"
  }, {
    "left" : "final RealMatrix m1",
    "right" : "final RealMatrix m1",
    "info" : "SingleVariableDeclaration[49462-49481]:SingleVariableDeclaration[49554-49573]"
  }, {
    "left" : "int col1",
    "right" : "int col1",
    "info" : "SingleVariableDeclaration[49483-49491]:SingleVariableDeclaration[49575-49583]"
  }, {
    "left" : "RealMatrix m2",
    "right" : "RealMatrix m2",
    "info" : "SingleVariableDeclaration[49493-49506]:SingleVariableDeclaration[49585-49598]"
  }, {
    "left" : "int col2",
    "right" : "int col2",
    "info" : "SingleVariableDeclaration[49508-49516]:SingleVariableDeclaration[49600-49608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49518-49648]:Block[49610-49740]"
  }, {
    "left" : "for (int i = 0; i < m1.getRowDimension(); i++)",
    "right" : "for (int i = 0; i < m1.getRowDimension(); i++)",
    "info" : "ForStatement[49528-49642]:ForStatement[49620-49734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49575-49642]:Block[49667-49734]"
  }, {
    "left" : "m2.setEntry(i, col2, m1.getEntry(i, col1));",
    "right" : "m2.setEntry(i, col2, m1.getEntry(i, col1));",
    "info" : "ExpressionStatement[49589-49632]:ExpressionStatement[49681-49724]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49781-49788]:Modifier[49873-49880]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49789-49795]:Modifier[49881-49887]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[49796-49806]:SimpleType[49888-49898]"
  }, {
    "left" : "ones",
    "right" : "ones",
    "info" : "SimpleName[49807-49811]:SimpleName[49899-49903]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[49812-49817]:SingleVariableDeclaration[49904-49909]"
  }, {
    "left" : "int m",
    "right" : "int m",
    "info" : "SingleVariableDeclaration[49819-49824]:SingleVariableDeclaration[49911-49916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49826-50009]:Block[49918-50101]"
  }, {
    "left" : "double[][] d = new double[n][m];",
    "right" : "double[][] d = new double[n][m];",
    "info" : "VariableDeclarationStatement[49836-49868]:VariableDeclarationStatement[49928-49960]"
  }, {
    "left" : "for (int r = 0; r < n; r++)",
    "right" : "for (int r = 0; r < n; r++)",
    "info" : "ForStatement[49877-49952]:ForStatement[49969-50044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49905-49952]:Block[49997-50044]"
  }, {
    "left" : "Arrays.fill(d[r], 1.0);",
    "right" : "Arrays.fill(d[r], 1.0);",
    "info" : "ExpressionStatement[49919-49942]:ExpressionStatement[50011-50034]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[49961-50003]:ReturnStatement[50053-50095]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50167-50174]:Modifier[50259-50266]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50175-50181]:Modifier[50267-50273]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[50182-50192]:SimpleType[50274-50284]"
  }, {
    "left" : "eye",
    "right" : "eye",
    "info" : "SimpleName[50193-50196]:SimpleName[50285-50288]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[50197-50202]:SingleVariableDeclaration[50289-50294]"
  }, {
    "left" : "int m",
    "right" : "int m",
    "info" : "SingleVariableDeclaration[50204-50209]:SingleVariableDeclaration[50296-50301]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50211-50426]:Block[50303-50518]"
  }, {
    "left" : "double[][] d = new double[n][m];",
    "right" : "double[][] d = new double[n][m];",
    "info" : "VariableDeclarationStatement[50221-50253]:VariableDeclarationStatement[50313-50345]"
  }, {
    "left" : "for (int r = 0; r < n; r++)",
    "right" : "for (int r = 0; r < n; r++)",
    "info" : "ForStatement[50262-50369]:ForStatement[50354-50461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50290-50369]:Block[50382-50461]"
  }, {
    "left" : "if (r < m)",
    "right" : "if (r < m)",
    "info" : "IfStatement[50304-50359]:IfStatement[50396-50451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50315-50359]:Block[50407-50451]"
  }, {
    "left" : "d[r][r] = 1;",
    "right" : "d[r][r] = 1;",
    "info" : "ExpressionStatement[50333-50345]:ExpressionStatement[50425-50437]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[50378-50420]:ReturnStatement[50470-50512]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50559-50566]:Modifier[50651-50658]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50567-50573]:Modifier[50659-50665]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[50574-50584]:SimpleType[50666-50676]"
  }, {
    "left" : "zeros",
    "right" : "zeros",
    "info" : "SimpleName[50585-50590]:SimpleName[50677-50682]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[50591-50596]:SingleVariableDeclaration[50683-50688]"
  }, {
    "left" : "int m",
    "right" : "int m",
    "info" : "SingleVariableDeclaration[50598-50603]:SingleVariableDeclaration[50690-50695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50605-50659]:Block[50697-50751]"
  }, {
    "left" : "return new Array2DRowRealMatrix(n, m);",
    "right" : "return new Array2DRowRealMatrix(n, m);",
    "info" : "ReturnStatement[50615-50653]:ReturnStatement[50707-50745]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50878-50885]:Modifier[50970-50977]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50886-50892]:Modifier[50978-50984]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[50893-50903]:SimpleType[50985-50995]"
  }, {
    "left" : "repmat",
    "right" : "repmat",
    "info" : "SimpleName[50904-50910]:SimpleName[50996-51002]"
  }, {
    "left" : "final RealMatrix mat",
    "right" : "final RealMatrix mat",
    "info" : "SingleVariableDeclaration[50911-50931]:SingleVariableDeclaration[51003-51023]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[50933-50938]:SingleVariableDeclaration[51025-51030]"
  }, {
    "left" : "int m",
    "right" : "int m",
    "info" : "SingleVariableDeclaration[50940-50945]:SingleVariableDeclaration[51032-51037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50947-51309]:Block[51039-51401]"
  }, {
    "left" : "int rd = mat.getRowDimension();",
    "right" : "int rd = mat.getRowDimension();",
    "info" : "VariableDeclarationStatement[50957-50988]:VariableDeclarationStatement[51049-51080]"
  }, {
    "left" : "int cd = mat.getColumnDimension();",
    "right" : "int cd = mat.getColumnDimension();",
    "info" : "VariableDeclarationStatement[50997-51031]:VariableDeclarationStatement[51089-51123]"
  }, {
    "left" : "double[][] d = new double[n * rd][m * cd];",
    "right" : "double[][] d = new double[n * rd][m * cd];",
    "info" : "VariableDeclarationStatement[51040-51082]:VariableDeclarationStatement[51132-51174]"
  }, {
    "left" : "for (int r = 0; r < n * rd; r++)",
    "right" : "for (int r = 0; r < n * rd; r++)",
    "info" : "ForStatement[51091-51252]:ForStatement[51183-51344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51124-51252]:Block[51216-51344]"
  }, {
    "left" : "for (int c = 0; c < m * cd; c++)",
    "right" : "for (int c = 0; c < m * cd; c++)",
    "info" : "ForStatement[51138-51242]:ForStatement[51230-51334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51171-51242]:Block[51263-51334]"
  }, {
    "left" : "d[r][c] = mat.getEntry(r % rd, c % cd);",
    "right" : "d[r][c] = mat.getEntry(r % rd, c % cd);",
    "info" : "ExpressionStatement[51189-51228]:ExpressionStatement[51281-51320]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[51261-51303]:ReturnStatement[51353-51395]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51467-51474]:Modifier[51559-51566]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51475-51481]:Modifier[51567-51573]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[51482-51492]:SimpleType[51574-51584]"
  }, {
    "left" : "sequence",
    "right" : "sequence",
    "info" : "SimpleName[51493-51501]:SimpleName[51585-51593]"
  }, {
    "left" : "double start",
    "right" : "double start",
    "info" : "SingleVariableDeclaration[51502-51514]:SingleVariableDeclaration[51594-51606]"
  }, {
    "left" : "double end",
    "right" : "double end",
    "info" : "SingleVariableDeclaration[51516-51526]:SingleVariableDeclaration[51608-51618]"
  }, {
    "left" : "double step",
    "right" : "double step",
    "info" : "SingleVariableDeclaration[51528-51539]:SingleVariableDeclaration[51620-51631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51541-51833]:Block[51633-51925]"
  }, {
    "left" : "int size = (int) ((end - start) / step + 1);",
    "right" : "int size = (int) ((end - start) / step + 1);",
    "info" : "VariableDeclarationStatement[51551-51595]:VariableDeclarationStatement[51643-51687]"
  }, {
    "left" : "double[][] d = new double[size][1];",
    "right" : "double[][] d = new double[size][1];",
    "info" : "VariableDeclarationStatement[51604-51639]:VariableDeclarationStatement[51696-51731]"
  }, {
    "left" : "double value = start;",
    "right" : "double value = start;",
    "info" : "VariableDeclarationStatement[51648-51669]:VariableDeclarationStatement[51740-51761]"
  }, {
    "left" : "for (int r = 0; r < size; r++)",
    "right" : "for (int r = 0; r < size; r++)",
    "info" : "ForStatement[51678-51776]:ForStatement[51770-51868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51709-51776]:Block[51801-51868]"
  }, {
    "left" : "d[r][0] = value;",
    "right" : "d[r][0] = value;",
    "info" : "ExpressionStatement[51723-51739]:ExpressionStatement[51815-51831]"
  }, {
    "left" : "value += step;",
    "right" : "value += step;",
    "info" : "ExpressionStatement[51752-51766]:ExpressionStatement[51844-51858]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[51785-51827]:ReturnStatement[51877-51919]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51942-51949]:Modifier[52034-52041]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51950-51956]:Modifier[52042-52048]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[51957-51963]:PrimitiveType[52049-52055]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[51964-51967]:SimpleName[52056-52059]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[51968-51986]:SingleVariableDeclaration[52060-52078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51988-52321]:Block[52080-52413]"
  }, {
    "left" : "double max = -Double.MAX_VALUE;",
    "right" : "double max = -Double.MAX_VALUE;",
    "info" : "VariableDeclarationStatement[51998-52029]:VariableDeclarationStatement[52090-52121]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[52038-52295]:ForStatement[52130-52387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52084-52295]:Block[52176-52387]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[52098-52285]:ForStatement[52190-52377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52147-52285]:Block[52239-52377]"
  }, {
    "left" : "double e = m.getEntry(r, c);",
    "right" : "double e = m.getEntry(r, c);",
    "info" : "VariableDeclarationStatement[52165-52193]:VariableDeclarationStatement[52257-52285]"
  }, {
    "left" : "if (max < e)",
    "right" : "if (max < e)",
    "info" : "IfStatement[52210-52271]:IfStatement[52302-52363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52223-52271]:Block[52315-52363]"
  }, {
    "left" : "max = e;",
    "right" : "max = e;",
    "info" : "ExpressionStatement[52245-52253]:ExpressionStatement[52337-52345]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[52304-52315]:ReturnStatement[52396-52407]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52430-52437]:Modifier[52522-52529]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52438-52444]:Modifier[52530-52536]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[52445-52451]:PrimitiveType[52537-52543]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[52452-52455]:SimpleName[52544-52547]"
  }, {
    "left" : "final RealMatrix m",
    "right" : "final RealMatrix m",
    "info" : "SingleVariableDeclaration[52456-52474]:SingleVariableDeclaration[52548-52566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52476-52808]:Block[52568-52900]"
  }, {
    "left" : "double min = Double.MAX_VALUE;",
    "right" : "double min = Double.MAX_VALUE;",
    "info" : "VariableDeclarationStatement[52486-52516]:VariableDeclarationStatement[52578-52608]"
  }, {
    "left" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "right" : "for (int r = 0; r < m.getRowDimension(); r++)",
    "info" : "ForStatement[52525-52782]:ForStatement[52617-52874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52571-52782]:Block[52663-52874]"
  }, {
    "left" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "right" : "for (int c = 0; c < m.getColumnDimension(); c++)",
    "info" : "ForStatement[52585-52772]:ForStatement[52677-52864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52634-52772]:Block[52726-52864]"
  }, {
    "left" : "double e = m.getEntry(r, c);",
    "right" : "double e = m.getEntry(r, c);",
    "info" : "VariableDeclarationStatement[52652-52680]:VariableDeclarationStatement[52744-52772]"
  }, {
    "left" : "if (min > e)",
    "right" : "if (min > e)",
    "info" : "IfStatement[52697-52758]:IfStatement[52789-52850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52710-52758]:Block[52802-52850]"
  }, {
    "left" : "min = e;",
    "right" : "min = e;",
    "info" : "ExpressionStatement[52732-52740]:ExpressionStatement[52824-52832]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[52791-52802]:ReturnStatement[52883-52894]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52907-52914]:Modifier[52999-53006]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52915-52921]:Modifier[53007-53013]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[52922-52928]:PrimitiveType[53014-53020]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[52929-52932]:SimpleName[53021-53024]"
  }, {
    "left" : "final double[] m",
    "right" : "final double[] m",
    "info" : "SingleVariableDeclaration[52933-52949]:SingleVariableDeclaration[53025-53041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52951-53145]:Block[53043-53237]"
  }, {
    "left" : "double max = -Double.MAX_VALUE;",
    "right" : "double max = -Double.MAX_VALUE;",
    "info" : "VariableDeclarationStatement[52961-52992]:VariableDeclarationStatement[53053-53084]"
  }, {
    "left" : "for (int r = 0; r < m.length; r++)",
    "right" : "for (int r = 0; r < m.length; r++)",
    "info" : "ForStatement[53001-53119]:ForStatement[53093-53211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53036-53119]:Block[53128-53211]"
  }, {
    "left" : "if (max < m[r])",
    "right" : "if (max < m[r])",
    "info" : "IfStatement[53050-53109]:IfStatement[53142-53201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53066-53109]:Block[53158-53201]"
  }, {
    "left" : "max = m[r];",
    "right" : "max = m[r];",
    "info" : "ExpressionStatement[53084-53095]:ExpressionStatement[53176-53187]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[53128-53139]:ReturnStatement[53220-53231]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53244-53251]:Modifier[53336-53343]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53252-53258]:Modifier[53344-53350]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[53259-53265]:PrimitiveType[53351-53357]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[53266-53269]:SimpleName[53358-53361]"
  }, {
    "left" : "final double[] m",
    "right" : "final double[] m",
    "info" : "SingleVariableDeclaration[53270-53286]:SingleVariableDeclaration[53362-53378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53288-53481]:Block[53380-53573]"
  }, {
    "left" : "double min = Double.MAX_VALUE;",
    "right" : "double min = Double.MAX_VALUE;",
    "info" : "VariableDeclarationStatement[53298-53328]:VariableDeclarationStatement[53390-53420]"
  }, {
    "left" : "for (int r = 0; r < m.length; r++)",
    "right" : "for (int r = 0; r < m.length; r++)",
    "info" : "ForStatement[53337-53455]:ForStatement[53429-53547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53372-53455]:Block[53464-53547]"
  }, {
    "left" : "if (min > m[r])",
    "right" : "if (min > m[r])",
    "info" : "IfStatement[53386-53445]:IfStatement[53478-53537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53402-53445]:Block[53494-53537]"
  }, {
    "left" : "min = m[r];",
    "right" : "min = m[r];",
    "info" : "ExpressionStatement[53420-53431]:ExpressionStatement[53512-53523]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[53464-53475]:ReturnStatement[53556-53567]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53606-53613]:Modifier[53698-53705]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53614-53620]:Modifier[53706-53712]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[53621-53626]:ArrayType[53713-53718]"
  }, {
    "left" : "inverse",
    "right" : "inverse",
    "info" : "SimpleName[53627-53634]:SimpleName[53719-53726]"
  }, {
    "left" : "final int[] indices",
    "right" : "final int[] indices",
    "info" : "SingleVariableDeclaration[53635-53654]:SingleVariableDeclaration[53727-53746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53656-53834]:Block[53748-53926]"
  }, {
    "left" : "int[] inverse = new int[indices.length];",
    "right" : "int[] inverse = new int[indices.length];",
    "info" : "VariableDeclarationStatement[53666-53706]:VariableDeclarationStatement[53758-53798]"
  }, {
    "left" : "for (int i = 0; i < indices.length; i++)",
    "right" : "for (int i = 0; i < indices.length; i++)",
    "info" : "ForStatement[53715-53804]:ForStatement[53807-53896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53756-53804]:Block[53848-53896]"
  }, {
    "left" : "inverse[indices[i]] = i;",
    "right" : "inverse[indices[i]] = i;",
    "info" : "ExpressionStatement[53770-53794]:ExpressionStatement[53862-53886]"
  }, {
    "left" : "return inverse;",
    "right" : "return inverse;",
    "info" : "ReturnStatement[53813-53828]:ReturnStatement[53905-53920]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53958-53965]:Modifier[54050-54057]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53966-53972]:Modifier[54058-54064]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[53973-53978]:ArrayType[54065-54070]"
  }, {
    "left" : "reverse",
    "right" : "reverse",
    "info" : "SimpleName[53979-53986]:SimpleName[54071-54078]"
  }, {
    "left" : "final int[] indices",
    "right" : "final int[] indices",
    "info" : "SingleVariableDeclaration[53987-54006]:SingleVariableDeclaration[54079-54098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54008-54207]:Block[54100-54299]"
  }, {
    "left" : "int[] reverse = new int[indices.length];",
    "right" : "int[] reverse = new int[indices.length];",
    "info" : "VariableDeclarationStatement[54018-54058]:VariableDeclarationStatement[54110-54150]"
  }, {
    "left" : "for (int i = 0; i < indices.length; i++)",
    "right" : "for (int i = 0; i < indices.length; i++)",
    "info" : "ForStatement[54067-54177]:ForStatement[54159-54269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54108-54177]:Block[54200-54269]"
  }, {
    "left" : "reverse[i] = indices[indices.length - i - 1];",
    "right" : "reverse[i] = indices[indices.length - i - 1];",
    "info" : "ExpressionStatement[54122-54167]:ExpressionStatement[54214-54259]"
  }, {
    "left" : "return reverse;",
    "right" : "return reverse;",
    "info" : "ReturnStatement[54186-54201]:ReturnStatement[54278-54293]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54324-54331]:Modifier[54416-54423]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[54332-54340]:ArrayType[54424-54432]"
  }, {
    "left" : "randn",
    "right" : "randn",
    "info" : "SimpleName[54341-54346]:SimpleName[54433-54438]"
  }, {
    "left" : "int size",
    "right" : "int size",
    "info" : "SingleVariableDeclaration[54347-54355]:SingleVariableDeclaration[54439-54447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54357-54526]:Block[54449-54618]"
  }, {
    "left" : "double[] randn = new double[size];",
    "right" : "double[] randn = new double[size];",
    "info" : "VariableDeclarationStatement[54367-54401]:VariableDeclarationStatement[54459-54493]"
  }, {
    "left" : "for (int i = 0; i < size; i++)",
    "right" : "for (int i = 0; i < size; i++)",
    "info" : "ForStatement[54410-54498]:ForStatement[54502-54590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54441-54498]:Block[54533-54590]"
  }, {
    "left" : "randn[i] = random.nextGaussian();",
    "right" : "randn[i] = random.nextGaussian();",
    "info" : "ExpressionStatement[54455-54488]:ExpressionStatement[54547-54580]"
  }, {
    "left" : "return randn;",
    "right" : "return randn;",
    "info" : "ReturnStatement[54507-54520]:ReturnStatement[54599-54612]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54688-54695]:Modifier[54780-54787]"
  }, {
    "left" : "RealMatrix",
    "right" : "RealMatrix",
    "info" : "SimpleType[54696-54706]:SimpleType[54788-54798]"
  }, {
    "left" : "randn1",
    "right" : "randn1",
    "info" : "SimpleName[54707-54713]:SimpleName[54799-54805]"
  }, {
    "left" : "int size",
    "right" : "int size",
    "info" : "SingleVariableDeclaration[54714-54722]:SingleVariableDeclaration[54806-54814]"
  }, {
    "left" : "int popSize",
    "right" : "int popSize",
    "info" : "SingleVariableDeclaration[54724-54735]:SingleVariableDeclaration[54816-54827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54737-55007]:Block[54829-55099]"
  }, {
    "left" : "double[][] d = new double[size][popSize];",
    "right" : "double[][] d = new double[size][popSize];",
    "info" : "VariableDeclarationStatement[54747-54788]:VariableDeclarationStatement[54839-54880]"
  }, {
    "left" : "for (int r = 0; r < size; r++)",
    "right" : "for (int r = 0; r < size; r++)",
    "info" : "ForStatement[54797-54950]:ForStatement[54889-55042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54828-54950]:Block[54920-55042]"
  }, {
    "left" : "for (int c = 0; c < popSize; c++)",
    "right" : "for (int c = 0; c < popSize; c++)",
    "info" : "ForStatement[54842-54940]:ForStatement[54934-55032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54876-54940]:Block[54968-55032]"
  }, {
    "left" : "d[r][c] = random.nextGaussian();",
    "right" : "d[r][c] = random.nextGaussian();",
    "info" : "ExpressionStatement[54894-54926]:ExpressionStatement[54986-55018]"
  }, {
    "left" : "return new Array2DRowRealMatrix(d, false);",
    "right" : "return new Array2DRowRealMatrix(d, false);",
    "info" : "ReturnStatement[54959-55001]:ReturnStatement[55051-55093]"
  } ]
}