{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "OpenSslEngine",
      "right" : "OpenSslEngine",
      "info" : "TypeDeclaration[2235-55760]:TypeDeclaration[2235-55710]"
    }, {
      "left" : "private static final InternalLogger logger = InternalLoggerFactory.getInstance(OpenSslEngine.class);",
      "right" : "private static final InternalLogger logger = InternalLoggerFactory.getInstance(OpenSslEngine.class);",
      "info" : "FieldDeclaration[2443-2543]:FieldDeclaration[2443-2543]"
    }, {
      "left" : "private static final Certificate[] EMPTY_CERTIFICATES = EmptyArrays.EMPTY_CERTIFICATES;",
      "right" : "private static final Certificate[] EMPTY_CERTIFICATES = EmptyArrays.EMPTY_CERTIFICATES;",
      "info" : "FieldDeclaration[2549-2636]:FieldDeclaration[2549-2636]"
    }, {
      "left" : "private static final X509Certificate[] EMPTY_X509_CERTIFICATES = EmptyArrays.EMPTY_JAVAX_X509_CERTIFICATES;",
      "right" : "private static final X509Certificate[] EMPTY_X509_CERTIFICATES = EmptyArrays.EMPTY_JAVAX_X509_CERTIFICATES;",
      "info" : "FieldDeclaration[2641-2748]:FieldDeclaration[2641-2748]"
    }, {
      "left" : "private static final SSLException ENGINE_CLOSED = new SSLException(\"engine closed\");",
      "right" : "private static final SSLException ENGINE_CLOSED = new SSLException(\"engine closed\");",
      "info" : "FieldDeclaration[2754-2838]:FieldDeclaration[2754-2838]"
    }, {
      "left" : "private static final SSLException RENEGOTIATION_UNSUPPORTED = new SSLException(\"renegotiation unsupported\");",
      "right" : "private static final SSLException RENEGOTIATION_UNSUPPORTED = new SSLException(\"renegotiation unsupported\");",
      "info" : "FieldDeclaration[2843-2951]:FieldDeclaration[2843-2951]"
    }, {
      "left" : "private static final SSLException ENCRYPTED_PACKET_OVERSIZED = new SSLException(\"encrypted packet oversized\");",
      "right" : "private static final SSLException ENCRYPTED_PACKET_OVERSIZED = new SSLException(\"encrypted packet oversized\");",
      "info" : "FieldDeclaration[2956-3066]:FieldDeclaration[2956-3066]"
    }, {
      "left" : "private static final int MAX_PLAINTEXT_LENGTH = 16 * 1024;",
      "right" : "private static final int MAX_PLAINTEXT_LENGTH = 16 * 1024;",
      "info" : "FieldDeclaration[3686-3744]:FieldDeclaration[3686-3744]"
    }, {
      "left" : "private static final int MAX_COMPRESSED_LENGTH = MAX_PLAINTEXT_LENGTH + 1024;",
      "right" : "private static final int MAX_COMPRESSED_LENGTH = MAX_PLAINTEXT_LENGTH + 1024;",
      "info" : "FieldDeclaration[3757-3834]:FieldDeclaration[3757-3834]"
    }, {
      "left" : "private static final int MAX_CIPHERTEXT_LENGTH = MAX_COMPRESSED_LENGTH + 1024;",
      "right" : "private static final int MAX_CIPHERTEXT_LENGTH = MAX_COMPRESSED_LENGTH + 1024;",
      "info" : "FieldDeclaration[3839-3917]:FieldDeclaration[3839-3917]"
    }, {
      "left" : "private static final String PROTOCOL_SSL_V2_HELLO = \"SSLv2Hello\";",
      "right" : "private static final String PROTOCOL_SSL_V2_HELLO = \"SSLv2Hello\";",
      "info" : "FieldDeclaration[3940-4005]:FieldDeclaration[3940-4005]"
    }, {
      "left" : "private static final String PROTOCOL_SSL_V2 = \"SSLv2\";",
      "right" : "private static final String PROTOCOL_SSL_V2 = \"SSLv2\";",
      "info" : "FieldDeclaration[4010-4064]:FieldDeclaration[4010-4064]"
    }, {
      "left" : "private static final String PROTOCOL_SSL_V3 = \"SSLv3\";",
      "right" : "private static final String PROTOCOL_SSL_V3 = \"SSLv3\";",
      "info" : "FieldDeclaration[4069-4123]:FieldDeclaration[4069-4123]"
    }, {
      "left" : "private static final String PROTOCOL_TLS_V1 = \"TLSv1\";",
      "right" : "private static final String PROTOCOL_TLS_V1 = \"TLSv1\";",
      "info" : "FieldDeclaration[4128-4182]:FieldDeclaration[4128-4182]"
    }, {
      "left" : "private static final String PROTOCOL_TLS_V1_1 = \"TLSv1.1\";",
      "right" : "private static final String PROTOCOL_TLS_V1_1 = \"TLSv1.1\";",
      "info" : "FieldDeclaration[4187-4245]:FieldDeclaration[4187-4245]"
    }, {
      "left" : "private static final String PROTOCOL_TLS_V1_2 = \"TLSv1.2\";",
      "right" : "private static final String PROTOCOL_TLS_V1_2 = \"TLSv1.2\";",
      "info" : "FieldDeclaration[4250-4308]:FieldDeclaration[4250-4308]"
    }, {
      "left" : "private static final String[] SUPPORTED_PROTOCOLS = {\n            PROTOCOL_SSL_V2_HELLO,\n            PROTOCOL_SSL_V2,\n            PROTOCOL_SSL_V3,\n            PROTOCOL_TLS_V1,\n            PROTOCOL_TLS_V1_1,\n            PROTOCOL_TLS_V1_2\n    };",
      "right" : "private static final String[] SUPPORTED_PROTOCOLS = {\n            PROTOCOL_SSL_V2_HELLO,\n            PROTOCOL_SSL_V2,\n            PROTOCOL_SSL_V3,\n            PROTOCOL_TLS_V1,\n            PROTOCOL_TLS_V1_1,\n            PROTOCOL_TLS_V1_2\n    };",
      "info" : "FieldDeclaration[4314-4557]:FieldDeclaration[4314-4557]"
    }, {
      "left" : "private static final Set<String> SUPPORTED_PROTOCOLS_SET = new HashSet<String>(Arrays.asList(SUPPORTED_PROTOCOLS));",
      "right" : "private static final Set<String> SUPPORTED_PROTOCOLS_SET = new HashSet<String>(Arrays.asList(SUPPORTED_PROTOCOLS));",
      "info" : "FieldDeclaration[4562-4677]:FieldDeclaration[4562-4677]"
    }, {
      "left" : "static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_CIPHERTEXT_LENGTH + 5 + 20 + 256;",
      "right" : "static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_CIPHERTEXT_LENGTH + 5 + 20 + 256;",
      "info" : "FieldDeclaration[4783-4867]:FieldDeclaration[4783-4867]"
    }, {
      "left" : "static final int MAX_ENCRYPTION_OVERHEAD_LENGTH = MAX_ENCRYPTED_PACKET_LENGTH - MAX_PLAINTEXT_LENGTH;",
      "right" : "static final int MAX_ENCRYPTION_OVERHEAD_LENGTH = MAX_ENCRYPTED_PACKET_LENGTH - MAX_PLAINTEXT_LENGTH;",
      "info" : "FieldDeclaration[4873-4974]:FieldDeclaration[4873-4974]"
    }, {
      "left" : "enum : ClientAuthMode",
      "right" : "enum : ClientAuthMode",
      "info" : "EnumDeclaration[4980-5056]:EnumDeclaration[4980-5056]"
    }, {
      "left" : "private static final AtomicIntegerFieldUpdater<OpenSslEngine> DESTROYED_UPDATER;",
      "right" : "private static final AtomicIntegerFieldUpdater<OpenSslEngine> DESTROYED_UPDATER;",
      "info" : "FieldDeclaration[5062-5142]:FieldDeclaration[5062-5142]"
    }, {
      "left" : "private static final String INVALID_CIPHER = \"SSL_NULL_WITH_NULL_NULL\";",
      "right" : "private static final String INVALID_CIPHER = \"SSL_NULL_WITH_NULL_NULL\";",
      "info" : "FieldDeclaration[5148-5219]:FieldDeclaration[5148-5219]"
    }, {
      "left" : "private static final long EMPTY_ADDR = Buffer.address(Unpooled.EMPTY_BUFFER.nioBuffer());",
      "right" : "private static final long EMPTY_ADDR = Buffer.address(Unpooled.EMPTY_BUFFER.nioBuffer());",
      "info" : "FieldDeclaration[5225-5314]:FieldDeclaration[5225-5314]"
    }, {
      "left" : "private static final SSLEngineResult NEED_UNWRAP_OK = new SSLEngineResult(OK, NEED_UNWRAP, 0, 0);",
      "right" : "private static final SSLEngineResult NEED_UNWRAP_OK = new SSLEngineResult(OK, NEED_UNWRAP, 0, 0);",
      "info" : "FieldDeclaration[5320-5417]:FieldDeclaration[5320-5417]"
    }, {
      "left" : "private static final SSLEngineResult NEED_UNWRAP_CLOSED = new SSLEngineResult(CLOSED, NEED_UNWRAP, 0, 0);",
      "right" : "private static final SSLEngineResult NEED_UNWRAP_CLOSED = new SSLEngineResult(CLOSED, NEED_UNWRAP, 0, 0);",
      "info" : "FieldDeclaration[5422-5527]:FieldDeclaration[5422-5527]"
    }, {
      "left" : "private static final SSLEngineResult NEED_WRAP_OK = new SSLEngineResult(OK, NEED_WRAP, 0, 0);",
      "right" : "private static final SSLEngineResult NEED_WRAP_OK = new SSLEngineResult(OK, NEED_WRAP, 0, 0);",
      "info" : "FieldDeclaration[5532-5625]:FieldDeclaration[5532-5625]"
    }, {
      "left" : "private static final SSLEngineResult NEED_WRAP_CLOSED = new SSLEngineResult(CLOSED, NEED_WRAP, 0, 0);",
      "right" : "private static final SSLEngineResult NEED_WRAP_CLOSED = new SSLEngineResult(CLOSED, NEED_WRAP, 0, 0);",
      "info" : "FieldDeclaration[5630-5731]:FieldDeclaration[5630-5731]"
    }, {
      "left" : "private static final SSLEngineResult CLOSED_NOT_HANDSHAKING = new SSLEngineResult(CLOSED, NOT_HANDSHAKING, 0, 0);",
      "right" : "private static final SSLEngineResult CLOSED_NOT_HANDSHAKING = new SSLEngineResult(CLOSED, NOT_HANDSHAKING, 0, 0);",
      "info" : "FieldDeclaration[5736-5849]:FieldDeclaration[5736-5849]"
    }, {
      "left" : "private long ssl;",
      "right" : "private long ssl;",
      "info" : "FieldDeclaration[5876-5893]:FieldDeclaration[5876-5893]"
    }, {
      "left" : "private long networkBIO;",
      "right" : "private long networkBIO;",
      "info" : "FieldDeclaration[5898-5922]:FieldDeclaration[5898-5922]"
    }, {
      "left" : "private int accepted;",
      "right" : "private int accepted;",
      "info" : "FieldDeclaration[5928-6085]:FieldDeclaration[5928-6085]"
    }, {
      "left" : "private boolean handshakeFinished;",
      "right" : "private boolean handshakeFinished;",
      "info" : "FieldDeclaration[6090-6124]:FieldDeclaration[6090-6124]"
    }, {
      "left" : "private boolean receivedShutdown;",
      "right" : "private boolean receivedShutdown;",
      "info" : "FieldDeclaration[6129-6162]:FieldDeclaration[6129-6162]"
    }, {
      "left" : "@SuppressWarnings(\"UnusedDeclaration\")\n    private volatile int destroyed;",
      "right" : "@SuppressWarnings(\"UnusedDeclaration\")\n    private volatile int destroyed;",
      "info" : "FieldDeclaration[6167-6241]:FieldDeclaration[6167-6241]"
    }, {
      "left" : "private volatile String cipher;",
      "right" : "private volatile String cipher;",
      "info" : "FieldDeclaration[6408-6439]:FieldDeclaration[6408-6439]"
    }, {
      "left" : "private volatile String applicationProtocol;",
      "right" : "private volatile String applicationProtocol;",
      "info" : "FieldDeclaration[6444-6488]:FieldDeclaration[6444-6488]"
    }, {
      "left" : "private volatile Certificate[] peerCerts;",
      "right" : "private volatile Certificate[] peerCerts;",
      "info" : "FieldDeclaration[6609-6650]:FieldDeclaration[6609-6650]"
    }, {
      "left" : "private volatile ClientAuthMode clientAuth = ClientAuthMode.NONE;",
      "right" : "private volatile ClientAuthMode clientAuth = ClientAuthMode.NONE;",
      "info" : "FieldDeclaration[6655-6720]:FieldDeclaration[6655-6720]"
    }, {
      "left" : "private volatile String endPointIdentificationAlgorithm;",
      "right" : "private volatile String endPointIdentificationAlgorithm;",
      "info" : "FieldDeclaration[6726-6782]:FieldDeclaration[6726-6782]"
    }, {
      "left" : "private volatile Object algorithmConstraints;",
      "right" : "private volatile Object algorithmConstraints;",
      "info" : "FieldDeclaration[6860-6905]:FieldDeclaration[6860-6905]"
    }, {
      "left" : "private boolean isInboundDone;",
      "right" : "private boolean isInboundDone;",
      "info" : "FieldDeclaration[6946-6976]:FieldDeclaration[6946-6976]"
    }, {
      "left" : "private boolean isOutboundDone;",
      "right" : "private boolean isOutboundDone;",
      "info" : "FieldDeclaration[6981-7012]:FieldDeclaration[6981-7012]"
    }, {
      "left" : "private boolean engineClosed;",
      "right" : "private boolean engineClosed;",
      "info" : "FieldDeclaration[7017-7046]:FieldDeclaration[7017-7046]"
    }, {
      "left" : "private final boolean clientMode;",
      "right" : "private final boolean clientMode;",
      "info" : "FieldDeclaration[7052-7085]:FieldDeclaration[7052-7085]"
    }, {
      "left" : "private final ByteBufAllocator alloc;",
      "right" : "private final ByteBufAllocator alloc;",
      "info" : "FieldDeclaration[7090-7127]:FieldDeclaration[7090-7127]"
    }, {
      "left" : "private final OpenSslSessionContext sessionContext;",
      "right" : "private final OpenSslSessionContext sessionContext;",
      "info" : "FieldDeclaration[7132-7183]:FieldDeclaration[7132-7183]"
    }, {
      "left" : "private final OpenSslEngineMap engineMap;",
      "right" : "private final OpenSslEngineMap engineMap;",
      "info" : "FieldDeclaration[7188-7229]:FieldDeclaration[7188-7229]"
    }, {
      "left" : "private final OpenSslApplicationProtocolNegotiator apn;",
      "right" : "private final OpenSslApplicationProtocolNegotiator apn;",
      "info" : "FieldDeclaration[7234-7289]:FieldDeclaration[7234-7289]"
    }, {
      "left" : "private final boolean rejectRemoteInitiatedRenegation;",
      "right" : "private final boolean rejectRemoteInitiatedRenegation;",
      "info" : "FieldDeclaration[7294-7348]:FieldDeclaration[7294-7348]"
    }, {
      "left" : "private final SSLSession session = new OpenSslSession();",
      "right" : "private final SSLSession session = new OpenSslSession();",
      "info" : "FieldDeclaration[7353-7409]:FieldDeclaration[7353-7409]"
    }, {
      "left" : "SSLHandshakeException handshakeException;",
      "right" : "SSLHandshakeException handshakeException;",
      "info" : "FieldDeclaration[7542-7583]:FieldDeclaration[7542-7583]"
    }, {
      "left" : "public OpenSslEngine(long sslCtx, ByteBufAllocator alloc,\n                         @SuppressWarnings(\"unused\") String fallbackApplicationProtocol)",
      "right" : "public OpenSslEngine(long sslCtx, ByteBufAllocator alloc,\n                         @SuppressWarnings(\"unused\") String fallbackApplicationProtocol)",
      "info" : "MethodDeclaration[7589-8063]:MethodDeclaration[7589-8063]"
    }, {
      "left" : "OpenSslEngine(long sslCtx, ByteBufAllocator alloc,\n                  boolean clientMode, OpenSslSessionContext sessionContext,\n                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,\n                  boolean rejectRemoteInitiatedRenegation)",
      "right" : "OpenSslEngine(long sslCtx, ByteBufAllocator alloc,\n                  boolean clientMode, OpenSslSessionContext sessionContext,\n                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,\n                  boolean rejectRemoteInitiatedRenegation)",
      "info" : "MethodDeclaration[8069-8845]:MethodDeclaration[8069-8845]"
    }, {
      "left" : "OpenSslEngine(long sslCtx, ByteBufAllocator alloc,\n                  boolean clientMode, OpenSslSessionContext sessionContext,\n                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,\n                  boolean rejectRemoteInitiatedRenegation, String peerHost, int peerPort)",
      "right" : "OpenSslEngine(long sslCtx, ByteBufAllocator alloc,\n                  boolean clientMode, OpenSslSessionContext sessionContext,\n                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,\n                  boolean rejectRemoteInitiatedRenegation, String peerHost, int peerPort)",
      "info" : "MethodDeclaration[8851-9717]:MethodDeclaration[8851-9717]"
    }, {
      "left" : "public SSLSession getHandshakeSession()",
      "right" : "public SSLSession getHandshakeSession()",
      "info" : "MethodDeclaration[9723-10057]:MethodDeclaration[9723-10057]"
    }, {
      "left" : "public synchronized long sslPointer()",
      "right" : "public synchronized long sslPointer()",
      "info" : "MethodDeclaration[10063-10385]:MethodDeclaration[10063-10385]"
    }, {
      "left" : "public synchronized void shutdown()",
      "right" : "public synchronized void shutdown()",
      "info" : "MethodDeclaration[10391-10835]:MethodDeclaration[10391-10835]"
    }, {
      "left" : "private int writePlaintextData(final ByteBuffer src)",
      "right" : "private int writePlaintextData(final ByteBuffer src)",
      "info" : "MethodDeclaration[10841-12192]:MethodDeclaration[10841-12192]"
    }, {
      "left" : "private int writeEncryptedData(final ByteBuffer src)",
      "right" : "private int writeEncryptedData(final ByteBuffer src)",
      "info" : "MethodDeclaration[12198-13263]:MethodDeclaration[12198-13263]"
    }, {
      "left" : "private int readPlaintextData(final ByteBuffer dst)",
      "right" : "private int readPlaintextData(final ByteBuffer dst)",
      "info" : "MethodDeclaration[13269-14462]:MethodDeclaration[13269-14462]"
    }, {
      "left" : "private int readEncryptedData(final ByteBuffer dst, final int pending)",
      "right" : "private int readEncryptedData(final ByteBuffer dst, final int pending)",
      "info" : "MethodDeclaration[14468-15583]:MethodDeclaration[14468-15583]"
    }, {
      "left" : "public synchronized SSLEngineResult wrap(\n            final ByteBuffer[] srcs, final int offset, final int length, final ByteBuffer dst) throws SSLException",
      "right" : "public synchronized SSLEngineResult wrap(\n            final ByteBuffer[] srcs, final int offset, final int length, final ByteBuffer dst) throws SSLException",
      "info" : "MethodDeclaration[15589-20090]:MethodDeclaration[15589-20090]"
    }, {
      "left" : "private SSLException newSSLException(String msg)",
      "right" : "private SSLException newSSLException(String msg)",
      "info" : "MethodDeclaration[20096-20285]:MethodDeclaration[20096-20285]"
    }, {
      "left" : "private void checkPendingHandshakeException() throws SSLHandshakeException",
      "right" : "private void checkPendingHandshakeException() throws SSLHandshakeException",
      "info" : "MethodDeclaration[20291-20583]:MethodDeclaration[20291-20583]"
    }, {
      "left" : "public synchronized SSLEngineResult unwrap(\n            final ByteBuffer[] srcs, int srcsOffset, final int srcsLength,\n            final ByteBuffer[] dsts, final int dstsOffset, final int dstsLength) throws SSLException",
      "right" : "public synchronized SSLEngineResult unwrap(\n            final ByteBuffer[] srcs, int srcsOffset, final int srcsLength,\n            final ByteBuffer[] dsts, final int dstsOffset, final int dstsLength) throws SSLException",
      "info" : "MethodDeclaration[20589-27629]:MethodDeclaration[20589-27629]"
    }, {
      "left" : "private void rejectRemoteInitiatedRenegation() throws SSLHandshakeException",
      "right" : "private void rejectRemoteInitiatedRenegation() throws SSLHandshakeException",
      "info" : "MethodDeclaration[27635-28079]:MethodDeclaration[27635-28079]"
    }, {
      "left" : "public SSLEngineResult unwrap(final ByteBuffer[] srcs, final ByteBuffer[] dsts) throws SSLException",
      "right" : "public SSLEngineResult unwrap(final ByteBuffer[] srcs, final ByteBuffer[] dsts) throws SSLException",
      "info" : "MethodDeclaration[28085-28259]:MethodDeclaration[28085-28259]"
    }, {
      "left" : "public SSLEngineResult unwrap(\n            final ByteBuffer src, final ByteBuffer[] dsts, final int offset, final int length) throws SSLException",
      "right" : "public SSLEngineResult unwrap(\n            final ByteBuffer src, final ByteBuffer[] dsts, final int offset, final int length) throws SSLException",
      "info" : "MethodDeclaration[28265-28509]:MethodDeclaration[28265-28509]"
    }, {
      "left" : "public Runnable getDelegatedTask()",
      "right" : "public Runnable getDelegatedTask()",
      "info" : "MethodDeclaration[28515-28740]:MethodDeclaration[28515-28740]"
    }, {
      "left" : "public synchronized void closeInbound() throws SSLException",
      "right" : "public synchronized void closeInbound() throws SSLException",
      "info" : "MethodDeclaration[28746-29169]:MethodDeclaration[28746-29169]"
    }, {
      "left" : "public synchronized boolean isInboundDone()",
      "right" : "public synchronized boolean isInboundDone()",
      "info" : "MethodDeclaration[29175-29286]:MethodDeclaration[29175-29286]"
    }, {
      "left" : "public synchronized void closeOutbound()",
      "right" : "public synchronized void closeOutbound()",
      "info" : "MethodDeclaration[29292-29801]:MethodDeclaration[29292-29801]"
    }, {
      "left" : "public synchronized boolean isOutboundDone()",
      "right" : "public synchronized boolean isOutboundDone()",
      "info" : "MethodDeclaration[29807-29904]:MethodDeclaration[29807-29904]"
    }, {
      "left" : "public String[] getSupportedCipherSuites()",
      "right" : "public String[] getSupportedCipherSuites()",
      "info" : "MethodDeclaration[29910-30139]:MethodDeclaration[29910-30139]"
    }, {
      "left" : "public String[] getEnabledCipherSuites()",
      "right" : "public String[] getEnabledCipherSuites()",
      "info" : "MethodDeclaration[30145-30806]:MethodDeclaration[30145-30806]"
    }, {
      "left" : "public void setEnabledCipherSuites(String[] cipherSuites)",
      "right" : "public void setEnabledCipherSuites(String[] cipherSuites)",
      "info" : "MethodDeclaration[30812-32193]:MethodDeclaration[30812-32193]"
    }, {
      "left" : "public String[] getSupportedProtocols()",
      "right" : "public String[] getSupportedProtocols()",
      "info" : "MethodDeclaration[32199-32304]:MethodDeclaration[32199-32304]"
    }, {
      "left" : "public String[] getEnabledProtocols()",
      "right" : "public String[] getEnabledProtocols()",
      "info" : "MethodDeclaration[32310-33372]:MethodDeclaration[32310-33372]"
    }, {
      "left" : "public void setEnabledProtocols(String[] protocols)",
      "right" : "public void setEnabledProtocols(String[] protocols)",
      "info" : "MethodDeclaration[33378-35278]:MethodDeclaration[33378-35278]"
    }, {
      "left" : "public SSLSession getSession()",
      "right" : "public SSLSession getSession()",
      "info" : "MethodDeclaration[35284-35360]:MethodDeclaration[35284-35360]"
    }, {
      "left" : "public synchronized void beginHandshake() throws SSLException",
      "right" : "public synchronized void beginHandshake() throws SSLException",
      "info" : "MethodDeclaration[35366-36356]:MethodDeclaration[35366-36356]"
    }, {
      "left" : "private void beginHandshakeImplicitly() throws SSLException",
      "right" : "private void beginHandshakeImplicitly() throws SSLException",
      "info" : "MethodDeclaration[36362-36609]:MethodDeclaration[36362-36609]"
    }, {
      "left" : "private void handshake() throws SSLException",
      "right" : "private void handshake() throws SSLException",
      "info" : "MethodDeclaration[36615-37589]:MethodDeclaration[36615-37589]"
    }, {
      "left" : "private static long memoryAddress(ByteBuf buf)",
      "right" : "private static long memoryAddress(ByteBuf buf)",
      "info" : "MethodDeclaration[37595-37806]:MethodDeclaration[37595-37806]"
    }, {
      "left" : "private void handshakeFinished() throws SSLException",
      "right" : "private void handshakeFinished() throws SSLException",
      "info" : "MethodDeclaration[37812-39451]:MethodDeclaration[37812-39451]"
    }, {
      "left" : "private static String selectApplicationProtocol(List<String> protocols,\n                                             SelectedListenerFailureBehavior behavior,\n                                             String applicationProtocol) throws SSLException",
      "right" : "private static String selectApplicationProtocol(List<String> protocols,\n                                             SelectedListenerFailureBehavior behavior,\n                                             String applicationProtocol) throws SSLException",
      "info" : "MethodDeclaration[39457-40330]:MethodDeclaration[39457-40330]"
    }, {
      "left" : "private SSLEngineResult.Status getEngineStatus()",
      "right" : "private SSLEngineResult.Status getEngineStatus()",
      "info" : "MethodDeclaration[40336-40434]:MethodDeclaration[40336-40434]"
    }, {
      "left" : "private SSLEngineResult.HandshakeStatus handshakeStatus0() throws SSLException",
      "right" : "private SSLEngineResult.HandshakeStatus handshakeStatus0() throws SSLException",
      "info" : "MethodDeclaration[40440-40740]:MethodDeclaration[40440-40740]"
    }, {
      "left" : "public synchronized SSLEngineResult.HandshakeStatus getHandshakeStatus()",
      "right" : "public synchronized SSLEngineResult.HandshakeStatus getHandshakeStatus()",
      "info" : "MethodDeclaration[40746-41959]:MethodDeclaration[40746-41959]"
    }, {
      "left" : "private String toJavaCipherSuite(String openSslCipherSuite)",
      "right" : "private String toJavaCipherSuite(String openSslCipherSuite)",
      "info" : "MethodDeclaration[41965-42345]:MethodDeclaration[41965-42345]"
    }, {
      "left" : "private static String toJavaCipherSuitePrefix(String protocolVersion)",
      "right" : "private static String toJavaCipherSuitePrefix(String protocolVersion)",
      "info" : "MethodDeclaration[42351-42906]:MethodDeclaration[42351-42906]"
    }, {
      "left" : "public void setUseClientMode(boolean clientMode)",
      "right" : "public void setUseClientMode(boolean clientMode)",
      "info" : "MethodDeclaration[42912-43092]:MethodDeclaration[42912-43092]"
    }, {
      "left" : "public boolean getUseClientMode()",
      "right" : "public boolean getUseClientMode()",
      "info" : "MethodDeclaration[43098-43180]:MethodDeclaration[43098-43180]"
    }, {
      "left" : "public void setNeedClientAuth(boolean b)",
      "right" : "public void setNeedClientAuth(boolean b)",
      "info" : "MethodDeclaration[43186-43321]:MethodDeclaration[43186-43321]"
    }, {
      "left" : "public boolean getNeedClientAuth()",
      "right" : "public boolean getNeedClientAuth()",
      "info" : "MethodDeclaration[43327-43436]:MethodDeclaration[43327-43436]"
    }, {
      "left" : "public void setWantClientAuth(boolean b)",
      "right" : "public void setWantClientAuth(boolean b)",
      "info" : "MethodDeclaration[43442-43578]:MethodDeclaration[43442-43578]"
    }, {
      "left" : "public boolean getWantClientAuth()",
      "right" : "public boolean getWantClientAuth()",
      "info" : "MethodDeclaration[43584-43694]:MethodDeclaration[43584-43694]"
    }, {
      "left" : "private void setClientAuth(ClientAuthMode mode)",
      "right" : "private void setClientAuth(ClientAuthMode mode)",
      "info" : "MethodDeclaration[43700-44523]:MethodDeclaration[43700-44523]"
    }, {
      "left" : "public void setEnableSessionCreation(boolean b)",
      "right" : "public void setEnableSessionCreation(boolean b)",
      "info" : "MethodDeclaration[44529-44680]:MethodDeclaration[44529-44680]"
    }, {
      "left" : "public boolean getEnableSessionCreation()",
      "right" : "public boolean getEnableSessionCreation()",
      "info" : "MethodDeclaration[44686-44771]:MethodDeclaration[44686-44771]"
    }, {
      "left" : "public SSLParameters getSSLParameters()",
      "right" : "public SSLParameters getSSLParameters()",
      "info" : "MethodDeclaration[44777-45183]:MethodDeclaration[44777-45183]"
    }, {
      "left" : "public void setSSLParameters(SSLParameters sslParameters)",
      "right" : "public void setSSLParameters(SSLParameters sslParameters)",
      "info" : "MethodDeclaration[45189-45552]:MethodDeclaration[45189-45552]"
    }, {
      "left" : "protected void finalize() throws Throwable",
      "right" : "protected void finalize() throws Throwable",
      "info" : "MethodDeclaration[45558-45809]:MethodDeclaration[45558-45809]"
    }, {
      "left" : "OpenSslSession",
      "right" : "OpenSslSession",
      "info" : "TypeDeclaration[45815-55758]:TypeDeclaration[45815-55708]"
    }, {
      "left" : "private X509Certificate[] x509PeerCerts;",
      "right" : "private X509Certificate[] x509PeerCerts;",
      "info" : "FieldDeclaration[46013-46053]:FieldDeclaration[46013-46053]"
    }, {
      "left" : "private Map<String, Object> values;",
      "right" : "private Map<String, Object> values;",
      "info" : "FieldDeclaration[46103-46138]:FieldDeclaration[46103-46138]"
    }, {
      "left" : "public byte[] getId()",
      "right" : "public byte[] getId()",
      "info" : "MethodDeclaration[46148-46789]:MethodDeclaration[46148-46789]"
    }, {
      "left" : "public SSLSessionContext getSessionContext()",
      "right" : "public SSLSessionContext getSessionContext()",
      "info" : "MethodDeclaration[46799-46908]:MethodDeclaration[46799-46908]"
    }, {
      "left" : "public long getCreationTime()",
      "right" : "public long getCreationTime()",
      "info" : "MethodDeclaration[46918-47276]:MethodDeclaration[46918-47276]"
    }, {
      "left" : "public long getLastAccessedTime()",
      "right" : "public long getLastAccessedTime()",
      "info" : "MethodDeclaration[47286-47434]:MethodDeclaration[47286-47434]"
    }, {
      "left" : "public void invalidate()",
      "right" : "public void invalidate()",
      "info" : "MethodDeclaration[47444-47518]:MethodDeclaration[47444-47518]"
    }, {
      "left" : "public boolean isValid()",
      "right" : "public boolean isValid()",
      "info" : "MethodDeclaration[47528-47608]:MethodDeclaration[47528-47608]"
    }, {
      "left" : "public void putValue(String name, Object value)",
      "right" : "public void putValue(String name, Object value)",
      "info" : "MethodDeclaration[47618-48409]:MethodDeclaration[47618-48409]"
    }, {
      "left" : "public Object getValue(String name)",
      "right" : "public Object getValue(String name)",
      "info" : "MethodDeclaration[48419-48700]:MethodDeclaration[48419-48700]"
    }, {
      "left" : "public void removeValue(String name)",
      "right" : "public void removeValue(String name)",
      "info" : "MethodDeclaration[48710-49088]:MethodDeclaration[48710-49088]"
    }, {
      "left" : "public String[] getValueNames()",
      "right" : "public String[] getValueNames()",
      "info" : "MethodDeclaration[49098-49402]:MethodDeclaration[49098-49402]"
    }, {
      "left" : "private void notifyUnbound(Object value, String name)",
      "right" : "private void notifyUnbound(Object value, String name)",
      "info" : "MethodDeclaration[49412-49659]:MethodDeclaration[49412-49659]"
    }, {
      "left" : "public Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException",
      "right" : "public Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException",
      "info" : "MethodDeclaration[49669-50396]:MethodDeclaration[49669-50396]"
    }, {
      "left" : "public Certificate[] getLocalCertificates()",
      "right" : "public Certificate[] getLocalCertificates()",
      "info" : "MethodDeclaration[50406-50565]:MethodDeclaration[50406-50565]"
    }, {
      "left" : "public X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException",
      "right" : "public X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException",
      "info" : "MethodDeclaration[50575-51979]:MethodDeclaration[50575-51979]"
    }, {
      "left" : "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
      "right" : "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
      "info" : "MethodDeclaration[51989-52275]:MethodDeclaration[51989-52332]"
    }, {
      "left" : "public Principal getLocalPrincipal()",
      "right" : "public Principal getLocalPrincipal()",
      "info" : "MethodDeclaration[52285-52543]:MethodDeclaration[52342-52656]"
    }, {
      "left" : "private Principal principal(Certificate[] certs)",
      "right" : "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
      "info" : "MethodDeclaration[52553-52706]:MethodDeclaration[51989-52332]"
    }, {
      "left" : "public String getCipherSuite()",
      "right" : "public String getCipherSuite()",
      "info" : "MethodDeclaration[52716-53337]:MethodDeclaration[52666-53287]"
    }, {
      "left" : "public String getProtocol()",
      "right" : "public String getProtocol()",
      "info" : "MethodDeclaration[53347-53647]:MethodDeclaration[53297-53597]"
    }, {
      "left" : "public String getApplicationProtocol()",
      "right" : "public String getApplicationProtocol()",
      "info" : "MethodDeclaration[53657-53765]:MethodDeclaration[53607-53715]"
    }, {
      "left" : "public String getPeerHost()",
      "right" : "public String getPeerHost()",
      "info" : "MethodDeclaration[53775-53885]:MethodDeclaration[53725-53835]"
    }, {
      "left" : "public int getPeerPort()",
      "right" : "public int getPeerPort()",
      "info" : "MethodDeclaration[53895-54002]:MethodDeclaration[53845-53952]"
    }, {
      "left" : "public int getPacketBufferSize()",
      "right" : "public int getPacketBufferSize()",
      "info" : "MethodDeclaration[54012-54122]:MethodDeclaration[53962-54072]"
    }, {
      "left" : "public int getApplicationBufferSize()",
      "right" : "public int getApplicationBufferSize()",
      "info" : "MethodDeclaration[54132-54240]:MethodDeclaration[54082-54190]"
    }, {
      "left" : "private Certificate[] initPeerCertChain() throws SSLPeerUnverifiedException",
      "right" : "private Certificate[] initPeerCertChain() throws SSLPeerUnverifiedException",
      "info" : "MethodDeclaration[54250-55752]:MethodDeclaration[54200-55702]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2385-2391]:Modifier[2385-2391]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2392-2397]:Modifier[2392-2397]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2398-2403]:TYPE_DECLARATION_KIND[2398-2403]"
    }, {
      "left" : "OpenSslEngine",
      "right" : "OpenSslEngine",
      "info" : "SimpleName[2404-2417]:SimpleName[2404-2417]"
    }, {
      "left" : "SSLEngine",
      "right" : "SSLEngine",
      "info" : "SimpleType[2426-2435]:SimpleType[2426-2435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3078-3680]:Block[3078-3680]"
    }, {
      "left" : "ENGINE_CLOSED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);",
      "right" : "ENGINE_CLOSED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);",
      "info" : "ExpressionStatement[3088-3147]:ExpressionStatement[3088-3147]"
    }, {
      "left" : "RENEGOTIATION_UNSUPPORTED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);",
      "right" : "RENEGOTIATION_UNSUPPORTED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);",
      "info" : "ExpressionStatement[3156-3227]:ExpressionStatement[3156-3227]"
    }, {
      "left" : "ENCRYPTED_PACKET_OVERSIZED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);",
      "right" : "ENCRYPTED_PACKET_OVERSIZED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);",
      "info" : "ExpressionStatement[3236-3308]:ExpressionStatement[3236-3308]"
    }, {
      "left" : "AtomicIntegerFieldUpdater<OpenSslEngine> destroyedUpdater =\n                PlatformDependent.newAtomicIntegerFieldUpdater(OpenSslEngine.class, \"destroyed\");",
      "right" : "AtomicIntegerFieldUpdater<OpenSslEngine> destroyedUpdater =\n                PlatformDependent.newAtomicIntegerFieldUpdater(OpenSslEngine.class, \"destroyed\");",
      "info" : "VariableDeclarationStatement[3318-3475]:VariableDeclarationStatement[3318-3475]"
    }, {
      "left" : "if (destroyedUpdater == null)",
      "right" : "if (destroyedUpdater == null)",
      "info" : "IfStatement[3484-3628]:IfStatement[3484-3628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3514-3628]:Block[3514-3628]"
    }, {
      "left" : "destroyedUpdater = AtomicIntegerFieldUpdater.newUpdater(OpenSslEngine.class, \"destroyed\");",
      "right" : "destroyedUpdater = AtomicIntegerFieldUpdater.newUpdater(OpenSslEngine.class, \"destroyed\");",
      "info" : "ExpressionStatement[3528-3618]:ExpressionStatement[3528-3618]"
    }, {
      "left" : "DESTROYED_UPDATER = destroyedUpdater;",
      "right" : "DESTROYED_UPDATER = destroyedUpdater;",
      "info" : "ExpressionStatement[3637-3674]:ExpressionStatement[3637-3674]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[7779-7790]:MarkerAnnotation[7779-7790]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7795-7801]:Modifier[7795-7801]"
    }, {
      "left" : "OpenSslEngine",
      "right" : "OpenSslEngine",
      "info" : "SimpleName[7802-7815]:SimpleName[7802-7815]"
    }, {
      "left" : "long sslCtx",
      "right" : "long sslCtx",
      "info" : "SingleVariableDeclaration[7816-7827]:SingleVariableDeclaration[7816-7827]"
    }, {
      "left" : "ByteBufAllocator alloc",
      "right" : "ByteBufAllocator alloc",
      "info" : "SingleVariableDeclaration[7829-7851]:SingleVariableDeclaration[7829-7851]"
    }, {
      "left" : "@SuppressWarnings(\"unused\") String fallbackApplicationProtocol",
      "right" : "@SuppressWarnings(\"unused\") String fallbackApplicationProtocol",
      "info" : "SingleVariableDeclaration[7878-7940]:SingleVariableDeclaration[7878-7940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7942-8063]:Block[7942-8063]"
    }, {
      "left" : "this(sslCtx, alloc, false, null, OpenSslContext.NONE_PROTOCOL_NEGOTIATOR, OpenSslEngineMap.EMPTY, false);",
      "right" : "this(sslCtx, alloc, false, null, OpenSslContext.NONE_PROTOCOL_NEGOTIATOR, OpenSslEngineMap.EMPTY, false);",
      "info" : "ConstructorInvocation[7952-8057]:ConstructorInvocation[7952-8057]"
    }, {
      "left" : "OpenSslEngine",
      "right" : "OpenSslEngine",
      "info" : "SimpleName[8448-8461]:SimpleName[8448-8461]"
    }, {
      "left" : "long sslCtx",
      "right" : "long sslCtx",
      "info" : "SingleVariableDeclaration[8462-8473]:SingleVariableDeclaration[8462-8473]"
    }, {
      "left" : "ByteBufAllocator alloc",
      "right" : "ByteBufAllocator alloc",
      "info" : "SingleVariableDeclaration[8475-8497]:SingleVariableDeclaration[8475-8497]"
    }, {
      "left" : "boolean clientMode",
      "right" : "boolean clientMode",
      "info" : "SingleVariableDeclaration[8517-8535]:SingleVariableDeclaration[8517-8535]"
    }, {
      "left" : "OpenSslSessionContext sessionContext",
      "right" : "OpenSslSessionContext sessionContext",
      "info" : "SingleVariableDeclaration[8537-8573]:SingleVariableDeclaration[8537-8573]"
    }, {
      "left" : "OpenSslApplicationProtocolNegotiator apn",
      "right" : "OpenSslApplicationProtocolNegotiator apn",
      "info" : "SingleVariableDeclaration[8593-8633]:SingleVariableDeclaration[8593-8633]"
    }, {
      "left" : "OpenSslEngineMap engineMap",
      "right" : "OpenSslEngineMap engineMap",
      "info" : "SingleVariableDeclaration[8635-8661]:SingleVariableDeclaration[8635-8661]"
    }, {
      "left" : "boolean rejectRemoteInitiatedRenegation",
      "right" : "boolean rejectRemoteInitiatedRenegation",
      "info" : "SingleVariableDeclaration[8681-8720]:SingleVariableDeclaration[8681-8720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8722-8845]:Block[8722-8845]"
    }, {
      "left" : "this(sslCtx, alloc, clientMode, sessionContext, apn, engineMap, rejectRemoteInitiatedRenegation, null, -1);",
      "right" : "this(sslCtx, alloc, clientMode, sessionContext, apn, engineMap, rejectRemoteInitiatedRenegation, null, -1);",
      "info" : "ConstructorInvocation[8732-8839]:ConstructorInvocation[8732-8839]"
    }, {
      "left" : "OpenSslEngine",
      "right" : "OpenSslEngine",
      "info" : "SimpleName[8851-8864]:SimpleName[8851-8864]"
    }, {
      "left" : "long sslCtx",
      "right" : "long sslCtx",
      "info" : "SingleVariableDeclaration[8865-8876]:SingleVariableDeclaration[8865-8876]"
    }, {
      "left" : "ByteBufAllocator alloc",
      "right" : "ByteBufAllocator alloc",
      "info" : "SingleVariableDeclaration[8878-8900]:SingleVariableDeclaration[8878-8900]"
    }, {
      "left" : "boolean clientMode",
      "right" : "boolean clientMode",
      "info" : "SingleVariableDeclaration[8920-8938]:SingleVariableDeclaration[8920-8938]"
    }, {
      "left" : "OpenSslSessionContext sessionContext",
      "right" : "OpenSslSessionContext sessionContext",
      "info" : "SingleVariableDeclaration[8940-8976]:SingleVariableDeclaration[8940-8976]"
    }, {
      "left" : "OpenSslApplicationProtocolNegotiator apn",
      "right" : "OpenSslApplicationProtocolNegotiator apn",
      "info" : "SingleVariableDeclaration[8996-9036]:SingleVariableDeclaration[8996-9036]"
    }, {
      "left" : "OpenSslEngineMap engineMap",
      "right" : "OpenSslEngineMap engineMap",
      "info" : "SingleVariableDeclaration[9038-9064]:SingleVariableDeclaration[9038-9064]"
    }, {
      "left" : "boolean rejectRemoteInitiatedRenegation",
      "right" : "boolean rejectRemoteInitiatedRenegation",
      "info" : "SingleVariableDeclaration[9084-9123]:SingleVariableDeclaration[9084-9123]"
    }, {
      "left" : "String peerHost",
      "right" : "String peerHost",
      "info" : "SingleVariableDeclaration[9125-9140]:SingleVariableDeclaration[9125-9140]"
    }, {
      "left" : "int peerPort",
      "right" : "int peerPort",
      "info" : "SingleVariableDeclaration[9142-9154]:SingleVariableDeclaration[9142-9154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9156-9717]:Block[9156-9717]"
    }, {
      "left" : "super(peerHost, peerPort);",
      "right" : "super(peerHost, peerPort);",
      "info" : "SuperConstructorInvocation[9166-9192]:SuperConstructorInvocation[9166-9192]"
    }, {
      "left" : "OpenSsl.ensureAvailability();",
      "right" : "OpenSsl.ensureAvailability();",
      "info" : "ExpressionStatement[9201-9230]:ExpressionStatement[9201-9230]"
    }, {
      "left" : "if (sslCtx == 0)",
      "right" : "if (sslCtx == 0)",
      "info" : "IfStatement[9239-9321]:IfStatement[9239-9321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9256-9321]:Block[9256-9321]"
    }, {
      "left" : "throw new NullPointerException(\"sslCtx\");",
      "right" : "throw new NullPointerException(\"sslCtx\");",
      "info" : "ThrowStatement[9270-9311]:ThrowStatement[9270-9311]"
    }, {
      "left" : "this.alloc = checkNotNull(alloc, \"alloc\");",
      "right" : "this.alloc = checkNotNull(alloc, \"alloc\");",
      "info" : "ExpressionStatement[9331-9373]:ExpressionStatement[9331-9373]"
    }, {
      "left" : "this.apn = checkNotNull(apn, \"apn\");",
      "right" : "this.apn = checkNotNull(apn, \"apn\");",
      "info" : "ExpressionStatement[9382-9418]:ExpressionStatement[9382-9418]"
    }, {
      "left" : "ssl = SSL.newSSL(sslCtx, !clientMode);",
      "right" : "ssl = SSL.newSSL(sslCtx, !clientMode);",
      "info" : "ExpressionStatement[9427-9465]:ExpressionStatement[9427-9465]"
    }, {
      "left" : "networkBIO = SSL.makeNetworkBIO(ssl);",
      "right" : "networkBIO = SSL.makeNetworkBIO(ssl);",
      "info" : "ExpressionStatement[9474-9511]:ExpressionStatement[9474-9511]"
    }, {
      "left" : "this.clientMode = clientMode;",
      "right" : "this.clientMode = clientMode;",
      "info" : "ExpressionStatement[9520-9549]:ExpressionStatement[9520-9549]"
    }, {
      "left" : "this.sessionContext = sessionContext;",
      "right" : "this.sessionContext = sessionContext;",
      "info" : "ExpressionStatement[9558-9595]:ExpressionStatement[9558-9595]"
    }, {
      "left" : "this.engineMap = engineMap;",
      "right" : "this.engineMap = engineMap;",
      "info" : "ExpressionStatement[9604-9631]:ExpressionStatement[9604-9631]"
    }, {
      "left" : "this.rejectRemoteInitiatedRenegation = rejectRemoteInitiatedRenegation;",
      "right" : "this.rejectRemoteInitiatedRenegation = rejectRemoteInitiatedRenegation;",
      "info" : "ExpressionStatement[9640-9711]:ExpressionStatement[9640-9711]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9723-9732]:MarkerAnnotation[9723-9732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9737-9743]:Modifier[9737-9743]"
    }, {
      "left" : "SSLSession",
      "right" : "SSLSession",
      "info" : "SimpleType[9744-9754]:SimpleType[9744-9754]"
    }, {
      "left" : "getHandshakeSession",
      "right" : "getHandshakeSession",
      "info" : "SimpleName[9755-9774]:SimpleName[9755-9774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9777-10057]:Block[9777-10057]"
    }, {
      "left" : "if (accepted > 0)",
      "right" : "if (accepted > 0)",
      "info" : "IfStatement[9787-9912]:IfStatement[9787-9912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9805-9912]:Block[9805-9912]"
    }, {
      "left" : "return session;",
      "right" : "return session;",
      "info" : "ReturnStatement[9887-9902]:ReturnStatement[9887-9902]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10039-10051]:ReturnStatement[10039-10051]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10320-10326]:Modifier[10320-10326]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[10327-10339]:Modifier[10327-10339]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[10340-10344]:PrimitiveType[10340-10344]"
    }, {
      "left" : "sslPointer",
      "right" : "sslPointer",
      "info" : "SimpleName[10345-10355]:SimpleName[10345-10355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10358-10385]:Block[10358-10385]"
    }, {
      "left" : "return ssl;",
      "right" : "return ssl;",
      "info" : "ReturnStatement[10368-10379]:ReturnStatement[10368-10379]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10436-10442]:Modifier[10436-10442]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[10443-10455]:Modifier[10443-10455]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10456-10460]:PrimitiveType[10456-10460]"
    }, {
      "left" : "shutdown",
      "right" : "shutdown",
      "info" : "SimpleName[10461-10469]:SimpleName[10461-10469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10472-10835]:Block[10472-10835]"
    }, {
      "left" : "if (DESTROYED_UPDATER.compareAndSet(this, 0, 1))",
      "right" : "if (DESTROYED_UPDATER.compareAndSet(this, 0, 1))",
      "info" : "IfStatement[10482-10829]:IfStatement[10482-10829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10531-10829]:Block[10531-10829]"
    }, {
      "left" : "engineMap.remove(ssl);",
      "right" : "engineMap.remove(ssl);",
      "info" : "ExpressionStatement[10545-10567]:ExpressionStatement[10545-10567]"
    }, {
      "left" : "SSL.freeSSL(ssl);",
      "right" : "SSL.freeSSL(ssl);",
      "info" : "ExpressionStatement[10580-10597]:ExpressionStatement[10580-10597]"
    }, {
      "left" : "SSL.freeBIO(networkBIO);",
      "right" : "SSL.freeBIO(networkBIO);",
      "info" : "ExpressionStatement[10610-10634]:ExpressionStatement[10610-10634]"
    }, {
      "left" : "ssl = networkBIO = 0;",
      "right" : "ssl = networkBIO = 0;",
      "info" : "ExpressionStatement[10647-10668]:ExpressionStatement[10647-10668]"
    }, {
      "left" : "isInboundDone = isOutboundDone = engineClosed = true;",
      "right" : "isInboundDone = isOutboundDone = engineClosed = true;",
      "info" : "ExpressionStatement[10766-10819]:ExpressionStatement[10766-10819]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10987-10994]:Modifier[10987-10994]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10995-10998]:PrimitiveType[10995-10998]"
    }, {
      "left" : "writePlaintextData",
      "right" : "writePlaintextData",
      "info" : "SimpleName[10999-11017]:SimpleName[10999-11017]"
    }, {
      "left" : "final ByteBuffer src",
      "right" : "final ByteBuffer src",
      "info" : "SingleVariableDeclaration[11018-11038]:SingleVariableDeclaration[11018-11038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11040-12192]:Block[11040-12192]"
    }, {
      "left" : "final int pos = src.position();",
      "right" : "final int pos = src.position();",
      "info" : "VariableDeclarationStatement[11050-11081]:VariableDeclarationStatement[11050-11081]"
    }, {
      "left" : "final int limit = src.limit();",
      "right" : "final int limit = src.limit();",
      "info" : "VariableDeclarationStatement[11090-11120]:VariableDeclarationStatement[11090-11120]"
    }, {
      "left" : "final int len = Math.min(limit - pos, MAX_PLAINTEXT_LENGTH);",
      "right" : "final int len = Math.min(limit - pos, MAX_PLAINTEXT_LENGTH);",
      "info" : "VariableDeclarationStatement[11129-11189]:VariableDeclarationStatement[11129-11189]"
    }, {
      "left" : "final int sslWrote;",
      "right" : "final int sslWrote;",
      "info" : "VariableDeclarationStatement[11198-11217]:VariableDeclarationStatement[11198-11217]"
    }, {
      "left" : "if (src.isDirect())",
      "right" : "if (src.isDirect())",
      "info" : "IfStatement[11227-12081]:IfStatement[11227-12081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11247-11495]:Block[11247-11495]"
    }, {
      "left" : "final long addr = Buffer.address(src) + pos;",
      "right" : "final long addr = Buffer.address(src) + pos;",
      "info" : "VariableDeclarationStatement[11261-11305]:VariableDeclarationStatement[11261-11305]"
    }, {
      "left" : "sslWrote = SSL.writeToSSL(ssl, addr, len);",
      "right" : "sslWrote = SSL.writeToSSL(ssl, addr, len);",
      "info" : "ExpressionStatement[11318-11360]:ExpressionStatement[11318-11360]"
    }, {
      "left" : "if (sslWrote > 0)",
      "right" : "if (sslWrote > 0)",
      "info" : "IfStatement[11373-11485]:IfStatement[11373-11485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11391-11485]:Block[11391-11485]"
    }, {
      "left" : "src.position(pos + sslWrote);",
      "right" : "src.position(pos + sslWrote);",
      "info" : "ExpressionStatement[11409-11438]:ExpressionStatement[11409-11438]"
    }, {
      "left" : "return sslWrote;",
      "right" : "return sslWrote;",
      "info" : "ReturnStatement[11455-11471]:ReturnStatement[11455-11471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11501-12081]:Block[11501-12081]"
    }, {
      "left" : "ByteBuf buf = alloc.directBuffer(len);",
      "right" : "ByteBuf buf = alloc.directBuffer(len);",
      "info" : "VariableDeclarationStatement[11515-11553]:VariableDeclarationStatement[11515-11553]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11566-12071]:TryStatement[11566-12071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11570-12016]:Block[11570-12016]"
    }, {
      "left" : "final long addr = memoryAddress(buf);",
      "right" : "final long addr = memoryAddress(buf);",
      "info" : "VariableDeclarationStatement[11588-11625]:VariableDeclarationStatement[11588-11625]"
    }, {
      "left" : "src.limit(pos + len);",
      "right" : "src.limit(pos + len);",
      "info" : "ExpressionStatement[11643-11664]:ExpressionStatement[11643-11664]"
    }, {
      "left" : "buf.setBytes(0, src);",
      "right" : "buf.setBytes(0, src);",
      "info" : "ExpressionStatement[11682-11703]:ExpressionStatement[11682-11703]"
    }, {
      "left" : "src.limit(limit);",
      "right" : "src.limit(limit);",
      "info" : "ExpressionStatement[11720-11737]:ExpressionStatement[11720-11737]"
    }, {
      "left" : "sslWrote = SSL.writeToSSL(ssl, addr, len);",
      "right" : "sslWrote = SSL.writeToSSL(ssl, addr, len);",
      "info" : "ExpressionStatement[11755-11797]:ExpressionStatement[11755-11797]"
    }, {
      "left" : "if (sslWrote > 0)",
      "right" : "if (sslWrote > 0)",
      "info" : "IfStatement[11814-12002]:IfStatement[11814-12002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11832-11938]:Block[11832-11938]"
    }, {
      "left" : "src.position(pos + sslWrote);",
      "right" : "src.position(pos + sslWrote);",
      "info" : "ExpressionStatement[11854-11883]:ExpressionStatement[11854-11883]"
    }, {
      "left" : "return sslWrote;",
      "right" : "return sslWrote;",
      "info" : "ReturnStatement[11904-11920]:ReturnStatement[11904-11920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11944-12002]:Block[11944-12002]"
    }, {
      "left" : "src.position(pos);",
      "right" : "src.position(pos);",
      "info" : "ExpressionStatement[11966-11984]:ExpressionStatement[11966-11984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12025-12071]:Block[12025-12071]"
    }, {
      "left" : "buf.release();",
      "right" : "buf.release();",
      "info" : "ExpressionStatement[12043-12057]:ExpressionStatement[12043-12057]"
    }, {
      "left" : "throw new IllegalStateException(\"SSL.writeToSSL() returned a non-positive value: \" + sslWrote);",
      "right" : "throw new IllegalStateException(\"SSL.writeToSSL() returned a non-positive value: \" + sslWrote);",
      "info" : "ThrowStatement[12091-12186]:ThrowStatement[12091-12186]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12270-12277]:Modifier[12270-12277]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12278-12281]:PrimitiveType[12278-12281]"
    }, {
      "left" : "writeEncryptedData",
      "right" : "writeEncryptedData",
      "info" : "SimpleName[12282-12300]:SimpleName[12282-12300]"
    }, {
      "left" : "final ByteBuffer src",
      "right" : "final ByteBuffer src",
      "info" : "SingleVariableDeclaration[12301-12321]:SingleVariableDeclaration[12301-12321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12323-13263]:Block[12323-13263]"
    }, {
      "left" : "final int pos = src.position();",
      "right" : "final int pos = src.position();",
      "info" : "VariableDeclarationStatement[12333-12364]:VariableDeclarationStatement[12333-12364]"
    }, {
      "left" : "final int len = src.remaining();",
      "right" : "final int len = src.remaining();",
      "info" : "VariableDeclarationStatement[12373-12405]:VariableDeclarationStatement[12373-12405]"
    }, {
      "left" : "if (src.isDirect())",
      "right" : "if (src.isDirect())",
      "info" : "IfStatement[12414-13237]:IfStatement[12414-13237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12434-12700]:Block[12434-12700]"
    }, {
      "left" : "final long addr = Buffer.address(src) + pos;",
      "right" : "final long addr = Buffer.address(src) + pos;",
      "info" : "VariableDeclarationStatement[12448-12492]:VariableDeclarationStatement[12448-12492]"
    }, {
      "left" : "final int netWrote = SSL.writeToBIO(networkBIO, addr, len);",
      "right" : "final int netWrote = SSL.writeToBIO(networkBIO, addr, len);",
      "info" : "VariableDeclarationStatement[12505-12564]:VariableDeclarationStatement[12505-12564]"
    }, {
      "left" : "if (netWrote >= 0)",
      "right" : "if (netWrote >= 0)",
      "info" : "IfStatement[12577-12690]:IfStatement[12577-12690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12596-12690]:Block[12596-12690]"
    }, {
      "left" : "src.position(pos + netWrote);",
      "right" : "src.position(pos + netWrote);",
      "info" : "ExpressionStatement[12614-12643]:ExpressionStatement[12614-12643]"
    }, {
      "left" : "return netWrote;",
      "right" : "return netWrote;",
      "info" : "ReturnStatement[12660-12676]:ReturnStatement[12660-12676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12706-13237]:Block[12706-13237]"
    }, {
      "left" : "final ByteBuf buf = alloc.directBuffer(len);",
      "right" : "final ByteBuf buf = alloc.directBuffer(len);",
      "info" : "VariableDeclarationStatement[12720-12764]:VariableDeclarationStatement[12720-12764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12777-13227]:TryStatement[12777-13227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12781-13172]:Block[12781-13172]"
    }, {
      "left" : "final long addr = memoryAddress(buf);",
      "right" : "final long addr = memoryAddress(buf);",
      "info" : "VariableDeclarationStatement[12799-12836]:VariableDeclarationStatement[12799-12836]"
    }, {
      "left" : "buf.setBytes(0, src);",
      "right" : "buf.setBytes(0, src);",
      "info" : "ExpressionStatement[12854-12875]:ExpressionStatement[12854-12875]"
    }, {
      "left" : "final int netWrote = SSL.writeToBIO(networkBIO, addr, len);",
      "right" : "final int netWrote = SSL.writeToBIO(networkBIO, addr, len);",
      "info" : "VariableDeclarationStatement[12893-12952]:VariableDeclarationStatement[12893-12952]"
    }, {
      "left" : "if (netWrote >= 0)",
      "right" : "if (netWrote >= 0)",
      "info" : "IfStatement[12969-13158]:IfStatement[12969-13158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12988-13094]:Block[12988-13094]"
    }, {
      "left" : "src.position(pos + netWrote);",
      "right" : "src.position(pos + netWrote);",
      "info" : "ExpressionStatement[13010-13039]:ExpressionStatement[13010-13039]"
    }, {
      "left" : "return netWrote;",
      "right" : "return netWrote;",
      "info" : "ReturnStatement[13060-13076]:ReturnStatement[13060-13076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13100-13158]:Block[13100-13158]"
    }, {
      "left" : "src.position(pos);",
      "right" : "src.position(pos);",
      "info" : "ExpressionStatement[13122-13140]:ExpressionStatement[13122-13140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13181-13227]:Block[13181-13227]"
    }, {
      "left" : "buf.release();",
      "right" : "buf.release();",
      "info" : "ExpressionStatement[13199-13213]:ExpressionStatement[13199-13213]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[13247-13257]:ReturnStatement[13247-13257]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13342-13349]:Modifier[13342-13349]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13350-13353]:PrimitiveType[13350-13353]"
    }, {
      "left" : "readPlaintextData",
      "right" : "readPlaintextData",
      "info" : "SimpleName[13354-13371]:SimpleName[13354-13371]"
    }, {
      "left" : "final ByteBuffer dst",
      "right" : "final ByteBuffer dst",
      "info" : "SingleVariableDeclaration[13372-13392]:SingleVariableDeclaration[13372-13392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13394-14462]:Block[13394-14462]"
    }, {
      "left" : "if (dst.isDirect())",
      "right" : "if (dst.isDirect())",
      "info" : "IfStatement[13404-14437]:IfStatement[13404-14437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13424-13770]:Block[13424-13770]"
    }, {
      "left" : "final int pos = dst.position();",
      "right" : "final int pos = dst.position();",
      "info" : "VariableDeclarationStatement[13438-13469]:VariableDeclarationStatement[13438-13469]"
    }, {
      "left" : "final long addr = Buffer.address(dst) + pos;",
      "right" : "final long addr = Buffer.address(dst) + pos;",
      "info" : "VariableDeclarationStatement[13482-13526]:VariableDeclarationStatement[13482-13526]"
    }, {
      "left" : "final int len = dst.limit() - pos;",
      "right" : "final int len = dst.limit() - pos;",
      "info" : "VariableDeclarationStatement[13539-13573]:VariableDeclarationStatement[13539-13573]"
    }, {
      "left" : "final int sslRead = SSL.readFromSSL(ssl, addr, len);",
      "right" : "final int sslRead = SSL.readFromSSL(ssl, addr, len);",
      "info" : "VariableDeclarationStatement[13586-13638]:VariableDeclarationStatement[13586-13638]"
    }, {
      "left" : "if (sslRead > 0)",
      "right" : "if (sslRead > 0)",
      "info" : "IfStatement[13651-13760]:IfStatement[13651-13760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13668-13760]:Block[13668-13760]"
    }, {
      "left" : "dst.position(pos + sslRead);",
      "right" : "dst.position(pos + sslRead);",
      "info" : "ExpressionStatement[13686-13714]:ExpressionStatement[13686-13714]"
    }, {
      "left" : "return sslRead;",
      "right" : "return sslRead;",
      "info" : "ReturnStatement[13731-13746]:ReturnStatement[13731-13746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13776-14437]:Block[13776-14437]"
    }, {
      "left" : "final int pos = dst.position();",
      "right" : "final int pos = dst.position();",
      "info" : "VariableDeclarationStatement[13790-13821]:VariableDeclarationStatement[13790-13821]"
    }, {
      "left" : "final int limit = dst.limit();",
      "right" : "final int limit = dst.limit();",
      "info" : "VariableDeclarationStatement[13834-13864]:VariableDeclarationStatement[13834-13864]"
    }, {
      "left" : "final int len = Math.min(MAX_ENCRYPTED_PACKET_LENGTH, limit - pos);",
      "right" : "final int len = Math.min(MAX_ENCRYPTED_PACKET_LENGTH, limit - pos);",
      "info" : "VariableDeclarationStatement[13877-13944]:VariableDeclarationStatement[13877-13944]"
    }, {
      "left" : "final ByteBuf buf = alloc.directBuffer(len);",
      "right" : "final ByteBuf buf = alloc.directBuffer(len);",
      "info" : "VariableDeclarationStatement[13957-14001]:VariableDeclarationStatement[13957-14001]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14014-14427]:TryStatement[14014-14427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14018-14372]:Block[14018-14372]"
    }, {
      "left" : "final long addr = memoryAddress(buf);",
      "right" : "final long addr = memoryAddress(buf);",
      "info" : "VariableDeclarationStatement[14036-14073]:VariableDeclarationStatement[14036-14073]"
    }, {
      "left" : "final int sslRead = SSL.readFromSSL(ssl, addr, len);",
      "right" : "final int sslRead = SSL.readFromSSL(ssl, addr, len);",
      "info" : "VariableDeclarationStatement[14091-14143]:VariableDeclarationStatement[14091-14143]"
    }, {
      "left" : "if (sslRead > 0)",
      "right" : "if (sslRead > 0)",
      "info" : "IfStatement[14160-14358]:IfStatement[14160-14358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14177-14358]:Block[14177-14358]"
    }, {
      "left" : "dst.limit(pos + sslRead);",
      "right" : "dst.limit(pos + sslRead);",
      "info" : "ExpressionStatement[14199-14224]:ExpressionStatement[14199-14224]"
    }, {
      "left" : "buf.getBytes(0, dst);",
      "right" : "buf.getBytes(0, dst);",
      "info" : "ExpressionStatement[14245-14266]:ExpressionStatement[14245-14266]"
    }, {
      "left" : "dst.limit(limit);",
      "right" : "dst.limit(limit);",
      "info" : "ExpressionStatement[14287-14304]:ExpressionStatement[14287-14304]"
    }, {
      "left" : "return sslRead;",
      "right" : "return sslRead;",
      "info" : "ReturnStatement[14325-14340]:ReturnStatement[14325-14340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14381-14427]:Block[14381-14427]"
    }, {
      "left" : "buf.release();",
      "right" : "buf.release();",
      "info" : "ExpressionStatement[14399-14413]:ExpressionStatement[14399-14413]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14447-14456]:ReturnStatement[14447-14456]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14540-14547]:Modifier[14540-14547]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14548-14551]:PrimitiveType[14548-14551]"
    }, {
      "left" : "readEncryptedData",
      "right" : "readEncryptedData",
      "info" : "SimpleName[14552-14569]:SimpleName[14552-14569]"
    }, {
      "left" : "final ByteBuffer dst",
      "right" : "final ByteBuffer dst",
      "info" : "SingleVariableDeclaration[14570-14590]:SingleVariableDeclaration[14570-14590]"
    }, {
      "left" : "final int pending",
      "right" : "final int pending",
      "info" : "SingleVariableDeclaration[14592-14609]:SingleVariableDeclaration[14592-14609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14611-15583]:Block[14611-15583]"
    }, {
      "left" : "if (dst.isDirect() && dst.remaining() >= pending)",
      "right" : "if (dst.isDirect() && dst.remaining() >= pending)",
      "info" : "IfStatement[14621-15558]:IfStatement[14621-15558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14671-14981]:Block[14671-14981]"
    }, {
      "left" : "final int pos = dst.position();",
      "right" : "final int pos = dst.position();",
      "info" : "VariableDeclarationStatement[14685-14716]:VariableDeclarationStatement[14685-14716]"
    }, {
      "left" : "final long addr = Buffer.address(dst) + pos;",
      "right" : "final long addr = Buffer.address(dst) + pos;",
      "info" : "VariableDeclarationStatement[14729-14773]:VariableDeclarationStatement[14729-14773]"
    }, {
      "left" : "final int bioRead = SSL.readFromBIO(networkBIO, addr, pending);",
      "right" : "final int bioRead = SSL.readFromBIO(networkBIO, addr, pending);",
      "info" : "VariableDeclarationStatement[14786-14849]:VariableDeclarationStatement[14786-14849]"
    }, {
      "left" : "if (bioRead > 0)",
      "right" : "if (bioRead > 0)",
      "info" : "IfStatement[14862-14971]:IfStatement[14862-14971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14879-14971]:Block[14879-14971]"
    }, {
      "left" : "dst.position(pos + bioRead);",
      "right" : "dst.position(pos + bioRead);",
      "info" : "ExpressionStatement[14897-14925]:ExpressionStatement[14897-14925]"
    }, {
      "left" : "return bioRead;",
      "right" : "return bioRead;",
      "info" : "ReturnStatement[14942-14957]:ReturnStatement[14942-14957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14987-15558]:Block[14987-15558]"
    }, {
      "left" : "final ByteBuf buf = alloc.directBuffer(pending);",
      "right" : "final ByteBuf buf = alloc.directBuffer(pending);",
      "info" : "VariableDeclarationStatement[15001-15049]:VariableDeclarationStatement[15001-15049]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15062-15548]:TryStatement[15062-15548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15066-15493]:Block[15066-15493]"
    }, {
      "left" : "final long addr = memoryAddress(buf);",
      "right" : "final long addr = memoryAddress(buf);",
      "info" : "VariableDeclarationStatement[15084-15121]:VariableDeclarationStatement[15084-15121]"
    }, {
      "left" : "final int bioRead = SSL.readFromBIO(networkBIO, addr, pending);",
      "right" : "final int bioRead = SSL.readFromBIO(networkBIO, addr, pending);",
      "info" : "VariableDeclarationStatement[15139-15202]:VariableDeclarationStatement[15139-15202]"
    }, {
      "left" : "if (bioRead > 0)",
      "right" : "if (bioRead > 0)",
      "info" : "IfStatement[15219-15479]:IfStatement[15219-15479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15236-15479]:Block[15236-15479]"
    }, {
      "left" : "int oldLimit = dst.limit();",
      "right" : "int oldLimit = dst.limit();",
      "info" : "VariableDeclarationStatement[15258-15285]:VariableDeclarationStatement[15258-15285]"
    }, {
      "left" : "dst.limit(dst.position() + bioRead);",
      "right" : "dst.limit(dst.position() + bioRead);",
      "info" : "ExpressionStatement[15306-15342]:ExpressionStatement[15306-15342]"
    }, {
      "left" : "buf.getBytes(0, dst);",
      "right" : "buf.getBytes(0, dst);",
      "info" : "ExpressionStatement[15363-15384]:ExpressionStatement[15363-15384]"
    }, {
      "left" : "dst.limit(oldLimit);",
      "right" : "dst.limit(oldLimit);",
      "info" : "ExpressionStatement[15405-15425]:ExpressionStatement[15405-15425]"
    }, {
      "left" : "return bioRead;",
      "right" : "return bioRead;",
      "info" : "ReturnStatement[15446-15461]:ReturnStatement[15446-15461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15502-15548]:Block[15502-15548]"
    }, {
      "left" : "buf.release();",
      "right" : "buf.release();",
      "info" : "ExpressionStatement[15520-15534]:ExpressionStatement[15520-15534]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[15568-15577]:ReturnStatement[15568-15577]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15589-15598]:MarkerAnnotation[15589-15598]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15603-15609]:Modifier[15603-15609]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[15610-15622]:Modifier[15610-15622]"
    }, {
      "left" : "SSLEngineResult",
      "right" : "SSLEngineResult",
      "info" : "SimpleType[15623-15638]:SimpleType[15623-15638]"
    }, {
      "left" : "wrap",
      "right" : "wrap",
      "info" : "SimpleName[15639-15643]:SimpleName[15639-15643]"
    }, {
      "left" : "final ByteBuffer[] srcs",
      "right" : "final ByteBuffer[] srcs",
      "info" : "SingleVariableDeclaration[15657-15680]:SingleVariableDeclaration[15657-15680]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[15682-15698]:SingleVariableDeclaration[15682-15698]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[15700-15716]:SingleVariableDeclaration[15700-15716]"
    }, {
      "left" : "final ByteBuffer dst",
      "right" : "final ByteBuffer dst",
      "info" : "SingleVariableDeclaration[15718-15738]:SingleVariableDeclaration[15718-15738]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[15747-15759]:SimpleType[15747-15759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15760-20090]:Block[15760-20090]"
    }, {
      "left" : "if (destroyed != 0)",
      "right" : "if (destroyed != 0)",
      "info" : "IfStatement[15832-15906]:IfStatement[15832-15906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15852-15906]:Block[15852-15906]"
    }, {
      "left" : "return CLOSED_NOT_HANDSHAKING;",
      "right" : "return CLOSED_NOT_HANDSHAKING;",
      "info" : "ReturnStatement[15866-15896]:ReturnStatement[15866-15896]"
    }, {
      "left" : "if (srcs == null)",
      "right" : "if (srcs == null)",
      "info" : "IfStatement[15961-16054]:IfStatement[15961-16054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15979-16054]:Block[15979-16054]"
    }, {
      "left" : "throw new IllegalArgumentException(\"srcs is null\");",
      "right" : "throw new IllegalArgumentException(\"srcs is null\");",
      "info" : "ThrowStatement[15993-16044]:ThrowStatement[15993-16044]"
    }, {
      "left" : "if (dst == null)",
      "right" : "if (dst == null)",
      "info" : "IfStatement[16063-16154]:IfStatement[16063-16154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16080-16154]:Block[16080-16154]"
    }, {
      "left" : "throw new IllegalArgumentException(\"dst is null\");",
      "right" : "throw new IllegalArgumentException(\"dst is null\");",
      "info" : "ThrowStatement[16094-16144]:ThrowStatement[16094-16144]"
    }, {
      "left" : "if (offset >= srcs.length || offset + length > srcs.length)",
      "right" : "if (offset >= srcs.length || offset + length > srcs.length)",
      "info" : "IfStatement[16164-16458]:IfStatement[16164-16458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16224-16458]:Block[16224-16458]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\n                    \"offset: \" + offset + \", length: \" + length +\n                            \" (expected: offset <= offset + length <= srcs.length (\" + srcs.length + \"))\");",
      "right" : "throw new IndexOutOfBoundsException(\n                    \"offset: \" + offset + \", length: \" + length +\n                            \" (expected: offset <= offset + length <= srcs.length (\" + srcs.length + \"))\");",
      "info" : "ThrowStatement[16238-16448]:ThrowStatement[16238-16448]"
    }, {
      "left" : "if (dst.isReadOnly())",
      "right" : "if (dst.isReadOnly())",
      "info" : "IfStatement[16468-16550]:IfStatement[16468-16550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16490-16550]:Block[16490-16550]"
    }, {
      "left" : "throw new ReadOnlyBufferException();",
      "right" : "throw new ReadOnlyBufferException();",
      "info" : "ThrowStatement[16504-16540]:ThrowStatement[16504-16540]"
    }, {
      "left" : "if (accepted == 0)",
      "right" : "if (accepted == 0)",
      "info" : "IfStatement[16632-16702]:IfStatement[16632-16702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16651-16702]:Block[16651-16702]"
    }, {
      "left" : "beginHandshakeImplicitly();",
      "right" : "beginHandshakeImplicitly();",
      "info" : "ExpressionStatement[16665-16692]:ExpressionStatement[16665-16692]"
    }, {
      "left" : "SSLEngineResult.HandshakeStatus handshakeStatus = handshakeStatus0();",
      "right" : "SSLEngineResult.HandshakeStatus handshakeStatus = handshakeStatus0();",
      "info" : "VariableDeclarationStatement[16842-16911]:VariableDeclarationStatement[16842-16911]"
    }, {
      "left" : "if (handshakeStatus == NEED_UNWRAP)",
      "right" : "if (handshakeStatus == NEED_UNWRAP)",
      "info" : "IfStatement[16921-17148]:IfStatement[16921-17148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16957-17148]:Block[16957-17148]"
    }, {
      "left" : "if (!handshakeFinished)",
      "right" : "if (!handshakeFinished)",
      "info" : "IfStatement[16971-17049]:IfStatement[16971-17049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16995-17049]:Block[16995-17049]"
    }, {
      "left" : "return NEED_UNWRAP_OK;",
      "right" : "return NEED_UNWRAP_OK;",
      "info" : "ReturnStatement[17013-17035]:ReturnStatement[17013-17035]"
    }, {
      "left" : "if (engineClosed)",
      "right" : "if (engineClosed)",
      "info" : "IfStatement[17062-17138]:IfStatement[17062-17138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17080-17138]:Block[17080-17138]"
    }, {
      "left" : "return NEED_UNWRAP_CLOSED;",
      "right" : "return NEED_UNWRAP_CLOSED;",
      "info" : "ReturnStatement[17098-17124]:ReturnStatement[17098-17124]"
    }, {
      "left" : "int bytesProduced = 0;",
      "right" : "int bytesProduced = 0;",
      "info" : "VariableDeclarationStatement[17158-17180]:VariableDeclarationStatement[17158-17180]"
    }, {
      "left" : "int pendingNet;",
      "right" : "int pendingNet;",
      "info" : "VariableDeclarationStatement[17189-17204]:VariableDeclarationStatement[17189-17204]"
    }, {
      "left" : "pendingNet = SSL.pendingWrittenBytesInBIO(networkBIO);",
      "right" : "pendingNet = SSL.pendingWrittenBytesInBIO(networkBIO);",
      "info" : "ExpressionStatement[17267-17321]:ExpressionStatement[17267-17321]"
    }, {
      "left" : "if (pendingNet > 0)",
      "right" : "if (pendingNet > 0)",
      "info" : "IfStatement[17330-18287]:IfStatement[17330-18287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17350-18287]:Block[17350-18287]"
    }, {
      "left" : "int capacity = dst.remaining();",
      "right" : "int capacity = dst.remaining();",
      "info" : "VariableDeclarationStatement[17434-17465]:VariableDeclarationStatement[17434-17465]"
    }, {
      "left" : "if (capacity < pendingNet)",
      "right" : "if (capacity < pendingNet)",
      "info" : "IfStatement[17478-17616]:IfStatement[17478-17616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17505-17616]:Block[17505-17616]"
    }, {
      "left" : "return new SSLEngineResult(BUFFER_OVERFLOW, handshakeStatus, 0, bytesProduced);",
      "right" : "return new SSLEngineResult(BUFFER_OVERFLOW, handshakeStatus, 0, bytesProduced);",
      "info" : "ReturnStatement[17523-17602]:ReturnStatement[17523-17602]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17709-17876]:TryStatement[17709-17876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17713-17797]:Block[17713-17797]"
    }, {
      "left" : "bytesProduced += readEncryptedData(dst, pendingNet);",
      "right" : "bytesProduced += readEncryptedData(dst, pendingNet);",
      "info" : "ExpressionStatement[17731-17783]:ExpressionStatement[17731-17783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17818-17876]:Block[17818-17876]"
    }, {
      "left" : "throw new SSLException(e);",
      "right" : "throw new SSLException(e);",
      "info" : "ThrowStatement[17836-17862]:ThrowStatement[17836-17862]"
    }, {
      "left" : "if (isOutboundDone)",
      "right" : "if (isOutboundDone)",
      "info" : "IfStatement[18116-18179]:IfStatement[18116-18179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18136-18179]:Block[18136-18179]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[18154-18165]:ExpressionStatement[18154-18165]"
    }, {
      "left" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), 0, bytesProduced);",
      "right" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), 0, bytesProduced);",
      "info" : "ReturnStatement[18193-18277]:ReturnStatement[18193-18277]"
    }, {
      "left" : "int bytesConsumed = 0;",
      "right" : "int bytesConsumed = 0;",
      "info" : "VariableDeclarationStatement[18385-18407]:VariableDeclarationStatement[18385-18407]"
    }, {
      "left" : "int endOffset = offset + length;",
      "right" : "int endOffset = offset + length;",
      "info" : "VariableDeclarationStatement[18416-18448]:VariableDeclarationStatement[18416-18448]"
    }, {
      "left" : "for (int i = offset; i < endOffset; ++ i)",
      "right" : "for (int i = offset; i < endOffset; ++ i)",
      "info" : "ForStatement[18457-19978]:ForStatement[18457-19978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18499-19978]:Block[18499-19978]"
    }, {
      "left" : "final ByteBuffer src = srcs[i];",
      "right" : "final ByteBuffer src = srcs[i];",
      "info" : "VariableDeclarationStatement[18513-18544]:VariableDeclarationStatement[18513-18544]"
    }, {
      "left" : "if (src == null)",
      "right" : "if (src == null)",
      "info" : "IfStatement[18557-18668]:IfStatement[18557-18668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18574-18668]:Block[18574-18668]"
    }, {
      "left" : "throw new IllegalArgumentException(\"srcs[\" + i + \"] is null\");",
      "right" : "throw new IllegalArgumentException(\"srcs[\" + i + \"] is null\");",
      "info" : "ThrowStatement[18592-18654]:ThrowStatement[18592-18654]"
    }, {
      "left" : "while (src.hasRemaining())",
      "right" : "while (src.hasRemaining())",
      "info" : "WhileStatement[18681-19968]:WhileStatement[18681-19968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18708-19968]:Block[18708-19968]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18797-18969]:TryStatement[18797-18969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18801-18882]:Block[18801-18882]"
    }, {
      "left" : "bytesConsumed += writePlaintextData(src);",
      "right" : "bytesConsumed += writePlaintextData(src);",
      "info" : "ExpressionStatement[18823-18864]:ExpressionStatement[18823-18864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18903-18969]:Block[18903-18969]"
    }, {
      "left" : "throw new SSLException(e);",
      "right" : "throw new SSLException(e);",
      "info" : "ThrowStatement[18925-18951]:ThrowStatement[18925-18951]"
    }, {
      "left" : "pendingNet = SSL.pendingWrittenBytesInBIO(networkBIO);",
      "right" : "pendingNet = SSL.pendingWrittenBytesInBIO(networkBIO);",
      "info" : "ExpressionStatement[19065-19119]:ExpressionStatement[19065-19119]"
    }, {
      "left" : "if (pendingNet > 0)",
      "right" : "if (pendingNet > 0)",
      "info" : "IfStatement[19136-19954]:IfStatement[19136-19954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19156-19954]:Block[19156-19954]"
    }, {
      "left" : "int capacity = dst.remaining();",
      "right" : "int capacity = dst.remaining();",
      "info" : "VariableDeclarationStatement[19256-19287]:VariableDeclarationStatement[19256-19287]"
    }, {
      "left" : "if (capacity < pendingNet)",
      "right" : "if (capacity < pendingNet)",
      "info" : "IfStatement[19308-19510]:IfStatement[19308-19510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19335-19510]:Block[19335-19510]"
    }, {
      "left" : "return new SSLEngineResult(\n                                BUFFER_OVERFLOW, handshakeStatus0(), bytesConsumed, bytesProduced);",
      "right" : "return new SSLEngineResult(\n                                BUFFER_OVERFLOW, handshakeStatus0(), bytesConsumed, bytesProduced);",
      "info" : "ReturnStatement[19361-19488]:ReturnStatement[19361-19488]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19619-19818]:TryStatement[19619-19818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19623-19723]:Block[19623-19723]"
    }, {
      "left" : "bytesProduced += readEncryptedData(dst, pendingNet);",
      "right" : "bytesProduced += readEncryptedData(dst, pendingNet);",
      "info" : "ExpressionStatement[19649-19701]:ExpressionStatement[19649-19701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19744-19818]:Block[19744-19818]"
    }, {
      "left" : "throw new SSLException(e);",
      "right" : "throw new SSLException(e);",
      "info" : "ThrowStatement[19770-19796]:ThrowStatement[19770-19796]"
    }, {
      "left" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), bytesConsumed, bytesProduced);",
      "right" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), bytesConsumed, bytesProduced);",
      "info" : "ReturnStatement[19840-19936]:ReturnStatement[19840-19936]"
    }, {
      "left" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), bytesConsumed, bytesProduced);",
      "right" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), bytesConsumed, bytesProduced);",
      "info" : "ReturnStatement[19988-20084]:ReturnStatement[19988-20084]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20096-20103]:Modifier[20096-20103]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[20104-20116]:SimpleType[20104-20116]"
    }, {
      "left" : "newSSLException",
      "right" : "newSSLException",
      "info" : "SimpleName[20117-20132]:SimpleName[20117-20132]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[20133-20143]:SingleVariableDeclaration[20133-20143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20145-20285]:Block[20145-20285]"
    }, {
      "left" : "if (!handshakeFinished)",
      "right" : "if (!handshakeFinished)",
      "info" : "IfStatement[20155-20241]:IfStatement[20155-20241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20179-20241]:Block[20179-20241]"
    }, {
      "left" : "return new SSLHandshakeException(msg);",
      "right" : "return new SSLHandshakeException(msg);",
      "info" : "ReturnStatement[20193-20231]:ReturnStatement[20193-20231]"
    }, {
      "left" : "return new SSLException(msg);",
      "right" : "return new SSLException(msg);",
      "info" : "ReturnStatement[20250-20279]:ReturnStatement[20250-20279]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20291-20298]:Modifier[20291-20298]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20299-20303]:PrimitiveType[20299-20303]"
    }, {
      "left" : "checkPendingHandshakeException",
      "right" : "checkPendingHandshakeException",
      "info" : "SimpleName[20304-20334]:SimpleName[20304-20334]"
    }, {
      "left" : "SSLHandshakeException",
      "right" : "SSLHandshakeException",
      "info" : "SimpleType[20344-20365]:SimpleType[20344-20365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20366-20583]:Block[20366-20583]"
    }, {
      "left" : "if (handshakeException != null)",
      "right" : "if (handshakeException != null)",
      "info" : "IfStatement[20376-20577]:IfStatement[20376-20577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20408-20577]:Block[20408-20577]"
    }, {
      "left" : "SSLHandshakeException exception = handshakeException;",
      "right" : "SSLHandshakeException exception = handshakeException;",
      "info" : "VariableDeclarationStatement[20422-20475]:VariableDeclarationStatement[20422-20475]"
    }, {
      "left" : "handshakeException = null;",
      "right" : "handshakeException = null;",
      "info" : "ExpressionStatement[20488-20514]:ExpressionStatement[20488-20514]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[20527-20538]:ExpressionStatement[20527-20538]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[20551-20567]:ThrowStatement[20551-20567]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20589-20595]:Modifier[20589-20595]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[20596-20608]:Modifier[20596-20608]"
    }, {
      "left" : "SSLEngineResult",
      "right" : "SSLEngineResult",
      "info" : "SimpleType[20609-20624]:SimpleType[20609-20624]"
    }, {
      "left" : "unwrap",
      "right" : "unwrap",
      "info" : "SimpleName[20625-20631]:SimpleName[20625-20631]"
    }, {
      "left" : "final ByteBuffer[] srcs",
      "right" : "final ByteBuffer[] srcs",
      "info" : "SingleVariableDeclaration[20645-20668]:SingleVariableDeclaration[20645-20668]"
    }, {
      "left" : "int srcsOffset",
      "right" : "int srcsOffset",
      "info" : "SingleVariableDeclaration[20670-20684]:SingleVariableDeclaration[20670-20684]"
    }, {
      "left" : "final int srcsLength",
      "right" : "final int srcsLength",
      "info" : "SingleVariableDeclaration[20686-20706]:SingleVariableDeclaration[20686-20706]"
    }, {
      "left" : "final ByteBuffer[] dsts",
      "right" : "final ByteBuffer[] dsts",
      "info" : "SingleVariableDeclaration[20720-20743]:SingleVariableDeclaration[20720-20743]"
    }, {
      "left" : "final int dstsOffset",
      "right" : "final int dstsOffset",
      "info" : "SingleVariableDeclaration[20745-20765]:SingleVariableDeclaration[20745-20765]"
    }, {
      "left" : "final int dstsLength",
      "right" : "final int dstsLength",
      "info" : "SingleVariableDeclaration[20767-20787]:SingleVariableDeclaration[20767-20787]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[20796-20808]:SimpleType[20796-20808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20809-27629]:Block[20809-27629]"
    }, {
      "left" : "if (destroyed != 0)",
      "right" : "if (destroyed != 0)",
      "info" : "IfStatement[20881-20955]:IfStatement[20881-20955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20901-20955]:Block[20901-20955]"
    }, {
      "left" : "return CLOSED_NOT_HANDSHAKING;",
      "right" : "return CLOSED_NOT_HANDSHAKING;",
      "info" : "ReturnStatement[20915-20945]:ReturnStatement[20915-20945]"
    }, {
      "left" : "if (srcs == null)",
      "right" : "if (srcs == null)",
      "info" : "IfStatement[21010-21091]:IfStatement[21010-21091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21028-21091]:Block[21028-21091]"
    }, {
      "left" : "throw new NullPointerException(\"srcs\");",
      "right" : "throw new NullPointerException(\"srcs\");",
      "info" : "ThrowStatement[21042-21081]:ThrowStatement[21042-21081]"
    }, {
      "left" : "if (srcsOffset >= srcs.length\n                || srcsOffset + srcsLength > srcs.length)",
      "right" : "if (srcsOffset >= srcs.length\n                || srcsOffset + srcsLength > srcs.length)",
      "info" : "IfStatement[21100-21422]:IfStatement[21100-21422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21188-21422]:Block[21188-21422]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\n                    \"offset: \" + srcsOffset + \", length: \" + srcsLength +\n                    \" (expected: offset <= offset + length <= srcs.length (\" + srcs.length + \"))\");",
      "right" : "throw new IndexOutOfBoundsException(\n                    \"offset: \" + srcsOffset + \", length: \" + srcsLength +\n                    \" (expected: offset <= offset + length <= srcs.length (\" + srcs.length + \"))\");",
      "info" : "ThrowStatement[21202-21412]:ThrowStatement[21202-21412]"
    }, {
      "left" : "if (dsts == null)",
      "right" : "if (dsts == null)",
      "info" : "IfStatement[21431-21524]:IfStatement[21431-21524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21449-21524]:Block[21449-21524]"
    }, {
      "left" : "throw new IllegalArgumentException(\"dsts is null\");",
      "right" : "throw new IllegalArgumentException(\"dsts is null\");",
      "info" : "ThrowStatement[21463-21514]:ThrowStatement[21463-21514]"
    }, {
      "left" : "if (dstsOffset >= dsts.length || dstsOffset + dstsLength > dsts.length)",
      "right" : "if (dstsOffset >= dsts.length || dstsOffset + dstsLength > dsts.length)",
      "info" : "IfStatement[21533-21839]:IfStatement[21533-21839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21605-21839]:Block[21605-21839]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\n                    \"offset: \" + dstsOffset + \", length: \" + dstsLength +\n                    \" (expected: offset <= offset + length <= dsts.length (\" + dsts.length + \"))\");",
      "right" : "throw new IndexOutOfBoundsException(\n                    \"offset: \" + dstsOffset + \", length: \" + dstsLength +\n                    \" (expected: offset <= offset + length <= dsts.length (\" + dsts.length + \"))\");",
      "info" : "ThrowStatement[21619-21829]:ThrowStatement[21619-21829]"
    }, {
      "left" : "int capacity = 0;",
      "right" : "int capacity = 0;",
      "info" : "VariableDeclarationStatement[21848-21865]:VariableDeclarationStatement[21848-21865]"
    }, {
      "left" : "final int endOffset = dstsOffset + dstsLength;",
      "right" : "final int endOffset = dstsOffset + dstsLength;",
      "info" : "VariableDeclarationStatement[21874-21920]:VariableDeclarationStatement[21874-21920]"
    }, {
      "left" : "for (int i = dstsOffset; i < endOffset; i ++)",
      "right" : "for (int i = dstsOffset; i < endOffset; i ++)",
      "info" : "ForStatement[21929-22292]:ForStatement[21929-22292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21975-22292]:Block[21975-22292]"
    }, {
      "left" : "ByteBuffer dst = dsts[i];",
      "right" : "ByteBuffer dst = dsts[i];",
      "info" : "VariableDeclarationStatement[21989-22014]:VariableDeclarationStatement[21989-22014]"
    }, {
      "left" : "if (dst == null)",
      "right" : "if (dst == null)",
      "info" : "IfStatement[22027-22138]:IfStatement[22027-22138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22044-22138]:Block[22044-22138]"
    }, {
      "left" : "throw new IllegalArgumentException(\"dsts[\" + i + \"] is null\");",
      "right" : "throw new IllegalArgumentException(\"dsts[\" + i + \"] is null\");",
      "info" : "ThrowStatement[22062-22124]:ThrowStatement[22062-22124]"
    }, {
      "left" : "if (dst.isReadOnly())",
      "right" : "if (dst.isReadOnly())",
      "info" : "IfStatement[22151-22241]:IfStatement[22151-22241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22173-22241]:Block[22173-22241]"
    }, {
      "left" : "throw new ReadOnlyBufferException();",
      "right" : "throw new ReadOnlyBufferException();",
      "info" : "ThrowStatement[22191-22227]:ThrowStatement[22191-22227]"
    }, {
      "left" : "capacity += dst.remaining();",
      "right" : "capacity += dst.remaining();",
      "info" : "ExpressionStatement[22254-22282]:ExpressionStatement[22254-22282]"
    }, {
      "left" : "if (accepted == 0)",
      "right" : "if (accepted == 0)",
      "info" : "IfStatement[22374-22444]:IfStatement[22374-22444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22393-22444]:Block[22393-22444]"
    }, {
      "left" : "beginHandshakeImplicitly();",
      "right" : "beginHandshakeImplicitly();",
      "info" : "ExpressionStatement[22407-22434]:ExpressionStatement[22407-22434]"
    }, {
      "left" : "SSLEngineResult.HandshakeStatus handshakeStatus = handshakeStatus0();",
      "right" : "SSLEngineResult.HandshakeStatus handshakeStatus = handshakeStatus0();",
      "info" : "VariableDeclarationStatement[22586-22655]:VariableDeclarationStatement[22586-22655]"
    }, {
      "left" : "if (handshakeStatus == NEED_WRAP)",
      "right" : "if (handshakeStatus == NEED_WRAP)",
      "info" : "IfStatement[22664-22885]:IfStatement[22664-22885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22698-22885]:Block[22698-22885]"
    }, {
      "left" : "if (!handshakeFinished)",
      "right" : "if (!handshakeFinished)",
      "info" : "IfStatement[22712-22788]:IfStatement[22712-22788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22736-22788]:Block[22736-22788]"
    }, {
      "left" : "return NEED_WRAP_OK;",
      "right" : "return NEED_WRAP_OK;",
      "info" : "ReturnStatement[22754-22774]:ReturnStatement[22754-22774]"
    }, {
      "left" : "if (engineClosed)",
      "right" : "if (engineClosed)",
      "info" : "IfStatement[22801-22875]:IfStatement[22801-22875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22819-22875]:Block[22819-22875]"
    }, {
      "left" : "return NEED_WRAP_CLOSED;",
      "right" : "return NEED_WRAP_CLOSED;",
      "info" : "ReturnStatement[22837-22861]:ReturnStatement[22837-22861]"
    }, {
      "left" : "final int srcsEndOffset = srcsOffset + srcsLength;",
      "right" : "final int srcsEndOffset = srcsOffset + srcsLength;",
      "info" : "VariableDeclarationStatement[22895-22945]:VariableDeclarationStatement[22895-22945]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[22954-22966]:VariableDeclarationStatement[22954-22966]"
    }, {
      "left" : "for (int i = srcsOffset; i < srcsEndOffset; i++)",
      "right" : "for (int i = srcsOffset; i < srcsEndOffset; i++)",
      "info" : "ForStatement[22975-23233]:ForStatement[22975-23233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23024-23233]:Block[23024-23233]"
    }, {
      "left" : "ByteBuffer src = srcs[i];",
      "right" : "ByteBuffer src = srcs[i];",
      "info" : "VariableDeclarationStatement[23038-23063]:VariableDeclarationStatement[23038-23063]"
    }, {
      "left" : "if (src == null)",
      "right" : "if (src == null)",
      "info" : "IfStatement[23076-23187]:IfStatement[23076-23187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23093-23187]:Block[23093-23187]"
    }, {
      "left" : "throw new IllegalArgumentException(\"srcs[\" + i + \"] is null\");",
      "right" : "throw new IllegalArgumentException(\"srcs[\" + i + \"] is null\");",
      "info" : "ThrowStatement[23111-23173]:ThrowStatement[23111-23173]"
    }, {
      "left" : "len += src.remaining();",
      "right" : "len += src.remaining();",
      "info" : "ExpressionStatement[23200-23223]:ExpressionStatement[23200-23223]"
    }, {
      "left" : "if (len > MAX_ENCRYPTED_PACKET_LENGTH)",
      "right" : "if (len > MAX_ENCRYPTED_PACKET_LENGTH)",
      "info" : "IfStatement[23302-23524]:IfStatement[23302-23524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23341-23524]:Block[23341-23524]"
    }, {
      "left" : "isInboundDone = true;",
      "right" : "isInboundDone = true;",
      "info" : "ExpressionStatement[23355-23376]:ExpressionStatement[23355-23376]"
    }, {
      "left" : "isOutboundDone = true;",
      "right" : "isOutboundDone = true;",
      "info" : "ExpressionStatement[23389-23411]:ExpressionStatement[23389-23411]"
    }, {
      "left" : "engineClosed = true;",
      "right" : "engineClosed = true;",
      "info" : "ExpressionStatement[23424-23444]:ExpressionStatement[23424-23444]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[23457-23468]:ExpressionStatement[23457-23468]"
    }, {
      "left" : "throw ENCRYPTED_PACKET_OVERSIZED;",
      "right" : "throw ENCRYPTED_PACKET_OVERSIZED;",
      "info" : "ThrowStatement[23481-23514]:ThrowStatement[23481-23514]"
    }, {
      "left" : "int bytesConsumed = -1;",
      "right" : "int bytesConsumed = -1;",
      "info" : "VariableDeclarationStatement[23581-23604]:VariableDeclarationStatement[23581-23604]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23613-24407]:TryStatement[23613-24407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23617-24336]:Block[23617-24336]"
    }, {
      "left" : "while (srcsOffset < srcsEndOffset)",
      "right" : "while (srcsOffset < srcsEndOffset)",
      "info" : "WhileStatement[23631-24326]:WhileStatement[23631-24326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23666-24326]:Block[23666-24326]"
    }, {
      "left" : "ByteBuffer src = srcs[srcsOffset];",
      "right" : "ByteBuffer src = srcs[srcsOffset];",
      "info" : "VariableDeclarationStatement[23684-23718]:VariableDeclarationStatement[23684-23718]"
    }, {
      "left" : "int remaining = src.remaining();",
      "right" : "int remaining = src.remaining();",
      "info" : "VariableDeclarationStatement[23735-23767]:VariableDeclarationStatement[23735-23767]"
    }, {
      "left" : "int written = writeEncryptedData(src);",
      "right" : "int written = writeEncryptedData(src);",
      "info" : "VariableDeclarationStatement[23784-23822]:VariableDeclarationStatement[23784-23822]"
    }, {
      "left" : "if (written >= 0)",
      "right" : "if (written >= 0)",
      "info" : "IfStatement[23839-24312]:IfStatement[23839-24312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23857-24260]:Block[23857-24260]"
    }, {
      "left" : "if (bytesConsumed == -1)",
      "right" : "if (bytesConsumed == -1)",
      "info" : "IfStatement[23879-24055]:IfStatement[23879-24055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23904-23976]:Block[23904-23976]"
    }, {
      "left" : "bytesConsumed = written;",
      "right" : "bytesConsumed = written;",
      "info" : "ExpressionStatement[23930-23954]:ExpressionStatement[23930-23954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23982-24055]:Block[23982-24055]"
    }, {
      "left" : "bytesConsumed += written;",
      "right" : "bytesConsumed += written;",
      "info" : "ExpressionStatement[24008-24033]:ExpressionStatement[24008-24033]"
    }, {
      "left" : "if (written == remaining)",
      "right" : "if (written == remaining)",
      "info" : "IfStatement[24076-24242]:IfStatement[24076-24242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24102-24164]:Block[24102-24164]"
    }, {
      "left" : "srcsOffset ++;",
      "right" : "srcsOffset ++;",
      "info" : "ExpressionStatement[24128-24142]:ExpressionStatement[24128-24142]"
    }, {
      "left" : "if (written == 0)",
      "right" : "if (written == 0)",
      "info" : "IfStatement[24170-24242]:IfStatement[24170-24242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24188-24242]:Block[24188-24242]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24214-24220]:BreakStatement[24214-24220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24266-24312]:Block[24266-24312]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24288-24294]:BreakStatement[24288-24294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24357-24407]:Block[24357-24407]"
    }, {
      "left" : "throw new SSLException(e);",
      "right" : "throw new SSLException(e);",
      "info" : "ThrowStatement[24371-24397]:ThrowStatement[24371-24397]"
    }, {
      "left" : "if (bytesConsumed >= 0)",
      "right" : "if (bytesConsumed >= 0)",
      "info" : "IfStatement[24416-25708]:IfStatement[24416-25708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24440-25548]:Block[24440-25548]"
    }, {
      "left" : "int lastPrimingReadResult = SSL.readFromSSL(ssl, EMPTY_ADDR, 0);",
      "right" : "int lastPrimingReadResult = SSL.readFromSSL(ssl, EMPTY_ADDR, 0);",
      "info" : "VariableDeclarationStatement[24454-24518]:VariableDeclarationStatement[24454-24518]"
    }, {
      "left" : "if (lastPrimingReadResult <= 0)",
      "right" : "if (lastPrimingReadResult <= 0)",
      "info" : "IfStatement[24686-25490]:IfStatement[24686-25490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24718-25490]:Block[24718-25490]"
    }, {
      "left" : "long error = SSL.getLastErrorNumber();",
      "right" : "long error = SSL.getLastErrorNumber();",
      "info" : "VariableDeclarationStatement[24807-24845]:VariableDeclarationStatement[24807-24845]"
    }, {
      "left" : "if (OpenSsl.isError(error))",
      "right" : "if (OpenSsl.isError(error))",
      "info" : "IfStatement[24862-25476]:IfStatement[24862-25476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24890-25397]:Block[24890-25397]"
    }, {
      "left" : "String err = SSL.getErrorString(error);",
      "right" : "String err = SSL.getErrorString(error);",
      "info" : "VariableDeclarationStatement[24912-24951]:VariableDeclarationStatement[24912-24951]"
    }, {
      "left" : "if (logger.isDebugEnabled())",
      "right" : "if (logger.isDebugEnabled())",
      "info" : "IfStatement[24972-25235]:IfStatement[24972-25235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25001-25235]:Block[25001-25235]"
    }, {
      "left" : "logger.debug(\n                                \"SSL_read failed: primingReadResult: \" + lastPrimingReadResult +\n                                        \"; OpenSSL error: '\" + err + '\\'');",
      "right" : "logger.debug(\n                                \"SSL_read failed: primingReadResult: \" + lastPrimingReadResult +\n                                        \"; OpenSSL error: '\" + err + '\\'');",
      "info" : "ExpressionStatement[25027-25213]:ExpressionStatement[25027-25213]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[25320-25331]:ExpressionStatement[25320-25331]"
    }, {
      "left" : "throw newSSLException(err);",
      "right" : "throw newSSLException(err);",
      "info" : "ThrowStatement[25352-25379]:ThrowStatement[25352-25379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25403-25476]:Block[25403-25476]"
    }, {
      "left" : "checkPendingHandshakeException();",
      "right" : "checkPendingHandshakeException();",
      "info" : "ExpressionStatement[25425-25458]:ExpressionStatement[25425-25458]"
    }, {
      "left" : "rejectRemoteInitiatedRenegation();",
      "right" : "rejectRemoteInitiatedRenegation();",
      "info" : "ExpressionStatement[25504-25538]:ExpressionStatement[25504-25538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25554-25708]:Block[25554-25708]"
    }, {
      "left" : "bytesConsumed = 0;",
      "right" : "bytesConsumed = 0;",
      "info" : "ExpressionStatement[25680-25698]:ExpressionStatement[25680-25698]"
    }, {
      "left" : "int pendingApp = (handshakeFinished || SSL.isInInit(ssl) == 0) ? SSL.pendingReadableBytesInSSL(ssl) : 0;",
      "right" : "int pendingApp = (handshakeFinished || SSL.isInInit(ssl) == 0) ? SSL.pendingReadableBytesInSSL(ssl) : 0;",
      "info" : "VariableDeclarationStatement[25906-26010]:VariableDeclarationStatement[25906-26010]"
    }, {
      "left" : "int bytesProduced = 0;",
      "right" : "int bytesProduced = 0;",
      "info" : "VariableDeclarationStatement[26019-26041]:VariableDeclarationStatement[26019-26041]"
    }, {
      "left" : "if (pendingApp > 0)",
      "right" : "if (pendingApp > 0)",
      "info" : "IfStatement[26051-27220]:IfStatement[26051-27220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26071-27220]:Block[26071-27220]"
    }, {
      "left" : "if (capacity < pendingApp)",
      "right" : "if (capacity < pendingApp)",
      "info" : "IfStatement[26156-26297]:IfStatement[26156-26297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26183-26297]:Block[26183-26297]"
    }, {
      "left" : "return new SSLEngineResult(BUFFER_OVERFLOW, handshakeStatus0(), bytesConsumed, 0);",
      "right" : "return new SSLEngineResult(BUFFER_OVERFLOW, handshakeStatus0(), bytesConsumed, 0);",
      "info" : "ReturnStatement[26201-26283]:ReturnStatement[26201-26283]"
    }, {
      "left" : "int idx = dstsOffset;",
      "right" : "int idx = dstsOffset;",
      "info" : "VariableDeclarationStatement[26363-26384]:VariableDeclarationStatement[26363-26384]"
    }, {
      "left" : "while (idx < endOffset)",
      "right" : "while (idx < endOffset)",
      "info" : "WhileStatement[26397-27210]:WhileStatement[26397-27210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26421-27210]:Block[26421-27210]"
    }, {
      "left" : "ByteBuffer dst = dsts[idx];",
      "right" : "ByteBuffer dst = dsts[idx];",
      "info" : "VariableDeclarationStatement[26439-26466]:VariableDeclarationStatement[26439-26466]"
    }, {
      "left" : "if (!dst.hasRemaining())",
      "right" : "if (!dst.hasRemaining())",
      "info" : "IfStatement[26483-26585]:IfStatement[26483-26585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26508-26585]:Block[26508-26585]"
    }, {
      "left" : "idx ++;",
      "right" : "idx ++;",
      "info" : "ExpressionStatement[26530-26537]:ExpressionStatement[26530-26537]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[26558-26567]:ContinueStatement[26558-26567]"
    }, {
      "left" : "if (pendingApp <= 0)",
      "right" : "if (pendingApp <= 0)",
      "info" : "IfStatement[26603-26670]:IfStatement[26603-26670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26624-26670]:Block[26624-26670]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26646-26652]:BreakStatement[26646-26652]"
    }, {
      "left" : "int bytesRead;",
      "right" : "int bytesRead;",
      "info" : "VariableDeclarationStatement[26688-26702]:VariableDeclarationStatement[26688-26702]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26719-26885]:TryStatement[26719-26885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26723-26798]:Block[26723-26798]"
    }, {
      "left" : "bytesRead = readPlaintextData(dst);",
      "right" : "bytesRead = readPlaintextData(dst);",
      "info" : "ExpressionStatement[26745-26780]:ExpressionStatement[26745-26780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26819-26885]:Block[26819-26885]"
    }, {
      "left" : "throw new SSLException(e);",
      "right" : "throw new SSLException(e);",
      "info" : "ThrowStatement[26841-26867]:ThrowStatement[26841-26867]"
    }, {
      "left" : "rejectRemoteInitiatedRenegation();",
      "right" : "rejectRemoteInitiatedRenegation();",
      "info" : "ExpressionStatement[26903-26937]:ExpressionStatement[26903-26937]"
    }, {
      "left" : "if (bytesRead == 0)",
      "right" : "if (bytesRead == 0)",
      "info" : "IfStatement[26955-27021]:IfStatement[26955-27021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26975-27021]:Block[26975-27021]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26997-27003]:BreakStatement[26997-27003]"
    }, {
      "left" : "bytesProduced += bytesRead;",
      "right" : "bytesProduced += bytesRead;",
      "info" : "ExpressionStatement[27038-27065]:ExpressionStatement[27038-27065]"
    }, {
      "left" : "pendingApp -= bytesRead;",
      "right" : "pendingApp -= bytesRead;",
      "info" : "ExpressionStatement[27082-27106]:ExpressionStatement[27082-27106]"
    }, {
      "left" : "if (!dst.hasRemaining())",
      "right" : "if (!dst.hasRemaining())",
      "info" : "IfStatement[27124-27196]:IfStatement[27124-27196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27149-27196]:Block[27149-27196]"
    }, {
      "left" : "idx ++;",
      "right" : "idx ++;",
      "info" : "ExpressionStatement[27171-27178]:ExpressionStatement[27171-27178]"
    }, {
      "left" : "if (!receivedShutdown && (SSL.getShutdown(ssl) & SSL.SSL_RECEIVED_SHUTDOWN) == SSL.SSL_RECEIVED_SHUTDOWN)",
      "right" : "if (!receivedShutdown && (SSL.getShutdown(ssl) & SSL.SSL_RECEIVED_SHUTDOWN) == SSL.SSL_RECEIVED_SHUTDOWN)",
      "info" : "IfStatement[27306-27517]:IfStatement[27306-27517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27412-27517]:Block[27412-27517]"
    }, {
      "left" : "receivedShutdown = true;",
      "right" : "receivedShutdown = true;",
      "info" : "ExpressionStatement[27426-27450]:ExpressionStatement[27426-27450]"
    }, {
      "left" : "closeOutbound();",
      "right" : "closeOutbound();",
      "info" : "ExpressionStatement[27463-27479]:ExpressionStatement[27463-27479]"
    }, {
      "left" : "closeInbound();",
      "right" : "closeInbound();",
      "info" : "ExpressionStatement[27492-27507]:ExpressionStatement[27492-27507]"
    }, {
      "left" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), bytesConsumed, bytesProduced);",
      "right" : "return new SSLEngineResult(getEngineStatus(), handshakeStatus0(), bytesConsumed, bytesProduced);",
      "info" : "ReturnStatement[27527-27623]:ReturnStatement[27527-27623]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27635-27642]:Modifier[27635-27642]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27643-27647]:PrimitiveType[27643-27647]"
    }, {
      "left" : "rejectRemoteInitiatedRenegation",
      "right" : "rejectRemoteInitiatedRenegation",
      "info" : "SimpleName[27648-27679]:SimpleName[27648-27679]"
    }, {
      "left" : "SSLHandshakeException",
      "right" : "SSLHandshakeException",
      "info" : "SimpleType[27689-27710]:SimpleType[27689-27710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27711-28079]:Block[27711-28079]"
    }, {
      "left" : "if (rejectRemoteInitiatedRenegation && SSL.getHandshakeCount(ssl) > 1)",
      "right" : "if (rejectRemoteInitiatedRenegation && SSL.getHandshakeCount(ssl) > 1)",
      "info" : "IfStatement[27721-28073]:IfStatement[27721-28073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27792-28073]:Block[27792-28073]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[27962-27973]:ExpressionStatement[27962-27973]"
    }, {
      "left" : "throw new SSLHandshakeException(\"remote-initiated renegotation not allowed\");",
      "right" : "throw new SSLHandshakeException(\"remote-initiated renegotation not allowed\");",
      "info" : "ThrowStatement[27986-28063]:ThrowStatement[27986-28063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28085-28091]:Modifier[28085-28091]"
    }, {
      "left" : "SSLEngineResult",
      "right" : "SSLEngineResult",
      "info" : "SimpleType[28092-28107]:SimpleType[28092-28107]"
    }, {
      "left" : "unwrap",
      "right" : "unwrap",
      "info" : "SimpleName[28108-28114]:SimpleName[28108-28114]"
    }, {
      "left" : "final ByteBuffer[] srcs",
      "right" : "final ByteBuffer[] srcs",
      "info" : "SingleVariableDeclaration[28115-28138]:SingleVariableDeclaration[28115-28138]"
    }, {
      "left" : "final ByteBuffer[] dsts",
      "right" : "final ByteBuffer[] dsts",
      "info" : "SingleVariableDeclaration[28140-28163]:SingleVariableDeclaration[28140-28163]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[28172-28184]:SimpleType[28172-28184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28185-28259]:Block[28185-28259]"
    }, {
      "left" : "return unwrap(srcs, 0, srcs.length, dsts, 0, dsts.length);",
      "right" : "return unwrap(srcs, 0, srcs.length, dsts, 0, dsts.length);",
      "info" : "ReturnStatement[28195-28253]:ReturnStatement[28195-28253]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28265-28274]:MarkerAnnotation[28265-28274]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28279-28285]:Modifier[28279-28285]"
    }, {
      "left" : "SSLEngineResult",
      "right" : "SSLEngineResult",
      "info" : "SimpleType[28286-28301]:SimpleType[28286-28301]"
    }, {
      "left" : "unwrap",
      "right" : "unwrap",
      "info" : "SimpleName[28302-28308]:SimpleName[28302-28308]"
    }, {
      "left" : "final ByteBuffer src",
      "right" : "final ByteBuffer src",
      "info" : "SingleVariableDeclaration[28322-28342]:SingleVariableDeclaration[28322-28342]"
    }, {
      "left" : "final ByteBuffer[] dsts",
      "right" : "final ByteBuffer[] dsts",
      "info" : "SingleVariableDeclaration[28344-28367]:SingleVariableDeclaration[28344-28367]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[28369-28385]:SingleVariableDeclaration[28369-28385]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[28387-28403]:SingleVariableDeclaration[28387-28403]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[28412-28424]:SimpleType[28412-28424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28425-28509]:Block[28425-28509]"
    }, {
      "left" : "return unwrap(new ByteBuffer[] { src }, 0, 1, dsts, offset, length);",
      "right" : "return unwrap(new ByteBuffer[] { src }, 0, 1, dsts, offset, length);",
      "info" : "ReturnStatement[28435-28503]:ReturnStatement[28435-28503]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28515-28524]:MarkerAnnotation[28515-28524]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28529-28535]:Modifier[28529-28535]"
    }, {
      "left" : "Runnable",
      "right" : "Runnable",
      "info" : "SimpleType[28536-28544]:SimpleType[28536-28544]"
    }, {
      "left" : "getDelegatedTask",
      "right" : "getDelegatedTask",
      "info" : "SimpleName[28545-28561]:SimpleName[28545-28561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28564-28740]:Block[28564-28740]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28722-28734]:ReturnStatement[28722-28734]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28746-28755]:MarkerAnnotation[28746-28755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28760-28766]:Modifier[28760-28766]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[28767-28779]:Modifier[28767-28779]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28780-28784]:PrimitiveType[28780-28784]"
    }, {
      "left" : "closeInbound",
      "right" : "closeInbound",
      "info" : "SimpleName[28785-28797]:SimpleName[28785-28797]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[28807-28819]:SimpleType[28807-28819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28820-29169]:Block[28820-29169]"
    }, {
      "left" : "if (isInboundDone)",
      "right" : "if (isInboundDone)",
      "info" : "IfStatement[28830-28880]:IfStatement[28830-28880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28849-28880]:Block[28849-28880]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28863-28870]:ReturnStatement[28863-28870]"
    }, {
      "left" : "isInboundDone = true;",
      "right" : "isInboundDone = true;",
      "info" : "ExpressionStatement[28890-28911]:ExpressionStatement[28890-28911]"
    }, {
      "left" : "engineClosed = true;",
      "right" : "engineClosed = true;",
      "info" : "ExpressionStatement[28920-28940]:ExpressionStatement[28920-28940]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[28950-28961]:ExpressionStatement[28950-28961]"
    }, {
      "left" : "if (accepted != 0 && !receivedShutdown)",
      "right" : "if (accepted != 0 && !receivedShutdown)",
      "info" : "IfStatement[28971-29163]:IfStatement[28971-29163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29011-29163]:Block[29011-29163]"
    }, {
      "left" : "throw new SSLException(\n                    \"Inbound closed before receiving peer's close_notify: possible truncation attack?\");",
      "right" : "throw new SSLException(\n                    \"Inbound closed before receiving peer's close_notify: possible truncation attack?\");",
      "info" : "ThrowStatement[29025-29153]:ThrowStatement[29025-29153]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29175-29184]:MarkerAnnotation[29175-29184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29189-29195]:Modifier[29189-29195]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[29196-29208]:Modifier[29196-29208]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29209-29216]:PrimitiveType[29209-29216]"
    }, {
      "left" : "isInboundDone",
      "right" : "isInboundDone",
      "info" : "SimpleName[29217-29230]:SimpleName[29217-29230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29233-29286]:Block[29233-29286]"
    }, {
      "left" : "return isInboundDone || engineClosed;",
      "right" : "return isInboundDone || engineClosed;",
      "info" : "ReturnStatement[29243-29280]:ReturnStatement[29243-29280]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29292-29301]:MarkerAnnotation[29292-29301]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29306-29312]:Modifier[29306-29312]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[29313-29325]:Modifier[29313-29325]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29326-29330]:PrimitiveType[29326-29330]"
    }, {
      "left" : "closeOutbound",
      "right" : "closeOutbound",
      "info" : "SimpleName[29331-29344]:SimpleName[29331-29344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29347-29801]:Block[29347-29801]"
    }, {
      "left" : "if (isOutboundDone)",
      "right" : "if (isOutboundDone)",
      "info" : "IfStatement[29357-29408]:IfStatement[29357-29408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29377-29408]:Block[29377-29408]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29391-29398]:ReturnStatement[29391-29398]"
    }, {
      "left" : "isOutboundDone = true;",
      "right" : "isOutboundDone = true;",
      "info" : "ExpressionStatement[29418-29440]:ExpressionStatement[29418-29440]"
    }, {
      "left" : "engineClosed = true;",
      "right" : "engineClosed = true;",
      "info" : "ExpressionStatement[29449-29469]:ExpressionStatement[29449-29469]"
    }, {
      "left" : "if (accepted != 0 && destroyed == 0)",
      "right" : "if (accepted != 0 && destroyed == 0)",
      "info" : "IfStatement[29479-29795]:IfStatement[29479-29795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29516-29699]:Block[29516-29699]"
    }, {
      "left" : "int mode = SSL.getShutdown(ssl);",
      "right" : "int mode = SSL.getShutdown(ssl);",
      "info" : "VariableDeclarationStatement[29530-29562]:VariableDeclarationStatement[29530-29562]"
    }, {
      "left" : "if ((mode & SSL.SSL_SENT_SHUTDOWN) != SSL.SSL_SENT_SHUTDOWN)",
      "right" : "if ((mode & SSL.SSL_SENT_SHUTDOWN) != SSL.SSL_SENT_SHUTDOWN)",
      "info" : "IfStatement[29575-29689]:IfStatement[29575-29689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29636-29689]:Block[29636-29689]"
    }, {
      "left" : "SSL.shutdownSSL(ssl);",
      "right" : "SSL.shutdownSSL(ssl);",
      "info" : "ExpressionStatement[29654-29675]:ExpressionStatement[29654-29675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29705-29795]:Block[29705-29795]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[29774-29785]:ExpressionStatement[29774-29785]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29807-29816]:MarkerAnnotation[29807-29816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29821-29827]:Modifier[29821-29827]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[29828-29840]:Modifier[29828-29840]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29841-29848]:PrimitiveType[29841-29848]"
    }, {
      "left" : "isOutboundDone",
      "right" : "isOutboundDone",
      "info" : "SimpleName[29849-29863]:SimpleName[29849-29863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29866-29904]:Block[29866-29904]"
    }, {
      "left" : "return isOutboundDone;",
      "right" : "return isOutboundDone;",
      "info" : "ReturnStatement[29876-29898]:ReturnStatement[29876-29898]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29910-29919]:MarkerAnnotation[29910-29919]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29924-29930]:Modifier[29924-29930]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[29931-29939]:ArrayType[29931-29939]"
    }, {
      "left" : "getSupportedCipherSuites",
      "right" : "getSupportedCipherSuites",
      "info" : "SimpleName[29940-29964]:SimpleName[29940-29964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29967-30139]:Block[29967-30139]"
    }, {
      "left" : "Set<String> availableCipherSuites = OpenSsl.availableCipherSuites();",
      "right" : "Set<String> availableCipherSuites = OpenSsl.availableCipherSuites();",
      "info" : "VariableDeclarationStatement[29977-30045]:VariableDeclarationStatement[29977-30045]"
    }, {
      "left" : "return availableCipherSuites.toArray(new String[availableCipherSuites.size()]);",
      "right" : "return availableCipherSuites.toArray(new String[availableCipherSuites.size()]);",
      "info" : "ReturnStatement[30054-30133]:ReturnStatement[30054-30133]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30145-30154]:MarkerAnnotation[30145-30154]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30159-30165]:Modifier[30159-30165]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[30166-30174]:ArrayType[30166-30174]"
    }, {
      "left" : "getEnabledCipherSuites",
      "right" : "getEnabledCipherSuites",
      "info" : "SimpleName[30175-30197]:SimpleName[30175-30197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30200-30806]:Block[30200-30806]"
    }, {
      "left" : "final String[] enabled;",
      "right" : "final String[] enabled;",
      "info" : "VariableDeclarationStatement[30210-30233]:VariableDeclarationStatement[30210-30233]"
    }, {
      "left" : "synchronized (this) {\n            if (destroyed == 0) {\n                enabled = SSL.getCiphers(ssl);\n            } else {\n                return EmptyArrays.EMPTY_STRINGS;\n            }\n        }",
      "right" : "synchronized (this) {\n            if (destroyed == 0) {\n                enabled = SSL.getCiphers(ssl);\n            } else {\n                return EmptyArrays.EMPTY_STRINGS;\n            }\n        }",
      "info" : "SynchronizedStatement[30242-30439]:SynchronizedStatement[30242-30439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30262-30439]:Block[30262-30439]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[30276-30429]:IfStatement[30276-30429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30296-30358]:Block[30296-30358]"
    }, {
      "left" : "enabled = SSL.getCiphers(ssl);",
      "right" : "enabled = SSL.getCiphers(ssl);",
      "info" : "ExpressionStatement[30314-30344]:ExpressionStatement[30314-30344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30364-30429]:Block[30364-30429]"
    }, {
      "left" : "return EmptyArrays.EMPTY_STRINGS;",
      "right" : "return EmptyArrays.EMPTY_STRINGS;",
      "info" : "ReturnStatement[30382-30415]:ReturnStatement[30382-30415]"
    }, {
      "left" : "if (enabled == null)",
      "right" : "if (enabled == null)",
      "info" : "IfStatement[30448-30800]:IfStatement[30448-30800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30469-30526]:Block[30469-30526]"
    }, {
      "left" : "return EmptyArrays.EMPTY_STRINGS;",
      "right" : "return EmptyArrays.EMPTY_STRINGS;",
      "info" : "ReturnStatement[30483-30516]:ReturnStatement[30483-30516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30532-30800]:Block[30532-30800]"
    }, {
      "left" : "for (int i = 0; i < enabled.length; i++)",
      "right" : "for (int i = 0; i < enabled.length; i++)",
      "info" : "ForStatement[30546-30762]:ForStatement[30546-30762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30587-30762]:Block[30587-30762]"
    }, {
      "left" : "String mapped = toJavaCipherSuite(enabled[i]);",
      "right" : "String mapped = toJavaCipherSuite(enabled[i]);",
      "info" : "VariableDeclarationStatement[30605-30651]:VariableDeclarationStatement[30605-30651]"
    }, {
      "left" : "if (mapped != null)",
      "right" : "if (mapped != null)",
      "info" : "IfStatement[30668-30748]:IfStatement[30668-30748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30688-30748]:Block[30688-30748]"
    }, {
      "left" : "enabled[i] = mapped;",
      "right" : "enabled[i] = mapped;",
      "info" : "ExpressionStatement[30710-30730]:ExpressionStatement[30710-30730]"
    }, {
      "left" : "return enabled;",
      "right" : "return enabled;",
      "info" : "ReturnStatement[30775-30790]:ReturnStatement[30775-30790]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30812-30821]:MarkerAnnotation[30812-30821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30826-30832]:Modifier[30826-30832]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30833-30837]:PrimitiveType[30833-30837]"
    }, {
      "left" : "setEnabledCipherSuites",
      "right" : "setEnabledCipherSuites",
      "info" : "SimpleName[30838-30860]:SimpleName[30838-30860]"
    }, {
      "left" : "String[] cipherSuites",
      "right" : "String[] cipherSuites",
      "info" : "SingleVariableDeclaration[30861-30882]:SingleVariableDeclaration[30861-30882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30884-32193]:Block[30884-32193]"
    }, {
      "left" : "checkNotNull(cipherSuites, \"cipherSuites\");",
      "right" : "checkNotNull(cipherSuites, \"cipherSuites\");",
      "info" : "ExpressionStatement[30894-30937]:ExpressionStatement[30894-30937]"
    }, {
      "left" : "final StringBuilder buf = new StringBuilder();",
      "right" : "final StringBuilder buf = new StringBuilder();",
      "info" : "VariableDeclarationStatement[30947-30993]:VariableDeclarationStatement[30947-30993]"
    }, {
      "left" : "for (String c: cipherSuites)",
      "right" : "for (String c: cipherSuites)",
      "info" : "EnhancedForStatement[31002-31509]:EnhancedForStatement[31002-31509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31031-31509]:Block[31031-31509]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[31045-31098]:IfStatement[31045-31098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31060-31098]:Block[31060-31098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31078-31084]:BreakStatement[31078-31084]"
    }, {
      "left" : "String converted = CipherSuiteConverter.toOpenSsl(c);",
      "right" : "String converted = CipherSuiteConverter.toOpenSsl(c);",
      "info" : "VariableDeclarationStatement[31112-31165]:VariableDeclarationStatement[31112-31165]"
    }, {
      "left" : "if (converted == null)",
      "right" : "if (converted == null)",
      "info" : "IfStatement[31178-31247]:IfStatement[31178-31247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31201-31247]:Block[31201-31247]"
    }, {
      "left" : "converted = c;",
      "right" : "converted = c;",
      "info" : "ExpressionStatement[31219-31233]:ExpressionStatement[31219-31233]"
    }, {
      "left" : "if (!OpenSsl.isCipherSuiteAvailable(converted))",
      "right" : "if (!OpenSsl.isCipherSuiteAvailable(converted))",
      "info" : "IfStatement[31261-31434]:IfStatement[31261-31434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31309-31434]:Block[31309-31434]"
    }, {
      "left" : "throw new IllegalArgumentException(\"unsupported cipher suite: \" + c + '(' + converted + ')');",
      "right" : "throw new IllegalArgumentException(\"unsupported cipher suite: \" + c + '(' + converted + ')');",
      "info" : "ThrowStatement[31327-31420]:ThrowStatement[31327-31420]"
    }, {
      "left" : "buf.append(converted);",
      "right" : "buf.append(converted);",
      "info" : "ExpressionStatement[31448-31470]:ExpressionStatement[31448-31470]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[31483-31499]:ExpressionStatement[31483-31499]"
    }, {
      "left" : "if (buf.length() == 0)",
      "right" : "if (buf.length() == 0)",
      "info" : "IfStatement[31519-31624]:IfStatement[31519-31624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31542-31624]:Block[31542-31624]"
    }, {
      "left" : "throw new IllegalArgumentException(\"empty cipher suites\");",
      "right" : "throw new IllegalArgumentException(\"empty cipher suites\");",
      "info" : "ThrowStatement[31556-31614]:ThrowStatement[31556-31614]"
    }, {
      "left" : "buf.setLength(buf.length() - 1);",
      "right" : "buf.setLength(buf.length() - 1);",
      "info" : "ExpressionStatement[31633-31665]:ExpressionStatement[31633-31665]"
    }, {
      "left" : "final String cipherSuiteSpec = buf.toString();",
      "right" : "final String cipherSuiteSpec = buf.toString();",
      "info" : "VariableDeclarationStatement[31675-31721]:VariableDeclarationStatement[31675-31721]"
    }, {
      "left" : "synchronized (this) {\n            if (destroyed == 0) {\n                try {\n                    SSL.setCipherSuites(ssl, cipherSuiteSpec);\n                } catch (Exception e) {\n                    throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec, e);\n                }\n            } else {\n                throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec);\n            }\n        }",
      "right" : "synchronized (this) {\n            if (destroyed == 0) {\n                try {\n                    SSL.setCipherSuites(ssl, cipherSuiteSpec);\n                } catch (Exception e) {\n                    throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec, e);\n                }\n            } else {\n                throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec);\n            }\n        }",
      "info" : "SynchronizedStatement[31731-32187]:SynchronizedStatement[31731-32187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31751-32187]:Block[31751-32187]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[31765-32177]:IfStatement[31765-32177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31785-32053]:Block[31785-32053]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31803-32039]:TryStatement[31803-32039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31807-31889]:Block[31807-31889]"
    }, {
      "left" : "SSL.setCipherSuites(ssl, cipherSuiteSpec);",
      "right" : "SSL.setCipherSuites(ssl, cipherSuiteSpec);",
      "info" : "ExpressionStatement[31829-31871]:ExpressionStatement[31829-31871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31910-32039]:Block[31910-32039]"
    }, {
      "left" : "throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec, e);",
      "right" : "throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec, e);",
      "info" : "ThrowStatement[31932-32021]:ThrowStatement[31932-32021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32059-32177]:Block[32059-32177]"
    }, {
      "left" : "throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec);",
      "right" : "throw new IllegalStateException(\"failed to enable cipher suites: \" + cipherSuiteSpec);",
      "info" : "ThrowStatement[32077-32163]:ThrowStatement[32077-32163]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32199-32208]:MarkerAnnotation[32199-32208]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32213-32219]:Modifier[32213-32219]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[32220-32228]:ArrayType[32220-32228]"
    }, {
      "left" : "getSupportedProtocols",
      "right" : "getSupportedProtocols",
      "info" : "SimpleName[32229-32250]:SimpleName[32229-32250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32253-32304]:Block[32253-32304]"
    }, {
      "left" : "return SUPPORTED_PROTOCOLS.clone();",
      "right" : "return SUPPORTED_PROTOCOLS.clone();",
      "info" : "ReturnStatement[32263-32298]:ReturnStatement[32263-32298]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32310-32319]:MarkerAnnotation[32310-32319]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32324-32330]:Modifier[32324-32330]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[32331-32339]:ArrayType[32331-32339]"
    }, {
      "left" : "getEnabledProtocols",
      "right" : "getEnabledProtocols",
      "info" : "SimpleName[32340-32359]:SimpleName[32340-32359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32362-33372]:Block[32362-33372]"
    }, {
      "left" : "List<String> enabled = new ArrayList<String>();",
      "right" : "List<String> enabled = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[32372-32419]:VariableDeclarationStatement[32372-32419]"
    }, {
      "left" : "enabled.add(PROTOCOL_SSL_V2_HELLO);",
      "right" : "enabled.add(PROTOCOL_SSL_V2_HELLO);",
      "info" : "ExpressionStatement[32531-32566]:ExpressionStatement[32531-32566]"
    }, {
      "left" : "int opts;",
      "right" : "int opts;",
      "info" : "VariableDeclarationStatement[32576-32585]:VariableDeclarationStatement[32576-32585]"
    }, {
      "left" : "synchronized (this) {\n            if (destroyed == 0) {\n                opts = SSL.getOptions(ssl);\n            } else {\n                return enabled.toArray(new String[1]);\n            }\n        }",
      "right" : "synchronized (this) {\n            if (destroyed == 0) {\n                opts = SSL.getOptions(ssl);\n            } else {\n                return enabled.toArray(new String[1]);\n            }\n        }",
      "info" : "SynchronizedStatement[32594-32793]:SynchronizedStatement[32594-32793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32614-32793]:Block[32614-32793]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[32628-32783]:IfStatement[32628-32783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32648-32707]:Block[32648-32707]"
    }, {
      "left" : "opts = SSL.getOptions(ssl);",
      "right" : "opts = SSL.getOptions(ssl);",
      "info" : "ExpressionStatement[32666-32693]:ExpressionStatement[32666-32693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32713-32783]:Block[32713-32783]"
    }, {
      "left" : "return enabled.toArray(new String[1]);",
      "right" : "return enabled.toArray(new String[1]);",
      "info" : "ReturnStatement[32731-32769]:ReturnStatement[32731-32769]"
    }, {
      "left" : "if ((opts & SSL.SSL_OP_NO_TLSv1) == 0)",
      "right" : "if ((opts & SSL.SSL_OP_NO_TLSv1) == 0)",
      "info" : "IfStatement[32802-32894]:IfStatement[32802-32894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32841-32894]:Block[32841-32894]"
    }, {
      "left" : "enabled.add(PROTOCOL_TLS_V1);",
      "right" : "enabled.add(PROTOCOL_TLS_V1);",
      "info" : "ExpressionStatement[32855-32884]:ExpressionStatement[32855-32884]"
    }, {
      "left" : "if ((opts & SSL.SSL_OP_NO_TLSv1_1) == 0)",
      "right" : "if ((opts & SSL.SSL_OP_NO_TLSv1_1) == 0)",
      "info" : "IfStatement[32903-32999]:IfStatement[32903-32999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32944-32999]:Block[32944-32999]"
    }, {
      "left" : "enabled.add(PROTOCOL_TLS_V1_1);",
      "right" : "enabled.add(PROTOCOL_TLS_V1_1);",
      "info" : "ExpressionStatement[32958-32989]:ExpressionStatement[32958-32989]"
    }, {
      "left" : "if ((opts & SSL.SSL_OP_NO_TLSv1_2) == 0)",
      "right" : "if ((opts & SSL.SSL_OP_NO_TLSv1_2) == 0)",
      "info" : "IfStatement[33008-33104]:IfStatement[33008-33104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33049-33104]:Block[33049-33104]"
    }, {
      "left" : "enabled.add(PROTOCOL_TLS_V1_2);",
      "right" : "enabled.add(PROTOCOL_TLS_V1_2);",
      "info" : "ExpressionStatement[33063-33094]:ExpressionStatement[33063-33094]"
    }, {
      "left" : "if ((opts & SSL.SSL_OP_NO_SSLv2) == 0)",
      "right" : "if ((opts & SSL.SSL_OP_NO_SSLv2) == 0)",
      "info" : "IfStatement[33113-33205]:IfStatement[33113-33205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33152-33205]:Block[33152-33205]"
    }, {
      "left" : "enabled.add(PROTOCOL_SSL_V2);",
      "right" : "enabled.add(PROTOCOL_SSL_V2);",
      "info" : "ExpressionStatement[33166-33195]:ExpressionStatement[33166-33195]"
    }, {
      "left" : "if ((opts & SSL.SSL_OP_NO_SSLv3) == 0)",
      "right" : "if ((opts & SSL.SSL_OP_NO_SSLv3) == 0)",
      "info" : "IfStatement[33214-33306]:IfStatement[33214-33306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33253-33306]:Block[33253-33306]"
    }, {
      "left" : "enabled.add(PROTOCOL_SSL_V3);",
      "right" : "enabled.add(PROTOCOL_SSL_V3);",
      "info" : "ExpressionStatement[33267-33296]:ExpressionStatement[33267-33296]"
    }, {
      "left" : "return enabled.toArray(new String[enabled.size()]);",
      "right" : "return enabled.toArray(new String[enabled.size()]);",
      "info" : "ReturnStatement[33315-33366]:ReturnStatement[33315-33366]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33378-33387]:MarkerAnnotation[33378-33387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33392-33398]:Modifier[33392-33398]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33399-33403]:PrimitiveType[33399-33403]"
    }, {
      "left" : "setEnabledProtocols",
      "right" : "setEnabledProtocols",
      "info" : "SimpleName[33404-33423]:SimpleName[33404-33423]"
    }, {
      "left" : "String[] protocols",
      "right" : "String[] protocols",
      "info" : "SingleVariableDeclaration[33424-33442]:SingleVariableDeclaration[33424-33442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33444-35278]:Block[33444-35278]"
    }, {
      "left" : "if (protocols == null)",
      "right" : "if (protocols == null)",
      "info" : "IfStatement[33454-33587]:IfStatement[33454-33587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33477-33587]:Block[33477-33587]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[33540-33577]:ThrowStatement[33540-33577]"
    }, {
      "left" : "boolean sslv2 = false;",
      "right" : "boolean sslv2 = false;",
      "info" : "VariableDeclarationStatement[33596-33618]:VariableDeclarationStatement[33596-33618]"
    }, {
      "left" : "boolean sslv3 = false;",
      "right" : "boolean sslv3 = false;",
      "info" : "VariableDeclarationStatement[33627-33649]:VariableDeclarationStatement[33627-33649]"
    }, {
      "left" : "boolean tlsv1 = false;",
      "right" : "boolean tlsv1 = false;",
      "info" : "VariableDeclarationStatement[33658-33680]:VariableDeclarationStatement[33658-33680]"
    }, {
      "left" : "boolean tlsv1_1 = false;",
      "right" : "boolean tlsv1_1 = false;",
      "info" : "VariableDeclarationStatement[33689-33713]:VariableDeclarationStatement[33689-33713]"
    }, {
      "left" : "boolean tlsv1_2 = false;",
      "right" : "boolean tlsv1_2 = false;",
      "info" : "VariableDeclarationStatement[33722-33746]:VariableDeclarationStatement[33722-33746]"
    }, {
      "left" : "for (String p: protocols)",
      "right" : "for (String p: protocols)",
      "info" : "EnhancedForStatement[33755-34379]:EnhancedForStatement[33755-34379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33781-34379]:Block[33781-34379]"
    }, {
      "left" : "if (!SUPPORTED_PROTOCOLS_SET.contains(p))",
      "right" : "if (!SUPPORTED_PROTOCOLS_SET.contains(p))",
      "info" : "IfStatement[33795-33944]:IfStatement[33795-33944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33837-33944]:Block[33837-33944]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Protocol \" + p + \" is not supported.\");",
      "right" : "throw new IllegalArgumentException(\"Protocol \" + p + \" is not supported.\");",
      "info" : "ThrowStatement[33855-33930]:ThrowStatement[33855-33930]"
    }, {
      "left" : "if (p.equals(PROTOCOL_SSL_V2))",
      "right" : "if (p.equals(PROTOCOL_SSL_V2))",
      "info" : "IfStatement[33957-34369]:IfStatement[33957-34369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33988-34033]:Block[33988-34033]"
    }, {
      "left" : "sslv2 = true;",
      "right" : "sslv2 = true;",
      "info" : "ExpressionStatement[34006-34019]:ExpressionStatement[34006-34019]"
    }, {
      "left" : "if (p.equals(PROTOCOL_SSL_V3))",
      "right" : "if (p.equals(PROTOCOL_SSL_V3))",
      "info" : "IfStatement[34039-34369]:IfStatement[34039-34369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34070-34115]:Block[34070-34115]"
    }, {
      "left" : "sslv3 = true;",
      "right" : "sslv3 = true;",
      "info" : "ExpressionStatement[34088-34101]:ExpressionStatement[34088-34101]"
    }, {
      "left" : "if (p.equals(PROTOCOL_TLS_V1))",
      "right" : "if (p.equals(PROTOCOL_TLS_V1))",
      "info" : "IfStatement[34121-34369]:IfStatement[34121-34369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34152-34197]:Block[34152-34197]"
    }, {
      "left" : "tlsv1 = true;",
      "right" : "tlsv1 = true;",
      "info" : "ExpressionStatement[34170-34183]:ExpressionStatement[34170-34183]"
    }, {
      "left" : "if (p.equals(PROTOCOL_TLS_V1_1))",
      "right" : "if (p.equals(PROTOCOL_TLS_V1_1))",
      "info" : "IfStatement[34203-34369]:IfStatement[34203-34369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34236-34283]:Block[34236-34283]"
    }, {
      "left" : "tlsv1_1 = true;",
      "right" : "tlsv1_1 = true;",
      "info" : "ExpressionStatement[34254-34269]:ExpressionStatement[34254-34269]"
    }, {
      "left" : "if (p.equals(PROTOCOL_TLS_V1_2))",
      "right" : "if (p.equals(PROTOCOL_TLS_V1_2))",
      "info" : "IfStatement[34289-34369]:IfStatement[34289-34369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34322-34369]:Block[34322-34369]"
    }, {
      "left" : "tlsv1_2 = true;",
      "right" : "tlsv1_2 = true;",
      "info" : "ExpressionStatement[34340-34355]:ExpressionStatement[34340-34355]"
    }, {
      "left" : "synchronized (this) {\n            if (destroyed == 0) {\n                // Enable all and then disable what we not want\n                SSL.setOptions(ssl, SSL.SSL_OP_ALL);\n\n                if (!sslv2) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv2);\n                }\n                if (!sslv3) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv3);\n                }\n                if (!tlsv1) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1);\n                }\n                if (!tlsv1_1) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_1);\n                }\n                if (!tlsv1_2) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_2);\n                }\n            } else {\n                throw new IllegalStateException(\"failed to enable protocols: \" + Arrays.asList(protocols));\n            }\n        }",
      "right" : "synchronized (this) {\n            if (destroyed == 0) {\n                // Enable all and then disable what we not want\n                SSL.setOptions(ssl, SSL.SSL_OP_ALL);\n\n                if (!sslv2) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv2);\n                }\n                if (!sslv3) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv3);\n                }\n                if (!tlsv1) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1);\n                }\n                if (!tlsv1_1) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_1);\n                }\n                if (!tlsv1_2) {\n                    SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_2);\n                }\n            } else {\n                throw new IllegalStateException(\"failed to enable protocols: \" + Arrays.asList(protocols));\n            }\n        }",
      "info" : "SynchronizedStatement[34388-35272]:SynchronizedStatement[34388-35272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34408-35272]:Block[34408-35272]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[34422-35262]:IfStatement[34422-35262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34442-35133]:Block[34442-35133]"
    }, {
      "left" : "SSL.setOptions(ssl, SSL.SSL_OP_ALL);",
      "right" : "SSL.setOptions(ssl, SSL.SSL_OP_ALL);",
      "info" : "ExpressionStatement[34524-34560]:ExpressionStatement[34524-34560]"
    }, {
      "left" : "if (!sslv2)",
      "right" : "if (!sslv2)",
      "info" : "IfStatement[34578-34671]:IfStatement[34578-34671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34590-34671]:Block[34590-34671]"
    }, {
      "left" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv2);",
      "right" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv2);",
      "info" : "ExpressionStatement[34612-34653]:ExpressionStatement[34612-34653]"
    }, {
      "left" : "if (!sslv3)",
      "right" : "if (!sslv3)",
      "info" : "IfStatement[34688-34781]:IfStatement[34688-34781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34700-34781]:Block[34700-34781]"
    }, {
      "left" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv3);",
      "right" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv3);",
      "info" : "ExpressionStatement[34722-34763]:ExpressionStatement[34722-34763]"
    }, {
      "left" : "if (!tlsv1)",
      "right" : "if (!tlsv1)",
      "info" : "IfStatement[34798-34891]:IfStatement[34798-34891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34810-34891]:Block[34810-34891]"
    }, {
      "left" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1);",
      "right" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1);",
      "info" : "ExpressionStatement[34832-34873]:ExpressionStatement[34832-34873]"
    }, {
      "left" : "if (!tlsv1_1)",
      "right" : "if (!tlsv1_1)",
      "info" : "IfStatement[34908-35005]:IfStatement[34908-35005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34922-35005]:Block[34922-35005]"
    }, {
      "left" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_1);",
      "right" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_1);",
      "info" : "ExpressionStatement[34944-34987]:ExpressionStatement[34944-34987]"
    }, {
      "left" : "if (!tlsv1_2)",
      "right" : "if (!tlsv1_2)",
      "info" : "IfStatement[35022-35119]:IfStatement[35022-35119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35036-35119]:Block[35036-35119]"
    }, {
      "left" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_2);",
      "right" : "SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_2);",
      "info" : "ExpressionStatement[35058-35101]:ExpressionStatement[35058-35101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35139-35262]:Block[35139-35262]"
    }, {
      "left" : "throw new IllegalStateException(\"failed to enable protocols: \" + Arrays.asList(protocols));",
      "right" : "throw new IllegalStateException(\"failed to enable protocols: \" + Arrays.asList(protocols));",
      "info" : "ThrowStatement[35157-35248]:ThrowStatement[35157-35248]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35284-35293]:MarkerAnnotation[35284-35293]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35298-35304]:Modifier[35298-35304]"
    }, {
      "left" : "SSLSession",
      "right" : "SSLSession",
      "info" : "SimpleType[35305-35315]:SimpleType[35305-35315]"
    }, {
      "left" : "getSession",
      "right" : "getSession",
      "info" : "SimpleName[35316-35326]:SimpleName[35316-35326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35329-35360]:Block[35329-35360]"
    }, {
      "left" : "return session;",
      "right" : "return session;",
      "info" : "ReturnStatement[35339-35354]:ReturnStatement[35339-35354]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35366-35375]:MarkerAnnotation[35366-35375]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35380-35386]:Modifier[35380-35386]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[35387-35399]:Modifier[35387-35399]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35400-35404]:PrimitiveType[35400-35404]"
    }, {
      "left" : "beginHandshake",
      "right" : "beginHandshake",
      "info" : "SimpleName[35405-35419]:SimpleName[35405-35419]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[35429-35441]:SimpleType[35429-35441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35442-36356]:Block[35442-36356]"
    }, {
      "left" : "if (engineClosed || destroyed != 0)",
      "right" : "if (engineClosed || destroyed != 0)",
      "info" : "IfStatement[35452-35532]:IfStatement[35452-35532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35488-35532]:Block[35488-35532]"
    }, {
      "left" : "throw ENGINE_CLOSED;",
      "right" : "throw ENGINE_CLOSED;",
      "info" : "ThrowStatement[35502-35522]:ThrowStatement[35502-35522]"
    }, {
      "left" : "switch (accepted) {\n            case 0:\n                handshake();\n                accepted = 2;\n                break;\n            case 1:\n                // A user did not start handshake by calling this method by him/herself,\n                // but handshake has been started already by wrap() or unwrap() implicitly.\n                // Because it's the user's first time to call this method, it is unfair to\n                // raise an exception.  From the user's standpoint, he or she never asked\n                // for renegotiation.\n\n                accepted = 2; // Next time this method is invoked by the user, we should raise an exception.\n                break;\n            case 2:\n                throw RENEGOTIATION_UNSUPPORTED;\n            default:\n                throw new Error();\n        }",
      "right" : "switch (accepted) {\n            case 0:\n                handshake();\n                accepted = 2;\n                break;\n            case 1:\n                // A user did not start handshake by calling this method by him/herself,\n                // but handshake has been started already by wrap() or unwrap() implicitly.\n                // Because it's the user's first time to call this method, it is unfair to\n                // raise an exception.  From the user's standpoint, he or she never asked\n                // for renegotiation.\n\n                accepted = 2; // Next time this method is invoked by the user, we should raise an exception.\n                break;\n            case 2:\n                throw RENEGOTIATION_UNSUPPORTED;\n            default:\n                throw new Error();\n        }",
      "info" : "SwitchStatement[35541-36350]:SwitchStatement[35541-36350]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[35573-35580]:SwitchCase[35573-35580]"
    }, {
      "left" : "handshake();",
      "right" : "handshake();",
      "info" : "ExpressionStatement[35597-35609]:ExpressionStatement[35597-35609]"
    }, {
      "left" : "accepted = 2;",
      "right" : "accepted = 2;",
      "info" : "ExpressionStatement[35626-35639]:ExpressionStatement[35626-35639]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35656-35662]:BreakStatement[35656-35662]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[35675-35682]:SwitchCase[35675-35682]"
    }, {
      "left" : "accepted = 2;",
      "right" : "accepted = 2;",
      "info" : "ExpressionStatement[36100-36113]:ExpressionStatement[36100-36113]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36209-36215]:BreakStatement[36209-36215]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[36228-36235]:SwitchCase[36228-36235]"
    }, {
      "left" : "throw RENEGOTIATION_UNSUPPORTED;",
      "right" : "throw RENEGOTIATION_UNSUPPORTED;",
      "info" : "ThrowStatement[36252-36284]:ThrowStatement[36252-36284]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36297-36305]:SwitchCase[36297-36305]"
    }, {
      "left" : "throw new Error();",
      "right" : "throw new Error();",
      "info" : "ThrowStatement[36322-36340]:ThrowStatement[36322-36340]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36362-36369]:Modifier[36362-36369]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36370-36374]:PrimitiveType[36370-36374]"
    }, {
      "left" : "beginHandshakeImplicitly",
      "right" : "beginHandshakeImplicitly",
      "info" : "SimpleName[36375-36399]:SimpleName[36375-36399]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[36409-36421]:SimpleType[36409-36421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36422-36609]:Block[36422-36609]"
    }, {
      "left" : "if (engineClosed || destroyed != 0)",
      "right" : "if (engineClosed || destroyed != 0)",
      "info" : "IfStatement[36432-36512]:IfStatement[36432-36512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36468-36512]:Block[36468-36512]"
    }, {
      "left" : "throw ENGINE_CLOSED;",
      "right" : "throw ENGINE_CLOSED;",
      "info" : "ThrowStatement[36482-36502]:ThrowStatement[36482-36502]"
    }, {
      "left" : "if (accepted == 0)",
      "right" : "if (accepted == 0)",
      "info" : "IfStatement[36522-36603]:IfStatement[36522-36603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36541-36603]:Block[36541-36603]"
    }, {
      "left" : "handshake();",
      "right" : "handshake();",
      "info" : "ExpressionStatement[36555-36567]:ExpressionStatement[36555-36567]"
    }, {
      "left" : "accepted = 1;",
      "right" : "accepted = 1;",
      "info" : "ExpressionStatement[36580-36593]:ExpressionStatement[36580-36593]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36615-36622]:Modifier[36615-36622]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36623-36627]:PrimitiveType[36623-36627]"
    }, {
      "left" : "handshake",
      "right" : "handshake",
      "info" : "SimpleName[36628-36637]:SimpleName[36628-36637]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[36647-36659]:SimpleType[36647-36659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36660-37589]:Block[36660-37589]"
    }, {
      "left" : "int code = SSL.doHandshake(ssl);",
      "right" : "int code = SSL.doHandshake(ssl);",
      "info" : "VariableDeclarationStatement[36670-36702]:VariableDeclarationStatement[36670-36702]"
    }, {
      "left" : "if (code <= 0)",
      "right" : "if (code <= 0)",
      "info" : "IfStatement[36711-37583]:IfStatement[36711-37583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36726-37328]:Block[36726-37328]"
    }, {
      "left" : "long error = SSL.getLastErrorNumber();",
      "right" : "long error = SSL.getLastErrorNumber();",
      "info" : "VariableDeclarationStatement[36804-36842]:VariableDeclarationStatement[36804-36842]"
    }, {
      "left" : "if (OpenSsl.isError(error))",
      "right" : "if (OpenSsl.isError(error))",
      "info" : "IfStatement[36855-37272]:IfStatement[36855-37272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36883-37272]:Block[36883-37272]"
    }, {
      "left" : "String err = SSL.getErrorString(error);",
      "right" : "String err = SSL.getErrorString(error);",
      "info" : "VariableDeclarationStatement[36901-36940]:VariableDeclarationStatement[36901-36940]"
    }, {
      "left" : "if (logger.isDebugEnabled())",
      "right" : "if (logger.isDebugEnabled())",
      "info" : "IfStatement[36957-37126]:IfStatement[36957-37126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36986-37126]:Block[36986-37126]"
    }, {
      "left" : "logger.debug(\n                            \"SSL_do_handshake failed: OpenSSL error: '\" + err + '\\'');",
      "right" : "logger.debug(\n                            \"SSL_do_handshake failed: OpenSSL error: '\" + err + '\\'');",
      "info" : "ExpressionStatement[37008-37108]:ExpressionStatement[37008-37108]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[37203-37214]:ExpressionStatement[37203-37214]"
    }, {
      "left" : "throw newSSLException(err);",
      "right" : "throw newSSLException(err);",
      "info" : "ThrowStatement[37231-37258]:ThrowStatement[37231-37258]"
    }, {
      "left" : "checkPendingHandshakeException();",
      "right" : "checkPendingHandshakeException();",
      "info" : "ExpressionStatement[37285-37318]:ExpressionStatement[37285-37318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37334-37583]:Block[37334-37583]"
    }, {
      "left" : "handshakeFinished();",
      "right" : "handshakeFinished();",
      "info" : "ExpressionStatement[37553-37573]:ExpressionStatement[37553-37573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37595-37602]:Modifier[37595-37602]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37603-37609]:Modifier[37603-37609]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[37610-37614]:PrimitiveType[37610-37614]"
    }, {
      "left" : "memoryAddress",
      "right" : "memoryAddress",
      "info" : "SimpleName[37615-37628]:SimpleName[37615-37628]"
    }, {
      "left" : "ByteBuf buf",
      "right" : "ByteBuf buf",
      "info" : "SingleVariableDeclaration[37629-37640]:SingleVariableDeclaration[37629-37640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37642-37806]:Block[37642-37806]"
    }, {
      "left" : "if (buf.hasMemoryAddress())",
      "right" : "if (buf.hasMemoryAddress())",
      "info" : "IfStatement[37652-37800]:IfStatement[37652-37800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37680-37731]:Block[37680-37731]"
    }, {
      "left" : "return buf.memoryAddress();",
      "right" : "return buf.memoryAddress();",
      "info" : "ReturnStatement[37694-37721]:ReturnStatement[37694-37721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37737-37800]:Block[37737-37800]"
    }, {
      "left" : "return Buffer.address(buf.nioBuffer());",
      "right" : "return Buffer.address(buf.nioBuffer());",
      "info" : "ReturnStatement[37751-37790]:ReturnStatement[37751-37790]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37812-37819]:Modifier[37812-37819]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37820-37824]:PrimitiveType[37820-37824]"
    }, {
      "left" : "handshakeFinished",
      "right" : "handshakeFinished",
      "info" : "SimpleName[37825-37842]:SimpleName[37825-37842]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[37852-37864]:SimpleType[37852-37864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37865-39451]:Block[37865-39451]"
    }, {
      "left" : "SelectedListenerFailureBehavior behavior = apn.selectedListenerFailureBehavior();",
      "right" : "SelectedListenerFailureBehavior behavior = apn.selectedListenerFailureBehavior();",
      "info" : "VariableDeclarationStatement[37875-37956]:VariableDeclarationStatement[37875-37956]"
    }, {
      "left" : "List<String> protocols = apn.protocols();",
      "right" : "List<String> protocols = apn.protocols();",
      "info" : "VariableDeclarationStatement[37965-38006]:VariableDeclarationStatement[37965-38006]"
    }, {
      "left" : "String applicationProtocol;",
      "right" : "String applicationProtocol;",
      "info" : "VariableDeclarationStatement[38015-38042]:VariableDeclarationStatement[38015-38042]"
    }, {
      "left" : "switch (apn.protocol()) {\n            case NONE:\n                break;\n            // We always need to check for applicationProtocol == null as the remote peer may not support\n            // the TLS extension or may have returned an empty selection.\n            case ALPN:\n                applicationProtocol = SSL.getAlpnSelected(ssl);\n                if (applicationProtocol != null) {\n                    this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);\n                }\n                break;\n            case NPN:\n                applicationProtocol = SSL.getNextProtoNegotiated(ssl);\n                if (applicationProtocol != null) {\n                    this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);\n                }\n                break;\n            case NPN_AND_ALPN:\n                applicationProtocol = SSL.getAlpnSelected(ssl);\n                if (applicationProtocol == null) {\n                    applicationProtocol = SSL.getNextProtoNegotiated(ssl);\n                }\n                if (applicationProtocol != null) {\n                    this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);\n                }\n                break;\n            default:\n                throw new Error();\n        }",
      "right" : "switch (apn.protocol()) {\n            case NONE:\n                break;\n            // We always need to check for applicationProtocol == null as the remote peer may not support\n            // the TLS extension or may have returned an empty selection.\n            case ALPN:\n                applicationProtocol = SSL.getAlpnSelected(ssl);\n                if (applicationProtocol != null) {\n                    this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);\n                }\n                break;\n            case NPN:\n                applicationProtocol = SSL.getNextProtoNegotiated(ssl);\n                if (applicationProtocol != null) {\n                    this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);\n                }\n                break;\n            case NPN_AND_ALPN:\n                applicationProtocol = SSL.getAlpnSelected(ssl);\n                if (applicationProtocol == null) {\n                    applicationProtocol = SSL.getNextProtoNegotiated(ssl);\n                }\n                if (applicationProtocol != null) {\n                    this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);\n                }\n                break;\n            default:\n                throw new Error();\n        }",
      "info" : "SwitchStatement[38051-39411]:SwitchStatement[38051-39411]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[38089-38099]:SwitchCase[38089-38099]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38116-38122]:BreakStatement[38116-38122]"
    }, {
      "left" : "case ALPN:",
      "right" : "case ALPN:",
      "info" : "SwitchCase[38315-38325]:SwitchCase[38315-38325]"
    }, {
      "left" : "applicationProtocol = SSL.getAlpnSelected(ssl);",
      "right" : "applicationProtocol = SSL.getAlpnSelected(ssl);",
      "info" : "ExpressionStatement[38342-38389]:ExpressionStatement[38342-38389]"
    }, {
      "left" : "if (applicationProtocol != null)",
      "right" : "if (applicationProtocol != null)",
      "info" : "IfStatement[38406-38574]:IfStatement[38406-38574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38439-38574]:Block[38439-38574]"
    }, {
      "left" : "this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);",
      "right" : "this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);",
      "info" : "ExpressionStatement[38461-38556]:ExpressionStatement[38461-38556]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38591-38597]:BreakStatement[38591-38597]"
    }, {
      "left" : "case NPN:",
      "right" : "case NPN:",
      "info" : "SwitchCase[38610-38619]:SwitchCase[38610-38619]"
    }, {
      "left" : "applicationProtocol = SSL.getNextProtoNegotiated(ssl);",
      "right" : "applicationProtocol = SSL.getNextProtoNegotiated(ssl);",
      "info" : "ExpressionStatement[38636-38690]:ExpressionStatement[38636-38690]"
    }, {
      "left" : "if (applicationProtocol != null)",
      "right" : "if (applicationProtocol != null)",
      "info" : "IfStatement[38707-38875]:IfStatement[38707-38875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38740-38875]:Block[38740-38875]"
    }, {
      "left" : "this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);",
      "right" : "this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);",
      "info" : "ExpressionStatement[38762-38857]:ExpressionStatement[38762-38857]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38892-38898]:BreakStatement[38892-38898]"
    }, {
      "left" : "case NPN_AND_ALPN:",
      "right" : "case NPN_AND_ALPN:",
      "info" : "SwitchCase[38911-38929]:SwitchCase[38911-38929]"
    }, {
      "left" : "applicationProtocol = SSL.getAlpnSelected(ssl);",
      "right" : "applicationProtocol = SSL.getAlpnSelected(ssl);",
      "info" : "ExpressionStatement[38946-38993]:ExpressionStatement[38946-38993]"
    }, {
      "left" : "if (applicationProtocol == null)",
      "right" : "if (applicationProtocol == null)",
      "info" : "IfStatement[39010-39137]:IfStatement[39010-39137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39043-39137]:Block[39043-39137]"
    }, {
      "left" : "applicationProtocol = SSL.getNextProtoNegotiated(ssl);",
      "right" : "applicationProtocol = SSL.getNextProtoNegotiated(ssl);",
      "info" : "ExpressionStatement[39065-39119]:ExpressionStatement[39065-39119]"
    }, {
      "left" : "if (applicationProtocol != null)",
      "right" : "if (applicationProtocol != null)",
      "info" : "IfStatement[39154-39322]:IfStatement[39154-39322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39187-39322]:Block[39187-39322]"
    }, {
      "left" : "this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);",
      "right" : "this.applicationProtocol = selectApplicationProtocol(protocols, behavior, applicationProtocol);",
      "info" : "ExpressionStatement[39209-39304]:ExpressionStatement[39209-39304]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39339-39345]:BreakStatement[39339-39345]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39358-39366]:SwitchCase[39358-39366]"
    }, {
      "left" : "throw new Error();",
      "right" : "throw new Error();",
      "info" : "ThrowStatement[39383-39401]:ThrowStatement[39383-39401]"
    }, {
      "left" : "handshakeFinished = true;",
      "right" : "handshakeFinished = true;",
      "info" : "ExpressionStatement[39420-39445]:ExpressionStatement[39420-39445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39457-39464]:Modifier[39457-39464]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39465-39471]:Modifier[39465-39471]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39472-39478]:SimpleType[39472-39478]"
    }, {
      "left" : "selectApplicationProtocol",
      "right" : "selectApplicationProtocol",
      "info" : "SimpleName[39479-39504]:SimpleName[39479-39504]"
    }, {
      "left" : "List<String> protocols",
      "right" : "List<String> protocols",
      "info" : "SingleVariableDeclaration[39505-39527]:SingleVariableDeclaration[39505-39527]"
    }, {
      "left" : "SelectedListenerFailureBehavior behavior",
      "right" : "SelectedListenerFailureBehavior behavior",
      "info" : "SingleVariableDeclaration[39574-39614]:SingleVariableDeclaration[39574-39614]"
    }, {
      "left" : "String applicationProtocol",
      "right" : "String applicationProtocol",
      "info" : "SingleVariableDeclaration[39661-39687]:SingleVariableDeclaration[39661-39687]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[39696-39708]:SimpleType[39696-39708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39709-40330]:Block[39709-40330]"
    }, {
      "left" : "if (behavior == SelectedListenerFailureBehavior.ACCEPT)",
      "right" : "if (behavior == SelectedListenerFailureBehavior.ACCEPT)",
      "info" : "IfStatement[39719-40324]:IfStatement[39719-40324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39775-39826]:Block[39775-39826]"
    }, {
      "left" : "return applicationProtocol;",
      "right" : "return applicationProtocol;",
      "info" : "ReturnStatement[39789-39816]:ReturnStatement[39789-39816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39832-40324]:Block[39832-40324]"
    }, {
      "left" : "int size = protocols.size();",
      "right" : "int size = protocols.size();",
      "info" : "VariableDeclarationStatement[39846-39874]:VariableDeclarationStatement[39846-39874]"
    }, {
      "left" : "assert size > 0;",
      "right" : "assert size > 0;",
      "info" : "AssertStatement[39887-39903]:AssertStatement[39887-39903]"
    }, {
      "left" : "if (protocols.contains(applicationProtocol))",
      "right" : "if (protocols.contains(applicationProtocol))",
      "info" : "IfStatement[39916-40314]:IfStatement[39916-40314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39961-40020]:Block[39961-40020]"
    }, {
      "left" : "return applicationProtocol;",
      "right" : "return applicationProtocol;",
      "info" : "ReturnStatement[39979-40006]:ReturnStatement[39979-40006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40026-40314]:Block[40026-40314]"
    }, {
      "left" : "if (behavior == SelectedListenerFailureBehavior.CHOOSE_MY_LAST_PROTOCOL)",
      "right" : "if (behavior == SelectedListenerFailureBehavior.CHOOSE_MY_LAST_PROTOCOL)",
      "info" : "IfStatement[40044-40300]:IfStatement[40044-40300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40117-40188]:Block[40117-40188]"
    }, {
      "left" : "return protocols.get(size - 1);",
      "right" : "return protocols.get(size - 1);",
      "info" : "ReturnStatement[40139-40170]:ReturnStatement[40139-40170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40194-40300]:Block[40194-40300]"
    }, {
      "left" : "throw new SSLException(\"unknown protocol \" + applicationProtocol);",
      "right" : "throw new SSLException(\"unknown protocol \" + applicationProtocol);",
      "info" : "ThrowStatement[40216-40282]:ThrowStatement[40216-40282]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40336-40343]:Modifier[40336-40343]"
    }, {
      "left" : "SSLEngineResult.Status",
      "right" : "SSLEngineResult.Status",
      "info" : "SimpleType[40344-40366]:SimpleType[40344-40366]"
    }, {
      "left" : "getEngineStatus",
      "right" : "getEngineStatus",
      "info" : "SimpleName[40367-40382]:SimpleName[40367-40382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40385-40434]:Block[40385-40434]"
    }, {
      "left" : "return engineClosed? CLOSED : OK;",
      "right" : "return engineClosed? CLOSED : OK;",
      "info" : "ReturnStatement[40395-40428]:ReturnStatement[40395-40428]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40440-40447]:Modifier[40440-40447]"
    }, {
      "left" : "SSLEngineResult.HandshakeStatus",
      "right" : "SSLEngineResult.HandshakeStatus",
      "info" : "SimpleType[40448-40479]:SimpleType[40448-40479]"
    }, {
      "left" : "handshakeStatus0",
      "right" : "handshakeStatus0",
      "info" : "SimpleName[40480-40496]:SimpleName[40480-40496]"
    }, {
      "left" : "SSLException",
      "right" : "SSLException",
      "info" : "SimpleType[40506-40518]:SimpleType[40506-40518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40519-40740]:Block[40519-40740]"
    }, {
      "left" : "SSLEngineResult.HandshakeStatus status = getHandshakeStatus();",
      "right" : "SSLEngineResult.HandshakeStatus status = getHandshakeStatus();",
      "info" : "VariableDeclarationStatement[40529-40591]:VariableDeclarationStatement[40529-40591]"
    }, {
      "left" : "if (status == FINISHED)",
      "right" : "if (status == FINISHED)",
      "info" : "IfStatement[40600-40668]:IfStatement[40600-40668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40624-40668]:Block[40624-40668]"
    }, {
      "left" : "handshakeFinished();",
      "right" : "handshakeFinished();",
      "info" : "ExpressionStatement[40638-40658]:ExpressionStatement[40638-40658]"
    }, {
      "left" : "checkPendingHandshakeException();",
      "right" : "checkPendingHandshakeException();",
      "info" : "ExpressionStatement[40677-40710]:ExpressionStatement[40677-40710]"
    }, {
      "left" : "return status;",
      "right" : "return status;",
      "info" : "ReturnStatement[40720-40734]:ReturnStatement[40720-40734]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40746-40755]:MarkerAnnotation[40746-40755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40760-40766]:Modifier[40760-40766]"
    }, {
      "left" : "synchronized",
      "right" : "synchronized",
      "info" : "Modifier[40767-40779]:Modifier[40767-40779]"
    }, {
      "left" : "SSLEngineResult.HandshakeStatus",
      "right" : "SSLEngineResult.HandshakeStatus",
      "info" : "SimpleType[40780-40811]:SimpleType[40780-40811]"
    }, {
      "left" : "getHandshakeStatus",
      "right" : "getHandshakeStatus",
      "info" : "SimpleName[40812-40830]:SimpleName[40812-40830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40833-41959]:Block[40833-41959]"
    }, {
      "left" : "if (accepted == 0 || destroyed != 0)",
      "right" : "if (accepted == 0 || destroyed != 0)",
      "info" : "IfStatement[40843-40927]:IfStatement[40843-40927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40880-40927]:Block[40880-40927]"
    }, {
      "left" : "return NOT_HANDSHAKING;",
      "right" : "return NOT_HANDSHAKING;",
      "info" : "ReturnStatement[40894-40917]:ReturnStatement[40894-40917]"
    }, {
      "left" : "if (!handshakeFinished)",
      "right" : "if (!handshakeFinished)",
      "info" : "IfStatement[40995-41563]:IfStatement[40995-41563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41019-41563]:Block[41019-41563]"
    }, {
      "left" : "if (SSL.pendingWrittenBytesInBIO(networkBIO) != 0)",
      "right" : "if (SSL.pendingWrittenBytesInBIO(networkBIO) != 0)",
      "info" : "IfStatement[41102-41202]:IfStatement[41102-41202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41153-41202]:Block[41153-41202]"
    }, {
      "left" : "return NEED_WRAP;",
      "right" : "return NEED_WRAP;",
      "info" : "ReturnStatement[41171-41188]:ReturnStatement[41171-41188]"
    }, {
      "left" : "if (SSL.isInInit(ssl) == 0)",
      "right" : "if (SSL.isInInit(ssl) == 0)",
      "info" : "IfStatement[41330-41406]:IfStatement[41330-41406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41358-41406]:Block[41358-41406]"
    }, {
      "left" : "return FINISHED;",
      "right" : "return FINISHED;",
      "info" : "ReturnStatement[41376-41392]:ReturnStatement[41376-41392]"
    }, {
      "left" : "return NEED_UNWRAP;",
      "right" : "return NEED_UNWRAP;",
      "info" : "ReturnStatement[41534-41553]:ReturnStatement[41534-41553]"
    }, {
      "left" : "if (engineClosed)",
      "right" : "if (engineClosed)",
      "info" : "IfStatement[41622-41920]:IfStatement[41622-41920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41640-41920]:Block[41640-41920]"
    }, {
      "left" : "if (SSL.pendingWrittenBytesInBIO(networkBIO) != 0)",
      "right" : "if (SSL.pendingWrittenBytesInBIO(networkBIO) != 0)",
      "info" : "IfStatement[41710-41810]:IfStatement[41710-41810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41761-41810]:Block[41761-41810]"
    }, {
      "left" : "return NEED_WRAP;",
      "right" : "return NEED_WRAP;",
      "info" : "ReturnStatement[41779-41796]:ReturnStatement[41779-41796]"
    }, {
      "left" : "return NEED_UNWRAP;",
      "right" : "return NEED_UNWRAP;",
      "info" : "ReturnStatement[41891-41910]:ReturnStatement[41891-41910]"
    }, {
      "left" : "return NOT_HANDSHAKING;",
      "right" : "return NOT_HANDSHAKING;",
      "info" : "ReturnStatement[41930-41953]:ReturnStatement[41930-41953]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42058-42065]:Modifier[42058-42065]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42066-42072]:SimpleType[42066-42072]"
    }, {
      "left" : "toJavaCipherSuite",
      "right" : "toJavaCipherSuite",
      "info" : "SimpleName[42073-42090]:SimpleName[42073-42090]"
    }, {
      "left" : "String openSslCipherSuite",
      "right" : "String openSslCipherSuite",
      "info" : "SingleVariableDeclaration[42091-42116]:SingleVariableDeclaration[42091-42116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42118-42345]:Block[42118-42345]"
    }, {
      "left" : "if (openSslCipherSuite == null)",
      "right" : "if (openSslCipherSuite == null)",
      "info" : "IfStatement[42128-42196]:IfStatement[42128-42196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42160-42196]:Block[42160-42196]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42174-42186]:ReturnStatement[42174-42186]"
    }, {
      "left" : "String prefix = toJavaCipherSuitePrefix(SSL.getVersion(ssl));",
      "right" : "String prefix = toJavaCipherSuitePrefix(SSL.getVersion(ssl));",
      "info" : "VariableDeclarationStatement[42206-42267]:VariableDeclarationStatement[42206-42267]"
    }, {
      "left" : "return CipherSuiteConverter.toJava(openSslCipherSuite, prefix);",
      "right" : "return CipherSuiteConverter.toJava(openSslCipherSuite, prefix);",
      "info" : "ReturnStatement[42276-42339]:ReturnStatement[42276-42339]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42479-42486]:Modifier[42479-42486]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42487-42493]:Modifier[42487-42493]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42494-42500]:SimpleType[42494-42500]"
    }, {
      "left" : "toJavaCipherSuitePrefix",
      "right" : "toJavaCipherSuitePrefix",
      "info" : "SimpleName[42501-42524]:SimpleName[42501-42524]"
    }, {
      "left" : "String protocolVersion",
      "right" : "String protocolVersion",
      "info" : "SingleVariableDeclaration[42525-42547]:SingleVariableDeclaration[42525-42547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42549-42906]:Block[42549-42906]"
    }, {
      "left" : "final char c;",
      "right" : "final char c;",
      "info" : "VariableDeclarationStatement[42559-42572]:VariableDeclarationStatement[42559-42572]"
    }, {
      "left" : "if (protocolVersion == null || protocolVersion.length() == 0)",
      "right" : "if (protocolVersion == null || protocolVersion.length() == 0)",
      "info" : "IfStatement[42581-42733]:IfStatement[42581-42733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42643-42673]:Block[42643-42673]"
    }, {
      "left" : "c = 0;",
      "right" : "c = 0;",
      "info" : "ExpressionStatement[42657-42663]:ExpressionStatement[42657-42663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42679-42733]:Block[42679-42733]"
    }, {
      "left" : "c = protocolVersion.charAt(0);",
      "right" : "c = protocolVersion.charAt(0);",
      "info" : "ExpressionStatement[42693-42723]:ExpressionStatement[42693-42723]"
    }, {
      "left" : "switch (c) {\n        case 'T':\n            return \"TLS\";\n        case 'S':\n            return \"SSL\";\n        default:\n            return \"UNKNOWN\";\n        }",
      "right" : "switch (c) {\n        case 'T':\n            return \"TLS\";\n        case 'S':\n            return \"SSL\";\n        default:\n            return \"UNKNOWN\";\n        }",
      "info" : "SwitchStatement[42743-42900]:SwitchStatement[42743-42900]"
    }, {
      "left" : "case 'T':",
      "right" : "case 'T':",
      "info" : "SwitchCase[42764-42773]:SwitchCase[42764-42773]"
    }, {
      "left" : "return \"TLS\";",
      "right" : "return \"TLS\";",
      "info" : "ReturnStatement[42786-42799]:ReturnStatement[42786-42799]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[42808-42817]:SwitchCase[42808-42817]"
    }, {
      "left" : "return \"SSL\";",
      "right" : "return \"SSL\";",
      "info" : "ReturnStatement[42830-42843]:ReturnStatement[42830-42843]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42852-42860]:SwitchCase[42852-42860]"
    }, {
      "left" : "return \"UNKNOWN\";",
      "right" : "return \"UNKNOWN\";",
      "info" : "ReturnStatement[42873-42890]:ReturnStatement[42873-42890]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42912-42921]:MarkerAnnotation[42912-42921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42926-42932]:Modifier[42926-42932]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42933-42937]:PrimitiveType[42933-42937]"
    }, {
      "left" : "setUseClientMode",
      "right" : "setUseClientMode",
      "info" : "SimpleName[42938-42954]:SimpleName[42938-42954]"
    }, {
      "left" : "boolean clientMode",
      "right" : "boolean clientMode",
      "info" : "SingleVariableDeclaration[42955-42973]:SingleVariableDeclaration[42955-42973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42975-43092]:Block[42975-43092]"
    }, {
      "left" : "if (clientMode != this.clientMode)",
      "right" : "if (clientMode != this.clientMode)",
      "info" : "IfStatement[42985-43086]:IfStatement[42985-43086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43020-43086]:Block[43020-43086]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[43034-43076]:ThrowStatement[43034-43076]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43098-43107]:MarkerAnnotation[43098-43107]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43112-43118]:Modifier[43112-43118]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43119-43126]:PrimitiveType[43119-43126]"
    }, {
      "left" : "getUseClientMode",
      "right" : "getUseClientMode",
      "info" : "SimpleName[43127-43143]:SimpleName[43127-43143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43146-43180]:Block[43146-43180]"
    }, {
      "left" : "return clientMode;",
      "right" : "return clientMode;",
      "info" : "ReturnStatement[43156-43174]:ReturnStatement[43156-43174]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43186-43195]:MarkerAnnotation[43186-43195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43200-43206]:Modifier[43200-43206]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43207-43211]:PrimitiveType[43207-43211]"
    }, {
      "left" : "setNeedClientAuth",
      "right" : "setNeedClientAuth",
      "info" : "SimpleName[43212-43229]:SimpleName[43212-43229]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[43230-43239]:SingleVariableDeclaration[43230-43239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43241-43321]:Block[43241-43321]"
    }, {
      "left" : "setClientAuth(b ? ClientAuthMode.REQUIRE : ClientAuthMode.NONE);",
      "right" : "setClientAuth(b ? ClientAuthMode.REQUIRE : ClientAuthMode.NONE);",
      "info" : "ExpressionStatement[43251-43315]:ExpressionStatement[43251-43315]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43327-43336]:MarkerAnnotation[43327-43336]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43341-43347]:Modifier[43341-43347]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43348-43355]:PrimitiveType[43348-43355]"
    }, {
      "left" : "getNeedClientAuth",
      "right" : "getNeedClientAuth",
      "info" : "SimpleName[43356-43373]:SimpleName[43356-43373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43376-43436]:Block[43376-43436]"
    }, {
      "left" : "return clientAuth == ClientAuthMode.REQUIRE;",
      "right" : "return clientAuth == ClientAuthMode.REQUIRE;",
      "info" : "ReturnStatement[43386-43430]:ReturnStatement[43386-43430]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43442-43451]:MarkerAnnotation[43442-43451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43456-43462]:Modifier[43456-43462]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43463-43467]:PrimitiveType[43463-43467]"
    }, {
      "left" : "setWantClientAuth",
      "right" : "setWantClientAuth",
      "info" : "SimpleName[43468-43485]:SimpleName[43468-43485]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[43486-43495]:SingleVariableDeclaration[43486-43495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43497-43578]:Block[43497-43578]"
    }, {
      "left" : "setClientAuth(b ? ClientAuthMode.OPTIONAL : ClientAuthMode.NONE);",
      "right" : "setClientAuth(b ? ClientAuthMode.OPTIONAL : ClientAuthMode.NONE);",
      "info" : "ExpressionStatement[43507-43572]:ExpressionStatement[43507-43572]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[43584-43593]:MarkerAnnotation[43584-43593]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43598-43604]:Modifier[43598-43604]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43605-43612]:PrimitiveType[43605-43612]"
    }, {
      "left" : "getWantClientAuth",
      "right" : "getWantClientAuth",
      "info" : "SimpleName[43613-43630]:SimpleName[43613-43630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43633-43694]:Block[43633-43694]"
    }, {
      "left" : "return clientAuth == ClientAuthMode.OPTIONAL;",
      "right" : "return clientAuth == ClientAuthMode.OPTIONAL;",
      "info" : "ReturnStatement[43643-43688]:ReturnStatement[43643-43688]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43700-43707]:Modifier[43700-43707]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43708-43712]:PrimitiveType[43708-43712]"
    }, {
      "left" : "setClientAuth",
      "right" : "setClientAuth",
      "info" : "SimpleName[43713-43726]:SimpleName[43713-43726]"
    }, {
      "left" : "ClientAuthMode mode",
      "right" : "ClientAuthMode mode",
      "info" : "SingleVariableDeclaration[43727-43746]:SingleVariableDeclaration[43727-43746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43748-44523]:Block[43748-44523]"
    }, {
      "left" : "if (clientMode)",
      "right" : "if (clientMode)",
      "info" : "IfStatement[43758-43805]:IfStatement[43758-43805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43774-43805]:Block[43774-43805]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43788-43795]:ReturnStatement[43788-43795]"
    }, {
      "left" : "synchronized (this) {\n            if (clientAuth == mode) {\n                // No need to issue any JNI calls if the mode is the same\n                return;\n            }\n            switch (mode) {\n                case NONE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case REQUIRE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case OPTIONAL:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, OpenSslContext.VERIFY_DEPTH);\n                    break;\n            }\n            clientAuth = mode;\n        }",
      "right" : "synchronized (this) {\n            if (clientAuth == mode) {\n                // No need to issue any JNI calls if the mode is the same\n                return;\n            }\n            switch (mode) {\n                case NONE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case REQUIRE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case OPTIONAL:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, OpenSslContext.VERIFY_DEPTH);\n                    break;\n            }\n            clientAuth = mode;\n        }",
      "info" : "SynchronizedStatement[43814-44517]:SynchronizedStatement[43814-44517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43834-44517]:Block[43834-44517]"
    }, {
      "left" : "if (clientAuth == mode)",
      "right" : "if (clientAuth == mode)",
      "info" : "IfStatement[43848-43985]:IfStatement[43848-43985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43872-43985]:Block[43872-43985]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43964-43971]:ReturnStatement[43964-43971]"
    }, {
      "left" : "switch (mode) {\n                case NONE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case REQUIRE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case OPTIONAL:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, OpenSslContext.VERIFY_DEPTH);\n                    break;\n            }",
      "right" : "switch (mode) {\n                case NONE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case REQUIRE:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, OpenSslContext.VERIFY_DEPTH);\n                    break;\n                case OPTIONAL:\n                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, OpenSslContext.VERIFY_DEPTH);\n                    break;\n            }",
      "info" : "SwitchStatement[43998-44476]:SwitchStatement[43998-44476]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[44030-44040]:SwitchCase[44030-44040]"
    }, {
      "left" : "SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, OpenSslContext.VERIFY_DEPTH);",
      "right" : "SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, OpenSslContext.VERIFY_DEPTH);",
      "info" : "ExpressionStatement[44061-44131]:ExpressionStatement[44061-44131]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44152-44158]:BreakStatement[44152-44158]"
    }, {
      "left" : "case REQUIRE:",
      "right" : "case REQUIRE:",
      "info" : "SwitchCase[44175-44188]:SwitchCase[44175-44188]"
    }, {
      "left" : "SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, OpenSslContext.VERIFY_DEPTH);",
      "right" : "SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, OpenSslContext.VERIFY_DEPTH);",
      "info" : "ExpressionStatement[44209-44282]:ExpressionStatement[44209-44282]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44303-44309]:BreakStatement[44303-44309]"
    }, {
      "left" : "case OPTIONAL:",
      "right" : "case OPTIONAL:",
      "info" : "SwitchCase[44326-44340]:SwitchCase[44326-44340]"
    }, {
      "left" : "SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, OpenSslContext.VERIFY_DEPTH);",
      "right" : "SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, OpenSslContext.VERIFY_DEPTH);",
      "info" : "ExpressionStatement[44361-44435]:ExpressionStatement[44361-44435]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44456-44462]:BreakStatement[44456-44462]"
    }, {
      "left" : "clientAuth = mode;",
      "right" : "clientAuth = mode;",
      "info" : "ExpressionStatement[44489-44507]:ExpressionStatement[44489-44507]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44529-44538]:MarkerAnnotation[44529-44538]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44543-44549]:Modifier[44543-44549]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44550-44554]:PrimitiveType[44550-44554]"
    }, {
      "left" : "setEnableSessionCreation",
      "right" : "setEnableSessionCreation",
      "info" : "SimpleName[44555-44579]:SimpleName[44555-44579]"
    }, {
      "left" : "boolean b",
      "right" : "boolean b",
      "info" : "SingleVariableDeclaration[44580-44589]:SingleVariableDeclaration[44580-44589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44591-44680]:Block[44591-44680]"
    }, {
      "left" : "if (b)",
      "right" : "if (b)",
      "info" : "IfStatement[44601-44674]:IfStatement[44601-44674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44608-44674]:Block[44608-44674]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[44622-44664]:ThrowStatement[44622-44664]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44686-44695]:MarkerAnnotation[44686-44695]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44700-44706]:Modifier[44700-44706]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44707-44714]:PrimitiveType[44707-44714]"
    }, {
      "left" : "getEnableSessionCreation",
      "right" : "getEnableSessionCreation",
      "info" : "SimpleName[44715-44739]:SimpleName[44715-44739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44742-44771]:Block[44742-44771]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44752-44765]:ReturnStatement[44752-44765]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[44777-44786]:MarkerAnnotation[44777-44786]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44791-44797]:Modifier[44791-44797]"
    }, {
      "left" : "SSLParameters",
      "right" : "SSLParameters",
      "info" : "SimpleType[44798-44811]:SimpleType[44798-44811]"
    }, {
      "left" : "getSSLParameters",
      "right" : "getSSLParameters",
      "info" : "SimpleName[44812-44828]:SimpleName[44812-44828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44831-45183]:Block[44831-45183]"
    }, {
      "left" : "SSLParameters sslParameters = super.getSSLParameters();",
      "right" : "SSLParameters sslParameters = super.getSSLParameters();",
      "info" : "VariableDeclarationStatement[44841-44896]:VariableDeclarationStatement[44841-44896]"
    }, {
      "left" : "if (PlatformDependent.javaVersion() >= 7)",
      "right" : "if (PlatformDependent.javaVersion() >= 7)",
      "info" : "IfStatement[44906-45147]:IfStatement[44906-45147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44948-45147]:Block[44948-45147]"
    }, {
      "left" : "sslParameters.setEndpointIdentificationAlgorithm(endPointIdentificationAlgorithm);",
      "right" : "sslParameters.setEndpointIdentificationAlgorithm(endPointIdentificationAlgorithm);",
      "info" : "ExpressionStatement[44962-45044]:ExpressionStatement[44962-45044]"
    }, {
      "left" : "SslParametersUtils.setAlgorithmConstraints(sslParameters, algorithmConstraints);",
      "right" : "SslParametersUtils.setAlgorithmConstraints(sslParameters, algorithmConstraints);",
      "info" : "ExpressionStatement[45057-45137]:ExpressionStatement[45057-45137]"
    }, {
      "left" : "return sslParameters;",
      "right" : "return sslParameters;",
      "info" : "ReturnStatement[45156-45177]:ReturnStatement[45156-45177]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45189-45198]:MarkerAnnotation[45189-45198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45203-45209]:Modifier[45203-45209]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45210-45214]:PrimitiveType[45210-45214]"
    }, {
      "left" : "setSSLParameters",
      "right" : "setSSLParameters",
      "info" : "SimpleName[45215-45231]:SimpleName[45215-45231]"
    }, {
      "left" : "SSLParameters sslParameters",
      "right" : "SSLParameters sslParameters",
      "info" : "SingleVariableDeclaration[45232-45259]:SingleVariableDeclaration[45232-45259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45261-45552]:Block[45261-45552]"
    }, {
      "left" : "super.setSSLParameters(sslParameters);",
      "right" : "super.setSSLParameters(sslParameters);",
      "info" : "ExpressionStatement[45271-45309]:ExpressionStatement[45271-45309]"
    }, {
      "left" : "if (PlatformDependent.javaVersion() >= 7)",
      "right" : "if (PlatformDependent.javaVersion() >= 7)",
      "info" : "IfStatement[45319-45546]:IfStatement[45319-45546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45361-45546]:Block[45361-45546]"
    }, {
      "left" : "endPointIdentificationAlgorithm = sslParameters.getEndpointIdentificationAlgorithm();",
      "right" : "endPointIdentificationAlgorithm = sslParameters.getEndpointIdentificationAlgorithm();",
      "info" : "ExpressionStatement[45375-45460]:ExpressionStatement[45375-45460]"
    }, {
      "left" : "algorithmConstraints = sslParameters.getAlgorithmConstraints();",
      "right" : "algorithmConstraints = sslParameters.getAlgorithmConstraints();",
      "info" : "ExpressionStatement[45473-45536]:ExpressionStatement[45473-45536]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[45558-45567]:MarkerAnnotation[45558-45567]"
    }, {
      "left" : "@SuppressWarnings(\"FinalizeDeclaration\")",
      "right" : "@SuppressWarnings(\"FinalizeDeclaration\")",
      "info" : "SingleMemberAnnotation[45572-45612]:SingleMemberAnnotation[45572-45612]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[45617-45626]:Modifier[45617-45626]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45627-45631]:PrimitiveType[45627-45631]"
    }, {
      "left" : "finalize",
      "right" : "finalize",
      "info" : "SimpleName[45632-45640]:SimpleName[45632-45640]"
    }, {
      "left" : "Throwable",
      "right" : "Throwable",
      "info" : "SimpleType[45650-45659]:SimpleType[45650-45659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45660-45809]:Block[45660-45809]"
    }, {
      "left" : "super.finalize();",
      "right" : "super.finalize();",
      "info" : "ExpressionStatement[45670-45687]:ExpressionStatement[45670-45687]"
    }, {
      "left" : "shutdown();",
      "right" : "shutdown();",
      "info" : "ExpressionStatement[45792-45803]:ExpressionStatement[45792-45803]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45815-45822]:Modifier[45815-45822]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[45823-45828]:Modifier[45823-45828]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[45829-45834]:TYPE_DECLARATION_KIND[45829-45834]"
    }, {
      "left" : "OpenSslSession",
      "right" : "OpenSslSession",
      "info" : "SimpleName[45835-45849]:SimpleName[45835-45849]"
    }, {
      "left" : "SSLSession",
      "right" : "SSLSession",
      "info" : "SimpleType[45861-45871]:SimpleType[45861-45871]"
    }, {
      "left" : "ApplicationProtocolAccessor",
      "right" : "ApplicationProtocolAccessor",
      "info" : "SimpleType[45873-45900]:SimpleType[45873-45900]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46148-46157]:MarkerAnnotation[46148-46157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46166-46172]:Modifier[46166-46172]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[46173-46179]:ArrayType[46173-46179]"
    }, {
      "left" : "getId",
      "right" : "getId",
      "info" : "SimpleName[46180-46185]:SimpleName[46180-46185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46188-46789]:Block[46188-46789]"
    }, {
      "left" : "final byte[] id;",
      "right" : "final byte[] id;",
      "info" : "VariableDeclarationStatement[46202-46218]:VariableDeclarationStatement[46202-46218]"
    }, {
      "left" : "synchronized (OpenSslEngine.this) {\n                if (destroyed == 0) {\n                    id = SSL.getSessionId(ssl);\n                } else {\n                    id = EmptyArrays.EMPTY_BYTES;\n                }\n            }",
      "right" : "synchronized (OpenSslEngine.this) {\n                if (destroyed == 0) {\n                    id = SSL.getSessionId(ssl);\n                } else {\n                    id = EmptyArrays.EMPTY_BYTES;\n                }\n            }",
      "info" : "SynchronizedStatement[46231-46459]:SynchronizedStatement[46231-46459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46265-46459]:Block[46265-46459]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[46283-46445]:IfStatement[46283-46445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46303-46370]:Block[46303-46370]"
    }, {
      "left" : "id = SSL.getSessionId(ssl);",
      "right" : "id = SSL.getSessionId(ssl);",
      "info" : "ExpressionStatement[46325-46352]:ExpressionStatement[46325-46352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46376-46445]:Block[46376-46445]"
    }, {
      "left" : "id = EmptyArrays.EMPTY_BYTES;",
      "right" : "id = EmptyArrays.EMPTY_BYTES;",
      "info" : "ExpressionStatement[46398-46427]:ExpressionStatement[46398-46427]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[46542-46756]:IfStatement[46542-46756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46558-46756]:Block[46558-46756]"
    }, {
      "left" : "throw new IllegalStateException(\"SSL session ID not available\");",
      "right" : "throw new IllegalStateException(\"SSL session ID not available\");",
      "info" : "ThrowStatement[46678-46742]:ThrowStatement[46678-46742]"
    }, {
      "left" : "return id;",
      "right" : "return id;",
      "info" : "ReturnStatement[46769-46779]:ReturnStatement[46769-46779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46799-46808]:MarkerAnnotation[46799-46808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46817-46823]:Modifier[46817-46823]"
    }, {
      "left" : "SSLSessionContext",
      "right" : "SSLSessionContext",
      "info" : "SimpleType[46824-46841]:SimpleType[46824-46841]"
    }, {
      "left" : "getSessionContext",
      "right" : "getSessionContext",
      "info" : "SimpleName[46842-46859]:SimpleName[46842-46859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46862-46908]:Block[46862-46908]"
    }, {
      "left" : "return sessionContext;",
      "right" : "return sessionContext;",
      "info" : "ReturnStatement[46876-46898]:ReturnStatement[46876-46898]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[46918-46927]:MarkerAnnotation[46918-46927]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46936-46942]:Modifier[46936-46942]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[46943-46947]:PrimitiveType[46943-46947]"
    }, {
      "left" : "getCreationTime",
      "right" : "getCreationTime",
      "info" : "SimpleName[46948-46963]:SimpleName[46948-46963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46966-47276]:Block[46966-47276]"
    }, {
      "left" : "synchronized (OpenSslEngine.this) {\n                if (destroyed == 0) {\n                    // We need ot multiple by 1000 as openssl uses seconds and we need milli-seconds.\n                    return SSL.getTime(ssl) * 1000L;\n                }\n                return 0;\n            }",
      "right" : "synchronized (OpenSslEngine.this) {\n                if (destroyed == 0) {\n                    // We need ot multiple by 1000 as openssl uses seconds and we need milli-seconds.\n                    return SSL.getTime(ssl) * 1000L;\n                }\n                return 0;\n            }",
      "info" : "SynchronizedStatement[46980-47266]:SynchronizedStatement[46980-47266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47014-47266]:Block[47014-47266]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[47032-47226]:IfStatement[47032-47226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47052-47226]:Block[47052-47226]"
    }, {
      "left" : "return SSL.getTime(ssl) * 1000L;",
      "right" : "return SSL.getTime(ssl) * 1000L;",
      "info" : "ReturnStatement[47176-47208]:ReturnStatement[47176-47208]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[47243-47252]:ReturnStatement[47243-47252]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47286-47295]:MarkerAnnotation[47286-47295]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47304-47310]:Modifier[47304-47310]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[47311-47315]:PrimitiveType[47311-47315]"
    }, {
      "left" : "getLastAccessedTime",
      "right" : "getLastAccessedTime",
      "info" : "SimpleName[47316-47335]:SimpleName[47316-47335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47338-47434]:Block[47338-47434]"
    }, {
      "left" : "return getCreationTime();",
      "right" : "return getCreationTime();",
      "info" : "ReturnStatement[47399-47424]:ReturnStatement[47399-47424]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47444-47453]:MarkerAnnotation[47444-47453]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47462-47468]:Modifier[47462-47468]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47469-47473]:PrimitiveType[47469-47473]"
    }, {
      "left" : "invalidate",
      "right" : "invalidate",
      "info" : "SimpleName[47474-47484]:SimpleName[47474-47484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47487-47518]:Block[47487-47518]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47528-47537]:MarkerAnnotation[47528-47537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47546-47552]:Modifier[47546-47552]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47553-47560]:PrimitiveType[47553-47560]"
    }, {
      "left" : "isValid",
      "right" : "isValid",
      "info" : "SimpleName[47561-47568]:SimpleName[47561-47568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47571-47608]:Block[47571-47608]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47585-47598]:ReturnStatement[47585-47598]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[47618-47627]:MarkerAnnotation[47618-47627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47636-47642]:Modifier[47636-47642]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47643-47647]:PrimitiveType[47643-47647]"
    }, {
      "left" : "putValue",
      "right" : "putValue",
      "info" : "SimpleName[47648-47656]:SimpleName[47648-47656]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[47657-47668]:SingleVariableDeclaration[47657-47668]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[47670-47682]:SingleVariableDeclaration[47670-47682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47684-48409]:Block[47684-48409]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[47698-47787]:IfStatement[47698-47787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47716-47787]:Block[47716-47787]"
    }, {
      "left" : "throw new NullPointerException(\"name\");",
      "right" : "throw new NullPointerException(\"name\");",
      "info" : "ThrowStatement[47734-47773]:ThrowStatement[47734-47773]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[47800-47891]:IfStatement[47800-47891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47819-47891]:Block[47819-47891]"
    }, {
      "left" : "throw new NullPointerException(\"value\");",
      "right" : "throw new NullPointerException(\"value\");",
      "info" : "ThrowStatement[47837-47877]:ThrowStatement[47837-47877]"
    }, {
      "left" : "Map<String, Object> values = this.values;",
      "right" : "Map<String, Object> values = this.values;",
      "info" : "VariableDeclarationStatement[47904-47945]:VariableDeclarationStatement[47904-47945]"
    }, {
      "left" : "if (values == null)",
      "right" : "if (values == null)",
      "info" : "IfStatement[47958-48131]:IfStatement[47958-48131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47978-48131]:Block[47978-48131]"
    }, {
      "left" : "values = this.values = new HashMap<String, Object>(2);",
      "right" : "values = this.values = new HashMap<String, Object>(2);",
      "info" : "ExpressionStatement[48063-48117]:ExpressionStatement[48063-48117]"
    }, {
      "left" : "Object old = values.put(name, value);",
      "right" : "Object old = values.put(name, value);",
      "info" : "VariableDeclarationStatement[48144-48181]:VariableDeclarationStatement[48144-48181]"
    }, {
      "left" : "if (value instanceof SSLSessionBindingListener)",
      "right" : "if (value instanceof SSLSessionBindingListener)",
      "info" : "IfStatement[48194-48361]:IfStatement[48194-48361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48242-48361]:Block[48242-48361]"
    }, {
      "left" : "((SSLSessionBindingListener) value).valueBound(new SSLSessionBindingEvent(this, name));",
      "right" : "((SSLSessionBindingListener) value).valueBound(new SSLSessionBindingEvent(this, name));",
      "info" : "ExpressionStatement[48260-48347]:ExpressionStatement[48260-48347]"
    }, {
      "left" : "notifyUnbound(old, name);",
      "right" : "notifyUnbound(old, name);",
      "info" : "ExpressionStatement[48374-48399]:ExpressionStatement[48374-48399]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48419-48428]:MarkerAnnotation[48419-48428]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48437-48443]:Modifier[48437-48443]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[48444-48450]:SimpleType[48444-48450]"
    }, {
      "left" : "getValue",
      "right" : "getValue",
      "info" : "SimpleName[48451-48459]:SimpleName[48451-48459]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[48460-48471]:SingleVariableDeclaration[48460-48471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48473-48700]:Block[48473-48700]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[48487-48576]:IfStatement[48487-48576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48505-48576]:Block[48505-48576]"
    }, {
      "left" : "throw new NullPointerException(\"name\");",
      "right" : "throw new NullPointerException(\"name\");",
      "info" : "ThrowStatement[48523-48562]:ThrowStatement[48523-48562]"
    }, {
      "left" : "if (values == null)",
      "right" : "if (values == null)",
      "info" : "IfStatement[48589-48653]:IfStatement[48589-48653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48609-48653]:Block[48609-48653]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48627-48639]:ReturnStatement[48627-48639]"
    }, {
      "left" : "return values.get(name);",
      "right" : "return values.get(name);",
      "info" : "ReturnStatement[48666-48690]:ReturnStatement[48666-48690]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48710-48719]:MarkerAnnotation[48710-48719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48728-48734]:Modifier[48728-48734]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48735-48739]:PrimitiveType[48735-48739]"
    }, {
      "left" : "removeValue",
      "right" : "removeValue",
      "info" : "SimpleName[48740-48751]:SimpleName[48740-48751]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[48752-48763]:SingleVariableDeclaration[48752-48763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48765-49088]:Block[48765-49088]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[48779-48868]:IfStatement[48779-48868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48797-48868]:Block[48797-48868]"
    }, {
      "left" : "throw new NullPointerException(\"name\");",
      "right" : "throw new NullPointerException(\"name\");",
      "info" : "ThrowStatement[48815-48854]:ThrowStatement[48815-48854]"
    }, {
      "left" : "Map<String, Object> values = this.values;",
      "right" : "Map<String, Object> values = this.values;",
      "info" : "VariableDeclarationStatement[48881-48922]:VariableDeclarationStatement[48881-48922]"
    }, {
      "left" : "if (values == null)",
      "right" : "if (values == null)",
      "info" : "IfStatement[48935-48994]:IfStatement[48935-48994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48955-48994]:Block[48955-48994]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48973-48980]:ReturnStatement[48973-48980]"
    }, {
      "left" : "Object old = values.remove(name);",
      "right" : "Object old = values.remove(name);",
      "info" : "VariableDeclarationStatement[49007-49040]:VariableDeclarationStatement[49007-49040]"
    }, {
      "left" : "notifyUnbound(old, name);",
      "right" : "notifyUnbound(old, name);",
      "info" : "ExpressionStatement[49053-49078]:ExpressionStatement[49053-49078]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49098-49107]:MarkerAnnotation[49098-49107]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49116-49122]:Modifier[49116-49122]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[49123-49131]:ArrayType[49123-49131]"
    }, {
      "left" : "getValueNames",
      "right" : "getValueNames",
      "info" : "SimpleName[49132-49145]:SimpleName[49132-49145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49148-49402]:Block[49148-49402]"
    }, {
      "left" : "Map<String, Object> values = this.values;",
      "right" : "Map<String, Object> values = this.values;",
      "info" : "VariableDeclarationStatement[49162-49203]:VariableDeclarationStatement[49162-49203]"
    }, {
      "left" : "if (values == null || values.isEmpty())",
      "right" : "if (values == null || values.isEmpty())",
      "info" : "IfStatement[49216-49321]:IfStatement[49216-49321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49256-49321]:Block[49256-49321]"
    }, {
      "left" : "return EmptyArrays.EMPTY_STRINGS;",
      "right" : "return EmptyArrays.EMPTY_STRINGS;",
      "info" : "ReturnStatement[49274-49307]:ReturnStatement[49274-49307]"
    }, {
      "left" : "return values.keySet().toArray(new String[values.size()]);",
      "right" : "return values.keySet().toArray(new String[values.size()]);",
      "info" : "ReturnStatement[49334-49392]:ReturnStatement[49334-49392]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49412-49419]:Modifier[49412-49419]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49420-49424]:PrimitiveType[49420-49424]"
    }, {
      "left" : "notifyUnbound",
      "right" : "notifyUnbound",
      "info" : "SimpleName[49425-49438]:SimpleName[49425-49438]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[49439-49451]:SingleVariableDeclaration[49439-49451]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[49453-49464]:SingleVariableDeclaration[49453-49464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49466-49659]:Block[49466-49659]"
    }, {
      "left" : "if (value instanceof SSLSessionBindingListener)",
      "right" : "if (value instanceof SSLSessionBindingListener)",
      "info" : "IfStatement[49480-49649]:IfStatement[49480-49649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49528-49649]:Block[49528-49649]"
    }, {
      "left" : "((SSLSessionBindingListener) value).valueUnbound(new SSLSessionBindingEvent(this, name));",
      "right" : "((SSLSessionBindingListener) value).valueUnbound(new SSLSessionBindingEvent(this, name));",
      "info" : "ExpressionStatement[49546-49635]:ExpressionStatement[49546-49635]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[49669-49678]:MarkerAnnotation[49669-49678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49687-49693]:Modifier[49687-49693]"
    }, {
      "left" : "Certificate[]",
      "right" : "Certificate[]",
      "info" : "ArrayType[49694-49707]:ArrayType[49694-49707]"
    }, {
      "left" : "getPeerCertificates",
      "right" : "getPeerCertificates",
      "info" : "SimpleName[49708-49727]:SimpleName[49708-49727]"
    }, {
      "left" : "SSLPeerUnverifiedException",
      "right" : "SSLPeerUnverifiedException",
      "info" : "SimpleType[49737-49763]:SimpleType[49737-49763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49764-50396]:Block[49764-50396]"
    }, {
      "left" : "Certificate[] c = peerCerts;",
      "right" : "Certificate[] c = peerCerts;",
      "info" : "VariableDeclarationStatement[49842-49870]:VariableDeclarationStatement[49842-49870]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[49883-50364]:IfStatement[49883-50364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49898-50364]:Block[49898-50364]"
    }, {
      "left" : "synchronized (OpenSslEngine.this) {\n                    if (destroyed == 0) {\n                        if (SSL.isInInit(ssl) != 0) {\n                            throw new SSLPeerUnverifiedException(\"peer not verified\");\n                        }\n                        c = peerCerts = initPeerCertChain();\n                    } else {\n                        c = peerCerts = EMPTY_CERTIFICATES;\n                    }\n                }",
      "right" : "synchronized (OpenSslEngine.this) {\n                    if (destroyed == 0) {\n                        if (SSL.isInInit(ssl) != 0) {\n                            throw new SSLPeerUnverifiedException(\"peer not verified\");\n                        }\n                        c = peerCerts = initPeerCertChain();\n                    } else {\n                        c = peerCerts = EMPTY_CERTIFICATES;\n                    }\n                }",
      "info" : "SynchronizedStatement[49916-50350]:SynchronizedStatement[49916-50350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49950-50350]:Block[49950-50350]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[49972-50332]:IfStatement[49972-50332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49992-50243]:Block[49992-50243]"
    }, {
      "left" : "if (SSL.isInInit(ssl) != 0)",
      "right" : "if (SSL.isInInit(ssl) != 0)",
      "info" : "IfStatement[50018-50160]:IfStatement[50018-50160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50046-50160]:Block[50046-50160]"
    }, {
      "left" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "right" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "info" : "ThrowStatement[50076-50134]:ThrowStatement[50076-50134]"
    }, {
      "left" : "c = peerCerts = initPeerCertChain();",
      "right" : "c = peerCerts = initPeerCertChain();",
      "info" : "ExpressionStatement[50185-50221]:ExpressionStatement[50185-50221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50249-50332]:Block[50249-50332]"
    }, {
      "left" : "c = peerCerts = EMPTY_CERTIFICATES;",
      "right" : "c = peerCerts = EMPTY_CERTIFICATES;",
      "info" : "ExpressionStatement[50275-50310]:ExpressionStatement[50275-50310]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[50377-50386]:ReturnStatement[50377-50386]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50406-50415]:MarkerAnnotation[50406-50415]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50424-50430]:Modifier[50424-50430]"
    }, {
      "left" : "Certificate[]",
      "right" : "Certificate[]",
      "info" : "ArrayType[50431-50444]:ArrayType[50431-50444]"
    }, {
      "left" : "getLocalCertificates",
      "right" : "getLocalCertificates",
      "info" : "SimpleName[50445-50465]:SimpleName[50445-50465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50468-50565]:Block[50468-50565]"
    }, {
      "left" : "return EMPTY_CERTIFICATES;",
      "right" : "return EMPTY_CERTIFICATES;",
      "info" : "ReturnStatement[50529-50555]:ReturnStatement[50529-50555]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[50575-50584]:MarkerAnnotation[50575-50584]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50593-50599]:Modifier[50593-50599]"
    }, {
      "left" : "X509Certificate[]",
      "right" : "X509Certificate[]",
      "info" : "ArrayType[50600-50617]:ArrayType[50600-50617]"
    }, {
      "left" : "getPeerCertificateChain",
      "right" : "getPeerCertificateChain",
      "info" : "SimpleName[50618-50641]:SimpleName[50618-50641]"
    }, {
      "left" : "SSLPeerUnverifiedException",
      "right" : "SSLPeerUnverifiedException",
      "info" : "SimpleType[50651-50677]:SimpleType[50651-50677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50678-51979]:Block[50678-51979]"
    }, {
      "left" : "X509Certificate[] c = x509PeerCerts;",
      "right" : "X509Certificate[] c = x509PeerCerts;",
      "info" : "VariableDeclarationStatement[50756-50792]:VariableDeclarationStatement[50756-50792]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[50805-51947]:IfStatement[50805-51947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50820-51947]:Block[50820-51947]"
    }, {
      "left" : "final byte[][] chain;",
      "right" : "final byte[][] chain;",
      "info" : "VariableDeclarationStatement[50838-50859]:VariableDeclarationStatement[50838-50859]"
    }, {
      "left" : "synchronized (OpenSslEngine.this) {\n                    if (destroyed == 0) {\n                        if (SSL.isInInit(ssl) != 0) {\n                            throw new SSLPeerUnverifiedException(\"peer not verified\");\n                        }\n                        chain = SSL.getPeerCertChain(ssl);\n                    } else {\n                        c = x509PeerCerts = EMPTY_X509_CERTIFICATES;\n                        return c;\n                    }\n                }",
      "right" : "synchronized (OpenSslEngine.this) {\n                    if (destroyed == 0) {\n                        if (SSL.isInInit(ssl) != 0) {\n                            throw new SSLPeerUnverifiedException(\"peer not verified\");\n                        }\n                        chain = SSL.getPeerCertChain(ssl);\n                    } else {\n                        c = x509PeerCerts = EMPTY_X509_CERTIFICATES;\n                        return c;\n                    }\n                }",
      "info" : "SynchronizedStatement[50876-51351]:SynchronizedStatement[50876-51351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50910-51351]:Block[50910-51351]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[50932-51333]:IfStatement[50932-51333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50952-51201]:Block[50952-51201]"
    }, {
      "left" : "if (SSL.isInInit(ssl) != 0)",
      "right" : "if (SSL.isInInit(ssl) != 0)",
      "info" : "IfStatement[50978-51120]:IfStatement[50978-51120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51006-51120]:Block[51006-51120]"
    }, {
      "left" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "right" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "info" : "ThrowStatement[51036-51094]:ThrowStatement[51036-51094]"
    }, {
      "left" : "chain = SSL.getPeerCertChain(ssl);",
      "right" : "chain = SSL.getPeerCertChain(ssl);",
      "info" : "ExpressionStatement[51145-51179]:ExpressionStatement[51145-51179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51207-51333]:Block[51207-51333]"
    }, {
      "left" : "c = x509PeerCerts = EMPTY_X509_CERTIFICATES;",
      "right" : "c = x509PeerCerts = EMPTY_X509_CERTIFICATES;",
      "info" : "ExpressionStatement[51233-51277]:ExpressionStatement[51233-51277]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[51302-51311]:ReturnStatement[51302-51311]"
    }, {
      "left" : "if (chain == null)",
      "right" : "if (chain == null)",
      "info" : "IfStatement[51368-51485]:IfStatement[51368-51485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51387-51485]:Block[51387-51485]"
    }, {
      "left" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "right" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "info" : "ThrowStatement[51409-51467]:ThrowStatement[51409-51467]"
    }, {
      "left" : "X509Certificate[] peerCerts = new X509Certificate[chain.length];",
      "right" : "X509Certificate[] peerCerts = new X509Certificate[chain.length];",
      "info" : "VariableDeclarationStatement[51502-51566]:VariableDeclarationStatement[51502-51566]"
    }, {
      "left" : "for (int i = 0; i < peerCerts.length; i++)",
      "right" : "for (int i = 0; i < peerCerts.length; i++)",
      "info" : "ForStatement[51583-51886]:ForStatement[51583-51886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51626-51886]:Block[51626-51886]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[51648-51868]:TryStatement[51648-51868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51652-51753]:Block[51652-51753]"
    }, {
      "left" : "peerCerts[i] = X509Certificate.getInstance(chain[i]);",
      "right" : "peerCerts[i] = X509Certificate.getInstance(chain[i]);",
      "info" : "ExpressionStatement[51678-51731]:ExpressionStatement[51678-51731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51785-51868]:Block[51785-51868]"
    }, {
      "left" : "throw new IllegalStateException(e);",
      "right" : "throw new IllegalStateException(e);",
      "info" : "ThrowStatement[51811-51846]:ThrowStatement[51811-51846]"
    }, {
      "left" : "c = x509PeerCerts = peerCerts;",
      "right" : "c = x509PeerCerts = peerCerts;",
      "info" : "ExpressionStatement[51903-51933]:ExpressionStatement[51903-51933]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[51960-51969]:ReturnStatement[51960-51969]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[51989-51998]:MarkerAnnotation[51989-51998]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52007-52013]:Modifier[52007-52013]"
    }, {
      "left" : "Principal",
      "right" : "Principal",
      "info" : "SimpleType[52014-52023]:SimpleType[52014-52023]"
    }, {
      "left" : "getPeerPrincipal",
      "right" : "getPeerPrincipal",
      "info" : "SimpleName[52024-52040]:SimpleName[52024-52040]"
    }, {
      "left" : "SSLPeerUnverifiedException",
      "right" : "SSLPeerUnverifiedException",
      "info" : "SimpleType[52050-52076]:SimpleType[52050-52076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52077-52275]:Block[52077-52332]"
    }, {
      "left" : "Certificate[] peer = getPeerCertificates();",
      "right" : "Certificate[] peer = getPeerCertificates();",
      "info" : "VariableDeclarationStatement[52091-52134]:VariableDeclarationStatement[52091-52134]"
    }, {
      "left" : "if (peer == null || peer.length == 0)",
      "right" : "if (peer == null || peer.length == 0)",
      "info" : "IfStatement[52147-52229]:IfStatement[52147-52229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52185-52229]:Block[52185-52229]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[52203-52215]:ReturnStatement[52203-52215]"
    }, {
      "left" : "return principal(peer);",
      "right" : "return ((java.security.cert.X509Certificate) peer[0]).getSubjectX500Principal();",
      "info" : "ReturnStatement[52242-52265]:ReturnStatement[52242-52322]"
    }, {
      "left" : "principal",
      "right" : "getSubjectX500Principal",
      "info" : "SimpleName[52249-52258]:SimpleName[52296-52319]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52285-52294]:MarkerAnnotation[52342-52351]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52303-52309]:Modifier[52360-52366]"
    }, {
      "left" : "Principal",
      "right" : "Principal",
      "info" : "SimpleType[52310-52319]:SimpleType[52367-52376]"
    }, {
      "left" : "getLocalPrincipal",
      "right" : "getLocalPrincipal",
      "info" : "SimpleName[52320-52337]:SimpleName[52377-52394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52340-52543]:Block[52397-52656]"
    }, {
      "left" : "Certificate[] local = getLocalCertificates();",
      "right" : "Certificate[] local = getLocalCertificates();",
      "info" : "VariableDeclarationStatement[52354-52399]:VariableDeclarationStatement[52411-52456]"
    }, {
      "left" : "if (local == null || local.length == 0)",
      "right" : "if (local == null || local.length == 0)",
      "info" : "IfStatement[52412-52496]:IfStatement[52469-52553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52452-52496]:Block[52509-52553]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[52470-52482]:ReturnStatement[52527-52539]"
    }, {
      "left" : "return principal(local);",
      "right" : "return ((java.security.cert.X509Certificate) local[0]).getIssuerX500Principal();",
      "info" : "ReturnStatement[52509-52533]:ReturnStatement[52566-52646]"
    }, {
      "left" : "principal",
      "right" : "getIssuerX500Principal",
      "info" : "SimpleName[52516-52525]:SimpleName[52621-52643]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[52553-52560]:Modifier[52007-52013]"
    }, {
      "left" : "Principal",
      "right" : "Principal",
      "info" : "SimpleType[52561-52570]:SimpleType[52014-52023]"
    }, {
      "left" : "principal",
      "right" : "getPeerPrincipal",
      "info" : "SimpleName[52571-52580]:SimpleName[52024-52040]"
    }, {
      "left" : "Certificate[]",
      "right" : "Certificate[]",
      "info" : "ArrayType[52581-52594]:ArrayType[49694-49707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52602-52706]:Block[52077-52332]"
    }, {
      "left" : "return ((java.security.cert.X509Certificate) certs[0]).getIssuerX500Principal();",
      "right" : "return ((java.security.cert.X509Certificate) peer[0]).getSubjectX500Principal();",
      "info" : "ReturnStatement[52616-52696]:ReturnStatement[52242-52322]"
    }, {
      "left" : "((java.security.cert.X509Certificate) certs[0])",
      "right" : "((java.security.cert.X509Certificate) local[0])",
      "info" : "METHOD_INVOCATION_RECEIVER[52623-52670]:METHOD_INVOCATION_RECEIVER[52573-52620]"
    }, {
      "left" : "certs",
      "right" : "peer",
      "info" : "SimpleName[52661-52666]:SimpleName[52287-52291]"
    }, {
      "left" : "certs",
      "right" : "local",
      "info" : "SimpleName[52661-52666]:SimpleName[52611-52616]"
    }, {
      "left" : "getIssuerX500Principal",
      "right" : "getSubjectX500Principal",
      "info" : "SimpleName[52671-52693]:SimpleName[52296-52319]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[52716-52725]:MarkerAnnotation[52666-52675]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52734-52740]:Modifier[52684-52690]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[52741-52747]:SimpleType[52691-52697]"
    }, {
      "left" : "getCipherSuite",
      "right" : "getCipherSuite",
      "info" : "SimpleName[52748-52762]:SimpleName[52698-52712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52765-53337]:Block[52715-53287]"
    }, {
      "left" : "if (!handshakeFinished)",
      "right" : "if (!handshakeFinished)",
      "info" : "IfStatement[52779-52857]:IfStatement[52729-52807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52803-52857]:Block[52753-52807]"
    }, {
      "left" : "return INVALID_CIPHER;",
      "right" : "return INVALID_CIPHER;",
      "info" : "ReturnStatement[52821-52843]:ReturnStatement[52771-52793]"
    }, {
      "left" : "if (cipher == null)",
      "right" : "if (cipher == null)",
      "info" : "IfStatement[52870-53300]:IfStatement[52820-53250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52890-53300]:Block[52840-53250]"
    }, {
      "left" : "final String c;",
      "right" : "final String c;",
      "info" : "VariableDeclarationStatement[52908-52923]:VariableDeclarationStatement[52858-52873]"
    }, {
      "left" : "synchronized (OpenSslEngine.this) {\n                    if (destroyed == 0) {\n                        c = toJavaCipherSuite(SSL.getCipherForSSL(ssl));\n                    } else {\n                        c = INVALID_CIPHER;\n                    }\n                }",
      "right" : "synchronized (OpenSslEngine.this) {\n                    if (destroyed == 0) {\n                        c = toJavaCipherSuite(SSL.getCipherForSSL(ssl));\n                    } else {\n                        c = INVALID_CIPHER;\n                    }\n                }",
      "info" : "SynchronizedStatement[52940-53203]:SynchronizedStatement[52890-53153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52974-53203]:Block[52924-53153]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[52996-53185]:IfStatement[52946-53135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53016-53112]:Block[52966-53062]"
    }, {
      "left" : "c = toJavaCipherSuite(SSL.getCipherForSSL(ssl));",
      "right" : "c = toJavaCipherSuite(SSL.getCipherForSSL(ssl));",
      "info" : "ExpressionStatement[53042-53090]:ExpressionStatement[52992-53040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53118-53185]:Block[53068-53135]"
    }, {
      "left" : "c = INVALID_CIPHER;",
      "right" : "c = INVALID_CIPHER;",
      "info" : "ExpressionStatement[53144-53163]:ExpressionStatement[53094-53113]"
    }, {
      "left" : "if (c != null)",
      "right" : "if (c != null)",
      "info" : "IfStatement[53220-53286]:IfStatement[53170-53236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53235-53286]:Block[53185-53236]"
    }, {
      "left" : "cipher = c;",
      "right" : "cipher = c;",
      "info" : "ExpressionStatement[53257-53268]:ExpressionStatement[53207-53218]"
    }, {
      "left" : "return cipher;",
      "right" : "return cipher;",
      "info" : "ReturnStatement[53313-53327]:ReturnStatement[53263-53277]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53347-53356]:MarkerAnnotation[53297-53306]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53365-53371]:Modifier[53315-53321]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[53372-53378]:SimpleType[53322-53328]"
    }, {
      "left" : "getProtocol",
      "right" : "getProtocol",
      "info" : "SimpleName[53379-53390]:SimpleName[53329-53340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53393-53647]:Block[53343-53597]"
    }, {
      "left" : "synchronized (OpenSslEngine.this) {\n                if (destroyed == 0) {\n                    return SSL.getVersion(ssl);\n                } else {\n                    return StringUtil.EMPTY_STRING;\n                }\n            }",
      "right" : "synchronized (OpenSslEngine.this) {\n                if (destroyed == 0) {\n                    return SSL.getVersion(ssl);\n                } else {\n                    return StringUtil.EMPTY_STRING;\n                }\n            }",
      "info" : "SynchronizedStatement[53407-53637]:SynchronizedStatement[53357-53587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53441-53637]:Block[53391-53587]"
    }, {
      "left" : "if (destroyed == 0)",
      "right" : "if (destroyed == 0)",
      "info" : "IfStatement[53459-53623]:IfStatement[53409-53573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53479-53546]:Block[53429-53496]"
    }, {
      "left" : "return SSL.getVersion(ssl);",
      "right" : "return SSL.getVersion(ssl);",
      "info" : "ReturnStatement[53501-53528]:ReturnStatement[53451-53478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53552-53623]:Block[53502-53573]"
    }, {
      "left" : "return StringUtil.EMPTY_STRING;",
      "right" : "return StringUtil.EMPTY_STRING;",
      "info" : "ReturnStatement[53574-53605]:ReturnStatement[53524-53555]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53657-53666]:MarkerAnnotation[53607-53616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53675-53681]:Modifier[53625-53631]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[53682-53688]:SimpleType[53632-53638]"
    }, {
      "left" : "getApplicationProtocol",
      "right" : "getApplicationProtocol",
      "info" : "SimpleName[53689-53711]:SimpleName[53639-53661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53714-53765]:Block[53664-53715]"
    }, {
      "left" : "return applicationProtocol;",
      "right" : "return applicationProtocol;",
      "info" : "ReturnStatement[53728-53755]:ReturnStatement[53678-53705]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53775-53784]:MarkerAnnotation[53725-53734]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53793-53799]:Modifier[53743-53749]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[53800-53806]:SimpleType[53750-53756]"
    }, {
      "left" : "getPeerHost",
      "right" : "getPeerHost",
      "info" : "SimpleName[53807-53818]:SimpleName[53757-53768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53821-53885]:Block[53771-53835]"
    }, {
      "left" : "return OpenSslEngine.this.getPeerHost();",
      "right" : "return OpenSslEngine.this.getPeerHost();",
      "info" : "ReturnStatement[53835-53875]:ReturnStatement[53785-53825]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[53895-53904]:MarkerAnnotation[53845-53854]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53913-53919]:Modifier[53863-53869]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[53920-53923]:PrimitiveType[53870-53873]"
    }, {
      "left" : "getPeerPort",
      "right" : "getPeerPort",
      "info" : "SimpleName[53924-53935]:SimpleName[53874-53885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53938-54002]:Block[53888-53952]"
    }, {
      "left" : "return OpenSslEngine.this.getPeerPort();",
      "right" : "return OpenSslEngine.this.getPeerPort();",
      "info" : "ReturnStatement[53952-53992]:ReturnStatement[53902-53942]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[54012-54021]:MarkerAnnotation[53962-53971]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54030-54036]:Modifier[53980-53986]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[54037-54040]:PrimitiveType[53987-53990]"
    }, {
      "left" : "getPacketBufferSize",
      "right" : "getPacketBufferSize",
      "info" : "SimpleName[54041-54060]:SimpleName[53991-54010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54063-54122]:Block[54013-54072]"
    }, {
      "left" : "return MAX_ENCRYPTED_PACKET_LENGTH;",
      "right" : "return MAX_ENCRYPTED_PACKET_LENGTH;",
      "info" : "ReturnStatement[54077-54112]:ReturnStatement[54027-54062]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[54132-54141]:MarkerAnnotation[54082-54091]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54150-54156]:Modifier[54100-54106]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[54157-54160]:PrimitiveType[54107-54110]"
    }, {
      "left" : "getApplicationBufferSize",
      "right" : "getApplicationBufferSize",
      "info" : "SimpleName[54161-54185]:SimpleName[54111-54135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54188-54240]:Block[54138-54190]"
    }, {
      "left" : "return MAX_PLAINTEXT_LENGTH;",
      "right" : "return MAX_PLAINTEXT_LENGTH;",
      "info" : "ReturnStatement[54202-54230]:ReturnStatement[54152-54180]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54250-54257]:Modifier[54200-54207]"
    }, {
      "left" : "Certificate[]",
      "right" : "Certificate[]",
      "info" : "ArrayType[54258-54271]:ArrayType[54208-54221]"
    }, {
      "left" : "initPeerCertChain",
      "right" : "initPeerCertChain",
      "info" : "SimpleName[54272-54289]:SimpleName[54222-54239]"
    }, {
      "left" : "SSLPeerUnverifiedException",
      "right" : "SSLPeerUnverifiedException",
      "info" : "SimpleType[54299-54325]:SimpleType[54249-54275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54326-55752]:Block[54276-55702]"
    }, {
      "left" : "byte[][] chain = SSL.getPeerCertChain(ssl);",
      "right" : "byte[][] chain = SSL.getPeerCertChain(ssl);",
      "info" : "VariableDeclarationStatement[54340-54383]:VariableDeclarationStatement[54290-54333]"
    }, {
      "left" : "final byte[] clientCert;",
      "right" : "final byte[] clientCert;",
      "info" : "VariableDeclarationStatement[54396-54420]:VariableDeclarationStatement[54346-54370]"
    }, {
      "left" : "if (!clientMode)",
      "right" : "if (!clientMode)",
      "info" : "IfStatement[54433-54909]:IfStatement[54383-54859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54450-54853]:Block[54400-54803]"
    }, {
      "left" : "clientCert = SSL.getPeerCertificate(ssl);",
      "right" : "clientCert = SSL.getPeerCertificate(ssl);",
      "info" : "ExpressionStatement[54798-54839]:ExpressionStatement[54748-54789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54859-54909]:Block[54809-54859]"
    }, {
      "left" : "clientCert = null;",
      "right" : "clientCert = null;",
      "info" : "ExpressionStatement[54877-54895]:ExpressionStatement[54827-54845]"
    }, {
      "left" : "if (chain == null && clientCert == null)",
      "right" : "if (chain == null && clientCert == null)",
      "info" : "IfStatement[54923-55054]:IfStatement[54873-55004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54964-55054]:Block[54914-55004]"
    }, {
      "left" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "right" : "throw new SSLPeerUnverifiedException(\"peer not verified\");",
      "info" : "ThrowStatement[54982-55040]:ThrowStatement[54932-54990]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[55067-55079]:VariableDeclarationStatement[55017-55029]"
    }, {
      "left" : "if (chain != null)",
      "right" : "if (chain != null)",
      "info" : "IfStatement[55092-55163]:IfStatement[55042-55113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55111-55163]:Block[55061-55113]"
    }, {
      "left" : "len += chain.length;",
      "right" : "len += chain.length;",
      "info" : "ExpressionStatement[55129-55149]:ExpressionStatement[55079-55099]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[55177-55187]:VariableDeclarationStatement[55127-55137]"
    }, {
      "left" : "Certificate[] peerCerts;",
      "right" : "Certificate[] peerCerts;",
      "info" : "VariableDeclarationStatement[55200-55224]:VariableDeclarationStatement[55150-55174]"
    }, {
      "left" : "if (clientCert != null)",
      "right" : "if (clientCert != null)",
      "info" : "IfStatement[55237-55493]:IfStatement[55187-55443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55261-55422]:Block[55211-55372]"
    }, {
      "left" : "len++;",
      "right" : "len++;",
      "info" : "ExpressionStatement[55279-55285]:ExpressionStatement[55229-55235]"
    }, {
      "left" : "peerCerts = new Certificate[len];",
      "right" : "peerCerts = new Certificate[len];",
      "info" : "ExpressionStatement[55302-55335]:ExpressionStatement[55252-55285]"
    }, {
      "left" : "peerCerts[i++] = new OpenSslX509Certificate(clientCert);",
      "right" : "peerCerts[i++] = new OpenSslX509Certificate(clientCert);",
      "info" : "ExpressionStatement[55352-55408]:ExpressionStatement[55302-55358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55428-55493]:Block[55378-55443]"
    }, {
      "left" : "peerCerts = new Certificate[len];",
      "right" : "peerCerts = new Certificate[len];",
      "info" : "ExpressionStatement[55446-55479]:ExpressionStatement[55396-55429]"
    }, {
      "left" : "if (chain != null)",
      "right" : "if (chain != null)",
      "info" : "IfStatement[55506-55712]:IfStatement[55456-55662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55525-55712]:Block[55475-55662]"
    }, {
      "left" : "int a = 0;",
      "right" : "int a = 0;",
      "info" : "VariableDeclarationStatement[55543-55553]:VariableDeclarationStatement[55493-55503]"
    }, {
      "left" : "for (; i < peerCerts.length; i++)",
      "right" : "for (; i < peerCerts.length; i++)",
      "info" : "ForStatement[55570-55698]:ForStatement[55520-55648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55604-55698]:Block[55554-55648]"
    }, {
      "left" : "peerCerts[i] = new OpenSslX509Certificate(chain[a++]);",
      "right" : "peerCerts[i] = new OpenSslX509Certificate(chain[a++]);",
      "info" : "ExpressionStatement[55626-55680]:ExpressionStatement[55576-55630]"
    }, {
      "left" : "return peerCerts;",
      "right" : "return peerCerts;",
      "info" : "ReturnStatement[55725-55742]:ReturnStatement[55675-55692]"
    } ]
  },
  "interFileMappings" : { }
}