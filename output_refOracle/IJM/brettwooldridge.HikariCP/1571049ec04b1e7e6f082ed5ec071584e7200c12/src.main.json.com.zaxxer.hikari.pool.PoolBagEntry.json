{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1004-3629]:TypeDeclaration[1018-3643]"
  }, {
    "left" : "public final AtomicInteger state = new AtomicInteger();",
    "right" : "public final AtomicInteger state = new AtomicInteger();",
    "info" : "FieldDeclaration[1177-1232]:FieldDeclaration[1191-1246]"
  }, {
    "left" : "public final FastList<Statement> openStatements;",
    "right" : "public final FastList<Statement> openStatements;",
    "info" : "FieldDeclaration[1236-1284]:FieldDeclaration[1250-1298]"
  }, {
    "left" : "public final HikariPool parentPool;",
    "right" : "public final HikariPool parentPool;",
    "info" : "FieldDeclaration[1288-1323]:FieldDeclaration[1302-1337]"
  }, {
    "left" : "public Connection connection;",
    "right" : "public Connection connection;",
    "info" : "FieldDeclaration[1328-1357]:FieldDeclaration[1342-1371]"
  }, {
    "left" : "public int networkTimeout;",
    "right" : "public int networkTimeout;",
    "info" : "FieldDeclaration[1361-1387]:FieldDeclaration[1375-1401]"
  }, {
    "left" : "public long lastAccess;",
    "right" : "public long lastAccess;",
    "info" : "FieldDeclaration[1391-1414]:FieldDeclaration[1405-1428]"
  }, {
    "left" : "public volatile long lastOpenTime;",
    "right" : "public volatile long lastOpenTime;",
    "info" : "FieldDeclaration[1418-1452]:FieldDeclaration[1432-1466]"
  }, {
    "left" : "public volatile boolean evicted;",
    "right" : "public volatile boolean evicted;",
    "info" : "FieldDeclaration[1456-1488]:FieldDeclaration[1470-1502]"
  }, {
    "left" : "public volatile boolean aborted;",
    "right" : "public volatile boolean aborted;",
    "info" : "FieldDeclaration[1492-1524]:FieldDeclaration[1506-1538]"
  }, {
    "left" : "private volatile ScheduledFuture<?> endOfLife;",
    "right" : "private volatile ScheduledFuture<?> endOfLife;",
    "info" : "FieldDeclaration[1529-1575]:FieldDeclaration[1543-1589]"
  }, {
    "left" : "public PoolBagEntry(final Connection connection, final int networkTimeout, final HikariPool pool) {\n      this.connection = connection;\n      this.networkTimeout = networkTimeout;\n      this.parentPool = pool;\n      this.lastAccess = ClockSource.INSTANCE.currentTime();\n      this.openStatements = new FastList<>(Statement.class, 16);\n\n      final long variance = pool.config.getMaxLifetime() > 60_000 ? ThreadLocalRandom.current().nextLong(10_000) : 0;\n      final long maxLifetime = pool.config.getMaxLifetime() - variance;\n      if (maxLifetime > 0) {\n         endOfLife = pool.houseKeepingExecutorService.schedule(new Runnable() {\n            @Override\n            public void run()\n            {\n               // If we can reserve it, close it\n               if (pool.connectionBag.reserve(PoolBagEntry.this)) {\n                  pool.closeConnection(PoolBagEntry.this, \"(connection reached maxLifetime)\");\n               }\n               else {\n                  // else the connection is \"in-use\" and we mark it for eviction by pool.releaseConnection() or the housekeeper\n                  PoolBagEntry.this.evicted = true;\n               }\n            }\n         }, maxLifetime, TimeUnit.MILLISECONDS);\n      }\n   }",
    "right" : "public PoolBagEntry(final Connection connection, final int networkTimeout, final HikariPool pool) {\n      this.connection = connection;\n      this.networkTimeout = networkTimeout;\n      this.parentPool = pool;\n      this.lastAccess = ClockSource.INSTANCE.currentTime();\n      this.openStatements = new FastList<>(Statement.class, 16);\n\n      final long variance = pool.config.getMaxLifetime() > 60_000 ? ThreadLocalRandom.current().nextLong(10_000) : 0;\n      final long maxLifetime = pool.config.getMaxLifetime() - variance;\n      if (maxLifetime > 0) {\n         endOfLife = pool.houseKeepingExecutorService.schedule(new Runnable() {\n            @Override\n            public void run()\n            {\n               // If we can reserve it, close it\n               if (pool.connectionBag.reserve(PoolBagEntry.this)) {\n                  pool.closeConnection(PoolBagEntry.this, \"(connection reached maxLifetime)\");\n               }\n               else {\n                  // else the connection is \"in-use\" and we mark it for eviction by pool.releaseConnection() or the housekeeper\n                  PoolBagEntry.this.evicted = true;\n               }\n            }\n         }, maxLifetime, TimeUnit.MILLISECONDS);\n      }\n   }",
    "info" : "MethodDeclaration[1580-2804]:MethodDeclaration[1594-2818]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[2227-2742]:MethodDeclaration[2241-2756]"
  }, {
    "left" : "void cancelMaxLifeTermination()\n   {\n      if (endOfLife != null) {\n         endOfLife.cancel(false);\n      }\n   }",
    "right" : "void cancelMaxLifeTermination()\n   {\n      if (endOfLife != null) {\n         endOfLife.cancel(false);\n      }\n   }",
    "info" : "MethodDeclaration[2809-2923]:MethodDeclaration[2823-2937]"
  }, {
    "left" : "/** {@inheritDoc} */\n   @Override\n   public AtomicInteger state()\n   {\n      return state;\n   }",
    "right" : "/** {@inheritDoc} */\n   @Override\n   public AtomicInteger state()\n   {\n      return state;\n   }",
    "info" : "MethodDeclaration[2929-3024]:MethodDeclaration[2943-3038]"
  }, {
    "left" : "public ) : String",
    "right" : "public ) : String",
    "info" : "MethodDeclaration[3029-3285]:MethodDeclaration[3043-3299]"
  }, {
    "left" : "private String stateToString()\n   {\n      switch (state.get()) {\n      case STATE_IN_USE:\n         return \"IN_USE\";\n      case STATE_NOT_IN_USE:\n         return \"NOT_IN_USE\";\n      case STATE_REMOVED:\n         return \"REMOVED\";\n      case STATE_RESERVED:\n         return \"RESERVED\";\n      default:\n         return \"Invalid\";\n      }\n   }",
    "right" : "private String stateToString()\n   {\n      switch (state.get()) {\n      case STATE_IN_USE:\n         return \"IN_USE\";\n      case STATE_NOT_IN_USE:\n         return \"NOT_IN_USE\";\n      case STATE_REMOVED:\n         return \"REMOVED\";\n      case STATE_RESERVED:\n         return \"RESERVED\";\n      default:\n         return \"Invalid\";\n      }\n   }",
    "info" : "MethodDeclaration[3290-3627]:MethodDeclaration[3304-3641]"
  } ],
  "mappings" : [
 {
    "left" : "import com.zaxxer.hikari.util.FastList;",
    "right" : "import com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry;",
    "info" : "ImportDeclaration[912-951]:ImportDeclaration[912-976]"
  }, {
    "left" : "import com.zaxxer.hikari.util.IConcurrentBagEntry;",
    "right" : "import com.zaxxer.hikari.util.FastList;",
    "info" : "ImportDeclaration[952-1002]:ImportDeclaration[977-1016]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1109-1115]:Modifier[1123-1129]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[1116-1121]:Modifier[1130-1135]"
  }, {
    "left" : "IConcurrentBagEntry",
    "right" : "IConcurrentBagEntry",
    "info" : "SimpleType[1152-1171]:SimpleType[1166-1185]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1580-1586]:Modifier[1594-1600]"
  }, {
    "left" : "final Connection connection",
    "right" : "final Connection connection",
    "info" : "SingleVariableDeclaration[1600-1627]:SingleVariableDeclaration[1614-1641]"
  }, {
    "left" : "final int networkTimeout",
    "right" : "final int networkTimeout",
    "info" : "SingleVariableDeclaration[1629-1653]:SingleVariableDeclaration[1643-1667]"
  }, {
    "left" : "final HikariPool pool",
    "right" : "final HikariPool pool",
    "info" : "SingleVariableDeclaration[1655-1676]:SingleVariableDeclaration[1669-1690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1678-2804]:Block[1692-2818]"
  }, {
    "left" : "this.connection = connection;",
    "right" : "this.connection = connection;",
    "info" : "ExpressionStatement[1686-1715]:ExpressionStatement[1700-1729]"
  }, {
    "left" : "this.networkTimeout = networkTimeout;",
    "right" : "this.networkTimeout = networkTimeout;",
    "info" : "ExpressionStatement[1722-1759]:ExpressionStatement[1736-1773]"
  }, {
    "left" : "this.parentPool = pool;",
    "right" : "this.parentPool = pool;",
    "info" : "ExpressionStatement[1766-1789]:ExpressionStatement[1780-1803]"
  }, {
    "left" : "this.lastAccess = ClockSource.INSTANCE.currentTime();",
    "right" : "this.lastAccess = ClockSource.INSTANCE.currentTime();",
    "info" : "ExpressionStatement[1796-1849]:ExpressionStatement[1810-1863]"
  }, {
    "left" : "this.openStatements = new FastList<>(Statement.class, 16);",
    "right" : "this.openStatements = new FastList<>(Statement.class, 16);",
    "info" : "ExpressionStatement[1856-1914]:ExpressionStatement[1870-1928]"
  }, {
    "left" : "final long variance = pool.config.getMaxLifetime() > 60_000 ? ThreadLocalRandom.current().nextLong(10_000) : 0;",
    "right" : "final long variance = pool.config.getMaxLifetime() > 60_000 ? ThreadLocalRandom.current().nextLong(10_000) : 0;",
    "info" : "VariableDeclarationStatement[1922-2033]:VariableDeclarationStatement[1936-2047]"
  }, {
    "left" : "final long maxLifetime = pool.config.getMaxLifetime() - variance;",
    "right" : "final long maxLifetime = pool.config.getMaxLifetime() - variance;",
    "info" : "VariableDeclarationStatement[2040-2105]:VariableDeclarationStatement[2054-2119]"
  }, {
    "left" : "if (maxLifetime > 0)",
    "right" : "if (maxLifetime > 0)",
    "info" : "IfStatement[2112-2799]:IfStatement[2126-2813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2133-2799]:Block[2147-2813]"
  }, {
    "left" : "endOfLife = pool.houseKeepingExecutorService.schedule(new Runnable() {\n            @Override\n            public void run()\n            {\n               // If we can reserve it, close it\n               if (pool.connectionBag.reserve(PoolBagEntry.this)) {\n                  pool.closeConnection(PoolBagEntry.this, \"(connection reached maxLifetime)\");\n               }\n               else {\n                  // else the connection is \"in-use\" and we mark it for eviction by pool.releaseConnection() or the housekeeper\n                  PoolBagEntry.this.evicted = true;\n               }\n            }\n         }, maxLifetime, TimeUnit.MILLISECONDS);",
    "right" : "endOfLife = pool.houseKeepingExecutorService.schedule(new Runnable() {\n            @Override\n            public void run()\n            {\n               // If we can reserve it, close it\n               if (pool.connectionBag.reserve(PoolBagEntry.this)) {\n                  pool.closeConnection(PoolBagEntry.this, \"(connection reached maxLifetime)\");\n               }\n               else {\n                  // else the connection is \"in-use\" and we mark it for eviction by pool.releaseConnection() or the housekeeper\n                  PoolBagEntry.this.evicted = true;\n               }\n            }\n         }, maxLifetime, TimeUnit.MILLISECONDS);",
    "info" : "ExpressionStatement[2144-2791]:ExpressionStatement[2158-2805]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2227-2236]:MarkerAnnotation[2241-2250]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2249-2255]:Modifier[2263-2269]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2256-2260]:PrimitiveType[2270-2274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2279-2742]:Block[2293-2756]"
  }, {
    "left" : "if (pool.connectionBag.reserve(PoolBagEntry.this))",
    "right" : "if (pool.connectionBag.reserve(PoolBagEntry.this))",
    "info" : "IfStatement[2345-2728]:IfStatement[2359-2742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2396-2509]:Block[2410-2523]"
  }, {
    "left" : "pool.closeConnection(PoolBagEntry.this, \"(connection reached maxLifetime)\");",
    "right" : "pool.closeConnection(PoolBagEntry.this, \"(connection reached maxLifetime)\");",
    "info" : "ExpressionStatement[2416-2492]:ExpressionStatement[2430-2506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2530-2728]:Block[2544-2742]"
  }, {
    "left" : "PoolBagEntry.this.evicted = true;",
    "right" : "PoolBagEntry.this.evicted = true;",
    "info" : "ExpressionStatement[2678-2711]:ExpressionStatement[2692-2725]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2809-2813]:PrimitiveType[2823-2827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2844-2923]:Block[2858-2937]"
  }, {
    "left" : "if (endOfLife != null)",
    "right" : "if (endOfLife != null)",
    "info" : "IfStatement[2852-2918]:IfStatement[2866-2932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2875-2918]:Block[2889-2932]"
  }, {
    "left" : "endOfLife.cancel(false);",
    "right" : "endOfLife.cancel(false);",
    "info" : "ExpressionStatement[2886-2910]:ExpressionStatement[2900-2924]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2953-2962]:MarkerAnnotation[2967-2976]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2966-2972]:Modifier[2980-2986]"
  }, {
    "left" : "AtomicInteger",
    "right" : "AtomicInteger",
    "info" : "SimpleType[2973-2986]:SimpleType[2987-3000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2998-3024]:Block[3012-3038]"
  }, {
    "left" : "return state;",
    "right" : "return state;",
    "info" : "ReturnStatement[3006-3019]:ReturnStatement[3020-3033]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3029-3038]:MarkerAnnotation[3043-3052]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3042-3048]:Modifier[3056-3062]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3049-3055]:SimpleType[3063-3069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3070-3285]:Block[3084-3299]"
  }, {
    "left" : "return \"Connection......\" + connection + \"\\n\"\n           + \"  Last  access..\" + lastAccess + \"\\n\"\n           + \"  Last open.....\" + lastOpenTime + \"\\n\"\n           + \"  State.........\" + stateToString();",
    "right" : "return \"Connection......\" + connection + \"\\n\"\n           + \"  Last  access..\" + lastAccess + \"\\n\"\n           + \"  Last open.....\" + lastOpenTime + \"\\n\"\n           + \"  State.........\" + stateToString();",
    "info" : "ReturnStatement[3078-3280]:ReturnStatement[3092-3294]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3290-3297]:Modifier[3304-3311]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3298-3304]:SimpleType[3312-3318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3324-3627]:Block[3338-3641]"
  }, {
    "left" : "switch (state.get()) {\n      case STATE_IN_USE:\n         return \"IN_USE\";\n      case STATE_NOT_IN_USE:\n         return \"NOT_IN_USE\";\n      case STATE_REMOVED:\n         return \"REMOVED\";\n      case STATE_RESERVED:\n         return \"RESERVED\";\n      default:\n         return \"Invalid\";\n      }",
    "right" : "switch (state.get()) {\n      case STATE_IN_USE:\n         return \"IN_USE\";\n      case STATE_NOT_IN_USE:\n         return \"NOT_IN_USE\";\n      case STATE_REMOVED:\n         return \"REMOVED\";\n      case STATE_RESERVED:\n         return \"RESERVED\";\n      default:\n         return \"Invalid\";\n      }",
    "info" : "SwitchStatement[3332-3622]:SwitchStatement[3346-3636]"
  }, {
    "left" : "case STATE_IN_USE:",
    "right" : "case STATE_IN_USE:",
    "info" : "SwitchCase[3361-3379]:SwitchCase[3375-3393]"
  }, {
    "left" : "return \"IN_USE\";",
    "right" : "return \"IN_USE\";",
    "info" : "ReturnStatement[3389-3405]:ReturnStatement[3403-3419]"
  }, {
    "left" : "case STATE_NOT_IN_USE:",
    "right" : "case STATE_NOT_IN_USE:",
    "info" : "SwitchCase[3412-3434]:SwitchCase[3426-3448]"
  }, {
    "left" : "return \"NOT_IN_USE\";",
    "right" : "return \"NOT_IN_USE\";",
    "info" : "ReturnStatement[3444-3464]:ReturnStatement[3458-3478]"
  }, {
    "left" : "case STATE_REMOVED:",
    "right" : "case STATE_REMOVED:",
    "info" : "SwitchCase[3471-3490]:SwitchCase[3485-3504]"
  }, {
    "left" : "return \"REMOVED\";",
    "right" : "return \"REMOVED\";",
    "info" : "ReturnStatement[3500-3517]:ReturnStatement[3514-3531]"
  }, {
    "left" : "case STATE_RESERVED:",
    "right" : "case STATE_RESERVED:",
    "info" : "SwitchCase[3524-3544]:SwitchCase[3538-3558]"
  }, {
    "left" : "return \"RESERVED\";",
    "right" : "return \"RESERVED\";",
    "info" : "ReturnStatement[3554-3572]:ReturnStatement[3568-3586]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[3579-3587]:SwitchCase[3593-3601]"
  }, {
    "left" : "return \"Invalid\";",
    "right" : "return \"Invalid\";",
    "info" : "ReturnStatement[3597-3614]:ReturnStatement[3611-3628]"
  } ]
}